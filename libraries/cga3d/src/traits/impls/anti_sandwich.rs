use crate::traits::AntiReverse;
use crate::traits::GeometricAntiProduct;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 1225
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        34      60       0
//  Average:        73      98       0
//  Maximum:      1102    1164       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        69     108       0
//  Average:       139     174       0
//  Maximum:      1984    2068       0
impl InfixAntiSandwich for AntiCircleRotor {}
impl AntiSandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      136        0
    //    simd3        0        1        0
    //    simd4       41       42        0
    // Totals...
    // yes simd      142      179        0
    //  no simd      265      307        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[0] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) + (other.group2()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      124        0
    //    simd3        0        1        0
    //    simd4       55       56        0
    // Totals...
    // yes simd      144      181        0
    //  no simd      309      351        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group3()[2]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group2()[3], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 2, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[2]) + (self.group2()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group3())
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       92        0
    //    simd3        0        1        0
    //    simd4       27       30        0
    // Totals...
    // yes simd       87      123        0
    //  no simd      168      215        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      104        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       89      132        0
    //  no simd      167      215        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       89        0
    //    simd3        0        1        0
    //    simd4       27       31        0
    // Totals...
    // yes simd       86      121        0
    //  no simd      167      216        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       87        0
    //    simd3        0        1        0
    //    simd4       33       36        0
    // Totals...
    // yes simd       90      124        0
    //  no simd      189      234        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      111        0
    //    simd3        0        1        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      115      152        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group1())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      129        0
    //    simd3        0        1        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      123      160        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      127        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      124      165        0
    //  no simd      232      278        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[3]) * -1.0),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[2] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[3] * other.group1()[3]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       88        0
    //    simd3        1        3        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       83      123        0
    //  no simd      178      225        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) * -1.0),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      104        0
    //    simd3        0        1        0
    //    simd4       30       31        0
    // Totals...
    // yes simd       99      136        0
    //  no simd      189      231        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[1]),
            ]) - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[0]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       64        0
    //    simd3        0        2        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       60       84        0
    //  no simd      105      142        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      101        0
    //    simd3        0        1        0
    //    simd4       28       31        0
    // Totals...
    // yes simd       93      133        0
    //  no simd      177      228        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (other.group0()[2] * self.group2()[0]),
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[2] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (other.group0()[0] * self.group2()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      125        0
    //    simd3        0        1        0
    //    simd4       41       42        0
    // Totals...
    // yes simd      131      168        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group2()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group2()[3]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[0] * other.group1()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      120        0
    //    simd3        0        1        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      130      167        0
    //  no simd      265      307        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (other.group0()[2] * self.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      141        0
    //    simd3        0        1        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      143      180        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[0] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group2()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])),
                ((self.group0()[2] * other.group1()[2]) + (other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      113      148        0
    //    simd3        0        1        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      162      199        0
    //  no simd      309      351        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[0] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[0])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (other.group0()[1] * self.group2()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (other.group0()[2] * self.group2()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1]) - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       76        0
    //    simd3        0        1        0
    //    simd4       31       34        0
    // Totals...
    // yes simd       75      111        0
    //  no simd      168      215        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       84        0
    //    simd3        0        1        0
    //    simd4       30       31        0
    // Totals...
    // yes simd       77      116        0
    //  no simd      167      211        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       77        0
    //    simd3        0        1        0
    //    simd4       30       32        0
    // Totals...
    // yes simd       77      110        0
    //  no simd      167      208        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      103        0
    //    simd3        0        1        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      102      135        0
    //  no simd      192      230        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      123        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      127      161        0
    //  no simd      235      274        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      125        0
    //    simd3        0        1        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      120      157        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      119        0
    //    simd3        0        1        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      121      158        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      255        0
    //    simd2        2        2        0
    //    simd3       72       77        0
    //    simd4       55       56        0
    // Totals...
    // yes simd      329      390        0
    //  no simd      640      714        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
                (-(other.group0()[0] * self.group2()[3])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group4()[1] * self.group2()[2])
                    + (self.group2()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[2] * self.group2()[0])
                    + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    + (self.group2()[3] * other.group9()[2])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            ((other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group2()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[1])),
                (-(other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])),
                (-(other.group8()[0] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[3])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[2], other.group1()[1], other.group6()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group7())
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group2()[1]) - (other.group5()[0] * self.group2()[3]) - (self.group1()[3] * other.group9()[0]) - (self.group2()[0] * other[e45])),
                (-(other.group4()[0] * self.group2()[2]) - (other.group5()[1] * self.group2()[3]) - (self.group1()[3] * other.group9()[1]) - (self.group2()[1] * other[e45])),
                (-(other.group4()[1] * self.group2()[0]) - (other.group5()[2] * self.group2()[3]) - (self.group1()[3] * other.group9()[2]) - (self.group2()[2] * other[e45])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group4())
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) - (self.group2()[1] * other.group9()[2])
                    + (self.group2()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) + (self.group2()[0] * other.group9()[2]) - (self.group2()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) - (self.group2()[0] * other.group9()[1])
                    + (self.group2()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[2] * other.group8()[0]) + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group1()[3] * other.group6()[2])),
                (-(other.group8()[2] * self.group1()[2]) - (self.group1()[3] * other[e1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       75        0
    //    simd3        1        3        0
    //    simd4       32       35        0
    // Totals...
    // yes simd       86      113        0
    //  no simd      184      224        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       87        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd       82      125        0
    //  no simd      190      238        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
                0.0,
            ]) + (swizzle!(other.group0(), 1, 1, 1, 0) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[0]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       82        0
    //    simd3        2        4        0
    //    simd4       33       34        0
    // Totals...
    // yes simd       89      120        0
    //  no simd      192      230        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       68        0
    //    simd3        0        3        0
    //    simd4       14       19        0
    // Totals...
    // yes simd       63       90        0
    //  no simd      105      153        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        2        4        0
    //    simd4       32       35        0
    // Totals...
    // yes simd       89      121        0
    //  no simd      189      234        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (self.group2()[0] * other[e4315]),
                (self.group2()[1] * other[e4315]),
                (self.group2()[2] * other[e4315]),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315]) - (self.group2()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       80        0
    //    simd3        0        1        0
    //    simd4       32       34        0
    // Totals...
    // yes simd       81      115        0
    //  no simd      177      219        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())
                + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      131        0
    //    simd3        0        1        0
    //    simd4       56       57        0
    // Totals...
    // yes simd      152      189        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group2()[1] * other.group3()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[3] * other.group2()[3]) + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      151        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      167      204        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[2] * other.group0()[0]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[2] * other.group2()[3]) + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       93        0
    //    simd3        0        1        0
    //    simd4       38       39        0
    // Totals...
    // yes simd       96      133        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[3]]) * self.group2())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      114        0
    //    simd3        0        1        0
    //    simd4       33       35        0
    // Totals...
    // yes simd      111      150        0
    //  no simd      210      257        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (other.group1()[1] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group1()[0] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (other.group1()[0] * self.group2()[2]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[3]]) * self.group2())
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiDipoleInversion {}
impl AntiSandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      144        0
    //    simd3        0        1        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      175      212        0
    //  no simd      373      415        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[3] * self.group2()[0]) + (other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[3] * self.group2()[1]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[3] * self.group2()[2]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[0] * self.group2()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group2()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group2()[3])),
                (-(other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      165      200        0
    //    simd3        0        1        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      232      269        0
    //  no simd      433      475        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * swizzle!(self.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       91        0
    //    simd3        0        1        0
    //    simd4       44       49        0
    // Totals...
    // yes simd      106      141        0
    //  no simd      238      290        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      105        0
    //    simd3        0        1        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      112      149        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       89        0
    //    simd3        0        1        0
    //    simd4       44       49        0
    // Totals...
    // yes simd      106      139        0
    //  no simd      238      288        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      146        0
    //    simd3        0        1        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      149      188        0
    //  no simd      269      313        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      160        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      175      213        0
    //  no simd      328      371        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group3()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[1] * other.group1()[2]) + (self.group3()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[2] * other.group1()[0]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) - (self.group2()[0] * other.group1()[1]) + (self.group3()[0] * other.group0()[1]) + (self.group3()[2] * other.group1()[3])),
                ((self.group2()[2] * other.group1()[2]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 3, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group2()[1], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      157        0
    //    simd3        0        1        0
    //    simd4       44       45        0
    // Totals...
    // yes simd      166      203        0
    //  no simd      298      340        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      135        0
    //    simd3        0        1        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      157      194        0
    //  no simd      328      370        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group2(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      131        0
    //    simd3        0        1        0
    //    simd4       42       45        0
    // Totals...
    // yes simd      142      177        0
    //  no simd      268      314        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group1())
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      107        0
    //    simd3        0        1        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      119      159        0
    //  no simd      269      314        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) * -1.0),
                ((self.group3()[1] * other.group0()[0]) * -1.0),
                ((self.group3()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group0()[0]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[0]) - (self.group2()[3] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[3])),
                (self.group3()[3] * other.group0()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77       96        0
    //    simd3        0        2        0
    //    simd4       33       37        0
    // Totals...
    // yes simd      110      135        0
    //  no simd      209      250        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      105        0
    //    simd3        0        1        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      115      153        0
    //  no simd      253      296        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[2]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2])),
                (other.group0()[2] * self.group3()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      162      197        0
    //    simd3        0        1        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      211      248        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group3()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group3()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[1] * self.group2()[2])
                    - (other.group2()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[1])
                    - (other.group2()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      153      188        0
    //    simd3        0        1        0
    //    simd4       55       56        0
    // Totals...
    // yes simd      208      245        0
    //  no simd      373      415        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[0])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[1] * other.group2()[2])
                    + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group2()[1])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group3()[0] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group3()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group0()[1] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) - (other.group2()[2] * self.group3()[0])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group3()[1] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      144        0
    //    simd3        0        1        0
    //    simd4       81       82        0
    // Totals...
    // yes simd      190      227        0
    //  no simd      433      475        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (self.group2()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group3()[1])
                    - (self.group3()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group3()[2])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2]) - (self.group3()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0]) - (self.group3()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (other.group0()[0] * self.group2()[1]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1])
                    + (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      121        0
    //    simd3        0        1        0
    //    simd4       36       39        0
    // Totals...
    // yes simd      130      161        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      121        0
    //    simd3        0        1        0
    //    simd4       36       40        0
    // Totals...
    // yes simd      130      162        0
    //  no simd      238      284        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            ((Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      121        0
    //    simd3        0        1        0
    //    simd4       37       40        0
    // Totals...
    // yes simd      128      162        0
    //  no simd      239      284        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      124        0
    //    simd3        0        1        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      130      172        0
    //  no simd      268      315        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      135        0
    //    simd3        0        1        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      158      194        0
    //  no simd      329      370        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1]) + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      185        0
    //    simd3        0        1        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      187      224        0
    //  no simd      298      340        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      167        0
    //    simd3        0        1        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      181      218        0
    //  no simd      328      370        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) - (self.group2()[3] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      258      313        0
    //    simd2       22       22        0
    //    simd3      106      111        0
    //    simd4       69       70        0
    // Totals...
    // yes simd      455      516        0
    //  no simd      896      970        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group1()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group9()[0])
                    + (self.group3()[1] * other.group9()[1])
                    + (self.group3()[2] * other.group9()[2])),
                ((self.group1()[3] * other.group6()[3]) - (self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    - (other.group8()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[2])
                    - (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[2] * self.group2()[0])
                    - (other.group8()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    - (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (self.group3()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group5()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[1] * other.group9()[2])
                    + (self.group3()[3] * other.group9()[0])),
                (-(other.group5()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group3()[3] * other.group9()[1])),
                (-(other.group5()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    - (self.group3()[3] * other[e45])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self.group3()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group9()[2]) + (self.group3()[2] * other.group9()[1])),
                ((self.group3()[0] * other.group9()[2]) - (self.group3()[2] * other.group9()[0])),
                (-(self.group3()[0] * other.group9()[1]) + (self.group3()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group3()[0] * other.group6()[3])
                    + (self.group3()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    + (other.group8()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group3()[1] * other.group6()[3])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other[e1])
                    - (self.group3()[0] * other.group6()[0])
                    - (self.group3()[1] * other.group6()[1])
                    - (self.group3()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                + (Simd32x3::from([self.group3()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group2()[1] * other.group6()[2]) + (self.group2()[2] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group6()[0])),
                ((self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[1] * self.group2()[2]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group9()[2]) + (self.group2()[3] * other.group3()[0])),
                ((other.group4()[2] * self.group2()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group9()[0]) + (self.group2()[3] * other.group3()[1])),
                ((other.group4()[0] * self.group2()[1]) + (self.group1()[0] * other.group9()[1]) + (self.group1()[2] * other.group3()[3]) + (self.group2()[3] * other.group3()[2])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self.group2()[3]) - (self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1])
                + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                + (other.group4()[0] * self.group3()[0])
                - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (self.group1()[3] * other[e45])
                - (self.group2()[3] * other.group3()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       95        0
    //    simd3        0        1        0
    //    simd4       51       54        0
    // Totals...
    // yes simd      116      150        0
    //  no simd      269      314        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      127        0
    //    simd3        0        1        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      136      174        0
    //  no simd      271      314        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) * -1.0),
                ((self.group3()[1] * other.group0()[0]) * -1.0),
                ((self.group3()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[2] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[1]),
                (self.group3()[1] * other.group0()[1]),
                (self.group3()[2] * other.group0()[1]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (swizzle!(other.group0(), 0, 0, 0, 3) * self.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      111      142        0
    //    simd3        0        1        0
    //    simd4       43       46        0
    // Totals...
    // yes simd      154      189        0
    //  no simd      283      329        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other[e2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other[e2]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other[e2]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                (-(self.group0()[1] * other[e2]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       64        0
    //    simd3        0        2        0
    //    simd4       40       48        0
    // Totals...
    // yes simd       89      114        0
    //  no simd      209      262        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      103        0
    //    simd3        0        1        0
    //    simd4       53       56        0
    // Totals...
    // yes simd      124      160        0
    //  no simd      283      330        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other[e4315])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other[e4315])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) + (self.group3()[2] * other.group0()[1])),
                ((self.group2()[1] * other[e4315]) + (self.group3()[0] * other.group0()[2])),
                ((self.group2()[2] * other[e4315]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group3()[3] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other[e4315]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      125        0
    //    simd3        0        1        0
    //    simd4       40       43        0
    // Totals...
    // yes simd      134      169        0
    //  no simd      254      300        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group2()[0]),
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[2] * self.group2()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (other.group0()[2] * self.group3()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                (-(self.group0()[2] * other.group0()[1]) + (other.group0()[2] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      199        0
    //    simd3        0        1        0
    //    simd4       71       72        0
    // Totals...
    // yes simd      235      272        0
    //  no simd      448      490        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group3()[2])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[1])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group3()[1] * other.group2()[2]) + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group3()[2] * other.group2()[0]) + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group2()[2]) + (self.group3()[2] * other.group2()[3]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group2()[0])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[1])
                    + (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[3])
                    - (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[2], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 3, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      139        0
    //    simd3        0        1        0
    //    simd4       86       87        0
    // Totals...
    // yes simd      190      227        0
    //  no simd      448      490        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                    - (self.group3()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group2()[0]) - (self.group3()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group2()[1]) - (self.group3()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group2()[3] * other.group2()[2]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group2()[3] * other.group2()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group2()[3] * other.group2()[1]) + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group3()[1]) + (self.group2()[3] * other.group2()[2]) + (self.group3()[1] * other.group1()[0])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      146        0
    //    simd3        0        1        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      157      195        0
    //  no simd      298      341        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                ((self.group3()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group1())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group1()[1]]) * self.group3())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                (-(other.group1()[0] * self.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      118        0
    //    simd3        0        1        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      136      174        0
    //  no simd      298      341        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) + (other.group1()[1] * self.group0()[0])
                    - (self.group0()[1] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) + (other.group1()[1] * self.group0()[1])
                    - (self.group0()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[1] * self.group0()[2])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group3()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group2())
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                ((other.group1()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group3()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[1] * self.group3()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group3()[2]) + (self.group1()[0] * other.group0()[1])),
                ((other.group1()[1] * self.group3()[3]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiDualNum321 {}
impl AntiSandwich<AntiCircleRotor> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       26        0
    //    simd4        4       10        0
    // Totals...
    // yes simd       12       36        0
    //  no simd       24       66        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       29        0
    //    simd4        5       12        0
    // Totals...
    // yes simd       15       41        0
    //  no simd       30       77        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiDualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd2        1        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        4        9        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = DualNum321::from_groups(/* e321, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       18        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       18        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       28        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        8       31        0
    //  no simd       11       40        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       29        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       20       65        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       32        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       17       56        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        4       12        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       20       62        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group1()) - (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       30        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        9       35        0
    //  no simd       15       50        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        8       21        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2        7        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        6       20        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd4        3       10        0
    // Totals...
    // yes simd       13       36        0
    //  no simd       22       66        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        4       11        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       24       67        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd4        3       10        0
    // Totals...
    // yes simd       13       36        0
    //  no simd       22       66        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       32        0
    //    simd4        4       10        0
    // Totals...
    // yes simd       18       42        0
    //  no simd       30       72        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiDualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd2        1        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        4        9        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiDualNum321::from_groups(
            // e45, scalar
            (-(Simd32x2::from(other.group0()[0]) * swizzle!(self.group0(), 1, 0)) + (Simd32x2::from(other.group0()[1]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       24        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       11       32        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        4       11        0
    // Totals...
    // yes simd        8       29        0
    //  no simd       20       62        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       11       33        0
    //  no simd       17       48        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       20       57        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDualNum321 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       49        0
    //    simd2        2        6        0
    //    simd3        8       16        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       37       80        0
    //  no simd       64      145        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[1]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[1] * other.group9()[2])),
                (-(self.group0()[0] * other[e45]) - (self.group0()[1] * other[e45])),
            ]),
            // e5
            ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[1])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group8()[2])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group5()[1])),
                (-(self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group5()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group4()) - (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group6()[2]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other[e1]) + (self.group0()[1] * other[e1])),
            ]),
            // e1234
            ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       28        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        9       34        0
    //  no simd       15       52        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        8       21        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[1], self.group0()[0]])
                * swizzle!(other.group0(), 0, 1, 2, 2)
                * Simd32x4::from([1.0, -1.0, -1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 3, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       32        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       10       37        0
    //  no simd       16       52        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        1        4        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        2        9        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from([1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       30        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       10       36        0
    //  no simd       16       54        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e4315]) - (self.group0()[1] * other[e4315]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       15        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       29        0
    //    simd4        5       13        0
    // Totals...
    // yes simd       17       42        0
    //  no simd       32       81        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        5       12        0
    // Totals...
    // yes simd       17       37        0
    //  no simd       32       73        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        3       10        0
    // Totals...
    // yes simd        9       30        0
    //  no simd       18       60        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd4        3       10        0
    // Totals...
    // yes simd        9       28        0
    //  no simd       18       58        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiDualNum4 {}
impl AntiSandwich<AntiCircleRotor> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       53        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       18       55        0
    //  no simd       24       61        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       33        0
    //    simd4        5       11        0
    // Totals...
    // yes simd       16       44        0
    //  no simd       31       77        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiDualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2       11        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       14       58        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        4       10        0
    // Totals...
    // yes simd        9       33        0
    //  no simd       21       63        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       45        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       17       47        0
    //  no simd       17       51        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       42        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       15       48        0
    //  no simd       21       66        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd4        4       11        0
    // Totals...
    // yes simd        5       23        0
    //  no simd       17       56        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       17        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       15        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        1        2        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       12       36        0
    //  no simd       20       64        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       34        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       12       42        0
    //  no simd       24       66        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       44        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       47        0
    //  no simd       20       54        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       46        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       22       53        0
    //  no simd       31       74        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       14        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[1])),
            0.0,
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiDualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       14        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       33        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       14       49        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       42        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       15       48        0
    //  no simd       21       66        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd3        0        1        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       11       32        0
    //  no simd       17       58        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       27        0
    //    simd4        4        9        0
    // Totals...
    // yes simd        9       36        0
    //  no simd       21       63        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDualNum4 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       60        0
    //    simd3       10       20        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       35       85        0
    //  no simd       64      140        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group9()[0]),
                (self.group0()[1] * other.group9()[1]),
                (self.group0()[1] * other.group9()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())),
            // e5
            (self.group0()[1] * other.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group8()[0]),
                (self.group0()[1] * other.group8()[1]),
                (self.group0()[1] * other.group8()[2]),
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group5()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group5()[2])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other[e1]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       33        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       11       37        0
    //  no simd       17       49        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       17        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       13        0
    //    simd4        4       11        0
    // Totals...
    // yes simd        5       24        0
    //  no simd       17       57        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       11       36        0
    //  no simd       17       54        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       15        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       27        0
    //    simd4        7       13        0
    // Totals...
    // yes simd       13       40        0
    //  no simd       34       79        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (Simd32x4::from(self.group0()[0]) * other.group2())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       43        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       19       50        0
    //  no simd       34       71        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       19        0
    //    simd4        4       10        0
    // Totals...
    // yes simd        7       29        0
    //  no simd       19       59        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       40        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       42        0
    //  no simd       19       48        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiDualNum5 {}
impl AntiSandwich<AntiCircleRotor> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       36        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       14       44        0
    //  no simd       23       68        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * other.group1()) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       46        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       21       52        0
    //  no simd       30       70        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       16        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1] * -1.0),
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[0] * self.group0()[0] * -1.0),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiDualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       22        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       28        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDualNum5 {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * other.group0()) - (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDualNum5 {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * other.group0()) - (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       26        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       17        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       40        0
    //    simd3        0        1        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       15       46        0
    //  no simd       21       63        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       46        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       17       50        0
    //  no simd       23       62        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd3        0        2        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       20       65        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       41        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       16       51        0
    //  no simd       31       81        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) * -1.0),
                ((self.group0()[1] * other.group2()[1]) * -1.0),
                ((self.group0()[1] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * other.group1())
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       14        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[1])),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiDualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       26        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       28        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDualNum5 {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDualNum5 {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDualNum5 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       72        0
    //    simd3        6       16        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       37       95        0
    //  no simd       64      148        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other[e45]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group9()[0])),
                (-(self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group9()[1])),
                (-(self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other[e45] * -1.0),
            ]),
            // e5
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group8()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group8()[1])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group8()[2])),
                ((self.group0()[1] * other.group6()[3]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[0]) * other.group1())),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                ((self.group0()[1] * other.group1()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other[e1])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))),
            // e1234
            (self.group0()[1] * other.group1()[3]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       22        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       24        0
    //  no simd        4       30        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       17        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       10       34        0
    //  no simd       16       55        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       10       35        0
    //  no simd       16       59        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       55        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       23       59        0
    //  no simd       32       71        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       39        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       17       49        0
    //  no simd       32       79        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       41        0
    //  no simd       18       56        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       35        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       41        0
    //  no simd       18       59        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiFlatPoint {}
impl AntiSandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       67        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       53       80        0
    //  no simd       83      119        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       72        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       56       88        0
    //  no simd       95      136        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0]) + (other.group3()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1]) + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[3] * self.group0()[3])])
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group0(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       23       44        0
    //  no simd       32       62        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       29       54        0
    //  no simd       47       87        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       15       31        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       24       44        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       20       46        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       24       52        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       32        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       18       40        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       50        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       36       61        0
    //  no simd       54       94        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       15        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       37        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       29       50        0
    //  no simd       47       89        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       68        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       46       80        0
    //  no simd       73      116        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group2()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       50       81        0
    //  no simd       80      120        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       70        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       49       82        0
    //  no simd       76      118        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       80        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       62       93        0
    //  no simd       98      132        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[3] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       23       48        0
    //  no simd       32       60        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       42        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       27       52        0
    //  no simd       45       82        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       29        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       15       36        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       24       52        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       20       39        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       24       44        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       94        0
    //    simd2        6       10        0
    //    simd3       14       22        0
    //    simd4       21       24        0
    // Totals...
    // yes simd      103      150        0
    //  no simd      200      276        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group0(), 0, 1, 0, 2))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            (self.group0()[3] * other[e45] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       35        0
    //  no simd       21       44        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       44        0
    //    simd4        6       12        0
    // Totals...
    // yes simd       33       56        0
    //  no simd       51       92        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2])]),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       60        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       36       67        0
    //  no simd       54       88        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       61        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       38       68        0
    //  no simd       56       89        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       39        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       27       50        0
    //  no simd       45       83        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd4       14       18        0
    // Totals...
    // yes simd       54       86        0
    //  no simd       96      140        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       76        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       63       92        0
    //  no simd      102      140        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       64        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       39       71        0
    //  no simd       57       92        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[0] * self.group0()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       66        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       41       73        0
    //  no simd       59       94        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiFlector {}
impl AntiSandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       98        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       92      130        0
    //  no simd      185      226        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group1()[0]) * -1.0),
                ((other.group1()[3] * self.group1()[1]) * -1.0),
                ((other.group1()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group2()[2] * self.group1()[2]) + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       88        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      100      129        0
    //  no simd      220      252        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[0] * self.group1()[2])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group0(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       75        0
    //    simd4       19       21        0
    // Totals...
    // yes simd       60       96        0
    //  no simd      117      159        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       67        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       60       91        0
    //  no simd      117      163        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       40        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       26       47        0
    //  no simd       44       68        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       26       36        0
    //  no simd       56       72        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       36       49        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 2, 0, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       83        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       69      106        0
    //  no simd      129      175        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (-(self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       76        0
    //    simd4       19       22        0
    // Totals...
    // yes simd       64       98        0
    //  no simd      121      164        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       96        0
    //    simd4       28       29        0
    // Totals...
    // yes simd       93      125        0
    //  no simd      177      212        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[1]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       92        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       93      124        0
    //  no simd      186      220        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[3]) + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[3]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       95        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       90      125        0
    //  no simd      177      215        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group1()[0] * other.group1()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group1()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group1()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group2()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      103        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      110      141        0
    //  no simd      221      255        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[3] * other.group3()[0]) - (self.group1()[1] * other.group3()[2])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[3] * other.group3()[1]) - (self.group1()[2] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[3] * other.group3()[2]) - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[2]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       52        0
    //    simd4       22       24        0
    // Totals...
    // yes simd       51       76        0
    //  no simd      117      148        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       57        0
    //    simd4       21       25        0
    // Totals...
    // yes simd       54       82        0
    //  no simd      117      157        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       20       37        0
    //  no simd       44       64        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       80      101        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      135      186        0
    //    simd2        8        8        0
    //    simd3       42       46        0
    //    simd4       44       45        0
    // Totals...
    // yes simd      229      285        0
    //  no simd      453      520        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[2])),
                ((self.group0()[3] * other.group6()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group6()[0]) - (self.group1()[2] * other.group6()[1])),
                ((other.group7()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1]) - (self.group1()[0] * other.group6()[2])),
                ((other.group7()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group6()[2]) - (self.group1()[1] * other.group6()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                + (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group0()[3] * other.group3()[0]) + (self.group1()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[3] * other.group9()[1])),
                (-(self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[3] * other.group9()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group0(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group9()[2]) + (self.group1()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group9()[1]) + (self.group1()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group6()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group6()[3])),
                (-(other.group7()[1] * self.group0()[1])
                    - (other.group7()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       60        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       57       87        0
    //  no simd      129      168        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()) + (swizzle!(other.group0(), 2, 2, 2, 0) * self.group1())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 1, 1, 3) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 1) * self.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4       23       26        0
    // Totals...
    // yes simd       68      101        0
    //  no simd      137      179        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       40       68        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      103        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       80      123        0
    //  no simd      137      183        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       57        0
    //    simd4       22       26        0
    // Totals...
    // yes simd       55       83        0
    //  no simd      121      161        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       84        0
    //    simd4       43       44        0
    // Totals...
    // yes simd      100      128        0
    //  no simd      229      260        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group3()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 1, 3, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group2())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      102        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      229      266        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) * -1.0),
                ((self.group1()[1] * other.group2()[3]) * -1.0),
                ((self.group1()[2] * other.group2()[3]) * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[3] * other.group3()[0]) - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[3] * other.group3()[1]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[3] * other.group3()[2]) - (self.group1()[2] * other.group1()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       76        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       68      103        0
    //  no simd      146      184        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       98        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       80      121        0
    //  no simd      146      190        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group1()[0] * -1.0),
                (other.group1()[0] * self.group1()[1] * -1.0),
                (other.group1()[0] * self.group1()[2] * -1.0),
                ((other.group1()[0] * self.group1()[3]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) * -1.0),
                ((other.group1()[1] * self.group1()[1]) * -1.0),
                ((other.group1()[1] * self.group1()[2]) * -1.0),
                ((other.group1()[1] * self.group1()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiLine {}
impl AntiSandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      130      168        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       98      130        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      112      146        0
    //  no simd      154      192        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group3()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       97        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       71      101        0
    //  no simd       77      111        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      100        0
    //    simd3        0        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       71      106        0
    //  no simd       77      120        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        1        6        0
    // Totals...
    // yes simd       20       33        0
    //  no simd       22       45        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * self.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group0()) - (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       39        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       45        0
    //  no simd       36       61        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       82        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       20       40        0
    //  no simd       41       71        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      103        0
    //    simd3        0        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       80      109        0
    //  no simd       86      123        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      100        0
    //    simd3        0        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       74      106        0
    //  no simd       80      120        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      108        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       88      122        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      114        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       94      128        0
    //  no simd      130      168        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      106      140        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      154        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      154      192        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       81        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       59       89        0
    //  no simd       77      111        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       81        0
    //    simd3        0        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       59       90        0
    //  no simd       77      114        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        1        5        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       36       57        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       82        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      186      226        0
    //    simd3       34       44        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      228      278        0
    //  no simd      320      390        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
                ((self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1]) + (self.group0()[2] * other.group4()[2])),
            ]),
            // e5
            ((self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                + (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group5()[2])
                + (self.group1()[2] * other.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group6()[1], other.group7()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], other.group0()[1], other.group1()[0], other.group7()[1]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group6()[0], other.group0()[1], other.group7()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (self.group0()[1] * other.group5()[2]) + (self.group0()[2] * other.group5()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[2] * other.group5()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group5()[0])
                    - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group0(), 1, 2, 2))
                - (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group1()) - (Simd32x3::from([other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 2))
                - (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group7()[2])
                    + (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group1()[0] * other.group7()[1]) + (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       20       39        0
    //  no simd       41       70        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       87        0
    //    simd3        0        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       68       96        0
    //  no simd       86      120        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       89        0
    //    simd3        0        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       69       99        0
    //  no simd       90      126        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        6        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       19       45        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      108        0
    //    simd3        0        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       81      115        0
    //  no simd       90      132        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[1] * other[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       84        0
    //    simd3        0        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       93        0
    //  no simd       80      117        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) - (self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      161        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       91        0
    //    simd3        0        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       72      102        0
    //  no simd       96      132        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      111        0
    //    simd3        0        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       87      118        0
    //  no simd       96      135        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[1] * self.group1()[0]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group1()[1]) - (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group1()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) - (self.group0()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[2]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiMotor {}
impl AntiSandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      121        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      106      147        0
    //  no simd      184      225        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd4       42       43        0
    // Totals...
    // yes simd       97      125        0
    //  no simd      223      254        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[2] * self.group0()[2])])
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group2()[2] * self.group0()[2]) + (other.group3()[2] * self.group1()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       71        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       62       92        0
    //  no simd      116      155        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group1()) - (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       82        0
    //    simd4       17       21        0
    // Totals...
    // yes simd       65      103        0
    //  no simd      116      166        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       23       40        0
    //  no simd       44       70        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group0()) - (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       46        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       88      102        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 1, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       64       82        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       82        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       68      105        0
    //  no simd      128      174        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (-(self.group0()[3] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 0, 0, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1()) - (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       82        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       66      103        0
    //  no simd      120      166        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       86        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       84      118        0
    //  no simd      177      214        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       86        0
    //    simd4       33       34        0
    // Totals...
    // yes simd       89      120        0
    //  no simd      188      222        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      118        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      104      142        0
    //  no simd      176      214        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      122        0
    //    simd4       33       33        0
    // Totals...
    // yes simd      118      155        0
    //  no simd      217      254        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       53        0
    //    simd4       23       26        0
    // Totals...
    // yes simd       48       79        0
    //  no simd      117      157        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       55        0
    //    simd4       23       26        0
    // Totals...
    // yes simd       48       81        0
    //  no simd      117      159        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       44       66        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       50        0
    //  no simd       56       74        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       88      102        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      179        0
    //    simd3       40       44        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      221      275        0
    //  no simd      454      519        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[2] * self.group1()[2])
                    + (other.group5()[0] * self.group0()[0])
                    + (other.group5()[1] * self.group0()[1])
                    + (other.group5()[2] * self.group0()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                0.0,
            ]) + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group4()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group1()[0])
                + (other.group5()[1] * self.group1()[1])
                + (other.group5()[2] * self.group1()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                - (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group9()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group6()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                (-(self.group1()[1] * other.group6()[3]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                (-(self.group1()[1] * other.group6()[0]) - (self.group1()[2] * other.group6()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group6()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group8()[2], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[2]]) * swizzle!(self.group1(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[1]]) * swizzle!(self.group1(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[2], other.group1()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 0, 3))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[1] * self.group1()[3]) - (self.group1()[1] * other[e45])),
                (-(other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                ((other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group9()[1]]) * swizzle!(self.group0(), 3, 2, 0, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group9()[2]]) * swizzle!(self.group0(), 1, 3, 3, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group6()[3])),
            ]) - (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group7()[2], other.group7()[1], other.group7()[2], other.group6()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group8()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other[e1]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       68       82        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       69        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       57       94        0
    //  no simd      129      169        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       70        0
    //    simd4       24       26        0
    // Totals...
    // yes simd       65       96        0
    //  no simd      137      174        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       40       70        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       98        0
    //    simd4       19       21        0
    // Totals...
    // yes simd       79      119        0
    //  no simd      136      182        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       66        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       52       90        0
    //  no simd      121      162        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       86        0
    //    simd4       42       44        0
    // Totals...
    // yes simd      102      130        0
    //  no simd      228      262        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group0()[3]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[1] * other.group3()[1]) + (self.group1()[2] * other.group3()[2]) + (self.group1()[3] * other.group0()[3]) - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      122        0
    //    simd4       35       35        0
    // Totals...
    // yes simd      120      157        0
    //  no simd      225      262        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group2()[3]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       74        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       70      101        0
    //  no simd      148      182        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[1] * self.group0()[3]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]))])
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[3]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       98        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       81      120        0
    //  no simd      147      186        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(other.group1()[0]) * self.group1())
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiPlane {}
impl AntiSandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       32        0
    //    simd3        1        2        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       27       53        0
    //  no simd       80      114        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group2()[3] * self.group0()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       54        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       44       73        0
    //  no simd       95      130        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group3()[2] * self.group0()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       37        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       47        0
    //  no simd       49       77        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       32        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       19       46        0
    //  no simd       49       88        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       39        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       26       45        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       33       53        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       44       60        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       28       47        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       41        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       20       55        0
    //  no simd       50       97        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        8       19        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       35        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       19       49        0
    //  no simd       49       91        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        1        2        0
    //    simd4       11       15        0
    // Totals...
    // yes simd       34       59        0
    //  no simd       69      108        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        1        2        0
    //    simd4       12       16        0
    // Totals...
    // yes simd       35       60        0
    //  no simd       73      112        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       33        0
    //    simd3        1        2        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       26       53        0
    //  no simd       76      111        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group2()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       47        0
    //    simd4       20       22        0
    // Totals...
    // yes simd       37       69        0
    //  no simd       97      135        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group2()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       21       42        0
    //  no simd       45       72        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       38        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       24       48        0
    //  no simd       48       78        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       35        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       29       44        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       33       49        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       97        0
    //    simd2        2        2        0
    //    simd3       20       26        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       92      146        0
    //  no simd      197      263        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group9()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group6()[1]) * -1.0),
                ((self.group0()[0] * other.group6()[2]) * -1.0),
                ((self.group0()[1] * other.group6()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e5
            ((other.group0()[1] * self.group0()[3])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (self.group0()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group0()[3] * other.group9()[0]),
                (self.group0()[3] * other.group9()[1]),
                (self.group0()[3] * other.group9()[2]),
                0.0,
            ]) + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[3]) * other.group4())
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group6()[1]) - (self.group0()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group3()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e1234
            ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       28       46        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       25       52        0
    //  no simd       49       85        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       35        0
    //    simd3        1        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       44        0
    //  no simd       41       67        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group0())
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       34        0
    //    simd3        1        4        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       18       45        0
    //  no simd       41       74        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e4315]))])
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       24       48        0
    //  no simd       48       81        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       57        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       43       76        0
    //  no simd      100      133        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group3()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       46        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       38       69        0
    //  no simd      101      138        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       60        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       33       68        0
    //  no simd       57       92        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       54        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       28       66        0
    //  no simd       58      102        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiQuadNum {}
impl AntiSandwich<AntiCircleRotor> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd4       16       20        0
    // Totals...
    // yes simd       31       60        0
    //  no simd       79      120        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group2()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[3]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[2]),
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                - (swizzle!(self.group0(), 3, 3, 3, 1) * other.group2())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       47        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       39       68        0
    //  no simd       93      131        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group3()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) + (other.group3()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[2]) - (other.group3()[1] * self.group0()[1])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group3()[2] * self.group0()[1])),
                (other.group2()[3] * self.group0()[3]),
            ]) + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group1())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       16       25        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       16       26        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       16       26        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd4        9       16        0
    // Totals...
    // yes simd       24       46        0
    //  no simd       51       94        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       38        0
    //    simd4       12       16        0
    // Totals...
    // yes simd       31       54        0
    //  no simd       67      102        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[1])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[3] * self.group0()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       54        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       33       64        0
    //  no simd       57       92        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       41        0
    //    simd4       12       17        0
    // Totals...
    // yes simd       28       58        0
    //  no simd       64      109        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[0] * -1.0),
                (-(other.group0()[3] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1()) - (Simd32x4::from(self.group0()[3]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       35        0
    //    simd4        9       15        0
    // Totals...
    // yes simd       22       50        0
    //  no simd       49       95        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       24       33        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 0) * swizzle!(self.group0(), 2, 3, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       21        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       20       29        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 3, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       45       76        0
    //  no simd       72      112        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[1])),
                (-(other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       46        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       33       64        0
    //  no simd       78      118        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[2])),
                ((self.group0()[3] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[1]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) * -1.0),
                0.0,
            ]) + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group1())
                + (swizzle!(self.group0(), 3, 3, 3, 0) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       59        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       42       73        0
    //  no simd       72      115        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[0] * self.group0()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[1] * self.group0()[3]) - (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) - (other.group2()[2] * self.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       45        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       37       68        0
    //  no simd       94      137        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))
                - (swizzle!(self.group0(), 0, 0, 0, 2) * other.group1())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[1]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) * -1.0),
                ((self.group0()[3] * other.group2()[1]) * -1.0),
                ((self.group0()[3] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 1, 1, 3) * other.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       17        0
    //  no simd       16       29        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[0], other.group0()[0]])
                * swizzle!(self.group0(), 0, 1, 3, 2)
                * Simd32x4::from([1.0, -1.0, -1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[1]]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       16       25        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       16       25        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       27        0
    //    simd4       10       17        0
    // Totals...
    // yes simd       21       44        0
    //  no simd       51       95        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[2] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd4       12       17        0
    // Totals...
    // yes simd       28       54        0
    //  no simd       64      105        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       50        0
    //    simd3        0        1        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       31       60        0
    //  no simd       58       89        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       38        0
    //    simd4       12       16        0
    // Totals...
    // yes simd       31       54        0
    //  no simd       67      102        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[3]) * -1.0)])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiQuadNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       85        0
    //    simd2        2        2        0
    //    simd3       24       32        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       94      137        0
    //  no simd      192      257        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group9()[2])),
                (-(self.group0()[2] * other[e45]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
            // e5
            (-(other.group0()[0] * self.group0()[1]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[3]) - (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            ((Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 1, 1, 1, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group9()[0])),
                (-(other.group5()[1] * self.group0()[3]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[1])),
                (-(other.group5()[2] * self.group0()[3]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group9()[2])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())
                - (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group5())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e1234
            ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4       10       18        0
    // Totals...
    // yes simd       19       46        0
    //  no simd       49      100        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       24       33        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 0) * swizzle!(other.group0(), 2, 3, 1, 1))
                + (swizzle!(self.group0(), 0, 3, 2, 1) * swizzle!(other.group0(), 3, 1, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       50        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       25       62        0
    //  no simd       52       98        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other[e2]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other[e2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       25        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       43        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       22       57        0
    //  no simd       52       99        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other[e4315])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       18        0
    //  no simd       20       33        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[0], other.group0()[2]])
                * swizzle!(self.group0(), 0, 2, 1, 3)
                * Simd32x4::from([1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 2, 3, 0, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd4       20       28        0
    // Totals...
    // yes simd       36       57        0
    //  no simd       96      141        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group3())
                + (swizzle!(self.group0(), 2, 2, 2, 3) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * other.group2())
                + (swizzle!(self.group0(), 1, 1, 1, 2) * other.group0())
                - (swizzle!(self.group0(), 2, 2, 2, 1) * other.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group2()[2])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       37        0
    //    simd4       19       26        0
    // Totals...
    // yes simd       39       63        0
    //  no simd       96      141        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]])
                * swizzle!(self.group0(), 0, 0, 0, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group3()[1]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) - (swizzle!(self.group0(), 0, 0, 0, 1) * other.group2())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       54        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       29       66        0
    //  no simd       56      102        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       47        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       26       61        0
    //  no simd       56      103        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[3]) - (self.group0()[0] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiScalar {}
impl AntiSandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiScalar {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiScalar {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiScalar {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiScalar {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiScalar::from_groups(/* e12345 */ (other[e12345] * self[e12345]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiScalar {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiScalar {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiScalar {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiScalar {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e5
            (self[e12345] * other[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group9()),
            // e1234
            (self[e12345] * other[e45]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiScalar {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e12345]) * other.group0()), /* e5 */ (self[e12345] * other[e2]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Scalar::from_groups(/* scalar */ (self[e12345] * other[scalar]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1234
            (self[e12345] * other[e4315]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiScalar {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiScalar {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       12        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e5, e12345
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiScalar {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       12        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1234, scalar
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for AntiTripleNum {}
impl AntiSandwich<AntiCircleRotor> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       46        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       28       56        0
    //  no simd       49       86        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group1()) - (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[1]]) * other.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[2] * self.group0()[1]),
                (self.group0()[0] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       48        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       29       60        0
    //  no simd       62       96        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group3()[2])),
                (self.group0()[2] * other.group3()[3]),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       10       19        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2] * -1.0),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       10       20        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
            (other.group0()[0] * self.group0()[1] * -1.0),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       10       19        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0] * -1.0),
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       30        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       15       40        0
    //  no simd       30       70        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       40        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       48        0
    //  no simd       40       72        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       45        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       23       51        0
    //  no simd       35       67        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       50        0
    //  no simd       40       83        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group0()) - (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       32       67        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       18        0
    //  no simd       16       24        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 3, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       12        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       18        0
    //  no simd       13       21        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
            (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       56        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       28       63        0
    //  no simd       45       82        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       38        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       25       49        0
    //  no simd       49       82        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())
                + (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       55        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       30       61        0
    //  no simd       44       77        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       54        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       32       66        0
    //  no simd       62      102        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[1] * other.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[1]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       10       19        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2] * -1.0),
            (other.group0()[1] * self.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       10       19        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1] * -1.0),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       10       18        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       30        0
    //    simd4        4       10        0
    // Totals...
    // yes simd       17       40        0
    //  no simd       29       70        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       50        0
    //  no simd       40       83        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       45        0
    //    simd3        0        1        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       21       51        0
    //  no simd       36       68        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       44        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       22       51        0
    //  no simd       40       72        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiTripleNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       88        0
    //    simd3       16       24        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       72      120        0
    //  no simd      128      192        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group4()[0]) + (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[1] * other.group4()[1]) + (self.group0()[2] * other.group9()[1])),
                (-(self.group0()[1] * other.group4()[2]) + (self.group0()[2] * other.group9()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (self.group0()[2] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())),
            // e5
            (-(other.group0()[0] * self.group0()[1]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group6()[0]) + (self.group0()[2] * other.group8()[0])),
                ((self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group8()[1])),
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group8()[2])),
                ((self.group0()[0] * other[e1]) - (self.group0()[2] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8())
                + (Simd32x3::from(self.group0()[1]) * other.group7())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group5()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group5()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group5()[2])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[2] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[1]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[2] * other[e1])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))),
            // e1234
            ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[2] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        5       11        0
    // Totals...
    // yes simd       17       39        0
    //  no simd       32       72        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       18        0
    //  no simd       16       24        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 3, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       27        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       16       38        0
    //  no simd       34       71        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other[e2]) - (self.group0()[1] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        5       15        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd4        5       11        0
    // Totals...
    // yes simd       19       42        0
    //  no simd       34       75        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       18        0
    //  no simd       13       21        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       36        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       25       53        0
    //  no simd       64      104        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group2())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[2] * other.group3()[0]),
                (self.group0()[2] * other.group3()[1]),
                (self.group0()[2] * other.group3()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       28       54        0
    //  no simd       64      108        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                (self.group0()[1] * other.group2()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[2])
                * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       44        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       19       51        0
    //  no simd       37       72        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[0] * self.group0()[0]) - (self.group0()[1] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       45        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       22       52        0
    //  no simd       37       73        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[1]) + (self.group0()[0] * other.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(other.group1()[1] * self.group0()[1]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Circle {}
impl AntiSandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      158        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      154      189        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      178        0
    //    simd3        0        2        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      179      214        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[0] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[2])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[2] * other.group1()[0]) + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1]) + (other.group2()[2] * self.group1()[3])),
                ((self.group2()[2] * other.group3()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      105        0
    //    simd3        0        2        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       96      128        0
    //  no simd      150      195        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      100        0
    //    simd3        1        4        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       87      123        0
    //  no simd      140      188        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       96        0
    //    simd3        0        3        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       89      118        0
    //  no simd      140      181        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      128        0
    //    simd3        0        2        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      112      150        0
    //  no simd      169      214        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      141        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      133      169        0
    //  no simd      208      251        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group2()[0] * other.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                ((self.group2()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      131      166        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      133      168        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      116        0
    //    simd3        1        4        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      106      138        0
    //  no simd      159      200        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      131        0
    //    simd3        0        2        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      114      152        0
    //  no simd      168      213        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       63       85        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      108        0
    //    simd3        1        4        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       96      130        0
    //  no simd      149      192        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group2()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      159      194        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[0] * other.group1()[1])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      170        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      163      198        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      153      188        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group1()[3]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      170        0
    //    simd3        0        2        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      173      208        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group3()[1]) + (other.group0()[2] * self.group1()[1]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[0]) + (other.group0()[1] * self.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      112        0
    //    simd3        0        2        0
    //    simd4       16       18        0
    // Totals...
    // yes simd      102      132        0
    //  no simd      150      190        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      104        0
    //    simd3        1        4        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       93      125        0
    //  no simd      140      184        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      103        0
    //    simd3        0        3        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       95      124        0
    //  no simd      140      184        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      123        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      109      146        0
    //  no simd      169      213        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd3        0        2        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      137      172        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      139      174        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      228      264        0
    //    simd2       18       22        0
    //    simd3       72       82        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      342      393        0
    //  no simd      576      654        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])),
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            ((self.group2()[0] * other.group1()[0]) - (self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (self.group2()[0] * other.group3()[3]) + (self.group2()[1] * other.group5()[2]) + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group5()[1])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (self.group2()[0] * other.group5()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group5()[0])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (self.group2()[0] * other.group5()[1]) + (self.group2()[0] * other.group9()[1]) - (self.group2()[1] * other.group5()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group2(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group2())
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 2, 1))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[2] * other.group3()[0]) + (self.group2()[0] * other.group4()[2]) - (self.group2()[1] * other[e45]) - (self.group2()[2] * other.group4()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[2] * other[e45])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[0] * other.group5()[0])
                    - (self.group2()[1] * other.group5()[1])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group5()[2])
                    - (self.group2()[2] * other.group9()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       92        0
    //    simd3        1        4        0
    //    simd4       22       25        0
    // Totals...
    // yes simd       91      121        0
    //  no simd      159      204        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      137        0
    //    simd3        0        2        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      120      156        0
    //  no simd      168      211        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[2])),
                (self.group1()[3] * other.group0()[0] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      119        0
    //    simd3        2        5        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      111      143        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other[e2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[2] * other[e2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       86        0
    //  no simd       84      124        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        2        5        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       99      134        0
    //  no simd      169      213        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other[e4315]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other[e4315]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      115        0
    //    simd3        1        4        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      102      135        0
    //  no simd      149      191        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd3        0        2        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      183      218        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd3        0        2        0
    //    simd4       38       39        0
    // Totals...
    // yes simd      174      209        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      122        0
    //    simd3        3        6        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      116      148        0
    //  no simd      179      220        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[1]) * self.group0()) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      110        0
    //    simd3        3        6        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      107      139        0
    //  no simd      179      220        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group0())
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[0]) - (self.group2()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[1]) - (self.group2()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group2()[2]) - (self.group2()[1] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[3]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group2()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for CircleRotor {}
impl AntiSandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      144        0
    //    simd3        0        1        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      148      185        0
    //  no simd      265      307        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      164        0
    //    simd3        0        1        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      174      211        0
    //  no simd      309      351        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[3]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group2()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group3()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[2] * self.group1()[1]),
                (other.group2()[1] * self.group1()[3]),
                (other.group2()[2] * self.group1()[3]),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       93        0
    //    simd3        0        1        0
    //    simd4       26       28        0
    // Totals...
    // yes simd       90      122        0
    //  no simd      168      208        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      105        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd       92      132        0
    //  no simd      167      212        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       98        0
    //    simd3        0        1        0
    //    simd4       25       27        0
    // Totals...
    // yes simd       92      126        0
    //  no simd      167      209        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      123        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      111      151        0
    //  no simd      189      234        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      136        0
    //    simd3        0        1        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      133      171        0
    //  no simd      232      275        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[1] * self.group2()[0])),
                (-(other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      141        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      132      169        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       99      131        0
    //    simd3        0        1        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      133      167        0
    //  no simd      235      274        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      110        0
    //    simd3        1        3        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      104      138        0
    //  no simd      178      219        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      104        0
    //    simd3        0        1        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       97      137        0
    //  no simd      190      235        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[2])),
                ((other.group0()[3] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       72        0
    //    simd3        0        2        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       66       90        0
    //  no simd      105      142        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       97        0
    //    simd3        0        1        0
    //    simd4       27       32        0
    // Totals...
    // yes simd       96      130        0
    //  no simd      177      228        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      161        0
    //    simd3        0        1        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      158      195        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group2()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3]) + (other.group1()[0] * self.group2()[2])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[2] * self.group2()[3]) + (other.group1()[1] * self.group2()[0])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      156        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      157      194        0
    //  no simd      265      307        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(self.group0()[0] * other.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(self.group0()[1] * other.group2()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      145        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      146      183        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      113      148        0
    //    simd3        0        1        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      162      199        0
    //  no simd      309      351        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group3()[2]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group3()[0]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group3()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group2()[3] * other.group3()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      101        0
    //    simd3        0        1        0
    //    simd4       24       26        0
    // Totals...
    // yes simd       96      128        0
    //  no simd      168      208        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      109        0
    //    simd3        0        1        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       98      134        0
    //  no simd      167      208        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      100        0
    //    simd3        0        1        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       95      128        0
    //  no simd      167      211        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * self.group1()) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      114        0
    //    simd3        0        1        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      108      144        0
    //  no simd      192      233        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      127        0
    //    simd3        0        1        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      127      164        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      145        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      135      172        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      139        0
    //    simd3        0        1        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      136      173        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      233        0
    //    simd2       20       24        0
    //    simd3       76       83        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      330      387        0
    //  no simd      640      718        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (other.group7()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (other.group7()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) - (other.group7()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group2()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group5()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[1] * other.group9()[2])
                    + (self.group2()[3] * other.group3()[0])),
                (-(other.group5()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(other.group5()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 0, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[2])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group2()[1] * other.group6()[2]) + (self.group2()[2] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group6()[0])),
                ((self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group9()[2]) + (self.group2()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group9()[0]) + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group1()[0] * other.group9()[1]) + (self.group1()[2] * other.group3()[3]) + (self.group2()[3] * other.group9()[2])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        1        3        0
    //    simd4       30       33        0
    // Totals...
    // yes simd       86      118        0
    //  no simd      178      223        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      102        0
    //    simd3        0        1        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       99      135        0
    //  no simd      192      233        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 1) * self.group2())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      110        0
    //    simd3        2        4        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      107      141        0
    //  no simd      189      230        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[2] * other[e2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       64        0
    //    simd3        0        2        0
    //    simd4       15       19        0
    // Totals...
    // yes simd       60       85        0
    //  no simd      105      146        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       89        0
    //    simd3        2        4        0
    //    simd4       31       34        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      189      237        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315]) + (self.group2()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      108        0
    //    simd3        0        1        0
    //    simd4       25       27        0
    // Totals...
    // yes simd      102      136        0
    //  no simd      177      219        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group1()) + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[1]]) * self.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      171        0
    //    simd3        0        1        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      182      219        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group2()[3], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 3, 3))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      151        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      167      204        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[3] * other.group3()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      132        0
    //    simd3        0        1        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      123      163        0
    //  no simd      210      255        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group1())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group1()[0]]) * self.group2())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      112        0
    //    simd3        0        1        0
    //    simd4       33       36        0
    // Totals...
    // yes simd      111      149        0
    //  no simd      210      259        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                (-(other.group1()[0] * self.group1()[3]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group1()[0]]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Dipole {}
impl AntiSandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      142        0
    //    simd3        0        2        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      142      177        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (other.group2()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (other.group2()[0] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (other.group2()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) + (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group2(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      150        0
    //    simd3        0        2        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      158      193        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group2()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (self.group2()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (other.group3()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group3()[2]) + (self.group2()[2] * other.group1()[0]) + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group3()[0]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       97        0
    //    simd3        0        2        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       90      122        0
    //  no simd      150      195        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       95        0
    //    simd3        1        4        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       84      119        0
    //  no simd      140      187        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       91        0
    //    simd3        0        4        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       86      115        0
    //  no simd      140      183        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       92        0
    //    simd3        0        2        0
    //    simd4       26       29        0
    // Totals...
    // yes simd       91      123        0
    //  no simd      169      214        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      116        0
    //    simd3        0        2        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      115      150        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (other.group1()[0] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[0]) - (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group2()[2] * other.group1()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      122      157        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      129        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      124      160        0
    //  no simd      208      251        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) - (other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group1()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (other.group1()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       95        0
    //    simd3        1        4        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       91      123        0
    //  no simd      162      203        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) * -1.0),
                ((other.group0()[1] * self.group1()[3]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      122        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      108      145        0
    //  no simd      168      212        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[0])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[1] * other.group0()[3]) - (other.group0()[1] * self.group1()[1])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd3        0        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       57       79        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      103        0
    //    simd3        1        4        0
    //    simd4       18       19        0
    // Totals...
    // yes simd       93      126        0
    //  no simd      149      191        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group2()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      138      173        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (self.group2()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      138        0
    //    simd3        0        2        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      139      174        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (other.group2()[0] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      141      176        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[2] * self.group1()[1]) - (self.group2()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[2]) - (self.group2()[1] * other.group1()[3]) - (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[0]) - (self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      154        0
    //    simd3        0        2        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      161      196        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[0])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       88        0
    //    simd3        0        2        0
    //    simd4       23       25        0
    // Totals...
    // yes simd       81      115        0
    //  no simd      150      194        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       95        0
    //    simd3        1        4        0
    //    simd4       18       19        0
    // Totals...
    // yes simd       84      118        0
    //  no simd      140      183        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       91        0
    //    simd3        0        3        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       86      115        0
    //  no simd      140      184        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      108        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      124      159        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      119      154        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      124      159        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      288        0
    //    simd2        2        2        0
    //    simd3       68       74        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      339      398        0
    //  no simd      576      650        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            ((self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group5()[1])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group9()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group2()[0] * other.group6()[3]) - (self.group2()[1] * other.group1()[2]) + (self.group2()[1] * other.group6()[2])
                    - (self.group2()[2] * other.group6()[1])
                    - (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])),
                (-(self.group2()[0] * other.group6()[2]) - (self.group2()[1] * other.group6()[3]) - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    - (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    - (other.group8()[0] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 2))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))
                - (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[2] * other.group4()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * self.group2())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 2))
                + (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[1])
                    + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) + (self.group2()[0] * other.group7()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group7()[0])
                    + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) - (self.group2()[0] * other.group7()[1])
                    + (self.group2()[1] * other.group7()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group6()[2])),
                (-(self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[2])
                    - (other.group8()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       88        0
    //    simd3        1        4        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       88      119        0
    //  no simd      162      208        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[0] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       99      136        0
    //  no simd      168      212        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[2] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[2])),
                (self.group1()[3] * other.group0()[1] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       99        0
    //    simd3        2        5        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       96      128        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        6        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       88        0
    //  no simd       84      130        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       95        0
    //    simd3        2        5        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       93      125        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (self.group2()[0] * other[e4315]),
                (self.group2()[1] * other[e4315]),
                (self.group2()[2] * other[e4315]),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group2()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group2()[2] * other[e4315]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      103        0
    //    simd3        1        4        0
    //    simd4       18       19        0
    // Totals...
    // yes simd       93      126        0
    //  no simd      149      191        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      168      203        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd3        0        2        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      162      197        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[1] * other.group2()[3]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group2()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      102        0
    //    simd3        3        6        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      101      133        0
    //  no simd      179      220        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[1]) * self.group0()) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       98        0
    //    simd3        3        6        0
    //    simd4       25       27        0
    // Totals...
    // yes simd       98      131        0
    //  no simd      179      224        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[1]) * self.group0())
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group1()[0] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (other.group1()[0] * self.group2()[2]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                (-(other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group2()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DipoleInversion {}
impl AntiSandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      136        0
    //    simd3        0        1        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      169      206        0
    //  no simd      373      415        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group2()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group3()[0], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 3, 2, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])),
                (-(other.group0()[1] * self.group3()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])),
                (-(other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      136        0
    //    simd3        0        1        0
    //    simd4       82       85        0
    // Totals...
    // yes simd      187      222        0
    //  no simd      433      479        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (other.group3()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[2] * self.group1()[1]) + (other.group3()[1] * self.group2()[2]) + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group3()[2] * self.group2()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[1] * self.group1()[0]) + (other.group3()[0] * self.group2()[1]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group1()[2], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 0, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       90        0
    //    simd3        0        1        0
    //    simd4       44       48        0
    // Totals...
    // yes simd      106      139        0
    //  no simd      238      285        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       86        0
    //    simd3        0        1        0
    //    simd4       44       51        0
    // Totals...
    // yes simd      106      138        0
    //  no simd      238      293        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      101        0
    //    simd3        0        1        0
    //    simd4       44       46        0
    // Totals...
    // yes simd      107      148        0
    //  no simd      239      288        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) * -1.0),
                ((other.group0()[0] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      112        0
    //    simd3        0        1        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      127      162        0
    //  no simd      271      311        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      123        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      152      185        0
    //  no simd      332      370        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) - (other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group1()[2], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 0, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      141        0
    //    simd3        0        1        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      154      191        0
    //  no simd      298      340        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      108        0
    //    simd3        0        1        0
    //    simd4       64       65        0
    // Totals...
    // yes simd      140      174        0
    //  no simd      332      371        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group3()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[3] * self.group2()[1]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group2()[2]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group1()[0], self.group3()[0], self.group1()[0], self.group3()[2]]) * swizzle!(other.group1(), 3, 2, 1, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       98        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      116      152        0
    //  no simd      272      313        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group2()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      103        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      117      156        0
    //  no simd      270      314        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) * -1.0),
                ((other.group0()[3] * self.group2()[1]) * -1.0),
                ((other.group0()[3] * self.group2()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[3] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       80        0
    //    simd3        0        2        0
    //    simd4       37       41        0
    // Totals...
    // yes simd       98      123        0
    //  no simd      209      250        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      105        0
    //    simd3        0        1        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      113      154        0
    //  no simd      254      300        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[2] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      157        0
    //    simd3        0        1        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      181      218        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group2()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      144        0
    //    simd3        0        1        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      175      212        0
    //  no simd      373      415        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[2] * self.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group3()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 1, 1, 2, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[0] * self.group0()[2]) - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[2] * self.group1()[1]) - (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group1()[2]) - (other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[1] * self.group1()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      152        0
    //    simd3        0        1        0
    //    simd4       79       80        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      433      475        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group2()[2], other.group3()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 0, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 0, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       90        0
    //    simd3        0        1        0
    //    simd4       44       48        0
    // Totals...
    // yes simd      106      139        0
    //  no simd      238      285        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       97        0
    //    simd3        0        1        0
    //    simd4       43       46        0
    // Totals...
    // yes simd      109      144        0
    //  no simd      238      284        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       89        0
    //    simd3        0        1        0
    //    simd4       44       48        0
    // Totals...
    // yes simd      106      138        0
    //  no simd      238      284        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      100        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      119      153        0
    //  no simd      272      311        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[3] * other.group0()[3]) * -1.0)])
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd3        0        1        0
    //    simd4       64       65        0
    // Totals...
    // yes simd      140      173        0
    //  no simd      332      370        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]) + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[3]) - (self.group2()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      161        0
    //    simd3        0        1        0
    //    simd4       43       44        0
    // Totals...
    // yes simd      169      206        0
    //  no simd      298      340        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      139        0
    //    simd3        0        1        0
    //    simd4       56       57        0
    // Totals...
    // yes simd      160      197        0
    //  no simd      328      370        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group2(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      266      321        0
    //    simd2        8        8        0
    //    simd3       98      103        0
    //    simd4       80       81        0
    // Totals...
    // yes simd      452      513        0
    //  no simd      896      970        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group2()[3] * other[e1])
                    + (self.group3()[3] * other.group1()[3])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[2] * other.group3()[1]) - (other.group4()[0] * self.group3()[3]) + (other.group4()[1] * self.group2()[2])
                    - (other.group5()[1] * self.group3()[2])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[2] * self.group3()[3])
                    - (other.group5()[0] * self.group3()[1])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    + (other.group4()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group3()[0] * other.group3()[0])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group3()[2]) - (self.group3()[3] * other.group1()[0]) + (self.group3()[3] * other.group6()[0])),
                ((other.group8()[2] * self.group3()[0]) - (self.group3()[3] * other.group1()[1]) + (self.group3()[3] * other.group6()[1])),
                ((other.group8()[0] * self.group3()[1]) - (self.group3()[3] * other.group1()[2]) + (self.group3()[3] * other.group6()[2])),
                ((other.group7()[2] * self.group2()[2]) + (self.group1()[2] * other.group1()[2]) + (self.group2()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group0()[2]]))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group6(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group2(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 0, 0, 0))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1]) - (self.group3()[1] * other.group1()[2]) + (self.group3()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0]) + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0]) - (self.group3()[0] * other.group1()[1]) + (self.group3()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group8())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (other.group4()[2] * self.group2()[1]) - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group4()[0] * self.group2()[2]) - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group4()[1] * self.group2()[0]) - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[2] * other.group3()[2]) + (other.group4()[1] * self.group2()[1]) + (other.group4()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group5()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group2()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[1] * other.group9()[2]) + (self.group2()[2] * other.group9()[1])
                    - (self.group3()[2] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[0]) + (self.group2()[0] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[0])
                    - (self.group3()[0] * other.group3()[2])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[0] * other.group9()[1]) + (self.group2()[1] * other.group9()[0])
                    - (self.group3()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group1()[3] * other.group6()[2])),
                ((other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group1()[2]) + (other.group8()[2] * self.group3()[2]) - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group6()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       95        0
    //    simd3        0        1        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      118      149        0
    //  no simd      271      310        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       96        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      114      150        0
    //  no simd      270      311        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group3()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[0]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group3()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[3]),
            ]) + (swizzle!(other.group0(), 1, 1, 1, 0) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))
                - (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       91        0
    //    simd3        0        1        0
    //    simd4       55       60        0
    // Totals...
    // yes simd      118      152        0
    //  no simd      283      334        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]])
                * swizzle!(other.group0(), 1, 2, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group3()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group3()[1] * other[e2])),
                ((self.group2()[1] * other.group0()[0]) - (self.group3()[2] * other[e2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       72        0
    //    simd3        0        3        0
    //    simd4       39       46        0
    // Totals...
    // yes simd       92      121        0
    //  no simd      209      265        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       94        0
    //    simd3        0        1        0
    //    simd4       54       58        0
    // Totals...
    // yes simd      121      153        0
    //  no simd      283      329        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       96        0
    //    simd3        0        1        0
    //    simd4       48       51        0
    // Totals...
    // yes simd      110      148        0
    //  no simd      254      303        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group2()[0])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group2()[1])),
                ((self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[2])),
                ((other.group0()[1] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      127        0
    //    simd3        0        1        0
    //    simd4       88       91        0
    // Totals...
    // yes simd      184      219        0
    //  no simd      448      494        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group3()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[2] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group3()[2] * other.group2()[1]) + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[2] * other.group1()[0]) + (self.group3()[0] * other.group2()[2]) + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[1] * other.group2()[0]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 1, 1, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]) * swizzle!(self.group3(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      147        0
    //    simd3        0        1        0
    //    simd4       84       85        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      448      490        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[0])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[1])
                    - (self.group3()[2] * other.group2()[3])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) - (self.group3()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group3()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group3()[2])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group3()[1] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       98        0
    //    simd3        0        1        0
    //    simd4       58       61        0
    // Totals...
    // yes simd      124      160        0
    //  no simd      298      345        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                (self.group3()[3] * other.group0()[3]),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) + (self.group2()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[1]) + (self.group2()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group3()[2]) + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      109        0
    //    simd3        0        1        0
    //    simd4       56       58        0
    // Totals...
    // yes simd      130      168        0
    //  no simd      298      344        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group0()[2])),
                (self.group3()[2] * other.group0()[2]),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[2] * other.group0()[0]),
                (self.group3()[0] * other.group0()[1]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((other.group1()[1] * self.group3()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group3()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DualNum321 {}
impl AntiSandwich<AntiCircleRotor> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       22        0
    //    simd4        5       11        0
    // Totals...
    // yes simd        9       33        0
    //  no simd       24       66        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       12       28        0
    //  no simd       30       67        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for DualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        2        4        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        4        9        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiDualNum321::from_groups(
            // e45, scalar
            (-(Simd32x2::from(self.group0()[0]) * swizzle!(other.group0(), 1, 0)) + (Simd32x2::from(self.group0()[1]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       18        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group0()[1])),
            0.0,
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       18        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group0()[1])),
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       23        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       11       31        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        5       10        0
    // Totals...
    // yes simd        5       19        0
    //  no simd       20       49        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       31        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       11       36        0
    //  no simd       17       51        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        4       11        0
    // Totals...
    // yes simd        8       31        0
    //  no simd       20       64        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        9       27        0
    //  no simd       15       39        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        8       25        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]])
                * swizzle!(other.group0(), 0, 1, 3, 2)
                * Simd32x4::from([-1.0, 1.0, -1.0, -1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[1], self.group0()[1]]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        1        3        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        2        7        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        6       20        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[1] * other.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       10       26        0
    //  no simd       22       53        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        5       11        0
    // Totals...
    // yes simd        9       26        0
    //  no simd       24       59        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        4       10        0
    // Totals...
    // yes simd       10       35        0
    //  no simd       22       65        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd4        6       14        0
    // Totals...
    // yes simd       12       38        0
    //  no simd       30       80        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for DualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        2        4        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        4        9        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = DualNum321::from_groups(
            // e321, e12345
            ((Simd32x2::from(other.group0()[0]) * swizzle!(self.group0(), 1, 0)) + (Simd32x2::from(other.group0()[1]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        5       17        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        5       17        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       27        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        8       30        0
    //  no simd       11       39        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       22        0
    //    simd4        4       10        0
    // Totals...
    // yes simd        8       32        0
    //  no simd       20       62        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       11       31        0
    //  no simd       17       43        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        5       11        0
    // Totals...
    // yes simd        5       16        0
    //  no simd       20       49        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DualNum321 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd2        2        6        0
    //    simd3        8       16        0
    //    simd4        8       17        0
    // Totals...
    // yes simd       22       56        0
    //  no simd       64      145        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from([other.group3()[3], other.group0()[1]]) * self.group0() * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from([other.group0()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            ((self.group0()[0] * other[e1]) + (self.group0()[1] * other[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[0] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * other.group4()) + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * other.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group5()[0]),
                (self.group0()[0] * other.group5()[1]),
                (self.group0()[0] * other.group5()[2]),
                (self.group0()[1] * other.group9()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group9())),
            // e1234
            (-(self.group0()[0] * other[e45]) + (self.group0()[1] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       27        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        9       32        0
    //  no simd       15       47        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        8       25        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, 1.0, 1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 3, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       25        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       29        0
    //  no simd       16       41        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        1        4        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        2        9        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from([-1.0, 1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       29        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       10       34        0
    //  no simd       16       49        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e4315]) + (self.group0()[1] * other[e4315]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       19        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        8       18        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       32       73        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group2()) + (Simd32x4::from(self.group0()[1]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        8       18        0
    // Totals...
    // yes simd        8       27        0
    //  no simd       32       81        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        4        9        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       18       45        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       13        0
    //    simd4        4       11        0
    // Totals...
    // yes simd        6       24        0
    //  no simd       18       57        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DualNum4 {}
impl AntiSandwich<AntiCircleRotor> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       38        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       15       43        0
    //  no simd       24       58        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd4        7       14        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       34       74        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for DualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        8       27        0
    //  no simd       14       48        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        5        9        0
    // Totals...
    // yes simd        9       29        0
    //  no simd       24       56        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd3        0        1        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       14       38        0
    //  no simd       17       49        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       32        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       12       38        0
    //  no simd       21       56        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       14        0
    //    simd4        5        8        0
    // Totals...
    // yes simd        5       22        0
    //  no simd       20       46        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       16        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       31        0
    //    simd3        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       38        0
    //  no simd       20       57        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       33        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       12       40        0
    //  no simd       27       61        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       36        0
    //    simd3        1        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       15       42        0
    //  no simd       20       58        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       38        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       19       45        0
    //  no simd       31       66        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for DualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       14        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd4        1        6        0
    // Totals...
    // yes simd       11       31        0
    //  no simd       14       49        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       12       37        0
    //  no simd       21       64        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       29        0
    //    simd3        0        1        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       11       35        0
    //  no simd       17       52        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       21        0
    //    simd4        5       10        0
    // Totals...
    // yes simd        9       31        0
    //  no simd       24       61        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DualNum4 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       42        0
    //    simd2        2        4        0
    //    simd3       10       18        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       30       72        0
    //  no simd       67      136        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) * -1.0),
                ((self.group0()[0] * other.group8()[1]) * -1.0),
                ((self.group0()[0] * other.group8()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            (self.group0()[1] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other.group9()[3]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       17       49        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       16        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       11        0
    //    simd4        5        9        0
    // Totals...
    // yes simd        5       20        0
    //  no simd       20       47        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       18        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       17       50        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       15        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       19        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       10       33        0
    //  no simd       37       75        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) * -1.0),
                ((self.group0()[0] * other.group2()[1]) * -1.0),
                ((self.group0()[0] * other.group2()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       35        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       16       44        0
    //  no simd       34       71        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) * -1.0),
                ((self.group0()[0] * other.group3()[1]) * -1.0),
                ((self.group0()[0] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       21        0
    //    simd4        5        7        0
    // Totals...
    // yes simd        7       28        0
    //  no simd       22       49        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       27        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       10       33        0
    //  no simd       19       51        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DualNum5 {}
impl AntiSandwich<AntiCircleRotor> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       38        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       17       43        0
    //  no simd       26       58        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       26        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       13       36        0
    //  no simd       31       66        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       14        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for DualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       15        0
    //  no simd        4       18        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       24        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DualNum5 {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DualNum5 {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        4       22        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       16        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       15        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd3        0        1        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       12       35        0
    //  no simd       21       58        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       26        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       11       35        0
    //  no simd       23       62        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd3        0        1        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       20       58        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       18       41        0
    //  no simd       33       71        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for DualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       17        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       24        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DualNum5 {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DualNum5 {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DualNum5 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       46        0
    //    simd2        2        4        0
    //    simd3        6       14        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       30       75        0
    //  no simd       68      140        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other[e45], other.group1()[3]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group7()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e5
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[0] * other.group9()[1])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2])),
                ((self.group0()[0] * other[e45]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group4()) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group4()[0]) * -1.0),
                ((self.group0()[0] * other.group4()[1]) * -1.0),
                ((self.group0()[0] * other.group4()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group9())),
            // e1234
            (self.group0()[1] * other[e45]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       19        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       16        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        7       26        0
    //  no simd       16       50        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       24        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       10       29        0
    //  no simd       19       44        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       32       68        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       20       48        0
    //  no simd       35       72        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        9       30        0
    //  no simd       18       51        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       21       46        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group1()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for FlatPoint {}
impl AntiSandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       82        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       53       93        0
    //  no simd       77      126        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[3] * self.group0()[2])),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       56        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       50       74        0
    //  no simd       95      128        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[2] * self.group0()[2]) + (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       44        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       26       48        0
    //  no simd       35       60        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       55        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       32       64        0
    //  no simd       44       91        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       20       43        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       21       40        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       53        0
    //    simd4        5       12        0
    // Totals...
    // yes simd       36       65        0
    //  no simd       51      101        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       16        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       49        0
    //    simd4        4       11        0
    // Totals...
    // yes simd       32       60        0
    //  no simd       44       93        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       55        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       40       69        0
    //  no simd       73      111        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       44       73        0
    //  no simd       77      115        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       78        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       49       89        0
    //  no simd       73      122        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       92        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       65      104        0
    //  no simd       92      140        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       37        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       23       42        0
    //  no simd       35       57        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       21       43        0
    //  no simd       48       79        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       34        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       20       43        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      121        0
    //    simd2        2        2        0
    //    simd3       16       24        0
    //    simd4       16       18        0
    // Totals...
    // yes simd      113      165        0
    //  no simd      195      269        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (self.group0()[3] * other[e45] * -1.0),
            ]),
            // e5
            ((other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group0()[3])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[1])),
                (-(other.group8()[1] * self.group0()[3])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])),
                (-(other.group8()[2] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group7()),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45]) - (self.group0()[3] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[1] * other[e45]) - (self.group0()[3] * other.group9()[1])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[2] * other[e45]) - (self.group0()[3] * other.group9()[2])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group6()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1234
            (self.group0()[3] * other.group1()[3]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       35        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       37        0
    //  no simd       18       43        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd4        9       15        0
    // Totals...
    // yes simd       24       44        0
    //  no simd       51       89        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       48        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       30       58        0
    //  no simd       57       88        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       73        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       41       78        0
    //  no simd       53       93        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       21       39        0
    //  no simd       48       81        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       60        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       54       78        0
    //  no simd       99      132        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       96        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       69      108        0
    //  no simd       96      144        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       52        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       62        0
    //  no simd       60       92        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(other.group1()[0] * self.group0()[3])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       77        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       44       82        0
    //  no simd       56       97        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Flector {}
impl AntiSandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      106        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       98      136        0
    //  no simd      185      226        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[2] * self.group1()[1])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[0] * self.group1()[2]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[1] * self.group1()[0]) - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) - (other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group0()[0], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group2(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       81        0
    //    simd4       41       43        0
    // Totals...
    // yes simd      100      124        0
    //  no simd      223      253        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group3()[1] * self.group0()[3]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) + (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       68        0
    //    simd4       19       22        0
    // Totals...
    // yes simd       60       90        0
    //  no simd      117      156        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4       18       23        0
    // Totals...
    // yes simd       63       98        0
    //  no simd      117      167        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       44       64        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 3, 3, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       68       89        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4       21       25        0
    // Totals...
    // yes simd       66      100        0
    //  no simd      129      175        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 2, 2, 2, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       64       98        0
    //  no simd      121      167        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       81        0
    //    simd4       31       33        0
    // Totals...
    // yes simd       86      114        0
    //  no simd      179      213        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       85        0
    //    simd4       32       34        0
    // Totals...
    // yes simd       91      119        0
    //  no simd      187      221        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[2]) + (other.group2()[2] * self.group1()[2]) + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      106        0
    //    simd4       27       28        0
    // Totals...
    // yes simd       96      134        0
    //  no simd      177      218        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group1()[0]) - (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      112      150        0
    //  no simd      217      258        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group2()[3] * self.group1()[0]) * -1.0),
                ((other.group2()[3] * self.group1()[1]) * -1.0),
                ((other.group2()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group3()[0] * self.group1()[1]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[0] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[1] * self.group1()[0])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 2, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group1(), 3, 0, 1, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       47       73        0
    //  no simd      119      154        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd4       24       28        0
    // Totals...
    // yes simd       47       69        0
    //  no simd      119      153        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       20       37        0
    //  no simd       44       64        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       52       77        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       80      101        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       36       49        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      147      192        0
    //    simd2        8        8        0
    //    simd3       40       44        0
    //    simd4       42       44        0
    // Totals...
    // yes simd      237      288        0
    //  no simd      451      516        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                    + (self.group1()[3] * other.group1()[3])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (self.group1()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group0()[2]) + (other.group5()[0] * self.group0()[3])
                    - (other.group5()[1] * self.group1()[2])
                    - (self.group0()[0] * other[e45])),
                (-(other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[2] * self.group1()[3]) - (other.group5()[0] * self.group1()[1]) + (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                (other.group4()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group0()[3]) + (other.group8()[1] * self.group1()[2]) - (self.group1()[0] * other[e1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                (-(other.group8()[1] * self.group0()[3]) + (other.group8()[2] * self.group1()[0]) - (self.group1()[1] * other[e1]) - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group8()[0] * self.group1()[1]) - (other.group8()[2] * self.group0()[3]) - (self.group1()[2] * other[e1]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0]) + (self.group1()[2] * other.group9()[1])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[3] * other.group9()[1]) + (self.group1()[0] * other.group9()[2])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[3] * other.group9()[2]) + (self.group1()[1] * other.group9()[0])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group5()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1]) + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0]) - (self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group8()[1] * self.group1()[1]) + (other.group8()[2] * self.group1()[2]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group1()[0]) - (other.group7()[1] * self.group1()[1]) - (other.group7()[2] * self.group1()[2]) + (self.group0()[3] * other.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       60       81        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       46        0
    //    simd4       27       30        0
    // Totals...
    // yes simd       53       76        0
    //  no simd      134      166        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()) - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[3] * other.group0()[2]) * -1.0)]) + (Simd32x4::from(other.group0()[3]) * self.group1())
                - (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       73        0
    //    simd4       24       26        0
    // Totals...
    // yes simd       67       99        0
    //  no simd      139      177        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       40       68        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       91        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       77      114        0
    //  no simd      137      183        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e4315]) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       48       70        0
    //  no simd      123      157        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[2]) * self.group1()) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       73        0
    //    simd4       45       47        0
    // Totals...
    // yes simd       96      120        0
    //  no simd      231      261        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group3()[0])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group3())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group2()[3]) + (self.group1()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      106        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      109      146        0
    //  no simd      226      266        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[2] * other.group2()[3]) * -1.0),
                ((self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[0] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[1] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group2()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       61        0
    //    simd4       28       30        0
    // Totals...
    // yes simd       67       91        0
    //  no simd      151      181        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       95        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       79      118        0
    //  no simd      145      187        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group1()[0] * -1.0),
                (other.group1()[0] * self.group1()[1] * -1.0),
                (other.group1()[0] * self.group1()[2] * -1.0),
                (-(other.group1()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (other.group1()[1] * self.group0()[3]),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Line {}
impl AntiSandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      150        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      121      155        0
    //  no simd      130      168        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      115      149        0
    //  no simd      154      192        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73       98        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       74      101        0
    //  no simd       77      108        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      101        0
    //    simd3        0        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       74      105        0
    //  no simd       77      114        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        1        5        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       36       57        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       44        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       29       50        0
    //  no simd       41       66        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      107        0
    //    simd3        0        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       83      111        0
    //  no simd       86      120        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      104        0
    //    simd3        0        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       77      108        0
    //  no simd       80      117        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd3        0        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       97      131        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (self.group1()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      122        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      130      168        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      115      149        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      139      173        0
    //  no simd      154      192        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       90        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68       95        0
    //  no simd       77      108        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       90        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68       96        0
    //  no simd       77      111        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        1        5        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       36       57        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      210        0
    //    simd2       10       12        0
    //    simd3       34       44        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      224      272        0
    //  no simd      320      390        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group6()[3]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2]) + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group5()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group5()[1])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group5()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group5()[0])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group1()[0] * other.group5()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group5()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group1(), 1, 2, 2))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))
                - (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0]) - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group1())
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 2, 1))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group1(), 1, 0, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2]) - (self.group1()[0] * other[e45]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[0]) + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1]) + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[2] * other.group9()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       41       63        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       99        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       77      105        0
    //  no simd       86      120        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       93        0
    //    simd3        0        3        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       75      103        0
    //  no simd       90      130        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      109        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       84      114        0
    //  no simd       90      126        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other[e4315])),
                ((self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       93        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       71       99        0
    //  no simd       80      114        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      136      170        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       99        0
    //    simd3        0        3        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       81      109        0
    //  no simd       96      136        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      115        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       90      120        0
    //  no simd       96      132        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group1()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (self.group0()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (self.group0()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Motor {}
impl AntiSandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      126        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      112      150        0
    //  no simd      184      222        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd4       35       35        0
    // Totals...
    // yes simd      112      149        0
    //  no simd      217      254        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group1(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       86        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       71      102        0
    //  no simd      116      150        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       91        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       71      108        0
    //  no simd      116      159        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       44       66        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       51        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       34       57        0
    //  no simd       52       75        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       61        0
    //  no simd       84      103        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group1()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group0())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       47        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       30       57        0
    //  no simd       60       87        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       97        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       77      116        0
    //  no simd      128      173        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 0)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) * -1.0),
                ((other.group0()[0] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      102        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       75      117        0
    //  no simd      120      162        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      118        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      105      142        0
    //  no simd      177      214        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      118        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      107      144        0
    //  no simd      185      222        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group1()[1]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      122        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      107      145        0
    //  no simd      176      214        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       31       31        0
    // Totals...
    // yes simd      123      161        0
    //  no simd      216      254        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) + (other.group3()[1] * self.group0()[3])),
                ((other.group3()[1] * self.group0()[0]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group0())
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       66        0
    //    simd4       19       21        0
    // Totals...
    // yes simd       60       87        0
    //  no simd      117      150        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group1()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       74        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       63       94        0
    //  no simd      117      154        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       44       66        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       50        0
    //  no simd       56       74        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       61        0
    //  no simd       84      103        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      174        0
    //    simd2       14       16        0
    //    simd3       44       50        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      223      281        0
    //  no simd      448      520        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group1()[0])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (self.group0()[3] * other[e1])
                + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    + (self.group1()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    + (self.group1()[3] * other.group9()[1])),
                ((self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group9()[2])),
                ((self.group0()[2] * other.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other[e45]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group4()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group7()[2] * self.group1()[1]) + (self.group0()[1] * other.group6()[2]) + (self.group0()[3] * other.group6()[0]) + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[1] * self.group1()[3]) + (self.group0()[2] * other.group6()[0]) + (self.group0()[3] * other.group6()[1]) + (self.group1()[1] * other.group1()[3])),
                ((other.group7()[2] * self.group1()[3]) + (self.group0()[0] * other.group6()[1]) + (self.group0()[3] * other.group6()[2]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group6()[3]]) * self.group0())
                + (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) + (self.group1()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) + (self.group0()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group9()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[1], other.group4()[2], other.group5()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group9()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e1234
            (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group0()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       64       82        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       74        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       66       97        0
    //  no simd      129      166        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * self.group1()) + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1()) + (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       90        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       77      111        0
    //  no simd      137      174        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       94        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       82      115        0
    //  no simd      136      178        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]])
                * swizzle!(other.group0(), 0, 1, 2, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       74        0
    //    simd4       19       21        0
    // Totals...
    // yes simd       64       95        0
    //  no simd      121      158        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group0()) + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      115        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      114      152        0
    //  no simd      225      263        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group3()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd4       31       31        0
    // Totals...
    // yes simd      131      169        0
    //  no simd      224      262        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 2, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       94        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       79      116        0
    //  no simd      145      182        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[1] * self.group0()[3]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      110        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       90      128        0
    //  no simd      144      182        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (other.group1()[0] * self.group0()[2]),
                ((other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group1()[0] * self.group1()[3])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group1()[3]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for MultiVector {}
impl AntiSandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      456      508        0
    //    simd2       17       17        0
    //    simd3      154      162        0
    //    simd4       90       92        0
    // Totals...
    // yes simd      717      779        0
    //  no simd     1312     1396        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group2()[3])
                    - (other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])),
                (-(self.group0()[0] * other.group2()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[1] * other.group2()[2])
                    - (other.group1()[1] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1])
                    - (other.group1()[0] * self.group9()[1])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group9(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            ((self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                - (other.group2()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group2()[3]) - (self.group8()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                (-(self.group8()[0] * other.group1()[2])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])),
                (-(self.group8()[1] * other.group1()[0])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group2()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group2()[1] * self.group9()[2]) + (other.group2()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group2()[0] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group2()[0] * self.group9()[1]) + (other.group2()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])),
                (-(self.group8()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])
                + (other.group2()[3] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      476      528        0
    //    simd2       27       27        0
    //    simd3      170      178        0
    //    simd4      100      102        0
    // Totals...
    // yes simd      773      835        0
    //  no simd     1440     1524        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group1()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group9()[0])
                    + (other.group3()[1] * self.group9()[1])
                    + (other.group3()[2] * self.group9()[2])),
                ((other.group1()[3] * self.group6()[3]) - (other.group3()[0] * self.group1()[0]) - (other.group3()[1] * self.group1()[1]) - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (self.group7()[0] * other.group2()[2])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])),
                (-(other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[1] * other.group2()[0])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group6()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group6()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group3()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[1] * self.group9()[2])
                    - (other.group3()[2] * self.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])),
                ((self.group0()[0] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[0] * self.group9()[1])
                    - (other.group3()[1] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[2]) + (self.group5()[1] * other.group3()[1]) + (self.group5()[2] * other.group3()[2]) - (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group1()[2]]) * swizzle!(self.group9(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group9()[2]) - (other.group3()[2] * self.group9()[1])),
                (-(other.group3()[0] * self.group9()[2]) + (other.group3()[2] * self.group9()[0])),
                ((other.group3()[0] * self.group9()[1]) - (other.group3()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (self.group7()[0] * other.group3()[3])
                    - (self.group7()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group6()[3])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group6()[3])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group6()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group6()[0])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) - (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group8(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group8(), 2, 2, 1))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (self.group5()[1] * other.group3()[2]),
                (self.group5()[2] * other.group3()[0]),
                (self.group5()[0] * other.group3()[1]),
                (self.group5()[2] * other.group2()[2]),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group5()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e1234
            ((self.group0()[0] * other.group2()[3])
                - (other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self.group3()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      392        0
    //    simd2       17       19        0
    //    simd3      122      132        0
    //    simd4       66       74        0
    // Totals...
    // yes simd      565      617        0
    //  no simd     1024     1122        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[1]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([1.0, -1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))),
            // e5
            (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group9()[3])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group5()[1])),
                (-(other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group5()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group4()) - (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self[e1]]))),
            // e1234
            (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      363      406        0
    //    simd2       16       16        0
    //    simd3      123      134        0
    //    simd4       65       69        0
    // Totals...
    // yes simd      567      625        0
    //  no simd     1024     1116        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group9()[0]),
                (other.group0()[1] * self.group9()[1]),
                (other.group0()[1] * self.group9()[2]),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))),
            // e5
            (other.group0()[1] * self.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group8()[0]),
                (other.group0()[1] * self.group8()[1]),
                (other.group0()[1] * self.group8()[2]),
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group6()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self[e1]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      369      420        0
    //    simd2       16       16        0
    //    simd3      121      132        0
    //    simd4       65       67        0
    // Totals...
    // yes simd      571      635        0
    //  no simd     1024     1116        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self[e45]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group9()[0])),
                ((other.group0()[0] * self.group4()[1]) + (other.group0()[1] * self.group9()[1])),
                ((other.group0()[0] * self.group4()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self[e45] * -1.0),
            ]),
            // e5
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group8()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group8()[1])),
                ((other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group8()[2])),
                ((other.group0()[1] * self.group6()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group7()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group4()[1]) - (other.group0()[1] * self.group5()[1])),
                (-(other.group0()[0] * self.group4()[2]) - (other.group0()[1] * self.group5()[2])),
                ((other.group0()[0] * self[e45]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))),
            // e1234
            (other.group0()[1] * self.group1()[3]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      386      425        0
    //    simd2       19       21        0
    //    simd3      124      133        0
    //    simd4       74       78        0
    // Totals...
    // yes simd      603      657        0
    //  no simd     1092     1178        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e5
            (-(other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[2]) + (other.group0()[1] * self.group9()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[0]) + (other.group0()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) + (other.group0()[0] * self.group9()[1])),
                0.0,
            ]) - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group7()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group5()[2] * other.group0()[2]) + (other.group0()[2] * self.group9()[2]) - (other.group0()[3] * self.group9()[3])),
            ]) + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (other.group0()[3] * self[e45]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      430      486        0
    //    simd2       20       20        0
    //    simd3      138      146        0
    //    simd4       83       85        0
    // Totals...
    // yes simd      671      737        0
    //  no simd     1216     1304        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])),
                ((other.group0()[3] * self.group6()[3]) - (other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) - (self.group7()[1] * other.group0()[2]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) - (self.group7()[2] * other.group0()[0]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[2]) - (self.group7()[0] * other.group0()[1]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group1()[3]) + (self.group8()[0] * other.group1()[0]) + (self.group8()[1] * other.group1()[1]) + (self.group8()[2] * other.group1()[2])
                - (other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[2]) + (other.group0()[1] * self.group9()[2])
                    - (other.group1()[0] * self.group9()[3])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[0]) + (other.group0()[2] * self.group9()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    - (other.group1()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) + (other.group0()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group9()[2])),
                ((self.group5()[2] * other.group1()[2]) + (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[2] * other.group0()[1]) + (other.group1()[0] * self.group6()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])),
                (-(self.group7()[1] * other.group0()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[2]) - (other.group1()[1] * self.group6()[1]) - (other.group1()[2] * self.group6()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group5()[1] * other.group1()[2]) * -1.0),
                ((self.group5()[2] * other.group1()[0]) * -1.0),
                ((self.group5()[0] * other.group1()[1]) * -1.0),
                (-(self.group5()[2] * other.group0()[2]) + (other.group0()[2] * self.group9()[2]) - (other.group0()[3] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group1())
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      451      497        0
    //    simd2       16       16        0
    //    simd3      135      145        0
    //    simd4       66       68        0
    // Totals...
    // yes simd      668      726        0
    //  no simd     1152     1236        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group1()[0] * self.group4()[0])
                    + (other.group1()[1] * self.group4()[1])
                    + (other.group1()[2] * self.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[0] * self[e45])
                    - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0])
                    + (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                ((other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group4()[1]) + (other.group0()[2] * self.group4()[2])),
            ]),
            // e5
            ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group1()[0] * self.group5()[0])
                - (other.group1()[0] * self.group9()[0])
                + (other.group1()[1] * self.group5()[1])
                - (other.group1()[1] * self.group9()[1])
                + (other.group1()[2] * self.group5()[2])
                - (other.group1()[2] * self.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group1(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group1(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (other.group0()[1] * self.group5()[2]) - (other.group0()[2] * self.group5()[1]) - (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group5()[2]) + (other.group0()[2] * self.group5()[0])
                    - (other.group1()[0] * self.group4()[2])
                    - (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) - (other.group0()[1] * self.group5()[0])
                    + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    - (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * other.group1())
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group3()[3], self.group9()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group5()[2], self.group3()[3], self.group9()[0]]))
                + (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group9()[1], self.group5()[0], self.group3()[3]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[0], self.group5()[0]]) * swizzle!(other.group1(), 2, 2, 1))
                - (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group9()[2], self.group5()[2], self.group9()[1]]) * swizzle!(other.group1(), 1, 0, 0))
                - (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group7()[2]) + (other.group1()[2] * self.group7()[1])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group7()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group7()[1]) + (other.group1()[1] * self.group7()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      419      467        0
    //    simd2       16       16        0
    //    simd3      138      146        0
    //    simd4       88       91        0
    // Totals...
    // yes simd      661      720        0
    //  no simd     1217     1301        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group1()[0])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    - (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                0.0,
            ]) + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e5
            (-(self.group0()[0] * other.group1()[3])
                + (self.group5()[0] * other.group1()[0])
                + (self.group5()[1] * other.group1()[1])
                + (self.group5()[2] * other.group1()[2])
                + (other.group0()[0] * self.group3()[0])
                + (other.group0()[1] * self.group3()[1])
                + (other.group0()[2] * self.group3()[2])
                - (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group9()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group4()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[0], self.group9()[1]]) * swizzle!(other.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[2], self.group9()[2]]) * swizzle!(other.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) - (other.group1()[1] * self.group9()[2]) + (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group1()[0] * self.group9()[1]) + (other.group1()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[0] * self.group1()[3]),
                (other.group1()[1] * self.group1()[3]),
                (other.group1()[2] * self.group1()[3]),
                (-(other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group6()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group8()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e1234
            (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      386      439        0
    //    simd2       17       17        0
    //    simd3      128      137        0
    //    simd4       71       73        0
    // Totals...
    // yes simd      602      666        0
    //  no simd     1088     1176        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group9()[1]) + (other.group0()[2] * self.group9()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group0()[3])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group0()[3] * self.group9()[2])),
                ((self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * self.group4())
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[1])),
                ((self.group7()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group6()[3])),
                (-(other.group0()[1] * self.group6()[1]) - (other.group0()[2] * self.group6()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group5()[1] * other.group0()[2]) * -1.0),
                ((self.group5()[2] * other.group0()[0]) * -1.0),
                ((self.group5()[0] * other.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      384      430        0
    //    simd2       17       17        0
    //    simd3      130      140        0
    //    simd4       70       72        0
    // Totals...
    // yes simd      601      659        0
    //  no simd     1088     1172        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[2]) + (other.group0()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group0()[2]) + (other.group0()[3] * self.group9()[1])),
                ((self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
            // e5
            (-(self.group0()[0] * other.group0()[1]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[3]) - (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group6()[2])),
                (-(other.group0()[0] * self[e1]) - (other.group0()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[2]) * self.group7())
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * self.group7())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group5()[0] * other.group0()[3]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[2] * self.group9()[0])),
                (-(self.group5()[1] * other.group0()[3]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group9()[1])),
                (-(self.group5()[2] * other.group0()[3]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[2] * self.group9()[2])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self[e45]) + (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group9()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) - (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())
                - (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group8()[1] * other.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(self.group8()[2] * other.group0()[0]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self[e1]) + (other.group0()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group6())),
            // e1234
            ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) - (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      354      382        0
    //    simd2       16       17        0
    //    simd3      118      128        0
    //    simd4       63       69        0
    // Totals...
    // yes simd      551      596        0
    //  no simd      992     1076        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e12345]) * self.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e5
            (other[e12345] * self[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group3()),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group4()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group6()),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group9()),
            // e1234
            (other[e12345] * self[e45]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      378      424        0
    //    simd2       16       16        0
    //    simd3      126      136        0
    //    simd4       67       69        0
    // Totals...
    // yes simd      587      645        0
    //  no simd     1056     1140        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group4()[0]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[1] * self.group4()[1]) + (other.group0()[2] * self.group9()[1])),
                ((other.group0()[1] * self.group4()[2]) + (other.group0()[2] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))),
            // e5
            (-(self.group0()[0] * other.group0()[1]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group8()[0])),
                ((other.group0()[1] * self.group6()[1]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group8()[2])),
                (-(other.group0()[0] * self[e1]) - (other.group0()[2] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8())
                + (Simd32x3::from(other.group0()[1]) * self.group7())
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group4()[0]) - (other.group0()[2] * self.group5()[0])),
                (-(other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group5()[1])),
                (-(other.group0()[1] * self.group4()[2]) - (other.group0()[2] * self.group5()[2])),
                ((other.group0()[1] * self[e45]) + (other.group0()[2] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * self.group4())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))),
            // e1234
            ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      456      500        0
    //    simd2       25       27        0
    //    simd3      154      164        0
    //    simd4       78       80        0
    // Totals...
    // yes simd      713      771        0
    //  no simd     1280     1366        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (other.group2()[0] * self.group7()[2])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            (-(other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (other.group2()[1] * self.group9()[2]) + (other.group2()[2] * self.group5()[1]) + (other.group1()[0] * self.group9()[3])),
                ((self.group0()[0] * other.group2()[1]) + (other.group2()[0] * self.group5()[2]) + (other.group2()[2] * self.group9()[0]) + (other.group1()[1] * self.group9()[3])),
                ((self.group0()[0] * other.group2()[2]) + (other.group2()[0] * self.group9()[1]) + (other.group2()[1] * self.group5()[0]) + (other.group1()[2] * self.group9()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group2(), 0, 0, 1))
                - (swizzle!(other.group2(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2])
                    + (other.group2()[0] * self.group7()[0])
                    + (other.group2()[1] * self.group7()[1])
                    + (other.group2()[2] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group2()) + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group2(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group2(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group2(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group2()[0] * self[e45]) - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (other.group1()[0] * self.group3()[3])),
                ((other.group0()[2] * self.group3()[0]) + (other.group2()[0] * self.group4()[2]) + (other.group2()[1] * self[e45]) - (other.group2()[2] * self.group4()[0])
                    + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[0] * self.group5()[0]) - (other.group2()[1] * self.group5()[1]) + (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group5()[2])
                    + (other.group2()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      435      482        0
    //    simd2       26       28        0
    //    simd3      155      164        0
    //    simd4       90       92        0
    // Totals...
    // yes simd      706      766        0
    //  no simd     1312     1398        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[1] * other.group2()[2])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group1(), 1, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            (-(self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group2()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[1] * self.group9()[2])),
                ((self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[2] * self.group9()[0])),
                ((self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[0] * self.group9()[1])),
                ((other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group2())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group4())
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[0] * other.group2()[2])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (self.group7()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group6(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group7()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group7())
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) - (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3])),
                ((other.group0()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1]) + (other.group1()[2] * self.group3()[3])),
                (-(self.group5()[1] * other.group2()[1]) - (self.group5()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group9())
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      474      526        0
    //    simd2       17       17        0
    //    simd3      152      160        0
    //    simd4       79       81        0
    // Totals...
    // yes simd      722      784        0
    //  no simd     1280     1364        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group2()[0] * self.group4()[0])
                    + (other.group2()[1] * self.group4()[1])
                    + (other.group2()[2] * self.group4()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    - (other.group1()[1] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group2()[0] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[0])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    - (other.group1()[0] * self.group9()[1])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            ((other.group2()[0] * self.group5()[0]) - (other.group2()[0] * self.group9()[0]) + (other.group2()[1] * self.group5()[1]) - (other.group2()[1] * self.group9()[1])
                + (other.group2()[2] * self.group5()[2])
                - (other.group2()[2] * self.group9()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group6()[1])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    - (self.group8()[0] * other.group1()[2])
                    + (other.group1()[1] * self[e1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    - (self.group8()[1] * other.group1()[0])
                    + (other.group1()[2] * self[e1])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group2(), 2, 1, 2))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group2(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))
                - (swizzle!(other.group2(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) - (other.group2()[0] * self[e45]) + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group2()[0] * self.group4()[2]) - (other.group2()[1] * self[e45]) + (other.group2()[2] * self.group4()[0])
                    - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) + (other.group2()[0] * self.group4()[1])
                    - (other.group2()[1] * self.group4()[0])
                    - (other.group2()[2] * self[e45])
                    - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group3()[3], self.group9()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group3()[3], self.group9()[0]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group9()[1], self.group5()[0], self.group3()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[0], self.group5()[0]]) * swizzle!(other.group2(), 2, 2, 1))
                - (Simd32x3::from([self.group9()[2], self.group5()[2], self.group9()[1]]) * swizzle!(other.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    + (other.group1()[3] * self.group6()[0])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[3] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group6()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group6()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])
                    - (self.group8()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      506      558        0
    //    simd2       20       20        0
    //    simd3      166      174        0
    //    simd4       99      101        0
    // Totals...
    // yes simd      791      853        0
    //  no simd     1440     1524        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group2()[3] * self[e1])
                    + (other.group3()[3] * self.group1()[3])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (other.group2()[3] * self.group9()[3])
                    - (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) - (other.group0()[0] * self.group9()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group2()[2])
                    + (self.group5()[1] * other.group3()[2])
                    - (other.group1()[1] * self.group9()[2])
                    - (other.group2()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[2] * other.group3()[0])
                    - (other.group1()[2] * self.group9()[0])
                    - (other.group2()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    + (self.group4()[2] * other.group3()[3])
                    + (self.group5()[0] * other.group3()[1])
                    - (other.group1()[0] * self.group9()[1])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[1] * other.group3()[1])
                    - (self.group4()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                + (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group3()[2])
                + (other.group3()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group6()[0])),
                (-(self.group8()[0] * other.group1()[2])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    + (other.group3()[1] * self[e1])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group6()[1])),
                (-(self.group8()[1] * other.group1()[0])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    + (other.group3()[2] * self[e1])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group2()[3] * self[e1])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1]) + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0]) - (other.group3()[0] * self.group1()[2]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0]) + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group8())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (self.group4()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (self.group4()[0] * other.group2()[2])),
                (-(other.group0()[1] * self.group3()[0]) + (self.group4()[1] * other.group2()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group9())
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group2()[3]) * self.group5())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                - (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group2()[1] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[1])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group2()[0] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group2()[0] * self.group9()[1])
                    + (other.group2()[1] * self.group9()[0])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (self.group7()[1] * other.group2()[2])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group6()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (self.group7()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group6()[0])),
                (-(self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                - (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group6()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      356      384        0
    //    simd2       17       19        0
    //    simd3      122      132        0
    //    simd4       67       73        0
    // Totals...
    // yes simd      562      608        0
    //  no simd     1024     1110        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from([self.group3()[3], self.group0()[1]]) * other.group0() * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from([self.group0()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self[e1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group9()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group9())),
            // e1234
            ((other.group0()[0] * self[e45]) + (other.group0()[1] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      398        0
    //    simd2       17       18        0
    //    simd3      123      133        0
    //    simd4       66       69        0
    // Totals...
    // yes simd      566      618        0
    //  no simd     1027     1109        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group6()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (other.group0()[1] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self.group9()[3]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      359      399        0
    //    simd2       17       18        0
    //    simd3      121      131        0
    //    simd4       68       72        0
    // Totals...
    // yes simd      565      620        0
    //  no simd     1028     1116        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self[e45], self.group1()[3]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group7()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group7()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group7()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e5
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[0]) * -1.0),
                ((other.group0()[0] * self.group9()[1]) * -1.0),
                ((other.group0()[0] * self.group9()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group7()),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group3()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[1]) * self.group9())),
            // e1234
            (other.group0()[1] * self[e45]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      392      439        0
    //    simd2       17       17        0
    //    simd3      126      136        0
    //    simd4       71       74        0
    // Totals...
    // yes simd      606      666        0
    //  no simd     1088     1177        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (other.group0()[3] * self[e45]),
            ]),
            // e5
            ((self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1])),
                ((self.group8()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group6()[3])),
                ((self.group8()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[2] * self.group9()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group6()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group6()[2])),
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (other.group0()[3] * self.group1()[3] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      434      482        0
    //    simd2       20       20        0
    //    simd3      138      146        0
    //    simd4       82       85        0
    // Totals...
    // yes simd      674      733        0
    //  no simd     1216     1300        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])
                    + (other.group1()[3] * self.group1()[3])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2]) - (other.group1()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group1()[3]) - (self.group4()[2] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group5()[1] * other.group1()[2])
                    + (other.group0()[0] * self[e45])),
                ((self.group0()[0] * other.group1()[1]) - (self.group4()[0] * other.group0()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self[e45])),
                ((self.group0()[0] * other.group1()[2]) - (self.group4()[1] * other.group0()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e45])),
                (-(self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group1()[3]) + (self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group0()[3])
                    + (other.group0()[0] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group8()[1] * other.group0()[3])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    + (other.group1()[1] * self[e1])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group8()[2] * other.group0()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[2] * self[e1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                (-(self.group7()[2] * other.group0()[2]) - (other.group1()[1] * self.group6()[1]) - (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group6()[0]) + (other.group1()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1]) + (other.group1()[0] * self.group6()[2])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group6()[2]) + (other.group1()[1] * self.group6()[0])),
                (-(self.group8()[1] * other.group1()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group1()[0]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[2] * other.group1()[2]) - (other.group0()[3] * self.group1()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      437      481        0
    //    simd2       21       22        0
    //    simd3      135      145        0
    //    simd4       67       69        0
    // Totals...
    // yes simd      660      717        0
    //  no simd     1152     1236        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group8()[0])
                - (other.group0()[1] * self.group8()[1])
                - (other.group0()[2] * self.group8()[2])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group5()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group5()[2])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group9()[1]) - (other.group0()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group1(), 2, 1, 2))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                - (swizzle!(other.group1(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group7()[2])
                    + (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])
                    + (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0]) - (other.group1()[0] * self.group7()[1])
                    + (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group7()[0])
                    + (other.group1()[1] * self.group7()[1])
                    + (other.group1()[2] * self.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group1())
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group1(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group1(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group1()[0] * self[e45]) - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0]) + (other.group1()[0] * self.group4()[2]) + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group5()[0])
                    - (other.group1()[1] * self.group5()[1])
                    + (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group5()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      413      461        0
    //    simd2       23       24        0
    //    simd3      139      148        0
    //    simd4       85       87        0
    // Totals...
    // yes simd      660      720        0
    //  no simd     1216     1301        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group1()[2])
                    + (self.group7()[2] * other.group1()[1])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) - (self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group1()[0])
                    + (other.group0()[1] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1]) + (self.group7()[1] * other.group1()[0]) - (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e5
            ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self[e1])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group1()[3])
                    + (self.group5()[1] * other.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[1] * self.group9()[2])),
                ((self.group5()[1] * other.group1()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group9()[1])),
                ((other.group0()[2] * self.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self[e45]]) * other.group1())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group9()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group6()[1]) + (other.group0()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[2]) + (other.group0()[3] * self.group6()[1])),
                ((other.group0()[1] * self.group6()[0]) + (other.group0()[3] * self.group6()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[3]]) * other.group0())
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group7()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group7()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group9()[0]),
                (other.group0()[1] * self.group3()[3]),
                (other.group0()[2] * self.group3()[3]),
                (-(self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group9()[0]]) * swizzle!(other.group1(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group9(), 1, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group9()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      708      760        0
    //    simd2       32       32        0
    //    simd3      236      244        0
    //    simd4      126      128        0
    // Totals...
    // yes simd     1102     1164        0
    //  no simd     1984     2068        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[0])
                    - (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group3()[2])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[3] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[0])
                    + (other.group9()[1] * self.group1()[1])
                    + (other.group9()[2] * self.group1()[2])
                    + (other[e1] * self[e45])
                    + (other[e45] * self[e1])),
                (-(other.group0()[0] * self.group0()[0])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group3()[2])
                    + (other.group5()[0] * self.group5()[0])
                    + (other.group5()[1] * self.group5()[1])
                    + (other.group5()[2] * self.group5()[2])
                    + (self.group4()[0] * other.group3()[0])
                    + (self.group4()[1] * other.group3()[1])
                    + (self.group4()[2] * other.group3()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group6()[3] * self.group6()[3])
                    - (other.group9()[3] * self[e45])
                    - (self.group9()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[1]) * other.group0())
                - (Simd32x2::from(other.group8()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group8()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group8()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(self.group8()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group8()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group8()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                - (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                - (Simd32x2::from(self.group6()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group6()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group6()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[0]) - (other.group4()[0] * self.group9()[3]) + (other.group4()[1] * self.group3()[2]) + (other.group5()[0] * self.group3()[3])
                    - (other.group5()[1] * self.group9()[2])
                    + (other.group7()[0] * self[e1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    - (other.group8()[0] * self.group1()[3])
                    + (other.group8()[1] * self.group7()[2])
                    - (other.group8()[2] * self.group7()[1])
                    + (self.group4()[0] * other.group9()[3])
                    - (self.group4()[2] * other.group3()[1])
                    + (self.group5()[0] * other.group3()[3])
                    + (self.group5()[1] * other.group9()[2])
                    - (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e45])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group6()[0])),
                ((self.group0()[0] * other.group9()[1]) - (other.group4()[1] * self.group9()[3]) + (other.group4()[2] * self.group3()[0]) + (other.group5()[1] * self.group3()[3])
                    - (other.group5()[2] * self.group9()[0])
                    + (other.group7()[0] * self.group8()[2])
                    + (other.group7()[1] * self[e1])
                    - (other.group7()[2] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[2])
                    - (other.group8()[1] * self.group1()[3])
                    + (other.group8()[2] * self.group7()[0])
                    - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group9()[3])
                    + (self.group5()[1] * other.group3()[3])
                    + (self.group5()[2] * other.group9()[0])
                    - (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group3()[1] * self[e45])
                    + (other.group6()[1] * self.group6()[3])
                    + (other.group6()[3] * self.group6()[1])),
                ((self.group0()[0] * other.group9()[2]) + (other.group4()[0] * self.group3()[1]) - (other.group4()[2] * self.group9()[3]) - (other.group5()[0] * self.group9()[1])
                    + (other.group5()[2] * self.group3()[3])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group7()[2] * self[e1])
                    + (other.group8()[0] * self.group7()[1])
                    - (other.group8()[1] * self.group7()[0])
                    - (other.group8()[2] * self.group1()[3])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group9()[3])
                    + (self.group5()[0] * other.group9()[1])
                    + (self.group5()[2] * other.group3()[3])
                    - (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group3()[2] * self[e45])
                    + (other.group6()[2] * self.group6()[3])
                    + (other.group6()[3] * self.group6()[2])),
                (-(other.group0()[0] * self[e45])
                    + (other.group4()[0] * self.group5()[0])
                    + (other.group4()[1] * self.group5()[1])
                    + (other.group4()[2] * self.group5()[2])
                    + (other.group4()[2] * self.group9()[2])
                    + (other.group5()[0] * self.group4()[0])
                    + (other.group5()[1] * self.group4()[1])
                    + (other.group5()[2] * self.group4()[2])
                    + (other.group7()[0] * self.group1()[0])
                    + (other.group7()[1] * self.group1()[1])
                    - (other.group7()[1] * self.group6()[1])
                    + (other.group7()[2] * self.group1()[2])
                    - (other.group7()[2] * self.group6()[2])
                    - (self.group4()[1] * other.group9()[1])
                    - (self.group4()[2] * other.group9()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group6()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group6()[2])
                    - (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group9(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))),
            // e5
            (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self[e1]) - (self.group0()[0] * other.group9()[3])
                + (self.group0()[1] * other[e1])
                + (other.group5()[0] * self.group3()[0])
                + (other.group5()[1] * self.group3()[1])
                + (other.group5()[2] * self.group3()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group6()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group6()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group6()[2])
                + (self.group5()[0] * other.group3()[0])
                + (self.group5()[1] * other.group3()[1])
                + (self.group5()[2] * other.group3()[2])
                + (self.group8()[0] * other.group1()[0])
                - (self.group8()[0] * other.group6()[0])
                + (self.group8()[1] * other.group1()[1])
                - (self.group8()[1] * other.group6()[1])
                + (self.group8()[2] * other.group1()[2])
                - (self.group8()[2] * other.group6()[2])
                - (other.group3()[0] * self.group9()[0])
                - (other.group3()[1] * self.group9()[1])
                - (other.group3()[2] * self.group9()[2])
                - (other.group3()[3] * self.group9()[3])
                - (other.group6()[3] * self[e1])
                + (other.group9()[0] * self.group3()[0])
                + (other.group9()[1] * self.group3()[1])
                + (other.group9()[2] * self.group3()[2])
                + (other.group9()[3] * self.group3()[3])
                + (self.group6()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) + (self.group0()[0] * other.group8()[0]) + (other.group5()[0] * self[e1]) - (other.group5()[1] * self.group8()[2])
                    + (other.group5()[2] * self.group8()[1])
                    + (other.group8()[1] * self.group9()[2])
                    + (other.group8()[2] * self.group5()[1])
                    + (self.group8()[0] * other.group3()[3])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group6()[3])
                    + (other.group3()[2] * self.group6()[1])
                    + (other.group6()[0] * self.group9()[3])
                    + (other.group9()[0] * self[e1])
                    + (other.group9()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[1]) + (self.group0()[0] * other.group8()[1]) + (other.group5()[0] * self.group8()[2]) + (other.group5()[1] * self[e1])
                    - (other.group5()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group5()[2])
                    + (other.group8()[2] * self.group9()[0])
                    + (self.group8()[1] * other.group3()[3])
                    + (other.group3()[0] * self.group6()[2])
                    + (other.group3()[1] * self.group6()[3])
                    + (other.group6()[1] * self.group9()[3])
                    + (other.group9()[1] * self[e1])
                    + (other.group9()[3] * self.group6()[1])
                    - (self.group9()[1] * other[e1])),
                ((other.group0()[0] * self.group8()[2]) + (self.group0()[0] * other.group8()[2]) - (other.group5()[0] * self.group8()[1])
                    + (other.group5()[1] * self.group8()[0])
                    + (other.group5()[2] * self[e1])
                    + (other.group8()[0] * self.group9()[1])
                    + (other.group8()[1] * self.group5()[0])
                    + (self.group8()[2] * other.group3()[3])
                    + (other.group3()[1] * self.group6()[0])
                    + (other.group3()[2] * self.group6()[3])
                    + (other.group6()[2] * self.group9()[3])
                    + (other.group9()[2] * self[e1])
                    + (other.group9()[3] * self.group6()[2])
                    - (self.group9()[2] * other[e1])),
                ((other.group4()[0] * self.group8()[0])
                    + (other.group4()[1] * self.group8()[1])
                    + (other.group4()[2] * self.group8()[2])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[2] * self.group9()[2])
                    - (other.group9()[1] * self.group6()[1])
                    - (other.group9()[2] * self.group6()[2])
                    - (other[e45] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                + (Simd32x4::from(self.group0()[1]) * other.group3())
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group9(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[3], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e1], other.group1()[1], other.group1()[2], other.group6()[1]]) * swizzle!(self.group9(), 0, 3, 3, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group7())
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group1()[3]) * self.group5())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group9()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))
                - (swizzle!(other.group7(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1]) + (other.group9()[1] * self.group1()[2]) - (other.group9()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0]) - (other.group9()[0] * self.group1()[2])
                    + (other.group9()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0]) + (other.group9()[0] * self.group1()[1]) - (other.group9()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group5())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group5())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e1]) * self.group4())
                + (Simd32x3::from(other[e45]) * self.group8())
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group8(), 2, 1, 2))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                - (swizzle!(other.group4(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))
                - (swizzle!(other.group8(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group5()[0]) - (self.group0()[0] * other.group5()[0]) - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[1] * self.group5()[2])
                    - (other.group5()[2] * self.group5()[1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    + (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group7()[2])
                    + (other.group8()[2] * self.group7()[1])
                    + (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group6()[2] * self.group6()[1])
                    + (other.group6()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group5()[1])
                    - (self.group0()[0] * other.group5()[1])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group5()[0] * self.group5()[2])
                    + (other.group5()[2] * self.group5()[0])
                    + (other.group7()[0] * self.group8()[2])
                    - (other.group7()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group7()[2])
                    + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group7()[0])
                    + (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group6()[0] * self.group6()[2])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group5()[2]) - (self.group0()[0] * other.group5()[2]) - (other.group4()[1] * self.group3()[0])
                    + (other.group5()[0] * self.group5()[1])
                    - (other.group5()[1] * self.group5()[0])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[1])
                    + (other.group8()[1] * self.group7()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group6()[1] * self.group6()[0])
                    + (other.group6()[3] * self.group1()[2])),
                ((other.group4()[0] * self.group3()[0]) + (other.group4()[1] * self.group3()[1]) + (other.group4()[2] * self.group3()[2])
                    - (other.group5()[2] * self.group9()[2])
                    - (other.group7()[0] * self.group8()[0])
                    - (other.group7()[1] * self.group8()[1])
                    - (other.group7()[2] * self.group8()[2])
                    + (other.group8()[0] * self.group7()[0])
                    + (other.group8()[1] * self.group7()[1])
                    + (other.group8()[2] * self.group7()[2])
                    - (self.group4()[2] * other.group3()[2])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group6())
                + (Simd32x4::from(self.group0()[1]) * other.group6())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                + (Simd32x4::from(self[e1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group9(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group9(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group7()) - (Simd32x3::from(self.group0()[0]) * other.group4())
                + (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other[e45]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group9()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (swizzle!(other.group4(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                + (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group9()[2]) + (other.group3()[2] * self.group9()[1]) + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])),
                ((other.group3()[0] * self.group9()[2]) - (other.group3()[2] * self.group9()[0]) - (other.group9()[0] * self.group3()[2]) + (other.group9()[2] * self.group3()[0])),
                (-(other.group3()[0] * self.group9()[1]) + (other.group3()[1] * self.group9()[0]) + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group8())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group8())
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group8(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group8(), 1, 0, 0))
                - (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group4()[0] * self[e1]) + (other.group4()[1] * self.group8()[2]) - (other.group4()[2] * self.group8()[1])
                    + (other.group5()[1] * self.group1()[2])
                    + (other.group8()[0] * self[e45])
                    - (other.group8()[1] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[1])
                    - (self.group5()[1] * other.group1()[2])
                    - (self.group8()[0] * other[e45])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[0])
                    - (other.group6()[1] * self.group9()[2])
                    + (other.group9()[2] * self.group6()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group4()[0] * self.group8()[2]) - (other.group4()[1] * self[e1])
                    + (other.group4()[2] * self.group8()[0])
                    + (other.group5()[2] * self.group1()[0])
                    + (other.group8()[0] * self.group4()[2])
                    + (other.group8()[1] * self[e45])
                    - (other.group8()[2] * self.group4()[0])
                    - (self.group5()[2] * other.group1()[0])
                    - (self.group8()[1] * other[e45])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[1])
                    - (other.group6()[2] * self.group9()[0])
                    + (other.group9()[0] * self.group6()[2])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group4()[0] * self.group8()[1]) - (other.group4()[1] * self.group8()[0]) - (other.group4()[2] * self[e1])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group8()[0] * self.group4()[1])
                    + (other.group8()[1] * self.group4()[0])
                    + (other.group8()[2] * self[e45])
                    - (self.group5()[0] * other.group1()[1])
                    - (self.group8()[2] * other[e45])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[2])
                    - (other.group6()[0] * self.group9()[1])
                    + (other.group9()[1] * self.group6()[0])),
                ((other.group0()[0] * self[e1])
                    - (other.group5()[0] * self.group8()[0])
                    - (other.group5()[1] * self.group8()[1])
                    - (other.group5()[2] * self.group8()[2])
                    - (other.group8()[0] * self.group5()[0])
                    - (other.group8()[1] * self.group5()[1])
                    + (other.group8()[1] * self.group9()[1])
                    - (other.group8()[2] * self.group5()[2])
                    + (other.group8()[2] * self.group9()[2])
                    - (self.group8()[1] * other.group9()[1])
                    - (self.group8()[2] * other.group9()[2])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[2] * self.group6()[2])
                    - (self.group3()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group9())
                + (Simd32x4::from(self.group0()[1]) * other.group9())
                + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group6(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[3])
                + (other.group0()[1] * self[e45])
                + (self.group0()[0] * other.group1()[3])
                + (self.group0()[1] * other[e45])
                + (other.group4()[0] * self.group1()[0])
                - (other.group4()[0] * self.group6()[0])
                + (other.group4()[1] * self.group1()[1])
                - (other.group4()[1] * self.group6()[1])
                + (other.group4()[2] * self.group1()[2])
                - (other.group4()[2] * self.group6()[2])
                - (other.group5()[0] * self.group7()[0])
                - (other.group5()[1] * self.group7()[1])
                - (other.group5()[2] * self.group7()[2])
                - (other.group7()[0] * self.group5()[0])
                - (other.group7()[0] * self.group9()[0])
                - (other.group7()[1] * self.group5()[1])
                - (other.group7()[1] * self.group9()[1])
                - (other.group7()[2] * self.group5()[2])
                - (other.group7()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group6()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group6()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group6()[2])
                + (self.group7()[0] * other.group9()[0])
                + (self.group7()[1] * other.group9()[1])
                + (self.group7()[2] * other.group9()[2])
                + (other.group1()[3] * self.group3()[3])
                - (other.group3()[3] * self.group1()[3])
                + (other.group6()[3] * self[e45])
                - (self.group6()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      381      427        0
    //    simd2       19       21        0
    //    simd3      127      135        0
    //    simd4       72       75        0
    // Totals...
    // yes simd      599      658        0
    //  no simd     1088     1174        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group1()[3], self[e45]]) * Simd32x2::from([1.0, -1.0]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group6()[1] * other.group0()[2]),
                (self.group6()[2] * other.group0()[0]),
                (self.group6()[0] * other.group0()[1]),
                (-(self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      388        0
    //    simd2       19       21        0
    //    simd3      130      140        0
    //    simd4       75       82        0
    // Totals...
    // yes simd      584      631        0
    //  no simd     1088     1178        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group1())),
            // e5
            ((self.group0()[1] * other.group0()[1]) + (self.group6()[3] * other.group0()[1]) - (other.group0()[2] * self[e1]) + (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self[e45]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 1, 1, 0) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())
                + (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group4())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 1)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]) * swizzle!(other.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * swizzle!(other.group0(), 2, 2, 2, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[2]) * self.group8())
                + (Simd32x3::from(other.group0()[3]) * self.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[3]) * self.group9())
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (self.group3()[3] * other.group0()[0]) + (other.group0()[2] * self[e45]) + (other.group0()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      393      442        0
    //    simd2       18       18        0
    //    simd3      133      142        0
    //    simd4       73       75        0
    // Totals...
    // yes simd      617      677        0
    //  no simd     1120     1204        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other[e2]) + (self.group8()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                (-(self.group7()[1] * other[e2]) + (self.group8()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                (-(self.group7()[2] * other[e2]) + (self.group8()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) - (self.group6()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[1] * other[e2])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (self.group6()[3] * other[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group9()[0] * other[e2]) - (self.group9()[3] * other.group0()[0])),
                (-(self.group9()[1] * other[e2]) - (self.group9()[3] * other.group0()[1])),
                (-(self.group9()[2] * other[e2]) - (self.group9()[3] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e2]) * self.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[0])),
                ((self.group7()[1] * other[e2]) + (self.group1()[2] * other.group0()[0]) + (self.group6()[3] * other.group0()[1])),
                ((self.group7()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) + (self.group6()[3] * other.group0()[2])),
                (-(self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[3]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      354      383        0
    //    simd2       16       18        0
    //    simd3      118      130        0
    //    simd4       63       73        0
    // Totals...
    // yes simd      551      604        0
    //  no simd      992     1101        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group9()[3] * other[scalar] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group7()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group1()[3] * other[scalar]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      390      438        0
    //    simd2       19       19        0
    //    simd3      132      140        0
    //    simd4       74       77        0
    // Totals...
    // yes simd      615      674        0
    //  no simd     1120     1204        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group1()[3] * other.group0()[3]) + (self[e1] * other[e4315])),
                (-(self.group9()[3] * other[e4315]) - (other.group0()[3] * self[e45])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) - (self.group3()[3] * other[e4315])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2]) - (self[e1] * other[e4315])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())
                + (Simd32x3::from(other[e4315]) * self.group8())),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other[e4315]) * self.group5())
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other[e4315]) + (self.group6()[1] * other.group0()[2])),
                (-(self.group8()[1] * other[e4315]) + (self.group6()[2] * other.group0()[0])),
                (-(self.group8()[2] * other[e4315]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[1] * other[e4315]) + (self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])
                - (self.group6()[3] * other[e4315])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      358      390        0
    //    simd2       18       19        0
    //    simd3      126      136        0
    //    simd4       71       77        0
    // Totals...
    // yes simd      573      622        0
    //  no simd     1056     1144        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group0()[2]) * self.group0())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (self.group7()[0] * other.group0()[1]),
                (self.group7()[1] * other.group0()[1]),
                (self.group7()[2] * other.group0()[1]),
                (other.group0()[0] * self.group6()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e5
            ((self.group0()[1] * other.group0()[1]) + (other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group0()[2]) * self.group3())
                - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(other.group0()[2]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from(other.group0()[2]) * self.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[2]) * self.group9())
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      482      540        0
    //    simd2       28       28        0
    //    simd3      170      176        0
    //    simd4      106      108        0
    // Totals...
    // yes simd      786      852        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group3()[3] * other.group1()[3])
                    + (self.group9()[0] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[1])
                    + (self.group9()[2] * other.group3()[2])),
                (-(self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[2] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[3])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other.group2()[3]) - (self.group7()[1] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[0])
                    + (self.group6()[1] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[0])),
                ((self.group7()[0] * other.group2()[2]) - (self.group7()[1] * other.group2()[3]) - (self.group7()[2] * other.group2()[0]) + (self.group8()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[1])
                    + (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                (-(self.group7()[0] * other.group2()[1]) + (self.group7()[1] * other.group2()[0]) - (self.group7()[2] * other.group2()[3])
                    + (self.group8()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    - (self.group6()[1] * other.group0()[1])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[3]]) * other.group0())),
            // e5
            ((self.group0()[1] * other.group2()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])
                - (self.group1()[2] * other.group2()[2])
                - (self.group6()[0] * other.group2()[0])
                - (self.group6()[1] * other.group2()[1])
                - (self.group6()[2] * other.group2()[2])
                + (self.group6()[3] * other.group2()[3])
                + (other.group0()[3] * self[e1])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group2()[3]) + (self.group5()[1] * other.group2()[2]) + (self.group9()[2] * other.group2()[1]) + (self.group9()[3] * other.group1()[0])),
                ((self.group5()[1] * other.group2()[3]) + (self.group5()[2] * other.group2()[0]) + (self.group9()[0] * other.group2()[2]) + (self.group9()[3] * other.group1()[1])),
                ((self.group5()[0] * other.group2()[1]) + (self.group5()[2] * other.group2()[3]) + (self.group9()[1] * other.group2()[0]) + (self.group9()[3] * other.group1()[2])),
                ((self.group5()[0] * other.group3()[0]) + (self.group5()[1] * other.group3()[1]) + (self.group5()[2] * other.group3()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group0()[1]]))
                + (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self[e45]]) * other.group2())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 1, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[0], self.group4()[2]]) * swizzle!(other.group2(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group1()[1]]) * swizzle!(self.group9(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]) * swizzle!(self.group9(), 3, 3, 3, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group9()[1] * other.group3()[2]) + (self.group9()[2] * other.group3()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0]) + (self.group9()[0] * other.group3()[2])
                    - (self.group9()[2] * other.group3()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0]) - (self.group9()[0] * other.group3()[1]) + (self.group9()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group2()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group6()[0] * other.group0()[3])
                    + (self.group6()[1] * other.group1()[2])
                    + (self.group6()[3] * other.group3()[0])
                    + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group6()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group1()[0])
                    + (self.group6()[3] * other.group3()[1])
                    + (other.group0()[1] * self[e1])),
                ((self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group6()[0] * other.group1()[1])
                    + (self.group6()[2] * other.group0()[3])
                    + (self.group6()[3] * other.group3()[2])
                    + (other.group0()[2] * self[e1])),
                (-(self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group6()[0] * other.group3()[0])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group7()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group6()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) + (self.group6()[1] * other.group2()[2]) - (self.group6()[2] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0]) - (self.group6()[0] * other.group2()[2])
                    + (self.group6()[2] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group6()[0] * other.group2()[1]) - (self.group6()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group5()[1] * other.group3()[2]) - (self.group9()[3] * other.group0()[0]) + (other.group2()[0] * self[e45])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group5()[2] * other.group3()[0]) - (self.group9()[3] * other.group0()[1]) + (other.group2()[1] * self[e45])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group5()[0] * other.group3()[1]) - (self.group9()[3] * other.group0()[2]) + (other.group2()[2] * self[e45])),
                (-(self.group5()[1] * other.group2()[1]) - (self.group5()[2] * other.group2()[2]) - (self.group3()[3] * other.group2()[3])
                    + (self.group9()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[2]]) * swizzle!(self.group9(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                - (swizzle!(self.group9(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e1234
            ((self.group0()[0] * other.group3()[3])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group0()[0])
                - (self.group9()[1] * other.group0()[1])
                - (self.group9()[2] * other.group0()[2])
                + (other.group0()[3] * self[e45])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      516      574        0
    //    simd2       20       20        0
    //    simd3      168      174        0
    //    simd4      103      105        0
    // Totals...
    // yes simd      807      873        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[2] * other.group1()[2])
                    + (other.group2()[3] * self[e1])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    - (self.group9()[3] * other.group2()[3])
                    - (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[1] * other.group3()[2])
                    - (self.group9()[2] * other.group1()[1])
                    - (self.group9()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[2] * other.group3()[0])
                    - (self.group9()[0] * other.group1()[2])
                    - (self.group9()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group4()[0] * other.group2()[1]) + (self.group4()[2] * other.group3()[3]) + (self.group5()[0] * other.group3()[1])
                    - (self.group3()[2] * other.group2()[3])
                    - (self.group9()[1] * other.group1()[0])),
                (-(self.group4()[1] * other.group3()[1]) + (self.group4()[2] * other.group1()[2]) - (self.group4()[2] * other.group3()[2])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group9()[3], self[e45]]) * swizzle!(other.group0(), 2, 0, 2, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (self.group3()[0] * other.group1()[0])
                + (self.group3()[0] * other.group3()[0])
                + (self.group3()[1] * other.group1()[1])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[2] * other.group3()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group2()[0])
                - (self.group9()[1] * other.group2()[1])
                - (self.group9()[2] * other.group2()[2])
                - (self.group9()[3] * other.group0()[3])
                - (self.group9()[3] * other.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[3])
                    + (self.group6()[1] * other.group2()[2])
                    + (self.group6()[3] * other.group2()[0])
                    + (other.group1()[0] * self[e1])
                    + (other.group3()[0] * self[e1])),
                (-(self.group8()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group6()[1] * other.group3()[3])
                    + (self.group6()[2] * other.group2()[0])
                    + (self.group6()[3] * other.group2()[1])
                    + (other.group1()[1] * self[e1])
                    + (other.group3()[1] * self[e1])),
                (-(self.group8()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group6()[0] * other.group2()[1])
                    + (self.group6()[2] * other.group3()[3])
                    + (self.group6()[3] * other.group2()[2])
                    + (other.group1()[2] * self[e1])
                    + (other.group3()[2] * self[e1])),
                (-(self.group7()[2] * other.group2()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])
                    - (self.group6()[3] * other.group0()[3])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) + (self.group6()[1] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group6()[0] * other.group1()[2]) + (self.group6()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) + (self.group6()[0] * other.group1()[1])
                    - (self.group6()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) - (self.group5()[0] * other.group0()[3]) - (self.group3()[1] * other.group0()[2]) - (self.group9()[3] * other.group0()[0])),
                ((self.group4()[0] * other.group2()[2]) - (self.group5()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[0]) - (self.group9()[3] * other.group0()[1])),
                ((self.group4()[1] * other.group2()[0]) - (self.group5()[2] * other.group0()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group9()[3] * other.group0()[2])),
                (-(self.group5()[2] * other.group3()[2])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[2]]) * swizzle!(self.group9(), 0, 1, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[3]]) * swizzle!(self.group9(), 1, 2, 2, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (swizzle!(self.group3(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group1()[2]) - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group9()[1] * other.group2()[2])
                    - (self.group9()[2] * other.group2()[1])),
                ((self.group3()[0] * other.group1()[2]) + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[2] * other.group3()[0])
                    - (self.group9()[0] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[0])),
                (-(self.group3()[0] * other.group1()[1]) - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    + (self.group9()[0] * other.group2()[1])
                    - (self.group9()[1] * other.group2()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group7()[1] * other.group2()[2]) - (self.group8()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group1()[3])
                    + (self.group6()[1] * other.group3()[2])
                    - (self.group6()[3] * other.group1()[0])
                    - (other.group0()[0] * self[e1])),
                ((self.group7()[2] * other.group2()[0]) - (self.group8()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group6()[1] * other.group1()[3])
                    + (self.group6()[2] * other.group3()[0])
                    - (self.group6()[3] * other.group1()[1])
                    - (other.group0()[1] * self[e1])),
                ((self.group7()[0] * other.group2()[1]) - (self.group8()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[2] * other.group1()[3])
                    - (other.group0()[2] * self[e1])),
                (-(self.group8()[1] * other.group1()[1])
                    - (self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    - (self.group6()[0] * other.group2()[0])
                    - (self.group6()[1] * other.group2()[1])
                    - (self.group6()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group6()[3], self.group8()[0]]) * swizzle!(other.group1(), 2, 0, 2, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))),
            // e1234
            ((self.group0()[1] * other.group2()[3]) - (self.group7()[0] * other.group1()[0]) + (self.group7()[0] * other.group3()[0]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[3] * other.group0()[3])
                - (self.group1()[3] * other.group1()[3])
                - (self.group6()[0] * other.group0()[0])
                - (self.group6()[1] * other.group0()[1])
                - (self.group6()[2] * other.group0()[2])
                - (self.group6()[3] * other.group2()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      395      444        0
    //    simd2       19       19        0
    //    simd3      137      146        0
    //    simd4       77       79        0
    // Totals...
    // yes simd      628      688        0
    //  no simd     1152     1236        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group1()[1]) * self.group0())
                + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group7()[0]) + (self.group8()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group7()[1]) + (self.group8()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group7()[2]) + (self.group8()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) - (self.group6()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[1] * other.group1()[0])
                + (other.group1()[0] * self.group6()[3])
                + (other.group1()[1] * self[e1])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group3()[1] * other.group0()[2]) - (self.group9()[3] * other.group0()[0])),
                (-(self.group3()[2] * other.group0()[0]) - (self.group9()[3] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[1]) - (self.group9()[3] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group1()[1]) * self.group3())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group9())
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[1]) * self.group4())
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(other.group1()[0]) * self.group4())
                + (Simd32x3::from(other.group1()[1]) * self.group5())
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group7()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group7()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group6()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group7()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group6()[3] * other.group0()[2])),
                (-(self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group6())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[1]) * self.group7()) + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group8())
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group1()[1]) * self.group9())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[3]) + (other.group1()[1] * self[e45])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])
                - (self.group4()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      406      454        0
    //    simd2       19       19        0
    //    simd3      136      144        0
    //    simd4       75       79        0
    // Totals...
    // yes simd      636      696        0
    //  no simd     1152     1240        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group1()[1]) + (other.group1()[0] * self[e1]) + (self.group1()[3] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group1()[0] * self.group9()[3]) - (other.group0()[3] * self[e45])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group1()[1] * self.group9()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (other.group1()[1] * self.group9()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (other.group1()[1] * self.group9()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self[e45]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3]) - (other.group1()[1] * self.group9()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group8()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((other.group1()[1] * self.group8()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((other.group1()[1] * self.group8()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(other.group1()[0] * self[e1]) - (other.group1()[1] * self.group6()[3]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group7())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(other.group1()[0]) * self.group8())
                + (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group1()[1])
                * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group1()[0]) * self.group5())
                - (Simd32x3::from(other.group1()[1]) * self.group4())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group8()[0]) - (other.group1()[1] * self.group1()[0]) + (self.group6()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group8()[1]) - (other.group1()[1] * self.group1()[1]) + (self.group6()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group8()[2]) - (other.group1()[1] * self.group1()[2]) + (self.group6()[0] * other.group0()[1])),
                ((other.group1()[1] * self[e1]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[1] * other.group1()[0]) - (other.group1()[0] * self.group6()[3])
                + (other.group1()[1] * self.group1()[3])
                + (self.group7()[0] * other.group0()[0])
                + (self.group7()[1] * other.group0()[1])
                + (self.group7()[2] * other.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Plane {}
impl AntiSandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       39        0
    //    simd3        1        2        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       33       57        0
    //  no simd       77      109        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       50        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       96      130        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       31        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       19       42        0
    //  no simd       46       75        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       49       83        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       39        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd4        8        8        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       33       44        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       29        0
    //  no simd       44       56        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       33       53        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       39        0
    //  no simd       40       57        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       32       46        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4       10       16        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       50       92        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        8       22        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       25        0
    //    simd4       10       16        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       49       89        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       31       57        0
    //  no simd       72      103        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       76      107        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       35        0
    //    simd3        1        2        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       29       53        0
    //  no simd       73      105        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[0] * self.group0()[2]),
                (other.group1()[1] * self.group0()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       44        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       36       67        0
    //  no simd       93      136        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) * -1.0),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       48       71        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       22        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       51       74        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       20       38        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       26       44        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       90        0
    //    simd2        6       10        0
    //    simd3       18       22        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       90      145        0
    //  no simd      192      268        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], other[e45]]) * Simd32x2::from([1.0, -1.0]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (other.group4()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                ((other.group6()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group6()[1] * self.group0()[2]) * -1.0),
                ((other.group6()[2] * self.group0()[0]) * -1.0),
                ((other.group6()[0] * self.group0()[1]) * -1.0),
                ((other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       28       46        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       22       45        0
    //  no simd       52       87        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        1        3        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       44       70        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        1        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       41       72        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       51       80        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       50        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       40       71        0
    //  no simd      100      134        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) * -1.0),
                ((self.group0()[3] * other.group0()[1]) * -1.0),
                ((self.group0()[3] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       43        0
    //    simd4       20       24        0
    // Totals...
    // yes simd       37       67        0
    //  no simd       97      139        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[3]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       41        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       60       89        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       49        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       28       61        0
    //  no simd       58       97        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[3])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for QuadNum {}
impl AntiSandwich<AntiCircleRotor> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       35        0
    //    simd4       16       21        0
    // Totals...
    // yes simd       29       56        0
    //  no simd       77      119        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[3] * self.group0()[0]) * -1.0),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                (other.group2()[3] * self.group0()[1]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       21        0
    //    simd4       23       29        0
    // Totals...
    // yes simd       26       50        0
    //  no simd       95      137        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[0]) + (other.group3()[0] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[1] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[2] * self.group0()[2])),
                ((other.group3()[3] * self.group0()[0]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[3]),
                (other.group2()[1] * self.group0()[3]),
                (other.group2()[2] * self.group0()[3]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group3()[0] * self.group0()[3]),
                (other.group3()[1] * self.group0()[3]),
                (other.group3()[2] * self.group0()[3]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                - (swizzle!(self.group0(), 0, 0, 0, 2) * other.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       16       29        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, 1.0, -1.0, -1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 3, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       16       25        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       16       25        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd4       12       21        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       51       94        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2])]),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[1] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4       15       24        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       64      109        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 2, 2, 0) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       43        0
    //    simd3        0        1        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       28       54        0
    //  no simd       58       86        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4       13       20        0
    // Totals...
    // yes simd       25       52        0
    //  no simd       64      112        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * swizzle!(self.group0(), 0, 0, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd4       12       21        0
    // Totals...
    // yes simd       13       33        0
    //  no simd       49       96        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                ((other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       33        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (swizzle!(other.group0(), 0, 1, 1, 0) * swizzle!(self.group0(), 3, 2, 0, 1))
                + (swizzle!(other.group0(), 3, 1, 2, 1) * swizzle!(self.group0(), 0, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        3        7        0
    //  no simd       12       25        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ (Simd32x4::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       20       29        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 3, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       36       60        0
    //  no simd       72      114        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (other.group1()[3] * self.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group1()[3] * self.group0()[1] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[2])),
                (other.group1()[3] * self.group0()[0]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       24        0
    //    simd4       19       25        0
    // Totals...
    // yes simd       22       49        0
    //  no simd       79      124        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[0]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       51        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       39       67        0
    //  no simd       72      115        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (other.group1()[3] * self.group0()[2] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group1()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) - (other.group1()[2] * self.group0()[2])),
                (other.group1()[3] * self.group0()[1]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       36        0
    //    simd4       20       25        0
    // Totals...
    // yes simd       34       61        0
    //  no simd       94      136        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[0]) * -1.0),
                ((other.group3()[1] * self.group0()[0]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[0]) - (other.group2()[3] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                (other.group3()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        4        9        0
    //  no simd       16       33        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[1], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, -1.0, 1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 3, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       16       29        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       16       29        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd4       11       18        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       51       91        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       29        0
    //    simd4       14       21        0
    // Totals...
    // yes simd       25       50        0
    //  no simd       67      113        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[1] * self.group0()[0] * -1.0),
                (other.group1()[2] * self.group0()[0] * -1.0),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 2, 2, 2, 0) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])) + (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group1()[3] * self.group0()[3])])
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       42        0
    //    simd3        0        1        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       26       54        0
    //  no simd       59       89        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4       15       24        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       64      109        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1()) + (Simd32x4::from(self.group0()[3]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (other.group0()[3] * self.group0()[0]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for QuadNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd2        6       10        0
    //    simd3       24       32        0
    //    simd4       22       30        0
    // Totals...
    // yes simd       72      105        0
    //  no simd      192      269        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group6())),
            // e5
            ((other.group0()[1] * self.group0()[1]) - (other.group6()[3] * self.group0()[1]) + (self.group0()[2] * other[e1]) + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[3]) + (other.group9()[0] * self.group0()[1])),
                ((other.group3()[1] * self.group0()[3]) + (other.group9()[1] * self.group0()[1])),
                ((other.group3()[2] * self.group0()[3]) + (other.group9()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())
                + (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]) * swizzle!(self.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group0()[2]) * other.group7())
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group8())
                + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[1]) - (other.group5()[0] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[1]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[2] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])),
                ((other.group9()[3] * self.group0()[2]) + (other.group9()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (other.group3()[3] * self.group0()[0]) - (self.group0()[2] * other[e45]) + (self.group0()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd4       11       20        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       49       97        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[2] * self.group0()[1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        6       10        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       24       41        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((swizzle!(other.group0(), 0, 2, 1, 3) * swizzle!(self.group0(), 2, 1, 0, 3) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (swizzle!(other.group0(), 0, 1, 0, 0) * swizzle!(self.group0(), 3, 2, 1, 1))
                + (swizzle!(other.group0(), 2, 1, 2, 1) * swizzle!(self.group0(), 0, 3, 3, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       24        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       16       42        0
    //  no simd       52       96        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other[e2]) + (self.group0()[3] * other[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       25        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       35        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       19       51        0
    //  no simd       52       99        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[2] * other[e4315]) + (self.group0()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        5        9        0
    // Totals...
    // yes simd        5       10        0
    //  no simd       20       37        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([other.group0()[0], other.group0()[2], other.group0()[1], other.group0()[2]])
                * swizzle!(self.group0(), 2, 1, 0, 3)
                * Simd32x4::from([-1.0, 1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 3, 2, 1, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group0(), 0, 3, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4       24       36        0
    // Totals...
    // yes simd       24       37        0
    //  no simd       96      145        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 2, 2, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group3())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 0)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (swizzle!(self.group0(), 1, 1, 1, 2) * other.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group2())
                + (Simd32x4::from(self.group0()[3]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group0())
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4       21       30        0
    // Totals...
    // yes simd       33       55        0
    //  no simd       96      145        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 2, 2, 2, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       28        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       20       46        0
    //  no simd       56      100        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       39        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       23       55        0
    //  no simd       56      103        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for RoundPoint {}
impl AntiSandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd3        2        3        0
    //    simd4       20       24        0
    // Totals...
    // yes simd       35       61        0
    //  no simd       99      139        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self[e2]),
                (other.group0()[1] * self[e2]),
                (other.group0()[2] * self[e2]),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group2())
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       79        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       66       98        0
    //  no simd      123      155        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[3])),
                ((other.group1()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[3])),
                ((other.group1()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       32        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       22       49        0
    //  no simd       61      100        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       19        0
    //    simd4       15       22        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       64      107        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4       15       21        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       64      102        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       58        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       68      102        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       65        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       49       80        0
    //  no simd       88      125        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       39        0
    //    simd3        0        1        0
    //    simd4       14       18        0
    // Totals...
    // yes simd       33       58        0
    //  no simd       75      114        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd4       18       24        0
    // Totals...
    // yes simd       34       60        0
    //  no simd       88      132        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd3        2        4        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       27       47        0
    //  no simd       52       76        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       45        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       23       63        0
    //  no simd       68      117        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                ((other.group0()[2] * self[e2]) + (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(other[e12345]) * self.group0()), /* e5 */ (other[e12345] * self[e2]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       26        0
    //    simd4       15       21        0
    // Totals...
    // yes simd       21       47        0
    //  no simd       66      110        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        2        3        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       51       81        0
    //  no simd       94      132        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                ((other.group2()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self[e2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       64        0
    //    simd3        2        3        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       53       83        0
    //  no simd       99      137        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                ((other.group2()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd3        2        3        0
    //    simd4       18       22        0
    // Totals...
    // yes simd       36       62        0
    //  no simd       94      134        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       55        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       51       82        0
    //  no simd      123      163        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self[e2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group3()[0] * self[e2])),
                ((other.group1()[1] * self[e2]) + (other.group3()[1] * self[e2])),
                ((other.group1()[2] * self[e2]) + (other.group3()[2] * self[e2])),
                (other.group0()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       45        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       34       56        0
    //  no simd       61       89        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       31       52        0
    //  no simd       64       94        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       43        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       55        0
    //  no simd       64       91        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       29       54        0
    //  no simd       68      105        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       60        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       43       78        0
    //  no simd       88      132        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       50        0
    //    simd3        0        1        0
    //    simd4       11       15        0
    // Totals...
    // yes simd       42       66        0
    //  no simd       75      113        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       49       78        0
    //  no simd       88      120        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      124        0
    //    simd2        4        4        0
    //    simd3       30       36        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      132      184        0
    //  no simd      256      320        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self[e2]) - (other.group8()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                ((other.group7()[1] * self[e2]) - (other.group8()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                ((other.group7()[2] * self[e2]) - (other.group8()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self[e2])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (other.group6()[3] * self[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[0] * self[e2]) - (other.group3()[1] * self.group0()[2])),
                ((other.group5()[1] * self[e2]) - (other.group3()[2] * self.group0()[0])),
                ((other.group5()[2] * self[e2]) - (other.group3()[0] * self.group0()[1])),
                ((other.group5()[2] * self.group0()[2]) - (other[e45] * self[e2])),
            ]) + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group9())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e2]) * other.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1]) + (other.group6()[3] * self.group0()[0])),
                ((other.group8()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group6()[3] * self.group0()[1])),
                ((other.group8()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group6()[3] * self.group0()[2])),
                (-(other.group6()[1] * self.group0()[1]) - (other.group6()[2] * self.group0()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e2]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group4()[0] * self[e2]) + (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self[e2]) + (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self[e2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group0()[0] * self[e2]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[3]) + (other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        2        5        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       55       78        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3]))])
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       59        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       35       70        0
    //  no simd       68      103        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((other.group0()[0] * self[e2]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self[e2]) + (other.group0()[3] * self[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd3        3        5        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       57       80        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       14       34        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other[scalar]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       25        0
    //    simd3        3        5        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       24       40        0
    //  no simd       60       80        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self[e2] * other[e4315]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3]) + (self[e2] * other[e4315])),
            ]) + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       50        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       33       62        0
    //  no simd       66       98        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e2]) - (other.group0()[1] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4       23       25        0
    // Totals...
    // yes simd       59       89        0
    //  no simd      128      164        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[0]) + (other.group0()[0] * self[e2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1]) + (other.group0()[1] * self[e2])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2]) + (other.group0()[2] * self[e2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[3] * other.group2()[2])),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       56        0
    //    simd4       25       28        0
    // Totals...
    // yes simd       53       84        0
    //  no simd      128      168        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3]) + (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (other.group0()[0] * self[e2])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (other.group0()[1] * self[e2])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group1()[3]) + (other.group0()[2] * self[e2])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3]) - (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group3()[0] * self[e2])),
                ((other.group1()[1] * self[e2]) + (other.group3()[1] * self[e2])),
                ((other.group1()[2] * self[e2]) + (other.group3()[2] * self[e2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (other.group0()[0] * self[e2])),
                ((self.group0()[3] * other.group2()[1]) - (other.group0()[1] * self[e2])),
                ((self.group0()[3] * other.group2()[2]) - (other.group0()[2] * self[e2])),
                (-(self.group0()[2] * other.group2()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       39       62        0
    //  no simd       81      110        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (other.group0()[0] * self[e2])),
                ((other.group1()[0] * self.group0()[1]) - (other.group0()[1] * self[e2])),
                ((other.group1()[0] * self.group0()[2]) - (other.group0()[2] * self[e2])),
                (other.group1()[1] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       38        0
    //    simd4       16       21        0
    // Totals...
    // yes simd       30       59        0
    //  no simd       78      122        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                ((other.group1()[0] * self[e2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (other.group1()[0] * self[e2]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self[e2])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self[e2])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self[e2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Scalar {}
impl AntiSandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Scalar {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        4        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from([1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Scalar {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Scalar {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Scalar {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Scalar::from_groups(/* scalar */ (other[e12345] * self[scalar]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Scalar {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Scalar {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        4        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from([-1.0, 1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Scalar {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Scalar {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (other.group9()[3] * self[scalar] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]])),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (other.group1()[3] * self[scalar]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Scalar {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (other.group0()[3] * self[scalar]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiScalar::from_groups(/* e12345 */ (other[scalar] * self[scalar] * -1.0));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (other.group0()[3] * self[scalar] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Scalar {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(self[scalar]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Scalar {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234, scalar
            (Simd32x2::from(self[scalar]) * Simd32x2::from([other.group0()[3], other.group1()[1]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Scalar {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5, e12345
            (Simd32x2::from(self[scalar]) * Simd32x2::from([other.group0()[3], other.group1()[1]]) * Simd32x2::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Sphere {}
impl AntiSandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       53        0
    //    simd3        2        3        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       44       75        0
    //  no simd       99      138        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                (other.group1()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group2(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self[e4315]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[1] * self[e4315]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self[e4315]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd4       27       34        0
    // Totals...
    // yes simd       43       65        0
    //  no simd      124      167        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       28       54        0
    //  no simd       61       93        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e4315]) - (other.group0()[1] * self[e4315]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       28       50        0
    //  no simd       64      104        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       64      103        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315] * -1.0)]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       39        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       68       99        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       60        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       49       76        0
    //  no simd       88      124        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       54        0
    //    simd3        0        2        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       75      116        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self[e4315])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       60        0
    //    simd4       14       18        0
    // Totals...
    // yes simd       46       78        0
    //  no simd       88      132        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       27        0
    //    simd3        2        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       49       79        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e4315])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       54        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       32       68        0
    //  no simd       68      110        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self[e4315])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1234
            (other[e12345] * self[e4315]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       38        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       30       56        0
    //  no simd       66      110        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       40        0
    //    simd3        2        3        0
    //    simd4       17       20        0
    // Totals...
    // yes simd       39       63        0
    //  no simd       94      129        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) - (other.group1()[1] * self.group0()[2])),
                ((other.group2()[1] * self[e4315]) - (other.group1()[2] * self.group0()[0])),
                ((other.group2()[2] * self[e4315]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd3        2        3        0
    //    simd4       20       25        0
    // Totals...
    // yes simd       38       57        0
    //  no simd      102      138        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       49        0
    //    simd3        2        3        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       42       70        0
    //  no simd       94      130        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                (other.group1()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) + (other.group1()[2] * self.group0()[1])),
                ((other.group2()[1] * self[e4315]) + (other.group1()[0] * self.group0()[2])),
                ((other.group2()[2] * self[e4315]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       44        0
    //    simd4       25       30        0
    // Totals...
    // yes simd       48       74        0
    //  no simd      123      164        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       25       47        0
    //  no simd       61       92        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e4315]) + (other.group0()[1] * self[e4315]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       25       41        0
    //  no simd       64       95        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       64       98        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self[e4315]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       48        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       35       61        0
    //  no simd       68      100        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       46       73        0
    //  no simd       88      124        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       42        0
    //    simd3        0        1        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       36       59        0
    //  no simd       75      109        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self[e4315])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self[e4315])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4       16       22        0
    // Totals...
    // yes simd       40       62        0
    //  no simd       88      128        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      112        0
    //    simd2        6        6        0
    //    simd3       28       32        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      122      175        0
    //  no simd      256      320        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group1()[3] * self.group0()[3]) + (other[e1] * self[e4315])),
                (-(other.group9()[3] * self[e4315]) - (self.group0()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (-(other.group0()[0] * self[e4315]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                (-(other.group6()[2] * self.group0()[2]) + (other[e1] * self[e4315])),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(self[e4315]) * other.group8())),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                (self.group0()[3] * other[e45]),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group9(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self[e4315]) * other.group5())
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group8()[0] * self[e4315]) - (other.group6()[1] * self.group0()[2])),
                ((other.group8()[1] * self[e4315]) - (other.group6()[2] * self.group0()[0])),
                ((other.group8()[2] * self[e4315]) - (other.group6()[0] * self.group0()[1])),
                ((other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[1] * self[e4315]) - (other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                + (other.group6()[3] * self[e4315])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        2        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       52       82        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       46        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       29       62        0
    //  no simd       68      110        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       25        0
    //    simd3        3        5        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       54       84        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other[e2] * self[e4315]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e2])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other[e2] * self[e4315])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       17       35        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group0()[3] * other[scalar] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd3        3        5        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       21       38        0
    //  no simd       57       87        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       27       49        0
    //  no simd       66      103        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self[e4315]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4       28       35        0
    // Totals...
    // yes simd       44       67        0
    //  no simd      128      172        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self[e4315]) * other.group2())
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (other.group0()[3] * self[e4315]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4       27       34        0
    // Totals...
    // yes simd       47       70        0
    //  no simd      128      172        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       34        0
    //    simd4       16       20        0
    // Totals...
    // yes simd       33       54        0
    //  no simd       81      114        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (other.group1()[0] * self[e4315]),
            ]) - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       39        0
    //    simd4       15       20        0
    // Totals...
    // yes simd       36       59        0
    //  no simd       81      119        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self[e4315])),
            ]) - (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for TripleNum {}
impl AntiSandwich<AntiCircleRotor> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       33        0
    //    simd4       10       16        0
    // Totals...
    // yes simd       19       49        0
    //  no simd       49       97        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd4       14       21        0
    // Totals...
    // yes simd       20       42        0
    //  no simd       62      105        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]) + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       10       22        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       11        0
    //  no simd       10       23        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1] * -1.0),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       10       22        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd4        6       12        0
    // Totals...
    // yes simd       12       30        0
    //  no simd       30       66        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        9       16        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       40       80        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       36        0
    //    simd3        0        1        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       18       45        0
    //  no simd       36       71        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       40        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       16       50        0
    //  no simd       40       80        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        8       16        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       32       73        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        4        8        0
    // no simd       16       32        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[1], self.group0()[2]])
                * swizzle!(other.group0(), 2, 1, 0, 3)
                * Simd32x4::from([-1.0, 1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 3, 2, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group0(), 0, 3, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       12        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(other[e12345]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       13       25        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
            ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       43        0
    //    simd3        1        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       53        0
    //  no simd       45       81        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) + (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       33        0
    //    simd4        9       15        0
    // Totals...
    // yes simd       22       48        0
    //  no simd       49       93        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (self.group0()[2] * other.group2()[0]),
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[2] * other.group2()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2])),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       46        0
    //    simd3        1        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       56        0
    //  no simd       45       84        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) + (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       38        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       22       55        0
    //  no simd       61      106        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) - (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       10       22        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       10       22        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1]),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       11        0
    //  no simd       10       23        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd4        6       12        0
    // Totals...
    // yes simd       12       33        0
    //  no simd       30       69        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       29        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       13       43        0
    //  no simd       40       85        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[2]) * other.group1()) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       36        0
    //    simd3        0        1        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       18       45        0
    //  no simd       36       71        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[1] * self.group0()[0] * -1.0),
                (other.group1()[2] * self.group0()[0] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        9       17        0
    // Totals...
    // yes simd       13       34        0
    //  no simd       40       85        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for TripleNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd2        4        6        0
    //    simd3       16       24        0
    //    simd4       15       25        0
    // Totals...
    // yes simd       47       79        0
    //  no simd      128      208        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group0()[2]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group0()[1]) - (other.group8()[0] * self.group0()[0])),
                ((other.group7()[1] * self.group0()[1]) - (other.group8()[1] * self.group0()[0])),
                ((other.group7()[2] * self.group0()[1]) - (other.group8()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e5
            ((other.group0()[1] * self.group0()[1]) - (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group3())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group9())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[2]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                + (Simd32x3::from(self.group0()[2]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group6())),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group9())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       20        0
    //    simd4        8       13        0
    // Totals...
    // yes simd        8       33        0
    //  no simd       32       72        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        4        8        0
    // no simd       16       32        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[0], self.group0()[2]])
                * swizzle!(other.group0(), 0, 2, 1, 3)
                * Simd32x4::from([1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 2, 3, 0, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       15        0
    //    simd4        8       15        0
    // Totals...
    // yes simd       10       30        0
    //  no simd       34       75        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       12        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(other[scalar]) * self.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       30        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       10       41        0
    //  no simd       34       74        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       13       25        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
            ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4       16       27        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       64      112        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group3())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       36        0
    //    simd4       14       19        0
    // Totals...
    // yes simd       22       55        0
    //  no simd       64      112        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                (self.group0()[1] * other.group2()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       25        0
    //    simd4        8       13        0
    // Totals...
    // yes simd       13       38        0
    //  no simd       37       77        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[0]) + (self.group0()[1] * other.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       37        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       13       47        0
    //  no simd       37       77        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[1]) + (self.group0()[0] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorEven {}
impl AntiSandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       71       72        0
    // Totals...
    // yes simd      187      226        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[3] * self.group3()[0]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[3] * self.group3()[1]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[3] * self.group3()[2]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[2] * self.group0()[1]) - (other.group2()[3] * self.group3()[0])),
                (-(other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[3])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group3()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      198        0
    //    simd4       76       77        0
    // Totals...
    // yes simd      236      275        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[1] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group3()[3] * self.group1()[0]) + (other.group3()[3] * self.group3()[0])),
                ((other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group3()[3] * self.group1()[1]) + (other.group3()[3] * self.group3()[1])),
                ((other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group1()[2]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group3()[3], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       90        0
    //    simd4       48       54        0
    // Totals...
    // yes simd      112      144        0
    //  no simd      256      306        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      109        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      116      157        0
    //  no simd      257      301        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      105        0
    //    simd4       47       50        0
    // Totals...
    // yes simd      115      155        0
    //  no simd      256      305        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      130        0
    //    simd4       48       51        0
    // Totals...
    // yes simd      144      181        0
    //  no simd      288      334        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      138        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      164      202        0
    //  no simd      353      394        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group3()[3]),
                (other.group1()[2] * self.group3()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[0] * self.group3()[2]) + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[1] * self.group3()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]) * self.group0())
                + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group3()[1]) - (other.group1()[2] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      170      209        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      142        0
    //    simd4       62       63        0
    // Totals...
    // yes simd      166      205        0
    //  no simd      352      394        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group1()[3]]) * swizzle!(other.group1(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      127        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      138      178        0
    //  no simd      288      331        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group3()[3]),
                (other.group0()[2] * self.group3()[3]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       98        0
    //    simd4       55       60        0
    // Totals...
    // yes simd      123      158        0
    //  no simd      288      338        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 2, 2, 3) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[3]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 0))
                + (swizzle!(other.group0(), 1, 1, 1, 2) * self.group0())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (swizzle!(other.group0(), 1, 1, 1, 3) * self.group3())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       94        0
    //    simd4       42       47        0
    // Totals...
    // yes simd      114      141        0
    //  no simd      240      282        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      106        0
    //    simd4       50       53        0
    // Totals...
    // yes simd      122      159        0
    //  no simd      272      318        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group2()[2])),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group3())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       58       59        0
    // Totals...
    // yes simd      210      249        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group3()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group2()[1] * self.group3()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4       65       66        0
    // Totals...
    // yes simd      205      244        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group1(), 1, 1, 2, 3))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group2()[3])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      162        0
    //    simd4       65       66        0
    // Totals...
    // yes simd      189      228        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[1] * self.group1()[2]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self.group3()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group3()[3]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       87       88        0
    // Totals...
    // yes simd      203      242        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1]) - (other.group3()[0] * self.group3()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group3()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) - (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group1()[3]) - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group1()[3] * self.group3()[0]) + (other.group3()[3] * self.group0()[0])),
                (-(other.group1()[3] * self.group3()[1]) + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[3] * self.group3()[2]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[1] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group2()[0])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group3()[0]) + (other.group2()[1] * self.group3()[3]) + (other.group3()[0] * self.group1()[2]) + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group3()[1]) + (other.group2()[2] * self.group3()[3]) - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group1())
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       94        0
    //    simd4       46       51        0
    // Totals...
    // yes simd      118      145        0
    //  no simd      256      298        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group2()) + (Simd32x4::from(other.group0()[1]) * self.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      102        0
    //    simd4       47       50        0
    // Totals...
    // yes simd      119      152        0
    //  no simd      260      302        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * self.group2()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      106        0
    //    simd4       45       49        0
    // Totals...
    // yes simd      121      155        0
    //  no simd      256      302        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      126        0
    //    simd4       50       53        0
    // Totals...
    // yes simd      138      179        0
    //  no simd      288      338        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[2]])
                * swizzle!(other.group0(), 2, 1, 2, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      141        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      164      205        0
    //  no simd      353      397        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) * -1.0),
                ((other.group1()[1] * self.group3()[3]) * -1.0),
                ((other.group1()[2] * self.group3()[3]) * -1.0),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group3(), 2, 3, 3, 3))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      162        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      173      212        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      113      150        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      173      211        0
    //  no simd      353      394        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[3] * self.group1()[1]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group1(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group3()[0]) - (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group3()[1]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[2] * self.group3()[3])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      276      346        0
    //    simd2       24       24        0
    //    simd3      104      104        0
    //    simd4       81       82        0
    // Totals...
    // yes simd      485      556        0
    //  no simd      960     1034        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group3()[3] * self.group1()[3])
                    + (other.group9()[0] * self.group3()[0])
                    + (other.group9()[1] * self.group3()[1])
                    + (other.group9()[2] * self.group3()[2])),
                (-(other.group1()[0] * self.group3()[0]) - (other.group1()[1] * self.group3()[1]) - (other.group1()[2] * self.group3()[2])
                    + (other.group6()[3] * self.group1()[3])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group2()[3]) - (other.group7()[1] * self.group2()[2]) + (other.group7()[2] * self.group2()[1]) - (other.group8()[0] * self.group3()[3])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[2] * self.group3()[1])
                    + (other.group6()[3] * self.group1()[0])),
                ((other.group7()[0] * self.group2()[2]) + (other.group7()[1] * self.group2()[3]) - (other.group7()[2] * self.group2()[0]) - (other.group8()[1] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[1] * self.group1()[3])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group7()[0] * self.group2()[1]) + (other.group7()[1] * self.group2()[0]) + (other.group7()[2] * self.group2()[3])
                    - (other.group8()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group6()[2] * self.group1()[3])
                    + (other.group6()[3] * self.group1()[2])),
                ((other.group7()[0] * self.group3()[0]) - (other.group7()[1] * self.group1()[1]) + (other.group7()[1] * self.group3()[1]) - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e5
            ((other.group0()[1] * self.group2()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (other.group1()[0] * self.group2()[0])
                + (other.group1()[1] * self.group2()[1])
                + (other.group1()[2] * self.group2()[2])
                - (other.group6()[0] * self.group2()[0])
                - (other.group6()[1] * self.group2()[1])
                - (other.group6()[2] * self.group2()[2])
                - (other.group6()[3] * self.group2()[3])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group2()[0])
                    + (other.group9()[2] * self.group2()[1])
                    + (other.group9()[3] * self.group1()[0])),
                ((other.group3()[1] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[1])
                    + (other.group9()[1] * self.group2()[3])
                    + (other.group9()[3] * self.group1()[1])),
                ((other.group3()[2] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])
                    + (other.group9()[2] * self.group2()[3])
                    + (other.group9()[3] * self.group1()[2])),
                ((other.group5()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group9()[1] * self.group1()[1])
                    - (other.group9()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other[e45]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group4()[2]]) * swizzle!(self.group2(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group9(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e41, e42, e43
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1]) + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0]) - (other.group9()[0] * self.group3()[2]) + (other.group9()[2] * self.group3()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0]) + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group7()[2] * self.group2()[1]) + (other.group8()[0] * self.group3()[3]) - (other.group8()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group3()[0])),
                ((other.group7()[1] * self.group2()[3]) + (other.group8()[1] * self.group3()[3]) - (other.group8()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[3] * self.group3()[1])
                    + (self.group0()[1] * other[e1])),
                ((other.group7()[2] * self.group2()[3]) - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group6()[3] * self.group3()[2])
                    + (self.group0()[2] * other[e1])),
                (-(other.group7()[1] * self.group2()[1]) - (other.group7()[2] * self.group2()[2]) + (other.group8()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group6()[0] * self.group3()[0])
                    - (other.group6()[1] * self.group3()[1])
                    - (other.group6()[2] * self.group3()[2])
                    - (self.group3()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e1], other.group6()[1], other.group6()[2], other.group8()[1]]) * swizzle!(self.group0(), 0, 3, 3, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group6()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group6()[2] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[0]) + (other.group6()[0] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[1]) + (other.group6()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group5()[1] * self.group3()[2]) + (other.group9()[0] * self.group0()[3]) + (other.group9()[2] * self.group1()[1]) + (other.group9()[3] * self.group0()[0])),
                ((other.group5()[2] * self.group3()[0]) + (other.group3()[1] * self.group3()[3]) + (other.group9()[0] * self.group1()[2]) + (other.group9()[3] * self.group0()[1])),
                ((other.group5()[0] * self.group3()[1]) + (other.group3()[2] * self.group3()[3]) + (other.group9()[1] * self.group1()[0]) + (other.group9()[3] * self.group0()[2])),
                (-(other.group3()[2] * self.group3()[2])
                    - (other.group9()[0] * self.group2()[0])
                    - (other.group9()[1] * self.group2()[1])
                    - (other.group9()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[1], other.group4()[2], other.group5()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[2], other.group9()[1], other.group9()[2], other.group9()[3]]) * swizzle!(self.group0(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group9()[3]]) * self.group1())
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            ((other.group0()[0] * self.group3()[3]) - (other.group4()[0] * self.group1()[0]) + (other.group4()[0] * self.group3()[0]) - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (other.group5()[0] * self.group0()[0])
                - (other.group5()[1] * self.group0()[1])
                - (other.group5()[2] * self.group0()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group0()[0])
                + (other.group9()[1] * self.group0()[1])
                + (other.group9()[2] * self.group0()[2])
                + (self.group0()[3] * other[e45])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      102        0
    //    simd4       55       58        0
    // Totals...
    // yes simd      124      160        0
    //  no simd      289      334        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       94        0
    //    simd4       54       61        0
    // Totals...
    // yes simd      126      155        0
    //  no simd      288      338        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]])
                * swizzle!(other.group0(), 0, 0, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 1)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * self.group2())
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))
                + (swizzle!(other.group0(), 1, 1, 1, 2) * self.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from(other.group0()[3]) * self.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      145      184        0
    //  no simd      304      346        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group3()[2]) + (self.group3()[3] * other[e2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group2()[0]) + (self.group0()[0] * other[e2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group2()[1]) + (self.group0()[1] * other[e2])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2]) + (self.group0()[2] * other[e2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group3()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd4       45       52        0
    // Totals...
    // yes simd      105      134        0
    //  no simd      240      290        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd4       57       60        0
    // Totals...
    // yes simd      133      170        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group0()[1]) - (self.group3()[0] * other[e4315])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3]) - (self.group3()[1] * other[e4315])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) - (self.group3()[2] * other[e4315])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((other.group0()[3] * self.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((other.group0()[3] * self.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group2()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group3()[2])),
                ((self.group0()[3] * other[e4315]) - (self.group1()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       98        0
    //    simd4       50       56        0
    // Totals...
    // yes simd      122      154        0
    //  no simd      272      322        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * self.group2())
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4       84       85        0
    // Totals...
    // yes simd      228      267        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[1] * self.group3()[3])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group1()[2], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (swizzle!(other.group3(), 3, 3, 3, 0) * swizzle!(self.group3(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group0()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[1])),
                ((other.group0()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group2()[3] * self.group1()[0]) + (other.group2()[3] * self.group3()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[3] * self.group1()[1]) + (other.group2()[3] * self.group3()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[3] * self.group1()[2]) + (other.group2()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[2] * self.group3()[1]) + (other.group1()[3] * self.group1()[0]) - (other.group2()[0] * self.group3()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1]) - (other.group2()[1] * self.group3()[3])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2]) - (other.group2()[2] * self.group3()[3])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4       90       91        0
    // Totals...
    // yes simd      210      249        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])
                    - (self.group3()[2] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group1()[3])),
                ((self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group1()[3]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group2()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group0()[2], self.group3()[3]]) * swizzle!(other.group3(), 1, 2, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 1, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group3()[2] * other.group1()[1]) + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1]) + (self.group3()[1] * other.group1()[0]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 1, 3, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      122        0
    //    simd4       58       61        0
    // Totals...
    // yes simd      146      183        0
    //  no simd      320      366        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      122        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      143      182        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) - (self.group0()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) - (self.group0()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group3()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group3()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[1] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[3]) - (other.group1()[0] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group3()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[1] * self.group3()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group3()[2]) + (self.group1()[0] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[3]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorOdd {}
impl AntiSandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd4       75       76        0
    // Totals...
    // yes simd      175      214        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group3()[0], self.group0()[3], self.group3()[3]]) * swizzle!(other.group2(), 3, 2, 2, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group1()[1] * self.group3()[2]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      142        0
    //    simd4       90       91        0
    // Totals...
    // yes simd      194      233        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[2] * self.group1()[1]) + (other.group3()[1] * self.group2()[2]) + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group3()[2] * self.group2()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[0] * self.group2()[1]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group3()[2] * self.group1()[1])),
                ((other.group1()[1] * self.group1()[3]) - (other.group3()[1] * self.group0()[3])),
                ((other.group1()[2] * self.group1()[3]) - (other.group3()[2] * self.group0()[3])),
                (-(other.group2()[2] * self.group1()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       90        0
    //    simd4       48       54        0
    // Totals...
    // yes simd      112      144        0
    //  no simd      256      306        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       93        0
    //    simd4       49       54        0
    // Totals...
    // yes simd      110      147        0
    //  no simd      257      309        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      106        0
    //    simd4       47       49        0
    // Totals...
    // yes simd      115      155        0
    //  no simd      256      302        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      110        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      129      165        0
    //  no simd      291      330        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      125        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      152      193        0
    //  no simd      353      397        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[0]) - (other.group1()[1] * self.group3()[0]) - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[2] * self.group1()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      134        0
    //    simd4       56       57        0
    // Totals...
    // yes simd      152      191        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      114        0
    //    simd4       68       70        0
    // Totals...
    // yes simd      149      184        0
    //  no simd      353      394        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[3] * self.group2()[1]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group2()[2]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group3()[0], self.group0()[3], self.group0()[3]]) * swizzle!(other.group1(), 3, 2, 2, 3))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57      100        0
    //    simd4       58       59        0
    // Totals...
    // yes simd      115      159        0
    //  no simd      289      336        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      102        0
    //    simd4       54       58        0
    // Totals...
    // yes simd      126      160        0
    //  no simd      288      334        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 2, 2, 3) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4       48       53        0
    // Totals...
    // yes simd       96      123        0
    //  no simd      240      282        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      102        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      119      155        0
    //  no simd      272      314        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group2()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      186      225        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group2()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       73       74        0
    // Totals...
    // yes simd      181      220        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group3()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 1, 1, 2, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group2()[2] * self.group2()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group2()[1])),
                (-(other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       87       88        0
    // Totals...
    // yes simd      203      242        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       74        0
    //    simd4       52       58        0
    // Totals...
    // yes simd      100      132        0
    //  no simd      256      306        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0())),
            // e23, e31, e12, e45
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       86        0
    //    simd4       51       54        0
    // Totals...
    // yes simd      104      140        0
    //  no simd      257      302        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       87        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      106      140        0
    //  no simd      259      299        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      102        0
    //    simd4       54       57        0
    // Totals...
    // yes simd      126      159        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      111        0
    //    simd4       69       71        0
    // Totals...
    // yes simd      148      182        0
    //  no simd      355      395        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group1()[0])),
                (-(other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      167      206        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      163      202        0
    //  no simd      352      394        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group3()[0]),
                (other.group0()[1] * self.group1()[3]),
                (other.group0()[2] * self.group1()[3]),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * self.group0())
                + (Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      278      348        0
    //    simd2        8        8        0
    //    simd3      102      102        0
    //    simd4       90       91        0
    // Totals...
    // yes simd      478      549        0
    //  no simd      960     1034        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (other.group8()[0] * self.group0()[0])
                    - (other.group8()[1] * self.group0()[1])
                    - (other.group8()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    + (self.group2()[3] * other[e1])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group9()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group3()[3]) - (other.group5()[1] * self.group3()[2]) + (other.group3()[0] * self.group2()[3])),
                (-(other.group4()[1] * self.group3()[3]) - (other.group5()[2] * self.group3()[0]) + (other.group3()[1] * self.group2()[3])),
                (-(other.group4()[2] * self.group3()[3]) - (other.group5()[0] * self.group3()[1]) + (other.group3()[2] * self.group2()[3])),
                ((other.group4()[2] * self.group3()[2]) - (other.group9()[2] * self.group0()[2]) - (self.group1()[3] * other[e45])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (other.group3()[0] * self.group1()[0])
                - (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group1()[1])
                - (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group1()[2])
                - (other.group3()[2] * self.group3()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group2()[0])
                + (other.group9()[1] * self.group2()[1])
                + (other.group9()[2] * self.group2()[2])
                - (other.group9()[3] * self.group0()[3])
                + (other.group9()[3] * self.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group8()[1] * self.group3()[2]) - (other.group1()[2] * self.group2()[1]) + (other.group6()[0] * self.group3()[3])),
                ((other.group8()[1] * self.group0()[3]) + (other.group8()[2] * self.group3()[0]) + (other.group6()[1] * self.group3()[3]) - (self.group3()[1] * other[e1])),
                ((other.group8()[0] * self.group3()[1]) + (other.group8()[2] * self.group0()[3]) + (other.group6()[2] * self.group3()[3]) - (self.group3()[2] * other[e1])),
                ((other.group7()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2]) - (other.group6()[3] * self.group0()[3]) + (self.group2()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group0()[2]]))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group6(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e1], other.group1()[1], other.group1()[2], other.group6()[2]]) * swizzle!(self.group3(), 0, 3, 3, 2))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group6()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group6()[1] * self.group1()[2]) + (other.group6()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group6()[0] * self.group1()[2])
                    - (other.group6()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group6()[0] * self.group1()[1]) + (other.group6()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group2()[1]) - (other.group9()[2] * self.group3()[1]) - (other.group9()[3] * self.group0()[0])),
                (-(other.group4()[0] * self.group2()[2]) - (other.group9()[1] * self.group1()[3]) - (other.group9()[3] * self.group0()[1])),
                (-(other.group4()[1] * self.group2()[0]) - (other.group9()[2] * self.group1()[3]) - (other.group9()[3] * self.group0()[2])),
                ((other.group4()[1] * self.group2()[1]) + (other.group4()[2] * self.group2()[2]) - (other.group5()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group9(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(other.group9()[1] * self.group0()[2]) + (other.group9()[2] * self.group0()[1])),
                ((other.group9()[0] * self.group0()[2]) - (other.group9()[2] * self.group0()[0])),
                (-(other.group9()[0] * self.group0()[1]) + (other.group9()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group2()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group9()[1] * self.group2()[2]) - (other.group9()[2] * self.group2()[1])),
                (-(other.group9()[0] * self.group2()[2]) + (other.group9()[2] * self.group2()[0])),
                ((other.group9()[0] * self.group2()[1]) - (other.group9()[1] * self.group2()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group8()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3]) + (other.group6()[0] * self.group1()[3]) + (self.group0()[0] * other[e1])),
                (-(other.group8()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) + (other.group6()[1] * self.group1()[3]) + (self.group0()[1] * other[e1])),
                (-(other.group8()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3]) + (other.group6()[2] * self.group1()[3]) + (self.group0()[2] * other[e1])),
                ((other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group1()[2]) + (other.group8()[2] * self.group3()[2]) - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                - (other.group1()[0] * self.group0()[0])
                - (other.group1()[1] * self.group0()[1])
                - (other.group1()[2] * self.group0()[2])
                + (other.group1()[3] * self.group0()[3])
                + (other.group1()[3] * self.group1()[3])
                - (other.group6()[0] * self.group0()[0])
                - (other.group6()[1] * self.group0()[1])
                - (other.group6()[2] * self.group0()[2])
                + (other.group6()[3] * self.group2()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      102        0
    //    simd4       55       57        0
    // Totals...
    // yes simd      126      159        0
    //  no simd      291      330        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group3()[2])])
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       78        0
    //    simd4       59       65        0
    // Totals...
    // yes simd      111      143        0
    //  no simd      288      338        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                + (swizzle!(other.group0(), 2, 2, 2, 3) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (swizzle!(other.group0(), 0, 0, 0, 1) * self.group2())
                - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group2()[2])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       86        0
    //    simd4       63       67        0
    // Totals...
    // yes simd      115      153        0
    //  no simd      304      354        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (self.group2()[3] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]])
                * swizzle!(other.group0(), 2, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (-Simd32x4::from([
                (self.group3()[0] * other[e2]),
                (self.group3()[1] * other[e2]),
                (self.group3()[2] * other[e2]),
                (other.group0()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd4       45       54        0
    // Totals...
    // yes simd      105      136        0
    //  no simd      240      298        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      102        0
    //    simd4       58       62        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       86        0
    //    simd4       56       59        0
    // Totals...
    // yes simd      104      145        0
    //  no simd      272      322        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group3()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       93       94        0
    // Totals...
    // yes simd      201      240        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[1])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[3] * self.group1()[0]) + (other.group3()[1] * self.group2()[2])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group2()[3] * self.group1()[1]) + (other.group3()[2] * self.group2()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[3] * self.group1()[2]) + (other.group3()[0] * self.group2()[1])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3]) - (other.group3()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3]) - (other.group3()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3]) - (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[3]]) * swizzle!(other.group2(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[2]]) * swizzle!(other.group2(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       93       94        0
    // Totals...
    // yes simd      201      240        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[2])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       82        0
    //    simd4       67       72        0
    // Totals...
    // yes simd      119      154        0
    //  no simd      320      370        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]])
                * swizzle!(other.group0(), 1, 2, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (-Simd32x4::from([
                (other.group1()[0] * self.group3()[0]),
                (other.group1()[0] * self.group3()[1]),
                (other.group1()[0] * self.group3()[2]),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd4       61       65        0
    // Totals...
    // yes simd      137      175        0
    //  no simd      320      370        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group3(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[2] * other.group0()[0]),
                (self.group3()[0] * other.group0()[1]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((other.group1()[1] * self.group3()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group3()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorRoundPoint {}
impl AntiSandwich<AntiCircleRotor> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       42        0
    //    simd4       28       32        0
    // Totals...
    // yes simd       46       74        0
    //  no simd      130      170        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group2())
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       74        0
    //    simd4       27       29        0
    // Totals...
    // yes simd       73      103        0
    //  no simd      154      190        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd4       19       25        0
    // Totals...
    // yes simd       25       48        0
    //  no simd       82      123        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd4       19       25        0
    // Totals...
    // yes simd       25       49        0
    //  no simd       82      124        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       25       47        0
    //  no simd       82      119        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       66        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       47       79        0
    //  no simd       86      118        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[3])
                    - (other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       56        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       50       79        0
    //  no simd      113      148        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) - (other.group0()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) - (other.group0()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group1()[2]) - (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       48        0
    //    simd3        0        1        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       42       69        0
    //  no simd       96      131        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       37        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       43       66        0
    //  no simd      118      153        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[1] * other.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3]))])
                + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       53        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       41       71        0
    //  no simd       89      125        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       45        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       31       68        0
    //  no simd       88      137        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd2        0        1        0
    //    simd4        5       10        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       23       46        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e5, e12345
            (Simd32x2::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       36        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       28       59        0
    //  no simd       85      128        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[0] * other.group0()[0]) + (other.group0()[1] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       67        0
    //    simd3        3        4        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       59       89        0
    //  no simd      119      151        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[1]) * other.group0()) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) - (other.group2()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[1]) - (other.group2()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group2()[2]) - (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group1())
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       74        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       67       97        0
    //  no simd      130      166        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) + (other.group2()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group2()[1]) + (other.group2()[0] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[2]) + (other.group2()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group1()[3]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       47        0
    //    simd3        3        4        0
    //    simd4       22       24        0
    // Totals...
    // yes simd       47       75        0
    //  no simd      119      155        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[1]) * other.group0()) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group2()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       54        0
    //    simd4       31       35        0
    // Totals...
    // yes simd       61       89        0
    //  no simd      154      194        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       34       55        0
    //  no simd       82      112        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       43        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       34       61        0
    //  no simd       82      115        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       37        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       34       56        0
    //  no simd       82      113        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       48        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       38       66        0
    //  no simd       86      120        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[0] * other.group0()[3]) - (other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       48        0
    //    simd4       23       27        0
    // Totals...
    // yes simd       47       75        0
    //  no simd      116      156        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group0())
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       60        0
    //    simd3        0        1        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       51       78        0
    //  no simd       96      131        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4       19       21        0
    // Totals...
    // yes simd       55       85        0
    //  no simd      112      148        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[1] * other.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group0())
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorRoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      128        0
    //    simd2        6        6        0
    //    simd3       38       44        0
    //    simd4       28       28        0
    // Totals...
    // yes simd      154      206        0
    //  no simd      320      384        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group1()[1]) * other.group0())
                + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group7()[0]) - (other.group8()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group7()[1]) - (other.group8()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group7()[2]) - (other.group8()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group1()[0]) - (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other[e1])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group5()[0]) - (other.group3()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group5()[1]) - (other.group3()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group5()[2]) - (other.group3()[0] * self.group0()[1])),
                (-(self.group1()[0] * other[e45]) + (other.group5()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group9())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[1]) * other.group4()) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(self.group1()[0]) * other.group4())
                + (Simd32x3::from(self.group1()[1]) * other.group5())
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1]) + (other.group6()[3] * self.group0()[0])),
                ((other.group8()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group6()[3] * self.group0()[1])),
                ((other.group8()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group6()[3] * self.group0()[2])),
                (-(other.group6()[1] * self.group0()[1]) - (other.group6()[2] * self.group0()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group6())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[1]) * other.group7()) - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group8())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group4()[0]) + (other.group5()[1] * self.group0()[2])),
                (-(self.group1()[0] * other.group4()[1]) + (other.group5()[2] * self.group0()[0])),
                (-(self.group1()[0] * other.group4()[2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[0]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group9())
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[3])
                + (self.group1()[1] * other[e45])
                + (other.group4()[0] * self.group0()[0])
                + (other.group4()[1] * self.group0()[1])
                + (other.group4()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       35        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       32       59        0
    //  no simd       89      131        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       55        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       40       73        0
    //  no simd       88      127        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       38        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       40       61        0
    //  no simd       97      130        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other[e2])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group0()[1] * other[e2])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other[e2])),
                (self.group1()[1] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd2        0        1        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       23       50        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234, scalar
            (Simd32x2::from(other[scalar]) * Simd32x2::from([self.group0()[3], self.group1()[1]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       34        0
    //    simd4       20       25        0
    // Totals...
    // yes simd       34       59        0
    //  no simd       94      134        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e4315])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e4315])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e4315])),
                ((self.group1()[0] * other[e4315])
                    + (other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (self.group1()[0] * other[e4315]),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       49        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       37       67        0
    //  no simd       85      121        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[0]) - (other.group0()[1] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd4       32       36        0
    // Totals...
    // yes simd       64       92        0
    //  no simd      160      200        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group3())
                - (swizzle!(other.group3(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4       33       37        0
    // Totals...
    // yes simd       61       89        0
    //  no simd      160      200        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group3()[2])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[3]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       32        0
    //    simd4       21       27        0
    // Totals...
    // yes simd       40       59        0
    //  no simd      103      140        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[3]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[1]) * self.group0()) + (Simd32x4::from(self.group1()[1]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4       22       28        0
    // Totals...
    // yes simd       34       60        0
    //  no simd      100      144        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group1()[0] * other.group1()[0]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group1()[0]),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group1()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorSphere {}
impl AntiSandwich<AntiCircleRotor> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       71        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       61       95        0
    //  no simd      130      167        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])),
                (self.group1()[1] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[2] * self.group0()[1]),
                (other.group2()[0] * self.group0()[2]),
                (other.group2()[1] * self.group0()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       58        0
    //    simd4       31       34        0
    // Totals...
    // yes simd       62       92        0
    //  no simd      155      194        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1])),
                (other.group3()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                0.0,
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                ((self.group1()[1] * other.group3()[3]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum321> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       49        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       40       65        0
    //  no simd       82      113        0
    fn anti_sandwich(self, other: AntiDualNum321) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum4> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       57        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       40       71        0
    //  no simd       82      113        0
    fn anti_sandwich(self, other: AntiDualNum4) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum5> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       48        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       40       64        0
    //  no simd       82      112        0
    fn anti_sandwich(self, other: AntiDualNum5) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       59        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       44       74        0
    //  no simd       86      119        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       67        0
    //    simd4       19       22        0
    // Totals...
    // yes simd       56       89        0
    //  no simd      113      155        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                ((self.group1()[0] * other.group1()[3]) + (other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) * -1.0),
                ((self.group1()[1] * other.group1()[1]) * -1.0),
                ((self.group1()[1] * other.group1()[2]) * -1.0),
                ((self.group1()[1] * other.group1()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       72        0
    //    simd3        0        2        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       57       87        0
    //  no simd       96      130        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[0]) - (other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                (-(self.group1()[1] * other.group1()[1]) - (other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group1()[2]) - (other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (other.group0()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group1()[2]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       79        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       58       97        0
    //  no simd      112      151        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[0] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) * -1.0),
                ((self.group1()[0] * other.group1()[1]) * -1.0),
                ((self.group1()[0] * other.group1()[2]) * -1.0),
                ((self.group1()[0] * other.group1()[3]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       48        0
    //    simd4       16       21        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       89      132        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group0()[3]) + (other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiQuadNum> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       70        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       46       84        0
    //  no simd       88      126        0
    fn anti_sandwich(self, other: AntiQuadNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd2        0        1        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       21        0
    //  no simd       23       46        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1234, scalar
            (Simd32x2::from(other[e12345]) * self.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiTripleNum> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       61        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       43       75        0
    //  no simd       85      117        0
    fn anti_sandwich(self, other: AntiTripleNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) - (other.group0()[0] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       62        0
    //    simd3        3        4        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       56       86        0
    //  no simd      119      154        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group0())
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) + (other.group2()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[1]) + (other.group2()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group2()[2]) + (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group2()[1]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group2()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       58        0
    //    simd4       24       29        0
    // Totals...
    // yes simd       58       87        0
    //  no simd      130      174        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group2())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       67        0
    //    simd3        3        4        0
    //    simd4       18       19        0
    // Totals...
    // yes simd       59       90        0
    //  no simd      119      155        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[1]) * other.group0())
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[0]) - (other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(self.group1()[1] * other.group2()[1]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(self.group1()[1] * other.group2()[2]) - (other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group1()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group2()[1]) + (other.group1()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group2()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       71        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       67      101        0
    //  no simd      154      191        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[0]) - (other.group2()[3] * self.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (other.group2()[3] * self.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) - (other.group2()[3] * self.group0()[2])),
                (other.group3()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[0]) - (other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group3()[1]) - (other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group3()[2]) - (other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[1] * other.group2()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum321> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd4       16       21        0
    // Totals...
    // yes simd       34       57        0
    //  no simd       82      120        0
    fn anti_sandwich(self, other: DualNum321) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum4> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       37        0
    //    simd4       16       20        0
    // Totals...
    // yes simd       34       57        0
    //  no simd       82      117        0
    fn anti_sandwich(self, other: DualNum4) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum5> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd4       16       20        0
    // Totals...
    // yes simd       34       60        0
    //  no simd       82      120        0
    fn anti_sandwich(self, other: DualNum5) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group1()[0]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       67        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       50       79        0
    //  no simd       86      115        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       72        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       58       90        0
    //  no simd      112      144        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                (self.group1()[1] * other.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       51       80        0
    //  no simd       96      130        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (other.group0()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group1()[1]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[2]) - (other.group0()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       63        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       52       86        0
    //  no simd      112      155        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group1()[1]]) * other.group1())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorSphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      148        0
    //    simd2        6        6        0
    //    simd3       36       40        0
    //    simd4       25       27        0
    // Totals...
    // yes simd      167      221        0
    //  no simd      320      388        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group1()[1]) + (self.group1()[0] * other[e1]) + (other.group1()[3] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[1]) - (self.group1()[0] * other.group9()[3]) - (self.group0()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group9()[0]) - (other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group9()[1]) - (other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group9()[2]) - (other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[0]) - (self.group1()[1] * other[e45]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (self.group1()[1] * other.group9()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group8()[0]) + (other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group8()[1]) + (other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group8()[2]) + (other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                ((self.group1()[0] * other[e1]) - (self.group1()[1] * other.group6()[3]) - (other.group6()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group7())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(self.group1()[0]) * other.group8())
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group5()[0])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group5()[1])),
                (-(self.group1()[0] * other.group3()[2]) - (self.group1()[1] * other.group5()[2])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group1()[0]) * other.group5())
                - (Simd32x3::from(self.group1()[1]) * other.group4())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group8()[0]) - (self.group1()[1] * other.group1()[0]) - (other.group6()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group8()[1]) - (self.group1()[1] * other.group1()[1]) - (other.group6()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group8()[2]) - (self.group1()[1] * other.group1()[2]) - (other.group6()[0] * self.group0()[1])),
                ((self.group1()[1] * other[e1]) + (other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[1] * self.group1()[0]) + (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other.group1()[3])
                - (other.group7()[0] * self.group0()[0])
                - (other.group7()[1] * self.group0()[1])
                - (other.group7()[2] * self.group0()[2])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       65        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       47       79        0
    //  no simd       89      121        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group1()[0] * other.group0()[3])
                    + (other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<QuadNum> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       58        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       40       77        0
    //  no simd       88      134        0
    fn anti_sandwich(self, other: QuadNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[0] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       42        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       40       66        0
    //  no simd       97      138        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (self.group1()[0] * other[e2]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd2        0        2        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       20       52        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5, e12345
            (Simd32x2::from(other[scalar]) * Simd32x2::from([self.group0()[3], self.group1()[1]]) * Simd32x2::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       51        0
    //    simd4       17       20        0
    // Totals...
    // yes simd       46       71        0
    //  no simd       97      131        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[0] * other.group0()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other[e4315]) * self.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<TripleNum> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       49        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       37       68        0
    //  no simd       85      125        0
    fn anti_sandwich(self, other: TripleNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) - (other.group0()[0] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[2] * self.group0()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4       33       38        0
    // Totals...
    // yes simd       61       90        0
    //  no simd      160      204        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group2())
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (self.group1()[0] * other.group0()[3]),
            ]) + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group1()[1]]) * other.group2())
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       60        0
    //    simd4       32       35        0
    // Totals...
    // yes simd       64       95        0
    //  no simd      160      200        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[1] * other.group2()[3]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorRoundPoint> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       44        0
    //    simd4       20       25        0
    // Totals...
    // yes simd       43       69        0
    //  no simd      103      144        0
    fn anti_sandwich(self, other: VersorRoundPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[1] * self.group1()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group1()[0] * self.group1()[0]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (other.group0()[0] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[0]) + (self.group1()[1] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorSphere> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       52        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       49       73        0
    //  no simd      103      136        0
    fn anti_sandwich(self, other: VersorSphere) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group1()[1]) - (self.group1()[0] * other.group0()[3])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[3])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[1] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
