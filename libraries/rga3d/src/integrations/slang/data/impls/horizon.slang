using traits::GeometricProduct;
using traits::RightDual;
using traits::Wedge;
impl std::ops::Add<AntiScalar> for Horizon {
    type Output = MultiVector;
    fn add(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(0.0, other[e1234]), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<DualNum> for Horizon {
    type Output = MultiVector;
    fn add(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */other.group0(), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Flector> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        1        0        0
// no simd        4        0        0
    fn add(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */other.group0(), /* e423, e431, e412, e321 */other.group1() + float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Horizon> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        1        0        0
    fn add(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e321 */other[e321] + self[e321]);
    }
}
impl std::ops::AddAssign<Horizon> for Horizon {
    fn add_assign(&mut self, other: Horizon) {
        use crate::elements::*;
        *self = Horizon::from_groups(/* e321 */other[e321] + self[e321]);
    }
}
impl std::ops::Add<Line> for Horizon {
    type Output = MultiVector;
    fn add(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(0.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */other.group0(), /* e23, e31, e12 */other.group1(), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Motor> for Horizon {
    type Output = MultiVector;
    fn add(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(other[scalar], other[e1234]), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */other.group0().xyz, /* e23, e31, e12 */other.group1().xyz, /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<MultiVector> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        1        0        0
// no simd        4        0        0
    fn add(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */other.group0(), /* e1, e2, e3, e4 */other.group1(), /* e41, e42, e43 */other.group2(), /* e23, e31, e12 */other.group3(), /* e423, e431, e412, e321 */other.group4() + float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Origin> for Horizon {
    type Output = Flector;
    fn add(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */float4(float3(0.0), other[e4]), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Plane> for Horizon {
    type Output = Plane;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        1        0        0
// no simd        4        0        0
    fn add(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e423, e431, e412, e321 */other.group0() + float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Point> for Horizon {
    type Output = Flector;
    fn add(self, other: Point) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */other.group0(), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Add<Scalar> for Horizon {
    type Output = MultiVector;
    fn add(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(other[scalar], 0.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::BitXor<DualNum> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn bitxor(self, other: DualNum) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXorAssign<DualNum> for Horizon {
    fn bitxor_assign(&mut self, other: DualNum) {
        *self = self.wedge(other);
    }
}
impl std::ops::BitXor<Flector> for Horizon {
    type Output = AntiScalar;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn bitxor(self, other: Flector) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXor<Motor> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn bitxor(self, other: Motor) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXorAssign<Motor> for Horizon {
    fn bitxor_assign(&mut self, other: Motor) {
        *self = self.wedge(other);
    }
}
impl std::ops::BitXor<MultiVector> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        0        2        0
//    simd2        0        1        0
// Totals...
// yes simd        0        3        0
//  no simd        0        4        0
    fn bitxor(self, other: MultiVector) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXor<Origin> for Horizon {
    type Output = AntiScalar;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn bitxor(self, other: Origin) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXor<Point> for Horizon {
    type Output = AntiScalar;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn bitxor(self, other: Point) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXor<Scalar> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn bitxor(self, other: Scalar) -> Self::Output {
        return self.wedge(other);
    }
}
impl std::ops::BitXorAssign<Scalar> for Horizon {
    fn bitxor_assign(&mut self, other: Scalar) {
        *self = self.wedge(other);
    }
}
impl std::ops::Mul<AntiScalar> for Horizon {
    type Output = Origin;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn mul(self, other: AntiScalar) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<DualNum> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn mul(self, other: DualNum) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Flector> for Horizon {
    type Output = Motor;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        0        4        0
// no simd        0       16        0
    fn mul(self, other: Flector) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Horizon> for Horizon {
    type Output = Scalar;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn mul(self, other: Horizon) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Line> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        0        4        0
// no simd        0       16        0
    fn mul(self, other: Line) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Motor> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        0        2        0
// no simd        0        8        0
    fn mul(self, other: Motor) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<MultiVector> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//    simd2        0        2        0
//    simd3        0        4        0
//    simd4        0        2        0
// Totals...
// yes simd        0        8        0
//  no simd        0       24        0
    fn mul(self, other: MultiVector) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Origin> for Horizon {
    type Output = AntiScalar;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        2        0
    fn mul(self, other: Origin) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Plane> for Horizon {
    type Output = Motor;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        0        2        0
//    simd4        0        2        0
// Totals...
// yes simd        0        4        0
//  no simd        0       10        0
    fn mul(self, other: Plane) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Point> for Horizon {
    type Output = Motor;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        0        2        0
//    simd4        0        2        0
// Totals...
// yes simd        0        4        0
//  no simd        0       10        0
    fn mul(self, other: Point) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::Mul<Scalar> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn mul(self, other: Scalar) -> Self::Output {
        return self.geometric_product(other);
    }
}
impl std::ops::MulAssign<Scalar> for Horizon {
    fn mul_assign(&mut self, other: Scalar) {
        *self = self.geometric_product(other);
    }
}
impl std::ops::Neg for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn neg(self) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e321 */self[e321] * -1.0);
    }
}
impl std::ops::Not for Horizon {
    type Output = Origin;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn not(self) -> Self::Output {
        return self.right_dual();
    }
}
impl std::ops::Sub<AntiScalar> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd2        0        1        0
// no simd        0        2        0
    fn sub(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(1.0, other[e1234]) * float2(0.0, -1.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<DualNum> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd2        0        1        0
// no simd        0        2        0
    fn sub(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */other.group0() * float2(-1.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<Flector> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        1        0        0
//    simd4        0        2        0
// Totals...
// yes simd        1        2        0
//  no simd        1        8        0
    fn sub(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */other.group0() * float4(-1.0), /* e423, e431, e412, e321 */float4(other.group1().xyz, self[e321] - other[e321]) * float4(-1.0, -1.0, -1.0, 1.0));
    }
}
impl std::ops::Sub<Horizon> for Horizon {
    type Output = Horizon;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        1        0        0
    fn sub(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e321 */self[e321] - other[e321]);
    }
}
impl std::ops::SubAssign<Horizon> for Horizon {
    fn sub_assign(&mut self, other: Horizon) {
        use crate::elements::*;
        *self = Horizon::from_groups(/* e321 */self[e321] - other[e321]);
    }
}
impl std::ops::Sub<Line> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd3        0        2        0
// no simd        0        6        0
    fn sub(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(0.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */other.group0() * float3(-1.0), /* e23, e31, e12 */other.group1() * float3(-1.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<Motor> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//    simd2        0        1        0
//    simd3        0        2        0
// Totals...
// yes simd        0        3        0
//  no simd        0        8        0
    fn sub(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(other[scalar], other[e1234]) * float2(-1.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */other.group0().xyz * float3(-1.0), /* e23, e31, e12 */other.group1().xyz * float3(-1.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<MultiVector> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        1        0        0
//    simd2        0        1        0
//    simd3        0        2        0
//    simd4        0        2        0
// Totals...
// yes simd        1        5        0
//  no simd        1       16        0
    fn sub(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */other.group0() * float2(-1.0), /* e1, e2, e3, e4 */other.group1() * float4(-1.0), /* e41, e42, e43 */other.group2() * float3(-1.0), /* e23, e31, e12 */other.group3() * float3(-1.0), /* e423, e431, e412, e321 */float4(other.group4().xyz, self[e321] - other[e321]) * float4(-1.0, -1.0, -1.0, 1.0));
    }
}
impl std::ops::Sub<Origin> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//      add/sub      mul      div
// f32        0        1        0
    fn sub(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */float4(float3(0.0), other[e4] * -1.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<Plane> for Horizon {
    type Output = Plane;
// Operative Statistics for this implementation:
//           add/sub      mul      div
//      f32        1        0        0
//    simd4        0        1        0
// Totals...
// yes simd        1        1        0
//  no simd        1        4        0
    fn sub(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e423, e431, e412, e321 */float4(other.group0().xyz, self[e321] - other[e321]) * float4(-1.0, -1.0, -1.0, 1.0));
    }
}
impl std::ops::Sub<Point> for Horizon {
    type Output = Flector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd4        0        1        0
// no simd        0        4        0
    fn sub(self, other: Point) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(/* e1, e2, e3, e4 */other.group0() * float4(-1.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}
impl std::ops::Sub<Scalar> for Horizon {
    type Output = MultiVector;
// Operative Statistics for this implementation:
//          add/sub      mul      div
//   simd2        0        1        0
// no simd        0        2        0
    fn sub(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(/* scalar, e1234 */float2(other[scalar], 1.0) * float2(-1.0, 0.0), /* e1, e2, e3, e4 */float4(0.0), /* e41, e42, e43 */float3(0.0), /* e23, e31, e12 */float3(0.0), /* e423, e431, e412, e321 */float4(float3(0.0), self[e321]));
    }
}

impl TryFrom<Flector> for Horizon {
    type Error = String;
    fn try_from(flector: Flector) -> Result<Self, Self::Error> {        use crate::elements::*;
        let mut error_string = String::new();
        let mut fail = false;
        let el = flector[0];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e1: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[1];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e2: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[2];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e3: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[3];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e4: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[4];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e423: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[5];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e431: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = flector[6];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e412: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        if fail {
            let mut error = "Elements from Flector do not fit into Horizon { ".to_string();
            error.push_str(error_string.as_str());
            error.push('}');
            return Err(error);
        }
        return Ok(Horizon::from_groups(/* e321 */flector[e321]))
    }
}

impl TryFrom<MultiVector> for Horizon {
    type Error = String;
    fn try_from(multi_vector: MultiVector) -> Result<Self, Self::Error> {        use crate::elements::*;
        let mut error_string = String::new();
        let mut fail = false;
        let el = multi_vector[0];
        if el != 0.0 {
            fail = true;
            error_string.push_str("scalar: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[1];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e1234: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[2];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e1: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[3];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e2: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[4];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e3: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[5];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e4: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[6];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e41: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[7];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e42: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[8];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e43: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[9];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e23: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[10];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e31: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[11];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e12: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[12];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e423: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[13];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e431: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = multi_vector[14];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e412: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        if fail {
            let mut error = "Elements from MultiVector do not fit into Horizon { ".to_string();
            error.push_str(error_string.as_str());
            error.push('}');
            return Err(error);
        }
        return Ok(Horizon::from_groups(/* e321 */multi_vector[e321]))
    }
}

impl TryFrom<Plane> for Horizon {
    type Error = String;
    fn try_from(plane: Plane) -> Result<Self, Self::Error> {        use crate::elements::*;
        let mut error_string = String::new();
        let mut fail = false;
        let el = plane[0];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e423: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = plane[1];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e431: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        let el = plane[2];
        if el != 0.0 {
            fail = true;
            error_string.push_str("e412: ");
            error_string.push_str(el.to_string().as_str());
            error_string.push_str(", ");
        }
        if fail {
            let mut error = "Elements from Plane do not fit into Horizon { ".to_string();
            error.push_str(error_string.as_str());
            error.push('}');
            return Err(error);
        }
        return Ok(Horizon::from_groups(/* e321 */plane[e321]))
    }
}
