implementing rga3d;
using traits;
public extension Scalar {
    public DualNum operator +(AntiScalar other) {
        return DualNum(
            /* scalar, e1234 */
            float2(this.scalar, other.e1234)
        );
    }
}
public extension Scalar {
    public DualNum operator +(DualNum other) {
        return DualNum(
            /* scalar, e1234 */
            float2(this.scalar, 0.0) + other.group0.xy
        );
    }
}
public extension Scalar {
    public MultiVector operator +(Flector other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            other.group1
        );
    }
}
public extension Scalar {
    public MultiVector operator +(Horizon other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(float3(0.0), other.e321)
        );
    }
}
public extension Scalar {
    public Motor operator +(Line other) {
        return Motor(
            /* e41, e42, e43, e1234 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, scalar */
            float4(other.group1.xyz, this.scalar)
        );
    }
}
public extension Scalar {
    public Motor operator +(Motor other) {
        return Motor(
            /* e41, e42, e43, e1234 */
            other.group0, 
            /* e23, e31, e12, scalar */
            other.group1 + float4(float3(0.0), this.scalar)
        );
    }
}
public extension Scalar {
    public MultiVector operator +(MultiVector other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0) + other.group0.xy, 
            /* e1, e2, e3, e4 */
            other.group1, 
            /* e41, e42, e43 */
            other.group2.xyz, 
            /* e23, e31, e12 */
            other.group3.xyz, 
            /* e423, e431, e412, e321 */
            other.group4
        );
    }
}
public extension Scalar {
    public MultiVector operator +(Origin other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(float3(0.0), other.e4), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(0.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator +(Plane other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            other.group0
        );
    }
}
public extension Scalar {
    public MultiVector operator +(Point other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(0.0)
        );
    }
}
public extension Scalar {
    public Scalar operator +(Scalar other) {
        return Scalar(
            /* scalar */
            other.scalar + this.scalar
        );
    }
}
public extension Scalar {
    public AntiScalar operator *(AntiScalar other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public DualNum operator *(DualNum other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Flector operator *(Flector other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Horizon operator *(Horizon other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Line operator *(Line other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Motor operator *(Motor other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public MultiVector operator *(MultiVector other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Origin operator *(Origin other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Plane operator *(Plane other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Point operator *(Point other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Scalar operator *(Scalar other) {
        return this.geometric_product(other);
    }
}
public extension Scalar {
    public Scalar neg() {
        return Scalar(
            /* scalar */
            this.scalar * -1.0
        );
    }
}
public extension Scalar {
    public AntiScalar not() {
        return this.right_dual();
    }
}
public extension Scalar {
    public DualNum operator -(AntiScalar other) {
        return DualNum(
            /* scalar, e1234 */
            float2(this.scalar, other.e1234) * float2(1.0, -1.0)
        );
    }
}
public extension Scalar {
    public DualNum operator -(DualNum other) {
        return DualNum(
            /* scalar, e1234 */
            float2(this.scalar - other.scalar, other.e1234) * float2(1.0, -1.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(Flector other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            other.group0 * float4(-1.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            other.group1 * float4(-1.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(Horizon other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(float3(0.0), other.e321 * -1.0)
        );
    }
}
public extension Scalar {
    public Motor operator -(Line other) {
        return Motor(
            /* e41, e42, e43, e1234 */
            float4((other.group0.xyz * float3(-1.0)), 0.0), 
            /* e23, e31, e12, scalar */
            float4(other.group1.xyz, this.scalar) * float4(-1.0, -1.0, -1.0, 1.0)
        );
    }
}
public extension Scalar {
    public Motor operator -(Motor other) {
        return Motor(
            /* e41, e42, e43, e1234 */
            other.group0 * float4(-1.0), 
            /* e23, e31, e12, scalar */
            float4(other.group1.xyz, this.scalar - other.scalar) * float4(-1.0, -1.0, -1.0, 1.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(MultiVector other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar - other.scalar, other.e1234) * float2(1.0, -1.0), 
            /* e1, e2, e3, e4 */
            other.group1 * float4(-1.0), 
            /* e41, e42, e43 */
            other.group2.xyz * float3(-1.0), 
            /* e23, e31, e12 */
            other.group3.xyz * float3(-1.0), 
            /* e423, e431, e412, e321 */
            other.group4 * float4(-1.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(Origin other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(float3(0.0), other.e4 * -1.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(0.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(Plane other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            other.group0 * float4(-1.0)
        );
    }
}
public extension Scalar {
    public MultiVector operator -(Point other) {
        return MultiVector(
            /* scalar, e1234 */
            float2(this.scalar, 0.0), 
            /* e1, e2, e3, e4 */
            other.group0 * float4(-1.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e423, e431, e412, e321 */
            float4(0.0)
        );
    }
}
public extension Scalar {
    public Scalar operator -(Scalar other) {
        return Scalar(
            /* scalar */
            this.scalar - other.scalar
        );
    }
}
