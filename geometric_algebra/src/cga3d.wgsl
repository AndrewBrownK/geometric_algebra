struct Scalar {
    g0_: f32,
}

struct AntiScalar {
    g0_: f32,
}

struct RadialPoint {
    g0_: vec3<f32>,
    g1_: vec2<f32>,
}

struct FlatPoint {
    g0_: vec4<f32>,
}

struct Dipole {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
    g2_: vec4<f32>,
}

struct Line {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
}

struct Circle {
    g0_: vec4<f32>,
    g1_: vec3<f32>,
    g2_: vec3<f32>,
}

struct Plane {
    g0_: vec4<f32>,
}

struct Sphere {
    g0_: vec2<f32>,
    g1_: vec3<f32>,
}

struct Motor {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

struct Rotor {
    g0_: vec4<f32>,
}

struct Translator {
    g0_: vec4<f32>,
}

struct Flector {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

struct Dilation {
    g0_: vec3<f32>,
    g1_: vec2<f32>,
}

struct MultiVector {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
    g2_: vec2<f32>,
    g3_: vec4<f32>,
    g4_: vec3<f32>,
    g5_: vec3<f32>,
    g6_: vec3<f32>,
    g7_: vec3<f32>,
    g8_: vec4<f32>,
    g9_: vec4<f32>,
}

fn scalar_zero() -> Scalar {
    return Scalar(0.0);
}

fn scalar_one() -> Scalar {
    return Scalar(1.0);
}

fn scalar_neg(self_: Scalar) -> Scalar {
    var self_1: Scalar;

    self_1 = self_;
    let _e2: Scalar = self_1;
    return Scalar((_e2.g0_ * -(1.0)));
}

fn scalar_automorphism(self_2: Scalar) -> Scalar {
    var self_3: Scalar;

    self_3 = self_2;
    let _e2: Scalar = self_3;
    return Scalar(_e2.g0_);
}

fn scalar_reversal(self_4: Scalar) -> Scalar {
    var self_5: Scalar;

    self_5 = self_4;
    let _e2: Scalar = self_5;
    return Scalar(_e2.g0_);
}

fn scalar_conjugation(self_6: Scalar) -> Scalar {
    var self_7: Scalar;

    self_7 = self_6;
    let _e2: Scalar = self_7;
    return Scalar(_e2.g0_);
}

fn scalar_dual(self_8: Scalar) -> AntiScalar {
    var self_9: Scalar;

    self_9 = self_8;
    let _e2: Scalar = self_9;
    return AntiScalar(_e2.g0_);
}

fn scalar_anti_reversal(self_10: Scalar) -> Scalar {
    var self_11: Scalar;

    self_11 = self_10;
    let _e2: Scalar = self_11;
    return Scalar(_e2.g0_);
}

fn scalar_scalar_add(self_12: Scalar, other: Scalar) -> Scalar {
    var self_13: Scalar;
    var other_1: Scalar;

    self_13 = self_12;
    other_1 = other;
    let _e4: Scalar = self_13;
    let _e6: Scalar = other_1;
    return Scalar((_e4.g0_ + _e6.g0_));
}

fn scalar_scalar_sub(self_14: Scalar, other_2: Scalar) -> Scalar {
    var self_15: Scalar;
    var other_3: Scalar;

    self_15 = self_14;
    other_3 = other_2;
    let _e4: Scalar = self_15;
    let _e6: Scalar = other_3;
    return Scalar((_e4.g0_ - _e6.g0_));
}

fn scalar_scalar_mul(self_16: Scalar, other_4: Scalar) -> Scalar {
    var self_17: Scalar;
    var other_5: Scalar;

    self_17 = self_16;
    other_5 = other_4;
    let _e4: Scalar = self_17;
    let _e6: Scalar = other_5;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_div(self_18: Scalar, other_6: Scalar) -> Scalar {
    var self_19: Scalar;
    var other_7: Scalar;

    self_19 = self_18;
    other_7 = other_6;
    let _e4: Scalar = self_19;
    let _e8: Scalar = other_7;
    return Scalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn scalar_scalar_geometric_product(self_20: Scalar, other_8: Scalar) -> Scalar {
    var self_21: Scalar;
    var other_9: Scalar;

    self_21 = self_20;
    other_9 = other_8;
    let _e4: Scalar = self_21;
    let _e6: Scalar = other_9;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_outer_product(self_22: Scalar, other_10: Scalar) -> Scalar {
    var self_23: Scalar;
    var other_11: Scalar;

    self_23 = self_22;
    other_11 = other_10;
    let _e4: Scalar = self_23;
    let _e6: Scalar = other_11;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_inner_product(self_24: Scalar, other_12: Scalar) -> Scalar {
    var self_25: Scalar;
    var other_13: Scalar;

    self_25 = self_24;
    other_13 = other_12;
    let _e4: Scalar = self_25;
    let _e6: Scalar = other_13;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_left_contraction(self_26: Scalar, other_14: Scalar) -> Scalar {
    var self_27: Scalar;
    var other_15: Scalar;

    self_27 = self_26;
    other_15 = other_14;
    let _e4: Scalar = self_27;
    let _e6: Scalar = other_15;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_right_contraction(self_28: Scalar, other_16: Scalar) -> Scalar {
    var self_29: Scalar;
    var other_17: Scalar;

    self_29 = self_28;
    other_17 = other_16;
    let _e4: Scalar = self_29;
    let _e6: Scalar = other_17;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_scalar_product(self_30: Scalar, other_18: Scalar) -> Scalar {
    var self_31: Scalar;
    var other_19: Scalar;

    self_31 = self_30;
    other_19 = other_18;
    let _e4: Scalar = self_31;
    let _e6: Scalar = other_19;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_product(self_32: Scalar, other_20: AntiScalar) -> AntiScalar {
    var self_33: Scalar;
    var other_21: AntiScalar;

    self_33 = self_32;
    other_21 = other_20;
    let _e4: Scalar = self_33;
    let _e6: AntiScalar = other_21;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_regressive_product(self_34: Scalar, other_22: AntiScalar) -> Scalar {
    var self_35: Scalar;
    var other_23: AntiScalar;

    self_35 = self_34;
    other_23 = other_22;
    let _e4: Scalar = self_35;
    let _e6: AntiScalar = other_23;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_outer_product(self_36: Scalar, other_24: AntiScalar) -> AntiScalar {
    var self_37: Scalar;
    var other_25: AntiScalar;

    self_37 = self_36;
    other_25 = other_24;
    let _e4: Scalar = self_37;
    let _e6: AntiScalar = other_25;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_product(self_38: Scalar, other_26: AntiScalar) -> AntiScalar {
    var self_39: Scalar;
    var other_27: AntiScalar;

    self_39 = self_38;
    other_27 = other_26;
    let _e4: Scalar = self_39;
    let _e6: AntiScalar = other_27;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_anti_product(self_40: Scalar, other_28: AntiScalar) -> Scalar {
    var self_41: Scalar;
    var other_29: AntiScalar;

    self_41 = self_40;
    other_29 = other_28;
    let _e4: Scalar = self_41;
    let _e6: AntiScalar = other_29;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_anti_product(self_42: Scalar, other_30: AntiScalar) -> Scalar {
    var self_43: Scalar;
    var other_31: AntiScalar;

    self_43 = self_42;
    other_31 = other_30;
    let _e4: Scalar = self_43;
    let _e6: AntiScalar = other_31;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_left_contraction(self_44: Scalar, other_32: AntiScalar) -> AntiScalar {
    var self_45: Scalar;
    var other_33: AntiScalar;

    self_45 = self_44;
    other_33 = other_32;
    let _e4: Scalar = self_45;
    let _e6: AntiScalar = other_33;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_right_anti_contraction(self_46: Scalar, other_34: AntiScalar) -> Scalar {
    var self_47: Scalar;
    var other_35: AntiScalar;

    self_47 = self_46;
    other_35 = other_34;
    let _e4: Scalar = self_47;
    let _e6: AntiScalar = other_35;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_radial_point_geometric_product(self_48: Scalar, other_36: RadialPoint) -> RadialPoint {
    var self_49: Scalar;
    var other_37: RadialPoint;

    self_49 = self_48;
    other_37 = other_36;
    let _e4: Scalar = self_49;
    let _e7: RadialPoint = other_37;
    let _e10: Scalar = self_49;
    let _e13: RadialPoint = other_37;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_radial_point_outer_product(self_50: Scalar, other_38: RadialPoint) -> RadialPoint {
    var self_51: Scalar;
    var other_39: RadialPoint;

    self_51 = self_50;
    other_39 = other_38;
    let _e4: Scalar = self_51;
    let _e7: RadialPoint = other_39;
    let _e10: Scalar = self_51;
    let _e13: RadialPoint = other_39;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_radial_point_inner_product(self_52: Scalar, other_40: RadialPoint) -> RadialPoint {
    var self_53: Scalar;
    var other_41: RadialPoint;

    self_53 = self_52;
    other_41 = other_40;
    let _e4: Scalar = self_53;
    let _e7: RadialPoint = other_41;
    let _e10: Scalar = self_53;
    let _e13: RadialPoint = other_41;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_radial_point_left_contraction(self_54: Scalar, other_42: RadialPoint) -> RadialPoint {
    var self_55: Scalar;
    var other_43: RadialPoint;

    self_55 = self_54;
    other_43 = other_42;
    let _e4: Scalar = self_55;
    let _e7: RadialPoint = other_43;
    let _e10: Scalar = self_55;
    let _e13: RadialPoint = other_43;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flat_point_geometric_product(self_56: Scalar, other_44: FlatPoint) -> FlatPoint {
    var self_57: Scalar;
    var other_45: FlatPoint;

    self_57 = self_56;
    other_45 = other_44;
    let _e4: Scalar = self_57;
    let _e7: FlatPoint = other_45;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_flat_point_outer_product(self_58: Scalar, other_46: FlatPoint) -> FlatPoint {
    var self_59: Scalar;
    var other_47: FlatPoint;

    self_59 = self_58;
    other_47 = other_46;
    let _e4: Scalar = self_59;
    let _e7: FlatPoint = other_47;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_flat_point_inner_product(self_60: Scalar, other_48: FlatPoint) -> FlatPoint {
    var self_61: Scalar;
    var other_49: FlatPoint;

    self_61 = self_60;
    other_49 = other_48;
    let _e4: Scalar = self_61;
    let _e7: FlatPoint = other_49;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_flat_point_left_contraction(self_62: Scalar, other_50: FlatPoint) -> FlatPoint {
    var self_63: Scalar;
    var other_51: FlatPoint;

    self_63 = self_62;
    other_51 = other_50;
    let _e4: Scalar = self_63;
    let _e7: FlatPoint = other_51;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_dipole_geometric_product(self_64: Scalar, other_52: Dipole) -> Dipole {
    var self_65: Scalar;
    var other_53: Dipole;

    self_65 = self_64;
    other_53 = other_52;
    let _e4: Scalar = self_65;
    let _e7: Dipole = other_53;
    let _e10: Scalar = self_65;
    let _e13: Dipole = other_53;
    let _e16: Scalar = self_65;
    let _e19: Dipole = other_53;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_dipole_outer_product(self_66: Scalar, other_54: Dipole) -> Dipole {
    var self_67: Scalar;
    var other_55: Dipole;

    self_67 = self_66;
    other_55 = other_54;
    let _e4: Scalar = self_67;
    let _e7: Dipole = other_55;
    let _e10: Scalar = self_67;
    let _e13: Dipole = other_55;
    let _e16: Scalar = self_67;
    let _e19: Dipole = other_55;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_dipole_inner_product(self_68: Scalar, other_56: Dipole) -> Dipole {
    var self_69: Scalar;
    var other_57: Dipole;

    self_69 = self_68;
    other_57 = other_56;
    let _e4: Scalar = self_69;
    let _e7: Dipole = other_57;
    let _e10: Scalar = self_69;
    let _e13: Dipole = other_57;
    let _e16: Scalar = self_69;
    let _e19: Dipole = other_57;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_dipole_left_contraction(self_70: Scalar, other_58: Dipole) -> Dipole {
    var self_71: Scalar;
    var other_59: Dipole;

    self_71 = self_70;
    other_59 = other_58;
    let _e4: Scalar = self_71;
    let _e7: Dipole = other_59;
    let _e10: Scalar = self_71;
    let _e13: Dipole = other_59;
    let _e16: Scalar = self_71;
    let _e19: Dipole = other_59;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_line_geometric_product(self_72: Scalar, other_60: Line) -> Line {
    var self_73: Scalar;
    var other_61: Line;

    self_73 = self_72;
    other_61 = other_60;
    let _e4: Scalar = self_73;
    let _e7: Line = other_61;
    let _e10: Scalar = self_73;
    let _e13: Line = other_61;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_outer_product(self_74: Scalar, other_62: Line) -> Line {
    var self_75: Scalar;
    var other_63: Line;

    self_75 = self_74;
    other_63 = other_62;
    let _e4: Scalar = self_75;
    let _e7: Line = other_63;
    let _e10: Scalar = self_75;
    let _e13: Line = other_63;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_inner_product(self_76: Scalar, other_64: Line) -> Line {
    var self_77: Scalar;
    var other_65: Line;

    self_77 = self_76;
    other_65 = other_64;
    let _e4: Scalar = self_77;
    let _e7: Line = other_65;
    let _e10: Scalar = self_77;
    let _e13: Line = other_65;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_left_contraction(self_78: Scalar, other_66: Line) -> Line {
    var self_79: Scalar;
    var other_67: Line;

    self_79 = self_78;
    other_67 = other_66;
    let _e4: Scalar = self_79;
    let _e7: Line = other_67;
    let _e10: Scalar = self_79;
    let _e13: Line = other_67;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_circle_geometric_product(self_80: Scalar, other_68: Circle) -> Circle {
    var self_81: Scalar;
    var other_69: Circle;

    self_81 = self_80;
    other_69 = other_68;
    let _e4: Scalar = self_81;
    let _e7: Circle = other_69;
    let _e10: Scalar = self_81;
    let _e13: Circle = other_69;
    let _e16: Scalar = self_81;
    let _e19: Circle = other_69;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_circle_outer_product(self_82: Scalar, other_70: Circle) -> Circle {
    var self_83: Scalar;
    var other_71: Circle;

    self_83 = self_82;
    other_71 = other_70;
    let _e4: Scalar = self_83;
    let _e7: Circle = other_71;
    let _e10: Scalar = self_83;
    let _e13: Circle = other_71;
    let _e16: Scalar = self_83;
    let _e19: Circle = other_71;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_circle_inner_product(self_84: Scalar, other_72: Circle) -> Circle {
    var self_85: Scalar;
    var other_73: Circle;

    self_85 = self_84;
    other_73 = other_72;
    let _e4: Scalar = self_85;
    let _e7: Circle = other_73;
    let _e10: Scalar = self_85;
    let _e13: Circle = other_73;
    let _e16: Scalar = self_85;
    let _e19: Circle = other_73;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_circle_left_contraction(self_86: Scalar, other_74: Circle) -> Circle {
    var self_87: Scalar;
    var other_75: Circle;

    self_87 = self_86;
    other_75 = other_74;
    let _e4: Scalar = self_87;
    let _e7: Circle = other_75;
    let _e10: Scalar = self_87;
    let _e13: Circle = other_75;
    let _e16: Scalar = self_87;
    let _e19: Circle = other_75;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn scalar_plane_geometric_product(self_88: Scalar, other_76: Plane) -> Plane {
    var self_89: Scalar;
    var other_77: Plane;

    self_89 = self_88;
    other_77 = other_76;
    let _e4: Scalar = self_89;
    let _e7: Plane = other_77;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_outer_product(self_90: Scalar, other_78: Plane) -> Plane {
    var self_91: Scalar;
    var other_79: Plane;

    self_91 = self_90;
    other_79 = other_78;
    let _e4: Scalar = self_91;
    let _e7: Plane = other_79;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_product(self_92: Scalar, other_80: Plane) -> Plane {
    var self_93: Scalar;
    var other_81: Plane;

    self_93 = self_92;
    other_81 = other_80;
    let _e4: Scalar = self_93;
    let _e7: Plane = other_81;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_left_contraction(self_94: Scalar, other_82: Plane) -> Plane {
    var self_95: Scalar;
    var other_83: Plane;

    self_95 = self_94;
    other_83 = other_82;
    let _e4: Scalar = self_95;
    let _e7: Plane = other_83;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_sphere_geometric_product(self_96: Scalar, other_84: Sphere) -> Sphere {
    var self_97: Scalar;
    var other_85: Sphere;

    self_97 = self_96;
    other_85 = other_84;
    let _e4: Scalar = self_97;
    let _e7: Sphere = other_85;
    let _e10: Scalar = self_97;
    let _e13: Sphere = other_85;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_sphere_outer_product(self_98: Scalar, other_86: Sphere) -> Sphere {
    var self_99: Scalar;
    var other_87: Sphere;

    self_99 = self_98;
    other_87 = other_86;
    let _e4: Scalar = self_99;
    let _e7: Sphere = other_87;
    let _e10: Scalar = self_99;
    let _e13: Sphere = other_87;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_sphere_inner_product(self_100: Scalar, other_88: Sphere) -> Sphere {
    var self_101: Scalar;
    var other_89: Sphere;

    self_101 = self_100;
    other_89 = other_88;
    let _e4: Scalar = self_101;
    let _e7: Sphere = other_89;
    let _e10: Scalar = self_101;
    let _e13: Sphere = other_89;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_sphere_left_contraction(self_102: Scalar, other_90: Sphere) -> Sphere {
    var self_103: Scalar;
    var other_91: Sphere;

    self_103 = self_102;
    other_91 = other_90;
    let _e4: Scalar = self_103;
    let _e7: Sphere = other_91;
    let _e10: Scalar = self_103;
    let _e13: Sphere = other_91;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_geometric_product(self_104: Scalar, other_92: Motor) -> Motor {
    var self_105: Scalar;
    var other_93: Motor;

    self_105 = self_104;
    other_93 = other_92;
    let _e4: Scalar = self_105;
    let _e7: Motor = other_93;
    let _e10: Scalar = self_105;
    let _e13: Motor = other_93;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_regressive_product(self_106: Scalar, other_94: Motor) -> Scalar {
    var self_107: Scalar;
    var other_95: Motor;

    self_107 = self_106;
    other_95 = other_94;
    let _e4: Scalar = self_107;
    let _e6: Motor = other_95;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_outer_product(self_108: Scalar, other_96: Motor) -> Motor {
    var self_109: Scalar;
    var other_97: Motor;

    self_109 = self_108;
    other_97 = other_96;
    let _e4: Scalar = self_109;
    let _e7: Motor = other_97;
    let _e10: Scalar = self_109;
    let _e13: Motor = other_97;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_inner_product(self_110: Scalar, other_98: Motor) -> Motor {
    var self_111: Scalar;
    var other_99: Motor;

    self_111 = self_110;
    other_99 = other_98;
    let _e4: Scalar = self_111;
    let _e7: Motor = other_99;
    let _e10: Scalar = self_111;
    let _e13: Motor = other_99;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_left_contraction(self_112: Scalar, other_100: Motor) -> Motor {
    var self_113: Scalar;
    var other_101: Motor;

    self_113 = self_112;
    other_101 = other_100;
    let _e4: Scalar = self_113;
    let _e7: Motor = other_101;
    let _e10: Scalar = self_113;
    let _e13: Motor = other_101;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_rotor_geometric_product(self_114: Scalar, other_102: Rotor) -> Rotor {
    var self_115: Scalar;
    var other_103: Rotor;

    self_115 = self_114;
    other_103 = other_102;
    let _e4: Scalar = self_115;
    let _e7: Rotor = other_103;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_regressive_product(self_116: Scalar, other_104: Rotor) -> Scalar {
    var self_117: Scalar;
    var other_105: Rotor;

    self_117 = self_116;
    other_105 = other_104;
    let _e4: Scalar = self_117;
    let _e6: Rotor = other_105;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_outer_product(self_118: Scalar, other_106: Rotor) -> Rotor {
    var self_119: Scalar;
    var other_107: Rotor;

    self_119 = self_118;
    other_107 = other_106;
    let _e4: Scalar = self_119;
    let _e7: Rotor = other_107;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_inner_product(self_120: Scalar, other_108: Rotor) -> Rotor {
    var self_121: Scalar;
    var other_109: Rotor;

    self_121 = self_120;
    other_109 = other_108;
    let _e4: Scalar = self_121;
    let _e7: Rotor = other_109;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_left_contraction(self_122: Scalar, other_110: Rotor) -> Rotor {
    var self_123: Scalar;
    var other_111: Rotor;

    self_123 = self_122;
    other_111 = other_110;
    let _e4: Scalar = self_123;
    let _e7: Rotor = other_111;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_geometric_product(self_124: Scalar, other_112: Translator) -> Translator {
    var self_125: Scalar;
    var other_113: Translator;

    self_125 = self_124;
    other_113 = other_112;
    let _e4: Scalar = self_125;
    let _e7: Translator = other_113;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_regressive_product(self_126: Scalar, other_114: Translator) -> Scalar {
    var self_127: Scalar;
    var other_115: Translator;

    self_127 = self_126;
    other_115 = other_114;
    let _e4: Scalar = self_127;
    let _e6: Translator = other_115;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_outer_product(self_128: Scalar, other_116: Translator) -> Translator {
    var self_129: Scalar;
    var other_117: Translator;

    self_129 = self_128;
    other_117 = other_116;
    let _e4: Scalar = self_129;
    let _e7: Translator = other_117;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_product(self_130: Scalar, other_118: Translator) -> Translator {
    var self_131: Scalar;
    var other_119: Translator;

    self_131 = self_130;
    other_119 = other_118;
    let _e4: Scalar = self_131;
    let _e7: Translator = other_119;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_geometric_anti_product(self_132: Scalar, other_120: Translator) -> Scalar {
    var self_133: Scalar;
    var other_121: Translator;

    self_133 = self_132;
    other_121 = other_120;
    let _e4: Scalar = self_133;
    let _e6: Translator = other_121;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_inner_anti_product(self_134: Scalar, other_122: Translator) -> Scalar {
    var self_135: Scalar;
    var other_123: Translator;

    self_135 = self_134;
    other_123 = other_122;
    let _e4: Scalar = self_135;
    let _e6: Translator = other_123;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_left_contraction(self_136: Scalar, other_124: Translator) -> Translator {
    var self_137: Scalar;
    var other_125: Translator;

    self_137 = self_136;
    other_125 = other_124;
    let _e4: Scalar = self_137;
    let _e7: Translator = other_125;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_right_anti_contraction(self_138: Scalar, other_126: Translator) -> Scalar {
    var self_139: Scalar;
    var other_127: Translator;

    self_139 = self_138;
    other_127 = other_126;
    let _e4: Scalar = self_139;
    let _e6: Translator = other_127;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_flector_geometric_product(self_140: Scalar, other_128: Flector) -> Flector {
    var self_141: Scalar;
    var other_129: Flector;

    self_141 = self_140;
    other_129 = other_128;
    let _e4: Scalar = self_141;
    let _e7: Flector = other_129;
    let _e10: Scalar = self_141;
    let _e13: Flector = other_129;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_outer_product(self_142: Scalar, other_130: Flector) -> Flector {
    var self_143: Scalar;
    var other_131: Flector;

    self_143 = self_142;
    other_131 = other_130;
    let _e4: Scalar = self_143;
    let _e7: Flector = other_131;
    let _e10: Scalar = self_143;
    let _e13: Flector = other_131;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_inner_product(self_144: Scalar, other_132: Flector) -> Flector {
    var self_145: Scalar;
    var other_133: Flector;

    self_145 = self_144;
    other_133 = other_132;
    let _e4: Scalar = self_145;
    let _e7: Flector = other_133;
    let _e10: Scalar = self_145;
    let _e13: Flector = other_133;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_left_contraction(self_146: Scalar, other_134: Flector) -> Flector {
    var self_147: Scalar;
    var other_135: Flector;

    self_147 = self_146;
    other_135 = other_134;
    let _e4: Scalar = self_147;
    let _e7: Flector = other_135;
    let _e10: Scalar = self_147;
    let _e13: Flector = other_135;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_dilation_geometric_product(self_148: Scalar, other_136: Dilation) -> Dilation {
    var self_149: Scalar;
    var other_137: Dilation;

    self_149 = self_148;
    other_137 = other_136;
    let _e4: Scalar = self_149;
    let _e7: Dilation = other_137;
    let _e10: Scalar = self_149;
    let _e13: Dilation = other_137;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_dilation_regressive_product(self_150: Scalar, other_138: Dilation) -> Scalar {
    var self_151: Scalar;
    var other_139: Dilation;

    self_151 = self_150;
    other_139 = other_138;
    let _e4: Scalar = self_151;
    let _e6: Dilation = other_139;
    return Scalar((_e4.g0_ * _e6.g1_.y));
}

fn scalar_dilation_outer_product(self_152: Scalar, other_140: Dilation) -> Dilation {
    var self_153: Scalar;
    var other_141: Dilation;

    self_153 = self_152;
    other_141 = other_140;
    let _e4: Scalar = self_153;
    let _e7: Dilation = other_141;
    let _e10: Scalar = self_153;
    let _e13: Dilation = other_141;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_dilation_inner_product(self_154: Scalar, other_142: Dilation) -> Dilation {
    var self_155: Scalar;
    var other_143: Dilation;

    self_155 = self_154;
    other_143 = other_142;
    let _e4: Scalar = self_155;
    let _e7: Dilation = other_143;
    let _e10: Scalar = self_155;
    let _e13: Dilation = other_143;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_dilation_geometric_anti_product(self_156: Scalar, other_144: Dilation) -> Scalar {
    var self_157: Scalar;
    var other_145: Dilation;

    self_157 = self_156;
    other_145 = other_144;
    let _e4: Scalar = self_157;
    let _e6: Dilation = other_145;
    return Scalar((_e4.g0_ * _e6.g1_.y));
}

fn scalar_dilation_inner_anti_product(self_158: Scalar, other_146: Dilation) -> Scalar {
    var self_159: Scalar;
    var other_147: Dilation;

    self_159 = self_158;
    other_147 = other_146;
    let _e4: Scalar = self_159;
    let _e6: Dilation = other_147;
    return Scalar((_e4.g0_ * _e6.g1_.y));
}

fn scalar_dilation_left_contraction(self_160: Scalar, other_148: Dilation) -> Dilation {
    var self_161: Scalar;
    var other_149: Dilation;

    self_161 = self_160;
    other_149 = other_148;
    let _e4: Scalar = self_161;
    let _e7: Dilation = other_149;
    let _e10: Scalar = self_161;
    let _e13: Dilation = other_149;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_dilation_right_anti_contraction(self_162: Scalar, other_150: Dilation) -> Scalar {
    var self_163: Scalar;
    var other_151: Dilation;

    self_163 = self_162;
    other_151 = other_150;
    let _e4: Scalar = self_163;
    let _e6: Dilation = other_151;
    return Scalar((_e4.g0_ * _e6.g1_.y));
}

fn scalar_multi_vector_add(self_164: Scalar, other_152: MultiVector) -> MultiVector {
    var self_165: Scalar;
    var other_153: MultiVector;

    self_165 = self_164;
    other_153 = other_152;
    let _e4: Scalar = self_165;
    let _e12: MultiVector = other_153;
    let _e15: MultiVector = other_153;
    let _e17: MultiVector = other_153;
    let _e19: MultiVector = other_153;
    let _e21: MultiVector = other_153;
    let _e23: MultiVector = other_153;
    let _e25: MultiVector = other_153;
    let _e27: MultiVector = other_153;
    let _e29: MultiVector = other_153;
    let _e31: MultiVector = other_153;
    return MultiVector(((vec3<f32>(_e4.g0_) * vec3<f32>(1.0, 0.0, 0.0)) + _e12.g0_), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn scalar_multi_vector_sub(self_166: Scalar, other_154: MultiVector) -> MultiVector {
    var self_167: Scalar;
    var other_155: MultiVector;

    self_167 = self_166;
    other_155 = other_154;
    let _e4: Scalar = self_167;
    let _e12: MultiVector = other_155;
    let _e17: MultiVector = other_155;
    let _e22: MultiVector = other_155;
    let _e27: MultiVector = other_155;
    let _e32: MultiVector = other_155;
    let _e37: MultiVector = other_155;
    let _e42: MultiVector = other_155;
    let _e47: MultiVector = other_155;
    let _e52: MultiVector = other_155;
    let _e57: MultiVector = other_155;
    return MultiVector(((vec3<f32>(_e4.g0_) * vec3<f32>(1.0, 0.0, 0.0)) - _e12.g0_), (vec3<f32>(0.0) - _e17.g1_), (vec2<f32>(0.0) - _e22.g2_), (vec4<f32>(0.0) - _e27.g3_), (vec3<f32>(0.0) - _e32.g4_), (vec3<f32>(0.0) - _e37.g5_), (vec3<f32>(0.0) - _e42.g6_), (vec3<f32>(0.0) - _e47.g7_), (vec4<f32>(0.0) - _e52.g8_), (vec4<f32>(0.0) - _e57.g9_));
}

fn scalar_multi_vector_geometric_product(self_168: Scalar, other_156: MultiVector) -> MultiVector {
    var self_169: Scalar;
    var other_157: MultiVector;

    self_169 = self_168;
    other_157 = other_156;
    let _e4: Scalar = self_169;
    let _e7: MultiVector = other_157;
    let _e10: Scalar = self_169;
    let _e13: MultiVector = other_157;
    let _e16: Scalar = self_169;
    let _e19: MultiVector = other_157;
    let _e22: Scalar = self_169;
    let _e25: MultiVector = other_157;
    let _e28: Scalar = self_169;
    let _e31: MultiVector = other_157;
    let _e34: Scalar = self_169;
    let _e37: MultiVector = other_157;
    let _e40: Scalar = self_169;
    let _e43: MultiVector = other_157;
    let _e46: Scalar = self_169;
    let _e49: MultiVector = other_157;
    let _e52: Scalar = self_169;
    let _e55: MultiVector = other_157;
    let _e58: Scalar = self_169;
    let _e61: MultiVector = other_157;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn scalar_multi_vector_regressive_product(self_170: Scalar, other_158: MultiVector) -> Scalar {
    var self_171: Scalar;
    var other_159: MultiVector;

    self_171 = self_170;
    other_159 = other_158;
    let _e4: Scalar = self_171;
    let _e6: MultiVector = other_159;
    return Scalar((_e4.g0_ * _e6.g0_.z));
}

fn scalar_multi_vector_outer_product(self_172: Scalar, other_160: MultiVector) -> MultiVector {
    var self_173: Scalar;
    var other_161: MultiVector;

    self_173 = self_172;
    other_161 = other_160;
    let _e4: Scalar = self_173;
    let _e7: MultiVector = other_161;
    let _e10: Scalar = self_173;
    let _e13: MultiVector = other_161;
    let _e16: Scalar = self_173;
    let _e19: MultiVector = other_161;
    let _e22: Scalar = self_173;
    let _e25: MultiVector = other_161;
    let _e28: Scalar = self_173;
    let _e31: MultiVector = other_161;
    let _e34: Scalar = self_173;
    let _e37: MultiVector = other_161;
    let _e40: Scalar = self_173;
    let _e43: MultiVector = other_161;
    let _e46: Scalar = self_173;
    let _e49: MultiVector = other_161;
    let _e52: Scalar = self_173;
    let _e55: MultiVector = other_161;
    let _e58: Scalar = self_173;
    let _e61: MultiVector = other_161;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn scalar_multi_vector_inner_product(self_174: Scalar, other_162: MultiVector) -> MultiVector {
    var self_175: Scalar;
    var other_163: MultiVector;

    self_175 = self_174;
    other_163 = other_162;
    let _e4: Scalar = self_175;
    let _e7: MultiVector = other_163;
    let _e10: Scalar = self_175;
    let _e13: MultiVector = other_163;
    let _e16: Scalar = self_175;
    let _e19: MultiVector = other_163;
    let _e22: Scalar = self_175;
    let _e25: MultiVector = other_163;
    let _e28: Scalar = self_175;
    let _e31: MultiVector = other_163;
    let _e34: Scalar = self_175;
    let _e37: MultiVector = other_163;
    let _e40: Scalar = self_175;
    let _e43: MultiVector = other_163;
    let _e46: Scalar = self_175;
    let _e49: MultiVector = other_163;
    let _e52: Scalar = self_175;
    let _e55: MultiVector = other_163;
    let _e58: Scalar = self_175;
    let _e61: MultiVector = other_163;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn scalar_multi_vector_left_contraction(self_176: Scalar, other_164: MultiVector) -> MultiVector {
    var self_177: Scalar;
    var other_165: MultiVector;

    self_177 = self_176;
    other_165 = other_164;
    let _e4: Scalar = self_177;
    let _e7: MultiVector = other_165;
    let _e10: Scalar = self_177;
    let _e13: MultiVector = other_165;
    let _e16: Scalar = self_177;
    let _e19: MultiVector = other_165;
    let _e22: Scalar = self_177;
    let _e25: MultiVector = other_165;
    let _e28: Scalar = self_177;
    let _e31: MultiVector = other_165;
    let _e34: Scalar = self_177;
    let _e37: MultiVector = other_165;
    let _e40: Scalar = self_177;
    let _e43: MultiVector = other_165;
    let _e46: Scalar = self_177;
    let _e49: MultiVector = other_165;
    let _e52: Scalar = self_177;
    let _e55: MultiVector = other_165;
    let _e58: Scalar = self_177;
    let _e61: MultiVector = other_165;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn scalar_multi_vector_right_contraction(self_178: Scalar, other_166: MultiVector) -> Scalar {
    var self_179: Scalar;
    var other_167: MultiVector;

    self_179 = self_178;
    other_167 = other_166;
    let _e4: Scalar = self_179;
    let _e6: MultiVector = other_167;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_scalar_product(self_180: Scalar, other_168: MultiVector) -> Scalar {
    var self_181: Scalar;
    var other_169: MultiVector;

    self_181 = self_180;
    other_169 = other_168;
    let _e4: Scalar = self_181;
    let _e6: MultiVector = other_169;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_squared_magnitude(self_182: Scalar) -> Scalar {
    var self_183: Scalar;

    self_183 = self_182;
    let _e2: Scalar = self_183;
    let _e3: Scalar = self_183;
    let _e4: Scalar = scalar_reversal(_e3);
    let _e5: Scalar = scalar_scalar_scalar_product(_e2, _e4);
    return _e5;
}

fn scalar_magnitude(self_184: Scalar) -> Scalar {
    var self_185: Scalar;

    self_185 = self_184;
    let _e2: Scalar = self_185;
    let _e3: Scalar = scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn scalar_scale(self_186: Scalar, other_170: f32) -> Scalar {
    var self_187: Scalar;
    var other_171: f32;

    self_187 = self_186;
    other_171 = other_170;
    let _e4: Scalar = self_187;
    let _e5: f32 = other_171;
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn scalar_signum(self_188: Scalar) -> Scalar {
    var self_189: Scalar;

    self_189 = self_188;
    let _e2: Scalar = self_189;
    let _e3: Scalar = self_189;
    let _e4: Scalar = scalar_magnitude(_e3);
    let _e9: Scalar = scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn scalar_inverse(self_190: Scalar) -> Scalar {
    var self_191: Scalar;

    self_191 = self_190;
    let _e2: Scalar = self_191;
    let _e3: Scalar = scalar_reversal(_e2);
    let _e4: Scalar = self_191;
    let _e5: Scalar = scalar_squared_magnitude(_e4);
    let _e10: Scalar = scalar_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn anti_scalar_zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_neg(self_192: AntiScalar) -> AntiScalar {
    var self_193: AntiScalar;

    self_193 = self_192;
    let _e2: AntiScalar = self_193;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_automorphism(self_194: AntiScalar) -> AntiScalar {
    var self_195: AntiScalar;

    self_195 = self_194;
    let _e2: AntiScalar = self_195;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_reversal(self_196: AntiScalar) -> AntiScalar {
    var self_197: AntiScalar;

    self_197 = self_196;
    let _e2: AntiScalar = self_197;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_conjugation(self_198: AntiScalar) -> AntiScalar {
    var self_199: AntiScalar;

    self_199 = self_198;
    let _e2: AntiScalar = self_199;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_dual(self_200: AntiScalar) -> Scalar {
    var self_201: AntiScalar;

    self_201 = self_200;
    let _e2: AntiScalar = self_201;
    return Scalar(_e2.g0_);
}

fn anti_scalar_anti_reversal(self_202: AntiScalar) -> AntiScalar {
    var self_203: AntiScalar;

    self_203 = self_202;
    let _e2: AntiScalar = self_203;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_scalar_geometric_product(self_204: AntiScalar, other_172: Scalar) -> AntiScalar {
    var self_205: AntiScalar;
    var other_173: Scalar;

    self_205 = self_204;
    other_173 = other_172;
    let _e4: AntiScalar = self_205;
    let _e6: Scalar = other_173;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_regressive_product(self_206: AntiScalar, other_174: Scalar) -> Scalar {
    var self_207: AntiScalar;
    var other_175: Scalar;

    self_207 = self_206;
    other_175 = other_174;
    let _e4: AntiScalar = self_207;
    let _e6: Scalar = other_175;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_outer_product(self_208: AntiScalar, other_176: Scalar) -> AntiScalar {
    var self_209: AntiScalar;
    var other_177: Scalar;

    self_209 = self_208;
    other_177 = other_176;
    let _e4: AntiScalar = self_209;
    let _e6: Scalar = other_177;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_product(self_210: AntiScalar, other_178: Scalar) -> AntiScalar {
    var self_211: AntiScalar;
    var other_179: Scalar;

    self_211 = self_210;
    other_179 = other_178;
    let _e4: AntiScalar = self_211;
    let _e6: Scalar = other_179;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_geometric_anti_product(self_212: AntiScalar, other_180: Scalar) -> Scalar {
    var self_213: AntiScalar;
    var other_181: Scalar;

    self_213 = self_212;
    other_181 = other_180;
    let _e4: AntiScalar = self_213;
    let _e6: Scalar = other_181;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_anti_product(self_214: AntiScalar, other_182: Scalar) -> Scalar {
    var self_215: AntiScalar;
    var other_183: Scalar;

    self_215 = self_214;
    other_183 = other_182;
    let _e4: AntiScalar = self_215;
    let _e6: Scalar = other_183;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_right_contraction(self_216: AntiScalar, other_184: Scalar) -> AntiScalar {
    var self_217: AntiScalar;
    var other_185: Scalar;

    self_217 = self_216;
    other_185 = other_184;
    let _e4: AntiScalar = self_217;
    let _e6: Scalar = other_185;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_left_anti_contraction(self_218: AntiScalar, other_186: Scalar) -> Scalar {
    var self_219: AntiScalar;
    var other_187: Scalar;

    self_219 = self_218;
    other_187 = other_186;
    let _e4: AntiScalar = self_219;
    let _e6: Scalar = other_187;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_add(self_220: AntiScalar, other_188: AntiScalar) -> AntiScalar {
    var self_221: AntiScalar;
    var other_189: AntiScalar;

    self_221 = self_220;
    other_189 = other_188;
    let _e4: AntiScalar = self_221;
    let _e6: AntiScalar = other_189;
    return AntiScalar((_e4.g0_ + _e6.g0_));
}

fn anti_scalar_anti_scalar_sub(self_222: AntiScalar, other_190: AntiScalar) -> AntiScalar {
    var self_223: AntiScalar;
    var other_191: AntiScalar;

    self_223 = self_222;
    other_191 = other_190;
    let _e4: AntiScalar = self_223;
    let _e6: AntiScalar = other_191;
    return AntiScalar((_e4.g0_ - _e6.g0_));
}

fn anti_scalar_anti_scalar_mul(self_224: AntiScalar, other_192: AntiScalar) -> AntiScalar {
    var self_225: AntiScalar;
    var other_193: AntiScalar;

    self_225 = self_224;
    other_193 = other_192;
    let _e4: AntiScalar = self_225;
    let _e6: AntiScalar = other_193;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_div(self_226: AntiScalar, other_194: AntiScalar) -> AntiScalar {
    var self_227: AntiScalar;
    var other_195: AntiScalar;

    self_227 = self_226;
    other_195 = other_194;
    let _e4: AntiScalar = self_227;
    let _e8: AntiScalar = other_195;
    return AntiScalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn anti_scalar_anti_scalar_regressive_product(self_228: AntiScalar, other_196: AntiScalar) -> AntiScalar {
    var self_229: AntiScalar;
    var other_197: AntiScalar;

    self_229 = self_228;
    other_197 = other_196;
    let _e4: AntiScalar = self_229;
    let _e6: AntiScalar = other_197;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_geometric_anti_product(self_230: AntiScalar, other_198: AntiScalar) -> AntiScalar {
    var self_231: AntiScalar;
    var other_199: AntiScalar;

    self_231 = self_230;
    other_199 = other_198;
    let _e4: AntiScalar = self_231;
    let _e6: AntiScalar = other_199;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_inner_anti_product(self_232: AntiScalar, other_200: AntiScalar) -> AntiScalar {
    var self_233: AntiScalar;
    var other_201: AntiScalar;

    self_233 = self_232;
    other_201 = other_200;
    let _e4: AntiScalar = self_233;
    let _e6: AntiScalar = other_201;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_left_anti_contraction(self_234: AntiScalar, other_202: AntiScalar) -> AntiScalar {
    var self_235: AntiScalar;
    var other_203: AntiScalar;

    self_235 = self_234;
    other_203 = other_202;
    let _e4: AntiScalar = self_235;
    let _e6: AntiScalar = other_203;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_right_anti_contraction(self_236: AntiScalar, other_204: AntiScalar) -> AntiScalar {
    var self_237: AntiScalar;
    var other_205: AntiScalar;

    self_237 = self_236;
    other_205 = other_204;
    let _e4: AntiScalar = self_237;
    let _e6: AntiScalar = other_205;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_scalar_product(self_238: AntiScalar, other_206: AntiScalar) -> AntiScalar {
    var self_239: AntiScalar;
    var other_207: AntiScalar;

    self_239 = self_238;
    other_207 = other_206;
    let _e4: AntiScalar = self_239;
    let _e6: AntiScalar = other_207;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_radial_point_regressive_product(self_240: AntiScalar, other_208: RadialPoint) -> RadialPoint {
    var self_241: AntiScalar;
    var other_209: RadialPoint;

    self_241 = self_240;
    other_209 = other_208;
    let _e4: AntiScalar = self_241;
    let _e7: RadialPoint = other_209;
    let _e10: AntiScalar = self_241;
    let _e13: RadialPoint = other_209;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_radial_point_geometric_anti_product(self_242: AntiScalar, other_210: RadialPoint) -> RadialPoint {
    var self_243: AntiScalar;
    var other_211: RadialPoint;

    self_243 = self_242;
    other_211 = other_210;
    let _e4: AntiScalar = self_243;
    let _e7: RadialPoint = other_211;
    let _e10: AntiScalar = self_243;
    let _e13: RadialPoint = other_211;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_radial_point_inner_anti_product(self_244: AntiScalar, other_212: RadialPoint) -> RadialPoint {
    var self_245: AntiScalar;
    var other_213: RadialPoint;

    self_245 = self_244;
    other_213 = other_212;
    let _e4: AntiScalar = self_245;
    let _e7: RadialPoint = other_213;
    let _e10: AntiScalar = self_245;
    let _e13: RadialPoint = other_213;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_radial_point_left_anti_contraction(self_246: AntiScalar, other_214: RadialPoint) -> RadialPoint {
    var self_247: AntiScalar;
    var other_215: RadialPoint;

    self_247 = self_246;
    other_215 = other_214;
    let _e4: AntiScalar = self_247;
    let _e7: RadialPoint = other_215;
    let _e10: AntiScalar = self_247;
    let _e13: RadialPoint = other_215;
    return RadialPoint((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flat_point_regressive_product(self_248: AntiScalar, other_216: FlatPoint) -> FlatPoint {
    var self_249: AntiScalar;
    var other_217: FlatPoint;

    self_249 = self_248;
    other_217 = other_216;
    let _e4: AntiScalar = self_249;
    let _e7: FlatPoint = other_217;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_flat_point_geometric_anti_product(self_250: AntiScalar, other_218: FlatPoint) -> FlatPoint {
    var self_251: AntiScalar;
    var other_219: FlatPoint;

    self_251 = self_250;
    other_219 = other_218;
    let _e4: AntiScalar = self_251;
    let _e7: FlatPoint = other_219;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_flat_point_inner_anti_product(self_252: AntiScalar, other_220: FlatPoint) -> FlatPoint {
    var self_253: AntiScalar;
    var other_221: FlatPoint;

    self_253 = self_252;
    other_221 = other_220;
    let _e4: AntiScalar = self_253;
    let _e7: FlatPoint = other_221;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_flat_point_left_anti_contraction(self_254: AntiScalar, other_222: FlatPoint) -> FlatPoint {
    var self_255: AntiScalar;
    var other_223: FlatPoint;

    self_255 = self_254;
    other_223 = other_222;
    let _e4: AntiScalar = self_255;
    let _e7: FlatPoint = other_223;
    return FlatPoint((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_dipole_regressive_product(self_256: AntiScalar, other_224: Dipole) -> Dipole {
    var self_257: AntiScalar;
    var other_225: Dipole;

    self_257 = self_256;
    other_225 = other_224;
    let _e4: AntiScalar = self_257;
    let _e7: Dipole = other_225;
    let _e10: AntiScalar = self_257;
    let _e13: Dipole = other_225;
    let _e16: AntiScalar = self_257;
    let _e19: Dipole = other_225;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_dipole_geometric_anti_product(self_258: AntiScalar, other_226: Dipole) -> Dipole {
    var self_259: AntiScalar;
    var other_227: Dipole;

    self_259 = self_258;
    other_227 = other_226;
    let _e4: AntiScalar = self_259;
    let _e7: Dipole = other_227;
    let _e10: AntiScalar = self_259;
    let _e13: Dipole = other_227;
    let _e16: AntiScalar = self_259;
    let _e19: Dipole = other_227;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_dipole_inner_anti_product(self_260: AntiScalar, other_228: Dipole) -> Dipole {
    var self_261: AntiScalar;
    var other_229: Dipole;

    self_261 = self_260;
    other_229 = other_228;
    let _e4: AntiScalar = self_261;
    let _e7: Dipole = other_229;
    let _e10: AntiScalar = self_261;
    let _e13: Dipole = other_229;
    let _e16: AntiScalar = self_261;
    let _e19: Dipole = other_229;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_dipole_left_anti_contraction(self_262: AntiScalar, other_230: Dipole) -> Dipole {
    var self_263: AntiScalar;
    var other_231: Dipole;

    self_263 = self_262;
    other_231 = other_230;
    let _e4: AntiScalar = self_263;
    let _e7: Dipole = other_231;
    let _e10: AntiScalar = self_263;
    let _e13: Dipole = other_231;
    let _e16: AntiScalar = self_263;
    let _e19: Dipole = other_231;
    return Dipole((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_line_regressive_product(self_264: AntiScalar, other_232: Line) -> Line {
    var self_265: AntiScalar;
    var other_233: Line;

    self_265 = self_264;
    other_233 = other_232;
    let _e4: AntiScalar = self_265;
    let _e7: Line = other_233;
    let _e10: AntiScalar = self_265;
    let _e13: Line = other_233;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_geometric_anti_product(self_266: AntiScalar, other_234: Line) -> Line {
    var self_267: AntiScalar;
    var other_235: Line;

    self_267 = self_266;
    other_235 = other_234;
    let _e4: AntiScalar = self_267;
    let _e7: Line = other_235;
    let _e10: AntiScalar = self_267;
    let _e13: Line = other_235;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_inner_anti_product(self_268: AntiScalar, other_236: Line) -> Line {
    var self_269: AntiScalar;
    var other_237: Line;

    self_269 = self_268;
    other_237 = other_236;
    let _e4: AntiScalar = self_269;
    let _e7: Line = other_237;
    let _e10: AntiScalar = self_269;
    let _e13: Line = other_237;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_left_anti_contraction(self_270: AntiScalar, other_238: Line) -> Line {
    var self_271: AntiScalar;
    var other_239: Line;

    self_271 = self_270;
    other_239 = other_238;
    let _e4: AntiScalar = self_271;
    let _e7: Line = other_239;
    let _e10: AntiScalar = self_271;
    let _e13: Line = other_239;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_circle_regressive_product(self_272: AntiScalar, other_240: Circle) -> Circle {
    var self_273: AntiScalar;
    var other_241: Circle;

    self_273 = self_272;
    other_241 = other_240;
    let _e4: AntiScalar = self_273;
    let _e7: Circle = other_241;
    let _e10: AntiScalar = self_273;
    let _e13: Circle = other_241;
    let _e16: AntiScalar = self_273;
    let _e19: Circle = other_241;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_circle_geometric_anti_product(self_274: AntiScalar, other_242: Circle) -> Circle {
    var self_275: AntiScalar;
    var other_243: Circle;

    self_275 = self_274;
    other_243 = other_242;
    let _e4: AntiScalar = self_275;
    let _e7: Circle = other_243;
    let _e10: AntiScalar = self_275;
    let _e13: Circle = other_243;
    let _e16: AntiScalar = self_275;
    let _e19: Circle = other_243;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_circle_inner_anti_product(self_276: AntiScalar, other_244: Circle) -> Circle {
    var self_277: AntiScalar;
    var other_245: Circle;

    self_277 = self_276;
    other_245 = other_244;
    let _e4: AntiScalar = self_277;
    let _e7: Circle = other_245;
    let _e10: AntiScalar = self_277;
    let _e13: Circle = other_245;
    let _e16: AntiScalar = self_277;
    let _e19: Circle = other_245;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_circle_left_anti_contraction(self_278: AntiScalar, other_246: Circle) -> Circle {
    var self_279: AntiScalar;
    var other_247: Circle;

    self_279 = self_278;
    other_247 = other_246;
    let _e4: AntiScalar = self_279;
    let _e7: Circle = other_247;
    let _e10: AntiScalar = self_279;
    let _e13: Circle = other_247;
    let _e16: AntiScalar = self_279;
    let _e19: Circle = other_247;
    return Circle((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_));
}

fn anti_scalar_plane_regressive_product(self_280: AntiScalar, other_248: Plane) -> Plane {
    var self_281: AntiScalar;
    var other_249: Plane;

    self_281 = self_280;
    other_249 = other_248;
    let _e4: AntiScalar = self_281;
    let _e7: Plane = other_249;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_geometric_anti_product(self_282: AntiScalar, other_250: Plane) -> Plane {
    var self_283: AntiScalar;
    var other_251: Plane;

    self_283 = self_282;
    other_251 = other_250;
    let _e4: AntiScalar = self_283;
    let _e7: Plane = other_251;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_inner_anti_product(self_284: AntiScalar, other_252: Plane) -> Plane {
    var self_285: AntiScalar;
    var other_253: Plane;

    self_285 = self_284;
    other_253 = other_252;
    let _e4: AntiScalar = self_285;
    let _e7: Plane = other_253;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_left_anti_contraction(self_286: AntiScalar, other_254: Plane) -> Plane {
    var self_287: AntiScalar;
    var other_255: Plane;

    self_287 = self_286;
    other_255 = other_254;
    let _e4: AntiScalar = self_287;
    let _e7: Plane = other_255;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_sphere_regressive_product(self_288: AntiScalar, other_256: Sphere) -> Sphere {
    var self_289: AntiScalar;
    var other_257: Sphere;

    self_289 = self_288;
    other_257 = other_256;
    let _e4: AntiScalar = self_289;
    let _e7: Sphere = other_257;
    let _e10: AntiScalar = self_289;
    let _e13: Sphere = other_257;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_sphere_geometric_anti_product(self_290: AntiScalar, other_258: Sphere) -> Sphere {
    var self_291: AntiScalar;
    var other_259: Sphere;

    self_291 = self_290;
    other_259 = other_258;
    let _e4: AntiScalar = self_291;
    let _e7: Sphere = other_259;
    let _e10: AntiScalar = self_291;
    let _e13: Sphere = other_259;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_sphere_inner_anti_product(self_292: AntiScalar, other_260: Sphere) -> Sphere {
    var self_293: AntiScalar;
    var other_261: Sphere;

    self_293 = self_292;
    other_261 = other_260;
    let _e4: AntiScalar = self_293;
    let _e7: Sphere = other_261;
    let _e10: AntiScalar = self_293;
    let _e13: Sphere = other_261;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_sphere_left_anti_contraction(self_294: AntiScalar, other_262: Sphere) -> Sphere {
    var self_295: AntiScalar;
    var other_263: Sphere;

    self_295 = self_294;
    other_263 = other_262;
    let _e4: AntiScalar = self_295;
    let _e7: Sphere = other_263;
    let _e10: AntiScalar = self_295;
    let _e13: Sphere = other_263;
    return Sphere((vec2<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_add(self_296: AntiScalar, other_264: Motor) -> Motor {
    var self_297: AntiScalar;
    var other_265: Motor;

    self_297 = self_296;
    other_265 = other_264;
    let _e4: AntiScalar = self_297;
    let _e13: Motor = other_265;
    let _e16: Motor = other_265;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), _e16.g1_);
}

fn anti_scalar_motor_sub(self_298: AntiScalar, other_266: Motor) -> Motor {
    var self_299: AntiScalar;
    var other_267: Motor;

    self_299 = self_298;
    other_267 = other_266;
    let _e4: AntiScalar = self_299;
    let _e13: Motor = other_267;
    let _e18: Motor = other_267;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), (vec4<f32>(0.0) - _e18.g1_));
}

fn anti_scalar_motor_regressive_product(self_300: AntiScalar, other_268: Motor) -> Motor {
    var self_301: AntiScalar;
    var other_269: Motor;

    self_301 = self_300;
    other_269 = other_268;
    let _e4: AntiScalar = self_301;
    let _e7: Motor = other_269;
    let _e10: AntiScalar = self_301;
    let _e13: Motor = other_269;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_geometric_anti_product(self_302: AntiScalar, other_270: Motor) -> Motor {
    var self_303: AntiScalar;
    var other_271: Motor;

    self_303 = self_302;
    other_271 = other_270;
    let _e4: AntiScalar = self_303;
    let _e7: Motor = other_271;
    let _e10: AntiScalar = self_303;
    let _e13: Motor = other_271;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_inner_anti_product(self_304: AntiScalar, other_272: Motor) -> Motor {
    var self_305: AntiScalar;
    var other_273: Motor;

    self_305 = self_304;
    other_273 = other_272;
    let _e4: AntiScalar = self_305;
    let _e7: Motor = other_273;
    let _e10: AntiScalar = self_305;
    let _e13: Motor = other_273;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_left_anti_contraction(self_306: AntiScalar, other_274: Motor) -> Motor {
    var self_307: AntiScalar;
    var other_275: Motor;

    self_307 = self_306;
    other_275 = other_274;
    let _e4: AntiScalar = self_307;
    let _e7: Motor = other_275;
    let _e10: AntiScalar = self_307;
    let _e13: Motor = other_275;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_right_anti_contraction(self_308: AntiScalar, other_276: Motor) -> AntiScalar {
    var self_309: AntiScalar;
    var other_277: Motor;

    self_309 = self_308;
    other_277 = other_276;
    let _e4: AntiScalar = self_309;
    let _e6: Motor = other_277;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_motor_anti_scalar_product(self_310: AntiScalar, other_278: Motor) -> AntiScalar {
    var self_311: AntiScalar;
    var other_279: Motor;

    self_311 = self_310;
    other_279 = other_278;
    let _e4: AntiScalar = self_311;
    let _e6: Motor = other_279;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_add(self_312: AntiScalar, other_280: Rotor) -> Rotor {
    var self_313: AntiScalar;
    var other_281: Rotor;

    self_313 = self_312;
    other_281 = other_280;
    let _e4: AntiScalar = self_313;
    let _e13: Rotor = other_281;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_rotor_sub(self_314: AntiScalar, other_282: Rotor) -> Rotor {
    var self_315: AntiScalar;
    var other_283: Rotor;

    self_315 = self_314;
    other_283 = other_282;
    let _e4: AntiScalar = self_315;
    let _e13: Rotor = other_283;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_rotor_regressive_product(self_316: AntiScalar, other_284: Rotor) -> Rotor {
    var self_317: AntiScalar;
    var other_285: Rotor;

    self_317 = self_316;
    other_285 = other_284;
    let _e4: AntiScalar = self_317;
    let _e7: Rotor = other_285;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_geometric_anti_product(self_318: AntiScalar, other_286: Rotor) -> Rotor {
    var self_319: AntiScalar;
    var other_287: Rotor;

    self_319 = self_318;
    other_287 = other_286;
    let _e4: AntiScalar = self_319;
    let _e7: Rotor = other_287;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_inner_anti_product(self_320: AntiScalar, other_288: Rotor) -> Rotor {
    var self_321: AntiScalar;
    var other_289: Rotor;

    self_321 = self_320;
    other_289 = other_288;
    let _e4: AntiScalar = self_321;
    let _e7: Rotor = other_289;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_left_anti_contraction(self_322: AntiScalar, other_290: Rotor) -> Rotor {
    var self_323: AntiScalar;
    var other_291: Rotor;

    self_323 = self_322;
    other_291 = other_290;
    let _e4: AntiScalar = self_323;
    let _e7: Rotor = other_291;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_right_anti_contraction(self_324: AntiScalar, other_292: Rotor) -> AntiScalar {
    var self_325: AntiScalar;
    var other_293: Rotor;

    self_325 = self_324;
    other_293 = other_292;
    let _e4: AntiScalar = self_325;
    let _e6: Rotor = other_293;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_anti_scalar_product(self_326: AntiScalar, other_294: Rotor) -> AntiScalar {
    var self_327: AntiScalar;
    var other_295: Rotor;

    self_327 = self_326;
    other_295 = other_294;
    let _e4: AntiScalar = self_327;
    let _e6: Rotor = other_295;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_add(self_328: AntiScalar, other_296: Translator) -> Translator {
    var self_329: AntiScalar;
    var other_297: Translator;

    self_329 = self_328;
    other_297 = other_296;
    let _e4: AntiScalar = self_329;
    let _e13: Translator = other_297;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_translator_sub(self_330: AntiScalar, other_298: Translator) -> Translator {
    var self_331: AntiScalar;
    var other_299: Translator;

    self_331 = self_330;
    other_299 = other_298;
    let _e4: AntiScalar = self_331;
    let _e13: Translator = other_299;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_translator_regressive_product(self_332: AntiScalar, other_300: Translator) -> Translator {
    var self_333: AntiScalar;
    var other_301: Translator;

    self_333 = self_332;
    other_301 = other_300;
    let _e4: AntiScalar = self_333;
    let _e7: Translator = other_301;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_geometric_anti_product(self_334: AntiScalar, other_302: Translator) -> Translator {
    var self_335: AntiScalar;
    var other_303: Translator;

    self_335 = self_334;
    other_303 = other_302;
    let _e4: AntiScalar = self_335;
    let _e7: Translator = other_303;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_inner_anti_product(self_336: AntiScalar, other_304: Translator) -> Translator {
    var self_337: AntiScalar;
    var other_305: Translator;

    self_337 = self_336;
    other_305 = other_304;
    let _e4: AntiScalar = self_337;
    let _e7: Translator = other_305;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_left_anti_contraction(self_338: AntiScalar, other_306: Translator) -> Translator {
    var self_339: AntiScalar;
    var other_307: Translator;

    self_339 = self_338;
    other_307 = other_306;
    let _e4: AntiScalar = self_339;
    let _e7: Translator = other_307;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_right_anti_contraction(self_340: AntiScalar, other_308: Translator) -> AntiScalar {
    var self_341: AntiScalar;
    var other_309: Translator;

    self_341 = self_340;
    other_309 = other_308;
    let _e4: AntiScalar = self_341;
    let _e6: Translator = other_309;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_anti_scalar_product(self_342: AntiScalar, other_310: Translator) -> AntiScalar {
    var self_343: AntiScalar;
    var other_311: Translator;

    self_343 = self_342;
    other_311 = other_310;
    let _e4: AntiScalar = self_343;
    let _e6: Translator = other_311;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_flector_regressive_product(self_344: AntiScalar, other_312: Flector) -> Flector {
    var self_345: AntiScalar;
    var other_313: Flector;

    self_345 = self_344;
    other_313 = other_312;
    let _e4: AntiScalar = self_345;
    let _e7: Flector = other_313;
    let _e10: AntiScalar = self_345;
    let _e13: Flector = other_313;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_geometric_anti_product(self_346: AntiScalar, other_314: Flector) -> Flector {
    var self_347: AntiScalar;
    var other_315: Flector;

    self_347 = self_346;
    other_315 = other_314;
    let _e4: AntiScalar = self_347;
    let _e7: Flector = other_315;
    let _e10: AntiScalar = self_347;
    let _e13: Flector = other_315;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_inner_anti_product(self_348: AntiScalar, other_316: Flector) -> Flector {
    var self_349: AntiScalar;
    var other_317: Flector;

    self_349 = self_348;
    other_317 = other_316;
    let _e4: AntiScalar = self_349;
    let _e7: Flector = other_317;
    let _e10: AntiScalar = self_349;
    let _e13: Flector = other_317;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_left_anti_contraction(self_350: AntiScalar, other_318: Flector) -> Flector {
    var self_351: AntiScalar;
    var other_319: Flector;

    self_351 = self_350;
    other_319 = other_318;
    let _e4: AntiScalar = self_351;
    let _e7: Flector = other_319;
    let _e10: AntiScalar = self_351;
    let _e13: Flector = other_319;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_dilation_add(self_352: AntiScalar, other_320: Dilation) -> Dilation {
    var self_353: AntiScalar;
    var other_321: Dilation;

    self_353 = self_352;
    other_321 = other_320;
    let _e4: Dilation = other_321;
    let _e6: AntiScalar = self_353;
    let _e13: Dilation = other_321;
    return Dilation(_e4.g0_, ((vec2<f32>(_e6.g0_) * vec2<f32>(0.0, 1.0)) + _e13.g1_));
}

fn anti_scalar_dilation_sub(self_354: AntiScalar, other_322: Dilation) -> Dilation {
    var self_355: AntiScalar;
    var other_323: Dilation;

    self_355 = self_354;
    other_323 = other_322;
    let _e6: Dilation = other_323;
    let _e9: AntiScalar = self_355;
    let _e16: Dilation = other_323;
    return Dilation((vec3<f32>(0.0) - _e6.g0_), ((vec2<f32>(_e9.g0_) * vec2<f32>(0.0, 1.0)) - _e16.g1_));
}

fn anti_scalar_dilation_regressive_product(self_356: AntiScalar, other_324: Dilation) -> Dilation {
    var self_357: AntiScalar;
    var other_325: Dilation;

    self_357 = self_356;
    other_325 = other_324;
    let _e4: AntiScalar = self_357;
    let _e7: Dilation = other_325;
    let _e10: AntiScalar = self_357;
    let _e13: Dilation = other_325;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_dilation_geometric_anti_product(self_358: AntiScalar, other_326: Dilation) -> Dilation {
    var self_359: AntiScalar;
    var other_327: Dilation;

    self_359 = self_358;
    other_327 = other_326;
    let _e4: AntiScalar = self_359;
    let _e7: Dilation = other_327;
    let _e10: AntiScalar = self_359;
    let _e13: Dilation = other_327;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_dilation_inner_anti_product(self_360: AntiScalar, other_328: Dilation) -> Dilation {
    var self_361: AntiScalar;
    var other_329: Dilation;

    self_361 = self_360;
    other_329 = other_328;
    let _e4: AntiScalar = self_361;
    let _e7: Dilation = other_329;
    let _e10: AntiScalar = self_361;
    let _e13: Dilation = other_329;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_dilation_left_anti_contraction(self_362: AntiScalar, other_330: Dilation) -> Dilation {
    var self_363: AntiScalar;
    var other_331: Dilation;

    self_363 = self_362;
    other_331 = other_330;
    let _e4: AntiScalar = self_363;
    let _e7: Dilation = other_331;
    let _e10: AntiScalar = self_363;
    let _e13: Dilation = other_331;
    return Dilation((vec3<f32>(_e4.g0_) * _e7.g0_), (vec2<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_dilation_right_anti_contraction(self_364: AntiScalar, other_332: Dilation) -> AntiScalar {
    var self_365: AntiScalar;
    var other_333: Dilation;

    self_365 = self_364;
    other_333 = other_332;
    let _e4: AntiScalar = self_365;
    let _e6: Dilation = other_333;
    return AntiScalar((_e4.g0_ * _e6.g1_.y));
}

fn anti_scalar_dilation_anti_scalar_product(self_366: AntiScalar, other_334: Dilation) -> AntiScalar {
    var self_367: AntiScalar;
    var other_335: Dilation;

    self_367 = self_366;
    other_335 = other_334;
    let _e4: AntiScalar = self_367;
    let _e6: Dilation = other_335;
    return AntiScalar((_e4.g0_ * _e6.g1_.y));
}

fn anti_scalar_multi_vector_add(self_368: AntiScalar, other_336: MultiVector) -> MultiVector {
    var self_369: AntiScalar;
    var other_337: MultiVector;

    self_369 = self_368;
    other_337 = other_336;
    let _e4: AntiScalar = self_369;
    let _e12: MultiVector = other_337;
    let _e15: MultiVector = other_337;
    let _e17: MultiVector = other_337;
    let _e19: MultiVector = other_337;
    let _e21: MultiVector = other_337;
    let _e23: MultiVector = other_337;
    let _e25: MultiVector = other_337;
    let _e27: MultiVector = other_337;
    let _e29: MultiVector = other_337;
    let _e31: MultiVector = other_337;
    return MultiVector(((vec3<f32>(_e4.g0_) * vec3<f32>(0.0, 0.0, 1.0)) + _e12.g0_), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn anti_scalar_multi_vector_sub(self_370: AntiScalar, other_338: MultiVector) -> MultiVector {
    var self_371: AntiScalar;
    var other_339: MultiVector;

    self_371 = self_370;
    other_339 = other_338;
    let _e4: AntiScalar = self_371;
    let _e12: MultiVector = other_339;
    let _e17: MultiVector = other_339;
    let _e22: MultiVector = other_339;
    let _e27: MultiVector = other_339;
    let _e32: MultiVector = other_339;
    let _e37: MultiVector = other_339;
    let _e42: MultiVector = other_339;
    let _e47: MultiVector = other_339;
    let _e52: MultiVector = other_339;
    let _e57: MultiVector = other_339;
    return MultiVector(((vec3<f32>(_e4.g0_) * vec3<f32>(0.0, 0.0, 1.0)) - _e12.g0_), (vec3<f32>(0.0) - _e17.g1_), (vec2<f32>(0.0) - _e22.g2_), (vec4<f32>(0.0) - _e27.g3_), (vec3<f32>(0.0) - _e32.g4_), (vec3<f32>(0.0) - _e37.g5_), (vec3<f32>(0.0) - _e42.g6_), (vec3<f32>(0.0) - _e47.g7_), (vec4<f32>(0.0) - _e52.g8_), (vec4<f32>(0.0) - _e57.g9_));
}

fn anti_scalar_multi_vector_regressive_product(self_372: AntiScalar, other_340: MultiVector) -> MultiVector {
    var self_373: AntiScalar;
    var other_341: MultiVector;

    self_373 = self_372;
    other_341 = other_340;
    let _e4: AntiScalar = self_373;
    let _e7: MultiVector = other_341;
    let _e10: AntiScalar = self_373;
    let _e13: MultiVector = other_341;
    let _e16: AntiScalar = self_373;
    let _e19: MultiVector = other_341;
    let _e22: AntiScalar = self_373;
    let _e25: MultiVector = other_341;
    let _e28: AntiScalar = self_373;
    let _e31: MultiVector = other_341;
    let _e34: AntiScalar = self_373;
    let _e37: MultiVector = other_341;
    let _e40: AntiScalar = self_373;
    let _e43: MultiVector = other_341;
    let _e46: AntiScalar = self_373;
    let _e49: MultiVector = other_341;
    let _e52: AntiScalar = self_373;
    let _e55: MultiVector = other_341;
    let _e58: AntiScalar = self_373;
    let _e61: MultiVector = other_341;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn anti_scalar_multi_vector_outer_product(self_374: AntiScalar, other_342: MultiVector) -> AntiScalar {
    var self_375: AntiScalar;
    var other_343: MultiVector;

    self_375 = self_374;
    other_343 = other_342;
    let _e4: AntiScalar = self_375;
    let _e6: MultiVector = other_343;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_geometric_anti_product(self_376: AntiScalar, other_344: MultiVector) -> MultiVector {
    var self_377: AntiScalar;
    var other_345: MultiVector;

    self_377 = self_376;
    other_345 = other_344;
    let _e4: AntiScalar = self_377;
    let _e7: MultiVector = other_345;
    let _e10: AntiScalar = self_377;
    let _e13: MultiVector = other_345;
    let _e16: AntiScalar = self_377;
    let _e19: MultiVector = other_345;
    let _e22: AntiScalar = self_377;
    let _e25: MultiVector = other_345;
    let _e28: AntiScalar = self_377;
    let _e31: MultiVector = other_345;
    let _e34: AntiScalar = self_377;
    let _e37: MultiVector = other_345;
    let _e40: AntiScalar = self_377;
    let _e43: MultiVector = other_345;
    let _e46: AntiScalar = self_377;
    let _e49: MultiVector = other_345;
    let _e52: AntiScalar = self_377;
    let _e55: MultiVector = other_345;
    let _e58: AntiScalar = self_377;
    let _e61: MultiVector = other_345;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn anti_scalar_multi_vector_inner_anti_product(self_378: AntiScalar, other_346: MultiVector) -> MultiVector {
    var self_379: AntiScalar;
    var other_347: MultiVector;

    self_379 = self_378;
    other_347 = other_346;
    let _e4: AntiScalar = self_379;
    let _e7: MultiVector = other_347;
    let _e10: AntiScalar = self_379;
    let _e13: MultiVector = other_347;
    let _e16: AntiScalar = self_379;
    let _e19: MultiVector = other_347;
    let _e22: AntiScalar = self_379;
    let _e25: MultiVector = other_347;
    let _e28: AntiScalar = self_379;
    let _e31: MultiVector = other_347;
    let _e34: AntiScalar = self_379;
    let _e37: MultiVector = other_347;
    let _e40: AntiScalar = self_379;
    let _e43: MultiVector = other_347;
    let _e46: AntiScalar = self_379;
    let _e49: MultiVector = other_347;
    let _e52: AntiScalar = self_379;
    let _e55: MultiVector = other_347;
    let _e58: AntiScalar = self_379;
    let _e61: MultiVector = other_347;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn anti_scalar_multi_vector_left_anti_contraction(self_380: AntiScalar, other_348: MultiVector) -> MultiVector {
    var self_381: AntiScalar;
    var other_349: MultiVector;

    self_381 = self_380;
    other_349 = other_348;
    let _e4: AntiScalar = self_381;
    let _e7: MultiVector = other_349;
    let _e10: AntiScalar = self_381;
    let _e13: MultiVector = other_349;
    let _e16: AntiScalar = self_381;
    let _e19: MultiVector = other_349;
    let _e22: AntiScalar = self_381;
    let _e25: MultiVector = other_349;
    let _e28: AntiScalar = self_381;
    let _e31: MultiVector = other_349;
    let _e34: AntiScalar = self_381;
    let _e37: MultiVector = other_349;
    let _e40: AntiScalar = self_381;
    let _e43: MultiVector = other_349;
    let _e46: AntiScalar = self_381;
    let _e49: MultiVector = other_349;
    let _e52: AntiScalar = self_381;
    let _e55: MultiVector = other_349;
    let _e58: AntiScalar = self_381;
    let _e61: MultiVector = other_349;
    return MultiVector((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_), (vec2<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_), (vec3<f32>(_e28.g0_) * _e31.g4_), (vec3<f32>(_e34.g0_) * _e37.g5_), (vec3<f32>(_e40.g0_) * _e43.g6_), (vec3<f32>(_e46.g0_) * _e49.g7_), (vec4<f32>(_e52.g0_) * _e55.g8_), (vec4<f32>(_e58.g0_) * _e61.g9_));
}

fn anti_scalar_multi_vector_right_anti_contraction(self_382: AntiScalar, other_350: MultiVector) -> AntiScalar {
    var self_383: AntiScalar;
    var other_351: MultiVector;

    self_383 = self_382;
    other_351 = other_350;
    let _e4: AntiScalar = self_383;
    let _e6: MultiVector = other_351;
    return AntiScalar((_e4.g0_ * _e6.g0_.z));
}

fn anti_scalar_multi_vector_anti_scalar_product(self_384: AntiScalar, other_352: MultiVector) -> AntiScalar {
    var self_385: AntiScalar;
    var other_353: MultiVector;

    self_385 = self_384;
    other_353 = other_352;
    let _e4: AntiScalar = self_385;
    let _e6: MultiVector = other_353;
    return AntiScalar((_e4.g0_ * _e6.g0_.z));
}

fn anti_scalar_scale(self_386: AntiScalar, other_354: f32) -> AntiScalar {
    var self_387: AntiScalar;
    var other_355: f32;

    self_387 = self_386;
    other_355 = other_354;
    let _e4: AntiScalar = self_387;
    let _e5: f32 = other_355;
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn radial_point_zero() -> RadialPoint {
    return RadialPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn radial_point_one() -> RadialPoint {
    return RadialPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn radial_point_neg(self_388: RadialPoint) -> RadialPoint {
    var self_389: RadialPoint;

    self_389 = self_388;
    let _e2: RadialPoint = self_389;
    let _e8: RadialPoint = self_389;
    return RadialPoint((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn radial_point_automorphism(self_390: RadialPoint) -> RadialPoint {
    var self_391: RadialPoint;

    self_391 = self_390;
    let _e2: RadialPoint = self_391;
    let _e8: RadialPoint = self_391;
    return RadialPoint((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn radial_point_reversal(self_392: RadialPoint) -> RadialPoint {
    var self_393: RadialPoint;

    self_393 = self_392;
    let _e2: RadialPoint = self_393;
    let _e4: RadialPoint = self_393;
    return RadialPoint(_e2.g0_, _e4.g1_);
}

fn radial_point_conjugation(self_394: RadialPoint) -> RadialPoint {
    var self_395: RadialPoint;

    self_395 = self_394;
    let _e2: RadialPoint = self_395;
    let _e8: RadialPoint = self_395;
    return RadialPoint((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn radial_point_dual(self_396: RadialPoint) -> Sphere {
    var self_397: RadialPoint;

    self_397 = self_396;
    let _e2: RadialPoint = self_397;
    let _e5: RadialPoint = self_397;
    return Sphere(_e2.g1_.yx, _e5.g0_);
}

fn radial_point_anti_reversal(self_398: RadialPoint) -> RadialPoint {
    var self_399: RadialPoint;

    self_399 = self_398;
    let _e2: RadialPoint = self_399;
    let _e8: RadialPoint = self_399;
    return RadialPoint((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn radial_point_scalar_geometric_product(self_400: RadialPoint, other_356: Scalar) -> RadialPoint {
    var self_401: RadialPoint;
    var other_357: Scalar;

    self_401 = self_400;
    other_357 = other_356;
    let _e4: RadialPoint = self_401;
    let _e6: Scalar = other_357;
    let _e10: RadialPoint = self_401;
    let _e12: Scalar = other_357;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_scalar_outer_product(self_402: RadialPoint, other_358: Scalar) -> RadialPoint {
    var self_403: RadialPoint;
    var other_359: Scalar;

    self_403 = self_402;
    other_359 = other_358;
    let _e4: RadialPoint = self_403;
    let _e6: Scalar = other_359;
    let _e10: RadialPoint = self_403;
    let _e12: Scalar = other_359;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_scalar_inner_product(self_404: RadialPoint, other_360: Scalar) -> RadialPoint {
    var self_405: RadialPoint;
    var other_361: Scalar;

    self_405 = self_404;
    other_361 = other_360;
    let _e4: RadialPoint = self_405;
    let _e6: Scalar = other_361;
    let _e10: RadialPoint = self_405;
    let _e12: Scalar = other_361;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_scalar_right_contraction(self_406: RadialPoint, other_362: Scalar) -> RadialPoint {
    var self_407: RadialPoint;
    var other_363: Scalar;

    self_407 = self_406;
    other_363 = other_362;
    let _e4: RadialPoint = self_407;
    let _e6: Scalar = other_363;
    let _e10: RadialPoint = self_407;
    let _e12: Scalar = other_363;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_anti_scalar_regressive_product(self_408: RadialPoint, other_364: AntiScalar) -> RadialPoint {
    var self_409: RadialPoint;
    var other_365: AntiScalar;

    self_409 = self_408;
    other_365 = other_364;
    let _e4: RadialPoint = self_409;
    let _e6: AntiScalar = other_365;
    let _e10: RadialPoint = self_409;
    let _e12: AntiScalar = other_365;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_anti_scalar_geometric_anti_product(self_410: RadialPoint, other_366: AntiScalar) -> RadialPoint {
    var self_411: RadialPoint;
    var other_367: AntiScalar;

    self_411 = self_410;
    other_367 = other_366;
    let _e4: RadialPoint = self_411;
    let _e6: AntiScalar = other_367;
    let _e10: RadialPoint = self_411;
    let _e12: AntiScalar = other_367;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_anti_scalar_inner_anti_product(self_412: RadialPoint, other_368: AntiScalar) -> RadialPoint {
    var self_413: RadialPoint;
    var other_369: AntiScalar;

    self_413 = self_412;
    other_369 = other_368;
    let _e4: RadialPoint = self_413;
    let _e6: AntiScalar = other_369;
    let _e10: RadialPoint = self_413;
    let _e12: AntiScalar = other_369;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_anti_scalar_right_anti_contraction(self_414: RadialPoint, other_370: AntiScalar) -> RadialPoint {
    var self_415: RadialPoint;
    var other_371: AntiScalar;

    self_415 = self_414;
    other_371 = other_370;
    let _e4: RadialPoint = self_415;
    let _e6: AntiScalar = other_371;
    let _e10: RadialPoint = self_415;
    let _e12: AntiScalar = other_371;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn radial_point_radial_point_add(self_416: RadialPoint, other_372: RadialPoint) -> RadialPoint {
    var self_417: RadialPoint;
    var other_373: RadialPoint;

    self_417 = self_416;
    other_373 = other_372;
    let _e4: RadialPoint = self_417;
    let _e6: RadialPoint = other_373;
    let _e9: RadialPoint = self_417;
    let _e11: RadialPoint = other_373;
    return RadialPoint((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn radial_point_radial_point_sub(self_418: RadialPoint, other_374: RadialPoint) -> RadialPoint {
    var self_419: RadialPoint;
    var other_375: RadialPoint;

    self_419 = self_418;
    other_375 = other_374;
    let _e4: RadialPoint = self_419;
    let _e6: RadialPoint = other_375;
    let _e9: RadialPoint = self_419;
    let _e11: RadialPoint = other_375;
    return RadialPoint((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn radial_point_radial_point_mul(self_420: RadialPoint, other_376: RadialPoint) -> RadialPoint {
    var self_421: RadialPoint;
    var other_377: RadialPoint;

    self_421 = self_420;
    other_377 = other_376;
    let _e4: RadialPoint = self_421;
    let _e6: RadialPoint = other_377;
    let _e9: RadialPoint = self_421;
    let _e11: RadialPoint = other_377;
    return RadialPoint((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn radial_point_radial_point_div(self_422: RadialPoint, other_378: RadialPoint) -> RadialPoint {
    var self_423: RadialPoint;
    var other_379: RadialPoint;

    self_423 = self_422;
    other_379 = other_378;
    let _e4: RadialPoint = self_423;
    let _e7: RadialPoint = self_423;
    let _e10: RadialPoint = self_423;
    let _e19: RadialPoint = other_379;
    let _e22: RadialPoint = other_379;
    let _e25: RadialPoint = other_379;
    let _e35: RadialPoint = self_423;
    let _e38: RadialPoint = self_423;
    let _e46: RadialPoint = other_379;
    let _e49: RadialPoint = other_379;
    return RadialPoint((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec2<f32>(_e35.g1_.x, _e38.g1_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e46.g1_.x, _e49.g1_.y)) * vec2<f32>(1.0, 1.0)));
}

fn radial_point_radial_point_outer_product(self_424: RadialPoint, other_380: RadialPoint) -> Dipole {
    var self_425: RadialPoint;
    var other_381: RadialPoint;

    self_425 = self_424;
    other_381 = other_380;
    let _e4: RadialPoint = self_425;
    let _e8: RadialPoint = other_381;
    let _e11: RadialPoint = self_425;
    let _e13: RadialPoint = other_381;
    let _e23: RadialPoint = self_425;
    let _e27: RadialPoint = other_381;
    let _e37: RadialPoint = self_425;
    let _e41: RadialPoint = other_381;
    let _e52: RadialPoint = self_425;
    let _e56: RadialPoint = other_381;
    let _e67: RadialPoint = self_425;
    let _e71: RadialPoint = other_381;
    let _e82: RadialPoint = self_425;
    let _e86: RadialPoint = other_381;
    let _e89: RadialPoint = other_381;
    let _e92: RadialPoint = other_381;
    let _e95: RadialPoint = other_381;
    let _e101: RadialPoint = self_425;
    let _e104: RadialPoint = self_425;
    let _e107: RadialPoint = self_425;
    let _e110: RadialPoint = self_425;
    let _e114: RadialPoint = other_381;
    let _e117: RadialPoint = other_381;
    let _e120: RadialPoint = other_381;
    let _e123: RadialPoint = other_381;
    return Dipole(((vec3<f32>(_e4.g1_.x) * _e8.g0_) + ((_e11.g0_ * vec3<f32>(_e13.g1_.x)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e23.g0_.y) * _e27.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e37.g0_.z) * _e41.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e52.g0_.x) * _e56.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((vec4<f32>(_e67.g1_.x) * vec4<f32>(_e71.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e82.g1_.y) * vec4<f32>(_e86.g0_.x, _e89.g0_.y, _e92.g0_.z, _e95.g1_.x))) + ((vec4<f32>(_e101.g0_.x, _e104.g0_.y, _e107.g0_.z, _e110.g0_.x) * vec4<f32>(_e114.g1_.y, _e117.g1_.y, _e120.g1_.y, _e123.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn radial_point_radial_point_inner_product(self_426: RadialPoint, other_382: RadialPoint) -> Scalar {
    var self_427: RadialPoint;
    var other_383: RadialPoint;

    self_427 = self_426;
    other_383 = other_382;
    let _e4: RadialPoint = self_427;
    let _e7: RadialPoint = other_383;
    let _e11: RadialPoint = self_427;
    let _e14: RadialPoint = other_383;
    let _e19: RadialPoint = self_427;
    let _e22: RadialPoint = other_383;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn radial_point_radial_point_left_contraction(self_428: RadialPoint, other_384: RadialPoint) -> Scalar {
    var self_429: RadialPoint;
    var other_385: RadialPoint;

    self_429 = self_428;
    other_385 = other_384;
    let _e4: RadialPoint = self_429;
    let _e7: RadialPoint = other_385;
    let _e11: RadialPoint = self_429;
    let _e14: RadialPoint = other_385;
    let _e19: RadialPoint = self_429;
    let _e22: RadialPoint = other_385;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn radial_point_radial_point_right_contraction(self_430: RadialPoint, other_386: RadialPoint) -> Scalar {
    var self_431: RadialPoint;
    var other_387: RadialPoint;

    self_431 = self_430;
    other_387 = other_386;
    let _e4: RadialPoint = self_431;
    let _e7: RadialPoint = other_387;
    let _e11: RadialPoint = self_431;
    let _e14: RadialPoint = other_387;
    let _e19: RadialPoint = self_431;
    let _e22: RadialPoint = other_387;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn radial_point_radial_point_scalar_product(self_432: RadialPoint, other_388: RadialPoint) -> Scalar {
    var self_433: RadialPoint;
    var other_389: RadialPoint;

    self_433 = self_432;
    other_389 = other_388;
    let _e4: RadialPoint = self_433;
    let _e7: RadialPoint = other_389;
    let _e11: RadialPoint = self_433;
    let _e14: RadialPoint = other_389;
    let _e19: RadialPoint = self_433;
    let _e22: RadialPoint = other_389;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn radial_point_flat_point_outer_product(self_434: RadialPoint, other_390: FlatPoint) -> Line {
    var self_435: RadialPoint;
    var other_391: FlatPoint;

    self_435 = self_434;
    other_391 = other_390;
    let _e4: RadialPoint = self_435;
    let _e8: FlatPoint = other_391;
    let _e11: FlatPoint = other_391;
    let _e14: FlatPoint = other_391;
    let _e19: RadialPoint = self_435;
    let _e21: FlatPoint = other_391;
    let _e31: RadialPoint = self_435;
    let _e35: FlatPoint = other_391;
    let _e38: FlatPoint = other_391;
    let _e41: FlatPoint = other_391;
    let _e52: RadialPoint = self_435;
    let _e56: FlatPoint = other_391;
    let _e59: FlatPoint = other_391;
    let _e62: FlatPoint = other_391;
    let _e74: RadialPoint = self_435;
    let _e78: FlatPoint = other_391;
    let _e81: FlatPoint = other_391;
    let _e84: FlatPoint = other_391;
    return Line(((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((_e19.g0_ * vec3<f32>(_e21.g0_.w)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e31.g0_.y) * vec3<f32>(_e35.g0_.z, _e38.g0_.z, _e41.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e52.g0_.z) * vec3<f32>(_e56.g0_.y, _e59.g0_.x, _e62.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e74.g0_.x) * vec3<f32>(_e78.g0_.x, _e81.g0_.z, _e84.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn radial_point_dipole_outer_product(self_436: RadialPoint, other_392: Dipole) -> Circle {
    var self_437: RadialPoint;
    var other_393: Dipole;

    self_437 = self_436;
    other_393 = other_392;
    let _e4: RadialPoint = self_437;
    let _e8: Dipole = other_393;
    let _e11: Dipole = other_393;
    let _e14: Dipole = other_393;
    let _e17: Dipole = other_393;
    let _e30: RadialPoint = self_437;
    let _e34: Dipole = other_393;
    let _e37: Dipole = other_393;
    let _e40: Dipole = other_393;
    let _e43: Dipole = other_393;
    let _e57: RadialPoint = self_437;
    let _e61: Dipole = other_393;
    let _e64: Dipole = other_393;
    let _e67: Dipole = other_393;
    let _e70: Dipole = other_393;
    let _e82: RadialPoint = self_437;
    let _e86: Dipole = other_393;
    let _e89: Dipole = other_393;
    let _e92: Dipole = other_393;
    let _e95: Dipole = other_393;
    let _e109: RadialPoint = self_437;
    let _e113: Dipole = other_393;
    let _e116: Dipole = other_393;
    let _e119: Dipole = other_393;
    let _e124: RadialPoint = self_437;
    let _e128: Dipole = other_393;
    let _e132: RadialPoint = self_437;
    let _e134: Dipole = other_393;
    let _e144: RadialPoint = self_437;
    let _e148: Dipole = other_393;
    let _e151: Dipole = other_393;
    let _e154: Dipole = other_393;
    let _e165: RadialPoint = self_437;
    let _e169: Dipole = other_393;
    let _e172: Dipole = other_393;
    let _e175: Dipole = other_393;
    let _e187: RadialPoint = self_437;
    let _e191: Dipole = other_393;
    let _e195: RadialPoint = self_437;
    let _e199: Dipole = other_393;
    let _e202: Dipole = other_393;
    let _e205: Dipole = other_393;
    return Circle((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((vec3<f32>(_e109.g1_.x) * vec3<f32>(_e113.g2_.x, _e116.g2_.y, _e119.g2_.z)) + (vec3<f32>(_e124.g1_.y) * _e128.g0_)) + ((_e132.g0_ * vec3<f32>(_e134.g2_.w)) * vec3<f32>(-(1.0)))), (((((vec3<f32>(_e144.g0_.y) * vec3<f32>(_e148.g2_.z, _e151.g2_.z, _e154.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e165.g0_.z) * vec3<f32>(_e169.g2_.y, _e172.g2_.x, _e175.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e187.g1_.y) * _e191.g1_)) + ((vec3<f32>(_e195.g0_.x) * vec3<f32>(_e199.g2_.x, _e202.g2_.z, _e205.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn radial_point_dipole_inner_product(self_438: RadialPoint, other_394: Dipole) -> RadialPoint {
    var self_439: RadialPoint;
    var other_395: Dipole;

    self_439 = self_438;
    other_395 = other_394;
    let _e4: RadialPoint = self_439;
    let _e8: Dipole = other_395;
    let _e18: RadialPoint = self_439;
    let _e22: Dipole = other_395;
    let _e33: RadialPoint = self_439;
    let _e37: Dipole = other_395;
    let _e48: RadialPoint = self_439;
    let _e52: Dipole = other_395;
    let _e55: Dipole = other_395;
    let _e65: RadialPoint = self_439;
    let _e69: Dipole = other_395;
    let _e72: Dipole = other_395;
    let _e83: RadialPoint = self_439;
    let _e87: Dipole = other_395;
    let _e90: Dipole = other_395;
    return RadialPoint(((((vec3<f32>(_e4.g0_.y) * _e8.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec2<f32>(_e48.g0_.x) * vec2<f32>(_e52.g0_.x, _e55.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e65.g0_.y) * vec2<f32>(_e69.g0_.y, _e72.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e83.g0_.z) * vec2<f32>(_e87.g0_.z, _e90.g2_.z)) * vec2<f32>(-(1.0), 1.0))));
}

fn radial_point_dipole_left_contraction(self_440: RadialPoint, other_396: Dipole) -> RadialPoint {
    var self_441: RadialPoint;
    var other_397: Dipole;

    self_441 = self_440;
    other_397 = other_396;
    let _e4: RadialPoint = self_441;
    let _e8: Dipole = other_397;
    let _e18: RadialPoint = self_441;
    let _e22: Dipole = other_397;
    let _e33: RadialPoint = self_441;
    let _e37: Dipole = other_397;
    let _e48: RadialPoint = self_441;
    let _e52: Dipole = other_397;
    let _e55: Dipole = other_397;
    let _e65: RadialPoint = self_441;
    let _e69: Dipole = other_397;
    let _e72: Dipole = other_397;
    let _e83: RadialPoint = self_441;
    let _e87: Dipole = other_397;
    let _e90: Dipole = other_397;
    return RadialPoint(((((vec3<f32>(_e4.g0_.y) * _e8.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec2<f32>(_e48.g0_.x) * vec2<f32>(_e52.g0_.x, _e55.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e65.g0_.y) * vec2<f32>(_e69.g0_.y, _e72.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e83.g0_.z) * vec2<f32>(_e87.g0_.z, _e90.g2_.z)) * vec2<f32>(-(1.0), 1.0))));
}

fn radial_point_line_geometric_product(self_442: RadialPoint, other_398: Line) -> Flector {
    var self_443: RadialPoint;
    var other_399: Line;

    self_443 = self_442;
    other_399 = other_398;
    let _e4: RadialPoint = self_443;
    let _e8: Line = other_399;
    let _e11: Line = other_399;
    let _e14: Line = other_399;
    let _e17: Line = other_399;
    let _e30: RadialPoint = self_443;
    let _e34: Line = other_399;
    let _e37: Line = other_399;
    let _e40: Line = other_399;
    let _e43: Line = other_399;
    let _e57: RadialPoint = self_443;
    let _e61: Line = other_399;
    let _e64: Line = other_399;
    let _e67: Line = other_399;
    let _e70: Line = other_399;
    let _e84: RadialPoint = self_443;
    let _e88: Line = other_399;
    let _e91: Line = other_399;
    let _e94: Line = other_399;
    let _e97: Line = other_399;
    let _e110: RadialPoint = self_443;
    let _e114: Line = other_399;
    let _e117: Line = other_399;
    let _e120: Line = other_399;
    let _e123: Line = other_399;
    let _e137: RadialPoint = self_443;
    let _e141: Line = other_399;
    let _e144: Line = other_399;
    let _e147: Line = other_399;
    let _e150: Line = other_399;
    let _e162: RadialPoint = self_443;
    let _e166: Line = other_399;
    let _e169: Line = other_399;
    let _e172: Line = other_399;
    let _e175: Line = other_399;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e84.g0_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.z) * vec4<f32>(_e114.g0_.y, _e117.g0_.x, _e120.g0_.y, _e123.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e137.g1_.x) * vec4<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z, _e150.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g0_.x, _e169.g0_.z, _e172.g0_.y, _e175.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_line_outer_product(self_444: RadialPoint, other_400: Line) -> Plane {
    var self_445: RadialPoint;
    var other_401: Line;

    self_445 = self_444;
    other_401 = other_400;
    let _e4: RadialPoint = self_445;
    let _e8: Line = other_401;
    let _e11: Line = other_401;
    let _e14: Line = other_401;
    let _e17: Line = other_401;
    let _e30: RadialPoint = self_445;
    let _e34: Line = other_401;
    let _e37: Line = other_401;
    let _e40: Line = other_401;
    let _e43: Line = other_401;
    let _e57: RadialPoint = self_445;
    let _e61: Line = other_401;
    let _e64: Line = other_401;
    let _e67: Line = other_401;
    let _e70: Line = other_401;
    let _e82: RadialPoint = self_445;
    let _e86: Line = other_401;
    let _e89: Line = other_401;
    let _e92: Line = other_401;
    let _e95: Line = other_401;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_line_inner_product(self_446: RadialPoint, other_402: Line) -> FlatPoint {
    var self_447: RadialPoint;
    var other_403: Line;

    self_447 = self_446;
    other_403 = other_402;
    let _e4: RadialPoint = self_447;
    let _e8: Line = other_403;
    let _e11: Line = other_403;
    let _e14: Line = other_403;
    let _e17: Line = other_403;
    let _e30: RadialPoint = self_447;
    let _e34: Line = other_403;
    let _e37: Line = other_403;
    let _e40: Line = other_403;
    let _e43: Line = other_403;
    let _e57: RadialPoint = self_447;
    let _e61: Line = other_403;
    let _e64: Line = other_403;
    let _e67: Line = other_403;
    let _e70: Line = other_403;
    return FlatPoint(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_line_left_contraction(self_448: RadialPoint, other_404: Line) -> FlatPoint {
    var self_449: RadialPoint;
    var other_405: Line;

    self_449 = self_448;
    other_405 = other_404;
    let _e4: RadialPoint = self_449;
    let _e8: Line = other_405;
    let _e11: Line = other_405;
    let _e14: Line = other_405;
    let _e17: Line = other_405;
    let _e30: RadialPoint = self_449;
    let _e34: Line = other_405;
    let _e37: Line = other_405;
    let _e40: Line = other_405;
    let _e43: Line = other_405;
    let _e57: RadialPoint = self_449;
    let _e61: Line = other_405;
    let _e64: Line = other_405;
    let _e67: Line = other_405;
    let _e70: Line = other_405;
    return FlatPoint(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_circle_outer_product(self_450: RadialPoint, other_406: Circle) -> Sphere {
    var self_451: RadialPoint;
    var other_407: Circle;

    self_451 = self_450;
    other_407 = other_406;
    let _e4: RadialPoint = self_451;
    let _e8: Circle = other_407;
    let _e11: Circle = other_407;
    let _e21: RadialPoint = self_451;
    let _e25: Circle = other_407;
    let _e28: Circle = other_407;
    let _e39: RadialPoint = self_451;
    let _e43: Circle = other_407;
    let _e46: Circle = other_407;
    let _e57: RadialPoint = self_451;
    let _e59: Circle = other_407;
    let _e70: RadialPoint = self_451;
    let _e74: Circle = other_407;
    let _e84: RadialPoint = self_451;
    let _e88: Circle = other_407;
    let _e99: RadialPoint = self_451;
    let _e103: Circle = other_407;
    let _e107: RadialPoint = self_451;
    let _e111: Circle = other_407;
    let _e114: Circle = other_407;
    let _e117: Circle = other_407;
    let _e123: RadialPoint = self_451;
    let _e127: Circle = other_407;
    return Sphere((((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e21.g0_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e39.g0_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(1.0, -(1.0)))) + ((_e57.g1_ * vec2<f32>(_e59.g0_.w)) * vec2<f32>(1.0, -(1.0)))), ((((((vec3<f32>(_e70.g0_.y) * _e74.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e84.g0_.z) * _e88.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e99.g1_.x) * _e103.g2_)) - (vec3<f32>(_e107.g1_.y) * vec3<f32>(_e111.g0_.x, _e114.g0_.y, _e117.g0_.z))) + ((vec3<f32>(_e123.g0_.x) * _e127.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn radial_point_circle_inner_product(self_452: RadialPoint, other_408: Circle) -> Dipole {
    var self_453: RadialPoint;
    var other_409: Circle;

    self_453 = self_452;
    other_409 = other_408;
    let _e4: RadialPoint = self_453;
    let _e8: Circle = other_409;
    let _e11: Circle = other_409;
    let _e14: Circle = other_409;
    let _e25: RadialPoint = self_453;
    let _e29: Circle = other_409;
    let _e32: Circle = other_409;
    let _e35: Circle = other_409;
    let _e47: RadialPoint = self_453;
    let _e51: Circle = other_409;
    let _e54: Circle = other_409;
    let _e57: Circle = other_409;
    let _e69: RadialPoint = self_453;
    let _e71: Circle = other_409;
    let _e80: RadialPoint = self_453;
    let _e84: Circle = other_409;
    let _e87: Circle = other_409;
    let _e90: Circle = other_409;
    let _e93: Circle = other_409;
    let _e106: RadialPoint = self_453;
    let _e110: Circle = other_409;
    let _e113: Circle = other_409;
    let _e116: Circle = other_409;
    let _e119: Circle = other_409;
    let _e133: RadialPoint = self_453;
    let _e137: Circle = other_409;
    let _e140: Circle = other_409;
    let _e143: Circle = other_409;
    let _e146: Circle = other_409;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e69.g0_ * vec3<f32>(_e71.g0_.w)) * vec3<f32>(-(1.0))), ((((vec4<f32>(_e80.g0_.y) * vec4<f32>(_e84.g2_.z, _e87.g2_.z, _e90.g2_.x, _e93.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e106.g0_.z) * vec4<f32>(_e110.g2_.y, _e113.g2_.x, _e116.g2_.y, _e119.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g2_.x, _e140.g2_.z, _e143.g2_.y, _e146.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_circle_left_contraction(self_454: RadialPoint, other_410: Circle) -> Dipole {
    var self_455: RadialPoint;
    var other_411: Circle;

    self_455 = self_454;
    other_411 = other_410;
    let _e4: RadialPoint = self_455;
    let _e8: Circle = other_411;
    let _e11: Circle = other_411;
    let _e14: Circle = other_411;
    let _e25: RadialPoint = self_455;
    let _e29: Circle = other_411;
    let _e32: Circle = other_411;
    let _e35: Circle = other_411;
    let _e47: RadialPoint = self_455;
    let _e51: Circle = other_411;
    let _e54: Circle = other_411;
    let _e57: Circle = other_411;
    let _e69: RadialPoint = self_455;
    let _e71: Circle = other_411;
    let _e80: RadialPoint = self_455;
    let _e84: Circle = other_411;
    let _e87: Circle = other_411;
    let _e90: Circle = other_411;
    let _e93: Circle = other_411;
    let _e106: RadialPoint = self_455;
    let _e110: Circle = other_411;
    let _e113: Circle = other_411;
    let _e116: Circle = other_411;
    let _e119: Circle = other_411;
    let _e133: RadialPoint = self_455;
    let _e137: Circle = other_411;
    let _e140: Circle = other_411;
    let _e143: Circle = other_411;
    let _e146: Circle = other_411;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e69.g0_ * vec3<f32>(_e71.g0_.w)) * vec3<f32>(-(1.0))), ((((vec4<f32>(_e80.g0_.y) * vec4<f32>(_e84.g2_.z, _e87.g2_.z, _e90.g2_.x, _e93.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e106.g0_.z) * vec4<f32>(_e110.g2_.y, _e113.g2_.x, _e116.g2_.y, _e119.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g2_.x, _e140.g2_.z, _e143.g2_.y, _e146.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_plane_regressive_product(self_456: RadialPoint, other_412: Plane) -> Scalar {
    var self_457: RadialPoint;
    var other_413: Plane;

    self_457 = self_456;
    other_413 = other_412;
    let _e4: RadialPoint = self_457;
    let _e7: Plane = other_413;
    let _e11: RadialPoint = self_457;
    let _e14: Plane = other_413;
    let _e19: RadialPoint = self_457;
    let _e22: Plane = other_413;
    let _e27: RadialPoint = self_457;
    let _e30: Plane = other_413;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g1_.x * _e30.g0_.w)));
}

fn radial_point_plane_outer_product(self_458: RadialPoint, other_414: Plane) -> AntiScalar {
    var self_459: RadialPoint;
    var other_415: Plane;

    self_459 = self_458;
    other_415 = other_414;
    let _e4: RadialPoint = self_459;
    let _e7: Plane = other_415;
    let _e11: RadialPoint = self_459;
    let _e14: Plane = other_415;
    let _e19: RadialPoint = self_459;
    let _e22: Plane = other_415;
    let _e27: RadialPoint = self_459;
    let _e30: Plane = other_415;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g1_.x * _e30.g0_.w)));
}

fn radial_point_plane_inner_product(self_460: RadialPoint, other_416: Plane) -> Line {
    var self_461: RadialPoint;
    var other_417: Plane;

    self_461 = self_460;
    other_417 = other_416;
    let _e4: RadialPoint = self_461;
    let _e8: Plane = other_417;
    let _e11: Plane = other_417;
    let _e14: Plane = other_417;
    let _e25: RadialPoint = self_461;
    let _e29: Plane = other_417;
    let _e32: Plane = other_417;
    let _e35: Plane = other_417;
    let _e47: RadialPoint = self_461;
    let _e51: Plane = other_417;
    let _e54: Plane = other_417;
    let _e57: Plane = other_417;
    let _e69: RadialPoint = self_461;
    let _e71: Plane = other_417;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e69.g0_ * vec3<f32>(_e71.g0_.w)) * vec3<f32>(-(1.0))));
}

fn radial_point_plane_left_contraction(self_462: RadialPoint, other_418: Plane) -> Line {
    var self_463: RadialPoint;
    var other_419: Plane;

    self_463 = self_462;
    other_419 = other_418;
    let _e4: RadialPoint = self_463;
    let _e8: Plane = other_419;
    let _e11: Plane = other_419;
    let _e14: Plane = other_419;
    let _e25: RadialPoint = self_463;
    let _e29: Plane = other_419;
    let _e32: Plane = other_419;
    let _e35: Plane = other_419;
    let _e47: RadialPoint = self_463;
    let _e51: Plane = other_419;
    let _e54: Plane = other_419;
    let _e57: Plane = other_419;
    let _e69: RadialPoint = self_463;
    let _e71: Plane = other_419;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e69.g0_ * vec3<f32>(_e71.g0_.w)) * vec3<f32>(-(1.0))));
}

fn radial_point_sphere_regressive_product(self_464: RadialPoint, other_420: Sphere) -> Scalar {
    var self_465: RadialPoint;
    var other_421: Sphere;

    self_465 = self_464;
    other_421 = other_420;
    let _e4: RadialPoint = self_465;
    let _e7: Sphere = other_421;
    let _e11: RadialPoint = self_465;
    let _e14: Sphere = other_421;
    let _e19: RadialPoint = self_465;
    let _e22: Sphere = other_421;
    let _e27: RadialPoint = self_465;
    let _e30: Sphere = other_421;
    let _e35: RadialPoint = self_465;
    let _e38: Sphere = other_421;
    return Scalar((((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g1_.x * _e30.g0_.y)) + (_e35.g1_.y * _e38.g0_.x)));
}

fn radial_point_sphere_outer_product(self_466: RadialPoint, other_422: Sphere) -> AntiScalar {
    var self_467: RadialPoint;
    var other_423: Sphere;

    self_467 = self_466;
    other_423 = other_422;
    let _e4: RadialPoint = self_467;
    let _e7: Sphere = other_423;
    let _e11: RadialPoint = self_467;
    let _e14: Sphere = other_423;
    let _e19: RadialPoint = self_467;
    let _e22: Sphere = other_423;
    let _e27: RadialPoint = self_467;
    let _e30: Sphere = other_423;
    let _e35: RadialPoint = self_467;
    let _e38: Sphere = other_423;
    return AntiScalar((((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g1_.x * _e30.g0_.y)) + (_e35.g1_.y * _e38.g0_.x)));
}

fn radial_point_motor_geometric_product(self_468: RadialPoint, other_424: Motor) -> Flector {
    var self_469: RadialPoint;
    var other_425: Motor;

    self_469 = self_468;
    other_425 = other_424;
    let _e4: RadialPoint = self_469;
    let _e8: Motor = other_425;
    let _e11: Motor = other_425;
    let _e14: Motor = other_425;
    let _e17: Motor = other_425;
    let _e30: RadialPoint = self_469;
    let _e34: Motor = other_425;
    let _e37: Motor = other_425;
    let _e40: Motor = other_425;
    let _e43: Motor = other_425;
    let _e57: RadialPoint = self_469;
    let _e61: Motor = other_425;
    let _e64: Motor = other_425;
    let _e67: Motor = other_425;
    let _e70: Motor = other_425;
    let _e84: RadialPoint = self_469;
    let _e88: Motor = other_425;
    let _e99: RadialPoint = self_469;
    let _e103: Motor = other_425;
    let _e106: Motor = other_425;
    let _e109: Motor = other_425;
    let _e112: Motor = other_425;
    let _e125: RadialPoint = self_469;
    let _e129: Motor = other_425;
    let _e132: Motor = other_425;
    let _e135: Motor = other_425;
    let _e138: Motor = other_425;
    let _e152: RadialPoint = self_469;
    let _e156: Motor = other_425;
    let _e159: Motor = other_425;
    let _e162: Motor = other_425;
    let _e165: Motor = other_425;
    let _e179: RadialPoint = self_469;
    let _e183: Motor = other_425;
    return Flector((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g1_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g1_.w, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.x) * _e88.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e99.g0_.x) * vec4<f32>(_e103.g0_.w, _e106.g0_.z, _e109.g0_.y, _e112.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e125.g0_.y) * vec4<f32>(_e129.g0_.z, _e132.g0_.w, _e135.g0_.x, _e138.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e152.g0_.z) * vec4<f32>(_e156.g0_.y, _e159.g0_.x, _e162.g0_.w, _e165.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e179.g1_.x) * _e183.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn radial_point_motor_regressive_product(self_470: RadialPoint, other_426: Motor) -> RadialPoint {
    var self_471: RadialPoint;
    var other_427: Motor;

    self_471 = self_470;
    other_427 = other_426;
    let _e4: RadialPoint = self_471;
    let _e6: Motor = other_427;
    let _e11: RadialPoint = self_471;
    let _e13: Motor = other_427;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn radial_point_motor_outer_product(self_472: RadialPoint, other_428: Motor) -> Flector {
    var self_473: RadialPoint;
    var other_429: Motor;

    self_473 = self_472;
    other_429 = other_428;
    let _e4: RadialPoint = self_473;
    let _e8: Motor = other_429;
    let _e19: RadialPoint = self_473;
    let _e22: RadialPoint = self_473;
    let _e25: RadialPoint = self_473;
    let _e28: RadialPoint = self_473;
    let _e32: Motor = other_429;
    let _e43: RadialPoint = self_473;
    let _e47: Motor = other_429;
    let _e50: Motor = other_429;
    let _e53: Motor = other_429;
    let _e56: Motor = other_429;
    let _e69: RadialPoint = self_473;
    let _e73: Motor = other_429;
    let _e76: Motor = other_429;
    let _e79: Motor = other_429;
    let _e82: Motor = other_429;
    let _e96: RadialPoint = self_473;
    let _e100: Motor = other_429;
    let _e111: RadialPoint = self_473;
    let _e115: Motor = other_429;
    let _e118: Motor = other_429;
    let _e121: Motor = other_429;
    let _e124: Motor = other_429;
    return Flector((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z, _e28.g0_.x) * _e32.g1_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e43.g0_.y) * vec4<f32>(_e47.g0_.z, _e50.g0_.z, _e53.g0_.x, _e56.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e69.g0_.z) * vec4<f32>(_e73.g0_.y, _e76.g0_.x, _e79.g0_.y, _e82.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e96.g1_.x) * _e100.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e111.g0_.x) * vec4<f32>(_e115.g0_.x, _e118.g0_.z, _e121.g0_.y, _e124.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn radial_point_rotor_regressive_product(self_474: RadialPoint, other_430: Rotor) -> RadialPoint {
    var self_475: RadialPoint;
    var other_431: Rotor;

    self_475 = self_474;
    other_431 = other_430;
    let _e4: RadialPoint = self_475;
    let _e6: Rotor = other_431;
    let _e11: RadialPoint = self_475;
    let _e13: Rotor = other_431;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn radial_point_translator_regressive_product(self_476: RadialPoint, other_432: Translator) -> RadialPoint {
    var self_477: RadialPoint;
    var other_433: Translator;

    self_477 = self_476;
    other_433 = other_432;
    let _e4: RadialPoint = self_477;
    let _e6: Translator = other_433;
    let _e11: RadialPoint = self_477;
    let _e13: Translator = other_433;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn radial_point_translator_outer_product(self_478: RadialPoint, other_434: Translator) -> Plane {
    var self_479: RadialPoint;
    var other_435: Translator;

    self_479 = self_478;
    other_435 = other_434;
    let _e4: RadialPoint = self_479;
    let _e8: Translator = other_435;
    let _e20: RadialPoint = self_479;
    let _e24: Translator = other_435;
    let _e37: RadialPoint = self_479;
    let _e41: Translator = other_435;
    let _e52: RadialPoint = self_479;
    let _e56: Translator = other_435;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.x) * _e41.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e52.g0_.x) * vec4<f32>(_e56.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn radial_point_translator_geometric_anti_product(self_480: RadialPoint, other_436: Translator) -> RadialPoint {
    var self_481: RadialPoint;
    var other_437: Translator;

    self_481 = self_480;
    other_437 = other_436;
    let _e6: RadialPoint = self_481;
    let _e10: Translator = other_437;
    let _e13: Translator = other_437;
    let _e16: Translator = other_437;
    let _e22: RadialPoint = self_481;
    let _e24: Translator = other_437;
    let _e30: RadialPoint = self_481;
    let _e32: Translator = other_437;
    return RadialPoint(((vec3<f32>(0.0) - (vec3<f32>(_e6.g1_.x) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))) + (_e22.g0_ * vec3<f32>(_e24.g0_.w))), (_e30.g1_ * vec2<f32>(_e32.g0_.w)));
}

fn radial_point_translator_inner_anti_product(self_482: RadialPoint, other_438: Translator) -> RadialPoint {
    var self_483: RadialPoint;
    var other_439: Translator;

    self_483 = self_482;
    other_439 = other_438;
    let _e4: RadialPoint = self_483;
    let _e6: Translator = other_439;
    let _e11: RadialPoint = self_483;
    let _e13: Translator = other_439;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn radial_point_translator_right_anti_contraction(self_484: RadialPoint, other_440: Translator) -> RadialPoint {
    var self_485: RadialPoint;
    var other_441: Translator;

    self_485 = self_484;
    other_441 = other_440;
    let _e4: RadialPoint = self_485;
    let _e6: Translator = other_441;
    let _e11: RadialPoint = self_485;
    let _e13: Translator = other_441;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn radial_point_flector_geometric_product(self_486: RadialPoint, other_442: Flector) -> Motor {
    var self_487: RadialPoint;
    var other_443: Flector;

    self_487 = self_486;
    other_443 = other_442;
    let _e4: RadialPoint = self_487;
    let _e8: Flector = other_443;
    let _e11: Flector = other_443;
    let _e14: Flector = other_443;
    let _e17: Flector = other_443;
    let _e30: RadialPoint = self_487;
    let _e34: Flector = other_443;
    let _e37: Flector = other_443;
    let _e40: Flector = other_443;
    let _e43: Flector = other_443;
    let _e57: RadialPoint = self_487;
    let _e61: Flector = other_443;
    let _e64: Flector = other_443;
    let _e67: Flector = other_443;
    let _e70: Flector = other_443;
    let _e84: RadialPoint = self_487;
    let _e88: Flector = other_443;
    let _e91: Flector = other_443;
    let _e94: Flector = other_443;
    let _e97: Flector = other_443;
    let _e103: RadialPoint = self_487;
    let _e107: Flector = other_443;
    let _e110: Flector = other_443;
    let _e113: Flector = other_443;
    let _e116: Flector = other_443;
    let _e129: RadialPoint = self_487;
    let _e133: Flector = other_443;
    let _e136: Flector = other_443;
    let _e139: Flector = other_443;
    let _e142: Flector = other_443;
    let _e156: RadialPoint = self_487;
    let _e160: Flector = other_443;
    let _e163: Flector = other_443;
    let _e166: Flector = other_443;
    let _e169: Flector = other_443;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g1_.z, _e14.g1_.y, _e17.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g0_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + (vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.y, _e94.g0_.z, _e97.g1_.w))), ((((vec4<f32>(_e103.g0_.x) * vec4<f32>(_e107.g1_.w, _e110.g0_.z, _e113.g0_.y, _e116.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e129.g0_.y) * vec4<f32>(_e133.g0_.z, _e136.g1_.w, _e139.g0_.x, _e142.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e156.g0_.z) * vec4<f32>(_e160.g0_.y, _e163.g0_.x, _e166.g1_.w, _e169.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn radial_point_flector_regressive_product(self_488: RadialPoint, other_444: Flector) -> Scalar {
    var self_489: RadialPoint;
    var other_445: Flector;

    self_489 = self_488;
    other_445 = other_444;
    let _e4: RadialPoint = self_489;
    let _e7: Flector = other_445;
    let _e11: RadialPoint = self_489;
    let _e14: Flector = other_445;
    let _e19: RadialPoint = self_489;
    let _e22: Flector = other_445;
    let _e27: RadialPoint = self_489;
    let _e30: Flector = other_445;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g1_.x * _e30.g1_.w)));
}

fn radial_point_dilation_regressive_product(self_490: RadialPoint, other_446: Dilation) -> RadialPoint {
    var self_491: RadialPoint;
    var other_447: Dilation;

    self_491 = self_490;
    other_447 = other_446;
    let _e4: RadialPoint = self_491;
    let _e6: Dilation = other_447;
    let _e11: RadialPoint = self_491;
    let _e13: Dilation = other_447;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec2<f32>(_e13.g1_.y)));
}

fn radial_point_dilation_outer_product(self_492: RadialPoint, other_448: Dilation) -> Sphere {
    var self_493: RadialPoint;
    var other_449: Dilation;

    self_493 = self_492;
    other_449 = other_448;
    let _e4: RadialPoint = self_493;
    let _e8: Dilation = other_449;
    let _e18: RadialPoint = self_493;
    let _e22: Dilation = other_449;
    let _e33: RadialPoint = self_493;
    let _e37: Dilation = other_449;
    let _e48: RadialPoint = self_493;
    let _e52: Dilation = other_449;
    let _e62: RadialPoint = self_493;
    let _e66: Dilation = other_449;
    let _e77: RadialPoint = self_493;
    let _e81: Dilation = other_449;
    let _e84: Dilation = other_449;
    let _e87: Dilation = other_449;
    return Sphere(((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g1_.x) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e48.g1_.y) * vec2<f32>(_e52.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e62.g0_.x) * vec2<f32>(_e66.g1_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e77.g1_.y) * vec3<f32>(_e81.g1_.x, _e84.g0_.x, _e87.g0_.y)));
}

fn radial_point_dilation_geometric_anti_product(self_494: RadialPoint, other_450: Dilation) -> RadialPoint {
    var self_495: RadialPoint;
    var other_451: Dilation;

    self_495 = self_494;
    other_451 = other_450;
    let _e6: RadialPoint = self_495;
    let _e10: Dilation = other_451;
    let _e13: Dilation = other_451;
    let _e16: Dilation = other_451;
    let _e22: RadialPoint = self_495;
    let _e24: Dilation = other_451;
    let _e30: RadialPoint = self_495;
    let _e32: Dilation = other_451;
    return RadialPoint(((vec3<f32>(0.0) - (vec3<f32>(_e6.g1_.y) * vec3<f32>(_e10.g1_.x, _e13.g0_.x, _e16.g0_.y))) + (_e22.g0_ * vec3<f32>(_e24.g1_.y))), (_e30.g1_ * vec2<f32>(_e32.g1_.y)));
}

fn radial_point_dilation_inner_anti_product(self_496: RadialPoint, other_452: Dilation) -> RadialPoint {
    var self_497: RadialPoint;
    var other_453: Dilation;

    self_497 = self_496;
    other_453 = other_452;
    let _e4: RadialPoint = self_497;
    let _e6: Dilation = other_453;
    let _e11: RadialPoint = self_497;
    let _e13: Dilation = other_453;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec2<f32>(_e13.g1_.y)));
}

fn radial_point_dilation_right_anti_contraction(self_498: RadialPoint, other_454: Dilation) -> RadialPoint {
    var self_499: RadialPoint;
    var other_455: Dilation;

    self_499 = self_498;
    other_455 = other_454;
    let _e4: RadialPoint = self_499;
    let _e6: Dilation = other_455;
    let _e11: RadialPoint = self_499;
    let _e13: Dilation = other_455;
    return RadialPoint((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec2<f32>(_e13.g1_.y)));
}

fn radial_point_multi_vector_add(self_500: RadialPoint, other_456: MultiVector) -> MultiVector {
    var self_501: RadialPoint;
    var other_457: MultiVector;

    self_501 = self_500;
    other_457 = other_456;
    let _e4: MultiVector = other_457;
    let _e6: RadialPoint = self_501;
    let _e8: MultiVector = other_457;
    let _e11: RadialPoint = self_501;
    let _e13: MultiVector = other_457;
    let _e16: MultiVector = other_457;
    let _e18: MultiVector = other_457;
    let _e20: MultiVector = other_457;
    let _e22: MultiVector = other_457;
    let _e24: MultiVector = other_457;
    let _e26: MultiVector = other_457;
    let _e28: MultiVector = other_457;
    return MultiVector(_e4.g0_, (_e6.g0_ + _e8.g1_), (_e11.g1_ + _e13.g2_), _e16.g3_, _e18.g4_, _e20.g5_, _e22.g6_, _e24.g7_, _e26.g8_, _e28.g9_);
}

fn radial_point_multi_vector_sub(self_502: RadialPoint, other_458: MultiVector) -> MultiVector {
    var self_503: RadialPoint;
    var other_459: MultiVector;

    self_503 = self_502;
    other_459 = other_458;
    let _e6: MultiVector = other_459;
    let _e9: RadialPoint = self_503;
    let _e11: MultiVector = other_459;
    let _e14: RadialPoint = self_503;
    let _e16: MultiVector = other_459;
    let _e21: MultiVector = other_459;
    let _e26: MultiVector = other_459;
    let _e31: MultiVector = other_459;
    let _e36: MultiVector = other_459;
    let _e41: MultiVector = other_459;
    let _e46: MultiVector = other_459;
    let _e51: MultiVector = other_459;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (_e14.g1_ - _e16.g2_), (vec4<f32>(0.0) - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (vec3<f32>(0.0) - _e36.g6_), (vec3<f32>(0.0) - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (vec4<f32>(0.0) - _e51.g9_));
}

fn radial_point_multi_vector_geometric_product(self_504: RadialPoint, other_460: MultiVector) -> MultiVector {
    var self_505: RadialPoint;
    var other_461: MultiVector;

    self_505 = self_504;
    other_461 = other_460;
    let _e4: RadialPoint = self_505;
    let _e8: MultiVector = other_461;
    let _e11: MultiVector = other_461;
    let _e14: MultiVector = other_461;
    let _e19: RadialPoint = self_505;
    let _e23: MultiVector = other_461;
    let _e26: MultiVector = other_461;
    let _e29: MultiVector = other_461;
    let _e35: RadialPoint = self_505;
    let _e39: MultiVector = other_461;
    let _e42: MultiVector = other_461;
    let _e45: MultiVector = other_461;
    let _e51: RadialPoint = self_505;
    let _e55: MultiVector = other_461;
    let _e66: RadialPoint = self_505;
    let _e70: MultiVector = other_461;
    let _e73: MultiVector = other_461;
    let _e76: MultiVector = other_461;
    let _e87: RadialPoint = self_505;
    let _e91: MultiVector = other_461;
    let _e94: MultiVector = other_461;
    let _e97: MultiVector = other_461;
    let _e108: RadialPoint = self_505;
    let _e112: MultiVector = other_461;
    let _e115: MultiVector = other_461;
    let _e118: MultiVector = other_461;
    let _e130: RadialPoint = self_505;
    let _e134: MultiVector = other_461;
    let _e137: MultiVector = other_461;
    let _e140: MultiVector = other_461;
    let _e152: RadialPoint = self_505;
    let _e156: MultiVector = other_461;
    let _e159: MultiVector = other_461;
    let _e169: RadialPoint = self_505;
    let _e173: MultiVector = other_461;
    let _e176: MultiVector = other_461;
    let _e187: RadialPoint = self_505;
    let _e191: MultiVector = other_461;
    let _e194: MultiVector = other_461;
    let _e205: RadialPoint = self_505;
    let _e207: MultiVector = other_461;
    let _e213: RadialPoint = self_505;
    let _e217: MultiVector = other_461;
    let _e220: MultiVector = other_461;
    let _e223: MultiVector = other_461;
    let _e226: MultiVector = other_461;
    let _e239: RadialPoint = self_505;
    let _e243: MultiVector = other_461;
    let _e246: MultiVector = other_461;
    let _e249: MultiVector = other_461;
    let _e252: MultiVector = other_461;
    let _e266: RadialPoint = self_505;
    let _e270: MultiVector = other_461;
    let _e273: MultiVector = other_461;
    let _e276: MultiVector = other_461;
    let _e279: MultiVector = other_461;
    let _e293: RadialPoint = self_505;
    let _e297: MultiVector = other_461;
    let _e300: MultiVector = other_461;
    let _e303: MultiVector = other_461;
    let _e306: MultiVector = other_461;
    let _e312: RadialPoint = self_505;
    let _e316: MultiVector = other_461;
    let _e319: MultiVector = other_461;
    let _e322: MultiVector = other_461;
    let _e325: MultiVector = other_461;
    let _e337: RadialPoint = self_505;
    let _e341: MultiVector = other_461;
    let _e344: MultiVector = other_461;
    let _e347: MultiVector = other_461;
    let _e359: RadialPoint = self_505;
    let _e363: MultiVector = other_461;
    let _e366: MultiVector = other_461;
    let _e369: MultiVector = other_461;
    let _e382: RadialPoint = self_505;
    let _e386: MultiVector = other_461;
    let _e389: MultiVector = other_461;
    let _e392: MultiVector = other_461;
    let _e405: RadialPoint = self_505;
    let _e409: MultiVector = other_461;
    let _e413: RadialPoint = self_505;
    let _e417: MultiVector = other_461;
    let _e420: MultiVector = other_461;
    let _e423: MultiVector = other_461;
    let _e435: RadialPoint = self_505;
    let _e439: MultiVector = other_461;
    let _e442: MultiVector = other_461;
    let _e445: MultiVector = other_461;
    let _e458: RadialPoint = self_505;
    let _e462: MultiVector = other_461;
    let _e465: MultiVector = other_461;
    let _e468: MultiVector = other_461;
    let _e481: RadialPoint = self_505;
    let _e485: MultiVector = other_461;
    let _e488: MultiVector = other_461;
    let _e491: MultiVector = other_461;
    let _e503: RadialPoint = self_505;
    let _e507: MultiVector = other_461;
    let _e510: MultiVector = other_461;
    let _e513: MultiVector = other_461;
    let _e526: RadialPoint = self_505;
    let _e530: MultiVector = other_461;
    let _e533: MultiVector = other_461;
    let _e536: MultiVector = other_461;
    let _e549: RadialPoint = self_505;
    let _e553: MultiVector = other_461;
    let _e556: MultiVector = other_461;
    let _e559: MultiVector = other_461;
    let _e565: RadialPoint = self_505;
    let _e569: MultiVector = other_461;
    let _e573: RadialPoint = self_505;
    let _e577: MultiVector = other_461;
    let _e580: MultiVector = other_461;
    let _e583: MultiVector = other_461;
    let _e595: RadialPoint = self_505;
    let _e599: MultiVector = other_461;
    let _e602: MultiVector = other_461;
    let _e605: MultiVector = other_461;
    let _e618: RadialPoint = self_505;
    let _e622: MultiVector = other_461;
    let _e625: MultiVector = other_461;
    let _e628: MultiVector = other_461;
    let _e641: RadialPoint = self_505;
    let _e645: MultiVector = other_461;
    let _e649: RadialPoint = self_505;
    let _e653: MultiVector = other_461;
    let _e656: MultiVector = other_461;
    let _e659: MultiVector = other_461;
    let _e662: MultiVector = other_461;
    let _e675: RadialPoint = self_505;
    let _e679: MultiVector = other_461;
    let _e682: MultiVector = other_461;
    let _e685: MultiVector = other_461;
    let _e688: MultiVector = other_461;
    let _e702: RadialPoint = self_505;
    let _e706: MultiVector = other_461;
    let _e709: MultiVector = other_461;
    let _e712: MultiVector = other_461;
    let _e715: MultiVector = other_461;
    let _e729: RadialPoint = self_505;
    let _e733: MultiVector = other_461;
    let _e736: MultiVector = other_461;
    let _e739: MultiVector = other_461;
    let _e742: MultiVector = other_461;
    let _e754: RadialPoint = self_505;
    let _e758: MultiVector = other_461;
    let _e761: MultiVector = other_461;
    let _e764: MultiVector = other_461;
    let _e767: MultiVector = other_461;
    let _e780: RadialPoint = self_505;
    let _e784: MultiVector = other_461;
    let _e787: MultiVector = other_461;
    let _e790: MultiVector = other_461;
    let _e793: MultiVector = other_461;
    let _e807: RadialPoint = self_505;
    let _e811: MultiVector = other_461;
    let _e814: MultiVector = other_461;
    let _e817: MultiVector = other_461;
    let _e820: MultiVector = other_461;
    let _e834: RadialPoint = self_505;
    let _e838: MultiVector = other_461;
    let _e842: RadialPoint = self_505;
    let _e846: MultiVector = other_461;
    let _e849: MultiVector = other_461;
    let _e852: MultiVector = other_461;
    let _e855: MultiVector = other_461;
    return MultiVector((((((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g1_.x, _e11.g8_.x, _e14.g9_.x)) + (vec3<f32>(_e19.g0_.y) * vec3<f32>(_e23.g1_.y, _e26.g8_.y, _e29.g9_.y))) + (vec3<f32>(_e35.g0_.z) * vec3<f32>(_e39.g1_.z, _e42.g8_.z, _e45.g9_.z))) + ((vec3<f32>(_e51.g1_.y) * vec3<f32>(_e55.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e66.g1_.x) * vec3<f32>(_e70.g8_.x, _e73.g8_.w, _e76.g9_.w)) * vec3<f32>(0.0, 1.0, 1.0))), ((((vec3<f32>(_e87.g0_.x) * vec3<f32>(_e91.g0_.x, _e94.g5_.z, _e97.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e108.g0_.y) * vec3<f32>(_e112.g5_.z, _e115.g0_.x, _e118.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e130.g0_.z) * vec3<f32>(_e134.g5_.y, _e137.g5_.x, _e140.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((vec2<f32>(_e152.g0_.x) * vec2<f32>(_e156.g4_.x, _e159.g3_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e169.g0_.y) * vec2<f32>(_e173.g4_.y, _e176.g3_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e187.g0_.z) * vec2<f32>(_e191.g4_.z, _e194.g3_.z)) * vec2<f32>(-(1.0), 1.0))) + (_e205.g1_ * vec2<f32>(_e207.g0_.x))), ((((((vec4<f32>(_e213.g0_.x) * vec4<f32>(_e217.g2_.y, _e220.g7_.z, _e223.g7_.y, _e226.g6_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e239.g0_.y) * vec4<f32>(_e243.g7_.z, _e246.g2_.y, _e249.g7_.x, _e252.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e266.g0_.z) * vec4<f32>(_e270.g7_.y, _e273.g7_.x, _e276.g2_.y, _e279.g6_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) - (vec4<f32>(_e293.g1_.y) * vec4<f32>(_e297.g1_.x, _e300.g1_.y, _e303.g1_.z, _e306.g2_.x))) + ((vec4<f32>(_e312.g1_.x) * vec4<f32>(_e316.g2_.x, _e319.g2_.x, _e322.g2_.x, _e325.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3<f32>(_e337.g0_.x) * vec3<f32>(_e341.g2_.x, _e344.g8_.z, _e347.g8_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e359.g0_.y) * vec3<f32>(_e363.g8_.z, _e366.g2_.x, _e369.g8_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e382.g0_.z) * vec3<f32>(_e386.g8_.y, _e389.g8_.x, _e392.g2_.x)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e405.g1_.x) * _e409.g1_)), ((((vec3<f32>(_e413.g0_.x) * vec3<f32>(_e417.g8_.w, _e420.g1_.z, _e423.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e435.g0_.y) * vec3<f32>(_e439.g1_.z, _e442.g8_.w, _e445.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e458.g0_.z) * vec3<f32>(_e462.g1_.y, _e465.g1_.x, _e468.g8_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))), ((((((vec3<f32>(_e481.g0_.x) * vec3<f32>(_e485.g3_.w, _e488.g9_.z, _e491.g9_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e503.g0_.y) * vec3<f32>(_e507.g9_.z, _e510.g3_.w, _e513.g9_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e526.g0_.z) * vec3<f32>(_e530.g9_.y, _e533.g9_.x, _e536.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e549.g1_.x) * vec3<f32>(_e553.g3_.x, _e556.g3_.y, _e559.g3_.z))) + (vec3<f32>(_e565.g1_.y) * _e569.g4_)), (((((vec3<f32>(_e573.g0_.x) * vec3<f32>(_e577.g9_.w, _e580.g3_.z, _e583.g3_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e595.g0_.y) * vec3<f32>(_e599.g3_.z, _e602.g9_.w, _e605.g3_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e618.g0_.z) * vec3<f32>(_e622.g3_.y, _e625.g3_.x, _e628.g9_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e641.g1_.y) * _e645.g5_)), (((((vec4<f32>(_e649.g0_.x) * vec4<f32>(_e653.g0_.y, _e656.g4_.z, _e659.g4_.y, _e662.g5_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e675.g0_.y) * vec4<f32>(_e679.g4_.z, _e682.g0_.y, _e685.g4_.x, _e688.g5_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e702.g0_.z) * vec4<f32>(_e706.g4_.y, _e709.g4_.x, _e712.g0_.y, _e715.g5_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e729.g1_.x) * vec4<f32>(_e733.g5_.x, _e736.g5_.y, _e739.g5_.z, _e742.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((vec4<f32>(_e754.g0_.x) * vec4<f32>(_e758.g0_.z, _e761.g6_.z, _e764.g6_.y, _e767.g7_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e780.g0_.y) * vec4<f32>(_e784.g6_.z, _e787.g0_.z, _e790.g6_.x, _e793.g7_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e807.g0_.z) * vec4<f32>(_e811.g6_.y, _e814.g6_.x, _e817.g0_.z, _e820.g7_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) - (vec4<f32>(_e834.g1_.y) * _e838.g8_)) + ((vec4<f32>(_e842.g1_.x) * vec4<f32>(_e846.g7_.x, _e849.g7_.y, _e852.g7_.z, _e855.g7_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn radial_point_multi_vector_scalar_product(self_506: RadialPoint, other_462: MultiVector) -> Scalar {
    var self_507: RadialPoint;
    var other_463: MultiVector;

    self_507 = self_506;
    other_463 = other_462;
    let _e4: RadialPoint = self_507;
    let _e7: MultiVector = other_463;
    let _e11: RadialPoint = self_507;
    let _e14: MultiVector = other_463;
    let _e19: RadialPoint = self_507;
    let _e22: MultiVector = other_463;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn radial_point_squared_magnitude(self_508: RadialPoint) -> Scalar {
    var self_509: RadialPoint;

    self_509 = self_508;
    let _e2: RadialPoint = self_509;
    let _e3: RadialPoint = self_509;
    let _e4: RadialPoint = radial_point_reversal(_e3);
    let _e5: Scalar = radial_point_radial_point_scalar_product(_e2, _e4);
    return _e5;
}

fn radial_point_magnitude(self_510: RadialPoint) -> Scalar {
    var self_511: RadialPoint;

    self_511 = self_510;
    let _e2: RadialPoint = self_511;
    let _e3: Scalar = radial_point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn radial_point_scale(self_512: RadialPoint, other_464: f32) -> RadialPoint {
    var self_513: RadialPoint;
    var other_465: f32;

    self_513 = self_512;
    other_465 = other_464;
    let _e4: RadialPoint = self_513;
    let _e5: f32 = other_465;
    let _e7: RadialPoint = radial_point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn radial_point_signum(self_514: RadialPoint) -> RadialPoint {
    var self_515: RadialPoint;

    self_515 = self_514;
    let _e2: RadialPoint = self_515;
    let _e3: RadialPoint = self_515;
    let _e4: Scalar = radial_point_magnitude(_e3);
    let _e9: RadialPoint = radial_point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn radial_point_inverse(self_516: RadialPoint) -> RadialPoint {
    var self_517: RadialPoint;

    self_517 = self_516;
    let _e2: RadialPoint = self_517;
    let _e3: RadialPoint = radial_point_reversal(_e2);
    let _e4: RadialPoint = self_517;
    let _e5: Scalar = radial_point_squared_magnitude(_e4);
    let _e10: RadialPoint = radial_point_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn flat_point_zero() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flat_point_one() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flat_point_neg(self_518: FlatPoint) -> FlatPoint {
    var self_519: FlatPoint;

    self_519 = self_518;
    let _e2: FlatPoint = self_519;
    return FlatPoint((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn flat_point_automorphism(self_520: FlatPoint) -> FlatPoint {
    var self_521: FlatPoint;

    self_521 = self_520;
    let _e2: FlatPoint = self_521;
    return FlatPoint(_e2.g0_);
}

fn flat_point_reversal(self_522: FlatPoint) -> FlatPoint {
    var self_523: FlatPoint;

    self_523 = self_522;
    let _e2: FlatPoint = self_523;
    return FlatPoint((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn flat_point_conjugation(self_524: FlatPoint) -> FlatPoint {
    var self_525: FlatPoint;

    self_525 = self_524;
    let _e2: FlatPoint = self_525;
    return FlatPoint((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn flat_point_anti_reversal(self_526: FlatPoint) -> FlatPoint {
    var self_527: FlatPoint;

    self_527 = self_526;
    let _e2: FlatPoint = self_527;
    return FlatPoint((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn flat_point_scalar_geometric_product(self_528: FlatPoint, other_466: Scalar) -> FlatPoint {
    var self_529: FlatPoint;
    var other_467: Scalar;

    self_529 = self_528;
    other_467 = other_466;
    let _e4: FlatPoint = self_529;
    let _e6: Scalar = other_467;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_scalar_outer_product(self_530: FlatPoint, other_468: Scalar) -> FlatPoint {
    var self_531: FlatPoint;
    var other_469: Scalar;

    self_531 = self_530;
    other_469 = other_468;
    let _e4: FlatPoint = self_531;
    let _e6: Scalar = other_469;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_scalar_inner_product(self_532: FlatPoint, other_470: Scalar) -> FlatPoint {
    var self_533: FlatPoint;
    var other_471: Scalar;

    self_533 = self_532;
    other_471 = other_470;
    let _e4: FlatPoint = self_533;
    let _e6: Scalar = other_471;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_scalar_right_contraction(self_534: FlatPoint, other_472: Scalar) -> FlatPoint {
    var self_535: FlatPoint;
    var other_473: Scalar;

    self_535 = self_534;
    other_473 = other_472;
    let _e4: FlatPoint = self_535;
    let _e6: Scalar = other_473;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_anti_scalar_regressive_product(self_536: FlatPoint, other_474: AntiScalar) -> FlatPoint {
    var self_537: FlatPoint;
    var other_475: AntiScalar;

    self_537 = self_536;
    other_475 = other_474;
    let _e4: FlatPoint = self_537;
    let _e6: AntiScalar = other_475;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_anti_scalar_geometric_anti_product(self_538: FlatPoint, other_476: AntiScalar) -> FlatPoint {
    var self_539: FlatPoint;
    var other_477: AntiScalar;

    self_539 = self_538;
    other_477 = other_476;
    let _e4: FlatPoint = self_539;
    let _e6: AntiScalar = other_477;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_anti_scalar_inner_anti_product(self_540: FlatPoint, other_478: AntiScalar) -> FlatPoint {
    var self_541: FlatPoint;
    var other_479: AntiScalar;

    self_541 = self_540;
    other_479 = other_478;
    let _e4: FlatPoint = self_541;
    let _e6: AntiScalar = other_479;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_anti_scalar_right_anti_contraction(self_542: FlatPoint, other_480: AntiScalar) -> FlatPoint {
    var self_543: FlatPoint;
    var other_481: AntiScalar;

    self_543 = self_542;
    other_481 = other_480;
    let _e4: FlatPoint = self_543;
    let _e6: AntiScalar = other_481;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn flat_point_radial_point_outer_product(self_544: FlatPoint, other_482: RadialPoint) -> Line {
    var self_545: FlatPoint;
    var other_483: RadialPoint;

    self_545 = self_544;
    other_483 = other_482;
    let _e6: FlatPoint = self_545;
    let _e10: RadialPoint = other_483;
    let _e14: FlatPoint = self_545;
    let _e17: FlatPoint = self_545;
    let _e20: FlatPoint = self_545;
    let _e24: RadialPoint = other_483;
    let _e30: FlatPoint = self_545;
    let _e34: RadialPoint = other_483;
    let _e44: FlatPoint = self_545;
    let _e48: RadialPoint = other_483;
    let _e59: FlatPoint = self_545;
    let _e63: RadialPoint = other_483;
    return Line(((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * _e10.g0_)) + (vec3<f32>(_e14.g0_.x, _e17.g0_.y, _e20.g0_.z) * vec3<f32>(_e24.g1_.x))), ((((vec3<f32>(_e30.g0_.y) * _e34.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e44.g0_.z) * _e48.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e59.g0_.x) * _e63.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flat_point_flat_point_add(self_546: FlatPoint, other_484: FlatPoint) -> FlatPoint {
    var self_547: FlatPoint;
    var other_485: FlatPoint;

    self_547 = self_546;
    other_485 = other_484;
    let _e4: FlatPoint = self_547;
    let _e6: FlatPoint = other_485;
    return FlatPoint((_e4.g0_ + _e6.g0_));
}

fn flat_point_flat_point_sub(self_548: FlatPoint, other_486: FlatPoint) -> FlatPoint {
    var self_549: FlatPoint;
    var other_487: FlatPoint;

    self_549 = self_548;
    other_487 = other_486;
    let _e4: FlatPoint = self_549;
    let _e6: FlatPoint = other_487;
    return FlatPoint((_e4.g0_ - _e6.g0_));
}

fn flat_point_flat_point_mul(self_550: FlatPoint, other_488: FlatPoint) -> FlatPoint {
    var self_551: FlatPoint;
    var other_489: FlatPoint;

    self_551 = self_550;
    other_489 = other_488;
    let _e4: FlatPoint = self_551;
    let _e6: FlatPoint = other_489;
    return FlatPoint((_e4.g0_ * _e6.g0_));
}

fn flat_point_flat_point_div(self_552: FlatPoint, other_490: FlatPoint) -> FlatPoint {
    var self_553: FlatPoint;
    var other_491: FlatPoint;

    self_553 = self_552;
    other_491 = other_490;
    let _e4: FlatPoint = self_553;
    let _e7: FlatPoint = self_553;
    let _e10: FlatPoint = self_553;
    let _e13: FlatPoint = self_553;
    let _e23: FlatPoint = other_491;
    let _e26: FlatPoint = other_491;
    let _e29: FlatPoint = other_491;
    let _e32: FlatPoint = other_491;
    return FlatPoint((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn flat_point_flat_point_geometric_anti_product(self_554: FlatPoint, other_492: FlatPoint) -> Translator {
    var self_555: FlatPoint;
    var other_493: FlatPoint;

    self_555 = self_554;
    other_493 = other_492;
    let _e4: FlatPoint = self_555;
    let _e8: FlatPoint = other_493;
    let _e18: FlatPoint = self_555;
    let _e21: FlatPoint = other_493;
    return Translator((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((_e18.g0_.xyzx * _e21.g0_.wwwx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn flat_point_flat_point_inner_anti_product(self_556: FlatPoint, other_494: FlatPoint) -> AntiScalar {
    var self_557: FlatPoint;
    var other_495: FlatPoint;

    self_557 = self_556;
    other_495 = other_494;
    let _e5: FlatPoint = self_557;
    let _e8: FlatPoint = other_495;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_flat_point_left_anti_contraction(self_558: FlatPoint, other_496: FlatPoint) -> AntiScalar {
    var self_559: FlatPoint;
    var other_497: FlatPoint;

    self_559 = self_558;
    other_497 = other_496;
    let _e5: FlatPoint = self_559;
    let _e8: FlatPoint = other_497;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_flat_point_right_anti_contraction(self_560: FlatPoint, other_498: FlatPoint) -> AntiScalar {
    var self_561: FlatPoint;
    var other_499: FlatPoint;

    self_561 = self_560;
    other_499 = other_498;
    let _e5: FlatPoint = self_561;
    let _e8: FlatPoint = other_499;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_flat_point_anti_scalar_product(self_562: FlatPoint, other_500: FlatPoint) -> AntiScalar {
    var self_563: FlatPoint;
    var other_501: FlatPoint;

    self_563 = self_562;
    other_501 = other_500;
    let _e5: FlatPoint = self_563;
    let _e8: FlatPoint = other_501;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_dipole_add(self_564: FlatPoint, other_502: Dipole) -> Dipole {
    var self_565: FlatPoint;
    var other_503: Dipole;

    self_565 = self_564;
    other_503 = other_502;
    let _e4: Dipole = other_503;
    let _e6: Dipole = other_503;
    let _e8: FlatPoint = self_565;
    let _e10: Dipole = other_503;
    return Dipole(_e4.g0_, _e6.g1_, (_e8.g0_ + _e10.g2_));
}

fn flat_point_dipole_sub(self_566: FlatPoint, other_504: Dipole) -> Dipole {
    var self_567: FlatPoint;
    var other_505: Dipole;

    self_567 = self_566;
    other_505 = other_504;
    let _e6: Dipole = other_505;
    let _e11: Dipole = other_505;
    let _e14: FlatPoint = self_567;
    let _e16: Dipole = other_505;
    return Dipole((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (_e14.g0_ - _e16.g2_));
}

fn flat_point_dipole_geometric_product(self_568: FlatPoint, other_506: Dipole) -> Flector {
    var self_569: FlatPoint;
    var other_507: Dipole;

    self_569 = self_568;
    other_507 = other_506;
    let _e4: FlatPoint = self_569;
    let _e8: Dipole = other_507;
    let _e11: Dipole = other_507;
    let _e14: Dipole = other_507;
    let _e17: Dipole = other_507;
    let _e30: FlatPoint = self_569;
    let _e34: Dipole = other_507;
    let _e37: Dipole = other_507;
    let _e40: Dipole = other_507;
    let _e43: Dipole = other_507;
    let _e57: FlatPoint = self_569;
    let _e61: Dipole = other_507;
    let _e64: Dipole = other_507;
    let _e67: Dipole = other_507;
    let _e70: Dipole = other_507;
    let _e84: FlatPoint = self_569;
    let _e88: Dipole = other_507;
    let _e91: Dipole = other_507;
    let _e94: Dipole = other_507;
    let _e97: Dipole = other_507;
    let _e110: FlatPoint = self_569;
    let _e114: Dipole = other_507;
    let _e117: Dipole = other_507;
    let _e120: Dipole = other_507;
    let _e123: Dipole = other_507;
    let _e137: FlatPoint = self_569;
    let _e141: Dipole = other_507;
    let _e144: Dipole = other_507;
    let _e147: Dipole = other_507;
    let _e150: Dipole = other_507;
    let _e162: FlatPoint = self_569;
    let _e166: Dipole = other_507;
    let _e169: Dipole = other_507;
    let _e172: Dipole = other_507;
    let _e175: Dipole = other_507;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e84.g0_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.z) * vec4<f32>(_e114.g0_.y, _e117.g0_.x, _e120.g0_.y, _e123.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e137.g0_.w) * vec4<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z, _e150.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g0_.x, _e169.g0_.z, _e172.g0_.y, _e175.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flat_point_dipole_outer_product(self_570: FlatPoint, other_508: Dipole) -> Plane {
    var self_571: FlatPoint;
    var other_509: Dipole;

    self_571 = self_570;
    other_509 = other_508;
    let _e4: FlatPoint = self_571;
    let _e8: Dipole = other_509;
    let _e11: Dipole = other_509;
    let _e14: Dipole = other_509;
    let _e17: Dipole = other_509;
    let _e30: FlatPoint = self_571;
    let _e34: Dipole = other_509;
    let _e37: Dipole = other_509;
    let _e40: Dipole = other_509;
    let _e43: Dipole = other_509;
    let _e57: FlatPoint = self_571;
    let _e61: Dipole = other_509;
    let _e64: Dipole = other_509;
    let _e67: Dipole = other_509;
    let _e70: Dipole = other_509;
    let _e82: FlatPoint = self_571;
    let _e86: Dipole = other_509;
    let _e89: Dipole = other_509;
    let _e92: Dipole = other_509;
    let _e95: Dipole = other_509;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flat_point_dipole_inner_anti_product(self_572: FlatPoint, other_510: Dipole) -> AntiScalar {
    var self_573: FlatPoint;
    var other_511: Dipole;

    self_573 = self_572;
    other_511 = other_510;
    let _e5: FlatPoint = self_573;
    let _e8: Dipole = other_511;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flat_point_dipole_left_anti_contraction(self_574: FlatPoint, other_512: Dipole) -> AntiScalar {
    var self_575: FlatPoint;
    var other_513: Dipole;

    self_575 = self_574;
    other_513 = other_512;
    let _e5: FlatPoint = self_575;
    let _e8: Dipole = other_513;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flat_point_dipole_right_anti_contraction(self_576: FlatPoint, other_514: Dipole) -> AntiScalar {
    var self_577: FlatPoint;
    var other_515: Dipole;

    self_577 = self_576;
    other_515 = other_514;
    let _e5: FlatPoint = self_577;
    let _e8: Dipole = other_515;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flat_point_dipole_anti_scalar_product(self_578: FlatPoint, other_516: Dipole) -> AntiScalar {
    var self_579: FlatPoint;
    var other_517: Dipole;

    self_579 = self_578;
    other_517 = other_516;
    let _e5: FlatPoint = self_579;
    let _e8: Dipole = other_517;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flat_point_line_inner_anti_product(self_580: FlatPoint, other_518: Line) -> Plane {
    var self_581: FlatPoint;
    var other_519: Line;

    self_581 = self_580;
    other_519 = other_518;
    let _e4: FlatPoint = self_581;
    let _e8: Line = other_519;
    let _e20: FlatPoint = self_581;
    let _e24: Line = other_519;
    let _e37: FlatPoint = self_581;
    let _e40: Line = other_519;
    let _e43: Line = other_519;
    let _e46: Line = other_519;
    let _e49: Line = other_519;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_line_right_anti_contraction(self_582: FlatPoint, other_520: Line) -> Plane {
    var self_583: FlatPoint;
    var other_521: Line;

    self_583 = self_582;
    other_521 = other_520;
    let _e4: FlatPoint = self_583;
    let _e8: Line = other_521;
    let _e20: FlatPoint = self_583;
    let _e24: Line = other_521;
    let _e37: FlatPoint = self_583;
    let _e40: Line = other_521;
    let _e43: Line = other_521;
    let _e46: Line = other_521;
    let _e49: Line = other_521;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_circle_regressive_product(self_584: FlatPoint, other_522: Circle) -> Scalar {
    var self_585: FlatPoint;
    var other_523: Circle;

    self_585 = self_584;
    other_523 = other_522;
    let _e5: FlatPoint = self_585;
    let _e8: Circle = other_523;
    let _e13: FlatPoint = self_585;
    let _e16: Circle = other_523;
    let _e21: FlatPoint = self_585;
    let _e24: Circle = other_523;
    let _e29: FlatPoint = self_585;
    let _e32: Circle = other_523;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn flat_point_circle_outer_product(self_586: FlatPoint, other_524: Circle) -> AntiScalar {
    var self_587: FlatPoint;
    var other_525: Circle;

    self_587 = self_586;
    other_525 = other_524;
    let _e5: FlatPoint = self_587;
    let _e8: Circle = other_525;
    let _e13: FlatPoint = self_587;
    let _e16: Circle = other_525;
    let _e21: FlatPoint = self_587;
    let _e24: Circle = other_525;
    let _e29: FlatPoint = self_587;
    let _e32: Circle = other_525;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn flat_point_circle_inner_anti_product(self_588: FlatPoint, other_526: Circle) -> Plane {
    var self_589: FlatPoint;
    var other_527: Circle;

    self_589 = self_588;
    other_527 = other_526;
    let _e4: FlatPoint = self_589;
    let _e8: Circle = other_527;
    let _e20: FlatPoint = self_589;
    let _e24: Circle = other_527;
    let _e37: FlatPoint = self_589;
    let _e40: Circle = other_527;
    let _e43: Circle = other_527;
    let _e46: Circle = other_527;
    let _e49: Circle = other_527;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_circle_right_anti_contraction(self_590: FlatPoint, other_528: Circle) -> Plane {
    var self_591: FlatPoint;
    var other_529: Circle;

    self_591 = self_590;
    other_529 = other_528;
    let _e4: FlatPoint = self_591;
    let _e8: Circle = other_529;
    let _e20: FlatPoint = self_591;
    let _e24: Circle = other_529;
    let _e37: FlatPoint = self_591;
    let _e40: Circle = other_529;
    let _e43: Circle = other_529;
    let _e46: Circle = other_529;
    let _e49: Circle = other_529;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_plane_add(self_592: FlatPoint, other_530: Plane) -> Flector {
    var self_593: FlatPoint;
    var other_531: Plane;

    self_593 = self_592;
    other_531 = other_530;
    let _e4: FlatPoint = self_593;
    let _e6: Plane = other_531;
    return Flector(_e4.g0_, _e6.g0_);
}

fn flat_point_plane_sub(self_594: FlatPoint, other_532: Plane) -> Flector {
    var self_595: FlatPoint;
    var other_533: Plane;

    self_595 = self_594;
    other_533 = other_532;
    let _e4: FlatPoint = self_595;
    let _e8: Plane = other_533;
    return Flector(_e4.g0_, (vec4<f32>(0.0) - _e8.g0_));
}

fn flat_point_plane_inner_anti_product(self_596: FlatPoint, other_534: Plane) -> Line {
    var self_597: FlatPoint;
    var other_535: Plane;

    self_597 = self_596;
    other_535 = other_534;
    let _e6: FlatPoint = self_597;
    let _e10: Plane = other_535;
    let _e13: Plane = other_535;
    let _e16: Plane = other_535;
    let _e22: FlatPoint = self_597;
    let _e26: Plane = other_535;
    let _e29: Plane = other_535;
    let _e32: Plane = other_535;
    let _e43: FlatPoint = self_597;
    let _e47: Plane = other_535;
    let _e50: Plane = other_535;
    let _e53: Plane = other_535;
    let _e65: FlatPoint = self_597;
    let _e69: Plane = other_535;
    let _e72: Plane = other_535;
    let _e75: Plane = other_535;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e43.g0_.z) * vec3<f32>(_e47.g0_.y, _e50.g0_.x, _e53.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e65.g0_.x) * vec3<f32>(_e69.g0_.x, _e72.g0_.z, _e75.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flat_point_plane_right_anti_contraction(self_598: FlatPoint, other_536: Plane) -> Line {
    var self_599: FlatPoint;
    var other_537: Plane;

    self_599 = self_598;
    other_537 = other_536;
    let _e6: FlatPoint = self_599;
    let _e10: Plane = other_537;
    let _e13: Plane = other_537;
    let _e16: Plane = other_537;
    let _e22: FlatPoint = self_599;
    let _e26: Plane = other_537;
    let _e29: Plane = other_537;
    let _e32: Plane = other_537;
    let _e43: FlatPoint = self_599;
    let _e47: Plane = other_537;
    let _e50: Plane = other_537;
    let _e53: Plane = other_537;
    let _e65: FlatPoint = self_599;
    let _e69: Plane = other_537;
    let _e72: Plane = other_537;
    let _e75: Plane = other_537;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e43.g0_.z) * vec3<f32>(_e47.g0_.y, _e50.g0_.x, _e53.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e65.g0_.x) * vec3<f32>(_e69.g0_.x, _e72.g0_.z, _e75.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flat_point_sphere_regressive_product(self_600: FlatPoint, other_538: Sphere) -> RadialPoint {
    var self_601: FlatPoint;
    var other_539: Sphere;

    self_601 = self_600;
    other_539 = other_538;
    let _e4: FlatPoint = self_601;
    let _e7: FlatPoint = self_601;
    let _e10: FlatPoint = self_601;
    let _e14: Sphere = other_539;
    let _e23: FlatPoint = self_601;
    let _e27: Sphere = other_539;
    let _e36: FlatPoint = self_601;
    let _e40: Sphere = other_539;
    let _e50: FlatPoint = self_601;
    let _e54: Sphere = other_539;
    let _e63: FlatPoint = self_601;
    let _e67: Sphere = other_539;
    return RadialPoint(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(_e14.g0_.x)) * vec3<f32>(-(1.0))), (((((vec2<f32>(_e23.g0_.y) * vec2<f32>(_e27.g1_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e36.g0_.z) * vec2<f32>(_e40.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e50.g0_.w) * _e54.g0_) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e63.g0_.x) * vec2<f32>(_e67.g1_.x)) * vec2<f32>(0.0, 1.0))));
}

fn flat_point_sphere_inner_anti_product(self_602: FlatPoint, other_540: Sphere) -> Line {
    var self_603: FlatPoint;
    var other_541: Sphere;

    self_603 = self_602;
    other_541 = other_540;
    let _e6: FlatPoint = self_603;
    let _e10: Sphere = other_541;
    let _e14: FlatPoint = self_603;
    let _e18: Sphere = other_541;
    let _e28: FlatPoint = self_603;
    let _e32: Sphere = other_541;
    let _e43: FlatPoint = self_603;
    let _e47: Sphere = other_541;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * _e10.g1_)), ((((vec3<f32>(_e14.g0_.y) * _e18.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e28.g0_.z) * _e32.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e43.g0_.x) * _e47.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flat_point_sphere_right_anti_contraction(self_604: FlatPoint, other_542: Sphere) -> Line {
    var self_605: FlatPoint;
    var other_543: Sphere;

    self_605 = self_604;
    other_543 = other_542;
    let _e6: FlatPoint = self_605;
    let _e10: Sphere = other_543;
    let _e14: FlatPoint = self_605;
    let _e18: Sphere = other_543;
    let _e28: FlatPoint = self_605;
    let _e32: Sphere = other_543;
    let _e43: FlatPoint = self_605;
    let _e47: Sphere = other_543;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * _e10.g1_)), ((((vec3<f32>(_e14.g0_.y) * _e18.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e28.g0_.z) * _e32.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e43.g0_.x) * _e47.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flat_point_motor_regressive_product(self_606: FlatPoint, other_544: Motor) -> FlatPoint {
    var self_607: FlatPoint;
    var other_545: Motor;

    self_607 = self_606;
    other_545 = other_544;
    let _e4: FlatPoint = self_607;
    let _e6: Motor = other_545;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn flat_point_motor_geometric_anti_product(self_608: FlatPoint, other_546: Motor) -> Flector {
    var self_609: FlatPoint;
    var other_547: Motor;

    self_609 = self_608;
    other_547 = other_546;
    let _e4: FlatPoint = self_609;
    let _e8: Motor = other_547;
    let _e19: FlatPoint = self_609;
    let _e23: Motor = other_547;
    let _e35: FlatPoint = self_609;
    let _e39: Motor = other_547;
    let _e42: Motor = other_547;
    let _e45: Motor = other_547;
    let _e48: Motor = other_547;
    let _e63: FlatPoint = self_609;
    let _e67: Motor = other_547;
    let _e79: FlatPoint = self_609;
    let _e83: Motor = other_547;
    let _e95: FlatPoint = self_609;
    let _e99: Motor = other_547;
    let _e112: FlatPoint = self_609;
    let _e116: Motor = other_547;
    let _e119: Motor = other_547;
    let _e122: Motor = other_547;
    let _e125: Motor = other_547;
    let _e138: FlatPoint = self_609;
    let _e142: Motor = other_547;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e63.g0_.x) * _e67.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec4<f32>(_e79.g0_.y) * vec4<f32>(_e83.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e95.g0_.z) * vec4<f32>(_e99.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e112.g0_.w) * vec4<f32>(_e116.g0_.x, _e119.g0_.y, _e122.g0_.z, _e125.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e138.g0_.x) * vec4<f32>(_e142.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flat_point_motor_inner_anti_product(self_610: FlatPoint, other_548: Motor) -> Flector {
    var self_611: FlatPoint;
    var other_549: Motor;

    self_611 = self_610;
    other_549 = other_548;
    let _e4: FlatPoint = self_611;
    let _e6: Motor = other_549;
    let _e11: FlatPoint = self_611;
    let _e15: Motor = other_549;
    let _e27: FlatPoint = self_611;
    let _e31: Motor = other_549;
    let _e44: FlatPoint = self_611;
    let _e48: Motor = other_549;
    let _e51: Motor = other_549;
    let _e54: Motor = other_549;
    let _e57: Motor = other_549;
    let _e70: FlatPoint = self_611;
    let _e74: Motor = other_549;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g0_.w) * vec4<f32>(_e48.g0_.x, _e51.g0_.y, _e54.g0_.z, _e57.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e70.g0_.x) * vec4<f32>(_e74.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flat_point_motor_right_anti_contraction(self_612: FlatPoint, other_550: Motor) -> Flector {
    var self_613: FlatPoint;
    var other_551: Motor;

    self_613 = self_612;
    other_551 = other_550;
    let _e4: FlatPoint = self_613;
    let _e6: Motor = other_551;
    let _e11: FlatPoint = self_613;
    let _e15: Motor = other_551;
    let _e27: FlatPoint = self_613;
    let _e31: Motor = other_551;
    let _e44: FlatPoint = self_613;
    let _e47: Motor = other_551;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_rotor_regressive_product(self_614: FlatPoint, other_552: Rotor) -> FlatPoint {
    var self_615: FlatPoint;
    var other_553: Rotor;

    self_615 = self_614;
    other_553 = other_552;
    let _e4: FlatPoint = self_615;
    let _e6: Rotor = other_553;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn flat_point_rotor_geometric_anti_product(self_616: FlatPoint, other_554: Rotor) -> Flector {
    var self_617: FlatPoint;
    var other_555: Rotor;

    self_617 = self_616;
    other_555 = other_554;
    let _e4: FlatPoint = self_617;
    let _e8: Rotor = other_555;
    let _e19: FlatPoint = self_617;
    let _e23: Rotor = other_555;
    let _e35: FlatPoint = self_617;
    let _e38: Rotor = other_555;
    let _e50: FlatPoint = self_617;
    let _e54: Rotor = other_555;
    let _e66: FlatPoint = self_617;
    let _e70: Rotor = other_555;
    let _e83: FlatPoint = self_617;
    let _e86: Rotor = other_555;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e35.g0_.xxxw * _e38.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec4<f32>(_e50.g0_.y) * vec4<f32>(_e54.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e66.g0_.z) * vec4<f32>(_e70.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e83.g0_.wwwx * _e86.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_rotor_inner_anti_product(self_618: FlatPoint, other_556: Rotor) -> Flector {
    var self_619: FlatPoint;
    var other_557: Rotor;

    self_619 = self_618;
    other_557 = other_556;
    let _e4: FlatPoint = self_619;
    let _e6: Rotor = other_557;
    let _e11: FlatPoint = self_619;
    let _e15: Rotor = other_557;
    let _e27: FlatPoint = self_619;
    let _e31: Rotor = other_557;
    let _e44: FlatPoint = self_619;
    let _e47: Rotor = other_557;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_rotor_right_anti_contraction(self_620: FlatPoint, other_558: Rotor) -> Flector {
    var self_621: FlatPoint;
    var other_559: Rotor;

    self_621 = self_620;
    other_559 = other_558;
    let _e4: FlatPoint = self_621;
    let _e6: Rotor = other_559;
    let _e11: FlatPoint = self_621;
    let _e15: Rotor = other_559;
    let _e27: FlatPoint = self_621;
    let _e31: Rotor = other_559;
    let _e44: FlatPoint = self_621;
    let _e47: Rotor = other_559;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flat_point_translator_regressive_product(self_622: FlatPoint, other_560: Translator) -> FlatPoint {
    var self_623: FlatPoint;
    var other_561: Translator;

    self_623 = self_622;
    other_561 = other_560;
    let _e4: FlatPoint = self_623;
    let _e6: Translator = other_561;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn flat_point_translator_geometric_anti_product(self_624: FlatPoint, other_562: Translator) -> FlatPoint {
    var self_625: FlatPoint;
    var other_563: Translator;

    self_625 = self_624;
    other_563 = other_562;
    let _e4: FlatPoint = self_625;
    let _e8: Translator = other_563;
    let _e20: FlatPoint = self_625;
    let _e23: Translator = other_563;
    return FlatPoint((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((_e20.g0_.xyzx * _e23.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn flat_point_translator_inner_anti_product(self_626: FlatPoint, other_564: Translator) -> FlatPoint {
    var self_627: FlatPoint;
    var other_565: Translator;

    self_627 = self_626;
    other_565 = other_564;
    let _e4: FlatPoint = self_627;
    let _e6: Translator = other_565;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn flat_point_translator_right_anti_contraction(self_628: FlatPoint, other_566: Translator) -> FlatPoint {
    var self_629: FlatPoint;
    var other_567: Translator;

    self_629 = self_628;
    other_567 = other_566;
    let _e4: FlatPoint = self_629;
    let _e6: Translator = other_567;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn flat_point_flector_add(self_630: FlatPoint, other_568: Flector) -> Flector {
    var self_631: FlatPoint;
    var other_569: Flector;

    self_631 = self_630;
    other_569 = other_568;
    let _e4: FlatPoint = self_631;
    let _e6: Flector = other_569;
    let _e9: Flector = other_569;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn flat_point_flector_sub(self_632: FlatPoint, other_570: Flector) -> Flector {
    var self_633: FlatPoint;
    var other_571: Flector;

    self_633 = self_632;
    other_571 = other_570;
    let _e4: FlatPoint = self_633;
    let _e6: Flector = other_571;
    let _e11: Flector = other_571;
    return Flector((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_));
}

fn flat_point_flector_geometric_anti_product(self_634: FlatPoint, other_572: Flector) -> Motor {
    var self_635: FlatPoint;
    var other_573: Flector;

    self_635 = self_634;
    other_573 = other_572;
    let _e6: FlatPoint = self_635;
    let _e10: Flector = other_573;
    let _e13: Flector = other_573;
    let _e16: Flector = other_573;
    let _e19: Flector = other_573;
    let _e25: FlatPoint = self_635;
    let _e29: Flector = other_573;
    let _e32: Flector = other_573;
    let _e35: Flector = other_573;
    let _e38: Flector = other_573;
    let _e51: FlatPoint = self_635;
    let _e55: Flector = other_573;
    let _e58: Flector = other_573;
    let _e61: Flector = other_573;
    let _e64: Flector = other_573;
    let _e78: FlatPoint = self_635;
    let _e82: Flector = other_573;
    let _e85: Flector = other_573;
    let _e88: Flector = other_573;
    let _e91: Flector = other_573;
    let _e105: FlatPoint = self_635;
    let _e109: Flector = other_573;
    let _e112: Flector = other_573;
    let _e115: Flector = other_573;
    let _e118: Flector = other_573;
    return Motor((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))), (((((vec4<f32>(_e25.g0_.x) * vec4<f32>(_e29.g0_.w, _e32.g1_.z, _e35.g1_.y, _e38.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0)) + ((vec4<f32>(_e51.g0_.y) * vec4<f32>(_e55.g1_.z, _e58.g0_.w, _e61.g1_.x, _e64.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e78.g0_.z) * vec4<f32>(_e82.g1_.y, _e85.g1_.x, _e88.g0_.w, _e91.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + (vec4<f32>(_e105.g0_.w) * vec4<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z, _e118.g1_.w))));
}

fn flat_point_flector_left_anti_contraction(self_636: FlatPoint, other_574: Flector) -> AntiScalar {
    var self_637: FlatPoint;
    var other_575: Flector;

    self_637 = self_636;
    other_575 = other_574;
    let _e5: FlatPoint = self_637;
    let _e8: Flector = other_575;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_flector_anti_scalar_product(self_638: FlatPoint, other_576: Flector) -> AntiScalar {
    var self_639: FlatPoint;
    var other_577: Flector;

    self_639 = self_638;
    other_577 = other_576;
    let _e5: FlatPoint = self_639;
    let _e8: Flector = other_577;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flat_point_dilation_outer_product(self_640: FlatPoint, other_578: Dilation) -> AntiScalar {
    var self_641: FlatPoint;
    var other_579: Dilation;

    self_641 = self_640;
    other_579 = other_578;
    let _e4: FlatPoint = self_641;
    let _e7: Dilation = other_579;
    let _e11: FlatPoint = self_641;
    let _e14: Dilation = other_579;
    let _e19: FlatPoint = self_641;
    let _e22: Dilation = other_579;
    let _e27: FlatPoint = self_641;
    let _e30: Dilation = other_579;
    return AntiScalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g0_.x)) + (_e19.g0_.z * _e22.g0_.y)) + (_e27.g0_.w * _e30.g0_.z)));
}

fn flat_point_dilation_inner_anti_product(self_642: FlatPoint, other_580: Dilation) -> FlatPoint {
    var self_643: FlatPoint;
    var other_581: Dilation;

    self_643 = self_642;
    other_581 = other_580;
    let _e4: FlatPoint = self_643;
    let _e6: Dilation = other_581;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g1_.y)));
}

fn flat_point_dilation_right_anti_contraction(self_644: FlatPoint, other_582: Dilation) -> FlatPoint {
    var self_645: FlatPoint;
    var other_583: Dilation;

    self_645 = self_644;
    other_583 = other_582;
    let _e4: FlatPoint = self_645;
    let _e6: Dilation = other_583;
    return FlatPoint((_e4.g0_ * vec4<f32>(_e6.g1_.y)));
}

fn flat_point_multi_vector_add(self_646: FlatPoint, other_584: MultiVector) -> MultiVector {
    var self_647: FlatPoint;
    var other_585: MultiVector;

    self_647 = self_646;
    other_585 = other_584;
    let _e4: MultiVector = other_585;
    let _e6: MultiVector = other_585;
    let _e8: MultiVector = other_585;
    let _e10: FlatPoint = self_647;
    let _e12: MultiVector = other_585;
    let _e15: MultiVector = other_585;
    let _e17: MultiVector = other_585;
    let _e19: MultiVector = other_585;
    let _e21: MultiVector = other_585;
    let _e23: MultiVector = other_585;
    let _e25: MultiVector = other_585;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g0_ + _e12.g3_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, _e25.g9_);
}

fn flat_point_multi_vector_sub(self_648: FlatPoint, other_586: MultiVector) -> MultiVector {
    var self_649: FlatPoint;
    var other_587: MultiVector;

    self_649 = self_648;
    other_587 = other_586;
    let _e6: MultiVector = other_587;
    let _e11: MultiVector = other_587;
    let _e16: MultiVector = other_587;
    let _e19: FlatPoint = self_649;
    let _e21: MultiVector = other_587;
    let _e26: MultiVector = other_587;
    let _e31: MultiVector = other_587;
    let _e36: MultiVector = other_587;
    let _e41: MultiVector = other_587;
    let _e46: MultiVector = other_587;
    let _e51: MultiVector = other_587;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (_e19.g0_ - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (vec3<f32>(0.0) - _e36.g6_), (vec3<f32>(0.0) - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (vec4<f32>(0.0) - _e51.g9_));
}

fn flat_point_multi_vector_geometric_anti_product(self_650: FlatPoint, other_588: MultiVector) -> MultiVector {
    var self_651: FlatPoint;
    var other_589: MultiVector;

    self_651 = self_650;
    other_589 = other_588;
    let _e4: FlatPoint = self_651;
    let _e8: MultiVector = other_589;
    let _e19: FlatPoint = self_651;
    let _e23: MultiVector = other_589;
    let _e35: FlatPoint = self_651;
    let _e39: MultiVector = other_589;
    let _e42: MultiVector = other_589;
    let _e45: MultiVector = other_589;
    let _e58: FlatPoint = self_651;
    let _e62: MultiVector = other_589;
    let _e74: FlatPoint = self_651;
    let _e78: MultiVector = other_589;
    let _e81: MultiVector = other_589;
    let _e84: MultiVector = other_589;
    let _e96: FlatPoint = self_651;
    let _e100: MultiVector = other_589;
    let _e103: MultiVector = other_589;
    let _e106: MultiVector = other_589;
    let _e119: FlatPoint = self_651;
    let _e123: MultiVector = other_589;
    let _e126: MultiVector = other_589;
    let _e129: MultiVector = other_589;
    let _e142: FlatPoint = self_651;
    let _e146: MultiVector = other_589;
    let _e150: FlatPoint = self_651;
    let _e154: MultiVector = other_589;
    let _e163: FlatPoint = self_651;
    let _e167: MultiVector = other_589;
    let _e177: FlatPoint = self_651;
    let _e181: MultiVector = other_589;
    let _e184: MultiVector = other_589;
    let _e195: FlatPoint = self_651;
    let _e199: MultiVector = other_589;
    let _e209: FlatPoint = self_651;
    let _e213: MultiVector = other_589;
    let _e216: MultiVector = other_589;
    let _e219: MultiVector = other_589;
    let _e222: MultiVector = other_589;
    let _e234: FlatPoint = self_651;
    let _e238: MultiVector = other_589;
    let _e241: MultiVector = other_589;
    let _e244: MultiVector = other_589;
    let _e247: MultiVector = other_589;
    let _e260: FlatPoint = self_651;
    let _e264: MultiVector = other_589;
    let _e267: MultiVector = other_589;
    let _e270: MultiVector = other_589;
    let _e273: MultiVector = other_589;
    let _e288: FlatPoint = self_651;
    let _e292: MultiVector = other_589;
    let _e295: MultiVector = other_589;
    let _e298: MultiVector = other_589;
    let _e301: MultiVector = other_589;
    let _e314: FlatPoint = self_651;
    let _e318: MultiVector = other_589;
    let _e321: MultiVector = other_589;
    let _e324: MultiVector = other_589;
    let _e329: FlatPoint = self_651;
    let _e333: MultiVector = other_589;
    let _e336: MultiVector = other_589;
    let _e339: MultiVector = other_589;
    let _e350: FlatPoint = self_651;
    let _e354: MultiVector = other_589;
    let _e357: MultiVector = other_589;
    let _e360: MultiVector = other_589;
    let _e372: FlatPoint = self_651;
    let _e376: MultiVector = other_589;
    let _e379: MultiVector = other_589;
    let _e382: MultiVector = other_589;
    let _e394: FlatPoint = self_651;
    let _e398: MultiVector = other_589;
    let _e404: FlatPoint = self_651;
    let _e408: MultiVector = other_589;
    let _e411: MultiVector = other_589;
    let _e414: MultiVector = other_589;
    let _e420: FlatPoint = self_651;
    let _e424: MultiVector = other_589;
    let _e427: MultiVector = other_589;
    let _e430: MultiVector = other_589;
    let _e442: FlatPoint = self_651;
    let _e446: MultiVector = other_589;
    let _e449: MultiVector = other_589;
    let _e452: MultiVector = other_589;
    let _e465: FlatPoint = self_651;
    let _e469: MultiVector = other_589;
    let _e472: MultiVector = other_589;
    let _e475: MultiVector = other_589;
    let _e488: FlatPoint = self_651;
    let _e492: MultiVector = other_589;
    let _e495: MultiVector = other_589;
    let _e498: MultiVector = other_589;
    let _e504: FlatPoint = self_651;
    let _e508: MultiVector = other_589;
    let _e519: FlatPoint = self_651;
    let _e523: MultiVector = other_589;
    let _e535: FlatPoint = self_651;
    let _e539: MultiVector = other_589;
    let _e542: MultiVector = other_589;
    let _e545: MultiVector = other_589;
    let _e548: MultiVector = other_589;
    let _e563: FlatPoint = self_651;
    let _e567: MultiVector = other_589;
    let _e579: FlatPoint = self_651;
    let _e583: MultiVector = other_589;
    let _e595: FlatPoint = self_651;
    let _e599: MultiVector = other_589;
    let _e612: FlatPoint = self_651;
    let _e616: MultiVector = other_589;
    let _e619: MultiVector = other_589;
    let _e622: MultiVector = other_589;
    let _e625: MultiVector = other_589;
    let _e638: FlatPoint = self_651;
    let _e642: MultiVector = other_589;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g8_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g8_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g0_.w) * vec3<f32>(_e39.g8_.w, _e42.g2_.x, _e45.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e58.g0_.x) * vec3<f32>(_e62.g8_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((vec3<f32>(_e74.g0_.x) * vec3<f32>(_e78.g0_.y, _e81.g4_.z, _e84.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e96.g0_.y) * vec3<f32>(_e100.g4_.z, _e103.g0_.y, _e106.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e119.g0_.z) * vec3<f32>(_e123.g4_.y, _e126.g4_.x, _e129.g0_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e142.g0_.w) * _e146.g5_)), (((((vec2<f32>(_e150.g0_.y) * vec2<f32>(_e154.g9_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e163.g0_.z) * vec2<f32>(_e167.g9_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e177.g0_.w) * vec2<f32>(_e181.g0_.y, _e184.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e195.g0_.x) * vec2<f32>(_e199.g9_.x)) * vec2<f32>(0.0, 1.0))), (((((vec4<f32>(_e209.g0_.y) * vec4<f32>(_e213.g6_.z, _e216.g0_.z, _e219.g6_.x, _e222.g6_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e234.g0_.z) * vec4<f32>(_e238.g6_.y, _e241.g6_.x, _e244.g0_.z, _e247.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e260.g0_.w) * vec4<f32>(_e264.g7_.x, _e267.g7_.y, _e270.g7_.z, _e273.g0_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e288.g0_.x) * vec4<f32>(_e292.g0_.z, _e295.g6_.z, _e298.g6_.y, _e301.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e314.g0_.w) * vec3<f32>(_e318.g8_.x, _e321.g8_.y, _e324.g8_.z)), (((((vec3<f32>(_e329.g0_.x) * vec3<f32>(_e333.g2_.x, _e336.g8_.z, _e339.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e350.g0_.y) * vec3<f32>(_e354.g8_.z, _e357.g2_.x, _e360.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e372.g0_.z) * vec3<f32>(_e376.g8_.y, _e379.g8_.x, _e382.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e394.g0_.w) * _e398.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e404.g0_.w) * vec3<f32>(_e408.g9_.x, _e411.g9_.y, _e414.g9_.z))), (((((vec3<f32>(_e420.g0_.x) * vec3<f32>(_e424.g3_.w, _e427.g9_.z, _e430.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e442.g0_.y) * vec3<f32>(_e446.g9_.z, _e449.g3_.w, _e452.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e465.g0_.z) * vec3<f32>(_e469.g9_.y, _e472.g9_.x, _e475.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e488.g0_.w) * vec3<f32>(_e492.g3_.x, _e495.g3_.y, _e498.g3_.z))), (((((vec4<f32>(_e504.g0_.y) * vec4<f32>(_e508.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e519.g0_.z) * vec4<f32>(_e523.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e535.g0_.w) * vec4<f32>(_e539.g4_.x, _e542.g4_.y, _e545.g4_.z, _e548.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e563.g0_.x) * vec4<f32>(_e567.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e579.g0_.y) * vec4<f32>(_e583.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e595.g0_.z) * vec4<f32>(_e599.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e612.g0_.w) * vec4<f32>(_e616.g6_.x, _e619.g6_.y, _e622.g6_.z, _e625.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e638.g0_.x) * vec4<f32>(_e642.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flat_point_multi_vector_anti_scalar_product(self_652: FlatPoint, other_590: MultiVector) -> AntiScalar {
    var self_653: FlatPoint;
    var other_591: MultiVector;

    self_653 = self_652;
    other_591 = other_590;
    let _e5: FlatPoint = self_653;
    let _e8: MultiVector = other_591;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g3_.w)));
}

fn flat_point_scale(self_654: FlatPoint, other_592: f32) -> FlatPoint {
    var self_655: FlatPoint;
    var other_593: f32;

    self_655 = self_654;
    other_593 = other_592;
    let _e4: FlatPoint = self_655;
    let _e5: f32 = other_593;
    let _e7: FlatPoint = flat_point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn dipole_zero() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dipole_one() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dipole_neg(self_656: Dipole) -> Dipole {
    var self_657: Dipole;

    self_657 = self_656;
    let _e2: Dipole = self_657;
    let _e8: Dipole = self_657;
    let _e14: Dipole = self_657;
    return Dipole((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec4<f32>(-(1.0))));
}

fn dipole_automorphism(self_658: Dipole) -> Dipole {
    var self_659: Dipole;

    self_659 = self_658;
    let _e2: Dipole = self_659;
    let _e4: Dipole = self_659;
    let _e6: Dipole = self_659;
    return Dipole(_e2.g0_, _e4.g1_, _e6.g2_);
}

fn dipole_reversal(self_660: Dipole) -> Dipole {
    var self_661: Dipole;

    self_661 = self_660;
    let _e2: Dipole = self_661;
    let _e8: Dipole = self_661;
    let _e14: Dipole = self_661;
    return Dipole((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec4<f32>(-(1.0))));
}

fn dipole_conjugation(self_662: Dipole) -> Dipole {
    var self_663: Dipole;

    self_663 = self_662;
    let _e2: Dipole = self_663;
    let _e8: Dipole = self_663;
    let _e14: Dipole = self_663;
    return Dipole((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec4<f32>(-(1.0))));
}

fn dipole_dual(self_664: Dipole) -> Circle {
    var self_665: Dipole;

    self_665 = self_664;
    let _e2: Dipole = self_665;
    let _e8: Dipole = self_665;
    let _e14: Dipole = self_665;
    return Circle((_e2.g2_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g0_ * vec3<f32>(-(1.0))));
}

fn dipole_anti_reversal(self_666: Dipole) -> Dipole {
    var self_667: Dipole;

    self_667 = self_666;
    let _e2: Dipole = self_667;
    let _e8: Dipole = self_667;
    let _e14: Dipole = self_667;
    return Dipole((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec4<f32>(-(1.0))));
}

fn dipole_scalar_geometric_product(self_668: Dipole, other_594: Scalar) -> Dipole {
    var self_669: Dipole;
    var other_595: Scalar;

    self_669 = self_668;
    other_595 = other_594;
    let _e4: Dipole = self_669;
    let _e6: Scalar = other_595;
    let _e10: Dipole = self_669;
    let _e12: Scalar = other_595;
    let _e16: Dipole = self_669;
    let _e18: Scalar = other_595;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_scalar_outer_product(self_670: Dipole, other_596: Scalar) -> Dipole {
    var self_671: Dipole;
    var other_597: Scalar;

    self_671 = self_670;
    other_597 = other_596;
    let _e4: Dipole = self_671;
    let _e6: Scalar = other_597;
    let _e10: Dipole = self_671;
    let _e12: Scalar = other_597;
    let _e16: Dipole = self_671;
    let _e18: Scalar = other_597;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_scalar_inner_product(self_672: Dipole, other_598: Scalar) -> Dipole {
    var self_673: Dipole;
    var other_599: Scalar;

    self_673 = self_672;
    other_599 = other_598;
    let _e4: Dipole = self_673;
    let _e6: Scalar = other_599;
    let _e10: Dipole = self_673;
    let _e12: Scalar = other_599;
    let _e16: Dipole = self_673;
    let _e18: Scalar = other_599;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_scalar_right_contraction(self_674: Dipole, other_600: Scalar) -> Dipole {
    var self_675: Dipole;
    var other_601: Scalar;

    self_675 = self_674;
    other_601 = other_600;
    let _e4: Dipole = self_675;
    let _e6: Scalar = other_601;
    let _e10: Dipole = self_675;
    let _e12: Scalar = other_601;
    let _e16: Dipole = self_675;
    let _e18: Scalar = other_601;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_anti_scalar_regressive_product(self_676: Dipole, other_602: AntiScalar) -> Dipole {
    var self_677: Dipole;
    var other_603: AntiScalar;

    self_677 = self_676;
    other_603 = other_602;
    let _e4: Dipole = self_677;
    let _e6: AntiScalar = other_603;
    let _e10: Dipole = self_677;
    let _e12: AntiScalar = other_603;
    let _e16: Dipole = self_677;
    let _e18: AntiScalar = other_603;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_anti_scalar_geometric_anti_product(self_678: Dipole, other_604: AntiScalar) -> Dipole {
    var self_679: Dipole;
    var other_605: AntiScalar;

    self_679 = self_678;
    other_605 = other_604;
    let _e4: Dipole = self_679;
    let _e6: AntiScalar = other_605;
    let _e10: Dipole = self_679;
    let _e12: AntiScalar = other_605;
    let _e16: Dipole = self_679;
    let _e18: AntiScalar = other_605;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_anti_scalar_inner_anti_product(self_680: Dipole, other_606: AntiScalar) -> Dipole {
    var self_681: Dipole;
    var other_607: AntiScalar;

    self_681 = self_680;
    other_607 = other_606;
    let _e4: Dipole = self_681;
    let _e6: AntiScalar = other_607;
    let _e10: Dipole = self_681;
    let _e12: AntiScalar = other_607;
    let _e16: Dipole = self_681;
    let _e18: AntiScalar = other_607;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_anti_scalar_right_anti_contraction(self_682: Dipole, other_608: AntiScalar) -> Dipole {
    var self_683: Dipole;
    var other_609: AntiScalar;

    self_683 = self_682;
    other_609 = other_608;
    let _e4: Dipole = self_683;
    let _e6: AntiScalar = other_609;
    let _e10: Dipole = self_683;
    let _e12: AntiScalar = other_609;
    let _e16: Dipole = self_683;
    let _e18: AntiScalar = other_609;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)));
}

fn dipole_radial_point_outer_product(self_684: Dipole, other_610: RadialPoint) -> Circle {
    var self_685: Dipole;
    var other_611: RadialPoint;

    self_685 = self_684;
    other_611 = other_610;
    let _e4: Dipole = self_685;
    let _e8: RadialPoint = other_611;
    let _e11: RadialPoint = other_611;
    let _e14: RadialPoint = other_611;
    let _e17: RadialPoint = other_611;
    let _e29: Dipole = self_685;
    let _e33: RadialPoint = other_611;
    let _e36: RadialPoint = other_611;
    let _e39: RadialPoint = other_611;
    let _e42: RadialPoint = other_611;
    let _e55: Dipole = self_685;
    let _e59: RadialPoint = other_611;
    let _e62: RadialPoint = other_611;
    let _e65: RadialPoint = other_611;
    let _e68: RadialPoint = other_611;
    let _e81: Dipole = self_685;
    let _e85: RadialPoint = other_611;
    let _e88: RadialPoint = other_611;
    let _e91: RadialPoint = other_611;
    let _e94: RadialPoint = other_611;
    let _e107: Dipole = self_685;
    let _e111: RadialPoint = other_611;
    let _e114: RadialPoint = other_611;
    let _e117: RadialPoint = other_611;
    let _e120: RadialPoint = other_611;
    let _e133: Dipole = self_685;
    let _e137: RadialPoint = other_611;
    let _e140: RadialPoint = other_611;
    let _e143: RadialPoint = other_611;
    let _e146: RadialPoint = other_611;
    let _e159: Dipole = self_685;
    let _e163: RadialPoint = other_611;
    let _e173: Dipole = self_685;
    let _e177: RadialPoint = other_611;
    let _e188: Dipole = self_685;
    let _e192: RadialPoint = other_611;
    let _e203: Dipole = self_685;
    let _e207: RadialPoint = other_611;
    let _e211: Dipole = self_685;
    let _e213: RadialPoint = other_611;
    let _e219: Dipole = self_685;
    let _e223: RadialPoint = other_611;
    let _e233: Dipole = self_685;
    let _e237: RadialPoint = other_611;
    let _e248: Dipole = self_685;
    let _e252: RadialPoint = other_611;
    let _e263: Dipole = self_685;
    let _e265: RadialPoint = other_611;
    return Circle((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g1_.x, _e62.g1_.x, _e65.g1_.x, _e68.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e81.g1_.y) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.x, _e94.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e107.g1_.z) * vec4<f32>(_e111.g1_.x, _e114.g1_.x, _e117.g1_.x, _e120.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y, _e146.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((((vec3<f32>(_e159.g2_.x) * vec3<f32>(_e163.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e173.g2_.y) * vec3<f32>(_e177.g1_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e188.g2_.z) * vec3<f32>(_e192.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e203.g2_.w) * _e207.g0_)) + (_e211.g0_ * vec3<f32>(_e213.g1_.y))), (((((vec3<f32>(_e219.g2_.x) * _e223.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e233.g2_.y) * _e237.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e248.g2_.z) * _e252.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e263.g1_ * vec3<f32>(_e265.g1_.y))));
}

fn dipole_radial_point_inner_product(self_686: Dipole, other_612: RadialPoint) -> RadialPoint {
    var self_687: Dipole;
    var other_613: RadialPoint;

    self_687 = self_686;
    other_613 = other_612;
    let _e4: Dipole = self_687;
    let _e8: RadialPoint = other_613;
    let _e18: Dipole = self_687;
    let _e22: RadialPoint = other_613;
    let _e33: Dipole = self_687;
    let _e37: RadialPoint = other_613;
    let _e48: Dipole = self_687;
    let _e52: RadialPoint = other_613;
    let _e61: Dipole = self_687;
    let _e65: RadialPoint = other_613;
    let _e75: Dipole = self_687;
    let _e79: RadialPoint = other_613;
    let _e90: Dipole = self_687;
    let _e94: RadialPoint = other_613;
    let _e105: Dipole = self_687;
    let _e109: RadialPoint = other_613;
    let _e120: Dipole = self_687;
    let _e124: RadialPoint = other_613;
    return RadialPoint(((((vec3<f32>(_e4.g1_.y) * _e8.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g1_.z) * _e22.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g1_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec2<f32>(_e48.g0_.y) * vec2<f32>(_e52.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e61.g0_.z) * vec2<f32>(_e65.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e75.g2_.x) * vec2<f32>(_e79.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e90.g2_.y) * vec2<f32>(_e94.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e105.g2_.z) * vec2<f32>(_e109.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e120.g0_.x) * vec2<f32>(_e124.g0_.x)) * vec2<f32>(1.0, 0.0))));
}

fn dipole_radial_point_right_contraction(self_688: Dipole, other_614: RadialPoint) -> RadialPoint {
    var self_689: Dipole;
    var other_615: RadialPoint;

    self_689 = self_688;
    other_615 = other_614;
    let _e4: Dipole = self_689;
    let _e8: RadialPoint = other_615;
    let _e18: Dipole = self_689;
    let _e22: RadialPoint = other_615;
    let _e33: Dipole = self_689;
    let _e37: RadialPoint = other_615;
    let _e48: Dipole = self_689;
    let _e52: RadialPoint = other_615;
    let _e61: Dipole = self_689;
    let _e65: RadialPoint = other_615;
    let _e75: Dipole = self_689;
    let _e79: RadialPoint = other_615;
    let _e90: Dipole = self_689;
    let _e94: RadialPoint = other_615;
    let _e105: Dipole = self_689;
    let _e109: RadialPoint = other_615;
    let _e120: Dipole = self_689;
    let _e124: RadialPoint = other_615;
    return RadialPoint(((((vec3<f32>(_e4.g1_.y) * _e8.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g1_.z) * _e22.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g1_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec2<f32>(_e48.g0_.y) * vec2<f32>(_e52.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e61.g0_.z) * vec2<f32>(_e65.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e75.g2_.x) * vec2<f32>(_e79.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e90.g2_.y) * vec2<f32>(_e94.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e105.g2_.z) * vec2<f32>(_e109.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e120.g0_.x) * vec2<f32>(_e124.g0_.x)) * vec2<f32>(1.0, 0.0))));
}

fn dipole_flat_point_into(self_690: Dipole) -> FlatPoint {
    var self_691: Dipole;

    self_691 = self_690;
    let _e2: Dipole = self_691;
    return FlatPoint(_e2.g2_);
}

fn dipole_flat_point_add(self_692: Dipole, other_616: FlatPoint) -> Dipole {
    var self_693: Dipole;
    var other_617: FlatPoint;

    self_693 = self_692;
    other_617 = other_616;
    let _e4: Dipole = self_693;
    let _e6: Dipole = self_693;
    let _e8: Dipole = self_693;
    let _e10: FlatPoint = other_617;
    return Dipole(_e4.g0_, _e6.g1_, (_e8.g2_ + _e10.g0_));
}

fn dipole_flat_point_sub(self_694: Dipole, other_618: FlatPoint) -> Dipole {
    var self_695: Dipole;
    var other_619: FlatPoint;

    self_695 = self_694;
    other_619 = other_618;
    let _e4: Dipole = self_695;
    let _e6: Dipole = self_695;
    let _e8: Dipole = self_695;
    let _e10: FlatPoint = other_619;
    return Dipole(_e4.g0_, _e6.g1_, (_e8.g2_ - _e10.g0_));
}

fn dipole_flat_point_geometric_product(self_696: Dipole, other_620: FlatPoint) -> Flector {
    var self_697: Dipole;
    var other_621: FlatPoint;

    self_697 = self_696;
    other_621 = other_620;
    let _e4: Dipole = self_697;
    let _e8: FlatPoint = other_621;
    let _e19: Dipole = self_697;
    let _e23: FlatPoint = other_621;
    let _e35: Dipole = self_697;
    let _e39: FlatPoint = other_621;
    let _e51: Dipole = self_697;
    let _e55: FlatPoint = other_621;
    let _e67: Dipole = self_697;
    let _e70: Dipole = self_697;
    let _e73: Dipole = self_697;
    let _e76: Dipole = self_697;
    let _e80: FlatPoint = other_621;
    let _e92: Dipole = self_697;
    let _e96: FlatPoint = other_621;
    let _e107: Dipole = self_697;
    let _e111: FlatPoint = other_621;
    let _e123: Dipole = self_697;
    let _e127: FlatPoint = other_621;
    let _e139: Dipole = self_697;
    let _e143: FlatPoint = other_621;
    let _e155: Dipole = self_697;
    let _e158: Dipole = self_697;
    let _e161: Dipole = self_697;
    let _e164: Dipole = self_697;
    let _e168: FlatPoint = other_621;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((((((vec4<f32>(_e92.g0_.y) * _e96.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e107.g0_.z) * _e111.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e123.g1_.y) * _e127.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e139.g1_.z) * _e143.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e155.g1_.x, _e158.g0_.x, _e161.g0_.x, _e164.g1_.x) * _e168.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn dipole_flat_point_outer_product(self_698: Dipole, other_622: FlatPoint) -> Plane {
    var self_699: Dipole;
    var other_623: FlatPoint;

    self_699 = self_698;
    other_623 = other_622;
    let _e4: Dipole = self_699;
    let _e8: FlatPoint = other_623;
    let _e19: Dipole = self_699;
    let _e23: FlatPoint = other_623;
    let _e35: Dipole = self_699;
    let _e39: FlatPoint = other_623;
    let _e51: Dipole = self_699;
    let _e55: FlatPoint = other_623;
    let _e67: Dipole = self_699;
    let _e70: Dipole = self_699;
    let _e73: Dipole = self_699;
    let _e76: Dipole = self_699;
    let _e80: FlatPoint = other_623;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn dipole_flat_point_inner_anti_product(self_700: Dipole, other_624: FlatPoint) -> AntiScalar {
    var self_701: Dipole;
    var other_625: FlatPoint;

    self_701 = self_700;
    other_625 = other_624;
    let _e5: Dipole = self_701;
    let _e8: FlatPoint = other_625;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_flat_point_left_anti_contraction(self_702: Dipole, other_626: FlatPoint) -> AntiScalar {
    var self_703: Dipole;
    var other_627: FlatPoint;

    self_703 = self_702;
    other_627 = other_626;
    let _e5: Dipole = self_703;
    let _e8: FlatPoint = other_627;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_flat_point_right_anti_contraction(self_704: Dipole, other_628: FlatPoint) -> AntiScalar {
    var self_705: Dipole;
    var other_629: FlatPoint;

    self_705 = self_704;
    other_629 = other_628;
    let _e5: Dipole = self_705;
    let _e8: FlatPoint = other_629;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_flat_point_anti_scalar_product(self_706: Dipole, other_630: FlatPoint) -> AntiScalar {
    var self_707: Dipole;
    var other_631: FlatPoint;

    self_707 = self_706;
    other_631 = other_630;
    let _e5: Dipole = self_707;
    let _e8: FlatPoint = other_631;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_dipole_add(self_708: Dipole, other_632: Dipole) -> Dipole {
    var self_709: Dipole;
    var other_633: Dipole;

    self_709 = self_708;
    other_633 = other_632;
    let _e4: Dipole = self_709;
    let _e6: Dipole = other_633;
    let _e9: Dipole = self_709;
    let _e11: Dipole = other_633;
    let _e14: Dipole = self_709;
    let _e16: Dipole = other_633;
    return Dipole((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_));
}

fn dipole_dipole_sub(self_710: Dipole, other_634: Dipole) -> Dipole {
    var self_711: Dipole;
    var other_635: Dipole;

    self_711 = self_710;
    other_635 = other_634;
    let _e4: Dipole = self_711;
    let _e6: Dipole = other_635;
    let _e9: Dipole = self_711;
    let _e11: Dipole = other_635;
    let _e14: Dipole = self_711;
    let _e16: Dipole = other_635;
    return Dipole((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_));
}

fn dipole_dipole_mul(self_712: Dipole, other_636: Dipole) -> Dipole {
    var self_713: Dipole;
    var other_637: Dipole;

    self_713 = self_712;
    other_637 = other_636;
    let _e4: Dipole = self_713;
    let _e6: Dipole = other_637;
    let _e9: Dipole = self_713;
    let _e11: Dipole = other_637;
    let _e14: Dipole = self_713;
    let _e16: Dipole = other_637;
    return Dipole((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_));
}

fn dipole_dipole_div(self_714: Dipole, other_638: Dipole) -> Dipole {
    var self_715: Dipole;
    var other_639: Dipole;

    self_715 = self_714;
    other_639 = other_638;
    let _e4: Dipole = self_715;
    let _e7: Dipole = self_715;
    let _e10: Dipole = self_715;
    let _e19: Dipole = other_639;
    let _e22: Dipole = other_639;
    let _e25: Dipole = other_639;
    let _e35: Dipole = self_715;
    let _e38: Dipole = self_715;
    let _e41: Dipole = self_715;
    let _e50: Dipole = other_639;
    let _e53: Dipole = other_639;
    let _e56: Dipole = other_639;
    let _e66: Dipole = self_715;
    let _e69: Dipole = self_715;
    let _e72: Dipole = self_715;
    let _e75: Dipole = self_715;
    let _e85: Dipole = other_639;
    let _e88: Dipole = other_639;
    let _e91: Dipole = other_639;
    let _e94: Dipole = other_639;
    return Dipole((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec4<f32>(_e66.g2_.x, _e69.g2_.y, _e72.g2_.z, _e75.g2_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e85.g2_.x, _e88.g2_.y, _e91.g2_.z, _e94.g2_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn dipole_dipole_outer_product(self_716: Dipole, other_640: Dipole) -> Sphere {
    var self_717: Dipole;
    var other_641: Dipole;

    self_717 = self_716;
    other_641 = other_640;
    let _e4: Dipole = self_717;
    let _e8: Dipole = other_641;
    let _e18: Dipole = self_717;
    let _e22: Dipole = other_641;
    let _e33: Dipole = self_717;
    let _e37: Dipole = other_641;
    let _e40: Dipole = other_641;
    let _e46: Dipole = self_717;
    let _e50: Dipole = other_641;
    let _e53: Dipole = other_641;
    let _e59: Dipole = self_717;
    let _e63: Dipole = other_641;
    let _e66: Dipole = other_641;
    let _e72: Dipole = self_717;
    let _e76: Dipole = other_641;
    let _e87: Dipole = self_717;
    let _e91: Dipole = other_641;
    let _e102: Dipole = self_717;
    let _e106: Dipole = other_641;
    let _e117: Dipole = self_717;
    let _e121: Dipole = other_641;
    let _e132: Dipole = self_717;
    let _e136: Dipole = other_641;
    let _e139: Dipole = other_641;
    let _e142: Dipole = other_641;
    let _e153: Dipole = self_717;
    let _e157: Dipole = other_641;
    let _e160: Dipole = other_641;
    let _e163: Dipole = other_641;
    let _e175: Dipole = self_717;
    let _e179: Dipole = other_641;
    let _e190: Dipole = self_717;
    let _e194: Dipole = other_641;
    let _e205: Dipole = self_717;
    let _e209: Dipole = other_641;
    let _e220: Dipole = self_717;
    let _e224: Dipole = other_641;
    let _e235: Dipole = self_717;
    let _e239: Dipole = other_641;
    let _e250: Dipole = self_717;
    let _e254: Dipole = other_641;
    let _e258: Dipole = self_717;
    let _e261: Dipole = self_717;
    let _e264: Dipole = self_717;
    let _e268: Dipole = other_641;
    let _e271: Dipole = other_641;
    let _e274: Dipole = other_641;
    return Sphere(((((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(-(1.0), 0.0))) - (vec2<f32>(_e33.g1_.x) * vec2<f32>(_e37.g0_.x, _e40.g2_.x))) - (vec2<f32>(_e46.g1_.y) * vec2<f32>(_e50.g0_.y, _e53.g2_.y))) - (vec2<f32>(_e59.g1_.z) * vec2<f32>(_e63.g0_.z, _e66.g2_.z))) + ((vec2<f32>(_e72.g2_.x) * vec2<f32>(_e76.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e87.g2_.y) * vec2<f32>(_e91.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e102.g2_.z) * vec2<f32>(_e106.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e117.g0_.x) * vec2<f32>(_e121.g1_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((((vec3<f32>(_e132.g0_.y) * vec3<f32>(_e136.g2_.z, _e139.g2_.z, _e142.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e153.g0_.z) * vec3<f32>(_e157.g2_.y, _e160.g2_.x, _e163.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e175.g1_.y) * vec3<f32>(_e179.g2_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e190.g1_.z) * vec3<f32>(_e194.g2_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e205.g2_.x) * _e209.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e220.g2_.y) * _e224.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e235.g2_.z) * _e239.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e250.g2_.w) * _e254.g1_)) + ((vec3<f32>(_e258.g1_.x, _e261.g0_.x, _e264.g0_.x) * vec3<f32>(_e268.g2_.w, _e271.g2_.z, _e274.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))));
}

fn dipole_dipole_inner_product(self_718: Dipole, other_642: Dipole) -> Scalar {
    var self_719: Dipole;
    var other_643: Dipole;

    self_719 = self_718;
    other_643 = other_642;
    let _e5: Dipole = self_719;
    let _e8: Dipole = other_643;
    let _e13: Dipole = self_719;
    let _e16: Dipole = other_643;
    let _e21: Dipole = self_719;
    let _e24: Dipole = other_643;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn dipole_dipole_inner_anti_product(self_720: Dipole, other_644: Dipole) -> AntiScalar {
    var self_721: Dipole;
    var other_645: Dipole;

    self_721 = self_720;
    other_645 = other_644;
    let _e5: Dipole = self_721;
    let _e8: Dipole = other_645;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g2_.w)));
}

fn dipole_dipole_left_contraction(self_722: Dipole, other_646: Dipole) -> Scalar {
    var self_723: Dipole;
    var other_647: Dipole;

    self_723 = self_722;
    other_647 = other_646;
    let _e5: Dipole = self_723;
    let _e8: Dipole = other_647;
    let _e13: Dipole = self_723;
    let _e16: Dipole = other_647;
    let _e21: Dipole = self_723;
    let _e24: Dipole = other_647;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn dipole_dipole_right_contraction(self_724: Dipole, other_648: Dipole) -> Scalar {
    var self_725: Dipole;
    var other_649: Dipole;

    self_725 = self_724;
    other_649 = other_648;
    let _e5: Dipole = self_725;
    let _e8: Dipole = other_649;
    let _e13: Dipole = self_725;
    let _e16: Dipole = other_649;
    let _e21: Dipole = self_725;
    let _e24: Dipole = other_649;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn dipole_dipole_left_anti_contraction(self_726: Dipole, other_650: Dipole) -> AntiScalar {
    var self_727: Dipole;
    var other_651: Dipole;

    self_727 = self_726;
    other_651 = other_650;
    let _e5: Dipole = self_727;
    let _e8: Dipole = other_651;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g2_.w)));
}

fn dipole_dipole_right_anti_contraction(self_728: Dipole, other_652: Dipole) -> AntiScalar {
    var self_729: Dipole;
    var other_653: Dipole;

    self_729 = self_728;
    other_653 = other_652;
    let _e5: Dipole = self_729;
    let _e8: Dipole = other_653;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g2_.w)));
}

fn dipole_dipole_scalar_product(self_730: Dipole, other_654: Dipole) -> Scalar {
    var self_731: Dipole;
    var other_655: Dipole;

    self_731 = self_730;
    other_655 = other_654;
    let _e5: Dipole = self_731;
    let _e8: Dipole = other_655;
    let _e13: Dipole = self_731;
    let _e16: Dipole = other_655;
    let _e21: Dipole = self_731;
    let _e24: Dipole = other_655;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn dipole_dipole_anti_scalar_product(self_732: Dipole, other_656: Dipole) -> AntiScalar {
    var self_733: Dipole;
    var other_657: Dipole;

    self_733 = self_732;
    other_657 = other_656;
    let _e5: Dipole = self_733;
    let _e8: Dipole = other_657;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g2_.w)));
}

fn dipole_line_geometric_product(self_734: Dipole, other_658: Line) -> Motor {
    var self_735: Dipole;
    var other_659: Line;

    self_735 = self_734;
    other_659 = other_658;
    let _e4: Dipole = self_735;
    let _e8: Line = other_659;
    let _e11: Line = other_659;
    let _e14: Line = other_659;
    let _e17: Line = other_659;
    let _e30: Dipole = self_735;
    let _e34: Line = other_659;
    let _e37: Line = other_659;
    let _e40: Line = other_659;
    let _e43: Line = other_659;
    let _e57: Dipole = self_735;
    let _e61: Line = other_659;
    let _e64: Line = other_659;
    let _e67: Line = other_659;
    let _e70: Line = other_659;
    let _e84: Dipole = self_735;
    let _e88: Line = other_659;
    let _e91: Line = other_659;
    let _e94: Line = other_659;
    let _e97: Line = other_659;
    let _e111: Dipole = self_735;
    let _e115: Line = other_659;
    let _e118: Line = other_659;
    let _e121: Line = other_659;
    let _e124: Line = other_659;
    let _e138: Dipole = self_735;
    let _e142: Line = other_659;
    let _e145: Line = other_659;
    let _e148: Line = other_659;
    let _e151: Line = other_659;
    let _e165: Dipole = self_735;
    let _e169: Line = other_659;
    let _e172: Line = other_659;
    let _e175: Line = other_659;
    let _e178: Line = other_659;
    let _e191: Dipole = self_735;
    let _e195: Line = other_659;
    let _e198: Line = other_659;
    let _e201: Line = other_659;
    let _e204: Line = other_659;
    let _e218: Dipole = self_735;
    let _e222: Line = other_659;
    let _e225: Line = other_659;
    let _e228: Line = other_659;
    let _e231: Line = other_659;
    return Motor((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g0_.z, _e64.g0_.z, _e67.g0_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e111.g1_.z) * vec4<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y, _e124.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e138.g0_.x) * vec4<f32>(_e142.g1_.x, _e145.g1_.z, _e148.g1_.y, _e151.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e165.g1_.y) * vec4<f32>(_e169.g1_.z, _e172.g1_.z, _e175.g1_.x, _e178.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e191.g1_.z) * vec4<f32>(_e195.g1_.y, _e198.g1_.x, _e201.g1_.y, _e204.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e218.g1_.x) * vec4<f32>(_e222.g1_.x, _e225.g1_.z, _e228.g1_.y, _e231.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn dipole_line_regressive_product(self_736: Dipole, other_660: Line) -> Scalar {
    var self_737: Dipole;
    var other_661: Line;

    self_737 = self_736;
    other_661 = other_660;
    let _e5: Dipole = self_737;
    let _e8: Line = other_661;
    let _e13: Dipole = self_737;
    let _e16: Line = other_661;
    let _e21: Dipole = self_737;
    let _e24: Line = other_661;
    let _e29: Dipole = self_737;
    let _e32: Line = other_661;
    let _e37: Dipole = self_737;
    let _e40: Line = other_661;
    let _e45: Dipole = self_737;
    let _e48: Line = other_661;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn dipole_line_outer_product(self_738: Dipole, other_662: Line) -> AntiScalar {
    var self_739: Dipole;
    var other_663: Line;

    self_739 = self_738;
    other_663 = other_662;
    let _e5: Dipole = self_739;
    let _e8: Line = other_663;
    let _e13: Dipole = self_739;
    let _e16: Line = other_663;
    let _e21: Dipole = self_739;
    let _e24: Line = other_663;
    let _e29: Dipole = self_739;
    let _e32: Line = other_663;
    let _e37: Dipole = self_739;
    let _e40: Line = other_663;
    let _e45: Dipole = self_739;
    let _e48: Line = other_663;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn dipole_line_inner_anti_product(self_740: Dipole, other_664: Line) -> Sphere {
    var self_741: Dipole;
    var other_665: Line;

    self_741 = self_740;
    other_665 = other_664;
    let _e4: Dipole = self_741;
    let _e8: Line = other_665;
    let _e18: Dipole = self_741;
    let _e22: Line = other_665;
    let _e33: Dipole = self_741;
    let _e37: Line = other_665;
    let _e48: Dipole = self_741;
    let _e52: Line = other_665;
    let _e63: Dipole = self_741;
    let _e67: Line = other_665;
    let _e78: Dipole = self_741;
    let _e82: Line = other_665;
    let _e93: Dipole = self_741;
    let _e97: Line = other_665;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.x) * vec2<f32>(_e37.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g2_.y) * vec2<f32>(_e52.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e63.g2_.z) * vec2<f32>(_e67.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e78.g0_.x) * vec2<f32>(_e82.g0_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e93.g2_.w) * _e97.g0_));
}

fn dipole_line_right_anti_contraction(self_742: Dipole, other_666: Line) -> Sphere {
    var self_743: Dipole;
    var other_667: Line;

    self_743 = self_742;
    other_667 = other_666;
    let _e4: Dipole = self_743;
    let _e8: Line = other_667;
    let _e18: Dipole = self_743;
    let _e22: Line = other_667;
    let _e33: Dipole = self_743;
    let _e37: Line = other_667;
    let _e48: Dipole = self_743;
    let _e52: Line = other_667;
    let _e63: Dipole = self_743;
    let _e67: Line = other_667;
    let _e78: Dipole = self_743;
    let _e82: Line = other_667;
    let _e93: Dipole = self_743;
    let _e97: Line = other_667;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.x) * vec2<f32>(_e37.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g2_.y) * vec2<f32>(_e52.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e63.g2_.z) * vec2<f32>(_e67.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e78.g0_.x) * vec2<f32>(_e82.g0_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e93.g2_.w) * _e97.g0_));
}

fn dipole_circle_regressive_product(self_744: Dipole, other_668: Circle) -> Scalar {
    var self_745: Dipole;
    var other_669: Circle;

    self_745 = self_744;
    other_669 = other_668;
    let _e5: Dipole = self_745;
    let _e8: Circle = other_669;
    let _e13: Dipole = self_745;
    let _e16: Circle = other_669;
    let _e21: Dipole = self_745;
    let _e24: Circle = other_669;
    let _e29: Dipole = self_745;
    let _e32: Circle = other_669;
    let _e37: Dipole = self_745;
    let _e40: Circle = other_669;
    let _e45: Dipole = self_745;
    let _e48: Circle = other_669;
    let _e53: Dipole = self_745;
    let _e56: Circle = other_669;
    let _e61: Dipole = self_745;
    let _e64: Circle = other_669;
    let _e69: Dipole = self_745;
    let _e72: Circle = other_669;
    let _e77: Dipole = self_745;
    let _e80: Circle = other_669;
    return Scalar(((((((((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)) - (_e53.g2_.x * _e56.g0_.x)) - (_e61.g2_.y * _e64.g0_.y)) - (_e69.g2_.z * _e72.g0_.z)) - (_e77.g2_.w * _e80.g0_.w)));
}

fn dipole_circle_outer_product(self_746: Dipole, other_670: Circle) -> AntiScalar {
    var self_747: Dipole;
    var other_671: Circle;

    self_747 = self_746;
    other_671 = other_670;
    let _e5: Dipole = self_747;
    let _e8: Circle = other_671;
    let _e13: Dipole = self_747;
    let _e16: Circle = other_671;
    let _e21: Dipole = self_747;
    let _e24: Circle = other_671;
    let _e29: Dipole = self_747;
    let _e32: Circle = other_671;
    let _e37: Dipole = self_747;
    let _e40: Circle = other_671;
    let _e45: Dipole = self_747;
    let _e48: Circle = other_671;
    let _e53: Dipole = self_747;
    let _e56: Circle = other_671;
    let _e61: Dipole = self_747;
    let _e64: Circle = other_671;
    let _e69: Dipole = self_747;
    let _e72: Circle = other_671;
    let _e77: Dipole = self_747;
    let _e80: Circle = other_671;
    return AntiScalar(((((((((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)) - (_e53.g2_.x * _e56.g0_.x)) - (_e61.g2_.y * _e64.g0_.y)) - (_e69.g2_.z * _e72.g0_.z)) - (_e77.g2_.w * _e80.g0_.w)));
}

fn dipole_circle_inner_product(self_748: Dipole, other_672: Circle) -> RadialPoint {
    var self_749: Dipole;
    var other_673: Circle;

    self_749 = self_748;
    other_673 = other_672;
    let _e4: Dipole = self_749;
    let _e6: Circle = other_673;
    let _e13: Dipole = self_749;
    let _e17: Circle = other_673;
    let _e20: Circle = other_673;
    let _e26: Dipole = self_749;
    let _e30: Circle = other_673;
    let _e33: Circle = other_673;
    let _e39: Dipole = self_749;
    let _e43: Circle = other_673;
    let _e46: Circle = other_673;
    return RadialPoint((_e4.g1_ * vec3<f32>(_e6.g0_.w)), (((vec2<f32>(0.0) - (vec2<f32>(_e13.g1_.x) * vec2<f32>(_e17.g0_.x, _e20.g2_.x))) - (vec2<f32>(_e26.g1_.y) * vec2<f32>(_e30.g0_.y, _e33.g2_.y))) - (vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z))));
}

fn dipole_circle_inner_anti_product(self_750: Dipole, other_674: Circle) -> Sphere {
    var self_751: Dipole;
    var other_675: Circle;

    self_751 = self_750;
    other_675 = other_674;
    let _e4: Dipole = self_751;
    let _e8: Circle = other_675;
    let _e18: Dipole = self_751;
    let _e22: Circle = other_675;
    let _e33: Dipole = self_751;
    let _e37: Circle = other_675;
    let _e48: Dipole = self_751;
    let _e52: Circle = other_675;
    let _e63: Dipole = self_751;
    let _e67: Circle = other_675;
    let _e78: Dipole = self_751;
    let _e82: Circle = other_675;
    let _e93: Dipole = self_751;
    let _e97: Circle = other_675;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.x) * vec2<f32>(_e37.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g2_.y) * vec2<f32>(_e52.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e63.g2_.z) * vec2<f32>(_e67.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e78.g0_.x) * vec2<f32>(_e82.g1_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e93.g2_.w) * _e97.g1_));
}

fn dipole_circle_left_contraction(self_752: Dipole, other_676: Circle) -> RadialPoint {
    var self_753: Dipole;
    var other_677: Circle;

    self_753 = self_752;
    other_677 = other_676;
    let _e4: Dipole = self_753;
    let _e6: Circle = other_677;
    let _e13: Dipole = self_753;
    let _e17: Circle = other_677;
    let _e20: Circle = other_677;
    let _e26: Dipole = self_753;
    let _e30: Circle = other_677;
    let _e33: Circle = other_677;
    let _e39: Dipole = self_753;
    let _e43: Circle = other_677;
    let _e46: Circle = other_677;
    return RadialPoint((_e4.g1_ * vec3<f32>(_e6.g0_.w)), (((vec2<f32>(0.0) - (vec2<f32>(_e13.g1_.x) * vec2<f32>(_e17.g0_.x, _e20.g2_.x))) - (vec2<f32>(_e26.g1_.y) * vec2<f32>(_e30.g0_.y, _e33.g2_.y))) - (vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z))));
}

fn dipole_circle_right_anti_contraction(self_754: Dipole, other_678: Circle) -> Sphere {
    var self_755: Dipole;
    var other_679: Circle;

    self_755 = self_754;
    other_679 = other_678;
    let _e4: Dipole = self_755;
    let _e8: Circle = other_679;
    let _e18: Dipole = self_755;
    let _e22: Circle = other_679;
    let _e33: Dipole = self_755;
    let _e37: Circle = other_679;
    let _e48: Dipole = self_755;
    let _e52: Circle = other_679;
    let _e63: Dipole = self_755;
    let _e67: Circle = other_679;
    let _e78: Dipole = self_755;
    let _e82: Circle = other_679;
    let _e93: Dipole = self_755;
    let _e97: Circle = other_679;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.x) * vec2<f32>(_e37.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g2_.y) * vec2<f32>(_e52.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e63.g2_.z) * vec2<f32>(_e67.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e78.g0_.x) * vec2<f32>(_e82.g1_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e93.g2_.w) * _e97.g1_));
}

fn dipole_plane_regressive_product(self_756: Dipole, other_680: Plane) -> RadialPoint {
    var self_757: Dipole;
    var other_681: Plane;

    self_757 = self_756;
    other_681 = other_680;
    let _e4: Dipole = self_757;
    let _e8: Plane = other_681;
    let _e11: Plane = other_681;
    let _e14: Plane = other_681;
    let _e25: Dipole = self_757;
    let _e29: Plane = other_681;
    let _e32: Plane = other_681;
    let _e35: Plane = other_681;
    let _e47: Dipole = self_757;
    let _e51: Plane = other_681;
    let _e54: Plane = other_681;
    let _e57: Plane = other_681;
    let _e69: Dipole = self_757;
    let _e71: Plane = other_681;
    let _e77: Dipole = self_757;
    let _e81: Plane = other_681;
    let _e91: Dipole = self_757;
    let _e95: Plane = other_681;
    let _e106: Dipole = self_757;
    let _e110: Plane = other_681;
    let _e120: Dipole = self_757;
    let _e124: Plane = other_681;
    let _e134: Dipole = self_757;
    let _e138: Plane = other_681;
    let _e148: Dipole = self_757;
    let _e152: Plane = other_681;
    let _e162: Dipole = self_757;
    let _e166: Plane = other_681;
    return RadialPoint((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0)) + ((vec3<f32>(_e25.g1_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e47.g1_.z) * vec3<f32>(_e51.g0_.y, _e54.g0_.x, _e57.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e69.g0_ * vec3<f32>(_e71.g0_.w))), ((((((((vec2<f32>(_e77.g0_.y) * vec2<f32>(_e81.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e91.g0_.z) * vec2<f32>(_e95.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e106.g2_.x) * vec2<f32>(_e110.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e120.g2_.y) * vec2<f32>(_e124.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e134.g2_.z) * vec2<f32>(_e138.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e148.g2_.w) * vec2<f32>(_e152.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e162.g0_.x) * vec2<f32>(_e166.g0_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn dipole_plane_inner_product(self_758: Dipole, other_682: Plane) -> FlatPoint {
    var self_759: Dipole;
    var other_683: Plane;

    self_759 = self_758;
    other_683 = other_682;
    let _e4: Dipole = self_759;
    let _e8: Plane = other_683;
    let _e19: Dipole = self_759;
    let _e23: Plane = other_683;
    let _e35: Dipole = self_759;
    let _e39: Plane = other_683;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn dipole_plane_inner_anti_product(self_760: Dipole, other_684: Plane) -> Circle {
    var self_761: Dipole;
    var other_685: Plane;

    self_761 = self_760;
    other_685 = other_684;
    let _e4: Dipole = self_761;
    let _e8: Plane = other_685;
    let _e19: Dipole = self_761;
    let _e23: Plane = other_685;
    let _e35: Dipole = self_761;
    let _e39: Plane = other_685;
    let _e52: Dipole = self_761;
    let _e56: Plane = other_685;
    let _e69: Dipole = self_761;
    let _e72: Dipole = self_761;
    let _e75: Dipole = self_761;
    let _e78: Dipole = self_761;
    let _e82: Plane = other_685;
    let _e97: Dipole = self_761;
    let _e101: Plane = other_685;
    let _e104: Plane = other_685;
    let _e107: Plane = other_685;
    let _e113: Dipole = self_761;
    let _e117: Plane = other_685;
    let _e120: Plane = other_685;
    let _e123: Plane = other_685;
    let _e134: Dipole = self_761;
    let _e138: Plane = other_685;
    let _e141: Plane = other_685;
    let _e144: Plane = other_685;
    let _e156: Dipole = self_761;
    let _e160: Plane = other_685;
    let _e163: Plane = other_685;
    let _e166: Plane = other_685;
    return Circle(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e97.g2_.w) * vec3<f32>(_e101.g0_.x, _e104.g0_.y, _e107.g0_.z))), ((((vec3<f32>(_e113.g2_.y) * vec3<f32>(_e117.g0_.z, _e120.g0_.z, _e123.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e134.g2_.z) * vec3<f32>(_e138.g0_.y, _e141.g0_.x, _e144.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e156.g2_.x) * vec3<f32>(_e160.g0_.x, _e163.g0_.z, _e166.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn dipole_plane_left_contraction(self_762: Dipole, other_686: Plane) -> FlatPoint {
    var self_763: Dipole;
    var other_687: Plane;

    self_763 = self_762;
    other_687 = other_686;
    let _e4: Dipole = self_763;
    let _e8: Plane = other_687;
    let _e19: Dipole = self_763;
    let _e23: Plane = other_687;
    let _e35: Dipole = self_763;
    let _e39: Plane = other_687;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn dipole_plane_right_anti_contraction(self_764: Dipole, other_688: Plane) -> Circle {
    var self_765: Dipole;
    var other_689: Plane;

    self_765 = self_764;
    other_689 = other_688;
    let _e4: Dipole = self_765;
    let _e8: Plane = other_689;
    let _e19: Dipole = self_765;
    let _e23: Plane = other_689;
    let _e35: Dipole = self_765;
    let _e39: Plane = other_689;
    let _e52: Dipole = self_765;
    let _e56: Plane = other_689;
    let _e69: Dipole = self_765;
    let _e72: Dipole = self_765;
    let _e75: Dipole = self_765;
    let _e78: Dipole = self_765;
    let _e82: Plane = other_689;
    let _e97: Dipole = self_765;
    let _e101: Plane = other_689;
    let _e104: Plane = other_689;
    let _e107: Plane = other_689;
    let _e113: Dipole = self_765;
    let _e117: Plane = other_689;
    let _e120: Plane = other_689;
    let _e123: Plane = other_689;
    let _e134: Dipole = self_765;
    let _e138: Plane = other_689;
    let _e141: Plane = other_689;
    let _e144: Plane = other_689;
    let _e156: Dipole = self_765;
    let _e160: Plane = other_689;
    let _e163: Plane = other_689;
    let _e166: Plane = other_689;
    return Circle(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e97.g2_.w) * vec3<f32>(_e101.g0_.x, _e104.g0_.y, _e107.g0_.z))), ((((vec3<f32>(_e113.g2_.y) * vec3<f32>(_e117.g0_.z, _e120.g0_.z, _e123.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e134.g2_.z) * vec3<f32>(_e138.g0_.y, _e141.g0_.x, _e144.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e156.g2_.x) * vec3<f32>(_e160.g0_.x, _e163.g0_.z, _e166.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn dipole_sphere_regressive_product(self_766: Dipole, other_690: Sphere) -> RadialPoint {
    var self_767: Dipole;
    var other_691: Sphere;

    self_767 = self_766;
    other_691 = other_690;
    let _e4: Dipole = self_767;
    let _e8: Sphere = other_691;
    let _e18: Dipole = self_767;
    let _e22: Sphere = other_691;
    let _e33: Dipole = self_767;
    let _e37: Sphere = other_691;
    let _e48: Dipole = self_767;
    let _e52: Sphere = other_691;
    let _e64: Dipole = self_767;
    let _e68: Sphere = other_691;
    let _e80: Dipole = self_767;
    let _e84: Sphere = other_691;
    let _e96: Dipole = self_767;
    let _e98: Sphere = other_691;
    let _e104: Dipole = self_767;
    let _e108: Sphere = other_691;
    let _e118: Dipole = self_767;
    let _e122: Sphere = other_691;
    let _e133: Dipole = self_767;
    let _e137: Sphere = other_691;
    let _e147: Dipole = self_767;
    let _e151: Sphere = other_691;
    let _e161: Dipole = self_767;
    let _e165: Sphere = other_691;
    let _e175: Dipole = self_767;
    let _e179: Sphere = other_691;
    let _e188: Dipole = self_767;
    let _e192: Sphere = other_691;
    return RadialPoint(((((((((vec3<f32>(_e4.g1_.x) * _e8.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0)) + ((vec3<f32>(_e18.g1_.y) * _e22.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e33.g1_.z) * _e37.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e48.g2_.x) * vec3<f32>(_e52.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e64.g2_.y) * vec3<f32>(_e68.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e80.g2_.z) * vec3<f32>(_e84.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e96.g0_ * vec3<f32>(_e98.g0_.y))), ((((((((vec2<f32>(_e104.g0_.y) * vec2<f32>(_e108.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e118.g0_.z) * vec2<f32>(_e122.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e133.g2_.x) * vec2<f32>(_e137.g1_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e147.g2_.y) * vec2<f32>(_e151.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e161.g2_.z) * vec2<f32>(_e165.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e175.g2_.w) * _e179.g0_) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e188.g0_.x) * vec2<f32>(_e192.g1_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn dipole_sphere_inner_anti_product(self_768: Dipole, other_692: Sphere) -> Circle {
    var self_769: Dipole;
    var other_693: Sphere;

    self_769 = self_768;
    other_693 = other_692;
    let _e4: Dipole = self_769;
    let _e8: Sphere = other_693;
    let _e11: Sphere = other_693;
    let _e14: Sphere = other_693;
    let _e17: Sphere = other_693;
    let _e29: Dipole = self_769;
    let _e33: Sphere = other_693;
    let _e36: Sphere = other_693;
    let _e39: Sphere = other_693;
    let _e42: Sphere = other_693;
    let _e55: Dipole = self_769;
    let _e59: Sphere = other_693;
    let _e72: Dipole = self_769;
    let _e76: Sphere = other_693;
    let _e89: Dipole = self_769;
    let _e92: Dipole = self_769;
    let _e95: Dipole = self_769;
    let _e98: Dipole = self_769;
    let _e102: Sphere = other_693;
    let _e105: Sphere = other_693;
    let _e108: Sphere = other_693;
    let _e111: Sphere = other_693;
    let _e127: Dipole = self_769;
    let _e131: Sphere = other_693;
    let _e135: Dipole = self_769;
    let _e139: Sphere = other_693;
    let _e149: Dipole = self_769;
    let _e153: Sphere = other_693;
    let _e164: Dipole = self_769;
    let _e168: Sphere = other_693;
    return Circle(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g1_.y, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.y) * vec4<f32>(_e59.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g0_.x, _e92.g0_.x, _e95.g0_.x, _e98.g1_.x) * vec4<f32>(_e102.g1_.x, _e105.g1_.z, _e108.g1_.y, _e111.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e127.g2_.w) * _e131.g1_)), ((((vec3<f32>(_e135.g2_.y) * _e139.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e149.g2_.z) * _e153.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e164.g2_.x) * _e168.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn dipole_sphere_right_anti_contraction(self_770: Dipole, other_694: Sphere) -> Circle {
    var self_771: Dipole;
    var other_695: Sphere;

    self_771 = self_770;
    other_695 = other_694;
    let _e4: Dipole = self_771;
    let _e8: Sphere = other_695;
    let _e11: Sphere = other_695;
    let _e14: Sphere = other_695;
    let _e17: Sphere = other_695;
    let _e29: Dipole = self_771;
    let _e33: Sphere = other_695;
    let _e36: Sphere = other_695;
    let _e39: Sphere = other_695;
    let _e42: Sphere = other_695;
    let _e55: Dipole = self_771;
    let _e59: Sphere = other_695;
    let _e72: Dipole = self_771;
    let _e76: Sphere = other_695;
    let _e89: Dipole = self_771;
    let _e92: Dipole = self_771;
    let _e95: Dipole = self_771;
    let _e98: Dipole = self_771;
    let _e102: Sphere = other_695;
    let _e105: Sphere = other_695;
    let _e108: Sphere = other_695;
    let _e111: Sphere = other_695;
    let _e127: Dipole = self_771;
    let _e131: Sphere = other_695;
    let _e135: Dipole = self_771;
    let _e139: Sphere = other_695;
    let _e149: Dipole = self_771;
    let _e153: Sphere = other_695;
    let _e164: Dipole = self_771;
    let _e168: Sphere = other_695;
    return Circle(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g1_.y, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.y) * vec4<f32>(_e59.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g0_.x, _e92.g0_.x, _e95.g0_.x, _e98.g1_.x) * vec4<f32>(_e102.g1_.x, _e105.g1_.z, _e108.g1_.y, _e111.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e127.g2_.w) * _e131.g1_)), ((((vec3<f32>(_e135.g2_.y) * _e139.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e149.g2_.z) * _e153.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e164.g2_.x) * _e168.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn dipole_motor_geometric_product(self_772: Dipole, other_696: Motor) -> Motor {
    var self_773: Dipole;
    var other_697: Motor;

    self_773 = self_772;
    other_697 = other_696;
    let _e4: Dipole = self_773;
    let _e8: Motor = other_697;
    let _e20: Dipole = self_773;
    let _e24: Motor = other_697;
    let _e37: Dipole = self_773;
    let _e41: Motor = other_697;
    let _e54: Dipole = self_773;
    let _e58: Motor = other_697;
    let _e71: Dipole = self_773;
    let _e75: Motor = other_697;
    let _e88: Dipole = self_773;
    let _e92: Motor = other_697;
    let _e105: Dipole = self_773;
    let _e109: Motor = other_697;
    let _e121: Dipole = self_773;
    let _e125: Motor = other_697;
    let _e138: Dipole = self_773;
    let _e142: Motor = other_697;
    return Motor((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g1_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.x) * _e58.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e71.g1_.y) * _e75.g0_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e88.g1_.z) * _e92.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((vec4<f32>(_e105.g1_.x) * _e109.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e121.g1_.y) * _e125.g1_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e138.g1_.z) * _e142.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn dipole_rotor_geometric_product(self_774: Dipole, other_698: Rotor) -> Rotor {
    var self_775: Dipole;
    var other_699: Rotor;

    self_775 = self_774;
    other_699 = other_698;
    let _e4: Dipole = self_775;
    let _e8: Rotor = other_699;
    let _e20: Dipole = self_775;
    let _e24: Rotor = other_699;
    let _e37: Dipole = self_775;
    let _e41: Rotor = other_699;
    return Rotor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e20.g1_.y) * _e24.g0_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * _e41.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn dipole_rotor_outer_product(self_776: Dipole, other_700: Rotor) -> AntiScalar {
    var self_777: Dipole;
    var other_701: Rotor;

    self_777 = self_776;
    other_701 = other_700;
    let _e5: Dipole = self_777;
    let _e8: Rotor = other_701;
    let _e13: Dipole = self_777;
    let _e16: Rotor = other_701;
    let _e21: Dipole = self_777;
    let _e24: Rotor = other_701;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn dipole_translator_geometric_product(self_778: Dipole, other_702: Translator) -> Motor {
    var self_779: Dipole;
    var other_703: Translator;

    self_779 = self_778;
    other_703 = other_702;
    let _e4: Dipole = self_779;
    let _e8: Translator = other_703;
    let _e20: Dipole = self_779;
    let _e24: Translator = other_703;
    let _e37: Dipole = self_779;
    let _e41: Translator = other_703;
    let _e53: Dipole = self_779;
    let _e57: Translator = other_703;
    let _e69: Dipole = self_779;
    let _e72: Dipole = self_779;
    let _e75: Dipole = self_779;
    let _e78: Dipole = self_779;
    let _e82: Translator = other_703;
    let _e95: Dipole = self_779;
    let _e99: Translator = other_703;
    let _e111: Dipole = self_779;
    let _e115: Translator = other_703;
    let _e128: Dipole = self_779;
    let _e132: Translator = other_703;
    return Motor(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e53.g1_.z) * vec4<f32>(_e57.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e69.g1_.x, _e72.g0_.x, _e75.g0_.x, _e78.g0_.x) * _e82.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e95.g1_.y) * _e99.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e111.g1_.z) * _e115.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e128.g1_.x) * _e132.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn dipole_translator_outer_product(self_780: Dipole, other_704: Translator) -> AntiScalar {
    var self_781: Dipole;
    var other_705: Translator;

    self_781 = self_780;
    other_705 = other_704;
    let _e5: Dipole = self_781;
    let _e8: Translator = other_705;
    let _e13: Dipole = self_781;
    let _e16: Translator = other_705;
    let _e21: Dipole = self_781;
    let _e24: Translator = other_705;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn dipole_translator_inner_anti_product(self_782: Dipole, other_706: Translator) -> Dipole {
    var self_783: Dipole;
    var other_707: Translator;

    self_783 = self_782;
    other_707 = other_706;
    let _e4: Dipole = self_783;
    let _e6: Translator = other_707;
    let _e11: Dipole = self_783;
    let _e13: Translator = other_707;
    let _e18: Dipole = self_783;
    let _e20: Translator = other_707;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec4<f32>(_e20.g0_.w)));
}

fn dipole_translator_right_anti_contraction(self_784: Dipole, other_708: Translator) -> Dipole {
    var self_785: Dipole;
    var other_709: Translator;

    self_785 = self_784;
    other_709 = other_708;
    let _e4: Dipole = self_785;
    let _e6: Translator = other_709;
    let _e11: Dipole = self_785;
    let _e13: Translator = other_709;
    let _e18: Dipole = self_785;
    let _e20: Translator = other_709;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec4<f32>(_e20.g0_.w)));
}

fn dipole_flector_geometric_product(self_786: Dipole, other_710: Flector) -> Flector {
    var self_787: Dipole;
    var other_711: Flector;

    self_787 = self_786;
    other_711 = other_710;
    let _e4: Dipole = self_787;
    let _e8: Flector = other_711;
    let _e19: Dipole = self_787;
    let _e23: Flector = other_711;
    let _e35: Dipole = self_787;
    let _e39: Flector = other_711;
    let _e42: Flector = other_711;
    let _e45: Flector = other_711;
    let _e48: Flector = other_711;
    let _e62: Dipole = self_787;
    let _e66: Flector = other_711;
    let _e69: Flector = other_711;
    let _e72: Flector = other_711;
    let _e75: Flector = other_711;
    let _e89: Dipole = self_787;
    let _e93: Flector = other_711;
    let _e96: Flector = other_711;
    let _e99: Flector = other_711;
    let _e102: Flector = other_711;
    let _e116: Dipole = self_787;
    let _e120: Flector = other_711;
    let _e132: Dipole = self_787;
    let _e136: Flector = other_711;
    let _e139: Flector = other_711;
    let _e142: Flector = other_711;
    let _e145: Flector = other_711;
    let _e158: Dipole = self_787;
    let _e162: Flector = other_711;
    let _e165: Flector = other_711;
    let _e168: Flector = other_711;
    let _e171: Flector = other_711;
    let _e185: Dipole = self_787;
    let _e189: Flector = other_711;
    let _e192: Flector = other_711;
    let _e195: Flector = other_711;
    let _e198: Flector = other_711;
    let _e212: Dipole = self_787;
    let _e216: Flector = other_711;
    let _e219: Flector = other_711;
    let _e222: Flector = other_711;
    let _e225: Flector = other_711;
    let _e239: Dipole = self_787;
    let _e243: Flector = other_711;
    let _e246: Flector = other_711;
    let _e249: Flector = other_711;
    let _e252: Flector = other_711;
    let _e266: Dipole = self_787;
    let _e270: Flector = other_711;
    let _e273: Flector = other_711;
    let _e276: Flector = other_711;
    let _e279: Flector = other_711;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g1_.w, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e62.g1_.y) * vec4<f32>(_e66.g0_.z, _e69.g1_.w, _e72.g0_.x, _e75.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e89.g1_.z) * vec4<f32>(_e93.g0_.y, _e96.g0_.x, _e99.g1_.w, _e102.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e116.g0_.x) * vec4<f32>(_e120.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec4<f32>(_e132.g0_.y) * vec4<f32>(_e136.g0_.z, _e139.g1_.w, _e142.g0_.x, _e145.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e158.g0_.z) * vec4<f32>(_e162.g0_.y, _e165.g0_.x, _e168.g1_.w, _e171.g0_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e185.g1_.x) * vec4<f32>(_e189.g0_.w, _e192.g1_.z, _e195.g1_.y, _e198.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e212.g1_.y) * vec4<f32>(_e216.g1_.z, _e219.g0_.w, _e222.g1_.x, _e225.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e239.g1_.z) * vec4<f32>(_e243.g1_.y, _e246.g1_.x, _e249.g0_.w, _e252.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e266.g0_.x) * vec4<f32>(_e270.g1_.w, _e273.g0_.z, _e276.g0_.y, _e279.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn dipole_flector_regressive_product(self_788: Dipole, other_712: Flector) -> RadialPoint {
    var self_789: Dipole;
    var other_713: Flector;

    self_789 = self_788;
    other_713 = other_712;
    let _e4: Dipole = self_789;
    let _e8: Flector = other_713;
    let _e11: Flector = other_713;
    let _e14: Flector = other_713;
    let _e25: Dipole = self_789;
    let _e29: Flector = other_713;
    let _e32: Flector = other_713;
    let _e35: Flector = other_713;
    let _e47: Dipole = self_789;
    let _e51: Flector = other_713;
    let _e54: Flector = other_713;
    let _e57: Flector = other_713;
    let _e69: Dipole = self_789;
    let _e71: Flector = other_713;
    let _e77: Dipole = self_789;
    let _e81: Flector = other_713;
    let _e91: Dipole = self_789;
    let _e95: Flector = other_713;
    let _e106: Dipole = self_789;
    let _e110: Flector = other_713;
    let _e120: Dipole = self_789;
    let _e124: Flector = other_713;
    let _e134: Dipole = self_789;
    let _e138: Flector = other_713;
    let _e148: Dipole = self_789;
    let _e152: Flector = other_713;
    let _e162: Dipole = self_789;
    let _e166: Flector = other_713;
    return RadialPoint((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0)) + ((vec3<f32>(_e25.g1_.y) * vec3<f32>(_e29.g1_.z, _e32.g1_.z, _e35.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e47.g1_.z) * vec3<f32>(_e51.g1_.y, _e54.g1_.x, _e57.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e69.g0_ * vec3<f32>(_e71.g1_.w))), ((((((((vec2<f32>(_e77.g0_.y) * vec2<f32>(_e81.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e91.g0_.z) * vec2<f32>(_e95.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e106.g2_.x) * vec2<f32>(_e110.g1_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e120.g2_.y) * vec2<f32>(_e124.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e134.g2_.z) * vec2<f32>(_e138.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e148.g2_.w) * vec2<f32>(_e152.g1_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e162.g0_.x) * vec2<f32>(_e166.g1_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn dipole_flector_outer_product(self_790: Dipole, other_714: Flector) -> Plane {
    var self_791: Dipole;
    var other_715: Flector;

    self_791 = self_790;
    other_715 = other_714;
    let _e4: Dipole = self_791;
    let _e8: Flector = other_715;
    let _e19: Dipole = self_791;
    let _e23: Flector = other_715;
    let _e35: Dipole = self_791;
    let _e39: Flector = other_715;
    let _e51: Dipole = self_791;
    let _e55: Flector = other_715;
    let _e67: Dipole = self_791;
    let _e70: Dipole = self_791;
    let _e73: Dipole = self_791;
    let _e76: Dipole = self_791;
    let _e80: Flector = other_715;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn dipole_flector_inner_product(self_792: Dipole, other_716: Flector) -> FlatPoint {
    var self_793: Dipole;
    var other_717: Flector;

    self_793 = self_792;
    other_717 = other_716;
    let _e4: Dipole = self_793;
    let _e8: Flector = other_717;
    let _e19: Dipole = self_793;
    let _e23: Flector = other_717;
    let _e35: Dipole = self_793;
    let _e39: Flector = other_717;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn dipole_flector_left_contraction(self_794: Dipole, other_718: Flector) -> FlatPoint {
    var self_795: Dipole;
    var other_719: Flector;

    self_795 = self_794;
    other_719 = other_718;
    let _e4: Dipole = self_795;
    let _e8: Flector = other_719;
    let _e19: Dipole = self_795;
    let _e23: Flector = other_719;
    let _e35: Dipole = self_795;
    let _e39: Flector = other_719;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn dipole_flector_left_anti_contraction(self_796: Dipole, other_720: Flector) -> AntiScalar {
    var self_797: Dipole;
    var other_721: Flector;

    self_797 = self_796;
    other_721 = other_720;
    let _e5: Dipole = self_797;
    let _e8: Flector = other_721;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_flector_anti_scalar_product(self_798: Dipole, other_722: Flector) -> AntiScalar {
    var self_799: Dipole;
    var other_723: Flector;

    self_799 = self_798;
    other_723 = other_722;
    let _e5: Dipole = self_799;
    let _e8: Flector = other_723;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g0_.w)));
}

fn dipole_dilation_outer_product(self_800: Dipole, other_724: Dilation) -> AntiScalar {
    var self_801: Dipole;
    var other_725: Dilation;

    self_801 = self_800;
    other_725 = other_724;
    let _e4: Dipole = self_801;
    let _e7: Dilation = other_725;
    let _e11: Dipole = self_801;
    let _e14: Dilation = other_725;
    let _e19: Dipole = self_801;
    let _e22: Dilation = other_725;
    let _e27: Dipole = self_801;
    let _e30: Dilation = other_725;
    return AntiScalar(((((_e4.g2_.x * _e7.g1_.x) + (_e11.g2_.y * _e14.g0_.x)) + (_e19.g2_.z * _e22.g0_.y)) + (_e27.g2_.w * _e30.g0_.z)));
}

fn dipole_dilation_inner_anti_product(self_802: Dipole, other_726: Dilation) -> Dipole {
    var self_803: Dipole;
    var other_727: Dilation;

    self_803 = self_802;
    other_727 = other_726;
    let _e4: Dipole = self_803;
    let _e6: Dilation = other_727;
    let _e11: Dipole = self_803;
    let _e13: Dilation = other_727;
    let _e18: Dipole = self_803;
    let _e20: Dilation = other_727;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)), (_e18.g2_ * vec4<f32>(_e20.g1_.y)));
}

fn dipole_dilation_right_anti_contraction(self_804: Dipole, other_728: Dilation) -> Dipole {
    var self_805: Dipole;
    var other_729: Dilation;

    self_805 = self_804;
    other_729 = other_728;
    let _e4: Dipole = self_805;
    let _e6: Dilation = other_729;
    let _e11: Dipole = self_805;
    let _e13: Dilation = other_729;
    let _e18: Dipole = self_805;
    let _e20: Dilation = other_729;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)), (_e18.g2_ * vec4<f32>(_e20.g1_.y)));
}

fn dipole_multi_vector_add(self_806: Dipole, other_730: MultiVector) -> MultiVector {
    var self_807: Dipole;
    var other_731: MultiVector;

    self_807 = self_806;
    other_731 = other_730;
    let _e4: MultiVector = other_731;
    let _e6: MultiVector = other_731;
    let _e8: MultiVector = other_731;
    let _e10: Dipole = self_807;
    let _e12: MultiVector = other_731;
    let _e15: Dipole = self_807;
    let _e17: MultiVector = other_731;
    let _e20: Dipole = self_807;
    let _e22: MultiVector = other_731;
    let _e25: MultiVector = other_731;
    let _e27: MultiVector = other_731;
    let _e29: MultiVector = other_731;
    let _e31: MultiVector = other_731;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g2_ + _e12.g3_), (_e15.g0_ + _e17.g4_), (_e20.g1_ + _e22.g5_), _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn dipole_multi_vector_sub(self_808: Dipole, other_732: MultiVector) -> MultiVector {
    var self_809: Dipole;
    var other_733: MultiVector;

    self_809 = self_808;
    other_733 = other_732;
    let _e6: MultiVector = other_733;
    let _e11: MultiVector = other_733;
    let _e16: MultiVector = other_733;
    let _e19: Dipole = self_809;
    let _e21: MultiVector = other_733;
    let _e24: Dipole = self_809;
    let _e26: MultiVector = other_733;
    let _e29: Dipole = self_809;
    let _e31: MultiVector = other_733;
    let _e36: MultiVector = other_733;
    let _e41: MultiVector = other_733;
    let _e46: MultiVector = other_733;
    let _e51: MultiVector = other_733;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (_e19.g2_ - _e21.g3_), (_e24.g0_ - _e26.g4_), (_e29.g1_ - _e31.g5_), (vec3<f32>(0.0) - _e36.g6_), (vec3<f32>(0.0) - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (vec4<f32>(0.0) - _e51.g9_));
}

fn dipole_multi_vector_geometric_product(self_810: Dipole, other_734: MultiVector) -> MultiVector {
    var self_811: Dipole;
    var other_735: MultiVector;

    self_811 = self_810;
    other_735 = other_734;
    let _e4: Dipole = self_811;
    let _e8: MultiVector = other_735;
    let _e11: MultiVector = other_735;
    let _e14: MultiVector = other_735;
    let _e26: Dipole = self_811;
    let _e30: MultiVector = other_735;
    let _e33: MultiVector = other_735;
    let _e36: MultiVector = other_735;
    let _e49: Dipole = self_811;
    let _e53: MultiVector = other_735;
    let _e56: MultiVector = other_735;
    let _e59: MultiVector = other_735;
    let _e65: Dipole = self_811;
    let _e69: MultiVector = other_735;
    let _e72: MultiVector = other_735;
    let _e75: MultiVector = other_735;
    let _e81: Dipole = self_811;
    let _e85: MultiVector = other_735;
    let _e88: MultiVector = other_735;
    let _e91: MultiVector = other_735;
    let _e97: Dipole = self_811;
    let _e101: MultiVector = other_735;
    let _e113: Dipole = self_811;
    let _e117: MultiVector = other_735;
    let _e129: Dipole = self_811;
    let _e133: MultiVector = other_735;
    let _e145: Dipole = self_811;
    let _e149: MultiVector = other_735;
    let _e161: Dipole = self_811;
    let _e165: MultiVector = other_735;
    let _e168: MultiVector = other_735;
    let _e171: MultiVector = other_735;
    let _e184: Dipole = self_811;
    let _e188: MultiVector = other_735;
    let _e191: MultiVector = other_735;
    let _e194: MultiVector = other_735;
    let _e205: Dipole = self_811;
    let _e209: MultiVector = other_735;
    let _e212: MultiVector = other_735;
    let _e215: MultiVector = other_735;
    let _e227: Dipole = self_811;
    let _e231: MultiVector = other_735;
    let _e234: MultiVector = other_735;
    let _e237: MultiVector = other_735;
    let _e249: Dipole = self_811;
    let _e253: MultiVector = other_735;
    let _e262: Dipole = self_811;
    let _e266: MultiVector = other_735;
    let _e276: Dipole = self_811;
    let _e280: MultiVector = other_735;
    let _e283: MultiVector = other_735;
    let _e289: Dipole = self_811;
    let _e293: MultiVector = other_735;
    let _e296: MultiVector = other_735;
    let _e302: Dipole = self_811;
    let _e306: MultiVector = other_735;
    let _e309: MultiVector = other_735;
    let _e315: Dipole = self_811;
    let _e319: MultiVector = other_735;
    let _e330: Dipole = self_811;
    let _e334: MultiVector = other_735;
    let _e345: Dipole = self_811;
    let _e349: MultiVector = other_735;
    let _e360: Dipole = self_811;
    let _e364: MultiVector = other_735;
    let _e374: Dipole = self_811;
    let _e378: MultiVector = other_735;
    let _e389: Dipole = self_811;
    let _e393: MultiVector = other_735;
    let _e405: Dipole = self_811;
    let _e409: MultiVector = other_735;
    let _e412: MultiVector = other_735;
    let _e415: MultiVector = other_735;
    let _e418: MultiVector = other_735;
    let _e432: Dipole = self_811;
    let _e436: MultiVector = other_735;
    let _e439: MultiVector = other_735;
    let _e442: MultiVector = other_735;
    let _e445: MultiVector = other_735;
    let _e459: Dipole = self_811;
    let _e463: MultiVector = other_735;
    let _e466: MultiVector = other_735;
    let _e469: MultiVector = other_735;
    let _e472: MultiVector = other_735;
    let _e486: Dipole = self_811;
    let _e490: MultiVector = other_735;
    let _e493: MultiVector = other_735;
    let _e496: MultiVector = other_735;
    let _e499: MultiVector = other_735;
    let _e513: Dipole = self_811;
    let _e517: MultiVector = other_735;
    let _e520: MultiVector = other_735;
    let _e523: MultiVector = other_735;
    let _e526: MultiVector = other_735;
    let _e540: Dipole = self_811;
    let _e544: MultiVector = other_735;
    let _e547: MultiVector = other_735;
    let _e550: MultiVector = other_735;
    let _e553: MultiVector = other_735;
    let _e567: Dipole = self_811;
    let _e571: MultiVector = other_735;
    let _e583: Dipole = self_811;
    let _e587: MultiVector = other_735;
    let _e599: Dipole = self_811;
    let _e603: MultiVector = other_735;
    let _e606: MultiVector = other_735;
    let _e609: MultiVector = other_735;
    let _e620: Dipole = self_811;
    let _e624: MultiVector = other_735;
    let _e627: MultiVector = other_735;
    let _e630: MultiVector = other_735;
    let _e642: Dipole = self_811;
    let _e646: MultiVector = other_735;
    let _e649: MultiVector = other_735;
    let _e652: MultiVector = other_735;
    let _e664: Dipole = self_811;
    let _e668: MultiVector = other_735;
    let _e671: MultiVector = other_735;
    let _e674: MultiVector = other_735;
    let _e686: Dipole = self_811;
    let _e690: MultiVector = other_735;
    let _e693: MultiVector = other_735;
    let _e696: MultiVector = other_735;
    let _e708: Dipole = self_811;
    let _e712: MultiVector = other_735;
    let _e715: MultiVector = other_735;
    let _e718: MultiVector = other_735;
    let _e730: Dipole = self_811;
    let _e734: MultiVector = other_735;
    let _e737: MultiVector = other_735;
    let _e740: MultiVector = other_735;
    let _e751: Dipole = self_811;
    let _e755: MultiVector = other_735;
    let _e758: MultiVector = other_735;
    let _e761: MultiVector = other_735;
    let _e773: Dipole = self_811;
    let _e777: MultiVector = other_735;
    let _e780: MultiVector = other_735;
    let _e783: MultiVector = other_735;
    let _e795: Dipole = self_811;
    let _e799: MultiVector = other_735;
    let _e802: MultiVector = other_735;
    let _e805: MultiVector = other_735;
    let _e816: Dipole = self_811;
    let _e820: MultiVector = other_735;
    let _e823: MultiVector = other_735;
    let _e826: MultiVector = other_735;
    let _e838: Dipole = self_811;
    let _e842: MultiVector = other_735;
    let _e845: MultiVector = other_735;
    let _e848: MultiVector = other_735;
    let _e860: Dipole = self_811;
    let _e864: MultiVector = other_735;
    let _e867: MultiVector = other_735;
    let _e870: MultiVector = other_735;
    let _e882: Dipole = self_811;
    let _e886: MultiVector = other_735;
    let _e889: MultiVector = other_735;
    let _e892: MultiVector = other_735;
    let _e904: Dipole = self_811;
    let _e908: MultiVector = other_735;
    let _e911: MultiVector = other_735;
    let _e914: MultiVector = other_735;
    let _e926: Dipole = self_811;
    let _e930: MultiVector = other_735;
    let _e933: MultiVector = other_735;
    let _e936: MultiVector = other_735;
    let _e948: Dipole = self_811;
    let _e952: MultiVector = other_735;
    let _e955: MultiVector = other_735;
    let _e958: MultiVector = other_735;
    let _e970: Dipole = self_811;
    let _e974: MultiVector = other_735;
    let _e977: MultiVector = other_735;
    let _e980: MultiVector = other_735;
    let _e992: Dipole = self_811;
    let _e996: MultiVector = other_735;
    let _e1000: Dipole = self_811;
    let _e1004: MultiVector = other_735;
    let _e1007: MultiVector = other_735;
    let _e1010: MultiVector = other_735;
    let _e1021: Dipole = self_811;
    let _e1025: MultiVector = other_735;
    let _e1028: MultiVector = other_735;
    let _e1031: MultiVector = other_735;
    let _e1043: Dipole = self_811;
    let _e1047: MultiVector = other_735;
    let _e1050: MultiVector = other_735;
    let _e1053: MultiVector = other_735;
    let _e1065: Dipole = self_811;
    let _e1069: MultiVector = other_735;
    let _e1072: MultiVector = other_735;
    let _e1075: MultiVector = other_735;
    let _e1087: Dipole = self_811;
    let _e1091: MultiVector = other_735;
    let _e1094: MultiVector = other_735;
    let _e1097: MultiVector = other_735;
    let _e1109: Dipole = self_811;
    let _e1113: MultiVector = other_735;
    let _e1116: MultiVector = other_735;
    let _e1119: MultiVector = other_735;
    let _e1131: Dipole = self_811;
    let _e1135: MultiVector = other_735;
    let _e1138: MultiVector = other_735;
    let _e1141: MultiVector = other_735;
    let _e1144: MultiVector = other_735;
    let _e1157: Dipole = self_811;
    let _e1161: MultiVector = other_735;
    let _e1164: MultiVector = other_735;
    let _e1167: MultiVector = other_735;
    let _e1170: MultiVector = other_735;
    let _e1184: Dipole = self_811;
    let _e1188: MultiVector = other_735;
    let _e1191: MultiVector = other_735;
    let _e1194: MultiVector = other_735;
    let _e1197: MultiVector = other_735;
    let _e1211: Dipole = self_811;
    let _e1215: MultiVector = other_735;
    let _e1218: MultiVector = other_735;
    let _e1221: MultiVector = other_735;
    let _e1224: MultiVector = other_735;
    let _e1238: Dipole = self_811;
    let _e1242: MultiVector = other_735;
    let _e1245: MultiVector = other_735;
    let _e1248: MultiVector = other_735;
    let _e1251: MultiVector = other_735;
    let _e1265: Dipole = self_811;
    let _e1269: MultiVector = other_735;
    let _e1272: MultiVector = other_735;
    let _e1275: MultiVector = other_735;
    let _e1278: MultiVector = other_735;
    let _e1292: Dipole = self_811;
    let _e1296: MultiVector = other_735;
    let _e1299: MultiVector = other_735;
    let _e1302: MultiVector = other_735;
    let _e1305: MultiVector = other_735;
    let _e1318: Dipole = self_811;
    let _e1322: MultiVector = other_735;
    let _e1325: MultiVector = other_735;
    let _e1328: MultiVector = other_735;
    let _e1331: MultiVector = other_735;
    let _e1345: Dipole = self_811;
    let _e1349: MultiVector = other_735;
    let _e1352: MultiVector = other_735;
    let _e1355: MultiVector = other_735;
    let _e1358: MultiVector = other_735;
    let _e1372: Dipole = self_811;
    let _e1376: MultiVector = other_735;
    let _e1379: MultiVector = other_735;
    let _e1382: MultiVector = other_735;
    let _e1385: MultiVector = other_735;
    let _e1399: Dipole = self_811;
    let _e1403: MultiVector = other_735;
    let _e1406: MultiVector = other_735;
    let _e1409: MultiVector = other_735;
    let _e1412: MultiVector = other_735;
    let _e1426: Dipole = self_811;
    let _e1430: MultiVector = other_735;
    let _e1433: MultiVector = other_735;
    let _e1436: MultiVector = other_735;
    let _e1439: MultiVector = other_735;
    let _e1453: Dipole = self_811;
    let _e1457: MultiVector = other_735;
    let _e1460: MultiVector = other_735;
    let _e1463: MultiVector = other_735;
    let _e1466: MultiVector = other_735;
    let _e1480: Dipole = self_811;
    let _e1484: MultiVector = other_735;
    let _e1487: MultiVector = other_735;
    let _e1490: MultiVector = other_735;
    let _e1493: MultiVector = other_735;
    let _e1507: Dipole = self_811;
    let _e1511: MultiVector = other_735;
    let _e1514: MultiVector = other_735;
    let _e1517: MultiVector = other_735;
    let _e1520: MultiVector = other_735;
    let _e1532: Dipole = self_811;
    let _e1536: MultiVector = other_735;
    let _e1539: MultiVector = other_735;
    let _e1542: MultiVector = other_735;
    let _e1545: MultiVector = other_735;
    return MultiVector((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g5_.y, _e11.g5_.y, _e14.g7_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g5_.z, _e33.g5_.z, _e36.g7_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) - (vec3<f32>(_e49.g1_.x) * vec3<f32>(_e53.g5_.x, _e56.g4_.x, _e59.g6_.x))) - (vec3<f32>(_e65.g1_.y) * vec3<f32>(_e69.g5_.y, _e72.g4_.y, _e75.g6_.y))) - (vec3<f32>(_e81.g1_.z) * vec3<f32>(_e85.g5_.z, _e88.g4_.z, _e91.g6_.z))) + ((vec3<f32>(_e97.g2_.x) * vec3<f32>(_e101.g8_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e113.g2_.y) * vec3<f32>(_e117.g8_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e129.g2_.z) * vec3<f32>(_e133.g8_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e145.g2_.w) * vec3<f32>(_e149.g8_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e161.g0_.x) * vec3<f32>(_e165.g5_.x, _e168.g5_.x, _e171.g7_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), ((((vec3<f32>(_e184.g1_.x) * vec3<f32>(_e188.g8_.w, _e191.g1_.z, _e194.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e205.g1_.y) * vec3<f32>(_e209.g1_.z, _e212.g8_.w, _e215.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e227.g1_.z) * vec3<f32>(_e231.g1_.y, _e234.g1_.x, _e237.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((((((((vec2<f32>(_e249.g0_.y) * vec2<f32>(_e253.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e262.g0_.z) * vec2<f32>(_e266.g1_.z)) * vec2<f32>(1.0, 0.0))) - (vec2<f32>(_e276.g1_.x) * vec2<f32>(_e280.g8_.x, _e283.g7_.x))) - (vec2<f32>(_e289.g1_.y) * vec2<f32>(_e293.g8_.y, _e296.g7_.y))) - (vec2<f32>(_e302.g1_.z) * vec2<f32>(_e306.g8_.z, _e309.g7_.z))) + ((vec2<f32>(_e315.g2_.x) * vec2<f32>(_e319.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e330.g2_.y) * vec2<f32>(_e334.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e345.g2_.z) * vec2<f32>(_e349.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e360.g0_.x) * vec2<f32>(_e364.g1_.x)) * vec2<f32>(1.0, 0.0))), (((((((((((vec4<f32>(_e374.g0_.y) * vec4<f32>(_e378.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e389.g0_.z) * vec4<f32>(_e393.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e405.g1_.x) * vec4<f32>(_e409.g9_.w, _e412.g3_.z, _e415.g3_.y, _e418.g9_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e432.g1_.y) * vec4<f32>(_e436.g3_.z, _e439.g9_.w, _e442.g3_.x, _e445.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e459.g1_.z) * vec4<f32>(_e463.g3_.y, _e466.g3_.x, _e469.g9_.w, _e472.g9_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e486.g2_.x) * vec4<f32>(_e490.g0_.x, _e493.g5_.z, _e496.g5_.y, _e499.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e513.g2_.y) * vec4<f32>(_e517.g5_.z, _e520.g0_.x, _e523.g5_.x, _e526.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e540.g2_.z) * vec4<f32>(_e544.g5_.y, _e547.g5_.x, _e550.g0_.x, _e553.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e567.g2_.w) * vec4<f32>(_e571.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e583.g0_.x) * vec4<f32>(_e587.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec3<f32>(_e599.g0_.x) * vec3<f32>(_e603.g0_.x, _e606.g5_.z, _e609.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e620.g0_.y) * vec3<f32>(_e624.g5_.z, _e627.g0_.x, _e630.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e642.g0_.z) * vec3<f32>(_e646.g5_.y, _e649.g5_.x, _e652.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e664.g1_.x) * vec3<f32>(_e668.g0_.y, _e671.g4_.z, _e674.g4_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e686.g1_.y) * vec3<f32>(_e690.g4_.z, _e693.g0_.y, _e696.g4_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e708.g1_.z) * vec3<f32>(_e712.g4_.y, _e715.g4_.x, _e718.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((vec3<f32>(_e730.g1_.x) * vec3<f32>(_e734.g0_.x, _e737.g5_.z, _e740.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e751.g1_.y) * vec3<f32>(_e755.g5_.z, _e758.g0_.x, _e761.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e773.g1_.z) * vec3<f32>(_e777.g5_.y, _e780.g5_.x, _e783.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((((((((vec3<f32>(_e795.g0_.x) * vec3<f32>(_e799.g2_.y, _e802.g7_.z, _e805.g7_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e816.g0_.y) * vec3<f32>(_e820.g7_.z, _e823.g2_.y, _e826.g7_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e838.g0_.z) * vec3<f32>(_e842.g7_.y, _e845.g7_.x, _e848.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e860.g1_.x) * vec3<f32>(_e864.g0_.z, _e867.g6_.z, _e870.g6_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e882.g1_.y) * vec3<f32>(_e886.g6_.z, _e889.g0_.z, _e892.g6_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e904.g1_.z) * vec3<f32>(_e908.g6_.y, _e911.g6_.x, _e914.g0_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e926.g2_.x) * vec3<f32>(_e930.g2_.x, _e933.g8_.z, _e936.g8_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e948.g2_.y) * vec3<f32>(_e952.g8_.z, _e955.g2_.x, _e958.g8_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e970.g2_.z) * vec3<f32>(_e974.g8_.y, _e977.g8_.x, _e980.g2_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e992.g2_.w) * _e996.g1_)), (((((((vec3<f32>(_e1000.g1_.x) * vec3<f32>(_e1004.g2_.y, _e1007.g7_.z, _e1010.g7_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e1021.g1_.y) * vec3<f32>(_e1025.g7_.z, _e1028.g2_.y, _e1031.g7_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1043.g1_.z) * vec3<f32>(_e1047.g7_.y, _e1050.g7_.x, _e1053.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1065.g2_.x) * vec3<f32>(_e1069.g8_.w, _e1072.g1_.z, _e1075.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1087.g2_.y) * vec3<f32>(_e1091.g1_.z, _e1094.g8_.w, _e1097.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1109.g2_.z) * vec3<f32>(_e1113.g1_.y, _e1116.g1_.x, _e1119.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e1131.g0_.y) * vec4<f32>(_e1135.g1_.z, _e1138.g8_.w, _e1141.g1_.x, _e1144.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e1157.g0_.z) * vec4<f32>(_e1161.g1_.y, _e1164.g1_.x, _e1167.g8_.w, _e1170.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1184.g1_.x) * vec4<f32>(_e1188.g2_.x, _e1191.g8_.z, _e1194.g8_.y, _e1197.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1211.g1_.y) * vec4<f32>(_e1215.g8_.z, _e1218.g2_.x, _e1221.g8_.x, _e1224.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1238.g1_.z) * vec4<f32>(_e1242.g8_.y, _e1245.g8_.x, _e1248.g2_.x, _e1251.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1265.g0_.x) * vec4<f32>(_e1269.g8_.w, _e1272.g1_.z, _e1275.g1_.y, _e1278.g8_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))), (((((((((((vec4<f32>(_e1292.g0_.y) * vec4<f32>(_e1296.g3_.z, _e1299.g9_.w, _e1302.g3_.x, _e1305.g3_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e1318.g0_.z) * vec4<f32>(_e1322.g3_.y, _e1325.g3_.x, _e1328.g9_.w, _e1331.g3_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1345.g1_.x) * vec4<f32>(_e1349.g3_.w, _e1352.g9_.z, _e1355.g9_.y, _e1358.g3_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1372.g1_.y) * vec4<f32>(_e1376.g9_.z, _e1379.g3_.w, _e1382.g9_.x, _e1385.g3_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1399.g1_.z) * vec4<f32>(_e1403.g9_.y, _e1406.g9_.x, _e1409.g3_.w, _e1412.g3_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1426.g2_.x) * vec4<f32>(_e1430.g0_.y, _e1433.g4_.z, _e1436.g4_.y, _e1439.g5_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1453.g2_.y) * vec4<f32>(_e1457.g4_.z, _e1460.g0_.y, _e1463.g4_.x, _e1466.g5_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1480.g2_.z) * vec4<f32>(_e1484.g4_.y, _e1487.g4_.x, _e1490.g0_.y, _e1493.g5_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1507.g2_.w) * vec4<f32>(_e1511.g5_.x, _e1514.g5_.y, _e1517.g5_.z, _e1520.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1532.g0_.x) * vec4<f32>(_e1536.g9_.w, _e1539.g3_.z, _e1542.g3_.y, _e1545.g9_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn dipole_multi_vector_geometric_anti_product(self_812: Dipole, other_736: MultiVector) -> MultiVector {
    var self_813: Dipole;
    var other_737: MultiVector;

    self_813 = self_812;
    other_737 = other_736;
    let _e4: Dipole = self_813;
    let _e8: MultiVector = other_737;
    let _e11: MultiVector = other_737;
    let _e14: MultiVector = other_737;
    let _e26: Dipole = self_813;
    let _e30: MultiVector = other_737;
    let _e33: MultiVector = other_737;
    let _e36: MultiVector = other_737;
    let _e49: Dipole = self_813;
    let _e53: MultiVector = other_737;
    let _e65: Dipole = self_813;
    let _e69: MultiVector = other_737;
    let _e81: Dipole = self_813;
    let _e85: MultiVector = other_737;
    let _e97: Dipole = self_813;
    let _e101: MultiVector = other_737;
    let _e113: Dipole = self_813;
    let _e117: MultiVector = other_737;
    let _e129: Dipole = self_813;
    let _e133: MultiVector = other_737;
    let _e145: Dipole = self_813;
    let _e149: MultiVector = other_737;
    let _e152: MultiVector = other_737;
    let _e155: MultiVector = other_737;
    let _e168: Dipole = self_813;
    let _e172: MultiVector = other_737;
    let _e175: MultiVector = other_737;
    let _e178: MultiVector = other_737;
    let _e191: Dipole = self_813;
    let _e195: MultiVector = other_737;
    let _e198: MultiVector = other_737;
    let _e201: MultiVector = other_737;
    let _e212: Dipole = self_813;
    let _e216: MultiVector = other_737;
    let _e219: MultiVector = other_737;
    let _e222: MultiVector = other_737;
    let _e234: Dipole = self_813;
    let _e238: MultiVector = other_737;
    let _e241: MultiVector = other_737;
    let _e244: MultiVector = other_737;
    let _e256: Dipole = self_813;
    let _e260: MultiVector = other_737;
    let _e263: MultiVector = other_737;
    let _e266: MultiVector = other_737;
    let _e278: Dipole = self_813;
    let _e282: MultiVector = other_737;
    let _e285: MultiVector = other_737;
    let _e288: MultiVector = other_737;
    let _e300: Dipole = self_813;
    let _e304: MultiVector = other_737;
    let _e307: MultiVector = other_737;
    let _e310: MultiVector = other_737;
    let _e322: Dipole = self_813;
    let _e326: MultiVector = other_737;
    let _e329: MultiVector = other_737;
    let _e332: MultiVector = other_737;
    let _e345: Dipole = self_813;
    let _e349: MultiVector = other_737;
    let _e352: MultiVector = other_737;
    let _e355: MultiVector = other_737;
    let _e368: Dipole = self_813;
    let _e372: MultiVector = other_737;
    let _e375: MultiVector = other_737;
    let _e378: MultiVector = other_737;
    let _e391: Dipole = self_813;
    let _e395: MultiVector = other_737;
    let _e399: Dipole = self_813;
    let _e403: MultiVector = other_737;
    let _e413: Dipole = self_813;
    let _e417: MultiVector = other_737;
    let _e428: Dipole = self_813;
    let _e432: MultiVector = other_737;
    let _e442: Dipole = self_813;
    let _e446: MultiVector = other_737;
    let _e456: Dipole = self_813;
    let _e460: MultiVector = other_737;
    let _e470: Dipole = self_813;
    let _e474: MultiVector = other_737;
    let _e477: MultiVector = other_737;
    let _e488: Dipole = self_813;
    let _e492: MultiVector = other_737;
    let _e503: Dipole = self_813;
    let _e507: MultiVector = other_737;
    let _e510: MultiVector = other_737;
    let _e513: MultiVector = other_737;
    let _e516: MultiVector = other_737;
    let _e528: Dipole = self_813;
    let _e532: MultiVector = other_737;
    let _e535: MultiVector = other_737;
    let _e538: MultiVector = other_737;
    let _e541: MultiVector = other_737;
    let _e554: Dipole = self_813;
    let _e558: MultiVector = other_737;
    let _e561: MultiVector = other_737;
    let _e564: MultiVector = other_737;
    let _e567: MultiVector = other_737;
    let _e582: Dipole = self_813;
    let _e586: MultiVector = other_737;
    let _e589: MultiVector = other_737;
    let _e592: MultiVector = other_737;
    let _e595: MultiVector = other_737;
    let _e608: Dipole = self_813;
    let _e612: MultiVector = other_737;
    let _e615: MultiVector = other_737;
    let _e618: MultiVector = other_737;
    let _e629: Dipole = self_813;
    let _e633: MultiVector = other_737;
    let _e636: MultiVector = other_737;
    let _e639: MultiVector = other_737;
    let _e651: Dipole = self_813;
    let _e655: MultiVector = other_737;
    let _e658: MultiVector = other_737;
    let _e661: MultiVector = other_737;
    let _e673: Dipole = self_813;
    let _e677: MultiVector = other_737;
    let _e680: MultiVector = other_737;
    let _e683: MultiVector = other_737;
    let _e689: Dipole = self_813;
    let _e693: MultiVector = other_737;
    let _e696: MultiVector = other_737;
    let _e699: MultiVector = other_737;
    let _e710: Dipole = self_813;
    let _e714: MultiVector = other_737;
    let _e717: MultiVector = other_737;
    let _e720: MultiVector = other_737;
    let _e732: Dipole = self_813;
    let _e736: MultiVector = other_737;
    let _e739: MultiVector = other_737;
    let _e742: MultiVector = other_737;
    let _e754: Dipole = self_813;
    let _e758: MultiVector = other_737;
    let _e761: MultiVector = other_737;
    let _e764: MultiVector = other_737;
    let _e776: Dipole = self_813;
    let _e780: MultiVector = other_737;
    let _e783: MultiVector = other_737;
    let _e786: MultiVector = other_737;
    let _e798: Dipole = self_813;
    let _e802: MultiVector = other_737;
    let _e805: MultiVector = other_737;
    let _e808: MultiVector = other_737;
    let _e820: Dipole = self_813;
    let _e824: MultiVector = other_737;
    let _e827: MultiVector = other_737;
    let _e830: MultiVector = other_737;
    let _e842: Dipole = self_813;
    let _e846: MultiVector = other_737;
    let _e849: MultiVector = other_737;
    let _e852: MultiVector = other_737;
    let _e864: Dipole = self_813;
    let _e868: MultiVector = other_737;
    let _e871: MultiVector = other_737;
    let _e874: MultiVector = other_737;
    let _e886: Dipole = self_813;
    let _e890: MultiVector = other_737;
    let _e896: Dipole = self_813;
    let _e900: MultiVector = other_737;
    let _e903: MultiVector = other_737;
    let _e906: MultiVector = other_737;
    let _e912: Dipole = self_813;
    let _e916: MultiVector = other_737;
    let _e919: MultiVector = other_737;
    let _e922: MultiVector = other_737;
    let _e934: Dipole = self_813;
    let _e938: MultiVector = other_737;
    let _e941: MultiVector = other_737;
    let _e944: MultiVector = other_737;
    let _e957: Dipole = self_813;
    let _e961: MultiVector = other_737;
    let _e964: MultiVector = other_737;
    let _e967: MultiVector = other_737;
    let _e980: Dipole = self_813;
    let _e984: MultiVector = other_737;
    let _e987: MultiVector = other_737;
    let _e990: MultiVector = other_737;
    let _e996: Dipole = self_813;
    let _e1000: MultiVector = other_737;
    let _e1003: MultiVector = other_737;
    let _e1006: MultiVector = other_737;
    let _e1009: MultiVector = other_737;
    let _e1022: Dipole = self_813;
    let _e1026: MultiVector = other_737;
    let _e1029: MultiVector = other_737;
    let _e1032: MultiVector = other_737;
    let _e1035: MultiVector = other_737;
    let _e1049: Dipole = self_813;
    let _e1053: MultiVector = other_737;
    let _e1056: MultiVector = other_737;
    let _e1059: MultiVector = other_737;
    let _e1062: MultiVector = other_737;
    let _e1076: Dipole = self_813;
    let _e1080: MultiVector = other_737;
    let _e1093: Dipole = self_813;
    let _e1097: MultiVector = other_737;
    let _e1110: Dipole = self_813;
    let _e1114: MultiVector = other_737;
    let _e1126: Dipole = self_813;
    let _e1130: MultiVector = other_737;
    let _e1142: Dipole = self_813;
    let _e1146: MultiVector = other_737;
    let _e1158: Dipole = self_813;
    let _e1162: MultiVector = other_737;
    let _e1165: MultiVector = other_737;
    let _e1168: MultiVector = other_737;
    let _e1171: MultiVector = other_737;
    let _e1186: Dipole = self_813;
    let _e1190: MultiVector = other_737;
    let _e1203: Dipole = self_813;
    let _e1207: MultiVector = other_737;
    let _e1219: Dipole = self_813;
    let _e1223: MultiVector = other_737;
    let _e1236: Dipole = self_813;
    let _e1240: MultiVector = other_737;
    let _e1243: MultiVector = other_737;
    let _e1246: MultiVector = other_737;
    let _e1249: MultiVector = other_737;
    let _e1262: Dipole = self_813;
    let _e1266: MultiVector = other_737;
    return MultiVector((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g7_.y, _e11.g6_.y, _e14.g7_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0)) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g7_.z, _e33.g6_.z, _e36.g7_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e49.g1_.x) * vec3<f32>(_e53.g6_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e65.g1_.y) * vec3<f32>(_e69.g6_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e81.g1_.z) * vec3<f32>(_e85.g6_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e97.g2_.x) * vec3<f32>(_e101.g8_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e113.g2_.y) * vec3<f32>(_e117.g8_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e129.g2_.z) * vec3<f32>(_e133.g8_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e145.g2_.w) * vec3<f32>(_e149.g8_.w, _e152.g2_.x, _e155.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e168.g0_.x) * vec3<f32>(_e172.g7_.x, _e175.g6_.x, _e178.g7_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))), (((((((((((vec3<f32>(_e191.g0_.x) * vec3<f32>(_e195.g9_.w, _e198.g3_.z, _e201.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e212.g0_.y) * vec3<f32>(_e216.g3_.z, _e219.g9_.w, _e222.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e234.g0_.z) * vec3<f32>(_e238.g3_.y, _e241.g3_.x, _e244.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e256.g1_.x) * vec3<f32>(_e260.g3_.w, _e263.g9_.z, _e266.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e278.g1_.y) * vec3<f32>(_e282.g9_.z, _e285.g3_.w, _e288.g9_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e300.g1_.z) * vec3<f32>(_e304.g9_.y, _e307.g9_.x, _e310.g3_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e322.g2_.x) * vec3<f32>(_e326.g0_.y, _e329.g4_.z, _e332.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e345.g2_.y) * vec3<f32>(_e349.g4_.z, _e352.g0_.y, _e355.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e368.g2_.z) * vec3<f32>(_e372.g4_.y, _e375.g4_.x, _e378.g0_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e391.g2_.w) * _e395.g5_)), ((((((((vec2<f32>(_e399.g0_.y) * vec2<f32>(_e403.g9_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e413.g0_.z) * vec2<f32>(_e417.g9_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e428.g2_.x) * vec2<f32>(_e432.g9_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e442.g2_.y) * vec2<f32>(_e446.g9_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e456.g2_.z) * vec2<f32>(_e460.g9_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e470.g2_.w) * vec2<f32>(_e474.g0_.y, _e477.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e488.g0_.x) * vec2<f32>(_e492.g9_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e503.g2_.y) * vec4<f32>(_e507.g6_.z, _e510.g0_.z, _e513.g6_.x, _e516.g6_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e528.g2_.z) * vec4<f32>(_e532.g6_.y, _e535.g6_.x, _e538.g0_.z, _e541.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e554.g2_.w) * vec4<f32>(_e558.g7_.x, _e561.g7_.y, _e564.g7_.z, _e567.g0_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e582.g2_.x) * vec4<f32>(_e586.g0_.z, _e589.g6_.z, _e592.g6_.y, _e595.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec3<f32>(_e608.g0_.x) * vec3<f32>(_e612.g0_.z, _e615.g6_.z, _e618.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e629.g0_.y) * vec3<f32>(_e633.g6_.z, _e636.g0_.z, _e639.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e651.g0_.z) * vec3<f32>(_e655.g6_.y, _e658.g6_.x, _e661.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e673.g2_.w) * vec3<f32>(_e677.g8_.x, _e680.g8_.y, _e683.g8_.z))), (((((((((((vec3<f32>(_e689.g0_.x) * vec3<f32>(_e693.g2_.y, _e696.g7_.z, _e699.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e710.g0_.y) * vec3<f32>(_e714.g7_.z, _e717.g2_.y, _e720.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e732.g0_.z) * vec3<f32>(_e736.g7_.y, _e739.g7_.x, _e742.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e754.g1_.x) * vec3<f32>(_e758.g0_.z, _e761.g6_.z, _e764.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e776.g1_.y) * vec3<f32>(_e780.g6_.z, _e783.g0_.z, _e786.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e798.g1_.z) * vec3<f32>(_e802.g6_.y, _e805.g6_.x, _e808.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e820.g2_.x) * vec3<f32>(_e824.g2_.x, _e827.g8_.z, _e830.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e842.g2_.y) * vec3<f32>(_e846.g8_.z, _e849.g2_.x, _e852.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e864.g2_.z) * vec3<f32>(_e868.g8_.y, _e871.g8_.x, _e874.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e886.g2_.w) * _e890.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e896.g2_.w) * vec3<f32>(_e900.g9_.x, _e903.g9_.y, _e906.g9_.z))), (((((vec3<f32>(_e912.g2_.x) * vec3<f32>(_e916.g3_.w, _e919.g9_.z, _e922.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e934.g2_.y) * vec3<f32>(_e938.g9_.z, _e941.g3_.w, _e944.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e957.g2_.z) * vec3<f32>(_e961.g9_.y, _e964.g9_.x, _e967.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e980.g2_.w) * vec3<f32>(_e984.g3_.x, _e987.g3_.y, _e990.g3_.z))), (((((((((((vec4<f32>(_e996.g0_.x) * vec4<f32>(_e1000.g3_.w, _e1003.g9_.z, _e1006.g9_.y, _e1009.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e1022.g0_.y) * vec4<f32>(_e1026.g9_.z, _e1029.g3_.w, _e1032.g9_.x, _e1035.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1049.g0_.z) * vec4<f32>(_e1053.g9_.y, _e1056.g9_.x, _e1059.g3_.w, _e1062.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1076.g1_.y) * vec4<f32>(_e1080.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1093.g1_.z) * vec4<f32>(_e1097.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1110.g2_.x) * vec4<f32>(_e1114.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1126.g2_.y) * vec4<f32>(_e1130.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1142.g2_.z) * vec4<f32>(_e1146.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1158.g2_.w) * vec4<f32>(_e1162.g4_.x, _e1165.g4_.y, _e1168.g4_.z, _e1171.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e1186.g1_.x) * vec4<f32>(_e1190.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e1203.g2_.y) * vec4<f32>(_e1207.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1219.g2_.z) * vec4<f32>(_e1223.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1236.g2_.w) * vec4<f32>(_e1240.g6_.x, _e1243.g6_.y, _e1246.g6_.z, _e1249.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1262.g2_.x) * vec4<f32>(_e1266.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn dipole_multi_vector_scalar_product(self_814: Dipole, other_738: MultiVector) -> Scalar {
    var self_815: Dipole;
    var other_739: MultiVector;

    self_815 = self_814;
    other_739 = other_738;
    let _e5: Dipole = self_815;
    let _e8: MultiVector = other_739;
    let _e13: Dipole = self_815;
    let _e16: MultiVector = other_739;
    let _e21: Dipole = self_815;
    let _e24: MultiVector = other_739;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g5_.x)) - (_e13.g1_.y * _e16.g5_.y)) - (_e21.g1_.z * _e24.g5_.z)));
}

fn dipole_multi_vector_anti_scalar_product(self_816: Dipole, other_740: MultiVector) -> AntiScalar {
    var self_817: Dipole;
    var other_741: MultiVector;

    self_817 = self_816;
    other_741 = other_740;
    let _e5: Dipole = self_817;
    let _e8: MultiVector = other_741;
    return AntiScalar((0.0 - (_e5.g2_.w * _e8.g3_.w)));
}

fn dipole_squared_magnitude(self_818: Dipole) -> Scalar {
    var self_819: Dipole;

    self_819 = self_818;
    let _e2: Dipole = self_819;
    let _e3: Dipole = self_819;
    let _e4: Dipole = dipole_reversal(_e3);
    let _e5: Scalar = dipole_dipole_scalar_product(_e2, _e4);
    return _e5;
}

fn dipole_magnitude(self_820: Dipole) -> Scalar {
    var self_821: Dipole;

    self_821 = self_820;
    let _e2: Dipole = self_821;
    let _e3: Scalar = dipole_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn dipole_scale(self_822: Dipole, other_742: f32) -> Dipole {
    var self_823: Dipole;
    var other_743: f32;

    self_823 = self_822;
    other_743 = other_742;
    let _e4: Dipole = self_823;
    let _e5: f32 = other_743;
    let _e7: Dipole = dipole_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn dipole_signum(self_824: Dipole) -> Dipole {
    var self_825: Dipole;

    self_825 = self_824;
    let _e2: Dipole = self_825;
    let _e3: Dipole = self_825;
    let _e4: Scalar = dipole_magnitude(_e3);
    let _e9: Dipole = dipole_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn dipole_inverse(self_826: Dipole) -> Dipole {
    var self_827: Dipole;

    self_827 = self_826;
    let _e2: Dipole = self_827;
    let _e3: Dipole = dipole_reversal(_e2);
    let _e4: Dipole = self_827;
    let _e5: Scalar = dipole_squared_magnitude(_e4);
    let _e10: Dipole = dipole_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn line_zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_neg(self_828: Line) -> Line {
    var self_829: Line;

    self_829 = self_828;
    let _e2: Line = self_829;
    let _e8: Line = self_829;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_automorphism(self_830: Line) -> Line {
    var self_831: Line;

    self_831 = self_830;
    let _e2: Line = self_831;
    let _e8: Line = self_831;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_reversal(self_832: Line) -> Line {
    var self_833: Line;

    self_833 = self_832;
    let _e2: Line = self_833;
    let _e8: Line = self_833;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_conjugation(self_834: Line) -> Line {
    var self_835: Line;

    self_835 = self_834;
    let _e2: Line = self_835;
    let _e4: Line = self_835;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_anti_reversal(self_836: Line) -> Line {
    var self_837: Line;

    self_837 = self_836;
    let _e2: Line = self_837;
    let _e4: Line = self_837;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_scalar_geometric_product(self_838: Line, other_744: Scalar) -> Line {
    var self_839: Line;
    var other_745: Scalar;

    self_839 = self_838;
    other_745 = other_744;
    let _e4: Line = self_839;
    let _e6: Scalar = other_745;
    let _e10: Line = self_839;
    let _e12: Scalar = other_745;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_outer_product(self_840: Line, other_746: Scalar) -> Line {
    var self_841: Line;
    var other_747: Scalar;

    self_841 = self_840;
    other_747 = other_746;
    let _e4: Line = self_841;
    let _e6: Scalar = other_747;
    let _e10: Line = self_841;
    let _e12: Scalar = other_747;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_inner_product(self_842: Line, other_748: Scalar) -> Line {
    var self_843: Line;
    var other_749: Scalar;

    self_843 = self_842;
    other_749 = other_748;
    let _e4: Line = self_843;
    let _e6: Scalar = other_749;
    let _e10: Line = self_843;
    let _e12: Scalar = other_749;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_right_contraction(self_844: Line, other_750: Scalar) -> Line {
    var self_845: Line;
    var other_751: Scalar;

    self_845 = self_844;
    other_751 = other_750;
    let _e4: Line = self_845;
    let _e6: Scalar = other_751;
    let _e10: Line = self_845;
    let _e12: Scalar = other_751;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_regressive_product(self_846: Line, other_752: AntiScalar) -> Line {
    var self_847: Line;
    var other_753: AntiScalar;

    self_847 = self_846;
    other_753 = other_752;
    let _e4: Line = self_847;
    let _e6: AntiScalar = other_753;
    let _e10: Line = self_847;
    let _e12: AntiScalar = other_753;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_geometric_anti_product(self_848: Line, other_754: AntiScalar) -> Line {
    var self_849: Line;
    var other_755: AntiScalar;

    self_849 = self_848;
    other_755 = other_754;
    let _e4: Line = self_849;
    let _e6: AntiScalar = other_755;
    let _e10: Line = self_849;
    let _e12: AntiScalar = other_755;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_inner_anti_product(self_850: Line, other_756: AntiScalar) -> Line {
    var self_851: Line;
    var other_757: AntiScalar;

    self_851 = self_850;
    other_757 = other_756;
    let _e4: Line = self_851;
    let _e6: AntiScalar = other_757;
    let _e10: Line = self_851;
    let _e12: AntiScalar = other_757;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_right_anti_contraction(self_852: Line, other_758: AntiScalar) -> Line {
    var self_853: Line;
    var other_759: AntiScalar;

    self_853 = self_852;
    other_759 = other_758;
    let _e4: Line = self_853;
    let _e6: AntiScalar = other_759;
    let _e10: Line = self_853;
    let _e12: AntiScalar = other_759;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_radial_point_geometric_product(self_854: Line, other_760: RadialPoint) -> Flector {
    var self_855: Line;
    var other_761: RadialPoint;

    self_855 = self_854;
    other_761 = other_760;
    let _e4: Line = self_855;
    let _e8: RadialPoint = other_761;
    let _e20: Line = self_855;
    let _e24: RadialPoint = other_761;
    let _e37: Line = self_855;
    let _e41: RadialPoint = other_761;
    let _e44: RadialPoint = other_761;
    let _e47: RadialPoint = other_761;
    let _e50: RadialPoint = other_761;
    let _e63: Line = self_855;
    let _e67: RadialPoint = other_761;
    let _e70: RadialPoint = other_761;
    let _e73: RadialPoint = other_761;
    let _e76: RadialPoint = other_761;
    let _e89: Line = self_855;
    let _e92: Line = self_855;
    let _e95: Line = self_855;
    let _e98: Line = self_855;
    let _e102: RadialPoint = other_761;
    let _e105: RadialPoint = other_761;
    let _e108: RadialPoint = other_761;
    let _e111: RadialPoint = other_761;
    let _e125: Line = self_855;
    let _e129: RadialPoint = other_761;
    let _e132: RadialPoint = other_761;
    let _e135: RadialPoint = other_761;
    let _e138: RadialPoint = other_761;
    let _e150: Line = self_855;
    let _e154: RadialPoint = other_761;
    let _e157: RadialPoint = other_761;
    let _e160: RadialPoint = other_761;
    let _e163: RadialPoint = other_761;
    let _e176: Line = self_855;
    let _e180: RadialPoint = other_761;
    let _e183: RadialPoint = other_761;
    let _e186: RadialPoint = other_761;
    let _e189: RadialPoint = other_761;
    let _e202: Line = self_855;
    let _e206: RadialPoint = other_761;
    let _e209: RadialPoint = other_761;
    let _e212: RadialPoint = other_761;
    let _e215: RadialPoint = other_761;
    let _e228: Line = self_855;
    let _e232: RadialPoint = other_761;
    let _e235: RadialPoint = other_761;
    let _e238: RadialPoint = other_761;
    let _e241: RadialPoint = other_761;
    let _e254: Line = self_855;
    let _e258: RadialPoint = other_761;
    let _e261: RadialPoint = other_761;
    let _e264: RadialPoint = other_761;
    let _e267: RadialPoint = other_761;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.x, _e50.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e63.g1_.z) * vec4<f32>(_e67.g0_.y, _e70.g0_.x, _e73.g0_.y, _e76.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e89.g0_.x, _e92.g1_.x, _e95.g1_.x, _e98.g0_.x) * vec4<f32>(_e102.g0_.x, _e105.g0_.z, _e108.g0_.y, _e111.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e125.g0_.y) * vec4<f32>(_e129.g0_.z, _e132.g0_.z, _e135.g0_.x, _e138.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e150.g0_.z) * vec4<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g0_.y, _e163.g0_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e176.g1_.x) * vec4<f32>(_e180.g1_.x, _e183.g1_.x, _e186.g1_.x, _e189.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e202.g1_.y) * vec4<f32>(_e206.g1_.x, _e209.g1_.x, _e212.g1_.x, _e215.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e228.g1_.z) * vec4<f32>(_e232.g1_.x, _e235.g1_.x, _e238.g1_.x, _e241.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e254.g0_.x) * vec4<f32>(_e258.g0_.x, _e261.g0_.z, _e264.g0_.y, _e267.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))));
}

fn line_radial_point_outer_product(self_856: Line, other_762: RadialPoint) -> Plane {
    var self_857: Line;
    var other_763: RadialPoint;

    self_857 = self_856;
    other_763 = other_762;
    let _e4: Line = self_857;
    let _e8: RadialPoint = other_763;
    let _e11: RadialPoint = other_763;
    let _e14: RadialPoint = other_763;
    let _e17: RadialPoint = other_763;
    let _e29: Line = self_857;
    let _e33: RadialPoint = other_763;
    let _e36: RadialPoint = other_763;
    let _e39: RadialPoint = other_763;
    let _e42: RadialPoint = other_763;
    let _e55: Line = self_857;
    let _e59: RadialPoint = other_763;
    let _e62: RadialPoint = other_763;
    let _e65: RadialPoint = other_763;
    let _e68: RadialPoint = other_763;
    let _e81: Line = self_857;
    let _e85: RadialPoint = other_763;
    let _e88: RadialPoint = other_763;
    let _e91: RadialPoint = other_763;
    let _e94: RadialPoint = other_763;
    let _e107: Line = self_857;
    let _e111: RadialPoint = other_763;
    let _e114: RadialPoint = other_763;
    let _e117: RadialPoint = other_763;
    let _e120: RadialPoint = other_763;
    let _e133: Line = self_857;
    let _e137: RadialPoint = other_763;
    let _e140: RadialPoint = other_763;
    let _e143: RadialPoint = other_763;
    let _e146: RadialPoint = other_763;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g0_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g1_.x, _e62.g1_.x, _e65.g1_.x, _e68.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e81.g1_.y) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.x, _e94.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e107.g1_.z) * vec4<f32>(_e111.g1_.x, _e114.g1_.x, _e117.g1_.x, _e120.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y, _e146.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))));
}

fn line_radial_point_inner_product(self_858: Line, other_764: RadialPoint) -> FlatPoint {
    var self_859: Line;
    var other_765: RadialPoint;

    self_859 = self_858;
    other_765 = other_764;
    let _e4: Line = self_859;
    let _e8: RadialPoint = other_765;
    let _e20: Line = self_859;
    let _e24: RadialPoint = other_765;
    let _e37: Line = self_859;
    let _e41: RadialPoint = other_765;
    let _e44: RadialPoint = other_765;
    let _e47: RadialPoint = other_765;
    let _e50: RadialPoint = other_765;
    let _e63: Line = self_859;
    let _e67: RadialPoint = other_765;
    let _e70: RadialPoint = other_765;
    let _e73: RadialPoint = other_765;
    let _e76: RadialPoint = other_765;
    let _e89: Line = self_859;
    let _e92: Line = self_859;
    let _e95: Line = self_859;
    let _e98: Line = self_859;
    let _e102: RadialPoint = other_765;
    let _e105: RadialPoint = other_765;
    let _e108: RadialPoint = other_765;
    let _e111: RadialPoint = other_765;
    return FlatPoint(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.x, _e50.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e63.g1_.z) * vec4<f32>(_e67.g0_.y, _e70.g0_.x, _e73.g0_.y, _e76.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e89.g0_.x, _e92.g1_.x, _e95.g1_.x, _e98.g0_.x) * vec4<f32>(_e102.g0_.x, _e105.g0_.z, _e108.g0_.y, _e111.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_radial_point_right_contraction(self_860: Line, other_766: RadialPoint) -> FlatPoint {
    var self_861: Line;
    var other_767: RadialPoint;

    self_861 = self_860;
    other_767 = other_766;
    let _e4: Line = self_861;
    let _e8: RadialPoint = other_767;
    let _e20: Line = self_861;
    let _e24: RadialPoint = other_767;
    let _e37: Line = self_861;
    let _e41: RadialPoint = other_767;
    let _e44: RadialPoint = other_767;
    let _e47: RadialPoint = other_767;
    let _e50: RadialPoint = other_767;
    let _e63: Line = self_861;
    let _e67: RadialPoint = other_767;
    let _e70: RadialPoint = other_767;
    let _e73: RadialPoint = other_767;
    let _e76: RadialPoint = other_767;
    let _e89: Line = self_861;
    let _e92: Line = self_861;
    let _e95: Line = self_861;
    let _e98: Line = self_861;
    let _e102: RadialPoint = other_767;
    let _e105: RadialPoint = other_767;
    let _e108: RadialPoint = other_767;
    let _e111: RadialPoint = other_767;
    return FlatPoint(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.x, _e50.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e63.g1_.z) * vec4<f32>(_e67.g0_.y, _e70.g0_.x, _e73.g0_.y, _e76.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e89.g0_.x, _e92.g1_.x, _e95.g1_.x, _e98.g0_.x) * vec4<f32>(_e102.g0_.x, _e105.g0_.z, _e108.g0_.y, _e111.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flat_point_inner_anti_product(self_862: Line, other_768: FlatPoint) -> Plane {
    var self_863: Line;
    var other_769: FlatPoint;

    self_863 = self_862;
    other_769 = other_768;
    let _e4: Line = self_863;
    let _e8: FlatPoint = other_769;
    let _e19: Line = self_863;
    let _e23: FlatPoint = other_769;
    let _e35: Line = self_863;
    let _e39: FlatPoint = other_769;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_flat_point_left_anti_contraction(self_864: Line, other_770: FlatPoint) -> Plane {
    var self_865: Line;
    var other_771: FlatPoint;

    self_865 = self_864;
    other_771 = other_770;
    let _e4: Line = self_865;
    let _e8: FlatPoint = other_771;
    let _e19: Line = self_865;
    let _e23: FlatPoint = other_771;
    let _e35: Line = self_865;
    let _e39: FlatPoint = other_771;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_dipole_geometric_product(self_866: Line, other_772: Dipole) -> Motor {
    var self_867: Line;
    var other_773: Dipole;

    self_867 = self_866;
    other_773 = other_772;
    let _e4: Line = self_867;
    let _e8: Dipole = other_773;
    let _e11: Dipole = other_773;
    let _e14: Dipole = other_773;
    let _e17: Dipole = other_773;
    let _e30: Line = self_867;
    let _e34: Dipole = other_773;
    let _e37: Dipole = other_773;
    let _e40: Dipole = other_773;
    let _e43: Dipole = other_773;
    let _e57: Line = self_867;
    let _e61: Dipole = other_773;
    let _e64: Dipole = other_773;
    let _e67: Dipole = other_773;
    let _e70: Dipole = other_773;
    let _e84: Line = self_867;
    let _e88: Dipole = other_773;
    let _e91: Dipole = other_773;
    let _e94: Dipole = other_773;
    let _e97: Dipole = other_773;
    let _e111: Line = self_867;
    let _e115: Dipole = other_773;
    let _e118: Dipole = other_773;
    let _e121: Dipole = other_773;
    let _e124: Dipole = other_773;
    let _e138: Line = self_867;
    let _e142: Dipole = other_773;
    let _e145: Dipole = other_773;
    let _e148: Dipole = other_773;
    let _e151: Dipole = other_773;
    let _e165: Line = self_867;
    let _e169: Dipole = other_773;
    let _e172: Dipole = other_773;
    let _e175: Dipole = other_773;
    let _e178: Dipole = other_773;
    let _e191: Line = self_867;
    let _e195: Dipole = other_773;
    let _e198: Dipole = other_773;
    let _e201: Dipole = other_773;
    let _e204: Dipole = other_773;
    let _e218: Line = self_867;
    let _e222: Dipole = other_773;
    let _e225: Dipole = other_773;
    let _e228: Dipole = other_773;
    let _e231: Dipole = other_773;
    return Motor((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g0_.z, _e64.g0_.z, _e67.g0_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e111.g1_.z) * vec4<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y, _e124.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e138.g0_.x) * vec4<f32>(_e142.g1_.x, _e145.g1_.z, _e148.g1_.y, _e151.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e165.g1_.y) * vec4<f32>(_e169.g1_.z, _e172.g1_.z, _e175.g1_.x, _e178.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e191.g1_.z) * vec4<f32>(_e195.g1_.y, _e198.g1_.x, _e201.g1_.y, _e204.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e218.g1_.x) * vec4<f32>(_e222.g1_.x, _e225.g1_.z, _e228.g1_.y, _e231.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn line_dipole_regressive_product(self_868: Line, other_774: Dipole) -> Scalar {
    var self_869: Line;
    var other_775: Dipole;

    self_869 = self_868;
    other_775 = other_774;
    let _e5: Line = self_869;
    let _e8: Dipole = other_775;
    let _e13: Line = self_869;
    let _e16: Dipole = other_775;
    let _e21: Line = self_869;
    let _e24: Dipole = other_775;
    let _e29: Line = self_869;
    let _e32: Dipole = other_775;
    let _e37: Line = self_869;
    let _e40: Dipole = other_775;
    let _e45: Line = self_869;
    let _e48: Dipole = other_775;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_dipole_outer_product(self_870: Line, other_776: Dipole) -> AntiScalar {
    var self_871: Line;
    var other_777: Dipole;

    self_871 = self_870;
    other_777 = other_776;
    let _e5: Line = self_871;
    let _e8: Dipole = other_777;
    let _e13: Line = self_871;
    let _e16: Dipole = other_777;
    let _e21: Line = self_871;
    let _e24: Dipole = other_777;
    let _e29: Line = self_871;
    let _e32: Dipole = other_777;
    let _e37: Line = self_871;
    let _e40: Dipole = other_777;
    let _e45: Line = self_871;
    let _e48: Dipole = other_777;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_dipole_inner_anti_product(self_872: Line, other_778: Dipole) -> Sphere {
    var self_873: Line;
    var other_779: Dipole;

    self_873 = self_872;
    other_779 = other_778;
    let _e6: Line = self_873;
    let _e10: Dipole = other_779;
    let _e13: Dipole = other_779;
    let _e19: Line = self_873;
    let _e23: Dipole = other_779;
    let _e26: Dipole = other_779;
    let _e32: Line = self_873;
    let _e36: Dipole = other_779;
    let _e39: Dipole = other_779;
    let _e45: Line = self_873;
    let _e47: Dipole = other_779;
    return Sphere((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g0_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g0_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g0_.z, _e39.g2_.z))), (_e45.g0_ * vec3<f32>(_e47.g2_.w)));
}

fn line_dipole_left_anti_contraction(self_874: Line, other_780: Dipole) -> Sphere {
    var self_875: Line;
    var other_781: Dipole;

    self_875 = self_874;
    other_781 = other_780;
    let _e6: Line = self_875;
    let _e10: Dipole = other_781;
    let _e13: Dipole = other_781;
    let _e19: Line = self_875;
    let _e23: Dipole = other_781;
    let _e26: Dipole = other_781;
    let _e32: Line = self_875;
    let _e36: Dipole = other_781;
    let _e39: Dipole = other_781;
    let _e45: Line = self_875;
    let _e47: Dipole = other_781;
    return Sphere((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g0_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g0_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g0_.z, _e39.g2_.z))), (_e45.g0_ * vec3<f32>(_e47.g2_.w)));
}

fn line_line_add(self_876: Line, other_782: Line) -> Line {
    var self_877: Line;
    var other_783: Line;

    self_877 = self_876;
    other_783 = other_782;
    let _e4: Line = self_877;
    let _e6: Line = other_783;
    let _e9: Line = self_877;
    let _e11: Line = other_783;
    return Line((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn line_line_sub(self_878: Line, other_784: Line) -> Line {
    var self_879: Line;
    var other_785: Line;

    self_879 = self_878;
    other_785 = other_784;
    let _e4: Line = self_879;
    let _e6: Line = other_785;
    let _e9: Line = self_879;
    let _e11: Line = other_785;
    return Line((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn line_line_mul(self_880: Line, other_786: Line) -> Line {
    var self_881: Line;
    var other_787: Line;

    self_881 = self_880;
    other_787 = other_786;
    let _e4: Line = self_881;
    let _e6: Line = other_787;
    let _e9: Line = self_881;
    let _e11: Line = other_787;
    return Line((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn line_line_div(self_882: Line, other_788: Line) -> Line {
    var self_883: Line;
    var other_789: Line;

    self_883 = self_882;
    other_789 = other_788;
    let _e4: Line = self_883;
    let _e7: Line = self_883;
    let _e10: Line = self_883;
    let _e19: Line = other_789;
    let _e22: Line = other_789;
    let _e25: Line = other_789;
    let _e35: Line = self_883;
    let _e38: Line = self_883;
    let _e41: Line = self_883;
    let _e50: Line = other_789;
    let _e53: Line = other_789;
    let _e56: Line = other_789;
    return Line((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn line_line_geometric_anti_product(self_884: Line, other_790: Line) -> Motor {
    var self_885: Line;
    var other_791: Line;

    self_885 = self_884;
    other_791 = other_790;
    let _e4: Line = self_885;
    let _e8: Line = other_791;
    let _e11: Line = other_791;
    let _e14: Line = other_791;
    let _e17: Line = other_791;
    let _e30: Line = self_885;
    let _e34: Line = other_791;
    let _e37: Line = other_791;
    let _e40: Line = other_791;
    let _e43: Line = other_791;
    let _e57: Line = self_885;
    let _e61: Line = other_791;
    let _e64: Line = other_791;
    let _e67: Line = other_791;
    let _e70: Line = other_791;
    let _e84: Line = self_885;
    let _e88: Line = other_791;
    let _e91: Line = other_791;
    let _e94: Line = other_791;
    let _e97: Line = other_791;
    let _e110: Line = self_885;
    let _e114: Line = other_791;
    let _e117: Line = other_791;
    let _e120: Line = other_791;
    let _e123: Line = other_791;
    let _e137: Line = self_885;
    let _e141: Line = other_791;
    let _e144: Line = other_791;
    let _e147: Line = other_791;
    let _e150: Line = other_791;
    let _e164: Line = self_885;
    let _e168: Line = other_791;
    let _e171: Line = other_791;
    let _e174: Line = other_791;
    let _e177: Line = other_791;
    let _e191: Line = self_885;
    let _e195: Line = other_791;
    let _e198: Line = other_791;
    let _e201: Line = other_791;
    let _e204: Line = other_791;
    let _e218: Line = self_885;
    let _e222: Line = other_791;
    let _e225: Line = other_791;
    let _e228: Line = other_791;
    let _e231: Line = other_791;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.z, _e67.g0_.y, _e70.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e84.g0_.y) * vec4<f32>(_e88.g1_.z, _e91.g1_.z, _e94.g1_.x, _e97.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e110.g0_.z) * vec4<f32>(_e114.g1_.y, _e117.g1_.x, _e120.g1_.y, _e123.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e137.g1_.x) * vec4<f32>(_e141.g0_.z, _e144.g0_.z, _e147.g0_.y, _e150.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.y) * vec4<f32>(_e168.g0_.z, _e171.g0_.z, _e174.g0_.x, _e177.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e191.g1_.z) * vec4<f32>(_e195.g0_.y, _e198.g0_.x, _e201.g0_.y, _e204.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e218.g0_.x) * vec4<f32>(_e222.g1_.x, _e225.g1_.z, _e228.g1_.y, _e231.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_line_inner_anti_product(self_886: Line, other_792: Line) -> AntiScalar {
    var self_887: Line;
    var other_793: Line;

    self_887 = self_886;
    other_793 = other_792;
    let _e5: Line = self_887;
    let _e8: Line = other_793;
    let _e13: Line = self_887;
    let _e16: Line = other_793;
    let _e21: Line = self_887;
    let _e24: Line = other_793;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_left_anti_contraction(self_888: Line, other_794: Line) -> AntiScalar {
    var self_889: Line;
    var other_795: Line;

    self_889 = self_888;
    other_795 = other_794;
    let _e5: Line = self_889;
    let _e8: Line = other_795;
    let _e13: Line = self_889;
    let _e16: Line = other_795;
    let _e21: Line = self_889;
    let _e24: Line = other_795;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_right_anti_contraction(self_890: Line, other_796: Line) -> AntiScalar {
    var self_891: Line;
    var other_797: Line;

    self_891 = self_890;
    other_797 = other_796;
    let _e5: Line = self_891;
    let _e8: Line = other_797;
    let _e13: Line = self_891;
    let _e16: Line = other_797;
    let _e21: Line = self_891;
    let _e24: Line = other_797;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_anti_scalar_product(self_892: Line, other_798: Line) -> AntiScalar {
    var self_893: Line;
    var other_799: Line;

    self_893 = self_892;
    other_799 = other_798;
    let _e5: Line = self_893;
    let _e8: Line = other_799;
    let _e13: Line = self_893;
    let _e16: Line = other_799;
    let _e21: Line = self_893;
    let _e24: Line = other_799;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_circle_add(self_894: Line, other_800: Circle) -> Circle {
    var self_895: Line;
    var other_801: Circle;

    self_895 = self_894;
    other_801 = other_800;
    let _e4: Circle = other_801;
    let _e6: Line = self_895;
    let _e8: Circle = other_801;
    let _e11: Line = self_895;
    let _e13: Circle = other_801;
    return Circle(_e4.g0_, (_e6.g0_ + _e8.g1_), (_e11.g1_ + _e13.g2_));
}

fn line_circle_sub(self_896: Line, other_802: Circle) -> Circle {
    var self_897: Line;
    var other_803: Circle;

    self_897 = self_896;
    other_803 = other_802;
    let _e6: Circle = other_803;
    let _e9: Line = self_897;
    let _e11: Circle = other_803;
    let _e14: Line = self_897;
    let _e16: Circle = other_803;
    return Circle((vec4<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (_e14.g1_ - _e16.g2_));
}

fn line_circle_regressive_product(self_898: Line, other_804: Circle) -> RadialPoint {
    var self_899: Line;
    var other_805: Circle;

    self_899 = self_898;
    other_805 = other_804;
    let _e4: Line = self_899;
    let _e8: Circle = other_805;
    let _e11: Circle = other_805;
    let _e14: Circle = other_805;
    let _e25: Line = self_899;
    let _e29: Circle = other_805;
    let _e32: Circle = other_805;
    let _e35: Circle = other_805;
    let _e47: Line = self_899;
    let _e51: Circle = other_805;
    let _e54: Circle = other_805;
    let _e57: Circle = other_805;
    let _e69: Line = self_899;
    let _e71: Circle = other_805;
    let _e79: Line = self_899;
    let _e83: Circle = other_805;
    let _e86: Circle = other_805;
    let _e92: Line = self_899;
    let _e96: Circle = other_805;
    let _e99: Circle = other_805;
    let _e105: Line = self_899;
    let _e109: Circle = other_805;
    let _e112: Circle = other_805;
    let _e118: Line = self_899;
    let _e122: Circle = other_805;
    let _e133: Line = self_899;
    let _e137: Circle = other_805;
    let _e148: Line = self_899;
    let _e152: Circle = other_805;
    return RadialPoint((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0)) + ((vec3<f32>(_e25.g1_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e47.g1_.z) * vec3<f32>(_e51.g0_.y, _e54.g0_.x, _e57.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e69.g0_ * vec3<f32>(_e71.g0_.w))), ((((((vec2<f32>(0.0) - (vec2<f32>(_e79.g0_.x) * vec2<f32>(_e83.g0_.x, _e86.g2_.x))) - (vec2<f32>(_e92.g0_.y) * vec2<f32>(_e96.g0_.y, _e99.g2_.y))) - (vec2<f32>(_e105.g0_.z) * vec2<f32>(_e109.g0_.z, _e112.g2_.z))) + ((vec2<f32>(_e118.g1_.y) * vec2<f32>(_e122.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e133.g1_.z) * vec2<f32>(_e137.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e148.g1_.x) * vec2<f32>(_e152.g1_.x)) * vec2<f32>(0.0, -(1.0)))));
}

fn line_circle_inner_anti_product(self_900: Line, other_806: Circle) -> AntiScalar {
    var self_901: Line;
    var other_807: Circle;

    self_901 = self_900;
    other_807 = other_806;
    let _e5: Line = self_901;
    let _e8: Circle = other_807;
    let _e13: Line = self_901;
    let _e16: Circle = other_807;
    let _e21: Line = self_901;
    let _e24: Circle = other_807;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn line_circle_left_anti_contraction(self_902: Line, other_808: Circle) -> AntiScalar {
    var self_903: Line;
    var other_809: Circle;

    self_903 = self_902;
    other_809 = other_808;
    let _e5: Line = self_903;
    let _e8: Circle = other_809;
    let _e13: Line = self_903;
    let _e16: Circle = other_809;
    let _e21: Line = self_903;
    let _e24: Circle = other_809;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn line_circle_right_anti_contraction(self_904: Line, other_810: Circle) -> AntiScalar {
    var self_905: Line;
    var other_811: Circle;

    self_905 = self_904;
    other_811 = other_810;
    let _e5: Line = self_905;
    let _e8: Circle = other_811;
    let _e13: Line = self_905;
    let _e16: Circle = other_811;
    let _e21: Line = self_905;
    let _e24: Circle = other_811;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn line_circle_anti_scalar_product(self_906: Line, other_812: Circle) -> AntiScalar {
    var self_907: Line;
    var other_813: Circle;

    self_907 = self_906;
    other_813 = other_812;
    let _e5: Line = self_907;
    let _e8: Circle = other_813;
    let _e13: Line = self_907;
    let _e16: Circle = other_813;
    let _e21: Line = self_907;
    let _e24: Circle = other_813;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn line_plane_regressive_product(self_908: Line, other_814: Plane) -> FlatPoint {
    var self_909: Line;
    var other_815: Plane;

    self_909 = self_908;
    other_815 = other_814;
    let _e4: Line = self_909;
    let _e8: Plane = other_815;
    let _e19: Line = self_909;
    let _e23: Plane = other_815;
    let _e35: Line = self_909;
    let _e39: Plane = other_815;
    let _e51: Line = self_909;
    let _e55: Plane = other_815;
    let _e67: Line = self_909;
    let _e70: Line = self_909;
    let _e73: Line = self_909;
    let _e76: Line = self_909;
    let _e80: Plane = other_815;
    return FlatPoint(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_geometric_anti_product(self_910: Line, other_816: Plane) -> Flector {
    var self_911: Line;
    var other_817: Plane;

    self_911 = self_910;
    other_817 = other_816;
    let _e4: Line = self_911;
    let _e8: Plane = other_817;
    let _e19: Line = self_911;
    let _e23: Plane = other_817;
    let _e35: Line = self_911;
    let _e39: Plane = other_817;
    let _e51: Line = self_911;
    let _e55: Plane = other_817;
    let _e67: Line = self_911;
    let _e70: Line = self_911;
    let _e73: Line = self_911;
    let _e76: Line = self_911;
    let _e80: Plane = other_817;
    let _e93: Line = self_911;
    let _e97: Plane = other_817;
    let _e108: Line = self_911;
    let _e112: Plane = other_817;
    let _e124: Line = self_911;
    let _e128: Plane = other_817;
    let _e141: Line = self_911;
    let _e145: Plane = other_817;
    let _e158: Line = self_911;
    let _e161: Line = self_911;
    let _e164: Line = self_911;
    let _e167: Line = self_911;
    let _e171: Plane = other_817;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e124.g1_.y) * vec4<f32>(_e128.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e141.g1_.z) * vec4<f32>(_e145.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e158.g0_.x, _e161.g0_.x, _e164.g0_.x, _e167.g1_.x) * _e171.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_inner_anti_product(self_912: Line, other_818: Plane) -> Plane {
    var self_913: Line;
    var other_819: Plane;

    self_913 = self_912;
    other_819 = other_818;
    let _e4: Line = self_913;
    let _e8: Plane = other_819;
    let _e19: Line = self_913;
    let _e23: Plane = other_819;
    let _e35: Line = self_913;
    let _e39: Plane = other_819;
    let _e52: Line = self_913;
    let _e56: Plane = other_819;
    let _e69: Line = self_913;
    let _e72: Line = self_913;
    let _e75: Line = self_913;
    let _e78: Line = self_913;
    let _e82: Plane = other_819;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_right_anti_contraction(self_914: Line, other_820: Plane) -> Plane {
    var self_915: Line;
    var other_821: Plane;

    self_915 = self_914;
    other_821 = other_820;
    let _e4: Line = self_915;
    let _e8: Plane = other_821;
    let _e19: Line = self_915;
    let _e23: Plane = other_821;
    let _e35: Line = self_915;
    let _e39: Plane = other_821;
    let _e52: Line = self_915;
    let _e56: Plane = other_821;
    let _e69: Line = self_915;
    let _e72: Line = self_915;
    let _e75: Line = self_915;
    let _e78: Line = self_915;
    let _e82: Plane = other_821;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_sphere_regressive_product(self_916: Line, other_822: Sphere) -> Dipole {
    var self_917: Line;
    var other_823: Sphere;

    self_917 = self_916;
    other_823 = other_822;
    let _e4: Line = self_917;
    let _e6: Sphere = other_823;
    let _e11: Line = self_917;
    let _e13: Sphere = other_823;
    let _e18: Line = self_917;
    let _e22: Sphere = other_823;
    let _e25: Sphere = other_823;
    let _e28: Sphere = other_823;
    let _e31: Sphere = other_823;
    let _e43: Line = self_917;
    let _e47: Sphere = other_823;
    let _e50: Sphere = other_823;
    let _e53: Sphere = other_823;
    let _e56: Sphere = other_823;
    let _e69: Line = self_917;
    let _e73: Sphere = other_823;
    let _e76: Sphere = other_823;
    let _e79: Sphere = other_823;
    let _e82: Sphere = other_823;
    let _e95: Line = self_917;
    let _e99: Sphere = other_823;
    let _e102: Sphere = other_823;
    let _e105: Sphere = other_823;
    let _e108: Sphere = other_823;
    let _e121: Line = self_917;
    let _e125: Sphere = other_823;
    let _e128: Sphere = other_823;
    let _e131: Sphere = other_823;
    let _e134: Sphere = other_823;
    let _e147: Line = self_917;
    let _e151: Sphere = other_823;
    let _e154: Sphere = other_823;
    let _e157: Sphere = other_823;
    let _e160: Sphere = other_823;
    return Dipole((_e4.g0_ * vec3<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)), (((((((vec4<f32>(_e18.g0_.y) * vec4<f32>(_e22.g0_.y, _e25.g0_.y, _e28.g0_.y, _e31.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e43.g0_.z) * vec4<f32>(_e47.g0_.y, _e50.g0_.y, _e53.g0_.y, _e56.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.x) * vec4<f32>(_e73.g1_.z, _e76.g1_.z, _e79.g1_.y, _e82.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e95.g1_.y) * vec4<f32>(_e99.g1_.z, _e102.g1_.z, _e105.g1_.x, _e108.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e121.g1_.z) * vec4<f32>(_e125.g1_.y, _e128.g1_.x, _e131.g1_.y, _e134.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e147.g0_.x) * vec4<f32>(_e151.g0_.y, _e154.g0_.x, _e157.g0_.x, _e160.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_sphere_inner_anti_product(self_918: Line, other_824: Sphere) -> Plane {
    var self_919: Line;
    var other_825: Sphere;

    self_919 = self_918;
    other_825 = other_824;
    let _e4: Line = self_919;
    let _e8: Sphere = other_825;
    let _e11: Sphere = other_825;
    let _e14: Sphere = other_825;
    let _e17: Sphere = other_825;
    let _e29: Line = self_919;
    let _e33: Sphere = other_825;
    let _e36: Sphere = other_825;
    let _e39: Sphere = other_825;
    let _e42: Sphere = other_825;
    let _e55: Line = self_919;
    let _e59: Sphere = other_825;
    let _e72: Line = self_919;
    let _e76: Sphere = other_825;
    let _e89: Line = self_919;
    let _e92: Line = self_919;
    let _e95: Line = self_919;
    let _e98: Line = self_919;
    let _e102: Sphere = other_825;
    let _e105: Sphere = other_825;
    let _e108: Sphere = other_825;
    let _e111: Sphere = other_825;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g1_.y, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.y) * vec4<f32>(_e59.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g0_.x, _e92.g0_.x, _e95.g0_.x, _e98.g1_.x) * vec4<f32>(_e102.g1_.x, _e105.g1_.z, _e108.g1_.y, _e111.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_sphere_right_anti_contraction(self_920: Line, other_826: Sphere) -> Plane {
    var self_921: Line;
    var other_827: Sphere;

    self_921 = self_920;
    other_827 = other_826;
    let _e4: Line = self_921;
    let _e8: Sphere = other_827;
    let _e11: Sphere = other_827;
    let _e14: Sphere = other_827;
    let _e17: Sphere = other_827;
    let _e29: Line = self_921;
    let _e33: Sphere = other_827;
    let _e36: Sphere = other_827;
    let _e39: Sphere = other_827;
    let _e42: Sphere = other_827;
    let _e55: Line = self_921;
    let _e59: Sphere = other_827;
    let _e72: Line = self_921;
    let _e76: Sphere = other_827;
    let _e89: Line = self_921;
    let _e92: Line = self_921;
    let _e95: Line = self_921;
    let _e98: Line = self_921;
    let _e102: Sphere = other_827;
    let _e105: Sphere = other_827;
    let _e108: Sphere = other_827;
    let _e111: Sphere = other_827;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g1_.y, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.y) * vec4<f32>(_e59.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g0_.x, _e92.g0_.x, _e95.g0_.x, _e98.g1_.x) * vec4<f32>(_e102.g1_.x, _e105.g1_.z, _e108.g1_.y, _e111.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_motor_add(self_922: Line, other_828: Motor) -> Motor {
    var self_923: Line;
    var other_829: Motor;

    self_923 = self_922;
    other_829 = other_828;
    let _e4: Line = self_923;
    let _e7: Line = self_923;
    let _e10: Line = self_923;
    let _e13: Line = self_923;
    let _e23: Motor = other_829;
    let _e26: Line = self_923;
    let _e29: Line = self_923;
    let _e32: Line = self_923;
    let _e35: Line = self_923;
    let _e45: Motor = other_829;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e23.g0_), ((vec4<f32>(_e26.g1_.x, _e29.g1_.y, _e32.g1_.z, _e35.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e45.g1_));
}

fn line_motor_sub(self_924: Line, other_830: Motor) -> Motor {
    var self_925: Line;
    var other_831: Motor;

    self_925 = self_924;
    other_831 = other_830;
    let _e4: Line = self_925;
    let _e7: Line = self_925;
    let _e10: Line = self_925;
    let _e13: Line = self_925;
    let _e23: Motor = other_831;
    let _e26: Line = self_925;
    let _e29: Line = self_925;
    let _e32: Line = self_925;
    let _e35: Line = self_925;
    let _e45: Motor = other_831;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e23.g0_), ((vec4<f32>(_e26.g1_.x, _e29.g1_.y, _e32.g1_.z, _e35.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e45.g1_));
}

fn line_motor_geometric_anti_product(self_926: Line, other_832: Motor) -> Motor {
    var self_927: Line;
    var other_833: Motor;

    self_927 = self_926;
    other_833 = other_832;
    let _e4: Line = self_927;
    let _e8: Motor = other_833;
    let _e20: Line = self_927;
    let _e24: Motor = other_833;
    let _e37: Line = self_927;
    let _e41: Motor = other_833;
    let _e54: Line = self_927;
    let _e58: Motor = other_833;
    let _e70: Line = self_927;
    let _e74: Motor = other_833;
    let _e87: Line = self_927;
    let _e91: Motor = other_833;
    let _e104: Line = self_927;
    let _e108: Motor = other_833;
    let _e121: Line = self_927;
    let _e125: Motor = other_833;
    let _e138: Line = self_927;
    let _e142: Motor = other_833;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e54.g0_.x) * _e58.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e70.g0_.y) * _e74.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e87.g0_.z) * _e91.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e104.g1_.x) * _e108.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e121.g1_.y) * _e125.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e138.g1_.z) * _e142.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))));
}

fn line_motor_left_anti_contraction(self_928: Line, other_834: Motor) -> Translator {
    var self_929: Line;
    var other_835: Motor;

    self_929 = self_928;
    other_835 = other_834;
    let _e4: Line = self_929;
    let _e8: Motor = other_835;
    let _e11: Motor = other_835;
    let _e14: Motor = other_835;
    let _e17: Motor = other_835;
    let _e29: Line = self_929;
    let _e33: Motor = other_835;
    let _e36: Motor = other_835;
    let _e39: Motor = other_835;
    let _e42: Motor = other_835;
    let _e55: Line = self_929;
    let _e59: Motor = other_835;
    let _e62: Motor = other_835;
    let _e65: Motor = other_835;
    let _e68: Motor = other_835;
    return Translator(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.w, _e11.g1_.w, _e14.g1_.w, _e17.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.w, _e36.g1_.w, _e39.g1_.w, _e42.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g1_.w, _e62.g1_.x, _e65.g1_.x, _e68.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_motor_anti_scalar_product(self_930: Line, other_836: Motor) -> AntiScalar {
    var self_931: Line;
    var other_837: Motor;

    self_931 = self_930;
    other_837 = other_836;
    let _e5: Line = self_931;
    let _e8: Motor = other_837;
    let _e13: Line = self_931;
    let _e16: Motor = other_837;
    let _e21: Line = self_931;
    let _e24: Motor = other_837;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_geometric_anti_product(self_932: Line, other_838: Rotor) -> Motor {
    var self_933: Line;
    var other_839: Rotor;

    self_933 = self_932;
    other_839 = other_838;
    let _e4: Line = self_933;
    let _e8: Rotor = other_839;
    let _e20: Line = self_933;
    let _e24: Rotor = other_839;
    let _e37: Line = self_933;
    let _e41: Rotor = other_839;
    let _e54: Line = self_933;
    let _e58: Rotor = other_839;
    let _e70: Line = self_933;
    let _e74: Rotor = other_839;
    let _e87: Line = self_933;
    let _e91: Rotor = other_839;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))), ((((vec4<f32>(_e54.g1_.x) * _e58.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e70.g1_.y) * _e74.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e87.g1_.z) * _e91.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))));
}

fn line_rotor_left_anti_contraction(self_934: Line, other_840: Rotor) -> AntiScalar {
    var self_935: Line;
    var other_841: Rotor;

    self_935 = self_934;
    other_841 = other_840;
    let _e5: Line = self_935;
    let _e8: Rotor = other_841;
    let _e13: Line = self_935;
    let _e16: Rotor = other_841;
    let _e21: Line = self_935;
    let _e24: Rotor = other_841;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_anti_scalar_product(self_936: Line, other_842: Rotor) -> AntiScalar {
    var self_937: Line;
    var other_843: Rotor;

    self_937 = self_936;
    other_843 = other_842;
    let _e5: Line = self_937;
    let _e8: Rotor = other_843;
    let _e13: Line = self_937;
    let _e16: Rotor = other_843;
    let _e21: Line = self_937;
    let _e24: Rotor = other_843;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_inner_anti_product(self_938: Line, other_844: Translator) -> Line {
    var self_939: Line;
    var other_845: Translator;

    self_939 = self_938;
    other_845 = other_844;
    let _e4: Line = self_939;
    let _e6: Translator = other_845;
    let _e11: Line = self_939;
    let _e13: Translator = other_845;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn line_translator_right_anti_contraction(self_940: Line, other_846: Translator) -> Line {
    var self_941: Line;
    var other_847: Translator;

    self_941 = self_940;
    other_847 = other_846;
    let _e4: Line = self_941;
    let _e6: Translator = other_847;
    let _e11: Line = self_941;
    let _e13: Translator = other_847;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn line_flector_regressive_product(self_942: Line, other_848: Flector) -> FlatPoint {
    var self_943: Line;
    var other_849: Flector;

    self_943 = self_942;
    other_849 = other_848;
    let _e4: Line = self_943;
    let _e8: Flector = other_849;
    let _e19: Line = self_943;
    let _e23: Flector = other_849;
    let _e35: Line = self_943;
    let _e39: Flector = other_849;
    let _e51: Line = self_943;
    let _e55: Flector = other_849;
    let _e67: Line = self_943;
    let _e70: Line = self_943;
    let _e73: Line = self_943;
    let _e76: Line = self_943;
    let _e80: Flector = other_849;
    return FlatPoint(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_geometric_anti_product(self_944: Line, other_850: Flector) -> Flector {
    var self_945: Line;
    var other_851: Flector;

    self_945 = self_944;
    other_851 = other_850;
    let _e4: Line = self_945;
    let _e8: Flector = other_851;
    let _e11: Flector = other_851;
    let _e14: Flector = other_851;
    let _e17: Flector = other_851;
    let _e30: Line = self_945;
    let _e34: Flector = other_851;
    let _e37: Flector = other_851;
    let _e40: Flector = other_851;
    let _e43: Flector = other_851;
    let _e57: Line = self_945;
    let _e61: Flector = other_851;
    let _e64: Flector = other_851;
    let _e67: Flector = other_851;
    let _e70: Flector = other_851;
    let _e84: Line = self_945;
    let _e88: Flector = other_851;
    let _e91: Flector = other_851;
    let _e94: Flector = other_851;
    let _e97: Flector = other_851;
    let _e110: Line = self_945;
    let _e114: Flector = other_851;
    let _e117: Flector = other_851;
    let _e120: Flector = other_851;
    let _e123: Flector = other_851;
    let _e136: Line = self_945;
    let _e140: Flector = other_851;
    let _e143: Flector = other_851;
    let _e146: Flector = other_851;
    let _e149: Flector = other_851;
    let _e162: Line = self_945;
    let _e166: Flector = other_851;
    let _e169: Flector = other_851;
    let _e172: Flector = other_851;
    let _e175: Flector = other_851;
    let _e188: Line = self_945;
    let _e192: Flector = other_851;
    let _e195: Flector = other_851;
    let _e198: Flector = other_851;
    let _e201: Flector = other_851;
    let _e215: Line = self_945;
    let _e219: Flector = other_851;
    let _e222: Flector = other_851;
    let _e225: Flector = other_851;
    let _e228: Flector = other_851;
    let _e242: Line = self_945;
    let _e246: Flector = other_851;
    let _e259: Line = self_945;
    let _e263: Flector = other_851;
    let _e276: Line = self_945;
    let _e280: Flector = other_851;
    return Flector((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g1_.z, _e91.g0_.w, _e94.g1_.x, _e97.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e110.g1_.z) * vec4<f32>(_e114.g1_.y, _e117.g1_.x, _e120.g0_.w, _e123.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e136.g1_.x) * vec4<f32>(_e140.g0_.w, _e143.g1_.z, _e146.g1_.y, _e149.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g0_.w, _e169.g1_.z, _e172.g1_.y, _e175.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e188.g0_.y) * vec4<f32>(_e192.g1_.z, _e195.g0_.w, _e198.g1_.x, _e201.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e215.g0_.z) * vec4<f32>(_e219.g1_.y, _e222.g1_.x, _e225.g0_.w, _e228.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e242.g1_.y) * vec4<f32>(_e246.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e259.g1_.z) * vec4<f32>(_e263.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e276.g1_.x) * vec4<f32>(_e280.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_inner_anti_product(self_946: Line, other_852: Flector) -> Plane {
    var self_947: Line;
    var other_853: Flector;

    self_947 = self_946;
    other_853 = other_852;
    let _e4: Line = self_947;
    let _e8: Flector = other_853;
    let _e11: Flector = other_853;
    let _e14: Flector = other_853;
    let _e17: Flector = other_853;
    let _e30: Line = self_947;
    let _e34: Flector = other_853;
    let _e37: Flector = other_853;
    let _e40: Flector = other_853;
    let _e43: Flector = other_853;
    let _e57: Line = self_947;
    let _e61: Flector = other_853;
    let _e64: Flector = other_853;
    let _e67: Flector = other_853;
    let _e70: Flector = other_853;
    let _e84: Line = self_947;
    let _e88: Flector = other_853;
    let _e101: Line = self_947;
    let _e105: Flector = other_853;
    let _e118: Line = self_947;
    let _e122: Flector = other_853;
    return Plane((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g0_.w, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e101.g1_.z) * vec4<f32>(_e105.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e118.g1_.x) * vec4<f32>(_e122.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_left_anti_contraction(self_948: Line, other_854: Flector) -> Plane {
    var self_949: Line;
    var other_855: Flector;

    self_949 = self_948;
    other_855 = other_854;
    let _e4: Line = self_949;
    let _e8: Flector = other_855;
    let _e19: Line = self_949;
    let _e23: Flector = other_855;
    let _e35: Line = self_949;
    let _e39: Flector = other_855;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_right_anti_contraction(self_950: Line, other_856: Flector) -> Plane {
    var self_951: Line;
    var other_857: Flector;

    self_951 = self_950;
    other_857 = other_856;
    let _e4: Line = self_951;
    let _e8: Flector = other_857;
    let _e19: Line = self_951;
    let _e23: Flector = other_857;
    let _e35: Line = self_951;
    let _e39: Flector = other_857;
    let _e52: Line = self_951;
    let _e56: Flector = other_857;
    let _e69: Line = self_951;
    let _e72: Line = self_951;
    let _e75: Line = self_951;
    let _e78: Line = self_951;
    let _e82: Flector = other_857;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_dilation_inner_anti_product(self_952: Line, other_858: Dilation) -> Line {
    var self_953: Line;
    var other_859: Dilation;

    self_953 = self_952;
    other_859 = other_858;
    let _e4: Line = self_953;
    let _e6: Dilation = other_859;
    let _e11: Line = self_953;
    let _e13: Dilation = other_859;
    return Line((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)));
}

fn line_dilation_right_anti_contraction(self_954: Line, other_860: Dilation) -> Line {
    var self_955: Line;
    var other_861: Dilation;

    self_955 = self_954;
    other_861 = other_860;
    let _e4: Line = self_955;
    let _e6: Dilation = other_861;
    let _e11: Line = self_955;
    let _e13: Dilation = other_861;
    return Line((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)));
}

fn line_multi_vector_add(self_956: Line, other_862: MultiVector) -> MultiVector {
    var self_957: Line;
    var other_863: MultiVector;

    self_957 = self_956;
    other_863 = other_862;
    let _e4: MultiVector = other_863;
    let _e6: MultiVector = other_863;
    let _e8: MultiVector = other_863;
    let _e10: MultiVector = other_863;
    let _e12: MultiVector = other_863;
    let _e14: MultiVector = other_863;
    let _e16: Line = self_957;
    let _e18: MultiVector = other_863;
    let _e21: Line = self_957;
    let _e23: MultiVector = other_863;
    let _e26: MultiVector = other_863;
    let _e28: MultiVector = other_863;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g0_ + _e18.g6_), (_e21.g1_ + _e23.g7_), _e26.g8_, _e28.g9_);
}

fn line_multi_vector_sub(self_958: Line, other_864: MultiVector) -> MultiVector {
    var self_959: Line;
    var other_865: MultiVector;

    self_959 = self_958;
    other_865 = other_864;
    let _e6: MultiVector = other_865;
    let _e11: MultiVector = other_865;
    let _e16: MultiVector = other_865;
    let _e21: MultiVector = other_865;
    let _e26: MultiVector = other_865;
    let _e31: MultiVector = other_865;
    let _e34: Line = self_959;
    let _e36: MultiVector = other_865;
    let _e39: Line = self_959;
    let _e41: MultiVector = other_865;
    let _e46: MultiVector = other_865;
    let _e51: MultiVector = other_865;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (vec4<f32>(0.0) - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (_e34.g0_ - _e36.g6_), (_e39.g1_ - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (vec4<f32>(0.0) - _e51.g9_));
}

fn line_multi_vector_geometric_anti_product(self_960: Line, other_866: MultiVector) -> MultiVector {
    var self_961: Line;
    var other_867: MultiVector;

    self_961 = self_960;
    other_867 = other_866;
    let _e6: Line = self_961;
    let _e10: MultiVector = other_867;
    let _e13: MultiVector = other_867;
    let _e16: MultiVector = other_867;
    let _e22: Line = self_961;
    let _e26: MultiVector = other_867;
    let _e29: MultiVector = other_867;
    let _e32: MultiVector = other_867;
    let _e38: Line = self_961;
    let _e42: MultiVector = other_867;
    let _e45: MultiVector = other_867;
    let _e48: MultiVector = other_867;
    let _e54: Line = self_961;
    let _e58: MultiVector = other_867;
    let _e70: Line = self_961;
    let _e74: MultiVector = other_867;
    let _e86: Line = self_961;
    let _e90: MultiVector = other_867;
    let _e102: Line = self_961;
    let _e106: MultiVector = other_867;
    let _e109: MultiVector = other_867;
    let _e112: MultiVector = other_867;
    let _e123: Line = self_961;
    let _e127: MultiVector = other_867;
    let _e130: MultiVector = other_867;
    let _e133: MultiVector = other_867;
    let _e145: Line = self_961;
    let _e149: MultiVector = other_867;
    let _e152: MultiVector = other_867;
    let _e155: MultiVector = other_867;
    let _e167: Line = self_961;
    let _e171: MultiVector = other_867;
    let _e174: MultiVector = other_867;
    let _e177: MultiVector = other_867;
    let _e189: Line = self_961;
    let _e193: MultiVector = other_867;
    let _e196: MultiVector = other_867;
    let _e199: MultiVector = other_867;
    let _e211: Line = self_961;
    let _e215: MultiVector = other_867;
    let _e218: MultiVector = other_867;
    let _e221: MultiVector = other_867;
    let _e235: Line = self_961;
    let _e239: MultiVector = other_867;
    let _e242: MultiVector = other_867;
    let _e248: Line = self_961;
    let _e252: MultiVector = other_867;
    let _e255: MultiVector = other_867;
    let _e261: Line = self_961;
    let _e265: MultiVector = other_867;
    let _e268: MultiVector = other_867;
    let _e274: Line = self_961;
    let _e278: MultiVector = other_867;
    let _e289: Line = self_961;
    let _e293: MultiVector = other_867;
    let _e304: Line = self_961;
    let _e308: MultiVector = other_867;
    let _e319: Line = self_961;
    let _e323: MultiVector = other_867;
    let _e326: MultiVector = other_867;
    let _e329: MultiVector = other_867;
    let _e332: MultiVector = other_867;
    let _e345: Line = self_961;
    let _e349: MultiVector = other_867;
    let _e352: MultiVector = other_867;
    let _e355: MultiVector = other_867;
    let _e358: MultiVector = other_867;
    let _e372: Line = self_961;
    let _e376: MultiVector = other_867;
    let _e379: MultiVector = other_867;
    let _e382: MultiVector = other_867;
    let _e385: MultiVector = other_867;
    let _e399: Line = self_961;
    let _e403: MultiVector = other_867;
    let _e406: MultiVector = other_867;
    let _e409: MultiVector = other_867;
    let _e412: MultiVector = other_867;
    let _e425: Line = self_961;
    let _e429: MultiVector = other_867;
    let _e432: MultiVector = other_867;
    let _e435: MultiVector = other_867;
    let _e438: MultiVector = other_867;
    let _e451: Line = self_961;
    let _e455: MultiVector = other_867;
    let _e458: MultiVector = other_867;
    let _e461: MultiVector = other_867;
    let _e464: MultiVector = other_867;
    let _e477: Line = self_961;
    let _e481: MultiVector = other_867;
    let _e484: MultiVector = other_867;
    let _e487: MultiVector = other_867;
    let _e498: Line = self_961;
    let _e502: MultiVector = other_867;
    let _e505: MultiVector = other_867;
    let _e508: MultiVector = other_867;
    let _e520: Line = self_961;
    let _e524: MultiVector = other_867;
    let _e527: MultiVector = other_867;
    let _e530: MultiVector = other_867;
    let _e542: Line = self_961;
    let _e546: MultiVector = other_867;
    let _e549: MultiVector = other_867;
    let _e552: MultiVector = other_867;
    let _e563: Line = self_961;
    let _e567: MultiVector = other_867;
    let _e570: MultiVector = other_867;
    let _e573: MultiVector = other_867;
    let _e585: Line = self_961;
    let _e589: MultiVector = other_867;
    let _e592: MultiVector = other_867;
    let _e595: MultiVector = other_867;
    let _e607: Line = self_961;
    let _e611: MultiVector = other_867;
    let _e614: MultiVector = other_867;
    let _e617: MultiVector = other_867;
    let _e629: Line = self_961;
    let _e633: MultiVector = other_867;
    let _e636: MultiVector = other_867;
    let _e639: MultiVector = other_867;
    let _e651: Line = self_961;
    let _e655: MultiVector = other_867;
    let _e658: MultiVector = other_867;
    let _e661: MultiVector = other_867;
    let _e673: Line = self_961;
    let _e677: MultiVector = other_867;
    let _e680: MultiVector = other_867;
    let _e683: MultiVector = other_867;
    let _e694: Line = self_961;
    let _e698: MultiVector = other_867;
    let _e701: MultiVector = other_867;
    let _e704: MultiVector = other_867;
    let _e716: Line = self_961;
    let _e720: MultiVector = other_867;
    let _e723: MultiVector = other_867;
    let _e726: MultiVector = other_867;
    let _e738: Line = self_961;
    let _e742: MultiVector = other_867;
    let _e745: MultiVector = other_867;
    let _e748: MultiVector = other_867;
    let _e759: Line = self_961;
    let _e763: MultiVector = other_867;
    let _e766: MultiVector = other_867;
    let _e769: MultiVector = other_867;
    let _e781: Line = self_961;
    let _e785: MultiVector = other_867;
    let _e788: MultiVector = other_867;
    let _e791: MultiVector = other_867;
    let _e803: Line = self_961;
    let _e807: MultiVector = other_867;
    let _e810: MultiVector = other_867;
    let _e813: MultiVector = other_867;
    let _e825: Line = self_961;
    let _e829: MultiVector = other_867;
    let _e832: MultiVector = other_867;
    let _e835: MultiVector = other_867;
    let _e847: Line = self_961;
    let _e851: MultiVector = other_867;
    let _e854: MultiVector = other_867;
    let _e857: MultiVector = other_867;
    let _e869: Line = self_961;
    let _e873: MultiVector = other_867;
    let _e876: MultiVector = other_867;
    let _e879: MultiVector = other_867;
    let _e882: MultiVector = other_867;
    let _e895: Line = self_961;
    let _e899: MultiVector = other_867;
    let _e902: MultiVector = other_867;
    let _e905: MultiVector = other_867;
    let _e908: MultiVector = other_867;
    let _e922: Line = self_961;
    let _e926: MultiVector = other_867;
    let _e929: MultiVector = other_867;
    let _e932: MultiVector = other_867;
    let _e935: MultiVector = other_867;
    let _e949: Line = self_961;
    let _e953: MultiVector = other_867;
    let _e966: Line = self_961;
    let _e970: MultiVector = other_867;
    let _e983: Line = self_961;
    let _e987: MultiVector = other_867;
    let _e1000: Line = self_961;
    let _e1004: MultiVector = other_867;
    let _e1007: MultiVector = other_867;
    let _e1010: MultiVector = other_867;
    let _e1013: MultiVector = other_867;
    let _e1026: Line = self_961;
    let _e1030: MultiVector = other_867;
    let _e1033: MultiVector = other_867;
    let _e1036: MultiVector = other_867;
    let _e1039: MultiVector = other_867;
    let _e1053: Line = self_961;
    let _e1057: MultiVector = other_867;
    let _e1060: MultiVector = other_867;
    let _e1063: MultiVector = other_867;
    let _e1066: MultiVector = other_867;
    let _e1080: Line = self_961;
    let _e1084: MultiVector = other_867;
    let _e1097: Line = self_961;
    let _e1101: MultiVector = other_867;
    let _e1114: Line = self_961;
    let _e1118: MultiVector = other_867;
    return MultiVector(((((((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.x) * vec3<f32>(_e10.g5_.x, _e13.g4_.x, _e16.g6_.x))) - (vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g5_.y, _e29.g4_.y, _e32.g6_.y))) - (vec3<f32>(_e38.g0_.z) * vec3<f32>(_e42.g5_.z, _e45.g4_.z, _e48.g6_.z))) + ((vec3<f32>(_e54.g1_.y) * vec3<f32>(_e58.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e70.g1_.z) * vec3<f32>(_e74.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e86.g1_.x) * vec3<f32>(_e90.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((((vec3<f32>(_e102.g0_.x) * vec3<f32>(_e106.g8_.w, _e109.g1_.z, _e112.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e123.g0_.y) * vec3<f32>(_e127.g1_.z, _e130.g8_.w, _e133.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e145.g0_.z) * vec3<f32>(_e149.g1_.y, _e152.g1_.x, _e155.g8_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e167.g1_.x) * vec3<f32>(_e171.g2_.x, _e174.g8_.z, _e177.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e189.g1_.y) * vec3<f32>(_e193.g8_.z, _e196.g2_.x, _e199.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e211.g1_.z) * vec3<f32>(_e215.g8_.y, _e218.g8_.x, _e221.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((vec2<f32>(0.0) - (vec2<f32>(_e235.g0_.x) * vec2<f32>(_e239.g8_.x, _e242.g7_.x))) - (vec2<f32>(_e248.g0_.y) * vec2<f32>(_e252.g8_.y, _e255.g7_.y))) - (vec2<f32>(_e261.g0_.z) * vec2<f32>(_e265.g8_.z, _e268.g7_.z))) + ((vec2<f32>(_e274.g1_.y) * vec2<f32>(_e278.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e289.g1_.z) * vec2<f32>(_e293.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e304.g1_.x) * vec2<f32>(_e308.g6_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((vec4<f32>(_e319.g0_.x) * vec4<f32>(_e323.g9_.w, _e326.g3_.z, _e329.g3_.y, _e332.g9_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e345.g0_.y) * vec4<f32>(_e349.g3_.z, _e352.g9_.w, _e355.g3_.x, _e358.g9_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e372.g0_.z) * vec4<f32>(_e376.g3_.y, _e379.g3_.x, _e382.g9_.w, _e385.g9_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e399.g1_.y) * vec4<f32>(_e403.g9_.z, _e406.g3_.w, _e409.g9_.x, _e412.g9_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e425.g1_.z) * vec4<f32>(_e429.g9_.y, _e432.g9_.x, _e435.g3_.w, _e438.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e451.g1_.x) * vec4<f32>(_e455.g3_.w, _e458.g9_.z, _e461.g9_.y, _e464.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e477.g0_.x) * vec3<f32>(_e481.g0_.y, _e484.g4_.z, _e487.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e498.g0_.y) * vec3<f32>(_e502.g4_.z, _e505.g0_.y, _e508.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e520.g0_.z) * vec3<f32>(_e524.g4_.y, _e527.g4_.x, _e530.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec3<f32>(_e542.g0_.x) * vec3<f32>(_e546.g0_.x, _e549.g5_.z, _e552.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e563.g0_.y) * vec3<f32>(_e567.g5_.z, _e570.g0_.x, _e573.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e585.g0_.z) * vec3<f32>(_e589.g5_.y, _e592.g5_.x, _e595.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e607.g1_.x) * vec3<f32>(_e611.g0_.y, _e614.g4_.z, _e617.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e629.g1_.y) * vec3<f32>(_e633.g4_.z, _e636.g0_.y, _e639.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e651.g1_.z) * vec3<f32>(_e655.g4_.y, _e658.g4_.x, _e661.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e673.g0_.x) * vec3<f32>(_e677.g0_.z, _e680.g6_.z, _e683.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e694.g0_.y) * vec3<f32>(_e698.g6_.z, _e701.g0_.z, _e704.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e716.g0_.z) * vec3<f32>(_e720.g6_.y, _e723.g6_.x, _e726.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec3<f32>(_e738.g0_.x) * vec3<f32>(_e742.g2_.y, _e745.g7_.z, _e748.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e759.g0_.y) * vec3<f32>(_e763.g7_.z, _e766.g2_.y, _e769.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e781.g0_.z) * vec3<f32>(_e785.g7_.y, _e788.g7_.x, _e791.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e803.g1_.x) * vec3<f32>(_e807.g0_.z, _e810.g6_.z, _e813.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e825.g1_.y) * vec3<f32>(_e829.g6_.z, _e832.g0_.z, _e835.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e847.g1_.z) * vec3<f32>(_e851.g6_.y, _e854.g6_.x, _e857.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec4<f32>(_e869.g0_.x) * vec4<f32>(_e873.g2_.x, _e876.g8_.z, _e879.g8_.y, _e882.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e895.g0_.y) * vec4<f32>(_e899.g8_.z, _e902.g2_.x, _e905.g8_.x, _e908.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e922.g0_.z) * vec4<f32>(_e926.g8_.y, _e929.g8_.x, _e932.g2_.x, _e935.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e949.g1_.y) * vec4<f32>(_e953.g8_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e966.g1_.z) * vec4<f32>(_e970.g8_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e983.g1_.x) * vec4<f32>(_e987.g8_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((vec4<f32>(_e1000.g0_.x) * vec4<f32>(_e1004.g3_.w, _e1007.g9_.z, _e1010.g9_.y, _e1013.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e1026.g0_.y) * vec4<f32>(_e1030.g9_.z, _e1033.g3_.w, _e1036.g9_.x, _e1039.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1053.g0_.z) * vec4<f32>(_e1057.g9_.y, _e1060.g9_.x, _e1063.g3_.w, _e1066.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1080.g1_.y) * vec4<f32>(_e1084.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1097.g1_.z) * vec4<f32>(_e1101.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1114.g1_.x) * vec4<f32>(_e1118.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_multi_vector_anti_scalar_product(self_962: Line, other_868: MultiVector) -> AntiScalar {
    var self_963: Line;
    var other_869: MultiVector;

    self_963 = self_962;
    other_869 = other_868;
    let _e5: Line = self_963;
    let _e8: MultiVector = other_869;
    let _e13: Line = self_963;
    let _e16: MultiVector = other_869;
    let _e21: Line = self_963;
    let _e24: MultiVector = other_869;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g6_.x)) - (_e13.g0_.y * _e16.g6_.y)) - (_e21.g0_.z * _e24.g6_.z)));
}

fn line_scale(self_964: Line, other_870: f32) -> Line {
    var self_965: Line;
    var other_871: f32;

    self_965 = self_964;
    other_871 = other_870;
    let _e4: Line = self_965;
    let _e5: f32 = other_871;
    let _e7: Line = line_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn circle_zero() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn circle_one() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn circle_neg(self_966: Circle) -> Circle {
    var self_967: Circle;

    self_967 = self_966;
    let _e2: Circle = self_967;
    let _e8: Circle = self_967;
    let _e14: Circle = self_967;
    return Circle((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec3<f32>(-(1.0))));
}

fn circle_automorphism(self_968: Circle) -> Circle {
    var self_969: Circle;

    self_969 = self_968;
    let _e2: Circle = self_969;
    let _e8: Circle = self_969;
    let _e14: Circle = self_969;
    return Circle((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec3<f32>(-(1.0))));
}

fn circle_reversal(self_970: Circle) -> Circle {
    var self_971: Circle;

    self_971 = self_970;
    let _e2: Circle = self_971;
    let _e8: Circle = self_971;
    let _e14: Circle = self_971;
    return Circle((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec3<f32>(-(1.0))));
}

fn circle_conjugation(self_972: Circle) -> Circle {
    var self_973: Circle;

    self_973 = self_972;
    let _e2: Circle = self_973;
    let _e4: Circle = self_973;
    let _e6: Circle = self_973;
    return Circle(_e2.g0_, _e4.g1_, _e6.g2_);
}

fn circle_dual(self_974: Circle) -> Dipole {
    var self_975: Circle;

    self_975 = self_974;
    let _e2: Circle = self_975;
    let _e8: Circle = self_975;
    let _e14: Circle = self_975;
    return Dipole((_e2.g2_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g0_ * vec4<f32>(-(1.0))));
}

fn circle_anti_reversal(self_976: Circle) -> Circle {
    var self_977: Circle;

    self_977 = self_976;
    let _e2: Circle = self_977;
    let _e4: Circle = self_977;
    let _e6: Circle = self_977;
    return Circle(_e2.g0_, _e4.g1_, _e6.g2_);
}

fn circle_scalar_geometric_product(self_978: Circle, other_872: Scalar) -> Circle {
    var self_979: Circle;
    var other_873: Scalar;

    self_979 = self_978;
    other_873 = other_872;
    let _e4: Circle = self_979;
    let _e6: Scalar = other_873;
    let _e10: Circle = self_979;
    let _e12: Scalar = other_873;
    let _e16: Circle = self_979;
    let _e18: Scalar = other_873;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_scalar_outer_product(self_980: Circle, other_874: Scalar) -> Circle {
    var self_981: Circle;
    var other_875: Scalar;

    self_981 = self_980;
    other_875 = other_874;
    let _e4: Circle = self_981;
    let _e6: Scalar = other_875;
    let _e10: Circle = self_981;
    let _e12: Scalar = other_875;
    let _e16: Circle = self_981;
    let _e18: Scalar = other_875;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_scalar_inner_product(self_982: Circle, other_876: Scalar) -> Circle {
    var self_983: Circle;
    var other_877: Scalar;

    self_983 = self_982;
    other_877 = other_876;
    let _e4: Circle = self_983;
    let _e6: Scalar = other_877;
    let _e10: Circle = self_983;
    let _e12: Scalar = other_877;
    let _e16: Circle = self_983;
    let _e18: Scalar = other_877;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_scalar_right_contraction(self_984: Circle, other_878: Scalar) -> Circle {
    var self_985: Circle;
    var other_879: Scalar;

    self_985 = self_984;
    other_879 = other_878;
    let _e4: Circle = self_985;
    let _e6: Scalar = other_879;
    let _e10: Circle = self_985;
    let _e12: Scalar = other_879;
    let _e16: Circle = self_985;
    let _e18: Scalar = other_879;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_anti_scalar_regressive_product(self_986: Circle, other_880: AntiScalar) -> Circle {
    var self_987: Circle;
    var other_881: AntiScalar;

    self_987 = self_986;
    other_881 = other_880;
    let _e4: Circle = self_987;
    let _e6: AntiScalar = other_881;
    let _e10: Circle = self_987;
    let _e12: AntiScalar = other_881;
    let _e16: Circle = self_987;
    let _e18: AntiScalar = other_881;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_anti_scalar_geometric_anti_product(self_988: Circle, other_882: AntiScalar) -> Circle {
    var self_989: Circle;
    var other_883: AntiScalar;

    self_989 = self_988;
    other_883 = other_882;
    let _e4: Circle = self_989;
    let _e6: AntiScalar = other_883;
    let _e10: Circle = self_989;
    let _e12: AntiScalar = other_883;
    let _e16: Circle = self_989;
    let _e18: AntiScalar = other_883;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_anti_scalar_inner_anti_product(self_990: Circle, other_884: AntiScalar) -> Circle {
    var self_991: Circle;
    var other_885: AntiScalar;

    self_991 = self_990;
    other_885 = other_884;
    let _e4: Circle = self_991;
    let _e6: AntiScalar = other_885;
    let _e10: Circle = self_991;
    let _e12: AntiScalar = other_885;
    let _e16: Circle = self_991;
    let _e18: AntiScalar = other_885;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_anti_scalar_right_anti_contraction(self_992: Circle, other_886: AntiScalar) -> Circle {
    var self_993: Circle;
    var other_887: AntiScalar;

    self_993 = self_992;
    other_887 = other_886;
    let _e4: Circle = self_993;
    let _e6: AntiScalar = other_887;
    let _e10: Circle = self_993;
    let _e12: AntiScalar = other_887;
    let _e16: Circle = self_993;
    let _e18: AntiScalar = other_887;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)));
}

fn circle_radial_point_outer_product(self_994: Circle, other_888: RadialPoint) -> Sphere {
    var self_995: Circle;
    var other_889: RadialPoint;

    self_995 = self_994;
    other_889 = other_888;
    let _e4: Circle = self_995;
    let _e8: RadialPoint = other_889;
    let _e18: Circle = self_995;
    let _e22: RadialPoint = other_889;
    let _e33: Circle = self_995;
    let _e37: RadialPoint = other_889;
    let _e46: Circle = self_995;
    let _e50: RadialPoint = other_889;
    let _e60: Circle = self_995;
    let _e64: RadialPoint = other_889;
    let _e74: Circle = self_995;
    let _e78: RadialPoint = other_889;
    let _e88: Circle = self_995;
    let _e92: RadialPoint = other_889;
    let _e103: Circle = self_995;
    let _e107: RadialPoint = other_889;
    let _e117: Circle = self_995;
    let _e121: RadialPoint = other_889;
    let _e132: Circle = self_995;
    let _e136: RadialPoint = other_889;
    let _e147: Circle = self_995;
    let _e151: RadialPoint = other_889;
    let _e163: Circle = self_995;
    let _e167: RadialPoint = other_889;
    let _e179: Circle = self_995;
    let _e183: RadialPoint = other_889;
    let _e195: Circle = self_995;
    let _e198: Circle = self_995;
    let _e201: Circle = self_995;
    let _e205: RadialPoint = other_889;
    return Sphere(((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g0_.w) * _e37.g1_) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e46.g2_.x) * vec2<f32>(_e50.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e60.g2_.y) * vec2<f32>(_e64.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e74.g2_.z) * vec2<f32>(_e78.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e88.g0_.x) * vec2<f32>(_e92.g0_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((vec3<f32>(_e103.g1_.x) * _e107.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e117.g1_.y) * _e121.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e132.g1_.z) * _e136.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e147.g2_.x) * vec3<f32>(_e151.g1_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e163.g2_.y) * vec3<f32>(_e167.g1_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e179.g2_.z) * vec3<f32>(_e183.g1_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (vec3<f32>(_e195.g0_.x, _e198.g0_.y, _e201.g0_.z) * vec3<f32>(_e205.g1_.y))));
}

fn circle_radial_point_inner_product(self_996: Circle, other_890: RadialPoint) -> Dipole {
    var self_997: Circle;
    var other_891: RadialPoint;

    self_997 = self_996;
    other_891 = other_890;
    let _e4: Circle = self_997;
    let _e8: RadialPoint = other_891;
    let _e18: Circle = self_997;
    let _e22: RadialPoint = other_891;
    let _e33: Circle = self_997;
    let _e37: RadialPoint = other_891;
    let _e50: Circle = self_997;
    let _e54: RadialPoint = other_891;
    let _e58: Circle = self_997;
    let _e62: RadialPoint = other_891;
    let _e74: Circle = self_997;
    let _e78: RadialPoint = other_891;
    let _e91: Circle = self_997;
    let _e95: RadialPoint = other_891;
    let _e98: RadialPoint = other_891;
    let _e101: RadialPoint = other_891;
    let _e104: RadialPoint = other_891;
    let _e117: Circle = self_997;
    let _e121: RadialPoint = other_891;
    let _e124: RadialPoint = other_891;
    let _e127: RadialPoint = other_891;
    let _e130: RadialPoint = other_891;
    let _e143: Circle = self_997;
    let _e146: Circle = self_997;
    let _e149: Circle = self_997;
    let _e152: Circle = self_997;
    let _e156: RadialPoint = other_891;
    let _e159: RadialPoint = other_891;
    let _e162: RadialPoint = other_891;
    let _e165: RadialPoint = other_891;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * _e8.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e50.g0_.w) * _e54.g0_)), ((((((vec4<f32>(_e58.g1_.y) * vec4<f32>(_e62.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e74.g1_.z) * vec4<f32>(_e78.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g2_.y) * vec4<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x, _e104.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e117.g2_.z) * vec4<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y, _e130.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e143.g1_.x, _e146.g2_.x, _e149.g2_.x, _e152.g1_.x) * vec4<f32>(_e156.g0_.x, _e159.g0_.z, _e162.g0_.y, _e165.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn circle_radial_point_right_contraction(self_998: Circle, other_892: RadialPoint) -> Dipole {
    var self_999: Circle;
    var other_893: RadialPoint;

    self_999 = self_998;
    other_893 = other_892;
    let _e4: Circle = self_999;
    let _e8: RadialPoint = other_893;
    let _e18: Circle = self_999;
    let _e22: RadialPoint = other_893;
    let _e33: Circle = self_999;
    let _e37: RadialPoint = other_893;
    let _e50: Circle = self_999;
    let _e54: RadialPoint = other_893;
    let _e58: Circle = self_999;
    let _e62: RadialPoint = other_893;
    let _e74: Circle = self_999;
    let _e78: RadialPoint = other_893;
    let _e91: Circle = self_999;
    let _e95: RadialPoint = other_893;
    let _e98: RadialPoint = other_893;
    let _e101: RadialPoint = other_893;
    let _e104: RadialPoint = other_893;
    let _e117: Circle = self_999;
    let _e121: RadialPoint = other_893;
    let _e124: RadialPoint = other_893;
    let _e127: RadialPoint = other_893;
    let _e130: RadialPoint = other_893;
    let _e143: Circle = self_999;
    let _e146: Circle = self_999;
    let _e149: Circle = self_999;
    let _e152: Circle = self_999;
    let _e156: RadialPoint = other_893;
    let _e159: RadialPoint = other_893;
    let _e162: RadialPoint = other_893;
    let _e165: RadialPoint = other_893;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * _e8.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e50.g0_.w) * _e54.g0_)), ((((((vec4<f32>(_e58.g1_.y) * vec4<f32>(_e62.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e74.g1_.z) * vec4<f32>(_e78.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g2_.y) * vec4<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x, _e104.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e117.g2_.z) * vec4<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y, _e130.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e143.g1_.x, _e146.g2_.x, _e149.g2_.x, _e152.g1_.x) * vec4<f32>(_e156.g0_.x, _e159.g0_.z, _e162.g0_.y, _e165.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn circle_flat_point_regressive_product(self_1000: Circle, other_894: FlatPoint) -> Scalar {
    var self_1001: Circle;
    var other_895: FlatPoint;

    self_1001 = self_1000;
    other_895 = other_894;
    let _e5: Circle = self_1001;
    let _e8: FlatPoint = other_895;
    let _e13: Circle = self_1001;
    let _e16: FlatPoint = other_895;
    let _e21: Circle = self_1001;
    let _e24: FlatPoint = other_895;
    let _e29: Circle = self_1001;
    let _e32: FlatPoint = other_895;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn circle_flat_point_outer_product(self_1002: Circle, other_896: FlatPoint) -> AntiScalar {
    var self_1003: Circle;
    var other_897: FlatPoint;

    self_1003 = self_1002;
    other_897 = other_896;
    let _e5: Circle = self_1003;
    let _e8: FlatPoint = other_897;
    let _e13: Circle = self_1003;
    let _e16: FlatPoint = other_897;
    let _e21: Circle = self_1003;
    let _e24: FlatPoint = other_897;
    let _e29: Circle = self_1003;
    let _e32: FlatPoint = other_897;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn circle_flat_point_inner_anti_product(self_1004: Circle, other_898: FlatPoint) -> Plane {
    var self_1005: Circle;
    var other_899: FlatPoint;

    self_1005 = self_1004;
    other_899 = other_898;
    let _e4: Circle = self_1005;
    let _e8: FlatPoint = other_899;
    let _e19: Circle = self_1005;
    let _e23: FlatPoint = other_899;
    let _e35: Circle = self_1005;
    let _e39: FlatPoint = other_899;
    return Plane(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn circle_flat_point_left_anti_contraction(self_1006: Circle, other_900: FlatPoint) -> Plane {
    var self_1007: Circle;
    var other_901: FlatPoint;

    self_1007 = self_1006;
    other_901 = other_900;
    let _e4: Circle = self_1007;
    let _e8: FlatPoint = other_901;
    let _e19: Circle = self_1007;
    let _e23: FlatPoint = other_901;
    let _e35: Circle = self_1007;
    let _e39: FlatPoint = other_901;
    return Plane(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn circle_dipole_regressive_product(self_1008: Circle, other_902: Dipole) -> Scalar {
    var self_1009: Circle;
    var other_903: Dipole;

    self_1009 = self_1008;
    other_903 = other_902;
    let _e5: Circle = self_1009;
    let _e8: Dipole = other_903;
    let _e13: Circle = self_1009;
    let _e16: Dipole = other_903;
    let _e21: Circle = self_1009;
    let _e24: Dipole = other_903;
    let _e29: Circle = self_1009;
    let _e32: Dipole = other_903;
    let _e37: Circle = self_1009;
    let _e40: Dipole = other_903;
    let _e45: Circle = self_1009;
    let _e48: Dipole = other_903;
    let _e53: Circle = self_1009;
    let _e56: Dipole = other_903;
    let _e61: Circle = self_1009;
    let _e64: Dipole = other_903;
    let _e69: Circle = self_1009;
    let _e72: Dipole = other_903;
    let _e77: Circle = self_1009;
    let _e80: Dipole = other_903;
    return Scalar(((((((((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) - (_e29.g0_.w * _e32.g2_.w)) - (_e37.g1_.x * _e40.g1_.x)) - (_e45.g1_.y * _e48.g1_.y)) - (_e53.g1_.z * _e56.g1_.z)) - (_e61.g2_.x * _e64.g0_.x)) - (_e69.g2_.y * _e72.g0_.y)) - (_e77.g2_.z * _e80.g0_.z)));
}

fn circle_dipole_outer_product(self_1010: Circle, other_904: Dipole) -> AntiScalar {
    var self_1011: Circle;
    var other_905: Dipole;

    self_1011 = self_1010;
    other_905 = other_904;
    let _e5: Circle = self_1011;
    let _e8: Dipole = other_905;
    let _e13: Circle = self_1011;
    let _e16: Dipole = other_905;
    let _e21: Circle = self_1011;
    let _e24: Dipole = other_905;
    let _e29: Circle = self_1011;
    let _e32: Dipole = other_905;
    let _e37: Circle = self_1011;
    let _e40: Dipole = other_905;
    let _e45: Circle = self_1011;
    let _e48: Dipole = other_905;
    let _e53: Circle = self_1011;
    let _e56: Dipole = other_905;
    let _e61: Circle = self_1011;
    let _e64: Dipole = other_905;
    let _e69: Circle = self_1011;
    let _e72: Dipole = other_905;
    let _e77: Circle = self_1011;
    let _e80: Dipole = other_905;
    return AntiScalar(((((((((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) - (_e29.g0_.w * _e32.g2_.w)) - (_e37.g1_.x * _e40.g1_.x)) - (_e45.g1_.y * _e48.g1_.y)) - (_e53.g1_.z * _e56.g1_.z)) - (_e61.g2_.x * _e64.g0_.x)) - (_e69.g2_.y * _e72.g0_.y)) - (_e77.g2_.z * _e80.g0_.z)));
}

fn circle_dipole_inner_product(self_1012: Circle, other_906: Dipole) -> RadialPoint {
    var self_1013: Circle;
    var other_907: Dipole;

    self_1013 = self_1012;
    other_907 = other_906;
    let _e4: Circle = self_1013;
    let _e8: Dipole = other_907;
    let _e11: Circle = self_1013;
    let _e15: Dipole = other_907;
    let _e25: Circle = self_1013;
    let _e29: Dipole = other_907;
    let _e40: Circle = self_1013;
    let _e44: Dipole = other_907;
    let _e55: Circle = self_1013;
    let _e59: Dipole = other_907;
    let _e70: Circle = self_1013;
    let _e74: Dipole = other_907;
    let _e85: Circle = self_1013;
    let _e89: Dipole = other_907;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g1_), (((((((vec2<f32>(_e11.g0_.y) * vec2<f32>(_e15.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e25.g0_.z) * vec2<f32>(_e29.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e40.g2_.x) * vec2<f32>(_e44.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e55.g2_.y) * vec2<f32>(_e59.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e70.g2_.z) * vec2<f32>(_e74.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e85.g0_.x) * vec2<f32>(_e89.g1_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn circle_dipole_inner_anti_product(self_1014: Circle, other_908: Dipole) -> Sphere {
    var self_1015: Circle;
    var other_909: Dipole;

    self_1015 = self_1014;
    other_909 = other_908;
    let _e6: Circle = self_1015;
    let _e10: Dipole = other_909;
    let _e13: Dipole = other_909;
    let _e19: Circle = self_1015;
    let _e23: Dipole = other_909;
    let _e26: Dipole = other_909;
    let _e32: Circle = self_1015;
    let _e36: Dipole = other_909;
    let _e39: Dipole = other_909;
    let _e45: Circle = self_1015;
    let _e47: Dipole = other_909;
    return Sphere((((vec2<f32>(0.0) - (vec2<f32>(_e6.g1_.x) * vec2<f32>(_e10.g0_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g1_.y) * vec2<f32>(_e23.g0_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g1_.z) * vec2<f32>(_e36.g0_.z, _e39.g2_.z))), (_e45.g1_ * vec3<f32>(_e47.g2_.w)));
}

fn circle_dipole_right_contraction(self_1016: Circle, other_910: Dipole) -> RadialPoint {
    var self_1017: Circle;
    var other_911: Dipole;

    self_1017 = self_1016;
    other_911 = other_910;
    let _e4: Circle = self_1017;
    let _e8: Dipole = other_911;
    let _e11: Circle = self_1017;
    let _e15: Dipole = other_911;
    let _e25: Circle = self_1017;
    let _e29: Dipole = other_911;
    let _e40: Circle = self_1017;
    let _e44: Dipole = other_911;
    let _e55: Circle = self_1017;
    let _e59: Dipole = other_911;
    let _e70: Circle = self_1017;
    let _e74: Dipole = other_911;
    let _e85: Circle = self_1017;
    let _e89: Dipole = other_911;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g1_), (((((((vec2<f32>(_e11.g0_.y) * vec2<f32>(_e15.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e25.g0_.z) * vec2<f32>(_e29.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e40.g2_.x) * vec2<f32>(_e44.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e55.g2_.y) * vec2<f32>(_e59.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e70.g2_.z) * vec2<f32>(_e74.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e85.g0_.x) * vec2<f32>(_e89.g1_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn circle_dipole_left_anti_contraction(self_1018: Circle, other_912: Dipole) -> Sphere {
    var self_1019: Circle;
    var other_913: Dipole;

    self_1019 = self_1018;
    other_913 = other_912;
    let _e6: Circle = self_1019;
    let _e10: Dipole = other_913;
    let _e13: Dipole = other_913;
    let _e19: Circle = self_1019;
    let _e23: Dipole = other_913;
    let _e26: Dipole = other_913;
    let _e32: Circle = self_1019;
    let _e36: Dipole = other_913;
    let _e39: Dipole = other_913;
    let _e45: Circle = self_1019;
    let _e47: Dipole = other_913;
    return Sphere((((vec2<f32>(0.0) - (vec2<f32>(_e6.g1_.x) * vec2<f32>(_e10.g0_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g1_.y) * vec2<f32>(_e23.g0_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g1_.z) * vec2<f32>(_e36.g0_.z, _e39.g2_.z))), (_e45.g1_ * vec3<f32>(_e47.g2_.w)));
}

fn circle_line_into(self_1020: Circle) -> Line {
    var self_1021: Circle;

    self_1021 = self_1020;
    let _e2: Circle = self_1021;
    let _e4: Circle = self_1021;
    return Line(_e2.g1_, _e4.g2_);
}

fn circle_line_add(self_1022: Circle, other_914: Line) -> Circle {
    var self_1023: Circle;
    var other_915: Line;

    self_1023 = self_1022;
    other_915 = other_914;
    let _e4: Circle = self_1023;
    let _e6: Circle = self_1023;
    let _e8: Line = other_915;
    let _e11: Circle = self_1023;
    let _e13: Line = other_915;
    return Circle(_e4.g0_, (_e6.g1_ + _e8.g0_), (_e11.g2_ + _e13.g1_));
}

fn circle_line_sub(self_1024: Circle, other_916: Line) -> Circle {
    var self_1025: Circle;
    var other_917: Line;

    self_1025 = self_1024;
    other_917 = other_916;
    let _e4: Circle = self_1025;
    let _e6: Circle = self_1025;
    let _e8: Line = other_917;
    let _e11: Circle = self_1025;
    let _e13: Line = other_917;
    return Circle(_e4.g0_, (_e6.g1_ - _e8.g0_), (_e11.g2_ - _e13.g1_));
}

fn circle_line_regressive_product(self_1026: Circle, other_918: Line) -> RadialPoint {
    var self_1027: Circle;
    var other_919: Line;

    self_1027 = self_1026;
    other_919 = other_918;
    let _e4: Circle = self_1027;
    let _e8: Line = other_919;
    let _e18: Circle = self_1027;
    let _e22: Line = other_919;
    let _e33: Circle = self_1027;
    let _e37: Line = other_919;
    let _e41: Circle = self_1027;
    let _e45: Line = other_919;
    let _e56: Circle = self_1027;
    let _e60: Line = other_919;
    let _e70: Circle = self_1027;
    let _e74: Line = other_919;
    let _e85: Circle = self_1027;
    let _e89: Line = other_919;
    let _e100: Circle = self_1027;
    let _e104: Line = other_919;
    let _e115: Circle = self_1027;
    let _e119: Line = other_919;
    let _e130: Circle = self_1027;
    let _e134: Line = other_919;
    let _e145: Circle = self_1027;
    let _e149: Line = other_919;
    let _e160: Circle = self_1027;
    let _e164: Line = other_919;
    let _e175: Circle = self_1027;
    let _e179: Line = other_919;
    return RadialPoint((((((vec3<f32>(_e4.g0_.y) * _e8.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec3<f32>(_e41.g0_.x) * _e45.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((vec2<f32>(_e56.g0_.y) * vec2<f32>(_e60.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e70.g0_.z) * vec2<f32>(_e74.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e85.g1_.x) * vec2<f32>(_e89.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e100.g1_.y) * vec2<f32>(_e104.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e115.g1_.z) * vec2<f32>(_e119.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e130.g2_.x) * vec2<f32>(_e134.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e145.g2_.y) * vec2<f32>(_e149.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e160.g2_.z) * vec2<f32>(_e164.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e175.g0_.x) * vec2<f32>(_e179.g0_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn circle_line_inner_anti_product(self_1028: Circle, other_920: Line) -> AntiScalar {
    var self_1029: Circle;
    var other_921: Line;

    self_1029 = self_1028;
    other_921 = other_920;
    let _e5: Circle = self_1029;
    let _e8: Line = other_921;
    let _e13: Circle = self_1029;
    let _e16: Line = other_921;
    let _e21: Circle = self_1029;
    let _e24: Line = other_921;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_line_left_anti_contraction(self_1030: Circle, other_922: Line) -> AntiScalar {
    var self_1031: Circle;
    var other_923: Line;

    self_1031 = self_1030;
    other_923 = other_922;
    let _e5: Circle = self_1031;
    let _e8: Line = other_923;
    let _e13: Circle = self_1031;
    let _e16: Line = other_923;
    let _e21: Circle = self_1031;
    let _e24: Line = other_923;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_line_right_anti_contraction(self_1032: Circle, other_924: Line) -> AntiScalar {
    var self_1033: Circle;
    var other_925: Line;

    self_1033 = self_1032;
    other_925 = other_924;
    let _e5: Circle = self_1033;
    let _e8: Line = other_925;
    let _e13: Circle = self_1033;
    let _e16: Line = other_925;
    let _e21: Circle = self_1033;
    let _e24: Line = other_925;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_line_anti_scalar_product(self_1034: Circle, other_926: Line) -> AntiScalar {
    var self_1035: Circle;
    var other_927: Line;

    self_1035 = self_1034;
    other_927 = other_926;
    let _e5: Circle = self_1035;
    let _e8: Line = other_927;
    let _e13: Circle = self_1035;
    let _e16: Line = other_927;
    let _e21: Circle = self_1035;
    let _e24: Line = other_927;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_circle_add(self_1036: Circle, other_928: Circle) -> Circle {
    var self_1037: Circle;
    var other_929: Circle;

    self_1037 = self_1036;
    other_929 = other_928;
    let _e4: Circle = self_1037;
    let _e6: Circle = other_929;
    let _e9: Circle = self_1037;
    let _e11: Circle = other_929;
    let _e14: Circle = self_1037;
    let _e16: Circle = other_929;
    return Circle((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_));
}

fn circle_circle_sub(self_1038: Circle, other_930: Circle) -> Circle {
    var self_1039: Circle;
    var other_931: Circle;

    self_1039 = self_1038;
    other_931 = other_930;
    let _e4: Circle = self_1039;
    let _e6: Circle = other_931;
    let _e9: Circle = self_1039;
    let _e11: Circle = other_931;
    let _e14: Circle = self_1039;
    let _e16: Circle = other_931;
    return Circle((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_));
}

fn circle_circle_mul(self_1040: Circle, other_932: Circle) -> Circle {
    var self_1041: Circle;
    var other_933: Circle;

    self_1041 = self_1040;
    other_933 = other_932;
    let _e4: Circle = self_1041;
    let _e6: Circle = other_933;
    let _e9: Circle = self_1041;
    let _e11: Circle = other_933;
    let _e14: Circle = self_1041;
    let _e16: Circle = other_933;
    return Circle((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_));
}

fn circle_circle_div(self_1042: Circle, other_934: Circle) -> Circle {
    var self_1043: Circle;
    var other_935: Circle;

    self_1043 = self_1042;
    other_935 = other_934;
    let _e4: Circle = self_1043;
    let _e7: Circle = self_1043;
    let _e10: Circle = self_1043;
    let _e13: Circle = self_1043;
    let _e23: Circle = other_935;
    let _e26: Circle = other_935;
    let _e29: Circle = other_935;
    let _e32: Circle = other_935;
    let _e43: Circle = self_1043;
    let _e46: Circle = self_1043;
    let _e49: Circle = self_1043;
    let _e58: Circle = other_935;
    let _e61: Circle = other_935;
    let _e64: Circle = other_935;
    let _e74: Circle = self_1043;
    let _e77: Circle = self_1043;
    let _e80: Circle = self_1043;
    let _e89: Circle = other_935;
    let _e92: Circle = other_935;
    let _e95: Circle = other_935;
    return Circle((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e58.g1_.x, _e61.g1_.y, _e64.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e74.g2_.x, _e77.g2_.y, _e80.g2_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e89.g2_.x, _e92.g2_.y, _e95.g2_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn circle_circle_regressive_product(self_1044: Circle, other_936: Circle) -> RadialPoint {
    var self_1045: Circle;
    var other_937: Circle;

    self_1045 = self_1044;
    other_937 = other_936;
    let _e4: Circle = self_1045;
    let _e8: Circle = other_937;
    let _e18: Circle = self_1045;
    let _e22: Circle = other_937;
    let _e33: Circle = self_1045;
    let _e37: Circle = other_937;
    let _e41: Circle = self_1045;
    let _e45: Circle = other_937;
    let _e56: Circle = self_1045;
    let _e60: Circle = other_937;
    let _e71: Circle = self_1045;
    let _e75: Circle = other_937;
    let _e86: Circle = self_1045;
    let _e90: Circle = other_937;
    let _e93: Circle = other_937;
    let _e96: Circle = other_937;
    let _e108: Circle = self_1045;
    let _e112: Circle = other_937;
    let _e115: Circle = other_937;
    let _e118: Circle = other_937;
    let _e130: Circle = self_1045;
    let _e134: Circle = other_937;
    let _e137: Circle = other_937;
    let _e140: Circle = other_937;
    let _e152: Circle = self_1045;
    let _e156: Circle = other_937;
    let _e167: Circle = self_1045;
    let _e171: Circle = other_937;
    let _e181: Circle = self_1045;
    let _e185: Circle = other_937;
    let _e196: Circle = self_1045;
    let _e200: Circle = other_937;
    let _e203: Circle = other_937;
    let _e209: Circle = self_1045;
    let _e213: Circle = other_937;
    let _e216: Circle = other_937;
    let _e222: Circle = self_1045;
    let _e226: Circle = other_937;
    let _e229: Circle = other_937;
    let _e235: Circle = self_1045;
    let _e239: Circle = other_937;
    let _e250: Circle = self_1045;
    let _e254: Circle = other_937;
    let _e265: Circle = self_1045;
    let _e269: Circle = other_937;
    let _e280: Circle = self_1045;
    let _e284: Circle = other_937;
    return RadialPoint((((((((((((vec3<f32>(_e4.g0_.y) * _e8.g2_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g2_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e33.g0_.w) * _e37.g1_)) + ((vec3<f32>(_e41.g1_.x) * vec3<f32>(_e45.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e56.g1_.y) * vec3<f32>(_e60.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e71.g1_.z) * vec3<f32>(_e75.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e86.g2_.x) * vec3<f32>(_e90.g0_.z, _e93.g0_.z, _e96.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e108.g2_.y) * vec3<f32>(_e112.g0_.z, _e115.g0_.z, _e118.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e130.g2_.z) * vec3<f32>(_e134.g0_.y, _e137.g0_.x, _e140.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e152.g0_.x) * _e156.g2_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((vec2<f32>(_e167.g0_.y) * vec2<f32>(_e171.g1_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e181.g0_.z) * vec2<f32>(_e185.g1_.z)) * vec2<f32>(-(1.0), 0.0))) - (vec2<f32>(_e196.g1_.x) * vec2<f32>(_e200.g0_.x, _e203.g2_.x))) - (vec2<f32>(_e209.g1_.y) * vec2<f32>(_e213.g0_.y, _e216.g2_.y))) - (vec2<f32>(_e222.g1_.z) * vec2<f32>(_e226.g0_.z, _e229.g2_.z))) + ((vec2<f32>(_e235.g2_.x) * vec2<f32>(_e239.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e250.g2_.y) * vec2<f32>(_e254.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e265.g2_.z) * vec2<f32>(_e269.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e280.g0_.x) * vec2<f32>(_e284.g1_.x)) * vec2<f32>(-(1.0), 0.0))));
}

fn circle_circle_inner_product(self_1046: Circle, other_938: Circle) -> Scalar {
    var self_1047: Circle;
    var other_939: Circle;

    self_1047 = self_1046;
    other_939 = other_938;
    let _e5: Circle = self_1047;
    let _e8: Circle = other_939;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn circle_circle_inner_anti_product(self_1048: Circle, other_940: Circle) -> AntiScalar {
    var self_1049: Circle;
    var other_941: Circle;

    self_1049 = self_1048;
    other_941 = other_940;
    let _e5: Circle = self_1049;
    let _e8: Circle = other_941;
    let _e13: Circle = self_1049;
    let _e16: Circle = other_941;
    let _e21: Circle = self_1049;
    let _e24: Circle = other_941;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn circle_circle_left_contraction(self_1050: Circle, other_942: Circle) -> Scalar {
    var self_1051: Circle;
    var other_943: Circle;

    self_1051 = self_1050;
    other_943 = other_942;
    let _e5: Circle = self_1051;
    let _e8: Circle = other_943;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn circle_circle_right_contraction(self_1052: Circle, other_944: Circle) -> Scalar {
    var self_1053: Circle;
    var other_945: Circle;

    self_1053 = self_1052;
    other_945 = other_944;
    let _e5: Circle = self_1053;
    let _e8: Circle = other_945;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn circle_circle_left_anti_contraction(self_1054: Circle, other_946: Circle) -> AntiScalar {
    var self_1055: Circle;
    var other_947: Circle;

    self_1055 = self_1054;
    other_947 = other_946;
    let _e5: Circle = self_1055;
    let _e8: Circle = other_947;
    let _e13: Circle = self_1055;
    let _e16: Circle = other_947;
    let _e21: Circle = self_1055;
    let _e24: Circle = other_947;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn circle_circle_right_anti_contraction(self_1056: Circle, other_948: Circle) -> AntiScalar {
    var self_1057: Circle;
    var other_949: Circle;

    self_1057 = self_1056;
    other_949 = other_948;
    let _e5: Circle = self_1057;
    let _e8: Circle = other_949;
    let _e13: Circle = self_1057;
    let _e16: Circle = other_949;
    let _e21: Circle = self_1057;
    let _e24: Circle = other_949;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn circle_circle_scalar_product(self_1058: Circle, other_950: Circle) -> Scalar {
    var self_1059: Circle;
    var other_951: Circle;

    self_1059 = self_1058;
    other_951 = other_950;
    let _e5: Circle = self_1059;
    let _e8: Circle = other_951;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn circle_circle_anti_scalar_product(self_1060: Circle, other_952: Circle) -> AntiScalar {
    var self_1061: Circle;
    var other_953: Circle;

    self_1061 = self_1060;
    other_953 = other_952;
    let _e5: Circle = self_1061;
    let _e8: Circle = other_953;
    let _e13: Circle = self_1061;
    let _e16: Circle = other_953;
    let _e21: Circle = self_1061;
    let _e24: Circle = other_953;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn circle_plane_regressive_product(self_1062: Circle, other_954: Plane) -> Dipole {
    var self_1063: Circle;
    var other_955: Plane;

    self_1063 = self_1062;
    other_955 = other_954;
    let _e4: Circle = self_1063;
    let _e8: Plane = other_955;
    let _e11: Plane = other_955;
    let _e14: Plane = other_955;
    let _e25: Circle = self_1063;
    let _e29: Plane = other_955;
    let _e32: Plane = other_955;
    let _e35: Plane = other_955;
    let _e47: Circle = self_1063;
    let _e51: Plane = other_955;
    let _e54: Plane = other_955;
    let _e57: Plane = other_955;
    let _e71: Circle = self_1063;
    let _e75: Plane = other_955;
    let _e78: Plane = other_955;
    let _e81: Plane = other_955;
    let _e87: Circle = self_1063;
    let _e90: Circle = self_1063;
    let _e93: Circle = self_1063;
    let _e97: Plane = other_955;
    let _e103: Circle = self_1063;
    let _e107: Plane = other_955;
    let _e118: Circle = self_1063;
    let _e122: Plane = other_955;
    let _e134: Circle = self_1063;
    let _e138: Plane = other_955;
    let _e150: Circle = self_1063;
    let _e154: Plane = other_955;
    let _e166: Circle = self_1063;
    let _e169: Circle = self_1063;
    let _e172: Circle = self_1063;
    let _e175: Circle = self_1063;
    let _e179: Plane = other_955;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))) + (vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3<f32>(_e97.g0_.w))), ((((((vec4<f32>(_e103.g1_.y) * _e107.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e118.g1_.z) * _e122.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e134.g2_.y) * _e138.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e150.g2_.z) * _e154.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e166.g1_.x, _e169.g2_.x, _e172.g2_.x, _e175.g1_.x) * _e179.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn circle_plane_inner_anti_product(self_1064: Circle, other_956: Plane) -> Sphere {
    var self_1065: Circle;
    var other_957: Plane;

    self_1065 = self_1064;
    other_957 = other_956;
    let _e4: Circle = self_1065;
    let _e8: Plane = other_957;
    let _e17: Circle = self_1065;
    let _e21: Plane = other_957;
    let _e31: Circle = self_1065;
    let _e35: Plane = other_957;
    let _e46: Circle = self_1065;
    let _e50: Plane = other_957;
    let _e61: Circle = self_1065;
    let _e65: Plane = other_957;
    let _e76: Circle = self_1065;
    let _e80: Plane = other_957;
    let _e90: Circle = self_1065;
    let _e94: Plane = other_957;
    let _e97: Plane = other_957;
    let _e100: Plane = other_957;
    let _e111: Circle = self_1065;
    let _e115: Plane = other_957;
    let _e118: Plane = other_957;
    let _e121: Plane = other_957;
    let _e133: Circle = self_1065;
    let _e137: Plane = other_957;
    let _e140: Plane = other_957;
    let _e143: Plane = other_957;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g2_.x) * vec2<f32>(_e35.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g2_.y) * vec2<f32>(_e50.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g2_.z) * vec2<f32>(_e65.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g0_.x) * vec2<f32>(_e80.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e90.g1_.y) * vec3<f32>(_e94.g0_.z, _e97.g0_.z, _e100.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e111.g1_.z) * vec3<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e133.g1_.x) * vec3<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn circle_plane_right_anti_contraction(self_1066: Circle, other_958: Plane) -> Sphere {
    var self_1067: Circle;
    var other_959: Plane;

    self_1067 = self_1066;
    other_959 = other_958;
    let _e4: Circle = self_1067;
    let _e8: Plane = other_959;
    let _e17: Circle = self_1067;
    let _e21: Plane = other_959;
    let _e31: Circle = self_1067;
    let _e35: Plane = other_959;
    let _e46: Circle = self_1067;
    let _e50: Plane = other_959;
    let _e61: Circle = self_1067;
    let _e65: Plane = other_959;
    let _e76: Circle = self_1067;
    let _e80: Plane = other_959;
    let _e90: Circle = self_1067;
    let _e94: Plane = other_959;
    let _e97: Plane = other_959;
    let _e100: Plane = other_959;
    let _e111: Circle = self_1067;
    let _e115: Plane = other_959;
    let _e118: Plane = other_959;
    let _e121: Plane = other_959;
    let _e133: Circle = self_1067;
    let _e137: Plane = other_959;
    let _e140: Plane = other_959;
    let _e143: Plane = other_959;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g2_.x) * vec2<f32>(_e35.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g2_.y) * vec2<f32>(_e50.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g2_.z) * vec2<f32>(_e65.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g0_.x) * vec2<f32>(_e80.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e90.g1_.y) * vec3<f32>(_e94.g0_.z, _e97.g0_.z, _e100.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e111.g1_.z) * vec3<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e133.g1_.x) * vec3<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn circle_sphere_regressive_product(self_1068: Circle, other_960: Sphere) -> Dipole {
    var self_1069: Circle;
    var other_961: Sphere;

    self_1069 = self_1068;
    other_961 = other_960;
    let _e4: Circle = self_1069;
    let _e8: Sphere = other_961;
    let _e18: Circle = self_1069;
    let _e22: Sphere = other_961;
    let _e33: Circle = self_1069;
    let _e37: Sphere = other_961;
    let _e48: Circle = self_1069;
    let _e52: Sphere = other_961;
    let _e63: Circle = self_1069;
    let _e67: Sphere = other_961;
    let _e78: Circle = self_1069;
    let _e82: Sphere = other_961;
    let _e95: Circle = self_1069;
    let _e99: Sphere = other_961;
    let _e103: Circle = self_1069;
    let _e107: Sphere = other_961;
    let _e118: Circle = self_1069;
    let _e122: Sphere = other_961;
    let _e133: Circle = self_1069;
    let _e137: Sphere = other_961;
    let _e148: Circle = self_1069;
    let _e151: Circle = self_1069;
    let _e154: Circle = self_1069;
    let _e158: Sphere = other_961;
    let _e164: Circle = self_1069;
    let _e168: Sphere = other_961;
    let _e171: Sphere = other_961;
    let _e174: Sphere = other_961;
    let _e177: Sphere = other_961;
    let _e189: Circle = self_1069;
    let _e193: Sphere = other_961;
    let _e196: Sphere = other_961;
    let _e199: Sphere = other_961;
    let _e202: Sphere = other_961;
    let _e215: Circle = self_1069;
    let _e219: Sphere = other_961;
    let _e222: Sphere = other_961;
    let _e225: Sphere = other_961;
    let _e228: Sphere = other_961;
    let _e241: Circle = self_1069;
    let _e245: Sphere = other_961;
    let _e248: Sphere = other_961;
    let _e251: Sphere = other_961;
    let _e254: Sphere = other_961;
    let _e267: Circle = self_1069;
    let _e271: Sphere = other_961;
    let _e274: Sphere = other_961;
    let _e277: Sphere = other_961;
    let _e280: Sphere = other_961;
    let _e293: Circle = self_1069;
    let _e297: Sphere = other_961;
    let _e300: Sphere = other_961;
    let _e303: Sphere = other_961;
    let _e306: Sphere = other_961;
    return Dipole((((((((vec3<f32>(_e4.g0_.y) * _e8.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e18.g0_.z) * _e22.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e33.g1_.x) * vec3<f32>(_e37.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g1_.y) * vec3<f32>(_e52.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e63.g1_.z) * vec3<f32>(_e67.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e78.g0_.x) * _e82.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((vec3<f32>(0.0) - (vec3<f32>(_e95.g0_.w) * _e99.g1_)) + ((vec3<f32>(_e103.g2_.x) * vec3<f32>(_e107.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e118.g2_.y) * vec3<f32>(_e122.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e133.g2_.z) * vec3<f32>(_e137.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e148.g0_.x, _e151.g0_.y, _e154.g0_.z) * vec3<f32>(_e158.g0_.y))), (((((((vec4<f32>(_e164.g1_.y) * vec4<f32>(_e168.g0_.y, _e171.g0_.y, _e174.g0_.y, _e177.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e189.g1_.z) * vec4<f32>(_e193.g0_.y, _e196.g0_.y, _e199.g0_.y, _e202.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e215.g2_.x) * vec4<f32>(_e219.g1_.z, _e222.g1_.z, _e225.g1_.y, _e228.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e241.g2_.y) * vec4<f32>(_e245.g1_.z, _e248.g1_.z, _e251.g1_.x, _e254.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e267.g2_.z) * vec4<f32>(_e271.g1_.y, _e274.g1_.x, _e277.g1_.y, _e280.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e293.g1_.x) * vec4<f32>(_e297.g0_.y, _e300.g0_.x, _e303.g0_.x, _e306.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn circle_sphere_inner_anti_product(self_1070: Circle, other_962: Sphere) -> Sphere {
    var self_1071: Circle;
    var other_963: Sphere;

    self_1071 = self_1070;
    other_963 = other_962;
    let _e4: Circle = self_1071;
    let _e8: Sphere = other_963;
    let _e17: Circle = self_1071;
    let _e21: Sphere = other_963;
    let _e31: Circle = self_1071;
    let _e35: Sphere = other_963;
    let _e46: Circle = self_1071;
    let _e50: Sphere = other_963;
    let _e61: Circle = self_1071;
    let _e65: Sphere = other_963;
    let _e76: Circle = self_1071;
    let _e80: Sphere = other_963;
    let _e90: Circle = self_1071;
    let _e94: Sphere = other_963;
    let _e104: Circle = self_1071;
    let _e108: Sphere = other_963;
    let _e119: Circle = self_1071;
    let _e123: Sphere = other_963;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g2_.x) * vec2<f32>(_e35.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g2_.y) * vec2<f32>(_e50.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g2_.z) * vec2<f32>(_e65.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g0_.x) * vec2<f32>(_e80.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e90.g1_.y) * _e94.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e104.g1_.z) * _e108.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e119.g1_.x) * _e123.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn circle_sphere_right_anti_contraction(self_1072: Circle, other_964: Sphere) -> Sphere {
    var self_1073: Circle;
    var other_965: Sphere;

    self_1073 = self_1072;
    other_965 = other_964;
    let _e4: Circle = self_1073;
    let _e8: Sphere = other_965;
    let _e17: Circle = self_1073;
    let _e21: Sphere = other_965;
    let _e31: Circle = self_1073;
    let _e35: Sphere = other_965;
    let _e46: Circle = self_1073;
    let _e50: Sphere = other_965;
    let _e61: Circle = self_1073;
    let _e65: Sphere = other_965;
    let _e76: Circle = self_1073;
    let _e80: Sphere = other_965;
    let _e90: Circle = self_1073;
    let _e94: Sphere = other_965;
    let _e104: Circle = self_1073;
    let _e108: Sphere = other_965;
    let _e119: Circle = self_1073;
    let _e123: Sphere = other_965;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g2_.x) * vec2<f32>(_e35.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g2_.y) * vec2<f32>(_e50.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g2_.z) * vec2<f32>(_e65.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g0_.x) * vec2<f32>(_e80.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e90.g1_.y) * _e94.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e104.g1_.z) * _e108.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e119.g1_.x) * _e123.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn circle_motor_geometric_product(self_1074: Circle, other_966: Motor) -> Flector {
    var self_1075: Circle;
    var other_967: Motor;

    self_1075 = self_1074;
    other_967 = other_966;
    let _e4: Circle = self_1075;
    let _e8: Motor = other_967;
    let _e20: Circle = self_1075;
    let _e24: Motor = other_967;
    let _e37: Circle = self_1075;
    let _e41: Motor = other_967;
    let _e44: Motor = other_967;
    let _e47: Motor = other_967;
    let _e50: Motor = other_967;
    let _e56: Circle = self_1075;
    let _e60: Motor = other_967;
    let _e73: Circle = self_1075;
    let _e77: Motor = other_967;
    let _e88: Circle = self_1075;
    let _e92: Motor = other_967;
    let _e104: Circle = self_1075;
    let _e108: Motor = other_967;
    let _e111: Motor = other_967;
    let _e114: Motor = other_967;
    let _e117: Motor = other_967;
    let _e123: Circle = self_1075;
    let _e127: Motor = other_967;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g1_.x, _e44.g1_.y, _e47.g1_.z, _e50.g0_.w))) + ((vec4<f32>(_e56.g0_.x) * vec4<f32>(_e60.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e73.g0_.y) * _e77.g1_.zwxz) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0)) + ((vec4<f32>(_e88.g0_.z) * _e92.g1_.yxwy) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e104.g0_.w) * vec4<f32>(_e108.g0_.x, _e111.g0_.y, _e114.g0_.z, _e117.g1_.w))) + ((vec4<f32>(_e123.g0_.x) * _e127.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))));
}

fn circle_motor_outer_product(self_1076: Circle, other_968: Motor) -> Plane {
    var self_1077: Circle;
    var other_969: Motor;

    self_1077 = self_1076;
    other_969 = other_968;
    let _e4: Circle = self_1077;
    let _e6: Motor = other_969;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g1_.w)));
}

fn circle_motor_left_anti_contraction(self_1078: Circle, other_970: Motor) -> Translator {
    var self_1079: Circle;
    var other_971: Motor;

    self_1079 = self_1078;
    other_971 = other_970;
    let _e4: Circle = self_1079;
    let _e8: Motor = other_971;
    let _e11: Motor = other_971;
    let _e14: Motor = other_971;
    let _e17: Motor = other_971;
    let _e29: Circle = self_1079;
    let _e33: Motor = other_971;
    let _e36: Motor = other_971;
    let _e39: Motor = other_971;
    let _e42: Motor = other_971;
    let _e55: Circle = self_1079;
    let _e59: Motor = other_971;
    let _e62: Motor = other_971;
    let _e65: Motor = other_971;
    let _e68: Motor = other_971;
    return Translator(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.w, _e11.g1_.w, _e14.g1_.w, _e17.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g1_.w, _e36.g1_.w, _e39.g1_.w, _e42.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g1_.w, _e62.g1_.x, _e65.g1_.x, _e68.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn circle_motor_anti_scalar_product(self_1080: Circle, other_972: Motor) -> AntiScalar {
    var self_1081: Circle;
    var other_973: Motor;

    self_1081 = self_1080;
    other_973 = other_972;
    let _e5: Circle = self_1081;
    let _e8: Motor = other_973;
    let _e13: Circle = self_1081;
    let _e16: Motor = other_973;
    let _e21: Circle = self_1081;
    let _e24: Motor = other_973;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_rotor_left_anti_contraction(self_1082: Circle, other_974: Rotor) -> AntiScalar {
    var self_1083: Circle;
    var other_975: Rotor;

    self_1083 = self_1082;
    other_975 = other_974;
    let _e5: Circle = self_1083;
    let _e8: Rotor = other_975;
    let _e13: Circle = self_1083;
    let _e16: Rotor = other_975;
    let _e21: Circle = self_1083;
    let _e24: Rotor = other_975;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_rotor_anti_scalar_product(self_1084: Circle, other_976: Rotor) -> AntiScalar {
    var self_1085: Circle;
    var other_977: Rotor;

    self_1085 = self_1084;
    other_977 = other_976;
    let _e5: Circle = self_1085;
    let _e8: Rotor = other_977;
    let _e13: Circle = self_1085;
    let _e16: Rotor = other_977;
    let _e21: Circle = self_1085;
    let _e24: Rotor = other_977;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn circle_translator_inner_anti_product(self_1086: Circle, other_978: Translator) -> Circle {
    var self_1087: Circle;
    var other_979: Translator;

    self_1087 = self_1086;
    other_979 = other_978;
    let _e4: Circle = self_1087;
    let _e6: Translator = other_979;
    let _e11: Circle = self_1087;
    let _e13: Translator = other_979;
    let _e18: Circle = self_1087;
    let _e20: Translator = other_979;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec3<f32>(_e20.g0_.w)));
}

fn circle_translator_right_anti_contraction(self_1088: Circle, other_980: Translator) -> Circle {
    var self_1089: Circle;
    var other_981: Translator;

    self_1089 = self_1088;
    other_981 = other_980;
    let _e4: Circle = self_1089;
    let _e6: Translator = other_981;
    let _e11: Circle = self_1089;
    let _e13: Translator = other_981;
    let _e18: Circle = self_1089;
    let _e20: Translator = other_981;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec3<f32>(_e20.g0_.w)));
}

fn circle_flector_geometric_product(self_1090: Circle, other_982: Flector) -> Motor {
    var self_1091: Circle;
    var other_983: Flector;

    self_1091 = self_1090;
    other_983 = other_982;
    let _e4: Circle = self_1091;
    let _e8: Flector = other_983;
    let _e11: Flector = other_983;
    let _e14: Flector = other_983;
    let _e17: Flector = other_983;
    let _e30: Circle = self_1091;
    let _e34: Flector = other_983;
    let _e37: Flector = other_983;
    let _e40: Flector = other_983;
    let _e43: Flector = other_983;
    let _e57: Circle = self_1091;
    let _e61: Flector = other_983;
    let _e64: Flector = other_983;
    let _e67: Flector = other_983;
    let _e70: Flector = other_983;
    let _e84: Circle = self_1091;
    let _e88: Flector = other_983;
    let _e91: Flector = other_983;
    let _e94: Flector = other_983;
    let _e97: Flector = other_983;
    let _e105: Circle = self_1091;
    let _e109: Flector = other_983;
    let _e112: Flector = other_983;
    let _e115: Flector = other_983;
    let _e118: Flector = other_983;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) - (vec4<f32>(_e84.g0_.w) * vec4<f32>(_e88.g1_.x, _e91.g1_.y, _e94.g1_.z, _e97.g0_.w))), (vec4<f32>(0.0) - (vec4<f32>(_e105.g0_.w) * vec4<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z, _e118.g1_.w))));
}

fn circle_flector_outer_product(self_1092: Circle, other_984: Flector) -> AntiScalar {
    var self_1093: Circle;
    var other_985: Flector;

    self_1093 = self_1092;
    other_985 = other_984;
    let _e5: Circle = self_1093;
    let _e8: Flector = other_985;
    let _e13: Circle = self_1093;
    let _e16: Flector = other_985;
    let _e21: Circle = self_1093;
    let _e24: Flector = other_985;
    let _e29: Circle = self_1093;
    let _e32: Flector = other_985;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn circle_flector_inner_anti_product(self_1094: Circle, other_986: Flector) -> Sphere {
    var self_1095: Circle;
    var other_987: Flector;

    self_1095 = self_1094;
    other_987 = other_986;
    let _e4: Circle = self_1095;
    let _e8: Flector = other_987;
    let _e17: Circle = self_1095;
    let _e21: Flector = other_987;
    let _e31: Circle = self_1095;
    let _e35: Flector = other_987;
    let _e46: Circle = self_1095;
    let _e50: Flector = other_987;
    let _e61: Circle = self_1095;
    let _e65: Flector = other_987;
    let _e76: Circle = self_1095;
    let _e80: Flector = other_987;
    let _e91: Circle = self_1095;
    let _e95: Flector = other_987;
    let _e106: Circle = self_1095;
    let _e110: Flector = other_987;
    let _e121: Circle = self_1095;
    let _e125: Flector = other_987;
    let _e135: Circle = self_1095;
    let _e139: Flector = other_987;
    let _e142: Flector = other_987;
    let _e145: Flector = other_987;
    let _e156: Circle = self_1095;
    let _e160: Flector = other_987;
    let _e163: Flector = other_987;
    let _e166: Flector = other_987;
    let _e178: Circle = self_1095;
    let _e182: Flector = other_987;
    let _e185: Flector = other_987;
    let _e188: Flector = other_987;
    return Sphere(((((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g1_.x) * vec2<f32>(_e35.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g1_.y) * vec2<f32>(_e50.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g1_.z) * vec2<f32>(_e65.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g2_.x) * vec2<f32>(_e80.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e91.g2_.y) * vec2<f32>(_e95.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e106.g2_.z) * vec2<f32>(_e110.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e121.g0_.x) * vec2<f32>(_e125.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e135.g1_.x) * vec3<f32>(_e139.g0_.w, _e142.g1_.z, _e145.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e156.g1_.y) * vec3<f32>(_e160.g1_.z, _e163.g0_.w, _e166.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e178.g1_.z) * vec3<f32>(_e182.g1_.y, _e185.g1_.x, _e188.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))));
}

fn circle_flector_left_anti_contraction(self_1096: Circle, other_988: Flector) -> Plane {
    var self_1097: Circle;
    var other_989: Flector;

    self_1097 = self_1096;
    other_989 = other_988;
    let _e4: Circle = self_1097;
    let _e8: Flector = other_989;
    let _e19: Circle = self_1097;
    let _e23: Flector = other_989;
    let _e35: Circle = self_1097;
    let _e39: Flector = other_989;
    return Plane(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn circle_flector_right_anti_contraction(self_1098: Circle, other_990: Flector) -> Sphere {
    var self_1099: Circle;
    var other_991: Flector;

    self_1099 = self_1098;
    other_991 = other_990;
    let _e4: Circle = self_1099;
    let _e8: Flector = other_991;
    let _e17: Circle = self_1099;
    let _e21: Flector = other_991;
    let _e31: Circle = self_1099;
    let _e35: Flector = other_991;
    let _e46: Circle = self_1099;
    let _e50: Flector = other_991;
    let _e61: Circle = self_1099;
    let _e65: Flector = other_991;
    let _e76: Circle = self_1099;
    let _e80: Flector = other_991;
    let _e90: Circle = self_1099;
    let _e94: Flector = other_991;
    let _e97: Flector = other_991;
    let _e100: Flector = other_991;
    let _e111: Circle = self_1099;
    let _e115: Flector = other_991;
    let _e118: Flector = other_991;
    let _e121: Flector = other_991;
    let _e133: Circle = self_1099;
    let _e137: Flector = other_991;
    let _e140: Flector = other_991;
    let _e143: Flector = other_991;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g2_.x) * vec2<f32>(_e35.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g2_.y) * vec2<f32>(_e50.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g2_.z) * vec2<f32>(_e65.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g0_.x) * vec2<f32>(_e80.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((vec3<f32>(_e90.g1_.y) * vec3<f32>(_e94.g1_.z, _e97.g1_.z, _e100.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e111.g1_.z) * vec3<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e133.g1_.x) * vec3<f32>(_e137.g1_.x, _e140.g1_.z, _e143.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn circle_dilation_inner_anti_product(self_1100: Circle, other_992: Dilation) -> Circle {
    var self_1101: Circle;
    var other_993: Dilation;

    self_1101 = self_1100;
    other_993 = other_992;
    let _e4: Circle = self_1101;
    let _e6: Dilation = other_993;
    let _e11: Circle = self_1101;
    let _e13: Dilation = other_993;
    let _e18: Circle = self_1101;
    let _e20: Dilation = other_993;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)), (_e18.g2_ * vec3<f32>(_e20.g1_.y)));
}

fn circle_dilation_right_contraction(self_1102: Circle, other_994: Dilation) -> Scalar {
    var self_1103: Circle;
    var other_995: Dilation;

    self_1103 = self_1102;
    other_995 = other_994;
    let _e4: Circle = self_1103;
    let _e7: Dilation = other_995;
    return Scalar((_e4.g0_.w * _e7.g0_.z));
}

fn circle_dilation_right_anti_contraction(self_1104: Circle, other_996: Dilation) -> Circle {
    var self_1105: Circle;
    var other_997: Dilation;

    self_1105 = self_1104;
    other_997 = other_996;
    let _e4: Circle = self_1105;
    let _e6: Dilation = other_997;
    let _e11: Circle = self_1105;
    let _e13: Dilation = other_997;
    let _e18: Circle = self_1105;
    let _e20: Dilation = other_997;
    return Circle((_e4.g0_ * vec4<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)), (_e18.g2_ * vec3<f32>(_e20.g1_.y)));
}

fn circle_dilation_scalar_product(self_1106: Circle, other_998: Dilation) -> Scalar {
    var self_1107: Circle;
    var other_999: Dilation;

    self_1107 = self_1106;
    other_999 = other_998;
    let _e4: Circle = self_1107;
    let _e7: Dilation = other_999;
    return Scalar((_e4.g0_.w * _e7.g0_.z));
}

fn circle_multi_vector_add(self_1108: Circle, other_1000: MultiVector) -> MultiVector {
    var self_1109: Circle;
    var other_1001: MultiVector;

    self_1109 = self_1108;
    other_1001 = other_1000;
    let _e4: MultiVector = other_1001;
    let _e6: MultiVector = other_1001;
    let _e8: MultiVector = other_1001;
    let _e10: MultiVector = other_1001;
    let _e12: MultiVector = other_1001;
    let _e14: MultiVector = other_1001;
    let _e16: Circle = self_1109;
    let _e18: MultiVector = other_1001;
    let _e21: Circle = self_1109;
    let _e23: MultiVector = other_1001;
    let _e26: Circle = self_1109;
    let _e28: MultiVector = other_1001;
    let _e31: MultiVector = other_1001;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g1_ + _e18.g6_), (_e21.g2_ + _e23.g7_), (_e26.g0_ + _e28.g8_), _e31.g9_);
}

fn circle_multi_vector_sub(self_1110: Circle, other_1002: MultiVector) -> MultiVector {
    var self_1111: Circle;
    var other_1003: MultiVector;

    self_1111 = self_1110;
    other_1003 = other_1002;
    let _e6: MultiVector = other_1003;
    let _e11: MultiVector = other_1003;
    let _e16: MultiVector = other_1003;
    let _e21: MultiVector = other_1003;
    let _e26: MultiVector = other_1003;
    let _e31: MultiVector = other_1003;
    let _e34: Circle = self_1111;
    let _e36: MultiVector = other_1003;
    let _e39: Circle = self_1111;
    let _e41: MultiVector = other_1003;
    let _e44: Circle = self_1111;
    let _e46: MultiVector = other_1003;
    let _e51: MultiVector = other_1003;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (vec4<f32>(0.0) - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (_e34.g1_ - _e36.g6_), (_e39.g2_ - _e41.g7_), (_e44.g0_ - _e46.g8_), (vec4<f32>(0.0) - _e51.g9_));
}

fn circle_multi_vector_geometric_product(self_1112: Circle, other_1004: MultiVector) -> MultiVector {
    var self_1113: Circle;
    var other_1005: MultiVector;

    self_1113 = self_1112;
    other_1005 = other_1004;
    let _e4: Circle = self_1113;
    let _e8: MultiVector = other_1005;
    let _e11: MultiVector = other_1005;
    let _e14: MultiVector = other_1005;
    let _e26: Circle = self_1113;
    let _e30: MultiVector = other_1005;
    let _e33: MultiVector = other_1005;
    let _e36: MultiVector = other_1005;
    let _e49: Circle = self_1113;
    let _e53: MultiVector = other_1005;
    let _e56: MultiVector = other_1005;
    let _e59: MultiVector = other_1005;
    let _e65: Circle = self_1113;
    let _e69: MultiVector = other_1005;
    let _e81: Circle = self_1113;
    let _e85: MultiVector = other_1005;
    let _e97: Circle = self_1113;
    let _e101: MultiVector = other_1005;
    let _e113: Circle = self_1113;
    let _e117: MultiVector = other_1005;
    let _e129: Circle = self_1113;
    let _e133: MultiVector = other_1005;
    let _e145: Circle = self_1113;
    let _e149: MultiVector = other_1005;
    let _e161: Circle = self_1113;
    let _e165: MultiVector = other_1005;
    let _e168: MultiVector = other_1005;
    let _e171: MultiVector = other_1005;
    let _e184: Circle = self_1113;
    let _e188: MultiVector = other_1005;
    let _e191: Circle = self_1113;
    let _e195: MultiVector = other_1005;
    let _e205: Circle = self_1113;
    let _e209: MultiVector = other_1005;
    let _e220: Circle = self_1113;
    let _e224: MultiVector = other_1005;
    let _e227: MultiVector = other_1005;
    let _e238: Circle = self_1113;
    let _e242: MultiVector = other_1005;
    let _e253: Circle = self_1113;
    let _e257: MultiVector = other_1005;
    let _e268: Circle = self_1113;
    let _e272: MultiVector = other_1005;
    let _e283: Circle = self_1113;
    let _e287: MultiVector = other_1005;
    let _e298: Circle = self_1113;
    let _e302: MultiVector = other_1005;
    let _e314: Circle = self_1113;
    let _e318: MultiVector = other_1005;
    let _e331: Circle = self_1113;
    let _e335: MultiVector = other_1005;
    let _e338: MultiVector = other_1005;
    let _e341: MultiVector = other_1005;
    let _e344: MultiVector = other_1005;
    let _e350: Circle = self_1113;
    let _e354: MultiVector = other_1005;
    let _e367: Circle = self_1113;
    let _e371: MultiVector = other_1005;
    let _e384: Circle = self_1113;
    let _e388: MultiVector = other_1005;
    let _e401: Circle = self_1113;
    let _e405: MultiVector = other_1005;
    let _e408: MultiVector = other_1005;
    let _e411: MultiVector = other_1005;
    let _e414: MultiVector = other_1005;
    let _e428: Circle = self_1113;
    let _e432: MultiVector = other_1005;
    let _e435: MultiVector = other_1005;
    let _e438: MultiVector = other_1005;
    let _e441: MultiVector = other_1005;
    let _e455: Circle = self_1113;
    let _e459: MultiVector = other_1005;
    let _e462: MultiVector = other_1005;
    let _e465: MultiVector = other_1005;
    let _e468: MultiVector = other_1005;
    let _e482: Circle = self_1113;
    let _e486: MultiVector = other_1005;
    let _e499: Circle = self_1113;
    let _e503: MultiVector = other_1005;
    let _e506: MultiVector = other_1005;
    let _e509: MultiVector = other_1005;
    let _e520: Circle = self_1113;
    let _e524: MultiVector = other_1005;
    let _e527: MultiVector = other_1005;
    let _e530: MultiVector = other_1005;
    let _e542: Circle = self_1113;
    let _e546: MultiVector = other_1005;
    let _e549: MultiVector = other_1005;
    let _e552: MultiVector = other_1005;
    let _e564: Circle = self_1113;
    let _e568: MultiVector = other_1005;
    let _e571: MultiVector = other_1005;
    let _e574: MultiVector = other_1005;
    let _e582: Circle = self_1113;
    let _e586: MultiVector = other_1005;
    let _e590: Circle = self_1113;
    let _e594: MultiVector = other_1005;
    let _e597: MultiVector = other_1005;
    let _e600: MultiVector = other_1005;
    let _e611: Circle = self_1113;
    let _e615: MultiVector = other_1005;
    let _e618: MultiVector = other_1005;
    let _e621: MultiVector = other_1005;
    let _e633: Circle = self_1113;
    let _e637: MultiVector = other_1005;
    let _e640: MultiVector = other_1005;
    let _e643: MultiVector = other_1005;
    let _e655: Circle = self_1113;
    let _e659: MultiVector = other_1005;
    let _e662: MultiVector = other_1005;
    let _e665: MultiVector = other_1005;
    let _e671: Circle = self_1113;
    let _e675: MultiVector = other_1005;
    let _e678: MultiVector = other_1005;
    let _e681: MultiVector = other_1005;
    let _e693: Circle = self_1113;
    let _e697: MultiVector = other_1005;
    let _e700: MultiVector = other_1005;
    let _e703: MultiVector = other_1005;
    let _e715: Circle = self_1113;
    let _e719: MultiVector = other_1005;
    let _e722: MultiVector = other_1005;
    let _e725: MultiVector = other_1005;
    let _e737: Circle = self_1113;
    let _e741: MultiVector = other_1005;
    let _e744: MultiVector = other_1005;
    let _e747: MultiVector = other_1005;
    let _e759: Circle = self_1113;
    let _e763: MultiVector = other_1005;
    let _e766: MultiVector = other_1005;
    let _e769: MultiVector = other_1005;
    let _e781: Circle = self_1113;
    let _e785: MultiVector = other_1005;
    let _e788: MultiVector = other_1005;
    let _e791: MultiVector = other_1005;
    let _e805: Circle = self_1113;
    let _e809: MultiVector = other_1005;
    let _e812: MultiVector = other_1005;
    let _e815: MultiVector = other_1005;
    let _e821: Circle = self_1113;
    let _e825: MultiVector = other_1005;
    let _e828: MultiVector = other_1005;
    let _e831: MultiVector = other_1005;
    let _e843: Circle = self_1113;
    let _e847: MultiVector = other_1005;
    let _e850: MultiVector = other_1005;
    let _e853: MultiVector = other_1005;
    let _e865: Circle = self_1113;
    let _e869: MultiVector = other_1005;
    let _e872: MultiVector = other_1005;
    let _e875: MultiVector = other_1005;
    let _e887: Circle = self_1113;
    let _e891: MultiVector = other_1005;
    let _e894: MultiVector = other_1005;
    let _e897: MultiVector = other_1005;
    let _e900: MultiVector = other_1005;
    let _e912: Circle = self_1113;
    let _e916: MultiVector = other_1005;
    let _e919: MultiVector = other_1005;
    let _e922: MultiVector = other_1005;
    let _e925: MultiVector = other_1005;
    let _e938: Circle = self_1113;
    let _e942: MultiVector = other_1005;
    let _e945: MultiVector = other_1005;
    let _e948: MultiVector = other_1005;
    let _e951: MultiVector = other_1005;
    let _e957: Circle = self_1113;
    let _e961: MultiVector = other_1005;
    let _e964: MultiVector = other_1005;
    let _e967: MultiVector = other_1005;
    let _e970: MultiVector = other_1005;
    let _e983: Circle = self_1113;
    let _e987: MultiVector = other_1005;
    let _e990: MultiVector = other_1005;
    let _e993: MultiVector = other_1005;
    let _e996: MultiVector = other_1005;
    let _e1008: Circle = self_1113;
    let _e1012: MultiVector = other_1005;
    let _e1015: MultiVector = other_1005;
    let _e1018: MultiVector = other_1005;
    let _e1021: MultiVector = other_1005;
    let _e1034: Circle = self_1113;
    let _e1038: MultiVector = other_1005;
    let _e1041: MultiVector = other_1005;
    let _e1044: MultiVector = other_1005;
    let _e1047: MultiVector = other_1005;
    let _e1053: Circle = self_1113;
    let _e1057: MultiVector = other_1005;
    let _e1060: MultiVector = other_1005;
    let _e1063: MultiVector = other_1005;
    let _e1066: MultiVector = other_1005;
    let _e1079: Circle = self_1113;
    let _e1083: MultiVector = other_1005;
    let _e1086: MultiVector = other_1005;
    let _e1089: MultiVector = other_1005;
    let _e1092: MultiVector = other_1005;
    let _e1105: Circle = self_1113;
    let _e1109: MultiVector = other_1005;
    let _e1112: MultiVector = other_1005;
    let _e1115: MultiVector = other_1005;
    let _e1118: MultiVector = other_1005;
    let _e1131: Circle = self_1113;
    let _e1135: MultiVector = other_1005;
    let _e1138: MultiVector = other_1005;
    let _e1141: MultiVector = other_1005;
    let _e1144: MultiVector = other_1005;
    let _e1158: Circle = self_1113;
    let _e1162: MultiVector = other_1005;
    let _e1165: MultiVector = other_1005;
    let _e1168: MultiVector = other_1005;
    let _e1171: MultiVector = other_1005;
    let _e1185: Circle = self_1113;
    let _e1189: MultiVector = other_1005;
    let _e1192: MultiVector = other_1005;
    let _e1195: MultiVector = other_1005;
    let _e1198: MultiVector = other_1005;
    let _e1212: Circle = self_1113;
    let _e1216: MultiVector = other_1005;
    let _e1219: MultiVector = other_1005;
    let _e1222: MultiVector = other_1005;
    let _e1225: MultiVector = other_1005;
    return MultiVector((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g1_.y, _e11.g1_.y, _e14.g3_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g1_.z, _e33.g1_.z, _e36.g3_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) - (vec3<f32>(_e49.g0_.w) * vec3<f32>(_e53.g8_.w, _e56.g2_.x, _e59.g3_.w))) + ((vec3<f32>(_e65.g1_.x) * vec3<f32>(_e69.g5_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e81.g1_.y) * vec3<f32>(_e85.g5_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e97.g1_.z) * vec3<f32>(_e101.g5_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e113.g2_.x) * vec3<f32>(_e117.g4_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e129.g2_.y) * vec3<f32>(_e133.g4_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e145.g2_.z) * vec3<f32>(_e149.g4_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e161.g0_.x) * vec3<f32>(_e165.g1_.x, _e168.g1_.x, _e171.g3_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e184.g0_.w) * _e188.g5_), ((((((((vec2<f32>(_e191.g0_.y) * vec2<f32>(_e195.g5_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e205.g0_.z) * vec2<f32>(_e209.g5_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e220.g0_.w) * vec2<f32>(_e224.g0_.y, _e227.g9_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e238.g2_.x) * vec2<f32>(_e242.g5_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e253.g2_.y) * vec2<f32>(_e257.g5_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e268.g2_.z) * vec2<f32>(_e272.g5_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e283.g0_.x) * vec2<f32>(_e287.g5_.x)) * vec2<f32>(-(1.0), 0.0))), (((((((((((vec4<f32>(_e298.g0_.y) * vec4<f32>(_e302.g7_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e314.g0_.z) * vec4<f32>(_e318.g7_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e331.g0_.w) * vec4<f32>(_e335.g7_.x, _e338.g7_.y, _e341.g7_.z, _e344.g0_.z))) + ((vec4<f32>(_e350.g1_.x) * vec4<f32>(_e354.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e367.g1_.y) * vec4<f32>(_e371.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e384.g1_.z) * vec4<f32>(_e388.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e401.g2_.x) * vec4<f32>(_e405.g8_.w, _e408.g1_.z, _e411.g1_.y, _e414.g8_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e428.g2_.y) * vec4<f32>(_e432.g1_.z, _e435.g8_.w, _e438.g1_.x, _e441.g8_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e455.g2_.z) * vec4<f32>(_e459.g1_.y, _e462.g1_.x, _e465.g8_.w, _e468.g8_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e482.g0_.x) * vec4<f32>(_e486.g7_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec3<f32>(_e499.g0_.x) * vec3<f32>(_e503.g8_.w, _e506.g1_.z, _e509.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e520.g0_.y) * vec3<f32>(_e524.g1_.z, _e527.g8_.w, _e530.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e542.g0_.z) * vec3<f32>(_e546.g1_.y, _e549.g1_.x, _e552.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e564.g0_.w) * vec3<f32>(_e568.g8_.x, _e571.g8_.y, _e574.g8_.z))), (vec3<f32>(0.0) - (vec3<f32>(_e582.g0_.w) * _e586.g1_)), (((((((((((vec3<f32>(_e590.g0_.x) * vec3<f32>(_e594.g9_.w, _e597.g3_.z, _e600.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e611.g0_.y) * vec3<f32>(_e615.g3_.z, _e618.g9_.w, _e621.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e633.g0_.z) * vec3<f32>(_e637.g3_.y, _e640.g3_.x, _e643.g9_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e655.g0_.w) * vec3<f32>(_e659.g9_.x, _e662.g9_.y, _e665.g9_.z))) + ((vec3<f32>(_e671.g1_.x) * vec3<f32>(_e675.g0_.x, _e678.g5_.z, _e681.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e693.g1_.y) * vec3<f32>(_e697.g5_.z, _e700.g0_.x, _e703.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e715.g1_.z) * vec3<f32>(_e719.g5_.y, _e722.g5_.x, _e725.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e737.g2_.x) * vec3<f32>(_e741.g0_.y, _e744.g4_.z, _e747.g4_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e759.g2_.y) * vec3<f32>(_e763.g4_.z, _e766.g0_.y, _e769.g4_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e781.g2_.z) * vec3<f32>(_e785.g4_.y, _e788.g4_.x, _e791.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e805.g0_.w) * vec3<f32>(_e809.g3_.x, _e812.g3_.y, _e815.g3_.z))) + ((vec3<f32>(_e821.g2_.x) * vec3<f32>(_e825.g0_.x, _e828.g5_.z, _e831.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e843.g2_.y) * vec3<f32>(_e847.g5_.z, _e850.g0_.x, _e853.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e865.g2_.z) * vec3<f32>(_e869.g5_.y, _e872.g5_.x, _e875.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((vec4<f32>(_e887.g0_.y) * vec4<f32>(_e891.g5_.z, _e894.g0_.x, _e897.g5_.x, _e900.g5_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0)) + ((vec4<f32>(_e912.g0_.z) * vec4<f32>(_e916.g5_.y, _e919.g5_.x, _e922.g0_.x, _e925.g5_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e938.g0_.w) * vec4<f32>(_e942.g4_.x, _e945.g4_.y, _e948.g4_.z, _e951.g0_.x))) + ((vec4<f32>(_e957.g0_.x) * vec4<f32>(_e961.g0_.x, _e964.g5_.z, _e967.g5_.y, _e970.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))), (((((((((((vec4<f32>(_e983.g0_.y) * vec4<f32>(_e987.g7_.z, _e990.g2_.y, _e993.g7_.x, _e996.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0)) + ((vec4<f32>(_e1008.g0_.z) * vec4<f32>(_e1012.g7_.y, _e1015.g7_.x, _e1018.g2_.y, _e1021.g7_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e1034.g0_.w) * vec4<f32>(_e1038.g6_.x, _e1041.g6_.y, _e1044.g6_.z, _e1047.g2_.y))) + ((vec4<f32>(_e1053.g1_.x) * vec4<f32>(_e1057.g8_.w, _e1060.g1_.z, _e1063.g1_.y, _e1066.g8_.w)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1079.g1_.y) * vec4<f32>(_e1083.g1_.z, _e1086.g8_.w, _e1089.g1_.x, _e1092.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1105.g1_.z) * vec4<f32>(_e1109.g1_.y, _e1112.g1_.x, _e1115.g8_.w, _e1118.g1_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1131.g2_.x) * vec4<f32>(_e1135.g2_.x, _e1138.g8_.z, _e1141.g8_.y, _e1144.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1158.g2_.y) * vec4<f32>(_e1162.g8_.z, _e1165.g2_.x, _e1168.g8_.x, _e1171.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e1185.g2_.z) * vec4<f32>(_e1189.g8_.y, _e1192.g8_.x, _e1195.g2_.x, _e1198.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1212.g0_.x) * vec4<f32>(_e1216.g2_.y, _e1219.g7_.z, _e1222.g7_.y, _e1225.g2_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))));
}

fn circle_multi_vector_geometric_anti_product(self_1114: Circle, other_1006: MultiVector) -> MultiVector {
    var self_1115: Circle;
    var other_1007: MultiVector;

    self_1115 = self_1114;
    other_1007 = other_1006;
    let _e4: Circle = self_1115;
    let _e8: MultiVector = other_1007;
    let _e11: MultiVector = other_1007;
    let _e14: MultiVector = other_1007;
    let _e25: Circle = self_1115;
    let _e29: MultiVector = other_1007;
    let _e32: MultiVector = other_1007;
    let _e35: MultiVector = other_1007;
    let _e47: Circle = self_1115;
    let _e51: MultiVector = other_1007;
    let _e63: Circle = self_1115;
    let _e67: MultiVector = other_1007;
    let _e70: MultiVector = other_1007;
    let _e73: MultiVector = other_1007;
    let _e79: Circle = self_1115;
    let _e83: MultiVector = other_1007;
    let _e86: MultiVector = other_1007;
    let _e89: MultiVector = other_1007;
    let _e95: Circle = self_1115;
    let _e99: MultiVector = other_1007;
    let _e102: MultiVector = other_1007;
    let _e105: MultiVector = other_1007;
    let _e111: Circle = self_1115;
    let _e115: MultiVector = other_1007;
    let _e127: Circle = self_1115;
    let _e131: MultiVector = other_1007;
    let _e143: Circle = self_1115;
    let _e147: MultiVector = other_1007;
    let _e159: Circle = self_1115;
    let _e163: MultiVector = other_1007;
    let _e166: MultiVector = other_1007;
    let _e169: MultiVector = other_1007;
    let _e181: Circle = self_1115;
    let _e185: MultiVector = other_1007;
    let _e188: MultiVector = other_1007;
    let _e191: MultiVector = other_1007;
    let _e203: Circle = self_1115;
    let _e207: MultiVector = other_1007;
    let _e210: MultiVector = other_1007;
    let _e213: MultiVector = other_1007;
    let _e226: Circle = self_1115;
    let _e230: MultiVector = other_1007;
    let _e233: MultiVector = other_1007;
    let _e236: MultiVector = other_1007;
    let _e249: Circle = self_1115;
    let _e253: MultiVector = other_1007;
    let _e257: Circle = self_1115;
    let _e261: MultiVector = other_1007;
    let _e264: MultiVector = other_1007;
    let _e267: MultiVector = other_1007;
    let _e279: Circle = self_1115;
    let _e283: MultiVector = other_1007;
    let _e286: MultiVector = other_1007;
    let _e289: MultiVector = other_1007;
    let _e301: Circle = self_1115;
    let _e305: MultiVector = other_1007;
    let _e308: MultiVector = other_1007;
    let _e311: MultiVector = other_1007;
    let _e323: Circle = self_1115;
    let _e327: MultiVector = other_1007;
    let _e330: MultiVector = other_1007;
    let _e333: MultiVector = other_1007;
    let _e345: Circle = self_1115;
    let _e349: MultiVector = other_1007;
    let _e352: MultiVector = other_1007;
    let _e355: MultiVector = other_1007;
    let _e367: Circle = self_1115;
    let _e371: MultiVector = other_1007;
    let _e374: MultiVector = other_1007;
    let _e377: MultiVector = other_1007;
    let _e389: Circle = self_1115;
    let _e393: MultiVector = other_1007;
    let _e403: Circle = self_1115;
    let _e407: MultiVector = other_1007;
    let _e418: Circle = self_1115;
    let _e422: MultiVector = other_1007;
    let _e425: MultiVector = other_1007;
    let _e431: Circle = self_1115;
    let _e435: MultiVector = other_1007;
    let _e438: MultiVector = other_1007;
    let _e444: Circle = self_1115;
    let _e448: MultiVector = other_1007;
    let _e451: MultiVector = other_1007;
    let _e457: Circle = self_1115;
    let _e461: MultiVector = other_1007;
    let _e472: Circle = self_1115;
    let _e476: MultiVector = other_1007;
    let _e487: Circle = self_1115;
    let _e491: MultiVector = other_1007;
    let _e502: Circle = self_1115;
    let _e506: MultiVector = other_1007;
    let _e517: Circle = self_1115;
    let _e521: MultiVector = other_1007;
    let _e524: MultiVector = other_1007;
    let _e527: MultiVector = other_1007;
    let _e530: MultiVector = other_1007;
    let _e543: Circle = self_1115;
    let _e547: MultiVector = other_1007;
    let _e550: MultiVector = other_1007;
    let _e553: MultiVector = other_1007;
    let _e556: MultiVector = other_1007;
    let _e570: Circle = self_1115;
    let _e574: MultiVector = other_1007;
    let _e577: MultiVector = other_1007;
    let _e580: MultiVector = other_1007;
    let _e583: MultiVector = other_1007;
    let _e597: Circle = self_1115;
    let _e601: MultiVector = other_1007;
    let _e604: MultiVector = other_1007;
    let _e607: MultiVector = other_1007;
    let _e610: MultiVector = other_1007;
    let _e623: Circle = self_1115;
    let _e627: MultiVector = other_1007;
    let _e630: MultiVector = other_1007;
    let _e633: MultiVector = other_1007;
    let _e636: MultiVector = other_1007;
    let _e649: Circle = self_1115;
    let _e653: MultiVector = other_1007;
    let _e656: MultiVector = other_1007;
    let _e659: MultiVector = other_1007;
    let _e662: MultiVector = other_1007;
    let _e675: Circle = self_1115;
    let _e679: MultiVector = other_1007;
    let _e682: MultiVector = other_1007;
    let _e685: MultiVector = other_1007;
    let _e697: Circle = self_1115;
    let _e701: MultiVector = other_1007;
    let _e704: MultiVector = other_1007;
    let _e707: MultiVector = other_1007;
    let _e720: Circle = self_1115;
    let _e724: MultiVector = other_1007;
    let _e727: MultiVector = other_1007;
    let _e730: MultiVector = other_1007;
    let _e743: Circle = self_1115;
    let _e747: MultiVector = other_1007;
    let _e750: MultiVector = other_1007;
    let _e753: MultiVector = other_1007;
    let _e765: Circle = self_1115;
    let _e769: MultiVector = other_1007;
    let _e772: MultiVector = other_1007;
    let _e775: MultiVector = other_1007;
    let _e787: Circle = self_1115;
    let _e791: MultiVector = other_1007;
    let _e794: MultiVector = other_1007;
    let _e797: MultiVector = other_1007;
    let _e809: Circle = self_1115;
    let _e813: MultiVector = other_1007;
    let _e816: MultiVector = other_1007;
    let _e819: MultiVector = other_1007;
    let _e830: Circle = self_1115;
    let _e834: MultiVector = other_1007;
    let _e837: MultiVector = other_1007;
    let _e840: MultiVector = other_1007;
    let _e852: Circle = self_1115;
    let _e856: MultiVector = other_1007;
    let _e859: MultiVector = other_1007;
    let _e862: MultiVector = other_1007;
    let _e874: Circle = self_1115;
    let _e878: MultiVector = other_1007;
    let _e881: MultiVector = other_1007;
    let _e884: MultiVector = other_1007;
    let _e890: Circle = self_1115;
    let _e894: MultiVector = other_1007;
    let _e897: MultiVector = other_1007;
    let _e900: MultiVector = other_1007;
    let _e912: Circle = self_1115;
    let _e916: MultiVector = other_1007;
    let _e919: MultiVector = other_1007;
    let _e922: MultiVector = other_1007;
    let _e934: Circle = self_1115;
    let _e938: MultiVector = other_1007;
    let _e941: MultiVector = other_1007;
    let _e944: MultiVector = other_1007;
    let _e956: Circle = self_1115;
    let _e960: MultiVector = other_1007;
    let _e963: MultiVector = other_1007;
    let _e966: MultiVector = other_1007;
    let _e978: Circle = self_1115;
    let _e982: MultiVector = other_1007;
    let _e985: MultiVector = other_1007;
    let _e988: MultiVector = other_1007;
    let _e1000: Circle = self_1115;
    let _e1004: MultiVector = other_1007;
    let _e1007: MultiVector = other_1007;
    let _e1010: MultiVector = other_1007;
    let _e1022: Circle = self_1115;
    let _e1026: MultiVector = other_1007;
    let _e1029: MultiVector = other_1007;
    let _e1032: MultiVector = other_1007;
    let _e1043: Circle = self_1115;
    let _e1047: MultiVector = other_1007;
    let _e1050: MultiVector = other_1007;
    let _e1053: MultiVector = other_1007;
    let _e1065: Circle = self_1115;
    let _e1069: MultiVector = other_1007;
    let _e1072: MultiVector = other_1007;
    let _e1075: MultiVector = other_1007;
    let _e1087: Circle = self_1115;
    let _e1091: MultiVector = other_1007;
    let _e1094: MultiVector = other_1007;
    let _e1097: MultiVector = other_1007;
    let _e1108: Circle = self_1115;
    let _e1112: MultiVector = other_1007;
    let _e1115: MultiVector = other_1007;
    let _e1118: MultiVector = other_1007;
    let _e1130: Circle = self_1115;
    let _e1134: MultiVector = other_1007;
    let _e1137: MultiVector = other_1007;
    let _e1140: MultiVector = other_1007;
    let _e1152: Circle = self_1115;
    let _e1156: MultiVector = other_1007;
    let _e1159: MultiVector = other_1007;
    let _e1162: MultiVector = other_1007;
    let _e1174: Circle = self_1115;
    let _e1178: MultiVector = other_1007;
    let _e1181: MultiVector = other_1007;
    let _e1184: MultiVector = other_1007;
    let _e1196: Circle = self_1115;
    let _e1200: MultiVector = other_1007;
    let _e1203: MultiVector = other_1007;
    let _e1206: MultiVector = other_1007;
    let _e1218: Circle = self_1115;
    let _e1222: MultiVector = other_1007;
    let _e1225: MultiVector = other_1007;
    let _e1228: MultiVector = other_1007;
    let _e1231: MultiVector = other_1007;
    let _e1243: Circle = self_1115;
    let _e1247: MultiVector = other_1007;
    let _e1250: MultiVector = other_1007;
    let _e1253: MultiVector = other_1007;
    let _e1256: MultiVector = other_1007;
    let _e1269: Circle = self_1115;
    let _e1273: MultiVector = other_1007;
    let _e1276: MultiVector = other_1007;
    let _e1279: MultiVector = other_1007;
    let _e1282: MultiVector = other_1007;
    let _e1295: Circle = self_1115;
    let _e1299: MultiVector = other_1007;
    let _e1302: MultiVector = other_1007;
    let _e1305: MultiVector = other_1007;
    let _e1308: MultiVector = other_1007;
    let _e1322: Circle = self_1115;
    let _e1326: MultiVector = other_1007;
    let _e1329: MultiVector = other_1007;
    let _e1332: MultiVector = other_1007;
    let _e1335: MultiVector = other_1007;
    let _e1349: Circle = self_1115;
    let _e1353: MultiVector = other_1007;
    let _e1356: MultiVector = other_1007;
    let _e1359: MultiVector = other_1007;
    let _e1362: MultiVector = other_1007;
    let _e1376: Circle = self_1115;
    let _e1380: MultiVector = other_1007;
    let _e1393: Circle = self_1115;
    let _e1397: MultiVector = other_1007;
    let _e1410: Circle = self_1115;
    let _e1414: MultiVector = other_1007;
    let _e1427: Circle = self_1115;
    let _e1430: MultiVector = other_1007;
    let _e1433: MultiVector = other_1007;
    let _e1436: MultiVector = other_1007;
    let _e1439: MultiVector = other_1007;
    let _e1451: Circle = self_1115;
    let _e1455: MultiVector = other_1007;
    let _e1458: MultiVector = other_1007;
    let _e1461: MultiVector = other_1007;
    let _e1464: MultiVector = other_1007;
    let _e1477: Circle = self_1115;
    let _e1481: MultiVector = other_1007;
    let _e1484: MultiVector = other_1007;
    let _e1487: MultiVector = other_1007;
    let _e1490: MultiVector = other_1007;
    let _e1504: Circle = self_1115;
    let _e1508: MultiVector = other_1007;
    let _e1511: MultiVector = other_1007;
    let _e1514: MultiVector = other_1007;
    let _e1517: MultiVector = other_1007;
    let _e1531: Circle = self_1115;
    let _e1535: MultiVector = other_1007;
    let _e1548: Circle = self_1115;
    let _e1552: MultiVector = other_1007;
    let _e1565: Circle = self_1115;
    let _e1569: MultiVector = other_1007;
    return MultiVector((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g3_.y, _e11.g9_.y, _e14.g3_.y)) * vec3<f32>(-(1.0), 1.0, 0.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g3_.z, _e32.g9_.z, _e35.g3_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.w) * vec3<f32>(_e51.g3_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) - (vec3<f32>(_e63.g1_.x) * vec3<f32>(_e67.g5_.x, _e70.g4_.x, _e73.g6_.x))) - (vec3<f32>(_e79.g1_.y) * vec3<f32>(_e83.g5_.y, _e86.g4_.y, _e89.g6_.y))) - (vec3<f32>(_e95.g1_.z) * vec3<f32>(_e99.g5_.z, _e102.g4_.z, _e105.g6_.z))) + ((vec3<f32>(_e111.g2_.x) * vec3<f32>(_e115.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e127.g2_.y) * vec3<f32>(_e131.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e143.g2_.z) * vec3<f32>(_e147.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e159.g0_.x) * vec3<f32>(_e163.g3_.x, _e166.g9_.x, _e169.g3_.x)) * vec3<f32>(-(1.0), 1.0, 0.0))), (((((((((((vec3<f32>(_e181.g0_.x) * vec3<f32>(_e185.g2_.y, _e188.g7_.z, _e191.g7_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e203.g0_.y) * vec3<f32>(_e207.g7_.z, _e210.g2_.y, _e213.g7_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e226.g0_.z) * vec3<f32>(_e230.g7_.y, _e233.g7_.x, _e236.g2_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e249.g0_.w) * _e253.g6_)) + ((vec3<f32>(_e257.g1_.x) * vec3<f32>(_e261.g8_.w, _e264.g1_.z, _e267.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e279.g1_.y) * vec3<f32>(_e283.g1_.z, _e286.g8_.w, _e289.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e301.g1_.z) * vec3<f32>(_e305.g1_.y, _e308.g1_.x, _e311.g8_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e323.g2_.x) * vec3<f32>(_e327.g2_.x, _e330.g8_.z, _e333.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e345.g2_.y) * vec3<f32>(_e349.g8_.z, _e352.g2_.x, _e355.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e367.g2_.z) * vec3<f32>(_e371.g8_.y, _e374.g8_.x, _e377.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((((vec2<f32>(_e389.g0_.y) * vec2<f32>(_e393.g6_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e403.g0_.z) * vec2<f32>(_e407.g6_.z)) * vec2<f32>(-(1.0), 0.0))) - (vec2<f32>(_e418.g1_.x) * vec2<f32>(_e422.g8_.x, _e425.g7_.x))) - (vec2<f32>(_e431.g1_.y) * vec2<f32>(_e435.g8_.y, _e438.g7_.y))) - (vec2<f32>(_e444.g1_.z) * vec2<f32>(_e448.g8_.z, _e451.g7_.z))) + ((vec2<f32>(_e457.g2_.x) * vec2<f32>(_e461.g6_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e472.g2_.y) * vec2<f32>(_e476.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e487.g2_.z) * vec2<f32>(_e491.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e502.g0_.x) * vec2<f32>(_e506.g6_.x)) * vec2<f32>(-(1.0), 0.0))), (((((((vec4<f32>(_e517.g1_.x) * vec4<f32>(_e521.g9_.w, _e524.g3_.z, _e527.g3_.y, _e530.g9_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e543.g1_.y) * vec4<f32>(_e547.g3_.z, _e550.g9_.w, _e553.g3_.x, _e556.g9_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e570.g1_.z) * vec4<f32>(_e574.g3_.y, _e577.g3_.x, _e580.g9_.w, _e583.g9_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e597.g2_.y) * vec4<f32>(_e601.g9_.z, _e604.g3_.w, _e607.g9_.x, _e610.g9_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e623.g2_.z) * vec4<f32>(_e627.g9_.y, _e630.g9_.x, _e633.g3_.w, _e636.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e649.g2_.x) * vec4<f32>(_e653.g3_.w, _e656.g9_.z, _e659.g9_.y, _e662.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((vec3<f32>(_e675.g0_.x) * vec3<f32>(_e679.g3_.w, _e682.g9_.z, _e685.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e697.g0_.y) * vec3<f32>(_e701.g9_.z, _e704.g3_.w, _e707.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e720.g0_.z) * vec3<f32>(_e724.g9_.y, _e727.g9_.x, _e730.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e743.g1_.x) * vec3<f32>(_e747.g0_.y, _e750.g4_.z, _e753.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e765.g1_.y) * vec3<f32>(_e769.g4_.z, _e772.g0_.y, _e775.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e787.g1_.z) * vec3<f32>(_e791.g4_.y, _e794.g4_.x, _e797.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((((vec3<f32>(_e809.g0_.x) * vec3<f32>(_e813.g9_.w, _e816.g3_.z, _e819.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e830.g0_.y) * vec3<f32>(_e834.g3_.z, _e837.g9_.w, _e840.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e852.g0_.z) * vec3<f32>(_e856.g3_.y, _e859.g3_.x, _e862.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e874.g0_.w) * vec3<f32>(_e878.g9_.x, _e881.g9_.y, _e884.g9_.z))) + ((vec3<f32>(_e890.g1_.x) * vec3<f32>(_e894.g0_.x, _e897.g5_.z, _e900.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e912.g1_.y) * vec3<f32>(_e916.g5_.z, _e919.g0_.x, _e922.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e934.g1_.z) * vec3<f32>(_e938.g5_.y, _e941.g5_.x, _e944.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e956.g2_.x) * vec3<f32>(_e960.g0_.y, _e963.g4_.z, _e966.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e978.g2_.y) * vec3<f32>(_e982.g4_.z, _e985.g0_.y, _e988.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1000.g2_.z) * vec3<f32>(_e1004.g4_.y, _e1007.g4_.x, _e1010.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e1022.g1_.x) * vec3<f32>(_e1026.g0_.z, _e1029.g6_.z, _e1032.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e1043.g1_.y) * vec3<f32>(_e1047.g6_.z, _e1050.g0_.z, _e1053.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1065.g1_.z) * vec3<f32>(_e1069.g6_.y, _e1072.g6_.x, _e1075.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec3<f32>(_e1087.g1_.x) * vec3<f32>(_e1091.g2_.y, _e1094.g7_.z, _e1097.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e1108.g1_.y) * vec3<f32>(_e1112.g7_.z, _e1115.g2_.y, _e1118.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1130.g1_.z) * vec3<f32>(_e1134.g7_.y, _e1137.g7_.x, _e1140.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1152.g2_.x) * vec3<f32>(_e1156.g0_.z, _e1159.g6_.z, _e1162.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1174.g2_.y) * vec3<f32>(_e1178.g6_.z, _e1181.g0_.z, _e1184.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1196.g2_.z) * vec3<f32>(_e1200.g6_.y, _e1203.g6_.x, _e1206.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((((vec4<f32>(_e1218.g0_.x) * vec4<f32>(_e1222.g0_.z, _e1225.g6_.z, _e1228.g6_.y, _e1231.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e1243.g0_.y) * vec4<f32>(_e1247.g6_.z, _e1250.g0_.z, _e1253.g6_.x, _e1256.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1269.g0_.z) * vec4<f32>(_e1273.g6_.y, _e1276.g6_.x, _e1279.g0_.z, _e1282.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1295.g1_.x) * vec4<f32>(_e1299.g2_.x, _e1302.g8_.z, _e1305.g8_.y, _e1308.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1322.g1_.y) * vec4<f32>(_e1326.g8_.z, _e1329.g2_.x, _e1332.g8_.x, _e1335.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1349.g1_.z) * vec4<f32>(_e1353.g8_.y, _e1356.g8_.x, _e1359.g2_.x, _e1362.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1376.g2_.x) * vec4<f32>(_e1380.g8_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1393.g2_.y) * vec4<f32>(_e1397.g8_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1410.g2_.z) * vec4<f32>(_e1414.g8_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e1427.g0_.xxxw * vec4<f32>(_e1430.g0_.x, _e1433.g0_.x, _e1436.g0_.x, _e1439.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec4<f32>(_e1451.g1_.x) * vec4<f32>(_e1455.g3_.w, _e1458.g9_.z, _e1461.g9_.y, _e1464.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e1477.g1_.y) * vec4<f32>(_e1481.g9_.z, _e1484.g3_.w, _e1487.g9_.x, _e1490.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1504.g1_.z) * vec4<f32>(_e1508.g9_.y, _e1511.g9_.x, _e1514.g3_.w, _e1517.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1531.g2_.y) * vec4<f32>(_e1535.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1548.g2_.z) * vec4<f32>(_e1552.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1565.g2_.x) * vec4<f32>(_e1569.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn circle_multi_vector_scalar_product(self_1116: Circle, other_1008: MultiVector) -> Scalar {
    var self_1117: Circle;
    var other_1009: MultiVector;

    self_1117 = self_1116;
    other_1009 = other_1008;
    let _e5: Circle = self_1117;
    let _e8: MultiVector = other_1009;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g8_.w)));
}

fn circle_multi_vector_anti_scalar_product(self_1118: Circle, other_1010: MultiVector) -> AntiScalar {
    var self_1119: Circle;
    var other_1011: MultiVector;

    self_1119 = self_1118;
    other_1011 = other_1010;
    let _e5: Circle = self_1119;
    let _e8: MultiVector = other_1011;
    let _e13: Circle = self_1119;
    let _e16: MultiVector = other_1011;
    let _e21: Circle = self_1119;
    let _e24: MultiVector = other_1011;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g6_.x)) - (_e13.g1_.y * _e16.g6_.y)) - (_e21.g1_.z * _e24.g6_.z)));
}

fn circle_squared_magnitude(self_1120: Circle) -> Scalar {
    var self_1121: Circle;

    self_1121 = self_1120;
    let _e2: Circle = self_1121;
    let _e3: Circle = self_1121;
    let _e4: Circle = circle_reversal(_e3);
    let _e5: Scalar = circle_circle_scalar_product(_e2, _e4);
    return _e5;
}

fn circle_magnitude(self_1122: Circle) -> Scalar {
    var self_1123: Circle;

    self_1123 = self_1122;
    let _e2: Circle = self_1123;
    let _e3: Scalar = circle_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn circle_scale(self_1124: Circle, other_1012: f32) -> Circle {
    var self_1125: Circle;
    var other_1013: f32;

    self_1125 = self_1124;
    other_1013 = other_1012;
    let _e4: Circle = self_1125;
    let _e5: f32 = other_1013;
    let _e7: Circle = circle_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn circle_signum(self_1126: Circle) -> Circle {
    var self_1127: Circle;

    self_1127 = self_1126;
    let _e2: Circle = self_1127;
    let _e3: Circle = self_1127;
    let _e4: Scalar = circle_magnitude(_e3);
    let _e9: Circle = circle_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn circle_inverse(self_1128: Circle) -> Circle {
    var self_1129: Circle;

    self_1129 = self_1128;
    let _e2: Circle = self_1129;
    let _e3: Circle = circle_reversal(_e2);
    let _e4: Circle = self_1129;
    let _e5: Scalar = circle_squared_magnitude(_e4);
    let _e10: Circle = circle_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn plane_zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_neg(self_1130: Plane) -> Plane {
    var self_1131: Plane;

    self_1131 = self_1130;
    let _e2: Plane = self_1131;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_automorphism(self_1132: Plane) -> Plane {
    var self_1133: Plane;

    self_1133 = self_1132;
    let _e2: Plane = self_1133;
    return Plane(_e2.g0_);
}

fn plane_reversal(self_1134: Plane) -> Plane {
    var self_1135: Plane;

    self_1135 = self_1134;
    let _e2: Plane = self_1135;
    return Plane(_e2.g0_);
}

fn plane_conjugation(self_1136: Plane) -> Plane {
    var self_1137: Plane;

    self_1137 = self_1136;
    let _e2: Plane = self_1137;
    return Plane(_e2.g0_);
}

fn plane_anti_reversal(self_1138: Plane) -> Plane {
    var self_1139: Plane;

    self_1139 = self_1138;
    let _e2: Plane = self_1139;
    return Plane(_e2.g0_);
}

fn plane_scalar_geometric_product(self_1140: Plane, other_1014: Scalar) -> Plane {
    var self_1141: Plane;
    var other_1015: Scalar;

    self_1141 = self_1140;
    other_1015 = other_1014;
    let _e4: Plane = self_1141;
    let _e6: Scalar = other_1015;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_outer_product(self_1142: Plane, other_1016: Scalar) -> Plane {
    var self_1143: Plane;
    var other_1017: Scalar;

    self_1143 = self_1142;
    other_1017 = other_1016;
    let _e4: Plane = self_1143;
    let _e6: Scalar = other_1017;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_inner_product(self_1144: Plane, other_1018: Scalar) -> Plane {
    var self_1145: Plane;
    var other_1019: Scalar;

    self_1145 = self_1144;
    other_1019 = other_1018;
    let _e4: Plane = self_1145;
    let _e6: Scalar = other_1019;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_right_contraction(self_1146: Plane, other_1020: Scalar) -> Plane {
    var self_1147: Plane;
    var other_1021: Scalar;

    self_1147 = self_1146;
    other_1021 = other_1020;
    let _e4: Plane = self_1147;
    let _e6: Scalar = other_1021;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_regressive_product(self_1148: Plane, other_1022: AntiScalar) -> Plane {
    var self_1149: Plane;
    var other_1023: AntiScalar;

    self_1149 = self_1148;
    other_1023 = other_1022;
    let _e4: Plane = self_1149;
    let _e6: AntiScalar = other_1023;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_geometric_anti_product(self_1150: Plane, other_1024: AntiScalar) -> Plane {
    var self_1151: Plane;
    var other_1025: AntiScalar;

    self_1151 = self_1150;
    other_1025 = other_1024;
    let _e4: Plane = self_1151;
    let _e6: AntiScalar = other_1025;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_inner_anti_product(self_1152: Plane, other_1026: AntiScalar) -> Plane {
    var self_1153: Plane;
    var other_1027: AntiScalar;

    self_1153 = self_1152;
    other_1027 = other_1026;
    let _e4: Plane = self_1153;
    let _e6: AntiScalar = other_1027;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_right_anti_contraction(self_1154: Plane, other_1028: AntiScalar) -> Plane {
    var self_1155: Plane;
    var other_1029: AntiScalar;

    self_1155 = self_1154;
    other_1029 = other_1028;
    let _e4: Plane = self_1155;
    let _e6: AntiScalar = other_1029;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_radial_point_regressive_product(self_1156: Plane, other_1030: RadialPoint) -> Scalar {
    var self_1157: Plane;
    var other_1031: RadialPoint;

    self_1157 = self_1156;
    other_1031 = other_1030;
    let _e4: Plane = self_1157;
    let _e7: RadialPoint = other_1031;
    let _e11: Plane = self_1157;
    let _e14: RadialPoint = other_1031;
    let _e19: Plane = self_1157;
    let _e22: RadialPoint = other_1031;
    let _e27: Plane = self_1157;
    let _e30: RadialPoint = other_1031;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g1_.x)));
}

fn plane_radial_point_outer_product(self_1158: Plane, other_1032: RadialPoint) -> AntiScalar {
    var self_1159: Plane;
    var other_1033: RadialPoint;

    self_1159 = self_1158;
    other_1033 = other_1032;
    let _e4: Plane = self_1159;
    let _e7: RadialPoint = other_1033;
    let _e11: Plane = self_1159;
    let _e14: RadialPoint = other_1033;
    let _e19: Plane = self_1159;
    let _e22: RadialPoint = other_1033;
    let _e27: Plane = self_1159;
    let _e30: RadialPoint = other_1033;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g1_.x)));
}

fn plane_radial_point_inner_product(self_1160: Plane, other_1034: RadialPoint) -> Line {
    var self_1161: Plane;
    var other_1035: RadialPoint;

    self_1161 = self_1160;
    other_1035 = other_1034;
    let _e4: Plane = self_1161;
    let _e8: RadialPoint = other_1035;
    let _e18: Plane = self_1161;
    let _e22: RadialPoint = other_1035;
    let _e33: Plane = self_1161;
    let _e37: RadialPoint = other_1035;
    let _e48: Plane = self_1161;
    let _e52: RadialPoint = other_1035;
    return Line(((((vec3<f32>(_e4.g0_.y) * _e8.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e18.g0_.z) * _e22.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (vec3<f32>(_e48.g0_.w) * _e52.g0_));
}

fn plane_radial_point_right_contraction(self_1162: Plane, other_1036: RadialPoint) -> Line {
    var self_1163: Plane;
    var other_1037: RadialPoint;

    self_1163 = self_1162;
    other_1037 = other_1036;
    let _e4: Plane = self_1163;
    let _e8: RadialPoint = other_1037;
    let _e18: Plane = self_1163;
    let _e22: RadialPoint = other_1037;
    let _e33: Plane = self_1163;
    let _e37: RadialPoint = other_1037;
    let _e48: Plane = self_1163;
    let _e52: RadialPoint = other_1037;
    return Line(((((vec3<f32>(_e4.g0_.y) * _e8.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e18.g0_.z) * _e22.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e33.g0_.x) * _e37.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (vec3<f32>(_e48.g0_.w) * _e52.g0_));
}

fn plane_flat_point_add(self_1164: Plane, other_1038: FlatPoint) -> Flector {
    var self_1165: Plane;
    var other_1039: FlatPoint;

    self_1165 = self_1164;
    other_1039 = other_1038;
    let _e4: FlatPoint = other_1039;
    let _e6: Plane = self_1165;
    return Flector(_e4.g0_, _e6.g0_);
}

fn plane_flat_point_sub(self_1166: Plane, other_1040: FlatPoint) -> Flector {
    var self_1167: Plane;
    var other_1041: FlatPoint;

    self_1167 = self_1166;
    other_1041 = other_1040;
    let _e6: FlatPoint = other_1041;
    let _e9: Plane = self_1167;
    return Flector((vec4<f32>(0.0) - _e6.g0_), _e9.g0_);
}

fn plane_flat_point_inner_anti_product(self_1168: Plane, other_1042: FlatPoint) -> Line {
    var self_1169: Plane;
    var other_1043: FlatPoint;

    self_1169 = self_1168;
    other_1043 = other_1042;
    let _e4: Plane = self_1169;
    let _e7: Plane = self_1169;
    let _e10: Plane = self_1169;
    let _e14: FlatPoint = other_1043;
    let _e23: Plane = self_1169;
    let _e27: FlatPoint = other_1043;
    let _e30: FlatPoint = other_1043;
    let _e33: FlatPoint = other_1043;
    let _e44: Plane = self_1169;
    let _e48: FlatPoint = other_1043;
    let _e51: FlatPoint = other_1043;
    let _e54: FlatPoint = other_1043;
    let _e66: Plane = self_1169;
    let _e70: FlatPoint = other_1043;
    let _e73: FlatPoint = other_1043;
    let _e76: FlatPoint = other_1043;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(_e14.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e23.g0_.y) * vec3<f32>(_e27.g0_.z, _e30.g0_.z, _e33.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e44.g0_.z) * vec3<f32>(_e48.g0_.y, _e51.g0_.x, _e54.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_flat_point_left_anti_contraction(self_1170: Plane, other_1044: FlatPoint) -> Line {
    var self_1171: Plane;
    var other_1045: FlatPoint;

    self_1171 = self_1170;
    other_1045 = other_1044;
    let _e4: Plane = self_1171;
    let _e7: Plane = self_1171;
    let _e10: Plane = self_1171;
    let _e14: FlatPoint = other_1045;
    let _e23: Plane = self_1171;
    let _e27: FlatPoint = other_1045;
    let _e30: FlatPoint = other_1045;
    let _e33: FlatPoint = other_1045;
    let _e44: Plane = self_1171;
    let _e48: FlatPoint = other_1045;
    let _e51: FlatPoint = other_1045;
    let _e54: FlatPoint = other_1045;
    let _e66: Plane = self_1171;
    let _e70: FlatPoint = other_1045;
    let _e73: FlatPoint = other_1045;
    let _e76: FlatPoint = other_1045;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(_e14.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e23.g0_.y) * vec3<f32>(_e27.g0_.z, _e30.g0_.z, _e33.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e44.g0_.z) * vec3<f32>(_e48.g0_.y, _e51.g0_.x, _e54.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_dipole_regressive_product(self_1172: Plane, other_1046: Dipole) -> RadialPoint {
    var self_1173: Plane;
    var other_1047: Dipole;

    self_1173 = self_1172;
    other_1047 = other_1046;
    let _e4: Plane = self_1173;
    let _e8: Dipole = other_1047;
    let _e18: Plane = self_1173;
    let _e22: Dipole = other_1047;
    let _e33: Plane = self_1173;
    let _e37: Dipole = other_1047;
    let _e41: Plane = self_1173;
    let _e45: Dipole = other_1047;
    let _e56: Plane = self_1173;
    let _e60: Dipole = other_1047;
    let _e63: Dipole = other_1047;
    let _e73: Plane = self_1173;
    let _e77: Dipole = other_1047;
    let _e80: Dipole = other_1047;
    let _e91: Plane = self_1173;
    let _e95: Dipole = other_1047;
    let _e98: Dipole = other_1047;
    let _e109: Plane = self_1173;
    let _e112: Plane = self_1173;
    let _e116: Dipole = other_1047;
    let _e119: Dipole = other_1047;
    return RadialPoint((((((vec3<f32>(_e4.g0_.y) * _e8.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e18.g0_.z) * _e22.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec3<f32>(_e41.g0_.x) * _e45.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((vec2<f32>(_e56.g0_.x) * vec2<f32>(_e60.g0_.x, _e63.g2_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e73.g0_.y) * vec2<f32>(_e77.g0_.y, _e80.g2_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e91.g0_.z) * vec2<f32>(_e95.g0_.z, _e98.g2_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e109.g0_.x, _e112.g0_.w) * vec2<f32>(_e116.g2_.x, _e119.g2_.w)) * vec2<f32>(0.0, -(1.0)))));
}

fn plane_dipole_inner_product(self_1174: Plane, other_1048: Dipole) -> FlatPoint {
    var self_1175: Plane;
    var other_1049: Dipole;

    self_1175 = self_1174;
    other_1049 = other_1048;
    let _e4: Plane = self_1175;
    let _e8: Dipole = other_1049;
    let _e20: Plane = self_1175;
    let _e24: Dipole = other_1049;
    let _e37: Plane = self_1175;
    let _e40: Dipole = other_1049;
    let _e43: Dipole = other_1049;
    let _e46: Dipole = other_1049;
    let _e49: Dipole = other_1049;
    return FlatPoint(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_dipole_inner_anti_product(self_1176: Plane, other_1050: Dipole) -> Circle {
    var self_1177: Plane;
    var other_1051: Dipole;

    self_1177 = self_1176;
    other_1051 = other_1050;
    let _e4: Plane = self_1177;
    let _e8: Dipole = other_1051;
    let _e11: Dipole = other_1051;
    let _e14: Dipole = other_1051;
    let _e17: Dipole = other_1051;
    let _e30: Plane = self_1177;
    let _e34: Dipole = other_1051;
    let _e37: Dipole = other_1051;
    let _e40: Dipole = other_1051;
    let _e43: Dipole = other_1051;
    let _e57: Plane = self_1177;
    let _e61: Dipole = other_1051;
    let _e64: Dipole = other_1051;
    let _e67: Dipole = other_1051;
    let _e70: Dipole = other_1051;
    let _e84: Plane = self_1177;
    let _e87: Plane = self_1177;
    let _e90: Plane = self_1177;
    let _e94: Dipole = other_1051;
    let _e103: Plane = self_1177;
    let _e107: Dipole = other_1051;
    let _e110: Dipole = other_1051;
    let _e113: Dipole = other_1051;
    let _e124: Plane = self_1177;
    let _e128: Dipole = other_1051;
    let _e131: Dipole = other_1051;
    let _e134: Dipole = other_1051;
    let _e146: Plane = self_1177;
    let _e150: Dipole = other_1051;
    let _e153: Dipole = other_1051;
    let _e156: Dipole = other_1051;
    return Circle(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3<f32>(_e94.g2_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e103.g0_.y) * vec3<f32>(_e107.g2_.z, _e110.g2_.z, _e113.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e124.g0_.z) * vec3<f32>(_e128.g2_.y, _e131.g2_.x, _e134.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e146.g0_.x) * vec3<f32>(_e150.g2_.x, _e153.g2_.z, _e156.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_dipole_right_contraction(self_1178: Plane, other_1052: Dipole) -> FlatPoint {
    var self_1179: Plane;
    var other_1053: Dipole;

    self_1179 = self_1178;
    other_1053 = other_1052;
    let _e4: Plane = self_1179;
    let _e8: Dipole = other_1053;
    let _e20: Plane = self_1179;
    let _e24: Dipole = other_1053;
    let _e37: Plane = self_1179;
    let _e40: Dipole = other_1053;
    let _e43: Dipole = other_1053;
    let _e46: Dipole = other_1053;
    let _e49: Dipole = other_1053;
    return FlatPoint(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_dipole_left_anti_contraction(self_1180: Plane, other_1054: Dipole) -> Circle {
    var self_1181: Plane;
    var other_1055: Dipole;

    self_1181 = self_1180;
    other_1055 = other_1054;
    let _e4: Plane = self_1181;
    let _e8: Dipole = other_1055;
    let _e11: Dipole = other_1055;
    let _e14: Dipole = other_1055;
    let _e17: Dipole = other_1055;
    let _e30: Plane = self_1181;
    let _e34: Dipole = other_1055;
    let _e37: Dipole = other_1055;
    let _e40: Dipole = other_1055;
    let _e43: Dipole = other_1055;
    let _e57: Plane = self_1181;
    let _e61: Dipole = other_1055;
    let _e64: Dipole = other_1055;
    let _e67: Dipole = other_1055;
    let _e70: Dipole = other_1055;
    let _e84: Plane = self_1181;
    let _e87: Plane = self_1181;
    let _e90: Plane = self_1181;
    let _e94: Dipole = other_1055;
    let _e103: Plane = self_1181;
    let _e107: Dipole = other_1055;
    let _e110: Dipole = other_1055;
    let _e113: Dipole = other_1055;
    let _e124: Plane = self_1181;
    let _e128: Dipole = other_1055;
    let _e131: Dipole = other_1055;
    let _e134: Dipole = other_1055;
    let _e146: Plane = self_1181;
    let _e150: Dipole = other_1055;
    let _e153: Dipole = other_1055;
    let _e156: Dipole = other_1055;
    return Circle(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3<f32>(_e94.g2_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e103.g0_.y) * vec3<f32>(_e107.g2_.z, _e110.g2_.z, _e113.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e124.g0_.z) * vec3<f32>(_e128.g2_.y, _e131.g2_.x, _e134.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e146.g0_.x) * vec3<f32>(_e150.g2_.x, _e153.g2_.z, _e156.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_line_regressive_product(self_1182: Plane, other_1056: Line) -> FlatPoint {
    var self_1183: Plane;
    var other_1057: Line;

    self_1183 = self_1182;
    other_1057 = other_1056;
    let _e4: Plane = self_1183;
    let _e8: Line = other_1057;
    let _e11: Line = other_1057;
    let _e14: Line = other_1057;
    let _e17: Line = other_1057;
    let _e30: Plane = self_1183;
    let _e34: Line = other_1057;
    let _e37: Line = other_1057;
    let _e40: Line = other_1057;
    let _e43: Line = other_1057;
    let _e57: Plane = self_1183;
    let _e61: Line = other_1057;
    let _e64: Line = other_1057;
    let _e67: Line = other_1057;
    let _e70: Line = other_1057;
    let _e82: Plane = self_1183;
    let _e86: Line = other_1057;
    let _e89: Line = other_1057;
    let _e92: Line = other_1057;
    let _e95: Line = other_1057;
    return FlatPoint((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_line_geometric_anti_product(self_1184: Plane, other_1058: Line) -> Flector {
    var self_1185: Plane;
    var other_1059: Line;

    self_1185 = self_1184;
    other_1059 = other_1058;
    let _e4: Plane = self_1185;
    let _e8: Line = other_1059;
    let _e11: Line = other_1059;
    let _e14: Line = other_1059;
    let _e17: Line = other_1059;
    let _e30: Plane = self_1185;
    let _e34: Line = other_1059;
    let _e37: Line = other_1059;
    let _e40: Line = other_1059;
    let _e43: Line = other_1059;
    let _e57: Plane = self_1185;
    let _e61: Line = other_1059;
    let _e64: Line = other_1059;
    let _e67: Line = other_1059;
    let _e70: Line = other_1059;
    let _e82: Plane = self_1185;
    let _e86: Line = other_1059;
    let _e89: Line = other_1059;
    let _e92: Line = other_1059;
    let _e95: Line = other_1059;
    let _e109: Plane = self_1185;
    let _e113: Line = other_1059;
    let _e116: Line = other_1059;
    let _e119: Line = other_1059;
    let _e122: Line = other_1059;
    let _e134: Plane = self_1185;
    let _e138: Line = other_1059;
    let _e141: Line = other_1059;
    let _e144: Line = other_1059;
    let _e147: Line = other_1059;
    let _e160: Plane = self_1185;
    let _e164: Line = other_1059;
    let _e167: Line = other_1059;
    let _e170: Line = other_1059;
    let _e173: Line = other_1059;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.z, _e116.g0_.z, _e119.g0_.x, _e122.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g0_.y, _e141.g0_.x, _e144.g0_.y, _e147.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e160.g0_.x) * vec4<f32>(_e164.g0_.x, _e167.g0_.z, _e170.g0_.y, _e173.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_line_inner_anti_product(self_1186: Plane, other_1060: Line) -> Plane {
    var self_1187: Plane;
    var other_1061: Line;

    self_1187 = self_1186;
    other_1061 = other_1060;
    let _e4: Plane = self_1187;
    let _e8: Line = other_1061;
    let _e11: Line = other_1061;
    let _e14: Line = other_1061;
    let _e17: Line = other_1061;
    let _e29: Plane = self_1187;
    let _e33: Line = other_1061;
    let _e36: Line = other_1061;
    let _e39: Line = other_1061;
    let _e42: Line = other_1061;
    let _e55: Plane = self_1187;
    let _e59: Line = other_1061;
    let _e62: Line = other_1061;
    let _e65: Line = other_1061;
    let _e68: Line = other_1061;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_line_left_anti_contraction(self_1188: Plane, other_1062: Line) -> Plane {
    var self_1189: Plane;
    var other_1063: Line;

    self_1189 = self_1188;
    other_1063 = other_1062;
    let _e4: Plane = self_1189;
    let _e8: Line = other_1063;
    let _e11: Line = other_1063;
    let _e14: Line = other_1063;
    let _e17: Line = other_1063;
    let _e29: Plane = self_1189;
    let _e33: Line = other_1063;
    let _e36: Line = other_1063;
    let _e39: Line = other_1063;
    let _e42: Line = other_1063;
    let _e55: Plane = self_1189;
    let _e59: Line = other_1063;
    let _e62: Line = other_1063;
    let _e65: Line = other_1063;
    let _e68: Line = other_1063;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_circle_regressive_product(self_1190: Plane, other_1064: Circle) -> Dipole {
    var self_1191: Plane;
    var other_1065: Circle;

    self_1191 = self_1190;
    other_1065 = other_1064;
    let _e4: Plane = self_1191;
    let _e8: Circle = other_1065;
    let _e11: Circle = other_1065;
    let _e14: Circle = other_1065;
    let _e25: Plane = self_1191;
    let _e29: Circle = other_1065;
    let _e32: Circle = other_1065;
    let _e35: Circle = other_1065;
    let _e47: Plane = self_1191;
    let _e51: Circle = other_1065;
    let _e54: Circle = other_1065;
    let _e57: Circle = other_1065;
    let _e69: Plane = self_1191;
    let _e73: Circle = other_1065;
    let _e76: Circle = other_1065;
    let _e79: Circle = other_1065;
    let _e84: Plane = self_1191;
    let _e87: Plane = self_1191;
    let _e90: Plane = self_1191;
    let _e94: Circle = other_1065;
    let _e104: Plane = self_1191;
    let _e108: Circle = other_1065;
    let _e111: Circle = other_1065;
    let _e114: Circle = other_1065;
    let _e117: Circle = other_1065;
    let _e130: Plane = self_1191;
    let _e134: Circle = other_1065;
    let _e137: Circle = other_1065;
    let _e140: Circle = other_1065;
    let _e143: Circle = other_1065;
    let _e157: Plane = self_1191;
    let _e161: Circle = other_1065;
    let _e164: Circle = other_1065;
    let _e167: Circle = other_1065;
    let _e170: Circle = other_1065;
    let _e182: Plane = self_1191;
    let _e186: Circle = other_1065;
    let _e189: Circle = other_1065;
    let _e192: Circle = other_1065;
    let _e195: Circle = other_1065;
    return Dipole(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e69.g0_.w) * vec3<f32>(_e73.g0_.x, _e76.g0_.y, _e79.g0_.z)) + ((vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3<f32>(_e94.g0_.w)) * vec3<f32>(-(1.0)))), (((((vec4<f32>(_e104.g0_.y) * vec4<f32>(_e108.g2_.z, _e111.g2_.z, _e114.g2_.x, _e117.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e130.g0_.z) * vec4<f32>(_e134.g2_.y, _e137.g2_.x, _e140.g2_.y, _e143.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e157.g0_.w) * vec4<f32>(_e161.g1_.x, _e164.g1_.y, _e167.g1_.z, _e170.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e182.g0_.x) * vec4<f32>(_e186.g2_.x, _e189.g2_.z, _e192.g2_.y, _e195.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_circle_inner_anti_product(self_1192: Plane, other_1066: Circle) -> Sphere {
    var self_1193: Plane;
    var other_1067: Circle;

    self_1193 = self_1192;
    other_1067 = other_1066;
    let _e4: Plane = self_1193;
    let _e8: Circle = other_1067;
    let _e11: Circle = other_1067;
    let _e21: Plane = self_1193;
    let _e25: Circle = other_1067;
    let _e28: Circle = other_1067;
    let _e39: Plane = self_1193;
    let _e43: Circle = other_1067;
    let _e46: Circle = other_1067;
    let _e57: Plane = self_1193;
    let _e61: Circle = other_1067;
    let _e71: Plane = self_1193;
    let _e75: Circle = other_1067;
    let _e86: Plane = self_1193;
    let _e90: Circle = other_1067;
    return Sphere(((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g0_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g0_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(-(1.0), 1.0))), ((((vec3<f32>(_e57.g0_.y) * _e61.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e71.g0_.z) * _e75.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e86.g0_.x) * _e90.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_circle_left_anti_contraction(self_1194: Plane, other_1068: Circle) -> Sphere {
    var self_1195: Plane;
    var other_1069: Circle;

    self_1195 = self_1194;
    other_1069 = other_1068;
    let _e4: Plane = self_1195;
    let _e8: Circle = other_1069;
    let _e11: Circle = other_1069;
    let _e21: Plane = self_1195;
    let _e25: Circle = other_1069;
    let _e28: Circle = other_1069;
    let _e39: Plane = self_1195;
    let _e43: Circle = other_1069;
    let _e46: Circle = other_1069;
    let _e57: Plane = self_1195;
    let _e61: Circle = other_1069;
    let _e71: Plane = self_1195;
    let _e75: Circle = other_1069;
    let _e86: Plane = self_1195;
    let _e90: Circle = other_1069;
    return Sphere(((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g0_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g0_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(-(1.0), 1.0))), ((((vec3<f32>(_e57.g0_.y) * _e61.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e71.g0_.z) * _e75.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e86.g0_.x) * _e90.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_plane_add(self_1196: Plane, other_1070: Plane) -> Plane {
    var self_1197: Plane;
    var other_1071: Plane;

    self_1197 = self_1196;
    other_1071 = other_1070;
    let _e4: Plane = self_1197;
    let _e6: Plane = other_1071;
    return Plane((_e4.g0_ + _e6.g0_));
}

fn plane_plane_sub(self_1198: Plane, other_1072: Plane) -> Plane {
    var self_1199: Plane;
    var other_1073: Plane;

    self_1199 = self_1198;
    other_1073 = other_1072;
    let _e4: Plane = self_1199;
    let _e6: Plane = other_1073;
    return Plane((_e4.g0_ - _e6.g0_));
}

fn plane_plane_mul(self_1200: Plane, other_1074: Plane) -> Plane {
    var self_1201: Plane;
    var other_1075: Plane;

    self_1201 = self_1200;
    other_1075 = other_1074;
    let _e4: Plane = self_1201;
    let _e6: Plane = other_1075;
    return Plane((_e4.g0_ * _e6.g0_));
}

fn plane_plane_div(self_1202: Plane, other_1076: Plane) -> Plane {
    var self_1203: Plane;
    var other_1077: Plane;

    self_1203 = self_1202;
    other_1077 = other_1076;
    let _e4: Plane = self_1203;
    let _e7: Plane = self_1203;
    let _e10: Plane = self_1203;
    let _e13: Plane = self_1203;
    let _e23: Plane = other_1077;
    let _e26: Plane = other_1077;
    let _e29: Plane = other_1077;
    let _e32: Plane = other_1077;
    return Plane((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn plane_plane_regressive_product(self_1204: Plane, other_1078: Plane) -> Line {
    var self_1205: Plane;
    var other_1079: Plane;

    self_1205 = self_1204;
    other_1079 = other_1078;
    let _e4: Plane = self_1205;
    let _e8: Plane = other_1079;
    let _e11: Plane = other_1079;
    let _e14: Plane = other_1079;
    let _e25: Plane = self_1205;
    let _e29: Plane = other_1079;
    let _e32: Plane = other_1079;
    let _e35: Plane = other_1079;
    let _e47: Plane = self_1205;
    let _e51: Plane = other_1079;
    let _e54: Plane = other_1079;
    let _e57: Plane = other_1079;
    let _e71: Plane = self_1205;
    let _e75: Plane = other_1079;
    let _e78: Plane = other_1079;
    let _e81: Plane = other_1079;
    let _e87: Plane = self_1205;
    let _e90: Plane = self_1205;
    let _e93: Plane = self_1205;
    let _e97: Plane = other_1079;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))) + (vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3<f32>(_e97.g0_.w))));
}

fn plane_plane_inner_anti_product(self_1206: Plane, other_1080: Plane) -> AntiScalar {
    var self_1207: Plane;
    var other_1081: Plane;

    self_1207 = self_1206;
    other_1081 = other_1080;
    let _e4: Plane = self_1207;
    let _e7: Plane = other_1081;
    let _e11: Plane = self_1207;
    let _e14: Plane = other_1081;
    let _e19: Plane = self_1207;
    let _e22: Plane = other_1081;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_left_anti_contraction(self_1208: Plane, other_1082: Plane) -> AntiScalar {
    var self_1209: Plane;
    var other_1083: Plane;

    self_1209 = self_1208;
    other_1083 = other_1082;
    let _e4: Plane = self_1209;
    let _e7: Plane = other_1083;
    let _e11: Plane = self_1209;
    let _e14: Plane = other_1083;
    let _e19: Plane = self_1209;
    let _e22: Plane = other_1083;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_right_anti_contraction(self_1210: Plane, other_1084: Plane) -> AntiScalar {
    var self_1211: Plane;
    var other_1085: Plane;

    self_1211 = self_1210;
    other_1085 = other_1084;
    let _e4: Plane = self_1211;
    let _e7: Plane = other_1085;
    let _e11: Plane = self_1211;
    let _e14: Plane = other_1085;
    let _e19: Plane = self_1211;
    let _e22: Plane = other_1085;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_anti_scalar_product(self_1212: Plane, other_1086: Plane) -> AntiScalar {
    var self_1213: Plane;
    var other_1087: Plane;

    self_1213 = self_1212;
    other_1087 = other_1086;
    let _e4: Plane = self_1213;
    let _e7: Plane = other_1087;
    let _e11: Plane = self_1213;
    let _e14: Plane = other_1087;
    let _e19: Plane = self_1213;
    let _e22: Plane = other_1087;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_sphere_add(self_1214: Plane, other_1088: Sphere) -> Sphere {
    var self_1215: Plane;
    var other_1089: Sphere;

    self_1215 = self_1214;
    other_1089 = other_1088;
    let _e4: Plane = self_1215;
    let _e7: Plane = self_1215;
    let _e15: Sphere = other_1089;
    let _e18: Plane = self_1215;
    let _e21: Plane = self_1215;
    let _e24: Plane = self_1215;
    let _e28: Sphere = other_1089;
    return Sphere(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), (vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z) + _e28.g1_));
}

fn plane_sphere_sub(self_1216: Plane, other_1090: Sphere) -> Sphere {
    var self_1217: Plane;
    var other_1091: Sphere;

    self_1217 = self_1216;
    other_1091 = other_1090;
    let _e4: Plane = self_1217;
    let _e7: Plane = self_1217;
    let _e15: Sphere = other_1091;
    let _e18: Plane = self_1217;
    let _e21: Plane = self_1217;
    let _e24: Plane = self_1217;
    let _e28: Sphere = other_1091;
    return Sphere(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z) - _e28.g1_));
}

fn plane_sphere_regressive_product(self_1218: Plane, other_1092: Sphere) -> Circle {
    var self_1219: Plane;
    var other_1093: Sphere;

    self_1219 = self_1218;
    other_1093 = other_1092;
    let _e4: Plane = self_1219;
    let _e6: Sphere = other_1093;
    let _e15: Plane = self_1219;
    let _e19: Sphere = other_1093;
    let _e29: Plane = self_1219;
    let _e33: Sphere = other_1093;
    let _e44: Plane = self_1219;
    let _e48: Sphere = other_1093;
    let _e61: Plane = self_1219;
    let _e65: Sphere = other_1093;
    let _e69: Plane = self_1219;
    let _e72: Plane = self_1219;
    let _e75: Plane = self_1219;
    let _e79: Sphere = other_1093;
    return Circle(((_e4.g0_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(-(1.0))), ((((vec3<f32>(_e15.g0_.y) * _e19.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e29.g0_.z) * _e33.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e44.g0_.x) * _e48.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e61.g0_.w) * _e65.g1_)) + (vec3<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z) * vec3<f32>(_e79.g0_.y))));
}

fn plane_sphere_inner_anti_product(self_1220: Plane, other_1094: Sphere) -> AntiScalar {
    var self_1221: Plane;
    var other_1095: Sphere;

    self_1221 = self_1220;
    other_1095 = other_1094;
    let _e4: Plane = self_1221;
    let _e7: Sphere = other_1095;
    let _e11: Plane = self_1221;
    let _e14: Sphere = other_1095;
    let _e19: Plane = self_1221;
    let _e22: Sphere = other_1095;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_sphere_left_anti_contraction(self_1222: Plane, other_1096: Sphere) -> AntiScalar {
    var self_1223: Plane;
    var other_1097: Sphere;

    self_1223 = self_1222;
    other_1097 = other_1096;
    let _e4: Plane = self_1223;
    let _e7: Sphere = other_1097;
    let _e11: Plane = self_1223;
    let _e14: Sphere = other_1097;
    let _e19: Plane = self_1223;
    let _e22: Sphere = other_1097;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_sphere_right_anti_contraction(self_1224: Plane, other_1098: Sphere) -> AntiScalar {
    var self_1225: Plane;
    var other_1099: Sphere;

    self_1225 = self_1224;
    other_1099 = other_1098;
    let _e4: Plane = self_1225;
    let _e7: Sphere = other_1099;
    let _e11: Plane = self_1225;
    let _e14: Sphere = other_1099;
    let _e19: Plane = self_1225;
    let _e22: Sphere = other_1099;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_sphere_anti_scalar_product(self_1226: Plane, other_1100: Sphere) -> AntiScalar {
    var self_1227: Plane;
    var other_1101: Sphere;

    self_1227 = self_1226;
    other_1101 = other_1100;
    let _e4: Plane = self_1227;
    let _e7: Sphere = other_1101;
    let _e11: Plane = self_1227;
    let _e14: Sphere = other_1101;
    let _e19: Plane = self_1227;
    let _e22: Sphere = other_1101;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_motor_regressive_product(self_1228: Plane, other_1102: Motor) -> Flector {
    var self_1229: Plane;
    var other_1103: Motor;

    self_1229 = self_1228;
    other_1103 = other_1102;
    let _e4: Plane = self_1229;
    let _e8: Motor = other_1103;
    let _e11: Motor = other_1103;
    let _e14: Motor = other_1103;
    let _e17: Motor = other_1103;
    let _e30: Plane = self_1229;
    let _e34: Motor = other_1103;
    let _e37: Motor = other_1103;
    let _e40: Motor = other_1103;
    let _e43: Motor = other_1103;
    let _e57: Plane = self_1229;
    let _e61: Motor = other_1103;
    let _e72: Plane = self_1229;
    let _e76: Motor = other_1103;
    let _e79: Motor = other_1103;
    let _e82: Motor = other_1103;
    let _e85: Motor = other_1103;
    let _e99: Plane = self_1229;
    let _e101: Motor = other_1103;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * _e61.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e72.g0_.x) * vec4<f32>(_e76.g1_.x, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (_e99.g0_ * vec4<f32>(_e101.g0_.w)));
}

fn plane_motor_geometric_anti_product(self_1230: Plane, other_1104: Motor) -> Flector {
    var self_1231: Plane;
    var other_1105: Motor;

    self_1231 = self_1230;
    other_1105 = other_1104;
    let _e4: Plane = self_1231;
    let _e8: Motor = other_1105;
    let _e11: Motor = other_1105;
    let _e14: Motor = other_1105;
    let _e17: Motor = other_1105;
    let _e31: Plane = self_1231;
    let _e35: Motor = other_1105;
    let _e38: Motor = other_1105;
    let _e41: Motor = other_1105;
    let _e44: Motor = other_1105;
    let _e59: Plane = self_1231;
    let _e63: Motor = other_1105;
    let _e66: Motor = other_1105;
    let _e69: Motor = other_1105;
    let _e72: Motor = other_1105;
    let _e87: Plane = self_1231;
    let _e90: Motor = other_1105;
    let _e101: Plane = self_1231;
    let _e105: Motor = other_1105;
    let _e108: Motor = other_1105;
    let _e111: Motor = other_1105;
    let _e114: Motor = other_1105;
    let _e126: Plane = self_1231;
    let _e130: Motor = other_1105;
    let _e133: Motor = other_1105;
    let _e136: Motor = other_1105;
    let _e139: Motor = other_1105;
    let _e152: Plane = self_1231;
    let _e156: Motor = other_1105;
    let _e159: Motor = other_1105;
    let _e162: Motor = other_1105;
    let _e165: Motor = other_1105;
    let _e178: Plane = self_1231;
    let _e181: Motor = other_1105;
    return Flector((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e31.g0_.y) * vec4<f32>(_e35.g1_.z, _e38.g1_.w, _e41.g1_.x, _e44.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e59.g0_.z) * vec4<f32>(_e63.g1_.y, _e66.g1_.x, _e69.g1_.w, _e72.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((_e87.g0_.wwwx * _e90.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e101.g0_.x) * vec4<f32>(_e105.g0_.w, _e108.g0_.z, _e111.g0_.y, _e114.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e126.g0_.y) * vec4<f32>(_e130.g0_.z, _e133.g0_.w, _e136.g0_.x, _e139.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e152.g0_.z) * vec4<f32>(_e156.g0_.y, _e159.g0_.x, _e162.g0_.w, _e165.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((_e178.g0_.xxxw * _e181.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_motor_right_anti_contraction(self_1232: Plane, other_1106: Motor) -> Plane {
    var self_1233: Plane;
    var other_1107: Motor;

    self_1233 = self_1232;
    other_1107 = other_1106;
    let _e4: Plane = self_1233;
    let _e6: Motor = other_1107;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_rotor_regressive_product(self_1234: Plane, other_1108: Rotor) -> Flector {
    var self_1235: Plane;
    var other_1109: Rotor;

    self_1235 = self_1234;
    other_1109 = other_1108;
    let _e4: Plane = self_1235;
    let _e8: Rotor = other_1109;
    let _e20: Plane = self_1235;
    let _e24: Rotor = other_1109;
    let _e37: Plane = self_1235;
    let _e40: Rotor = other_1109;
    let _e52: Plane = self_1235;
    let _e54: Rotor = other_1109;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (_e52.g0_ * vec4<f32>(_e54.g0_.w)));
}

fn plane_rotor_geometric_anti_product(self_1236: Plane, other_1110: Rotor) -> Flector {
    var self_1237: Plane;
    var other_1111: Rotor;

    self_1237 = self_1236;
    other_1111 = other_1110;
    let _e4: Plane = self_1237;
    let _e8: Rotor = other_1111;
    let _e20: Plane = self_1237;
    let _e24: Rotor = other_1111;
    let _e37: Plane = self_1237;
    let _e40: Rotor = other_1111;
    let _e52: Plane = self_1237;
    let _e56: Rotor = other_1111;
    let _e67: Plane = self_1237;
    let _e71: Rotor = other_1111;
    let _e83: Plane = self_1237;
    let _e86: Rotor = other_1111;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), ((((vec4<f32>(_e52.g0_.y) * _e56.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e67.g0_.z) * _e71.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e83.g0_.xxxw * _e86.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn plane_rotor_inner_anti_product(self_1238: Plane, other_1112: Rotor) -> Plane {
    var self_1239: Plane;
    var other_1113: Rotor;

    self_1239 = self_1238;
    other_1113 = other_1112;
    let _e4: Plane = self_1239;
    let _e8: Rotor = other_1113;
    let _e19: Plane = self_1239;
    let _e23: Rotor = other_1113;
    let _e35: Plane = self_1239;
    let _e38: Rotor = other_1113;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e35.g0_.xxxw * _e38.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn plane_rotor_right_anti_contraction(self_1240: Plane, other_1114: Rotor) -> Plane {
    var self_1241: Plane;
    var other_1115: Rotor;

    self_1241 = self_1240;
    other_1115 = other_1114;
    let _e4: Plane = self_1241;
    let _e6: Rotor = other_1115;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_translator_inner_anti_product(self_1242: Plane, other_1116: Translator) -> Plane {
    var self_1243: Plane;
    var other_1117: Translator;

    self_1243 = self_1242;
    other_1117 = other_1116;
    let _e4: Plane = self_1243;
    let _e8: Translator = other_1117;
    let _e18: Plane = self_1243;
    let _e22: Translator = other_1117;
    let _e33: Plane = self_1243;
    let _e37: Translator = other_1117;
    let _e49: Plane = self_1243;
    let _e53: Translator = other_1117;
    return Plane((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e33.g0_.w) * vec4<f32>(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn plane_translator_right_anti_contraction(self_1244: Plane, other_1118: Translator) -> Plane {
    var self_1245: Plane;
    var other_1119: Translator;

    self_1245 = self_1244;
    other_1119 = other_1118;
    let _e4: Plane = self_1245;
    let _e6: Translator = other_1119;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_flector_add(self_1246: Plane, other_1120: Flector) -> Flector {
    var self_1247: Plane;
    var other_1121: Flector;

    self_1247 = self_1246;
    other_1121 = other_1120;
    let _e4: Flector = other_1121;
    let _e6: Plane = self_1247;
    let _e8: Flector = other_1121;
    return Flector(_e4.g0_, (_e6.g0_ + _e8.g1_));
}

fn plane_flector_sub(self_1248: Plane, other_1122: Flector) -> Flector {
    var self_1249: Plane;
    var other_1123: Flector;

    self_1249 = self_1248;
    other_1123 = other_1122;
    let _e6: Flector = other_1123;
    let _e9: Plane = self_1249;
    let _e11: Flector = other_1123;
    return Flector((vec4<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_));
}

fn plane_flector_geometric_anti_product(self_1250: Plane, other_1124: Flector) -> Motor {
    var self_1251: Plane;
    var other_1125: Flector;

    self_1251 = self_1250;
    other_1125 = other_1124;
    let _e4: Plane = self_1251;
    let _e8: Flector = other_1125;
    let _e11: Flector = other_1125;
    let _e14: Flector = other_1125;
    let _e17: Flector = other_1125;
    let _e30: Plane = self_1251;
    let _e34: Flector = other_1125;
    let _e37: Flector = other_1125;
    let _e40: Flector = other_1125;
    let _e43: Flector = other_1125;
    let _e57: Plane = self_1251;
    let _e61: Flector = other_1125;
    let _e64: Flector = other_1125;
    let _e67: Flector = other_1125;
    let _e70: Flector = other_1125;
    let _e84: Plane = self_1251;
    let _e88: Flector = other_1125;
    let _e91: Flector = other_1125;
    let _e94: Flector = other_1125;
    let _e97: Flector = other_1125;
    let _e110: Plane = self_1251;
    let _e114: Flector = other_1125;
    let _e117: Flector = other_1125;
    let _e120: Flector = other_1125;
    let _e123: Flector = other_1125;
    let _e137: Plane = self_1251;
    let _e141: Flector = other_1125;
    let _e144: Flector = other_1125;
    let _e147: Flector = other_1125;
    let _e150: Flector = other_1125;
    let _e164: Plane = self_1251;
    let _e168: Flector = other_1125;
    let _e171: Flector = other_1125;
    let _e174: Flector = other_1125;
    let _e177: Flector = other_1125;
    return Motor(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g1_.z, _e14.g1_.y, _e17.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0)) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g0_.w, _e70.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))), (((((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.w, _e91.g0_.z, _e94.g0_.y, _e97.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.y) * vec4<f32>(_e114.g0_.z, _e117.g1_.w, _e120.g0_.x, _e123.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e137.g0_.z) * vec4<f32>(_e141.g0_.y, _e144.g0_.x, _e147.g1_.w, _e150.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) - (vec4<f32>(_e164.g0_.w) * vec4<f32>(_e168.g1_.x, _e171.g1_.y, _e174.g1_.z, _e177.g0_.w))));
}

fn plane_flector_right_anti_contraction(self_1252: Plane, other_1126: Flector) -> AntiScalar {
    var self_1253: Plane;
    var other_1127: Flector;

    self_1253 = self_1252;
    other_1127 = other_1126;
    let _e4: Plane = self_1253;
    let _e7: Flector = other_1127;
    let _e11: Plane = self_1253;
    let _e14: Flector = other_1127;
    let _e19: Plane = self_1253;
    let _e22: Flector = other_1127;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_flector_anti_scalar_product(self_1254: Plane, other_1128: Flector) -> AntiScalar {
    var self_1255: Plane;
    var other_1129: Flector;

    self_1255 = self_1254;
    other_1129 = other_1128;
    let _e4: Plane = self_1255;
    let _e7: Flector = other_1129;
    let _e11: Plane = self_1255;
    let _e14: Flector = other_1129;
    let _e19: Plane = self_1255;
    let _e22: Flector = other_1129;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_dilation_inner_anti_product(self_1256: Plane, other_1130: Dilation) -> Sphere {
    var self_1257: Plane;
    var other_1131: Dilation;

    self_1257 = self_1256;
    other_1131 = other_1130;
    let _e4: Plane = self_1257;
    let _e8: Dilation = other_1131;
    let _e17: Plane = self_1257;
    let _e21: Dilation = other_1131;
    let _e31: Plane = self_1257;
    let _e34: Plane = self_1257;
    let _e38: Dilation = other_1131;
    let _e42: Plane = self_1257;
    let _e45: Plane = self_1257;
    let _e48: Plane = self_1257;
    let _e52: Dilation = other_1131;
    return Sphere(((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g0_.y)) * vec2<f32>(1.0, 0.0))) + (vec2<f32>(_e31.g0_.x, _e34.g0_.w) * _e38.g1_)), (vec3<f32>(_e42.g0_.x, _e45.g0_.y, _e48.g0_.z) * vec3<f32>(_e52.g1_.y)));
}

fn plane_dilation_right_anti_contraction(self_1258: Plane, other_1132: Dilation) -> Plane {
    var self_1259: Plane;
    var other_1133: Dilation;

    self_1259 = self_1258;
    other_1133 = other_1132;
    let _e4: Plane = self_1259;
    let _e6: Dilation = other_1133;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g1_.y)));
}

fn plane_multi_vector_add(self_1260: Plane, other_1134: MultiVector) -> MultiVector {
    var self_1261: Plane;
    var other_1135: MultiVector;

    self_1261 = self_1260;
    other_1135 = other_1134;
    let _e4: MultiVector = other_1135;
    let _e6: MultiVector = other_1135;
    let _e8: MultiVector = other_1135;
    let _e10: MultiVector = other_1135;
    let _e12: MultiVector = other_1135;
    let _e14: MultiVector = other_1135;
    let _e16: MultiVector = other_1135;
    let _e18: MultiVector = other_1135;
    let _e20: MultiVector = other_1135;
    let _e22: Plane = self_1261;
    let _e24: MultiVector = other_1135;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, _e16.g6_, _e18.g7_, _e20.g8_, (_e22.g0_ + _e24.g9_));
}

fn plane_multi_vector_sub(self_1262: Plane, other_1136: MultiVector) -> MultiVector {
    var self_1263: Plane;
    var other_1137: MultiVector;

    self_1263 = self_1262;
    other_1137 = other_1136;
    let _e6: MultiVector = other_1137;
    let _e11: MultiVector = other_1137;
    let _e16: MultiVector = other_1137;
    let _e21: MultiVector = other_1137;
    let _e26: MultiVector = other_1137;
    let _e31: MultiVector = other_1137;
    let _e36: MultiVector = other_1137;
    let _e41: MultiVector = other_1137;
    let _e46: MultiVector = other_1137;
    let _e49: Plane = self_1263;
    let _e51: MultiVector = other_1137;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (vec4<f32>(0.0) - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (vec3<f32>(0.0) - _e36.g6_), (vec3<f32>(0.0) - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (_e49.g0_ - _e51.g9_));
}

fn plane_multi_vector_geometric_anti_product(self_1264: Plane, other_1138: MultiVector) -> MultiVector {
    var self_1265: Plane;
    var other_1139: MultiVector;

    self_1265 = self_1264;
    other_1139 = other_1138;
    let _e4: Plane = self_1265;
    let _e8: MultiVector = other_1139;
    let _e11: MultiVector = other_1139;
    let _e14: MultiVector = other_1139;
    let _e25: Plane = self_1265;
    let _e29: MultiVector = other_1139;
    let _e32: MultiVector = other_1139;
    let _e35: MultiVector = other_1139;
    let _e47: Plane = self_1265;
    let _e51: MultiVector = other_1139;
    let _e54: MultiVector = other_1139;
    let _e57: MultiVector = other_1139;
    let _e69: Plane = self_1265;
    let _e72: Plane = self_1265;
    let _e75: Plane = self_1265;
    let _e79: MultiVector = other_1139;
    let _e90: Plane = self_1265;
    let _e94: MultiVector = other_1139;
    let _e97: MultiVector = other_1139;
    let _e100: MultiVector = other_1139;
    let _e111: Plane = self_1265;
    let _e115: MultiVector = other_1139;
    let _e118: MultiVector = other_1139;
    let _e121: MultiVector = other_1139;
    let _e133: Plane = self_1265;
    let _e137: MultiVector = other_1139;
    let _e140: MultiVector = other_1139;
    let _e143: MultiVector = other_1139;
    let _e155: Plane = self_1265;
    let _e159: MultiVector = other_1139;
    let _e163: Plane = self_1265;
    let _e167: MultiVector = other_1139;
    let _e170: MultiVector = other_1139;
    let _e180: Plane = self_1265;
    let _e184: MultiVector = other_1139;
    let _e187: MultiVector = other_1139;
    let _e198: Plane = self_1265;
    let _e202: MultiVector = other_1139;
    let _e205: MultiVector = other_1139;
    let _e216: Plane = self_1265;
    let _e219: Plane = self_1265;
    let _e223: MultiVector = other_1139;
    let _e226: MultiVector = other_1139;
    let _e237: Plane = self_1265;
    let _e241: MultiVector = other_1139;
    let _e244: MultiVector = other_1139;
    let _e247: MultiVector = other_1139;
    let _e250: MultiVector = other_1139;
    let _e264: Plane = self_1265;
    let _e268: MultiVector = other_1139;
    let _e271: MultiVector = other_1139;
    let _e274: MultiVector = other_1139;
    let _e277: MultiVector = other_1139;
    let _e292: Plane = self_1265;
    let _e296: MultiVector = other_1139;
    let _e299: MultiVector = other_1139;
    let _e302: MultiVector = other_1139;
    let _e305: MultiVector = other_1139;
    let _e320: Plane = self_1265;
    let _e323: MultiVector = other_1139;
    let _e326: MultiVector = other_1139;
    let _e329: MultiVector = other_1139;
    let _e332: MultiVector = other_1139;
    let _e344: Plane = self_1265;
    let _e348: MultiVector = other_1139;
    let _e351: MultiVector = other_1139;
    let _e354: MultiVector = other_1139;
    let _e365: Plane = self_1265;
    let _e369: MultiVector = other_1139;
    let _e372: MultiVector = other_1139;
    let _e375: MultiVector = other_1139;
    let _e387: Plane = self_1265;
    let _e391: MultiVector = other_1139;
    let _e394: MultiVector = other_1139;
    let _e397: MultiVector = other_1139;
    let _e409: Plane = self_1265;
    let _e413: MultiVector = other_1139;
    let _e416: MultiVector = other_1139;
    let _e419: MultiVector = other_1139;
    let _e431: Plane = self_1265;
    let _e435: MultiVector = other_1139;
    let _e438: MultiVector = other_1139;
    let _e441: MultiVector = other_1139;
    let _e454: Plane = self_1265;
    let _e458: MultiVector = other_1139;
    let _e461: MultiVector = other_1139;
    let _e464: MultiVector = other_1139;
    let _e477: Plane = self_1265;
    let _e481: MultiVector = other_1139;
    let _e484: MultiVector = other_1139;
    let _e487: MultiVector = other_1139;
    let _e493: Plane = self_1265;
    let _e497: MultiVector = other_1139;
    let _e500: MultiVector = other_1139;
    let _e503: MultiVector = other_1139;
    let _e515: Plane = self_1265;
    let _e519: MultiVector = other_1139;
    let _e522: MultiVector = other_1139;
    let _e525: MultiVector = other_1139;
    let _e538: Plane = self_1265;
    let _e542: MultiVector = other_1139;
    let _e545: MultiVector = other_1139;
    let _e548: MultiVector = other_1139;
    let _e561: Plane = self_1265;
    let _e565: MultiVector = other_1139;
    let _e568: MultiVector = other_1139;
    let _e571: MultiVector = other_1139;
    let _e582: Plane = self_1265;
    let _e586: MultiVector = other_1139;
    let _e589: MultiVector = other_1139;
    let _e592: MultiVector = other_1139;
    let _e604: Plane = self_1265;
    let _e608: MultiVector = other_1139;
    let _e611: MultiVector = other_1139;
    let _e614: MultiVector = other_1139;
    let _e626: Plane = self_1265;
    let _e630: MultiVector = other_1139;
    let _e633: MultiVector = other_1139;
    let _e636: MultiVector = other_1139;
    let _e642: Plane = self_1265;
    let _e646: MultiVector = other_1139;
    let _e649: MultiVector = other_1139;
    let _e652: MultiVector = other_1139;
    let _e655: MultiVector = other_1139;
    let _e669: Plane = self_1265;
    let _e673: MultiVector = other_1139;
    let _e676: MultiVector = other_1139;
    let _e679: MultiVector = other_1139;
    let _e682: MultiVector = other_1139;
    let _e697: Plane = self_1265;
    let _e701: MultiVector = other_1139;
    let _e704: MultiVector = other_1139;
    let _e707: MultiVector = other_1139;
    let _e710: MultiVector = other_1139;
    let _e725: Plane = self_1265;
    let _e728: MultiVector = other_1139;
    let _e731: MultiVector = other_1139;
    let _e734: MultiVector = other_1139;
    let _e737: MultiVector = other_1139;
    let _e750: Plane = self_1265;
    let _e754: MultiVector = other_1139;
    let _e757: MultiVector = other_1139;
    let _e760: MultiVector = other_1139;
    let _e763: MultiVector = other_1139;
    let _e775: Plane = self_1265;
    let _e779: MultiVector = other_1139;
    let _e782: MultiVector = other_1139;
    let _e785: MultiVector = other_1139;
    let _e788: MultiVector = other_1139;
    let _e801: Plane = self_1265;
    let _e805: MultiVector = other_1139;
    let _e808: MultiVector = other_1139;
    let _e811: MultiVector = other_1139;
    let _e814: MultiVector = other_1139;
    let _e827: Plane = self_1265;
    let _e830: MultiVector = other_1139;
    let _e833: MultiVector = other_1139;
    let _e836: MultiVector = other_1139;
    let _e839: MultiVector = other_1139;
    return MultiVector((((((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g1_.x, _e11.g8_.x, _e14.g9_.x)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e25.g0_.y) * vec3<f32>(_e29.g1_.y, _e32.g8_.y, _e35.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e47.g0_.z) * vec3<f32>(_e51.g1_.z, _e54.g8_.z, _e57.g9_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e69.g0_.w, _e72.g0_.x, _e75.g0_.x) * vec3<f32>(_e79.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))), (((((vec3<f32>(_e90.g0_.x) * vec3<f32>(_e94.g0_.x, _e97.g5_.z, _e100.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e111.g0_.y) * vec3<f32>(_e115.g5_.z, _e118.g0_.x, _e121.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e133.g0_.z) * vec3<f32>(_e137.g5_.y, _e140.g5_.x, _e143.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e155.g0_.w) * _e159.g4_)), (((((vec2<f32>(_e163.g0_.x) * vec2<f32>(_e167.g4_.x, _e170.g3_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e180.g0_.y) * vec2<f32>(_e184.g4_.y, _e187.g3_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e198.g0_.z) * vec2<f32>(_e202.g4_.z, _e205.g3_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e216.g0_.x, _e219.g0_.w) * vec2<f32>(_e223.g3_.x, _e226.g3_.w)) * vec2<f32>(0.0, -(1.0)))), (((((vec4<f32>(_e237.g0_.x) * vec4<f32>(_e241.g2_.y, _e244.g7_.z, _e247.g7_.y, _e250.g6_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e264.g0_.y) * vec4<f32>(_e268.g7_.z, _e271.g2_.y, _e274.g7_.x, _e277.g6_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e292.g0_.z) * vec4<f32>(_e296.g7_.y, _e299.g7_.x, _e302.g2_.y, _e305.g6_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((_e320.g0_.wwwx * vec4<f32>(_e323.g6_.x, _e326.g6_.y, _e329.g6_.z, _e332.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(_e344.g0_.x) * vec3<f32>(_e348.g2_.x, _e351.g8_.z, _e354.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e365.g0_.y) * vec3<f32>(_e369.g8_.z, _e372.g2_.x, _e375.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e387.g0_.z) * vec3<f32>(_e391.g8_.y, _e394.g8_.x, _e397.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((vec3<f32>(_e409.g0_.x) * vec3<f32>(_e413.g8_.w, _e416.g1_.z, _e419.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e431.g0_.y) * vec3<f32>(_e435.g1_.z, _e438.g8_.w, _e441.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e454.g0_.z) * vec3<f32>(_e458.g1_.y, _e461.g1_.x, _e464.g8_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e477.g0_.w) * vec3<f32>(_e481.g8_.x, _e484.g8_.y, _e487.g8_.z))), ((((vec3<f32>(_e493.g0_.x) * vec3<f32>(_e497.g3_.w, _e500.g9_.z, _e503.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e515.g0_.y) * vec3<f32>(_e519.g9_.z, _e522.g3_.w, _e525.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e538.g0_.z) * vec3<f32>(_e542.g9_.y, _e545.g9_.x, _e548.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((vec3<f32>(_e561.g0_.x) * vec3<f32>(_e565.g9_.w, _e568.g3_.z, _e571.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e582.g0_.y) * vec3<f32>(_e586.g3_.z, _e589.g9_.w, _e592.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e604.g0_.z) * vec3<f32>(_e608.g3_.y, _e611.g3_.x, _e614.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e626.g0_.w) * vec3<f32>(_e630.g9_.x, _e633.g9_.y, _e636.g9_.z))), (((((vec4<f32>(_e642.g0_.x) * vec4<f32>(_e646.g0_.y, _e649.g4_.z, _e652.g4_.y, _e655.g5_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e669.g0_.y) * vec4<f32>(_e673.g4_.z, _e676.g0_.y, _e679.g4_.x, _e682.g5_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e697.g0_.z) * vec4<f32>(_e701.g4_.y, _e704.g4_.x, _e707.g0_.y, _e710.g5_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((_e725.g0_.xxxw * vec4<f32>(_e728.g0_.x, _e731.g0_.x, _e734.g0_.x, _e737.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e750.g0_.x) * vec4<f32>(_e754.g0_.z, _e757.g6_.z, _e760.g6_.y, _e763.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e775.g0_.y) * vec4<f32>(_e779.g6_.z, _e782.g0_.z, _e785.g6_.x, _e788.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e801.g0_.z) * vec4<f32>(_e805.g6_.y, _e808.g6_.x, _e811.g0_.z, _e814.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((_e827.g0_.xxxw * vec4<f32>(_e830.g0_.x, _e833.g0_.x, _e836.g0_.x, _e839.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_multi_vector_anti_scalar_product(self_1266: Plane, other_1140: MultiVector) -> AntiScalar {
    var self_1267: Plane;
    var other_1141: MultiVector;

    self_1267 = self_1266;
    other_1141 = other_1140;
    let _e4: Plane = self_1267;
    let _e7: MultiVector = other_1141;
    let _e11: Plane = self_1267;
    let _e14: MultiVector = other_1141;
    let _e19: Plane = self_1267;
    let _e22: MultiVector = other_1141;
    return AntiScalar((((_e4.g0_.x * _e7.g9_.x) + (_e11.g0_.y * _e14.g9_.y)) + (_e19.g0_.z * _e22.g9_.z)));
}

fn plane_scale(self_1268: Plane, other_1142: f32) -> Plane {
    var self_1269: Plane;
    var other_1143: f32;

    self_1269 = self_1268;
    other_1143 = other_1142;
    let _e4: Plane = self_1269;
    let _e5: f32 = other_1143;
    let _e7: Plane = plane_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn sphere_zero() -> Sphere {
    return Sphere(vec2<f32>(0.0), vec3<f32>(0.0));
}

fn sphere_one() -> Sphere {
    return Sphere(vec2<f32>(0.0), vec3<f32>(0.0));
}

fn sphere_neg(self_1270: Sphere) -> Sphere {
    var self_1271: Sphere;

    self_1271 = self_1270;
    let _e2: Sphere = self_1271;
    let _e8: Sphere = self_1271;
    return Sphere((_e2.g0_ * vec2<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn sphere_automorphism(self_1272: Sphere) -> Sphere {
    var self_1273: Sphere;

    self_1273 = self_1272;
    let _e2: Sphere = self_1273;
    let _e4: Sphere = self_1273;
    return Sphere(_e2.g0_, _e4.g1_);
}

fn sphere_reversal(self_1274: Sphere) -> Sphere {
    var self_1275: Sphere;

    self_1275 = self_1274;
    let _e2: Sphere = self_1275;
    let _e4: Sphere = self_1275;
    return Sphere(_e2.g0_, _e4.g1_);
}

fn sphere_conjugation(self_1276: Sphere) -> Sphere {
    var self_1277: Sphere;

    self_1277 = self_1276;
    let _e2: Sphere = self_1277;
    let _e4: Sphere = self_1277;
    return Sphere(_e2.g0_, _e4.g1_);
}

fn sphere_dual(self_1278: Sphere) -> RadialPoint {
    var self_1279: Sphere;

    self_1279 = self_1278;
    let _e2: Sphere = self_1279;
    let _e4: Sphere = self_1279;
    return RadialPoint(_e2.g1_, _e4.g0_.yx);
}

fn sphere_anti_reversal(self_1280: Sphere) -> Sphere {
    var self_1281: Sphere;

    self_1281 = self_1280;
    let _e2: Sphere = self_1281;
    let _e4: Sphere = self_1281;
    return Sphere(_e2.g0_, _e4.g1_);
}

fn sphere_scalar_geometric_product(self_1282: Sphere, other_1144: Scalar) -> Sphere {
    var self_1283: Sphere;
    var other_1145: Scalar;

    self_1283 = self_1282;
    other_1145 = other_1144;
    let _e4: Sphere = self_1283;
    let _e6: Scalar = other_1145;
    let _e10: Sphere = self_1283;
    let _e12: Scalar = other_1145;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_scalar_outer_product(self_1284: Sphere, other_1146: Scalar) -> Sphere {
    var self_1285: Sphere;
    var other_1147: Scalar;

    self_1285 = self_1284;
    other_1147 = other_1146;
    let _e4: Sphere = self_1285;
    let _e6: Scalar = other_1147;
    let _e10: Sphere = self_1285;
    let _e12: Scalar = other_1147;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_scalar_inner_product(self_1286: Sphere, other_1148: Scalar) -> Sphere {
    var self_1287: Sphere;
    var other_1149: Scalar;

    self_1287 = self_1286;
    other_1149 = other_1148;
    let _e4: Sphere = self_1287;
    let _e6: Scalar = other_1149;
    let _e10: Sphere = self_1287;
    let _e12: Scalar = other_1149;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_scalar_right_contraction(self_1288: Sphere, other_1150: Scalar) -> Sphere {
    var self_1289: Sphere;
    var other_1151: Scalar;

    self_1289 = self_1288;
    other_1151 = other_1150;
    let _e4: Sphere = self_1289;
    let _e6: Scalar = other_1151;
    let _e10: Sphere = self_1289;
    let _e12: Scalar = other_1151;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_anti_scalar_regressive_product(self_1290: Sphere, other_1152: AntiScalar) -> Sphere {
    var self_1291: Sphere;
    var other_1153: AntiScalar;

    self_1291 = self_1290;
    other_1153 = other_1152;
    let _e4: Sphere = self_1291;
    let _e6: AntiScalar = other_1153;
    let _e10: Sphere = self_1291;
    let _e12: AntiScalar = other_1153;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_anti_scalar_geometric_anti_product(self_1292: Sphere, other_1154: AntiScalar) -> Sphere {
    var self_1293: Sphere;
    var other_1155: AntiScalar;

    self_1293 = self_1292;
    other_1155 = other_1154;
    let _e4: Sphere = self_1293;
    let _e6: AntiScalar = other_1155;
    let _e10: Sphere = self_1293;
    let _e12: AntiScalar = other_1155;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_anti_scalar_inner_anti_product(self_1294: Sphere, other_1156: AntiScalar) -> Sphere {
    var self_1295: Sphere;
    var other_1157: AntiScalar;

    self_1295 = self_1294;
    other_1157 = other_1156;
    let _e4: Sphere = self_1295;
    let _e6: AntiScalar = other_1157;
    let _e10: Sphere = self_1295;
    let _e12: AntiScalar = other_1157;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_anti_scalar_right_anti_contraction(self_1296: Sphere, other_1158: AntiScalar) -> Sphere {
    var self_1297: Sphere;
    var other_1159: AntiScalar;

    self_1297 = self_1296;
    other_1159 = other_1158;
    let _e4: Sphere = self_1297;
    let _e6: AntiScalar = other_1159;
    let _e10: Sphere = self_1297;
    let _e12: AntiScalar = other_1159;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn sphere_radial_point_regressive_product(self_1298: Sphere, other_1160: RadialPoint) -> Scalar {
    var self_1299: Sphere;
    var other_1161: RadialPoint;

    self_1299 = self_1298;
    other_1161 = other_1160;
    let _e4: Sphere = self_1299;
    let _e7: RadialPoint = other_1161;
    let _e11: Sphere = self_1299;
    let _e14: RadialPoint = other_1161;
    let _e19: Sphere = self_1299;
    let _e22: RadialPoint = other_1161;
    let _e27: Sphere = self_1299;
    let _e30: RadialPoint = other_1161;
    let _e35: Sphere = self_1299;
    let _e38: RadialPoint = other_1161;
    return Scalar((((((_e4.g0_.x * _e7.g1_.y) + (_e11.g0_.y * _e14.g1_.x)) + (_e19.g1_.x * _e22.g0_.x)) + (_e27.g1_.y * _e30.g0_.y)) + (_e35.g1_.z * _e38.g0_.z)));
}

fn sphere_radial_point_outer_product(self_1300: Sphere, other_1162: RadialPoint) -> AntiScalar {
    var self_1301: Sphere;
    var other_1163: RadialPoint;

    self_1301 = self_1300;
    other_1163 = other_1162;
    let _e4: Sphere = self_1301;
    let _e7: RadialPoint = other_1163;
    let _e11: Sphere = self_1301;
    let _e14: RadialPoint = other_1163;
    let _e19: Sphere = self_1301;
    let _e22: RadialPoint = other_1163;
    let _e27: Sphere = self_1301;
    let _e30: RadialPoint = other_1163;
    let _e35: Sphere = self_1301;
    let _e38: RadialPoint = other_1163;
    return AntiScalar((((((_e4.g0_.x * _e7.g1_.y) + (_e11.g0_.y * _e14.g1_.x)) + (_e19.g1_.x * _e22.g0_.x)) + (_e27.g1_.y * _e30.g0_.y)) + (_e35.g1_.z * _e38.g0_.z)));
}

fn sphere_flat_point_regressive_product(self_1302: Sphere, other_1164: FlatPoint) -> RadialPoint {
    var self_1303: Sphere;
    var other_1165: FlatPoint;

    self_1303 = self_1302;
    other_1165 = other_1164;
    let _e4: Sphere = self_1303;
    let _e8: FlatPoint = other_1165;
    let _e11: FlatPoint = other_1165;
    let _e14: FlatPoint = other_1165;
    let _e19: Sphere = self_1303;
    let _e23: FlatPoint = other_1165;
    let _e33: Sphere = self_1303;
    let _e37: FlatPoint = other_1165;
    let _e48: Sphere = self_1303;
    let _e52: FlatPoint = other_1165;
    let _e63: Sphere = self_1303;
    let _e65: FlatPoint = other_1165;
    return RadialPoint((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)), (((((vec2<f32>(_e19.g1_.x) * vec2<f32>(_e23.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e33.g1_.y) * vec2<f32>(_e37.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g1_.z) * vec2<f32>(_e52.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((_e63.g0_ * vec2<f32>(_e65.g0_.w)) * vec2<f32>(1.0, -(1.0)))));
}

fn sphere_flat_point_inner_anti_product(self_1304: Sphere, other_1166: FlatPoint) -> Line {
    var self_1305: Sphere;
    var other_1167: FlatPoint;

    self_1305 = self_1304;
    other_1167 = other_1166;
    let _e4: Sphere = self_1305;
    let _e6: FlatPoint = other_1167;
    let _e15: Sphere = self_1305;
    let _e19: FlatPoint = other_1167;
    let _e22: FlatPoint = other_1167;
    let _e25: FlatPoint = other_1167;
    let _e36: Sphere = self_1305;
    let _e40: FlatPoint = other_1167;
    let _e43: FlatPoint = other_1167;
    let _e46: FlatPoint = other_1167;
    let _e58: Sphere = self_1305;
    let _e62: FlatPoint = other_1167;
    let _e65: FlatPoint = other_1167;
    let _e68: FlatPoint = other_1167;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e15.g1_.y) * vec3<f32>(_e19.g0_.z, _e22.g0_.z, _e25.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e36.g1_.z) * vec3<f32>(_e40.g0_.y, _e43.g0_.x, _e46.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e58.g1_.x) * vec3<f32>(_e62.g0_.x, _e65.g0_.z, _e68.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_flat_point_left_anti_contraction(self_1306: Sphere, other_1168: FlatPoint) -> Line {
    var self_1307: Sphere;
    var other_1169: FlatPoint;

    self_1307 = self_1306;
    other_1169 = other_1168;
    let _e4: Sphere = self_1307;
    let _e6: FlatPoint = other_1169;
    let _e15: Sphere = self_1307;
    let _e19: FlatPoint = other_1169;
    let _e22: FlatPoint = other_1169;
    let _e25: FlatPoint = other_1169;
    let _e36: Sphere = self_1307;
    let _e40: FlatPoint = other_1169;
    let _e43: FlatPoint = other_1169;
    let _e46: FlatPoint = other_1169;
    let _e58: Sphere = self_1307;
    let _e62: FlatPoint = other_1169;
    let _e65: FlatPoint = other_1169;
    let _e68: FlatPoint = other_1169;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e15.g1_.y) * vec3<f32>(_e19.g0_.z, _e22.g0_.z, _e25.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e36.g1_.z) * vec3<f32>(_e40.g0_.y, _e43.g0_.x, _e46.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e58.g1_.x) * vec3<f32>(_e62.g0_.x, _e65.g0_.z, _e68.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_dipole_regressive_product(self_1308: Sphere, other_1170: Dipole) -> RadialPoint {
    var self_1309: Sphere;
    var other_1171: Dipole;

    self_1309 = self_1308;
    other_1171 = other_1170;
    let _e4: Sphere = self_1309;
    let _e8: Dipole = other_1171;
    let _e11: Dipole = other_1171;
    let _e14: Dipole = other_1171;
    let _e19: Sphere = self_1309;
    let _e23: Dipole = other_1171;
    let _e27: Sphere = self_1309;
    let _e31: Dipole = other_1171;
    let _e42: Sphere = self_1309;
    let _e46: Dipole = other_1171;
    let _e57: Sphere = self_1309;
    let _e61: Dipole = other_1171;
    let _e72: Sphere = self_1309;
    let _e76: Dipole = other_1171;
    let _e79: Dipole = other_1171;
    let _e89: Sphere = self_1309;
    let _e93: Dipole = other_1171;
    let _e96: Dipole = other_1171;
    let _e107: Sphere = self_1309;
    let _e111: Dipole = other_1171;
    let _e114: Dipole = other_1171;
    let _e125: Sphere = self_1309;
    let _e127: Dipole = other_1171;
    return RadialPoint((((((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g2_.x, _e11.g2_.y, _e14.g2_.z)) - (vec3<f32>(_e19.g0_.y) * _e23.g0_)) + ((vec3<f32>(_e27.g1_.y) * _e31.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e42.g1_.z) * _e46.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e57.g1_.x) * _e61.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((vec2<f32>(_e72.g1_.x) * vec2<f32>(_e76.g0_.x, _e79.g2_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e89.g1_.y) * vec2<f32>(_e93.g0_.y, _e96.g2_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e107.g1_.z) * vec2<f32>(_e111.g0_.z, _e114.g2_.z)) * vec2<f32>(1.0, -(1.0)))) + ((_e125.g0_ * vec2<f32>(_e127.g2_.w)) * vec2<f32>(1.0, -(1.0)))));
}

fn sphere_dipole_inner_anti_product(self_1310: Sphere, other_1172: Dipole) -> Circle {
    var self_1311: Sphere;
    var other_1173: Dipole;

    self_1311 = self_1310;
    other_1173 = other_1172;
    let _e4: Sphere = self_1311;
    let _e8: Dipole = other_1173;
    let _e11: Dipole = other_1173;
    let _e14: Dipole = other_1173;
    let _e17: Dipole = other_1173;
    let _e30: Sphere = self_1311;
    let _e34: Dipole = other_1173;
    let _e37: Dipole = other_1173;
    let _e40: Dipole = other_1173;
    let _e43: Dipole = other_1173;
    let _e57: Sphere = self_1311;
    let _e61: Dipole = other_1173;
    let _e64: Dipole = other_1173;
    let _e67: Dipole = other_1173;
    let _e70: Dipole = other_1173;
    let _e84: Sphere = self_1311;
    let _e86: Dipole = other_1173;
    let _e95: Sphere = self_1311;
    let _e99: Dipole = other_1173;
    let _e102: Dipole = other_1173;
    let _e105: Dipole = other_1173;
    let _e116: Sphere = self_1311;
    let _e120: Dipole = other_1173;
    let _e123: Dipole = other_1173;
    let _e126: Dipole = other_1173;
    let _e138: Sphere = self_1311;
    let _e142: Dipole = other_1173;
    let _e145: Dipole = other_1173;
    let _e148: Dipole = other_1173;
    return Circle(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((_e84.g1_ * vec3<f32>(_e86.g2_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e95.g1_.y) * vec3<f32>(_e99.g2_.z, _e102.g2_.z, _e105.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e116.g1_.z) * vec3<f32>(_e120.g2_.y, _e123.g2_.x, _e126.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e138.g1_.x) * vec3<f32>(_e142.g2_.x, _e145.g2_.z, _e148.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_dipole_left_anti_contraction(self_1312: Sphere, other_1174: Dipole) -> Circle {
    var self_1313: Sphere;
    var other_1175: Dipole;

    self_1313 = self_1312;
    other_1175 = other_1174;
    let _e4: Sphere = self_1313;
    let _e8: Dipole = other_1175;
    let _e11: Dipole = other_1175;
    let _e14: Dipole = other_1175;
    let _e17: Dipole = other_1175;
    let _e30: Sphere = self_1313;
    let _e34: Dipole = other_1175;
    let _e37: Dipole = other_1175;
    let _e40: Dipole = other_1175;
    let _e43: Dipole = other_1175;
    let _e57: Sphere = self_1313;
    let _e61: Dipole = other_1175;
    let _e64: Dipole = other_1175;
    let _e67: Dipole = other_1175;
    let _e70: Dipole = other_1175;
    let _e84: Sphere = self_1313;
    let _e86: Dipole = other_1175;
    let _e95: Sphere = self_1313;
    let _e99: Dipole = other_1175;
    let _e102: Dipole = other_1175;
    let _e105: Dipole = other_1175;
    let _e116: Sphere = self_1313;
    let _e120: Dipole = other_1175;
    let _e123: Dipole = other_1175;
    let _e126: Dipole = other_1175;
    let _e138: Sphere = self_1313;
    let _e142: Dipole = other_1175;
    let _e145: Dipole = other_1175;
    let _e148: Dipole = other_1175;
    return Circle(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((_e84.g1_ * vec3<f32>(_e86.g2_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e95.g1_.y) * vec3<f32>(_e99.g2_.z, _e102.g2_.z, _e105.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e116.g1_.z) * vec3<f32>(_e120.g2_.y, _e123.g2_.x, _e126.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e138.g1_.x) * vec3<f32>(_e142.g2_.x, _e145.g2_.z, _e148.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_line_regressive_product(self_1314: Sphere, other_1176: Line) -> Dipole {
    var self_1315: Sphere;
    var other_1177: Line;

    self_1315 = self_1314;
    other_1177 = other_1176;
    let _e4: Sphere = self_1315;
    let _e8: Line = other_1177;
    let _e11: Sphere = self_1315;
    let _e15: Line = other_1177;
    let _e18: Sphere = self_1315;
    let _e22: Line = other_1177;
    let _e25: Line = other_1177;
    let _e28: Line = other_1177;
    let _e31: Line = other_1177;
    let _e44: Sphere = self_1315;
    let _e48: Line = other_1177;
    let _e51: Line = other_1177;
    let _e54: Line = other_1177;
    let _e57: Line = other_1177;
    let _e71: Sphere = self_1315;
    let _e75: Line = other_1177;
    let _e78: Line = other_1177;
    let _e81: Line = other_1177;
    let _e84: Line = other_1177;
    let _e98: Sphere = self_1315;
    let _e101: Sphere = self_1315;
    let _e104: Sphere = self_1315;
    let _e107: Sphere = self_1315;
    let _e111: Line = other_1177;
    let _e114: Line = other_1177;
    let _e117: Line = other_1177;
    let _e120: Line = other_1177;
    return Dipole((vec3<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_), (((((vec4<f32>(_e18.g1_.x) * vec4<f32>(_e22.g1_.z, _e25.g1_.z, _e28.g1_.y, _e31.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e44.g1_.y) * vec4<f32>(_e48.g1_.z, _e51.g1_.z, _e54.g1_.x, _e57.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e71.g1_.z) * vec4<f32>(_e75.g1_.y, _e78.g1_.x, _e81.g1_.y, _e84.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e98.g0_.y, _e101.g0_.y, _e104.g0_.y, _e107.g0_.x) * vec4<f32>(_e111.g0_.x, _e114.g0_.y, _e117.g0_.z, _e120.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn sphere_line_inner_anti_product(self_1316: Sphere, other_1178: Line) -> Plane {
    var self_1317: Sphere;
    var other_1179: Line;

    self_1317 = self_1316;
    other_1179 = other_1178;
    let _e4: Sphere = self_1317;
    let _e8: Line = other_1179;
    let _e11: Line = other_1179;
    let _e14: Line = other_1179;
    let _e17: Line = other_1179;
    let _e29: Sphere = self_1317;
    let _e33: Line = other_1179;
    let _e36: Line = other_1179;
    let _e39: Line = other_1179;
    let _e42: Line = other_1179;
    let _e55: Sphere = self_1317;
    let _e59: Line = other_1179;
    let _e62: Line = other_1179;
    let _e65: Line = other_1179;
    let _e68: Line = other_1179;
    return Plane(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn sphere_line_left_anti_contraction(self_1318: Sphere, other_1180: Line) -> Plane {
    var self_1319: Sphere;
    var other_1181: Line;

    self_1319 = self_1318;
    other_1181 = other_1180;
    let _e4: Sphere = self_1319;
    let _e8: Line = other_1181;
    let _e11: Line = other_1181;
    let _e14: Line = other_1181;
    let _e17: Line = other_1181;
    let _e29: Sphere = self_1319;
    let _e33: Line = other_1181;
    let _e36: Line = other_1181;
    let _e39: Line = other_1181;
    let _e42: Line = other_1181;
    let _e55: Sphere = self_1319;
    let _e59: Line = other_1181;
    let _e62: Line = other_1181;
    let _e65: Line = other_1181;
    let _e68: Line = other_1181;
    return Plane(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn sphere_circle_regressive_product(self_1320: Sphere, other_1182: Circle) -> Dipole {
    var self_1321: Sphere;
    var other_1183: Circle;

    self_1321 = self_1320;
    other_1183 = other_1182;
    let _e4: Sphere = self_1321;
    let _e8: Circle = other_1183;
    let _e11: Sphere = self_1321;
    let _e15: Circle = other_1183;
    let _e18: Circle = other_1183;
    let _e21: Circle = other_1183;
    let _e33: Sphere = self_1321;
    let _e37: Circle = other_1183;
    let _e40: Circle = other_1183;
    let _e43: Circle = other_1183;
    let _e55: Sphere = self_1321;
    let _e59: Circle = other_1183;
    let _e62: Circle = other_1183;
    let _e65: Circle = other_1183;
    let _e77: Sphere = self_1321;
    let _e81: Circle = other_1183;
    let _e84: Sphere = self_1321;
    let _e88: Circle = other_1183;
    let _e91: Circle = other_1183;
    let _e94: Circle = other_1183;
    let _e100: Sphere = self_1321;
    let _e102: Circle = other_1183;
    let _e112: Sphere = self_1321;
    let _e116: Circle = other_1183;
    let _e119: Circle = other_1183;
    let _e122: Circle = other_1183;
    let _e125: Circle = other_1183;
    let _e138: Sphere = self_1321;
    let _e142: Circle = other_1183;
    let _e145: Circle = other_1183;
    let _e148: Circle = other_1183;
    let _e151: Circle = other_1183;
    let _e165: Sphere = self_1321;
    let _e169: Circle = other_1183;
    let _e172: Circle = other_1183;
    let _e175: Circle = other_1183;
    let _e178: Circle = other_1183;
    let _e192: Sphere = self_1321;
    let _e195: Sphere = self_1321;
    let _e198: Sphere = self_1321;
    let _e201: Sphere = self_1321;
    let _e205: Circle = other_1183;
    let _e208: Circle = other_1183;
    let _e211: Circle = other_1183;
    let _e214: Circle = other_1183;
    return Dipole(((((vec3<f32>(_e4.g0_.x) * _e8.g1_) + ((vec3<f32>(_e11.g1_.y) * vec3<f32>(_e15.g0_.z, _e18.g0_.z, _e21.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g0_.y, _e40.g0_.x, _e43.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e55.g1_.x) * vec3<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((vec3<f32>(_e77.g0_.x) * _e81.g2_) + (vec3<f32>(_e84.g0_.y) * vec3<f32>(_e88.g0_.x, _e91.g0_.y, _e94.g0_.z))) + ((_e100.g1_ * vec3<f32>(_e102.g0_.w)) * vec3<f32>(-(1.0)))), (((((vec4<f32>(_e112.g1_.x) * vec4<f32>(_e116.g2_.z, _e119.g2_.z, _e122.g2_.y, _e125.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e138.g1_.y) * vec4<f32>(_e142.g2_.z, _e145.g2_.z, _e148.g2_.x, _e151.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e165.g1_.z) * vec4<f32>(_e169.g2_.y, _e172.g2_.x, _e175.g2_.y, _e178.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e192.g0_.y, _e195.g0_.y, _e198.g0_.y, _e201.g0_.x) * vec4<f32>(_e205.g1_.x, _e208.g1_.y, _e211.g1_.z, _e214.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn sphere_circle_inner_anti_product(self_1322: Sphere, other_1184: Circle) -> Sphere {
    var self_1323: Sphere;
    var other_1185: Circle;

    self_1323 = self_1322;
    other_1185 = other_1184;
    let _e4: Sphere = self_1323;
    let _e8: Circle = other_1185;
    let _e11: Circle = other_1185;
    let _e21: Sphere = self_1323;
    let _e25: Circle = other_1185;
    let _e28: Circle = other_1185;
    let _e39: Sphere = self_1323;
    let _e43: Circle = other_1185;
    let _e46: Circle = other_1185;
    let _e57: Sphere = self_1323;
    let _e61: Circle = other_1185;
    let _e71: Sphere = self_1323;
    let _e75: Circle = other_1185;
    let _e86: Sphere = self_1323;
    let _e90: Circle = other_1185;
    return Sphere(((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g1_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(-(1.0), 1.0))), ((((vec3<f32>(_e57.g1_.y) * _e61.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e71.g1_.z) * _e75.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e86.g1_.x) * _e90.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_circle_left_anti_contraction(self_1324: Sphere, other_1186: Circle) -> Sphere {
    var self_1325: Sphere;
    var other_1187: Circle;

    self_1325 = self_1324;
    other_1187 = other_1186;
    let _e4: Sphere = self_1325;
    let _e8: Circle = other_1187;
    let _e11: Circle = other_1187;
    let _e21: Sphere = self_1325;
    let _e25: Circle = other_1187;
    let _e28: Circle = other_1187;
    let _e39: Sphere = self_1325;
    let _e43: Circle = other_1187;
    let _e46: Circle = other_1187;
    let _e57: Sphere = self_1325;
    let _e61: Circle = other_1187;
    let _e71: Sphere = self_1325;
    let _e75: Circle = other_1187;
    let _e86: Sphere = self_1325;
    let _e90: Circle = other_1187;
    return Sphere(((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g1_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(-(1.0), 1.0))), ((((vec3<f32>(_e57.g1_.y) * _e61.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e71.g1_.z) * _e75.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e86.g1_.x) * _e90.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn sphere_plane_into(self_1326: Sphere) -> Plane {
    var self_1327: Sphere;

    self_1327 = self_1326;
    let _e2: Sphere = self_1327;
    let _e5: Sphere = self_1327;
    let _e8: Sphere = self_1327;
    let _e11: Sphere = self_1327;
    return Plane(vec4<f32>(_e2.g1_.x, _e5.g1_.y, _e8.g1_.z, _e11.g0_.y));
}

fn sphere_plane_add(self_1328: Sphere, other_1188: Plane) -> Sphere {
    var self_1329: Sphere;
    var other_1189: Plane;

    self_1329 = self_1328;
    other_1189 = other_1188;
    let _e4: Sphere = self_1329;
    let _e6: Plane = other_1189;
    let _e9: Plane = other_1189;
    let _e18: Sphere = self_1329;
    let _e20: Plane = other_1189;
    let _e23: Plane = other_1189;
    let _e26: Plane = other_1189;
    return Sphere((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), (_e18.g1_ + vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z)));
}

fn sphere_plane_sub(self_1330: Sphere, other_1190: Plane) -> Sphere {
    var self_1331: Sphere;
    var other_1191: Plane;

    self_1331 = self_1330;
    other_1191 = other_1190;
    let _e4: Sphere = self_1331;
    let _e6: Plane = other_1191;
    let _e9: Plane = other_1191;
    let _e18: Sphere = self_1331;
    let _e20: Plane = other_1191;
    let _e23: Plane = other_1191;
    let _e26: Plane = other_1191;
    return Sphere((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), (_e18.g1_ - vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z)));
}

fn sphere_plane_regressive_product(self_1332: Sphere, other_1192: Plane) -> Circle {
    var self_1333: Sphere;
    var other_1193: Plane;

    self_1333 = self_1332;
    other_1193 = other_1192;
    let _e4: Sphere = self_1333;
    let _e8: Plane = other_1193;
    let _e11: Sphere = self_1333;
    let _e15: Plane = other_1193;
    let _e18: Plane = other_1193;
    let _e21: Plane = other_1193;
    let _e32: Sphere = self_1333;
    let _e36: Plane = other_1193;
    let _e39: Plane = other_1193;
    let _e42: Plane = other_1193;
    let _e54: Sphere = self_1333;
    let _e58: Plane = other_1193;
    let _e61: Plane = other_1193;
    let _e64: Plane = other_1193;
    let _e78: Sphere = self_1333;
    let _e82: Plane = other_1193;
    let _e85: Plane = other_1193;
    let _e88: Plane = other_1193;
    let _e94: Sphere = self_1333;
    let _e96: Plane = other_1193;
    return Circle((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec3<f32>(_e11.g1_.y) * vec3<f32>(_e15.g0_.z, _e18.g0_.z, _e21.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e32.g1_.z) * vec3<f32>(_e36.g0_.y, _e39.g0_.x, _e42.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e54.g1_.x) * vec3<f32>(_e58.g0_.x, _e61.g0_.z, _e64.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e78.g0_.y) * vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.z))) + (_e94.g1_ * vec3<f32>(_e96.g0_.w))));
}

fn sphere_plane_inner_anti_product(self_1334: Sphere, other_1194: Plane) -> AntiScalar {
    var self_1335: Sphere;
    var other_1195: Plane;

    self_1335 = self_1334;
    other_1195 = other_1194;
    let _e4: Sphere = self_1335;
    let _e7: Plane = other_1195;
    let _e11: Sphere = self_1335;
    let _e14: Plane = other_1195;
    let _e19: Sphere = self_1335;
    let _e22: Plane = other_1195;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn sphere_plane_left_anti_contraction(self_1336: Sphere, other_1196: Plane) -> AntiScalar {
    var self_1337: Sphere;
    var other_1197: Plane;

    self_1337 = self_1336;
    other_1197 = other_1196;
    let _e4: Sphere = self_1337;
    let _e7: Plane = other_1197;
    let _e11: Sphere = self_1337;
    let _e14: Plane = other_1197;
    let _e19: Sphere = self_1337;
    let _e22: Plane = other_1197;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn sphere_plane_right_anti_contraction(self_1338: Sphere, other_1198: Plane) -> AntiScalar {
    var self_1339: Sphere;
    var other_1199: Plane;

    self_1339 = self_1338;
    other_1199 = other_1198;
    let _e4: Sphere = self_1339;
    let _e7: Plane = other_1199;
    let _e11: Sphere = self_1339;
    let _e14: Plane = other_1199;
    let _e19: Sphere = self_1339;
    let _e22: Plane = other_1199;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn sphere_plane_anti_scalar_product(self_1340: Sphere, other_1200: Plane) -> AntiScalar {
    var self_1341: Sphere;
    var other_1201: Plane;

    self_1341 = self_1340;
    other_1201 = other_1200;
    let _e4: Sphere = self_1341;
    let _e7: Plane = other_1201;
    let _e11: Sphere = self_1341;
    let _e14: Plane = other_1201;
    let _e19: Sphere = self_1341;
    let _e22: Plane = other_1201;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn sphere_sphere_add(self_1342: Sphere, other_1202: Sphere) -> Sphere {
    var self_1343: Sphere;
    var other_1203: Sphere;

    self_1343 = self_1342;
    other_1203 = other_1202;
    let _e4: Sphere = self_1343;
    let _e6: Sphere = other_1203;
    let _e9: Sphere = self_1343;
    let _e11: Sphere = other_1203;
    return Sphere((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn sphere_sphere_sub(self_1344: Sphere, other_1204: Sphere) -> Sphere {
    var self_1345: Sphere;
    var other_1205: Sphere;

    self_1345 = self_1344;
    other_1205 = other_1204;
    let _e4: Sphere = self_1345;
    let _e6: Sphere = other_1205;
    let _e9: Sphere = self_1345;
    let _e11: Sphere = other_1205;
    return Sphere((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn sphere_sphere_mul(self_1346: Sphere, other_1206: Sphere) -> Sphere {
    var self_1347: Sphere;
    var other_1207: Sphere;

    self_1347 = self_1346;
    other_1207 = other_1206;
    let _e4: Sphere = self_1347;
    let _e6: Sphere = other_1207;
    let _e9: Sphere = self_1347;
    let _e11: Sphere = other_1207;
    return Sphere((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn sphere_sphere_div(self_1348: Sphere, other_1208: Sphere) -> Sphere {
    var self_1349: Sphere;
    var other_1209: Sphere;

    self_1349 = self_1348;
    other_1209 = other_1208;
    let _e4: Sphere = self_1349;
    let _e7: Sphere = self_1349;
    let _e15: Sphere = other_1209;
    let _e18: Sphere = other_1209;
    let _e27: Sphere = self_1349;
    let _e30: Sphere = self_1349;
    let _e33: Sphere = self_1349;
    let _e42: Sphere = other_1209;
    let _e45: Sphere = other_1209;
    let _e48: Sphere = other_1209;
    return Sphere((((vec2<f32>(_e4.g0_.x, _e7.g0_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e15.g0_.x, _e18.g0_.y)) * vec2<f32>(1.0, 1.0)), (((vec3<f32>(_e27.g1_.x, _e30.g1_.y, _e33.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e42.g1_.x, _e45.g1_.y, _e48.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn sphere_sphere_regressive_product(self_1350: Sphere, other_1210: Sphere) -> Circle {
    var self_1351: Sphere;
    var other_1211: Sphere;

    self_1351 = self_1350;
    other_1211 = other_1210;
    let _e4: Sphere = self_1351;
    let _e8: Sphere = other_1211;
    let _e11: Sphere = other_1211;
    let _e14: Sphere = other_1211;
    let _e17: Sphere = other_1211;
    let _e22: Sphere = self_1351;
    let _e26: Sphere = other_1211;
    let _e39: Sphere = self_1351;
    let _e43: Sphere = other_1211;
    let _e56: Sphere = self_1351;
    let _e60: Sphere = other_1211;
    let _e73: Sphere = self_1351;
    let _e76: Sphere = self_1351;
    let _e79: Sphere = self_1351;
    let _e82: Sphere = self_1351;
    let _e86: Sphere = other_1211;
    let _e99: Sphere = self_1351;
    let _e103: Sphere = other_1211;
    let _e113: Sphere = self_1351;
    let _e117: Sphere = other_1211;
    let _e128: Sphere = self_1351;
    let _e132: Sphere = other_1211;
    let _e145: Sphere = self_1351;
    let _e149: Sphere = other_1211;
    let _e153: Sphere = self_1351;
    let _e155: Sphere = other_1211;
    return Circle((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g1_.y, _e14.g1_.z, _e17.g0_.y)) + ((vec4<f32>(_e22.g1_.x) * vec4<f32>(_e26.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e39.g1_.y) * vec4<f32>(_e43.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e56.g1_.z) * vec4<f32>(_e60.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e73.g0_.x, _e76.g0_.x, _e79.g0_.x, _e82.g0_.y) * vec4<f32>(_e86.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((vec3<f32>(_e99.g1_.y) * _e103.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e113.g1_.z) * _e117.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e128.g1_.x) * _e132.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e145.g0_.y) * _e149.g1_)) + (_e153.g1_ * vec3<f32>(_e155.g0_.y))));
}

fn sphere_sphere_inner_anti_product(self_1352: Sphere, other_1212: Sphere) -> AntiScalar {
    var self_1353: Sphere;
    var other_1213: Sphere;

    self_1353 = self_1352;
    other_1213 = other_1212;
    let _e4: Sphere = self_1353;
    let _e7: Sphere = other_1213;
    let _e11: Sphere = self_1353;
    let _e14: Sphere = other_1213;
    let _e19: Sphere = self_1353;
    let _e22: Sphere = other_1213;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_sphere_left_anti_contraction(self_1354: Sphere, other_1214: Sphere) -> AntiScalar {
    var self_1355: Sphere;
    var other_1215: Sphere;

    self_1355 = self_1354;
    other_1215 = other_1214;
    let _e4: Sphere = self_1355;
    let _e7: Sphere = other_1215;
    let _e11: Sphere = self_1355;
    let _e14: Sphere = other_1215;
    let _e19: Sphere = self_1355;
    let _e22: Sphere = other_1215;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_sphere_right_anti_contraction(self_1356: Sphere, other_1216: Sphere) -> AntiScalar {
    var self_1357: Sphere;
    var other_1217: Sphere;

    self_1357 = self_1356;
    other_1217 = other_1216;
    let _e4: Sphere = self_1357;
    let _e7: Sphere = other_1217;
    let _e11: Sphere = self_1357;
    let _e14: Sphere = other_1217;
    let _e19: Sphere = self_1357;
    let _e22: Sphere = other_1217;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_sphere_anti_scalar_product(self_1358: Sphere, other_1218: Sphere) -> AntiScalar {
    var self_1359: Sphere;
    var other_1219: Sphere;

    self_1359 = self_1358;
    other_1219 = other_1218;
    let _e4: Sphere = self_1359;
    let _e7: Sphere = other_1219;
    let _e11: Sphere = self_1359;
    let _e14: Sphere = other_1219;
    let _e19: Sphere = self_1359;
    let _e22: Sphere = other_1219;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_motor_geometric_product(self_1360: Sphere, other_1220: Motor) -> Rotor {
    var self_1361: Sphere;
    var other_1221: Motor;

    self_1361 = self_1360;
    other_1221 = other_1220;
    let _e4: Sphere = self_1361;
    let _e8: Motor = other_1221;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g1_));
}

fn sphere_motor_outer_product(self_1362: Sphere, other_1222: Motor) -> AntiScalar {
    var self_1363: Sphere;
    var other_1223: Motor;

    self_1363 = self_1362;
    other_1223 = other_1222;
    let _e4: Sphere = self_1363;
    let _e7: Motor = other_1223;
    return AntiScalar((_e4.g0_.x * _e7.g1_.w));
}

fn sphere_motor_right_anti_contraction(self_1364: Sphere, other_1224: Motor) -> Sphere {
    var self_1365: Sphere;
    var other_1225: Motor;

    self_1365 = self_1364;
    other_1225 = other_1224;
    let _e4: Sphere = self_1365;
    let _e6: Motor = other_1225;
    let _e11: Sphere = self_1365;
    let _e13: Motor = other_1225;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn sphere_rotor_inner_anti_product(self_1366: Sphere, other_1226: Rotor) -> Sphere {
    var self_1367: Sphere;
    var other_1227: Rotor;

    self_1367 = self_1366;
    other_1227 = other_1226;
    let _e4: Sphere = self_1367;
    let _e6: Rotor = other_1227;
    let _e11: Sphere = self_1367;
    let _e15: Rotor = other_1227;
    let _e18: Rotor = other_1227;
    let _e21: Rotor = other_1227;
    let _e32: Sphere = self_1367;
    let _e36: Rotor = other_1227;
    let _e39: Rotor = other_1227;
    let _e42: Rotor = other_1227;
    let _e54: Sphere = self_1367;
    let _e58: Rotor = other_1227;
    let _e61: Rotor = other_1227;
    let _e64: Rotor = other_1227;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_.w)), ((((vec3<f32>(_e11.g1_.x) * vec3<f32>(_e15.g0_.w, _e18.g0_.z, _e21.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e32.g1_.y) * vec3<f32>(_e36.g0_.z, _e39.g0_.w, _e42.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e54.g1_.z) * vec3<f32>(_e58.g0_.y, _e61.g0_.x, _e64.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))));
}

fn sphere_rotor_right_anti_contraction(self_1368: Sphere, other_1228: Rotor) -> Sphere {
    var self_1369: Sphere;
    var other_1229: Rotor;

    self_1369 = self_1368;
    other_1229 = other_1228;
    let _e4: Sphere = self_1369;
    let _e6: Rotor = other_1229;
    let _e11: Sphere = self_1369;
    let _e13: Rotor = other_1229;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn sphere_translator_inner_anti_product(self_1370: Sphere, other_1230: Translator) -> Sphere {
    var self_1371: Sphere;
    var other_1231: Translator;

    self_1371 = self_1370;
    other_1231 = other_1230;
    let _e4: Sphere = self_1371;
    let _e8: Translator = other_1231;
    let _e17: Sphere = self_1371;
    let _e21: Translator = other_1231;
    let _e31: Sphere = self_1371;
    let _e35: Translator = other_1231;
    let _e45: Sphere = self_1371;
    let _e47: Translator = other_1231;
    let _e53: Sphere = self_1371;
    let _e55: Translator = other_1231;
    return Sphere((((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e17.g1_.y) * vec2<f32>(_e21.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e31.g1_.z) * vec2<f32>(_e35.g0_.z)) * vec2<f32>(0.0, 1.0))) + (_e45.g0_ * vec2<f32>(_e47.g0_.w))), (_e53.g1_ * vec3<f32>(_e55.g0_.w)));
}

fn sphere_translator_right_anti_contraction(self_1372: Sphere, other_1232: Translator) -> Sphere {
    var self_1373: Sphere;
    var other_1233: Translator;

    self_1373 = self_1372;
    other_1233 = other_1232;
    let _e4: Sphere = self_1373;
    let _e6: Translator = other_1233;
    let _e11: Sphere = self_1373;
    let _e13: Translator = other_1233;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn sphere_flector_right_anti_contraction(self_1374: Sphere, other_1234: Flector) -> AntiScalar {
    var self_1375: Sphere;
    var other_1235: Flector;

    self_1375 = self_1374;
    other_1235 = other_1234;
    let _e4: Sphere = self_1375;
    let _e7: Flector = other_1235;
    let _e11: Sphere = self_1375;
    let _e14: Flector = other_1235;
    let _e19: Sphere = self_1375;
    let _e22: Flector = other_1235;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_flector_anti_scalar_product(self_1376: Sphere, other_1236: Flector) -> AntiScalar {
    var self_1377: Sphere;
    var other_1237: Flector;

    self_1377 = self_1376;
    other_1237 = other_1236;
    let _e4: Sphere = self_1377;
    let _e7: Flector = other_1237;
    let _e11: Sphere = self_1377;
    let _e14: Flector = other_1237;
    let _e19: Sphere = self_1377;
    let _e22: Flector = other_1237;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn sphere_dilation_inner_anti_product(self_1378: Sphere, other_1238: Dilation) -> Sphere {
    var self_1379: Sphere;
    var other_1239: Dilation;

    self_1379 = self_1378;
    other_1239 = other_1238;
    let _e4: Sphere = self_1379;
    let _e8: Dilation = other_1239;
    let _e17: Sphere = self_1379;
    let _e21: Dilation = other_1239;
    let _e31: Sphere = self_1379;
    let _e35: Dilation = other_1239;
    let _e45: Sphere = self_1379;
    let _e47: Dilation = other_1239;
    let _e53: Sphere = self_1379;
    let _e55: Dilation = other_1239;
    return Sphere((((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g1_.y) * vec2<f32>(_e21.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g1_.z) * vec2<f32>(_e35.g0_.y)) * vec2<f32>(1.0, 0.0))) + (_e45.g0_ * vec2<f32>(_e47.g1_.y))), (_e53.g1_ * vec3<f32>(_e55.g1_.y)));
}

fn sphere_dilation_right_anti_contraction(self_1380: Sphere, other_1240: Dilation) -> Sphere {
    var self_1381: Sphere;
    var other_1241: Dilation;

    self_1381 = self_1380;
    other_1241 = other_1240;
    let _e4: Sphere = self_1381;
    let _e6: Dilation = other_1241;
    let _e11: Sphere = self_1381;
    let _e13: Dilation = other_1241;
    return Sphere((_e4.g0_ * vec2<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)));
}

fn sphere_multi_vector_add(self_1382: Sphere, other_1242: MultiVector) -> MultiVector {
    var self_1383: Sphere;
    var other_1243: MultiVector;

    self_1383 = self_1382;
    other_1243 = other_1242;
    let _e4: Sphere = self_1383;
    let _e13: MultiVector = other_1243;
    let _e16: MultiVector = other_1243;
    let _e18: MultiVector = other_1243;
    let _e20: MultiVector = other_1243;
    let _e22: MultiVector = other_1243;
    let _e24: MultiVector = other_1243;
    let _e26: MultiVector = other_1243;
    let _e28: MultiVector = other_1243;
    let _e30: MultiVector = other_1243;
    let _e32: Sphere = self_1383;
    let _e35: Sphere = self_1383;
    let _e38: Sphere = self_1383;
    let _e41: Sphere = self_1383;
    let _e45: MultiVector = other_1243;
    return MultiVector(((vec3<f32>(_e4.g0_.x) * vec3<f32>(0.0, 1.0, 0.0)) + _e13.g0_), _e16.g1_, _e18.g2_, _e20.g3_, _e22.g4_, _e24.g5_, _e26.g6_, _e28.g7_, _e30.g8_, (vec4<f32>(_e32.g1_.x, _e35.g1_.y, _e38.g1_.z, _e41.g0_.y) + _e45.g9_));
}

fn sphere_multi_vector_sub(self_1384: Sphere, other_1244: MultiVector) -> MultiVector {
    var self_1385: Sphere;
    var other_1245: MultiVector;

    self_1385 = self_1384;
    other_1245 = other_1244;
    let _e4: Sphere = self_1385;
    let _e13: MultiVector = other_1245;
    let _e18: MultiVector = other_1245;
    let _e23: MultiVector = other_1245;
    let _e28: MultiVector = other_1245;
    let _e33: MultiVector = other_1245;
    let _e38: MultiVector = other_1245;
    let _e43: MultiVector = other_1245;
    let _e48: MultiVector = other_1245;
    let _e53: MultiVector = other_1245;
    let _e56: Sphere = self_1385;
    let _e59: Sphere = self_1385;
    let _e62: Sphere = self_1385;
    let _e65: Sphere = self_1385;
    let _e69: MultiVector = other_1245;
    return MultiVector(((vec3<f32>(_e4.g0_.x) * vec3<f32>(0.0, 1.0, 0.0)) - _e13.g0_), (vec3<f32>(0.0) - _e18.g1_), (vec2<f32>(0.0) - _e23.g2_), (vec4<f32>(0.0) - _e28.g3_), (vec3<f32>(0.0) - _e33.g4_), (vec3<f32>(0.0) - _e38.g5_), (vec3<f32>(0.0) - _e43.g6_), (vec3<f32>(0.0) - _e48.g7_), (vec4<f32>(0.0) - _e53.g8_), (vec4<f32>(_e56.g1_.x, _e59.g1_.y, _e62.g1_.z, _e65.g0_.y) - _e69.g9_));
}

fn sphere_multi_vector_geometric_anti_product(self_1386: Sphere, other_1246: MultiVector) -> MultiVector {
    var self_1387: Sphere;
    var other_1247: MultiVector;

    self_1387 = self_1386;
    other_1247 = other_1246;
    let _e4: Sphere = self_1387;
    let _e8: MultiVector = other_1247;
    let _e18: Sphere = self_1387;
    let _e22: MultiVector = other_1247;
    let _e25: MultiVector = other_1247;
    let _e28: MultiVector = other_1247;
    let _e40: Sphere = self_1387;
    let _e44: MultiVector = other_1247;
    let _e47: MultiVector = other_1247;
    let _e50: MultiVector = other_1247;
    let _e62: Sphere = self_1387;
    let _e66: MultiVector = other_1247;
    let _e69: MultiVector = other_1247;
    let _e72: MultiVector = other_1247;
    let _e84: Sphere = self_1387;
    let _e88: MultiVector = other_1247;
    let _e91: MultiVector = other_1247;
    let _e94: MultiVector = other_1247;
    let _e105: Sphere = self_1387;
    let _e109: MultiVector = other_1247;
    let _e112: MultiVector = other_1247;
    let _e115: MultiVector = other_1247;
    let _e120: Sphere = self_1387;
    let _e124: MultiVector = other_1247;
    let _e128: Sphere = self_1387;
    let _e132: MultiVector = other_1247;
    let _e135: MultiVector = other_1247;
    let _e138: MultiVector = other_1247;
    let _e150: Sphere = self_1387;
    let _e154: MultiVector = other_1247;
    let _e157: MultiVector = other_1247;
    let _e160: MultiVector = other_1247;
    let _e172: Sphere = self_1387;
    let _e176: MultiVector = other_1247;
    let _e179: MultiVector = other_1247;
    let _e182: MultiVector = other_1247;
    let _e194: Sphere = self_1387;
    let _e198: MultiVector = other_1247;
    let _e201: MultiVector = other_1247;
    let _e211: Sphere = self_1387;
    let _e215: MultiVector = other_1247;
    let _e218: MultiVector = other_1247;
    let _e229: Sphere = self_1387;
    let _e233: MultiVector = other_1247;
    let _e236: MultiVector = other_1247;
    let _e247: Sphere = self_1387;
    let _e249: MultiVector = other_1247;
    let _e260: Sphere = self_1387;
    let _e264: MultiVector = other_1247;
    let _e267: MultiVector = other_1247;
    let _e270: MultiVector = other_1247;
    let _e273: MultiVector = other_1247;
    let _e287: Sphere = self_1387;
    let _e291: MultiVector = other_1247;
    let _e294: MultiVector = other_1247;
    let _e297: MultiVector = other_1247;
    let _e300: MultiVector = other_1247;
    let _e315: Sphere = self_1387;
    let _e319: MultiVector = other_1247;
    let _e322: MultiVector = other_1247;
    let _e325: MultiVector = other_1247;
    let _e328: MultiVector = other_1247;
    let _e343: Sphere = self_1387;
    let _e346: Sphere = self_1387;
    let _e349: Sphere = self_1387;
    let _e352: Sphere = self_1387;
    let _e356: MultiVector = other_1247;
    let _e359: MultiVector = other_1247;
    let _e362: MultiVector = other_1247;
    let _e365: MultiVector = other_1247;
    let _e377: Sphere = self_1387;
    let _e381: MultiVector = other_1247;
    let _e384: Sphere = self_1387;
    let _e388: MultiVector = other_1247;
    let _e391: MultiVector = other_1247;
    let _e394: MultiVector = other_1247;
    let _e406: Sphere = self_1387;
    let _e410: MultiVector = other_1247;
    let _e413: MultiVector = other_1247;
    let _e416: MultiVector = other_1247;
    let _e428: Sphere = self_1387;
    let _e432: MultiVector = other_1247;
    let _e435: MultiVector = other_1247;
    let _e438: MultiVector = other_1247;
    let _e450: Sphere = self_1387;
    let _e454: MultiVector = other_1247;
    let _e457: Sphere = self_1387;
    let _e461: MultiVector = other_1247;
    let _e464: MultiVector = other_1247;
    let _e467: MultiVector = other_1247;
    let _e473: Sphere = self_1387;
    let _e477: MultiVector = other_1247;
    let _e480: MultiVector = other_1247;
    let _e483: MultiVector = other_1247;
    let _e496: Sphere = self_1387;
    let _e500: MultiVector = other_1247;
    let _e503: MultiVector = other_1247;
    let _e506: MultiVector = other_1247;
    let _e519: Sphere = self_1387;
    let _e523: MultiVector = other_1247;
    let _e526: MultiVector = other_1247;
    let _e529: MultiVector = other_1247;
    let _e542: Sphere = self_1387;
    let _e546: MultiVector = other_1247;
    let _e549: MultiVector = other_1247;
    let _e552: MultiVector = other_1247;
    let _e564: Sphere = self_1387;
    let _e568: MultiVector = other_1247;
    let _e571: MultiVector = other_1247;
    let _e574: MultiVector = other_1247;
    let _e587: Sphere = self_1387;
    let _e591: MultiVector = other_1247;
    let _e594: MultiVector = other_1247;
    let _e597: MultiVector = other_1247;
    let _e612: Sphere = self_1387;
    let _e616: MultiVector = other_1247;
    let _e619: MultiVector = other_1247;
    let _e622: MultiVector = other_1247;
    let _e628: Sphere = self_1387;
    let _e632: MultiVector = other_1247;
    let _e635: MultiVector = other_1247;
    let _e638: MultiVector = other_1247;
    let _e650: Sphere = self_1387;
    let _e654: MultiVector = other_1247;
    let _e657: MultiVector = other_1247;
    let _e660: MultiVector = other_1247;
    let _e672: Sphere = self_1387;
    let _e676: MultiVector = other_1247;
    let _e679: MultiVector = other_1247;
    let _e682: MultiVector = other_1247;
    let _e694: Sphere = self_1387;
    let _e698: MultiVector = other_1247;
    let _e701: Sphere = self_1387;
    let _e705: MultiVector = other_1247;
    let _e708: MultiVector = other_1247;
    let _e711: MultiVector = other_1247;
    let _e714: MultiVector = other_1247;
    let _e729: Sphere = self_1387;
    let _e733: MultiVector = other_1247;
    let _e736: MultiVector = other_1247;
    let _e739: MultiVector = other_1247;
    let _e742: MultiVector = other_1247;
    let _e757: Sphere = self_1387;
    let _e761: MultiVector = other_1247;
    let _e764: MultiVector = other_1247;
    let _e767: MultiVector = other_1247;
    let _e770: MultiVector = other_1247;
    let _e785: Sphere = self_1387;
    let _e788: Sphere = self_1387;
    let _e791: Sphere = self_1387;
    let _e794: Sphere = self_1387;
    let _e798: MultiVector = other_1247;
    let _e801: MultiVector = other_1247;
    let _e804: MultiVector = other_1247;
    let _e807: MultiVector = other_1247;
    let _e820: Sphere = self_1387;
    let _e824: MultiVector = other_1247;
    let _e827: MultiVector = other_1247;
    let _e830: MultiVector = other_1247;
    let _e833: MultiVector = other_1247;
    let _e845: Sphere = self_1387;
    let _e849: MultiVector = other_1247;
    let _e852: MultiVector = other_1247;
    let _e855: MultiVector = other_1247;
    let _e858: MultiVector = other_1247;
    let _e871: Sphere = self_1387;
    let _e875: MultiVector = other_1247;
    let _e878: MultiVector = other_1247;
    let _e881: MultiVector = other_1247;
    let _e884: MultiVector = other_1247;
    let _e897: Sphere = self_1387;
    let _e900: Sphere = self_1387;
    let _e903: Sphere = self_1387;
    let _e906: Sphere = self_1387;
    let _e910: MultiVector = other_1247;
    let _e913: MultiVector = other_1247;
    let _e916: MultiVector = other_1247;
    let _e919: MultiVector = other_1247;
    return MultiVector(((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.x) * vec3<f32>(_e22.g1_.x, _e25.g8_.x, _e28.g9_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e40.g1_.y) * vec3<f32>(_e44.g1_.y, _e47.g8_.y, _e50.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e62.g1_.z) * vec3<f32>(_e66.g1_.z, _e69.g8_.z, _e72.g9_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e84.g0_.x) * vec3<f32>(_e88.g2_.y, _e91.g0_.z, _e94.g2_.x)) * vec3<f32>(1.0, 1.0, 0.0))), (((((vec3<f32>(_e105.g0_.x) * vec3<f32>(_e109.g3_.x, _e112.g3_.y, _e115.g3_.z)) - (vec3<f32>(_e120.g0_.y) * _e124.g4_)) + ((vec3<f32>(_e128.g1_.x) * vec3<f32>(_e132.g0_.x, _e135.g5_.z, _e138.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e150.g1_.y) * vec3<f32>(_e154.g5_.z, _e157.g0_.x, _e160.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e172.g1_.z) * vec3<f32>(_e176.g5_.y, _e179.g5_.x, _e182.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((vec2<f32>(_e194.g1_.x) * vec2<f32>(_e198.g4_.x, _e201.g3_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e211.g1_.y) * vec2<f32>(_e215.g4_.y, _e218.g3_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e229.g1_.z) * vec2<f32>(_e233.g4_.z, _e236.g3_.z)) * vec2<f32>(1.0, -(1.0)))) + ((_e247.g0_ * vec2<f32>(_e249.g3_.w)) * vec2<f32>(1.0, -(1.0)))), (((((vec4<f32>(_e260.g1_.x) * vec4<f32>(_e264.g2_.y, _e267.g7_.z, _e270.g7_.y, _e273.g6_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e287.g1_.y) * vec4<f32>(_e291.g7_.z, _e294.g2_.y, _e297.g7_.x, _e300.g6_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e315.g1_.z) * vec4<f32>(_e319.g7_.y, _e322.g7_.x, _e325.g2_.y, _e328.g6_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e343.g0_.y, _e346.g0_.y, _e349.g0_.y, _e352.g0_.x) * vec4<f32>(_e356.g6_.x, _e359.g6_.y, _e362.g6_.z, _e365.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(_e377.g0_.x) * _e381.g6_) + ((vec3<f32>(_e384.g1_.x) * vec3<f32>(_e388.g2_.x, _e391.g8_.z, _e394.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e406.g1_.y) * vec3<f32>(_e410.g8_.z, _e413.g2_.x, _e416.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e428.g1_.z) * vec3<f32>(_e432.g8_.y, _e435.g8_.x, _e438.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((vec3<f32>(_e450.g0_.x) * _e454.g7_) + (vec3<f32>(_e457.g0_.y) * vec3<f32>(_e461.g8_.x, _e464.g8_.y, _e467.g8_.z))) + ((vec3<f32>(_e473.g1_.x) * vec3<f32>(_e477.g8_.w, _e480.g1_.z, _e483.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e496.g1_.y) * vec3<f32>(_e500.g1_.z, _e503.g8_.w, _e506.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e519.g1_.z) * vec3<f32>(_e523.g1_.y, _e526.g1_.x, _e529.g8_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), ((((vec3<f32>(_e542.g1_.x) * vec3<f32>(_e546.g3_.w, _e549.g9_.z, _e552.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e564.g1_.y) * vec3<f32>(_e568.g9_.z, _e571.g3_.w, _e574.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e587.g1_.z) * vec3<f32>(_e591.g9_.y, _e594.g9_.x, _e597.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), ((((vec3<f32>(0.0) - (vec3<f32>(_e612.g0_.y) * vec3<f32>(_e616.g9_.x, _e619.g9_.y, _e622.g9_.z))) + ((vec3<f32>(_e628.g1_.x) * vec3<f32>(_e632.g9_.w, _e635.g3_.z, _e638.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e650.g1_.y) * vec3<f32>(_e654.g3_.z, _e657.g9_.w, _e660.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e672.g1_.z) * vec3<f32>(_e676.g3_.y, _e679.g3_.x, _e682.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((vec4<f32>(_e694.g0_.x) * _e698.g9_) + ((vec4<f32>(_e701.g1_.x) * vec4<f32>(_e705.g0_.y, _e708.g4_.z, _e711.g4_.y, _e714.g5_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e729.g1_.y) * vec4<f32>(_e733.g4_.z, _e736.g0_.y, _e739.g4_.x, _e742.g5_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e757.g1_.z) * vec4<f32>(_e761.g4_.y, _e764.g4_.x, _e767.g0_.y, _e770.g5_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e785.g0_.x, _e788.g0_.x, _e791.g0_.x, _e794.g0_.y) * vec4<f32>(_e798.g0_.x, _e801.g0_.x, _e804.g0_.x, _e807.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e820.g1_.x) * vec4<f32>(_e824.g0_.z, _e827.g6_.z, _e830.g6_.y, _e833.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e845.g1_.y) * vec4<f32>(_e849.g6_.z, _e852.g0_.z, _e855.g6_.x, _e858.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e871.g1_.z) * vec4<f32>(_e875.g6_.y, _e878.g6_.x, _e881.g0_.z, _e884.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e897.g0_.x, _e900.g0_.x, _e903.g0_.x, _e906.g0_.y) * vec4<f32>(_e910.g0_.x, _e913.g0_.x, _e916.g0_.x, _e919.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn sphere_multi_vector_anti_scalar_product(self_1388: Sphere, other_1248: MultiVector) -> AntiScalar {
    var self_1389: Sphere;
    var other_1249: MultiVector;

    self_1389 = self_1388;
    other_1249 = other_1248;
    let _e4: Sphere = self_1389;
    let _e7: MultiVector = other_1249;
    let _e11: Sphere = self_1389;
    let _e14: MultiVector = other_1249;
    let _e19: Sphere = self_1389;
    let _e22: MultiVector = other_1249;
    return AntiScalar((((_e4.g1_.x * _e7.g9_.x) + (_e11.g1_.y * _e14.g9_.y)) + (_e19.g1_.z * _e22.g9_.z)));
}

fn sphere_scale(self_1390: Sphere, other_1250: f32) -> Sphere {
    var self_1391: Sphere;
    var other_1251: f32;

    self_1391 = self_1390;
    other_1251 = other_1250;
    let _e4: Sphere = self_1391;
    let _e5: f32 = other_1251;
    let _e7: Sphere = sphere_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn motor_zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn motor_one() -> Motor {
    return Motor(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn motor_neg(self_1392: Motor) -> Motor {
    var self_1393: Motor;

    self_1393 = self_1392;
    let _e2: Motor = self_1393;
    let _e8: Motor = self_1393;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn motor_automorphism(self_1394: Motor) -> Motor {
    var self_1395: Motor;

    self_1395 = self_1394;
    let _e2: Motor = self_1395;
    let _e8: Motor = self_1395;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn motor_reversal(self_1396: Motor) -> Motor {
    var self_1397: Motor;

    self_1397 = self_1396;
    let _e2: Motor = self_1397;
    let _e13: Motor = self_1397;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)), (_e13.g1_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn motor_conjugation(self_1398: Motor) -> Motor {
    var self_1399: Motor;

    self_1399 = self_1398;
    let _e2: Motor = self_1399;
    let _e11: Motor = self_1399;
    return Motor((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))), (_e11.g1_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn motor_anti_reversal(self_1400: Motor) -> Motor {
    var self_1401: Motor;

    self_1401 = self_1400;
    let _e2: Motor = self_1401;
    let _e11: Motor = self_1401;
    return Motor((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))), (_e11.g1_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn motor_scalar_geometric_product(self_1402: Motor, other_1252: Scalar) -> Motor {
    var self_1403: Motor;
    var other_1253: Scalar;

    self_1403 = self_1402;
    other_1253 = other_1252;
    let _e4: Motor = self_1403;
    let _e6: Scalar = other_1253;
    let _e10: Motor = self_1403;
    let _e12: Scalar = other_1253;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_regressive_product(self_1404: Motor, other_1254: Scalar) -> Scalar {
    var self_1405: Motor;
    var other_1255: Scalar;

    self_1405 = self_1404;
    other_1255 = other_1254;
    let _e4: Motor = self_1405;
    let _e7: Scalar = other_1255;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_outer_product(self_1406: Motor, other_1256: Scalar) -> Motor {
    var self_1407: Motor;
    var other_1257: Scalar;

    self_1407 = self_1406;
    other_1257 = other_1256;
    let _e4: Motor = self_1407;
    let _e6: Scalar = other_1257;
    let _e10: Motor = self_1407;
    let _e12: Scalar = other_1257;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_inner_product(self_1408: Motor, other_1258: Scalar) -> Motor {
    var self_1409: Motor;
    var other_1259: Scalar;

    self_1409 = self_1408;
    other_1259 = other_1258;
    let _e4: Motor = self_1409;
    let _e6: Scalar = other_1259;
    let _e10: Motor = self_1409;
    let _e12: Scalar = other_1259;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_right_contraction(self_1410: Motor, other_1260: Scalar) -> Motor {
    var self_1411: Motor;
    var other_1261: Scalar;

    self_1411 = self_1410;
    other_1261 = other_1260;
    let _e4: Motor = self_1411;
    let _e6: Scalar = other_1261;
    let _e10: Motor = self_1411;
    let _e12: Scalar = other_1261;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_into(self_1412: Motor) -> AntiScalar {
    var self_1413: Motor;

    self_1413 = self_1412;
    let _e2: Motor = self_1413;
    return AntiScalar(_e2.g0_.w);
}

fn motor_anti_scalar_add(self_1414: Motor, other_1262: AntiScalar) -> Motor {
    var self_1415: Motor;
    var other_1263: AntiScalar;

    self_1415 = self_1414;
    other_1263 = other_1262;
    let _e4: Motor = self_1415;
    let _e6: AntiScalar = other_1263;
    let _e16: Motor = self_1415;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_sub(self_1416: Motor, other_1264: AntiScalar) -> Motor {
    var self_1417: Motor;
    var other_1265: AntiScalar;

    self_1417 = self_1416;
    other_1265 = other_1264;
    let _e4: Motor = self_1417;
    let _e6: AntiScalar = other_1265;
    let _e16: Motor = self_1417;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_regressive_product(self_1418: Motor, other_1266: AntiScalar) -> Motor {
    var self_1419: Motor;
    var other_1267: AntiScalar;

    self_1419 = self_1418;
    other_1267 = other_1266;
    let _e4: Motor = self_1419;
    let _e6: AntiScalar = other_1267;
    let _e10: Motor = self_1419;
    let _e12: AntiScalar = other_1267;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_geometric_anti_product(self_1420: Motor, other_1268: AntiScalar) -> Motor {
    var self_1421: Motor;
    var other_1269: AntiScalar;

    self_1421 = self_1420;
    other_1269 = other_1268;
    let _e4: Motor = self_1421;
    let _e6: AntiScalar = other_1269;
    let _e10: Motor = self_1421;
    let _e12: AntiScalar = other_1269;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_inner_anti_product(self_1422: Motor, other_1270: AntiScalar) -> Motor {
    var self_1423: Motor;
    var other_1271: AntiScalar;

    self_1423 = self_1422;
    other_1271 = other_1270;
    let _e4: Motor = self_1423;
    let _e6: AntiScalar = other_1271;
    let _e10: Motor = self_1423;
    let _e12: AntiScalar = other_1271;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_left_anti_contraction(self_1424: Motor, other_1272: AntiScalar) -> AntiScalar {
    var self_1425: Motor;
    var other_1273: AntiScalar;

    self_1425 = self_1424;
    other_1273 = other_1272;
    let _e4: Motor = self_1425;
    let _e7: AntiScalar = other_1273;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_anti_scalar_right_anti_contraction(self_1426: Motor, other_1274: AntiScalar) -> Motor {
    var self_1427: Motor;
    var other_1275: AntiScalar;

    self_1427 = self_1426;
    other_1275 = other_1274;
    let _e4: Motor = self_1427;
    let _e6: AntiScalar = other_1275;
    let _e10: Motor = self_1427;
    let _e12: AntiScalar = other_1275;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_anti_scalar_product(self_1428: Motor, other_1276: AntiScalar) -> AntiScalar {
    var self_1429: Motor;
    var other_1277: AntiScalar;

    self_1429 = self_1428;
    other_1277 = other_1276;
    let _e4: Motor = self_1429;
    let _e7: AntiScalar = other_1277;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_radial_point_geometric_product(self_1430: Motor, other_1278: RadialPoint) -> Flector {
    var self_1431: Motor;
    var other_1279: RadialPoint;

    self_1431 = self_1430;
    other_1279 = other_1278;
    let _e4: Motor = self_1431;
    let _e8: RadialPoint = other_1279;
    let _e20: Motor = self_1431;
    let _e24: RadialPoint = other_1279;
    let _e37: Motor = self_1431;
    let _e41: RadialPoint = other_1279;
    let _e44: RadialPoint = other_1279;
    let _e47: RadialPoint = other_1279;
    let _e50: RadialPoint = other_1279;
    let _e63: Motor = self_1431;
    let _e67: RadialPoint = other_1279;
    let _e70: RadialPoint = other_1279;
    let _e73: RadialPoint = other_1279;
    let _e76: RadialPoint = other_1279;
    let _e89: Motor = self_1431;
    let _e93: RadialPoint = other_1279;
    let _e96: RadialPoint = other_1279;
    let _e99: RadialPoint = other_1279;
    let _e102: RadialPoint = other_1279;
    let _e108: Motor = self_1431;
    let _e111: Motor = self_1431;
    let _e114: Motor = self_1431;
    let _e117: Motor = self_1431;
    let _e121: RadialPoint = other_1279;
    let _e124: RadialPoint = other_1279;
    let _e127: RadialPoint = other_1279;
    let _e130: RadialPoint = other_1279;
    let _e144: Motor = self_1431;
    let _e148: RadialPoint = other_1279;
    let _e151: RadialPoint = other_1279;
    let _e154: RadialPoint = other_1279;
    let _e157: RadialPoint = other_1279;
    let _e169: Motor = self_1431;
    let _e173: RadialPoint = other_1279;
    let _e176: RadialPoint = other_1279;
    let _e179: RadialPoint = other_1279;
    let _e182: RadialPoint = other_1279;
    let _e195: Motor = self_1431;
    let _e199: RadialPoint = other_1279;
    let _e202: RadialPoint = other_1279;
    let _e205: RadialPoint = other_1279;
    let _e208: RadialPoint = other_1279;
    let _e220: Motor = self_1431;
    let _e224: RadialPoint = other_1279;
    let _e227: RadialPoint = other_1279;
    let _e230: RadialPoint = other_1279;
    let _e233: RadialPoint = other_1279;
    let _e246: Motor = self_1431;
    let _e250: RadialPoint = other_1279;
    let _e253: RadialPoint = other_1279;
    let _e256: RadialPoint = other_1279;
    let _e259: RadialPoint = other_1279;
    let _e272: Motor = self_1431;
    let _e276: RadialPoint = other_1279;
    let _e279: RadialPoint = other_1279;
    let _e282: RadialPoint = other_1279;
    let _e285: RadialPoint = other_1279;
    let _e298: Motor = self_1431;
    let _e302: RadialPoint = other_1279;
    let _e305: RadialPoint = other_1279;
    let _e308: RadialPoint = other_1279;
    let _e311: RadialPoint = other_1279;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.x, _e50.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e63.g1_.z) * vec4<f32>(_e67.g0_.y, _e70.g0_.x, _e73.g0_.y, _e76.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) - (vec4<f32>(_e89.g1_.w) * vec4<f32>(_e93.g0_.x, _e96.g0_.y, _e99.g0_.z, _e102.g1_.x))) + ((vec4<f32>(_e108.g0_.x, _e111.g1_.x, _e114.g1_.x, _e117.g0_.x) * vec4<f32>(_e121.g0_.x, _e124.g0_.z, _e127.g0_.y, _e130.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((((((((vec4<f32>(_e144.g0_.y) * vec4<f32>(_e148.g0_.z, _e151.g0_.z, _e154.g0_.x, _e157.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e169.g0_.z) * vec4<f32>(_e173.g0_.y, _e176.g0_.x, _e179.g0_.y, _e182.g0_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e195.g0_.w) * vec4<f32>(_e199.g0_.x, _e202.g0_.y, _e205.g0_.z, _e208.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e220.g1_.x) * vec4<f32>(_e224.g1_.x, _e227.g1_.x, _e230.g1_.x, _e233.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e246.g1_.y) * vec4<f32>(_e250.g1_.x, _e253.g1_.x, _e256.g1_.x, _e259.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e272.g1_.z) * vec4<f32>(_e276.g1_.x, _e279.g1_.x, _e282.g1_.x, _e285.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e298.g0_.x) * vec4<f32>(_e302.g0_.x, _e305.g0_.z, _e308.g0_.y, _e311.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))));
}

fn motor_radial_point_regressive_product(self_1432: Motor, other_1280: RadialPoint) -> RadialPoint {
    var self_1433: Motor;
    var other_1281: RadialPoint;

    self_1433 = self_1432;
    other_1281 = other_1280;
    let _e4: Motor = self_1433;
    let _e8: RadialPoint = other_1281;
    let _e11: Motor = self_1433;
    let _e15: RadialPoint = other_1281;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn motor_radial_point_outer_product(self_1434: Motor, other_1282: RadialPoint) -> Flector {
    var self_1435: Motor;
    var other_1283: RadialPoint;

    self_1435 = self_1434;
    other_1283 = other_1282;
    let _e6: Motor = self_1435;
    let _e10: RadialPoint = other_1283;
    let _e13: RadialPoint = other_1283;
    let _e16: RadialPoint = other_1283;
    let _e19: RadialPoint = other_1283;
    let _e25: Motor = self_1435;
    let _e29: RadialPoint = other_1283;
    let _e32: RadialPoint = other_1283;
    let _e35: RadialPoint = other_1283;
    let _e38: RadialPoint = other_1283;
    let _e50: Motor = self_1435;
    let _e54: RadialPoint = other_1283;
    let _e57: RadialPoint = other_1283;
    let _e60: RadialPoint = other_1283;
    let _e63: RadialPoint = other_1283;
    let _e76: Motor = self_1435;
    let _e80: RadialPoint = other_1283;
    let _e83: RadialPoint = other_1283;
    let _e86: RadialPoint = other_1283;
    let _e89: RadialPoint = other_1283;
    let _e102: Motor = self_1435;
    let _e106: RadialPoint = other_1283;
    let _e109: RadialPoint = other_1283;
    let _e112: RadialPoint = other_1283;
    let _e115: RadialPoint = other_1283;
    let _e128: Motor = self_1435;
    let _e132: RadialPoint = other_1283;
    let _e135: RadialPoint = other_1283;
    let _e138: RadialPoint = other_1283;
    let _e141: RadialPoint = other_1283;
    let _e154: Motor = self_1435;
    let _e158: RadialPoint = other_1283;
    let _e161: RadialPoint = other_1283;
    let _e164: RadialPoint = other_1283;
    let _e167: RadialPoint = other_1283;
    return Flector((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.w) * vec4<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z, _e19.g1_.x))), (((((((vec4<f32>(_e25.g0_.y) * vec4<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x, _e38.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e50.g0_.z) * vec4<f32>(_e54.g0_.y, _e57.g0_.x, _e60.g0_.y, _e63.g0_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.x) * vec4<f32>(_e80.g1_.x, _e83.g1_.x, _e86.g1_.x, _e89.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g1_.y) * vec4<f32>(_e106.g1_.x, _e109.g1_.x, _e112.g1_.x, _e115.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e128.g1_.z) * vec4<f32>(_e132.g1_.x, _e135.g1_.x, _e138.g1_.x, _e141.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e154.g0_.x) * vec4<f32>(_e158.g0_.x, _e161.g0_.z, _e164.g0_.y, _e167.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))));
}

fn motor_flat_point_regressive_product(self_1436: Motor, other_1284: FlatPoint) -> FlatPoint {
    var self_1437: Motor;
    var other_1285: FlatPoint;

    self_1437 = self_1436;
    other_1285 = other_1284;
    let _e4: Motor = self_1437;
    let _e8: FlatPoint = other_1285;
    return FlatPoint((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_flat_point_geometric_anti_product(self_1438: Motor, other_1286: FlatPoint) -> Flector {
    var self_1439: Motor;
    var other_1287: FlatPoint;

    self_1439 = self_1438;
    other_1287 = other_1286;
    let _e4: Motor = self_1439;
    let _e8: FlatPoint = other_1287;
    let _e19: Motor = self_1439;
    let _e23: FlatPoint = other_1287;
    let _e35: Motor = self_1439;
    let _e39: FlatPoint = other_1287;
    let _e43: Motor = self_1439;
    let _e47: FlatPoint = other_1287;
    let _e59: Motor = self_1439;
    let _e63: FlatPoint = other_1287;
    let _e75: Motor = self_1439;
    let _e78: Motor = self_1439;
    let _e81: Motor = self_1439;
    let _e84: Motor = self_1439;
    let _e88: FlatPoint = other_1287;
    let _e100: Motor = self_1439;
    let _e104: FlatPoint = other_1287;
    let _e115: Motor = self_1439;
    let _e119: FlatPoint = other_1287;
    let _e131: Motor = self_1439;
    let _e135: FlatPoint = other_1287;
    let _e147: Motor = self_1439;
    let _e151: FlatPoint = other_1287;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.y) * vec4<f32>(_e47.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e59.g1_.z) * vec4<f32>(_e63.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e75.g1_.x, _e78.g0_.x, _e81.g0_.x, _e84.g0_.x) * _e88.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec4<f32>(_e100.g0_.y) * _e104.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e115.g0_.z) * _e119.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e131.g1_.w) * vec4<f32>(_e135.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e147.g0_.x) * _e151.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flat_point_inner_anti_product(self_1440: Motor, other_1288: FlatPoint) -> Flector {
    var self_1441: Motor;
    var other_1289: FlatPoint;

    self_1441 = self_1440;
    other_1289 = other_1288;
    let _e4: Motor = self_1441;
    let _e8: FlatPoint = other_1289;
    let _e11: Motor = self_1441;
    let _e15: FlatPoint = other_1289;
    let _e26: Motor = self_1441;
    let _e30: FlatPoint = other_1289;
    let _e42: Motor = self_1441;
    let _e46: FlatPoint = other_1289;
    let _e58: Motor = self_1441;
    let _e62: FlatPoint = other_1289;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g1_.w) * vec4<f32>(_e46.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e58.g0_.x) * _e62.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flat_point_left_anti_contraction(self_1442: Motor, other_1290: FlatPoint) -> Flector {
    var self_1443: Motor;
    var other_1291: FlatPoint;

    self_1443 = self_1442;
    other_1291 = other_1290;
    let _e4: Motor = self_1443;
    let _e8: FlatPoint = other_1291;
    let _e11: Motor = self_1443;
    let _e15: FlatPoint = other_1291;
    let _e26: Motor = self_1443;
    let _e30: FlatPoint = other_1291;
    let _e42: Motor = self_1443;
    let _e46: FlatPoint = other_1291;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_dipole_geometric_product(self_1444: Motor, other_1292: Dipole) -> Motor {
    var self_1445: Motor;
    var other_1293: Dipole;

    self_1445 = self_1444;
    other_1293 = other_1292;
    let _e4: Motor = self_1445;
    let _e8: Dipole = other_1293;
    let _e11: Dipole = other_1293;
    let _e14: Dipole = other_1293;
    let _e17: Dipole = other_1293;
    let _e30: Motor = self_1445;
    let _e34: Dipole = other_1293;
    let _e37: Dipole = other_1293;
    let _e40: Dipole = other_1293;
    let _e43: Dipole = other_1293;
    let _e57: Motor = self_1445;
    let _e61: Dipole = other_1293;
    let _e64: Dipole = other_1293;
    let _e67: Dipole = other_1293;
    let _e70: Dipole = other_1293;
    let _e82: Motor = self_1445;
    let _e86: Dipole = other_1293;
    let _e89: Dipole = other_1293;
    let _e92: Dipole = other_1293;
    let _e95: Dipole = other_1293;
    let _e109: Motor = self_1445;
    let _e113: Dipole = other_1293;
    let _e116: Dipole = other_1293;
    let _e119: Dipole = other_1293;
    let _e122: Dipole = other_1293;
    let _e136: Motor = self_1445;
    let _e140: Dipole = other_1293;
    let _e143: Dipole = other_1293;
    let _e146: Dipole = other_1293;
    let _e149: Dipole = other_1293;
    let _e163: Motor = self_1445;
    let _e167: Dipole = other_1293;
    let _e170: Dipole = other_1293;
    let _e173: Dipole = other_1293;
    let _e176: Dipole = other_1293;
    let _e188: Motor = self_1445;
    let _e192: Dipole = other_1293;
    let _e195: Dipole = other_1293;
    let _e198: Dipole = other_1293;
    let _e201: Dipole = other_1293;
    let _e215: Motor = self_1445;
    let _e219: Dipole = other_1293;
    let _e222: Dipole = other_1293;
    let _e225: Dipole = other_1293;
    let _e228: Dipole = other_1293;
    let _e241: Motor = self_1445;
    let _e245: Dipole = other_1293;
    let _e248: Dipole = other_1293;
    let _e251: Dipole = other_1293;
    let _e254: Dipole = other_1293;
    let _e268: Motor = self_1445;
    let _e272: Dipole = other_1293;
    let _e275: Dipole = other_1293;
    let _e278: Dipole = other_1293;
    let _e281: Dipole = other_1293;
    let _e293: Motor = self_1445;
    let _e297: Dipole = other_1293;
    let _e300: Dipole = other_1293;
    let _e303: Dipole = other_1293;
    let _e306: Dipole = other_1293;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g1_.x) * vec4<f32>(_e86.g0_.z, _e89.g0_.z, _e92.g0_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.z, _e116.g0_.z, _e119.g0_.x, _e122.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e136.g1_.z) * vec4<f32>(_e140.g0_.y, _e143.g0_.x, _e146.g0_.y, _e149.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e163.g1_.w) * vec4<f32>(_e167.g0_.x, _e170.g0_.y, _e173.g0_.z, _e176.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e188.g0_.x) * vec4<f32>(_e192.g1_.x, _e195.g1_.z, _e198.g1_.y, _e201.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e215.g1_.y) * vec4<f32>(_e219.g1_.z, _e222.g1_.z, _e225.g1_.x, _e228.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e241.g1_.z) * vec4<f32>(_e245.g1_.y, _e248.g1_.x, _e251.g1_.y, _e254.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e268.g1_.w) * vec4<f32>(_e272.g1_.x, _e275.g1_.y, _e278.g1_.z, _e281.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e293.g1_.x) * vec4<f32>(_e297.g1_.x, _e300.g1_.z, _e303.g1_.y, _e306.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn motor_line_into(self_1446: Motor) -> Line {
    var self_1447: Motor;

    self_1447 = self_1446;
    let _e2: Motor = self_1447;
    let _e5: Motor = self_1447;
    let _e8: Motor = self_1447;
    let _e12: Motor = self_1447;
    let _e15: Motor = self_1447;
    let _e18: Motor = self_1447;
    return Line(vec3<f32>(_e2.g0_.x, _e5.g0_.y, _e8.g0_.z), vec3<f32>(_e12.g1_.x, _e15.g1_.y, _e18.g1_.z));
}

fn motor_line_add(self_1448: Motor, other_1294: Line) -> Motor {
    var self_1449: Motor;
    var other_1295: Line;

    self_1449 = self_1448;
    other_1295 = other_1294;
    let _e4: Motor = self_1449;
    let _e6: Line = other_1295;
    let _e9: Line = other_1295;
    let _e12: Line = other_1295;
    let _e15: Line = other_1295;
    let _e26: Motor = self_1449;
    let _e28: Line = other_1295;
    let _e31: Line = other_1295;
    let _e34: Line = other_1295;
    let _e37: Line = other_1295;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ + (vec4<f32>(_e28.g1_.x, _e31.g1_.y, _e34.g1_.z, _e37.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_line_sub(self_1450: Motor, other_1296: Line) -> Motor {
    var self_1451: Motor;
    var other_1297: Line;

    self_1451 = self_1450;
    other_1297 = other_1296;
    let _e4: Motor = self_1451;
    let _e6: Line = other_1297;
    let _e9: Line = other_1297;
    let _e12: Line = other_1297;
    let _e15: Line = other_1297;
    let _e26: Motor = self_1451;
    let _e28: Line = other_1297;
    let _e31: Line = other_1297;
    let _e34: Line = other_1297;
    let _e37: Line = other_1297;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ - (vec4<f32>(_e28.g1_.x, _e31.g1_.y, _e34.g1_.z, _e37.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_line_geometric_anti_product(self_1452: Motor, other_1298: Line) -> Motor {
    var self_1453: Motor;
    var other_1299: Line;

    self_1453 = self_1452;
    other_1299 = other_1298;
    let _e4: Motor = self_1453;
    let _e8: Line = other_1299;
    let _e11: Line = other_1299;
    let _e14: Line = other_1299;
    let _e17: Line = other_1299;
    let _e30: Motor = self_1453;
    let _e34: Line = other_1299;
    let _e37: Line = other_1299;
    let _e40: Line = other_1299;
    let _e43: Line = other_1299;
    let _e57: Motor = self_1453;
    let _e61: Line = other_1299;
    let _e64: Line = other_1299;
    let _e67: Line = other_1299;
    let _e70: Line = other_1299;
    let _e82: Motor = self_1453;
    let _e86: Line = other_1299;
    let _e89: Line = other_1299;
    let _e92: Line = other_1299;
    let _e95: Line = other_1299;
    let _e109: Motor = self_1453;
    let _e113: Line = other_1299;
    let _e116: Line = other_1299;
    let _e119: Line = other_1299;
    let _e122: Line = other_1299;
    let _e135: Motor = self_1453;
    let _e139: Line = other_1299;
    let _e142: Line = other_1299;
    let _e145: Line = other_1299;
    let _e148: Line = other_1299;
    let _e162: Motor = self_1453;
    let _e166: Line = other_1299;
    let _e169: Line = other_1299;
    let _e172: Line = other_1299;
    let _e175: Line = other_1299;
    let _e187: Motor = self_1453;
    let _e191: Line = other_1299;
    let _e194: Line = other_1299;
    let _e197: Line = other_1299;
    let _e200: Line = other_1299;
    let _e214: Motor = self_1453;
    let _e218: Line = other_1299;
    let _e221: Line = other_1299;
    let _e224: Line = other_1299;
    let _e227: Line = other_1299;
    let _e241: Motor = self_1453;
    let _e245: Line = other_1299;
    let _e248: Line = other_1299;
    let _e251: Line = other_1299;
    let _e254: Line = other_1299;
    let _e268: Motor = self_1453;
    let _e272: Line = other_1299;
    let _e275: Line = other_1299;
    let _e278: Line = other_1299;
    let _e281: Line = other_1299;
    let _e293: Motor = self_1453;
    let _e297: Line = other_1299;
    let _e300: Line = other_1299;
    let _e303: Line = other_1299;
    let _e306: Line = other_1299;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.z, _e116.g1_.z, _e119.g1_.x, _e122.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g1_.x, _e145.g1_.y, _e148.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g1_.x, _e169.g1_.y, _e172.g1_.z, _e175.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e187.g1_.x) * vec4<f32>(_e191.g0_.z, _e194.g0_.z, _e197.g0_.y, _e200.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e214.g1_.y) * vec4<f32>(_e218.g0_.z, _e221.g0_.z, _e224.g0_.x, _e227.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e241.g1_.z) * vec4<f32>(_e245.g0_.y, _e248.g0_.x, _e251.g0_.y, _e254.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e268.g1_.w) * vec4<f32>(_e272.g0_.x, _e275.g0_.y, _e278.g0_.z, _e281.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e293.g0_.x) * vec4<f32>(_e297.g1_.x, _e300.g1_.z, _e303.g1_.y, _e306.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_line_right_anti_contraction(self_1454: Motor, other_1300: Line) -> Translator {
    var self_1455: Motor;
    var other_1301: Line;

    self_1455 = self_1454;
    other_1301 = other_1300;
    let _e4: Motor = self_1455;
    let _e8: Line = other_1301;
    let _e20: Motor = self_1455;
    let _e24: Line = other_1301;
    let _e37: Motor = self_1455;
    let _e40: Motor = self_1455;
    let _e43: Motor = self_1455;
    let _e46: Motor = self_1455;
    let _e50: Line = other_1301;
    let _e53: Line = other_1301;
    let _e56: Line = other_1301;
    let _e59: Line = other_1301;
    return Translator(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.w, _e40.g1_.w, _e43.g1_.w, _e46.g0_.x) * vec4<f32>(_e50.g0_.x, _e53.g0_.y, _e56.g0_.z, _e59.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn motor_line_anti_scalar_product(self_1456: Motor, other_1302: Line) -> AntiScalar {
    var self_1457: Motor;
    var other_1303: Line;

    self_1457 = self_1456;
    other_1303 = other_1302;
    let _e5: Motor = self_1457;
    let _e8: Line = other_1303;
    let _e13: Motor = self_1457;
    let _e16: Line = other_1303;
    let _e21: Motor = self_1457;
    let _e24: Line = other_1303;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_circle_geometric_product(self_1458: Motor, other_1304: Circle) -> Flector {
    var self_1459: Motor;
    var other_1305: Circle;

    self_1459 = self_1458;
    other_1305 = other_1304;
    let _e4: Motor = self_1459;
    let _e8: Circle = other_1305;
    let _e19: Motor = self_1459;
    let _e23: Circle = other_1305;
    let _e35: Motor = self_1459;
    let _e39: Circle = other_1305;
    let _e51: Motor = self_1459;
    let _e54: Circle = other_1305;
    let _e65: Motor = self_1459;
    let _e69: Circle = other_1305;
    let _e80: Motor = self_1459;
    let _e84: Circle = other_1305;
    let _e96: Motor = self_1459;
    let _e100: Circle = other_1305;
    let _e112: Motor = self_1459;
    let _e116: Circle = other_1305;
    let _e120: Motor = self_1459;
    let _e123: Circle = other_1305;
    return Flector((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((_e51.g0_.xxxw * _e54.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((vec4<f32>(_e65.g1_.x) * _e69.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0)) + ((vec4<f32>(_e80.g1_.y) * _e84.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e96.g1_.z) * _e100.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) - (vec4<f32>(_e112.g1_.w) * _e116.g0_)) + ((_e120.g0_.xyzx * _e123.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_circle_outer_product(self_1460: Motor, other_1306: Circle) -> Plane {
    var self_1461: Motor;
    var other_1307: Circle;

    self_1461 = self_1460;
    other_1307 = other_1306;
    let _e6: Motor = self_1461;
    let _e10: Circle = other_1307;
    return Plane((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.w) * _e10.g0_)));
}

fn motor_circle_right_anti_contraction(self_1462: Motor, other_1308: Circle) -> Translator {
    var self_1463: Motor;
    var other_1309: Circle;

    self_1463 = self_1462;
    other_1309 = other_1308;
    let _e4: Motor = self_1463;
    let _e8: Circle = other_1309;
    let _e20: Motor = self_1463;
    let _e24: Circle = other_1309;
    let _e37: Motor = self_1463;
    let _e40: Motor = self_1463;
    let _e43: Motor = self_1463;
    let _e46: Motor = self_1463;
    let _e50: Circle = other_1309;
    let _e53: Circle = other_1309;
    let _e56: Circle = other_1309;
    let _e59: Circle = other_1309;
    return Translator(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.w, _e40.g1_.w, _e43.g1_.w, _e46.g0_.x) * vec4<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z, _e59.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn motor_circle_anti_scalar_product(self_1464: Motor, other_1310: Circle) -> AntiScalar {
    var self_1465: Motor;
    var other_1311: Circle;

    self_1465 = self_1464;
    other_1311 = other_1310;
    let _e5: Motor = self_1465;
    let _e8: Circle = other_1311;
    let _e13: Motor = self_1465;
    let _e16: Circle = other_1311;
    let _e21: Motor = self_1465;
    let _e24: Circle = other_1311;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn motor_plane_regressive_product(self_1466: Motor, other_1312: Plane) -> Flector {
    var self_1467: Motor;
    var other_1313: Plane;

    self_1467 = self_1466;
    other_1313 = other_1312;
    let _e4: Motor = self_1467;
    let _e8: Plane = other_1313;
    let _e19: Motor = self_1467;
    let _e23: Plane = other_1313;
    let _e35: Motor = self_1467;
    let _e39: Plane = other_1313;
    let _e51: Motor = self_1467;
    let _e55: Plane = other_1313;
    let _e67: Motor = self_1467;
    let _e70: Motor = self_1467;
    let _e73: Motor = self_1467;
    let _e76: Motor = self_1467;
    let _e80: Plane = other_1313;
    let _e93: Motor = self_1467;
    let _e97: Plane = other_1313;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e93.g0_.w) * _e97.g0_));
}

fn motor_plane_geometric_anti_product(self_1468: Motor, other_1314: Plane) -> Flector {
    var self_1469: Motor;
    var other_1315: Plane;

    self_1469 = self_1468;
    other_1315 = other_1314;
    let _e4: Motor = self_1469;
    let _e8: Plane = other_1315;
    let _e19: Motor = self_1469;
    let _e23: Plane = other_1315;
    let _e35: Motor = self_1469;
    let _e39: Plane = other_1315;
    let _e51: Motor = self_1469;
    let _e55: Plane = other_1315;
    let _e67: Motor = self_1469;
    let _e71: Plane = other_1315;
    let _e82: Motor = self_1469;
    let _e85: Motor = self_1469;
    let _e88: Motor = self_1469;
    let _e91: Motor = self_1469;
    let _e95: Plane = other_1315;
    let _e108: Motor = self_1469;
    let _e112: Plane = other_1315;
    let _e123: Motor = self_1469;
    let _e127: Plane = other_1315;
    let _e139: Motor = self_1469;
    let _e143: Plane = other_1315;
    let _e147: Motor = self_1469;
    let _e151: Plane = other_1315;
    let _e164: Motor = self_1469;
    let _e168: Plane = other_1315;
    let _e181: Motor = self_1469;
    let _e184: Motor = self_1469;
    let _e187: Motor = self_1469;
    let _e190: Motor = self_1469;
    let _e194: Plane = other_1315;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g1_.w) * _e71.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x, _e85.g1_.x, _e88.g1_.x, _e91.g0_.x) * _e95.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e108.g0_.y) * _e112.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e123.g0_.z) * _e127.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e139.g0_.w) * _e143.g0_)) + ((vec4<f32>(_e147.g1_.y) * vec4<f32>(_e151.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.z) * vec4<f32>(_e168.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e181.g0_.x, _e184.g0_.x, _e187.g0_.x, _e190.g1_.x) * _e194.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_plane_left_anti_contraction(self_1470: Motor, other_1316: Plane) -> Plane {
    var self_1471: Motor;
    var other_1317: Plane;

    self_1471 = self_1470;
    other_1317 = other_1316;
    let _e4: Motor = self_1471;
    let _e8: Plane = other_1317;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_sphere_geometric_product(self_1472: Motor, other_1318: Sphere) -> Rotor {
    var self_1473: Motor;
    var other_1319: Sphere;

    self_1473 = self_1472;
    other_1319 = other_1318;
    let _e4: Motor = self_1473;
    let _e6: Sphere = other_1319;
    return Rotor((_e4.g1_ * vec4<f32>(_e6.g0_.x)));
}

fn motor_sphere_outer_product(self_1474: Motor, other_1320: Sphere) -> AntiScalar {
    var self_1475: Motor;
    var other_1321: Sphere;

    self_1475 = self_1474;
    other_1321 = other_1320;
    let _e4: Motor = self_1475;
    let _e7: Sphere = other_1321;
    return AntiScalar((_e4.g1_.w * _e7.g0_.x));
}

fn motor_sphere_left_anti_contraction(self_1476: Motor, other_1322: Sphere) -> Sphere {
    var self_1477: Motor;
    var other_1323: Sphere;

    self_1477 = self_1476;
    other_1323 = other_1322;
    let _e4: Motor = self_1477;
    let _e8: Sphere = other_1323;
    let _e11: Motor = self_1477;
    let _e15: Sphere = other_1323;
    return Sphere((vec2<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn motor_motor_add(self_1478: Motor, other_1324: Motor) -> Motor {
    var self_1479: Motor;
    var other_1325: Motor;

    self_1479 = self_1478;
    other_1325 = other_1324;
    let _e4: Motor = self_1479;
    let _e6: Motor = other_1325;
    let _e9: Motor = self_1479;
    let _e11: Motor = other_1325;
    return Motor((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn motor_motor_sub(self_1480: Motor, other_1326: Motor) -> Motor {
    var self_1481: Motor;
    var other_1327: Motor;

    self_1481 = self_1480;
    other_1327 = other_1326;
    let _e4: Motor = self_1481;
    let _e6: Motor = other_1327;
    let _e9: Motor = self_1481;
    let _e11: Motor = other_1327;
    return Motor((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn motor_motor_mul(self_1482: Motor, other_1328: Motor) -> Motor {
    var self_1483: Motor;
    var other_1329: Motor;

    self_1483 = self_1482;
    other_1329 = other_1328;
    let _e4: Motor = self_1483;
    let _e6: Motor = other_1329;
    let _e9: Motor = self_1483;
    let _e11: Motor = other_1329;
    return Motor((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn motor_motor_div(self_1484: Motor, other_1330: Motor) -> Motor {
    var self_1485: Motor;
    var other_1331: Motor;

    self_1485 = self_1484;
    other_1331 = other_1330;
    let _e4: Motor = self_1485;
    let _e7: Motor = self_1485;
    let _e10: Motor = self_1485;
    let _e13: Motor = self_1485;
    let _e23: Motor = other_1331;
    let _e26: Motor = other_1331;
    let _e29: Motor = other_1331;
    let _e32: Motor = other_1331;
    let _e43: Motor = self_1485;
    let _e46: Motor = self_1485;
    let _e49: Motor = self_1485;
    let _e52: Motor = self_1485;
    let _e62: Motor = other_1331;
    let _e65: Motor = other_1331;
    let _e68: Motor = other_1331;
    let _e71: Motor = other_1331;
    return Motor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn motor_motor_regressive_product(self_1486: Motor, other_1332: Motor) -> Motor {
    var self_1487: Motor;
    var other_1333: Motor;

    self_1487 = self_1486;
    other_1333 = other_1332;
    let _e4: Motor = self_1487;
    let _e8: Motor = other_1333;
    let _e11: Motor = self_1487;
    let _e14: Motor = other_1333;
    let _e25: Motor = self_1487;
    let _e29: Motor = other_1333;
    let _e41: Motor = self_1487;
    let _e45: Motor = other_1333;
    let _e58: Motor = self_1487;
    let _e62: Motor = other_1333;
    let _e66: Motor = self_1487;
    let _e70: Motor = other_1333;
    let _e82: Motor = self_1487;
    let _e86: Motor = other_1333;
    let _e98: Motor = self_1487;
    let _e102: Motor = other_1333;
    let _e114: Motor = self_1487;
    let _e118: Motor = other_1333;
    let _e130: Motor = self_1487;
    let _e134: Motor = other_1333;
    return Motor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((((((vec4<f32>(_e25.g0_.y) * vec4<f32>(_e29.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e41.g0_.z) * vec4<f32>(_e45.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e58.g0_.w) * _e62.g1_)) + ((vec4<f32>(_e66.g1_.x) * _e70.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e82.g1_.y) * _e86.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e98.g1_.z) * _e102.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e114.g1_.w) * vec4<f32>(_e118.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e130.g0_.x) * vec4<f32>(_e134.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_motor_geometric_anti_product(self_1488: Motor, other_1334: Motor) -> Motor {
    var self_1489: Motor;
    var other_1335: Motor;

    self_1489 = self_1488;
    other_1335 = other_1334;
    let _e4: Motor = self_1489;
    let _e8: Motor = other_1335;
    let _e20: Motor = self_1489;
    let _e24: Motor = other_1335;
    let _e37: Motor = self_1489;
    let _e41: Motor = other_1335;
    let _e54: Motor = self_1489;
    let _e58: Motor = other_1335;
    let _e62: Motor = self_1489;
    let _e66: Motor = other_1335;
    let _e78: Motor = self_1489;
    let _e82: Motor = other_1335;
    let _e95: Motor = self_1489;
    let _e99: Motor = other_1335;
    let _e112: Motor = self_1489;
    let _e116: Motor = other_1335;
    let _e120: Motor = self_1489;
    let _e124: Motor = other_1335;
    let _e137: Motor = self_1489;
    let _e141: Motor = other_1335;
    let _e154: Motor = self_1489;
    let _e158: Motor = other_1335;
    let _e171: Motor = self_1489;
    let _e175: Motor = other_1335;
    return Motor((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e54.g0_.w) * _e58.g0_)), (((((((((vec4<f32>(_e62.g0_.x) * _e66.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e78.g0_.y) * _e82.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e95.g0_.z) * _e99.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e112.g0_.w) * _e116.g1_)) + ((vec4<f32>(_e120.g1_.x) * _e124.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e137.g1_.y) * _e141.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e154.g1_.z) * _e158.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e171.g1_.w) * _e175.g0_)));
}

fn motor_motor_inner_anti_product(self_1490: Motor, other_1336: Motor) -> Motor {
    var self_1491: Motor;
    var other_1337: Motor;

    self_1491 = self_1490;
    other_1337 = other_1336;
    let _e4: Motor = self_1491;
    let _e8: Motor = other_1337;
    let _e19: Motor = self_1491;
    let _e23: Motor = other_1337;
    let _e35: Motor = self_1491;
    let _e39: Motor = other_1337;
    let _e43: Motor = self_1491;
    let _e47: Motor = other_1337;
    let _e59: Motor = self_1491;
    let _e63: Motor = other_1337;
    let _e66: Motor = self_1491;
    let _e70: Motor = other_1337;
    let _e82: Motor = self_1491;
    let _e86: Motor = other_1337;
    let _e98: Motor = self_1491;
    let _e102: Motor = other_1337;
    let _e114: Motor = self_1491;
    let _e118: Motor = other_1337;
    let _e122: Motor = self_1491;
    let _e125: Motor = other_1337;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((((((vec4<f32>(_e59.g0_.w) * _e63.g1_) + ((vec4<f32>(_e66.g1_.x) * vec4<f32>(_e70.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e82.g1_.y) * vec4<f32>(_e86.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e98.g1_.z) * vec4<f32>(_e102.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e114.g1_.w) * _e118.g0_)) + ((_e122.g0_.xyzx * _e125.g1_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_motor_left_anti_contraction(self_1492: Motor, other_1338: Motor) -> Motor {
    var self_1493: Motor;
    var other_1339: Motor;

    self_1493 = self_1492;
    other_1339 = other_1338;
    let _e4: Motor = self_1493;
    let _e8: Motor = other_1339;
    let _e20: Motor = self_1493;
    let _e24: Motor = other_1339;
    let _e37: Motor = self_1493;
    let _e41: Motor = other_1339;
    let _e45: Motor = self_1493;
    let _e49: Motor = other_1339;
    let _e62: Motor = self_1493;
    let _e66: Motor = other_1339;
    let _e69: Motor = self_1493;
    let _e72: Motor = other_1339;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e62.g0_.w) * _e66.g1_) + ((_e69.g0_.xyzx * _e72.g1_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_motor_right_anti_contraction(self_1494: Motor, other_1340: Motor) -> Motor {
    var self_1495: Motor;
    var other_1341: Motor;

    self_1495 = self_1494;
    other_1341 = other_1340;
    let _e4: Motor = self_1495;
    let _e8: Motor = other_1341;
    let _e19: Motor = self_1495;
    let _e23: Motor = other_1341;
    let _e35: Motor = self_1495;
    let _e39: Motor = other_1341;
    let _e51: Motor = self_1495;
    let _e55: Motor = other_1341;
    let _e67: Motor = self_1495;
    let _e71: Motor = other_1341;
    let _e74: Motor = self_1495;
    let _e77: Motor = other_1341;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e67.g1_.w) * _e71.g0_) + ((_e74.g1_.xyzx * _e77.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_motor_anti_scalar_product(self_1496: Motor, other_1342: Motor) -> AntiScalar {
    var self_1497: Motor;
    var other_1343: Motor;

    self_1497 = self_1496;
    other_1343 = other_1342;
    let _e5: Motor = self_1497;
    let _e8: Motor = other_1343;
    let _e13: Motor = self_1497;
    let _e16: Motor = other_1343;
    let _e21: Motor = self_1497;
    let _e24: Motor = other_1343;
    let _e29: Motor = self_1497;
    let _e32: Motor = other_1343;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_rotor_into(self_1498: Motor) -> Rotor {
    var self_1499: Motor;

    self_1499 = self_1498;
    let _e2: Motor = self_1499;
    return Rotor(_e2.g0_);
}

fn motor_rotor_add(self_1500: Motor, other_1344: Rotor) -> Motor {
    var self_1501: Motor;
    var other_1345: Rotor;

    self_1501 = self_1500;
    other_1345 = other_1344;
    let _e4: Motor = self_1501;
    let _e6: Rotor = other_1345;
    let _e9: Motor = self_1501;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn motor_rotor_sub(self_1502: Motor, other_1346: Rotor) -> Motor {
    var self_1503: Motor;
    var other_1347: Rotor;

    self_1503 = self_1502;
    other_1347 = other_1346;
    let _e4: Motor = self_1503;
    let _e6: Rotor = other_1347;
    let _e9: Motor = self_1503;
    return Motor((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn motor_rotor_regressive_product(self_1504: Motor, other_1348: Rotor) -> Motor {
    var self_1505: Motor;
    var other_1349: Rotor;

    self_1505 = self_1504;
    other_1349 = other_1348;
    let _e4: Motor = self_1505;
    let _e8: Rotor = other_1349;
    let _e11: Motor = self_1505;
    let _e14: Rotor = other_1349;
    let _e25: Motor = self_1505;
    let _e29: Rotor = other_1349;
    let _e40: Motor = self_1505;
    let _e44: Rotor = other_1349;
    let _e56: Motor = self_1505;
    let _e60: Rotor = other_1349;
    let _e72: Motor = self_1505;
    let _e76: Rotor = other_1349;
    return Motor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e25.g1_.y) * _e29.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e40.g1_.z) * _e44.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e56.g1_.w) * vec4<f32>(_e60.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e72.g1_.x) * _e76.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_rotor_geometric_anti_product(self_1506: Motor, other_1350: Rotor) -> Motor {
    var self_1507: Motor;
    var other_1351: Rotor;

    self_1507 = self_1506;
    other_1351 = other_1350;
    let _e4: Motor = self_1507;
    let _e8: Rotor = other_1351;
    let _e20: Motor = self_1507;
    let _e24: Rotor = other_1351;
    let _e37: Motor = self_1507;
    let _e41: Rotor = other_1351;
    let _e54: Motor = self_1507;
    let _e58: Rotor = other_1351;
    let _e62: Motor = self_1507;
    let _e66: Rotor = other_1351;
    let _e78: Motor = self_1507;
    let _e82: Rotor = other_1351;
    let _e95: Motor = self_1507;
    let _e99: Rotor = other_1351;
    let _e112: Motor = self_1507;
    let _e116: Rotor = other_1351;
    return Motor((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e54.g0_.w) * _e58.g0_)), (((((vec4<f32>(_e62.g1_.x) * _e66.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e78.g1_.y) * _e82.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e95.g1_.z) * _e99.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e112.g1_.w) * _e116.g0_)));
}

fn motor_rotor_inner_anti_product(self_1508: Motor, other_1352: Rotor) -> Motor {
    var self_1509: Motor;
    var other_1353: Rotor;

    self_1509 = self_1508;
    other_1353 = other_1352;
    let _e4: Motor = self_1509;
    let _e8: Rotor = other_1353;
    let _e19: Motor = self_1509;
    let _e23: Rotor = other_1353;
    let _e35: Motor = self_1509;
    let _e39: Rotor = other_1353;
    let _e43: Motor = self_1509;
    let _e47: Rotor = other_1353;
    let _e59: Motor = self_1509;
    let _e63: Rotor = other_1353;
    let _e66: Motor = self_1509;
    let _e69: Rotor = other_1353;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e59.g1_.w) * _e63.g0_) + ((_e66.g1_.xyzx * _e69.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_rotor_left_anti_contraction(self_1510: Motor, other_1354: Rotor) -> Rotor {
    var self_1511: Motor;
    var other_1355: Rotor;

    self_1511 = self_1510;
    other_1355 = other_1354;
    let _e4: Motor = self_1511;
    let _e8: Rotor = other_1355;
    let _e20: Motor = self_1511;
    let _e24: Rotor = other_1355;
    let _e37: Motor = self_1511;
    let _e41: Rotor = other_1355;
    let _e45: Motor = self_1511;
    let _e49: Rotor = other_1355;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_rotor_right_anti_contraction(self_1512: Motor, other_1356: Rotor) -> Motor {
    var self_1513: Motor;
    var other_1357: Rotor;

    self_1513 = self_1512;
    other_1357 = other_1356;
    let _e4: Motor = self_1513;
    let _e8: Rotor = other_1357;
    let _e19: Motor = self_1513;
    let _e23: Rotor = other_1357;
    let _e35: Motor = self_1513;
    let _e39: Rotor = other_1357;
    let _e51: Motor = self_1513;
    let _e55: Rotor = other_1357;
    let _e67: Motor = self_1513;
    let _e71: Rotor = other_1357;
    let _e74: Motor = self_1513;
    let _e77: Rotor = other_1357;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e67.g1_.w) * _e71.g0_) + ((_e74.g1_.xyzx * _e77.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_rotor_anti_scalar_product(self_1514: Motor, other_1358: Rotor) -> AntiScalar {
    var self_1515: Motor;
    var other_1359: Rotor;

    self_1515 = self_1514;
    other_1359 = other_1358;
    let _e5: Motor = self_1515;
    let _e8: Rotor = other_1359;
    let _e13: Motor = self_1515;
    let _e16: Rotor = other_1359;
    let _e21: Motor = self_1515;
    let _e24: Rotor = other_1359;
    let _e29: Motor = self_1515;
    let _e32: Rotor = other_1359;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_translator_into(self_1516: Motor) -> Translator {
    var self_1517: Motor;

    self_1517 = self_1516;
    let _e2: Motor = self_1517;
    let _e5: Motor = self_1517;
    let _e8: Motor = self_1517;
    let _e11: Motor = self_1517;
    return Translator(vec4<f32>(_e2.g1_.x, _e5.g1_.y, _e8.g1_.z, _e11.g0_.w));
}

fn motor_translator_add(self_1518: Motor, other_1360: Translator) -> Motor {
    var self_1519: Motor;
    var other_1361: Translator;

    self_1519 = self_1518;
    other_1361 = other_1360;
    let _e4: Motor = self_1519;
    let _e6: Translator = other_1361;
    let _e16: Motor = self_1519;
    let _e18: Translator = other_1361;
    return Motor((_e4.g0_ + (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ + (_e18.g0_.xyzx * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_translator_sub(self_1520: Motor, other_1362: Translator) -> Motor {
    var self_1521: Motor;
    var other_1363: Translator;

    self_1521 = self_1520;
    other_1363 = other_1362;
    let _e4: Motor = self_1521;
    let _e6: Translator = other_1363;
    let _e16: Motor = self_1521;
    let _e18: Translator = other_1363;
    return Motor((_e4.g0_ - (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ - (_e18.g0_.xyzx * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn motor_translator_regressive_product(self_1522: Motor, other_1364: Translator) -> Motor {
    var self_1523: Motor;
    var other_1365: Translator;

    self_1523 = self_1522;
    other_1365 = other_1364;
    let _e4: Motor = self_1523;
    let _e6: Translator = other_1365;
    let _e11: Motor = self_1523;
    let _e15: Translator = other_1365;
    let _e27: Motor = self_1523;
    let _e31: Translator = other_1365;
    let _e44: Motor = self_1523;
    let _e48: Translator = other_1365;
    let _e60: Motor = self_1523;
    let _e64: Translator = other_1365;
    let _e76: Motor = self_1523;
    let _e80: Translator = other_1365;
    let _e92: Motor = self_1523;
    let _e96: Translator = other_1365;
    let _e108: Motor = self_1523;
    let _e111: Translator = other_1365;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.z) * vec4<f32>(_e80.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn motor_translator_geometric_anti_product(self_1524: Motor, other_1366: Translator) -> Motor {
    var self_1525: Motor;
    var other_1367: Translator;

    self_1525 = self_1524;
    other_1367 = other_1366;
    let _e4: Motor = self_1525;
    let _e6: Translator = other_1367;
    let _e11: Motor = self_1525;
    let _e15: Translator = other_1367;
    let _e27: Motor = self_1525;
    let _e31: Translator = other_1367;
    let _e44: Motor = self_1525;
    let _e48: Translator = other_1367;
    let _e59: Motor = self_1525;
    let _e63: Translator = other_1367;
    let _e75: Motor = self_1525;
    let _e79: Translator = other_1367;
    let _e91: Motor = self_1525;
    let _e95: Translator = other_1367;
    let _e107: Motor = self_1525;
    let _e110: Motor = self_1525;
    let _e113: Motor = self_1525;
    let _e116: Motor = self_1525;
    let _e120: Translator = other_1367;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * _e15.g0_.zzxy) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e27.g0_.z) * _e31.g0_.yxyz) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g0_.w) * _e48.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.y) * vec4<f32>(_e63.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e75.g1_.z) * vec4<f32>(_e79.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e91.g1_.w) * vec4<f32>(_e95.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e107.g1_.x, _e110.g0_.x, _e113.g0_.x, _e116.g0_.x) * _e120.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_translator_inner_anti_product(self_1526: Motor, other_1368: Translator) -> Motor {
    var self_1527: Motor;
    var other_1369: Translator;

    self_1527 = self_1526;
    other_1369 = other_1368;
    let _e4: Motor = self_1527;
    let _e6: Translator = other_1369;
    let _e11: Motor = self_1527;
    let _e15: Translator = other_1369;
    let _e26: Motor = self_1527;
    let _e30: Translator = other_1369;
    let _e42: Motor = self_1527;
    let _e46: Translator = other_1369;
    let _e58: Motor = self_1527;
    let _e61: Motor = self_1527;
    let _e64: Motor = self_1527;
    let _e67: Motor = self_1527;
    let _e71: Translator = other_1369;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (((((vec4<f32>(_e11.g1_.x) * vec4<f32>(_e15.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g1_.y) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e42.g1_.z) * vec4<f32>(_e46.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e58.g0_.w, _e61.g0_.w, _e64.g0_.w, _e67.g1_.w) * _e71.g0_)));
}

fn motor_translator_left_anti_contraction(self_1528: Motor, other_1370: Translator) -> Translator {
    var self_1529: Motor;
    var other_1371: Translator;

    self_1529 = self_1528;
    other_1371 = other_1370;
    let _e4: Motor = self_1529;
    let _e8: Translator = other_1371;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_translator_right_anti_contraction(self_1530: Motor, other_1372: Translator) -> Motor {
    var self_1531: Motor;
    var other_1373: Translator;

    self_1531 = self_1530;
    other_1373 = other_1372;
    let _e4: Motor = self_1531;
    let _e6: Translator = other_1373;
    let _e11: Motor = self_1531;
    let _e13: Translator = other_1373;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec4<f32>(_e13.g0_.w)));
}

fn motor_translator_anti_scalar_product(self_1532: Motor, other_1374: Translator) -> AntiScalar {
    var self_1533: Motor;
    var other_1375: Translator;

    self_1533 = self_1532;
    other_1375 = other_1374;
    let _e4: Motor = self_1533;
    let _e7: Translator = other_1375;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn motor_flector_regressive_product(self_1534: Motor, other_1376: Flector) -> Flector {
    var self_1535: Motor;
    var other_1377: Flector;

    self_1535 = self_1534;
    other_1377 = other_1376;
    let _e4: Motor = self_1535;
    let _e8: Flector = other_1377;
    let _e19: Motor = self_1535;
    let _e23: Flector = other_1377;
    let _e35: Motor = self_1535;
    let _e39: Flector = other_1377;
    let _e43: Motor = self_1535;
    let _e47: Flector = other_1377;
    let _e59: Motor = self_1535;
    let _e63: Flector = other_1377;
    let _e75: Motor = self_1535;
    let _e78: Motor = self_1535;
    let _e81: Motor = self_1535;
    let _e84: Motor = self_1535;
    let _e88: Flector = other_1377;
    let _e101: Motor = self_1535;
    let _e105: Flector = other_1377;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.y) * _e47.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e59.g1_.z) * _e63.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e75.g0_.x, _e78.g1_.x, _e81.g1_.x, _e84.g0_.x) * _e88.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e101.g0_.w) * _e105.g1_));
}

fn motor_flector_geometric_anti_product(self_1536: Motor, other_1378: Flector) -> Flector {
    var self_1537: Motor;
    var other_1379: Flector;

    self_1537 = self_1536;
    other_1379 = other_1378;
    let _e4: Motor = self_1537;
    let _e8: Flector = other_1379;
    let _e11: Flector = other_1379;
    let _e14: Flector = other_1379;
    let _e17: Flector = other_1379;
    let _e30: Motor = self_1537;
    let _e34: Flector = other_1379;
    let _e37: Flector = other_1379;
    let _e40: Flector = other_1379;
    let _e43: Flector = other_1379;
    let _e57: Motor = self_1537;
    let _e61: Flector = other_1379;
    let _e64: Flector = other_1379;
    let _e67: Flector = other_1379;
    let _e70: Flector = other_1379;
    let _e84: Motor = self_1537;
    let _e88: Flector = other_1379;
    let _e92: Motor = self_1537;
    let _e96: Flector = other_1379;
    let _e99: Flector = other_1379;
    let _e102: Flector = other_1379;
    let _e105: Flector = other_1379;
    let _e118: Motor = self_1537;
    let _e122: Flector = other_1379;
    let _e125: Flector = other_1379;
    let _e128: Flector = other_1379;
    let _e131: Flector = other_1379;
    let _e144: Motor = self_1537;
    let _e148: Flector = other_1379;
    let _e159: Motor = self_1537;
    let _e163: Flector = other_1379;
    let _e166: Flector = other_1379;
    let _e169: Flector = other_1379;
    let _e172: Flector = other_1379;
    let _e185: Motor = self_1537;
    let _e189: Flector = other_1379;
    let _e192: Flector = other_1379;
    let _e195: Flector = other_1379;
    let _e198: Flector = other_1379;
    let _e211: Motor = self_1537;
    let _e215: Flector = other_1379;
    let _e218: Flector = other_1379;
    let _e221: Flector = other_1379;
    let _e224: Flector = other_1379;
    let _e238: Motor = self_1537;
    let _e242: Flector = other_1379;
    let _e245: Flector = other_1379;
    let _e248: Flector = other_1379;
    let _e251: Flector = other_1379;
    let _e265: Motor = self_1537;
    let _e269: Flector = other_1379;
    let _e273: Motor = self_1537;
    let _e277: Flector = other_1379;
    let _e290: Motor = self_1537;
    let _e294: Flector = other_1379;
    let _e307: Motor = self_1537;
    let _e311: Flector = other_1379;
    let _e323: Motor = self_1537;
    let _e327: Flector = other_1379;
    return Flector((((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e84.g0_.w) * _e88.g0_)) + ((vec4<f32>(_e92.g1_.y) * vec4<f32>(_e96.g1_.z, _e99.g0_.w, _e102.g1_.x, _e105.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e118.g1_.z) * vec4<f32>(_e122.g1_.y, _e125.g1_.x, _e128.g0_.w, _e131.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e144.g1_.w) * _e148.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e159.g1_.x) * vec4<f32>(_e163.g0_.w, _e166.g1_.z, _e169.g1_.y, _e172.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((((vec4<f32>(_e185.g0_.x) * vec4<f32>(_e189.g0_.w, _e192.g1_.z, _e195.g1_.y, _e198.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e211.g0_.y) * vec4<f32>(_e215.g1_.z, _e218.g0_.w, _e221.g1_.x, _e224.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e238.g0_.z) * vec4<f32>(_e242.g1_.y, _e245.g1_.x, _e248.g0_.w, _e251.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e265.g0_.w) * _e269.g1_)) + ((vec4<f32>(_e273.g1_.y) * vec4<f32>(_e277.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e290.g1_.z) * vec4<f32>(_e294.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e307.g1_.w) * vec4<f32>(_e311.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e323.g1_.x) * vec4<f32>(_e327.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_inner_anti_product(self_1538: Motor, other_1380: Flector) -> Flector {
    var self_1539: Motor;
    var other_1381: Flector;

    self_1539 = self_1538;
    other_1381 = other_1380;
    let _e4: Motor = self_1539;
    let _e8: Flector = other_1381;
    let _e11: Motor = self_1539;
    let _e14: Flector = other_1381;
    let _e25: Motor = self_1539;
    let _e29: Flector = other_1381;
    let _e32: Flector = other_1381;
    let _e35: Flector = other_1381;
    let _e38: Flector = other_1381;
    let _e51: Motor = self_1539;
    let _e55: Flector = other_1381;
    let _e58: Flector = other_1381;
    let _e61: Flector = other_1381;
    let _e64: Flector = other_1381;
    let _e78: Motor = self_1539;
    let _e82: Flector = other_1381;
    let _e85: Flector = other_1381;
    let _e88: Flector = other_1381;
    let _e91: Flector = other_1381;
    let _e105: Motor = self_1539;
    let _e109: Flector = other_1381;
    let _e113: Motor = self_1539;
    let _e117: Flector = other_1381;
    let _e130: Motor = self_1539;
    let _e134: Flector = other_1381;
    let _e147: Motor = self_1539;
    let _e151: Flector = other_1381;
    let _e163: Motor = self_1539;
    let _e167: Flector = other_1381;
    return Flector(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g1_.wwwx * _e14.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((((((vec4<f32>(_e25.g0_.x) * vec4<f32>(_e29.g0_.w, _e32.g1_.z, _e35.g1_.y, _e38.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e51.g0_.y) * vec4<f32>(_e55.g1_.z, _e58.g0_.w, _e61.g1_.x, _e64.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e78.g0_.z) * vec4<f32>(_e82.g1_.y, _e85.g1_.x, _e88.g0_.w, _e91.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e105.g0_.w) * _e109.g1_)) + ((vec4<f32>(_e113.g1_.y) * vec4<f32>(_e117.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e130.g1_.z) * vec4<f32>(_e134.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e147.g1_.w) * vec4<f32>(_e151.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e163.g1_.x) * vec4<f32>(_e167.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_left_anti_contraction(self_1540: Motor, other_1382: Flector) -> Flector {
    var self_1541: Motor;
    var other_1383: Flector;

    self_1541 = self_1540;
    other_1383 = other_1382;
    let _e4: Motor = self_1541;
    let _e8: Flector = other_1383;
    let _e11: Motor = self_1541;
    let _e15: Flector = other_1383;
    let _e26: Motor = self_1541;
    let _e30: Flector = other_1383;
    let _e42: Motor = self_1541;
    let _e46: Flector = other_1383;
    let _e50: Motor = self_1541;
    let _e54: Flector = other_1383;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e42.g0_.w) * _e46.g1_)) + ((vec4<f32>(_e50.g0_.x) * _e54.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_dilation_geometric_product(self_1542: Motor, other_1384: Dilation) -> Flector {
    var self_1543: Motor;
    var other_1385: Dilation;

    self_1543 = self_1542;
    other_1385 = other_1384;
    let _e4: Motor = self_1543;
    let _e8: Dilation = other_1385;
    let _e11: Dilation = other_1385;
    let _e14: Dilation = other_1385;
    let _e17: Dilation = other_1385;
    let _e29: Motor = self_1543;
    let _e33: Dilation = other_1385;
    let _e36: Dilation = other_1385;
    let _e39: Dilation = other_1385;
    let _e42: Dilation = other_1385;
    let _e55: Motor = self_1543;
    let _e59: Dilation = other_1385;
    let _e62: Dilation = other_1385;
    let _e65: Dilation = other_1385;
    let _e68: Dilation = other_1385;
    let _e81: Motor = self_1543;
    let _e84: Dilation = other_1385;
    let _e87: Dilation = other_1385;
    let _e90: Dilation = other_1385;
    let _e93: Dilation = other_1385;
    let _e106: Motor = self_1543;
    let _e110: Dilation = other_1385;
    let _e113: Dilation = other_1385;
    let _e116: Dilation = other_1385;
    let _e119: Dilation = other_1385;
    let _e131: Motor = self_1543;
    let _e135: Dilation = other_1385;
    let _e138: Dilation = other_1385;
    let _e141: Dilation = other_1385;
    let _e144: Dilation = other_1385;
    let _e157: Motor = self_1543;
    let _e161: Dilation = other_1385;
    let _e164: Dilation = other_1385;
    let _e167: Dilation = other_1385;
    let _e170: Dilation = other_1385;
    let _e183: Motor = self_1543;
    let _e187: Dilation = other_1385;
    let _e190: Dilation = other_1385;
    let _e193: Dilation = other_1385;
    let _e196: Dilation = other_1385;
    let _e202: Motor = self_1543;
    let _e205: Dilation = other_1385;
    let _e208: Dilation = other_1385;
    let _e211: Dilation = other_1385;
    let _e214: Dilation = other_1385;
    return Flector((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.z, _e17.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e29.g1_.y) * vec4<f32>(_e33.g0_.z, _e36.g0_.z, _e39.g0_.z, _e42.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g1_.z) * vec4<f32>(_e59.g0_.z, _e62.g0_.z, _e65.g0_.z, _e68.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((_e81.g0_.xxxw * vec4<f32>(_e84.g0_.x, _e87.g0_.x, _e90.g0_.x, _e93.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((vec4<f32>(_e106.g1_.x) * vec4<f32>(_e110.g0_.y, _e113.g0_.y, _e116.g0_.x, _e119.g0_.y)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e131.g1_.y) * vec4<f32>(_e135.g0_.y, _e138.g0_.y, _e141.g1_.x, _e144.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e157.g1_.z) * vec4<f32>(_e161.g0_.x, _e164.g1_.x, _e167.g0_.x, _e170.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (vec4<f32>(_e183.g1_.w) * vec4<f32>(_e187.g1_.x, _e190.g0_.x, _e193.g0_.y, _e196.g0_.z))) + ((_e202.g0_.xyzx * vec4<f32>(_e205.g0_.z, _e208.g0_.z, _e211.g0_.z, _e214.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn motor_dilation_outer_product(self_1544: Motor, other_1386: Dilation) -> Plane {
    var self_1545: Motor;
    var other_1387: Dilation;

    self_1545 = self_1544;
    other_1387 = other_1386;
    let _e4: Motor = self_1545;
    let _e8: Dilation = other_1387;
    let _e11: Dilation = other_1387;
    let _e14: Dilation = other_1387;
    let _e17: Dilation = other_1387;
    return Plane((vec4<f32>(_e4.g1_.w) * vec4<f32>(_e8.g1_.x, _e11.g0_.x, _e14.g0_.y, _e17.g0_.z)));
}

fn motor_dilation_left_anti_contraction(self_1546: Motor, other_1388: Dilation) -> Dilation {
    var self_1547: Motor;
    var other_1389: Dilation;

    self_1547 = self_1546;
    other_1389 = other_1388;
    let _e4: Motor = self_1547;
    let _e8: Dilation = other_1389;
    let _e11: Motor = self_1547;
    let _e15: Dilation = other_1389;
    return Dilation((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn motor_dilation_right_anti_contraction(self_1548: Motor, other_1390: Dilation) -> Motor {
    var self_1549: Motor;
    var other_1391: Dilation;

    self_1549 = self_1548;
    other_1391 = other_1390;
    let _e4: Motor = self_1549;
    let _e6: Dilation = other_1391;
    let _e11: Motor = self_1549;
    let _e13: Dilation = other_1391;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g1_.y)), (_e11.g1_ * vec4<f32>(_e13.g1_.y)));
}

fn motor_dilation_anti_scalar_product(self_1550: Motor, other_1392: Dilation) -> AntiScalar {
    var self_1551: Motor;
    var other_1393: Dilation;

    self_1551 = self_1550;
    other_1393 = other_1392;
    let _e4: Motor = self_1551;
    let _e7: Dilation = other_1393;
    return AntiScalar((_e4.g0_.w * _e7.g1_.y));
}

fn motor_multi_vector_add(self_1552: Motor, other_1394: MultiVector) -> MultiVector {
    var self_1553: Motor;
    var other_1395: MultiVector;

    self_1553 = self_1552;
    other_1395 = other_1394;
    let _e4: Motor = self_1553;
    let _e7: Motor = self_1553;
    let _e10: Motor = self_1553;
    let _e19: MultiVector = other_1395;
    let _e22: MultiVector = other_1395;
    let _e24: Motor = self_1553;
    let _e27: Motor = self_1553;
    let _e35: MultiVector = other_1395;
    let _e38: MultiVector = other_1395;
    let _e40: MultiVector = other_1395;
    let _e42: MultiVector = other_1395;
    let _e44: Motor = self_1553;
    let _e47: Motor = self_1553;
    let _e50: Motor = self_1553;
    let _e54: MultiVector = other_1395;
    let _e57: Motor = self_1553;
    let _e60: Motor = self_1553;
    let _e63: Motor = self_1553;
    let _e67: MultiVector = other_1395;
    let _e70: MultiVector = other_1395;
    let _e72: MultiVector = other_1395;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) + _e19.g0_), _e22.g1_, ((vec2<f32>(_e24.g0_.x, _e27.g1_.w) * vec2<f32>(0.0, 1.0)) + _e35.g2_), _e38.g3_, _e40.g4_, _e42.g5_, (vec3<f32>(_e44.g0_.x, _e47.g0_.y, _e50.g0_.z) + _e54.g6_), (vec3<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z) + _e67.g7_), _e70.g8_, _e72.g9_);
}

fn motor_multi_vector_sub(self_1554: Motor, other_1396: MultiVector) -> MultiVector {
    var self_1555: Motor;
    var other_1397: MultiVector;

    self_1555 = self_1554;
    other_1397 = other_1396;
    let _e4: Motor = self_1555;
    let _e7: Motor = self_1555;
    let _e10: Motor = self_1555;
    let _e19: MultiVector = other_1397;
    let _e24: MultiVector = other_1397;
    let _e27: Motor = self_1555;
    let _e30: Motor = self_1555;
    let _e38: MultiVector = other_1397;
    let _e43: MultiVector = other_1397;
    let _e48: MultiVector = other_1397;
    let _e53: MultiVector = other_1397;
    let _e56: Motor = self_1555;
    let _e59: Motor = self_1555;
    let _e62: Motor = self_1555;
    let _e66: MultiVector = other_1397;
    let _e69: Motor = self_1555;
    let _e72: Motor = self_1555;
    let _e75: Motor = self_1555;
    let _e79: MultiVector = other_1397;
    let _e84: MultiVector = other_1397;
    let _e89: MultiVector = other_1397;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) - _e19.g0_), (vec3<f32>(0.0) - _e24.g1_), ((vec2<f32>(_e27.g0_.x, _e30.g1_.w) * vec2<f32>(0.0, 1.0)) - _e38.g2_), (vec4<f32>(0.0) - _e43.g3_), (vec3<f32>(0.0) - _e48.g4_), (vec3<f32>(0.0) - _e53.g5_), (vec3<f32>(_e56.g0_.x, _e59.g0_.y, _e62.g0_.z) - _e66.g6_), (vec3<f32>(_e69.g1_.x, _e72.g1_.y, _e75.g1_.z) - _e79.g7_), (vec4<f32>(0.0) - _e84.g8_), (vec4<f32>(0.0) - _e89.g9_));
}

fn motor_multi_vector_regressive_product(self_1556: Motor, other_1398: MultiVector) -> MultiVector {
    var self_1557: Motor;
    var other_1399: MultiVector;

    self_1557 = self_1556;
    other_1399 = other_1398;
    let _e4: Motor = self_1557;
    let _e8: MultiVector = other_1399;
    let _e19: Motor = self_1557;
    let _e23: MultiVector = other_1399;
    let _e35: Motor = self_1557;
    let _e39: MultiVector = other_1399;
    let _e43: Motor = self_1557;
    let _e47: MultiVector = other_1399;
    let _e59: Motor = self_1557;
    let _e63: MultiVector = other_1399;
    let _e75: Motor = self_1557;
    let _e79: MultiVector = other_1399;
    let _e91: Motor = self_1557;
    let _e95: MultiVector = other_1399;
    let _e106: Motor = self_1557;
    let _e110: MultiVector = other_1399;
    let _e122: Motor = self_1557;
    let _e126: MultiVector = other_1399;
    let _e129: Motor = self_1557;
    let _e133: MultiVector = other_1399;
    let _e136: MultiVector = other_1399;
    let _e139: MultiVector = other_1399;
    let _e151: Motor = self_1557;
    let _e155: MultiVector = other_1399;
    let _e158: MultiVector = other_1399;
    let _e161: MultiVector = other_1399;
    let _e173: Motor = self_1557;
    let _e177: MultiVector = other_1399;
    let _e180: MultiVector = other_1399;
    let _e183: MultiVector = other_1399;
    let _e195: Motor = self_1557;
    let _e198: Motor = self_1557;
    let _e201: Motor = self_1557;
    let _e205: MultiVector = other_1399;
    let _e213: Motor = self_1557;
    let _e217: MultiVector = other_1399;
    let _e220: MultiVector = other_1399;
    let _e226: Motor = self_1557;
    let _e230: MultiVector = other_1399;
    let _e233: MultiVector = other_1399;
    let _e239: Motor = self_1557;
    let _e243: MultiVector = other_1399;
    let _e246: MultiVector = other_1399;
    let _e252: Motor = self_1557;
    let _e256: MultiVector = other_1399;
    let _e260: Motor = self_1557;
    let _e264: MultiVector = other_1399;
    let _e275: Motor = self_1557;
    let _e279: MultiVector = other_1399;
    let _e290: Motor = self_1557;
    let _e294: MultiVector = other_1399;
    let _e304: Motor = self_1557;
    let _e308: MultiVector = other_1399;
    let _e319: Motor = self_1557;
    let _e323: MultiVector = other_1399;
    let _e334: Motor = self_1557;
    let _e338: MultiVector = other_1399;
    let _e350: Motor = self_1557;
    let _e354: MultiVector = other_1399;
    let _e358: Motor = self_1557;
    let _e362: MultiVector = other_1399;
    let _e374: Motor = self_1557;
    let _e378: MultiVector = other_1399;
    let _e390: Motor = self_1557;
    let _e393: Motor = self_1557;
    let _e396: Motor = self_1557;
    let _e399: Motor = self_1557;
    let _e403: MultiVector = other_1399;
    let _e416: Motor = self_1557;
    let _e420: MultiVector = other_1399;
    let _e423: Motor = self_1557;
    let _e426: Motor = self_1557;
    let _e429: Motor = self_1557;
    let _e433: MultiVector = other_1399;
    let _e439: Motor = self_1557;
    let _e443: MultiVector = other_1399;
    let _e446: Motor = self_1557;
    let _e449: Motor = self_1557;
    let _e452: Motor = self_1557;
    let _e456: MultiVector = other_1399;
    let _e462: Motor = self_1557;
    let _e466: MultiVector = other_1399;
    let _e469: Motor = self_1557;
    let _e472: Motor = self_1557;
    let _e475: Motor = self_1557;
    let _e479: MultiVector = other_1399;
    let _e485: Motor = self_1557;
    let _e489: MultiVector = other_1399;
    let _e492: Motor = self_1557;
    let _e495: Motor = self_1557;
    let _e498: Motor = self_1557;
    let _e502: MultiVector = other_1399;
    let _e508: Motor = self_1557;
    let _e512: MultiVector = other_1399;
    let _e515: Motor = self_1557;
    let _e519: MultiVector = other_1399;
    return MultiVector((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec3<f32>(_e43.g1_.x) * vec3<f32>(_e47.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e59.g1_.y) * vec3<f32>(_e63.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e75.g1_.z) * vec3<f32>(_e79.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e91.g1_.w) * vec3<f32>(_e95.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e106.g0_.x) * vec3<f32>(_e110.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((vec3<f32>(_e122.g0_.w) * _e126.g1_) + ((vec3<f32>(_e129.g1_.x) * vec3<f32>(_e133.g8_.z, _e136.g8_.z, _e139.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e151.g1_.y) * vec3<f32>(_e155.g8_.z, _e158.g8_.z, _e161.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e173.g1_.z) * vec3<f32>(_e177.g8_.y, _e180.g8_.x, _e183.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e195.g0_.x, _e198.g0_.y, _e201.g0_.z) * vec3<f32>(_e205.g8_.w))), ((((((((vec2<f32>(0.0) - (vec2<f32>(_e213.g0_.x) * vec2<f32>(_e217.g8_.x, _e220.g7_.x))) - (vec2<f32>(_e226.g0_.y) * vec2<f32>(_e230.g8_.y, _e233.g7_.y))) - (vec2<f32>(_e239.g0_.z) * vec2<f32>(_e243.g8_.z, _e246.g7_.z))) + (vec2<f32>(_e252.g0_.w) * _e256.g2_)) + ((vec2<f32>(_e260.g1_.y) * vec2<f32>(_e264.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e275.g1_.z) * vec2<f32>(_e279.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e290.g1_.w) * vec2<f32>(_e294.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e304.g1_.x) * vec2<f32>(_e308.g6_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((vec4<f32>(_e319.g0_.y) * _e323.g9_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e334.g0_.z) * _e338.g9_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e350.g0_.w) * _e354.g3_)) + ((vec4<f32>(_e358.g1_.y) * _e362.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e374.g1_.z) * _e378.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e390.g0_.x, _e393.g1_.x, _e396.g1_.x, _e399.g0_.x) * _e403.g9_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((vec3<f32>(_e416.g0_.w) * _e420.g4_) + (vec3<f32>(_e423.g0_.x, _e426.g0_.y, _e429.g0_.z) * vec3<f32>(_e433.g0_.y))), ((vec3<f32>(_e439.g0_.w) * _e443.g5_) + (vec3<f32>(_e446.g1_.x, _e449.g1_.y, _e452.g1_.z) * vec3<f32>(_e456.g0_.y))), ((vec3<f32>(_e462.g0_.w) * _e466.g6_) + (vec3<f32>(_e469.g0_.x, _e472.g0_.y, _e475.g0_.z) * vec3<f32>(_e479.g0_.z))), ((vec3<f32>(_e485.g0_.w) * _e489.g7_) + (vec3<f32>(_e492.g1_.x, _e495.g1_.y, _e498.g1_.z) * vec3<f32>(_e502.g0_.z))), (vec4<f32>(_e508.g0_.w) * _e512.g8_), (vec4<f32>(_e515.g0_.w) * _e519.g9_));
}

fn motor_multi_vector_geometric_anti_product(self_1558: Motor, other_1400: MultiVector) -> MultiVector {
    var self_1559: Motor;
    var other_1401: MultiVector;

    self_1559 = self_1558;
    other_1401 = other_1400;
    let _e6: Motor = self_1559;
    let _e10: MultiVector = other_1401;
    let _e13: MultiVector = other_1401;
    let _e16: MultiVector = other_1401;
    let _e22: Motor = self_1559;
    let _e26: MultiVector = other_1401;
    let _e29: MultiVector = other_1401;
    let _e32: MultiVector = other_1401;
    let _e38: Motor = self_1559;
    let _e42: MultiVector = other_1401;
    let _e45: MultiVector = other_1401;
    let _e48: MultiVector = other_1401;
    let _e54: Motor = self_1559;
    let _e58: MultiVector = other_1401;
    let _e62: Motor = self_1559;
    let _e66: MultiVector = other_1401;
    let _e78: Motor = self_1559;
    let _e82: MultiVector = other_1401;
    let _e94: Motor = self_1559;
    let _e98: MultiVector = other_1401;
    let _e109: Motor = self_1559;
    let _e113: MultiVector = other_1401;
    let _e125: Motor = self_1559;
    let _e129: MultiVector = other_1401;
    let _e132: MultiVector = other_1401;
    let _e135: MultiVector = other_1401;
    let _e146: Motor = self_1559;
    let _e150: MultiVector = other_1401;
    let _e153: MultiVector = other_1401;
    let _e156: MultiVector = other_1401;
    let _e168: Motor = self_1559;
    let _e172: MultiVector = other_1401;
    let _e175: MultiVector = other_1401;
    let _e178: MultiVector = other_1401;
    let _e190: Motor = self_1559;
    let _e194: MultiVector = other_1401;
    let _e198: Motor = self_1559;
    let _e202: MultiVector = other_1401;
    let _e205: MultiVector = other_1401;
    let _e208: MultiVector = other_1401;
    let _e220: Motor = self_1559;
    let _e224: MultiVector = other_1401;
    let _e227: MultiVector = other_1401;
    let _e230: MultiVector = other_1401;
    let _e242: Motor = self_1559;
    let _e246: MultiVector = other_1401;
    let _e249: MultiVector = other_1401;
    let _e252: MultiVector = other_1401;
    let _e264: Motor = self_1559;
    let _e268: MultiVector = other_1401;
    let _e271: MultiVector = other_1401;
    let _e274: MultiVector = other_1401;
    let _e282: Motor = self_1559;
    let _e286: MultiVector = other_1401;
    let _e289: MultiVector = other_1401;
    let _e295: Motor = self_1559;
    let _e299: MultiVector = other_1401;
    let _e302: MultiVector = other_1401;
    let _e308: Motor = self_1559;
    let _e312: MultiVector = other_1401;
    let _e315: MultiVector = other_1401;
    let _e321: Motor = self_1559;
    let _e325: MultiVector = other_1401;
    let _e329: Motor = self_1559;
    let _e333: MultiVector = other_1401;
    let _e344: Motor = self_1559;
    let _e348: MultiVector = other_1401;
    let _e359: Motor = self_1559;
    let _e363: MultiVector = other_1401;
    let _e373: Motor = self_1559;
    let _e377: MultiVector = other_1401;
    let _e388: Motor = self_1559;
    let _e392: MultiVector = other_1401;
    let _e395: MultiVector = other_1401;
    let _e398: MultiVector = other_1401;
    let _e401: MultiVector = other_1401;
    let _e414: Motor = self_1559;
    let _e418: MultiVector = other_1401;
    let _e421: MultiVector = other_1401;
    let _e424: MultiVector = other_1401;
    let _e427: MultiVector = other_1401;
    let _e441: Motor = self_1559;
    let _e445: MultiVector = other_1401;
    let _e448: MultiVector = other_1401;
    let _e451: MultiVector = other_1401;
    let _e454: MultiVector = other_1401;
    let _e468: Motor = self_1559;
    let _e472: MultiVector = other_1401;
    let _e476: Motor = self_1559;
    let _e480: MultiVector = other_1401;
    let _e483: MultiVector = other_1401;
    let _e486: MultiVector = other_1401;
    let _e489: MultiVector = other_1401;
    let _e502: Motor = self_1559;
    let _e506: MultiVector = other_1401;
    let _e509: MultiVector = other_1401;
    let _e512: MultiVector = other_1401;
    let _e515: MultiVector = other_1401;
    let _e528: Motor = self_1559;
    let _e532: MultiVector = other_1401;
    let _e543: Motor = self_1559;
    let _e547: MultiVector = other_1401;
    let _e550: MultiVector = other_1401;
    let _e553: MultiVector = other_1401;
    let _e556: MultiVector = other_1401;
    let _e569: Motor = self_1559;
    let _e573: MultiVector = other_1401;
    let _e576: MultiVector = other_1401;
    let _e579: MultiVector = other_1401;
    let _e590: Motor = self_1559;
    let _e594: MultiVector = other_1401;
    let _e597: MultiVector = other_1401;
    let _e600: MultiVector = other_1401;
    let _e612: Motor = self_1559;
    let _e616: MultiVector = other_1401;
    let _e619: MultiVector = other_1401;
    let _e622: MultiVector = other_1401;
    let _e634: Motor = self_1559;
    let _e638: MultiVector = other_1401;
    let _e642: Motor = self_1559;
    let _e646: MultiVector = other_1401;
    let _e649: MultiVector = other_1401;
    let _e652: MultiVector = other_1401;
    let _e663: Motor = self_1559;
    let _e667: MultiVector = other_1401;
    let _e670: MultiVector = other_1401;
    let _e673: MultiVector = other_1401;
    let _e685: Motor = self_1559;
    let _e689: MultiVector = other_1401;
    let _e692: MultiVector = other_1401;
    let _e695: MultiVector = other_1401;
    let _e707: Motor = self_1559;
    let _e711: MultiVector = other_1401;
    let _e715: Motor = self_1559;
    let _e719: MultiVector = other_1401;
    let _e722: MultiVector = other_1401;
    let _e725: MultiVector = other_1401;
    let _e737: Motor = self_1559;
    let _e741: MultiVector = other_1401;
    let _e744: MultiVector = other_1401;
    let _e747: MultiVector = other_1401;
    let _e759: Motor = self_1559;
    let _e763: MultiVector = other_1401;
    let _e766: MultiVector = other_1401;
    let _e769: MultiVector = other_1401;
    let _e781: Motor = self_1559;
    let _e785: MultiVector = other_1401;
    let _e789: Motor = self_1559;
    let _e793: MultiVector = other_1401;
    let _e796: MultiVector = other_1401;
    let _e799: MultiVector = other_1401;
    let _e810: Motor = self_1559;
    let _e814: MultiVector = other_1401;
    let _e817: MultiVector = other_1401;
    let _e820: MultiVector = other_1401;
    let _e832: Motor = self_1559;
    let _e836: MultiVector = other_1401;
    let _e839: MultiVector = other_1401;
    let _e842: MultiVector = other_1401;
    let _e854: Motor = self_1559;
    let _e858: MultiVector = other_1401;
    let _e862: Motor = self_1559;
    let _e866: MultiVector = other_1401;
    let _e869: MultiVector = other_1401;
    let _e872: MultiVector = other_1401;
    let _e883: Motor = self_1559;
    let _e887: MultiVector = other_1401;
    let _e890: MultiVector = other_1401;
    let _e893: MultiVector = other_1401;
    let _e905: Motor = self_1559;
    let _e909: MultiVector = other_1401;
    let _e912: MultiVector = other_1401;
    let _e915: MultiVector = other_1401;
    let _e927: Motor = self_1559;
    let _e931: MultiVector = other_1401;
    let _e935: Motor = self_1559;
    let _e939: MultiVector = other_1401;
    let _e942: MultiVector = other_1401;
    let _e945: MultiVector = other_1401;
    let _e957: Motor = self_1559;
    let _e961: MultiVector = other_1401;
    let _e964: MultiVector = other_1401;
    let _e967: MultiVector = other_1401;
    let _e979: Motor = self_1559;
    let _e983: MultiVector = other_1401;
    let _e986: MultiVector = other_1401;
    let _e989: MultiVector = other_1401;
    let _e1001: Motor = self_1559;
    let _e1005: MultiVector = other_1401;
    let _e1009: Motor = self_1559;
    let _e1013: MultiVector = other_1401;
    let _e1016: MultiVector = other_1401;
    let _e1019: MultiVector = other_1401;
    let _e1022: MultiVector = other_1401;
    let _e1035: Motor = self_1559;
    let _e1039: MultiVector = other_1401;
    let _e1042: MultiVector = other_1401;
    let _e1045: MultiVector = other_1401;
    let _e1048: MultiVector = other_1401;
    let _e1062: Motor = self_1559;
    let _e1066: MultiVector = other_1401;
    let _e1069: MultiVector = other_1401;
    let _e1072: MultiVector = other_1401;
    let _e1075: MultiVector = other_1401;
    let _e1089: Motor = self_1559;
    let _e1093: MultiVector = other_1401;
    let _e1097: Motor = self_1559;
    let _e1101: MultiVector = other_1401;
    let _e1114: Motor = self_1559;
    let _e1118: MultiVector = other_1401;
    let _e1131: Motor = self_1559;
    let _e1135: MultiVector = other_1401;
    let _e1147: Motor = self_1559;
    let _e1151: MultiVector = other_1401;
    let _e1164: Motor = self_1559;
    let _e1168: MultiVector = other_1401;
    let _e1171: MultiVector = other_1401;
    let _e1174: MultiVector = other_1401;
    let _e1177: MultiVector = other_1401;
    let _e1190: Motor = self_1559;
    let _e1194: MultiVector = other_1401;
    let _e1197: MultiVector = other_1401;
    let _e1200: MultiVector = other_1401;
    let _e1203: MultiVector = other_1401;
    let _e1217: Motor = self_1559;
    let _e1221: MultiVector = other_1401;
    let _e1224: MultiVector = other_1401;
    let _e1227: MultiVector = other_1401;
    let _e1230: MultiVector = other_1401;
    let _e1244: Motor = self_1559;
    let _e1248: MultiVector = other_1401;
    let _e1252: Motor = self_1559;
    let _e1256: MultiVector = other_1401;
    let _e1269: Motor = self_1559;
    let _e1273: MultiVector = other_1401;
    let _e1286: Motor = self_1559;
    let _e1290: MultiVector = other_1401;
    let _e1302: Motor = self_1559;
    let _e1306: MultiVector = other_1401;
    return MultiVector(((((((((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.x) * vec3<f32>(_e10.g5_.x, _e13.g4_.x, _e16.g6_.x))) - (vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g5_.y, _e29.g4_.y, _e32.g6_.y))) - (vec3<f32>(_e38.g0_.z) * vec3<f32>(_e42.g5_.z, _e45.g4_.z, _e48.g6_.z))) + (vec3<f32>(_e54.g0_.w) * _e58.g0_)) + ((vec3<f32>(_e62.g1_.y) * vec3<f32>(_e66.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e78.g1_.z) * vec3<f32>(_e82.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e94.g1_.w) * vec3<f32>(_e98.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e109.g1_.x) * vec3<f32>(_e113.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((((((vec3<f32>(_e125.g0_.x) * vec3<f32>(_e129.g8_.w, _e132.g1_.z, _e135.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e146.g0_.y) * vec3<f32>(_e150.g1_.z, _e153.g8_.w, _e156.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e168.g0_.z) * vec3<f32>(_e172.g1_.y, _e175.g1_.x, _e178.g8_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e190.g0_.w) * _e194.g1_)) + ((vec3<f32>(_e198.g1_.x) * vec3<f32>(_e202.g2_.x, _e205.g8_.z, _e208.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e220.g1_.y) * vec3<f32>(_e224.g8_.z, _e227.g2_.x, _e230.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e242.g1_.z) * vec3<f32>(_e246.g8_.y, _e249.g8_.x, _e252.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e264.g1_.w) * vec3<f32>(_e268.g8_.x, _e271.g8_.y, _e274.g8_.z))), ((((((((vec2<f32>(0.0) - (vec2<f32>(_e282.g0_.x) * vec2<f32>(_e286.g8_.x, _e289.g7_.x))) - (vec2<f32>(_e295.g0_.y) * vec2<f32>(_e299.g8_.y, _e302.g7_.y))) - (vec2<f32>(_e308.g0_.z) * vec2<f32>(_e312.g8_.z, _e315.g7_.z))) + (vec2<f32>(_e321.g0_.w) * _e325.g2_)) + ((vec2<f32>(_e329.g1_.y) * vec2<f32>(_e333.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e344.g1_.z) * vec2<f32>(_e348.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e359.g1_.w) * vec2<f32>(_e363.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e373.g1_.x) * vec2<f32>(_e377.g6_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((((vec4<f32>(_e388.g0_.x) * vec4<f32>(_e392.g9_.w, _e395.g3_.z, _e398.g3_.y, _e401.g9_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e414.g0_.y) * vec4<f32>(_e418.g3_.z, _e421.g9_.w, _e424.g3_.x, _e427.g9_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e441.g0_.z) * vec4<f32>(_e445.g3_.y, _e448.g3_.x, _e451.g9_.w, _e454.g9_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e468.g0_.w) * _e472.g3_)) + ((vec4<f32>(_e476.g1_.y) * vec4<f32>(_e480.g9_.z, _e483.g3_.w, _e486.g9_.x, _e489.g9_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e502.g1_.z) * vec4<f32>(_e506.g9_.y, _e509.g9_.x, _e512.g3_.w, _e515.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e528.g1_.w) * _e532.g9_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e543.g1_.x) * vec4<f32>(_e547.g3_.w, _e550.g9_.z, _e553.g9_.y, _e556.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec3<f32>(_e569.g0_.x) * vec3<f32>(_e573.g0_.y, _e576.g4_.z, _e579.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e590.g0_.y) * vec3<f32>(_e594.g4_.z, _e597.g0_.y, _e600.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e612.g0_.z) * vec3<f32>(_e616.g4_.y, _e619.g4_.x, _e622.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e634.g0_.w) * _e638.g4_)), (((((((((vec3<f32>(_e642.g0_.x) * vec3<f32>(_e646.g0_.x, _e649.g5_.z, _e652.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e663.g0_.y) * vec3<f32>(_e667.g5_.z, _e670.g0_.x, _e673.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e685.g0_.z) * vec3<f32>(_e689.g5_.y, _e692.g5_.x, _e695.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e707.g0_.w) * _e711.g5_)) + ((vec3<f32>(_e715.g1_.x) * vec3<f32>(_e719.g0_.y, _e722.g4_.z, _e725.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e737.g1_.y) * vec3<f32>(_e741.g4_.z, _e744.g0_.y, _e747.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e759.g1_.z) * vec3<f32>(_e763.g4_.y, _e766.g4_.x, _e769.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e781.g1_.w) * _e785.g4_)), (((((vec3<f32>(_e789.g0_.x) * vec3<f32>(_e793.g0_.z, _e796.g6_.z, _e799.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e810.g0_.y) * vec3<f32>(_e814.g6_.z, _e817.g0_.z, _e820.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e832.g0_.z) * vec3<f32>(_e836.g6_.y, _e839.g6_.x, _e842.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e854.g0_.w) * _e858.g6_)), (((((((((vec3<f32>(_e862.g0_.x) * vec3<f32>(_e866.g2_.y, _e869.g7_.z, _e872.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e883.g0_.y) * vec3<f32>(_e887.g7_.z, _e890.g2_.y, _e893.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e905.g0_.z) * vec3<f32>(_e909.g7_.y, _e912.g7_.x, _e915.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e927.g0_.w) * _e931.g7_)) + ((vec3<f32>(_e935.g1_.x) * vec3<f32>(_e939.g0_.z, _e942.g6_.z, _e945.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e957.g1_.y) * vec3<f32>(_e961.g6_.z, _e964.g0_.z, _e967.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e979.g1_.z) * vec3<f32>(_e983.g6_.y, _e986.g6_.x, _e989.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e1001.g1_.w) * _e1005.g6_)), (((((((((vec4<f32>(_e1009.g0_.x) * vec4<f32>(_e1013.g2_.x, _e1016.g8_.z, _e1019.g8_.y, _e1022.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e1035.g0_.y) * vec4<f32>(_e1039.g8_.z, _e1042.g2_.x, _e1045.g8_.x, _e1048.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1062.g0_.z) * vec4<f32>(_e1066.g8_.y, _e1069.g8_.x, _e1072.g2_.x, _e1075.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e1089.g0_.w) * _e1093.g8_)) + ((vec4<f32>(_e1097.g1_.y) * vec4<f32>(_e1101.g8_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1114.g1_.z) * vec4<f32>(_e1118.g8_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1131.g1_.w) * vec4<f32>(_e1135.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1147.g1_.x) * vec4<f32>(_e1151.g8_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((((vec4<f32>(_e1164.g0_.x) * vec4<f32>(_e1168.g3_.w, _e1171.g9_.z, _e1174.g9_.y, _e1177.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e1190.g0_.y) * vec4<f32>(_e1194.g9_.z, _e1197.g3_.w, _e1200.g9_.x, _e1203.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1217.g0_.z) * vec4<f32>(_e1221.g9_.y, _e1224.g9_.x, _e1227.g3_.w, _e1230.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e1244.g0_.w) * _e1248.g9_)) + ((vec4<f32>(_e1252.g1_.y) * vec4<f32>(_e1256.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1269.g1_.z) * vec4<f32>(_e1273.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1286.g1_.w) * vec4<f32>(_e1290.g3_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1302.g1_.x) * vec4<f32>(_e1306.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_inner_anti_product(self_1560: Motor, other_1402: MultiVector) -> MultiVector {
    var self_1561: Motor;
    var other_1403: MultiVector;

    self_1561 = self_1560;
    other_1403 = other_1402;
    let _e4: Motor = self_1561;
    let _e8: MultiVector = other_1403;
    let _e11: MultiVector = other_1403;
    let _e14: MultiVector = other_1403;
    let _e26: Motor = self_1561;
    let _e30: MultiVector = other_1403;
    let _e33: MultiVector = other_1403;
    let _e36: MultiVector = other_1403;
    let _e49: Motor = self_1561;
    let _e53: MultiVector = other_1403;
    let _e57: Motor = self_1561;
    let _e61: MultiVector = other_1403;
    let _e64: MultiVector = other_1403;
    let _e67: MultiVector = other_1403;
    let _e80: Motor = self_1561;
    let _e84: MultiVector = other_1403;
    let _e87: Motor = self_1561;
    let _e91: MultiVector = other_1403;
    let _e94: Motor = self_1561;
    let _e97: Motor = self_1561;
    let _e101: MultiVector = other_1403;
    let _e104: MultiVector = other_1403;
    let _e114: Motor = self_1561;
    let _e118: MultiVector = other_1403;
    let _e121: Motor = self_1561;
    let _e124: MultiVector = other_1403;
    let _e135: Motor = self_1561;
    let _e139: MultiVector = other_1403;
    let _e142: Motor = self_1561;
    let _e146: MultiVector = other_1403;
    let _e149: Motor = self_1561;
    let _e152: Motor = self_1561;
    let _e155: Motor = self_1561;
    let _e159: MultiVector = other_1403;
    let _e165: Motor = self_1561;
    let _e169: MultiVector = other_1403;
    let _e172: Motor = self_1561;
    let _e175: Motor = self_1561;
    let _e178: Motor = self_1561;
    let _e182: MultiVector = other_1403;
    let _e188: Motor = self_1561;
    let _e192: MultiVector = other_1403;
    let _e195: Motor = self_1561;
    let _e199: MultiVector = other_1403;
    let _e210: Motor = self_1561;
    let _e214: MultiVector = other_1403;
    let _e225: Motor = self_1561;
    let _e229: MultiVector = other_1403;
    let _e240: Motor = self_1561;
    let _e244: MultiVector = other_1403;
    let _e248: Motor = self_1561;
    let _e251: Motor = self_1561;
    let _e254: Motor = self_1561;
    let _e258: MultiVector = other_1403;
    let _e264: Motor = self_1561;
    let _e268: MultiVector = other_1403;
    let _e271: MultiVector = other_1403;
    let _e274: MultiVector = other_1403;
    let _e277: MultiVector = other_1403;
    let _e289: Motor = self_1561;
    let _e293: MultiVector = other_1403;
    let _e296: MultiVector = other_1403;
    let _e299: MultiVector = other_1403;
    let _e302: MultiVector = other_1403;
    let _e315: Motor = self_1561;
    let _e319: MultiVector = other_1403;
    let _e323: Motor = self_1561;
    let _e327: MultiVector = other_1403;
    let _e330: MultiVector = other_1403;
    let _e333: MultiVector = other_1403;
    let _e336: MultiVector = other_1403;
    let _e349: Motor = self_1561;
    let _e353: MultiVector = other_1403;
    let _e356: MultiVector = other_1403;
    let _e359: MultiVector = other_1403;
    let _e362: MultiVector = other_1403;
    let _e375: Motor = self_1561;
    let _e379: MultiVector = other_1403;
    let _e382: MultiVector = other_1403;
    let _e385: MultiVector = other_1403;
    let _e388: MultiVector = other_1403;
    let _e402: Motor = self_1561;
    let _e406: MultiVector = other_1403;
    let _e409: MultiVector = other_1403;
    let _e412: MultiVector = other_1403;
    let _e415: MultiVector = other_1403;
    let _e429: Motor = self_1561;
    let _e433: MultiVector = other_1403;
    let _e437: Motor = self_1561;
    let _e441: MultiVector = other_1403;
    let _e454: Motor = self_1561;
    let _e458: MultiVector = other_1403;
    let _e471: Motor = self_1561;
    let _e475: MultiVector = other_1403;
    let _e487: Motor = self_1561;
    let _e491: MultiVector = other_1403;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y, _e11.g4_.y, _e14.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g4_.z, _e33.g4_.z, _e36.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + (vec3<f32>(_e49.g0_.w) * _e53.g0_)) + ((vec3<f32>(_e57.g0_.x) * vec3<f32>(_e61.g4_.x, _e64.g4_.x, _e67.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e80.g0_.w) * _e84.g1_), ((vec2<f32>(_e87.g0_.w) * _e91.g2_) + ((vec2<f32>(_e94.g1_.x, _e97.g1_.w) * vec2<f32>(_e101.g0_.x, _e104.g0_.z)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e114.g0_.w) * _e118.g3_) + ((_e121.g1_.wwwx * _e124.g9_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e135.g0_.w) * _e139.g4_), ((vec3<f32>(_e142.g0_.w) * _e146.g5_) + (vec3<f32>(_e149.g0_.x, _e152.g0_.y, _e155.g0_.z) * vec3<f32>(_e159.g0_.x))), ((vec3<f32>(_e165.g0_.w) * _e169.g6_) + (vec3<f32>(_e172.g0_.x, _e175.g0_.y, _e178.g0_.z) * vec3<f32>(_e182.g0_.z))), ((((((vec3<f32>(_e188.g0_.w) * _e192.g7_) + ((vec3<f32>(_e195.g1_.x) * vec3<f32>(_e199.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e210.g1_.y) * vec3<f32>(_e214.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e225.g1_.z) * vec3<f32>(_e229.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e240.g1_.w) * _e244.g6_)) + (vec3<f32>(_e248.g0_.x, _e251.g0_.y, _e254.g0_.z) * vec3<f32>(_e258.g2_.y))), (((((vec4<f32>(_e264.g0_.y) * vec4<f32>(_e268.g2_.x, _e271.g2_.x, _e274.g2_.x, _e277.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e289.g0_.z) * vec4<f32>(_e293.g2_.x, _e296.g2_.x, _e299.g2_.x, _e302.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e315.g0_.w) * _e319.g8_)) + ((vec4<f32>(_e323.g0_.x) * vec4<f32>(_e327.g2_.x, _e330.g2_.x, _e333.g2_.x, _e336.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((((((vec4<f32>(_e349.g0_.x) * vec4<f32>(_e353.g3_.w, _e356.g9_.z, _e359.g9_.y, _e362.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e375.g0_.y) * vec4<f32>(_e379.g9_.z, _e382.g3_.w, _e385.g9_.x, _e388.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e402.g0_.z) * vec4<f32>(_e406.g9_.y, _e409.g9_.x, _e412.g3_.w, _e415.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e429.g0_.w) * _e433.g9_)) + ((vec4<f32>(_e437.g1_.y) * vec4<f32>(_e441.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e454.g1_.z) * vec4<f32>(_e458.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e471.g1_.w) * vec4<f32>(_e475.g3_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e487.g1_.x) * vec4<f32>(_e491.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_left_anti_contraction(self_1562: Motor, other_1404: MultiVector) -> MultiVector {
    var self_1563: Motor;
    var other_1405: MultiVector;

    self_1563 = self_1562;
    other_1405 = other_1404;
    let _e4: Motor = self_1563;
    let _e8: MultiVector = other_1405;
    let _e11: MultiVector = other_1405;
    let _e14: MultiVector = other_1405;
    let _e26: Motor = self_1563;
    let _e30: MultiVector = other_1405;
    let _e33: MultiVector = other_1405;
    let _e36: MultiVector = other_1405;
    let _e49: Motor = self_1563;
    let _e53: MultiVector = other_1405;
    let _e57: Motor = self_1563;
    let _e61: MultiVector = other_1405;
    let _e64: MultiVector = other_1405;
    let _e67: MultiVector = other_1405;
    let _e80: Motor = self_1563;
    let _e84: MultiVector = other_1405;
    let _e87: Motor = self_1563;
    let _e91: MultiVector = other_1405;
    let _e94: Motor = self_1563;
    let _e98: MultiVector = other_1405;
    let _e101: Motor = self_1563;
    let _e105: MultiVector = other_1405;
    let _e108: Motor = self_1563;
    let _e112: MultiVector = other_1405;
    let _e115: Motor = self_1563;
    let _e118: Motor = self_1563;
    let _e121: Motor = self_1563;
    let _e125: MultiVector = other_1405;
    let _e131: Motor = self_1563;
    let _e135: MultiVector = other_1405;
    let _e138: Motor = self_1563;
    let _e142: MultiVector = other_1405;
    let _e145: Motor = self_1563;
    let _e148: Motor = self_1563;
    let _e151: Motor = self_1563;
    let _e155: MultiVector = other_1405;
    let _e161: Motor = self_1563;
    let _e165: MultiVector = other_1405;
    let _e168: MultiVector = other_1405;
    let _e171: MultiVector = other_1405;
    let _e174: MultiVector = other_1405;
    let _e186: Motor = self_1563;
    let _e190: MultiVector = other_1405;
    let _e193: MultiVector = other_1405;
    let _e196: MultiVector = other_1405;
    let _e199: MultiVector = other_1405;
    let _e212: Motor = self_1563;
    let _e216: MultiVector = other_1405;
    let _e220: Motor = self_1563;
    let _e224: MultiVector = other_1405;
    let _e227: MultiVector = other_1405;
    let _e230: MultiVector = other_1405;
    let _e233: MultiVector = other_1405;
    let _e246: Motor = self_1563;
    let _e250: MultiVector = other_1405;
    let _e261: Motor = self_1563;
    let _e265: MultiVector = other_1405;
    let _e277: Motor = self_1563;
    let _e281: MultiVector = other_1405;
    let _e285: Motor = self_1563;
    let _e289: MultiVector = other_1405;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y, _e11.g4_.y, _e14.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g4_.z, _e33.g4_.z, _e36.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + (vec3<f32>(_e49.g0_.w) * _e53.g0_)) + ((vec3<f32>(_e57.g0_.x) * vec3<f32>(_e61.g4_.x, _e64.g4_.x, _e67.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e80.g0_.w) * _e84.g1_), (vec2<f32>(_e87.g0_.w) * _e91.g2_), (vec4<f32>(_e94.g0_.w) * _e98.g3_), (vec3<f32>(_e101.g0_.w) * _e105.g4_), ((vec3<f32>(_e108.g0_.w) * _e112.g5_) + (vec3<f32>(_e115.g0_.x, _e118.g0_.y, _e121.g0_.z) * vec3<f32>(_e125.g0_.x))), (vec3<f32>(_e131.g0_.w) * _e135.g6_), ((vec3<f32>(_e138.g0_.w) * _e142.g7_) + (vec3<f32>(_e145.g0_.x, _e148.g0_.y, _e151.g0_.z) * vec3<f32>(_e155.g2_.y))), (((((vec4<f32>(_e161.g0_.y) * vec4<f32>(_e165.g2_.x, _e168.g2_.x, _e171.g2_.x, _e174.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e186.g0_.z) * vec4<f32>(_e190.g2_.x, _e193.g2_.x, _e196.g2_.x, _e199.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e212.g0_.w) * _e216.g8_)) + ((vec4<f32>(_e220.g0_.x) * vec4<f32>(_e224.g2_.x, _e227.g2_.x, _e230.g2_.x, _e233.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e246.g0_.y) * _e250.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e261.g0_.z) * _e265.g3_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e277.g0_.w) * _e281.g9_)) + ((vec4<f32>(_e285.g0_.x) * _e289.g3_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_anti_scalar_product(self_1564: Motor, other_1406: MultiVector) -> AntiScalar {
    var self_1565: Motor;
    var other_1407: MultiVector;

    self_1565 = self_1564;
    other_1407 = other_1406;
    let _e5: Motor = self_1565;
    let _e8: MultiVector = other_1407;
    let _e13: Motor = self_1565;
    let _e16: MultiVector = other_1407;
    let _e21: Motor = self_1565;
    let _e24: MultiVector = other_1407;
    let _e29: Motor = self_1565;
    let _e32: MultiVector = other_1407;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g6_.x)) - (_e13.g0_.y * _e16.g6_.y)) - (_e21.g0_.z * _e24.g6_.z)) + (_e29.g0_.w * _e32.g0_.z)));
}

fn motor_scale(self_1566: Motor, other_1408: f32) -> Motor {
    var self_1567: Motor;
    var other_1409: f32;

    self_1567 = self_1566;
    other_1409 = other_1408;
    let _e4: Motor = self_1567;
    let _e5: f32 = other_1409;
    let _e7: Motor = motor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn rotor_zero() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn rotor_one() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn rotor_neg(self_1568: Rotor) -> Rotor {
    var self_1569: Rotor;

    self_1569 = self_1568;
    let _e2: Rotor = self_1569;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn rotor_automorphism(self_1570: Rotor) -> Rotor {
    var self_1571: Rotor;

    self_1571 = self_1570;
    let _e2: Rotor = self_1571;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn rotor_reversal(self_1572: Rotor) -> Rotor {
    var self_1573: Rotor;

    self_1573 = self_1572;
    let _e2: Rotor = self_1573;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn rotor_conjugation(self_1574: Rotor) -> Rotor {
    var self_1575: Rotor;

    self_1575 = self_1574;
    let _e2: Rotor = self_1575;
    return Rotor((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn rotor_anti_reversal(self_1576: Rotor) -> Rotor {
    var self_1577: Rotor;

    self_1577 = self_1576;
    let _e2: Rotor = self_1577;
    return Rotor((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn rotor_scalar_geometric_product(self_1578: Rotor, other_1410: Scalar) -> Rotor {
    var self_1579: Rotor;
    var other_1411: Scalar;

    self_1579 = self_1578;
    other_1411 = other_1410;
    let _e4: Rotor = self_1579;
    let _e6: Scalar = other_1411;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_regressive_product(self_1580: Rotor, other_1412: Scalar) -> Scalar {
    var self_1581: Rotor;
    var other_1413: Scalar;

    self_1581 = self_1580;
    other_1413 = other_1412;
    let _e4: Rotor = self_1581;
    let _e7: Scalar = other_1413;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_outer_product(self_1582: Rotor, other_1414: Scalar) -> Rotor {
    var self_1583: Rotor;
    var other_1415: Scalar;

    self_1583 = self_1582;
    other_1415 = other_1414;
    let _e4: Rotor = self_1583;
    let _e6: Scalar = other_1415;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_inner_product(self_1584: Rotor, other_1416: Scalar) -> Rotor {
    var self_1585: Rotor;
    var other_1417: Scalar;

    self_1585 = self_1584;
    other_1417 = other_1416;
    let _e4: Rotor = self_1585;
    let _e6: Scalar = other_1417;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_right_contraction(self_1586: Rotor, other_1418: Scalar) -> Rotor {
    var self_1587: Rotor;
    var other_1419: Scalar;

    self_1587 = self_1586;
    other_1419 = other_1418;
    let _e4: Rotor = self_1587;
    let _e6: Scalar = other_1419;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_into(self_1588: Rotor) -> AntiScalar {
    var self_1589: Rotor;

    self_1589 = self_1588;
    let _e2: Rotor = self_1589;
    return AntiScalar(_e2.g0_.w);
}

fn rotor_anti_scalar_add(self_1590: Rotor, other_1420: AntiScalar) -> Rotor {
    var self_1591: Rotor;
    var other_1421: AntiScalar;

    self_1591 = self_1590;
    other_1421 = other_1420;
    let _e4: Rotor = self_1591;
    let _e6: AntiScalar = other_1421;
    return Rotor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_sub(self_1592: Rotor, other_1422: AntiScalar) -> Rotor {
    var self_1593: Rotor;
    var other_1423: AntiScalar;

    self_1593 = self_1592;
    other_1423 = other_1422;
    let _e4: Rotor = self_1593;
    let _e6: AntiScalar = other_1423;
    return Rotor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_regressive_product(self_1594: Rotor, other_1424: AntiScalar) -> Rotor {
    var self_1595: Rotor;
    var other_1425: AntiScalar;

    self_1595 = self_1594;
    other_1425 = other_1424;
    let _e4: Rotor = self_1595;
    let _e6: AntiScalar = other_1425;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_geometric_anti_product(self_1596: Rotor, other_1426: AntiScalar) -> Rotor {
    var self_1597: Rotor;
    var other_1427: AntiScalar;

    self_1597 = self_1596;
    other_1427 = other_1426;
    let _e4: Rotor = self_1597;
    let _e6: AntiScalar = other_1427;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_inner_anti_product(self_1598: Rotor, other_1428: AntiScalar) -> Rotor {
    var self_1599: Rotor;
    var other_1429: AntiScalar;

    self_1599 = self_1598;
    other_1429 = other_1428;
    let _e4: Rotor = self_1599;
    let _e6: AntiScalar = other_1429;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_left_anti_contraction(self_1600: Rotor, other_1430: AntiScalar) -> AntiScalar {
    var self_1601: Rotor;
    var other_1431: AntiScalar;

    self_1601 = self_1600;
    other_1431 = other_1430;
    let _e4: Rotor = self_1601;
    let _e7: AntiScalar = other_1431;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_anti_scalar_right_anti_contraction(self_1602: Rotor, other_1432: AntiScalar) -> Rotor {
    var self_1603: Rotor;
    var other_1433: AntiScalar;

    self_1603 = self_1602;
    other_1433 = other_1432;
    let _e4: Rotor = self_1603;
    let _e6: AntiScalar = other_1433;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_anti_scalar_product(self_1604: Rotor, other_1434: AntiScalar) -> AntiScalar {
    var self_1605: Rotor;
    var other_1435: AntiScalar;

    self_1605 = self_1604;
    other_1435 = other_1434;
    let _e4: Rotor = self_1605;
    let _e7: AntiScalar = other_1435;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_radial_point_regressive_product(self_1606: Rotor, other_1436: RadialPoint) -> RadialPoint {
    var self_1607: Rotor;
    var other_1437: RadialPoint;

    self_1607 = self_1606;
    other_1437 = other_1436;
    let _e4: Rotor = self_1607;
    let _e8: RadialPoint = other_1437;
    let _e11: Rotor = self_1607;
    let _e15: RadialPoint = other_1437;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn rotor_flat_point_regressive_product(self_1608: Rotor, other_1438: FlatPoint) -> FlatPoint {
    var self_1609: Rotor;
    var other_1439: FlatPoint;

    self_1609 = self_1608;
    other_1439 = other_1438;
    let _e4: Rotor = self_1609;
    let _e8: FlatPoint = other_1439;
    return FlatPoint((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_flat_point_geometric_anti_product(self_1610: Rotor, other_1440: FlatPoint) -> Flector {
    var self_1611: Rotor;
    var other_1441: FlatPoint;

    self_1611 = self_1610;
    other_1441 = other_1440;
    let _e4: Rotor = self_1611;
    let _e8: FlatPoint = other_1441;
    let _e19: Rotor = self_1611;
    let _e23: FlatPoint = other_1441;
    let _e35: Rotor = self_1611;
    let _e39: FlatPoint = other_1441;
    let _e43: Rotor = self_1611;
    let _e47: FlatPoint = other_1441;
    let _e59: Rotor = self_1611;
    let _e63: FlatPoint = other_1441;
    let _e74: Rotor = self_1611;
    let _e78: FlatPoint = other_1441;
    let _e90: Rotor = self_1611;
    let _e94: FlatPoint = other_1441;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((vec4<f32>(_e59.g0_.y) * _e63.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e74.g0_.z) * _e78.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e90.g0_.x) * _e94.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_flat_point_inner_anti_product(self_1612: Rotor, other_1442: FlatPoint) -> Flector {
    var self_1613: Rotor;
    var other_1443: FlatPoint;

    self_1613 = self_1612;
    other_1443 = other_1442;
    let _e4: Rotor = self_1613;
    let _e8: FlatPoint = other_1443;
    let _e11: Rotor = self_1613;
    let _e15: FlatPoint = other_1443;
    let _e26: Rotor = self_1613;
    let _e30: FlatPoint = other_1443;
    let _e42: Rotor = self_1613;
    let _e46: FlatPoint = other_1443;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_flat_point_left_anti_contraction(self_1614: Rotor, other_1444: FlatPoint) -> Flector {
    var self_1615: Rotor;
    var other_1445: FlatPoint;

    self_1615 = self_1614;
    other_1445 = other_1444;
    let _e4: Rotor = self_1615;
    let _e8: FlatPoint = other_1445;
    let _e11: Rotor = self_1615;
    let _e15: FlatPoint = other_1445;
    let _e26: Rotor = self_1615;
    let _e30: FlatPoint = other_1445;
    let _e42: Rotor = self_1615;
    let _e46: FlatPoint = other_1445;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_dipole_geometric_product(self_1616: Rotor, other_1446: Dipole) -> Rotor {
    var self_1617: Rotor;
    var other_1447: Dipole;

    self_1617 = self_1616;
    other_1447 = other_1446;
    let _e4: Rotor = self_1617;
    let _e8: Dipole = other_1447;
    let _e11: Dipole = other_1447;
    let _e14: Dipole = other_1447;
    let _e17: Dipole = other_1447;
    let _e30: Rotor = self_1617;
    let _e34: Dipole = other_1447;
    let _e37: Dipole = other_1447;
    let _e40: Dipole = other_1447;
    let _e43: Dipole = other_1447;
    let _e57: Rotor = self_1617;
    let _e61: Dipole = other_1447;
    let _e64: Dipole = other_1447;
    let _e67: Dipole = other_1447;
    let _e70: Dipole = other_1447;
    let _e82: Rotor = self_1617;
    let _e86: Dipole = other_1447;
    let _e89: Dipole = other_1447;
    let _e92: Dipole = other_1447;
    let _e95: Dipole = other_1447;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_dipole_outer_product(self_1618: Rotor, other_1448: Dipole) -> AntiScalar {
    var self_1619: Rotor;
    var other_1449: Dipole;

    self_1619 = self_1618;
    other_1449 = other_1448;
    let _e5: Rotor = self_1619;
    let _e8: Dipole = other_1449;
    let _e13: Rotor = self_1619;
    let _e16: Dipole = other_1449;
    let _e21: Rotor = self_1619;
    let _e24: Dipole = other_1449;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_geometric_anti_product(self_1620: Rotor, other_1450: Line) -> Motor {
    var self_1621: Rotor;
    var other_1451: Line;

    self_1621 = self_1620;
    other_1451 = other_1450;
    let _e4: Rotor = self_1621;
    let _e8: Line = other_1451;
    let _e11: Line = other_1451;
    let _e14: Line = other_1451;
    let _e17: Line = other_1451;
    let _e30: Rotor = self_1621;
    let _e34: Line = other_1451;
    let _e37: Line = other_1451;
    let _e40: Line = other_1451;
    let _e43: Line = other_1451;
    let _e57: Rotor = self_1621;
    let _e61: Line = other_1451;
    let _e64: Line = other_1451;
    let _e67: Line = other_1451;
    let _e70: Line = other_1451;
    let _e82: Rotor = self_1621;
    let _e86: Line = other_1451;
    let _e89: Line = other_1451;
    let _e92: Line = other_1451;
    let _e95: Line = other_1451;
    let _e109: Rotor = self_1621;
    let _e113: Line = other_1451;
    let _e116: Line = other_1451;
    let _e119: Line = other_1451;
    let _e122: Line = other_1451;
    let _e135: Rotor = self_1621;
    let _e139: Line = other_1451;
    let _e142: Line = other_1451;
    let _e145: Line = other_1451;
    let _e148: Line = other_1451;
    let _e162: Rotor = self_1621;
    let _e166: Line = other_1451;
    let _e169: Line = other_1451;
    let _e172: Line = other_1451;
    let _e175: Line = other_1451;
    let _e187: Rotor = self_1621;
    let _e191: Line = other_1451;
    let _e194: Line = other_1451;
    let _e197: Line = other_1451;
    let _e200: Line = other_1451;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.z, _e116.g1_.z, _e119.g1_.x, _e122.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g1_.x, _e145.g1_.y, _e148.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g1_.x, _e169.g1_.y, _e172.g1_.z, _e175.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e187.g0_.x) * vec4<f32>(_e191.g1_.x, _e194.g1_.z, _e197.g1_.y, _e200.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn rotor_line_right_anti_contraction(self_1622: Rotor, other_1452: Line) -> AntiScalar {
    var self_1623: Rotor;
    var other_1453: Line;

    self_1623 = self_1622;
    other_1453 = other_1452;
    let _e5: Rotor = self_1623;
    let _e8: Line = other_1453;
    let _e13: Rotor = self_1623;
    let _e16: Line = other_1453;
    let _e21: Rotor = self_1623;
    let _e24: Line = other_1453;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_line_anti_scalar_product(self_1624: Rotor, other_1454: Line) -> AntiScalar {
    var self_1625: Rotor;
    var other_1455: Line;

    self_1625 = self_1624;
    other_1455 = other_1454;
    let _e5: Rotor = self_1625;
    let _e8: Line = other_1455;
    let _e13: Rotor = self_1625;
    let _e16: Line = other_1455;
    let _e21: Rotor = self_1625;
    let _e24: Line = other_1455;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_circle_right_anti_contraction(self_1626: Rotor, other_1456: Circle) -> AntiScalar {
    var self_1627: Rotor;
    var other_1457: Circle;

    self_1627 = self_1626;
    other_1457 = other_1456;
    let _e5: Rotor = self_1627;
    let _e8: Circle = other_1457;
    let _e13: Rotor = self_1627;
    let _e16: Circle = other_1457;
    let _e21: Rotor = self_1627;
    let _e24: Circle = other_1457;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_circle_anti_scalar_product(self_1628: Rotor, other_1458: Circle) -> AntiScalar {
    var self_1629: Rotor;
    var other_1459: Circle;

    self_1629 = self_1628;
    other_1459 = other_1458;
    let _e5: Rotor = self_1629;
    let _e8: Circle = other_1459;
    let _e13: Rotor = self_1629;
    let _e16: Circle = other_1459;
    let _e21: Rotor = self_1629;
    let _e24: Circle = other_1459;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_plane_regressive_product(self_1630: Rotor, other_1460: Plane) -> Flector {
    var self_1631: Rotor;
    var other_1461: Plane;

    self_1631 = self_1630;
    other_1461 = other_1460;
    let _e4: Rotor = self_1631;
    let _e8: Plane = other_1461;
    let _e19: Rotor = self_1631;
    let _e23: Plane = other_1461;
    let _e35: Rotor = self_1631;
    let _e39: Plane = other_1461;
    let _e51: Rotor = self_1631;
    let _e55: Plane = other_1461;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e51.g0_.w) * _e55.g0_));
}

fn rotor_plane_geometric_anti_product(self_1632: Rotor, other_1462: Plane) -> Flector {
    var self_1633: Rotor;
    var other_1463: Plane;

    self_1633 = self_1632;
    other_1463 = other_1462;
    let _e4: Rotor = self_1633;
    let _e8: Plane = other_1463;
    let _e19: Rotor = self_1633;
    let _e23: Plane = other_1463;
    let _e35: Rotor = self_1633;
    let _e39: Plane = other_1463;
    let _e51: Rotor = self_1633;
    let _e55: Plane = other_1463;
    let _e66: Rotor = self_1633;
    let _e70: Plane = other_1463;
    let _e82: Rotor = self_1633;
    let _e86: Plane = other_1463;
    let _e90: Rotor = self_1633;
    let _e94: Plane = other_1463;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e51.g0_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e66.g0_.z) * _e70.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e82.g0_.w) * _e86.g0_)) + ((vec4<f32>(_e90.g0_.x) * _e94.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn rotor_plane_inner_anti_product(self_1634: Rotor, other_1464: Plane) -> Plane {
    var self_1635: Rotor;
    var other_1465: Plane;

    self_1635 = self_1634;
    other_1465 = other_1464;
    let _e4: Rotor = self_1635;
    let _e8: Plane = other_1465;
    let _e19: Rotor = self_1635;
    let _e23: Plane = other_1465;
    let _e35: Rotor = self_1635;
    let _e39: Plane = other_1465;
    let _e43: Rotor = self_1635;
    let _e47: Plane = other_1465;
    return Plane((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn rotor_plane_left_anti_contraction(self_1636: Rotor, other_1466: Plane) -> Plane {
    var self_1637: Rotor;
    var other_1467: Plane;

    self_1637 = self_1636;
    other_1467 = other_1466;
    let _e4: Rotor = self_1637;
    let _e8: Plane = other_1467;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_sphere_inner_anti_product(self_1638: Rotor, other_1468: Sphere) -> Sphere {
    var self_1639: Rotor;
    var other_1469: Sphere;

    self_1639 = self_1638;
    other_1469 = other_1468;
    let _e4: Rotor = self_1639;
    let _e8: Sphere = other_1469;
    let _e11: Rotor = self_1639;
    let _e15: Sphere = other_1469;
    let _e25: Rotor = self_1639;
    let _e29: Sphere = other_1469;
    let _e40: Rotor = self_1639;
    let _e44: Sphere = other_1469;
    let _e48: Rotor = self_1639;
    let _e52: Sphere = other_1469;
    return Sphere((vec2<f32>(_e4.g0_.w) * _e8.g0_), (((((vec3<f32>(_e11.g0_.y) * _e15.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * _e29.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e40.g0_.w) * _e44.g1_)) + ((vec3<f32>(_e48.g0_.x) * _e52.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn rotor_sphere_left_anti_contraction(self_1640: Rotor, other_1470: Sphere) -> Sphere {
    var self_1641: Rotor;
    var other_1471: Sphere;

    self_1641 = self_1640;
    other_1471 = other_1470;
    let _e4: Rotor = self_1641;
    let _e8: Sphere = other_1471;
    let _e11: Rotor = self_1641;
    let _e15: Sphere = other_1471;
    return Sphere((vec2<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn rotor_motor_add(self_1642: Rotor, other_1472: Motor) -> Motor {
    var self_1643: Rotor;
    var other_1473: Motor;

    self_1643 = self_1642;
    other_1473 = other_1472;
    let _e4: Rotor = self_1643;
    let _e6: Motor = other_1473;
    let _e9: Motor = other_1473;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn rotor_motor_sub(self_1644: Rotor, other_1474: Motor) -> Motor {
    var self_1645: Rotor;
    var other_1475: Motor;

    self_1645 = self_1644;
    other_1475 = other_1474;
    let _e4: Rotor = self_1645;
    let _e6: Motor = other_1475;
    let _e11: Motor = other_1475;
    return Motor((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_));
}

fn rotor_motor_regressive_product(self_1646: Rotor, other_1476: Motor) -> Motor {
    var self_1647: Rotor;
    var other_1477: Motor;

    self_1647 = self_1646;
    other_1477 = other_1476;
    let _e4: Rotor = self_1647;
    let _e8: Motor = other_1477;
    let _e11: Rotor = self_1647;
    let _e14: Motor = other_1477;
    let _e25: Rotor = self_1647;
    let _e29: Motor = other_1477;
    let _e41: Rotor = self_1647;
    let _e45: Motor = other_1477;
    let _e58: Rotor = self_1647;
    let _e62: Motor = other_1477;
    let _e66: Rotor = self_1647;
    let _e70: Motor = other_1477;
    return Motor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e25.g0_.y) * vec4<f32>(_e29.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e41.g0_.z) * vec4<f32>(_e45.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e58.g0_.w) * _e62.g1_)) + ((vec4<f32>(_e66.g0_.x) * vec4<f32>(_e70.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_motor_geometric_anti_product(self_1648: Rotor, other_1478: Motor) -> Motor {
    var self_1649: Rotor;
    var other_1479: Motor;

    self_1649 = self_1648;
    other_1479 = other_1478;
    let _e4: Rotor = self_1649;
    let _e8: Motor = other_1479;
    let _e20: Rotor = self_1649;
    let _e24: Motor = other_1479;
    let _e37: Rotor = self_1649;
    let _e41: Motor = other_1479;
    let _e54: Rotor = self_1649;
    let _e58: Motor = other_1479;
    let _e62: Rotor = self_1649;
    let _e66: Motor = other_1479;
    let _e78: Rotor = self_1649;
    let _e82: Motor = other_1479;
    let _e95: Rotor = self_1649;
    let _e99: Motor = other_1479;
    let _e112: Rotor = self_1649;
    let _e116: Motor = other_1479;
    return Motor((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e54.g0_.w) * _e58.g0_)), (((((vec4<f32>(_e62.g0_.x) * _e66.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e78.g0_.y) * _e82.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e95.g0_.z) * _e99.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e112.g0_.w) * _e116.g1_)));
}

fn rotor_motor_inner_anti_product(self_1650: Rotor, other_1480: Motor) -> Motor {
    var self_1651: Rotor;
    var other_1481: Motor;

    self_1651 = self_1650;
    other_1481 = other_1480;
    let _e4: Rotor = self_1651;
    let _e8: Motor = other_1481;
    let _e19: Rotor = self_1651;
    let _e23: Motor = other_1481;
    let _e35: Rotor = self_1651;
    let _e39: Motor = other_1481;
    let _e43: Rotor = self_1651;
    let _e47: Motor = other_1481;
    let _e59: Rotor = self_1651;
    let _e63: Motor = other_1481;
    let _e66: Rotor = self_1651;
    let _e69: Motor = other_1481;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e59.g0_.w) * _e63.g1_) + ((_e66.g0_.xyzx * _e69.g1_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_motor_left_anti_contraction(self_1652: Rotor, other_1482: Motor) -> Motor {
    var self_1653: Rotor;
    var other_1483: Motor;

    self_1653 = self_1652;
    other_1483 = other_1482;
    let _e4: Rotor = self_1653;
    let _e8: Motor = other_1483;
    let _e20: Rotor = self_1653;
    let _e24: Motor = other_1483;
    let _e37: Rotor = self_1653;
    let _e41: Motor = other_1483;
    let _e45: Rotor = self_1653;
    let _e49: Motor = other_1483;
    let _e62: Rotor = self_1653;
    let _e66: Motor = other_1483;
    let _e69: Rotor = self_1653;
    let _e72: Motor = other_1483;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e62.g0_.w) * _e66.g1_) + ((_e69.g0_.xyzx * _e72.g1_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_motor_right_anti_contraction(self_1654: Rotor, other_1484: Motor) -> Rotor {
    var self_1655: Rotor;
    var other_1485: Motor;

    self_1655 = self_1654;
    other_1485 = other_1484;
    let _e4: Rotor = self_1655;
    let _e8: Motor = other_1485;
    let _e19: Rotor = self_1655;
    let _e23: Motor = other_1485;
    let _e35: Rotor = self_1655;
    let _e39: Motor = other_1485;
    let _e51: Rotor = self_1655;
    let _e55: Motor = other_1485;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_motor_anti_scalar_product(self_1656: Rotor, other_1486: Motor) -> AntiScalar {
    var self_1657: Rotor;
    var other_1487: Motor;

    self_1657 = self_1656;
    other_1487 = other_1486;
    let _e5: Rotor = self_1657;
    let _e8: Motor = other_1487;
    let _e13: Rotor = self_1657;
    let _e16: Motor = other_1487;
    let _e21: Rotor = self_1657;
    let _e24: Motor = other_1487;
    let _e29: Rotor = self_1657;
    let _e32: Motor = other_1487;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_rotor_add(self_1658: Rotor, other_1488: Rotor) -> Rotor {
    var self_1659: Rotor;
    var other_1489: Rotor;

    self_1659 = self_1658;
    other_1489 = other_1488;
    let _e4: Rotor = self_1659;
    let _e6: Rotor = other_1489;
    return Rotor((_e4.g0_ + _e6.g0_));
}

fn rotor_rotor_sub(self_1660: Rotor, other_1490: Rotor) -> Rotor {
    var self_1661: Rotor;
    var other_1491: Rotor;

    self_1661 = self_1660;
    other_1491 = other_1490;
    let _e4: Rotor = self_1661;
    let _e6: Rotor = other_1491;
    return Rotor((_e4.g0_ - _e6.g0_));
}

fn rotor_rotor_mul(self_1662: Rotor, other_1492: Rotor) -> Rotor {
    var self_1663: Rotor;
    var other_1493: Rotor;

    self_1663 = self_1662;
    other_1493 = other_1492;
    let _e4: Rotor = self_1663;
    let _e6: Rotor = other_1493;
    return Rotor((_e4.g0_ * _e6.g0_));
}

fn rotor_rotor_div(self_1664: Rotor, other_1494: Rotor) -> Rotor {
    var self_1665: Rotor;
    var other_1495: Rotor;

    self_1665 = self_1664;
    other_1495 = other_1494;
    let _e4: Rotor = self_1665;
    let _e7: Rotor = self_1665;
    let _e10: Rotor = self_1665;
    let _e13: Rotor = self_1665;
    let _e23: Rotor = other_1495;
    let _e26: Rotor = other_1495;
    let _e29: Rotor = other_1495;
    let _e32: Rotor = other_1495;
    return Rotor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn rotor_rotor_regressive_product(self_1666: Rotor, other_1496: Rotor) -> Rotor {
    var self_1667: Rotor;
    var other_1497: Rotor;

    self_1667 = self_1666;
    other_1497 = other_1496;
    let _e4: Rotor = self_1667;
    let _e8: Rotor = other_1497;
    let _e11: Rotor = self_1667;
    let _e14: Rotor = other_1497;
    return Rotor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_geometric_anti_product(self_1668: Rotor, other_1498: Rotor) -> Rotor {
    var self_1669: Rotor;
    var other_1499: Rotor;

    self_1669 = self_1668;
    other_1499 = other_1498;
    let _e4: Rotor = self_1669;
    let _e8: Rotor = other_1499;
    let _e20: Rotor = self_1669;
    let _e24: Rotor = other_1499;
    let _e37: Rotor = self_1669;
    let _e41: Rotor = other_1499;
    let _e54: Rotor = self_1669;
    let _e58: Rotor = other_1499;
    return Rotor((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e54.g0_.w) * _e58.g0_)));
}

fn rotor_rotor_inner_anti_product(self_1670: Rotor, other_1500: Rotor) -> Rotor {
    var self_1671: Rotor;
    var other_1501: Rotor;

    self_1671 = self_1670;
    other_1501 = other_1500;
    let _e4: Rotor = self_1671;
    let _e8: Rotor = other_1501;
    let _e19: Rotor = self_1671;
    let _e23: Rotor = other_1501;
    let _e35: Rotor = self_1671;
    let _e39: Rotor = other_1501;
    let _e43: Rotor = self_1671;
    let _e47: Rotor = other_1501;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_left_anti_contraction(self_1672: Rotor, other_1502: Rotor) -> Rotor {
    var self_1673: Rotor;
    var other_1503: Rotor;

    self_1673 = self_1672;
    other_1503 = other_1502;
    let _e4: Rotor = self_1673;
    let _e8: Rotor = other_1503;
    let _e20: Rotor = self_1673;
    let _e24: Rotor = other_1503;
    let _e37: Rotor = self_1673;
    let _e41: Rotor = other_1503;
    let _e45: Rotor = self_1673;
    let _e49: Rotor = other_1503;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_right_anti_contraction(self_1674: Rotor, other_1504: Rotor) -> Rotor {
    var self_1675: Rotor;
    var other_1505: Rotor;

    self_1675 = self_1674;
    other_1505 = other_1504;
    let _e4: Rotor = self_1675;
    let _e8: Rotor = other_1505;
    let _e19: Rotor = self_1675;
    let _e23: Rotor = other_1505;
    let _e35: Rotor = self_1675;
    let _e39: Rotor = other_1505;
    let _e51: Rotor = self_1675;
    let _e55: Rotor = other_1505;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_anti_scalar_product(self_1676: Rotor, other_1506: Rotor) -> AntiScalar {
    var self_1677: Rotor;
    var other_1507: Rotor;

    self_1677 = self_1676;
    other_1507 = other_1506;
    let _e5: Rotor = self_1677;
    let _e8: Rotor = other_1507;
    let _e13: Rotor = self_1677;
    let _e16: Rotor = other_1507;
    let _e21: Rotor = self_1677;
    let _e24: Rotor = other_1507;
    let _e29: Rotor = self_1677;
    let _e32: Rotor = other_1507;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_translator_regressive_product(self_1678: Rotor, other_1508: Translator) -> Motor {
    var self_1679: Rotor;
    var other_1509: Translator;

    self_1679 = self_1678;
    other_1509 = other_1508;
    let _e4: Rotor = self_1679;
    let _e6: Translator = other_1509;
    let _e11: Rotor = self_1679;
    let _e15: Translator = other_1509;
    let _e27: Rotor = self_1679;
    let _e31: Translator = other_1509;
    let _e44: Rotor = self_1679;
    let _e47: Translator = other_1509;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn rotor_translator_geometric_anti_product(self_1680: Rotor, other_1510: Translator) -> Motor {
    var self_1681: Rotor;
    var other_1511: Translator;

    self_1681 = self_1680;
    other_1511 = other_1510;
    let _e4: Rotor = self_1681;
    let _e6: Translator = other_1511;
    let _e11: Rotor = self_1681;
    let _e15: Translator = other_1511;
    let _e27: Rotor = self_1681;
    let _e31: Translator = other_1511;
    let _e44: Rotor = self_1681;
    let _e48: Translator = other_1511;
    let _e59: Rotor = self_1681;
    let _e63: Translator = other_1511;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.zzxy) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0))) + ((vec4<f32>(_e27.g0_.z) * _e31.g0_.yxyz) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g0_.w) * _e48.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e59.g0_.x) * _e63.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn rotor_translator_left_anti_contraction(self_1682: Rotor, other_1512: Translator) -> Translator {
    var self_1683: Rotor;
    var other_1513: Translator;

    self_1683 = self_1682;
    other_1513 = other_1512;
    let _e4: Rotor = self_1683;
    let _e8: Translator = other_1513;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_translator_right_anti_contraction(self_1684: Rotor, other_1514: Translator) -> Rotor {
    var self_1685: Rotor;
    var other_1515: Translator;

    self_1685 = self_1684;
    other_1515 = other_1514;
    let _e4: Rotor = self_1685;
    let _e6: Translator = other_1515;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn rotor_translator_anti_scalar_product(self_1686: Rotor, other_1516: Translator) -> AntiScalar {
    var self_1687: Rotor;
    var other_1517: Translator;

    self_1687 = self_1686;
    other_1517 = other_1516;
    let _e4: Rotor = self_1687;
    let _e7: Translator = other_1517;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn rotor_flector_regressive_product(self_1688: Rotor, other_1518: Flector) -> Flector {
    var self_1689: Rotor;
    var other_1519: Flector;

    self_1689 = self_1688;
    other_1519 = other_1518;
    let _e4: Rotor = self_1689;
    let _e8: Flector = other_1519;
    let _e19: Rotor = self_1689;
    let _e23: Flector = other_1519;
    let _e35: Rotor = self_1689;
    let _e39: Flector = other_1519;
    let _e43: Rotor = self_1689;
    let _e47: Flector = other_1519;
    let _e59: Rotor = self_1689;
    let _e63: Flector = other_1519;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn rotor_flector_geometric_anti_product(self_1690: Rotor, other_1520: Flector) -> Flector {
    var self_1691: Rotor;
    var other_1521: Flector;

    self_1691 = self_1690;
    other_1521 = other_1520;
    let _e4: Rotor = self_1691;
    let _e8: Flector = other_1521;
    let _e11: Flector = other_1521;
    let _e14: Flector = other_1521;
    let _e17: Flector = other_1521;
    let _e30: Rotor = self_1691;
    let _e34: Flector = other_1521;
    let _e37: Flector = other_1521;
    let _e40: Flector = other_1521;
    let _e43: Flector = other_1521;
    let _e57: Rotor = self_1691;
    let _e61: Flector = other_1521;
    let _e64: Flector = other_1521;
    let _e67: Flector = other_1521;
    let _e70: Flector = other_1521;
    let _e84: Rotor = self_1691;
    let _e88: Flector = other_1521;
    let _e92: Rotor = self_1691;
    let _e96: Flector = other_1521;
    let _e99: Flector = other_1521;
    let _e102: Flector = other_1521;
    let _e105: Flector = other_1521;
    let _e118: Rotor = self_1691;
    let _e122: Flector = other_1521;
    let _e125: Flector = other_1521;
    let _e128: Flector = other_1521;
    let _e131: Flector = other_1521;
    let _e145: Rotor = self_1691;
    let _e149: Flector = other_1521;
    let _e152: Flector = other_1521;
    let _e155: Flector = other_1521;
    let _e158: Flector = other_1521;
    let _e172: Rotor = self_1691;
    let _e176: Flector = other_1521;
    return Flector((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e84.g0_.w) * _e88.g0_)), (((((vec4<f32>(_e92.g0_.x) * vec4<f32>(_e96.g0_.w, _e99.g1_.z, _e102.g1_.y, _e105.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e118.g0_.y) * vec4<f32>(_e122.g1_.z, _e125.g0_.w, _e128.g1_.x, _e131.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e145.g0_.z) * vec4<f32>(_e149.g1_.y, _e152.g1_.x, _e155.g0_.w, _e158.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e172.g0_.w) * _e176.g1_)));
}

fn rotor_flector_inner_anti_product(self_1692: Rotor, other_1522: Flector) -> Flector {
    var self_1693: Rotor;
    var other_1523: Flector;

    self_1693 = self_1692;
    other_1523 = other_1522;
    let _e4: Rotor = self_1693;
    let _e8: Flector = other_1523;
    let _e11: Rotor = self_1693;
    let _e15: Flector = other_1523;
    let _e18: Flector = other_1523;
    let _e21: Flector = other_1523;
    let _e24: Flector = other_1523;
    let _e37: Rotor = self_1693;
    let _e41: Flector = other_1523;
    let _e44: Flector = other_1523;
    let _e47: Flector = other_1523;
    let _e50: Flector = other_1523;
    let _e64: Rotor = self_1693;
    let _e68: Flector = other_1523;
    let _e71: Flector = other_1523;
    let _e74: Flector = other_1523;
    let _e77: Flector = other_1523;
    let _e91: Rotor = self_1693;
    let _e95: Flector = other_1523;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.x) * vec4<f32>(_e15.g0_.w, _e18.g1_.z, _e21.g1_.y, _e24.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.y) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.x, _e50.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e64.g0_.z) * vec4<f32>(_e68.g1_.y, _e71.g1_.x, _e74.g0_.w, _e77.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e91.g0_.w) * _e95.g1_)));
}

fn rotor_flector_left_anti_contraction(self_1694: Rotor, other_1524: Flector) -> Flector {
    var self_1695: Rotor;
    var other_1525: Flector;

    self_1695 = self_1694;
    other_1525 = other_1524;
    let _e4: Rotor = self_1695;
    let _e8: Flector = other_1525;
    let _e11: Rotor = self_1695;
    let _e15: Flector = other_1525;
    let _e26: Rotor = self_1695;
    let _e30: Flector = other_1525;
    let _e42: Rotor = self_1695;
    let _e46: Flector = other_1525;
    let _e50: Rotor = self_1695;
    let _e54: Flector = other_1525;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e42.g0_.w) * _e46.g1_)) + ((vec4<f32>(_e50.g0_.x) * _e54.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_dilation_left_anti_contraction(self_1696: Rotor, other_1526: Dilation) -> Dilation {
    var self_1697: Rotor;
    var other_1527: Dilation;

    self_1697 = self_1696;
    other_1527 = other_1526;
    let _e4: Rotor = self_1697;
    let _e8: Dilation = other_1527;
    let _e11: Rotor = self_1697;
    let _e15: Dilation = other_1527;
    return Dilation((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn rotor_dilation_right_anti_contraction(self_1698: Rotor, other_1528: Dilation) -> Rotor {
    var self_1699: Rotor;
    var other_1529: Dilation;

    self_1699 = self_1698;
    other_1529 = other_1528;
    let _e4: Rotor = self_1699;
    let _e6: Dilation = other_1529;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g1_.y)));
}

fn rotor_dilation_anti_scalar_product(self_1700: Rotor, other_1530: Dilation) -> AntiScalar {
    var self_1701: Rotor;
    var other_1531: Dilation;

    self_1701 = self_1700;
    other_1531 = other_1530;
    let _e4: Rotor = self_1701;
    let _e7: Dilation = other_1531;
    return AntiScalar((_e4.g0_.w * _e7.g1_.y));
}

fn rotor_multi_vector_add(self_1702: Rotor, other_1532: MultiVector) -> MultiVector {
    var self_1703: Rotor;
    var other_1533: MultiVector;

    self_1703 = self_1702;
    other_1533 = other_1532;
    let _e4: Rotor = self_1703;
    let _e7: Rotor = self_1703;
    let _e10: Rotor = self_1703;
    let _e19: MultiVector = other_1533;
    let _e22: MultiVector = other_1533;
    let _e24: MultiVector = other_1533;
    let _e26: MultiVector = other_1533;
    let _e28: MultiVector = other_1533;
    let _e30: MultiVector = other_1533;
    let _e32: Rotor = self_1703;
    let _e35: Rotor = self_1703;
    let _e38: Rotor = self_1703;
    let _e42: MultiVector = other_1533;
    let _e45: MultiVector = other_1533;
    let _e47: MultiVector = other_1533;
    let _e49: MultiVector = other_1533;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) + _e19.g0_), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, (vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z) + _e42.g6_), _e45.g7_, _e47.g8_, _e49.g9_);
}

fn rotor_multi_vector_sub(self_1704: Rotor, other_1534: MultiVector) -> MultiVector {
    var self_1705: Rotor;
    var other_1535: MultiVector;

    self_1705 = self_1704;
    other_1535 = other_1534;
    let _e4: Rotor = self_1705;
    let _e7: Rotor = self_1705;
    let _e10: Rotor = self_1705;
    let _e19: MultiVector = other_1535;
    let _e24: MultiVector = other_1535;
    let _e29: MultiVector = other_1535;
    let _e34: MultiVector = other_1535;
    let _e39: MultiVector = other_1535;
    let _e44: MultiVector = other_1535;
    let _e47: Rotor = self_1705;
    let _e50: Rotor = self_1705;
    let _e53: Rotor = self_1705;
    let _e57: MultiVector = other_1535;
    let _e62: MultiVector = other_1535;
    let _e67: MultiVector = other_1535;
    let _e72: MultiVector = other_1535;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) - _e19.g0_), (vec3<f32>(0.0) - _e24.g1_), (vec2<f32>(0.0) - _e29.g2_), (vec4<f32>(0.0) - _e34.g3_), (vec3<f32>(0.0) - _e39.g4_), (vec3<f32>(0.0) - _e44.g5_), (vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.z) - _e57.g6_), (vec3<f32>(0.0) - _e62.g7_), (vec4<f32>(0.0) - _e67.g8_), (vec4<f32>(0.0) - _e72.g9_));
}

fn rotor_multi_vector_regressive_product(self_1706: Rotor, other_1536: MultiVector) -> MultiVector {
    var self_1707: Rotor;
    var other_1537: MultiVector;

    self_1707 = self_1706;
    other_1537 = other_1536;
    let _e4: Rotor = self_1707;
    let _e8: MultiVector = other_1537;
    let _e19: Rotor = self_1707;
    let _e23: MultiVector = other_1537;
    let _e35: Rotor = self_1707;
    let _e39: MultiVector = other_1537;
    let _e43: Rotor = self_1707;
    let _e47: MultiVector = other_1537;
    let _e59: Rotor = self_1707;
    let _e63: MultiVector = other_1537;
    let _e66: Rotor = self_1707;
    let _e69: Rotor = self_1707;
    let _e72: Rotor = self_1707;
    let _e76: MultiVector = other_1537;
    let _e84: Rotor = self_1707;
    let _e88: MultiVector = other_1537;
    let _e91: MultiVector = other_1537;
    let _e97: Rotor = self_1707;
    let _e101: MultiVector = other_1537;
    let _e104: MultiVector = other_1537;
    let _e110: Rotor = self_1707;
    let _e114: MultiVector = other_1537;
    let _e117: MultiVector = other_1537;
    let _e123: Rotor = self_1707;
    let _e127: MultiVector = other_1537;
    let _e131: Rotor = self_1707;
    let _e135: MultiVector = other_1537;
    let _e146: Rotor = self_1707;
    let _e150: MultiVector = other_1537;
    let _e162: Rotor = self_1707;
    let _e166: MultiVector = other_1537;
    let _e170: Rotor = self_1707;
    let _e174: MultiVector = other_1537;
    let _e186: Rotor = self_1707;
    let _e190: MultiVector = other_1537;
    let _e193: Rotor = self_1707;
    let _e196: Rotor = self_1707;
    let _e199: Rotor = self_1707;
    let _e203: MultiVector = other_1537;
    let _e209: Rotor = self_1707;
    let _e213: MultiVector = other_1537;
    let _e216: Rotor = self_1707;
    let _e220: MultiVector = other_1537;
    let _e223: Rotor = self_1707;
    let _e226: Rotor = self_1707;
    let _e229: Rotor = self_1707;
    let _e233: MultiVector = other_1537;
    let _e239: Rotor = self_1707;
    let _e243: MultiVector = other_1537;
    let _e246: Rotor = self_1707;
    let _e250: MultiVector = other_1537;
    let _e253: Rotor = self_1707;
    let _e257: MultiVector = other_1537;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec3<f32>(_e43.g0_.x) * vec3<f32>(_e47.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), ((vec3<f32>(_e59.g0_.w) * _e63.g1_) + (vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z) * vec3<f32>(_e76.g8_.w))), ((((vec2<f32>(0.0) - (vec2<f32>(_e84.g0_.x) * vec2<f32>(_e88.g8_.x, _e91.g7_.x))) - (vec2<f32>(_e97.g0_.y) * vec2<f32>(_e101.g8_.y, _e104.g7_.y))) - (vec2<f32>(_e110.g0_.z) * vec2<f32>(_e114.g8_.z, _e117.g7_.z))) + (vec2<f32>(_e123.g0_.w) * _e127.g2_)), (((((vec4<f32>(_e131.g0_.y) * _e135.g9_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e146.g0_.z) * _e150.g9_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e162.g0_.w) * _e166.g3_)) + ((vec4<f32>(_e170.g0_.x) * _e174.g9_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e186.g0_.w) * _e190.g4_) + (vec3<f32>(_e193.g0_.x, _e196.g0_.y, _e199.g0_.z) * vec3<f32>(_e203.g0_.y))), (vec3<f32>(_e209.g0_.w) * _e213.g5_), ((vec3<f32>(_e216.g0_.w) * _e220.g6_) + (vec3<f32>(_e223.g0_.x, _e226.g0_.y, _e229.g0_.z) * vec3<f32>(_e233.g0_.z))), (vec3<f32>(_e239.g0_.w) * _e243.g7_), (vec4<f32>(_e246.g0_.w) * _e250.g8_), (vec4<f32>(_e253.g0_.w) * _e257.g9_));
}

fn rotor_multi_vector_geometric_anti_product(self_1708: Rotor, other_1538: MultiVector) -> MultiVector {
    var self_1709: Rotor;
    var other_1539: MultiVector;

    self_1709 = self_1708;
    other_1539 = other_1538;
    let _e6: Rotor = self_1709;
    let _e10: MultiVector = other_1539;
    let _e13: MultiVector = other_1539;
    let _e16: MultiVector = other_1539;
    let _e22: Rotor = self_1709;
    let _e26: MultiVector = other_1539;
    let _e29: MultiVector = other_1539;
    let _e32: MultiVector = other_1539;
    let _e38: Rotor = self_1709;
    let _e42: MultiVector = other_1539;
    let _e45: MultiVector = other_1539;
    let _e48: MultiVector = other_1539;
    let _e54: Rotor = self_1709;
    let _e58: MultiVector = other_1539;
    let _e62: Rotor = self_1709;
    let _e66: MultiVector = other_1539;
    let _e69: MultiVector = other_1539;
    let _e72: MultiVector = other_1539;
    let _e83: Rotor = self_1709;
    let _e87: MultiVector = other_1539;
    let _e90: MultiVector = other_1539;
    let _e93: MultiVector = other_1539;
    let _e105: Rotor = self_1709;
    let _e109: MultiVector = other_1539;
    let _e112: MultiVector = other_1539;
    let _e115: MultiVector = other_1539;
    let _e127: Rotor = self_1709;
    let _e131: MultiVector = other_1539;
    let _e137: Rotor = self_1709;
    let _e141: MultiVector = other_1539;
    let _e144: MultiVector = other_1539;
    let _e150: Rotor = self_1709;
    let _e154: MultiVector = other_1539;
    let _e157: MultiVector = other_1539;
    let _e163: Rotor = self_1709;
    let _e167: MultiVector = other_1539;
    let _e170: MultiVector = other_1539;
    let _e176: Rotor = self_1709;
    let _e180: MultiVector = other_1539;
    let _e184: Rotor = self_1709;
    let _e188: MultiVector = other_1539;
    let _e191: MultiVector = other_1539;
    let _e194: MultiVector = other_1539;
    let _e197: MultiVector = other_1539;
    let _e210: Rotor = self_1709;
    let _e214: MultiVector = other_1539;
    let _e217: MultiVector = other_1539;
    let _e220: MultiVector = other_1539;
    let _e223: MultiVector = other_1539;
    let _e237: Rotor = self_1709;
    let _e241: MultiVector = other_1539;
    let _e244: MultiVector = other_1539;
    let _e247: MultiVector = other_1539;
    let _e250: MultiVector = other_1539;
    let _e264: Rotor = self_1709;
    let _e268: MultiVector = other_1539;
    let _e272: Rotor = self_1709;
    let _e276: MultiVector = other_1539;
    let _e279: MultiVector = other_1539;
    let _e282: MultiVector = other_1539;
    let _e293: Rotor = self_1709;
    let _e297: MultiVector = other_1539;
    let _e300: MultiVector = other_1539;
    let _e303: MultiVector = other_1539;
    let _e315: Rotor = self_1709;
    let _e319: MultiVector = other_1539;
    let _e322: MultiVector = other_1539;
    let _e325: MultiVector = other_1539;
    let _e337: Rotor = self_1709;
    let _e341: MultiVector = other_1539;
    let _e345: Rotor = self_1709;
    let _e349: MultiVector = other_1539;
    let _e352: MultiVector = other_1539;
    let _e355: MultiVector = other_1539;
    let _e366: Rotor = self_1709;
    let _e370: MultiVector = other_1539;
    let _e373: MultiVector = other_1539;
    let _e376: MultiVector = other_1539;
    let _e388: Rotor = self_1709;
    let _e392: MultiVector = other_1539;
    let _e395: MultiVector = other_1539;
    let _e398: MultiVector = other_1539;
    let _e410: Rotor = self_1709;
    let _e414: MultiVector = other_1539;
    let _e418: Rotor = self_1709;
    let _e422: MultiVector = other_1539;
    let _e425: MultiVector = other_1539;
    let _e428: MultiVector = other_1539;
    let _e439: Rotor = self_1709;
    let _e443: MultiVector = other_1539;
    let _e446: MultiVector = other_1539;
    let _e449: MultiVector = other_1539;
    let _e461: Rotor = self_1709;
    let _e465: MultiVector = other_1539;
    let _e468: MultiVector = other_1539;
    let _e471: MultiVector = other_1539;
    let _e483: Rotor = self_1709;
    let _e487: MultiVector = other_1539;
    let _e491: Rotor = self_1709;
    let _e495: MultiVector = other_1539;
    let _e498: MultiVector = other_1539;
    let _e501: MultiVector = other_1539;
    let _e512: Rotor = self_1709;
    let _e516: MultiVector = other_1539;
    let _e519: MultiVector = other_1539;
    let _e522: MultiVector = other_1539;
    let _e534: Rotor = self_1709;
    let _e538: MultiVector = other_1539;
    let _e541: MultiVector = other_1539;
    let _e544: MultiVector = other_1539;
    let _e556: Rotor = self_1709;
    let _e560: MultiVector = other_1539;
    let _e564: Rotor = self_1709;
    let _e568: MultiVector = other_1539;
    let _e571: MultiVector = other_1539;
    let _e574: MultiVector = other_1539;
    let _e577: MultiVector = other_1539;
    let _e590: Rotor = self_1709;
    let _e594: MultiVector = other_1539;
    let _e597: MultiVector = other_1539;
    let _e600: MultiVector = other_1539;
    let _e603: MultiVector = other_1539;
    let _e617: Rotor = self_1709;
    let _e621: MultiVector = other_1539;
    let _e624: MultiVector = other_1539;
    let _e627: MultiVector = other_1539;
    let _e630: MultiVector = other_1539;
    let _e644: Rotor = self_1709;
    let _e648: MultiVector = other_1539;
    let _e652: Rotor = self_1709;
    let _e656: MultiVector = other_1539;
    let _e659: MultiVector = other_1539;
    let _e662: MultiVector = other_1539;
    let _e665: MultiVector = other_1539;
    let _e678: Rotor = self_1709;
    let _e682: MultiVector = other_1539;
    let _e685: MultiVector = other_1539;
    let _e688: MultiVector = other_1539;
    let _e691: MultiVector = other_1539;
    let _e705: Rotor = self_1709;
    let _e709: MultiVector = other_1539;
    let _e712: MultiVector = other_1539;
    let _e715: MultiVector = other_1539;
    let _e718: MultiVector = other_1539;
    let _e732: Rotor = self_1709;
    let _e736: MultiVector = other_1539;
    return MultiVector(((((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.x) * vec3<f32>(_e10.g5_.x, _e13.g4_.x, _e16.g6_.x))) - (vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g5_.y, _e29.g4_.y, _e32.g6_.y))) - (vec3<f32>(_e38.g0_.z) * vec3<f32>(_e42.g5_.z, _e45.g4_.z, _e48.g6_.z))) + (vec3<f32>(_e54.g0_.w) * _e58.g0_)), (((((vec3<f32>(_e62.g0_.x) * vec3<f32>(_e66.g8_.w, _e69.g1_.z, _e72.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e83.g0_.y) * vec3<f32>(_e87.g1_.z, _e90.g8_.w, _e93.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e105.g0_.z) * vec3<f32>(_e109.g1_.y, _e112.g1_.x, _e115.g8_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e127.g0_.w) * _e131.g1_)), ((((vec2<f32>(0.0) - (vec2<f32>(_e137.g0_.x) * vec2<f32>(_e141.g8_.x, _e144.g7_.x))) - (vec2<f32>(_e150.g0_.y) * vec2<f32>(_e154.g8_.y, _e157.g7_.y))) - (vec2<f32>(_e163.g0_.z) * vec2<f32>(_e167.g8_.z, _e170.g7_.z))) + (vec2<f32>(_e176.g0_.w) * _e180.g2_)), (((((vec4<f32>(_e184.g0_.x) * vec4<f32>(_e188.g9_.w, _e191.g3_.z, _e194.g3_.y, _e197.g9_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e210.g0_.y) * vec4<f32>(_e214.g3_.z, _e217.g9_.w, _e220.g3_.x, _e223.g9_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e237.g0_.z) * vec4<f32>(_e241.g3_.y, _e244.g3_.x, _e247.g9_.w, _e250.g9_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e264.g0_.w) * _e268.g3_)), (((((vec3<f32>(_e272.g0_.x) * vec3<f32>(_e276.g0_.y, _e279.g4_.z, _e282.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e293.g0_.y) * vec3<f32>(_e297.g4_.z, _e300.g0_.y, _e303.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e315.g0_.z) * vec3<f32>(_e319.g4_.y, _e322.g4_.x, _e325.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e337.g0_.w) * _e341.g4_)), (((((vec3<f32>(_e345.g0_.x) * vec3<f32>(_e349.g0_.x, _e352.g5_.z, _e355.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e366.g0_.y) * vec3<f32>(_e370.g5_.z, _e373.g0_.x, _e376.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e388.g0_.z) * vec3<f32>(_e392.g5_.y, _e395.g5_.x, _e398.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e410.g0_.w) * _e414.g5_)), (((((vec3<f32>(_e418.g0_.x) * vec3<f32>(_e422.g0_.z, _e425.g6_.z, _e428.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e439.g0_.y) * vec3<f32>(_e443.g6_.z, _e446.g0_.z, _e449.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e461.g0_.z) * vec3<f32>(_e465.g6_.y, _e468.g6_.x, _e471.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e483.g0_.w) * _e487.g6_)), (((((vec3<f32>(_e491.g0_.x) * vec3<f32>(_e495.g2_.y, _e498.g7_.z, _e501.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e512.g0_.y) * vec3<f32>(_e516.g7_.z, _e519.g2_.y, _e522.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e534.g0_.z) * vec3<f32>(_e538.g7_.y, _e541.g7_.x, _e544.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e556.g0_.w) * _e560.g7_)), (((((vec4<f32>(_e564.g0_.x) * vec4<f32>(_e568.g2_.x, _e571.g8_.z, _e574.g8_.y, _e577.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e590.g0_.y) * vec4<f32>(_e594.g8_.z, _e597.g2_.x, _e600.g8_.x, _e603.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e617.g0_.z) * vec4<f32>(_e621.g8_.y, _e624.g8_.x, _e627.g2_.x, _e630.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e644.g0_.w) * _e648.g8_)), (((((vec4<f32>(_e652.g0_.x) * vec4<f32>(_e656.g3_.w, _e659.g9_.z, _e662.g9_.y, _e665.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e678.g0_.y) * vec4<f32>(_e682.g9_.z, _e685.g3_.w, _e688.g9_.x, _e691.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e705.g0_.z) * vec4<f32>(_e709.g9_.y, _e712.g9_.x, _e715.g3_.w, _e718.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e732.g0_.w) * _e736.g9_)));
}

fn rotor_multi_vector_inner_anti_product(self_1710: Rotor, other_1540: MultiVector) -> MultiVector {
    var self_1711: Rotor;
    var other_1541: MultiVector;

    self_1711 = self_1710;
    other_1541 = other_1540;
    let _e4: Rotor = self_1711;
    let _e8: MultiVector = other_1541;
    let _e11: MultiVector = other_1541;
    let _e14: MultiVector = other_1541;
    let _e26: Rotor = self_1711;
    let _e30: MultiVector = other_1541;
    let _e33: MultiVector = other_1541;
    let _e36: MultiVector = other_1541;
    let _e49: Rotor = self_1711;
    let _e53: MultiVector = other_1541;
    let _e57: Rotor = self_1711;
    let _e61: MultiVector = other_1541;
    let _e64: MultiVector = other_1541;
    let _e67: MultiVector = other_1541;
    let _e80: Rotor = self_1711;
    let _e84: MultiVector = other_1541;
    let _e87: Rotor = self_1711;
    let _e91: MultiVector = other_1541;
    let _e94: Rotor = self_1711;
    let _e98: MultiVector = other_1541;
    let _e101: Rotor = self_1711;
    let _e105: MultiVector = other_1541;
    let _e108: Rotor = self_1711;
    let _e112: MultiVector = other_1541;
    let _e115: Rotor = self_1711;
    let _e118: Rotor = self_1711;
    let _e121: Rotor = self_1711;
    let _e125: MultiVector = other_1541;
    let _e131: Rotor = self_1711;
    let _e135: MultiVector = other_1541;
    let _e138: Rotor = self_1711;
    let _e141: Rotor = self_1711;
    let _e144: Rotor = self_1711;
    let _e148: MultiVector = other_1541;
    let _e154: Rotor = self_1711;
    let _e158: MultiVector = other_1541;
    let _e161: Rotor = self_1711;
    let _e164: Rotor = self_1711;
    let _e167: Rotor = self_1711;
    let _e171: MultiVector = other_1541;
    let _e177: Rotor = self_1711;
    let _e181: MultiVector = other_1541;
    let _e184: MultiVector = other_1541;
    let _e187: MultiVector = other_1541;
    let _e190: MultiVector = other_1541;
    let _e202: Rotor = self_1711;
    let _e206: MultiVector = other_1541;
    let _e209: MultiVector = other_1541;
    let _e212: MultiVector = other_1541;
    let _e215: MultiVector = other_1541;
    let _e228: Rotor = self_1711;
    let _e232: MultiVector = other_1541;
    let _e236: Rotor = self_1711;
    let _e240: MultiVector = other_1541;
    let _e243: MultiVector = other_1541;
    let _e246: MultiVector = other_1541;
    let _e249: MultiVector = other_1541;
    let _e262: Rotor = self_1711;
    let _e266: MultiVector = other_1541;
    let _e269: MultiVector = other_1541;
    let _e272: MultiVector = other_1541;
    let _e275: MultiVector = other_1541;
    let _e288: Rotor = self_1711;
    let _e292: MultiVector = other_1541;
    let _e295: MultiVector = other_1541;
    let _e298: MultiVector = other_1541;
    let _e301: MultiVector = other_1541;
    let _e315: Rotor = self_1711;
    let _e319: MultiVector = other_1541;
    let _e322: MultiVector = other_1541;
    let _e325: MultiVector = other_1541;
    let _e328: MultiVector = other_1541;
    let _e342: Rotor = self_1711;
    let _e346: MultiVector = other_1541;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y, _e11.g4_.y, _e14.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g4_.z, _e33.g4_.z, _e36.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + (vec3<f32>(_e49.g0_.w) * _e53.g0_)) + ((vec3<f32>(_e57.g0_.x) * vec3<f32>(_e61.g4_.x, _e64.g4_.x, _e67.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e80.g0_.w) * _e84.g1_), (vec2<f32>(_e87.g0_.w) * _e91.g2_), (vec4<f32>(_e94.g0_.w) * _e98.g3_), (vec3<f32>(_e101.g0_.w) * _e105.g4_), ((vec3<f32>(_e108.g0_.w) * _e112.g5_) + (vec3<f32>(_e115.g0_.x, _e118.g0_.y, _e121.g0_.z) * vec3<f32>(_e125.g0_.x))), ((vec3<f32>(_e131.g0_.w) * _e135.g6_) + (vec3<f32>(_e138.g0_.x, _e141.g0_.y, _e144.g0_.z) * vec3<f32>(_e148.g0_.z))), ((vec3<f32>(_e154.g0_.w) * _e158.g7_) + (vec3<f32>(_e161.g0_.x, _e164.g0_.y, _e167.g0_.z) * vec3<f32>(_e171.g2_.y))), (((((vec4<f32>(_e177.g0_.y) * vec4<f32>(_e181.g2_.x, _e184.g2_.x, _e187.g2_.x, _e190.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e202.g0_.z) * vec4<f32>(_e206.g2_.x, _e209.g2_.x, _e212.g2_.x, _e215.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e228.g0_.w) * _e232.g8_)) + ((vec4<f32>(_e236.g0_.x) * vec4<f32>(_e240.g2_.x, _e243.g2_.x, _e246.g2_.x, _e249.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e262.g0_.x) * vec4<f32>(_e266.g3_.w, _e269.g9_.z, _e272.g9_.y, _e275.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e288.g0_.y) * vec4<f32>(_e292.g9_.z, _e295.g3_.w, _e298.g9_.x, _e301.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e315.g0_.z) * vec4<f32>(_e319.g9_.y, _e322.g9_.x, _e325.g3_.w, _e328.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e342.g0_.w) * _e346.g9_)));
}

fn rotor_multi_vector_left_anti_contraction(self_1712: Rotor, other_1542: MultiVector) -> MultiVector {
    var self_1713: Rotor;
    var other_1543: MultiVector;

    self_1713 = self_1712;
    other_1543 = other_1542;
    let _e4: Rotor = self_1713;
    let _e8: MultiVector = other_1543;
    let _e11: MultiVector = other_1543;
    let _e14: MultiVector = other_1543;
    let _e26: Rotor = self_1713;
    let _e30: MultiVector = other_1543;
    let _e33: MultiVector = other_1543;
    let _e36: MultiVector = other_1543;
    let _e49: Rotor = self_1713;
    let _e53: MultiVector = other_1543;
    let _e57: Rotor = self_1713;
    let _e61: MultiVector = other_1543;
    let _e64: MultiVector = other_1543;
    let _e67: MultiVector = other_1543;
    let _e80: Rotor = self_1713;
    let _e84: MultiVector = other_1543;
    let _e87: Rotor = self_1713;
    let _e91: MultiVector = other_1543;
    let _e94: Rotor = self_1713;
    let _e98: MultiVector = other_1543;
    let _e101: Rotor = self_1713;
    let _e105: MultiVector = other_1543;
    let _e108: Rotor = self_1713;
    let _e112: MultiVector = other_1543;
    let _e115: Rotor = self_1713;
    let _e118: Rotor = self_1713;
    let _e121: Rotor = self_1713;
    let _e125: MultiVector = other_1543;
    let _e131: Rotor = self_1713;
    let _e135: MultiVector = other_1543;
    let _e138: Rotor = self_1713;
    let _e142: MultiVector = other_1543;
    let _e145: Rotor = self_1713;
    let _e148: Rotor = self_1713;
    let _e151: Rotor = self_1713;
    let _e155: MultiVector = other_1543;
    let _e161: Rotor = self_1713;
    let _e165: MultiVector = other_1543;
    let _e168: MultiVector = other_1543;
    let _e171: MultiVector = other_1543;
    let _e174: MultiVector = other_1543;
    let _e186: Rotor = self_1713;
    let _e190: MultiVector = other_1543;
    let _e193: MultiVector = other_1543;
    let _e196: MultiVector = other_1543;
    let _e199: MultiVector = other_1543;
    let _e212: Rotor = self_1713;
    let _e216: MultiVector = other_1543;
    let _e220: Rotor = self_1713;
    let _e224: MultiVector = other_1543;
    let _e227: MultiVector = other_1543;
    let _e230: MultiVector = other_1543;
    let _e233: MultiVector = other_1543;
    let _e246: Rotor = self_1713;
    let _e250: MultiVector = other_1543;
    let _e261: Rotor = self_1713;
    let _e265: MultiVector = other_1543;
    let _e277: Rotor = self_1713;
    let _e281: MultiVector = other_1543;
    let _e285: Rotor = self_1713;
    let _e289: MultiVector = other_1543;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y, _e11.g4_.y, _e14.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0))) + ((vec3<f32>(_e26.g0_.z) * vec3<f32>(_e30.g4_.z, _e33.g4_.z, _e36.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + (vec3<f32>(_e49.g0_.w) * _e53.g0_)) + ((vec3<f32>(_e57.g0_.x) * vec3<f32>(_e61.g4_.x, _e64.g4_.x, _e67.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e80.g0_.w) * _e84.g1_), (vec2<f32>(_e87.g0_.w) * _e91.g2_), (vec4<f32>(_e94.g0_.w) * _e98.g3_), (vec3<f32>(_e101.g0_.w) * _e105.g4_), ((vec3<f32>(_e108.g0_.w) * _e112.g5_) + (vec3<f32>(_e115.g0_.x, _e118.g0_.y, _e121.g0_.z) * vec3<f32>(_e125.g0_.x))), (vec3<f32>(_e131.g0_.w) * _e135.g6_), ((vec3<f32>(_e138.g0_.w) * _e142.g7_) + (vec3<f32>(_e145.g0_.x, _e148.g0_.y, _e151.g0_.z) * vec3<f32>(_e155.g2_.y))), (((((vec4<f32>(_e161.g0_.y) * vec4<f32>(_e165.g2_.x, _e168.g2_.x, _e171.g2_.x, _e174.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e186.g0_.z) * vec4<f32>(_e190.g2_.x, _e193.g2_.x, _e196.g2_.x, _e199.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e212.g0_.w) * _e216.g8_)) + ((vec4<f32>(_e220.g0_.x) * vec4<f32>(_e224.g2_.x, _e227.g2_.x, _e230.g2_.x, _e233.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e246.g0_.y) * _e250.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e261.g0_.z) * _e265.g3_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e277.g0_.w) * _e281.g9_)) + ((vec4<f32>(_e285.g0_.x) * _e289.g3_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_multi_vector_anti_scalar_product(self_1714: Rotor, other_1544: MultiVector) -> AntiScalar {
    var self_1715: Rotor;
    var other_1545: MultiVector;

    self_1715 = self_1714;
    other_1545 = other_1544;
    let _e5: Rotor = self_1715;
    let _e8: MultiVector = other_1545;
    let _e13: Rotor = self_1715;
    let _e16: MultiVector = other_1545;
    let _e21: Rotor = self_1715;
    let _e24: MultiVector = other_1545;
    let _e29: Rotor = self_1715;
    let _e32: MultiVector = other_1545;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g6_.x)) - (_e13.g0_.y * _e16.g6_.y)) - (_e21.g0_.z * _e24.g6_.z)) + (_e29.g0_.w * _e32.g0_.z)));
}

fn rotor_scale(self_1716: Rotor, other_1546: f32) -> Rotor {
    var self_1717: Rotor;
    var other_1547: f32;

    self_1717 = self_1716;
    other_1547 = other_1546;
    let _e4: Rotor = self_1717;
    let _e5: f32 = other_1547;
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn translator_zero() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn translator_one() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn translator_neg(self_1718: Translator) -> Translator {
    var self_1719: Translator;

    self_1719 = self_1718;
    let _e2: Translator = self_1719;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn translator_automorphism(self_1720: Translator) -> Translator {
    var self_1721: Translator;

    self_1721 = self_1720;
    let _e2: Translator = self_1721;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn translator_reversal(self_1722: Translator) -> Translator {
    var self_1723: Translator;

    self_1723 = self_1722;
    let _e2: Translator = self_1723;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn translator_conjugation(self_1724: Translator) -> Translator {
    var self_1725: Translator;

    self_1725 = self_1724;
    let _e2: Translator = self_1725;
    return Translator((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn translator_anti_reversal(self_1726: Translator) -> Translator {
    var self_1727: Translator;

    self_1727 = self_1726;
    let _e2: Translator = self_1727;
    return Translator((_e2.g0_ * vec4<f32>(1.0, 1.0, 1.0, -(1.0))));
}

fn translator_scalar_geometric_product(self_1728: Translator, other_1548: Scalar) -> Translator {
    var self_1729: Translator;
    var other_1549: Scalar;

    self_1729 = self_1728;
    other_1549 = other_1548;
    let _e4: Translator = self_1729;
    let _e6: Scalar = other_1549;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_regressive_product(self_1730: Translator, other_1550: Scalar) -> Scalar {
    var self_1731: Translator;
    var other_1551: Scalar;

    self_1731 = self_1730;
    other_1551 = other_1550;
    let _e4: Translator = self_1731;
    let _e7: Scalar = other_1551;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_outer_product(self_1732: Translator, other_1552: Scalar) -> Translator {
    var self_1733: Translator;
    var other_1553: Scalar;

    self_1733 = self_1732;
    other_1553 = other_1552;
    let _e4: Translator = self_1733;
    let _e6: Scalar = other_1553;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_inner_product(self_1734: Translator, other_1554: Scalar) -> Translator {
    var self_1735: Translator;
    var other_1555: Scalar;

    self_1735 = self_1734;
    other_1555 = other_1554;
    let _e4: Translator = self_1735;
    let _e6: Scalar = other_1555;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_geometric_anti_product(self_1736: Translator, other_1556: Scalar) -> Scalar {
    var self_1737: Translator;
    var other_1557: Scalar;

    self_1737 = self_1736;
    other_1557 = other_1556;
    let _e4: Translator = self_1737;
    let _e7: Scalar = other_1557;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_inner_anti_product(self_1738: Translator, other_1558: Scalar) -> Scalar {
    var self_1739: Translator;
    var other_1559: Scalar;

    self_1739 = self_1738;
    other_1559 = other_1558;
    let _e4: Translator = self_1739;
    let _e7: Scalar = other_1559;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_right_contraction(self_1740: Translator, other_1560: Scalar) -> Translator {
    var self_1741: Translator;
    var other_1561: Scalar;

    self_1741 = self_1740;
    other_1561 = other_1560;
    let _e4: Translator = self_1741;
    let _e6: Scalar = other_1561;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_left_anti_contraction(self_1742: Translator, other_1562: Scalar) -> Scalar {
    var self_1743: Translator;
    var other_1563: Scalar;

    self_1743 = self_1742;
    other_1563 = other_1562;
    let _e4: Translator = self_1743;
    let _e7: Scalar = other_1563;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_into(self_1744: Translator) -> AntiScalar {
    var self_1745: Translator;

    self_1745 = self_1744;
    let _e2: Translator = self_1745;
    return AntiScalar(_e2.g0_.w);
}

fn translator_anti_scalar_add(self_1746: Translator, other_1564: AntiScalar) -> Translator {
    var self_1747: Translator;
    var other_1565: AntiScalar;

    self_1747 = self_1746;
    other_1565 = other_1564;
    let _e4: Translator = self_1747;
    let _e6: AntiScalar = other_1565;
    return Translator((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_sub(self_1748: Translator, other_1566: AntiScalar) -> Translator {
    var self_1749: Translator;
    var other_1567: AntiScalar;

    self_1749 = self_1748;
    other_1567 = other_1566;
    let _e4: Translator = self_1749;
    let _e6: AntiScalar = other_1567;
    return Translator((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_regressive_product(self_1750: Translator, other_1568: AntiScalar) -> Translator {
    var self_1751: Translator;
    var other_1569: AntiScalar;

    self_1751 = self_1750;
    other_1569 = other_1568;
    let _e4: Translator = self_1751;
    let _e6: AntiScalar = other_1569;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_geometric_anti_product(self_1752: Translator, other_1570: AntiScalar) -> Translator {
    var self_1753: Translator;
    var other_1571: AntiScalar;

    self_1753 = self_1752;
    other_1571 = other_1570;
    let _e4: Translator = self_1753;
    let _e6: AntiScalar = other_1571;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_inner_anti_product(self_1754: Translator, other_1572: AntiScalar) -> Translator {
    var self_1755: Translator;
    var other_1573: AntiScalar;

    self_1755 = self_1754;
    other_1573 = other_1572;
    let _e4: Translator = self_1755;
    let _e6: AntiScalar = other_1573;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_left_anti_contraction(self_1756: Translator, other_1574: AntiScalar) -> AntiScalar {
    var self_1757: Translator;
    var other_1575: AntiScalar;

    self_1757 = self_1756;
    other_1575 = other_1574;
    let _e4: Translator = self_1757;
    let _e7: AntiScalar = other_1575;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_right_anti_contraction(self_1758: Translator, other_1576: AntiScalar) -> Translator {
    var self_1759: Translator;
    var other_1577: AntiScalar;

    self_1759 = self_1758;
    other_1577 = other_1576;
    let _e4: Translator = self_1759;
    let _e6: AntiScalar = other_1577;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_anti_scalar_product(self_1760: Translator, other_1578: AntiScalar) -> AntiScalar {
    var self_1761: Translator;
    var other_1579: AntiScalar;

    self_1761 = self_1760;
    other_1579 = other_1578;
    let _e4: Translator = self_1761;
    let _e7: AntiScalar = other_1579;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_radial_point_regressive_product(self_1762: Translator, other_1580: RadialPoint) -> RadialPoint {
    var self_1763: Translator;
    var other_1581: RadialPoint;

    self_1763 = self_1762;
    other_1581 = other_1580;
    let _e4: Translator = self_1763;
    let _e8: RadialPoint = other_1581;
    let _e11: Translator = self_1763;
    let _e15: RadialPoint = other_1581;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_radial_point_outer_product(self_1764: Translator, other_1582: RadialPoint) -> Plane {
    var self_1765: Translator;
    var other_1583: RadialPoint;

    self_1765 = self_1764;
    other_1583 = other_1582;
    let _e4: Translator = self_1765;
    let _e8: RadialPoint = other_1583;
    let _e11: RadialPoint = other_1583;
    let _e14: RadialPoint = other_1583;
    let _e17: RadialPoint = other_1583;
    let _e29: Translator = self_1765;
    let _e33: RadialPoint = other_1583;
    let _e36: RadialPoint = other_1583;
    let _e39: RadialPoint = other_1583;
    let _e42: RadialPoint = other_1583;
    let _e55: Translator = self_1765;
    let _e59: RadialPoint = other_1583;
    let _e62: RadialPoint = other_1583;
    let _e65: RadialPoint = other_1583;
    let _e68: RadialPoint = other_1583;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.x, _e36.g1_.x, _e39.g1_.x, _e42.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g1_.x, _e62.g1_.x, _e65.g1_.x, _e68.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))));
}

fn translator_radial_point_geometric_anti_product(self_1766: Translator, other_1584: RadialPoint) -> RadialPoint {
    var self_1767: Translator;
    var other_1585: RadialPoint;

    self_1767 = self_1766;
    other_1585 = other_1584;
    let _e4: Translator = self_1767;
    let _e8: RadialPoint = other_1585;
    let _e11: Translator = self_1767;
    let _e14: Translator = self_1767;
    let _e17: Translator = self_1767;
    let _e21: RadialPoint = other_1585;
    let _e27: Translator = self_1767;
    let _e31: RadialPoint = other_1585;
    return RadialPoint(((vec3<f32>(_e4.g0_.w) * _e8.g0_) + (vec3<f32>(_e11.g0_.x, _e14.g0_.y, _e17.g0_.z) * vec3<f32>(_e21.g1_.x))), (vec2<f32>(_e27.g0_.w) * _e31.g1_));
}

fn translator_radial_point_inner_anti_product(self_1768: Translator, other_1586: RadialPoint) -> RadialPoint {
    var self_1769: Translator;
    var other_1587: RadialPoint;

    self_1769 = self_1768;
    other_1587 = other_1586;
    let _e4: Translator = self_1769;
    let _e8: RadialPoint = other_1587;
    let _e11: Translator = self_1769;
    let _e15: RadialPoint = other_1587;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_radial_point_left_anti_contraction(self_1770: Translator, other_1588: RadialPoint) -> RadialPoint {
    var self_1771: Translator;
    var other_1589: RadialPoint;

    self_1771 = self_1770;
    other_1589 = other_1588;
    let _e4: Translator = self_1771;
    let _e8: RadialPoint = other_1589;
    let _e11: Translator = self_1771;
    let _e15: RadialPoint = other_1589;
    return RadialPoint((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_flat_point_regressive_product(self_1772: Translator, other_1590: FlatPoint) -> FlatPoint {
    var self_1773: Translator;
    var other_1591: FlatPoint;

    self_1773 = self_1772;
    other_1591 = other_1590;
    let _e4: Translator = self_1773;
    let _e8: FlatPoint = other_1591;
    return FlatPoint((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_flat_point_geometric_anti_product(self_1774: Translator, other_1592: FlatPoint) -> FlatPoint {
    var self_1775: Translator;
    var other_1593: FlatPoint;

    self_1775 = self_1774;
    other_1593 = other_1592;
    let _e4: Translator = self_1775;
    let _e8: FlatPoint = other_1593;
    let _e11: Translator = self_1775;
    let _e14: FlatPoint = other_1593;
    return FlatPoint(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_flat_point_inner_anti_product(self_1776: Translator, other_1594: FlatPoint) -> FlatPoint {
    var self_1777: Translator;
    var other_1595: FlatPoint;

    self_1777 = self_1776;
    other_1595 = other_1594;
    let _e4: Translator = self_1777;
    let _e8: FlatPoint = other_1595;
    return FlatPoint((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_flat_point_left_anti_contraction(self_1778: Translator, other_1596: FlatPoint) -> FlatPoint {
    var self_1779: Translator;
    var other_1597: FlatPoint;

    self_1779 = self_1778;
    other_1597 = other_1596;
    let _e4: Translator = self_1779;
    let _e8: FlatPoint = other_1597;
    return FlatPoint((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_dipole_geometric_product(self_1780: Translator, other_1598: Dipole) -> Motor {
    var self_1781: Translator;
    var other_1599: Dipole;

    self_1781 = self_1780;
    other_1599 = other_1598;
    let _e4: Translator = self_1781;
    let _e8: Dipole = other_1599;
    let _e11: Dipole = other_1599;
    let _e14: Dipole = other_1599;
    let _e17: Dipole = other_1599;
    let _e30: Translator = self_1781;
    let _e34: Dipole = other_1599;
    let _e37: Dipole = other_1599;
    let _e40: Dipole = other_1599;
    let _e43: Dipole = other_1599;
    let _e57: Translator = self_1781;
    let _e61: Dipole = other_1599;
    let _e64: Dipole = other_1599;
    let _e67: Dipole = other_1599;
    let _e70: Dipole = other_1599;
    let _e82: Translator = self_1781;
    let _e86: Dipole = other_1599;
    let _e89: Dipole = other_1599;
    let _e92: Dipole = other_1599;
    let _e95: Dipole = other_1599;
    let _e109: Translator = self_1781;
    let _e113: Dipole = other_1599;
    let _e116: Dipole = other_1599;
    let _e119: Dipole = other_1599;
    let _e122: Dipole = other_1599;
    let _e135: Translator = self_1781;
    let _e139: Dipole = other_1599;
    let _e142: Dipole = other_1599;
    let _e145: Dipole = other_1599;
    let _e148: Dipole = other_1599;
    let _e162: Translator = self_1781;
    let _e166: Dipole = other_1599;
    let _e169: Dipole = other_1599;
    let _e172: Dipole = other_1599;
    let _e175: Dipole = other_1599;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.z, _e116.g1_.z, _e119.g1_.x, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g1_.x, _e145.g1_.y, _e148.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g1_.x, _e169.g1_.z, _e172.g1_.y, _e175.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn translator_dipole_outer_product(self_1782: Translator, other_1600: Dipole) -> AntiScalar {
    var self_1783: Translator;
    var other_1601: Dipole;

    self_1783 = self_1782;
    other_1601 = other_1600;
    let _e5: Translator = self_1783;
    let _e8: Dipole = other_1601;
    let _e13: Translator = self_1783;
    let _e16: Dipole = other_1601;
    let _e21: Translator = self_1783;
    let _e24: Dipole = other_1601;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_dipole_inner_anti_product(self_1784: Translator, other_1602: Dipole) -> Dipole {
    var self_1785: Translator;
    var other_1603: Dipole;

    self_1785 = self_1784;
    other_1603 = other_1602;
    let _e4: Translator = self_1785;
    let _e8: Dipole = other_1603;
    let _e11: Translator = self_1785;
    let _e15: Dipole = other_1603;
    let _e18: Translator = self_1785;
    let _e22: Dipole = other_1603;
    return Dipole((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec4<f32>(_e18.g0_.w) * _e22.g2_));
}

fn translator_dipole_left_anti_contraction(self_1786: Translator, other_1604: Dipole) -> Dipole {
    var self_1787: Translator;
    var other_1605: Dipole;

    self_1787 = self_1786;
    other_1605 = other_1604;
    let _e4: Translator = self_1787;
    let _e8: Dipole = other_1605;
    let _e11: Translator = self_1787;
    let _e15: Dipole = other_1605;
    let _e18: Translator = self_1787;
    let _e22: Dipole = other_1605;
    return Dipole((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec4<f32>(_e18.g0_.w) * _e22.g2_));
}

fn translator_line_inner_anti_product(self_1788: Translator, other_1606: Line) -> Line {
    var self_1789: Translator;
    var other_1607: Line;

    self_1789 = self_1788;
    other_1607 = other_1606;
    let _e4: Translator = self_1789;
    let _e8: Line = other_1607;
    let _e11: Translator = self_1789;
    let _e15: Line = other_1607;
    return Line((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_line_left_anti_contraction(self_1790: Translator, other_1608: Line) -> Line {
    var self_1791: Translator;
    var other_1609: Line;

    self_1791 = self_1790;
    other_1609 = other_1608;
    let _e4: Translator = self_1791;
    let _e8: Line = other_1609;
    let _e11: Translator = self_1791;
    let _e15: Line = other_1609;
    return Line((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_circle_inner_anti_product(self_1792: Translator, other_1610: Circle) -> Circle {
    var self_1793: Translator;
    var other_1611: Circle;

    self_1793 = self_1792;
    other_1611 = other_1610;
    let _e4: Translator = self_1793;
    let _e8: Circle = other_1611;
    let _e11: Translator = self_1793;
    let _e15: Circle = other_1611;
    let _e18: Translator = self_1793;
    let _e22: Circle = other_1611;
    return Circle((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec3<f32>(_e18.g0_.w) * _e22.g2_));
}

fn translator_circle_left_anti_contraction(self_1794: Translator, other_1612: Circle) -> Circle {
    var self_1795: Translator;
    var other_1613: Circle;

    self_1795 = self_1794;
    other_1613 = other_1612;
    let _e4: Translator = self_1795;
    let _e8: Circle = other_1613;
    let _e11: Translator = self_1795;
    let _e15: Circle = other_1613;
    let _e18: Translator = self_1795;
    let _e22: Circle = other_1613;
    return Circle((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec3<f32>(_e18.g0_.w) * _e22.g2_));
}

fn translator_plane_inner_anti_product(self_1796: Translator, other_1614: Plane) -> Plane {
    var self_1797: Translator;
    var other_1615: Plane;

    self_1797 = self_1796;
    other_1615 = other_1614;
    let _e4: Translator = self_1797;
    let _e8: Plane = other_1615;
    let _e20: Translator = self_1797;
    let _e24: Plane = other_1615;
    let _e37: Translator = self_1797;
    let _e41: Plane = other_1615;
    let _e45: Translator = self_1797;
    let _e49: Plane = other_1615;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_plane_left_anti_contraction(self_1798: Translator, other_1616: Plane) -> Plane {
    var self_1799: Translator;
    var other_1617: Plane;

    self_1799 = self_1798;
    other_1617 = other_1616;
    let _e4: Translator = self_1799;
    let _e8: Plane = other_1617;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_sphere_inner_anti_product(self_1800: Translator, other_1618: Sphere) -> Sphere {
    var self_1801: Translator;
    var other_1619: Sphere;

    self_1801 = self_1800;
    other_1619 = other_1618;
    let _e4: Translator = self_1801;
    let _e8: Sphere = other_1619;
    let _e18: Translator = self_1801;
    let _e22: Sphere = other_1619;
    let _e33: Translator = self_1801;
    let _e37: Sphere = other_1619;
    let _e41: Translator = self_1801;
    let _e45: Sphere = other_1619;
    let _e56: Translator = self_1801;
    let _e60: Sphere = other_1619;
    return Sphere((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g1_.x)) * vec2<f32>(0.0, -(1.0)))), (vec3<f32>(_e56.g0_.w) * _e60.g1_));
}

fn translator_sphere_left_anti_contraction(self_1802: Translator, other_1620: Sphere) -> Sphere {
    var self_1803: Translator;
    var other_1621: Sphere;

    self_1803 = self_1802;
    other_1621 = other_1620;
    let _e4: Translator = self_1803;
    let _e8: Sphere = other_1621;
    let _e11: Translator = self_1803;
    let _e15: Sphere = other_1621;
    return Sphere((vec2<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_motor_add(self_1804: Translator, other_1622: Motor) -> Motor {
    var self_1805: Translator;
    var other_1623: Motor;

    self_1805 = self_1804;
    other_1623 = other_1622;
    let _e4: Translator = self_1805;
    let _e13: Motor = other_1623;
    let _e16: Translator = self_1805;
    let _e25: Motor = other_1623;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), ((_e16.g0_.xyzx * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e25.g1_));
}

fn translator_motor_sub(self_1806: Translator, other_1624: Motor) -> Motor {
    var self_1807: Translator;
    var other_1625: Motor;

    self_1807 = self_1806;
    other_1625 = other_1624;
    let _e4: Translator = self_1807;
    let _e13: Motor = other_1625;
    let _e16: Translator = self_1807;
    let _e25: Motor = other_1625;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), ((_e16.g0_.xyzx * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e25.g1_));
}

fn translator_motor_regressive_product(self_1808: Translator, other_1626: Motor) -> Motor {
    var self_1809: Translator;
    var other_1627: Motor;

    self_1809 = self_1808;
    other_1627 = other_1626;
    let _e4: Translator = self_1809;
    let _e8: Motor = other_1627;
    let _e11: Translator = self_1809;
    let _e15: Motor = other_1627;
    let _e26: Translator = self_1809;
    let _e30: Motor = other_1627;
    let _e42: Translator = self_1809;
    let _e46: Motor = other_1627;
    let _e50: Translator = self_1809;
    let _e54: Motor = other_1627;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e42.g0_.w) * _e46.g1_)) + ((vec4<f32>(_e50.g0_.x) * _e54.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_motor_geometric_anti_product(self_1810: Translator, other_1628: Motor) -> Motor {
    var self_1811: Translator;
    var other_1629: Motor;

    self_1811 = self_1810;
    other_1629 = other_1628;
    let _e4: Translator = self_1811;
    let _e8: Motor = other_1629;
    let _e11: Translator = self_1811;
    let _e15: Motor = other_1629;
    let _e27: Translator = self_1811;
    let _e31: Motor = other_1629;
    let _e44: Translator = self_1811;
    let _e48: Motor = other_1629;
    let _e61: Translator = self_1811;
    let _e65: Motor = other_1629;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.x) * _e15.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e27.g0_.y) * _e31.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e44.g0_.z) * _e48.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e61.g0_.w) * _e65.g1_)));
}

fn translator_motor_inner_anti_product(self_1812: Translator, other_1630: Motor) -> Motor {
    var self_1813: Translator;
    var other_1631: Motor;

    self_1813 = self_1812;
    other_1631 = other_1630;
    let _e4: Translator = self_1813;
    let _e8: Motor = other_1631;
    let _e11: Translator = self_1813;
    let _e15: Motor = other_1631;
    let _e18: Translator = self_1813;
    let _e21: Motor = other_1631;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((vec4<f32>(_e11.g0_.w) * _e15.g1_) + ((_e18.g0_.xyzx * _e21.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_motor_left_anti_contraction(self_1814: Translator, other_1632: Motor) -> Motor {
    var self_1815: Translator;
    var other_1633: Motor;

    self_1815 = self_1814;
    other_1633 = other_1632;
    let _e4: Translator = self_1815;
    let _e8: Motor = other_1633;
    let _e11: Translator = self_1815;
    let _e15: Motor = other_1633;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec4<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_motor_right_anti_contraction(self_1816: Translator, other_1634: Motor) -> Translator {
    var self_1817: Translator;
    var other_1635: Motor;

    self_1817 = self_1816;
    other_1635 = other_1634;
    let _e4: Translator = self_1817;
    let _e6: Motor = other_1635;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_motor_anti_scalar_product(self_1818: Translator, other_1636: Motor) -> AntiScalar {
    var self_1819: Translator;
    var other_1637: Motor;

    self_1819 = self_1818;
    other_1637 = other_1636;
    let _e4: Translator = self_1819;
    let _e7: Motor = other_1637;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_rotor_regressive_product(self_1820: Translator, other_1638: Rotor) -> Motor {
    var self_1821: Translator;
    var other_1639: Rotor;

    self_1821 = self_1820;
    other_1639 = other_1638;
    let _e4: Translator = self_1821;
    let _e8: Rotor = other_1639;
    let _e11: Translator = self_1821;
    let _e15: Rotor = other_1639;
    let _e26: Translator = self_1821;
    let _e30: Rotor = other_1639;
    let _e42: Translator = self_1821;
    let _e46: Rotor = other_1639;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_rotor_geometric_anti_product(self_1822: Translator, other_1640: Rotor) -> Motor {
    var self_1823: Translator;
    var other_1641: Rotor;

    self_1823 = self_1822;
    other_1641 = other_1640;
    let _e4: Translator = self_1823;
    let _e8: Rotor = other_1641;
    let _e11: Translator = self_1823;
    let _e15: Rotor = other_1641;
    let _e27: Translator = self_1823;
    let _e31: Rotor = other_1641;
    let _e44: Translator = self_1823;
    let _e48: Rotor = other_1641;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e27.g0_.y) * _e31.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e44.g0_.z) * _e48.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))));
}

fn translator_rotor_left_anti_contraction(self_1824: Translator, other_1642: Rotor) -> Rotor {
    var self_1825: Translator;
    var other_1643: Rotor;

    self_1825 = self_1824;
    other_1643 = other_1642;
    let _e4: Translator = self_1825;
    let _e8: Rotor = other_1643;
    return Rotor((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_rotor_right_anti_contraction(self_1826: Translator, other_1644: Rotor) -> Translator {
    var self_1827: Translator;
    var other_1645: Rotor;

    self_1827 = self_1826;
    other_1645 = other_1644;
    let _e4: Translator = self_1827;
    let _e6: Rotor = other_1645;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_rotor_anti_scalar_product(self_1828: Translator, other_1646: Rotor) -> AntiScalar {
    var self_1829: Translator;
    var other_1647: Rotor;

    self_1829 = self_1828;
    other_1647 = other_1646;
    let _e4: Translator = self_1829;
    let _e7: Rotor = other_1647;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_translator_add(self_1830: Translator, other_1648: Translator) -> Translator {
    var self_1831: Translator;
    var other_1649: Translator;

    self_1831 = self_1830;
    other_1649 = other_1648;
    let _e4: Translator = self_1831;
    let _e6: Translator = other_1649;
    return Translator((_e4.g0_ + _e6.g0_));
}

fn translator_translator_sub(self_1832: Translator, other_1650: Translator) -> Translator {
    var self_1833: Translator;
    var other_1651: Translator;

    self_1833 = self_1832;
    other_1651 = other_1650;
    let _e4: Translator = self_1833;
    let _e6: Translator = other_1651;
    return Translator((_e4.g0_ - _e6.g0_));
}

fn translator_translator_mul(self_1834: Translator, other_1652: Translator) -> Translator {
    var self_1835: Translator;
    var other_1653: Translator;

    self_1835 = self_1834;
    other_1653 = other_1652;
    let _e4: Translator = self_1835;
    let _e6: Translator = other_1653;
    return Translator((_e4.g0_ * _e6.g0_));
}

fn translator_translator_div(self_1836: Translator, other_1654: Translator) -> Translator {
    var self_1837: Translator;
    var other_1655: Translator;

    self_1837 = self_1836;
    other_1655 = other_1654;
    let _e4: Translator = self_1837;
    let _e7: Translator = self_1837;
    let _e10: Translator = self_1837;
    let _e13: Translator = self_1837;
    let _e23: Translator = other_1655;
    let _e26: Translator = other_1655;
    let _e29: Translator = other_1655;
    let _e32: Translator = other_1655;
    return Translator((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn translator_translator_regressive_product(self_1838: Translator, other_1656: Translator) -> Translator {
    var self_1839: Translator;
    var other_1657: Translator;

    self_1839 = self_1838;
    other_1657 = other_1656;
    let _e4: Translator = self_1839;
    let _e8: Translator = other_1657;
    let _e11: Translator = self_1839;
    let _e14: Translator = other_1657;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_geometric_anti_product(self_1840: Translator, other_1658: Translator) -> Translator {
    var self_1841: Translator;
    var other_1659: Translator;

    self_1841 = self_1840;
    other_1659 = other_1658;
    let _e4: Translator = self_1841;
    let _e8: Translator = other_1659;
    let _e11: Translator = self_1841;
    let _e14: Translator = other_1659;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_inner_anti_product(self_1842: Translator, other_1660: Translator) -> Translator {
    var self_1843: Translator;
    var other_1661: Translator;

    self_1843 = self_1842;
    other_1661 = other_1660;
    let _e4: Translator = self_1843;
    let _e8: Translator = other_1661;
    let _e11: Translator = self_1843;
    let _e14: Translator = other_1661;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_left_anti_contraction(self_1844: Translator, other_1662: Translator) -> Translator {
    var self_1845: Translator;
    var other_1663: Translator;

    self_1845 = self_1844;
    other_1663 = other_1662;
    let _e4: Translator = self_1845;
    let _e8: Translator = other_1663;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_translator_right_anti_contraction(self_1846: Translator, other_1664: Translator) -> Translator {
    var self_1847: Translator;
    var other_1665: Translator;

    self_1847 = self_1846;
    other_1665 = other_1664;
    let _e4: Translator = self_1847;
    let _e6: Translator = other_1665;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_translator_anti_scalar_product(self_1848: Translator, other_1666: Translator) -> AntiScalar {
    var self_1849: Translator;
    var other_1667: Translator;

    self_1849 = self_1848;
    other_1667 = other_1666;
    let _e4: Translator = self_1849;
    let _e7: Translator = other_1667;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_flector_regressive_product(self_1850: Translator, other_1668: Flector) -> Flector {
    var self_1851: Translator;
    var other_1669: Flector;

    self_1851 = self_1850;
    other_1669 = other_1668;
    let _e4: Translator = self_1851;
    let _e8: Flector = other_1669;
    let _e19: Translator = self_1851;
    let _e23: Flector = other_1669;
    let _e35: Translator = self_1851;
    let _e39: Flector = other_1669;
    let _e43: Translator = self_1851;
    let _e47: Flector = other_1669;
    let _e59: Translator = self_1851;
    let _e63: Flector = other_1669;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn translator_flector_geometric_anti_product(self_1852: Translator, other_1670: Flector) -> Flector {
    var self_1853: Translator;
    var other_1671: Flector;

    self_1853 = self_1852;
    other_1671 = other_1670;
    let _e4: Translator = self_1853;
    let _e8: Flector = other_1671;
    let _e11: Flector = other_1671;
    let _e14: Flector = other_1671;
    let _e17: Flector = other_1671;
    let _e29: Translator = self_1853;
    let _e33: Flector = other_1671;
    let _e36: Flector = other_1671;
    let _e39: Flector = other_1671;
    let _e42: Flector = other_1671;
    let _e55: Translator = self_1853;
    let _e59: Flector = other_1671;
    let _e63: Translator = self_1853;
    let _e67: Flector = other_1671;
    let _e70: Flector = other_1671;
    let _e73: Flector = other_1671;
    let _e76: Flector = other_1671;
    let _e89: Translator = self_1853;
    let _e93: Flector = other_1671;
    let _e105: Translator = self_1853;
    let _e109: Flector = other_1671;
    let _e122: Translator = self_1853;
    let _e126: Flector = other_1671;
    let _e130: Translator = self_1853;
    let _e134: Flector = other_1671;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g0_.w, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g0_.w, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + (vec4<f32>(_e55.g0_.w) * _e59.g0_)) + ((vec4<f32>(_e63.g0_.x) * vec4<f32>(_e67.g0_.w, _e70.g1_.z, _e73.g1_.y, _e76.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec4<f32>(_e89.g0_.y) * vec4<f32>(_e93.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e105.g0_.z) * vec4<f32>(_e109.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e122.g0_.w) * _e126.g1_)) + ((vec4<f32>(_e130.g0_.x) * vec4<f32>(_e134.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_inner_anti_product(self_1854: Translator, other_1672: Flector) -> Flector {
    var self_1855: Translator;
    var other_1673: Flector;

    self_1855 = self_1854;
    other_1673 = other_1672;
    let _e4: Translator = self_1855;
    let _e8: Flector = other_1673;
    let _e11: Translator = self_1855;
    let _e15: Flector = other_1673;
    let _e27: Translator = self_1855;
    let _e31: Flector = other_1673;
    let _e44: Translator = self_1855;
    let _e48: Flector = other_1673;
    let _e52: Translator = self_1855;
    let _e56: Flector = other_1673;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e44.g0_.w) * _e48.g1_)) + ((vec4<f32>(_e52.g0_.x) * vec4<f32>(_e56.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_left_anti_contraction(self_1856: Translator, other_1674: Flector) -> Flector {
    var self_1857: Translator;
    var other_1675: Flector;

    self_1857 = self_1856;
    other_1675 = other_1674;
    let _e4: Translator = self_1857;
    let _e8: Flector = other_1675;
    let _e11: Translator = self_1857;
    let _e15: Flector = other_1675;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec4<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_dilation_left_anti_contraction(self_1858: Translator, other_1676: Dilation) -> Dilation {
    var self_1859: Translator;
    var other_1677: Dilation;

    self_1859 = self_1858;
    other_1677 = other_1676;
    let _e4: Translator = self_1859;
    let _e8: Dilation = other_1677;
    let _e11: Translator = self_1859;
    let _e15: Dilation = other_1677;
    return Dilation((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec2<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_dilation_right_anti_contraction(self_1860: Translator, other_1678: Dilation) -> Translator {
    var self_1861: Translator;
    var other_1679: Dilation;

    self_1861 = self_1860;
    other_1679 = other_1678;
    let _e4: Translator = self_1861;
    let _e6: Dilation = other_1679;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g1_.y)));
}

fn translator_dilation_anti_scalar_product(self_1862: Translator, other_1680: Dilation) -> AntiScalar {
    var self_1863: Translator;
    var other_1681: Dilation;

    self_1863 = self_1862;
    other_1681 = other_1680;
    let _e4: Translator = self_1863;
    let _e7: Dilation = other_1681;
    return AntiScalar((_e4.g0_.w * _e7.g1_.y));
}

fn translator_multi_vector_add(self_1864: Translator, other_1682: MultiVector) -> MultiVector {
    var self_1865: Translator;
    var other_1683: MultiVector;

    self_1865 = self_1864;
    other_1683 = other_1682;
    let _e4: Translator = self_1865;
    let _e7: Translator = self_1865;
    let _e10: Translator = self_1865;
    let _e19: MultiVector = other_1683;
    let _e22: MultiVector = other_1683;
    let _e24: MultiVector = other_1683;
    let _e26: MultiVector = other_1683;
    let _e28: MultiVector = other_1683;
    let _e30: MultiVector = other_1683;
    let _e32: MultiVector = other_1683;
    let _e34: Translator = self_1865;
    let _e37: Translator = self_1865;
    let _e40: Translator = self_1865;
    let _e44: MultiVector = other_1683;
    let _e47: MultiVector = other_1683;
    let _e49: MultiVector = other_1683;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) + _e19.g0_), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, _e32.g6_, (vec3<f32>(_e34.g0_.x, _e37.g0_.y, _e40.g0_.z) + _e44.g7_), _e47.g8_, _e49.g9_);
}

fn translator_multi_vector_sub(self_1866: Translator, other_1684: MultiVector) -> MultiVector {
    var self_1867: Translator;
    var other_1685: MultiVector;

    self_1867 = self_1866;
    other_1685 = other_1684;
    let _e4: Translator = self_1867;
    let _e7: Translator = self_1867;
    let _e10: Translator = self_1867;
    let _e19: MultiVector = other_1685;
    let _e24: MultiVector = other_1685;
    let _e29: MultiVector = other_1685;
    let _e34: MultiVector = other_1685;
    let _e39: MultiVector = other_1685;
    let _e44: MultiVector = other_1685;
    let _e49: MultiVector = other_1685;
    let _e52: Translator = self_1867;
    let _e55: Translator = self_1867;
    let _e58: Translator = self_1867;
    let _e62: MultiVector = other_1685;
    let _e67: MultiVector = other_1685;
    let _e72: MultiVector = other_1685;
    return MultiVector(((vec3<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.w) * vec3<f32>(0.0, 0.0, 1.0)) - _e19.g0_), (vec3<f32>(0.0) - _e24.g1_), (vec2<f32>(0.0) - _e29.g2_), (vec4<f32>(0.0) - _e34.g3_), (vec3<f32>(0.0) - _e39.g4_), (vec3<f32>(0.0) - _e44.g5_), (vec3<f32>(0.0) - _e49.g6_), (vec3<f32>(_e52.g0_.x, _e55.g0_.y, _e58.g0_.z) - _e62.g7_), (vec4<f32>(0.0) - _e67.g8_), (vec4<f32>(0.0) - _e72.g9_));
}

fn translator_multi_vector_regressive_product(self_1868: Translator, other_1686: MultiVector) -> MultiVector {
    var self_1869: Translator;
    var other_1687: MultiVector;

    self_1869 = self_1868;
    other_1687 = other_1686;
    let _e4: Translator = self_1869;
    let _e8: MultiVector = other_1687;
    let _e19: Translator = self_1869;
    let _e23: MultiVector = other_1687;
    let _e35: Translator = self_1869;
    let _e39: MultiVector = other_1687;
    let _e43: Translator = self_1869;
    let _e47: MultiVector = other_1687;
    let _e59: Translator = self_1869;
    let _e63: MultiVector = other_1687;
    let _e66: MultiVector = other_1687;
    let _e69: MultiVector = other_1687;
    let _e80: Translator = self_1869;
    let _e84: MultiVector = other_1687;
    let _e87: MultiVector = other_1687;
    let _e90: MultiVector = other_1687;
    let _e102: Translator = self_1869;
    let _e106: MultiVector = other_1687;
    let _e110: Translator = self_1869;
    let _e114: MultiVector = other_1687;
    let _e117: MultiVector = other_1687;
    let _e120: MultiVector = other_1687;
    let _e132: Translator = self_1869;
    let _e136: MultiVector = other_1687;
    let _e146: Translator = self_1869;
    let _e150: MultiVector = other_1687;
    let _e161: Translator = self_1869;
    let _e165: MultiVector = other_1687;
    let _e169: Translator = self_1869;
    let _e173: MultiVector = other_1687;
    let _e184: Translator = self_1869;
    let _e188: MultiVector = other_1687;
    let _e199: Translator = self_1869;
    let _e203: MultiVector = other_1687;
    let _e215: Translator = self_1869;
    let _e219: MultiVector = other_1687;
    let _e223: Translator = self_1869;
    let _e227: MultiVector = other_1687;
    let _e239: Translator = self_1869;
    let _e243: MultiVector = other_1687;
    let _e246: Translator = self_1869;
    let _e250: MultiVector = other_1687;
    let _e253: Translator = self_1869;
    let _e256: Translator = self_1869;
    let _e259: Translator = self_1869;
    let _e263: MultiVector = other_1687;
    let _e269: Translator = self_1869;
    let _e273: MultiVector = other_1687;
    let _e276: Translator = self_1869;
    let _e280: MultiVector = other_1687;
    let _e283: Translator = self_1869;
    let _e286: Translator = self_1869;
    let _e289: Translator = self_1869;
    let _e293: MultiVector = other_1687;
    let _e299: Translator = self_1869;
    let _e303: MultiVector = other_1687;
    let _e306: Translator = self_1869;
    let _e310: MultiVector = other_1687;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec3<f32>(_e43.g0_.x) * vec3<f32>(_e47.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((vec3<f32>(_e59.g0_.y) * vec3<f32>(_e63.g8_.z, _e66.g8_.z, _e69.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e80.g0_.z) * vec3<f32>(_e84.g8_.y, _e87.g8_.x, _e90.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e102.g0_.w) * _e106.g1_)) + ((vec3<f32>(_e110.g0_.x) * vec3<f32>(_e114.g8_.x, _e117.g8_.z, _e120.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((vec2<f32>(_e132.g0_.y) * vec2<f32>(_e136.g6_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e146.g0_.z) * vec2<f32>(_e150.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e161.g0_.w) * _e165.g2_)) + ((vec2<f32>(_e169.g0_.x) * vec2<f32>(_e173.g6_.x)) * vec2<f32>(0.0, -(1.0)))), (((((vec4<f32>(_e184.g0_.y) * _e188.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e199.g0_.z) * _e203.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e215.g0_.w) * _e219.g3_)) + ((vec4<f32>(_e223.g0_.x) * _e227.g9_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e239.g0_.w) * _e243.g4_), ((vec3<f32>(_e246.g0_.w) * _e250.g5_) + (vec3<f32>(_e253.g0_.x, _e256.g0_.y, _e259.g0_.z) * vec3<f32>(_e263.g0_.y))), (vec3<f32>(_e269.g0_.w) * _e273.g6_), ((vec3<f32>(_e276.g0_.w) * _e280.g7_) + (vec3<f32>(_e283.g0_.x, _e286.g0_.y, _e289.g0_.z) * vec3<f32>(_e293.g0_.z))), (vec4<f32>(_e299.g0_.w) * _e303.g8_), (vec4<f32>(_e306.g0_.w) * _e310.g9_));
}

fn translator_multi_vector_geometric_anti_product(self_1870: Translator, other_1688: MultiVector) -> MultiVector {
    var self_1871: Translator;
    var other_1689: MultiVector;

    self_1871 = self_1870;
    other_1689 = other_1688;
    let _e4: Translator = self_1871;
    let _e8: MultiVector = other_1689;
    let _e19: Translator = self_1871;
    let _e23: MultiVector = other_1689;
    let _e35: Translator = self_1871;
    let _e39: MultiVector = other_1689;
    let _e43: Translator = self_1871;
    let _e47: MultiVector = other_1689;
    let _e59: Translator = self_1871;
    let _e63: MultiVector = other_1689;
    let _e66: MultiVector = other_1689;
    let _e69: MultiVector = other_1689;
    let _e80: Translator = self_1871;
    let _e84: MultiVector = other_1689;
    let _e87: MultiVector = other_1689;
    let _e90: MultiVector = other_1689;
    let _e102: Translator = self_1871;
    let _e106: MultiVector = other_1689;
    let _e109: MultiVector = other_1689;
    let _e112: MultiVector = other_1689;
    let _e124: Translator = self_1871;
    let _e128: MultiVector = other_1689;
    let _e132: Translator = self_1871;
    let _e136: MultiVector = other_1689;
    let _e146: Translator = self_1871;
    let _e150: MultiVector = other_1689;
    let _e161: Translator = self_1871;
    let _e165: MultiVector = other_1689;
    let _e169: Translator = self_1871;
    let _e173: MultiVector = other_1689;
    let _e184: Translator = self_1871;
    let _e188: MultiVector = other_1689;
    let _e191: MultiVector = other_1689;
    let _e194: MultiVector = other_1689;
    let _e197: MultiVector = other_1689;
    let _e209: Translator = self_1871;
    let _e213: MultiVector = other_1689;
    let _e216: MultiVector = other_1689;
    let _e219: MultiVector = other_1689;
    let _e222: MultiVector = other_1689;
    let _e235: Translator = self_1871;
    let _e239: MultiVector = other_1689;
    let _e243: Translator = self_1871;
    let _e247: MultiVector = other_1689;
    let _e250: MultiVector = other_1689;
    let _e253: MultiVector = other_1689;
    let _e256: MultiVector = other_1689;
    let _e269: Translator = self_1871;
    let _e273: MultiVector = other_1689;
    let _e276: Translator = self_1871;
    let _e280: MultiVector = other_1689;
    let _e283: MultiVector = other_1689;
    let _e286: MultiVector = other_1689;
    let _e297: Translator = self_1871;
    let _e301: MultiVector = other_1689;
    let _e304: MultiVector = other_1689;
    let _e307: MultiVector = other_1689;
    let _e319: Translator = self_1871;
    let _e323: MultiVector = other_1689;
    let _e326: MultiVector = other_1689;
    let _e329: MultiVector = other_1689;
    let _e341: Translator = self_1871;
    let _e345: MultiVector = other_1689;
    let _e349: Translator = self_1871;
    let _e353: MultiVector = other_1689;
    let _e356: Translator = self_1871;
    let _e360: MultiVector = other_1689;
    let _e363: MultiVector = other_1689;
    let _e366: MultiVector = other_1689;
    let _e377: Translator = self_1871;
    let _e381: MultiVector = other_1689;
    let _e384: MultiVector = other_1689;
    let _e387: MultiVector = other_1689;
    let _e399: Translator = self_1871;
    let _e403: MultiVector = other_1689;
    let _e406: MultiVector = other_1689;
    let _e409: MultiVector = other_1689;
    let _e421: Translator = self_1871;
    let _e425: MultiVector = other_1689;
    let _e429: Translator = self_1871;
    let _e433: MultiVector = other_1689;
    let _e445: Translator = self_1871;
    let _e449: MultiVector = other_1689;
    let _e462: Translator = self_1871;
    let _e466: MultiVector = other_1689;
    let _e470: Translator = self_1871;
    let _e474: MultiVector = other_1689;
    let _e487: Translator = self_1871;
    let _e491: MultiVector = other_1689;
    let _e503: Translator = self_1871;
    let _e507: MultiVector = other_1689;
    let _e520: Translator = self_1871;
    let _e524: MultiVector = other_1689;
    let _e528: Translator = self_1871;
    let _e532: MultiVector = other_1689;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec3<f32>(_e43.g0_.x) * vec3<f32>(_e47.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((vec3<f32>(_e59.g0_.x) * vec3<f32>(_e63.g2_.x, _e66.g8_.z, _e69.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e80.g0_.y) * vec3<f32>(_e84.g8_.z, _e87.g2_.x, _e90.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e102.g0_.z) * vec3<f32>(_e106.g8_.y, _e109.g8_.x, _e112.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e124.g0_.w) * _e128.g1_)), (((((vec2<f32>(_e132.g0_.y) * vec2<f32>(_e136.g6_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e146.g0_.z) * vec2<f32>(_e150.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e161.g0_.w) * _e165.g2_)) + ((vec2<f32>(_e169.g0_.x) * vec2<f32>(_e173.g6_.x)) * vec2<f32>(0.0, -(1.0)))), (((((vec4<f32>(_e184.g0_.y) * vec4<f32>(_e188.g9_.z, _e191.g3_.w, _e194.g9_.x, _e197.g9_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e209.g0_.z) * vec4<f32>(_e213.g9_.y, _e216.g9_.x, _e219.g3_.w, _e222.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + (vec4<f32>(_e235.g0_.w) * _e239.g3_)) + ((vec4<f32>(_e243.g0_.x) * vec4<f32>(_e247.g3_.w, _e250.g9_.z, _e253.g9_.y, _e256.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e269.g0_.w) * _e273.g4_), (((((vec3<f32>(_e276.g0_.x) * vec3<f32>(_e280.g0_.y, _e283.g4_.z, _e286.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e297.g0_.y) * vec3<f32>(_e301.g4_.z, _e304.g0_.y, _e307.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e319.g0_.z) * vec3<f32>(_e323.g4_.y, _e326.g4_.x, _e329.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e341.g0_.w) * _e345.g5_)), (vec3<f32>(_e349.g0_.w) * _e353.g6_), (((((vec3<f32>(_e356.g0_.x) * vec3<f32>(_e360.g0_.z, _e363.g6_.z, _e366.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e377.g0_.y) * vec3<f32>(_e381.g6_.z, _e384.g0_.z, _e387.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e399.g0_.z) * vec3<f32>(_e403.g6_.y, _e406.g6_.x, _e409.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e421.g0_.w) * _e425.g7_)), (((((vec4<f32>(_e429.g0_.y) * vec4<f32>(_e433.g8_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e445.g0_.z) * vec4<f32>(_e449.g8_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e462.g0_.w) * _e466.g8_)) + ((vec4<f32>(_e470.g0_.x) * vec4<f32>(_e474.g8_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e487.g0_.y) * vec4<f32>(_e491.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e503.g0_.z) * vec4<f32>(_e507.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e520.g0_.w) * _e524.g9_)) + ((vec4<f32>(_e528.g0_.x) * vec4<f32>(_e532.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_multi_vector_inner_anti_product(self_1872: Translator, other_1690: MultiVector) -> MultiVector {
    var self_1873: Translator;
    var other_1691: MultiVector;

    self_1873 = self_1872;
    other_1691 = other_1690;
    let _e4: Translator = self_1873;
    let _e8: MultiVector = other_1691;
    let _e11: Translator = self_1873;
    let _e15: MultiVector = other_1691;
    let _e18: Translator = self_1873;
    let _e22: MultiVector = other_1691;
    let _e25: Translator = self_1873;
    let _e29: MultiVector = other_1691;
    let _e32: Translator = self_1873;
    let _e36: MultiVector = other_1691;
    let _e39: Translator = self_1873;
    let _e43: MultiVector = other_1691;
    let _e46: Translator = self_1873;
    let _e50: MultiVector = other_1691;
    let _e53: Translator = self_1873;
    let _e57: MultiVector = other_1691;
    let _e60: Translator = self_1873;
    let _e63: Translator = self_1873;
    let _e66: Translator = self_1873;
    let _e70: MultiVector = other_1691;
    let _e76: Translator = self_1873;
    let _e80: MultiVector = other_1691;
    let _e83: Translator = self_1873;
    let _e87: MultiVector = other_1691;
    let _e99: Translator = self_1873;
    let _e103: MultiVector = other_1691;
    let _e116: Translator = self_1873;
    let _e120: MultiVector = other_1691;
    let _e124: Translator = self_1873;
    let _e128: MultiVector = other_1691;
    return MultiVector((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec2<f32>(_e18.g0_.w) * _e22.g2_), (vec4<f32>(_e25.g0_.w) * _e29.g3_), (vec3<f32>(_e32.g0_.w) * _e36.g4_), (vec3<f32>(_e39.g0_.w) * _e43.g5_), (vec3<f32>(_e46.g0_.w) * _e50.g6_), ((vec3<f32>(_e53.g0_.w) * _e57.g7_) + (vec3<f32>(_e60.g0_.x, _e63.g0_.y, _e66.g0_.z) * vec3<f32>(_e70.g0_.z))), (vec4<f32>(_e76.g0_.w) * _e80.g8_), (((((vec4<f32>(_e83.g0_.y) * vec4<f32>(_e87.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e99.g0_.z) * vec4<f32>(_e103.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e116.g0_.w) * _e120.g9_)) + ((vec4<f32>(_e124.g0_.x) * vec4<f32>(_e128.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_multi_vector_left_anti_contraction(self_1874: Translator, other_1692: MultiVector) -> MultiVector {
    var self_1875: Translator;
    var other_1693: MultiVector;

    self_1875 = self_1874;
    other_1693 = other_1692;
    let _e4: Translator = self_1875;
    let _e8: MultiVector = other_1693;
    let _e11: Translator = self_1875;
    let _e15: MultiVector = other_1693;
    let _e18: Translator = self_1875;
    let _e22: MultiVector = other_1693;
    let _e25: Translator = self_1875;
    let _e29: MultiVector = other_1693;
    let _e32: Translator = self_1875;
    let _e36: MultiVector = other_1693;
    let _e39: Translator = self_1875;
    let _e43: MultiVector = other_1693;
    let _e46: Translator = self_1875;
    let _e50: MultiVector = other_1693;
    let _e53: Translator = self_1875;
    let _e57: MultiVector = other_1693;
    let _e60: Translator = self_1875;
    let _e64: MultiVector = other_1693;
    let _e67: Translator = self_1875;
    let _e71: MultiVector = other_1693;
    return MultiVector((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_), (vec2<f32>(_e18.g0_.w) * _e22.g2_), (vec4<f32>(_e25.g0_.w) * _e29.g3_), (vec3<f32>(_e32.g0_.w) * _e36.g4_), (vec3<f32>(_e39.g0_.w) * _e43.g5_), (vec3<f32>(_e46.g0_.w) * _e50.g6_), (vec3<f32>(_e53.g0_.w) * _e57.g7_), (vec4<f32>(_e60.g0_.w) * _e64.g8_), (vec4<f32>(_e67.g0_.w) * _e71.g9_));
}

fn translator_multi_vector_anti_scalar_product(self_1876: Translator, other_1694: MultiVector) -> AntiScalar {
    var self_1877: Translator;
    var other_1695: MultiVector;

    self_1877 = self_1876;
    other_1695 = other_1694;
    let _e4: Translator = self_1877;
    let _e7: MultiVector = other_1695;
    return AntiScalar((_e4.g0_.w * _e7.g0_.z));
}

fn translator_scale(self_1878: Translator, other_1696: f32) -> Translator {
    var self_1879: Translator;
    var other_1697: f32;

    self_1879 = self_1878;
    other_1697 = other_1696;
    let _e4: Translator = self_1879;
    let _e5: f32 = other_1697;
    let _e7: Translator = translator_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn flector_zero() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_one() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_neg(self_1880: Flector) -> Flector {
    var self_1881: Flector;

    self_1881 = self_1880;
    let _e2: Flector = self_1881;
    let _e8: Flector = self_1881;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn flector_automorphism(self_1882: Flector) -> Flector {
    var self_1883: Flector;

    self_1883 = self_1882;
    let _e2: Flector = self_1883;
    let _e4: Flector = self_1883;
    return Flector(_e2.g0_, _e4.g1_);
}

fn flector_reversal(self_1884: Flector) -> Flector {
    var self_1885: Flector;

    self_1885 = self_1884;
    let _e2: Flector = self_1885;
    let _e8: Flector = self_1885;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn flector_conjugation(self_1886: Flector) -> Flector {
    var self_1887: Flector;

    self_1887 = self_1886;
    let _e2: Flector = self_1887;
    let _e8: Flector = self_1887;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn flector_anti_reversal(self_1888: Flector) -> Flector {
    var self_1889: Flector;

    self_1889 = self_1888;
    let _e2: Flector = self_1889;
    let _e8: Flector = self_1889;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn flector_scalar_geometric_product(self_1890: Flector, other_1698: Scalar) -> Flector {
    var self_1891: Flector;
    var other_1699: Scalar;

    self_1891 = self_1890;
    other_1699 = other_1698;
    let _e4: Flector = self_1891;
    let _e6: Scalar = other_1699;
    let _e10: Flector = self_1891;
    let _e12: Scalar = other_1699;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_outer_product(self_1892: Flector, other_1700: Scalar) -> Flector {
    var self_1893: Flector;
    var other_1701: Scalar;

    self_1893 = self_1892;
    other_1701 = other_1700;
    let _e4: Flector = self_1893;
    let _e6: Scalar = other_1701;
    let _e10: Flector = self_1893;
    let _e12: Scalar = other_1701;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_inner_product(self_1894: Flector, other_1702: Scalar) -> Flector {
    var self_1895: Flector;
    var other_1703: Scalar;

    self_1895 = self_1894;
    other_1703 = other_1702;
    let _e4: Flector = self_1895;
    let _e6: Scalar = other_1703;
    let _e10: Flector = self_1895;
    let _e12: Scalar = other_1703;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_right_contraction(self_1896: Flector, other_1704: Scalar) -> Flector {
    var self_1897: Flector;
    var other_1705: Scalar;

    self_1897 = self_1896;
    other_1705 = other_1704;
    let _e4: Flector = self_1897;
    let _e6: Scalar = other_1705;
    let _e10: Flector = self_1897;
    let _e12: Scalar = other_1705;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_regressive_product(self_1898: Flector, other_1706: AntiScalar) -> Flector {
    var self_1899: Flector;
    var other_1707: AntiScalar;

    self_1899 = self_1898;
    other_1707 = other_1706;
    let _e4: Flector = self_1899;
    let _e6: AntiScalar = other_1707;
    let _e10: Flector = self_1899;
    let _e12: AntiScalar = other_1707;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_geometric_anti_product(self_1900: Flector, other_1708: AntiScalar) -> Flector {
    var self_1901: Flector;
    var other_1709: AntiScalar;

    self_1901 = self_1900;
    other_1709 = other_1708;
    let _e4: Flector = self_1901;
    let _e6: AntiScalar = other_1709;
    let _e10: Flector = self_1901;
    let _e12: AntiScalar = other_1709;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_inner_anti_product(self_1902: Flector, other_1710: AntiScalar) -> Flector {
    var self_1903: Flector;
    var other_1711: AntiScalar;

    self_1903 = self_1902;
    other_1711 = other_1710;
    let _e4: Flector = self_1903;
    let _e6: AntiScalar = other_1711;
    let _e10: Flector = self_1903;
    let _e12: AntiScalar = other_1711;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_right_anti_contraction(self_1904: Flector, other_1712: AntiScalar) -> Flector {
    var self_1905: Flector;
    var other_1713: AntiScalar;

    self_1905 = self_1904;
    other_1713 = other_1712;
    let _e4: Flector = self_1905;
    let _e6: AntiScalar = other_1713;
    let _e10: Flector = self_1905;
    let _e12: AntiScalar = other_1713;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_radial_point_geometric_product(self_1906: Flector, other_1714: RadialPoint) -> Motor {
    var self_1907: Flector;
    var other_1715: RadialPoint;

    self_1907 = self_1906;
    other_1715 = other_1714;
    let _e4: Flector = self_1907;
    let _e8: RadialPoint = other_1715;
    let _e11: RadialPoint = other_1715;
    let _e14: RadialPoint = other_1715;
    let _e17: RadialPoint = other_1715;
    let _e31: Flector = self_1907;
    let _e35: RadialPoint = other_1715;
    let _e38: RadialPoint = other_1715;
    let _e41: RadialPoint = other_1715;
    let _e44: RadialPoint = other_1715;
    let _e57: Flector = self_1907;
    let _e61: RadialPoint = other_1715;
    let _e64: RadialPoint = other_1715;
    let _e67: RadialPoint = other_1715;
    let _e70: RadialPoint = other_1715;
    let _e83: Flector = self_1907;
    let _e87: RadialPoint = other_1715;
    let _e90: RadialPoint = other_1715;
    let _e93: RadialPoint = other_1715;
    let _e96: RadialPoint = other_1715;
    let _e109: Flector = self_1907;
    let _e112: Flector = self_1907;
    let _e115: Flector = self_1907;
    let _e118: Flector = self_1907;
    let _e122: RadialPoint = other_1715;
    let _e128: Flector = self_1907;
    let _e132: RadialPoint = other_1715;
    let _e135: RadialPoint = other_1715;
    let _e138: RadialPoint = other_1715;
    let _e141: RadialPoint = other_1715;
    let _e154: Flector = self_1907;
    let _e158: RadialPoint = other_1715;
    let _e161: RadialPoint = other_1715;
    let _e164: RadialPoint = other_1715;
    let _e167: RadialPoint = other_1715;
    let _e181: Flector = self_1907;
    let _e185: RadialPoint = other_1715;
    let _e188: RadialPoint = other_1715;
    let _e191: RadialPoint = other_1715;
    let _e194: RadialPoint = other_1715;
    let _e206: Flector = self_1907;
    let _e210: RadialPoint = other_1715;
    let _e213: RadialPoint = other_1715;
    let _e216: RadialPoint = other_1715;
    let _e219: RadialPoint = other_1715;
    return Motor(((((((vec4<f32>(_e4.g0_.w) * vec4<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e31.g1_.x) * vec4<f32>(_e35.g0_.z, _e38.g0_.z, _e41.g0_.y, _e44.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g1_.y) * vec4<f32>(_e61.g0_.z, _e64.g0_.z, _e67.g0_.x, _e70.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e83.g1_.z) * vec4<f32>(_e87.g0_.y, _e90.g0_.x, _e93.g0_.y, _e96.g0_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + (vec4<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z, _e118.g1_.w) * vec4<f32>(_e122.g1_.x))), (((((vec4<f32>(_e128.g0_.y) * vec4<f32>(_e132.g0_.z, _e135.g0_.z, _e138.g0_.x, _e141.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e154.g0_.z) * vec4<f32>(_e158.g0_.y, _e161.g0_.x, _e164.g0_.y, _e167.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e181.g1_.w) * vec4<f32>(_e185.g0_.x, _e188.g0_.y, _e191.g0_.z, _e194.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e206.g0_.x) * vec4<f32>(_e210.g0_.x, _e213.g0_.z, _e216.g0_.y, _e219.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_radial_point_regressive_product(self_1908: Flector, other_1716: RadialPoint) -> Scalar {
    var self_1909: Flector;
    var other_1717: RadialPoint;

    self_1909 = self_1908;
    other_1717 = other_1716;
    let _e4: Flector = self_1909;
    let _e7: RadialPoint = other_1717;
    let _e11: Flector = self_1909;
    let _e14: RadialPoint = other_1717;
    let _e19: Flector = self_1909;
    let _e22: RadialPoint = other_1717;
    let _e27: Flector = self_1909;
    let _e30: RadialPoint = other_1717;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) + (_e27.g1_.w * _e30.g1_.x)));
}

fn flector_flat_point_into(self_1910: Flector) -> FlatPoint {
    var self_1911: Flector;

    self_1911 = self_1910;
    let _e2: Flector = self_1911;
    return FlatPoint(_e2.g0_);
}

fn flector_flat_point_add(self_1912: Flector, other_1718: FlatPoint) -> Flector {
    var self_1913: Flector;
    var other_1719: FlatPoint;

    self_1913 = self_1912;
    other_1719 = other_1718;
    let _e4: Flector = self_1913;
    let _e6: FlatPoint = other_1719;
    let _e9: Flector = self_1913;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn flector_flat_point_sub(self_1914: Flector, other_1720: FlatPoint) -> Flector {
    var self_1915: Flector;
    var other_1721: FlatPoint;

    self_1915 = self_1914;
    other_1721 = other_1720;
    let _e4: Flector = self_1915;
    let _e6: FlatPoint = other_1721;
    let _e9: Flector = self_1915;
    return Flector((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn flector_flat_point_geometric_anti_product(self_1916: Flector, other_1722: FlatPoint) -> Motor {
    var self_1917: Flector;
    var other_1723: FlatPoint;

    self_1917 = self_1916;
    other_1723 = other_1722;
    let _e4: Flector = self_1917;
    let _e7: Flector = self_1917;
    let _e10: Flector = self_1917;
    let _e13: Flector = self_1917;
    let _e17: FlatPoint = other_1723;
    let _e26: Flector = self_1917;
    let _e30: FlatPoint = other_1723;
    let _e40: Flector = self_1917;
    let _e44: FlatPoint = other_1723;
    let _e57: Flector = self_1917;
    let _e61: FlatPoint = other_1723;
    let _e74: Flector = self_1917;
    let _e78: FlatPoint = other_1723;
    let _e91: Flector = self_1917;
    let _e94: Flector = self_1917;
    let _e97: Flector = self_1917;
    let _e100: Flector = self_1917;
    let _e104: FlatPoint = other_1723;
    return Motor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g0_.w) * vec4<f32>(_e17.g0_.w)) * vec4<f32>(-(1.0))), ((((((vec4<f32>(_e26.g0_.w) * _e30.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4<f32>(_e40.g1_.x) * _e44.g0_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.y) * _e61.g0_.zzxy) * vec4<f32>(1.0, 0.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e74.g1_.z) * _e78.g0_.yxyz) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g0_.x, _e94.g0_.y, _e97.g0_.z, _e100.g1_.w) * vec4<f32>(_e104.g0_.w)) * vec4<f32>(-(1.0)))));
}

fn flector_flat_point_right_anti_contraction(self_1918: Flector, other_1724: FlatPoint) -> AntiScalar {
    var self_1919: Flector;
    var other_1725: FlatPoint;

    self_1919 = self_1918;
    other_1725 = other_1724;
    let _e5: Flector = self_1919;
    let _e8: FlatPoint = other_1725;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_flat_point_anti_scalar_product(self_1920: Flector, other_1726: FlatPoint) -> AntiScalar {
    var self_1921: Flector;
    var other_1727: FlatPoint;

    self_1921 = self_1920;
    other_1727 = other_1726;
    let _e5: Flector = self_1921;
    let _e8: FlatPoint = other_1727;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_dipole_geometric_product(self_1922: Flector, other_1728: Dipole) -> Flector {
    var self_1923: Flector;
    var other_1729: Dipole;

    self_1923 = self_1922;
    other_1729 = other_1728;
    let _e4: Flector = self_1923;
    let _e8: Dipole = other_1729;
    let _e11: Dipole = other_1729;
    let _e14: Dipole = other_1729;
    let _e17: Dipole = other_1729;
    let _e30: Flector = self_1923;
    let _e34: Dipole = other_1729;
    let _e37: Dipole = other_1729;
    let _e40: Dipole = other_1729;
    let _e43: Dipole = other_1729;
    let _e57: Flector = self_1923;
    let _e61: Dipole = other_1729;
    let _e74: Flector = self_1923;
    let _e78: Dipole = other_1729;
    let _e91: Flector = self_1923;
    let _e95: Dipole = other_1729;
    let _e108: Flector = self_1923;
    let _e112: Dipole = other_1729;
    let _e115: Dipole = other_1729;
    let _e118: Dipole = other_1729;
    let _e121: Dipole = other_1729;
    let _e133: Flector = self_1923;
    let _e137: Dipole = other_1729;
    let _e140: Dipole = other_1729;
    let _e143: Dipole = other_1729;
    let _e146: Dipole = other_1729;
    let _e160: Flector = self_1923;
    let _e164: Dipole = other_1729;
    let _e167: Dipole = other_1729;
    let _e170: Dipole = other_1729;
    let _e173: Dipole = other_1729;
    let _e186: Flector = self_1923;
    let _e190: Dipole = other_1729;
    let _e193: Dipole = other_1729;
    let _e196: Dipole = other_1729;
    let _e199: Dipole = other_1729;
    let _e213: Flector = self_1923;
    let _e217: Dipole = other_1729;
    let _e220: Dipole = other_1729;
    let _e223: Dipole = other_1729;
    let _e226: Dipole = other_1729;
    let _e238: Flector = self_1923;
    let _e242: Dipole = other_1729;
    let _e245: Dipole = other_1729;
    let _e248: Dipole = other_1729;
    let _e251: Dipole = other_1729;
    let _e264: Flector = self_1923;
    let _e268: Dipole = other_1729;
    let _e271: Dipole = other_1729;
    let _e274: Dipole = other_1729;
    let _e277: Dipole = other_1729;
    let _e290: Flector = self_1923;
    let _e294: Dipole = other_1729;
    let _e297: Dipole = other_1729;
    let _e300: Dipole = other_1729;
    let _e303: Dipole = other_1729;
    let _e316: Flector = self_1923;
    let _e320: Dipole = other_1729;
    let _e323: Dipole = other_1729;
    let _e326: Dipole = other_1729;
    let _e329: Dipole = other_1729;
    let _e341: Flector = self_1923;
    let _e345: Dipole = other_1729;
    let _e348: Dipole = other_1729;
    let _e351: Dipole = other_1729;
    let _e354: Dipole = other_1729;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * vec4<f32>(_e78.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.z) * vec4<f32>(_e95.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.w) * vec4<f32>(_e112.g1_.x, _e115.g1_.y, _e118.g1_.z, _e121.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g1_.x, _e140.g1_.z, _e143.g1_.y, _e146.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e160.g0_.y) * vec4<f32>(_e164.g0_.z, _e167.g0_.z, _e170.g0_.x, _e173.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e186.g0_.z) * vec4<f32>(_e190.g0_.y, _e193.g0_.x, _e196.g0_.y, _e199.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e213.g0_.w) * vec4<f32>(_e217.g1_.x, _e220.g1_.y, _e223.g1_.z, _e226.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e238.g1_.x) * vec4<f32>(_e242.g1_.z, _e245.g1_.z, _e248.g1_.y, _e251.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e264.g1_.y) * vec4<f32>(_e268.g1_.z, _e271.g1_.z, _e274.g1_.x, _e277.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e290.g1_.z) * vec4<f32>(_e294.g1_.y, _e297.g1_.x, _e300.g1_.y, _e303.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e316.g1_.w) * vec4<f32>(_e320.g0_.x, _e323.g0_.y, _e326.g0_.z, _e329.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e341.g0_.x) * vec4<f32>(_e345.g0_.x, _e348.g0_.z, _e351.g0_.y, _e354.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_dipole_regressive_product(self_1924: Flector, other_1730: Dipole) -> RadialPoint {
    var self_1925: Flector;
    var other_1731: Dipole;

    self_1925 = self_1924;
    other_1731 = other_1730;
    let _e4: Flector = self_1925;
    let _e8: Dipole = other_1731;
    let _e18: Flector = self_1925;
    let _e22: Dipole = other_1731;
    let _e33: Flector = self_1925;
    let _e37: Dipole = other_1731;
    let _e41: Flector = self_1925;
    let _e45: Dipole = other_1731;
    let _e56: Flector = self_1925;
    let _e60: Dipole = other_1731;
    let _e63: Dipole = other_1731;
    let _e73: Flector = self_1925;
    let _e77: Dipole = other_1731;
    let _e80: Dipole = other_1731;
    let _e91: Flector = self_1925;
    let _e95: Dipole = other_1731;
    let _e98: Dipole = other_1731;
    let _e109: Flector = self_1925;
    let _e112: Flector = self_1925;
    let _e116: Dipole = other_1731;
    let _e119: Dipole = other_1731;
    return RadialPoint((((((vec3<f32>(_e4.g1_.y) * _e8.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e18.g1_.z) * _e22.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e33.g1_.w) * _e37.g0_)) + ((vec3<f32>(_e41.g1_.x) * _e45.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((vec2<f32>(_e56.g1_.x) * vec2<f32>(_e60.g0_.x, _e63.g2_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e73.g1_.y) * vec2<f32>(_e77.g0_.y, _e80.g2_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e91.g1_.z) * vec2<f32>(_e95.g0_.z, _e98.g2_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e109.g1_.x, _e112.g1_.w) * vec2<f32>(_e116.g2_.x, _e119.g2_.w)) * vec2<f32>(0.0, -(1.0)))));
}

fn flector_dipole_outer_product(self_1926: Flector, other_1732: Dipole) -> Plane {
    var self_1927: Flector;
    var other_1733: Dipole;

    self_1927 = self_1926;
    other_1733 = other_1732;
    let _e4: Flector = self_1927;
    let _e8: Dipole = other_1733;
    let _e11: Dipole = other_1733;
    let _e14: Dipole = other_1733;
    let _e17: Dipole = other_1733;
    let _e30: Flector = self_1927;
    let _e34: Dipole = other_1733;
    let _e37: Dipole = other_1733;
    let _e40: Dipole = other_1733;
    let _e43: Dipole = other_1733;
    let _e57: Flector = self_1927;
    let _e61: Dipole = other_1733;
    let _e64: Dipole = other_1733;
    let _e67: Dipole = other_1733;
    let _e70: Dipole = other_1733;
    let _e82: Flector = self_1927;
    let _e86: Dipole = other_1733;
    let _e89: Dipole = other_1733;
    let _e92: Dipole = other_1733;
    let _e95: Dipole = other_1733;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_dipole_inner_product(self_1928: Flector, other_1734: Dipole) -> FlatPoint {
    var self_1929: Flector;
    var other_1735: Dipole;

    self_1929 = self_1928;
    other_1735 = other_1734;
    let _e4: Flector = self_1929;
    let _e8: Dipole = other_1735;
    let _e20: Flector = self_1929;
    let _e24: Dipole = other_1735;
    let _e37: Flector = self_1929;
    let _e40: Dipole = other_1735;
    let _e43: Dipole = other_1735;
    let _e46: Dipole = other_1735;
    let _e49: Dipole = other_1735;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g1_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_dipole_right_contraction(self_1930: Flector, other_1736: Dipole) -> FlatPoint {
    var self_1931: Flector;
    var other_1737: Dipole;

    self_1931 = self_1930;
    other_1737 = other_1736;
    let _e4: Flector = self_1931;
    let _e8: Dipole = other_1737;
    let _e20: Flector = self_1931;
    let _e24: Dipole = other_1737;
    let _e37: Flector = self_1931;
    let _e40: Dipole = other_1737;
    let _e43: Dipole = other_1737;
    let _e46: Dipole = other_1737;
    let _e49: Dipole = other_1737;
    return FlatPoint(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g1_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_dipole_right_anti_contraction(self_1932: Flector, other_1738: Dipole) -> AntiScalar {
    var self_1933: Flector;
    var other_1739: Dipole;

    self_1933 = self_1932;
    other_1739 = other_1738;
    let _e5: Flector = self_1933;
    let _e8: Dipole = other_1739;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flector_dipole_anti_scalar_product(self_1934: Flector, other_1740: Dipole) -> AntiScalar {
    var self_1935: Flector;
    var other_1741: Dipole;

    self_1935 = self_1934;
    other_1741 = other_1740;
    let _e5: Flector = self_1935;
    let _e8: Dipole = other_1741;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g2_.w)));
}

fn flector_line_regressive_product(self_1936: Flector, other_1742: Line) -> FlatPoint {
    var self_1937: Flector;
    var other_1743: Line;

    self_1937 = self_1936;
    other_1743 = other_1742;
    let _e4: Flector = self_1937;
    let _e8: Line = other_1743;
    let _e11: Line = other_1743;
    let _e14: Line = other_1743;
    let _e17: Line = other_1743;
    let _e30: Flector = self_1937;
    let _e34: Line = other_1743;
    let _e37: Line = other_1743;
    let _e40: Line = other_1743;
    let _e43: Line = other_1743;
    let _e57: Flector = self_1937;
    let _e61: Line = other_1743;
    let _e64: Line = other_1743;
    let _e67: Line = other_1743;
    let _e70: Line = other_1743;
    let _e82: Flector = self_1937;
    let _e86: Line = other_1743;
    let _e89: Line = other_1743;
    let _e92: Line = other_1743;
    let _e95: Line = other_1743;
    return FlatPoint((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g1_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_geometric_anti_product(self_1938: Flector, other_1744: Line) -> Flector {
    var self_1939: Flector;
    var other_1745: Line;

    self_1939 = self_1938;
    other_1745 = other_1744;
    let _e4: Flector = self_1939;
    let _e8: Line = other_1745;
    let _e11: Line = other_1745;
    let _e14: Line = other_1745;
    let _e17: Line = other_1745;
    let _e29: Flector = self_1939;
    let _e33: Line = other_1745;
    let _e36: Line = other_1745;
    let _e39: Line = other_1745;
    let _e42: Line = other_1745;
    let _e55: Flector = self_1939;
    let _e59: Line = other_1745;
    let _e62: Line = other_1745;
    let _e65: Line = other_1745;
    let _e68: Line = other_1745;
    let _e83: Flector = self_1939;
    let _e87: Line = other_1745;
    let _e90: Line = other_1745;
    let _e93: Line = other_1745;
    let _e96: Line = other_1745;
    let _e110: Flector = self_1939;
    let _e114: Line = other_1745;
    let _e117: Line = other_1745;
    let _e120: Line = other_1745;
    let _e123: Line = other_1745;
    let _e137: Flector = self_1939;
    let _e141: Line = other_1745;
    let _e144: Line = other_1745;
    let _e147: Line = other_1745;
    let _e150: Line = other_1745;
    let _e164: Flector = self_1939;
    let _e168: Line = other_1745;
    let _e171: Line = other_1745;
    let _e174: Line = other_1745;
    let _e177: Line = other_1745;
    let _e189: Flector = self_1939;
    let _e193: Line = other_1745;
    let _e196: Line = other_1745;
    let _e199: Line = other_1745;
    let _e202: Line = other_1745;
    let _e215: Flector = self_1939;
    let _e219: Line = other_1745;
    let _e231: Flector = self_1939;
    let _e235: Line = other_1745;
    let _e248: Flector = self_1939;
    let _e252: Line = other_1745;
    let _e255: Line = other_1745;
    let _e258: Line = other_1745;
    let _e261: Line = other_1745;
    let _e274: Flector = self_1939;
    let _e278: Line = other_1745;
    let _e281: Line = other_1745;
    let _e284: Line = other_1745;
    let _e287: Line = other_1745;
    let _e300: Flector = self_1939;
    let _e304: Line = other_1745;
    let _e307: Line = other_1745;
    let _e310: Line = other_1745;
    let _e313: Line = other_1745;
    let _e326: Flector = self_1939;
    let _e329: Line = other_1745;
    let _e332: Line = other_1745;
    let _e335: Line = other_1745;
    let _e338: Line = other_1745;
    return Flector((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.x, _e62.g1_.y, _e65.g1_.z, _e68.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e83.g1_.x) * vec4<f32>(_e87.g1_.z, _e90.g1_.z, _e93.g1_.y, _e96.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e110.g1_.y) * vec4<f32>(_e114.g1_.z, _e117.g1_.z, _e120.g1_.x, _e123.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e137.g1_.z) * vec4<f32>(_e141.g1_.y, _e144.g1_.x, _e147.g1_.y, _e150.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.w) * vec4<f32>(_e168.g0_.x, _e171.g0_.y, _e174.g0_.z, _e177.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.z, _e199.g0_.y, _e202.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (((((((vec4<f32>(_e215.g0_.y) * vec4<f32>(_e219.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e231.g0_.z) * vec4<f32>(_e235.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e248.g1_.x) * vec4<f32>(_e252.g0_.z, _e255.g0_.z, _e258.g0_.y, _e261.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e274.g1_.y) * vec4<f32>(_e278.g0_.z, _e281.g0_.z, _e284.g0_.x, _e287.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e300.g1_.z) * vec4<f32>(_e304.g0_.y, _e307.g0_.x, _e310.g0_.y, _e313.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e326.g0_.wwwx * vec4<f32>(_e329.g0_.x, _e332.g0_.y, _e335.g0_.z, _e338.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_line_inner_anti_product(self_1940: Flector, other_1746: Line) -> Plane {
    var self_1941: Flector;
    var other_1747: Line;

    self_1941 = self_1940;
    other_1747 = other_1746;
    let _e4: Flector = self_1941;
    let _e8: Line = other_1747;
    let _e20: Flector = self_1941;
    let _e24: Line = other_1747;
    let _e37: Flector = self_1941;
    let _e41: Line = other_1747;
    let _e44: Line = other_1747;
    let _e47: Line = other_1747;
    let _e50: Line = other_1747;
    let _e63: Flector = self_1941;
    let _e67: Line = other_1747;
    let _e70: Line = other_1747;
    let _e73: Line = other_1747;
    let _e76: Line = other_1747;
    let _e89: Flector = self_1941;
    let _e93: Line = other_1747;
    let _e96: Line = other_1747;
    let _e99: Line = other_1747;
    let _e102: Line = other_1747;
    let _e115: Flector = self_1941;
    let _e118: Line = other_1747;
    let _e121: Line = other_1747;
    let _e124: Line = other_1747;
    let _e127: Line = other_1747;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.x) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.y, _e50.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e63.g1_.y) * vec4<f32>(_e67.g0_.z, _e70.g0_.z, _e73.g0_.x, _e76.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e89.g1_.z) * vec4<f32>(_e93.g0_.y, _e96.g0_.x, _e99.g0_.y, _e102.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e115.g0_.wwwx * vec4<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z, _e127.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_line_left_anti_contraction(self_1942: Flector, other_1748: Line) -> Plane {
    var self_1943: Flector;
    var other_1749: Line;

    self_1943 = self_1942;
    other_1749 = other_1748;
    let _e4: Flector = self_1943;
    let _e8: Line = other_1749;
    let _e11: Line = other_1749;
    let _e14: Line = other_1749;
    let _e17: Line = other_1749;
    let _e29: Flector = self_1943;
    let _e33: Line = other_1749;
    let _e36: Line = other_1749;
    let _e39: Line = other_1749;
    let _e42: Line = other_1749;
    let _e55: Flector = self_1943;
    let _e59: Line = other_1749;
    let _e62: Line = other_1749;
    let _e65: Line = other_1749;
    let _e68: Line = other_1749;
    return Plane(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn flector_line_right_anti_contraction(self_1944: Flector, other_1750: Line) -> Plane {
    var self_1945: Flector;
    var other_1751: Line;

    self_1945 = self_1944;
    other_1751 = other_1750;
    let _e4: Flector = self_1945;
    let _e8: Line = other_1751;
    let _e20: Flector = self_1945;
    let _e24: Line = other_1751;
    let _e37: Flector = self_1945;
    let _e40: Line = other_1751;
    let _e43: Line = other_1751;
    let _e46: Line = other_1751;
    let _e49: Line = other_1751;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_circle_geometric_product(self_1946: Flector, other_1752: Circle) -> Motor {
    var self_1947: Flector;
    var other_1753: Circle;

    self_1947 = self_1946;
    other_1753 = other_1752;
    let _e4: Flector = self_1947;
    let _e8: Circle = other_1753;
    let _e20: Flector = self_1947;
    let _e24: Circle = other_1753;
    let _e37: Flector = self_1947;
    let _e41: Circle = other_1753;
    let _e54: Flector = self_1947;
    let _e58: Circle = other_1753;
    let _e71: Flector = self_1947;
    let _e75: Circle = other_1753;
    let _e88: Flector = self_1947;
    let _e92: Circle = other_1753;
    let _e103: Flector = self_1947;
    let _e106: Flector = self_1947;
    let _e109: Flector = self_1947;
    let _e112: Flector = self_1947;
    let _e116: Circle = other_1753;
    let _e130: Flector = self_1947;
    let _e133: Flector = self_1947;
    let _e136: Flector = self_1947;
    let _e139: Flector = self_1947;
    let _e143: Circle = other_1753;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.y) * vec4<f32>(_e58.g0_.w)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e71.g1_.z) * vec4<f32>(_e75.g0_.w)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e88.g1_.w) * _e92.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e103.g1_.x, _e106.g0_.x, _e109.g0_.x, _e112.g0_.x) * _e116.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (vec4<f32>(_e130.g0_.x, _e133.g0_.y, _e136.g0_.z, _e139.g1_.w) * vec4<f32>(_e143.g0_.w)));
}

fn flector_circle_outer_product(self_1948: Flector, other_1754: Circle) -> AntiScalar {
    var self_1949: Flector;
    var other_1755: Circle;

    self_1949 = self_1948;
    other_1755 = other_1754;
    let _e5: Flector = self_1949;
    let _e8: Circle = other_1755;
    let _e13: Flector = self_1949;
    let _e16: Circle = other_1755;
    let _e21: Flector = self_1949;
    let _e24: Circle = other_1755;
    let _e29: Flector = self_1949;
    let _e32: Circle = other_1755;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn flector_circle_inner_anti_product(self_1950: Flector, other_1756: Circle) -> Sphere {
    var self_1951: Flector;
    var other_1757: Circle;

    self_1951 = self_1950;
    other_1757 = other_1756;
    let _e4: Flector = self_1951;
    let _e8: Circle = other_1757;
    let _e18: Flector = self_1951;
    let _e22: Circle = other_1757;
    let _e33: Flector = self_1951;
    let _e37: Circle = other_1757;
    let _e40: Circle = other_1757;
    let _e51: Flector = self_1951;
    let _e55: Circle = other_1757;
    let _e58: Circle = other_1757;
    let _e69: Flector = self_1951;
    let _e73: Circle = other_1757;
    let _e76: Circle = other_1757;
    let _e87: Flector = self_1951;
    let _e91: Circle = other_1757;
    let _e102: Flector = self_1951;
    let _e106: Circle = other_1757;
    let _e109: Flector = self_1951;
    let _e113: Circle = other_1757;
    let _e124: Flector = self_1951;
    let _e128: Circle = other_1757;
    let _e139: Flector = self_1951;
    let _e143: Circle = other_1757;
    return Sphere((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g1_.x) * vec2<f32>(_e37.g0_.x, _e40.g2_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e51.g1_.y) * vec2<f32>(_e55.g0_.y, _e58.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e69.g1_.z) * vec2<f32>(_e73.g0_.z, _e76.g2_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e87.g0_.x) * vec2<f32>(_e91.g1_.x)) * vec2<f32>(0.0, -(1.0)))), ((((vec3<f32>(_e102.g0_.w) * _e106.g1_) + ((vec3<f32>(_e109.g1_.y) * _e113.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e124.g1_.z) * _e128.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e139.g1_.x) * _e143.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_circle_left_anti_contraction(self_1952: Flector, other_1758: Circle) -> Sphere {
    var self_1953: Flector;
    var other_1759: Circle;

    self_1953 = self_1952;
    other_1759 = other_1758;
    let _e4: Flector = self_1953;
    let _e8: Circle = other_1759;
    let _e11: Circle = other_1759;
    let _e21: Flector = self_1953;
    let _e25: Circle = other_1759;
    let _e28: Circle = other_1759;
    let _e39: Flector = self_1953;
    let _e43: Circle = other_1759;
    let _e46: Circle = other_1759;
    let _e57: Flector = self_1953;
    let _e61: Circle = other_1759;
    let _e71: Flector = self_1953;
    let _e75: Circle = other_1759;
    let _e86: Flector = self_1953;
    let _e90: Circle = other_1759;
    return Sphere(((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g0_.x, _e11.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g1_.y) * vec2<f32>(_e25.g0_.y, _e28.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g0_.z, _e46.g2_.z)) * vec2<f32>(-(1.0), 1.0))), ((((vec3<f32>(_e57.g1_.y) * _e61.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e71.g1_.z) * _e75.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e86.g1_.x) * _e90.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_circle_right_anti_contraction(self_1954: Flector, other_1760: Circle) -> Plane {
    var self_1955: Flector;
    var other_1761: Circle;

    self_1955 = self_1954;
    other_1761 = other_1760;
    let _e4: Flector = self_1955;
    let _e8: Circle = other_1761;
    let _e20: Flector = self_1955;
    let _e24: Circle = other_1761;
    let _e37: Flector = self_1955;
    let _e40: Circle = other_1761;
    let _e43: Circle = other_1761;
    let _e46: Circle = other_1761;
    let _e49: Circle = other_1761;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_plane_into(self_1956: Flector) -> Plane {
    var self_1957: Flector;

    self_1957 = self_1956;
    let _e2: Flector = self_1957;
    return Plane(_e2.g1_);
}

fn flector_plane_add(self_1958: Flector, other_1762: Plane) -> Flector {
    var self_1959: Flector;
    var other_1763: Plane;

    self_1959 = self_1958;
    other_1763 = other_1762;
    let _e4: Flector = self_1959;
    let _e6: Flector = self_1959;
    let _e8: Plane = other_1763;
    return Flector(_e4.g0_, (_e6.g1_ + _e8.g0_));
}

fn flector_plane_sub(self_1960: Flector, other_1764: Plane) -> Flector {
    var self_1961: Flector;
    var other_1765: Plane;

    self_1961 = self_1960;
    other_1765 = other_1764;
    let _e4: Flector = self_1961;
    let _e6: Flector = self_1961;
    let _e8: Plane = other_1765;
    return Flector(_e4.g0_, (_e6.g1_ - _e8.g0_));
}

fn flector_plane_geometric_anti_product(self_1962: Flector, other_1766: Plane) -> Motor {
    var self_1963: Flector;
    var other_1767: Plane;

    self_1963 = self_1962;
    other_1767 = other_1766;
    let _e4: Flector = self_1963;
    let _e8: Plane = other_1767;
    let _e19: Flector = self_1963;
    let _e23: Plane = other_1767;
    let _e35: Flector = self_1963;
    let _e39: Plane = other_1767;
    let _e51: Flector = self_1963;
    let _e54: Plane = other_1767;
    let _e68: Flector = self_1963;
    let _e72: Plane = other_1767;
    let _e83: Flector = self_1963;
    let _e87: Plane = other_1767;
    let _e99: Flector = self_1963;
    let _e103: Plane = other_1767;
    let _e115: Flector = self_1963;
    let _e119: Plane = other_1767;
    let _e131: Flector = self_1963;
    let _e135: Plane = other_1767;
    let _e147: Flector = self_1963;
    let _e151: Plane = other_1767;
    let _e165: Flector = self_1963;
    let _e168: Flector = self_1963;
    let _e171: Flector = self_1963;
    let _e174: Flector = self_1963;
    let _e178: Plane = other_1767;
    return Motor((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, 1.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((_e51.g0_.wwwx * _e54.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((((((((vec4<f32>(_e68.g0_.y) * _e72.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, 1.0)) + ((vec4<f32>(_e83.g0_.z) * _e87.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e99.g0_.w) * vec4<f32>(_e103.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e115.g1_.y) * vec4<f32>(_e119.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e131.g1_.z) * vec4<f32>(_e135.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e147.g1_.w) * _e151.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e165.g1_.x, _e168.g0_.x, _e171.g0_.x, _e174.g0_.x) * _e178.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn flector_plane_left_anti_contraction(self_1964: Flector, other_1768: Plane) -> AntiScalar {
    var self_1965: Flector;
    var other_1769: Plane;

    self_1965 = self_1964;
    other_1769 = other_1768;
    let _e4: Flector = self_1965;
    let _e7: Plane = other_1769;
    let _e11: Flector = self_1965;
    let _e14: Plane = other_1769;
    let _e19: Flector = self_1965;
    let _e22: Plane = other_1769;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_plane_anti_scalar_product(self_1966: Flector, other_1770: Plane) -> AntiScalar {
    var self_1967: Flector;
    var other_1771: Plane;

    self_1967 = self_1966;
    other_1771 = other_1770;
    let _e4: Flector = self_1967;
    let _e7: Plane = other_1771;
    let _e11: Flector = self_1967;
    let _e14: Plane = other_1771;
    let _e19: Flector = self_1967;
    let _e22: Plane = other_1771;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_sphere_left_anti_contraction(self_1968: Flector, other_1772: Sphere) -> AntiScalar {
    var self_1969: Flector;
    var other_1773: Sphere;

    self_1969 = self_1968;
    other_1773 = other_1772;
    let _e4: Flector = self_1969;
    let _e7: Sphere = other_1773;
    let _e11: Flector = self_1969;
    let _e14: Sphere = other_1773;
    let _e19: Flector = self_1969;
    let _e22: Sphere = other_1773;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn flector_sphere_anti_scalar_product(self_1970: Flector, other_1774: Sphere) -> AntiScalar {
    var self_1971: Flector;
    var other_1775: Sphere;

    self_1971 = self_1970;
    other_1775 = other_1774;
    let _e4: Flector = self_1971;
    let _e7: Sphere = other_1775;
    let _e11: Flector = self_1971;
    let _e14: Sphere = other_1775;
    let _e19: Flector = self_1971;
    let _e22: Sphere = other_1775;
    return AntiScalar((((_e4.g1_.x * _e7.g1_.x) + (_e11.g1_.y * _e14.g1_.y)) + (_e19.g1_.z * _e22.g1_.z)));
}

fn flector_motor_regressive_product(self_1972: Flector, other_1776: Motor) -> Flector {
    var self_1973: Flector;
    var other_1777: Motor;

    self_1973 = self_1972;
    other_1777 = other_1776;
    let _e4: Flector = self_1973;
    let _e8: Motor = other_1777;
    let _e11: Motor = other_1777;
    let _e14: Motor = other_1777;
    let _e17: Motor = other_1777;
    let _e30: Flector = self_1973;
    let _e34: Motor = other_1777;
    let _e37: Motor = other_1777;
    let _e40: Motor = other_1777;
    let _e43: Motor = other_1777;
    let _e57: Flector = self_1973;
    let _e61: Motor = other_1777;
    let _e64: Motor = other_1777;
    let _e67: Motor = other_1777;
    let _e70: Motor = other_1777;
    let _e84: Flector = self_1973;
    let _e88: Motor = other_1777;
    let _e99: Flector = self_1973;
    let _e101: Motor = other_1777;
    let _e107: Flector = self_1973;
    let _e109: Motor = other_1777;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g1_.y) * vec4<f32>(_e34.g1_.z, _e37.g1_.z, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g1_.y, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.w) * _e88.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g0_.w))), (_e107.g1_ * vec4<f32>(_e109.g0_.w)));
}

fn flector_motor_geometric_anti_product(self_1974: Flector, other_1778: Motor) -> Flector {
    var self_1975: Flector;
    var other_1779: Motor;

    self_1975 = self_1974;
    other_1779 = other_1778;
    let _e4: Flector = self_1975;
    let _e8: Motor = other_1779;
    let _e19: Flector = self_1975;
    let _e23: Motor = other_1779;
    let _e35: Flector = self_1975;
    let _e39: Motor = other_1779;
    let _e42: Motor = other_1779;
    let _e45: Motor = other_1779;
    let _e48: Motor = other_1779;
    let _e63: Flector = self_1975;
    let _e67: Motor = other_1779;
    let _e70: Motor = other_1779;
    let _e73: Motor = other_1779;
    let _e76: Motor = other_1779;
    let _e91: Flector = self_1975;
    let _e95: Motor = other_1779;
    let _e98: Motor = other_1779;
    let _e101: Motor = other_1779;
    let _e104: Motor = other_1779;
    let _e119: Flector = self_1975;
    let _e123: Motor = other_1779;
    let _e126: Motor = other_1779;
    let _e129: Motor = other_1779;
    let _e132: Motor = other_1779;
    let _e147: Flector = self_1975;
    let _e151: Motor = other_1779;
    let _e162: Flector = self_1975;
    let _e166: Motor = other_1779;
    let _e178: Flector = self_1975;
    let _e182: Motor = other_1779;
    let _e194: Flector = self_1975;
    let _e198: Motor = other_1779;
    let _e211: Flector = self_1975;
    let _e215: Motor = other_1779;
    let _e218: Motor = other_1779;
    let _e221: Motor = other_1779;
    let _e224: Motor = other_1779;
    let _e237: Flector = self_1975;
    let _e241: Motor = other_1779;
    let _e244: Motor = other_1779;
    let _e247: Motor = other_1779;
    let _e250: Motor = other_1779;
    let _e263: Flector = self_1975;
    let _e267: Motor = other_1779;
    let _e270: Motor = other_1779;
    let _e273: Motor = other_1779;
    let _e276: Motor = other_1779;
    let _e289: Flector = self_1975;
    let _e293: Motor = other_1779;
    let _e296: Motor = other_1779;
    let _e299: Motor = other_1779;
    let _e302: Motor = other_1779;
    let _e315: Flector = self_1975;
    let _e319: Motor = other_1779;
    let _e331: Flector = self_1975;
    let _e335: Motor = other_1779;
    return Flector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e63.g1_.x) * vec4<f32>(_e67.g1_.w, _e70.g1_.z, _e73.g1_.y, _e76.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e91.g1_.y) * vec4<f32>(_e95.g1_.z, _e98.g1_.w, _e101.g1_.x, _e104.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e119.g1_.z) * vec4<f32>(_e123.g1_.y, _e126.g1_.x, _e129.g1_.w, _e132.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e147.g1_.w) * _e151.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e162.g0_.x) * _e166.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((((vec4<f32>(_e178.g0_.y) * vec4<f32>(_e182.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e194.g0_.z) * vec4<f32>(_e198.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e211.g0_.w) * vec4<f32>(_e215.g0_.x, _e218.g0_.y, _e221.g0_.z, _e224.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e237.g1_.x) * vec4<f32>(_e241.g0_.w, _e244.g0_.z, _e247.g0_.y, _e250.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e263.g1_.y) * vec4<f32>(_e267.g0_.z, _e270.g0_.w, _e273.g0_.x, _e276.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e289.g1_.z) * vec4<f32>(_e293.g0_.y, _e296.g0_.x, _e299.g0_.w, _e302.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e315.g1_.w) * vec4<f32>(_e319.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e331.g0_.x) * vec4<f32>(_e335.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flector_motor_inner_anti_product(self_1976: Flector, other_1780: Motor) -> Flector {
    var self_1977: Flector;
    var other_1781: Motor;

    self_1977 = self_1976;
    other_1781 = other_1780;
    let _e4: Flector = self_1977;
    let _e8: Motor = other_1781;
    let _e20: Flector = self_1977;
    let _e24: Motor = other_1781;
    let _e37: Flector = self_1977;
    let _e41: Motor = other_1781;
    let _e54: Flector = self_1977;
    let _e56: Motor = other_1781;
    let _e62: Flector = self_1977;
    let _e66: Motor = other_1781;
    let _e78: Flector = self_1977;
    let _e82: Motor = other_1781;
    let _e95: Flector = self_1977;
    let _e99: Motor = other_1781;
    let _e102: Motor = other_1781;
    let _e105: Motor = other_1781;
    let _e108: Motor = other_1781;
    let _e121: Flector = self_1977;
    let _e125: Motor = other_1781;
    let _e128: Motor = other_1781;
    let _e131: Motor = other_1781;
    let _e134: Motor = other_1781;
    let _e147: Flector = self_1977;
    let _e151: Motor = other_1781;
    let _e154: Motor = other_1781;
    let _e157: Motor = other_1781;
    let _e160: Motor = other_1781;
    let _e173: Flector = self_1977;
    let _e177: Motor = other_1781;
    let _e180: Motor = other_1781;
    let _e183: Motor = other_1781;
    let _e186: Motor = other_1781;
    let _e199: Flector = self_1977;
    let _e203: Motor = other_1781;
    let _e215: Flector = self_1977;
    let _e219: Motor = other_1781;
    return Flector((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g1_.w)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g1_.w)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e54.g0_ * vec4<f32>(_e56.g0_.w))), (((((((((vec4<f32>(_e62.g0_.y) * vec4<f32>(_e66.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e78.g0_.z) * vec4<f32>(_e82.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e95.g0_.w) * vec4<f32>(_e99.g0_.x, _e102.g0_.y, _e105.g0_.z, _e108.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e121.g1_.x) * vec4<f32>(_e125.g0_.w, _e128.g0_.z, _e131.g0_.y, _e134.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e147.g1_.y) * vec4<f32>(_e151.g0_.z, _e154.g0_.w, _e157.g0_.x, _e160.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e173.g1_.z) * vec4<f32>(_e177.g0_.y, _e180.g0_.x, _e183.g0_.w, _e186.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e199.g1_.w) * vec4<f32>(_e203.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e215.g0_.x) * vec4<f32>(_e219.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flector_motor_right_anti_contraction(self_1978: Flector, other_1782: Motor) -> Flector {
    var self_1979: Flector;
    var other_1783: Motor;

    self_1979 = self_1978;
    other_1783 = other_1782;
    let _e4: Flector = self_1979;
    let _e6: Motor = other_1783;
    let _e11: Flector = self_1979;
    let _e15: Motor = other_1783;
    let _e27: Flector = self_1979;
    let _e31: Motor = other_1783;
    let _e44: Flector = self_1979;
    let _e48: Motor = other_1783;
    let _e60: Flector = self_1979;
    let _e64: Motor = other_1783;
    let _e76: Flector = self_1979;
    let _e80: Motor = other_1783;
    let _e92: Flector = self_1979;
    let _e96: Motor = other_1783;
    let _e108: Flector = self_1979;
    let _e111: Motor = other_1783;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.z) * vec4<f32>(_e80.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_regressive_product(self_1980: Flector, other_1784: Rotor) -> Flector {
    var self_1981: Flector;
    var other_1785: Rotor;

    self_1981 = self_1980;
    other_1785 = other_1784;
    let _e4: Flector = self_1981;
    let _e8: Rotor = other_1785;
    let _e20: Flector = self_1981;
    let _e24: Rotor = other_1785;
    let _e37: Flector = self_1981;
    let _e41: Rotor = other_1785;
    let _e54: Flector = self_1981;
    let _e58: Rotor = other_1785;
    let _e69: Flector = self_1981;
    let _e71: Rotor = other_1785;
    let _e77: Flector = self_1981;
    let _e79: Rotor = other_1785;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.w) * _e58.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e69.g0_ * vec4<f32>(_e71.g0_.w))), (_e77.g1_ * vec4<f32>(_e79.g0_.w)));
}

fn flector_rotor_geometric_anti_product(self_1982: Flector, other_1786: Rotor) -> Flector {
    var self_1983: Flector;
    var other_1787: Rotor;

    self_1983 = self_1982;
    other_1787 = other_1786;
    let _e4: Flector = self_1983;
    let _e8: Rotor = other_1787;
    let _e19: Flector = self_1983;
    let _e23: Rotor = other_1787;
    let _e35: Flector = self_1983;
    let _e39: Rotor = other_1787;
    let _e52: Flector = self_1983;
    let _e56: Rotor = other_1787;
    let _e69: Flector = self_1983;
    let _e73: Rotor = other_1787;
    let _e86: Flector = self_1983;
    let _e90: Rotor = other_1787;
    let _e101: Flector = self_1983;
    let _e104: Rotor = other_1787;
    let _e116: Flector = self_1983;
    let _e120: Rotor = other_1787;
    let _e132: Flector = self_1983;
    let _e136: Rotor = other_1787;
    let _e149: Flector = self_1983;
    let _e153: Rotor = other_1787;
    let _e165: Flector = self_1983;
    let _e169: Rotor = other_1787;
    let _e181: Flector = self_1983;
    let _e185: Rotor = other_1787;
    let _e197: Flector = self_1983;
    let _e201: Rotor = other_1787;
    let _e213: Flector = self_1983;
    let _e216: Rotor = other_1787;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.y) * vec4<f32>(_e56.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.z) * vec4<f32>(_e73.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e86.g1_.w) * _e90.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e101.g0_.xxxw * _e104.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e116.g0_.y) * vec4<f32>(_e120.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e132.g0_.z) * vec4<f32>(_e136.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e149.g1_.x) * _e153.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e165.g1_.y) * _e169.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e181.g1_.z) * _e185.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e197.g1_.w) * vec4<f32>(_e201.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e213.g0_.wwwx * _e216.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_inner_anti_product(self_1984: Flector, other_1788: Rotor) -> Flector {
    var self_1985: Flector;
    var other_1789: Rotor;

    self_1985 = self_1984;
    other_1789 = other_1788;
    let _e4: Flector = self_1985;
    let _e6: Rotor = other_1789;
    let _e11: Flector = self_1985;
    let _e15: Rotor = other_1789;
    let _e27: Flector = self_1985;
    let _e31: Rotor = other_1789;
    let _e44: Flector = self_1985;
    let _e48: Rotor = other_1789;
    let _e60: Flector = self_1985;
    let _e64: Rotor = other_1789;
    let _e76: Flector = self_1985;
    let _e80: Rotor = other_1789;
    let _e92: Flector = self_1985;
    let _e96: Rotor = other_1789;
    let _e108: Flector = self_1985;
    let _e111: Rotor = other_1789;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * _e48.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * _e64.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e76.g1_.z) * _e80.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_right_anti_contraction(self_1986: Flector, other_1790: Rotor) -> Flector {
    var self_1987: Flector;
    var other_1791: Rotor;

    self_1987 = self_1986;
    other_1791 = other_1790;
    let _e4: Flector = self_1987;
    let _e6: Rotor = other_1791;
    let _e11: Flector = self_1987;
    let _e15: Rotor = other_1791;
    let _e27: Flector = self_1987;
    let _e31: Rotor = other_1791;
    let _e44: Flector = self_1987;
    let _e48: Rotor = other_1791;
    let _e60: Flector = self_1987;
    let _e64: Rotor = other_1791;
    let _e76: Flector = self_1987;
    let _e80: Rotor = other_1791;
    let _e92: Flector = self_1987;
    let _e96: Rotor = other_1791;
    let _e108: Flector = self_1987;
    let _e111: Rotor = other_1791;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.z) * vec4<f32>(_e80.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_regressive_product(self_1988: Flector, other_1792: Translator) -> Flector {
    var self_1989: Flector;
    var other_1793: Translator;

    self_1989 = self_1988;
    other_1793 = other_1792;
    let _e4: Flector = self_1989;
    let _e8: Translator = other_1793;
    let _e19: Flector = self_1989;
    let _e23: Translator = other_1793;
    let _e35: Flector = self_1989;
    let _e39: Translator = other_1793;
    let _e51: Flector = self_1989;
    let _e53: Translator = other_1793;
    let _e59: Flector = self_1989;
    let _e61: Translator = other_1793;
    return Flector((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.w))), (_e59.g1_ * vec4<f32>(_e61.g0_.w)));
}

fn flector_translator_geometric_anti_product(self_1990: Flector, other_1794: Translator) -> Flector {
    var self_1991: Flector;
    var other_1795: Translator;

    self_1991 = self_1990;
    other_1795 = other_1794;
    let _e4: Flector = self_1991;
    let _e8: Translator = other_1795;
    let _e20: Flector = self_1991;
    let _e24: Translator = other_1795;
    let _e36: Flector = self_1991;
    let _e40: Translator = other_1795;
    let _e52: Flector = self_1991;
    let _e56: Translator = other_1795;
    let _e68: Flector = self_1991;
    let _e71: Translator = other_1795;
    let _e82: Flector = self_1991;
    let _e86: Translator = other_1795;
    let _e96: Flector = self_1991;
    let _e100: Translator = other_1795;
    let _e111: Flector = self_1991;
    let _e115: Translator = other_1795;
    let _e127: Flector = self_1991;
    let _e131: Translator = other_1795;
    return Flector(((((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e20.g1_.x) * _e24.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e36.g1_.y) * _e40.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e52.g1_.z) * _e56.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((_e68.g0_.xyzx * _e71.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e82.g1_.y) * _e86.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e96.g1_.z) * _e100.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e111.g1_.w) * vec4<f32>(_e115.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e127.g1_.x) * _e131.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_inner_anti_product(self_1992: Flector, other_1796: Translator) -> Flector {
    var self_1993: Flector;
    var other_1797: Translator;

    self_1993 = self_1992;
    other_1797 = other_1796;
    let _e4: Flector = self_1993;
    let _e6: Translator = other_1797;
    let _e11: Flector = self_1993;
    let _e15: Translator = other_1797;
    let _e25: Flector = self_1993;
    let _e29: Translator = other_1797;
    let _e40: Flector = self_1993;
    let _e44: Translator = other_1797;
    let _e56: Flector = self_1993;
    let _e60: Translator = other_1797;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (((((vec4<f32>(_e11.g1_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e25.g1_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e40.g1_.w) * vec4<f32>(_e44.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e56.g1_.x) * _e60.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_right_anti_contraction(self_1994: Flector, other_1798: Translator) -> Flector {
    var self_1995: Flector;
    var other_1799: Translator;

    self_1995 = self_1994;
    other_1799 = other_1798;
    let _e4: Flector = self_1995;
    let _e6: Translator = other_1799;
    let _e11: Flector = self_1995;
    let _e13: Translator = other_1799;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec4<f32>(_e13.g0_.w)));
}

fn flector_flector_add(self_1996: Flector, other_1800: Flector) -> Flector {
    var self_1997: Flector;
    var other_1801: Flector;

    self_1997 = self_1996;
    other_1801 = other_1800;
    let _e4: Flector = self_1997;
    let _e6: Flector = other_1801;
    let _e9: Flector = self_1997;
    let _e11: Flector = other_1801;
    return Flector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn flector_flector_sub(self_1998: Flector, other_1802: Flector) -> Flector {
    var self_1999: Flector;
    var other_1803: Flector;

    self_1999 = self_1998;
    other_1803 = other_1802;
    let _e4: Flector = self_1999;
    let _e6: Flector = other_1803;
    let _e9: Flector = self_1999;
    let _e11: Flector = other_1803;
    return Flector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn flector_flector_mul(self_2000: Flector, other_1804: Flector) -> Flector {
    var self_2001: Flector;
    var other_1805: Flector;

    self_2001 = self_2000;
    other_1805 = other_1804;
    let _e4: Flector = self_2001;
    let _e6: Flector = other_1805;
    let _e9: Flector = self_2001;
    let _e11: Flector = other_1805;
    return Flector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn flector_flector_div(self_2002: Flector, other_1806: Flector) -> Flector {
    var self_2003: Flector;
    var other_1807: Flector;

    self_2003 = self_2002;
    other_1807 = other_1806;
    let _e4: Flector = self_2003;
    let _e7: Flector = self_2003;
    let _e10: Flector = self_2003;
    let _e13: Flector = self_2003;
    let _e23: Flector = other_1807;
    let _e26: Flector = other_1807;
    let _e29: Flector = other_1807;
    let _e32: Flector = other_1807;
    let _e43: Flector = self_2003;
    let _e46: Flector = self_2003;
    let _e49: Flector = self_2003;
    let _e52: Flector = self_2003;
    let _e62: Flector = other_1807;
    let _e65: Flector = other_1807;
    let _e68: Flector = other_1807;
    let _e71: Flector = other_1807;
    return Flector((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn flector_flector_geometric_anti_product(self_2004: Flector, other_1808: Flector) -> Motor {
    var self_2005: Flector;
    var other_1809: Flector;

    self_2005 = self_2004;
    other_1809 = other_1808;
    let _e6: Flector = self_2005;
    let _e10: Flector = other_1809;
    let _e13: Flector = other_1809;
    let _e16: Flector = other_1809;
    let _e19: Flector = other_1809;
    let _e25: Flector = self_2005;
    let _e29: Flector = other_1809;
    let _e32: Flector = other_1809;
    let _e35: Flector = other_1809;
    let _e38: Flector = other_1809;
    let _e52: Flector = self_2005;
    let _e56: Flector = other_1809;
    let _e59: Flector = other_1809;
    let _e62: Flector = other_1809;
    let _e65: Flector = other_1809;
    let _e79: Flector = self_2005;
    let _e83: Flector = other_1809;
    let _e86: Flector = other_1809;
    let _e89: Flector = other_1809;
    let _e92: Flector = other_1809;
    let _e106: Flector = self_2005;
    let _e110: Flector = other_1809;
    let _e113: Flector = other_1809;
    let _e116: Flector = other_1809;
    let _e119: Flector = other_1809;
    let _e132: Flector = self_2005;
    let _e136: Flector = other_1809;
    let _e139: Flector = other_1809;
    let _e142: Flector = other_1809;
    let _e145: Flector = other_1809;
    let _e159: Flector = self_2005;
    let _e163: Flector = other_1809;
    let _e166: Flector = other_1809;
    let _e169: Flector = other_1809;
    let _e172: Flector = other_1809;
    let _e186: Flector = self_2005;
    let _e190: Flector = other_1809;
    let _e193: Flector = other_1809;
    let _e196: Flector = other_1809;
    let _e199: Flector = other_1809;
    let _e205: Flector = self_2005;
    let _e209: Flector = other_1809;
    let _e212: Flector = other_1809;
    let _e215: Flector = other_1809;
    let _e218: Flector = other_1809;
    let _e232: Flector = self_2005;
    let _e236: Flector = other_1809;
    let _e239: Flector = other_1809;
    let _e242: Flector = other_1809;
    let _e245: Flector = other_1809;
    let _e259: Flector = self_2005;
    let _e263: Flector = other_1809;
    let _e266: Flector = other_1809;
    let _e269: Flector = other_1809;
    let _e272: Flector = other_1809;
    let _e286: Flector = self_2005;
    let _e290: Flector = other_1809;
    let _e293: Flector = other_1809;
    let _e296: Flector = other_1809;
    let _e299: Flector = other_1809;
    return Motor(((((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))) + ((vec4<f32>(_e25.g1_.x) * vec4<f32>(_e29.g0_.w, _e32.g1_.z, _e35.g1_.y, _e38.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e52.g1_.y) * vec4<f32>(_e56.g1_.z, _e59.g0_.w, _e62.g1_.x, _e65.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e79.g1_.z) * vec4<f32>(_e83.g1_.y, _e86.g1_.x, _e89.g0_.w, _e92.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))), (((((((((vec4<f32>(_e106.g0_.x) * vec4<f32>(_e110.g0_.w, _e113.g1_.z, _e116.g1_.y, _e119.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0)) + ((vec4<f32>(_e132.g0_.y) * vec4<f32>(_e136.g1_.z, _e139.g0_.w, _e142.g1_.x, _e145.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e159.g0_.z) * vec4<f32>(_e163.g1_.y, _e166.g1_.x, _e169.g0_.w, _e172.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + (vec4<f32>(_e186.g0_.w) * vec4<f32>(_e190.g0_.x, _e193.g0_.y, _e196.g0_.z, _e199.g1_.w))) + ((vec4<f32>(_e205.g1_.x) * vec4<f32>(_e209.g1_.w, _e212.g0_.z, _e215.g0_.y, _e218.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e232.g1_.y) * vec4<f32>(_e236.g0_.z, _e239.g1_.w, _e242.g0_.x, _e245.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e259.g1_.z) * vec4<f32>(_e263.g0_.y, _e266.g0_.x, _e269.g1_.w, _e272.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) - (vec4<f32>(_e286.g1_.w) * vec4<f32>(_e290.g1_.x, _e293.g1_.y, _e296.g1_.z, _e299.g0_.w))));
}

fn flector_flector_anti_scalar_product(self_2006: Flector, other_1810: Flector) -> AntiScalar {
    var self_2007: Flector;
    var other_1811: Flector;

    self_2007 = self_2006;
    other_1811 = other_1810;
    let _e5: Flector = self_2007;
    let _e8: Flector = other_1811;
    let _e13: Flector = self_2007;
    let _e16: Flector = other_1811;
    let _e21: Flector = self_2007;
    let _e24: Flector = other_1811;
    let _e29: Flector = self_2007;
    let _e32: Flector = other_1811;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g0_.w)) + (_e13.g1_.x * _e16.g1_.x)) + (_e21.g1_.y * _e24.g1_.y)) + (_e29.g1_.z * _e32.g1_.z)));
}

fn flector_dilation_geometric_product(self_2008: Flector, other_1812: Dilation) -> Motor {
    var self_2009: Flector;
    var other_1813: Dilation;

    self_2009 = self_2008;
    other_1813 = other_1812;
    let _e4: Flector = self_2009;
    let _e8: Dilation = other_1813;
    let _e11: Dilation = other_1813;
    let _e14: Dilation = other_1813;
    let _e17: Dilation = other_1813;
    let _e29: Flector = self_2009;
    let _e33: Dilation = other_1813;
    let _e36: Dilation = other_1813;
    let _e39: Dilation = other_1813;
    let _e42: Dilation = other_1813;
    let _e55: Flector = self_2009;
    let _e59: Dilation = other_1813;
    let _e71: Flector = self_2009;
    let _e75: Dilation = other_1813;
    let _e87: Flector = self_2009;
    let _e91: Dilation = other_1813;
    let _e103: Flector = self_2009;
    let _e107: Dilation = other_1813;
    let _e110: Dilation = other_1813;
    let _e113: Dilation = other_1813;
    let _e116: Dilation = other_1813;
    let _e131: Flector = self_2009;
    let _e134: Flector = self_2009;
    let _e137: Flector = self_2009;
    let _e140: Flector = self_2009;
    let _e144: Dilation = other_1813;
    let _e147: Dilation = other_1813;
    let _e150: Dilation = other_1813;
    let _e153: Dilation = other_1813;
    let _e166: Flector = self_2009;
    let _e169: Flector = self_2009;
    let _e172: Flector = self_2009;
    let _e175: Flector = self_2009;
    let _e179: Dilation = other_1813;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.y, _e14.g1_.x, _e17.g0_.x)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.x, _e36.g1_.x, _e39.g0_.x, _e42.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e71.g1_.y) * vec4<f32>(_e75.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e87.g1_.z) * vec4<f32>(_e91.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e103.g1_.w) * vec4<f32>(_e107.g1_.x, _e110.g0_.x, _e113.g0_.y, _e116.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e131.g1_.x, _e134.g0_.x, _e137.g0_.x, _e140.g0_.x) * vec4<f32>(_e144.g0_.z, _e147.g0_.y, _e150.g0_.x, _e153.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((vec4<f32>(_e166.g0_.x, _e169.g0_.y, _e172.g0_.z, _e175.g1_.w) * vec4<f32>(_e179.g0_.z)) * vec4<f32>(-(1.0))));
}

fn flector_dilation_outer_product(self_2010: Flector, other_1814: Dilation) -> AntiScalar {
    var self_2011: Flector;
    var other_1815: Dilation;

    self_2011 = self_2010;
    other_1815 = other_1814;
    let _e4: Flector = self_2011;
    let _e7: Dilation = other_1815;
    let _e11: Flector = self_2011;
    let _e14: Dilation = other_1815;
    let _e19: Flector = self_2011;
    let _e22: Dilation = other_1815;
    let _e27: Flector = self_2011;
    let _e30: Dilation = other_1815;
    return AntiScalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g0_.x)) + (_e19.g0_.z * _e22.g0_.y)) + (_e27.g0_.w * _e30.g0_.z)));
}

fn flector_dilation_right_anti_contraction(self_2012: Flector, other_1816: Dilation) -> Flector {
    var self_2013: Flector;
    var other_1817: Dilation;

    self_2013 = self_2012;
    other_1817 = other_1816;
    let _e4: Flector = self_2013;
    let _e6: Dilation = other_1817;
    let _e11: Flector = self_2013;
    let _e13: Dilation = other_1817;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g1_.y)), (_e11.g1_ * vec4<f32>(_e13.g1_.y)));
}

fn flector_multi_vector_add(self_2014: Flector, other_1818: MultiVector) -> MultiVector {
    var self_2015: Flector;
    var other_1819: MultiVector;

    self_2015 = self_2014;
    other_1819 = other_1818;
    let _e4: MultiVector = other_1819;
    let _e6: MultiVector = other_1819;
    let _e8: MultiVector = other_1819;
    let _e10: Flector = self_2015;
    let _e12: MultiVector = other_1819;
    let _e15: MultiVector = other_1819;
    let _e17: MultiVector = other_1819;
    let _e19: MultiVector = other_1819;
    let _e21: MultiVector = other_1819;
    let _e23: MultiVector = other_1819;
    let _e25: Flector = self_2015;
    let _e27: MultiVector = other_1819;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g0_ + _e12.g3_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, (_e25.g1_ + _e27.g9_));
}

fn flector_multi_vector_sub(self_2016: Flector, other_1820: MultiVector) -> MultiVector {
    var self_2017: Flector;
    var other_1821: MultiVector;

    self_2017 = self_2016;
    other_1821 = other_1820;
    let _e6: MultiVector = other_1821;
    let _e11: MultiVector = other_1821;
    let _e16: MultiVector = other_1821;
    let _e19: Flector = self_2017;
    let _e21: MultiVector = other_1821;
    let _e26: MultiVector = other_1821;
    let _e31: MultiVector = other_1821;
    let _e36: MultiVector = other_1821;
    let _e41: MultiVector = other_1821;
    let _e46: MultiVector = other_1821;
    let _e49: Flector = self_2017;
    let _e51: MultiVector = other_1821;
    return MultiVector((vec3<f32>(0.0) - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_), (vec2<f32>(0.0) - _e16.g2_), (_e19.g0_ - _e21.g3_), (vec3<f32>(0.0) - _e26.g4_), (vec3<f32>(0.0) - _e31.g5_), (vec3<f32>(0.0) - _e36.g6_), (vec3<f32>(0.0) - _e41.g7_), (vec4<f32>(0.0) - _e46.g8_), (_e49.g1_ - _e51.g9_));
}

fn flector_multi_vector_geometric_anti_product(self_2018: Flector, other_1822: MultiVector) -> MultiVector {
    var self_2019: Flector;
    var other_1823: MultiVector;

    self_2019 = self_2018;
    other_1823 = other_1822;
    let _e4: Flector = self_2019;
    let _e8: MultiVector = other_1823;
    let _e19: Flector = self_2019;
    let _e23: MultiVector = other_1823;
    let _e35: Flector = self_2019;
    let _e39: MultiVector = other_1823;
    let _e42: MultiVector = other_1823;
    let _e45: MultiVector = other_1823;
    let _e58: Flector = self_2019;
    let _e62: MultiVector = other_1823;
    let _e65: MultiVector = other_1823;
    let _e68: MultiVector = other_1823;
    let _e80: Flector = self_2019;
    let _e84: MultiVector = other_1823;
    let _e87: MultiVector = other_1823;
    let _e90: MultiVector = other_1823;
    let _e102: Flector = self_2019;
    let _e106: MultiVector = other_1823;
    let _e109: MultiVector = other_1823;
    let _e112: MultiVector = other_1823;
    let _e124: Flector = self_2019;
    let _e128: MultiVector = other_1823;
    let _e139: Flector = self_2019;
    let _e143: MultiVector = other_1823;
    let _e155: Flector = self_2019;
    let _e159: MultiVector = other_1823;
    let _e162: MultiVector = other_1823;
    let _e165: MultiVector = other_1823;
    let _e177: Flector = self_2019;
    let _e181: MultiVector = other_1823;
    let _e184: MultiVector = other_1823;
    let _e187: MultiVector = other_1823;
    let _e200: Flector = self_2019;
    let _e204: MultiVector = other_1823;
    let _e207: MultiVector = other_1823;
    let _e210: MultiVector = other_1823;
    let _e223: Flector = self_2019;
    let _e227: MultiVector = other_1823;
    let _e231: Flector = self_2019;
    let _e235: MultiVector = other_1823;
    let _e238: MultiVector = other_1823;
    let _e241: MultiVector = other_1823;
    let _e253: Flector = self_2019;
    let _e257: MultiVector = other_1823;
    let _e260: MultiVector = other_1823;
    let _e263: MultiVector = other_1823;
    let _e275: Flector = self_2019;
    let _e279: MultiVector = other_1823;
    let _e282: MultiVector = other_1823;
    let _e285: MultiVector = other_1823;
    let _e297: Flector = self_2019;
    let _e301: MultiVector = other_1823;
    let _e305: Flector = self_2019;
    let _e309: MultiVector = other_1823;
    let _e318: Flector = self_2019;
    let _e322: MultiVector = other_1823;
    let _e332: Flector = self_2019;
    let _e336: MultiVector = other_1823;
    let _e339: MultiVector = other_1823;
    let _e350: Flector = self_2019;
    let _e354: MultiVector = other_1823;
    let _e357: MultiVector = other_1823;
    let _e368: Flector = self_2019;
    let _e372: MultiVector = other_1823;
    let _e375: MultiVector = other_1823;
    let _e386: Flector = self_2019;
    let _e390: MultiVector = other_1823;
    let _e393: MultiVector = other_1823;
    let _e404: Flector = self_2019;
    let _e408: MultiVector = other_1823;
    let _e419: Flector = self_2019;
    let _e423: MultiVector = other_1823;
    let _e433: Flector = self_2019;
    let _e437: MultiVector = other_1823;
    let _e440: MultiVector = other_1823;
    let _e443: MultiVector = other_1823;
    let _e446: MultiVector = other_1823;
    let _e458: Flector = self_2019;
    let _e462: MultiVector = other_1823;
    let _e465: MultiVector = other_1823;
    let _e468: MultiVector = other_1823;
    let _e471: MultiVector = other_1823;
    let _e484: Flector = self_2019;
    let _e488: MultiVector = other_1823;
    let _e491: MultiVector = other_1823;
    let _e494: MultiVector = other_1823;
    let _e497: MultiVector = other_1823;
    let _e512: Flector = self_2019;
    let _e516: MultiVector = other_1823;
    let _e519: MultiVector = other_1823;
    let _e522: MultiVector = other_1823;
    let _e525: MultiVector = other_1823;
    let _e540: Flector = self_2019;
    let _e544: MultiVector = other_1823;
    let _e547: MultiVector = other_1823;
    let _e550: MultiVector = other_1823;
    let _e553: MultiVector = other_1823;
    let _e568: Flector = self_2019;
    let _e572: MultiVector = other_1823;
    let _e575: MultiVector = other_1823;
    let _e578: MultiVector = other_1823;
    let _e581: MultiVector = other_1823;
    let _e596: Flector = self_2019;
    let _e600: MultiVector = other_1823;
    let _e603: MultiVector = other_1823;
    let _e606: MultiVector = other_1823;
    let _e609: MultiVector = other_1823;
    let _e621: Flector = self_2019;
    let _e625: MultiVector = other_1823;
    let _e628: MultiVector = other_1823;
    let _e631: MultiVector = other_1823;
    let _e634: MultiVector = other_1823;
    let _e647: Flector = self_2019;
    let _e651: MultiVector = other_1823;
    let _e654: MultiVector = other_1823;
    let _e657: MultiVector = other_1823;
    let _e662: Flector = self_2019;
    let _e666: MultiVector = other_1823;
    let _e669: MultiVector = other_1823;
    let _e672: MultiVector = other_1823;
    let _e684: Flector = self_2019;
    let _e688: MultiVector = other_1823;
    let _e691: MultiVector = other_1823;
    let _e694: MultiVector = other_1823;
    let _e706: Flector = self_2019;
    let _e710: MultiVector = other_1823;
    let _e713: MultiVector = other_1823;
    let _e716: MultiVector = other_1823;
    let _e728: Flector = self_2019;
    let _e732: MultiVector = other_1823;
    let _e735: MultiVector = other_1823;
    let _e738: MultiVector = other_1823;
    let _e749: Flector = self_2019;
    let _e753: MultiVector = other_1823;
    let _e756: MultiVector = other_1823;
    let _e759: MultiVector = other_1823;
    let _e771: Flector = self_2019;
    let _e775: MultiVector = other_1823;
    let _e778: MultiVector = other_1823;
    let _e781: MultiVector = other_1823;
    let _e793: Flector = self_2019;
    let _e797: MultiVector = other_1823;
    let _e801: Flector = self_2019;
    let _e805: MultiVector = other_1823;
    let _e808: MultiVector = other_1823;
    let _e811: MultiVector = other_1823;
    let _e824: Flector = self_2019;
    let _e828: MultiVector = other_1823;
    let _e831: MultiVector = other_1823;
    let _e834: MultiVector = other_1823;
    let _e847: Flector = self_2019;
    let _e851: MultiVector = other_1823;
    let _e854: MultiVector = other_1823;
    let _e857: MultiVector = other_1823;
    let _e870: Flector = self_2019;
    let _e874: MultiVector = other_1823;
    let _e877: MultiVector = other_1823;
    let _e880: MultiVector = other_1823;
    let _e888: Flector = self_2019;
    let _e892: MultiVector = other_1823;
    let _e895: MultiVector = other_1823;
    let _e898: MultiVector = other_1823;
    let _e904: Flector = self_2019;
    let _e908: MultiVector = other_1823;
    let _e911: MultiVector = other_1823;
    let _e914: MultiVector = other_1823;
    let _e927: Flector = self_2019;
    let _e931: MultiVector = other_1823;
    let _e934: MultiVector = other_1823;
    let _e937: MultiVector = other_1823;
    let _e950: Flector = self_2019;
    let _e954: MultiVector = other_1823;
    let _e957: MultiVector = other_1823;
    let _e960: MultiVector = other_1823;
    let _e973: Flector = self_2019;
    let _e977: MultiVector = other_1823;
    let _e980: MultiVector = other_1823;
    let _e983: MultiVector = other_1823;
    let _e995: Flector = self_2019;
    let _e999: MultiVector = other_1823;
    let _e1002: MultiVector = other_1823;
    let _e1005: MultiVector = other_1823;
    let _e1018: Flector = self_2019;
    let _e1022: MultiVector = other_1823;
    let _e1025: MultiVector = other_1823;
    let _e1028: MultiVector = other_1823;
    let _e1041: Flector = self_2019;
    let _e1045: MultiVector = other_1823;
    let _e1048: MultiVector = other_1823;
    let _e1051: MultiVector = other_1823;
    let _e1057: Flector = self_2019;
    let _e1061: MultiVector = other_1823;
    let _e1064: MultiVector = other_1823;
    let _e1067: MultiVector = other_1823;
    let _e1079: Flector = self_2019;
    let _e1083: MultiVector = other_1823;
    let _e1086: MultiVector = other_1823;
    let _e1089: MultiVector = other_1823;
    let _e1101: Flector = self_2019;
    let _e1105: MultiVector = other_1823;
    let _e1108: MultiVector = other_1823;
    let _e1111: MultiVector = other_1823;
    let _e1123: Flector = self_2019;
    let _e1127: MultiVector = other_1823;
    let _e1130: MultiVector = other_1823;
    let _e1133: MultiVector = other_1823;
    let _e1139: Flector = self_2019;
    let _e1143: MultiVector = other_1823;
    let _e1154: Flector = self_2019;
    let _e1158: MultiVector = other_1823;
    let _e1170: Flector = self_2019;
    let _e1174: MultiVector = other_1823;
    let _e1177: MultiVector = other_1823;
    let _e1180: MultiVector = other_1823;
    let _e1183: MultiVector = other_1823;
    let _e1198: Flector = self_2019;
    let _e1202: MultiVector = other_1823;
    let _e1205: MultiVector = other_1823;
    let _e1208: MultiVector = other_1823;
    let _e1211: MultiVector = other_1823;
    let _e1226: Flector = self_2019;
    let _e1230: MultiVector = other_1823;
    let _e1233: MultiVector = other_1823;
    let _e1236: MultiVector = other_1823;
    let _e1239: MultiVector = other_1823;
    let _e1254: Flector = self_2019;
    let _e1258: MultiVector = other_1823;
    let _e1261: MultiVector = other_1823;
    let _e1264: MultiVector = other_1823;
    let _e1267: MultiVector = other_1823;
    let _e1282: Flector = self_2019;
    let _e1286: MultiVector = other_1823;
    let _e1299: Flector = self_2019;
    let _e1303: MultiVector = other_1823;
    let _e1315: Flector = self_2019;
    let _e1319: MultiVector = other_1823;
    let _e1331: Flector = self_2019;
    let _e1335: MultiVector = other_1823;
    let _e1348: Flector = self_2019;
    let _e1352: MultiVector = other_1823;
    let _e1355: MultiVector = other_1823;
    let _e1358: MultiVector = other_1823;
    let _e1361: MultiVector = other_1823;
    let _e1374: Flector = self_2019;
    let _e1378: MultiVector = other_1823;
    let _e1381: MultiVector = other_1823;
    let _e1384: MultiVector = other_1823;
    let _e1387: MultiVector = other_1823;
    let _e1400: Flector = self_2019;
    let _e1404: MultiVector = other_1823;
    let _e1407: MultiVector = other_1823;
    let _e1410: MultiVector = other_1823;
    let _e1413: MultiVector = other_1823;
    let _e1426: Flector = self_2019;
    let _e1430: MultiVector = other_1823;
    let _e1433: MultiVector = other_1823;
    let _e1436: MultiVector = other_1823;
    let _e1439: MultiVector = other_1823;
    let _e1452: Flector = self_2019;
    let _e1456: MultiVector = other_1823;
    let _e1468: Flector = self_2019;
    let _e1472: MultiVector = other_1823;
    return MultiVector((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g8_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g0_.z) * vec3<f32>(_e23.g8_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g0_.w) * vec3<f32>(_e39.g8_.w, _e42.g2_.x, _e45.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e58.g1_.x) * vec3<f32>(_e62.g1_.x, _e65.g8_.x, _e68.g9_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e80.g1_.y) * vec3<f32>(_e84.g1_.y, _e87.g8_.y, _e90.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e102.g1_.z) * vec3<f32>(_e106.g1_.z, _e109.g8_.z, _e112.g9_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e124.g1_.w) * vec3<f32>(_e128.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e139.g0_.x) * vec3<f32>(_e143.g8_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))), (((((((((vec3<f32>(_e155.g0_.x) * vec3<f32>(_e159.g0_.y, _e162.g4_.z, _e165.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e177.g0_.y) * vec3<f32>(_e181.g4_.z, _e184.g0_.y, _e187.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e200.g0_.z) * vec3<f32>(_e204.g4_.y, _e207.g4_.x, _e210.g0_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e223.g0_.w) * _e227.g5_)) + ((vec3<f32>(_e231.g1_.x) * vec3<f32>(_e235.g0_.x, _e238.g5_.z, _e241.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e253.g1_.y) * vec3<f32>(_e257.g5_.z, _e260.g0_.x, _e263.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e275.g1_.z) * vec3<f32>(_e279.g5_.y, _e282.g5_.x, _e285.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e297.g1_.w) * _e301.g4_)), (((((((((vec2<f32>(_e305.g0_.y) * vec2<f32>(_e309.g9_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e318.g0_.z) * vec2<f32>(_e322.g9_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e332.g0_.w) * vec2<f32>(_e336.g0_.y, _e339.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e350.g1_.x) * vec2<f32>(_e354.g4_.x, _e357.g3_.x)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e368.g1_.y) * vec2<f32>(_e372.g4_.y, _e375.g3_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e386.g1_.z) * vec2<f32>(_e390.g4_.z, _e393.g3_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e404.g1_.w) * vec2<f32>(_e408.g3_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e419.g0_.x) * vec2<f32>(_e423.g9_.x)) * vec2<f32>(0.0, 1.0))), (((((((((vec4<f32>(_e433.g0_.y) * vec4<f32>(_e437.g6_.z, _e440.g0_.z, _e443.g6_.x, _e446.g6_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e458.g0_.z) * vec4<f32>(_e462.g6_.y, _e465.g6_.x, _e468.g0_.z, _e471.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e484.g0_.w) * vec4<f32>(_e488.g7_.x, _e491.g7_.y, _e494.g7_.z, _e497.g0_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e512.g1_.x) * vec4<f32>(_e516.g2_.y, _e519.g7_.z, _e522.g7_.y, _e525.g6_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e540.g1_.y) * vec4<f32>(_e544.g7_.z, _e547.g2_.y, _e550.g7_.x, _e553.g6_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e568.g1_.z) * vec4<f32>(_e572.g7_.y, _e575.g7_.x, _e578.g2_.y, _e581.g6_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e596.g1_.w) * vec4<f32>(_e600.g6_.x, _e603.g6_.y, _e606.g6_.z, _e609.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e621.g0_.x) * vec4<f32>(_e625.g0_.z, _e628.g6_.z, _e631.g6_.y, _e634.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e647.g0_.w) * vec3<f32>(_e651.g8_.x, _e654.g8_.y, _e657.g8_.z)) + ((vec3<f32>(_e662.g1_.x) * vec3<f32>(_e666.g2_.x, _e669.g8_.z, _e672.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e684.g1_.y) * vec3<f32>(_e688.g8_.z, _e691.g2_.x, _e694.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e706.g1_.z) * vec3<f32>(_e710.g8_.y, _e713.g8_.x, _e716.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((vec3<f32>(_e728.g0_.x) * vec3<f32>(_e732.g2_.x, _e735.g8_.z, _e738.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e749.g0_.y) * vec3<f32>(_e753.g8_.z, _e756.g2_.x, _e759.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e771.g0_.z) * vec3<f32>(_e775.g8_.y, _e778.g8_.x, _e781.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e793.g0_.w) * _e797.g1_)) + ((vec3<f32>(_e801.g1_.x) * vec3<f32>(_e805.g8_.w, _e808.g1_.z, _e811.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e824.g1_.y) * vec3<f32>(_e828.g1_.z, _e831.g8_.w, _e834.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e847.g1_.z) * vec3<f32>(_e851.g1_.y, _e854.g1_.x, _e857.g8_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e870.g1_.w) * vec3<f32>(_e874.g8_.x, _e877.g8_.y, _e880.g8_.z))), ((((vec3<f32>(0.0) - (vec3<f32>(_e888.g0_.w) * vec3<f32>(_e892.g9_.x, _e895.g9_.y, _e898.g9_.z))) + ((vec3<f32>(_e904.g1_.x) * vec3<f32>(_e908.g3_.w, _e911.g9_.z, _e914.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e927.g1_.y) * vec3<f32>(_e931.g9_.z, _e934.g3_.w, _e937.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e950.g1_.z) * vec3<f32>(_e954.g9_.y, _e957.g9_.x, _e960.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((((((vec3<f32>(_e973.g0_.x) * vec3<f32>(_e977.g3_.w, _e980.g9_.z, _e983.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e995.g0_.y) * vec3<f32>(_e999.g9_.z, _e1002.g3_.w, _e1005.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e1018.g0_.z) * vec3<f32>(_e1022.g9_.y, _e1025.g9_.x, _e1028.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e1041.g0_.w) * vec3<f32>(_e1045.g3_.x, _e1048.g3_.y, _e1051.g3_.z))) + ((vec3<f32>(_e1057.g1_.x) * vec3<f32>(_e1061.g9_.w, _e1064.g3_.z, _e1067.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1079.g1_.y) * vec3<f32>(_e1083.g3_.z, _e1086.g9_.w, _e1089.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1101.g1_.z) * vec3<f32>(_e1105.g3_.y, _e1108.g3_.x, _e1111.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e1123.g1_.w) * vec3<f32>(_e1127.g9_.x, _e1130.g9_.y, _e1133.g9_.z))), (((((((((vec4<f32>(_e1139.g0_.y) * vec4<f32>(_e1143.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e1154.g0_.z) * vec4<f32>(_e1158.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1170.g0_.w) * vec4<f32>(_e1174.g4_.x, _e1177.g4_.y, _e1180.g4_.z, _e1183.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e1198.g1_.x) * vec4<f32>(_e1202.g0_.y, _e1205.g4_.z, _e1208.g4_.y, _e1211.g5_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1226.g1_.y) * vec4<f32>(_e1230.g4_.z, _e1233.g0_.y, _e1236.g4_.x, _e1239.g5_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1254.g1_.z) * vec4<f32>(_e1258.g4_.y, _e1261.g4_.x, _e1264.g0_.y, _e1267.g5_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e1282.g1_.w) * vec4<f32>(_e1286.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1299.g0_.x) * vec4<f32>(_e1303.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((((vec4<f32>(_e1315.g0_.y) * vec4<f32>(_e1319.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1331.g0_.z) * vec4<f32>(_e1335.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1348.g0_.w) * vec4<f32>(_e1352.g6_.x, _e1355.g6_.y, _e1358.g6_.z, _e1361.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1374.g1_.x) * vec4<f32>(_e1378.g0_.z, _e1381.g6_.z, _e1384.g6_.y, _e1387.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1400.g1_.y) * vec4<f32>(_e1404.g6_.z, _e1407.g0_.z, _e1410.g6_.x, _e1413.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1426.g1_.z) * vec4<f32>(_e1430.g6_.y, _e1433.g6_.x, _e1436.g0_.z, _e1439.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1452.g1_.w) * vec4<f32>(_e1456.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1468.g0_.x) * vec4<f32>(_e1472.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flector_multi_vector_anti_scalar_product(self_2020: Flector, other_1824: MultiVector) -> AntiScalar {
    var self_2021: Flector;
    var other_1825: MultiVector;

    self_2021 = self_2020;
    other_1825 = other_1824;
    let _e5: Flector = self_2021;
    let _e8: MultiVector = other_1825;
    let _e13: Flector = self_2021;
    let _e16: MultiVector = other_1825;
    let _e21: Flector = self_2021;
    let _e24: MultiVector = other_1825;
    let _e29: Flector = self_2021;
    let _e32: MultiVector = other_1825;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g3_.w)) + (_e13.g1_.x * _e16.g9_.x)) + (_e21.g1_.y * _e24.g9_.y)) + (_e29.g1_.z * _e32.g9_.z)));
}

fn flector_scale(self_2022: Flector, other_1826: f32) -> Flector {
    var self_2023: Flector;
    var other_1827: f32;

    self_2023 = self_2022;
    other_1827 = other_1826;
    let _e4: Flector = self_2023;
    let _e5: f32 = other_1827;
    let _e7: Flector = flector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn dilation_zero() -> Dilation {
    return Dilation(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dilation_one() -> Dilation {
    return Dilation(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dilation_neg(self_2024: Dilation) -> Dilation {
    var self_2025: Dilation;

    self_2025 = self_2024;
    let _e2: Dilation = self_2025;
    let _e8: Dilation = self_2025;
    return Dilation((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn dilation_automorphism(self_2026: Dilation) -> Dilation {
    var self_2027: Dilation;

    self_2027 = self_2026;
    let _e2: Dilation = self_2027;
    let _e8: Dilation = self_2027;
    return Dilation((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0))));
}

fn dilation_reversal(self_2028: Dilation) -> Dilation {
    var self_2029: Dilation;

    self_2029 = self_2028;
    let _e2: Dilation = self_2029;
    let _e8: Dilation = self_2029;
    return Dilation((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec2<f32>(-(1.0), 1.0)));
}

fn dilation_conjugation(self_2030: Dilation) -> Dilation {
    var self_2031: Dilation;

    self_2031 = self_2030;
    let _e2: Dilation = self_2031;
    let _e4: Dilation = self_2031;
    return Dilation(_e2.g0_, (_e4.g1_ * vec2<f32>(1.0, -(1.0))));
}

fn dilation_anti_reversal(self_2032: Dilation) -> Dilation {
    var self_2033: Dilation;

    self_2033 = self_2032;
    let _e2: Dilation = self_2033;
    let _e4: Dilation = self_2033;
    return Dilation(_e2.g0_, (_e4.g1_ * vec2<f32>(1.0, -(1.0))));
}

fn dilation_scalar_geometric_product(self_2034: Dilation, other_1828: Scalar) -> Dilation {
    var self_2035: Dilation;
    var other_1829: Scalar;

    self_2035 = self_2034;
    other_1829 = other_1828;
    let _e4: Dilation = self_2035;
    let _e6: Scalar = other_1829;
    let _e10: Dilation = self_2035;
    let _e12: Scalar = other_1829;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_scalar_regressive_product(self_2036: Dilation, other_1830: Scalar) -> Scalar {
    var self_2037: Dilation;
    var other_1831: Scalar;

    self_2037 = self_2036;
    other_1831 = other_1830;
    let _e4: Dilation = self_2037;
    let _e7: Scalar = other_1831;
    return Scalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_scalar_outer_product(self_2038: Dilation, other_1832: Scalar) -> Dilation {
    var self_2039: Dilation;
    var other_1833: Scalar;

    self_2039 = self_2038;
    other_1833 = other_1832;
    let _e4: Dilation = self_2039;
    let _e6: Scalar = other_1833;
    let _e10: Dilation = self_2039;
    let _e12: Scalar = other_1833;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_scalar_inner_product(self_2040: Dilation, other_1834: Scalar) -> Dilation {
    var self_2041: Dilation;
    var other_1835: Scalar;

    self_2041 = self_2040;
    other_1835 = other_1834;
    let _e4: Dilation = self_2041;
    let _e6: Scalar = other_1835;
    let _e10: Dilation = self_2041;
    let _e12: Scalar = other_1835;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_scalar_geometric_anti_product(self_2042: Dilation, other_1836: Scalar) -> Scalar {
    var self_2043: Dilation;
    var other_1837: Scalar;

    self_2043 = self_2042;
    other_1837 = other_1836;
    let _e4: Dilation = self_2043;
    let _e7: Scalar = other_1837;
    return Scalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_scalar_inner_anti_product(self_2044: Dilation, other_1838: Scalar) -> Scalar {
    var self_2045: Dilation;
    var other_1839: Scalar;

    self_2045 = self_2044;
    other_1839 = other_1838;
    let _e4: Dilation = self_2045;
    let _e7: Scalar = other_1839;
    return Scalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_scalar_right_contraction(self_2046: Dilation, other_1840: Scalar) -> Dilation {
    var self_2047: Dilation;
    var other_1841: Scalar;

    self_2047 = self_2046;
    other_1841 = other_1840;
    let _e4: Dilation = self_2047;
    let _e6: Scalar = other_1841;
    let _e10: Dilation = self_2047;
    let _e12: Scalar = other_1841;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_scalar_left_anti_contraction(self_2048: Dilation, other_1842: Scalar) -> Scalar {
    var self_2049: Dilation;
    var other_1843: Scalar;

    self_2049 = self_2048;
    other_1843 = other_1842;
    let _e4: Dilation = self_2049;
    let _e7: Scalar = other_1843;
    return Scalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_anti_scalar_into(self_2050: Dilation) -> AntiScalar {
    var self_2051: Dilation;

    self_2051 = self_2050;
    let _e2: Dilation = self_2051;
    return AntiScalar(_e2.g1_.y);
}

fn dilation_anti_scalar_add(self_2052: Dilation, other_1844: AntiScalar) -> Dilation {
    var self_2053: Dilation;
    var other_1845: AntiScalar;

    self_2053 = self_2052;
    other_1845 = other_1844;
    let _e4: Dilation = self_2053;
    let _e6: Dilation = self_2053;
    let _e8: AntiScalar = other_1845;
    return Dilation(_e4.g0_, (_e6.g1_ + (vec2<f32>(_e8.g0_) * vec2<f32>(0.0, 1.0))));
}

fn dilation_anti_scalar_sub(self_2054: Dilation, other_1846: AntiScalar) -> Dilation {
    var self_2055: Dilation;
    var other_1847: AntiScalar;

    self_2055 = self_2054;
    other_1847 = other_1846;
    let _e4: Dilation = self_2055;
    let _e6: Dilation = self_2055;
    let _e8: AntiScalar = other_1847;
    return Dilation(_e4.g0_, (_e6.g1_ - (vec2<f32>(_e8.g0_) * vec2<f32>(0.0, 1.0))));
}

fn dilation_anti_scalar_regressive_product(self_2056: Dilation, other_1848: AntiScalar) -> Dilation {
    var self_2057: Dilation;
    var other_1849: AntiScalar;

    self_2057 = self_2056;
    other_1849 = other_1848;
    let _e4: Dilation = self_2057;
    let _e6: AntiScalar = other_1849;
    let _e10: Dilation = self_2057;
    let _e12: AntiScalar = other_1849;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_anti_scalar_geometric_anti_product(self_2058: Dilation, other_1850: AntiScalar) -> Dilation {
    var self_2059: Dilation;
    var other_1851: AntiScalar;

    self_2059 = self_2058;
    other_1851 = other_1850;
    let _e4: Dilation = self_2059;
    let _e6: AntiScalar = other_1851;
    let _e10: Dilation = self_2059;
    let _e12: AntiScalar = other_1851;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_anti_scalar_inner_anti_product(self_2060: Dilation, other_1852: AntiScalar) -> Dilation {
    var self_2061: Dilation;
    var other_1853: AntiScalar;

    self_2061 = self_2060;
    other_1853 = other_1852;
    let _e4: Dilation = self_2061;
    let _e6: AntiScalar = other_1853;
    let _e10: Dilation = self_2061;
    let _e12: AntiScalar = other_1853;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_anti_scalar_left_anti_contraction(self_2062: Dilation, other_1854: AntiScalar) -> AntiScalar {
    var self_2063: Dilation;
    var other_1855: AntiScalar;

    self_2063 = self_2062;
    other_1855 = other_1854;
    let _e4: Dilation = self_2063;
    let _e7: AntiScalar = other_1855;
    return AntiScalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_anti_scalar_right_anti_contraction(self_2064: Dilation, other_1856: AntiScalar) -> Dilation {
    var self_2065: Dilation;
    var other_1857: AntiScalar;

    self_2065 = self_2064;
    other_1857 = other_1856;
    let _e4: Dilation = self_2065;
    let _e6: AntiScalar = other_1857;
    let _e10: Dilation = self_2065;
    let _e12: AntiScalar = other_1857;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec2<f32>(_e12.g0_)));
}

fn dilation_anti_scalar_anti_scalar_product(self_2066: Dilation, other_1858: AntiScalar) -> AntiScalar {
    var self_2067: Dilation;
    var other_1859: AntiScalar;

    self_2067 = self_2066;
    other_1859 = other_1858;
    let _e4: Dilation = self_2067;
    let _e7: AntiScalar = other_1859;
    return AntiScalar((_e4.g1_.y * _e7.g0_));
}

fn dilation_radial_point_regressive_product(self_2068: Dilation, other_1860: RadialPoint) -> RadialPoint {
    var self_2069: Dilation;
    var other_1861: RadialPoint;

    self_2069 = self_2068;
    other_1861 = other_1860;
    let _e4: Dilation = self_2069;
    let _e8: RadialPoint = other_1861;
    let _e11: Dilation = self_2069;
    let _e15: RadialPoint = other_1861;
    return RadialPoint((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec2<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_radial_point_outer_product(self_2070: Dilation, other_1862: RadialPoint) -> Sphere {
    var self_2071: Dilation;
    var other_1863: RadialPoint;

    self_2071 = self_2070;
    other_1863 = other_1862;
    let _e4: Dilation = self_2071;
    let _e8: RadialPoint = other_1863;
    let _e17: Dilation = self_2071;
    let _e21: RadialPoint = other_1863;
    let _e30: Dilation = self_2071;
    let _e34: RadialPoint = other_1863;
    let _e44: Dilation = self_2071;
    let _e48: RadialPoint = other_1863;
    let _e51: RadialPoint = other_1863;
    let _e61: Dilation = self_2071;
    let _e65: RadialPoint = other_1863;
    let _e76: Dilation = self_2071;
    let _e79: RadialPoint = other_1863;
    let _e82: RadialPoint = other_1863;
    let _e85: RadialPoint = other_1863;
    return Sphere((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.z)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * _e21.g1_) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e30.g1_.x) * vec2<f32>(_e34.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e44.g0_.x) * vec2<f32>(_e48.g0_.y, _e51.g0_.x)) * vec2<f32>(1.0, 0.0))), (((vec3<f32>(_e61.g1_.x) * vec3<f32>(_e65.g1_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((_e76.g0_.xxy * vec3<f32>(_e79.g1_.x, _e82.g1_.y, _e85.g1_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))));
}

fn dilation_radial_point_geometric_anti_product(self_2072: Dilation, other_1864: RadialPoint) -> RadialPoint {
    var self_2073: Dilation;
    var other_1865: RadialPoint;

    self_2073 = self_2072;
    other_1865 = other_1864;
    let _e4: Dilation = self_2073;
    let _e8: RadialPoint = other_1865;
    let _e18: Dilation = self_2073;
    let _e22: RadialPoint = other_1865;
    let _e26: Dilation = self_2073;
    let _e29: RadialPoint = other_1865;
    let _e32: RadialPoint = other_1865;
    let _e35: RadialPoint = other_1865;
    let _e46: Dilation = self_2073;
    let _e50: RadialPoint = other_1865;
    return RadialPoint(((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + (vec3<f32>(_e18.g1_.y) * _e22.g0_)) + ((_e26.g0_.xxy * vec3<f32>(_e29.g1_.x, _e32.g1_.y, _e35.g1_.y)) * vec3<f32>(0.0, 1.0, 1.0))), (vec2<f32>(_e46.g1_.y) * _e50.g1_));
}

fn dilation_radial_point_inner_anti_product(self_2074: Dilation, other_1866: RadialPoint) -> RadialPoint {
    var self_2075: Dilation;
    var other_1867: RadialPoint;

    self_2075 = self_2074;
    other_1867 = other_1866;
    let _e4: Dilation = self_2075;
    let _e8: RadialPoint = other_1867;
    let _e11: Dilation = self_2075;
    let _e15: RadialPoint = other_1867;
    return RadialPoint((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec2<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_radial_point_left_anti_contraction(self_2076: Dilation, other_1868: RadialPoint) -> RadialPoint {
    var self_2077: Dilation;
    var other_1869: RadialPoint;

    self_2077 = self_2076;
    other_1869 = other_1868;
    let _e4: Dilation = self_2077;
    let _e8: RadialPoint = other_1869;
    let _e11: Dilation = self_2077;
    let _e15: RadialPoint = other_1869;
    return RadialPoint((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec2<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_flat_point_outer_product(self_2078: Dilation, other_1870: FlatPoint) -> AntiScalar {
    var self_2079: Dilation;
    var other_1871: FlatPoint;

    self_2079 = self_2078;
    other_1871 = other_1870;
    let _e4: Dilation = self_2079;
    let _e7: FlatPoint = other_1871;
    let _e11: Dilation = self_2079;
    let _e14: FlatPoint = other_1871;
    let _e19: Dilation = self_2079;
    let _e22: FlatPoint = other_1871;
    let _e27: Dilation = self_2079;
    let _e30: FlatPoint = other_1871;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.y) + (_e11.g0_.y * _e14.g0_.z)) + (_e19.g0_.z * _e22.g0_.w)) + (_e27.g1_.x * _e30.g0_.x)));
}

fn dilation_flat_point_inner_anti_product(self_2080: Dilation, other_1872: FlatPoint) -> FlatPoint {
    var self_2081: Dilation;
    var other_1873: FlatPoint;

    self_2081 = self_2080;
    other_1873 = other_1872;
    let _e4: Dilation = self_2081;
    let _e8: FlatPoint = other_1873;
    return FlatPoint((vec4<f32>(_e4.g1_.y) * _e8.g0_));
}

fn dilation_flat_point_left_anti_contraction(self_2082: Dilation, other_1874: FlatPoint) -> FlatPoint {
    var self_2083: Dilation;
    var other_1875: FlatPoint;

    self_2083 = self_2082;
    other_1875 = other_1874;
    let _e4: Dilation = self_2083;
    let _e8: FlatPoint = other_1875;
    return FlatPoint((vec4<f32>(_e4.g1_.y) * _e8.g0_));
}

fn dilation_dipole_outer_product(self_2084: Dilation, other_1876: Dipole) -> AntiScalar {
    var self_2085: Dilation;
    var other_1877: Dipole;

    self_2085 = self_2084;
    other_1877 = other_1876;
    let _e4: Dilation = self_2085;
    let _e7: Dipole = other_1877;
    let _e11: Dilation = self_2085;
    let _e14: Dipole = other_1877;
    let _e19: Dilation = self_2085;
    let _e22: Dipole = other_1877;
    let _e27: Dilation = self_2085;
    let _e30: Dipole = other_1877;
    return AntiScalar(((((_e4.g0_.x * _e7.g2_.y) + (_e11.g0_.y * _e14.g2_.z)) + (_e19.g0_.z * _e22.g2_.w)) + (_e27.g1_.x * _e30.g2_.x)));
}

fn dilation_dipole_inner_anti_product(self_2086: Dilation, other_1878: Dipole) -> Dipole {
    var self_2087: Dilation;
    var other_1879: Dipole;

    self_2087 = self_2086;
    other_1879 = other_1878;
    let _e4: Dilation = self_2087;
    let _e8: Dipole = other_1879;
    let _e11: Dilation = self_2087;
    let _e15: Dipole = other_1879;
    let _e18: Dilation = self_2087;
    let _e22: Dipole = other_1879;
    return Dipole((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_), (vec4<f32>(_e18.g1_.y) * _e22.g2_));
}

fn dilation_dipole_left_anti_contraction(self_2088: Dilation, other_1880: Dipole) -> Dipole {
    var self_2089: Dilation;
    var other_1881: Dipole;

    self_2089 = self_2088;
    other_1881 = other_1880;
    let _e4: Dilation = self_2089;
    let _e8: Dipole = other_1881;
    let _e11: Dilation = self_2089;
    let _e15: Dipole = other_1881;
    let _e18: Dilation = self_2089;
    let _e22: Dipole = other_1881;
    return Dipole((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_), (vec4<f32>(_e18.g1_.y) * _e22.g2_));
}

fn dilation_line_inner_anti_product(self_2090: Dilation, other_1882: Line) -> Line {
    var self_2091: Dilation;
    var other_1883: Line;

    self_2091 = self_2090;
    other_1883 = other_1882;
    let _e4: Dilation = self_2091;
    let _e8: Line = other_1883;
    let _e11: Dilation = self_2091;
    let _e15: Line = other_1883;
    return Line((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_line_left_anti_contraction(self_2092: Dilation, other_1884: Line) -> Line {
    var self_2093: Dilation;
    var other_1885: Line;

    self_2093 = self_2092;
    other_1885 = other_1884;
    let _e4: Dilation = self_2093;
    let _e8: Line = other_1885;
    let _e11: Dilation = self_2093;
    let _e15: Line = other_1885;
    return Line((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_circle_inner_anti_product(self_2094: Dilation, other_1886: Circle) -> Circle {
    var self_2095: Dilation;
    var other_1887: Circle;

    self_2095 = self_2094;
    other_1887 = other_1886;
    let _e4: Dilation = self_2095;
    let _e8: Circle = other_1887;
    let _e11: Dilation = self_2095;
    let _e15: Circle = other_1887;
    let _e18: Dilation = self_2095;
    let _e22: Circle = other_1887;
    return Circle((vec4<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_), (vec3<f32>(_e18.g1_.y) * _e22.g2_));
}

fn dilation_circle_left_contraction(self_2096: Dilation, other_1888: Circle) -> Scalar {
    var self_2097: Dilation;
    var other_1889: Circle;

    self_2097 = self_2096;
    other_1889 = other_1888;
    let _e4: Dilation = self_2097;
    let _e7: Circle = other_1889;
    return Scalar((_e4.g0_.z * _e7.g0_.w));
}

fn dilation_circle_left_anti_contraction(self_2098: Dilation, other_1890: Circle) -> Circle {
    var self_2099: Dilation;
    var other_1891: Circle;

    self_2099 = self_2098;
    other_1891 = other_1890;
    let _e4: Dilation = self_2099;
    let _e8: Circle = other_1891;
    let _e11: Dilation = self_2099;
    let _e15: Circle = other_1891;
    let _e18: Dilation = self_2099;
    let _e22: Circle = other_1891;
    return Circle((vec4<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_), (vec3<f32>(_e18.g1_.y) * _e22.g2_));
}

fn dilation_circle_scalar_product(self_2100: Dilation, other_1892: Circle) -> Scalar {
    var self_2101: Dilation;
    var other_1893: Circle;

    self_2101 = self_2100;
    other_1893 = other_1892;
    let _e4: Dilation = self_2101;
    let _e7: Circle = other_1893;
    return Scalar((_e4.g0_.z * _e7.g0_.w));
}

fn dilation_plane_inner_anti_product(self_2102: Dilation, other_1894: Plane) -> Sphere {
    var self_2103: Dilation;
    var other_1895: Plane;

    self_2103 = self_2102;
    other_1895 = other_1894;
    let _e4: Dilation = self_2103;
    let _e8: Plane = other_1895;
    let _e18: Dilation = self_2103;
    let _e22: Plane = other_1895;
    let _e33: Dilation = self_2103;
    let _e37: Plane = other_1895;
    let _e47: Dilation = self_2103;
    let _e51: Plane = other_1895;
    let _e54: Plane = other_1895;
    let _e65: Dilation = self_2103;
    let _e69: Plane = other_1895;
    let _e72: Plane = other_1895;
    let _e75: Plane = other_1895;
    return Sphere((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g0_.z)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g1_.x) * vec2<f32>(_e22.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g1_.y) * vec2<f32>(_e37.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e47.g0_.x) * vec2<f32>(_e51.g0_.y, _e54.g0_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e65.g1_.y) * vec3<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z)));
}

fn dilation_plane_left_anti_contraction(self_2104: Dilation, other_1896: Plane) -> Plane {
    var self_2105: Dilation;
    var other_1897: Plane;

    self_2105 = self_2104;
    other_1897 = other_1896;
    let _e4: Dilation = self_2105;
    let _e8: Plane = other_1897;
    return Plane((vec4<f32>(_e4.g1_.y) * _e8.g0_));
}

fn dilation_sphere_inner_anti_product(self_2106: Dilation, other_1898: Sphere) -> Sphere {
    var self_2107: Dilation;
    var other_1899: Sphere;

    self_2107 = self_2106;
    other_1899 = other_1898;
    let _e4: Dilation = self_2107;
    let _e8: Sphere = other_1899;
    let _e18: Dilation = self_2107;
    let _e22: Sphere = other_1899;
    let _e33: Dilation = self_2107;
    let _e37: Sphere = other_1899;
    let _e41: Dilation = self_2107;
    let _e45: Sphere = other_1899;
    let _e48: Sphere = other_1899;
    let _e59: Dilation = self_2107;
    let _e63: Sphere = other_1899;
    return Sphere((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.z)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g1_.x) * vec2<f32>(_e22.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g1_.y) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g1_.y, _e48.g1_.x)) * vec2<f32>(-(1.0), 0.0))), (vec3<f32>(_e59.g1_.y) * _e63.g1_));
}

fn dilation_sphere_left_anti_contraction(self_2108: Dilation, other_1900: Sphere) -> Sphere {
    var self_2109: Dilation;
    var other_1901: Sphere;

    self_2109 = self_2108;
    other_1901 = other_1900;
    let _e4: Dilation = self_2109;
    let _e8: Sphere = other_1901;
    let _e11: Dilation = self_2109;
    let _e15: Sphere = other_1901;
    return Sphere((vec2<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_motor_geometric_product(self_2110: Dilation, other_1902: Motor) -> Flector {
    var self_2111: Dilation;
    var other_1903: Motor;

    self_2111 = self_2110;
    other_1903 = other_1902;
    let _e4: Dilation = self_2111;
    let _e8: Motor = other_1903;
    let _e19: Dilation = self_2111;
    let _e23: Motor = other_1903;
    let _e26: Motor = other_1903;
    let _e29: Motor = other_1903;
    let _e32: Motor = other_1903;
    let _e38: Dilation = self_2111;
    let _e42: Motor = other_1903;
    let _e54: Dilation = self_2111;
    let _e58: Motor = other_1903;
    let _e69: Dilation = self_2111;
    let _e73: Motor = other_1903;
    let _e85: Dilation = self_2111;
    let _e89: Motor = other_1903;
    let _e92: Motor = other_1903;
    let _e95: Motor = other_1903;
    let _e98: Motor = other_1903;
    let _e104: Dilation = self_2111;
    let _e108: Motor = other_1903;
    let _e121: Dilation = self_2111;
    let _e125: Motor = other_1903;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g1_.x, _e26.g1_.y, _e29.g1_.z, _e32.g0_.w))) + ((vec4<f32>(_e38.g1_.x) * vec4<f32>(_e42.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e54.g0_.x) * _e58.g1_.xxxy) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e69.g0_.y) * _e73.g1_.yxwy) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0)) - (vec4<f32>(_e85.g0_.z) * vec4<f32>(_e89.g0_.x, _e92.g0_.y, _e95.g0_.z, _e98.g1_.w))) + ((vec4<f32>(_e104.g1_.x) * _e108.g1_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e121.g0_.x) * _e125.g1_.zwxx) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))));
}

fn dilation_motor_outer_product(self_2112: Dilation, other_1904: Motor) -> Plane {
    var self_2113: Dilation;
    var other_1905: Motor;

    self_2113 = self_2112;
    other_1905 = other_1904;
    let _e4: Dilation = self_2113;
    let _e8: Motor = other_1905;
    let _e20: Dilation = self_2113;
    let _e23: Dilation = self_2113;
    let _e26: Dilation = self_2113;
    let _e29: Dilation = self_2113;
    let _e33: Motor = other_1905;
    return Plane((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.x, _e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * _e33.g1_.xwww) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn dilation_motor_left_anti_contraction(self_2114: Dilation, other_1906: Motor) -> Motor {
    var self_2115: Dilation;
    var other_1907: Motor;

    self_2115 = self_2114;
    other_1907 = other_1906;
    let _e4: Dilation = self_2115;
    let _e8: Motor = other_1907;
    let _e11: Dilation = self_2115;
    let _e15: Motor = other_1907;
    return Motor((vec4<f32>(_e4.g1_.y) * _e8.g0_), (vec4<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_motor_right_anti_contraction(self_2116: Dilation, other_1908: Motor) -> Dilation {
    var self_2117: Dilation;
    var other_1909: Motor;

    self_2117 = self_2116;
    other_1909 = other_1908;
    let _e4: Dilation = self_2117;
    let _e6: Motor = other_1909;
    let _e11: Dilation = self_2117;
    let _e13: Motor = other_1909;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn dilation_motor_anti_scalar_product(self_2118: Dilation, other_1910: Motor) -> AntiScalar {
    var self_2119: Dilation;
    var other_1911: Motor;

    self_2119 = self_2118;
    other_1911 = other_1910;
    let _e4: Dilation = self_2119;
    let _e7: Motor = other_1911;
    return AntiScalar((_e4.g1_.y * _e7.g0_.w));
}

fn dilation_rotor_left_anti_contraction(self_2120: Dilation, other_1912: Rotor) -> Rotor {
    var self_2121: Dilation;
    var other_1913: Rotor;

    self_2121 = self_2120;
    other_1913 = other_1912;
    let _e4: Dilation = self_2121;
    let _e8: Rotor = other_1913;
    return Rotor((vec4<f32>(_e4.g1_.y) * _e8.g0_));
}

fn dilation_rotor_right_anti_contraction(self_2122: Dilation, other_1914: Rotor) -> Dilation {
    var self_2123: Dilation;
    var other_1915: Rotor;

    self_2123 = self_2122;
    other_1915 = other_1914;
    let _e4: Dilation = self_2123;
    let _e6: Rotor = other_1915;
    let _e11: Dilation = self_2123;
    let _e13: Rotor = other_1915;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn dilation_rotor_anti_scalar_product(self_2124: Dilation, other_1916: Rotor) -> AntiScalar {
    var self_2125: Dilation;
    var other_1917: Rotor;

    self_2125 = self_2124;
    other_1917 = other_1916;
    let _e4: Dilation = self_2125;
    let _e7: Rotor = other_1917;
    return AntiScalar((_e4.g1_.y * _e7.g0_.w));
}

fn dilation_translator_left_anti_contraction(self_2126: Dilation, other_1918: Translator) -> Translator {
    var self_2127: Dilation;
    var other_1919: Translator;

    self_2127 = self_2126;
    other_1919 = other_1918;
    let _e4: Dilation = self_2127;
    let _e8: Translator = other_1919;
    return Translator((vec4<f32>(_e4.g1_.y) * _e8.g0_));
}

fn dilation_translator_right_anti_contraction(self_2128: Dilation, other_1920: Translator) -> Dilation {
    var self_2129: Dilation;
    var other_1921: Translator;

    self_2129 = self_2128;
    other_1921 = other_1920;
    let _e4: Dilation = self_2129;
    let _e6: Translator = other_1921;
    let _e11: Dilation = self_2129;
    let _e13: Translator = other_1921;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec2<f32>(_e13.g0_.w)));
}

fn dilation_translator_anti_scalar_product(self_2130: Dilation, other_1922: Translator) -> AntiScalar {
    var self_2131: Dilation;
    var other_1923: Translator;

    self_2131 = self_2130;
    other_1923 = other_1922;
    let _e4: Dilation = self_2131;
    let _e7: Translator = other_1923;
    return AntiScalar((_e4.g1_.y * _e7.g0_.w));
}

fn dilation_flector_geometric_product(self_2132: Dilation, other_1924: Flector) -> Motor {
    var self_2133: Dilation;
    var other_1925: Flector;

    self_2133 = self_2132;
    other_1925 = other_1924;
    let _e4: Dilation = self_2133;
    let _e8: Flector = other_1925;
    let _e11: Flector = other_1925;
    let _e14: Flector = other_1925;
    let _e17: Flector = other_1925;
    let _e30: Dilation = self_2133;
    let _e34: Flector = other_1925;
    let _e37: Flector = other_1925;
    let _e40: Flector = other_1925;
    let _e43: Flector = other_1925;
    let _e57: Dilation = self_2133;
    let _e61: Flector = other_1925;
    let _e64: Flector = other_1925;
    let _e67: Flector = other_1925;
    let _e70: Flector = other_1925;
    let _e76: Dilation = self_2133;
    let _e80: Flector = other_1925;
    let _e83: Flector = other_1925;
    let _e86: Flector = other_1925;
    let _e89: Flector = other_1925;
    let _e103: Dilation = self_2133;
    let _e107: Flector = other_1925;
    let _e110: Flector = other_1925;
    let _e113: Flector = other_1925;
    let _e116: Flector = other_1925;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.z, _e11.g1_.w, _e14.g0_.x, _e17.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g1_.w, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + (vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g0_.w))) + ((vec4<f32>(_e76.g1_.x) * vec4<f32>(_e80.g1_.w, _e83.g0_.z, _e86.g0_.y, _e89.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))), (vec4<f32>(_e103.g0_.z) * vec4<f32>(_e107.g0_.x, _e110.g0_.y, _e113.g0_.z, _e116.g1_.w)));
}

fn dilation_flector_outer_product(self_2134: Dilation, other_1926: Flector) -> AntiScalar {
    var self_2135: Dilation;
    var other_1927: Flector;

    self_2135 = self_2134;
    other_1927 = other_1926;
    let _e4: Dilation = self_2135;
    let _e7: Flector = other_1927;
    let _e11: Dilation = self_2135;
    let _e14: Flector = other_1927;
    let _e19: Dilation = self_2135;
    let _e22: Flector = other_1927;
    let _e27: Dilation = self_2135;
    let _e30: Flector = other_1927;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.y) + (_e11.g0_.y * _e14.g0_.z)) + (_e19.g0_.z * _e22.g0_.w)) + (_e27.g1_.x * _e30.g0_.x)));
}

fn dilation_flector_left_anti_contraction(self_2136: Dilation, other_1928: Flector) -> Flector {
    var self_2137: Dilation;
    var other_1929: Flector;

    self_2137 = self_2136;
    other_1929 = other_1928;
    let _e4: Dilation = self_2137;
    let _e8: Flector = other_1929;
    let _e11: Dilation = self_2137;
    let _e15: Flector = other_1929;
    return Flector((vec4<f32>(_e4.g1_.y) * _e8.g0_), (vec4<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_dilation_add(self_2138: Dilation, other_1930: Dilation) -> Dilation {
    var self_2139: Dilation;
    var other_1931: Dilation;

    self_2139 = self_2138;
    other_1931 = other_1930;
    let _e4: Dilation = self_2139;
    let _e6: Dilation = other_1931;
    let _e9: Dilation = self_2139;
    let _e11: Dilation = other_1931;
    return Dilation((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn dilation_dilation_sub(self_2140: Dilation, other_1932: Dilation) -> Dilation {
    var self_2141: Dilation;
    var other_1933: Dilation;

    self_2141 = self_2140;
    other_1933 = other_1932;
    let _e4: Dilation = self_2141;
    let _e6: Dilation = other_1933;
    let _e9: Dilation = self_2141;
    let _e11: Dilation = other_1933;
    return Dilation((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn dilation_dilation_mul(self_2142: Dilation, other_1934: Dilation) -> Dilation {
    var self_2143: Dilation;
    var other_1935: Dilation;

    self_2143 = self_2142;
    other_1935 = other_1934;
    let _e4: Dilation = self_2143;
    let _e6: Dilation = other_1935;
    let _e9: Dilation = self_2143;
    let _e11: Dilation = other_1935;
    return Dilation((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn dilation_dilation_div(self_2144: Dilation, other_1936: Dilation) -> Dilation {
    var self_2145: Dilation;
    var other_1937: Dilation;

    self_2145 = self_2144;
    other_1937 = other_1936;
    let _e4: Dilation = self_2145;
    let _e7: Dilation = self_2145;
    let _e10: Dilation = self_2145;
    let _e19: Dilation = other_1937;
    let _e22: Dilation = other_1937;
    let _e25: Dilation = other_1937;
    let _e35: Dilation = self_2145;
    let _e38: Dilation = self_2145;
    let _e46: Dilation = other_1937;
    let _e49: Dilation = other_1937;
    return Dilation((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec2<f32>(_e35.g1_.x, _e38.g1_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e46.g1_.x, _e49.g1_.y)) * vec2<f32>(1.0, 1.0)));
}

fn dilation_dilation_regressive_product(self_2146: Dilation, other_1938: Dilation) -> Dilation {
    var self_2147: Dilation;
    var other_1939: Dilation;

    self_2147 = self_2146;
    other_1939 = other_1938;
    let _e4: Dilation = self_2147;
    let _e8: Dilation = other_1939;
    let _e11: Dilation = self_2147;
    let _e13: Dilation = other_1939;
    let _e19: Dilation = self_2147;
    let _e23: Dilation = other_1939;
    let _e26: Dilation = self_2147;
    let _e30: Dilation = other_1939;
    return Dilation(((vec3<f32>(_e4.g1_.y) * _e8.g0_) + (_e11.g0_ * vec3<f32>(_e13.g1_.y))), ((vec2<f32>(_e19.g1_.y) * _e23.g1_) + ((vec2<f32>(_e26.g1_.x) * _e30.g1_.yx) * vec2<f32>(1.0, 0.0))));
}

fn dilation_dilation_geometric_anti_product(self_2148: Dilation, other_1940: Dilation) -> Dilation {
    var self_2149: Dilation;
    var other_1941: Dilation;

    self_2149 = self_2148;
    other_1941 = other_1940;
    let _e4: Dilation = self_2149;
    let _e8: Dilation = other_1941;
    let _e11: Dilation = self_2149;
    let _e13: Dilation = other_1941;
    let _e19: Dilation = self_2149;
    let _e23: Dilation = other_1941;
    let _e26: Dilation = self_2149;
    let _e30: Dilation = other_1941;
    return Dilation(((vec3<f32>(_e4.g1_.y) * _e8.g0_) + (_e11.g0_ * vec3<f32>(_e13.g1_.y))), ((vec2<f32>(_e19.g1_.y) * _e23.g1_) + ((vec2<f32>(_e26.g1_.x) * _e30.g1_.yx) * vec2<f32>(1.0, 0.0))));
}

fn dilation_dilation_inner_anti_product(self_2150: Dilation, other_1942: Dilation) -> Dilation {
    var self_2151: Dilation;
    var other_1943: Dilation;

    self_2151 = self_2150;
    other_1943 = other_1942;
    let _e4: Dilation = self_2151;
    let _e8: Dilation = other_1943;
    let _e11: Dilation = self_2151;
    let _e13: Dilation = other_1943;
    let _e19: Dilation = self_2151;
    let _e23: Dilation = other_1943;
    let _e26: Dilation = self_2151;
    let _e30: Dilation = other_1943;
    return Dilation(((vec3<f32>(_e4.g1_.y) * _e8.g0_) + (_e11.g0_ * vec3<f32>(_e13.g1_.y))), ((vec2<f32>(_e19.g1_.y) * _e23.g1_) + ((vec2<f32>(_e26.g1_.x) * _e30.g1_.yx) * vec2<f32>(1.0, 0.0))));
}

fn dilation_dilation_left_anti_contraction(self_2152: Dilation, other_1944: Dilation) -> Dilation {
    var self_2153: Dilation;
    var other_1945: Dilation;

    self_2153 = self_2152;
    other_1945 = other_1944;
    let _e4: Dilation = self_2153;
    let _e8: Dilation = other_1945;
    let _e11: Dilation = self_2153;
    let _e15: Dilation = other_1945;
    return Dilation((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec2<f32>(_e11.g1_.y) * _e15.g1_));
}

fn dilation_dilation_right_anti_contraction(self_2154: Dilation, other_1946: Dilation) -> Dilation {
    var self_2155: Dilation;
    var other_1947: Dilation;

    self_2155 = self_2154;
    other_1947 = other_1946;
    let _e4: Dilation = self_2155;
    let _e6: Dilation = other_1947;
    let _e11: Dilation = self_2155;
    let _e13: Dilation = other_1947;
    return Dilation((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec2<f32>(_e13.g1_.y)));
}

fn dilation_dilation_scalar_product(self_2156: Dilation, other_1948: Dilation) -> Scalar {
    var self_2157: Dilation;
    var other_1949: Dilation;

    self_2157 = self_2156;
    other_1949 = other_1948;
    let _e5: Dilation = self_2157;
    let _e8: Dilation = other_1949;
    return Scalar((0.0 - (_e5.g0_.z * _e8.g0_.z)));
}

fn dilation_dilation_anti_scalar_product(self_2158: Dilation, other_1950: Dilation) -> AntiScalar {
    var self_2159: Dilation;
    var other_1951: Dilation;

    self_2159 = self_2158;
    other_1951 = other_1950;
    let _e4: Dilation = self_2159;
    let _e7: Dilation = other_1951;
    return AntiScalar((_e4.g1_.y * _e7.g1_.y));
}

fn dilation_multi_vector_geometric_product(self_2160: Dilation, other_1952: MultiVector) -> MultiVector {
    var self_2161: Dilation;
    var other_1953: MultiVector;

    self_2161 = self_2160;
    other_1953 = other_1952;
    let _e4: Dilation = self_2161;
    let _e8: MultiVector = other_1953;
    let _e11: MultiVector = other_1953;
    let _e14: MultiVector = other_1953;
    let _e24: Dilation = self_2161;
    let _e28: MultiVector = other_1953;
    let _e31: MultiVector = other_1953;
    let _e34: MultiVector = other_1953;
    let _e40: Dilation = self_2161;
    let _e44: MultiVector = other_1953;
    let _e47: MultiVector = other_1953;
    let _e50: MultiVector = other_1953;
    let _e61: Dilation = self_2161;
    let _e65: MultiVector = other_1953;
    let _e76: Dilation = self_2161;
    let _e80: MultiVector = other_1953;
    let _e83: MultiVector = other_1953;
    let _e86: MultiVector = other_1953;
    let _e99: Dilation = self_2161;
    let _e103: MultiVector = other_1953;
    let _e107: Dilation = self_2161;
    let _e111: MultiVector = other_1953;
    let _e120: Dilation = self_2161;
    let _e124: MultiVector = other_1953;
    let _e127: MultiVector = other_1953;
    let _e138: Dilation = self_2161;
    let _e142: MultiVector = other_1953;
    let _e152: Dilation = self_2161;
    let _e156: MultiVector = other_1953;
    let _e159: MultiVector = other_1953;
    let _e169: Dilation = self_2161;
    let _e173: MultiVector = other_1953;
    let _e184: Dilation = self_2161;
    let _e188: MultiVector = other_1953;
    let _e191: MultiVector = other_1953;
    let _e194: MultiVector = other_1953;
    let _e197: MultiVector = other_1953;
    let _e203: Dilation = self_2161;
    let _e207: MultiVector = other_1953;
    let _e219: Dilation = self_2161;
    let _e223: MultiVector = other_1953;
    let _e235: Dilation = self_2161;
    let _e239: MultiVector = other_1953;
    let _e242: MultiVector = other_1953;
    let _e245: MultiVector = other_1953;
    let _e248: MultiVector = other_1953;
    let _e260: Dilation = self_2161;
    let _e264: MultiVector = other_1953;
    let _e267: MultiVector = other_1953;
    let _e270: MultiVector = other_1953;
    let _e282: Dilation = self_2161;
    let _e286: MultiVector = other_1953;
    let _e289: MultiVector = other_1953;
    let _e292: MultiVector = other_1953;
    let _e305: Dilation = self_2161;
    let _e309: MultiVector = other_1953;
    let _e312: MultiVector = other_1953;
    let _e315: MultiVector = other_1953;
    let _e321: Dilation = self_2161;
    let _e325: MultiVector = other_1953;
    let _e328: MultiVector = other_1953;
    let _e331: MultiVector = other_1953;
    let _e344: Dilation = self_2161;
    let _e348: MultiVector = other_1953;
    let _e351: Dilation = self_2161;
    let _e355: MultiVector = other_1953;
    let _e358: MultiVector = other_1953;
    let _e361: MultiVector = other_1953;
    let _e373: Dilation = self_2161;
    let _e377: MultiVector = other_1953;
    let _e380: MultiVector = other_1953;
    let _e383: MultiVector = other_1953;
    let _e396: Dilation = self_2161;
    let _e400: MultiVector = other_1953;
    let _e403: MultiVector = other_1953;
    let _e406: MultiVector = other_1953;
    let _e412: Dilation = self_2161;
    let _e416: MultiVector = other_1953;
    let _e419: MultiVector = other_1953;
    let _e422: MultiVector = other_1953;
    let _e435: Dilation = self_2161;
    let _e439: MultiVector = other_1953;
    let _e443: Dilation = self_2161;
    let _e447: MultiVector = other_1953;
    let _e450: MultiVector = other_1953;
    let _e453: MultiVector = other_1953;
    let _e458: Dilation = self_2161;
    let _e462: MultiVector = other_1953;
    let _e465: MultiVector = other_1953;
    let _e468: MultiVector = other_1953;
    let _e471: MultiVector = other_1953;
    let _e484: Dilation = self_2161;
    let _e488: MultiVector = other_1953;
    let _e491: MultiVector = other_1953;
    let _e494: MultiVector = other_1953;
    let _e497: MultiVector = other_1953;
    let _e503: Dilation = self_2161;
    let _e507: MultiVector = other_1953;
    let _e510: MultiVector = other_1953;
    let _e513: MultiVector = other_1953;
    let _e516: MultiVector = other_1953;
    let _e530: Dilation = self_2161;
    let _e534: MultiVector = other_1953;
    let _e537: MultiVector = other_1953;
    let _e540: MultiVector = other_1953;
    let _e543: MultiVector = other_1953;
    let _e557: Dilation = self_2161;
    let _e561: MultiVector = other_1953;
    let _e564: MultiVector = other_1953;
    let _e567: MultiVector = other_1953;
    let _e570: MultiVector = other_1953;
    let _e583: Dilation = self_2161;
    let _e587: MultiVector = other_1953;
    let _e590: MultiVector = other_1953;
    let _e593: MultiVector = other_1953;
    let _e596: MultiVector = other_1953;
    let _e602: Dilation = self_2161;
    let _e606: MultiVector = other_1953;
    let _e609: MultiVector = other_1953;
    let _e612: MultiVector = other_1953;
    let _e615: MultiVector = other_1953;
    let _e629: Dilation = self_2161;
    let _e633: MultiVector = other_1953;
    let _e636: MultiVector = other_1953;
    let _e639: MultiVector = other_1953;
    let _e642: MultiVector = other_1953;
    let _e654: Dilation = self_2161;
    let _e658: MultiVector = other_1953;
    let _e661: MultiVector = other_1953;
    let _e664: MultiVector = other_1953;
    let _e667: MultiVector = other_1953;
    return MultiVector(((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g3_.z)) * vec3<f32>(0.0, 1.0, 1.0)) + (vec3<f32>(_e24.g0_.z) * vec3<f32>(_e28.g8_.w, _e31.g2_.x, _e34.g3_.w))) + ((vec3<f32>(_e40.g1_.x) * vec3<f32>(_e44.g1_.x, _e47.g1_.x, _e50.g3_.x)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e61.g1_.y) * vec3<f32>(_e65.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e76.g0_.x) * vec3<f32>(_e80.g1_.x, _e83.g1_.y, _e86.g3_.y)) * vec3<f32>(0.0, 1.0, 1.0))), (vec3<f32>(0.0) - (vec3<f32>(_e99.g0_.z) * _e103.g5_)), (((((vec2<f32>(_e107.g0_.y) * vec2<f32>(_e111.g5_.z)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e120.g0_.z) * vec2<f32>(_e124.g0_.y, _e127.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e138.g1_.x) * vec2<f32>(_e142.g5_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e152.g0_.x) * vec2<f32>(_e156.g5_.y, _e159.g5_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4<f32>(_e169.g0_.y) * vec4<f32>(_e173.g7_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e184.g0_.z) * vec4<f32>(_e188.g7_.x, _e191.g7_.y, _e194.g7_.z, _e197.g0_.z))) + ((vec4<f32>(_e203.g1_.x) * vec4<f32>(_e207.g7_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e219.g1_.y) * vec4<f32>(_e223.g8_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e235.g0_.x) * vec4<f32>(_e239.g7_.x, _e242.g7_.x, _e245.g7_.x, _e248.g7_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3<f32>(_e260.g0_.x) * vec3<f32>(_e264.g1_.z, _e267.g8_.w, _e270.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0))) + ((vec3<f32>(_e282.g0_.y) * vec3<f32>(_e286.g1_.y, _e289.g1_.x, _e292.g8_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e305.g0_.z) * vec3<f32>(_e309.g8_.x, _e312.g8_.y, _e315.g8_.z))) + ((vec3<f32>(_e321.g1_.x) * vec3<f32>(_e325.g8_.w, _e328.g1_.z, _e331.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))), (vec3<f32>(_e344.g0_.z) * _e348.g1_), ((((((vec3<f32>(_e351.g0_.x) * vec3<f32>(_e355.g3_.z, _e358.g9_.w, _e361.g3_.x)) * vec3<f32>(1.0, -(1.0), -(1.0))) + ((vec3<f32>(_e373.g0_.y) * vec3<f32>(_e377.g3_.y, _e380.g3_.x, _e383.g9_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e396.g0_.z) * vec3<f32>(_e400.g9_.x, _e403.g9_.y, _e406.g9_.z))) + ((vec3<f32>(_e412.g1_.x) * vec3<f32>(_e416.g9_.w, _e419.g3_.z, _e422.g3_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + (vec3<f32>(_e435.g1_.y) * _e439.g5_)), (vec3<f32>(_e443.g0_.z) * vec3<f32>(_e447.g3_.x, _e450.g3_.y, _e453.g3_.z)), (((((vec4<f32>(_e458.g0_.y) * vec4<f32>(_e462.g5_.y, _e465.g5_.x, _e468.g0_.x, _e471.g5_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0)) - (vec4<f32>(_e484.g0_.z) * vec4<f32>(_e488.g4_.x, _e491.g4_.y, _e494.g4_.z, _e497.g0_.x))) + ((vec4<f32>(_e503.g1_.x) * vec4<f32>(_e507.g0_.x, _e510.g5_.z, _e513.g5_.y, _e516.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e530.g0_.x) * vec4<f32>(_e534.g5_.z, _e537.g0_.x, _e540.g5_.x, _e543.g5_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))), ((((((vec4<f32>(_e557.g0_.y) * vec4<f32>(_e561.g7_.y, _e564.g7_.x, _e567.g2_.y, _e570.g7_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0)) - (vec4<f32>(_e583.g0_.z) * vec4<f32>(_e587.g6_.x, _e590.g6_.y, _e593.g6_.z, _e596.g2_.y))) + ((vec4<f32>(_e602.g1_.x) * vec4<f32>(_e606.g2_.y, _e609.g7_.z, _e612.g7_.y, _e615.g2_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e629.g1_.y) * vec4<f32>(_e633.g1_.x, _e636.g1_.y, _e639.g1_.z, _e642.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e654.g0_.x) * vec4<f32>(_e658.g7_.z, _e661.g2_.y, _e664.g7_.x, _e667.g7_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))));
}

fn dilation_multi_vector_regressive_product(self_2162: Dilation, other_1954: MultiVector) -> MultiVector {
    var self_2163: Dilation;
    var other_1955: MultiVector;

    self_2163 = self_2162;
    other_1955 = other_1954;
    let _e4: Dilation = self_2163;
    let _e8: MultiVector = other_1955;
    let _e18: Dilation = self_2163;
    let _e22: MultiVector = other_1955;
    let _e33: Dilation = self_2163;
    let _e37: MultiVector = other_1955;
    let _e48: Dilation = self_2163;
    let _e52: MultiVector = other_1955;
    let _e56: Dilation = self_2163;
    let _e60: MultiVector = other_1955;
    let _e63: MultiVector = other_1955;
    let _e66: MultiVector = other_1955;
    let _e77: Dilation = self_2163;
    let _e81: MultiVector = other_1955;
    let _e91: Dilation = self_2163;
    let _e95: MultiVector = other_1955;
    let _e99: Dilation = self_2163;
    let _e103: MultiVector = other_1955;
    let _e114: Dilation = self_2163;
    let _e118: MultiVector = other_1955;
    let _e122: Dilation = self_2163;
    let _e126: MultiVector = other_1955;
    let _e137: Dilation = self_2163;
    let _e141: MultiVector = other_1955;
    let _e150: Dilation = self_2163;
    let _e154: MultiVector = other_1955;
    let _e164: Dilation = self_2163;
    let _e168: MultiVector = other_1955;
    let _e172: Dilation = self_2163;
    let _e176: MultiVector = other_1955;
    let _e179: MultiVector = other_1955;
    let _e189: Dilation = self_2163;
    let _e193: MultiVector = other_1955;
    let _e196: Dilation = self_2163;
    let _e200: MultiVector = other_1955;
    let _e203: MultiVector = other_1955;
    let _e206: MultiVector = other_1955;
    let _e217: Dilation = self_2163;
    let _e221: MultiVector = other_1955;
    let _e224: MultiVector = other_1955;
    let _e227: MultiVector = other_1955;
    let _e239: Dilation = self_2163;
    let _e243: MultiVector = other_1955;
    let _e247: Dilation = self_2163;
    let _e251: MultiVector = other_1955;
    let _e254: MultiVector = other_1955;
    let _e257: MultiVector = other_1955;
    let _e269: Dilation = self_2163;
    let _e273: MultiVector = other_1955;
    let _e276: MultiVector = other_1955;
    let _e279: MultiVector = other_1955;
    let _e284: Dilation = self_2163;
    let _e288: MultiVector = other_1955;
    let _e300: Dilation = self_2163;
    let _e304: MultiVector = other_1955;
    let _e308: Dilation = self_2163;
    let _e311: MultiVector = other_1955;
    let _e314: MultiVector = other_1955;
    let _e317: MultiVector = other_1955;
    let _e330: Dilation = self_2163;
    let _e334: MultiVector = other_1955;
    let _e337: Dilation = self_2163;
    let _e341: MultiVector = other_1955;
    let _e344: Dilation = self_2163;
    let _e348: MultiVector = other_1955;
    let _e360: Dilation = self_2163;
    let _e364: MultiVector = other_1955;
    let _e368: Dilation = self_2163;
    let _e371: Dilation = self_2163;
    let _e374: Dilation = self_2163;
    let _e377: Dilation = self_2163;
    let _e381: MultiVector = other_1955;
    let _e384: MultiVector = other_1955;
    let _e387: MultiVector = other_1955;
    let _e390: MultiVector = other_1955;
    let _e405: Dilation = self_2163;
    let _e409: MultiVector = other_1955;
    return MultiVector(((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g3_.z)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g0_.z) * vec3<f32>(_e22.g3_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g1_.x) * vec3<f32>(_e37.g3_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + (vec3<f32>(_e48.g1_.y) * _e52.g0_)) + ((vec3<f32>(_e56.g0_.x) * vec3<f32>(_e60.g3_.y, _e63.g3_.x, _e66.g3_.x)) * vec3<f32>(1.0, 0.0, 0.0))), ((((((vec3<f32>(_e77.g0_.y) * _e81.g7_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0)) - (vec3<f32>(_e91.g0_.z) * _e95.g6_)) + ((vec3<f32>(_e99.g1_.x) * _e103.g7_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + (vec3<f32>(_e114.g1_.y) * _e118.g1_)) + ((vec3<f32>(_e122.g0_.x) * _e126.g7_.zxx) * vec3<f32>(1.0, 0.0, -(1.0)))), (((((vec2<f32>(_e137.g0_.y) * vec2<f32>(_e141.g6_.z)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e150.g1_.x) * vec2<f32>(_e154.g6_.x)) * vec2<f32>(1.0, 0.0))) + (vec2<f32>(_e164.g1_.y) * _e168.g2_)) + ((vec2<f32>(_e172.g0_.x) * vec2<f32>(_e176.g6_.y, _e179.g6_.x)) * vec2<f32>(1.0, 0.0))), (vec4<f32>(_e189.g1_.y) * _e193.g3_), (((((vec3<f32>(_e196.g0_.y) * vec3<f32>(_e200.g9_.y, _e203.g9_.x, _e206.g9_.y)) * vec3<f32>(-(1.0), 1.0, 0.0)) + ((vec3<f32>(_e217.g1_.x) * vec3<f32>(_e221.g9_.z, _e224.g9_.z, _e227.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + (vec3<f32>(_e239.g1_.y) * _e243.g4_)) + ((vec3<f32>(_e247.g0_.x) * vec3<f32>(_e251.g9_.z, _e254.g9_.x, _e257.g9_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))), ((((vec3<f32>(_e269.g0_.z) * vec3<f32>(_e273.g9_.x, _e276.g9_.y, _e279.g9_.z)) + ((vec3<f32>(_e284.g1_.x) * vec3<f32>(_e288.g9_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e300.g1_.y) * _e304.g5_)) + ((_e308.g0_.xxy * vec3<f32>(_e311.g9_.x, _e314.g9_.w, _e317.g9_.w)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (vec3<f32>(_e330.g1_.y) * _e334.g6_), (vec3<f32>(_e337.g1_.y) * _e341.g7_), ((((vec4<f32>(_e344.g1_.x) * vec4<f32>(_e348.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + (vec4<f32>(_e360.g1_.y) * _e364.g8_)) + ((vec4<f32>(_e368.g0_.x, _e371.g0_.x, _e374.g0_.y, _e377.g0_.z) * vec4<f32>(_e381.g0_.x, _e384.g0_.z, _e387.g0_.z, _e390.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (vec4<f32>(_e405.g1_.y) * _e409.g9_));
}

fn dilation_multi_vector_geometric_anti_product(self_2164: Dilation, other_1956: MultiVector) -> MultiVector {
    var self_2165: Dilation;
    var other_1957: MultiVector;

    self_2165 = self_2164;
    other_1957 = other_1956;
    let _e4: Dilation = self_2165;
    let _e8: MultiVector = other_1957;
    let _e11: MultiVector = other_1957;
    let _e14: MultiVector = other_1957;
    let _e25: Dilation = self_2165;
    let _e29: MultiVector = other_1957;
    let _e40: Dilation = self_2165;
    let _e44: MultiVector = other_1957;
    let _e47: MultiVector = other_1957;
    let _e50: MultiVector = other_1957;
    let _e62: Dilation = self_2165;
    let _e66: MultiVector = other_1957;
    let _e70: Dilation = self_2165;
    let _e74: MultiVector = other_1957;
    let _e77: MultiVector = other_1957;
    let _e80: MultiVector = other_1957;
    let _e92: Dilation = self_2165;
    let _e96: MultiVector = other_1957;
    let _e99: MultiVector = other_1957;
    let _e102: MultiVector = other_1957;
    let _e113: Dilation = self_2165;
    let _e117: MultiVector = other_1957;
    let _e120: MultiVector = other_1957;
    let _e123: MultiVector = other_1957;
    let _e135: Dilation = self_2165;
    let _e139: MultiVector = other_1957;
    let _e143: Dilation = self_2165;
    let _e147: MultiVector = other_1957;
    let _e150: MultiVector = other_1957;
    let _e153: MultiVector = other_1957;
    let _e165: Dilation = self_2165;
    let _e169: MultiVector = other_1957;
    let _e173: Dilation = self_2165;
    let _e177: MultiVector = other_1957;
    let _e186: Dilation = self_2165;
    let _e190: MultiVector = other_1957;
    let _e200: Dilation = self_2165;
    let _e204: MultiVector = other_1957;
    let _e208: Dilation = self_2165;
    let _e212: MultiVector = other_1957;
    let _e215: MultiVector = other_1957;
    let _e225: Dilation = self_2165;
    let _e229: MultiVector = other_1957;
    let _e232: Dilation = self_2165;
    let _e236: MultiVector = other_1957;
    let _e239: MultiVector = other_1957;
    let _e242: MultiVector = other_1957;
    let _e253: Dilation = self_2165;
    let _e257: MultiVector = other_1957;
    let _e260: MultiVector = other_1957;
    let _e263: MultiVector = other_1957;
    let _e275: Dilation = self_2165;
    let _e279: MultiVector = other_1957;
    let _e282: MultiVector = other_1957;
    let _e285: MultiVector = other_1957;
    let _e297: Dilation = self_2165;
    let _e301: MultiVector = other_1957;
    let _e305: Dilation = self_2165;
    let _e309: MultiVector = other_1957;
    let _e312: MultiVector = other_1957;
    let _e315: MultiVector = other_1957;
    let _e327: Dilation = self_2165;
    let _e331: MultiVector = other_1957;
    let _e334: MultiVector = other_1957;
    let _e337: MultiVector = other_1957;
    let _e350: Dilation = self_2165;
    let _e354: MultiVector = other_1957;
    let _e357: MultiVector = other_1957;
    let _e360: MultiVector = other_1957;
    let _e366: Dilation = self_2165;
    let _e370: MultiVector = other_1957;
    let _e373: MultiVector = other_1957;
    let _e376: MultiVector = other_1957;
    let _e389: Dilation = self_2165;
    let _e393: MultiVector = other_1957;
    let _e397: Dilation = self_2165;
    let _e401: MultiVector = other_1957;
    let _e404: Dilation = self_2165;
    let _e408: MultiVector = other_1957;
    let _e411: Dilation = self_2165;
    let _e415: MultiVector = other_1957;
    let _e418: MultiVector = other_1957;
    let _e421: MultiVector = other_1957;
    let _e424: MultiVector = other_1957;
    let _e438: Dilation = self_2165;
    let _e442: MultiVector = other_1957;
    let _e445: MultiVector = other_1957;
    let _e448: MultiVector = other_1957;
    let _e451: MultiVector = other_1957;
    let _e466: Dilation = self_2165;
    let _e470: MultiVector = other_1957;
    let _e473: MultiVector = other_1957;
    let _e476: MultiVector = other_1957;
    let _e479: MultiVector = other_1957;
    let _e494: Dilation = self_2165;
    let _e498: MultiVector = other_1957;
    let _e502: Dilation = self_2165;
    let _e505: Dilation = self_2165;
    let _e508: Dilation = self_2165;
    let _e511: Dilation = self_2165;
    let _e515: MultiVector = other_1957;
    let _e518: MultiVector = other_1957;
    let _e521: MultiVector = other_1957;
    let _e524: MultiVector = other_1957;
    let _e537: Dilation = self_2165;
    let _e541: MultiVector = other_1957;
    return MultiVector(((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g3_.z, _e11.g9_.z, _e14.g3_.z)) * vec3<f32>(1.0, -(1.0), 0.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g3_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e40.g1_.x) * vec3<f32>(_e44.g3_.x, _e47.g9_.x, _e50.g3_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e62.g1_.y) * _e66.g0_)) + ((vec3<f32>(_e70.g0_.x) * vec3<f32>(_e74.g3_.y, _e77.g9_.y, _e80.g3_.x)) * vec3<f32>(1.0, -(1.0), 0.0))), ((((((vec3<f32>(_e92.g0_.x) * vec3<f32>(_e96.g7_.z, _e99.g2_.y, _e102.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e113.g0_.y) * vec3<f32>(_e117.g7_.y, _e120.g7_.x, _e123.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e135.g0_.z) * _e139.g6_)) + ((vec3<f32>(_e143.g1_.x) * vec3<f32>(_e147.g2_.y, _e150.g7_.z, _e153.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e165.g1_.y) * _e169.g1_)), (((((vec2<f32>(_e173.g0_.y) * vec2<f32>(_e177.g6_.z)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e186.g1_.x) * vec2<f32>(_e190.g6_.x)) * vec2<f32>(1.0, 0.0))) + (vec2<f32>(_e200.g1_.y) * _e204.g2_)) + ((vec2<f32>(_e208.g0_.x) * vec2<f32>(_e212.g6_.y, _e215.g6_.x)) * vec2<f32>(1.0, 0.0))), (vec4<f32>(_e225.g1_.y) * _e229.g3_), (((((vec3<f32>(_e232.g0_.x) * vec3<f32>(_e236.g9_.z, _e239.g3_.w, _e242.g9_.x)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e253.g0_.y) * vec3<f32>(_e257.g9_.y, _e260.g9_.x, _e263.g3_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e275.g1_.x) * vec3<f32>(_e279.g3_.w, _e282.g9_.z, _e285.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e297.g1_.y) * _e301.g4_)), ((((((vec3<f32>(_e305.g0_.x) * vec3<f32>(_e309.g3_.z, _e312.g9_.w, _e315.g3_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e327.g0_.y) * vec3<f32>(_e331.g3_.y, _e334.g3_.x, _e337.g9_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e350.g0_.z) * vec3<f32>(_e354.g9_.x, _e357.g9_.y, _e360.g9_.z))) + ((vec3<f32>(_e366.g1_.x) * vec3<f32>(_e370.g9_.w, _e373.g3_.z, _e376.g3_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e389.g1_.y) * _e393.g5_)), (vec3<f32>(_e397.g1_.y) * _e401.g6_), (vec3<f32>(_e404.g1_.y) * _e408.g7_), ((((((vec4<f32>(_e411.g0_.x) * vec4<f32>(_e415.g6_.z, _e418.g0_.z, _e421.g6_.x, _e424.g7_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e438.g0_.y) * vec4<f32>(_e442.g6_.y, _e445.g6_.x, _e448.g0_.z, _e451.g7_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e466.g1_.x) * vec4<f32>(_e470.g0_.z, _e473.g6_.z, _e476.g6_.y, _e479.g7_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e494.g1_.y) * _e498.g8_)) + ((vec4<f32>(_e502.g0_.x, _e505.g0_.x, _e508.g0_.x, _e511.g0_.z) * vec4<f32>(_e515.g0_.x, _e518.g0_.x, _e521.g0_.x, _e524.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e537.g1_.y) * _e541.g9_));
}

fn dilation_multi_vector_inner_anti_product(self_2166: Dilation, other_1958: MultiVector) -> MultiVector {
    var self_2167: Dilation;
    var other_1959: MultiVector;

    self_2167 = self_2166;
    other_1959 = other_1958;
    let _e4: Dilation = self_2167;
    let _e8: MultiVector = other_1959;
    let _e19: Dilation = self_2167;
    let _e23: MultiVector = other_1959;
    let _e35: Dilation = self_2167;
    let _e39: MultiVector = other_1959;
    let _e43: Dilation = self_2167;
    let _e47: MultiVector = other_1959;
    let _e50: MultiVector = other_1959;
    let _e53: MultiVector = other_1959;
    let _e65: Dilation = self_2167;
    let _e69: MultiVector = other_1959;
    let _e72: Dilation = self_2167;
    let _e76: MultiVector = other_1959;
    let _e79: Dilation = self_2167;
    let _e83: MultiVector = other_1959;
    let _e86: Dilation = self_2167;
    let _e90: MultiVector = other_1959;
    let _e93: Dilation = self_2167;
    let _e97: MultiVector = other_1959;
    let _e100: Dilation = self_2167;
    let _e104: MultiVector = other_1959;
    let _e107: Dilation = self_2167;
    let _e111: MultiVector = other_1959;
    let _e114: Dilation = self_2167;
    let _e118: MultiVector = other_1959;
    let _e130: Dilation = self_2167;
    let _e134: MultiVector = other_1959;
    let _e138: Dilation = self_2167;
    let _e141: Dilation = self_2167;
    let _e144: Dilation = self_2167;
    let _e147: Dilation = self_2167;
    let _e151: MultiVector = other_1959;
    let _e154: MultiVector = other_1959;
    let _e157: MultiVector = other_1959;
    let _e160: MultiVector = other_1959;
    let _e175: Dilation = self_2167;
    let _e179: MultiVector = other_1959;
    return MultiVector((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g9_.z)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g1_.x) * vec3<f32>(_e23.g9_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + (vec3<f32>(_e35.g1_.y) * _e39.g0_)) + ((vec3<f32>(_e43.g0_.x) * vec3<f32>(_e47.g9_.x, _e50.g9_.y, _e53.g9_.x)) * vec3<f32>(0.0, -(1.0), 0.0))), (vec3<f32>(_e65.g1_.y) * _e69.g1_), (vec2<f32>(_e72.g1_.y) * _e76.g2_), (vec4<f32>(_e79.g1_.y) * _e83.g3_), (vec3<f32>(_e86.g1_.y) * _e90.g4_), (vec3<f32>(_e93.g1_.y) * _e97.g5_), (vec3<f32>(_e100.g1_.y) * _e104.g6_), (vec3<f32>(_e107.g1_.y) * _e111.g7_), ((((vec4<f32>(_e114.g1_.x) * vec4<f32>(_e118.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + (vec4<f32>(_e130.g1_.y) * _e134.g8_)) + ((vec4<f32>(_e138.g0_.x, _e141.g0_.x, _e144.g0_.y, _e147.g0_.z) * vec4<f32>(_e151.g0_.x, _e154.g0_.z, _e157.g0_.z, _e160.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (vec4<f32>(_e175.g1_.y) * _e179.g9_));
}

fn dilation_multi_vector_left_anti_contraction(self_2168: Dilation, other_1960: MultiVector) -> MultiVector {
    var self_2169: Dilation;
    var other_1961: MultiVector;

    self_2169 = self_2168;
    other_1961 = other_1960;
    let _e4: Dilation = self_2169;
    let _e8: MultiVector = other_1961;
    let _e11: Dilation = self_2169;
    let _e15: MultiVector = other_1961;
    let _e18: Dilation = self_2169;
    let _e22: MultiVector = other_1961;
    let _e25: Dilation = self_2169;
    let _e29: MultiVector = other_1961;
    let _e32: Dilation = self_2169;
    let _e36: MultiVector = other_1961;
    let _e39: Dilation = self_2169;
    let _e43: MultiVector = other_1961;
    let _e46: Dilation = self_2169;
    let _e50: MultiVector = other_1961;
    let _e53: Dilation = self_2169;
    let _e57: MultiVector = other_1961;
    let _e60: Dilation = self_2169;
    let _e64: MultiVector = other_1961;
    let _e67: Dilation = self_2169;
    let _e71: MultiVector = other_1961;
    return MultiVector((vec3<f32>(_e4.g1_.y) * _e8.g0_), (vec3<f32>(_e11.g1_.y) * _e15.g1_), (vec2<f32>(_e18.g1_.y) * _e22.g2_), (vec4<f32>(_e25.g1_.y) * _e29.g3_), (vec3<f32>(_e32.g1_.y) * _e36.g4_), (vec3<f32>(_e39.g1_.y) * _e43.g5_), (vec3<f32>(_e46.g1_.y) * _e50.g6_), (vec3<f32>(_e53.g1_.y) * _e57.g7_), (vec4<f32>(_e60.g1_.y) * _e64.g8_), (vec4<f32>(_e67.g1_.y) * _e71.g9_));
}

fn dilation_multi_vector_scalar_product(self_2170: Dilation, other_1962: MultiVector) -> Scalar {
    var self_2171: Dilation;
    var other_1963: MultiVector;

    self_2171 = self_2170;
    other_1963 = other_1962;
    let _e4: Dilation = self_2171;
    let _e7: MultiVector = other_1963;
    return Scalar((_e4.g0_.z * _e7.g8_.w));
}

fn dilation_multi_vector_anti_scalar_product(self_2172: Dilation, other_1964: MultiVector) -> AntiScalar {
    var self_2173: Dilation;
    var other_1965: MultiVector;

    self_2173 = self_2172;
    other_1965 = other_1964;
    let _e4: Dilation = self_2173;
    let _e7: MultiVector = other_1965;
    return AntiScalar((_e4.g1_.y * _e7.g0_.z));
}

fn dilation_squared_magnitude(self_2174: Dilation) -> Scalar {
    var self_2175: Dilation;

    self_2175 = self_2174;
    let _e2: Dilation = self_2175;
    let _e3: Dilation = self_2175;
    let _e4: Dilation = dilation_reversal(_e3);
    let _e5: Scalar = dilation_dilation_scalar_product(_e2, _e4);
    return _e5;
}

fn dilation_magnitude(self_2176: Dilation) -> Scalar {
    var self_2177: Dilation;

    self_2177 = self_2176;
    let _e2: Dilation = self_2177;
    let _e3: Scalar = dilation_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn dilation_scale(self_2178: Dilation, other_1966: f32) -> Dilation {
    var self_2179: Dilation;
    var other_1967: f32;

    self_2179 = self_2178;
    other_1967 = other_1966;
    let _e4: Dilation = self_2179;
    let _e5: f32 = other_1967;
    let _e7: Dilation = dilation_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn dilation_signum(self_2180: Dilation) -> Dilation {
    var self_2181: Dilation;

    self_2181 = self_2180;
    let _e2: Dilation = self_2181;
    let _e3: Dilation = self_2181;
    let _e4: Scalar = dilation_magnitude(_e3);
    let _e9: Dilation = dilation_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn dilation_inverse(self_2182: Dilation) -> Dilation {
    var self_2183: Dilation;

    self_2183 = self_2182;
    let _e2: Dilation = self_2183;
    let _e3: Dilation = dilation_reversal(_e2);
    let _e4: Dilation = self_2183;
    let _e5: Scalar = dilation_squared_magnitude(_e4);
    let _e10: Dilation = dilation_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn multi_vector_zero() -> MultiVector {
    return MultiVector(vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_one() -> MultiVector {
    return MultiVector(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_neg(self_2184: MultiVector) -> MultiVector {
    var self_2185: MultiVector;

    self_2185 = self_2184;
    let _e2: MultiVector = self_2185;
    let _e8: MultiVector = self_2185;
    let _e14: MultiVector = self_2185;
    let _e20: MultiVector = self_2185;
    let _e26: MultiVector = self_2185;
    let _e32: MultiVector = self_2185;
    let _e38: MultiVector = self_2185;
    let _e44: MultiVector = self_2185;
    let _e50: MultiVector = self_2185;
    let _e56: MultiVector = self_2185;
    return MultiVector((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))), (_e14.g2_ * vec2<f32>(-(1.0))), (_e20.g3_ * vec4<f32>(-(1.0))), (_e26.g4_ * vec3<f32>(-(1.0))), (_e32.g5_ * vec3<f32>(-(1.0))), (_e38.g6_ * vec3<f32>(-(1.0))), (_e44.g7_ * vec3<f32>(-(1.0))), (_e50.g8_ * vec4<f32>(-(1.0))), (_e56.g9_ * vec4<f32>(-(1.0))));
}

fn multi_vector_automorphism(self_2186: MultiVector) -> MultiVector {
    var self_2187: MultiVector;

    self_2187 = self_2186;
    let _e2: MultiVector = self_2187;
    let _e10: MultiVector = self_2187;
    let _e16: MultiVector = self_2187;
    let _e22: MultiVector = self_2187;
    let _e24: MultiVector = self_2187;
    let _e26: MultiVector = self_2187;
    let _e28: MultiVector = self_2187;
    let _e34: MultiVector = self_2187;
    let _e40: MultiVector = self_2187;
    let _e46: MultiVector = self_2187;
    return MultiVector((_e2.g0_ * vec3<f32>(1.0, 1.0, -(1.0))), (_e10.g1_ * vec3<f32>(-(1.0))), (_e16.g2_ * vec2<f32>(-(1.0))), _e22.g3_, _e24.g4_, _e26.g5_, (_e28.g6_ * vec3<f32>(-(1.0))), (_e34.g7_ * vec3<f32>(-(1.0))), (_e40.g8_ * vec4<f32>(-(1.0))), _e46.g9_);
}

fn multi_vector_reversal(self_2188: MultiVector) -> MultiVector {
    var self_2189: MultiVector;

    self_2189 = self_2188;
    let _e2: MultiVector = self_2189;
    let _e4: MultiVector = self_2189;
    let _e6: MultiVector = self_2189;
    let _e8: MultiVector = self_2189;
    let _e14: MultiVector = self_2189;
    let _e20: MultiVector = self_2189;
    let _e26: MultiVector = self_2189;
    let _e32: MultiVector = self_2189;
    let _e38: MultiVector = self_2189;
    let _e44: MultiVector = self_2189;
    return MultiVector(_e2.g0_, _e4.g1_, _e6.g2_, (_e8.g3_ * vec4<f32>(-(1.0))), (_e14.g4_ * vec3<f32>(-(1.0))), (_e20.g5_ * vec3<f32>(-(1.0))), (_e26.g6_ * vec3<f32>(-(1.0))), (_e32.g7_ * vec3<f32>(-(1.0))), (_e38.g8_ * vec4<f32>(-(1.0))), _e44.g9_);
}

fn multi_vector_conjugation(self_2190: MultiVector) -> MultiVector {
    var self_2191: MultiVector;

    self_2191 = self_2190;
    let _e2: MultiVector = self_2191;
    let _e10: MultiVector = self_2191;
    let _e16: MultiVector = self_2191;
    let _e22: MultiVector = self_2191;
    let _e28: MultiVector = self_2191;
    let _e34: MultiVector = self_2191;
    let _e40: MultiVector = self_2191;
    let _e42: MultiVector = self_2191;
    let _e44: MultiVector = self_2191;
    let _e46: MultiVector = self_2191;
    return MultiVector((_e2.g0_ * vec3<f32>(1.0, 1.0, -(1.0))), (_e10.g1_ * vec3<f32>(-(1.0))), (_e16.g2_ * vec2<f32>(-(1.0))), (_e22.g3_ * vec4<f32>(-(1.0))), (_e28.g4_ * vec3<f32>(-(1.0))), (_e34.g5_ * vec3<f32>(-(1.0))), _e40.g6_, _e42.g7_, _e44.g8_, _e46.g9_);
}

fn multi_vector_dual(self_2192: MultiVector) -> MultiVector {
    var self_2193: MultiVector;

    self_2193 = self_2192;
    let _e2: MultiVector = self_2193;
    let _e5: MultiVector = self_2193;
    let _e8: MultiVector = self_2193;
    let _e12: MultiVector = self_2193;
    let _e15: MultiVector = self_2193;
    let _e18: MultiVector = self_2193;
    let _e22: MultiVector = self_2193;
    let _e25: MultiVector = self_2193;
    let _e29: MultiVector = self_2193;
    let _e35: MultiVector = self_2193;
    let _e41: MultiVector = self_2193;
    let _e47: MultiVector = self_2193;
    let _e53: MultiVector = self_2193;
    let _e59: MultiVector = self_2193;
    let _e65: MultiVector = self_2193;
    let _e68: MultiVector = self_2193;
    let _e71: MultiVector = self_2193;
    let _e74: MultiVector = self_2193;
    return MultiVector(vec3<f32>(_e2.g0_.z, _e5.g2_.y, _e8.g0_.x), vec3<f32>(_e12.g9_.x, _e15.g9_.y, _e18.g9_.z), vec2<f32>(_e22.g9_.w, _e25.g0_.y), (_e29.g8_ * vec4<f32>(-(1.0))), (_e35.g7_ * vec3<f32>(-(1.0))), (_e41.g6_ * vec3<f32>(-(1.0))), (_e47.g5_ * vec3<f32>(-(1.0))), (_e53.g4_ * vec3<f32>(-(1.0))), (_e59.g3_ * vec4<f32>(-(1.0))), vec4<f32>(_e65.g1_.x, _e68.g1_.y, _e71.g1_.z, _e74.g2_.x));
}

fn multi_vector_anti_reversal(self_2194: MultiVector) -> MultiVector {
    var self_2195: MultiVector;

    self_2195 = self_2194;
    let _e2: MultiVector = self_2195;
    let _e10: MultiVector = self_2195;
    let _e16: MultiVector = self_2195;
    let _e22: MultiVector = self_2195;
    let _e28: MultiVector = self_2195;
    let _e34: MultiVector = self_2195;
    let _e40: MultiVector = self_2195;
    let _e42: MultiVector = self_2195;
    let _e44: MultiVector = self_2195;
    let _e46: MultiVector = self_2195;
    return MultiVector((_e2.g0_ * vec3<f32>(1.0, 1.0, -(1.0))), (_e10.g1_ * vec3<f32>(-(1.0))), (_e16.g2_ * vec2<f32>(-(1.0))), (_e22.g3_ * vec4<f32>(-(1.0))), (_e28.g4_ * vec3<f32>(-(1.0))), (_e34.g5_ * vec3<f32>(-(1.0))), _e40.g6_, _e42.g7_, _e44.g8_, _e46.g9_);
}

fn multi_vector_scalar_into(self_2196: MultiVector) -> Scalar {
    var self_2197: MultiVector;

    self_2197 = self_2196;
    let _e2: MultiVector = self_2197;
    return Scalar(_e2.g0_.x);
}

fn multi_vector_scalar_add(self_2198: MultiVector, other_1968: Scalar) -> MultiVector {
    var self_2199: MultiVector;
    var other_1969: Scalar;

    self_2199 = self_2198;
    other_1969 = other_1968;
    let _e4: MultiVector = self_2199;
    let _e6: Scalar = other_1969;
    let _e15: MultiVector = self_2199;
    let _e17: MultiVector = self_2199;
    let _e19: MultiVector = self_2199;
    let _e21: MultiVector = self_2199;
    let _e23: MultiVector = self_2199;
    let _e25: MultiVector = self_2199;
    let _e27: MultiVector = self_2199;
    let _e29: MultiVector = self_2199;
    let _e31: MultiVector = self_2199;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_) * vec3<f32>(1.0, 0.0, 0.0))), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_scalar_sub(self_2200: MultiVector, other_1970: Scalar) -> MultiVector {
    var self_2201: MultiVector;
    var other_1971: Scalar;

    self_2201 = self_2200;
    other_1971 = other_1970;
    let _e4: MultiVector = self_2201;
    let _e6: Scalar = other_1971;
    let _e15: MultiVector = self_2201;
    let _e17: MultiVector = self_2201;
    let _e19: MultiVector = self_2201;
    let _e21: MultiVector = self_2201;
    let _e23: MultiVector = self_2201;
    let _e25: MultiVector = self_2201;
    let _e27: MultiVector = self_2201;
    let _e29: MultiVector = self_2201;
    let _e31: MultiVector = self_2201;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_) * vec3<f32>(1.0, 0.0, 0.0))), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_scalar_geometric_product(self_2202: MultiVector, other_1972: Scalar) -> MultiVector {
    var self_2203: MultiVector;
    var other_1973: Scalar;

    self_2203 = self_2202;
    other_1973 = other_1972;
    let _e4: MultiVector = self_2203;
    let _e6: Scalar = other_1973;
    let _e10: MultiVector = self_2203;
    let _e12: Scalar = other_1973;
    let _e16: MultiVector = self_2203;
    let _e18: Scalar = other_1973;
    let _e22: MultiVector = self_2203;
    let _e24: Scalar = other_1973;
    let _e28: MultiVector = self_2203;
    let _e30: Scalar = other_1973;
    let _e34: MultiVector = self_2203;
    let _e36: Scalar = other_1973;
    let _e40: MultiVector = self_2203;
    let _e42: Scalar = other_1973;
    let _e46: MultiVector = self_2203;
    let _e48: Scalar = other_1973;
    let _e52: MultiVector = self_2203;
    let _e54: Scalar = other_1973;
    let _e58: MultiVector = self_2203;
    let _e60: Scalar = other_1973;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_scalar_regressive_product(self_2204: MultiVector, other_1974: Scalar) -> Scalar {
    var self_2205: MultiVector;
    var other_1975: Scalar;

    self_2205 = self_2204;
    other_1975 = other_1974;
    let _e4: MultiVector = self_2205;
    let _e7: Scalar = other_1975;
    return Scalar((_e4.g0_.z * _e7.g0_));
}

fn multi_vector_scalar_outer_product(self_2206: MultiVector, other_1976: Scalar) -> MultiVector {
    var self_2207: MultiVector;
    var other_1977: Scalar;

    self_2207 = self_2206;
    other_1977 = other_1976;
    let _e4: MultiVector = self_2207;
    let _e6: Scalar = other_1977;
    let _e10: MultiVector = self_2207;
    let _e12: Scalar = other_1977;
    let _e16: MultiVector = self_2207;
    let _e18: Scalar = other_1977;
    let _e22: MultiVector = self_2207;
    let _e24: Scalar = other_1977;
    let _e28: MultiVector = self_2207;
    let _e30: Scalar = other_1977;
    let _e34: MultiVector = self_2207;
    let _e36: Scalar = other_1977;
    let _e40: MultiVector = self_2207;
    let _e42: Scalar = other_1977;
    let _e46: MultiVector = self_2207;
    let _e48: Scalar = other_1977;
    let _e52: MultiVector = self_2207;
    let _e54: Scalar = other_1977;
    let _e58: MultiVector = self_2207;
    let _e60: Scalar = other_1977;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_scalar_inner_product(self_2208: MultiVector, other_1978: Scalar) -> MultiVector {
    var self_2209: MultiVector;
    var other_1979: Scalar;

    self_2209 = self_2208;
    other_1979 = other_1978;
    let _e4: MultiVector = self_2209;
    let _e6: Scalar = other_1979;
    let _e10: MultiVector = self_2209;
    let _e12: Scalar = other_1979;
    let _e16: MultiVector = self_2209;
    let _e18: Scalar = other_1979;
    let _e22: MultiVector = self_2209;
    let _e24: Scalar = other_1979;
    let _e28: MultiVector = self_2209;
    let _e30: Scalar = other_1979;
    let _e34: MultiVector = self_2209;
    let _e36: Scalar = other_1979;
    let _e40: MultiVector = self_2209;
    let _e42: Scalar = other_1979;
    let _e46: MultiVector = self_2209;
    let _e48: Scalar = other_1979;
    let _e52: MultiVector = self_2209;
    let _e54: Scalar = other_1979;
    let _e58: MultiVector = self_2209;
    let _e60: Scalar = other_1979;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_scalar_left_contraction(self_2210: MultiVector, other_1980: Scalar) -> Scalar {
    var self_2211: MultiVector;
    var other_1981: Scalar;

    self_2211 = self_2210;
    other_1981 = other_1980;
    let _e4: MultiVector = self_2211;
    let _e7: Scalar = other_1981;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_right_contraction(self_2212: MultiVector, other_1982: Scalar) -> MultiVector {
    var self_2213: MultiVector;
    var other_1983: Scalar;

    self_2213 = self_2212;
    other_1983 = other_1982;
    let _e4: MultiVector = self_2213;
    let _e6: Scalar = other_1983;
    let _e10: MultiVector = self_2213;
    let _e12: Scalar = other_1983;
    let _e16: MultiVector = self_2213;
    let _e18: Scalar = other_1983;
    let _e22: MultiVector = self_2213;
    let _e24: Scalar = other_1983;
    let _e28: MultiVector = self_2213;
    let _e30: Scalar = other_1983;
    let _e34: MultiVector = self_2213;
    let _e36: Scalar = other_1983;
    let _e40: MultiVector = self_2213;
    let _e42: Scalar = other_1983;
    let _e46: MultiVector = self_2213;
    let _e48: Scalar = other_1983;
    let _e52: MultiVector = self_2213;
    let _e54: Scalar = other_1983;
    let _e58: MultiVector = self_2213;
    let _e60: Scalar = other_1983;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_scalar_scalar_product(self_2214: MultiVector, other_1984: Scalar) -> Scalar {
    var self_2215: MultiVector;
    var other_1985: Scalar;

    self_2215 = self_2214;
    other_1985 = other_1984;
    let _e4: MultiVector = self_2215;
    let _e7: Scalar = other_1985;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_into(self_2216: MultiVector) -> AntiScalar {
    var self_2217: MultiVector;

    self_2217 = self_2216;
    let _e2: MultiVector = self_2217;
    return AntiScalar(_e2.g0_.z);
}

fn multi_vector_anti_scalar_add(self_2218: MultiVector, other_1986: AntiScalar) -> MultiVector {
    var self_2219: MultiVector;
    var other_1987: AntiScalar;

    self_2219 = self_2218;
    other_1987 = other_1986;
    let _e4: MultiVector = self_2219;
    let _e6: AntiScalar = other_1987;
    let _e15: MultiVector = self_2219;
    let _e17: MultiVector = self_2219;
    let _e19: MultiVector = self_2219;
    let _e21: MultiVector = self_2219;
    let _e23: MultiVector = self_2219;
    let _e25: MultiVector = self_2219;
    let _e27: MultiVector = self_2219;
    let _e29: MultiVector = self_2219;
    let _e31: MultiVector = self_2219;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_) * vec3<f32>(0.0, 0.0, 1.0))), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_anti_scalar_sub(self_2220: MultiVector, other_1988: AntiScalar) -> MultiVector {
    var self_2221: MultiVector;
    var other_1989: AntiScalar;

    self_2221 = self_2220;
    other_1989 = other_1988;
    let _e4: MultiVector = self_2221;
    let _e6: AntiScalar = other_1989;
    let _e15: MultiVector = self_2221;
    let _e17: MultiVector = self_2221;
    let _e19: MultiVector = self_2221;
    let _e21: MultiVector = self_2221;
    let _e23: MultiVector = self_2221;
    let _e25: MultiVector = self_2221;
    let _e27: MultiVector = self_2221;
    let _e29: MultiVector = self_2221;
    let _e31: MultiVector = self_2221;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_) * vec3<f32>(0.0, 0.0, 1.0))), _e15.g1_, _e17.g2_, _e19.g3_, _e21.g4_, _e23.g5_, _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_anti_scalar_regressive_product(self_2222: MultiVector, other_1990: AntiScalar) -> MultiVector {
    var self_2223: MultiVector;
    var other_1991: AntiScalar;

    self_2223 = self_2222;
    other_1991 = other_1990;
    let _e4: MultiVector = self_2223;
    let _e6: AntiScalar = other_1991;
    let _e10: MultiVector = self_2223;
    let _e12: AntiScalar = other_1991;
    let _e16: MultiVector = self_2223;
    let _e18: AntiScalar = other_1991;
    let _e22: MultiVector = self_2223;
    let _e24: AntiScalar = other_1991;
    let _e28: MultiVector = self_2223;
    let _e30: AntiScalar = other_1991;
    let _e34: MultiVector = self_2223;
    let _e36: AntiScalar = other_1991;
    let _e40: MultiVector = self_2223;
    let _e42: AntiScalar = other_1991;
    let _e46: MultiVector = self_2223;
    let _e48: AntiScalar = other_1991;
    let _e52: MultiVector = self_2223;
    let _e54: AntiScalar = other_1991;
    let _e58: MultiVector = self_2223;
    let _e60: AntiScalar = other_1991;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_anti_scalar_outer_product(self_2224: MultiVector, other_1992: AntiScalar) -> AntiScalar {
    var self_2225: MultiVector;
    var other_1993: AntiScalar;

    self_2225 = self_2224;
    other_1993 = other_1992;
    let _e4: MultiVector = self_2225;
    let _e7: AntiScalar = other_1993;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_geometric_anti_product(self_2226: MultiVector, other_1994: AntiScalar) -> MultiVector {
    var self_2227: MultiVector;
    var other_1995: AntiScalar;

    self_2227 = self_2226;
    other_1995 = other_1994;
    let _e4: MultiVector = self_2227;
    let _e6: AntiScalar = other_1995;
    let _e10: MultiVector = self_2227;
    let _e12: AntiScalar = other_1995;
    let _e16: MultiVector = self_2227;
    let _e18: AntiScalar = other_1995;
    let _e22: MultiVector = self_2227;
    let _e24: AntiScalar = other_1995;
    let _e28: MultiVector = self_2227;
    let _e30: AntiScalar = other_1995;
    let _e34: MultiVector = self_2227;
    let _e36: AntiScalar = other_1995;
    let _e40: MultiVector = self_2227;
    let _e42: AntiScalar = other_1995;
    let _e46: MultiVector = self_2227;
    let _e48: AntiScalar = other_1995;
    let _e52: MultiVector = self_2227;
    let _e54: AntiScalar = other_1995;
    let _e58: MultiVector = self_2227;
    let _e60: AntiScalar = other_1995;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_anti_scalar_inner_anti_product(self_2228: MultiVector, other_1996: AntiScalar) -> MultiVector {
    var self_2229: MultiVector;
    var other_1997: AntiScalar;

    self_2229 = self_2228;
    other_1997 = other_1996;
    let _e4: MultiVector = self_2229;
    let _e6: AntiScalar = other_1997;
    let _e10: MultiVector = self_2229;
    let _e12: AntiScalar = other_1997;
    let _e16: MultiVector = self_2229;
    let _e18: AntiScalar = other_1997;
    let _e22: MultiVector = self_2229;
    let _e24: AntiScalar = other_1997;
    let _e28: MultiVector = self_2229;
    let _e30: AntiScalar = other_1997;
    let _e34: MultiVector = self_2229;
    let _e36: AntiScalar = other_1997;
    let _e40: MultiVector = self_2229;
    let _e42: AntiScalar = other_1997;
    let _e46: MultiVector = self_2229;
    let _e48: AntiScalar = other_1997;
    let _e52: MultiVector = self_2229;
    let _e54: AntiScalar = other_1997;
    let _e58: MultiVector = self_2229;
    let _e60: AntiScalar = other_1997;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_anti_scalar_left_anti_contraction(self_2230: MultiVector, other_1998: AntiScalar) -> AntiScalar {
    var self_2231: MultiVector;
    var other_1999: AntiScalar;

    self_2231 = self_2230;
    other_1999 = other_1998;
    let _e4: MultiVector = self_2231;
    let _e7: AntiScalar = other_1999;
    return AntiScalar((_e4.g0_.z * _e7.g0_));
}

fn multi_vector_anti_scalar_right_anti_contraction(self_2232: MultiVector, other_2000: AntiScalar) -> MultiVector {
    var self_2233: MultiVector;
    var other_2001: AntiScalar;

    self_2233 = self_2232;
    other_2001 = other_2000;
    let _e4: MultiVector = self_2233;
    let _e6: AntiScalar = other_2001;
    let _e10: MultiVector = self_2233;
    let _e12: AntiScalar = other_2001;
    let _e16: MultiVector = self_2233;
    let _e18: AntiScalar = other_2001;
    let _e22: MultiVector = self_2233;
    let _e24: AntiScalar = other_2001;
    let _e28: MultiVector = self_2233;
    let _e30: AntiScalar = other_2001;
    let _e34: MultiVector = self_2233;
    let _e36: AntiScalar = other_2001;
    let _e40: MultiVector = self_2233;
    let _e42: AntiScalar = other_2001;
    let _e46: MultiVector = self_2233;
    let _e48: AntiScalar = other_2001;
    let _e52: MultiVector = self_2233;
    let _e54: AntiScalar = other_2001;
    let _e58: MultiVector = self_2233;
    let _e60: AntiScalar = other_2001;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)), (_e16.g2_ * vec2<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)), (_e28.g4_ * vec3<f32>(_e30.g0_)), (_e34.g5_ * vec3<f32>(_e36.g0_)), (_e40.g6_ * vec3<f32>(_e42.g0_)), (_e46.g7_ * vec3<f32>(_e48.g0_)), (_e52.g8_ * vec4<f32>(_e54.g0_)), (_e58.g9_ * vec4<f32>(_e60.g0_)));
}

fn multi_vector_anti_scalar_anti_scalar_product(self_2234: MultiVector, other_2002: AntiScalar) -> AntiScalar {
    var self_2235: MultiVector;
    var other_2003: AntiScalar;

    self_2235 = self_2234;
    other_2003 = other_2002;
    let _e4: MultiVector = self_2235;
    let _e7: AntiScalar = other_2003;
    return AntiScalar((_e4.g0_.z * _e7.g0_));
}

fn multi_vector_radial_point_into(self_2236: MultiVector) -> RadialPoint {
    var self_2237: MultiVector;

    self_2237 = self_2236;
    let _e2: MultiVector = self_2237;
    let _e4: MultiVector = self_2237;
    return RadialPoint(_e2.g1_, _e4.g2_);
}

fn multi_vector_radial_point_add(self_2238: MultiVector, other_2004: RadialPoint) -> MultiVector {
    var self_2239: MultiVector;
    var other_2005: RadialPoint;

    self_2239 = self_2238;
    other_2005 = other_2004;
    let _e4: MultiVector = self_2239;
    let _e6: MultiVector = self_2239;
    let _e8: RadialPoint = other_2005;
    let _e11: MultiVector = self_2239;
    let _e13: RadialPoint = other_2005;
    let _e16: MultiVector = self_2239;
    let _e18: MultiVector = self_2239;
    let _e20: MultiVector = self_2239;
    let _e22: MultiVector = self_2239;
    let _e24: MultiVector = self_2239;
    let _e26: MultiVector = self_2239;
    let _e28: MultiVector = self_2239;
    return MultiVector(_e4.g0_, (_e6.g1_ + _e8.g0_), (_e11.g2_ + _e13.g1_), _e16.g3_, _e18.g4_, _e20.g5_, _e22.g6_, _e24.g7_, _e26.g8_, _e28.g9_);
}

fn multi_vector_radial_point_sub(self_2240: MultiVector, other_2006: RadialPoint) -> MultiVector {
    var self_2241: MultiVector;
    var other_2007: RadialPoint;

    self_2241 = self_2240;
    other_2007 = other_2006;
    let _e4: MultiVector = self_2241;
    let _e6: MultiVector = self_2241;
    let _e8: RadialPoint = other_2007;
    let _e11: MultiVector = self_2241;
    let _e13: RadialPoint = other_2007;
    let _e16: MultiVector = self_2241;
    let _e18: MultiVector = self_2241;
    let _e20: MultiVector = self_2241;
    let _e22: MultiVector = self_2241;
    let _e24: MultiVector = self_2241;
    let _e26: MultiVector = self_2241;
    let _e28: MultiVector = self_2241;
    return MultiVector(_e4.g0_, (_e6.g1_ - _e8.g0_), (_e11.g2_ - _e13.g1_), _e16.g3_, _e18.g4_, _e20.g5_, _e22.g6_, _e24.g7_, _e26.g8_, _e28.g9_);
}

fn multi_vector_radial_point_geometric_product(self_2242: MultiVector, other_2008: RadialPoint) -> MultiVector {
    var self_2243: MultiVector;
    var other_2009: RadialPoint;

    self_2243 = self_2242;
    other_2009 = other_2008;
    let _e4: MultiVector = self_2243;
    let _e8: RadialPoint = other_2009;
    let _e18: MultiVector = self_2243;
    let _e22: RadialPoint = other_2009;
    let _e33: MultiVector = self_2243;
    let _e37: RadialPoint = other_2009;
    let _e48: MultiVector = self_2243;
    let _e52: RadialPoint = other_2009;
    let _e64: MultiVector = self_2243;
    let _e68: RadialPoint = other_2009;
    let _e80: MultiVector = self_2243;
    let _e84: RadialPoint = other_2009;
    let _e96: MultiVector = self_2243;
    let _e100: RadialPoint = other_2009;
    let _e112: MultiVector = self_2243;
    let _e116: RadialPoint = other_2009;
    let _e127: MultiVector = self_2243;
    let _e131: RadialPoint = other_2009;
    let _e142: MultiVector = self_2243;
    let _e146: RadialPoint = other_2009;
    let _e157: MultiVector = self_2243;
    let _e161: RadialPoint = other_2009;
    let _e172: MultiVector = self_2243;
    let _e175: RadialPoint = other_2009;
    let _e178: RadialPoint = other_2009;
    let _e181: RadialPoint = other_2009;
    let _e192: MultiVector = self_2243;
    let _e196: RadialPoint = other_2009;
    let _e199: MultiVector = self_2243;
    let _e203: RadialPoint = other_2009;
    let _e214: MultiVector = self_2243;
    let _e218: RadialPoint = other_2009;
    let _e229: MultiVector = self_2243;
    let _e233: RadialPoint = other_2009;
    let _e244: MultiVector = self_2243;
    let _e248: RadialPoint = other_2009;
    let _e251: MultiVector = self_2243;
    let _e255: RadialPoint = other_2009;
    let _e266: MultiVector = self_2243;
    let _e270: RadialPoint = other_2009;
    let _e281: MultiVector = self_2243;
    let _e285: RadialPoint = other_2009;
    let _e295: MultiVector = self_2243;
    let _e299: RadialPoint = other_2009;
    let _e309: MultiVector = self_2243;
    let _e313: RadialPoint = other_2009;
    let _e323: MultiVector = self_2243;
    let _e327: RadialPoint = other_2009;
    let _e338: MultiVector = self_2243;
    let _e342: RadialPoint = other_2009;
    let _e353: MultiVector = self_2243;
    let _e357: RadialPoint = other_2009;
    let _e360: RadialPoint = other_2009;
    let _e363: RadialPoint = other_2009;
    let _e366: RadialPoint = other_2009;
    let _e372: MultiVector = self_2243;
    let _e376: RadialPoint = other_2009;
    let _e389: MultiVector = self_2243;
    let _e393: RadialPoint = other_2009;
    let _e406: MultiVector = self_2243;
    let _e410: RadialPoint = other_2009;
    let _e423: MultiVector = self_2243;
    let _e427: RadialPoint = other_2009;
    let _e430: RadialPoint = other_2009;
    let _e433: RadialPoint = other_2009;
    let _e436: RadialPoint = other_2009;
    let _e449: MultiVector = self_2243;
    let _e453: RadialPoint = other_2009;
    let _e456: RadialPoint = other_2009;
    let _e459: RadialPoint = other_2009;
    let _e462: RadialPoint = other_2009;
    let _e475: MultiVector = self_2243;
    let _e479: RadialPoint = other_2009;
    let _e482: RadialPoint = other_2009;
    let _e485: RadialPoint = other_2009;
    let _e488: RadialPoint = other_2009;
    let _e501: MultiVector = self_2243;
    let _e504: MultiVector = self_2243;
    let _e507: MultiVector = self_2243;
    let _e510: MultiVector = self_2243;
    let _e514: RadialPoint = other_2009;
    let _e517: RadialPoint = other_2009;
    let _e520: RadialPoint = other_2009;
    let _e523: RadialPoint = other_2009;
    let _e535: MultiVector = self_2243;
    let _e539: RadialPoint = other_2009;
    let _e542: MultiVector = self_2243;
    let _e546: RadialPoint = other_2009;
    let _e557: MultiVector = self_2243;
    let _e561: RadialPoint = other_2009;
    let _e572: MultiVector = self_2243;
    let _e576: RadialPoint = other_2009;
    let _e587: MultiVector = self_2243;
    let _e589: RadialPoint = other_2009;
    let _e599: MultiVector = self_2243;
    let _e603: RadialPoint = other_2009;
    let _e613: MultiVector = self_2243;
    let _e617: RadialPoint = other_2009;
    let _e628: MultiVector = self_2243;
    let _e632: RadialPoint = other_2009;
    let _e636: MultiVector = self_2243;
    let _e640: RadialPoint = other_2009;
    let _e653: MultiVector = self_2243;
    let _e657: RadialPoint = other_2009;
    let _e661: MultiVector = self_2243;
    let _e665: RadialPoint = other_2009;
    let _e676: MultiVector = self_2243;
    let _e680: RadialPoint = other_2009;
    let _e691: MultiVector = self_2243;
    let _e695: RadialPoint = other_2009;
    let _e706: MultiVector = self_2243;
    let _e710: RadialPoint = other_2009;
    let _e721: MultiVector = self_2243;
    let _e725: RadialPoint = other_2009;
    let _e736: MultiVector = self_2243;
    let _e740: RadialPoint = other_2009;
    let _e751: MultiVector = self_2243;
    let _e754: MultiVector = self_2243;
    let _e757: MultiVector = self_2243;
    let _e761: RadialPoint = other_2009;
    let _e767: MultiVector = self_2243;
    let _e771: RadialPoint = other_2009;
    let _e781: MultiVector = self_2243;
    let _e785: RadialPoint = other_2009;
    let _e796: MultiVector = self_2243;
    let _e800: RadialPoint = other_2009;
    let _e811: MultiVector = self_2243;
    let _e815: RadialPoint = other_2009;
    let _e826: MultiVector = self_2243;
    let _e830: RadialPoint = other_2009;
    let _e841: MultiVector = self_2243;
    let _e845: RadialPoint = other_2009;
    let _e849: MultiVector = self_2243;
    let _e853: RadialPoint = other_2009;
    let _e864: MultiVector = self_2243;
    let _e868: RadialPoint = other_2009;
    let _e871: RadialPoint = other_2009;
    let _e874: RadialPoint = other_2009;
    let _e877: RadialPoint = other_2009;
    let _e889: MultiVector = self_2243;
    let _e893: RadialPoint = other_2009;
    let _e896: RadialPoint = other_2009;
    let _e899: RadialPoint = other_2009;
    let _e902: RadialPoint = other_2009;
    let _e915: MultiVector = self_2243;
    let _e919: RadialPoint = other_2009;
    let _e922: RadialPoint = other_2009;
    let _e925: RadialPoint = other_2009;
    let _e928: RadialPoint = other_2009;
    let _e941: MultiVector = self_2243;
    let _e945: RadialPoint = other_2009;
    let _e948: RadialPoint = other_2009;
    let _e951: RadialPoint = other_2009;
    let _e954: RadialPoint = other_2009;
    let _e967: MultiVector = self_2243;
    let _e971: RadialPoint = other_2009;
    let _e974: RadialPoint = other_2009;
    let _e977: RadialPoint = other_2009;
    let _e980: RadialPoint = other_2009;
    let _e993: MultiVector = self_2243;
    let _e997: RadialPoint = other_2009;
    let _e1000: RadialPoint = other_2009;
    let _e1003: RadialPoint = other_2009;
    let _e1006: RadialPoint = other_2009;
    let _e1019: MultiVector = self_2243;
    let _e1022: MultiVector = self_2243;
    let _e1025: MultiVector = self_2243;
    let _e1028: MultiVector = self_2243;
    let _e1032: RadialPoint = other_2009;
    let _e1035: RadialPoint = other_2009;
    let _e1038: RadialPoint = other_2009;
    let _e1041: RadialPoint = other_2009;
    let _e1056: MultiVector = self_2243;
    let _e1060: RadialPoint = other_2009;
    let _e1063: RadialPoint = other_2009;
    let _e1066: RadialPoint = other_2009;
    let _e1069: RadialPoint = other_2009;
    let _e1081: MultiVector = self_2243;
    let _e1085: RadialPoint = other_2009;
    let _e1088: RadialPoint = other_2009;
    let _e1091: RadialPoint = other_2009;
    let _e1094: RadialPoint = other_2009;
    let _e1107: MultiVector = self_2243;
    let _e1111: RadialPoint = other_2009;
    let _e1114: RadialPoint = other_2009;
    let _e1117: RadialPoint = other_2009;
    let _e1120: RadialPoint = other_2009;
    let _e1133: MultiVector = self_2243;
    let _e1137: RadialPoint = other_2009;
    let _e1140: RadialPoint = other_2009;
    let _e1143: RadialPoint = other_2009;
    let _e1146: RadialPoint = other_2009;
    let _e1159: MultiVector = self_2243;
    let _e1163: RadialPoint = other_2009;
    let _e1166: RadialPoint = other_2009;
    let _e1169: RadialPoint = other_2009;
    let _e1172: RadialPoint = other_2009;
    let _e1185: MultiVector = self_2243;
    let _e1189: RadialPoint = other_2009;
    let _e1192: RadialPoint = other_2009;
    let _e1195: RadialPoint = other_2009;
    let _e1198: RadialPoint = other_2009;
    let _e1211: MultiVector = self_2243;
    let _e1215: RadialPoint = other_2009;
    let _e1227: MultiVector = self_2243;
    let _e1231: RadialPoint = other_2009;
    let _e1243: MultiVector = self_2243;
    let _e1247: RadialPoint = other_2009;
    let _e1259: MultiVector = self_2243;
    let _e1263: RadialPoint = other_2009;
    let _e1275: MultiVector = self_2243;
    let _e1278: MultiVector = self_2243;
    let _e1281: MultiVector = self_2243;
    let _e1284: MultiVector = self_2243;
    let _e1288: RadialPoint = other_2009;
    let _e1291: RadialPoint = other_2009;
    let _e1294: RadialPoint = other_2009;
    let _e1297: RadialPoint = other_2009;
    return MultiVector((((((((((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.y) * vec3<f32>(_e22.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g8_.x) * vec3<f32>(_e52.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e64.g8_.y) * vec3<f32>(_e68.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e80.g8_.z) * vec3<f32>(_e84.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e96.g8_.w) * vec3<f32>(_e100.g1_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e112.g9_.x) * vec3<f32>(_e116.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e127.g9_.y) * vec3<f32>(_e131.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e142.g9_.z) * vec3<f32>(_e146.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e157.g9_.w) * vec3<f32>(_e161.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e172.g0_.xxy * vec3<f32>(_e175.g1_.x, _e178.g1_.x, _e181.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))), ((((vec3<f32>(_e192.g0_.x) * _e196.g0_) + ((vec3<f32>(_e199.g5_.y) * _e203.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e214.g5_.z) * _e218.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e229.g5_.x) * _e233.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec2<f32>(_e244.g0_.x) * _e248.g1_) + ((vec2<f32>(_e251.g3_.y) * vec2<f32>(_e255.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e266.g3_.z) * vec2<f32>(_e270.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e281.g4_.x) * vec2<f32>(_e285.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e295.g4_.y) * vec2<f32>(_e299.g0_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e309.g4_.z) * vec2<f32>(_e313.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e323.g3_.x) * vec2<f32>(_e327.g0_.x)) * vec2<f32>(0.0, -(1.0)))), ((((((((((vec4<f32>(_e338.g2_.x) * vec4<f32>(_e342.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e353.g2_.y) * vec4<f32>(_e357.g0_.x, _e360.g0_.y, _e363.g0_.z, _e366.g1_.x))) + ((vec4<f32>(_e372.g6_.x) * vec4<f32>(_e376.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e389.g6_.y) * vec4<f32>(_e393.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e406.g6_.z) * vec4<f32>(_e410.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e423.g7_.x) * vec4<f32>(_e427.g0_.z, _e430.g0_.z, _e433.g0_.y, _e436.g0_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e449.g7_.y) * vec4<f32>(_e453.g0_.z, _e456.g0_.z, _e459.g0_.x, _e462.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e475.g7_.z) * vec4<f32>(_e479.g0_.y, _e482.g0_.x, _e485.g0_.y, _e488.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e501.g1_.x, _e504.g1_.y, _e507.g1_.z, _e510.g1_.x) * vec4<f32>(_e514.g1_.y, _e517.g1_.y, _e520.g1_.y, _e523.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec3<f32>(_e535.g2_.x) * _e539.g0_) + ((vec3<f32>(_e542.g8_.x) * _e546.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e557.g8_.y) * _e561.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e572.g8_.z) * _e576.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((_e587.g1_ * vec3<f32>(_e589.g1_.x)) * vec3<f32>(-(1.0)))), (((((vec3<f32>(_e599.g1_.y) * _e603.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e613.g1_.z) * _e617.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e628.g8_.w) * _e632.g0_)) + ((vec3<f32>(_e636.g1_.x) * _e640.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec3<f32>(0.0) - (vec3<f32>(_e653.g3_.w) * _e657.g0_)) + ((vec3<f32>(_e661.g4_.x) * vec3<f32>(_e665.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e676.g4_.y) * vec3<f32>(_e680.g1_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e691.g4_.z) * vec3<f32>(_e695.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e706.g9_.x) * _e710.g0_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e721.g9_.y) * _e725.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e736.g9_.z) * _e740.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e751.g3_.x, _e754.g3_.y, _e757.g3_.z) * vec3<f32>(_e761.g1_.x))), ((((((((vec3<f32>(_e767.g3_.y) * _e771.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e781.g3_.z) * _e785.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e796.g5_.x) * vec3<f32>(_e800.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e811.g5_.y) * vec3<f32>(_e815.g1_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e826.g5_.z) * vec3<f32>(_e830.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e841.g9_.w) * _e845.g0_)) + ((vec3<f32>(_e849.g3_.x) * _e853.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((vec4<f32>(_e864.g4_.x) * vec4<f32>(_e868.g0_.z, _e871.g0_.z, _e874.g0_.y, _e877.g0_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0)) + ((vec4<f32>(_e889.g4_.y) * vec4<f32>(_e893.g0_.z, _e896.g0_.z, _e899.g0_.x, _e902.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e915.g4_.z) * vec4<f32>(_e919.g0_.y, _e922.g0_.x, _e925.g0_.y, _e928.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e941.g5_.x) * vec4<f32>(_e945.g1_.x, _e948.g1_.x, _e951.g1_.x, _e954.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e967.g5_.y) * vec4<f32>(_e971.g1_.x, _e974.g1_.x, _e977.g1_.x, _e980.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e993.g5_.z) * vec4<f32>(_e997.g1_.x, _e1000.g1_.x, _e1003.g1_.x, _e1006.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1019.g0_.y, _e1022.g0_.y, _e1025.g0_.y, _e1028.g0_.x) * vec4<f32>(_e1032.g0_.x, _e1035.g0_.y, _e1038.g0_.z, _e1041.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((((((((((((vec4<f32>(_e1056.g6_.x) * vec4<f32>(_e1060.g0_.z, _e1063.g0_.z, _e1066.g0_.y, _e1069.g0_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e1081.g6_.y) * vec4<f32>(_e1085.g0_.z, _e1088.g0_.z, _e1091.g0_.x, _e1094.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1107.g6_.z) * vec4<f32>(_e1111.g0_.y, _e1114.g0_.x, _e1117.g0_.y, _e1120.g0_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1133.g7_.x) * vec4<f32>(_e1137.g1_.x, _e1140.g1_.x, _e1143.g1_.x, _e1146.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1159.g7_.y) * vec4<f32>(_e1163.g1_.x, _e1166.g1_.x, _e1169.g1_.x, _e1172.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e1185.g7_.z) * vec4<f32>(_e1189.g1_.x, _e1192.g1_.x, _e1195.g1_.x, _e1198.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e1211.g8_.x) * vec4<f32>(_e1215.g1_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1227.g8_.y) * vec4<f32>(_e1231.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1243.g8_.z) * vec4<f32>(_e1247.g1_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1259.g8_.w) * vec4<f32>(_e1263.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1275.g0_.z, _e1278.g0_.z, _e1281.g0_.z, _e1284.g0_.x) * vec4<f32>(_e1288.g0_.x, _e1291.g0_.y, _e1294.g0_.z, _e1297.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_radial_point_scalar_product(self_2244: MultiVector, other_2010: RadialPoint) -> Scalar {
    var self_2245: MultiVector;
    var other_2011: RadialPoint;

    self_2245 = self_2244;
    other_2011 = other_2010;
    let _e4: MultiVector = self_2245;
    let _e7: RadialPoint = other_2011;
    let _e11: MultiVector = self_2245;
    let _e14: RadialPoint = other_2011;
    let _e19: MultiVector = self_2245;
    let _e22: RadialPoint = other_2011;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn multi_vector_flat_point_into(self_2246: MultiVector) -> FlatPoint {
    var self_2247: MultiVector;

    self_2247 = self_2246;
    let _e2: MultiVector = self_2247;
    return FlatPoint(_e2.g3_);
}

fn multi_vector_flat_point_add(self_2248: MultiVector, other_2012: FlatPoint) -> MultiVector {
    var self_2249: MultiVector;
    var other_2013: FlatPoint;

    self_2249 = self_2248;
    other_2013 = other_2012;
    let _e4: MultiVector = self_2249;
    let _e6: MultiVector = self_2249;
    let _e8: MultiVector = self_2249;
    let _e10: MultiVector = self_2249;
    let _e12: FlatPoint = other_2013;
    let _e15: MultiVector = self_2249;
    let _e17: MultiVector = self_2249;
    let _e19: MultiVector = self_2249;
    let _e21: MultiVector = self_2249;
    let _e23: MultiVector = self_2249;
    let _e25: MultiVector = self_2249;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ + _e12.g0_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, _e25.g9_);
}

fn multi_vector_flat_point_sub(self_2250: MultiVector, other_2014: FlatPoint) -> MultiVector {
    var self_2251: MultiVector;
    var other_2015: FlatPoint;

    self_2251 = self_2250;
    other_2015 = other_2014;
    let _e4: MultiVector = self_2251;
    let _e6: MultiVector = self_2251;
    let _e8: MultiVector = self_2251;
    let _e10: MultiVector = self_2251;
    let _e12: FlatPoint = other_2015;
    let _e15: MultiVector = self_2251;
    let _e17: MultiVector = self_2251;
    let _e19: MultiVector = self_2251;
    let _e21: MultiVector = self_2251;
    let _e23: MultiVector = self_2251;
    let _e25: MultiVector = self_2251;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ - _e12.g0_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, _e25.g9_);
}

fn multi_vector_flat_point_geometric_anti_product(self_2252: MultiVector, other_2016: FlatPoint) -> MultiVector {
    var self_2253: MultiVector;
    var other_2017: FlatPoint;

    self_2253 = self_2252;
    other_2017 = other_2016;
    let _e4: MultiVector = self_2253;
    let _e8: FlatPoint = other_2017;
    let _e19: MultiVector = self_2253;
    let _e23: FlatPoint = other_2017;
    let _e35: MultiVector = self_2253;
    let _e39: FlatPoint = other_2017;
    let _e51: MultiVector = self_2253;
    let _e55: FlatPoint = other_2017;
    let _e67: MultiVector = self_2253;
    let _e71: FlatPoint = other_2017;
    let _e83: MultiVector = self_2253;
    let _e87: FlatPoint = other_2017;
    let _e90: FlatPoint = other_2017;
    let _e93: FlatPoint = other_2017;
    let _e105: MultiVector = self_2253;
    let _e109: FlatPoint = other_2017;
    let _e112: FlatPoint = other_2017;
    let _e115: FlatPoint = other_2017;
    let _e120: MultiVector = self_2253;
    let _e124: FlatPoint = other_2017;
    let _e127: FlatPoint = other_2017;
    let _e130: FlatPoint = other_2017;
    let _e142: MultiVector = self_2253;
    let _e146: FlatPoint = other_2017;
    let _e149: FlatPoint = other_2017;
    let _e152: FlatPoint = other_2017;
    let _e164: MultiVector = self_2253;
    let _e168: FlatPoint = other_2017;
    let _e179: MultiVector = self_2253;
    let _e183: FlatPoint = other_2017;
    let _e194: MultiVector = self_2253;
    let _e197: MultiVector = self_2253;
    let _e200: MultiVector = self_2253;
    let _e204: FlatPoint = other_2017;
    let _e207: FlatPoint = other_2017;
    let _e210: FlatPoint = other_2017;
    let _e222: MultiVector = self_2253;
    let _e226: FlatPoint = other_2017;
    let _e236: MultiVector = self_2253;
    let _e240: FlatPoint = other_2017;
    let _e251: MultiVector = self_2253;
    let _e255: FlatPoint = other_2017;
    let _e266: MultiVector = self_2253;
    let _e270: FlatPoint = other_2017;
    let _e281: MultiVector = self_2253;
    let _e284: MultiVector = self_2253;
    let _e288: FlatPoint = other_2017;
    let _e291: FlatPoint = other_2017;
    let _e301: MultiVector = self_2253;
    let _e305: FlatPoint = other_2017;
    let _e308: MultiVector = self_2253;
    let _e312: FlatPoint = other_2017;
    let _e324: MultiVector = self_2253;
    let _e328: FlatPoint = other_2017;
    let _e340: MultiVector = self_2253;
    let _e344: FlatPoint = other_2017;
    let _e356: MultiVector = self_2253;
    let _e360: FlatPoint = other_2017;
    let _e372: MultiVector = self_2253;
    let _e375: MultiVector = self_2253;
    let _e378: MultiVector = self_2253;
    let _e381: MultiVector = self_2253;
    let _e385: FlatPoint = other_2017;
    let _e397: MultiVector = self_2253;
    let _e400: MultiVector = self_2253;
    let _e403: MultiVector = self_2253;
    let _e407: FlatPoint = other_2017;
    let _e416: MultiVector = self_2253;
    let _e420: FlatPoint = other_2017;
    let _e423: FlatPoint = other_2017;
    let _e426: FlatPoint = other_2017;
    let _e431: MultiVector = self_2253;
    let _e435: FlatPoint = other_2017;
    let _e438: FlatPoint = other_2017;
    let _e441: FlatPoint = other_2017;
    let _e453: MultiVector = self_2253;
    let _e457: FlatPoint = other_2017;
    let _e460: FlatPoint = other_2017;
    let _e463: FlatPoint = other_2017;
    let _e475: MultiVector = self_2253;
    let _e479: FlatPoint = other_2017;
    let _e482: FlatPoint = other_2017;
    let _e485: FlatPoint = other_2017;
    let _e497: MultiVector = self_2253;
    let _e499: FlatPoint = other_2017;
    let _e509: MultiVector = self_2253;
    let _e512: MultiVector = self_2253;
    let _e515: MultiVector = self_2253;
    let _e519: FlatPoint = other_2017;
    let _e528: MultiVector = self_2253;
    let _e532: FlatPoint = other_2017;
    let _e535: FlatPoint = other_2017;
    let _e538: FlatPoint = other_2017;
    let _e543: MultiVector = self_2253;
    let _e547: FlatPoint = other_2017;
    let _e550: FlatPoint = other_2017;
    let _e553: FlatPoint = other_2017;
    let _e565: MultiVector = self_2253;
    let _e569: FlatPoint = other_2017;
    let _e572: FlatPoint = other_2017;
    let _e575: FlatPoint = other_2017;
    let _e587: MultiVector = self_2253;
    let _e591: FlatPoint = other_2017;
    let _e594: FlatPoint = other_2017;
    let _e597: FlatPoint = other_2017;
    let _e609: MultiVector = self_2253;
    let _e612: MultiVector = self_2253;
    let _e615: MultiVector = self_2253;
    let _e619: FlatPoint = other_2017;
    let _e629: MultiVector = self_2253;
    let _e633: FlatPoint = other_2017;
    let _e644: MultiVector = self_2253;
    let _e648: FlatPoint = other_2017;
    let _e660: MultiVector = self_2253;
    let _e664: FlatPoint = other_2017;
    let _e676: MultiVector = self_2253;
    let _e680: FlatPoint = other_2017;
    let _e691: MultiVector = self_2253;
    let _e695: FlatPoint = other_2017;
    let _e706: MultiVector = self_2253;
    let _e710: FlatPoint = other_2017;
    let _e722: MultiVector = self_2253;
    let _e726: FlatPoint = other_2017;
    let _e738: MultiVector = self_2253;
    let _e741: MultiVector = self_2253;
    let _e744: MultiVector = self_2253;
    let _e747: MultiVector = self_2253;
    let _e751: FlatPoint = other_2017;
    return MultiVector((((((((vec3<f32>(_e4.g3_.w) * vec3<f32>(_e8.g0_.w)) * vec3<f32>(0.0, 0.0, -(1.0))) + ((vec3<f32>(_e19.g8_.x) * vec3<f32>(_e23.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g8_.y) * vec3<f32>(_e39.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e51.g8_.z) * vec3<f32>(_e55.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e67.g8_.w) * vec3<f32>(_e71.g0_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e83.g2_.x) * vec3<f32>(_e87.g0_.x, _e90.g0_.w, _e93.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0))), ((((((vec3<f32>(_e105.g0_.y) * vec3<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z)) + ((vec3<f32>(_e120.g4_.y) * vec3<f32>(_e124.g0_.z, _e127.g0_.z, _e130.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e142.g4_.z) * vec3<f32>(_e146.g0_.y, _e149.g0_.x, _e152.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e164.g5_.y) * vec3<f32>(_e168.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e179.g5_.z) * vec3<f32>(_e183.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e194.g5_.x, _e197.g4_.x, _e200.g4_.x) * vec3<f32>(_e204.g0_.w, _e207.g0_.z, _e210.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((((vec2<f32>(_e222.g9_.x) * vec2<f32>(_e226.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e236.g9_.y) * vec2<f32>(_e240.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e251.g9_.z) * vec2<f32>(_e255.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e266.g9_.w) * vec2<f32>(_e270.g0_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e281.g0_.y, _e284.g0_.x) * vec2<f32>(_e288.g0_.w, _e291.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4<f32>(_e301.g0_.z) * _e305.g0_) + ((vec4<f32>(_e308.g6_.y) * _e312.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e324.g6_.z) * _e328.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e340.g7_.y) * vec4<f32>(_e344.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e356.g7_.z) * vec4<f32>(_e360.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e372.g7_.x, _e375.g6_.x, _e378.g6_.x, _e381.g6_.x) * _e385.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((vec3<f32>(_e397.g8_.x, _e400.g8_.y, _e403.g8_.z) * vec3<f32>(_e407.g0_.w)) * vec3<f32>(-(1.0))), (((((vec3<f32>(_e416.g2_.x) * vec3<f32>(_e420.g0_.x, _e423.g0_.y, _e426.g0_.z)) + ((vec3<f32>(_e431.g8_.x) * vec3<f32>(_e435.g0_.z, _e438.g0_.z, _e441.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e453.g8_.y) * vec3<f32>(_e457.g0_.z, _e460.g0_.z, _e463.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e475.g8_.z) * vec3<f32>(_e479.g0_.y, _e482.g0_.x, _e485.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((_e497.g1_ * vec3<f32>(_e499.g0_.w)) * vec3<f32>(-(1.0)))), ((vec3<f32>(_e509.g9_.x, _e512.g9_.y, _e515.g9_.z) * vec3<f32>(_e519.g0_.w)) * vec3<f32>(-(1.0))), (((((vec3<f32>(_e528.g3_.w) * vec3<f32>(_e532.g0_.x, _e535.g0_.y, _e538.g0_.z)) + ((vec3<f32>(_e543.g9_.x) * vec3<f32>(_e547.g0_.z, _e550.g0_.z, _e553.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e565.g9_.y) * vec3<f32>(_e569.g0_.z, _e572.g0_.z, _e575.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e587.g9_.z) * vec3<f32>(_e591.g0_.y, _e594.g0_.x, _e597.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e609.g3_.x, _e612.g3_.y, _e615.g3_.z) * vec3<f32>(_e619.g0_.w)) * vec3<f32>(-(1.0)))), (((((vec4<f32>(_e629.g4_.x) * _e633.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e644.g4_.y) * _e648.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e660.g4_.z) * _e664.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e676.g0_.x) * _e680.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e691.g6_.x) * _e695.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e706.g6_.y) * _e710.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e722.g6_.z) * _e726.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e738.g2_.x, _e741.g2_.x, _e744.g2_.x, _e747.g2_.y) * _e751.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flat_point_anti_scalar_product(self_2254: MultiVector, other_2018: FlatPoint) -> AntiScalar {
    var self_2255: MultiVector;
    var other_2019: FlatPoint;

    self_2255 = self_2254;
    other_2019 = other_2018;
    let _e5: MultiVector = self_2255;
    let _e8: FlatPoint = other_2019;
    return AntiScalar((0.0 - (_e5.g3_.w * _e8.g0_.w)));
}

fn multi_vector_dipole_into(self_2256: MultiVector) -> Dipole {
    var self_2257: MultiVector;

    self_2257 = self_2256;
    let _e2: MultiVector = self_2257;
    let _e4: MultiVector = self_2257;
    let _e6: MultiVector = self_2257;
    return Dipole(_e2.g4_, _e4.g5_, _e6.g3_);
}

fn multi_vector_dipole_add(self_2258: MultiVector, other_2020: Dipole) -> MultiVector {
    var self_2259: MultiVector;
    var other_2021: Dipole;

    self_2259 = self_2258;
    other_2021 = other_2020;
    let _e4: MultiVector = self_2259;
    let _e6: MultiVector = self_2259;
    let _e8: MultiVector = self_2259;
    let _e10: MultiVector = self_2259;
    let _e12: Dipole = other_2021;
    let _e15: MultiVector = self_2259;
    let _e17: Dipole = other_2021;
    let _e20: MultiVector = self_2259;
    let _e22: Dipole = other_2021;
    let _e25: MultiVector = self_2259;
    let _e27: MultiVector = self_2259;
    let _e29: MultiVector = self_2259;
    let _e31: MultiVector = self_2259;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ + _e12.g2_), (_e15.g4_ + _e17.g0_), (_e20.g5_ + _e22.g1_), _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_dipole_sub(self_2260: MultiVector, other_2022: Dipole) -> MultiVector {
    var self_2261: MultiVector;
    var other_2023: Dipole;

    self_2261 = self_2260;
    other_2023 = other_2022;
    let _e4: MultiVector = self_2261;
    let _e6: MultiVector = self_2261;
    let _e8: MultiVector = self_2261;
    let _e10: MultiVector = self_2261;
    let _e12: Dipole = other_2023;
    let _e15: MultiVector = self_2261;
    let _e17: Dipole = other_2023;
    let _e20: MultiVector = self_2261;
    let _e22: Dipole = other_2023;
    let _e25: MultiVector = self_2261;
    let _e27: MultiVector = self_2261;
    let _e29: MultiVector = self_2261;
    let _e31: MultiVector = self_2261;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ - _e12.g2_), (_e15.g4_ - _e17.g0_), (_e20.g5_ - _e22.g1_), _e25.g6_, _e27.g7_, _e29.g8_, _e31.g9_);
}

fn multi_vector_dipole_geometric_product(self_2262: MultiVector, other_2024: Dipole) -> MultiVector {
    var self_2263: MultiVector;
    var other_2025: Dipole;

    self_2263 = self_2262;
    other_2025 = other_2024;
    let _e4: MultiVector = self_2263;
    let _e8: Dipole = other_2025;
    let _e19: MultiVector = self_2263;
    let _e23: Dipole = other_2025;
    let _e35: MultiVector = self_2263;
    let _e39: Dipole = other_2025;
    let _e42: Dipole = other_2025;
    let _e45: Dipole = other_2025;
    let _e58: MultiVector = self_2263;
    let _e62: Dipole = other_2025;
    let _e65: Dipole = other_2025;
    let _e68: Dipole = other_2025;
    let _e81: MultiVector = self_2263;
    let _e85: Dipole = other_2025;
    let _e88: Dipole = other_2025;
    let _e91: Dipole = other_2025;
    let _e104: MultiVector = self_2263;
    let _e108: Dipole = other_2025;
    let _e120: MultiVector = self_2263;
    let _e124: Dipole = other_2025;
    let _e136: MultiVector = self_2263;
    let _e140: Dipole = other_2025;
    let _e152: MultiVector = self_2263;
    let _e156: Dipole = other_2025;
    let _e168: MultiVector = self_2263;
    let _e172: Dipole = other_2025;
    let _e184: MultiVector = self_2263;
    let _e188: Dipole = other_2025;
    let _e200: MultiVector = self_2263;
    let _e204: Dipole = other_2025;
    let _e216: MultiVector = self_2263;
    let _e220: Dipole = other_2025;
    let _e232: MultiVector = self_2263;
    let _e236: Dipole = other_2025;
    let _e248: MultiVector = self_2263;
    let _e251: MultiVector = self_2263;
    let _e254: MultiVector = self_2263;
    let _e258: Dipole = other_2025;
    let _e271: MultiVector = self_2263;
    let _e275: Dipole = other_2025;
    let _e285: MultiVector = self_2263;
    let _e289: Dipole = other_2025;
    let _e300: MultiVector = self_2263;
    let _e304: Dipole = other_2025;
    let _e308: MultiVector = self_2263;
    let _e312: Dipole = other_2025;
    let _e323: MultiVector = self_2263;
    let _e327: Dipole = other_2025;
    let _e330: Dipole = other_2025;
    let _e340: MultiVector = self_2263;
    let _e344: Dipole = other_2025;
    let _e347: Dipole = other_2025;
    let _e358: MultiVector = self_2263;
    let _e362: Dipole = other_2025;
    let _e365: Dipole = other_2025;
    let _e376: MultiVector = self_2263;
    let _e380: Dipole = other_2025;
    let _e391: MultiVector = self_2263;
    let _e395: Dipole = other_2025;
    let _e406: MultiVector = self_2263;
    let _e410: Dipole = other_2025;
    let _e421: MultiVector = self_2263;
    let _e425: Dipole = other_2025;
    let _e436: MultiVector = self_2263;
    let _e440: Dipole = other_2025;
    let _e451: MultiVector = self_2263;
    let _e455: Dipole = other_2025;
    let _e466: MultiVector = self_2263;
    let _e470: Dipole = other_2025;
    let _e473: MultiVector = self_2263;
    let _e477: Dipole = other_2025;
    let _e480: Dipole = other_2025;
    let _e483: Dipole = other_2025;
    let _e486: Dipole = other_2025;
    let _e500: MultiVector = self_2263;
    let _e504: Dipole = other_2025;
    let _e507: Dipole = other_2025;
    let _e510: Dipole = other_2025;
    let _e513: Dipole = other_2025;
    let _e527: MultiVector = self_2263;
    let _e531: Dipole = other_2025;
    let _e543: MultiVector = self_2263;
    let _e547: Dipole = other_2025;
    let _e559: MultiVector = self_2263;
    let _e563: Dipole = other_2025;
    let _e575: MultiVector = self_2263;
    let _e579: Dipole = other_2025;
    let _e591: MultiVector = self_2263;
    let _e595: Dipole = other_2025;
    let _e607: MultiVector = self_2263;
    let _e611: Dipole = other_2025;
    let _e623: MultiVector = self_2263;
    let _e627: Dipole = other_2025;
    let _e640: MultiVector = self_2263;
    let _e644: Dipole = other_2025;
    let _e657: MultiVector = self_2263;
    let _e661: Dipole = other_2025;
    let _e674: MultiVector = self_2263;
    let _e678: Dipole = other_2025;
    let _e681: Dipole = other_2025;
    let _e684: Dipole = other_2025;
    let _e687: Dipole = other_2025;
    let _e699: MultiVector = self_2263;
    let _e703: Dipole = other_2025;
    let _e706: Dipole = other_2025;
    let _e709: Dipole = other_2025;
    let _e712: Dipole = other_2025;
    let _e726: MultiVector = self_2263;
    let _e730: Dipole = other_2025;
    let _e733: MultiVector = self_2263;
    let _e737: Dipole = other_2025;
    let _e741: MultiVector = self_2263;
    let _e745: Dipole = other_2025;
    let _e756: MultiVector = self_2263;
    let _e760: Dipole = other_2025;
    let _e771: MultiVector = self_2263;
    let _e775: Dipole = other_2025;
    let _e786: MultiVector = self_2263;
    let _e790: Dipole = other_2025;
    let _e801: MultiVector = self_2263;
    let _e805: Dipole = other_2025;
    let _e816: MultiVector = self_2263;
    let _e820: Dipole = other_2025;
    let _e831: MultiVector = self_2263;
    let _e835: Dipole = other_2025;
    let _e838: MultiVector = self_2263;
    let _e842: Dipole = other_2025;
    let _e853: MultiVector = self_2263;
    let _e857: Dipole = other_2025;
    let _e868: MultiVector = self_2263;
    let _e872: Dipole = other_2025;
    let _e883: MultiVector = self_2263;
    let _e887: Dipole = other_2025;
    let _e890: MultiVector = self_2263;
    let _e894: Dipole = other_2025;
    let _e897: Dipole = other_2025;
    let _e900: Dipole = other_2025;
    let _e906: MultiVector = self_2263;
    let _e910: Dipole = other_2025;
    let _e914: MultiVector = self_2263;
    let _e918: Dipole = other_2025;
    let _e929: MultiVector = self_2263;
    let _e933: Dipole = other_2025;
    let _e944: MultiVector = self_2263;
    let _e948: Dipole = other_2025;
    let _e959: MultiVector = self_2263;
    let _e963: Dipole = other_2025;
    let _e974: MultiVector = self_2263;
    let _e978: Dipole = other_2025;
    let _e989: MultiVector = self_2263;
    let _e993: Dipole = other_2025;
    let _e1004: MultiVector = self_2263;
    let _e1008: Dipole = other_2025;
    let _e1011: Dipole = other_2025;
    let _e1014: Dipole = other_2025;
    let _e1026: MultiVector = self_2263;
    let _e1030: Dipole = other_2025;
    let _e1033: Dipole = other_2025;
    let _e1036: Dipole = other_2025;
    let _e1048: MultiVector = self_2263;
    let _e1052: Dipole = other_2025;
    let _e1055: Dipole = other_2025;
    let _e1058: Dipole = other_2025;
    let _e1070: MultiVector = self_2263;
    let _e1072: Dipole = other_2025;
    let _e1082: MultiVector = self_2263;
    let _e1086: Dipole = other_2025;
    let _e1089: Dipole = other_2025;
    let _e1092: Dipole = other_2025;
    let _e1103: MultiVector = self_2263;
    let _e1107: Dipole = other_2025;
    let _e1110: Dipole = other_2025;
    let _e1113: Dipole = other_2025;
    let _e1125: MultiVector = self_2263;
    let _e1129: Dipole = other_2025;
    let _e1133: MultiVector = self_2263;
    let _e1137: Dipole = other_2025;
    let _e1148: MultiVector = self_2263;
    let _e1152: Dipole = other_2025;
    let _e1163: MultiVector = self_2263;
    let _e1167: Dipole = other_2025;
    let _e1178: MultiVector = self_2263;
    let _e1182: Dipole = other_2025;
    let _e1185: Dipole = other_2025;
    let _e1188: Dipole = other_2025;
    let _e1194: MultiVector = self_2263;
    let _e1198: Dipole = other_2025;
    let _e1201: Dipole = other_2025;
    let _e1204: Dipole = other_2025;
    let _e1216: MultiVector = self_2263;
    let _e1220: Dipole = other_2025;
    let _e1223: Dipole = other_2025;
    let _e1226: Dipole = other_2025;
    let _e1229: Dipole = other_2025;
    let _e1242: MultiVector = self_2263;
    let _e1246: Dipole = other_2025;
    let _e1249: Dipole = other_2025;
    let _e1252: Dipole = other_2025;
    let _e1255: Dipole = other_2025;
    let _e1269: MultiVector = self_2263;
    let _e1273: Dipole = other_2025;
    let _e1276: Dipole = other_2025;
    let _e1279: Dipole = other_2025;
    let _e1282: Dipole = other_2025;
    let _e1294: MultiVector = self_2263;
    let _e1298: Dipole = other_2025;
    let _e1301: Dipole = other_2025;
    let _e1304: Dipole = other_2025;
    let _e1307: Dipole = other_2025;
    let _e1320: MultiVector = self_2263;
    let _e1324: Dipole = other_2025;
    let _e1327: Dipole = other_2025;
    let _e1330: Dipole = other_2025;
    let _e1333: Dipole = other_2025;
    let _e1346: MultiVector = self_2263;
    let _e1350: Dipole = other_2025;
    let _e1353: Dipole = other_2025;
    let _e1356: Dipole = other_2025;
    let _e1359: Dipole = other_2025;
    let _e1372: MultiVector = self_2263;
    let _e1376: Dipole = other_2025;
    let _e1379: Dipole = other_2025;
    let _e1382: Dipole = other_2025;
    let _e1385: Dipole = other_2025;
    let _e1397: MultiVector = self_2263;
    let _e1401: Dipole = other_2025;
    let _e1404: Dipole = other_2025;
    let _e1407: Dipole = other_2025;
    let _e1410: Dipole = other_2025;
    let _e1424: MultiVector = self_2263;
    let _e1428: Dipole = other_2025;
    let _e1431: Dipole = other_2025;
    let _e1434: Dipole = other_2025;
    let _e1437: Dipole = other_2025;
    let _e1450: MultiVector = self_2263;
    let _e1454: Dipole = other_2025;
    let _e1457: Dipole = other_2025;
    let _e1460: Dipole = other_2025;
    let _e1463: Dipole = other_2025;
    let _e1477: MultiVector = self_2263;
    let _e1481: Dipole = other_2025;
    let _e1484: Dipole = other_2025;
    let _e1487: Dipole = other_2025;
    let _e1490: Dipole = other_2025;
    let _e1504: MultiVector = self_2263;
    let _e1508: Dipole = other_2025;
    let _e1511: Dipole = other_2025;
    let _e1514: Dipole = other_2025;
    let _e1517: Dipole = other_2025;
    let _e1529: MultiVector = self_2263;
    let _e1533: Dipole = other_2025;
    let _e1545: MultiVector = self_2263;
    let _e1549: Dipole = other_2025;
    let _e1561: MultiVector = self_2263;
    let _e1565: Dipole = other_2025;
    let _e1577: MultiVector = self_2263;
    let _e1581: Dipole = other_2025;
    let _e1593: MultiVector = self_2263;
    let _e1597: Dipole = other_2025;
    let _e1609: MultiVector = self_2263;
    let _e1613: Dipole = other_2025;
    let _e1625: MultiVector = self_2263;
    let _e1629: Dipole = other_2025;
    let _e1632: Dipole = other_2025;
    let _e1635: Dipole = other_2025;
    let _e1638: Dipole = other_2025;
    let _e1651: MultiVector = self_2263;
    let _e1655: Dipole = other_2025;
    let _e1658: Dipole = other_2025;
    let _e1661: Dipole = other_2025;
    let _e1664: Dipole = other_2025;
    let _e1677: MultiVector = self_2263;
    let _e1681: Dipole = other_2025;
    let _e1684: Dipole = other_2025;
    let _e1687: Dipole = other_2025;
    let _e1690: Dipole = other_2025;
    let _e1703: MultiVector = self_2263;
    let _e1707: Dipole = other_2025;
    let _e1710: Dipole = other_2025;
    let _e1713: Dipole = other_2025;
    let _e1716: Dipole = other_2025;
    let _e1728: MultiVector = self_2263;
    let _e1731: MultiVector = self_2263;
    let _e1734: MultiVector = self_2263;
    let _e1737: MultiVector = self_2263;
    let _e1741: Dipole = other_2025;
    return MultiVector(((((((((((((((((vec3<f32>(_e4.g4_.y) * vec3<f32>(_e8.g1_.y)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.z) * vec3<f32>(_e23.g1_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g5_.x) * vec3<f32>(_e39.g1_.x, _e42.g0_.x, _e45.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e58.g5_.y) * vec3<f32>(_e62.g1_.y, _e65.g0_.y, _e68.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e81.g5_.z) * vec3<f32>(_e85.g1_.z, _e88.g0_.z, _e91.g1_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e104.g6_.y) * vec3<f32>(_e108.g1_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e120.g6_.z) * vec3<f32>(_e124.g1_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e136.g7_.x) * vec3<f32>(_e140.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e152.g7_.y) * vec3<f32>(_e156.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e168.g7_.z) * vec3<f32>(_e172.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e184.g8_.x) * vec3<f32>(_e188.g2_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e200.g8_.y) * vec3<f32>(_e204.g2_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e216.g8_.z) * vec3<f32>(_e220.g2_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e232.g8_.w) * vec3<f32>(_e236.g2_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e248.g4_.x, _e251.g4_.x, _e254.g6_.x) * vec3<f32>(_e258.g1_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))), (((((vec3<f32>(_e271.g1_.y) * _e275.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e285.g1_.z) * _e289.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e300.g8_.w) * _e304.g1_)) + ((vec3<f32>(_e308.g1_.x) * _e312.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((vec2<f32>(_e323.g1_.x) * vec2<f32>(_e327.g0_.x, _e330.g2_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e340.g1_.y) * vec2<f32>(_e344.g0_.y, _e347.g2_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e358.g1_.z) * vec2<f32>(_e362.g0_.z, _e365.g2_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e376.g7_.y) * vec2<f32>(_e380.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e391.g7_.z) * vec2<f32>(_e395.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e406.g8_.x) * vec2<f32>(_e410.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e421.g8_.y) * vec2<f32>(_e425.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e436.g8_.z) * vec2<f32>(_e440.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e451.g7_.x) * vec2<f32>(_e455.g1_.x)) * vec2<f32>(0.0, -(1.0)))), ((((((((((((((vec4<f32>(_e466.g0_.x) * _e470.g2_) + ((vec4<f32>(_e473.g3_.y) * vec4<f32>(_e477.g1_.z, _e480.g1_.z, _e483.g1_.x, _e486.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e500.g3_.z) * vec4<f32>(_e504.g1_.y, _e507.g1_.x, _e510.g1_.y, _e513.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e527.g4_.x) * vec4<f32>(_e531.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e543.g4_.y) * vec4<f32>(_e547.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e559.g4_.z) * vec4<f32>(_e563.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e575.g5_.x) * _e579.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e591.g5_.y) * _e595.g2_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e607.g5_.z) * _e611.g2_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e623.g9_.x) * vec4<f32>(_e627.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e640.g9_.y) * vec4<f32>(_e644.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e657.g9_.z) * vec4<f32>(_e661.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e674.g9_.w) * vec4<f32>(_e678.g1_.x, _e681.g1_.y, _e684.g1_.z, _e687.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e699.g3_.x) * vec4<f32>(_e703.g1_.x, _e706.g1_.z, _e709.g1_.y, _e712.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((((vec3<f32>(_e726.g0_.x) * _e730.g0_) + (vec3<f32>(_e733.g0_.y) * _e737.g1_)) + ((vec3<f32>(_e741.g4_.y) * _e745.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e756.g4_.z) * _e760.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e771.g5_.x) * _e775.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e786.g5_.y) * _e790.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e801.g5_.z) * _e805.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e816.g4_.x) * _e820.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec3<f32>(_e831.g0_.x) * _e835.g1_) + ((vec3<f32>(_e838.g5_.y) * _e842.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e853.g5_.z) * _e857.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e868.g5_.x) * _e872.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((((((((vec3<f32>(_e883.g0_.z) * _e887.g1_) + (vec3<f32>(_e890.g2_.x) * vec3<f32>(_e894.g2_.x, _e897.g2_.y, _e900.g2_.z))) + (vec3<f32>(_e906.g2_.y) * _e910.g0_)) + ((vec3<f32>(_e914.g6_.x) * _e918.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e929.g6_.y) * _e933.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e944.g6_.z) * _e948.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e959.g7_.x) * _e963.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e974.g7_.y) * _e978.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e989.g7_.z) * _e993.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e1004.g8_.x) * vec3<f32>(_e1008.g2_.z, _e1011.g2_.z, _e1014.g2_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1026.g8_.y) * vec3<f32>(_e1030.g2_.z, _e1033.g2_.z, _e1036.g2_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1048.g8_.z) * vec3<f32>(_e1052.g2_.y, _e1055.g2_.x, _e1058.g2_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((_e1070.g1_ * vec3<f32>(_e1072.g2_.w)) * vec3<f32>(-(1.0)))), (((((((((vec3<f32>(_e1082.g1_.y) * vec3<f32>(_e1086.g2_.z, _e1089.g2_.z, _e1092.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e1103.g1_.z) * vec3<f32>(_e1107.g2_.y, _e1110.g2_.x, _e1113.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e1125.g2_.y) * _e1129.g1_)) + ((vec3<f32>(_e1133.g7_.x) * _e1137.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1148.g7_.y) * _e1152.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1163.g7_.z) * _e1167.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) - (vec3<f32>(_e1178.g8_.w) * vec3<f32>(_e1182.g2_.x, _e1185.g2_.y, _e1188.g2_.z))) + ((vec3<f32>(_e1194.g1_.x) * vec3<f32>(_e1198.g2_.x, _e1201.g2_.z, _e1204.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((vec4<f32>(_e1216.g1_.y) * vec4<f32>(_e1220.g0_.z, _e1223.g0_.z, _e1226.g0_.x, _e1229.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e1242.g1_.z) * vec4<f32>(_e1246.g0_.y, _e1249.g0_.x, _e1252.g0_.y, _e1255.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1269.g2_.x) * vec4<f32>(_e1273.g1_.x, _e1276.g1_.y, _e1279.g1_.z, _e1282.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1294.g8_.x) * vec4<f32>(_e1298.g1_.z, _e1301.g1_.z, _e1304.g1_.y, _e1307.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1320.g8_.y) * vec4<f32>(_e1324.g1_.z, _e1327.g1_.z, _e1330.g1_.x, _e1333.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1346.g8_.z) * vec4<f32>(_e1350.g1_.y, _e1353.g1_.x, _e1356.g1_.y, _e1359.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1372.g8_.w) * vec4<f32>(_e1376.g0_.x, _e1379.g0_.y, _e1382.g0_.z, _e1385.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1397.g1_.x) * vec4<f32>(_e1401.g0_.x, _e1404.g0_.z, _e1407.g0_.y, _e1410.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((((((((((((vec4<f32>(_e1424.g3_.x) * vec4<f32>(_e1428.g0_.z, _e1431.g0_.z, _e1434.g0_.y, _e1437.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e1450.g3_.y) * vec4<f32>(_e1454.g0_.z, _e1457.g0_.z, _e1460.g0_.x, _e1463.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1477.g3_.z) * vec4<f32>(_e1481.g0_.y, _e1484.g0_.x, _e1487.g0_.y, _e1490.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1504.g3_.w) * vec4<f32>(_e1508.g1_.x, _e1511.g1_.y, _e1514.g1_.z, _e1517.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1529.g4_.x) * _e1533.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1545.g4_.y) * _e1549.g2_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1561.g4_.z) * _e1565.g2_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1577.g5_.x) * _e1581.g2_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1593.g5_.y) * _e1597.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1609.g5_.z) * _e1613.g2_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1625.g9_.x) * vec4<f32>(_e1629.g1_.z, _e1632.g1_.z, _e1635.g1_.y, _e1638.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1651.g9_.y) * vec4<f32>(_e1655.g1_.z, _e1658.g1_.z, _e1661.g1_.x, _e1664.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1677.g9_.z) * vec4<f32>(_e1681.g1_.y, _e1684.g1_.x, _e1687.g1_.y, _e1690.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1703.g9_.w) * vec4<f32>(_e1707.g0_.x, _e1710.g0_.y, _e1713.g0_.z, _e1716.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1728.g0_.y, _e1731.g0_.y, _e1734.g0_.y, _e1737.g0_.x) * _e1741.g2_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_dipole_geometric_anti_product(self_2264: MultiVector, other_2026: Dipole) -> MultiVector {
    var self_2265: MultiVector;
    var other_2027: Dipole;

    self_2265 = self_2264;
    other_2027 = other_2026;
    let _e4: MultiVector = self_2265;
    let _e8: Dipole = other_2027;
    let _e19: MultiVector = self_2265;
    let _e23: Dipole = other_2027;
    let _e26: Dipole = other_2027;
    let _e29: Dipole = other_2027;
    let _e42: MultiVector = self_2265;
    let _e46: Dipole = other_2027;
    let _e49: Dipole = other_2027;
    let _e52: Dipole = other_2027;
    let _e65: MultiVector = self_2265;
    let _e69: Dipole = other_2027;
    let _e72: Dipole = other_2027;
    let _e75: Dipole = other_2027;
    let _e88: MultiVector = self_2265;
    let _e92: Dipole = other_2027;
    let _e104: MultiVector = self_2265;
    let _e108: Dipole = other_2027;
    let _e120: MultiVector = self_2265;
    let _e124: Dipole = other_2027;
    let _e136: MultiVector = self_2265;
    let _e140: Dipole = other_2027;
    let _e152: MultiVector = self_2265;
    let _e156: Dipole = other_2027;
    let _e168: MultiVector = self_2265;
    let _e172: Dipole = other_2027;
    let _e184: MultiVector = self_2265;
    let _e188: Dipole = other_2027;
    let _e200: MultiVector = self_2265;
    let _e204: Dipole = other_2027;
    let _e207: Dipole = other_2027;
    let _e210: Dipole = other_2027;
    let _e222: MultiVector = self_2265;
    let _e226: Dipole = other_2027;
    let _e229: Dipole = other_2027;
    let _e232: Dipole = other_2027;
    let _e237: MultiVector = self_2265;
    let _e241: Dipole = other_2027;
    let _e252: MultiVector = self_2265;
    let _e256: Dipole = other_2027;
    let _e267: MultiVector = self_2265;
    let _e271: Dipole = other_2027;
    let _e275: MultiVector = self_2265;
    let _e279: Dipole = other_2027;
    let _e282: Dipole = other_2027;
    let _e285: Dipole = other_2027;
    let _e297: MultiVector = self_2265;
    let _e301: Dipole = other_2027;
    let _e304: Dipole = other_2027;
    let _e307: Dipole = other_2027;
    let _e319: MultiVector = self_2265;
    let _e323: Dipole = other_2027;
    let _e326: Dipole = other_2027;
    let _e329: Dipole = other_2027;
    let _e341: MultiVector = self_2265;
    let _e345: Dipole = other_2027;
    let _e356: MultiVector = self_2265;
    let _e360: Dipole = other_2027;
    let _e371: MultiVector = self_2265;
    let _e375: Dipole = other_2027;
    let _e386: MultiVector = self_2265;
    let _e390: Dipole = other_2027;
    let _e401: MultiVector = self_2265;
    let _e405: Dipole = other_2027;
    let _e416: MultiVector = self_2265;
    let _e420: Dipole = other_2027;
    let _e431: MultiVector = self_2265;
    let _e435: Dipole = other_2027;
    let _e439: MultiVector = self_2265;
    let _e443: Dipole = other_2027;
    let _e454: MultiVector = self_2265;
    let _e458: Dipole = other_2027;
    let _e461: Dipole = other_2027;
    let _e471: MultiVector = self_2265;
    let _e475: Dipole = other_2027;
    let _e478: Dipole = other_2027;
    let _e489: MultiVector = self_2265;
    let _e493: Dipole = other_2027;
    let _e496: Dipole = other_2027;
    let _e507: MultiVector = self_2265;
    let _e511: Dipole = other_2027;
    let _e522: MultiVector = self_2265;
    let _e525: MultiVector = self_2265;
    let _e529: Dipole = other_2027;
    let _e532: Dipole = other_2027;
    let _e542: MultiVector = self_2265;
    let _e546: Dipole = other_2027;
    let _e549: MultiVector = self_2265;
    let _e553: Dipole = other_2027;
    let _e565: MultiVector = self_2265;
    let _e569: Dipole = other_2027;
    let _e581: MultiVector = self_2265;
    let _e585: Dipole = other_2027;
    let _e597: MultiVector = self_2265;
    let _e601: Dipole = other_2027;
    let _e613: MultiVector = self_2265;
    let _e616: MultiVector = self_2265;
    let _e619: MultiVector = self_2265;
    let _e622: MultiVector = self_2265;
    let _e626: Dipole = other_2027;
    let _e638: MultiVector = self_2265;
    let _e642: Dipole = other_2027;
    let _e645: MultiVector = self_2265;
    let _e649: Dipole = other_2027;
    let _e660: MultiVector = self_2265;
    let _e664: Dipole = other_2027;
    let _e675: MultiVector = self_2265;
    let _e679: Dipole = other_2027;
    let _e691: MultiVector = self_2265;
    let _e695: Dipole = other_2027;
    let _e707: MultiVector = self_2265;
    let _e711: Dipole = other_2027;
    let _e723: MultiVector = self_2265;
    let _e727: Dipole = other_2027;
    let _e738: MultiVector = self_2265;
    let _e742: Dipole = other_2027;
    let _e745: MultiVector = self_2265;
    let _e749: Dipole = other_2027;
    let _e752: Dipole = other_2027;
    let _e755: Dipole = other_2027;
    let _e761: MultiVector = self_2265;
    let _e765: Dipole = other_2027;
    let _e769: MultiVector = self_2265;
    let _e773: Dipole = other_2027;
    let _e784: MultiVector = self_2265;
    let _e788: Dipole = other_2027;
    let _e799: MultiVector = self_2265;
    let _e803: Dipole = other_2027;
    let _e814: MultiVector = self_2265;
    let _e818: Dipole = other_2027;
    let _e829: MultiVector = self_2265;
    let _e833: Dipole = other_2027;
    let _e844: MultiVector = self_2265;
    let _e848: Dipole = other_2027;
    let _e859: MultiVector = self_2265;
    let _e863: Dipole = other_2027;
    let _e866: Dipole = other_2027;
    let _e869: Dipole = other_2027;
    let _e881: MultiVector = self_2265;
    let _e885: Dipole = other_2027;
    let _e888: Dipole = other_2027;
    let _e891: Dipole = other_2027;
    let _e903: MultiVector = self_2265;
    let _e907: Dipole = other_2027;
    let _e910: Dipole = other_2027;
    let _e913: Dipole = other_2027;
    let _e925: MultiVector = self_2265;
    let _e927: Dipole = other_2027;
    let _e937: MultiVector = self_2265;
    let _e940: MultiVector = self_2265;
    let _e943: MultiVector = self_2265;
    let _e947: Dipole = other_2027;
    let _e956: MultiVector = self_2265;
    let _e960: Dipole = other_2027;
    let _e963: Dipole = other_2027;
    let _e966: Dipole = other_2027;
    let _e971: MultiVector = self_2265;
    let _e975: Dipole = other_2027;
    let _e978: Dipole = other_2027;
    let _e981: Dipole = other_2027;
    let _e993: MultiVector = self_2265;
    let _e997: Dipole = other_2027;
    let _e1000: Dipole = other_2027;
    let _e1003: Dipole = other_2027;
    let _e1015: MultiVector = self_2265;
    let _e1019: Dipole = other_2027;
    let _e1022: Dipole = other_2027;
    let _e1025: Dipole = other_2027;
    let _e1037: MultiVector = self_2265;
    let _e1040: MultiVector = self_2265;
    let _e1043: MultiVector = self_2265;
    let _e1047: Dipole = other_2027;
    let _e1057: MultiVector = self_2265;
    let _e1061: Dipole = other_2027;
    let _e1072: MultiVector = self_2265;
    let _e1076: Dipole = other_2027;
    let _e1088: MultiVector = self_2265;
    let _e1092: Dipole = other_2027;
    let _e1104: MultiVector = self_2265;
    let _e1108: Dipole = other_2027;
    let _e1111: Dipole = other_2027;
    let _e1114: Dipole = other_2027;
    let _e1117: Dipole = other_2027;
    let _e1132: MultiVector = self_2265;
    let _e1136: Dipole = other_2027;
    let _e1148: MultiVector = self_2265;
    let _e1152: Dipole = other_2027;
    let _e1164: MultiVector = self_2265;
    let _e1168: Dipole = other_2027;
    let _e1180: MultiVector = self_2265;
    let _e1184: Dipole = other_2027;
    let _e1187: Dipole = other_2027;
    let _e1190: Dipole = other_2027;
    let _e1193: Dipole = other_2027;
    let _e1207: MultiVector = self_2265;
    let _e1211: Dipole = other_2027;
    let _e1214: Dipole = other_2027;
    let _e1217: Dipole = other_2027;
    let _e1220: Dipole = other_2027;
    let _e1234: MultiVector = self_2265;
    let _e1238: Dipole = other_2027;
    let _e1241: Dipole = other_2027;
    let _e1244: Dipole = other_2027;
    let _e1247: Dipole = other_2027;
    let _e1261: MultiVector = self_2265;
    let _e1265: Dipole = other_2027;
    let _e1276: MultiVector = self_2265;
    let _e1280: Dipole = other_2027;
    let _e1291: MultiVector = self_2265;
    let _e1295: Dipole = other_2027;
    let _e1307: MultiVector = self_2265;
    let _e1311: Dipole = other_2027;
    let _e1323: MultiVector = self_2265;
    let _e1326: MultiVector = self_2265;
    let _e1329: MultiVector = self_2265;
    let _e1332: MultiVector = self_2265;
    let _e1336: Dipole = other_2027;
    return MultiVector((((((((((((((vec3<f32>(_e4.g3_.w) * vec3<f32>(_e8.g2_.w)) * vec3<f32>(0.0, 0.0, -(1.0))) + ((vec3<f32>(_e19.g6_.x) * vec3<f32>(_e23.g1_.x, _e26.g0_.x, _e29.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e42.g6_.y) * vec3<f32>(_e46.g1_.y, _e49.g0_.y, _e52.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e65.g6_.z) * vec3<f32>(_e69.g1_.z, _e72.g0_.z, _e75.g1_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e88.g7_.x) * vec3<f32>(_e92.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e104.g7_.y) * vec3<f32>(_e108.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e120.g7_.z) * vec3<f32>(_e124.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e136.g8_.x) * vec3<f32>(_e140.g2_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e152.g8_.y) * vec3<f32>(_e156.g2_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e168.g8_.z) * vec3<f32>(_e172.g2_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e184.g8_.w) * vec3<f32>(_e188.g2_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e200.g2_.x) * vec3<f32>(_e204.g2_.x, _e207.g2_.w, _e210.g2_.x)) * vec3<f32>(0.0, -(1.0), 0.0))), (((((((((((((((vec3<f32>(_e222.g0_.y) * vec3<f32>(_e226.g2_.x, _e229.g2_.y, _e232.g2_.z)) + ((vec3<f32>(_e237.g3_.y) * _e241.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e252.g3_.z) * _e256.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e267.g3_.w) * _e271.g1_)) + ((vec3<f32>(_e275.g4_.x) * vec3<f32>(_e279.g2_.z, _e282.g2_.z, _e285.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e297.g4_.y) * vec3<f32>(_e301.g2_.z, _e304.g2_.z, _e307.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e319.g4_.z) * vec3<f32>(_e323.g2_.y, _e326.g2_.x, _e329.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e341.g5_.x) * vec3<f32>(_e345.g2_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e356.g5_.y) * vec3<f32>(_e360.g2_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e371.g5_.z) * vec3<f32>(_e375.g2_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e386.g9_.x) * _e390.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e401.g9_.y) * _e405.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e416.g9_.z) * _e420.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e431.g9_.w) * _e435.g0_)) + ((vec3<f32>(_e439.g3_.x) * _e443.g0_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((vec2<f32>(_e454.g9_.x) * vec2<f32>(_e458.g0_.x, _e461.g2_.x)) * vec2<f32>(1.0, -(1.0))) + ((vec2<f32>(_e471.g9_.y) * vec2<f32>(_e475.g0_.y, _e478.g2_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e489.g9_.z) * vec2<f32>(_e493.g0_.z, _e496.g2_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e507.g9_.w) * vec2<f32>(_e511.g2_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e522.g0_.y, _e525.g0_.x) * vec2<f32>(_e529.g2_.w, _e532.g2_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4<f32>(_e542.g0_.z) * _e546.g2_) + ((vec4<f32>(_e549.g6_.y) * _e553.g2_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e565.g6_.z) * _e569.g2_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e581.g7_.y) * vec4<f32>(_e585.g2_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e597.g7_.z) * vec4<f32>(_e601.g2_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e613.g7_.x, _e616.g6_.x, _e619.g6_.x, _e622.g6_.x) * _e626.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((vec3<f32>(_e638.g0_.z) * _e642.g0_) + ((vec3<f32>(_e645.g6_.y) * _e649.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e660.g6_.z) * _e664.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e675.g8_.x) * vec3<f32>(_e679.g2_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e691.g8_.y) * vec3<f32>(_e695.g2_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e707.g8_.z) * vec3<f32>(_e711.g2_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e723.g6_.x) * _e727.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((((((vec3<f32>(_e738.g0_.z) * _e742.g1_) + (vec3<f32>(_e745.g2_.x) * vec3<f32>(_e749.g2_.x, _e752.g2_.y, _e755.g2_.z))) + (vec3<f32>(_e761.g2_.y) * _e765.g0_)) + ((vec3<f32>(_e769.g6_.x) * _e773.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e784.g6_.y) * _e788.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e799.g6_.z) * _e803.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e814.g7_.x) * _e818.g0_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e829.g7_.y) * _e833.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e844.g7_.z) * _e848.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e859.g8_.x) * vec3<f32>(_e863.g2_.z, _e866.g2_.z, _e869.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e881.g8_.y) * vec3<f32>(_e885.g2_.z, _e888.g2_.z, _e891.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e903.g8_.z) * vec3<f32>(_e907.g2_.y, _e910.g2_.x, _e913.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((_e925.g1_ * vec3<f32>(_e927.g2_.w)) * vec3<f32>(-(1.0)))), ((vec3<f32>(_e937.g9_.x, _e940.g9_.y, _e943.g9_.z) * vec3<f32>(_e947.g2_.w)) * vec3<f32>(-(1.0))), (((((vec3<f32>(_e956.g3_.w) * vec3<f32>(_e960.g2_.x, _e963.g2_.y, _e966.g2_.z)) + ((vec3<f32>(_e971.g9_.x) * vec3<f32>(_e975.g2_.z, _e978.g2_.z, _e981.g2_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e993.g9_.y) * vec3<f32>(_e997.g2_.z, _e1000.g2_.z, _e1003.g2_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1015.g9_.z) * vec3<f32>(_e1019.g2_.y, _e1022.g2_.x, _e1025.g2_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1037.g3_.x, _e1040.g3_.y, _e1043.g3_.z) * vec3<f32>(_e1047.g2_.w)) * vec3<f32>(-(1.0)))), ((((((((((((vec4<f32>(_e1057.g3_.x) * vec4<f32>(_e1061.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e1072.g3_.y) * vec4<f32>(_e1076.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1088.g3_.z) * vec4<f32>(_e1092.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1104.g3_.w) * vec4<f32>(_e1108.g0_.x, _e1111.g0_.y, _e1114.g0_.z, _e1117.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e1132.g4_.x) * _e1136.g2_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1148.g4_.y) * _e1152.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1164.g4_.z) * _e1168.g2_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1180.g9_.x) * vec4<f32>(_e1184.g0_.z, _e1187.g0_.z, _e1190.g0_.y, _e1193.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1207.g9_.y) * vec4<f32>(_e1211.g0_.z, _e1214.g0_.z, _e1217.g0_.x, _e1220.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1234.g9_.z) * vec4<f32>(_e1238.g0_.y, _e1241.g0_.x, _e1244.g0_.y, _e1247.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1261.g0_.x) * _e1265.g2_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e1276.g6_.x) * _e1280.g2_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1291.g6_.y) * _e1295.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1307.g6_.z) * _e1311.g2_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1323.g2_.x, _e1326.g2_.x, _e1329.g2_.x, _e1332.g2_.y) * _e1336.g2_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_dipole_scalar_product(self_2266: MultiVector, other_2028: Dipole) -> Scalar {
    var self_2267: MultiVector;
    var other_2029: Dipole;

    self_2267 = self_2266;
    other_2029 = other_2028;
    let _e5: MultiVector = self_2267;
    let _e8: Dipole = other_2029;
    let _e13: MultiVector = self_2267;
    let _e16: Dipole = other_2029;
    let _e21: MultiVector = self_2267;
    let _e24: Dipole = other_2029;
    return Scalar((((0.0 - (_e5.g5_.x * _e8.g1_.x)) - (_e13.g5_.y * _e16.g1_.y)) - (_e21.g5_.z * _e24.g1_.z)));
}

fn multi_vector_dipole_anti_scalar_product(self_2268: MultiVector, other_2030: Dipole) -> AntiScalar {
    var self_2269: MultiVector;
    var other_2031: Dipole;

    self_2269 = self_2268;
    other_2031 = other_2030;
    let _e5: MultiVector = self_2269;
    let _e8: Dipole = other_2031;
    return AntiScalar((0.0 - (_e5.g3_.w * _e8.g2_.w)));
}

fn multi_vector_line_into(self_2270: MultiVector) -> Line {
    var self_2271: MultiVector;

    self_2271 = self_2270;
    let _e2: MultiVector = self_2271;
    let _e4: MultiVector = self_2271;
    return Line(_e2.g6_, _e4.g7_);
}

fn multi_vector_line_add(self_2272: MultiVector, other_2032: Line) -> MultiVector {
    var self_2273: MultiVector;
    var other_2033: Line;

    self_2273 = self_2272;
    other_2033 = other_2032;
    let _e4: MultiVector = self_2273;
    let _e6: MultiVector = self_2273;
    let _e8: MultiVector = self_2273;
    let _e10: MultiVector = self_2273;
    let _e12: MultiVector = self_2273;
    let _e14: MultiVector = self_2273;
    let _e16: MultiVector = self_2273;
    let _e18: Line = other_2033;
    let _e21: MultiVector = self_2273;
    let _e23: Line = other_2033;
    let _e26: MultiVector = self_2273;
    let _e28: MultiVector = self_2273;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g6_ + _e18.g0_), (_e21.g7_ + _e23.g1_), _e26.g8_, _e28.g9_);
}

fn multi_vector_line_sub(self_2274: MultiVector, other_2034: Line) -> MultiVector {
    var self_2275: MultiVector;
    var other_2035: Line;

    self_2275 = self_2274;
    other_2035 = other_2034;
    let _e4: MultiVector = self_2275;
    let _e6: MultiVector = self_2275;
    let _e8: MultiVector = self_2275;
    let _e10: MultiVector = self_2275;
    let _e12: MultiVector = self_2275;
    let _e14: MultiVector = self_2275;
    let _e16: MultiVector = self_2275;
    let _e18: Line = other_2035;
    let _e21: MultiVector = self_2275;
    let _e23: Line = other_2035;
    let _e26: MultiVector = self_2275;
    let _e28: MultiVector = self_2275;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g6_ - _e18.g0_), (_e21.g7_ - _e23.g1_), _e26.g8_, _e28.g9_);
}

fn multi_vector_line_geometric_anti_product(self_2276: MultiVector, other_2036: Line) -> MultiVector {
    var self_2277: MultiVector;
    var other_2037: Line;

    self_2277 = self_2276;
    other_2037 = other_2036;
    let _e4: MultiVector = self_2277;
    let _e8: Line = other_2037;
    let _e11: Line = other_2037;
    let _e14: Line = other_2037;
    let _e26: MultiVector = self_2277;
    let _e30: Line = other_2037;
    let _e33: Line = other_2037;
    let _e36: Line = other_2037;
    let _e49: MultiVector = self_2277;
    let _e53: Line = other_2037;
    let _e65: MultiVector = self_2277;
    let _e69: Line = other_2037;
    let _e81: MultiVector = self_2277;
    let _e85: Line = other_2037;
    let _e97: MultiVector = self_2277;
    let _e101: Line = other_2037;
    let _e113: MultiVector = self_2277;
    let _e117: Line = other_2037;
    let _e129: MultiVector = self_2277;
    let _e132: MultiVector = self_2277;
    let _e135: MultiVector = self_2277;
    let _e139: Line = other_2037;
    let _e142: Line = other_2037;
    let _e145: Line = other_2037;
    let _e155: MultiVector = self_2277;
    let _e159: Line = other_2037;
    let _e169: MultiVector = self_2277;
    let _e173: Line = other_2037;
    let _e184: MultiVector = self_2277;
    let _e188: Line = other_2037;
    let _e192: MultiVector = self_2277;
    let _e196: Line = other_2037;
    let _e207: MultiVector = self_2277;
    let _e211: Line = other_2037;
    let _e222: MultiVector = self_2277;
    let _e226: Line = other_2037;
    let _e237: MultiVector = self_2277;
    let _e241: Line = other_2037;
    let _e245: MultiVector = self_2277;
    let _e249: Line = other_2037;
    let _e260: MultiVector = self_2277;
    let _e264: Line = other_2037;
    let _e274: MultiVector = self_2277;
    let _e278: Line = other_2037;
    let _e289: MultiVector = self_2277;
    let _e293: Line = other_2037;
    let _e304: MultiVector = self_2277;
    let _e308: Line = other_2037;
    let _e319: MultiVector = self_2277;
    let _e323: Line = other_2037;
    let _e334: MultiVector = self_2277;
    let _e338: Line = other_2037;
    let _e349: MultiVector = self_2277;
    let _e353: Line = other_2037;
    let _e364: MultiVector = self_2277;
    let _e368: Line = other_2037;
    let _e379: MultiVector = self_2277;
    let _e383: Line = other_2037;
    let _e394: MultiVector = self_2277;
    let _e398: Line = other_2037;
    let _e401: Line = other_2037;
    let _e404: Line = other_2037;
    let _e407: Line = other_2037;
    let _e419: MultiVector = self_2277;
    let _e423: Line = other_2037;
    let _e426: Line = other_2037;
    let _e429: Line = other_2037;
    let _e432: Line = other_2037;
    let _e445: MultiVector = self_2277;
    let _e449: Line = other_2037;
    let _e452: Line = other_2037;
    let _e455: Line = other_2037;
    let _e458: Line = other_2037;
    let _e473: MultiVector = self_2277;
    let _e477: Line = other_2037;
    let _e480: Line = other_2037;
    let _e483: Line = other_2037;
    let _e486: Line = other_2037;
    let _e500: MultiVector = self_2277;
    let _e504: Line = other_2037;
    let _e507: Line = other_2037;
    let _e510: Line = other_2037;
    let _e513: Line = other_2037;
    let _e527: MultiVector = self_2277;
    let _e531: Line = other_2037;
    let _e534: Line = other_2037;
    let _e537: Line = other_2037;
    let _e540: Line = other_2037;
    let _e554: MultiVector = self_2277;
    let _e558: Line = other_2037;
    let _e561: Line = other_2037;
    let _e564: Line = other_2037;
    let _e567: Line = other_2037;
    let _e579: MultiVector = self_2277;
    let _e583: Line = other_2037;
    let _e586: Line = other_2037;
    let _e589: Line = other_2037;
    let _e592: Line = other_2037;
    let _e605: MultiVector = self_2277;
    let _e609: Line = other_2037;
    let _e612: MultiVector = self_2277;
    let _e616: Line = other_2037;
    let _e627: MultiVector = self_2277;
    let _e631: Line = other_2037;
    let _e642: MultiVector = self_2277;
    let _e646: Line = other_2037;
    let _e657: MultiVector = self_2277;
    let _e661: Line = other_2037;
    let _e664: MultiVector = self_2277;
    let _e668: Line = other_2037;
    let _e672: MultiVector = self_2277;
    let _e676: Line = other_2037;
    let _e687: MultiVector = self_2277;
    let _e691: Line = other_2037;
    let _e702: MultiVector = self_2277;
    let _e706: Line = other_2037;
    let _e717: MultiVector = self_2277;
    let _e721: Line = other_2037;
    let _e732: MultiVector = self_2277;
    let _e736: Line = other_2037;
    let _e747: MultiVector = self_2277;
    let _e751: Line = other_2037;
    let _e762: MultiVector = self_2277;
    let _e766: Line = other_2037;
    let _e769: MultiVector = self_2277;
    let _e773: Line = other_2037;
    let _e784: MultiVector = self_2277;
    let _e788: Line = other_2037;
    let _e799: MultiVector = self_2277;
    let _e803: Line = other_2037;
    let _e814: MultiVector = self_2277;
    let _e818: Line = other_2037;
    let _e821: MultiVector = self_2277;
    let _e825: Line = other_2037;
    let _e829: MultiVector = self_2277;
    let _e833: Line = other_2037;
    let _e844: MultiVector = self_2277;
    let _e848: Line = other_2037;
    let _e859: MultiVector = self_2277;
    let _e863: Line = other_2037;
    let _e874: MultiVector = self_2277;
    let _e878: Line = other_2037;
    let _e889: MultiVector = self_2277;
    let _e893: Line = other_2037;
    let _e904: MultiVector = self_2277;
    let _e908: Line = other_2037;
    let _e919: MultiVector = self_2277;
    let _e923: Line = other_2037;
    let _e935: MultiVector = self_2277;
    let _e939: Line = other_2037;
    let _e952: MultiVector = self_2277;
    let _e956: Line = other_2037;
    let _e959: Line = other_2037;
    let _e962: Line = other_2037;
    let _e965: Line = other_2037;
    let _e977: MultiVector = self_2277;
    let _e981: Line = other_2037;
    let _e984: Line = other_2037;
    let _e987: Line = other_2037;
    let _e990: Line = other_2037;
    let _e1003: MultiVector = self_2277;
    let _e1007: Line = other_2037;
    let _e1010: Line = other_2037;
    let _e1013: Line = other_2037;
    let _e1016: Line = other_2037;
    let _e1029: MultiVector = self_2277;
    let _e1033: Line = other_2037;
    let _e1036: Line = other_2037;
    let _e1039: Line = other_2037;
    let _e1042: Line = other_2037;
    let _e1055: MultiVector = self_2277;
    let _e1059: Line = other_2037;
    let _e1072: MultiVector = self_2277;
    let _e1076: Line = other_2037;
    let _e1088: MultiVector = self_2277;
    let _e1092: Line = other_2037;
    let _e1105: MultiVector = self_2277;
    let _e1109: Line = other_2037;
    let _e1112: Line = other_2037;
    let _e1115: Line = other_2037;
    let _e1118: Line = other_2037;
    let _e1131: MultiVector = self_2277;
    let _e1135: Line = other_2037;
    let _e1138: Line = other_2037;
    let _e1141: Line = other_2037;
    let _e1144: Line = other_2037;
    let _e1157: MultiVector = self_2277;
    let _e1161: Line = other_2037;
    let _e1164: Line = other_2037;
    let _e1167: Line = other_2037;
    let _e1170: Line = other_2037;
    let _e1183: MultiVector = self_2277;
    let _e1186: Line = other_2037;
    let _e1189: Line = other_2037;
    let _e1192: Line = other_2037;
    let _e1195: Line = other_2037;
    return MultiVector((((((((((vec3<f32>(_e4.g4_.y) * vec3<f32>(_e8.g1_.y, _e11.g0_.y, _e14.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0)) + ((vec3<f32>(_e26.g4_.z) * vec3<f32>(_e30.g1_.z, _e33.g0_.z, _e36.g1_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e49.g5_.x) * vec3<f32>(_e53.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e65.g5_.y) * vec3<f32>(_e69.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e81.g5_.z) * vec3<f32>(_e85.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e97.g6_.y) * vec3<f32>(_e101.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e113.g6_.z) * vec3<f32>(_e117.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e129.g4_.x, _e132.g4_.x, _e135.g6_.x) * vec3<f32>(_e139.g1_.x, _e142.g0_.x, _e145.g0_.x)) * vec3<f32>(-(1.0)))), (((((((((vec3<f32>(_e155.g1_.y) * _e159.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e169.g1_.z) * _e173.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e184.g2_.x) * _e188.g1_)) + ((vec3<f32>(_e192.g8_.x) * _e196.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e207.g8_.y) * _e211.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e222.g8_.z) * _e226.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e237.g8_.w) * _e241.g0_)) + ((vec3<f32>(_e245.g1_.x) * _e249.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((((vec2<f32>(_e260.g6_.y) * vec2<f32>(_e264.g1_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e274.g6_.z) * vec2<f32>(_e278.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e289.g7_.x) * vec2<f32>(_e293.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e304.g7_.y) * vec2<f32>(_e308.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e319.g7_.z) * vec2<f32>(_e323.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e334.g8_.x) * vec2<f32>(_e338.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e349.g8_.y) * vec2<f32>(_e353.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e364.g8_.z) * vec2<f32>(_e368.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e379.g6_.x) * vec2<f32>(_e383.g1_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((((vec4<f32>(_e394.g3_.y) * vec4<f32>(_e398.g0_.z, _e401.g0_.z, _e404.g0_.x, _e407.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e419.g3_.z) * vec4<f32>(_e423.g0_.y, _e426.g0_.x, _e429.g0_.y, _e432.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e445.g3_.w) * vec4<f32>(_e449.g1_.x, _e452.g1_.y, _e455.g1_.z, _e458.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e473.g9_.x) * vec4<f32>(_e477.g1_.z, _e480.g1_.z, _e483.g1_.y, _e486.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e500.g9_.y) * vec4<f32>(_e504.g1_.z, _e507.g1_.z, _e510.g1_.x, _e513.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e527.g9_.z) * vec4<f32>(_e531.g1_.y, _e534.g1_.x, _e537.g1_.y, _e540.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e554.g9_.w) * vec4<f32>(_e558.g0_.x, _e561.g0_.y, _e564.g0_.z, _e567.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e579.g3_.x) * vec4<f32>(_e583.g0_.x, _e586.g0_.z, _e589.g0_.y, _e592.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e605.g0_.y) * _e609.g0_) + ((vec3<f32>(_e612.g4_.y) * _e616.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e627.g4_.z) * _e631.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e642.g4_.x) * _e646.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec3<f32>(_e657.g0_.x) * _e661.g0_) + (vec3<f32>(_e664.g0_.y) * _e668.g1_)) + ((vec3<f32>(_e672.g4_.y) * _e676.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e687.g4_.z) * _e691.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e702.g5_.x) * _e706.g0_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e717.g5_.y) * _e721.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e732.g5_.z) * _e736.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e747.g4_.x) * _e751.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((vec3<f32>(_e762.g0_.z) * _e766.g0_) + ((vec3<f32>(_e769.g6_.y) * _e773.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e784.g6_.z) * _e788.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e799.g6_.x) * _e803.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec3<f32>(_e814.g0_.z) * _e818.g1_) + (vec3<f32>(_e821.g2_.y) * _e825.g0_)) + ((vec3<f32>(_e829.g6_.y) * _e833.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e844.g6_.z) * _e848.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e859.g7_.x) * _e863.g0_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e874.g7_.y) * _e878.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e889.g7_.z) * _e893.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e904.g6_.x) * _e908.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e919.g1_.y) * vec4<f32>(_e923.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e935.g1_.z) * vec4<f32>(_e939.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e952.g2_.x) * vec4<f32>(_e956.g0_.x, _e959.g0_.y, _e962.g0_.z, _e965.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e977.g8_.x) * vec4<f32>(_e981.g0_.z, _e984.g0_.z, _e987.g0_.y, _e990.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1003.g8_.y) * vec4<f32>(_e1007.g0_.z, _e1010.g0_.z, _e1013.g0_.x, _e1016.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e1029.g8_.z) * vec4<f32>(_e1033.g0_.y, _e1036.g0_.x, _e1039.g0_.y, _e1042.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e1055.g1_.x) * vec4<f32>(_e1059.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((vec4<f32>(_e1072.g3_.y) * vec4<f32>(_e1076.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1088.g3_.z) * vec4<f32>(_e1092.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1105.g9_.x) * vec4<f32>(_e1109.g0_.z, _e1112.g0_.z, _e1115.g0_.y, _e1118.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1131.g9_.y) * vec4<f32>(_e1135.g0_.z, _e1138.g0_.z, _e1141.g0_.x, _e1144.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e1157.g9_.z) * vec4<f32>(_e1161.g0_.y, _e1164.g0_.x, _e1167.g0_.y, _e1170.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e1183.g3_.wwwx * vec4<f32>(_e1186.g0_.x, _e1189.g0_.y, _e1192.g0_.z, _e1195.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_line_anti_scalar_product(self_2278: MultiVector, other_2038: Line) -> AntiScalar {
    var self_2279: MultiVector;
    var other_2039: Line;

    self_2279 = self_2278;
    other_2039 = other_2038;
    let _e5: MultiVector = self_2279;
    let _e8: Line = other_2039;
    let _e13: MultiVector = self_2279;
    let _e16: Line = other_2039;
    let _e21: MultiVector = self_2279;
    let _e24: Line = other_2039;
    return AntiScalar((((0.0 - (_e5.g6_.x * _e8.g0_.x)) - (_e13.g6_.y * _e16.g0_.y)) - (_e21.g6_.z * _e24.g0_.z)));
}

fn multi_vector_circle_into(self_2280: MultiVector) -> Circle {
    var self_2281: MultiVector;

    self_2281 = self_2280;
    let _e2: MultiVector = self_2281;
    let _e4: MultiVector = self_2281;
    let _e6: MultiVector = self_2281;
    return Circle(_e2.g8_, _e4.g6_, _e6.g7_);
}

fn multi_vector_circle_add(self_2282: MultiVector, other_2040: Circle) -> MultiVector {
    var self_2283: MultiVector;
    var other_2041: Circle;

    self_2283 = self_2282;
    other_2041 = other_2040;
    let _e4: MultiVector = self_2283;
    let _e6: MultiVector = self_2283;
    let _e8: MultiVector = self_2283;
    let _e10: MultiVector = self_2283;
    let _e12: MultiVector = self_2283;
    let _e14: MultiVector = self_2283;
    let _e16: MultiVector = self_2283;
    let _e18: Circle = other_2041;
    let _e21: MultiVector = self_2283;
    let _e23: Circle = other_2041;
    let _e26: MultiVector = self_2283;
    let _e28: Circle = other_2041;
    let _e31: MultiVector = self_2283;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g6_ + _e18.g1_), (_e21.g7_ + _e23.g2_), (_e26.g8_ + _e28.g0_), _e31.g9_);
}

fn multi_vector_circle_sub(self_2284: MultiVector, other_2042: Circle) -> MultiVector {
    var self_2285: MultiVector;
    var other_2043: Circle;

    self_2285 = self_2284;
    other_2043 = other_2042;
    let _e4: MultiVector = self_2285;
    let _e6: MultiVector = self_2285;
    let _e8: MultiVector = self_2285;
    let _e10: MultiVector = self_2285;
    let _e12: MultiVector = self_2285;
    let _e14: MultiVector = self_2285;
    let _e16: MultiVector = self_2285;
    let _e18: Circle = other_2043;
    let _e21: MultiVector = self_2285;
    let _e23: Circle = other_2043;
    let _e26: MultiVector = self_2285;
    let _e28: Circle = other_2043;
    let _e31: MultiVector = self_2285;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, (_e16.g6_ - _e18.g1_), (_e21.g7_ - _e23.g2_), (_e26.g8_ - _e28.g0_), _e31.g9_);
}

fn multi_vector_circle_geometric_product(self_2286: MultiVector, other_2044: Circle) -> MultiVector {
    var self_2287: MultiVector;
    var other_2045: Circle;

    self_2287 = self_2286;
    other_2045 = other_2044;
    let _e4: MultiVector = self_2287;
    let _e8: Circle = other_2045;
    let _e18: MultiVector = self_2287;
    let _e22: Circle = other_2045;
    let _e33: MultiVector = self_2287;
    let _e37: Circle = other_2045;
    let _e48: MultiVector = self_2287;
    let _e52: Circle = other_2045;
    let _e64: MultiVector = self_2287;
    let _e68: Circle = other_2045;
    let _e80: MultiVector = self_2287;
    let _e84: Circle = other_2045;
    let _e96: MultiVector = self_2287;
    let _e100: Circle = other_2045;
    let _e112: MultiVector = self_2287;
    let _e116: Circle = other_2045;
    let _e128: MultiVector = self_2287;
    let _e132: Circle = other_2045;
    let _e144: MultiVector = self_2287;
    let _e148: Circle = other_2045;
    let _e160: MultiVector = self_2287;
    let _e164: Circle = other_2045;
    let _e176: MultiVector = self_2287;
    let _e180: Circle = other_2045;
    let _e192: MultiVector = self_2287;
    let _e196: Circle = other_2045;
    let _e208: MultiVector = self_2287;
    let _e212: Circle = other_2045;
    let _e224: MultiVector = self_2287;
    let _e228: Circle = other_2045;
    let _e239: MultiVector = self_2287;
    let _e241: Circle = other_2045;
    let _e248: MultiVector = self_2287;
    let _e252: Circle = other_2045;
    let _e255: Circle = other_2045;
    let _e261: MultiVector = self_2287;
    let _e265: Circle = other_2045;
    let _e268: Circle = other_2045;
    let _e274: MultiVector = self_2287;
    let _e278: Circle = other_2045;
    let _e281: Circle = other_2045;
    let _e287: MultiVector = self_2287;
    let _e291: Circle = other_2045;
    let _e301: MultiVector = self_2287;
    let _e304: MultiVector = self_2287;
    let _e308: Circle = other_2045;
    let _e311: Circle = other_2045;
    let _e322: MultiVector = self_2287;
    let _e326: Circle = other_2045;
    let _e329: Circle = other_2045;
    let _e332: Circle = other_2045;
    let _e335: Circle = other_2045;
    let _e348: MultiVector = self_2287;
    let _e352: Circle = other_2045;
    let _e355: Circle = other_2045;
    let _e358: Circle = other_2045;
    let _e361: Circle = other_2045;
    let _e375: MultiVector = self_2287;
    let _e379: Circle = other_2045;
    let _e382: Circle = other_2045;
    let _e385: Circle = other_2045;
    let _e388: Circle = other_2045;
    let _e402: MultiVector = self_2287;
    let _e406: Circle = other_2045;
    let _e418: MultiVector = self_2287;
    let _e422: Circle = other_2045;
    let _e434: MultiVector = self_2287;
    let _e438: Circle = other_2045;
    let _e450: MultiVector = self_2287;
    let _e454: Circle = other_2045;
    let _e467: MultiVector = self_2287;
    let _e471: Circle = other_2045;
    let _e484: MultiVector = self_2287;
    let _e488: Circle = other_2045;
    let _e501: MultiVector = self_2287;
    let _e505: Circle = other_2045;
    let _e508: Circle = other_2045;
    let _e511: Circle = other_2045;
    let _e514: Circle = other_2045;
    let _e526: MultiVector = self_2287;
    let _e529: MultiVector = self_2287;
    let _e532: MultiVector = self_2287;
    let _e535: MultiVector = self_2287;
    let _e539: Circle = other_2045;
    let _e550: MultiVector = self_2287;
    let _e554: Circle = other_2045;
    let _e557: Circle = other_2045;
    let _e560: Circle = other_2045;
    let _e571: MultiVector = self_2287;
    let _e575: Circle = other_2045;
    let _e578: Circle = other_2045;
    let _e581: Circle = other_2045;
    let _e593: MultiVector = self_2287;
    let _e597: Circle = other_2045;
    let _e608: MultiVector = self_2287;
    let _e612: Circle = other_2045;
    let _e623: MultiVector = self_2287;
    let _e627: Circle = other_2045;
    let _e638: MultiVector = self_2287;
    let _e642: Circle = other_2045;
    let _e645: Circle = other_2045;
    let _e648: Circle = other_2045;
    let _e654: MultiVector = self_2287;
    let _e658: Circle = other_2045;
    let _e661: Circle = other_2045;
    let _e664: Circle = other_2045;
    let _e676: MultiVector = self_2287;
    let _e678: Circle = other_2045;
    let _e687: MultiVector = self_2287;
    let _e691: Circle = other_2045;
    let _e694: MultiVector = self_2287;
    let _e698: Circle = other_2045;
    let _e702: MultiVector = self_2287;
    let _e706: Circle = other_2045;
    let _e709: Circle = other_2045;
    let _e712: Circle = other_2045;
    let _e724: MultiVector = self_2287;
    let _e728: Circle = other_2045;
    let _e731: Circle = other_2045;
    let _e734: Circle = other_2045;
    let _e746: MultiVector = self_2287;
    let _e750: Circle = other_2045;
    let _e761: MultiVector = self_2287;
    let _e765: Circle = other_2045;
    let _e776: MultiVector = self_2287;
    let _e780: Circle = other_2045;
    let _e791: MultiVector = self_2287;
    let _e795: Circle = other_2045;
    let _e806: MultiVector = self_2287;
    let _e810: Circle = other_2045;
    let _e821: MultiVector = self_2287;
    let _e825: Circle = other_2045;
    let _e836: MultiVector = self_2287;
    let _e840: Circle = other_2045;
    let _e852: MultiVector = self_2287;
    let _e856: Circle = other_2045;
    let _e868: MultiVector = self_2287;
    let _e872: Circle = other_2045;
    let _e875: Circle = other_2045;
    let _e878: Circle = other_2045;
    let _e884: MultiVector = self_2287;
    let _e887: MultiVector = self_2287;
    let _e890: MultiVector = self_2287;
    let _e894: Circle = other_2045;
    let _e897: Circle = other_2045;
    let _e900: Circle = other_2045;
    let _e913: MultiVector = self_2287;
    let _e917: Circle = other_2045;
    let _e920: MultiVector = self_2287;
    let _e924: Circle = other_2045;
    let _e935: MultiVector = self_2287;
    let _e939: Circle = other_2045;
    let _e950: MultiVector = self_2287;
    let _e954: Circle = other_2045;
    let _e965: MultiVector = self_2287;
    let _e968: MultiVector = self_2287;
    let _e971: MultiVector = self_2287;
    let _e975: Circle = other_2045;
    let _e981: MultiVector = self_2287;
    let _e985: Circle = other_2045;
    let _e988: MultiVector = self_2287;
    let _e992: Circle = other_2045;
    let _e1004: MultiVector = self_2287;
    let _e1008: Circle = other_2045;
    let _e1020: MultiVector = self_2287;
    let _e1024: Circle = other_2045;
    let _e1036: MultiVector = self_2287;
    let _e1039: MultiVector = self_2287;
    let _e1042: MultiVector = self_2287;
    let _e1045: MultiVector = self_2287;
    let _e1049: Circle = other_2045;
    let _e1063: MultiVector = self_2287;
    let _e1067: Circle = other_2045;
    let _e1070: Circle = other_2045;
    let _e1073: Circle = other_2045;
    let _e1076: Circle = other_2045;
    let _e1089: MultiVector = self_2287;
    let _e1093: Circle = other_2045;
    let _e1096: Circle = other_2045;
    let _e1099: Circle = other_2045;
    let _e1102: Circle = other_2045;
    let _e1116: MultiVector = self_2287;
    let _e1120: Circle = other_2045;
    let _e1123: Circle = other_2045;
    let _e1126: Circle = other_2045;
    let _e1129: Circle = other_2045;
    let _e1141: MultiVector = self_2287;
    let _e1145: Circle = other_2045;
    let _e1149: MultiVector = self_2287;
    let _e1153: Circle = other_2045;
    let _e1165: MultiVector = self_2287;
    let _e1169: Circle = other_2045;
    let _e1181: MultiVector = self_2287;
    let _e1185: Circle = other_2045;
    let _e1197: MultiVector = self_2287;
    let _e1201: Circle = other_2045;
    let _e1213: MultiVector = self_2287;
    let _e1217: Circle = other_2045;
    let _e1229: MultiVector = self_2287;
    let _e1233: Circle = other_2045;
    let _e1245: MultiVector = self_2287;
    let _e1249: Circle = other_2045;
    let _e1252: Circle = other_2045;
    let _e1255: Circle = other_2045;
    let _e1258: Circle = other_2045;
    let _e1271: MultiVector = self_2287;
    let _e1275: Circle = other_2045;
    let _e1278: Circle = other_2045;
    let _e1281: Circle = other_2045;
    let _e1284: Circle = other_2045;
    let _e1297: MultiVector = self_2287;
    let _e1301: Circle = other_2045;
    let _e1304: Circle = other_2045;
    let _e1307: Circle = other_2045;
    let _e1310: Circle = other_2045;
    let _e1323: MultiVector = self_2287;
    let _e1327: Circle = other_2045;
    let _e1330: Circle = other_2045;
    let _e1333: Circle = other_2045;
    let _e1336: Circle = other_2045;
    let _e1348: MultiVector = self_2287;
    let _e1352: Circle = other_2045;
    let _e1355: Circle = other_2045;
    let _e1358: Circle = other_2045;
    let _e1361: Circle = other_2045;
    return MultiVector(((((((((((((((((vec3<f32>(_e4.g1_.y) * vec3<f32>(_e8.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0)) + ((vec3<f32>(_e18.g1_.z) * vec3<f32>(_e22.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e33.g2_.x) * vec3<f32>(_e37.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e48.g3_.x) * vec3<f32>(_e52.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e64.g3_.y) * vec3<f32>(_e68.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e80.g3_.z) * vec3<f32>(_e84.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e96.g3_.w) * vec3<f32>(_e100.g0_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e112.g4_.x) * vec3<f32>(_e116.g2_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e128.g4_.y) * vec3<f32>(_e132.g2_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e144.g4_.z) * vec3<f32>(_e148.g2_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e160.g5_.x) * vec3<f32>(_e164.g1_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e176.g5_.y) * vec3<f32>(_e180.g1_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e192.g5_.z) * vec3<f32>(_e196.g1_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e208.g8_.w) * vec3<f32>(_e212.g0_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e224.g1_.x) * vec3<f32>(_e228.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))), (_e239.g5_ * vec3<f32>(_e241.g0_.w)), (((((vec2<f32>(0.0) - (vec2<f32>(_e248.g5_.x) * vec2<f32>(_e252.g0_.x, _e255.g2_.x))) - (vec2<f32>(_e261.g5_.y) * vec2<f32>(_e265.g0_.y, _e268.g2_.y))) - (vec2<f32>(_e274.g5_.z) * vec2<f32>(_e278.g0_.z, _e281.g2_.z))) + ((vec2<f32>(_e287.g9_.w) * vec2<f32>(_e291.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e301.g0_.y, _e304.g0_.x) * vec2<f32>(_e308.g0_.w, _e311.g0_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((((((vec4<f32>(_e322.g1_.x) * vec4<f32>(_e326.g2_.z, _e329.g2_.z, _e332.g2_.y, _e335.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e348.g1_.y) * vec4<f32>(_e352.g2_.z, _e355.g2_.z, _e358.g2_.x, _e361.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e375.g1_.z) * vec4<f32>(_e379.g2_.y, _e382.g2_.x, _e385.g2_.y, _e388.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e402.g7_.x) * _e406.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e418.g7_.y) * _e422.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e434.g7_.z) * _e438.g0_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e450.g8_.x) * vec4<f32>(_e454.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e467.g8_.y) * vec4<f32>(_e471.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e484.g8_.z) * vec4<f32>(_e488.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e501.g8_.w) * vec4<f32>(_e505.g2_.x, _e508.g2_.y, _e511.g2_.z, _e514.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e526.g0_.x, _e529.g0_.x, _e532.g0_.x, _e535.g0_.z) * _e539.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec3<f32>(_e550.g1_.y) * vec3<f32>(_e554.g0_.z, _e557.g0_.z, _e560.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e571.g1_.z) * vec3<f32>(_e575.g0_.y, _e578.g0_.x, _e581.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e593.g8_.x) * vec3<f32>(_e597.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e608.g8_.y) * vec3<f32>(_e612.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e623.g8_.z) * vec3<f32>(_e627.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e638.g8_.w) * vec3<f32>(_e642.g0_.x, _e645.g0_.y, _e648.g0_.z))) + ((vec3<f32>(_e654.g1_.x) * vec3<f32>(_e658.g0_.x, _e661.g0_.z, _e664.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e676.g1_ * vec3<f32>(_e678.g0_.w)) * vec3<f32>(-(1.0))), ((((((((((((((vec3<f32>(_e687.g0_.x) * _e691.g1_) + (vec3<f32>(_e694.g0_.y) * _e698.g2_)) + ((vec3<f32>(_e702.g3_.y) * vec3<f32>(_e706.g0_.z, _e709.g0_.z, _e712.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e724.g3_.z) * vec3<f32>(_e728.g0_.y, _e731.g0_.x, _e734.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e746.g4_.x) * _e750.g2_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e761.g4_.y) * _e765.g2_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e776.g4_.z) * _e780.g2_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e791.g5_.x) * _e795.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e806.g5_.y) * _e810.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e821.g5_.z) * _e825.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e836.g9_.y) * vec3<f32>(_e840.g0_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e852.g9_.z) * vec3<f32>(_e856.g0_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (vec3<f32>(_e868.g9_.w) * vec3<f32>(_e872.g0_.x, _e875.g0_.y, _e878.g0_.z))) + ((vec3<f32>(_e884.g9_.x, _e887.g3_.x, _e890.g3_.x) * vec3<f32>(_e894.g0_.w, _e897.g0_.z, _e900.g0_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))), (((((vec3<f32>(_e913.g0_.x) * _e917.g2_) + ((vec3<f32>(_e920.g5_.x) * _e924.g2_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e935.g5_.y) * _e939.g2_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e950.g5_.z) * _e954.g2_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e965.g3_.x, _e968.g3_.y, _e971.g3_.z) * vec3<f32>(_e975.g0_.w))), (((((vec4<f32>(_e981.g0_.x) * _e985.g0_) + ((vec4<f32>(_e988.g5_.x) * _e992.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1004.g5_.y) * _e1008.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1020.g5_.z) * _e1024.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1036.g4_.x, _e1039.g4_.y, _e1042.g4_.z, _e1045.g4_.x) * _e1049.g0_.wwwx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((((((((((((((((vec4<f32>(_e1063.g1_.y) * vec4<f32>(_e1067.g1_.z, _e1070.g1_.z, _e1073.g1_.x, _e1076.g2_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e1089.g1_.z) * vec4<f32>(_e1093.g1_.y, _e1096.g1_.x, _e1099.g1_.y, _e1102.g2_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1116.g2_.x) * vec4<f32>(_e1120.g2_.x, _e1123.g2_.y, _e1126.g2_.z, _e1129.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) - (vec4<f32>(_e1141.g2_.y) * _e1145.g0_)) + ((vec4<f32>(_e1149.g6_.x) * vec4<f32>(_e1153.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1165.g6_.y) * vec4<f32>(_e1169.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1181.g6_.z) * vec4<f32>(_e1185.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1197.g7_.x) * _e1201.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1213.g7_.y) * _e1217.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1229.g7_.z) * _e1233.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1245.g8_.x) * vec4<f32>(_e1249.g2_.z, _e1252.g2_.z, _e1255.g2_.y, _e1258.g2_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1271.g8_.y) * vec4<f32>(_e1275.g2_.z, _e1278.g2_.z, _e1281.g2_.x, _e1284.g2_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1297.g8_.z) * vec4<f32>(_e1301.g2_.y, _e1304.g2_.x, _e1307.g2_.y, _e1310.g2_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1323.g8_.w) * vec4<f32>(_e1327.g1_.x, _e1330.g1_.y, _e1333.g1_.z, _e1336.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1348.g1_.x) * vec4<f32>(_e1352.g1_.x, _e1355.g1_.z, _e1358.g1_.y, _e1361.g2_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_circle_geometric_anti_product(self_2288: MultiVector, other_2046: Circle) -> MultiVector {
    var self_2289: MultiVector;
    var other_2047: Circle;

    self_2289 = self_2288;
    other_2047 = other_2046;
    let _e4: MultiVector = self_2289;
    let _e8: Circle = other_2047;
    let _e19: MultiVector = self_2289;
    let _e23: Circle = other_2047;
    let _e35: MultiVector = self_2289;
    let _e39: Circle = other_2047;
    let _e51: MultiVector = self_2289;
    let _e55: Circle = other_2047;
    let _e58: Circle = other_2047;
    let _e61: Circle = other_2047;
    let _e74: MultiVector = self_2289;
    let _e78: Circle = other_2047;
    let _e81: Circle = other_2047;
    let _e84: Circle = other_2047;
    let _e97: MultiVector = self_2289;
    let _e101: Circle = other_2047;
    let _e104: Circle = other_2047;
    let _e107: Circle = other_2047;
    let _e120: MultiVector = self_2289;
    let _e124: Circle = other_2047;
    let _e136: MultiVector = self_2289;
    let _e140: Circle = other_2047;
    let _e152: MultiVector = self_2289;
    let _e156: Circle = other_2047;
    let _e168: MultiVector = self_2289;
    let _e172: Circle = other_2047;
    let _e184: MultiVector = self_2289;
    let _e188: Circle = other_2047;
    let _e200: MultiVector = self_2289;
    let _e204: Circle = other_2047;
    let _e216: MultiVector = self_2289;
    let _e220: Circle = other_2047;
    let _e232: MultiVector = self_2289;
    let _e236: Circle = other_2047;
    let _e248: MultiVector = self_2289;
    let _e251: MultiVector = self_2289;
    let _e254: MultiVector = self_2289;
    let _e258: Circle = other_2047;
    let _e271: MultiVector = self_2289;
    let _e275: Circle = other_2047;
    let _e285: MultiVector = self_2289;
    let _e289: Circle = other_2047;
    let _e300: MultiVector = self_2289;
    let _e304: Circle = other_2047;
    let _e308: MultiVector = self_2289;
    let _e312: Circle = other_2047;
    let _e315: Circle = other_2047;
    let _e318: Circle = other_2047;
    let _e324: MultiVector = self_2289;
    let _e328: Circle = other_2047;
    let _e339: MultiVector = self_2289;
    let _e343: Circle = other_2047;
    let _e354: MultiVector = self_2289;
    let _e358: Circle = other_2047;
    let _e369: MultiVector = self_2289;
    let _e373: Circle = other_2047;
    let _e376: Circle = other_2047;
    let _e379: Circle = other_2047;
    let _e391: MultiVector = self_2289;
    let _e395: Circle = other_2047;
    let _e398: Circle = other_2047;
    let _e401: Circle = other_2047;
    let _e413: MultiVector = self_2289;
    let _e417: Circle = other_2047;
    let _e420: Circle = other_2047;
    let _e423: Circle = other_2047;
    let _e435: MultiVector = self_2289;
    let _e439: Circle = other_2047;
    let _e450: MultiVector = self_2289;
    let _e454: Circle = other_2047;
    let _e465: MultiVector = self_2289;
    let _e469: Circle = other_2047;
    let _e480: MultiVector = self_2289;
    let _e484: Circle = other_2047;
    let _e488: MultiVector = self_2289;
    let _e492: Circle = other_2047;
    let _e505: MultiVector = self_2289;
    let _e509: Circle = other_2047;
    let _e512: Circle = other_2047;
    let _e518: MultiVector = self_2289;
    let _e522: Circle = other_2047;
    let _e525: Circle = other_2047;
    let _e531: MultiVector = self_2289;
    let _e535: Circle = other_2047;
    let _e538: Circle = other_2047;
    let _e544: MultiVector = self_2289;
    let _e548: Circle = other_2047;
    let _e559: MultiVector = self_2289;
    let _e563: Circle = other_2047;
    let _e574: MultiVector = self_2289;
    let _e578: Circle = other_2047;
    let _e589: MultiVector = self_2289;
    let _e593: Circle = other_2047;
    let _e604: MultiVector = self_2289;
    let _e608: Circle = other_2047;
    let _e619: MultiVector = self_2289;
    let _e623: Circle = other_2047;
    let _e634: MultiVector = self_2289;
    let _e638: Circle = other_2047;
    let _e641: Circle = other_2047;
    let _e644: Circle = other_2047;
    let _e647: Circle = other_2047;
    let _e659: MultiVector = self_2289;
    let _e663: Circle = other_2047;
    let _e666: Circle = other_2047;
    let _e669: Circle = other_2047;
    let _e672: Circle = other_2047;
    let _e685: MultiVector = self_2289;
    let _e689: Circle = other_2047;
    let _e692: Circle = other_2047;
    let _e695: Circle = other_2047;
    let _e698: Circle = other_2047;
    let _e713: MultiVector = self_2289;
    let _e717: Circle = other_2047;
    let _e720: Circle = other_2047;
    let _e723: Circle = other_2047;
    let _e726: Circle = other_2047;
    let _e740: MultiVector = self_2289;
    let _e744: Circle = other_2047;
    let _e747: Circle = other_2047;
    let _e750: Circle = other_2047;
    let _e753: Circle = other_2047;
    let _e767: MultiVector = self_2289;
    let _e771: Circle = other_2047;
    let _e774: Circle = other_2047;
    let _e777: Circle = other_2047;
    let _e780: Circle = other_2047;
    let _e794: MultiVector = self_2289;
    let _e798: Circle = other_2047;
    let _e801: Circle = other_2047;
    let _e804: Circle = other_2047;
    let _e807: Circle = other_2047;
    let _e819: MultiVector = self_2289;
    let _e823: Circle = other_2047;
    let _e826: Circle = other_2047;
    let _e829: Circle = other_2047;
    let _e832: Circle = other_2047;
    let _e845: MultiVector = self_2289;
    let _e849: Circle = other_2047;
    let _e852: MultiVector = self_2289;
    let _e856: Circle = other_2047;
    let _e859: Circle = other_2047;
    let _e862: Circle = other_2047;
    let _e868: MultiVector = self_2289;
    let _e872: Circle = other_2047;
    let _e883: MultiVector = self_2289;
    let _e887: Circle = other_2047;
    let _e898: MultiVector = self_2289;
    let _e902: Circle = other_2047;
    let _e905: Circle = other_2047;
    let _e908: Circle = other_2047;
    let _e920: MultiVector = self_2289;
    let _e924: Circle = other_2047;
    let _e927: Circle = other_2047;
    let _e930: Circle = other_2047;
    let _e942: MultiVector = self_2289;
    let _e946: Circle = other_2047;
    let _e949: Circle = other_2047;
    let _e952: Circle = other_2047;
    let _e964: MultiVector = self_2289;
    let _e968: Circle = other_2047;
    let _e979: MultiVector = self_2289;
    let _e983: Circle = other_2047;
    let _e986: MultiVector = self_2289;
    let _e990: Circle = other_2047;
    let _e994: MultiVector = self_2289;
    let _e998: Circle = other_2047;
    let _e1001: Circle = other_2047;
    let _e1004: Circle = other_2047;
    let _e1016: MultiVector = self_2289;
    let _e1020: Circle = other_2047;
    let _e1023: Circle = other_2047;
    let _e1026: Circle = other_2047;
    let _e1038: MultiVector = self_2289;
    let _e1042: Circle = other_2047;
    let _e1053: MultiVector = self_2289;
    let _e1057: Circle = other_2047;
    let _e1068: MultiVector = self_2289;
    let _e1072: Circle = other_2047;
    let _e1083: MultiVector = self_2289;
    let _e1087: Circle = other_2047;
    let _e1098: MultiVector = self_2289;
    let _e1102: Circle = other_2047;
    let _e1113: MultiVector = self_2289;
    let _e1117: Circle = other_2047;
    let _e1128: MultiVector = self_2289;
    let _e1132: Circle = other_2047;
    let _e1144: MultiVector = self_2289;
    let _e1148: Circle = other_2047;
    let _e1160: MultiVector = self_2289;
    let _e1164: Circle = other_2047;
    let _e1167: Circle = other_2047;
    let _e1170: Circle = other_2047;
    let _e1176: MultiVector = self_2289;
    let _e1179: MultiVector = self_2289;
    let _e1182: MultiVector = self_2289;
    let _e1186: Circle = other_2047;
    let _e1189: Circle = other_2047;
    let _e1192: Circle = other_2047;
    let _e1205: MultiVector = self_2289;
    let _e1209: Circle = other_2047;
    let _e1212: MultiVector = self_2289;
    let _e1216: Circle = other_2047;
    let _e1227: MultiVector = self_2289;
    let _e1231: Circle = other_2047;
    let _e1242: MultiVector = self_2289;
    let _e1246: Circle = other_2047;
    let _e1257: MultiVector = self_2289;
    let _e1261: Circle = other_2047;
    let _e1264: MultiVector = self_2289;
    let _e1268: Circle = other_2047;
    let _e1272: MultiVector = self_2289;
    let _e1276: Circle = other_2047;
    let _e1287: MultiVector = self_2289;
    let _e1291: Circle = other_2047;
    let _e1302: MultiVector = self_2289;
    let _e1306: Circle = other_2047;
    let _e1317: MultiVector = self_2289;
    let _e1321: Circle = other_2047;
    let _e1332: MultiVector = self_2289;
    let _e1336: Circle = other_2047;
    let _e1347: MultiVector = self_2289;
    let _e1351: Circle = other_2047;
    let _e1362: MultiVector = self_2289;
    let _e1366: Circle = other_2047;
    let _e1369: MultiVector = self_2289;
    let _e1373: Circle = other_2047;
    let _e1386: MultiVector = self_2289;
    let _e1390: Circle = other_2047;
    let _e1403: MultiVector = self_2289;
    let _e1407: Circle = other_2047;
    let _e1410: Circle = other_2047;
    let _e1413: Circle = other_2047;
    let _e1416: Circle = other_2047;
    let _e1428: MultiVector = self_2289;
    let _e1432: Circle = other_2047;
    let _e1444: MultiVector = self_2289;
    let _e1448: Circle = other_2047;
    let _e1460: MultiVector = self_2289;
    let _e1464: Circle = other_2047;
    let _e1476: MultiVector = self_2289;
    let _e1480: Circle = other_2047;
    let _e1493: MultiVector = self_2289;
    let _e1497: Circle = other_2047;
    let _e1510: MultiVector = self_2289;
    let _e1514: Circle = other_2047;
    let _e1527: MultiVector = self_2289;
    let _e1531: Circle = other_2047;
    let _e1534: Circle = other_2047;
    let _e1537: Circle = other_2047;
    let _e1540: Circle = other_2047;
    let _e1553: MultiVector = self_2289;
    let _e1557: Circle = other_2047;
    let _e1560: Circle = other_2047;
    let _e1563: Circle = other_2047;
    let _e1566: Circle = other_2047;
    let _e1579: MultiVector = self_2289;
    let _e1583: Circle = other_2047;
    let _e1586: Circle = other_2047;
    let _e1589: Circle = other_2047;
    let _e1592: Circle = other_2047;
    let _e1605: MultiVector = self_2289;
    let _e1609: Circle = other_2047;
    let _e1622: MultiVector = self_2289;
    let _e1626: Circle = other_2047;
    let _e1638: MultiVector = self_2289;
    let _e1642: Circle = other_2047;
    let _e1655: MultiVector = self_2289;
    let _e1659: Circle = other_2047;
    let _e1662: Circle = other_2047;
    let _e1665: Circle = other_2047;
    let _e1668: Circle = other_2047;
    let _e1681: MultiVector = self_2289;
    let _e1685: Circle = other_2047;
    let _e1688: Circle = other_2047;
    let _e1691: Circle = other_2047;
    let _e1694: Circle = other_2047;
    let _e1707: MultiVector = self_2289;
    let _e1711: Circle = other_2047;
    let _e1714: Circle = other_2047;
    let _e1717: Circle = other_2047;
    let _e1720: Circle = other_2047;
    let _e1733: MultiVector = self_2289;
    let _e1736: Circle = other_2047;
    let _e1739: Circle = other_2047;
    let _e1742: Circle = other_2047;
    let _e1745: Circle = other_2047;
    return MultiVector(((((((((((((((((vec3<f32>(_e4.g3_.y) * vec3<f32>(_e8.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g3_.z) * vec3<f32>(_e23.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g3_.w) * vec3<f32>(_e39.g0_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e51.g4_.x) * vec3<f32>(_e55.g2_.x, _e58.g1_.x, _e61.g2_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e74.g4_.y) * vec3<f32>(_e78.g2_.y, _e81.g1_.y, _e84.g2_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e97.g4_.z) * vec3<f32>(_e101.g2_.z, _e104.g1_.z, _e107.g2_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e120.g5_.x) * vec3<f32>(_e124.g1_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e136.g5_.y) * vec3<f32>(_e140.g1_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e152.g5_.z) * vec3<f32>(_e156.g1_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e168.g6_.x) * vec3<f32>(_e172.g1_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e184.g6_.y) * vec3<f32>(_e188.g1_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e200.g6_.z) * vec3<f32>(_e204.g1_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e216.g9_.y) * vec3<f32>(_e220.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e232.g9_.z) * vec3<f32>(_e236.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e248.g3_.x, _e251.g9_.x, _e254.g3_.x) * vec3<f32>(_e258.g0_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))), ((((((((((((((((vec3<f32>(_e271.g1_.y) * _e275.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e285.g1_.z) * _e289.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e300.g2_.x) * _e304.g2_)) + (vec3<f32>(_e308.g2_.y) * vec3<f32>(_e312.g0_.x, _e315.g0_.y, _e318.g0_.z))) + ((vec3<f32>(_e324.g6_.x) * vec3<f32>(_e328.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e339.g6_.y) * vec3<f32>(_e343.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e354.g6_.z) * vec3<f32>(_e358.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e369.g7_.x) * vec3<f32>(_e373.g0_.z, _e376.g0_.z, _e379.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e391.g7_.y) * vec3<f32>(_e395.g0_.z, _e398.g0_.z, _e401.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e413.g7_.z) * vec3<f32>(_e417.g0_.y, _e420.g0_.x, _e423.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e435.g8_.x) * _e439.g2_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e450.g8_.y) * _e454.g2_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e465.g8_.z) * _e469.g2_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e480.g8_.w) * _e484.g1_)) + ((vec3<f32>(_e488.g1_.x) * _e492.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((vec2<f32>(0.0) - (vec2<f32>(_e505.g6_.x) * vec2<f32>(_e509.g0_.x, _e512.g2_.x))) - (vec2<f32>(_e518.g6_.y) * vec2<f32>(_e522.g0_.y, _e525.g2_.y))) - (vec2<f32>(_e531.g6_.z) * vec2<f32>(_e535.g0_.z, _e538.g2_.z))) + ((vec2<f32>(_e544.g7_.y) * vec2<f32>(_e548.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e559.g7_.z) * vec2<f32>(_e563.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e574.g8_.x) * vec2<f32>(_e578.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e589.g8_.y) * vec2<f32>(_e593.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e604.g8_.z) * vec2<f32>(_e608.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e619.g7_.x) * vec2<f32>(_e623.g1_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((((vec4<f32>(_e634.g3_.y) * vec4<f32>(_e638.g1_.z, _e641.g1_.z, _e644.g1_.x, _e647.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e659.g3_.z) * vec4<f32>(_e663.g1_.y, _e666.g1_.x, _e669.g1_.y, _e672.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e685.g3_.w) * vec4<f32>(_e689.g2_.x, _e692.g2_.y, _e695.g2_.z, _e698.g2_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e713.g9_.x) * vec4<f32>(_e717.g2_.z, _e720.g2_.z, _e723.g2_.y, _e726.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e740.g9_.y) * vec4<f32>(_e744.g2_.z, _e747.g2_.z, _e750.g2_.x, _e753.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e767.g9_.z) * vec4<f32>(_e771.g2_.y, _e774.g2_.x, _e777.g2_.y, _e780.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e794.g9_.w) * vec4<f32>(_e798.g1_.x, _e801.g1_.y, _e804.g1_.z, _e807.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e819.g3_.x) * vec4<f32>(_e823.g1_.x, _e826.g1_.z, _e829.g1_.y, _e832.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((((((vec3<f32>(_e845.g0_.y) * _e849.g1_) + (vec3<f32>(_e852.g3_.w) * vec3<f32>(_e856.g0_.x, _e859.g0_.y, _e862.g0_.z))) + ((vec3<f32>(_e868.g4_.y) * _e872.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e883.g4_.z) * _e887.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e898.g9_.x) * vec3<f32>(_e902.g0_.z, _e905.g0_.z, _e908.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e920.g9_.y) * vec3<f32>(_e924.g0_.z, _e927.g0_.z, _e930.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e942.g9_.z) * vec3<f32>(_e946.g0_.y, _e949.g0_.x, _e952.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e964.g4_.x) * _e968.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((((((((vec3<f32>(_e979.g0_.x) * _e983.g1_) + (vec3<f32>(_e986.g0_.y) * _e990.g2_)) + ((vec3<f32>(_e994.g3_.y) * vec3<f32>(_e998.g0_.z, _e1001.g0_.z, _e1004.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1016.g3_.z) * vec3<f32>(_e1020.g0_.y, _e1023.g0_.x, _e1026.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1038.g4_.x) * _e1042.g2_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1053.g4_.y) * _e1057.g2_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1068.g4_.z) * _e1072.g2_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1083.g5_.x) * _e1087.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1098.g5_.y) * _e1102.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1113.g5_.z) * _e1117.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1128.g9_.y) * vec3<f32>(_e1132.g0_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e1144.g9_.z) * vec3<f32>(_e1148.g0_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (vec3<f32>(_e1160.g9_.w) * vec3<f32>(_e1164.g0_.x, _e1167.g0_.y, _e1170.g0_.z))) + ((vec3<f32>(_e1176.g9_.x, _e1179.g3_.x, _e1182.g3_.x) * vec3<f32>(_e1186.g0_.w, _e1189.g0_.z, _e1192.g0_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))), ((((vec3<f32>(_e1205.g0_.z) * _e1209.g1_) + ((vec3<f32>(_e1212.g6_.y) * _e1216.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1227.g6_.z) * _e1231.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1242.g6_.x) * _e1246.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec3<f32>(_e1257.g0_.z) * _e1261.g2_) + (vec3<f32>(_e1264.g2_.y) * _e1268.g1_)) + ((vec3<f32>(_e1272.g6_.y) * _e1276.g2_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1287.g6_.z) * _e1291.g2_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1302.g7_.x) * _e1306.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1317.g7_.y) * _e1321.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1332.g7_.z) * _e1336.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1347.g6_.x) * _e1351.g2_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((((((((vec4<f32>(_e1362.g0_.z) * _e1366.g0_) + ((vec4<f32>(_e1369.g1_.y) * vec4<f32>(_e1373.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1386.g1_.z) * vec4<f32>(_e1390.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1403.g2_.x) * vec4<f32>(_e1407.g1_.x, _e1410.g1_.y, _e1413.g1_.z, _e1416.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1428.g6_.x) * _e1432.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1444.g6_.y) * _e1448.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1460.g6_.z) * _e1464.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1476.g7_.x) * vec4<f32>(_e1480.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1493.g7_.y) * vec4<f32>(_e1497.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1510.g7_.z) * vec4<f32>(_e1514.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1527.g8_.x) * vec4<f32>(_e1531.g1_.z, _e1534.g1_.z, _e1537.g1_.y, _e1540.g2_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1553.g8_.y) * vec4<f32>(_e1557.g1_.z, _e1560.g1_.z, _e1563.g1_.x, _e1566.g2_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e1579.g8_.z) * vec4<f32>(_e1583.g1_.y, _e1586.g1_.x, _e1589.g1_.y, _e1592.g2_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e1605.g1_.x) * vec4<f32>(_e1609.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((vec4<f32>(_e1622.g3_.y) * vec4<f32>(_e1626.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1638.g3_.z) * vec4<f32>(_e1642.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1655.g9_.x) * vec4<f32>(_e1659.g1_.z, _e1662.g1_.z, _e1665.g1_.y, _e1668.g2_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1681.g9_.y) * vec4<f32>(_e1685.g1_.z, _e1688.g1_.z, _e1691.g1_.x, _e1694.g2_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e1707.g9_.z) * vec4<f32>(_e1711.g1_.y, _e1714.g1_.x, _e1717.g1_.y, _e1720.g2_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e1733.g3_.wwwx * vec4<f32>(_e1736.g1_.x, _e1739.g1_.y, _e1742.g1_.z, _e1745.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_circle_scalar_product(self_2290: MultiVector, other_2048: Circle) -> Scalar {
    var self_2291: MultiVector;
    var other_2049: Circle;

    self_2291 = self_2290;
    other_2049 = other_2048;
    let _e5: MultiVector = self_2291;
    let _e8: Circle = other_2049;
    return Scalar((0.0 - (_e5.g8_.w * _e8.g0_.w)));
}

fn multi_vector_circle_anti_scalar_product(self_2292: MultiVector, other_2050: Circle) -> AntiScalar {
    var self_2293: MultiVector;
    var other_2051: Circle;

    self_2293 = self_2292;
    other_2051 = other_2050;
    let _e5: MultiVector = self_2293;
    let _e8: Circle = other_2051;
    let _e13: MultiVector = self_2293;
    let _e16: Circle = other_2051;
    let _e21: MultiVector = self_2293;
    let _e24: Circle = other_2051;
    return AntiScalar((((0.0 - (_e5.g6_.x * _e8.g1_.x)) - (_e13.g6_.y * _e16.g1_.y)) - (_e21.g6_.z * _e24.g1_.z)));
}

fn multi_vector_plane_into(self_2294: MultiVector) -> Plane {
    var self_2295: MultiVector;

    self_2295 = self_2294;
    let _e2: MultiVector = self_2295;
    return Plane(_e2.g9_);
}

fn multi_vector_plane_add(self_2296: MultiVector, other_2052: Plane) -> MultiVector {
    var self_2297: MultiVector;
    var other_2053: Plane;

    self_2297 = self_2296;
    other_2053 = other_2052;
    let _e4: MultiVector = self_2297;
    let _e6: MultiVector = self_2297;
    let _e8: MultiVector = self_2297;
    let _e10: MultiVector = self_2297;
    let _e12: MultiVector = self_2297;
    let _e14: MultiVector = self_2297;
    let _e16: MultiVector = self_2297;
    let _e18: MultiVector = self_2297;
    let _e20: MultiVector = self_2297;
    let _e22: MultiVector = self_2297;
    let _e24: Plane = other_2053;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, _e16.g6_, _e18.g7_, _e20.g8_, (_e22.g9_ + _e24.g0_));
}

fn multi_vector_plane_sub(self_2298: MultiVector, other_2054: Plane) -> MultiVector {
    var self_2299: MultiVector;
    var other_2055: Plane;

    self_2299 = self_2298;
    other_2055 = other_2054;
    let _e4: MultiVector = self_2299;
    let _e6: MultiVector = self_2299;
    let _e8: MultiVector = self_2299;
    let _e10: MultiVector = self_2299;
    let _e12: MultiVector = self_2299;
    let _e14: MultiVector = self_2299;
    let _e16: MultiVector = self_2299;
    let _e18: MultiVector = self_2299;
    let _e20: MultiVector = self_2299;
    let _e22: MultiVector = self_2299;
    let _e24: Plane = other_2055;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, _e12.g4_, _e14.g5_, _e16.g6_, _e18.g7_, _e20.g8_, (_e22.g9_ - _e24.g0_));
}

fn multi_vector_plane_geometric_anti_product(self_2300: MultiVector, other_2056: Plane) -> MultiVector {
    var self_2301: MultiVector;
    var other_2057: Plane;

    self_2301 = self_2300;
    other_2057 = other_2056;
    let _e4: MultiVector = self_2301;
    let _e8: Plane = other_2057;
    let _e18: MultiVector = self_2301;
    let _e22: Plane = other_2057;
    let _e33: MultiVector = self_2301;
    let _e37: Plane = other_2057;
    let _e48: MultiVector = self_2301;
    let _e52: Plane = other_2057;
    let _e63: MultiVector = self_2301;
    let _e67: Plane = other_2057;
    let _e78: MultiVector = self_2301;
    let _e82: Plane = other_2057;
    let _e93: MultiVector = self_2301;
    let _e97: Plane = other_2057;
    let _e108: MultiVector = self_2301;
    let _e112: Plane = other_2057;
    let _e123: MultiVector = self_2301;
    let _e127: Plane = other_2057;
    let _e138: MultiVector = self_2301;
    let _e142: Plane = other_2057;
    let _e153: MultiVector = self_2301;
    let _e157: Plane = other_2057;
    let _e160: Plane = other_2057;
    let _e163: Plane = other_2057;
    let _e168: MultiVector = self_2301;
    let _e172: Plane = other_2057;
    let _e175: Plane = other_2057;
    let _e178: Plane = other_2057;
    let _e190: MultiVector = self_2301;
    let _e194: Plane = other_2057;
    let _e197: Plane = other_2057;
    let _e200: Plane = other_2057;
    let _e212: MultiVector = self_2301;
    let _e216: Plane = other_2057;
    let _e219: Plane = other_2057;
    let _e222: Plane = other_2057;
    let _e234: MultiVector = self_2301;
    let _e236: Plane = other_2057;
    let _e242: MultiVector = self_2301;
    let _e246: Plane = other_2057;
    let _e255: MultiVector = self_2301;
    let _e259: Plane = other_2057;
    let _e269: MultiVector = self_2301;
    let _e273: Plane = other_2057;
    let _e283: MultiVector = self_2301;
    let _e287: Plane = other_2057;
    let _e298: MultiVector = self_2301;
    let _e302: Plane = other_2057;
    let _e313: MultiVector = self_2301;
    let _e317: Plane = other_2057;
    let _e328: MultiVector = self_2301;
    let _e332: Plane = other_2057;
    let _e342: MultiVector = self_2301;
    let _e346: Plane = other_2057;
    let _e357: MultiVector = self_2301;
    let _e361: Plane = other_2057;
    let _e373: MultiVector = self_2301;
    let _e377: Plane = other_2057;
    let _e389: MultiVector = self_2301;
    let _e393: Plane = other_2057;
    let _e405: MultiVector = self_2301;
    let _e409: Plane = other_2057;
    let _e421: MultiVector = self_2301;
    let _e425: Plane = other_2057;
    let _e437: MultiVector = self_2301;
    let _e440: MultiVector = self_2301;
    let _e443: MultiVector = self_2301;
    let _e446: MultiVector = self_2301;
    let _e450: Plane = other_2057;
    let _e463: MultiVector = self_2301;
    let _e467: Plane = other_2057;
    let _e470: Plane = other_2057;
    let _e473: Plane = other_2057;
    let _e479: MultiVector = self_2301;
    let _e483: Plane = other_2057;
    let _e486: Plane = other_2057;
    let _e489: Plane = other_2057;
    let _e501: MultiVector = self_2301;
    let _e505: Plane = other_2057;
    let _e508: Plane = other_2057;
    let _e511: Plane = other_2057;
    let _e523: MultiVector = self_2301;
    let _e527: Plane = other_2057;
    let _e530: Plane = other_2057;
    let _e533: Plane = other_2057;
    let _e545: MultiVector = self_2301;
    let _e549: Plane = other_2057;
    let _e552: Plane = other_2057;
    let _e555: Plane = other_2057;
    let _e566: MultiVector = self_2301;
    let _e570: Plane = other_2057;
    let _e573: Plane = other_2057;
    let _e576: Plane = other_2057;
    let _e588: MultiVector = self_2301;
    let _e592: Plane = other_2057;
    let _e603: MultiVector = self_2301;
    let _e607: Plane = other_2057;
    let _e618: MultiVector = self_2301;
    let _e622: Plane = other_2057;
    let _e633: MultiVector = self_2301;
    let _e637: Plane = other_2057;
    let _e640: Plane = other_2057;
    let _e643: Plane = other_2057;
    let _e649: MultiVector = self_2301;
    let _e653: Plane = other_2057;
    let _e656: Plane = other_2057;
    let _e659: Plane = other_2057;
    let _e673: MultiVector = self_2301;
    let _e677: Plane = other_2057;
    let _e680: Plane = other_2057;
    let _e683: Plane = other_2057;
    let _e689: MultiVector = self_2301;
    let _e693: Plane = other_2057;
    let _e696: Plane = other_2057;
    let _e699: Plane = other_2057;
    let _e711: MultiVector = self_2301;
    let _e715: Plane = other_2057;
    let _e718: Plane = other_2057;
    let _e721: Plane = other_2057;
    let _e733: MultiVector = self_2301;
    let _e737: Plane = other_2057;
    let _e740: Plane = other_2057;
    let _e743: Plane = other_2057;
    let _e755: MultiVector = self_2301;
    let _e759: Plane = other_2057;
    let _e762: Plane = other_2057;
    let _e765: Plane = other_2057;
    let _e776: MultiVector = self_2301;
    let _e780: Plane = other_2057;
    let _e783: Plane = other_2057;
    let _e786: Plane = other_2057;
    let _e798: MultiVector = self_2301;
    let _e802: Plane = other_2057;
    let _e813: MultiVector = self_2301;
    let _e817: Plane = other_2057;
    let _e828: MultiVector = self_2301;
    let _e832: Plane = other_2057;
    let _e835: Plane = other_2057;
    let _e838: Plane = other_2057;
    let _e844: MultiVector = self_2301;
    let _e847: MultiVector = self_2301;
    let _e850: MultiVector = self_2301;
    let _e854: Plane = other_2057;
    let _e857: Plane = other_2057;
    let _e860: Plane = other_2057;
    let _e872: MultiVector = self_2301;
    let _e876: Plane = other_2057;
    let _e879: MultiVector = self_2301;
    let _e883: Plane = other_2057;
    let _e895: MultiVector = self_2301;
    let _e899: Plane = other_2057;
    let _e911: MultiVector = self_2301;
    let _e915: Plane = other_2057;
    let _e928: MultiVector = self_2301;
    let _e932: Plane = other_2057;
    let _e945: MultiVector = self_2301;
    let _e948: MultiVector = self_2301;
    let _e951: MultiVector = self_2301;
    let _e954: MultiVector = self_2301;
    let _e958: Plane = other_2057;
    let _e971: MultiVector = self_2301;
    let _e975: Plane = other_2057;
    let _e978: MultiVector = self_2301;
    let _e982: Plane = other_2057;
    let _e994: MultiVector = self_2301;
    let _e998: Plane = other_2057;
    let _e1010: MultiVector = self_2301;
    let _e1014: Plane = other_2057;
    let _e1027: MultiVector = self_2301;
    let _e1031: Plane = other_2057;
    let _e1044: MultiVector = self_2301;
    let _e1047: MultiVector = self_2301;
    let _e1050: MultiVector = self_2301;
    let _e1053: MultiVector = self_2301;
    let _e1057: Plane = other_2057;
    return MultiVector((((((((((((vec3<f32>(_e4.g1_.y) * vec3<f32>(_e8.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.z) * vec3<f32>(_e22.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g2_.x) * vec3<f32>(_e37.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g8_.x) * vec3<f32>(_e52.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e63.g8_.y) * vec3<f32>(_e67.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e78.g8_.z) * vec3<f32>(_e82.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e93.g9_.x) * vec3<f32>(_e97.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e108.g9_.y) * vec3<f32>(_e112.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e123.g9_.z) * vec3<f32>(_e127.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e138.g1_.x) * vec3<f32>(_e142.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))), (((((vec3<f32>(_e153.g0_.x) * vec3<f32>(_e157.g0_.x, _e160.g0_.y, _e163.g0_.z)) + ((vec3<f32>(_e168.g5_.x) * vec3<f32>(_e172.g0_.z, _e175.g0_.z, _e178.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e190.g5_.y) * vec3<f32>(_e194.g0_.z, _e197.g0_.z, _e200.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e212.g5_.z) * vec3<f32>(_e216.g0_.y, _e219.g0_.x, _e222.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e234.g4_ * vec3<f32>(_e236.g0_.w))), ((((((((vec2<f32>(_e242.g3_.y) * vec2<f32>(_e246.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e255.g3_.z) * vec2<f32>(_e259.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e269.g3_.w) * vec2<f32>(_e273.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e283.g4_.x) * vec2<f32>(_e287.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e298.g4_.y) * vec2<f32>(_e302.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e313.g4_.z) * vec2<f32>(_e317.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e328.g3_.x) * vec2<f32>(_e332.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((vec4<f32>(_e342.g6_.x) * _e346.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e357.g6_.y) * _e361.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e373.g6_.z) * _e377.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e389.g7_.x) * _e393.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e405.g7_.y) * _e409.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e421.g7_.z) * _e425.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e437.g2_.y, _e440.g2_.y, _e443.g2_.y, _e446.g2_.x) * _e450.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e463.g2_.x) * vec3<f32>(_e467.g0_.x, _e470.g0_.y, _e473.g0_.z))) + ((vec3<f32>(_e479.g8_.y) * vec3<f32>(_e483.g0_.z, _e486.g0_.z, _e489.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e501.g8_.z) * vec3<f32>(_e505.g0_.y, _e508.g0_.x, _e511.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e523.g8_.x) * vec3<f32>(_e527.g0_.x, _e530.g0_.z, _e533.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((vec3<f32>(_e545.g1_.y) * vec3<f32>(_e549.g0_.z, _e552.g0_.z, _e555.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e566.g1_.z) * vec3<f32>(_e570.g0_.y, _e573.g0_.x, _e576.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e588.g8_.x) * vec3<f32>(_e592.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e603.g8_.y) * vec3<f32>(_e607.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e618.g8_.z) * vec3<f32>(_e622.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e633.g8_.w) * vec3<f32>(_e637.g0_.x, _e640.g0_.y, _e643.g0_.z))) + ((vec3<f32>(_e649.g1_.x) * vec3<f32>(_e653.g0_.x, _e656.g0_.z, _e659.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec3<f32>(0.0) - (vec3<f32>(_e673.g3_.w) * vec3<f32>(_e677.g0_.x, _e680.g0_.y, _e683.g0_.z))) + ((vec3<f32>(_e689.g9_.y) * vec3<f32>(_e693.g0_.z, _e696.g0_.z, _e699.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e711.g9_.z) * vec3<f32>(_e715.g0_.y, _e718.g0_.x, _e721.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e733.g9_.x) * vec3<f32>(_e737.g0_.x, _e740.g0_.z, _e743.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec3<f32>(_e755.g3_.y) * vec3<f32>(_e759.g0_.z, _e762.g0_.z, _e765.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e776.g3_.z) * vec3<f32>(_e780.g0_.y, _e783.g0_.x, _e786.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e798.g9_.y) * vec3<f32>(_e802.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e813.g9_.z) * vec3<f32>(_e817.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e828.g9_.w) * vec3<f32>(_e832.g0_.x, _e835.g0_.y, _e838.g0_.z))) + ((vec3<f32>(_e844.g9_.x, _e847.g3_.x, _e850.g3_.x) * vec3<f32>(_e854.g0_.w, _e857.g0_.z, _e860.g0_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))), ((((((vec4<f32>(_e872.g0_.y) * _e876.g0_) + ((vec4<f32>(_e879.g4_.y) * _e883.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e895.g4_.z) * _e899.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e911.g5_.y) * vec4<f32>(_e915.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e928.g5_.z) * vec4<f32>(_e932.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e945.g4_.x, _e948.g4_.x, _e951.g4_.x, _e954.g5_.x) * _e958.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e971.g0_.z) * _e975.g0_) + ((vec4<f32>(_e978.g6_.y) * _e982.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e994.g6_.z) * _e998.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1010.g7_.y) * vec4<f32>(_e1014.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1027.g7_.z) * vec4<f32>(_e1031.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1044.g6_.x, _e1047.g6_.x, _e1050.g6_.x, _e1053.g7_.x) * _e1057.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn multi_vector_plane_anti_scalar_product(self_2302: MultiVector, other_2058: Plane) -> AntiScalar {
    var self_2303: MultiVector;
    var other_2059: Plane;

    self_2303 = self_2302;
    other_2059 = other_2058;
    let _e4: MultiVector = self_2303;
    let _e7: Plane = other_2059;
    let _e11: MultiVector = self_2303;
    let _e14: Plane = other_2059;
    let _e19: MultiVector = self_2303;
    let _e22: Plane = other_2059;
    return AntiScalar((((_e4.g9_.x * _e7.g0_.x) + (_e11.g9_.y * _e14.g0_.y)) + (_e19.g9_.z * _e22.g0_.z)));
}

fn multi_vector_sphere_into(self_2304: MultiVector) -> Sphere {
    var self_2305: MultiVector;

    self_2305 = self_2304;
    let _e2: MultiVector = self_2305;
    let _e5: MultiVector = self_2305;
    let _e9: MultiVector = self_2305;
    let _e12: MultiVector = self_2305;
    let _e15: MultiVector = self_2305;
    return Sphere(vec2<f32>(_e2.g0_.y, _e5.g9_.w), vec3<f32>(_e9.g9_.x, _e12.g9_.y, _e15.g9_.z));
}

fn multi_vector_sphere_add(self_2306: MultiVector, other_2060: Sphere) -> MultiVector {
    var self_2307: MultiVector;
    var other_2061: Sphere;

    self_2307 = self_2306;
    other_2061 = other_2060;
    let _e4: MultiVector = self_2307;
    let _e6: Sphere = other_2061;
    let _e16: MultiVector = self_2307;
    let _e18: MultiVector = self_2307;
    let _e20: MultiVector = self_2307;
    let _e22: MultiVector = self_2307;
    let _e24: MultiVector = self_2307;
    let _e26: MultiVector = self_2307;
    let _e28: MultiVector = self_2307;
    let _e30: MultiVector = self_2307;
    let _e32: MultiVector = self_2307;
    let _e34: Sphere = other_2061;
    let _e37: Sphere = other_2061;
    let _e40: Sphere = other_2061;
    let _e43: Sphere = other_2061;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_.x) * vec3<f32>(0.0, 1.0, 0.0))), _e16.g1_, _e18.g2_, _e20.g3_, _e22.g4_, _e24.g5_, _e26.g6_, _e28.g7_, _e30.g8_, (_e32.g9_ + vec4<f32>(_e34.g1_.x, _e37.g1_.y, _e40.g1_.z, _e43.g0_.y)));
}

fn multi_vector_sphere_sub(self_2308: MultiVector, other_2062: Sphere) -> MultiVector {
    var self_2309: MultiVector;
    var other_2063: Sphere;

    self_2309 = self_2308;
    other_2063 = other_2062;
    let _e4: MultiVector = self_2309;
    let _e6: Sphere = other_2063;
    let _e16: MultiVector = self_2309;
    let _e18: MultiVector = self_2309;
    let _e20: MultiVector = self_2309;
    let _e22: MultiVector = self_2309;
    let _e24: MultiVector = self_2309;
    let _e26: MultiVector = self_2309;
    let _e28: MultiVector = self_2309;
    let _e30: MultiVector = self_2309;
    let _e32: MultiVector = self_2309;
    let _e34: Sphere = other_2063;
    let _e37: Sphere = other_2063;
    let _e40: Sphere = other_2063;
    let _e43: Sphere = other_2063;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_.x) * vec3<f32>(0.0, 1.0, 0.0))), _e16.g1_, _e18.g2_, _e20.g3_, _e22.g4_, _e24.g5_, _e26.g6_, _e28.g7_, _e30.g8_, (_e32.g9_ - vec4<f32>(_e34.g1_.x, _e37.g1_.y, _e40.g1_.z, _e43.g0_.y)));
}

fn multi_vector_sphere_geometric_anti_product(self_2310: MultiVector, other_2064: Sphere) -> MultiVector {
    var self_2311: MultiVector;
    var other_2065: Sphere;

    self_2311 = self_2310;
    other_2065 = other_2064;
    let _e4: MultiVector = self_2311;
    let _e8: Sphere = other_2065;
    let _e18: MultiVector = self_2311;
    let _e22: Sphere = other_2065;
    let _e33: MultiVector = self_2311;
    let _e37: Sphere = other_2065;
    let _e48: MultiVector = self_2311;
    let _e52: Sphere = other_2065;
    let _e63: MultiVector = self_2311;
    let _e67: Sphere = other_2065;
    let _e78: MultiVector = self_2311;
    let _e82: Sphere = other_2065;
    let _e93: MultiVector = self_2311;
    let _e97: Sphere = other_2065;
    let _e108: MultiVector = self_2311;
    let _e112: Sphere = other_2065;
    let _e123: MultiVector = self_2311;
    let _e127: Sphere = other_2065;
    let _e138: MultiVector = self_2311;
    let _e142: Sphere = other_2065;
    let _e153: MultiVector = self_2311;
    let _e157: Sphere = other_2065;
    let _e168: MultiVector = self_2311;
    let _e171: Sphere = other_2065;
    let _e182: MultiVector = self_2311;
    let _e186: Sphere = other_2065;
    let _e189: MultiVector = self_2311;
    let _e193: Sphere = other_2065;
    let _e204: MultiVector = self_2311;
    let _e208: Sphere = other_2065;
    let _e219: MultiVector = self_2311;
    let _e223: Sphere = other_2065;
    let _e234: MultiVector = self_2311;
    let _e238: Sphere = other_2065;
    let _e249: MultiVector = self_2311;
    let _e253: Sphere = other_2065;
    let _e264: MultiVector = self_2311;
    let _e268: Sphere = other_2065;
    let _e279: MultiVector = self_2311;
    let _e282: MultiVector = self_2311;
    let _e285: MultiVector = self_2311;
    let _e289: Sphere = other_2065;
    let _e299: MultiVector = self_2311;
    let _e303: Sphere = other_2065;
    let _e312: MultiVector = self_2311;
    let _e316: Sphere = other_2065;
    let _e326: MultiVector = self_2311;
    let _e330: Sphere = other_2065;
    let _e339: MultiVector = self_2311;
    let _e343: Sphere = other_2065;
    let _e354: MultiVector = self_2311;
    let _e358: Sphere = other_2065;
    let _e369: MultiVector = self_2311;
    let _e373: Sphere = other_2065;
    let _e384: MultiVector = self_2311;
    let _e388: Sphere = other_2065;
    let _e398: MultiVector = self_2311;
    let _e402: Sphere = other_2065;
    let _e405: Sphere = other_2065;
    let _e408: Sphere = other_2065;
    let _e411: Sphere = other_2065;
    let _e423: MultiVector = self_2311;
    let _e427: Sphere = other_2065;
    let _e430: Sphere = other_2065;
    let _e433: Sphere = other_2065;
    let _e436: Sphere = other_2065;
    let _e449: MultiVector = self_2311;
    let _e453: Sphere = other_2065;
    let _e456: Sphere = other_2065;
    let _e459: Sphere = other_2065;
    let _e462: Sphere = other_2065;
    let _e475: MultiVector = self_2311;
    let _e479: Sphere = other_2065;
    let _e482: Sphere = other_2065;
    let _e485: Sphere = other_2065;
    let _e488: Sphere = other_2065;
    let _e501: MultiVector = self_2311;
    let _e505: Sphere = other_2065;
    let _e508: Sphere = other_2065;
    let _e511: Sphere = other_2065;
    let _e514: Sphere = other_2065;
    let _e527: MultiVector = self_2311;
    let _e531: Sphere = other_2065;
    let _e534: Sphere = other_2065;
    let _e537: Sphere = other_2065;
    let _e540: Sphere = other_2065;
    let _e553: MultiVector = self_2311;
    let _e556: MultiVector = self_2311;
    let _e559: MultiVector = self_2311;
    let _e562: MultiVector = self_2311;
    let _e566: Sphere = other_2065;
    let _e569: Sphere = other_2065;
    let _e572: Sphere = other_2065;
    let _e575: Sphere = other_2065;
    let _e589: MultiVector = self_2311;
    let _e593: Sphere = other_2065;
    let _e597: MultiVector = self_2311;
    let _e601: Sphere = other_2065;
    let _e612: MultiVector = self_2311;
    let _e616: Sphere = other_2065;
    let _e627: MultiVector = self_2311;
    let _e631: Sphere = other_2065;
    let _e642: MultiVector = self_2311;
    let _e644: Sphere = other_2065;
    let _e650: MultiVector = self_2311;
    let _e654: Sphere = other_2065;
    let _e664: MultiVector = self_2311;
    let _e668: Sphere = other_2065;
    let _e679: MultiVector = self_2311;
    let _e683: Sphere = other_2065;
    let _e694: MultiVector = self_2311;
    let _e698: Sphere = other_2065;
    let _e709: MultiVector = self_2311;
    let _e713: Sphere = other_2065;
    let _e724: MultiVector = self_2311;
    let _e728: Sphere = other_2065;
    let _e739: MultiVector = self_2311;
    let _e743: Sphere = other_2065;
    let _e754: MultiVector = self_2311;
    let _e758: Sphere = other_2065;
    let _e769: MultiVector = self_2311;
    let _e773: Sphere = other_2065;
    let _e777: MultiVector = self_2311;
    let _e781: Sphere = other_2065;
    let _e794: MultiVector = self_2311;
    let _e798: Sphere = other_2065;
    let _e802: MultiVector = self_2311;
    let _e806: Sphere = other_2065;
    let _e817: MultiVector = self_2311;
    let _e821: Sphere = other_2065;
    let _e832: MultiVector = self_2311;
    let _e836: Sphere = other_2065;
    let _e847: MultiVector = self_2311;
    let _e851: Sphere = other_2065;
    let _e861: MultiVector = self_2311;
    let _e865: Sphere = other_2065;
    let _e876: MultiVector = self_2311;
    let _e880: Sphere = other_2065;
    let _e891: MultiVector = self_2311;
    let _e895: Sphere = other_2065;
    let _e906: MultiVector = self_2311;
    let _e910: Sphere = other_2065;
    let _e921: MultiVector = self_2311;
    let _e925: Sphere = other_2065;
    let _e929: MultiVector = self_2311;
    let _e933: Sphere = other_2065;
    let _e944: MultiVector = self_2311;
    let _e948: Sphere = other_2065;
    let _e951: Sphere = other_2065;
    let _e954: Sphere = other_2065;
    let _e957: Sphere = other_2065;
    let _e962: MultiVector = self_2311;
    let _e966: Sphere = other_2065;
    let _e969: Sphere = other_2065;
    let _e972: Sphere = other_2065;
    let _e975: Sphere = other_2065;
    let _e988: MultiVector = self_2311;
    let _e992: Sphere = other_2065;
    let _e995: Sphere = other_2065;
    let _e998: Sphere = other_2065;
    let _e1001: Sphere = other_2065;
    let _e1014: MultiVector = self_2311;
    let _e1018: Sphere = other_2065;
    let _e1031: MultiVector = self_2311;
    let _e1035: Sphere = other_2065;
    let _e1048: MultiVector = self_2311;
    let _e1052: Sphere = other_2065;
    let _e1065: MultiVector = self_2311;
    let _e1069: Sphere = other_2065;
    let _e1082: MultiVector = self_2311;
    let _e1086: Sphere = other_2065;
    let _e1099: MultiVector = self_2311;
    let _e1103: Sphere = other_2065;
    let _e1116: MultiVector = self_2311;
    let _e1119: MultiVector = self_2311;
    let _e1122: MultiVector = self_2311;
    let _e1125: MultiVector = self_2311;
    let _e1129: Sphere = other_2065;
    let _e1132: Sphere = other_2065;
    let _e1135: Sphere = other_2065;
    let _e1138: Sphere = other_2065;
    let _e1152: MultiVector = self_2311;
    let _e1156: Sphere = other_2065;
    let _e1159: Sphere = other_2065;
    let _e1162: Sphere = other_2065;
    let _e1165: Sphere = other_2065;
    let _e1170: MultiVector = self_2311;
    let _e1174: Sphere = other_2065;
    let _e1177: Sphere = other_2065;
    let _e1180: Sphere = other_2065;
    let _e1183: Sphere = other_2065;
    let _e1196: MultiVector = self_2311;
    let _e1200: Sphere = other_2065;
    let _e1203: Sphere = other_2065;
    let _e1206: Sphere = other_2065;
    let _e1209: Sphere = other_2065;
    let _e1222: MultiVector = self_2311;
    let _e1226: Sphere = other_2065;
    let _e1239: MultiVector = self_2311;
    let _e1243: Sphere = other_2065;
    let _e1256: MultiVector = self_2311;
    let _e1259: MultiVector = self_2311;
    let _e1262: MultiVector = self_2311;
    let _e1265: MultiVector = self_2311;
    let _e1269: Sphere = other_2065;
    let _e1272: Sphere = other_2065;
    let _e1275: Sphere = other_2065;
    let _e1278: Sphere = other_2065;
    return MultiVector((((((((((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.y) * vec3<f32>(_e22.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g2_.x) * vec3<f32>(_e52.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e63.g2_.y) * vec3<f32>(_e67.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e78.g8_.x) * vec3<f32>(_e82.g1_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e93.g8_.y) * vec3<f32>(_e97.g1_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e108.g8_.z) * vec3<f32>(_e112.g1_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e123.g9_.x) * vec3<f32>(_e127.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e138.g9_.y) * vec3<f32>(_e142.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e153.g9_.z) * vec3<f32>(_e157.g1_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e168.g0_.xzx * vec3<f32>(_e171.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))), ((((((((vec3<f32>(_e182.g0_.x) * _e186.g1_) + ((vec3<f32>(_e189.g4_.x) * vec3<f32>(_e193.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e204.g4_.y) * vec3<f32>(_e208.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e219.g4_.z) * vec3<f32>(_e223.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e234.g5_.x) * _e238.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e249.g5_.y) * _e253.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e264.g5_.z) * _e268.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e279.g3_.x, _e282.g3_.y, _e285.g3_.z) * vec3<f32>(_e289.g0_.x)) * vec3<f32>(-(1.0)))), ((((((((vec2<f32>(_e299.g3_.y) * vec2<f32>(_e303.g1_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e312.g3_.z) * vec2<f32>(_e316.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e326.g3_.w) * _e330.g0_) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e339.g4_.x) * vec2<f32>(_e343.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e354.g4_.y) * vec2<f32>(_e358.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e369.g4_.z) * vec2<f32>(_e373.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e384.g3_.x) * vec2<f32>(_e388.g1_.x)) * vec2<f32>(0.0, 1.0))), ((((((((vec4<f32>(_e398.g6_.x) * vec4<f32>(_e402.g0_.y, _e405.g0_.y, _e408.g0_.y, _e411.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e423.g6_.y) * vec4<f32>(_e427.g0_.y, _e430.g0_.y, _e433.g0_.y, _e436.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e449.g6_.z) * vec4<f32>(_e453.g0_.y, _e456.g0_.y, _e459.g0_.y, _e462.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e475.g7_.x) * vec4<f32>(_e479.g1_.z, _e482.g1_.z, _e485.g1_.y, _e488.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e501.g7_.y) * vec4<f32>(_e505.g1_.z, _e508.g1_.z, _e511.g1_.x, _e514.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e527.g7_.z) * vec4<f32>(_e531.g1_.y, _e534.g1_.x, _e537.g1_.y, _e540.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e553.g2_.y, _e556.g2_.y, _e559.g2_.y, _e562.g2_.x) * vec4<f32>(_e566.g1_.x, _e569.g1_.y, _e572.g1_.z, _e575.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec3<f32>(0.0) - (vec3<f32>(_e589.g2_.x) * _e593.g1_)) + ((vec3<f32>(_e597.g8_.x) * _e601.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e612.g8_.y) * _e616.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e627.g8_.z) * _e631.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e642.g6_ * vec3<f32>(_e644.g0_.x))), (((((((((((vec3<f32>(_e650.g1_.y) * _e654.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e664.g1_.z) * _e668.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e679.g7_.x) * vec3<f32>(_e683.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e694.g7_.y) * vec3<f32>(_e698.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e709.g7_.z) * vec3<f32>(_e713.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e724.g8_.x) * vec3<f32>(_e728.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e739.g8_.y) * vec3<f32>(_e743.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e754.g8_.z) * vec3<f32>(_e758.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e769.g8_.w) * _e773.g1_)) + ((vec3<f32>(_e777.g1_.x) * _e781.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec3<f32>(0.0) - (vec3<f32>(_e794.g3_.w) * _e798.g1_)) + ((vec3<f32>(_e802.g9_.y) * _e806.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e817.g9_.z) * _e821.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e832.g9_.x) * _e836.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((vec3<f32>(_e847.g3_.y) * _e851.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e861.g3_.z) * _e865.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e876.g9_.x) * vec3<f32>(_e880.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e891.g9_.y) * vec3<f32>(_e895.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e906.g9_.z) * vec3<f32>(_e910.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e921.g9_.w) * _e925.g1_)) + ((vec3<f32>(_e929.g3_.x) * _e933.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((vec4<f32>(_e944.g0_.y) * vec4<f32>(_e948.g1_.x, _e951.g1_.y, _e954.g1_.z, _e957.g0_.y)) + ((vec4<f32>(_e962.g4_.y) * vec4<f32>(_e966.g1_.z, _e969.g1_.z, _e972.g1_.x, _e975.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e988.g4_.z) * vec4<f32>(_e992.g1_.y, _e995.g1_.x, _e998.g1_.y, _e1001.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1014.g5_.y) * vec4<f32>(_e1018.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1031.g5_.z) * vec4<f32>(_e1035.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1048.g9_.x) * vec4<f32>(_e1052.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1065.g9_.y) * vec4<f32>(_e1069.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e1082.g9_.z) * vec4<f32>(_e1086.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1099.g9_.w) * vec4<f32>(_e1103.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1116.g4_.x, _e1119.g4_.x, _e1122.g4_.x, _e1125.g5_.x) * vec4<f32>(_e1129.g1_.x, _e1132.g1_.z, _e1135.g1_.y, _e1138.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e1152.g0_.z) * vec4<f32>(_e1156.g1_.x, _e1159.g1_.y, _e1162.g1_.z, _e1165.g0_.y)) + ((vec4<f32>(_e1170.g6_.y) * vec4<f32>(_e1174.g1_.z, _e1177.g1_.z, _e1180.g1_.x, _e1183.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1196.g6_.z) * vec4<f32>(_e1200.g1_.y, _e1203.g1_.x, _e1206.g1_.y, _e1209.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1222.g7_.y) * vec4<f32>(_e1226.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1239.g7_.z) * vec4<f32>(_e1243.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1256.g6_.x, _e1259.g6_.x, _e1262.g6_.x, _e1265.g7_.x) * vec4<f32>(_e1269.g1_.x, _e1272.g1_.z, _e1275.g1_.y, _e1278.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn multi_vector_sphere_anti_scalar_product(self_2312: MultiVector, other_2066: Sphere) -> AntiScalar {
    var self_2313: MultiVector;
    var other_2067: Sphere;

    self_2313 = self_2312;
    other_2067 = other_2066;
    let _e4: MultiVector = self_2313;
    let _e7: Sphere = other_2067;
    let _e11: MultiVector = self_2313;
    let _e14: Sphere = other_2067;
    let _e19: MultiVector = self_2313;
    let _e22: Sphere = other_2067;
    return AntiScalar((((_e4.g9_.x * _e7.g1_.x) + (_e11.g9_.y * _e14.g1_.y)) + (_e19.g9_.z * _e22.g1_.z)));
}

fn multi_vector_motor_into(self_2314: MultiVector) -> Motor {
    var self_2315: MultiVector;

    self_2315 = self_2314;
    let _e2: MultiVector = self_2315;
    let _e5: MultiVector = self_2315;
    let _e8: MultiVector = self_2315;
    let _e11: MultiVector = self_2315;
    let _e15: MultiVector = self_2315;
    let _e18: MultiVector = self_2315;
    let _e21: MultiVector = self_2315;
    let _e24: MultiVector = self_2315;
    return Motor(vec4<f32>(_e2.g6_.x, _e5.g6_.y, _e8.g6_.z, _e11.g0_.z), vec4<f32>(_e15.g7_.x, _e18.g7_.y, _e21.g7_.z, _e24.g2_.y));
}

fn multi_vector_motor_add(self_2316: MultiVector, other_2068: Motor) -> MultiVector {
    var self_2317: MultiVector;
    var other_2069: Motor;

    self_2317 = self_2316;
    other_2069 = other_2068;
    let _e4: MultiVector = self_2317;
    let _e6: Motor = other_2069;
    let _e9: Motor = other_2069;
    let _e12: Motor = other_2069;
    let _e22: MultiVector = self_2317;
    let _e24: MultiVector = self_2317;
    let _e26: Motor = other_2069;
    let _e29: Motor = other_2069;
    let _e38: MultiVector = self_2317;
    let _e40: MultiVector = self_2317;
    let _e42: MultiVector = self_2317;
    let _e44: MultiVector = self_2317;
    let _e46: Motor = other_2069;
    let _e49: Motor = other_2069;
    let _e52: Motor = other_2069;
    let _e57: MultiVector = self_2317;
    let _e59: Motor = other_2069;
    let _e62: Motor = other_2069;
    let _e65: Motor = other_2069;
    let _e70: MultiVector = self_2317;
    let _e72: MultiVector = self_2317;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, (_e24.g2_ + (vec2<f32>(_e26.g0_.x, _e29.g1_.w) * vec2<f32>(0.0, 1.0))), _e38.g3_, _e40.g4_, _e42.g5_, (_e44.g6_ + vec3<f32>(_e46.g0_.x, _e49.g0_.y, _e52.g0_.z)), (_e57.g7_ + vec3<f32>(_e59.g1_.x, _e62.g1_.y, _e65.g1_.z)), _e70.g8_, _e72.g9_);
}

fn multi_vector_motor_sub(self_2318: MultiVector, other_2070: Motor) -> MultiVector {
    var self_2319: MultiVector;
    var other_2071: Motor;

    self_2319 = self_2318;
    other_2071 = other_2070;
    let _e4: MultiVector = self_2319;
    let _e6: Motor = other_2071;
    let _e9: Motor = other_2071;
    let _e12: Motor = other_2071;
    let _e22: MultiVector = self_2319;
    let _e24: MultiVector = self_2319;
    let _e26: Motor = other_2071;
    let _e29: Motor = other_2071;
    let _e38: MultiVector = self_2319;
    let _e40: MultiVector = self_2319;
    let _e42: MultiVector = self_2319;
    let _e44: MultiVector = self_2319;
    let _e46: Motor = other_2071;
    let _e49: Motor = other_2071;
    let _e52: Motor = other_2071;
    let _e57: MultiVector = self_2319;
    let _e59: Motor = other_2071;
    let _e62: Motor = other_2071;
    let _e65: Motor = other_2071;
    let _e70: MultiVector = self_2319;
    let _e72: MultiVector = self_2319;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, (_e24.g2_ - (vec2<f32>(_e26.g0_.x, _e29.g1_.w) * vec2<f32>(0.0, 1.0))), _e38.g3_, _e40.g4_, _e42.g5_, (_e44.g6_ - vec3<f32>(_e46.g0_.x, _e49.g0_.y, _e52.g0_.z)), (_e57.g7_ - vec3<f32>(_e59.g1_.x, _e62.g1_.y, _e65.g1_.z)), _e70.g8_, _e72.g9_);
}

fn multi_vector_motor_regressive_product(self_2320: MultiVector, other_2072: Motor) -> MultiVector {
    var self_2321: MultiVector;
    var other_2073: Motor;

    self_2321 = self_2320;
    other_2073 = other_2072;
    let _e4: MultiVector = self_2321;
    let _e8: Motor = other_2073;
    let _e11: Motor = other_2073;
    let _e14: Motor = other_2073;
    let _e24: MultiVector = self_2321;
    let _e28: Motor = other_2073;
    let _e40: MultiVector = self_2321;
    let _e44: Motor = other_2073;
    let _e56: MultiVector = self_2321;
    let _e60: Motor = other_2073;
    let _e72: MultiVector = self_2321;
    let _e76: Motor = other_2073;
    let _e88: MultiVector = self_2321;
    let _e92: Motor = other_2073;
    let _e104: MultiVector = self_2321;
    let _e108: Motor = other_2073;
    let _e120: MultiVector = self_2321;
    let _e123: Motor = other_2073;
    let _e126: Motor = other_2073;
    let _e129: Motor = other_2073;
    let _e140: MultiVector = self_2321;
    let _e144: Motor = other_2073;
    let _e147: Motor = other_2073;
    let _e150: Motor = other_2073;
    let _e161: MultiVector = self_2321;
    let _e165: Motor = other_2073;
    let _e168: Motor = other_2073;
    let _e171: Motor = other_2073;
    let _e183: MultiVector = self_2321;
    let _e187: Motor = other_2073;
    let _e190: Motor = other_2073;
    let _e193: Motor = other_2073;
    let _e205: MultiVector = self_2321;
    let _e209: Motor = other_2073;
    let _e212: Motor = other_2073;
    let _e215: Motor = other_2073;
    let _e221: MultiVector = self_2321;
    let _e223: Motor = other_2073;
    let _e229: MultiVector = self_2321;
    let _e233: Motor = other_2073;
    let _e242: MultiVector = self_2321;
    let _e246: Motor = other_2073;
    let _e256: MultiVector = self_2321;
    let _e260: Motor = other_2073;
    let _e271: MultiVector = self_2321;
    let _e275: Motor = other_2073;
    let _e286: MultiVector = self_2321;
    let _e290: Motor = other_2073;
    let _e301: MultiVector = self_2321;
    let _e305: Motor = other_2073;
    let _e316: MultiVector = self_2321;
    let _e320: Motor = other_2073;
    let _e331: MultiVector = self_2321;
    let _e335: Motor = other_2073;
    let _e346: MultiVector = self_2321;
    let _e350: Motor = other_2073;
    let _e361: MultiVector = self_2321;
    let _e365: Motor = other_2073;
    let _e376: MultiVector = self_2321;
    let _e380: Motor = other_2073;
    let _e391: MultiVector = self_2321;
    let _e394: MultiVector = self_2321;
    let _e398: Motor = other_2073;
    let _e401: Motor = other_2073;
    let _e411: MultiVector = self_2321;
    let _e415: Motor = other_2073;
    let _e418: Motor = other_2073;
    let _e421: Motor = other_2073;
    let _e424: Motor = other_2073;
    let _e437: MultiVector = self_2321;
    let _e441: Motor = other_2073;
    let _e444: Motor = other_2073;
    let _e447: Motor = other_2073;
    let _e450: Motor = other_2073;
    let _e464: MultiVector = self_2321;
    let _e468: Motor = other_2073;
    let _e471: Motor = other_2073;
    let _e474: Motor = other_2073;
    let _e477: Motor = other_2073;
    let _e491: MultiVector = self_2321;
    let _e495: Motor = other_2073;
    let _e506: MultiVector = self_2321;
    let _e508: Motor = other_2073;
    let _e514: MultiVector = self_2321;
    let _e518: Motor = other_2073;
    let _e521: Motor = other_2073;
    let _e524: Motor = other_2073;
    let _e529: MultiVector = self_2321;
    let _e531: Motor = other_2073;
    let _e537: MultiVector = self_2321;
    let _e541: Motor = other_2073;
    let _e544: Motor = other_2073;
    let _e547: Motor = other_2073;
    let _e552: MultiVector = self_2321;
    let _e554: Motor = other_2073;
    let _e560: MultiVector = self_2321;
    let _e564: Motor = other_2073;
    let _e567: Motor = other_2073;
    let _e570: Motor = other_2073;
    let _e575: MultiVector = self_2321;
    let _e577: Motor = other_2073;
    let _e583: MultiVector = self_2321;
    let _e587: Motor = other_2073;
    let _e590: Motor = other_2073;
    let _e593: Motor = other_2073;
    let _e598: MultiVector = self_2321;
    let _e600: Motor = other_2073;
    let _e606: MultiVector = self_2321;
    let _e608: Motor = other_2073;
    let _e613: MultiVector = self_2321;
    let _e615: Motor = other_2073;
    return MultiVector((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g1_.w, _e11.g0_.w, _e14.g1_.w)) * vec3<f32>(1.0, 1.0, 0.0)) + ((vec3<f32>(_e24.g4_.x) * vec3<f32>(_e28.g1_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e40.g4_.y) * vec3<f32>(_e44.g1_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e56.g4_.z) * vec3<f32>(_e60.g1_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e72.g5_.x) * vec3<f32>(_e76.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e88.g5_.y) * vec3<f32>(_e92.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e104.g5_.z) * vec3<f32>(_e108.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((_e120.g0_.xxz * vec3<f32>(_e123.g0_.w, _e126.g0_.x, _e129.g0_.w)) * vec3<f32>(1.0, 0.0, 1.0))), ((((((vec3<f32>(_e140.g8_.x) * vec3<f32>(_e144.g1_.z, _e147.g1_.z, _e150.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e161.g8_.y) * vec3<f32>(_e165.g1_.z, _e168.g1_.z, _e171.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e183.g8_.z) * vec3<f32>(_e187.g1_.y, _e190.g1_.x, _e193.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e205.g8_.w) * vec3<f32>(_e209.g0_.x, _e212.g0_.y, _e215.g0_.z))) + (_e221.g1_ * vec3<f32>(_e223.g0_.w))), (((((((((((((vec2<f32>(_e229.g2_.x) * vec2<f32>(_e233.g0_.w)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e242.g2_.y) * vec2<f32>(_e246.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e256.g6_.x) * vec2<f32>(_e260.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e271.g6_.y) * vec2<f32>(_e275.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e286.g6_.z) * vec2<f32>(_e290.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e301.g7_.x) * vec2<f32>(_e305.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e316.g7_.y) * vec2<f32>(_e320.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e331.g7_.z) * vec2<f32>(_e335.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e346.g8_.x) * vec2<f32>(_e350.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e361.g8_.y) * vec2<f32>(_e365.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e376.g8_.z) * vec2<f32>(_e380.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e391.g0_.x, _e394.g0_.z) * vec2<f32>(_e398.g1_.x, _e401.g1_.w)) * vec2<f32>(0.0, 1.0))), ((((((vec4<f32>(_e411.g9_.x) * vec4<f32>(_e415.g1_.z, _e418.g1_.z, _e421.g1_.y, _e424.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e437.g9_.y) * vec4<f32>(_e441.g1_.z, _e444.g1_.z, _e447.g1_.x, _e450.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e464.g9_.z) * vec4<f32>(_e468.g1_.y, _e471.g1_.x, _e474.g1_.y, _e477.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e491.g9_.w) * _e495.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e506.g3_ * vec4<f32>(_e508.g0_.w))), ((vec3<f32>(_e514.g0_.y) * vec3<f32>(_e518.g0_.x, _e521.g0_.y, _e524.g0_.z)) + (_e529.g4_ * vec3<f32>(_e531.g0_.w))), ((vec3<f32>(_e537.g0_.y) * vec3<f32>(_e541.g1_.x, _e544.g1_.y, _e547.g1_.z)) + (_e552.g5_ * vec3<f32>(_e554.g0_.w))), ((vec3<f32>(_e560.g0_.z) * vec3<f32>(_e564.g0_.x, _e567.g0_.y, _e570.g0_.z)) + (_e575.g6_ * vec3<f32>(_e577.g0_.w))), ((vec3<f32>(_e583.g0_.z) * vec3<f32>(_e587.g1_.x, _e590.g1_.y, _e593.g1_.z)) + (_e598.g7_ * vec3<f32>(_e600.g0_.w))), (_e606.g8_ * vec4<f32>(_e608.g0_.w)), (_e613.g9_ * vec4<f32>(_e615.g0_.w)));
}

fn multi_vector_motor_geometric_anti_product(self_2322: MultiVector, other_2074: Motor) -> MultiVector {
    var self_2323: MultiVector;
    var other_2075: Motor;

    self_2323 = self_2322;
    other_2075 = other_2074;
    let _e4: MultiVector = self_2323;
    let _e8: Motor = other_2075;
    let _e11: Motor = other_2075;
    let _e14: Motor = other_2075;
    let _e24: MultiVector = self_2323;
    let _e28: Motor = other_2075;
    let _e31: Motor = other_2075;
    let _e34: Motor = other_2075;
    let _e47: MultiVector = self_2323;
    let _e51: Motor = other_2075;
    let _e54: Motor = other_2075;
    let _e57: Motor = other_2075;
    let _e70: MultiVector = self_2323;
    let _e74: Motor = other_2075;
    let _e77: Motor = other_2075;
    let _e80: Motor = other_2075;
    let _e93: MultiVector = self_2323;
    let _e97: Motor = other_2075;
    let _e109: MultiVector = self_2323;
    let _e113: Motor = other_2075;
    let _e125: MultiVector = self_2323;
    let _e129: Motor = other_2075;
    let _e141: MultiVector = self_2323;
    let _e145: Motor = other_2075;
    let _e157: MultiVector = self_2323;
    let _e161: Motor = other_2075;
    let _e173: MultiVector = self_2323;
    let _e177: Motor = other_2075;
    let _e189: MultiVector = self_2323;
    let _e192: Motor = other_2075;
    let _e195: Motor = other_2075;
    let _e198: Motor = other_2075;
    let _e209: MultiVector = self_2323;
    let _e213: Motor = other_2075;
    let _e216: Motor = other_2075;
    let _e219: Motor = other_2075;
    let _e230: MultiVector = self_2323;
    let _e234: Motor = other_2075;
    let _e237: Motor = other_2075;
    let _e240: Motor = other_2075;
    let _e252: MultiVector = self_2323;
    let _e256: Motor = other_2075;
    let _e259: Motor = other_2075;
    let _e262: Motor = other_2075;
    let _e274: MultiVector = self_2323;
    let _e278: Motor = other_2075;
    let _e281: Motor = other_2075;
    let _e284: Motor = other_2075;
    let _e290: MultiVector = self_2323;
    let _e294: Motor = other_2075;
    let _e297: Motor = other_2075;
    let _e300: Motor = other_2075;
    let _e313: MultiVector = self_2323;
    let _e317: Motor = other_2075;
    let _e320: Motor = other_2075;
    let _e323: Motor = other_2075;
    let _e336: MultiVector = self_2323;
    let _e340: Motor = other_2075;
    let _e343: Motor = other_2075;
    let _e346: Motor = other_2075;
    let _e359: MultiVector = self_2323;
    let _e363: Motor = other_2075;
    let _e366: Motor = other_2075;
    let _e369: Motor = other_2075;
    let _e375: MultiVector = self_2323;
    let _e379: Motor = other_2075;
    let _e388: MultiVector = self_2323;
    let _e392: Motor = other_2075;
    let _e402: MultiVector = self_2323;
    let _e406: Motor = other_2075;
    let _e417: MultiVector = self_2323;
    let _e421: Motor = other_2075;
    let _e432: MultiVector = self_2323;
    let _e436: Motor = other_2075;
    let _e447: MultiVector = self_2323;
    let _e451: Motor = other_2075;
    let _e462: MultiVector = self_2323;
    let _e466: Motor = other_2075;
    let _e477: MultiVector = self_2323;
    let _e481: Motor = other_2075;
    let _e492: MultiVector = self_2323;
    let _e496: Motor = other_2075;
    let _e507: MultiVector = self_2323;
    let _e511: Motor = other_2075;
    let _e522: MultiVector = self_2323;
    let _e526: Motor = other_2075;
    let _e537: MultiVector = self_2323;
    let _e540: MultiVector = self_2323;
    let _e544: Motor = other_2075;
    let _e547: Motor = other_2075;
    let _e557: MultiVector = self_2323;
    let _e561: Motor = other_2075;
    let _e572: MultiVector = self_2323;
    let _e576: Motor = other_2075;
    let _e588: MultiVector = self_2323;
    let _e592: Motor = other_2075;
    let _e595: Motor = other_2075;
    let _e598: Motor = other_2075;
    let _e601: Motor = other_2075;
    let _e616: MultiVector = self_2323;
    let _e620: Motor = other_2075;
    let _e623: Motor = other_2075;
    let _e626: Motor = other_2075;
    let _e629: Motor = other_2075;
    let _e644: MultiVector = self_2323;
    let _e648: Motor = other_2075;
    let _e651: Motor = other_2075;
    let _e654: Motor = other_2075;
    let _e657: Motor = other_2075;
    let _e672: MultiVector = self_2323;
    let _e676: Motor = other_2075;
    let _e679: Motor = other_2075;
    let _e682: Motor = other_2075;
    let _e685: Motor = other_2075;
    let _e700: MultiVector = self_2323;
    let _e704: Motor = other_2075;
    let _e715: MultiVector = self_2323;
    let _e719: Motor = other_2075;
    let _e731: MultiVector = self_2323;
    let _e735: Motor = other_2075;
    let _e738: Motor = other_2075;
    let _e741: Motor = other_2075;
    let _e746: MultiVector = self_2323;
    let _e750: Motor = other_2075;
    let _e753: Motor = other_2075;
    let _e756: Motor = other_2075;
    let _e768: MultiVector = self_2323;
    let _e772: Motor = other_2075;
    let _e775: Motor = other_2075;
    let _e778: Motor = other_2075;
    let _e790: MultiVector = self_2323;
    let _e794: Motor = other_2075;
    let _e797: Motor = other_2075;
    let _e800: Motor = other_2075;
    let _e812: MultiVector = self_2323;
    let _e816: Motor = other_2075;
    let _e819: Motor = other_2075;
    let _e822: Motor = other_2075;
    let _e827: MultiVector = self_2323;
    let _e831: Motor = other_2075;
    let _e834: Motor = other_2075;
    let _e837: Motor = other_2075;
    let _e843: MultiVector = self_2323;
    let _e847: Motor = other_2075;
    let _e850: Motor = other_2075;
    let _e853: Motor = other_2075;
    let _e865: MultiVector = self_2323;
    let _e869: Motor = other_2075;
    let _e872: Motor = other_2075;
    let _e875: Motor = other_2075;
    let _e887: MultiVector = self_2323;
    let _e891: Motor = other_2075;
    let _e894: Motor = other_2075;
    let _e897: Motor = other_2075;
    let _e909: MultiVector = self_2323;
    let _e913: Motor = other_2075;
    let _e916: Motor = other_2075;
    let _e919: Motor = other_2075;
    let _e931: MultiVector = self_2323;
    let _e935: Motor = other_2075;
    let _e938: Motor = other_2075;
    let _e941: Motor = other_2075;
    let _e953: MultiVector = self_2323;
    let _e957: Motor = other_2075;
    let _e960: Motor = other_2075;
    let _e963: Motor = other_2075;
    let _e975: MultiVector = self_2323;
    let _e979: Motor = other_2075;
    let _e982: Motor = other_2075;
    let _e985: Motor = other_2075;
    let _e990: MultiVector = self_2323;
    let _e994: Motor = other_2075;
    let _e997: Motor = other_2075;
    let _e1000: Motor = other_2075;
    let _e1012: MultiVector = self_2323;
    let _e1016: Motor = other_2075;
    let _e1019: Motor = other_2075;
    let _e1022: Motor = other_2075;
    let _e1034: MultiVector = self_2323;
    let _e1038: Motor = other_2075;
    let _e1041: Motor = other_2075;
    let _e1044: Motor = other_2075;
    let _e1056: MultiVector = self_2323;
    let _e1060: Motor = other_2075;
    let _e1063: Motor = other_2075;
    let _e1066: Motor = other_2075;
    let _e1071: MultiVector = self_2323;
    let _e1075: Motor = other_2075;
    let _e1078: Motor = other_2075;
    let _e1081: Motor = other_2075;
    let _e1087: MultiVector = self_2323;
    let _e1091: Motor = other_2075;
    let _e1094: Motor = other_2075;
    let _e1097: Motor = other_2075;
    let _e1109: MultiVector = self_2323;
    let _e1113: Motor = other_2075;
    let _e1116: Motor = other_2075;
    let _e1119: Motor = other_2075;
    let _e1131: MultiVector = self_2323;
    let _e1135: Motor = other_2075;
    let _e1138: Motor = other_2075;
    let _e1141: Motor = other_2075;
    let _e1153: MultiVector = self_2323;
    let _e1157: Motor = other_2075;
    let _e1160: Motor = other_2075;
    let _e1163: Motor = other_2075;
    let _e1175: MultiVector = self_2323;
    let _e1179: Motor = other_2075;
    let _e1182: Motor = other_2075;
    let _e1185: Motor = other_2075;
    let _e1197: MultiVector = self_2323;
    let _e1201: Motor = other_2075;
    let _e1204: Motor = other_2075;
    let _e1207: Motor = other_2075;
    let _e1219: MultiVector = self_2323;
    let _e1223: Motor = other_2075;
    let _e1235: MultiVector = self_2323;
    let _e1239: Motor = other_2075;
    let _e1252: MultiVector = self_2323;
    let _e1256: Motor = other_2075;
    let _e1259: Motor = other_2075;
    let _e1262: Motor = other_2075;
    let _e1265: Motor = other_2075;
    let _e1278: MultiVector = self_2323;
    let _e1282: Motor = other_2075;
    let _e1285: Motor = other_2075;
    let _e1288: Motor = other_2075;
    let _e1291: Motor = other_2075;
    let _e1304: MultiVector = self_2323;
    let _e1308: Motor = other_2075;
    let _e1311: Motor = other_2075;
    let _e1314: Motor = other_2075;
    let _e1317: Motor = other_2075;
    let _e1330: MultiVector = self_2323;
    let _e1334: Motor = other_2075;
    let _e1337: Motor = other_2075;
    let _e1340: Motor = other_2075;
    let _e1343: Motor = other_2075;
    let _e1356: MultiVector = self_2323;
    let _e1360: Motor = other_2075;
    let _e1372: MultiVector = self_2323;
    let _e1376: Motor = other_2075;
    let _e1389: MultiVector = self_2323;
    let _e1393: Motor = other_2075;
    let _e1405: MultiVector = self_2323;
    let _e1409: Motor = other_2075;
    let _e1422: MultiVector = self_2323;
    let _e1426: Motor = other_2075;
    let _e1429: Motor = other_2075;
    let _e1432: Motor = other_2075;
    let _e1435: Motor = other_2075;
    let _e1448: MultiVector = self_2323;
    let _e1452: Motor = other_2075;
    let _e1455: Motor = other_2075;
    let _e1458: Motor = other_2075;
    let _e1461: Motor = other_2075;
    let _e1474: MultiVector = self_2323;
    let _e1478: Motor = other_2075;
    let _e1481: Motor = other_2075;
    let _e1484: Motor = other_2075;
    let _e1487: Motor = other_2075;
    let _e1500: MultiVector = self_2323;
    let _e1504: Motor = other_2075;
    let _e1507: Motor = other_2075;
    let _e1510: Motor = other_2075;
    let _e1513: Motor = other_2075;
    let _e1526: MultiVector = self_2323;
    let _e1530: Motor = other_2075;
    let _e1542: MultiVector = self_2323;
    let _e1546: Motor = other_2075;
    return MultiVector(((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g1_.w, _e11.g0_.w, _e14.g1_.w)) * vec3<f32>(1.0, 1.0, 0.0)) + ((vec3<f32>(_e24.g4_.x) * vec3<f32>(_e28.g1_.x, _e31.g0_.x, _e34.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e47.g4_.y) * vec3<f32>(_e51.g1_.y, _e54.g0_.y, _e57.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e70.g4_.z) * vec3<f32>(_e74.g1_.z, _e77.g0_.z, _e80.g1_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e93.g5_.x) * vec3<f32>(_e97.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e109.g5_.y) * vec3<f32>(_e113.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e125.g5_.z) * vec3<f32>(_e129.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e141.g6_.x) * vec3<f32>(_e145.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e157.g6_.y) * vec3<f32>(_e161.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e173.g6_.z) * vec3<f32>(_e177.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((_e189.g0_.xxz * vec3<f32>(_e192.g0_.w, _e195.g0_.x, _e198.g0_.w)) * vec3<f32>(1.0, 0.0, 1.0))), (((((((((vec3<f32>(_e209.g1_.x) * vec3<f32>(_e213.g0_.w, _e216.g0_.z, _e219.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e230.g1_.y) * vec3<f32>(_e234.g0_.z, _e237.g0_.w, _e240.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e252.g1_.z) * vec3<f32>(_e256.g0_.y, _e259.g0_.x, _e262.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e274.g2_.x) * vec3<f32>(_e278.g1_.x, _e281.g1_.y, _e284.g1_.z))) + ((vec3<f32>(_e290.g8_.x) * vec3<f32>(_e294.g1_.w, _e297.g1_.z, _e300.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e313.g8_.y) * vec3<f32>(_e317.g1_.z, _e320.g1_.w, _e323.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e336.g8_.z) * vec3<f32>(_e340.g1_.y, _e343.g1_.x, _e346.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e359.g8_.w) * vec3<f32>(_e363.g0_.x, _e366.g0_.y, _e369.g0_.z))), (((((((((((((vec2<f32>(_e375.g2_.x) * vec2<f32>(_e379.g0_.w)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e388.g2_.y) * vec2<f32>(_e392.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e402.g6_.x) * vec2<f32>(_e406.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e417.g6_.y) * vec2<f32>(_e421.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e432.g6_.z) * vec2<f32>(_e436.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e447.g7_.x) * vec2<f32>(_e451.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e462.g7_.y) * vec2<f32>(_e466.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e477.g7_.z) * vec2<f32>(_e481.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e492.g8_.x) * vec2<f32>(_e496.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e507.g8_.y) * vec2<f32>(_e511.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e522.g8_.z) * vec2<f32>(_e526.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e537.g0_.x, _e540.g0_.z) * vec2<f32>(_e544.g1_.x, _e547.g1_.w)) * vec2<f32>(0.0, 1.0))), (((((((((vec4<f32>(_e557.g3_.y) * _e561.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e572.g3_.z) * _e576.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e588.g3_.w) * vec4<f32>(_e592.g1_.x, _e595.g1_.y, _e598.g1_.z, _e601.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e616.g9_.x) * vec4<f32>(_e620.g1_.w, _e623.g1_.z, _e626.g1_.y, _e629.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e644.g9_.y) * vec4<f32>(_e648.g1_.z, _e651.g1_.w, _e654.g1_.x, _e657.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e672.g9_.z) * vec4<f32>(_e676.g1_.y, _e679.g1_.x, _e682.g1_.w, _e685.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e700.g9_.w) * _e704.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e715.g3_.x) * _e719.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e731.g0_.y) * vec3<f32>(_e735.g0_.x, _e738.g0_.y, _e741.g0_.z)) + ((vec3<f32>(_e746.g4_.x) * vec3<f32>(_e750.g0_.w, _e753.g0_.z, _e756.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e768.g4_.y) * vec3<f32>(_e772.g0_.z, _e775.g0_.w, _e778.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e790.g4_.z) * vec3<f32>(_e794.g0_.y, _e797.g0_.x, _e800.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((vec3<f32>(_e812.g0_.x) * vec3<f32>(_e816.g0_.x, _e819.g0_.y, _e822.g0_.z)) + (vec3<f32>(_e827.g0_.y) * vec3<f32>(_e831.g1_.x, _e834.g1_.y, _e837.g1_.z))) + ((vec3<f32>(_e843.g4_.x) * vec3<f32>(_e847.g1_.w, _e850.g1_.z, _e853.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e865.g4_.y) * vec3<f32>(_e869.g1_.z, _e872.g1_.w, _e875.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e887.g4_.z) * vec3<f32>(_e891.g1_.y, _e894.g1_.x, _e897.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e909.g5_.x) * vec3<f32>(_e913.g0_.w, _e916.g0_.z, _e919.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e931.g5_.y) * vec3<f32>(_e935.g0_.z, _e938.g0_.w, _e941.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e953.g5_.z) * vec3<f32>(_e957.g0_.y, _e960.g0_.x, _e963.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e975.g0_.z) * vec3<f32>(_e979.g0_.x, _e982.g0_.y, _e985.g0_.z)) + ((vec3<f32>(_e990.g6_.x) * vec3<f32>(_e994.g0_.w, _e997.g0_.z, _e1000.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1012.g6_.y) * vec3<f32>(_e1016.g0_.z, _e1019.g0_.w, _e1022.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1034.g6_.z) * vec3<f32>(_e1038.g0_.y, _e1041.g0_.x, _e1044.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((vec3<f32>(_e1056.g0_.z) * vec3<f32>(_e1060.g1_.x, _e1063.g1_.y, _e1066.g1_.z)) + (vec3<f32>(_e1071.g2_.y) * vec3<f32>(_e1075.g0_.x, _e1078.g0_.y, _e1081.g0_.z))) + ((vec3<f32>(_e1087.g6_.x) * vec3<f32>(_e1091.g1_.w, _e1094.g1_.z, _e1097.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1109.g6_.y) * vec3<f32>(_e1113.g1_.z, _e1116.g1_.w, _e1119.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1131.g6_.z) * vec3<f32>(_e1135.g1_.y, _e1138.g1_.x, _e1141.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1153.g7_.x) * vec3<f32>(_e1157.g0_.w, _e1160.g0_.z, _e1163.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1175.g7_.y) * vec3<f32>(_e1179.g0_.z, _e1182.g0_.w, _e1185.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1197.g7_.z) * vec3<f32>(_e1201.g0_.y, _e1204.g0_.x, _e1207.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((vec4<f32>(_e1219.g1_.y) * vec4<f32>(_e1223.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1235.g1_.z) * vec4<f32>(_e1239.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1252.g2_.x) * vec4<f32>(_e1256.g0_.x, _e1259.g0_.y, _e1262.g0_.z, _e1265.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1278.g8_.x) * vec4<f32>(_e1282.g0_.w, _e1285.g0_.z, _e1288.g0_.y, _e1291.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1304.g8_.y) * vec4<f32>(_e1308.g0_.z, _e1311.g0_.w, _e1314.g0_.x, _e1317.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1330.g8_.z) * vec4<f32>(_e1334.g0_.y, _e1337.g0_.x, _e1340.g0_.w, _e1343.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1356.g8_.w) * vec4<f32>(_e1360.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1372.g1_.x) * vec4<f32>(_e1376.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((((vec4<f32>(_e1389.g3_.y) * vec4<f32>(_e1393.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e1405.g3_.z) * vec4<f32>(_e1409.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1422.g3_.w) * vec4<f32>(_e1426.g0_.x, _e1429.g0_.y, _e1432.g0_.z, _e1435.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1448.g9_.x) * vec4<f32>(_e1452.g0_.w, _e1455.g0_.z, _e1458.g0_.y, _e1461.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1474.g9_.y) * vec4<f32>(_e1478.g0_.z, _e1481.g0_.w, _e1484.g0_.x, _e1487.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1500.g9_.z) * vec4<f32>(_e1504.g0_.y, _e1507.g0_.x, _e1510.g0_.w, _e1513.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1526.g9_.w) * vec4<f32>(_e1530.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1542.g3_.x) * vec4<f32>(_e1546.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn multi_vector_motor_inner_anti_product(self_2324: MultiVector, other_2076: Motor) -> MultiVector {
    var self_2325: MultiVector;
    var other_2077: Motor;

    self_2325 = self_2324;
    other_2077 = other_2076;
    let _e4: MultiVector = self_2325;
    let _e8: Motor = other_2077;
    let _e19: MultiVector = self_2325;
    let _e23: Motor = other_2077;
    let _e35: MultiVector = self_2325;
    let _e39: Motor = other_2077;
    let _e51: MultiVector = self_2325;
    let _e55: Motor = other_2077;
    let _e67: MultiVector = self_2325;
    let _e71: Motor = other_2077;
    let _e83: MultiVector = self_2325;
    let _e87: Motor = other_2077;
    let _e99: MultiVector = self_2325;
    let _e101: Motor = other_2077;
    let _e107: MultiVector = self_2325;
    let _e109: Motor = other_2077;
    let _e114: MultiVector = self_2325;
    let _e118: Motor = other_2077;
    let _e127: MultiVector = self_2325;
    let _e131: Motor = other_2077;
    let _e141: MultiVector = self_2325;
    let _e144: MultiVector = self_2325;
    let _e148: Motor = other_2077;
    let _e151: Motor = other_2077;
    let _e161: MultiVector = self_2325;
    let _e165: Motor = other_2077;
    let _e177: MultiVector = self_2325;
    let _e181: Motor = other_2077;
    let _e194: MultiVector = self_2325;
    let _e198: Motor = other_2077;
    let _e211: MultiVector = self_2325;
    let _e213: Motor = other_2077;
    let _e219: MultiVector = self_2325;
    let _e221: Motor = other_2077;
    let _e226: MultiVector = self_2325;
    let _e230: Motor = other_2077;
    let _e233: Motor = other_2077;
    let _e236: Motor = other_2077;
    let _e241: MultiVector = self_2325;
    let _e243: Motor = other_2077;
    let _e249: MultiVector = self_2325;
    let _e253: Motor = other_2077;
    let _e256: Motor = other_2077;
    let _e259: Motor = other_2077;
    let _e264: MultiVector = self_2325;
    let _e266: Motor = other_2077;
    let _e272: MultiVector = self_2325;
    let _e276: Motor = other_2077;
    let _e279: Motor = other_2077;
    let _e282: Motor = other_2077;
    let _e287: MultiVector = self_2325;
    let _e291: Motor = other_2077;
    let _e294: Motor = other_2077;
    let _e297: Motor = other_2077;
    let _e303: MultiVector = self_2325;
    let _e307: Motor = other_2077;
    let _e318: MultiVector = self_2325;
    let _e322: Motor = other_2077;
    let _e333: MultiVector = self_2325;
    let _e337: Motor = other_2077;
    let _e348: MultiVector = self_2325;
    let _e350: Motor = other_2077;
    let _e356: MultiVector = self_2325;
    let _e360: Motor = other_2077;
    let _e372: MultiVector = self_2325;
    let _e376: Motor = other_2077;
    let _e389: MultiVector = self_2325;
    let _e393: Motor = other_2077;
    let _e404: MultiVector = self_2325;
    let _e408: Motor = other_2077;
    let _e420: MultiVector = self_2325;
    let _e424: Motor = other_2077;
    let _e436: MultiVector = self_2325;
    let _e440: Motor = other_2077;
    let _e452: MultiVector = self_2325;
    let _e456: Motor = other_2077;
    let _e468: MultiVector = self_2325;
    let _e472: Motor = other_2077;
    let _e485: MultiVector = self_2325;
    let _e489: Motor = other_2077;
    let _e501: MultiVector = self_2325;
    let _e505: Motor = other_2077;
    let _e518: MultiVector = self_2325;
    let _e522: Motor = other_2077;
    let _e525: Motor = other_2077;
    let _e528: Motor = other_2077;
    let _e531: Motor = other_2077;
    let _e544: MultiVector = self_2325;
    let _e548: Motor = other_2077;
    let _e551: Motor = other_2077;
    let _e554: Motor = other_2077;
    let _e557: Motor = other_2077;
    let _e570: MultiVector = self_2325;
    let _e574: Motor = other_2077;
    let _e577: Motor = other_2077;
    let _e580: Motor = other_2077;
    let _e583: Motor = other_2077;
    let _e596: MultiVector = self_2325;
    let _e600: Motor = other_2077;
    let _e603: Motor = other_2077;
    let _e606: Motor = other_2077;
    let _e609: Motor = other_2077;
    let _e622: MultiVector = self_2325;
    let _e626: Motor = other_2077;
    let _e638: MultiVector = self_2325;
    let _e642: Motor = other_2077;
    return MultiVector(((((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g6_.x) * vec3<f32>(_e55.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e67.g6_.y) * vec3<f32>(_e71.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e83.g6_.z) * vec3<f32>(_e87.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e99.g0_ * vec3<f32>(_e101.g0_.w))), (_e107.g1_ * vec3<f32>(_e109.g0_.w)), ((((vec2<f32>(_e114.g2_.x) * vec2<f32>(_e118.g0_.w)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e127.g2_.y) * vec2<f32>(_e131.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e141.g0_.x, _e144.g0_.z) * vec2<f32>(_e148.g1_.x, _e151.g1_.w)) * vec2<f32>(0.0, 1.0))), (((((vec4<f32>(_e161.g9_.x) * vec4<f32>(_e165.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e177.g9_.y) * vec4<f32>(_e181.g1_.w)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e194.g9_.z) * vec4<f32>(_e198.g1_.w)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e211.g3_ * vec4<f32>(_e213.g0_.w))), (_e219.g4_ * vec3<f32>(_e221.g0_.w)), ((vec3<f32>(_e226.g0_.x) * vec3<f32>(_e230.g0_.x, _e233.g0_.y, _e236.g0_.z)) + (_e241.g5_ * vec3<f32>(_e243.g0_.w))), ((vec3<f32>(_e249.g0_.z) * vec3<f32>(_e253.g0_.x, _e256.g0_.y, _e259.g0_.z)) + (_e264.g6_ * vec3<f32>(_e266.g0_.w))), ((((((vec3<f32>(_e272.g0_.z) * vec3<f32>(_e276.g1_.x, _e279.g1_.y, _e282.g1_.z)) + (vec3<f32>(_e287.g2_.y) * vec3<f32>(_e291.g0_.x, _e294.g0_.y, _e297.g0_.z))) + ((vec3<f32>(_e303.g7_.x) * vec3<f32>(_e307.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e318.g7_.y) * vec3<f32>(_e322.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e333.g7_.z) * vec3<f32>(_e337.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e348.g6_ * vec3<f32>(_e350.g1_.w))), (((((((((vec4<f32>(_e356.g1_.y) * vec4<f32>(_e360.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e372.g1_.z) * vec4<f32>(_e376.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e389.g2_.x) * _e393.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e404.g8_.x) * vec4<f32>(_e408.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e420.g8_.y) * vec4<f32>(_e424.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e436.g8_.z) * vec4<f32>(_e440.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e452.g8_.w) * vec4<f32>(_e456.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e468.g1_.x) * vec4<f32>(_e472.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((((vec4<f32>(_e485.g3_.y) * vec4<f32>(_e489.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e501.g3_.z) * vec4<f32>(_e505.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e518.g3_.w) * vec4<f32>(_e522.g0_.x, _e525.g0_.y, _e528.g0_.z, _e531.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e544.g9_.x) * vec4<f32>(_e548.g0_.w, _e551.g0_.z, _e554.g0_.y, _e557.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e570.g9_.y) * vec4<f32>(_e574.g0_.z, _e577.g0_.w, _e580.g0_.x, _e583.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e596.g9_.z) * vec4<f32>(_e600.g0_.y, _e603.g0_.x, _e606.g0_.w, _e609.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e622.g9_.w) * vec4<f32>(_e626.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e638.g3_.x) * vec4<f32>(_e642.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn multi_vector_motor_right_anti_contraction(self_2326: MultiVector, other_2078: Motor) -> MultiVector {
    var self_2327: MultiVector;
    var other_2079: Motor;

    self_2327 = self_2326;
    other_2079 = other_2078;
    let _e4: MultiVector = self_2327;
    let _e8: Motor = other_2079;
    let _e19: MultiVector = self_2327;
    let _e23: Motor = other_2079;
    let _e35: MultiVector = self_2327;
    let _e39: Motor = other_2079;
    let _e51: MultiVector = self_2327;
    let _e55: Motor = other_2079;
    let _e67: MultiVector = self_2327;
    let _e71: Motor = other_2079;
    let _e83: MultiVector = self_2327;
    let _e87: Motor = other_2079;
    let _e99: MultiVector = self_2327;
    let _e101: Motor = other_2079;
    let _e107: MultiVector = self_2327;
    let _e109: Motor = other_2079;
    let _e114: MultiVector = self_2327;
    let _e116: Motor = other_2079;
    let _e121: MultiVector = self_2327;
    let _e123: Motor = other_2079;
    let _e128: MultiVector = self_2327;
    let _e130: Motor = other_2079;
    let _e135: MultiVector = self_2327;
    let _e139: Motor = other_2079;
    let _e142: Motor = other_2079;
    let _e145: Motor = other_2079;
    let _e150: MultiVector = self_2327;
    let _e152: Motor = other_2079;
    let _e158: MultiVector = self_2327;
    let _e160: Motor = other_2079;
    let _e165: MultiVector = self_2327;
    let _e169: Motor = other_2079;
    let _e172: Motor = other_2079;
    let _e175: Motor = other_2079;
    let _e180: MultiVector = self_2327;
    let _e182: Motor = other_2079;
    let _e188: MultiVector = self_2327;
    let _e192: Motor = other_2079;
    let _e204: MultiVector = self_2327;
    let _e208: Motor = other_2079;
    let _e221: MultiVector = self_2327;
    let _e225: Motor = other_2079;
    let _e236: MultiVector = self_2327;
    let _e240: Motor = other_2079;
    let _e252: MultiVector = self_2327;
    let _e256: Motor = other_2079;
    let _e268: MultiVector = self_2327;
    let _e272: Motor = other_2079;
    let _e284: MultiVector = self_2327;
    let _e288: Motor = other_2079;
    let _e300: MultiVector = self_2327;
    let _e304: Motor = other_2079;
    let _e317: MultiVector = self_2327;
    let _e321: Motor = other_2079;
    let _e333: MultiVector = self_2327;
    let _e337: Motor = other_2079;
    let _e350: MultiVector = self_2327;
    let _e354: Motor = other_2079;
    let _e366: MultiVector = self_2327;
    let _e370: Motor = other_2079;
    let _e382: MultiVector = self_2327;
    let _e386: Motor = other_2079;
    let _e398: MultiVector = self_2327;
    let _e402: Motor = other_2079;
    let _e414: MultiVector = self_2327;
    let _e417: Motor = other_2079;
    return MultiVector(((((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g6_.x) * vec3<f32>(_e55.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e67.g6_.y) * vec3<f32>(_e71.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e83.g6_.z) * vec3<f32>(_e87.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e99.g0_ * vec3<f32>(_e101.g0_.w))), (_e107.g1_ * vec3<f32>(_e109.g0_.w)), (_e114.g2_ * vec2<f32>(_e116.g0_.w)), (_e121.g3_ * vec4<f32>(_e123.g0_.w)), (_e128.g4_ * vec3<f32>(_e130.g0_.w)), ((vec3<f32>(_e135.g0_.x) * vec3<f32>(_e139.g0_.x, _e142.g0_.y, _e145.g0_.z)) + (_e150.g5_ * vec3<f32>(_e152.g0_.w))), (_e158.g6_ * vec3<f32>(_e160.g0_.w)), ((vec3<f32>(_e165.g2_.y) * vec3<f32>(_e169.g0_.x, _e172.g0_.y, _e175.g0_.z)) + (_e180.g7_ * vec3<f32>(_e182.g0_.w))), (((((((((vec4<f32>(_e188.g1_.y) * vec4<f32>(_e192.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e204.g1_.z) * vec4<f32>(_e208.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e221.g2_.x) * _e225.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e236.g8_.x) * vec4<f32>(_e240.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e252.g8_.y) * vec4<f32>(_e256.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e268.g8_.z) * vec4<f32>(_e272.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e284.g8_.w) * vec4<f32>(_e288.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e300.g1_.x) * vec4<f32>(_e304.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((vec4<f32>(_e317.g3_.y) * vec4<f32>(_e321.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e333.g3_.z) * vec4<f32>(_e337.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e350.g9_.x) * vec4<f32>(_e354.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e366.g9_.y) * vec4<f32>(_e370.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e382.g9_.z) * vec4<f32>(_e386.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e398.g9_.w) * vec4<f32>(_e402.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e414.g3_.wwwx * _e417.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_motor_anti_scalar_product(self_2328: MultiVector, other_2080: Motor) -> AntiScalar {
    var self_2329: MultiVector;
    var other_2081: Motor;

    self_2329 = self_2328;
    other_2081 = other_2080;
    let _e4: MultiVector = self_2329;
    let _e7: Motor = other_2081;
    let _e11: MultiVector = self_2329;
    let _e14: Motor = other_2081;
    let _e19: MultiVector = self_2329;
    let _e22: Motor = other_2081;
    let _e27: MultiVector = self_2329;
    let _e30: Motor = other_2081;
    return AntiScalar(((((_e4.g0_.z * _e7.g0_.w) - (_e11.g6_.x * _e14.g0_.x)) - (_e19.g6_.y * _e22.g0_.y)) - (_e27.g6_.z * _e30.g0_.z)));
}

fn multi_vector_rotor_into(self_2330: MultiVector) -> Rotor {
    var self_2331: MultiVector;

    self_2331 = self_2330;
    let _e2: MultiVector = self_2331;
    let _e5: MultiVector = self_2331;
    let _e8: MultiVector = self_2331;
    let _e11: MultiVector = self_2331;
    return Rotor(vec4<f32>(_e2.g6_.x, _e5.g6_.y, _e8.g6_.z, _e11.g0_.z));
}

fn multi_vector_rotor_add(self_2332: MultiVector, other_2082: Rotor) -> MultiVector {
    var self_2333: MultiVector;
    var other_2083: Rotor;

    self_2333 = self_2332;
    other_2083 = other_2082;
    let _e4: MultiVector = self_2333;
    let _e6: Rotor = other_2083;
    let _e9: Rotor = other_2083;
    let _e12: Rotor = other_2083;
    let _e22: MultiVector = self_2333;
    let _e24: MultiVector = self_2333;
    let _e26: MultiVector = self_2333;
    let _e28: MultiVector = self_2333;
    let _e30: MultiVector = self_2333;
    let _e32: MultiVector = self_2333;
    let _e34: Rotor = other_2083;
    let _e37: Rotor = other_2083;
    let _e40: Rotor = other_2083;
    let _e45: MultiVector = self_2333;
    let _e47: MultiVector = self_2333;
    let _e49: MultiVector = self_2333;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, (_e32.g6_ + vec3<f32>(_e34.g0_.x, _e37.g0_.y, _e40.g0_.z)), _e45.g7_, _e47.g8_, _e49.g9_);
}

fn multi_vector_rotor_sub(self_2334: MultiVector, other_2084: Rotor) -> MultiVector {
    var self_2335: MultiVector;
    var other_2085: Rotor;

    self_2335 = self_2334;
    other_2085 = other_2084;
    let _e4: MultiVector = self_2335;
    let _e6: Rotor = other_2085;
    let _e9: Rotor = other_2085;
    let _e12: Rotor = other_2085;
    let _e22: MultiVector = self_2335;
    let _e24: MultiVector = self_2335;
    let _e26: MultiVector = self_2335;
    let _e28: MultiVector = self_2335;
    let _e30: MultiVector = self_2335;
    let _e32: MultiVector = self_2335;
    let _e34: Rotor = other_2085;
    let _e37: Rotor = other_2085;
    let _e40: Rotor = other_2085;
    let _e45: MultiVector = self_2335;
    let _e47: MultiVector = self_2335;
    let _e49: MultiVector = self_2335;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, (_e32.g6_ - vec3<f32>(_e34.g0_.x, _e37.g0_.y, _e40.g0_.z)), _e45.g7_, _e47.g8_, _e49.g9_);
}

fn multi_vector_rotor_regressive_product(self_2336: MultiVector, other_2086: Rotor) -> MultiVector {
    var self_2337: MultiVector;
    var other_2087: Rotor;

    self_2337 = self_2336;
    other_2087 = other_2086;
    let _e4: MultiVector = self_2337;
    let _e8: Rotor = other_2087;
    let _e19: MultiVector = self_2337;
    let _e23: Rotor = other_2087;
    let _e35: MultiVector = self_2337;
    let _e39: Rotor = other_2087;
    let _e51: MultiVector = self_2337;
    let _e53: Rotor = other_2087;
    let _e59: MultiVector = self_2337;
    let _e63: Rotor = other_2087;
    let _e66: Rotor = other_2087;
    let _e69: Rotor = other_2087;
    let _e74: MultiVector = self_2337;
    let _e76: Rotor = other_2087;
    let _e82: MultiVector = self_2337;
    let _e86: Rotor = other_2087;
    let _e96: MultiVector = self_2337;
    let _e100: Rotor = other_2087;
    let _e111: MultiVector = self_2337;
    let _e115: Rotor = other_2087;
    let _e126: MultiVector = self_2337;
    let _e130: Rotor = other_2087;
    let _e141: MultiVector = self_2337;
    let _e145: Rotor = other_2087;
    let _e156: MultiVector = self_2337;
    let _e160: Rotor = other_2087;
    let _e171: MultiVector = self_2337;
    let _e173: Rotor = other_2087;
    let _e179: MultiVector = self_2337;
    let _e183: Rotor = other_2087;
    let _e195: MultiVector = self_2337;
    let _e199: Rotor = other_2087;
    let _e212: MultiVector = self_2337;
    let _e216: Rotor = other_2087;
    let _e229: MultiVector = self_2337;
    let _e233: Rotor = other_2087;
    let _e244: MultiVector = self_2337;
    let _e246: Rotor = other_2087;
    let _e252: MultiVector = self_2337;
    let _e256: Rotor = other_2087;
    let _e259: Rotor = other_2087;
    let _e262: Rotor = other_2087;
    let _e267: MultiVector = self_2337;
    let _e269: Rotor = other_2087;
    let _e275: MultiVector = self_2337;
    let _e277: Rotor = other_2087;
    let _e282: MultiVector = self_2337;
    let _e286: Rotor = other_2087;
    let _e289: Rotor = other_2087;
    let _e292: Rotor = other_2087;
    let _e297: MultiVector = self_2337;
    let _e299: Rotor = other_2087;
    let _e305: MultiVector = self_2337;
    let _e307: Rotor = other_2087;
    let _e312: MultiVector = self_2337;
    let _e314: Rotor = other_2087;
    let _e319: MultiVector = self_2337;
    let _e321: Rotor = other_2087;
    return MultiVector((((((vec3<f32>(_e4.g5_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g5_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g5_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (_e51.g0_ * vec3<f32>(_e53.g0_.w))), ((vec3<f32>(_e59.g8_.w) * vec3<f32>(_e63.g0_.x, _e66.g0_.y, _e69.g0_.z)) + (_e74.g1_ * vec3<f32>(_e76.g0_.w))), ((((((((vec2<f32>(_e82.g7_.x) * vec2<f32>(_e86.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e96.g7_.y) * vec2<f32>(_e100.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e111.g7_.z) * vec2<f32>(_e115.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e126.g8_.x) * vec2<f32>(_e130.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e141.g8_.y) * vec2<f32>(_e145.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e156.g8_.z) * vec2<f32>(_e160.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e171.g2_ * vec2<f32>(_e173.g0_.w))), ((((((vec4<f32>(_e179.g9_.x) * vec4<f32>(_e183.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e195.g9_.y) * vec4<f32>(_e199.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e212.g9_.z) * vec4<f32>(_e216.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e229.g9_.w) * _e233.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e244.g3_ * vec4<f32>(_e246.g0_.w))), ((vec3<f32>(_e252.g0_.y) * vec3<f32>(_e256.g0_.x, _e259.g0_.y, _e262.g0_.z)) + (_e267.g4_ * vec3<f32>(_e269.g0_.w))), (_e275.g5_ * vec3<f32>(_e277.g0_.w)), ((vec3<f32>(_e282.g0_.z) * vec3<f32>(_e286.g0_.x, _e289.g0_.y, _e292.g0_.z)) + (_e297.g6_ * vec3<f32>(_e299.g0_.w))), (_e305.g7_ * vec3<f32>(_e307.g0_.w)), (_e312.g8_ * vec4<f32>(_e314.g0_.w)), (_e319.g9_ * vec4<f32>(_e321.g0_.w)));
}

fn multi_vector_rotor_geometric_anti_product(self_2338: MultiVector, other_2088: Rotor) -> MultiVector {
    var self_2339: MultiVector;
    var other_2089: Rotor;

    self_2339 = self_2338;
    other_2089 = other_2088;
    let _e4: MultiVector = self_2339;
    let _e8: Rotor = other_2089;
    let _e19: MultiVector = self_2339;
    let _e23: Rotor = other_2089;
    let _e35: MultiVector = self_2339;
    let _e39: Rotor = other_2089;
    let _e51: MultiVector = self_2339;
    let _e55: Rotor = other_2089;
    let _e67: MultiVector = self_2339;
    let _e71: Rotor = other_2089;
    let _e83: MultiVector = self_2339;
    let _e87: Rotor = other_2089;
    let _e99: MultiVector = self_2339;
    let _e103: Rotor = other_2089;
    let _e115: MultiVector = self_2339;
    let _e119: Rotor = other_2089;
    let _e131: MultiVector = self_2339;
    let _e135: Rotor = other_2089;
    let _e147: MultiVector = self_2339;
    let _e149: Rotor = other_2089;
    let _e155: MultiVector = self_2339;
    let _e159: Rotor = other_2089;
    let _e162: Rotor = other_2089;
    let _e165: Rotor = other_2089;
    let _e176: MultiVector = self_2339;
    let _e180: Rotor = other_2089;
    let _e183: Rotor = other_2089;
    let _e186: Rotor = other_2089;
    let _e198: MultiVector = self_2339;
    let _e202: Rotor = other_2089;
    let _e205: Rotor = other_2089;
    let _e208: Rotor = other_2089;
    let _e220: MultiVector = self_2339;
    let _e224: Rotor = other_2089;
    let _e227: Rotor = other_2089;
    let _e230: Rotor = other_2089;
    let _e236: MultiVector = self_2339;
    let _e240: Rotor = other_2089;
    let _e250: MultiVector = self_2339;
    let _e254: Rotor = other_2089;
    let _e265: MultiVector = self_2339;
    let _e269: Rotor = other_2089;
    let _e280: MultiVector = self_2339;
    let _e284: Rotor = other_2089;
    let _e295: MultiVector = self_2339;
    let _e299: Rotor = other_2089;
    let _e310: MultiVector = self_2339;
    let _e314: Rotor = other_2089;
    let _e325: MultiVector = self_2339;
    let _e327: Rotor = other_2089;
    let _e333: MultiVector = self_2339;
    let _e337: Rotor = other_2089;
    let _e348: MultiVector = self_2339;
    let _e352: Rotor = other_2089;
    let _e364: MultiVector = self_2339;
    let _e368: Rotor = other_2089;
    let _e381: MultiVector = self_2339;
    let _e385: Rotor = other_2089;
    let _e398: MultiVector = self_2339;
    let _e402: Rotor = other_2089;
    let _e415: MultiVector = self_2339;
    let _e419: Rotor = other_2089;
    let _e430: MultiVector = self_2339;
    let _e433: Rotor = other_2089;
    let _e445: MultiVector = self_2339;
    let _e449: Rotor = other_2089;
    let _e452: Rotor = other_2089;
    let _e455: Rotor = other_2089;
    let _e460: MultiVector = self_2339;
    let _e464: Rotor = other_2089;
    let _e467: Rotor = other_2089;
    let _e470: Rotor = other_2089;
    let _e482: MultiVector = self_2339;
    let _e486: Rotor = other_2089;
    let _e489: Rotor = other_2089;
    let _e492: Rotor = other_2089;
    let _e504: MultiVector = self_2339;
    let _e508: Rotor = other_2089;
    let _e511: Rotor = other_2089;
    let _e514: Rotor = other_2089;
    let _e526: MultiVector = self_2339;
    let _e530: Rotor = other_2089;
    let _e533: Rotor = other_2089;
    let _e536: Rotor = other_2089;
    let _e541: MultiVector = self_2339;
    let _e545: Rotor = other_2089;
    let _e548: Rotor = other_2089;
    let _e551: Rotor = other_2089;
    let _e563: MultiVector = self_2339;
    let _e567: Rotor = other_2089;
    let _e570: Rotor = other_2089;
    let _e573: Rotor = other_2089;
    let _e585: MultiVector = self_2339;
    let _e589: Rotor = other_2089;
    let _e592: Rotor = other_2089;
    let _e595: Rotor = other_2089;
    let _e607: MultiVector = self_2339;
    let _e611: Rotor = other_2089;
    let _e614: Rotor = other_2089;
    let _e617: Rotor = other_2089;
    let _e622: MultiVector = self_2339;
    let _e626: Rotor = other_2089;
    let _e629: Rotor = other_2089;
    let _e632: Rotor = other_2089;
    let _e644: MultiVector = self_2339;
    let _e648: Rotor = other_2089;
    let _e651: Rotor = other_2089;
    let _e654: Rotor = other_2089;
    let _e666: MultiVector = self_2339;
    let _e670: Rotor = other_2089;
    let _e673: Rotor = other_2089;
    let _e676: Rotor = other_2089;
    let _e688: MultiVector = self_2339;
    let _e692: Rotor = other_2089;
    let _e695: Rotor = other_2089;
    let _e698: Rotor = other_2089;
    let _e703: MultiVector = self_2339;
    let _e707: Rotor = other_2089;
    let _e710: Rotor = other_2089;
    let _e713: Rotor = other_2089;
    let _e725: MultiVector = self_2339;
    let _e729: Rotor = other_2089;
    let _e732: Rotor = other_2089;
    let _e735: Rotor = other_2089;
    let _e747: MultiVector = self_2339;
    let _e751: Rotor = other_2089;
    let _e754: Rotor = other_2089;
    let _e757: Rotor = other_2089;
    let _e769: MultiVector = self_2339;
    let _e773: Rotor = other_2089;
    let _e785: MultiVector = self_2339;
    let _e789: Rotor = other_2089;
    let _e802: MultiVector = self_2339;
    let _e806: Rotor = other_2089;
    let _e817: MultiVector = self_2339;
    let _e821: Rotor = other_2089;
    let _e833: MultiVector = self_2339;
    let _e837: Rotor = other_2089;
    let _e849: MultiVector = self_2339;
    let _e853: Rotor = other_2089;
    let _e865: MultiVector = self_2339;
    let _e869: Rotor = other_2089;
    let _e881: MultiVector = self_2339;
    let _e885: Rotor = other_2089;
    let _e898: MultiVector = self_2339;
    let _e902: Rotor = other_2089;
    let _e914: MultiVector = self_2339;
    let _e918: Rotor = other_2089;
    let _e931: MultiVector = self_2339;
    let _e935: Rotor = other_2089;
    let _e947: MultiVector = self_2339;
    let _e951: Rotor = other_2089;
    let _e963: MultiVector = self_2339;
    let _e967: Rotor = other_2089;
    let _e979: MultiVector = self_2339;
    let _e983: Rotor = other_2089;
    let _e995: MultiVector = self_2339;
    let _e998: Rotor = other_2089;
    return MultiVector((((((((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g5_.x) * vec3<f32>(_e55.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e67.g5_.y) * vec3<f32>(_e71.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e83.g5_.z) * vec3<f32>(_e87.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e99.g6_.x) * vec3<f32>(_e103.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e115.g6_.y) * vec3<f32>(_e119.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e131.g6_.z) * vec3<f32>(_e135.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e147.g0_ * vec3<f32>(_e149.g0_.w))), (((((vec3<f32>(_e155.g1_.x) * vec3<f32>(_e159.g0_.w, _e162.g0_.z, _e165.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e176.g1_.y) * vec3<f32>(_e180.g0_.z, _e183.g0_.w, _e186.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e198.g1_.z) * vec3<f32>(_e202.g0_.y, _e205.g0_.x, _e208.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e220.g8_.w) * vec3<f32>(_e224.g0_.x, _e227.g0_.y, _e230.g0_.z))), ((((((((vec2<f32>(_e236.g7_.x) * vec2<f32>(_e240.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e250.g7_.y) * vec2<f32>(_e254.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e265.g7_.z) * vec2<f32>(_e269.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e280.g8_.x) * vec2<f32>(_e284.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e295.g8_.y) * vec2<f32>(_e299.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e310.g8_.z) * vec2<f32>(_e314.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e325.g2_ * vec2<f32>(_e327.g0_.w))), ((((((((vec4<f32>(_e333.g3_.y) * _e337.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e348.g3_.z) * _e352.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e364.g9_.x) * vec4<f32>(_e368.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e381.g9_.y) * vec4<f32>(_e385.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e398.g9_.z) * vec4<f32>(_e402.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e415.g9_.w) * _e419.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e430.g3_.xxxw * _e433.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec3<f32>(_e445.g0_.y) * vec3<f32>(_e449.g0_.x, _e452.g0_.y, _e455.g0_.z)) + ((vec3<f32>(_e460.g4_.x) * vec3<f32>(_e464.g0_.w, _e467.g0_.z, _e470.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e482.g4_.y) * vec3<f32>(_e486.g0_.z, _e489.g0_.w, _e492.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e504.g4_.z) * vec3<f32>(_e508.g0_.y, _e511.g0_.x, _e514.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e526.g0_.x) * vec3<f32>(_e530.g0_.x, _e533.g0_.y, _e536.g0_.z)) + ((vec3<f32>(_e541.g5_.x) * vec3<f32>(_e545.g0_.w, _e548.g0_.z, _e551.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e563.g5_.y) * vec3<f32>(_e567.g0_.z, _e570.g0_.w, _e573.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e585.g5_.z) * vec3<f32>(_e589.g0_.y, _e592.g0_.x, _e595.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e607.g0_.z) * vec3<f32>(_e611.g0_.x, _e614.g0_.y, _e617.g0_.z)) + ((vec3<f32>(_e622.g6_.x) * vec3<f32>(_e626.g0_.w, _e629.g0_.z, _e632.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e644.g6_.y) * vec3<f32>(_e648.g0_.z, _e651.g0_.w, _e654.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e666.g6_.z) * vec3<f32>(_e670.g0_.y, _e673.g0_.x, _e676.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e688.g2_.y) * vec3<f32>(_e692.g0_.x, _e695.g0_.y, _e698.g0_.z)) + ((vec3<f32>(_e703.g7_.x) * vec3<f32>(_e707.g0_.w, _e710.g0_.z, _e713.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e725.g7_.y) * vec3<f32>(_e729.g0_.z, _e732.g0_.w, _e735.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e747.g7_.z) * vec3<f32>(_e751.g0_.y, _e754.g0_.x, _e757.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((vec4<f32>(_e769.g1_.y) * vec4<f32>(_e773.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e785.g1_.z) * vec4<f32>(_e789.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e802.g2_.x) * _e806.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e817.g8_.x) * _e821.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e833.g8_.y) * _e837.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e849.g8_.z) * _e853.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e865.g8_.w) * vec4<f32>(_e869.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e881.g1_.x) * vec4<f32>(_e885.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((vec4<f32>(_e898.g3_.y) * vec4<f32>(_e902.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e914.g3_.z) * vec4<f32>(_e918.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e931.g9_.x) * _e935.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e947.g9_.y) * _e951.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e963.g9_.z) * _e967.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e979.g9_.w) * vec4<f32>(_e983.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e995.g3_.wwwx * _e998.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_inner_anti_product(self_2340: MultiVector, other_2090: Rotor) -> MultiVector {
    var self_2341: MultiVector;
    var other_2091: Rotor;

    self_2341 = self_2340;
    other_2091 = other_2090;
    let _e4: MultiVector = self_2341;
    let _e8: Rotor = other_2091;
    let _e19: MultiVector = self_2341;
    let _e23: Rotor = other_2091;
    let _e35: MultiVector = self_2341;
    let _e39: Rotor = other_2091;
    let _e51: MultiVector = self_2341;
    let _e55: Rotor = other_2091;
    let _e67: MultiVector = self_2341;
    let _e71: Rotor = other_2091;
    let _e83: MultiVector = self_2341;
    let _e87: Rotor = other_2091;
    let _e99: MultiVector = self_2341;
    let _e101: Rotor = other_2091;
    let _e107: MultiVector = self_2341;
    let _e109: Rotor = other_2091;
    let _e114: MultiVector = self_2341;
    let _e116: Rotor = other_2091;
    let _e121: MultiVector = self_2341;
    let _e123: Rotor = other_2091;
    let _e128: MultiVector = self_2341;
    let _e130: Rotor = other_2091;
    let _e135: MultiVector = self_2341;
    let _e139: Rotor = other_2091;
    let _e142: Rotor = other_2091;
    let _e145: Rotor = other_2091;
    let _e150: MultiVector = self_2341;
    let _e152: Rotor = other_2091;
    let _e158: MultiVector = self_2341;
    let _e162: Rotor = other_2091;
    let _e165: Rotor = other_2091;
    let _e168: Rotor = other_2091;
    let _e173: MultiVector = self_2341;
    let _e175: Rotor = other_2091;
    let _e181: MultiVector = self_2341;
    let _e185: Rotor = other_2091;
    let _e188: Rotor = other_2091;
    let _e191: Rotor = other_2091;
    let _e196: MultiVector = self_2341;
    let _e198: Rotor = other_2091;
    let _e204: MultiVector = self_2341;
    let _e208: Rotor = other_2091;
    let _e220: MultiVector = self_2341;
    let _e224: Rotor = other_2091;
    let _e237: MultiVector = self_2341;
    let _e241: Rotor = other_2091;
    let _e252: MultiVector = self_2341;
    let _e256: Rotor = other_2091;
    let _e268: MultiVector = self_2341;
    let _e272: Rotor = other_2091;
    let _e284: MultiVector = self_2341;
    let _e288: Rotor = other_2091;
    let _e300: MultiVector = self_2341;
    let _e304: Rotor = other_2091;
    let _e316: MultiVector = self_2341;
    let _e320: Rotor = other_2091;
    let _e333: MultiVector = self_2341;
    let _e337: Rotor = other_2091;
    let _e349: MultiVector = self_2341;
    let _e353: Rotor = other_2091;
    let _e366: MultiVector = self_2341;
    let _e370: Rotor = other_2091;
    let _e382: MultiVector = self_2341;
    let _e386: Rotor = other_2091;
    let _e398: MultiVector = self_2341;
    let _e402: Rotor = other_2091;
    let _e414: MultiVector = self_2341;
    let _e418: Rotor = other_2091;
    let _e430: MultiVector = self_2341;
    let _e433: Rotor = other_2091;
    return MultiVector(((((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g6_.x) * vec3<f32>(_e55.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e67.g6_.y) * vec3<f32>(_e71.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e83.g6_.z) * vec3<f32>(_e87.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e99.g0_ * vec3<f32>(_e101.g0_.w))), (_e107.g1_ * vec3<f32>(_e109.g0_.w)), (_e114.g2_ * vec2<f32>(_e116.g0_.w)), (_e121.g3_ * vec4<f32>(_e123.g0_.w)), (_e128.g4_ * vec3<f32>(_e130.g0_.w)), ((vec3<f32>(_e135.g0_.x) * vec3<f32>(_e139.g0_.x, _e142.g0_.y, _e145.g0_.z)) + (_e150.g5_ * vec3<f32>(_e152.g0_.w))), ((vec3<f32>(_e158.g0_.z) * vec3<f32>(_e162.g0_.x, _e165.g0_.y, _e168.g0_.z)) + (_e173.g6_ * vec3<f32>(_e175.g0_.w))), ((vec3<f32>(_e181.g2_.y) * vec3<f32>(_e185.g0_.x, _e188.g0_.y, _e191.g0_.z)) + (_e196.g7_ * vec3<f32>(_e198.g0_.w))), (((((((((vec4<f32>(_e204.g1_.y) * vec4<f32>(_e208.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e220.g1_.z) * vec4<f32>(_e224.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e237.g2_.x) * _e241.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e252.g8_.x) * vec4<f32>(_e256.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e268.g8_.y) * vec4<f32>(_e272.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e284.g8_.z) * vec4<f32>(_e288.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e300.g8_.w) * vec4<f32>(_e304.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e316.g1_.x) * vec4<f32>(_e320.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((vec4<f32>(_e333.g3_.y) * vec4<f32>(_e337.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e349.g3_.z) * vec4<f32>(_e353.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e366.g9_.x) * _e370.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e382.g9_.y) * _e386.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e398.g9_.z) * _e402.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e414.g9_.w) * vec4<f32>(_e418.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e430.g3_.wwwx * _e433.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_right_anti_contraction(self_2342: MultiVector, other_2092: Rotor) -> MultiVector {
    var self_2343: MultiVector;
    var other_2093: Rotor;

    self_2343 = self_2342;
    other_2093 = other_2092;
    let _e4: MultiVector = self_2343;
    let _e8: Rotor = other_2093;
    let _e19: MultiVector = self_2343;
    let _e23: Rotor = other_2093;
    let _e35: MultiVector = self_2343;
    let _e39: Rotor = other_2093;
    let _e51: MultiVector = self_2343;
    let _e55: Rotor = other_2093;
    let _e67: MultiVector = self_2343;
    let _e71: Rotor = other_2093;
    let _e83: MultiVector = self_2343;
    let _e87: Rotor = other_2093;
    let _e99: MultiVector = self_2343;
    let _e101: Rotor = other_2093;
    let _e107: MultiVector = self_2343;
    let _e109: Rotor = other_2093;
    let _e114: MultiVector = self_2343;
    let _e116: Rotor = other_2093;
    let _e121: MultiVector = self_2343;
    let _e123: Rotor = other_2093;
    let _e128: MultiVector = self_2343;
    let _e130: Rotor = other_2093;
    let _e135: MultiVector = self_2343;
    let _e139: Rotor = other_2093;
    let _e142: Rotor = other_2093;
    let _e145: Rotor = other_2093;
    let _e150: MultiVector = self_2343;
    let _e152: Rotor = other_2093;
    let _e158: MultiVector = self_2343;
    let _e160: Rotor = other_2093;
    let _e165: MultiVector = self_2343;
    let _e169: Rotor = other_2093;
    let _e172: Rotor = other_2093;
    let _e175: Rotor = other_2093;
    let _e180: MultiVector = self_2343;
    let _e182: Rotor = other_2093;
    let _e188: MultiVector = self_2343;
    let _e192: Rotor = other_2093;
    let _e204: MultiVector = self_2343;
    let _e208: Rotor = other_2093;
    let _e221: MultiVector = self_2343;
    let _e225: Rotor = other_2093;
    let _e236: MultiVector = self_2343;
    let _e240: Rotor = other_2093;
    let _e252: MultiVector = self_2343;
    let _e256: Rotor = other_2093;
    let _e268: MultiVector = self_2343;
    let _e272: Rotor = other_2093;
    let _e284: MultiVector = self_2343;
    let _e288: Rotor = other_2093;
    let _e300: MultiVector = self_2343;
    let _e304: Rotor = other_2093;
    let _e317: MultiVector = self_2343;
    let _e321: Rotor = other_2093;
    let _e333: MultiVector = self_2343;
    let _e337: Rotor = other_2093;
    let _e350: MultiVector = self_2343;
    let _e354: Rotor = other_2093;
    let _e366: MultiVector = self_2343;
    let _e370: Rotor = other_2093;
    let _e382: MultiVector = self_2343;
    let _e386: Rotor = other_2093;
    let _e398: MultiVector = self_2343;
    let _e402: Rotor = other_2093;
    let _e414: MultiVector = self_2343;
    let _e417: Rotor = other_2093;
    return MultiVector(((((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g6_.x) * vec3<f32>(_e55.g0_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e67.g6_.y) * vec3<f32>(_e71.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e83.g6_.z) * vec3<f32>(_e87.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e99.g0_ * vec3<f32>(_e101.g0_.w))), (_e107.g1_ * vec3<f32>(_e109.g0_.w)), (_e114.g2_ * vec2<f32>(_e116.g0_.w)), (_e121.g3_ * vec4<f32>(_e123.g0_.w)), (_e128.g4_ * vec3<f32>(_e130.g0_.w)), ((vec3<f32>(_e135.g0_.x) * vec3<f32>(_e139.g0_.x, _e142.g0_.y, _e145.g0_.z)) + (_e150.g5_ * vec3<f32>(_e152.g0_.w))), (_e158.g6_ * vec3<f32>(_e160.g0_.w)), ((vec3<f32>(_e165.g2_.y) * vec3<f32>(_e169.g0_.x, _e172.g0_.y, _e175.g0_.z)) + (_e180.g7_ * vec3<f32>(_e182.g0_.w))), (((((((((vec4<f32>(_e188.g1_.y) * vec4<f32>(_e192.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e204.g1_.z) * vec4<f32>(_e208.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e221.g2_.x) * _e225.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e236.g8_.x) * vec4<f32>(_e240.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e252.g8_.y) * vec4<f32>(_e256.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e268.g8_.z) * vec4<f32>(_e272.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e284.g8_.w) * vec4<f32>(_e288.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e300.g1_.x) * vec4<f32>(_e304.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((vec4<f32>(_e317.g3_.y) * vec4<f32>(_e321.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e333.g3_.z) * vec4<f32>(_e337.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e350.g9_.x) * vec4<f32>(_e354.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e366.g9_.y) * vec4<f32>(_e370.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e382.g9_.z) * vec4<f32>(_e386.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e398.g9_.w) * vec4<f32>(_e402.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e414.g3_.wwwx * _e417.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_anti_scalar_product(self_2344: MultiVector, other_2094: Rotor) -> AntiScalar {
    var self_2345: MultiVector;
    var other_2095: Rotor;

    self_2345 = self_2344;
    other_2095 = other_2094;
    let _e4: MultiVector = self_2345;
    let _e7: Rotor = other_2095;
    let _e11: MultiVector = self_2345;
    let _e14: Rotor = other_2095;
    let _e19: MultiVector = self_2345;
    let _e22: Rotor = other_2095;
    let _e27: MultiVector = self_2345;
    let _e30: Rotor = other_2095;
    return AntiScalar(((((_e4.g0_.z * _e7.g0_.w) - (_e11.g6_.x * _e14.g0_.x)) - (_e19.g6_.y * _e22.g0_.y)) - (_e27.g6_.z * _e30.g0_.z)));
}

fn multi_vector_translator_into(self_2346: MultiVector) -> Translator {
    var self_2347: MultiVector;

    self_2347 = self_2346;
    let _e2: MultiVector = self_2347;
    let _e5: MultiVector = self_2347;
    let _e8: MultiVector = self_2347;
    let _e11: MultiVector = self_2347;
    return Translator(vec4<f32>(_e2.g7_.x, _e5.g7_.y, _e8.g7_.z, _e11.g0_.z));
}

fn multi_vector_translator_add(self_2348: MultiVector, other_2096: Translator) -> MultiVector {
    var self_2349: MultiVector;
    var other_2097: Translator;

    self_2349 = self_2348;
    other_2097 = other_2096;
    let _e4: MultiVector = self_2349;
    let _e6: Translator = other_2097;
    let _e9: Translator = other_2097;
    let _e12: Translator = other_2097;
    let _e22: MultiVector = self_2349;
    let _e24: MultiVector = self_2349;
    let _e26: MultiVector = self_2349;
    let _e28: MultiVector = self_2349;
    let _e30: MultiVector = self_2349;
    let _e32: MultiVector = self_2349;
    let _e34: MultiVector = self_2349;
    let _e36: Translator = other_2097;
    let _e39: Translator = other_2097;
    let _e42: Translator = other_2097;
    let _e47: MultiVector = self_2349;
    let _e49: MultiVector = self_2349;
    return MultiVector((_e4.g0_ + (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, _e32.g6_, (_e34.g7_ + vec3<f32>(_e36.g0_.x, _e39.g0_.y, _e42.g0_.z)), _e47.g8_, _e49.g9_);
}

fn multi_vector_translator_sub(self_2350: MultiVector, other_2098: Translator) -> MultiVector {
    var self_2351: MultiVector;
    var other_2099: Translator;

    self_2351 = self_2350;
    other_2099 = other_2098;
    let _e4: MultiVector = self_2351;
    let _e6: Translator = other_2099;
    let _e9: Translator = other_2099;
    let _e12: Translator = other_2099;
    let _e22: MultiVector = self_2351;
    let _e24: MultiVector = self_2351;
    let _e26: MultiVector = self_2351;
    let _e28: MultiVector = self_2351;
    let _e30: MultiVector = self_2351;
    let _e32: MultiVector = self_2351;
    let _e34: MultiVector = self_2351;
    let _e36: Translator = other_2099;
    let _e39: Translator = other_2099;
    let _e42: Translator = other_2099;
    let _e47: MultiVector = self_2351;
    let _e49: MultiVector = self_2351;
    return MultiVector((_e4.g0_ - (vec3<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.w) * vec3<f32>(0.0, 0.0, 1.0))), _e22.g1_, _e24.g2_, _e26.g3_, _e28.g4_, _e30.g5_, _e32.g6_, (_e34.g7_ - vec3<f32>(_e36.g0_.x, _e39.g0_.y, _e42.g0_.z)), _e47.g8_, _e49.g9_);
}

fn multi_vector_translator_regressive_product(self_2352: MultiVector, other_2100: Translator) -> MultiVector {
    var self_2353: MultiVector;
    var other_2101: Translator;

    self_2353 = self_2352;
    other_2101 = other_2100;
    let _e4: MultiVector = self_2353;
    let _e8: Translator = other_2101;
    let _e19: MultiVector = self_2353;
    let _e23: Translator = other_2101;
    let _e35: MultiVector = self_2353;
    let _e39: Translator = other_2101;
    let _e51: MultiVector = self_2353;
    let _e53: Translator = other_2101;
    let _e59: MultiVector = self_2353;
    let _e63: Translator = other_2101;
    let _e66: Translator = other_2101;
    let _e69: Translator = other_2101;
    let _e80: MultiVector = self_2353;
    let _e84: Translator = other_2101;
    let _e87: Translator = other_2101;
    let _e90: Translator = other_2101;
    let _e102: MultiVector = self_2353;
    let _e106: Translator = other_2101;
    let _e109: Translator = other_2101;
    let _e112: Translator = other_2101;
    let _e124: MultiVector = self_2353;
    let _e126: Translator = other_2101;
    let _e132: MultiVector = self_2353;
    let _e136: Translator = other_2101;
    let _e146: MultiVector = self_2353;
    let _e150: Translator = other_2101;
    let _e161: MultiVector = self_2353;
    let _e165: Translator = other_2101;
    let _e176: MultiVector = self_2353;
    let _e178: Translator = other_2101;
    let _e184: MultiVector = self_2353;
    let _e188: Translator = other_2101;
    let _e199: MultiVector = self_2353;
    let _e203: Translator = other_2101;
    let _e215: MultiVector = self_2353;
    let _e219: Translator = other_2101;
    let _e231: MultiVector = self_2353;
    let _e233: Translator = other_2101;
    let _e239: MultiVector = self_2353;
    let _e241: Translator = other_2101;
    let _e246: MultiVector = self_2353;
    let _e250: Translator = other_2101;
    let _e253: Translator = other_2101;
    let _e256: Translator = other_2101;
    let _e261: MultiVector = self_2353;
    let _e263: Translator = other_2101;
    let _e269: MultiVector = self_2353;
    let _e271: Translator = other_2101;
    let _e276: MultiVector = self_2353;
    let _e280: Translator = other_2101;
    let _e283: Translator = other_2101;
    let _e286: Translator = other_2101;
    let _e291: MultiVector = self_2353;
    let _e293: Translator = other_2101;
    let _e299: MultiVector = self_2353;
    let _e301: Translator = other_2101;
    let _e306: MultiVector = self_2353;
    let _e308: Translator = other_2101;
    return MultiVector((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (_e51.g0_ * vec3<f32>(_e53.g0_.w))), (((((vec3<f32>(_e59.g8_.x) * vec3<f32>(_e63.g0_.z, _e66.g0_.z, _e69.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e80.g8_.y) * vec3<f32>(_e84.g0_.z, _e87.g0_.z, _e90.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e102.g8_.z) * vec3<f32>(_e106.g0_.y, _e109.g0_.x, _e112.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e124.g1_ * vec3<f32>(_e126.g0_.w))), (((((vec2<f32>(_e132.g6_.x) * vec2<f32>(_e136.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e146.g6_.y) * vec2<f32>(_e150.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e161.g6_.z) * vec2<f32>(_e165.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e176.g2_ * vec2<f32>(_e178.g0_.w))), (((((vec4<f32>(_e184.g9_.x) * _e188.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e199.g9_.y) * _e203.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e215.g9_.z) * _e219.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e231.g3_ * vec4<f32>(_e233.g0_.w))), (_e239.g4_ * vec3<f32>(_e241.g0_.w)), ((vec3<f32>(_e246.g0_.y) * vec3<f32>(_e250.g0_.x, _e253.g0_.y, _e256.g0_.z)) + (_e261.g5_ * vec3<f32>(_e263.g0_.w))), (_e269.g6_ * vec3<f32>(_e271.g0_.w)), ((vec3<f32>(_e276.g0_.z) * vec3<f32>(_e280.g0_.x, _e283.g0_.y, _e286.g0_.z)) + (_e291.g7_ * vec3<f32>(_e293.g0_.w))), (_e299.g8_ * vec4<f32>(_e301.g0_.w)), (_e306.g9_ * vec4<f32>(_e308.g0_.w)));
}

fn multi_vector_translator_geometric_anti_product(self_2354: MultiVector, other_2102: Translator) -> MultiVector {
    var self_2355: MultiVector;
    var other_2103: Translator;

    self_2355 = self_2354;
    other_2103 = other_2102;
    let _e4: MultiVector = self_2355;
    let _e8: Translator = other_2103;
    let _e19: MultiVector = self_2355;
    let _e23: Translator = other_2103;
    let _e35: MultiVector = self_2355;
    let _e39: Translator = other_2103;
    let _e51: MultiVector = self_2355;
    let _e53: Translator = other_2103;
    let _e61: MultiVector = self_2355;
    let _e65: Translator = other_2103;
    let _e68: Translator = other_2103;
    let _e71: Translator = other_2103;
    let _e77: MultiVector = self_2355;
    let _e81: Translator = other_2103;
    let _e84: Translator = other_2103;
    let _e87: Translator = other_2103;
    let _e99: MultiVector = self_2355;
    let _e103: Translator = other_2103;
    let _e106: Translator = other_2103;
    let _e109: Translator = other_2103;
    let _e121: MultiVector = self_2355;
    let _e125: Translator = other_2103;
    let _e128: Translator = other_2103;
    let _e131: Translator = other_2103;
    let _e143: MultiVector = self_2355;
    let _e145: Translator = other_2103;
    let _e151: MultiVector = self_2355;
    let _e155: Translator = other_2103;
    let _e165: MultiVector = self_2355;
    let _e169: Translator = other_2103;
    let _e180: MultiVector = self_2355;
    let _e184: Translator = other_2103;
    let _e195: MultiVector = self_2355;
    let _e197: Translator = other_2103;
    let _e203: MultiVector = self_2355;
    let _e207: Translator = other_2103;
    let _e219: MultiVector = self_2355;
    let _e223: Translator = other_2103;
    let _e235: MultiVector = self_2355;
    let _e239: Translator = other_2103;
    let _e251: MultiVector = self_2355;
    let _e255: Translator = other_2103;
    let _e267: MultiVector = self_2355;
    let _e270: Translator = other_2103;
    let _e281: MultiVector = self_2355;
    let _e283: Translator = other_2103;
    let _e288: MultiVector = self_2355;
    let _e292: Translator = other_2103;
    let _e295: Translator = other_2103;
    let _e298: Translator = other_2103;
    let _e303: MultiVector = self_2355;
    let _e307: Translator = other_2103;
    let _e310: Translator = other_2103;
    let _e313: Translator = other_2103;
    let _e325: MultiVector = self_2355;
    let _e329: Translator = other_2103;
    let _e332: Translator = other_2103;
    let _e335: Translator = other_2103;
    let _e347: MultiVector = self_2355;
    let _e351: Translator = other_2103;
    let _e362: MultiVector = self_2355;
    let _e366: Translator = other_2103;
    let _e377: MultiVector = self_2355;
    let _e380: MultiVector = self_2355;
    let _e383: MultiVector = self_2355;
    let _e387: Translator = other_2103;
    let _e390: Translator = other_2103;
    let _e393: Translator = other_2103;
    let _e405: MultiVector = self_2355;
    let _e407: Translator = other_2103;
    let _e412: MultiVector = self_2355;
    let _e416: Translator = other_2103;
    let _e419: Translator = other_2103;
    let _e422: Translator = other_2103;
    let _e427: MultiVector = self_2355;
    let _e431: Translator = other_2103;
    let _e434: Translator = other_2103;
    let _e437: Translator = other_2103;
    let _e449: MultiVector = self_2355;
    let _e453: Translator = other_2103;
    let _e456: Translator = other_2103;
    let _e459: Translator = other_2103;
    let _e471: MultiVector = self_2355;
    let _e475: Translator = other_2103;
    let _e486: MultiVector = self_2355;
    let _e490: Translator = other_2103;
    let _e501: MultiVector = self_2355;
    let _e504: MultiVector = self_2355;
    let _e507: MultiVector = self_2355;
    let _e511: Translator = other_2103;
    let _e514: Translator = other_2103;
    let _e517: Translator = other_2103;
    let _e529: MultiVector = self_2355;
    let _e533: Translator = other_2103;
    let _e543: MultiVector = self_2355;
    let _e547: Translator = other_2103;
    let _e558: MultiVector = self_2355;
    let _e562: Translator = other_2103;
    let _e574: MultiVector = self_2355;
    let _e578: Translator = other_2103;
    let _e589: MultiVector = self_2355;
    let _e593: Translator = other_2103;
    let _e603: MultiVector = self_2355;
    let _e607: Translator = other_2103;
    let _e618: MultiVector = self_2355;
    let _e622: Translator = other_2103;
    let _e634: MultiVector = self_2355;
    let _e638: Translator = other_2103;
    return MultiVector((((((vec3<f32>(_e4.g4_.x) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e19.g4_.y) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e35.g4_.z) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (_e51.g0_ * vec3<f32>(_e53.g0_.w))), (((((vec3<f32>(0.0) - (vec3<f32>(_e61.g2_.x) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z))) + ((vec3<f32>(_e77.g8_.x) * vec3<f32>(_e81.g0_.z, _e84.g0_.z, _e87.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e99.g8_.y) * vec3<f32>(_e103.g0_.z, _e106.g0_.z, _e109.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e121.g8_.z) * vec3<f32>(_e125.g0_.y, _e128.g0_.x, _e131.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e143.g1_ * vec3<f32>(_e145.g0_.w))), (((((vec2<f32>(_e151.g6_.x) * vec2<f32>(_e155.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e165.g6_.y) * vec2<f32>(_e169.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e180.g6_.z) * vec2<f32>(_e184.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e195.g2_ * vec2<f32>(_e197.g0_.w))), ((((((vec4<f32>(_e203.g3_.w) * _e207.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e219.g9_.x) * _e223.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e235.g9_.y) * _e239.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e251.g9_.z) * _e255.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((_e267.g3_.xyzx * _e270.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e281.g4_ * vec3<f32>(_e283.g0_.w)), ((((((vec3<f32>(_e288.g0_.y) * vec3<f32>(_e292.g0_.x, _e295.g0_.y, _e298.g0_.z)) + ((vec3<f32>(_e303.g4_.y) * vec3<f32>(_e307.g0_.z, _e310.g0_.z, _e313.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e325.g4_.z) * vec3<f32>(_e329.g0_.y, _e332.g0_.x, _e335.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e347.g5_.y) * vec3<f32>(_e351.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e362.g5_.z) * vec3<f32>(_e366.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e377.g5_.x, _e380.g4_.x, _e383.g4_.x) * vec3<f32>(_e387.g0_.w, _e390.g0_.z, _e393.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), (_e405.g6_ * vec3<f32>(_e407.g0_.w)), ((((((vec3<f32>(_e412.g0_.z) * vec3<f32>(_e416.g0_.x, _e419.g0_.y, _e422.g0_.z)) + ((vec3<f32>(_e427.g6_.y) * vec3<f32>(_e431.g0_.z, _e434.g0_.z, _e437.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e449.g6_.z) * vec3<f32>(_e453.g0_.y, _e456.g0_.x, _e459.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e471.g7_.y) * vec3<f32>(_e475.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e486.g7_.z) * vec3<f32>(_e490.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e501.g7_.x, _e504.g6_.x, _e507.g6_.x) * vec3<f32>(_e511.g0_.w, _e514.g0_.z, _e517.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((vec4<f32>(_e529.g8_.y) * _e533.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e543.g8_.z) * _e547.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e558.g8_.w) * vec4<f32>(_e562.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e574.g8_.x) * _e578.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))), (((((vec4<f32>(_e589.g9_.y) * _e593.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e603.g9_.z) * _e607.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e618.g9_.w) * vec4<f32>(_e622.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e634.g9_.x) * _e638.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_inner_anti_product(self_2356: MultiVector, other_2104: Translator) -> MultiVector {
    var self_2357: MultiVector;
    var other_2105: Translator;

    self_2357 = self_2356;
    other_2105 = other_2104;
    let _e4: MultiVector = self_2357;
    let _e6: Translator = other_2105;
    let _e11: MultiVector = self_2357;
    let _e13: Translator = other_2105;
    let _e18: MultiVector = self_2357;
    let _e20: Translator = other_2105;
    let _e25: MultiVector = self_2357;
    let _e27: Translator = other_2105;
    let _e32: MultiVector = self_2357;
    let _e34: Translator = other_2105;
    let _e39: MultiVector = self_2357;
    let _e41: Translator = other_2105;
    let _e46: MultiVector = self_2357;
    let _e48: Translator = other_2105;
    let _e53: MultiVector = self_2357;
    let _e57: Translator = other_2105;
    let _e60: Translator = other_2105;
    let _e63: Translator = other_2105;
    let _e68: MultiVector = self_2357;
    let _e70: Translator = other_2105;
    let _e76: MultiVector = self_2357;
    let _e78: Translator = other_2105;
    let _e83: MultiVector = self_2357;
    let _e87: Translator = other_2105;
    let _e97: MultiVector = self_2357;
    let _e101: Translator = other_2105;
    let _e112: MultiVector = self_2357;
    let _e116: Translator = other_2105;
    let _e128: MultiVector = self_2357;
    let _e132: Translator = other_2105;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec2<f32>(_e20.g0_.w)), (_e25.g3_ * vec4<f32>(_e27.g0_.w)), (_e32.g4_ * vec3<f32>(_e34.g0_.w)), (_e39.g5_ * vec3<f32>(_e41.g0_.w)), (_e46.g6_ * vec3<f32>(_e48.g0_.w)), ((vec3<f32>(_e53.g0_.z) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)) + (_e68.g7_ * vec3<f32>(_e70.g0_.w))), (_e76.g8_ * vec4<f32>(_e78.g0_.w)), (((((vec4<f32>(_e83.g9_.y) * _e87.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e97.g9_.z) * _e101.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e112.g9_.w) * vec4<f32>(_e116.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e128.g9_.x) * _e132.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_right_anti_contraction(self_2358: MultiVector, other_2106: Translator) -> MultiVector {
    var self_2359: MultiVector;
    var other_2107: Translator;

    self_2359 = self_2358;
    other_2107 = other_2106;
    let _e4: MultiVector = self_2359;
    let _e6: Translator = other_2107;
    let _e11: MultiVector = self_2359;
    let _e13: Translator = other_2107;
    let _e18: MultiVector = self_2359;
    let _e20: Translator = other_2107;
    let _e25: MultiVector = self_2359;
    let _e27: Translator = other_2107;
    let _e32: MultiVector = self_2359;
    let _e34: Translator = other_2107;
    let _e39: MultiVector = self_2359;
    let _e41: Translator = other_2107;
    let _e46: MultiVector = self_2359;
    let _e48: Translator = other_2107;
    let _e53: MultiVector = self_2359;
    let _e55: Translator = other_2107;
    let _e60: MultiVector = self_2359;
    let _e62: Translator = other_2107;
    let _e67: MultiVector = self_2359;
    let _e69: Translator = other_2107;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)), (_e18.g2_ * vec2<f32>(_e20.g0_.w)), (_e25.g3_ * vec4<f32>(_e27.g0_.w)), (_e32.g4_ * vec3<f32>(_e34.g0_.w)), (_e39.g5_ * vec3<f32>(_e41.g0_.w)), (_e46.g6_ * vec3<f32>(_e48.g0_.w)), (_e53.g7_ * vec3<f32>(_e55.g0_.w)), (_e60.g8_ * vec4<f32>(_e62.g0_.w)), (_e67.g9_ * vec4<f32>(_e69.g0_.w)));
}

fn multi_vector_translator_anti_scalar_product(self_2360: MultiVector, other_2108: Translator) -> AntiScalar {
    var self_2361: MultiVector;
    var other_2109: Translator;

    self_2361 = self_2360;
    other_2109 = other_2108;
    let _e4: MultiVector = self_2361;
    let _e7: Translator = other_2109;
    return AntiScalar((_e4.g0_.z * _e7.g0_.w));
}

fn multi_vector_flector_into(self_2362: MultiVector) -> Flector {
    var self_2363: MultiVector;

    self_2363 = self_2362;
    let _e2: MultiVector = self_2363;
    let _e4: MultiVector = self_2363;
    return Flector(_e2.g3_, _e4.g9_);
}

fn multi_vector_flector_add(self_2364: MultiVector, other_2110: Flector) -> MultiVector {
    var self_2365: MultiVector;
    var other_2111: Flector;

    self_2365 = self_2364;
    other_2111 = other_2110;
    let _e4: MultiVector = self_2365;
    let _e6: MultiVector = self_2365;
    let _e8: MultiVector = self_2365;
    let _e10: MultiVector = self_2365;
    let _e12: Flector = other_2111;
    let _e15: MultiVector = self_2365;
    let _e17: MultiVector = self_2365;
    let _e19: MultiVector = self_2365;
    let _e21: MultiVector = self_2365;
    let _e23: MultiVector = self_2365;
    let _e25: MultiVector = self_2365;
    let _e27: Flector = other_2111;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ + _e12.g0_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, (_e25.g9_ + _e27.g1_));
}

fn multi_vector_flector_sub(self_2366: MultiVector, other_2112: Flector) -> MultiVector {
    var self_2367: MultiVector;
    var other_2113: Flector;

    self_2367 = self_2366;
    other_2113 = other_2112;
    let _e4: MultiVector = self_2367;
    let _e6: MultiVector = self_2367;
    let _e8: MultiVector = self_2367;
    let _e10: MultiVector = self_2367;
    let _e12: Flector = other_2113;
    let _e15: MultiVector = self_2367;
    let _e17: MultiVector = self_2367;
    let _e19: MultiVector = self_2367;
    let _e21: MultiVector = self_2367;
    let _e23: MultiVector = self_2367;
    let _e25: MultiVector = self_2367;
    let _e27: Flector = other_2113;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ - _e12.g0_), _e15.g4_, _e17.g5_, _e19.g6_, _e21.g7_, _e23.g8_, (_e25.g9_ - _e27.g1_));
}

fn multi_vector_flector_geometric_anti_product(self_2368: MultiVector, other_2114: Flector) -> MultiVector {
    var self_2369: MultiVector;
    var other_2115: Flector;

    self_2369 = self_2368;
    other_2115 = other_2114;
    let _e4: MultiVector = self_2369;
    let _e8: Flector = other_2115;
    let _e18: MultiVector = self_2369;
    let _e22: Flector = other_2115;
    let _e33: MultiVector = self_2369;
    let _e37: Flector = other_2115;
    let _e40: Flector = other_2115;
    let _e43: Flector = other_2115;
    let _e55: MultiVector = self_2369;
    let _e59: Flector = other_2115;
    let _e71: MultiVector = self_2369;
    let _e75: Flector = other_2115;
    let _e78: Flector = other_2115;
    let _e81: Flector = other_2115;
    let _e93: MultiVector = self_2369;
    let _e97: Flector = other_2115;
    let _e100: Flector = other_2115;
    let _e103: Flector = other_2115;
    let _e115: MultiVector = self_2369;
    let _e119: Flector = other_2115;
    let _e122: Flector = other_2115;
    let _e125: Flector = other_2115;
    let _e137: MultiVector = self_2369;
    let _e141: Flector = other_2115;
    let _e153: MultiVector = self_2369;
    let _e157: Flector = other_2115;
    let _e168: MultiVector = self_2369;
    let _e172: Flector = other_2115;
    let _e183: MultiVector = self_2369;
    let _e187: Flector = other_2115;
    let _e198: MultiVector = self_2369;
    let _e202: Flector = other_2115;
    let _e213: MultiVector = self_2369;
    let _e217: Flector = other_2115;
    let _e220: Flector = other_2115;
    let _e223: Flector = other_2115;
    let _e228: MultiVector = self_2369;
    let _e232: Flector = other_2115;
    let _e235: Flector = other_2115;
    let _e238: Flector = other_2115;
    let _e244: MultiVector = self_2369;
    let _e248: Flector = other_2115;
    let _e251: Flector = other_2115;
    let _e254: Flector = other_2115;
    let _e266: MultiVector = self_2369;
    let _e270: Flector = other_2115;
    let _e273: Flector = other_2115;
    let _e276: Flector = other_2115;
    let _e288: MultiVector = self_2369;
    let _e292: Flector = other_2115;
    let _e295: Flector = other_2115;
    let _e298: Flector = other_2115;
    let _e310: MultiVector = self_2369;
    let _e314: Flector = other_2115;
    let _e317: Flector = other_2115;
    let _e320: Flector = other_2115;
    let _e332: MultiVector = self_2369;
    let _e336: Flector = other_2115;
    let _e339: Flector = other_2115;
    let _e342: Flector = other_2115;
    let _e354: MultiVector = self_2369;
    let _e358: Flector = other_2115;
    let _e361: Flector = other_2115;
    let _e364: Flector = other_2115;
    let _e376: MultiVector = self_2369;
    let _e380: Flector = other_2115;
    let _e389: MultiVector = self_2369;
    let _e393: Flector = other_2115;
    let _e403: MultiVector = self_2369;
    let _e407: Flector = other_2115;
    let _e417: MultiVector = self_2369;
    let _e421: Flector = other_2115;
    let _e431: MultiVector = self_2369;
    let _e435: Flector = other_2115;
    let _e446: MultiVector = self_2369;
    let _e450: Flector = other_2115;
    let _e461: MultiVector = self_2369;
    let _e465: Flector = other_2115;
    let _e476: MultiVector = self_2369;
    let _e480: Flector = other_2115;
    let _e491: MultiVector = self_2369;
    let _e495: Flector = other_2115;
    let _e506: MultiVector = self_2369;
    let _e510: Flector = other_2115;
    let _e521: MultiVector = self_2369;
    let _e525: Flector = other_2115;
    let _e536: MultiVector = self_2369;
    let _e539: MultiVector = self_2369;
    let _e543: Flector = other_2115;
    let _e546: Flector = other_2115;
    let _e556: MultiVector = self_2369;
    let _e560: Flector = other_2115;
    let _e563: MultiVector = self_2369;
    let _e567: Flector = other_2115;
    let _e570: Flector = other_2115;
    let _e573: Flector = other_2115;
    let _e576: Flector = other_2115;
    let _e590: MultiVector = self_2369;
    let _e594: Flector = other_2115;
    let _e597: Flector = other_2115;
    let _e600: Flector = other_2115;
    let _e603: Flector = other_2115;
    let _e617: MultiVector = self_2369;
    let _e621: Flector = other_2115;
    let _e624: Flector = other_2115;
    let _e627: Flector = other_2115;
    let _e630: Flector = other_2115;
    let _e644: MultiVector = self_2369;
    let _e648: Flector = other_2115;
    let _e651: Flector = other_2115;
    let _e654: Flector = other_2115;
    let _e657: Flector = other_2115;
    let _e670: MultiVector = self_2369;
    let _e674: Flector = other_2115;
    let _e677: Flector = other_2115;
    let _e680: Flector = other_2115;
    let _e683: Flector = other_2115;
    let _e696: MultiVector = self_2369;
    let _e700: Flector = other_2115;
    let _e703: Flector = other_2115;
    let _e706: Flector = other_2115;
    let _e709: Flector = other_2115;
    let _e722: MultiVector = self_2369;
    let _e725: MultiVector = self_2369;
    let _e728: MultiVector = self_2369;
    let _e731: MultiVector = self_2369;
    let _e735: Flector = other_2115;
    let _e748: MultiVector = self_2369;
    let _e752: Flector = other_2115;
    let _e755: Flector = other_2115;
    let _e758: Flector = other_2115;
    let _e764: MultiVector = self_2369;
    let _e768: Flector = other_2115;
    let _e771: Flector = other_2115;
    let _e774: Flector = other_2115;
    let _e787: MultiVector = self_2369;
    let _e791: Flector = other_2115;
    let _e794: Flector = other_2115;
    let _e797: Flector = other_2115;
    let _e810: MultiVector = self_2369;
    let _e814: Flector = other_2115;
    let _e817: Flector = other_2115;
    let _e820: Flector = other_2115;
    let _e833: MultiVector = self_2369;
    let _e837: Flector = other_2115;
    let _e840: Flector = other_2115;
    let _e843: Flector = other_2115;
    let _e855: MultiVector = self_2369;
    let _e859: Flector = other_2115;
    let _e862: Flector = other_2115;
    let _e865: Flector = other_2115;
    let _e878: MultiVector = self_2369;
    let _e882: Flector = other_2115;
    let _e885: Flector = other_2115;
    let _e888: Flector = other_2115;
    let _e901: MultiVector = self_2369;
    let _e905: Flector = other_2115;
    let _e908: Flector = other_2115;
    let _e911: Flector = other_2115;
    let _e917: MultiVector = self_2369;
    let _e921: Flector = other_2115;
    let _e924: Flector = other_2115;
    let _e927: Flector = other_2115;
    let _e939: MultiVector = self_2369;
    let _e943: Flector = other_2115;
    let _e946: Flector = other_2115;
    let _e949: Flector = other_2115;
    let _e961: MultiVector = self_2369;
    let _e965: Flector = other_2115;
    let _e968: Flector = other_2115;
    let _e971: Flector = other_2115;
    let _e983: MultiVector = self_2369;
    let _e987: Flector = other_2115;
    let _e990: Flector = other_2115;
    let _e993: Flector = other_2115;
    let _e1001: MultiVector = self_2369;
    let _e1005: Flector = other_2115;
    let _e1008: Flector = other_2115;
    let _e1011: Flector = other_2115;
    let _e1017: MultiVector = self_2369;
    let _e1021: Flector = other_2115;
    let _e1024: Flector = other_2115;
    let _e1027: Flector = other_2115;
    let _e1040: MultiVector = self_2369;
    let _e1044: Flector = other_2115;
    let _e1047: Flector = other_2115;
    let _e1050: Flector = other_2115;
    let _e1063: MultiVector = self_2369;
    let _e1067: Flector = other_2115;
    let _e1070: Flector = other_2115;
    let _e1073: Flector = other_2115;
    let _e1086: MultiVector = self_2369;
    let _e1090: Flector = other_2115;
    let _e1093: Flector = other_2115;
    let _e1096: Flector = other_2115;
    let _e1108: MultiVector = self_2369;
    let _e1112: Flector = other_2115;
    let _e1115: Flector = other_2115;
    let _e1118: Flector = other_2115;
    let _e1131: MultiVector = self_2369;
    let _e1135: Flector = other_2115;
    let _e1138: Flector = other_2115;
    let _e1141: Flector = other_2115;
    let _e1154: MultiVector = self_2369;
    let _e1158: Flector = other_2115;
    let _e1161: Flector = other_2115;
    let _e1164: Flector = other_2115;
    let _e1170: MultiVector = self_2369;
    let _e1174: Flector = other_2115;
    let _e1177: Flector = other_2115;
    let _e1180: Flector = other_2115;
    let _e1192: MultiVector = self_2369;
    let _e1196: Flector = other_2115;
    let _e1199: Flector = other_2115;
    let _e1202: Flector = other_2115;
    let _e1214: MultiVector = self_2369;
    let _e1218: Flector = other_2115;
    let _e1221: Flector = other_2115;
    let _e1224: Flector = other_2115;
    let _e1236: MultiVector = self_2369;
    let _e1240: Flector = other_2115;
    let _e1243: Flector = other_2115;
    let _e1246: Flector = other_2115;
    let _e1252: MultiVector = self_2369;
    let _e1256: Flector = other_2115;
    let _e1259: MultiVector = self_2369;
    let _e1263: Flector = other_2115;
    let _e1266: Flector = other_2115;
    let _e1269: Flector = other_2115;
    let _e1272: Flector = other_2115;
    let _e1286: MultiVector = self_2369;
    let _e1290: Flector = other_2115;
    let _e1293: Flector = other_2115;
    let _e1296: Flector = other_2115;
    let _e1299: Flector = other_2115;
    let _e1313: MultiVector = self_2369;
    let _e1317: Flector = other_2115;
    let _e1320: Flector = other_2115;
    let _e1323: Flector = other_2115;
    let _e1326: Flector = other_2115;
    let _e1340: MultiVector = self_2369;
    let _e1344: Flector = other_2115;
    let _e1357: MultiVector = self_2369;
    let _e1361: Flector = other_2115;
    let _e1374: MultiVector = self_2369;
    let _e1378: Flector = other_2115;
    let _e1391: MultiVector = self_2369;
    let _e1395: Flector = other_2115;
    let _e1406: MultiVector = self_2369;
    let _e1410: Flector = other_2115;
    let _e1413: MultiVector = self_2369;
    let _e1417: Flector = other_2115;
    let _e1420: Flector = other_2115;
    let _e1423: Flector = other_2115;
    let _e1426: Flector = other_2115;
    let _e1440: MultiVector = self_2369;
    let _e1444: Flector = other_2115;
    let _e1447: Flector = other_2115;
    let _e1450: Flector = other_2115;
    let _e1453: Flector = other_2115;
    let _e1467: MultiVector = self_2369;
    let _e1471: Flector = other_2115;
    let _e1474: Flector = other_2115;
    let _e1477: Flector = other_2115;
    let _e1480: Flector = other_2115;
    let _e1494: MultiVector = self_2369;
    let _e1498: Flector = other_2115;
    let _e1511: MultiVector = self_2369;
    let _e1515: Flector = other_2115;
    let _e1528: MultiVector = self_2369;
    let _e1532: Flector = other_2115;
    let _e1545: MultiVector = self_2369;
    let _e1548: MultiVector = self_2369;
    let _e1551: MultiVector = self_2369;
    let _e1554: MultiVector = self_2369;
    let _e1558: Flector = other_2115;
    return MultiVector((((((((((((((vec3<f32>(_e4.g1_.y) * vec3<f32>(_e8.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.z) * vec3<f32>(_e22.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g2_.x) * vec3<f32>(_e37.g1_.w, _e40.g0_.w, _e43.g1_.w)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e55.g3_.w) * vec3<f32>(_e59.g0_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e71.g8_.x) * vec3<f32>(_e75.g0_.x, _e78.g1_.x, _e81.g0_.x)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e93.g8_.y) * vec3<f32>(_e97.g0_.y, _e100.g1_.y, _e103.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e115.g8_.z) * vec3<f32>(_e119.g0_.z, _e122.g1_.z, _e125.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e137.g8_.w) * vec3<f32>(_e141.g0_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e153.g9_.x) * vec3<f32>(_e157.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e168.g9_.y) * vec3<f32>(_e172.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e183.g9_.z) * vec3<f32>(_e187.g1_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e198.g1_.x) * vec3<f32>(_e202.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0))), ((((((((vec3<f32>(_e213.g0_.x) * vec3<f32>(_e217.g1_.x, _e220.g1_.y, _e223.g1_.z)) + (vec3<f32>(_e228.g0_.y) * vec3<f32>(_e232.g0_.x, _e235.g0_.y, _e238.g0_.z))) + ((vec3<f32>(_e244.g4_.x) * vec3<f32>(_e248.g1_.w, _e251.g0_.z, _e254.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e266.g4_.y) * vec3<f32>(_e270.g0_.z, _e273.g1_.w, _e276.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e288.g4_.z) * vec3<f32>(_e292.g0_.y, _e295.g0_.x, _e298.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e310.g5_.x) * vec3<f32>(_e314.g0_.w, _e317.g1_.z, _e320.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e332.g5_.y) * vec3<f32>(_e336.g1_.z, _e339.g0_.w, _e342.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e354.g5_.z) * vec3<f32>(_e358.g1_.y, _e361.g1_.x, _e364.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((((((((vec2<f32>(_e376.g3_.x) * vec2<f32>(_e380.g1_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e389.g3_.y) * vec2<f32>(_e393.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e403.g3_.z) * vec2<f32>(_e407.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e417.g3_.w) * vec2<f32>(_e421.g1_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e431.g4_.x) * vec2<f32>(_e435.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e446.g4_.y) * vec2<f32>(_e450.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e461.g4_.z) * vec2<f32>(_e465.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e476.g9_.x) * vec2<f32>(_e480.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e491.g9_.y) * vec2<f32>(_e495.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e506.g9_.z) * vec2<f32>(_e510.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e521.g9_.w) * vec2<f32>(_e525.g0_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e536.g0_.y, _e539.g0_.x) * vec2<f32>(_e543.g0_.w, _e546.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4<f32>(_e556.g0_.z) * _e560.g0_) + ((vec4<f32>(_e563.g6_.x) * vec4<f32>(_e567.g1_.w, _e570.g0_.z, _e573.g0_.y, _e576.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e590.g6_.y) * vec4<f32>(_e594.g0_.z, _e597.g1_.w, _e600.g0_.x, _e603.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e617.g6_.z) * vec4<f32>(_e621.g0_.y, _e624.g0_.x, _e627.g1_.w, _e630.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e644.g7_.x) * vec4<f32>(_e648.g0_.w, _e651.g1_.z, _e654.g1_.y, _e657.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e670.g7_.y) * vec4<f32>(_e674.g1_.z, _e677.g0_.w, _e680.g1_.x, _e683.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e696.g7_.z) * vec4<f32>(_e700.g1_.y, _e703.g1_.x, _e706.g0_.w, _e709.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e722.g2_.y, _e725.g2_.y, _e728.g2_.y, _e731.g2_.x) * _e735.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e748.g2_.x) * vec3<f32>(_e752.g1_.x, _e755.g1_.y, _e758.g1_.z))) + ((vec3<f32>(_e764.g8_.x) * vec3<f32>(_e768.g0_.w, _e771.g1_.z, _e774.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e787.g8_.y) * vec3<f32>(_e791.g1_.z, _e794.g0_.w, _e797.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e810.g8_.z) * vec3<f32>(_e814.g1_.y, _e817.g1_.x, _e820.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((((((vec3<f32>(_e833.g1_.x) * vec3<f32>(_e837.g0_.w, _e840.g1_.z, _e843.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e855.g1_.y) * vec3<f32>(_e859.g1_.z, _e862.g0_.w, _e865.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e878.g1_.z) * vec3<f32>(_e882.g1_.y, _e885.g1_.x, _e888.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e901.g2_.x) * vec3<f32>(_e905.g0_.x, _e908.g0_.y, _e911.g0_.z))) + ((vec3<f32>(_e917.g8_.x) * vec3<f32>(_e921.g1_.w, _e924.g0_.z, _e927.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e939.g8_.y) * vec3<f32>(_e943.g0_.z, _e946.g1_.w, _e949.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e961.g8_.z) * vec3<f32>(_e965.g0_.y, _e968.g0_.x, _e971.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e983.g8_.w) * vec3<f32>(_e987.g1_.x, _e990.g1_.y, _e993.g1_.z))), ((((vec3<f32>(0.0) - (vec3<f32>(_e1001.g3_.w) * vec3<f32>(_e1005.g1_.x, _e1008.g1_.y, _e1011.g1_.z))) + ((vec3<f32>(_e1017.g9_.x) * vec3<f32>(_e1021.g0_.w, _e1024.g1_.z, _e1027.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e1040.g9_.y) * vec3<f32>(_e1044.g1_.z, _e1047.g0_.w, _e1050.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e1063.g9_.z) * vec3<f32>(_e1067.g1_.y, _e1070.g1_.x, _e1073.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((((((vec3<f32>(_e1086.g3_.x) * vec3<f32>(_e1090.g0_.w, _e1093.g1_.z, _e1096.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e1108.g3_.y) * vec3<f32>(_e1112.g1_.z, _e1115.g0_.w, _e1118.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e1131.g3_.z) * vec3<f32>(_e1135.g1_.y, _e1138.g1_.x, _e1141.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e1154.g3_.w) * vec3<f32>(_e1158.g0_.x, _e1161.g0_.y, _e1164.g0_.z))) + ((vec3<f32>(_e1170.g9_.x) * vec3<f32>(_e1174.g1_.w, _e1177.g0_.z, _e1180.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1192.g9_.y) * vec3<f32>(_e1196.g0_.z, _e1199.g1_.w, _e1202.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1214.g9_.z) * vec3<f32>(_e1218.g0_.y, _e1221.g0_.x, _e1224.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e1236.g9_.w) * vec3<f32>(_e1240.g1_.x, _e1243.g1_.y, _e1246.g1_.z))), ((((((((vec4<f32>(_e1252.g0_.y) * _e1256.g1_) + ((vec4<f32>(_e1259.g4_.x) * vec4<f32>(_e1263.g0_.w, _e1266.g1_.z, _e1269.g1_.y, _e1272.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1286.g4_.y) * vec4<f32>(_e1290.g1_.z, _e1293.g0_.w, _e1296.g1_.x, _e1299.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1313.g4_.z) * vec4<f32>(_e1317.g1_.y, _e1320.g1_.x, _e1323.g0_.w, _e1326.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1340.g5_.x) * vec4<f32>(_e1344.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1357.g5_.y) * vec4<f32>(_e1361.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1374.g5_.z) * vec4<f32>(_e1378.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1391.g0_.x) * _e1395.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4<f32>(_e1406.g0_.z) * _e1410.g1_) + ((vec4<f32>(_e1413.g6_.x) * vec4<f32>(_e1417.g0_.w, _e1420.g1_.z, _e1423.g1_.y, _e1426.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1440.g6_.y) * vec4<f32>(_e1444.g1_.z, _e1447.g0_.w, _e1450.g1_.x, _e1453.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1467.g6_.z) * vec4<f32>(_e1471.g1_.y, _e1474.g1_.x, _e1477.g0_.w, _e1480.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1494.g7_.x) * vec4<f32>(_e1498.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1511.g7_.y) * vec4<f32>(_e1515.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1528.g7_.z) * vec4<f32>(_e1532.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1545.g2_.x, _e1548.g2_.x, _e1551.g2_.x, _e1554.g2_.y) * _e1558.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flector_anti_scalar_product(self_2370: MultiVector, other_2116: Flector) -> AntiScalar {
    var self_2371: MultiVector;
    var other_2117: Flector;

    self_2371 = self_2370;
    other_2117 = other_2116;
    let _e5: MultiVector = self_2371;
    let _e8: Flector = other_2117;
    let _e13: MultiVector = self_2371;
    let _e16: Flector = other_2117;
    let _e21: MultiVector = self_2371;
    let _e24: Flector = other_2117;
    let _e29: MultiVector = self_2371;
    let _e32: Flector = other_2117;
    return AntiScalar(((((0.0 - (_e5.g3_.w * _e8.g0_.w)) + (_e13.g9_.x * _e16.g1_.x)) + (_e21.g9_.y * _e24.g1_.y)) + (_e29.g9_.z * _e32.g1_.z)));
}

fn multi_vector_dilation_into(self_2372: MultiVector) -> Dilation {
    var self_2373: MultiVector;

    self_2373 = self_2372;
    let _e2: MultiVector = self_2373;
    let _e5: MultiVector = self_2373;
    let _e8: MultiVector = self_2373;
    let _e16: MultiVector = self_2373;
    let _e19: MultiVector = self_2373;
    return Dilation((vec3<f32>(_e2.g8_.y, _e5.g8_.z, _e8.g8_.w) * vec3<f32>(-(1.0))), (vec2<f32>(_e16.g8_.x, _e19.g0_.z) * vec2<f32>(-(1.0), 1.0)));
}

fn multi_vector_dilation_geometric_product(self_2374: MultiVector, other_2118: Dilation) -> MultiVector {
    var self_2375: MultiVector;
    var other_2119: Dilation;

    self_2375 = self_2374;
    other_2119 = other_2118;
    let _e4: MultiVector = self_2375;
    let _e8: Dilation = other_2119;
    let _e19: MultiVector = self_2375;
    let _e23: Dilation = other_2119;
    let _e35: MultiVector = self_2375;
    let _e39: Dilation = other_2119;
    let _e51: MultiVector = self_2375;
    let _e55: Dilation = other_2119;
    let _e66: MultiVector = self_2375;
    let _e70: Dilation = other_2119;
    let _e81: MultiVector = self_2375;
    let _e85: Dilation = other_2119;
    let _e96: MultiVector = self_2375;
    let _e100: Dilation = other_2119;
    let _e111: MultiVector = self_2375;
    let _e115: Dilation = other_2119;
    let _e126: MultiVector = self_2375;
    let _e129: MultiVector = self_2375;
    let _e132: MultiVector = self_2375;
    let _e136: Dilation = other_2119;
    let _e139: Dilation = other_2119;
    let _e142: Dilation = other_2119;
    let _e154: MultiVector = self_2375;
    let _e156: Dilation = other_2119;
    let _e165: MultiVector = self_2375;
    let _e169: Dilation = other_2119;
    let _e178: MultiVector = self_2375;
    let _e182: Dilation = other_2119;
    let _e192: MultiVector = self_2375;
    let _e196: Dilation = other_2119;
    let _e206: MultiVector = self_2375;
    let _e210: Dilation = other_2119;
    let _e221: MultiVector = self_2375;
    let _e224: MultiVector = self_2375;
    let _e228: Dilation = other_2119;
    let _e231: Dilation = other_2119;
    let _e241: MultiVector = self_2375;
    let _e245: Dilation = other_2119;
    let _e248: Dilation = other_2119;
    let _e251: Dilation = other_2119;
    let _e254: Dilation = other_2119;
    let _e266: MultiVector = self_2375;
    let _e270: Dilation = other_2119;
    let _e273: Dilation = other_2119;
    let _e276: Dilation = other_2119;
    let _e279: Dilation = other_2119;
    let _e292: MultiVector = self_2375;
    let _e296: Dilation = other_2119;
    let _e299: Dilation = other_2119;
    let _e302: Dilation = other_2119;
    let _e305: Dilation = other_2119;
    let _e318: MultiVector = self_2375;
    let _e322: Dilation = other_2119;
    let _e334: MultiVector = self_2375;
    let _e337: MultiVector = self_2375;
    let _e340: MultiVector = self_2375;
    let _e343: MultiVector = self_2375;
    let _e347: Dilation = other_2119;
    let _e350: Dilation = other_2119;
    let _e353: Dilation = other_2119;
    let _e356: Dilation = other_2119;
    let _e369: MultiVector = self_2375;
    let _e373: Dilation = other_2119;
    let _e376: Dilation = other_2119;
    let _e379: Dilation = other_2119;
    let _e390: MultiVector = self_2375;
    let _e394: Dilation = other_2119;
    let _e397: Dilation = other_2119;
    let _e400: Dilation = other_2119;
    let _e412: MultiVector = self_2375;
    let _e416: Dilation = other_2119;
    let _e428: MultiVector = self_2375;
    let _e432: Dilation = other_2119;
    let _e444: MultiVector = self_2375;
    let _e448: Dilation = other_2119;
    let _e460: MultiVector = self_2375;
    let _e464: Dilation = other_2119;
    let _e467: Dilation = other_2119;
    let _e470: Dilation = other_2119;
    let _e476: MultiVector = self_2375;
    let _e480: Dilation = other_2119;
    let _e491: MultiVector = self_2375;
    let _e493: Dilation = other_2119;
    let _e498: MultiVector = self_2375;
    let _e502: Dilation = other_2119;
    let _e505: Dilation = other_2119;
    let _e508: Dilation = other_2119;
    let _e519: MultiVector = self_2375;
    let _e523: Dilation = other_2119;
    let _e526: Dilation = other_2119;
    let _e529: Dilation = other_2119;
    let _e541: MultiVector = self_2375;
    let _e545: Dilation = other_2119;
    let _e556: MultiVector = self_2375;
    let _e560: Dilation = other_2119;
    let _e571: MultiVector = self_2375;
    let _e575: Dilation = other_2119;
    let _e586: MultiVector = self_2375;
    let _e590: Dilation = other_2119;
    let _e601: MultiVector = self_2375;
    let _e605: Dilation = other_2119;
    let _e616: MultiVector = self_2375;
    let _e620: Dilation = other_2119;
    let _e623: Dilation = other_2119;
    let _e626: Dilation = other_2119;
    let _e632: MultiVector = self_2375;
    let _e635: MultiVector = self_2375;
    let _e638: MultiVector = self_2375;
    let _e642: Dilation = other_2119;
    let _e653: MultiVector = self_2375;
    let _e656: MultiVector = self_2375;
    let _e659: MultiVector = self_2375;
    let _e663: Dilation = other_2119;
    let _e674: MultiVector = self_2375;
    let _e678: Dilation = other_2119;
    let _e681: Dilation = other_2119;
    let _e684: Dilation = other_2119;
    let _e687: Dilation = other_2119;
    let _e693: MultiVector = self_2375;
    let _e697: Dilation = other_2119;
    let _e700: Dilation = other_2119;
    let _e703: Dilation = other_2119;
    let _e706: Dilation = other_2119;
    let _e719: MultiVector = self_2375;
    let _e723: Dilation = other_2119;
    let _e726: Dilation = other_2119;
    let _e729: Dilation = other_2119;
    let _e732: Dilation = other_2119;
    let _e745: MultiVector = self_2375;
    let _e749: Dilation = other_2119;
    let _e752: Dilation = other_2119;
    let _e755: Dilation = other_2119;
    let _e758: Dilation = other_2119;
    let _e771: MultiVector = self_2375;
    let _e774: MultiVector = self_2375;
    let _e777: MultiVector = self_2375;
    let _e780: MultiVector = self_2375;
    let _e784: Dilation = other_2119;
    let _e787: Dilation = other_2119;
    let _e790: Dilation = other_2119;
    let _e793: Dilation = other_2119;
    let _e805: MultiVector = self_2375;
    let _e809: Dilation = other_2119;
    let _e812: Dilation = other_2119;
    let _e815: Dilation = other_2119;
    let _e818: Dilation = other_2119;
    let _e823: MultiVector = self_2375;
    let _e827: Dilation = other_2119;
    let _e840: MultiVector = self_2375;
    let _e844: Dilation = other_2119;
    let _e857: MultiVector = self_2375;
    let _e861: Dilation = other_2119;
    let _e874: MultiVector = self_2375;
    let _e878: Dilation = other_2119;
    let _e881: Dilation = other_2119;
    let _e884: Dilation = other_2119;
    let _e887: Dilation = other_2119;
    let _e900: MultiVector = self_2375;
    let _e904: Dilation = other_2119;
    let _e907: Dilation = other_2119;
    let _e910: Dilation = other_2119;
    let _e913: Dilation = other_2119;
    let _e926: MultiVector = self_2375;
    let _e930: Dilation = other_2119;
    let _e933: Dilation = other_2119;
    let _e936: Dilation = other_2119;
    let _e939: Dilation = other_2119;
    let _e952: MultiVector = self_2375;
    let _e955: MultiVector = self_2375;
    let _e958: MultiVector = self_2375;
    let _e961: MultiVector = self_2375;
    let _e965: Dilation = other_2119;
    let _e968: Dilation = other_2119;
    let _e971: Dilation = other_2119;
    let _e974: Dilation = other_2119;
    return MultiVector(((((((((((vec3<f32>(_e4.g1_.y) * vec3<f32>(_e8.g0_.x)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g1_.z) * vec3<f32>(_e23.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e35.g2_.x) * vec3<f32>(_e39.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g3_.x) * vec3<f32>(_e55.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e66.g3_.y) * vec3<f32>(_e70.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e81.g3_.z) * vec3<f32>(_e85.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e96.g3_.w) * vec3<f32>(_e100.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e111.g8_.w) * vec3<f32>(_e115.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e126.g0_.x, _e129.g1_.x, _e132.g0_.x) * vec3<f32>(_e136.g1_.x, _e139.g1_.x, _e142.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((_e154.g5_ * vec3<f32>(_e156.g0_.z)) * vec3<f32>(-(1.0))), ((((((vec2<f32>(_e165.g5_.x) * vec2<f32>(_e169.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e178.g5_.y) * vec2<f32>(_e182.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e192.g5_.z) * vec2<f32>(_e196.g0_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e206.g9_.w) * vec2<f32>(_e210.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e221.g0_.y, _e224.g0_.x) * vec2<f32>(_e228.g0_.z, _e231.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4<f32>(_e241.g7_.x) * vec4<f32>(_e245.g0_.z, _e248.g0_.z, _e251.g0_.z, _e254.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e266.g7_.y) * vec4<f32>(_e270.g0_.z, _e273.g0_.z, _e276.g0_.z, _e279.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e292.g7_.z) * vec4<f32>(_e296.g0_.z, _e299.g0_.z, _e302.g0_.z, _e305.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e318.g8_.w) * vec4<f32>(_e322.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e334.g0_.x, _e337.g0_.x, _e340.g0_.x, _e343.g0_.z) * vec4<f32>(_e347.g0_.x, _e350.g0_.x, _e353.g0_.x, _e356.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((vec3<f32>(_e369.g1_.y) * vec3<f32>(_e373.g0_.y, _e376.g0_.y, _e379.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e390.g1_.z) * vec3<f32>(_e394.g0_.x, _e397.g1_.x, _e400.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e412.g8_.x) * vec3<f32>(_e416.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e428.g8_.y) * vec3<f32>(_e432.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e444.g8_.z) * vec3<f32>(_e448.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (vec3<f32>(_e460.g8_.w) * vec3<f32>(_e464.g1_.x, _e467.g0_.x, _e470.g0_.y))) + ((vec3<f32>(_e476.g1_.x) * _e480.g0_.xyx) * vec3<f32>(0.0, 1.0, -(1.0)))), (_e491.g1_ * vec3<f32>(_e493.g0_.z)), ((((((((((vec3<f32>(_e498.g3_.y) * vec3<f32>(_e502.g0_.y, _e505.g0_.y, _e508.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e519.g3_.z) * vec3<f32>(_e523.g0_.x, _e526.g1_.x, _e529.g0_.x)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e541.g5_.x) * vec3<f32>(_e545.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e556.g5_.y) * vec3<f32>(_e560.g1_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e571.g5_.z) * vec3<f32>(_e575.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e586.g9_.y) * vec3<f32>(_e590.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e601.g9_.z) * vec3<f32>(_e605.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e616.g9_.w) * vec3<f32>(_e620.g1_.x, _e623.g0_.x, _e626.g0_.y))) + ((vec3<f32>(_e632.g9_.x, _e635.g3_.x, _e638.g3_.x) * _e642.g0_.zyx) * vec3<f32>(1.0, -(1.0), 1.0))), ((vec3<f32>(_e653.g3_.x, _e656.g3_.y, _e659.g3_.z) * vec3<f32>(_e663.g0_.z)) * vec3<f32>(-(1.0))), (((((vec4<f32>(0.0) - (vec4<f32>(_e674.g0_.x) * vec4<f32>(_e678.g1_.x, _e681.g0_.x, _e684.g0_.y, _e687.g0_.z))) + ((vec4<f32>(_e693.g5_.x) * vec4<f32>(_e697.g0_.y, _e700.g0_.y, _e703.g0_.x, _e706.g0_.y)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e719.g5_.y) * vec4<f32>(_e723.g0_.y, _e726.g0_.y, _e729.g1_.x, _e732.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e745.g5_.z) * vec4<f32>(_e749.g0_.x, _e752.g1_.x, _e755.g0_.x, _e758.g0_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e771.g4_.x, _e774.g4_.y, _e777.g4_.z, _e780.g4_.x) * vec4<f32>(_e784.g0_.z, _e787.g0_.z, _e790.g0_.z, _e793.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((((vec4<f32>(_e805.g2_.y) * vec4<f32>(_e809.g1_.x, _e812.g0_.x, _e815.g0_.y, _e818.g0_.z)) + ((vec4<f32>(_e823.g6_.x) * vec4<f32>(_e827.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e840.g6_.y) * vec4<f32>(_e844.g0_.z)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e857.g6_.z) * vec4<f32>(_e861.g0_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e874.g7_.x) * vec4<f32>(_e878.g0_.y, _e881.g0_.y, _e884.g0_.x, _e887.g0_.y)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e900.g7_.y) * vec4<f32>(_e904.g0_.y, _e907.g0_.y, _e910.g1_.x, _e913.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e926.g7_.z) * vec4<f32>(_e930.g0_.x, _e933.g1_.x, _e936.g0_.x, _e939.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e952.g1_.x, _e955.g1_.y, _e958.g1_.z, _e961.g1_.x) * vec4<f32>(_e965.g1_.y, _e968.g1_.y, _e971.g1_.y, _e974.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_dilation_regressive_product(self_2376: MultiVector, other_2120: Dilation) -> MultiVector {
    var self_2377: MultiVector;
    var other_2121: Dilation;

    self_2377 = self_2376;
    other_2121 = other_2120;
    let _e4: MultiVector = self_2377;
    let _e8: Dilation = other_2121;
    let _e18: MultiVector = self_2377;
    let _e22: Dilation = other_2121;
    let _e33: MultiVector = self_2377;
    let _e37: Dilation = other_2121;
    let _e48: MultiVector = self_2377;
    let _e52: Dilation = other_2121;
    let _e63: MultiVector = self_2377;
    let _e65: Dilation = other_2121;
    let _e71: MultiVector = self_2377;
    let _e75: Dilation = other_2121;
    let _e86: MultiVector = self_2377;
    let _e90: Dilation = other_2121;
    let _e102: MultiVector = self_2377;
    let _e106: Dilation = other_2121;
    let _e118: MultiVector = self_2377;
    let _e122: Dilation = other_2121;
    let _e133: MultiVector = self_2377;
    let _e137: Dilation = other_2121;
    let _e140: Dilation = other_2121;
    let _e143: Dilation = other_2121;
    let _e155: MultiVector = self_2377;
    let _e159: Dilation = other_2121;
    let _e162: Dilation = other_2121;
    let _e165: Dilation = other_2121;
    let _e177: MultiVector = self_2377;
    let _e179: Dilation = other_2121;
    let _e185: MultiVector = self_2377;
    let _e189: Dilation = other_2121;
    let _e198: MultiVector = self_2377;
    let _e202: Dilation = other_2121;
    let _e212: MultiVector = self_2377;
    let _e216: Dilation = other_2121;
    let _e226: MultiVector = self_2377;
    let _e228: Dilation = other_2121;
    let _e234: MultiVector = self_2377;
    let _e236: Dilation = other_2121;
    let _e241: MultiVector = self_2377;
    let _e245: Dilation = other_2121;
    let _e255: MultiVector = self_2377;
    let _e259: Dilation = other_2121;
    let _e262: Dilation = other_2121;
    let _e265: Dilation = other_2121;
    let _e277: MultiVector = self_2377;
    let _e281: Dilation = other_2121;
    let _e284: Dilation = other_2121;
    let _e287: Dilation = other_2121;
    let _e299: MultiVector = self_2377;
    let _e301: Dilation = other_2121;
    let _e307: MultiVector = self_2377;
    let _e311: Dilation = other_2121;
    let _e321: MultiVector = self_2377;
    let _e325: Dilation = other_2121;
    let _e336: MultiVector = self_2377;
    let _e340: Dilation = other_2121;
    let _e351: MultiVector = self_2377;
    let _e355: Dilation = other_2121;
    let _e358: Dilation = other_2121;
    let _e361: Dilation = other_2121;
    let _e367: MultiVector = self_2377;
    let _e369: Dilation = other_2121;
    let _e375: MultiVector = self_2377;
    let _e377: Dilation = other_2121;
    let _e382: MultiVector = self_2377;
    let _e384: Dilation = other_2121;
    let _e391: MultiVector = self_2377;
    let _e395: Dilation = other_2121;
    let _e398: Dilation = other_2121;
    let _e401: Dilation = other_2121;
    let _e404: Dilation = other_2121;
    let _e410: MultiVector = self_2377;
    let _e412: Dilation = other_2121;
    let _e418: MultiVector = self_2377;
    let _e420: Dilation = other_2121;
    return MultiVector(((((((vec3<f32>(_e4.g3_.x) * vec3<f32>(_e8.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g3_.y) * vec3<f32>(_e22.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g3_.z) * vec3<f32>(_e37.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g3_.w) * vec3<f32>(_e52.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + (_e63.g0_ * vec3<f32>(_e65.g1_.y))), ((((((((vec3<f32>(_e71.g6_.x) * vec3<f32>(_e75.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0)) + ((vec3<f32>(_e86.g6_.y) * vec3<f32>(_e90.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e102.g6_.z) * vec3<f32>(_e106.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e118.g7_.x) * _e122.g0_.yyx) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e133.g7_.y) * vec3<f32>(_e137.g0_.y, _e140.g0_.y, _e143.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e155.g7_.z) * vec3<f32>(_e159.g0_.x, _e162.g1_.x, _e165.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e177.g1_ * vec3<f32>(_e179.g1_.y))), (((((vec2<f32>(_e185.g6_.x) * vec2<f32>(_e189.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e198.g6_.y) * vec2<f32>(_e202.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e212.g6_.z) * vec2<f32>(_e216.g0_.y)) * vec2<f32>(1.0, 0.0))) + (_e226.g2_ * vec2<f32>(_e228.g1_.y))), (_e234.g3_ * vec4<f32>(_e236.g1_.y)), (((((vec3<f32>(_e241.g9_.x) * _e245.g0_.yyx) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e255.g9_.y) * vec3<f32>(_e259.g0_.y, _e262.g0_.y, _e265.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e277.g9_.z) * vec3<f32>(_e281.g0_.x, _e284.g1_.x, _e287.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e299.g4_ * vec3<f32>(_e301.g1_.y))), ((((((vec3<f32>(_e307.g9_.x) * vec3<f32>(_e311.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e321.g9_.y) * vec3<f32>(_e325.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e336.g9_.z) * vec3<f32>(_e340.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e351.g9_.w) * vec3<f32>(_e355.g1_.x, _e358.g0_.x, _e361.g0_.y))) + (_e367.g5_ * vec3<f32>(_e369.g1_.y))), (_e375.g6_ * vec3<f32>(_e377.g1_.y)), (_e382.g7_ * vec3<f32>(_e384.g1_.y)), ((vec4<f32>(0.0) - (vec4<f32>(_e391.g0_.z) * vec4<f32>(_e395.g1_.x, _e398.g0_.x, _e401.g0_.y, _e404.g0_.z))) + (_e410.g8_ * vec4<f32>(_e412.g1_.y))), (_e418.g9_ * vec4<f32>(_e420.g1_.y)));
}

fn multi_vector_dilation_geometric_anti_product(self_2378: MultiVector, other_2122: Dilation) -> MultiVector {
    var self_2379: MultiVector;
    var other_2123: Dilation;

    self_2379 = self_2378;
    other_2123 = other_2122;
    let _e4: MultiVector = self_2379;
    let _e8: Dilation = other_2123;
    let _e18: MultiVector = self_2379;
    let _e22: Dilation = other_2123;
    let _e33: MultiVector = self_2379;
    let _e37: Dilation = other_2123;
    let _e48: MultiVector = self_2379;
    let _e52: Dilation = other_2123;
    let _e63: MultiVector = self_2379;
    let _e67: Dilation = other_2123;
    let _e78: MultiVector = self_2379;
    let _e82: Dilation = other_2123;
    let _e93: MultiVector = self_2379;
    let _e97: Dilation = other_2123;
    let _e108: MultiVector = self_2379;
    let _e110: Dilation = other_2123;
    let _e118: MultiVector = self_2379;
    let _e122: Dilation = other_2123;
    let _e125: Dilation = other_2123;
    let _e128: Dilation = other_2123;
    let _e134: MultiVector = self_2379;
    let _e138: Dilation = other_2123;
    let _e150: MultiVector = self_2379;
    let _e154: Dilation = other_2123;
    let _e166: MultiVector = self_2379;
    let _e170: Dilation = other_2123;
    let _e182: MultiVector = self_2379;
    let _e186: Dilation = other_2123;
    let _e197: MultiVector = self_2379;
    let _e201: Dilation = other_2123;
    let _e204: Dilation = other_2123;
    let _e207: Dilation = other_2123;
    let _e219: MultiVector = self_2379;
    let _e223: Dilation = other_2123;
    let _e226: Dilation = other_2123;
    let _e229: Dilation = other_2123;
    let _e241: MultiVector = self_2379;
    let _e243: Dilation = other_2123;
    let _e249: MultiVector = self_2379;
    let _e253: Dilation = other_2123;
    let _e262: MultiVector = self_2379;
    let _e266: Dilation = other_2123;
    let _e276: MultiVector = self_2379;
    let _e280: Dilation = other_2123;
    let _e290: MultiVector = self_2379;
    let _e292: Dilation = other_2123;
    let _e298: MultiVector = self_2379;
    let _e300: Dilation = other_2123;
    let _e307: MultiVector = self_2379;
    let _e311: Dilation = other_2123;
    let _e314: Dilation = other_2123;
    let _e317: Dilation = other_2123;
    let _e323: MultiVector = self_2379;
    let _e327: Dilation = other_2123;
    let _e338: MultiVector = self_2379;
    let _e342: Dilation = other_2123;
    let _e345: Dilation = other_2123;
    let _e348: Dilation = other_2123;
    let _e360: MultiVector = self_2379;
    let _e364: Dilation = other_2123;
    let _e367: Dilation = other_2123;
    let _e370: Dilation = other_2123;
    let _e382: MultiVector = self_2379;
    let _e384: Dilation = other_2123;
    let _e390: MultiVector = self_2379;
    let _e394: Dilation = other_2123;
    let _e397: Dilation = other_2123;
    let _e400: Dilation = other_2123;
    let _e411: MultiVector = self_2379;
    let _e415: Dilation = other_2123;
    let _e418: Dilation = other_2123;
    let _e421: Dilation = other_2123;
    let _e433: MultiVector = self_2379;
    let _e437: Dilation = other_2123;
    let _e448: MultiVector = self_2379;
    let _e452: Dilation = other_2123;
    let _e463: MultiVector = self_2379;
    let _e467: Dilation = other_2123;
    let _e478: MultiVector = self_2379;
    let _e482: Dilation = other_2123;
    let _e493: MultiVector = self_2379;
    let _e497: Dilation = other_2123;
    let _e508: MultiVector = self_2379;
    let _e512: Dilation = other_2123;
    let _e515: Dilation = other_2123;
    let _e518: Dilation = other_2123;
    let _e524: MultiVector = self_2379;
    let _e527: MultiVector = self_2379;
    let _e530: MultiVector = self_2379;
    let _e534: Dilation = other_2123;
    let _e545: MultiVector = self_2379;
    let _e547: Dilation = other_2123;
    let _e552: MultiVector = self_2379;
    let _e554: Dilation = other_2123;
    let _e561: MultiVector = self_2379;
    let _e565: Dilation = other_2123;
    let _e568: Dilation = other_2123;
    let _e571: Dilation = other_2123;
    let _e574: Dilation = other_2123;
    let _e580: MultiVector = self_2379;
    let _e584: Dilation = other_2123;
    let _e587: Dilation = other_2123;
    let _e590: Dilation = other_2123;
    let _e593: Dilation = other_2123;
    let _e606: MultiVector = self_2379;
    let _e610: Dilation = other_2123;
    let _e613: Dilation = other_2123;
    let _e616: Dilation = other_2123;
    let _e619: Dilation = other_2123;
    let _e632: MultiVector = self_2379;
    let _e636: Dilation = other_2123;
    let _e648: MultiVector = self_2379;
    let _e652: Dilation = other_2123;
    let _e664: MultiVector = self_2379;
    let _e668: Dilation = other_2123;
    let _e680: MultiVector = self_2379;
    let _e684: Dilation = other_2123;
    let _e696: MultiVector = self_2379;
    let _e700: Dilation = other_2123;
    let _e712: MultiVector = self_2379;
    let _e716: Dilation = other_2123;
    let _e728: MultiVector = self_2379;
    let _e731: MultiVector = self_2379;
    let _e734: MultiVector = self_2379;
    let _e737: MultiVector = self_2379;
    let _e741: Dilation = other_2123;
    let _e744: Dilation = other_2123;
    let _e747: Dilation = other_2123;
    let _e750: Dilation = other_2123;
    let _e763: MultiVector = self_2379;
    let _e765: Dilation = other_2123;
    return MultiVector((((((((((vec3<f32>(_e4.g3_.x) * vec3<f32>(_e8.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g3_.y) * vec3<f32>(_e22.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g3_.z) * vec3<f32>(_e37.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g3_.w) * vec3<f32>(_e52.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e63.g9_.x) * vec3<f32>(_e67.g1_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e78.g9_.y) * vec3<f32>(_e82.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e93.g9_.z) * vec3<f32>(_e97.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + (_e108.g0_ * vec3<f32>(_e110.g1_.y))), ((((((((vec3<f32>(0.0) - (vec3<f32>(_e118.g2_.y) * vec3<f32>(_e122.g1_.x, _e125.g0_.x, _e128.g0_.y))) + ((vec3<f32>(_e134.g6_.x) * vec3<f32>(_e138.g0_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e150.g6_.y) * vec3<f32>(_e154.g0_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e166.g6_.z) * vec3<f32>(_e170.g0_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e182.g7_.x) * _e186.g0_.yyx) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e197.g7_.y) * vec3<f32>(_e201.g0_.y, _e204.g0_.y, _e207.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e219.g7_.z) * vec3<f32>(_e223.g0_.x, _e226.g1_.x, _e229.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e241.g1_ * vec3<f32>(_e243.g1_.y))), (((((vec2<f32>(_e249.g6_.x) * vec2<f32>(_e253.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e262.g6_.y) * vec2<f32>(_e266.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e276.g6_.z) * vec2<f32>(_e280.g0_.y)) * vec2<f32>(1.0, 0.0))) + (_e290.g2_ * vec2<f32>(_e292.g1_.y))), (_e298.g3_ * vec4<f32>(_e300.g1_.y)), (((((vec3<f32>(0.0) - (vec3<f32>(_e307.g3_.w) * vec3<f32>(_e311.g1_.x, _e314.g0_.x, _e317.g0_.y))) + ((vec3<f32>(_e323.g9_.x) * _e327.g0_.yyx) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e338.g9_.y) * vec3<f32>(_e342.g0_.y, _e345.g0_.y, _e348.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e360.g9_.z) * vec3<f32>(_e364.g0_.x, _e367.g1_.x, _e370.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e382.g4_ * vec3<f32>(_e384.g1_.y))), ((((((((((vec3<f32>(_e390.g3_.y) * vec3<f32>(_e394.g0_.y, _e397.g0_.y, _e400.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e411.g3_.z) * vec3<f32>(_e415.g0_.x, _e418.g1_.x, _e421.g0_.x)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e433.g5_.x) * vec3<f32>(_e437.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e448.g5_.y) * vec3<f32>(_e452.g1_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e463.g5_.z) * vec3<f32>(_e467.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e478.g9_.y) * vec3<f32>(_e482.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e493.g9_.z) * vec3<f32>(_e497.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e508.g9_.w) * vec3<f32>(_e512.g1_.x, _e515.g0_.x, _e518.g0_.y))) + ((vec3<f32>(_e524.g9_.x, _e527.g3_.x, _e530.g3_.x) * _e534.g0_.zyx) * vec3<f32>(1.0, 1.0, -(1.0)))), (_e545.g6_ * vec3<f32>(_e547.g1_.y)), (_e552.g7_ * vec3<f32>(_e554.g1_.y)), ((((((((((vec4<f32>(0.0) - (vec4<f32>(_e561.g0_.z) * vec4<f32>(_e565.g1_.x, _e568.g0_.x, _e571.g0_.y, _e574.g0_.z))) + ((vec4<f32>(_e580.g6_.y) * vec4<f32>(_e584.g0_.y, _e587.g0_.y, _e590.g1_.x, _e593.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e606.g6_.z) * vec4<f32>(_e610.g0_.x, _e613.g1_.x, _e616.g0_.x, _e619.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e632.g7_.x) * vec4<f32>(_e636.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e648.g7_.z) * vec4<f32>(_e652.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e664.g8_.x) * vec4<f32>(_e668.g1_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e680.g8_.y) * vec4<f32>(_e684.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e696.g8_.z) * vec4<f32>(_e700.g1_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e712.g8_.w) * vec4<f32>(_e716.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e728.g6_.x, _e731.g6_.x, _e734.g6_.x, _e737.g7_.y) * vec4<f32>(_e741.g0_.x, _e744.g0_.y, _e747.g0_.x, _e750.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), (_e763.g9_ * vec4<f32>(_e765.g1_.y)));
}

fn multi_vector_dilation_inner_anti_product(self_2380: MultiVector, other_2124: Dilation) -> MultiVector {
    var self_2381: MultiVector;
    var other_2125: Dilation;

    self_2381 = self_2380;
    other_2125 = other_2124;
    let _e4: MultiVector = self_2381;
    let _e8: Dilation = other_2125;
    let _e18: MultiVector = self_2381;
    let _e22: Dilation = other_2125;
    let _e33: MultiVector = self_2381;
    let _e37: Dilation = other_2125;
    let _e48: MultiVector = self_2381;
    let _e50: Dilation = other_2125;
    let _e56: MultiVector = self_2381;
    let _e58: Dilation = other_2125;
    let _e63: MultiVector = self_2381;
    let _e65: Dilation = other_2125;
    let _e70: MultiVector = self_2381;
    let _e72: Dilation = other_2125;
    let _e77: MultiVector = self_2381;
    let _e79: Dilation = other_2125;
    let _e84: MultiVector = self_2381;
    let _e86: Dilation = other_2125;
    let _e91: MultiVector = self_2381;
    let _e93: Dilation = other_2125;
    let _e98: MultiVector = self_2381;
    let _e100: Dilation = other_2125;
    let _e107: MultiVector = self_2381;
    let _e111: Dilation = other_2125;
    let _e114: Dilation = other_2125;
    let _e117: Dilation = other_2125;
    let _e120: Dilation = other_2125;
    let _e126: MultiVector = self_2381;
    let _e128: Dilation = other_2125;
    let _e134: MultiVector = self_2381;
    let _e136: Dilation = other_2125;
    return MultiVector((((((vec3<f32>(_e4.g9_.x) * vec3<f32>(_e8.g1_.x)) * vec3<f32>(0.0, 1.0, 0.0)) + ((vec3<f32>(_e18.g9_.y) * vec3<f32>(_e22.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e33.g9_.z) * vec3<f32>(_e37.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + (_e48.g0_ * vec3<f32>(_e50.g1_.y))), (_e56.g1_ * vec3<f32>(_e58.g1_.y)), (_e63.g2_ * vec2<f32>(_e65.g1_.y)), (_e70.g3_ * vec4<f32>(_e72.g1_.y)), (_e77.g4_ * vec3<f32>(_e79.g1_.y)), (_e84.g5_ * vec3<f32>(_e86.g1_.y)), (_e91.g6_ * vec3<f32>(_e93.g1_.y)), (_e98.g7_ * vec3<f32>(_e100.g1_.y)), ((vec4<f32>(0.0) - (vec4<f32>(_e107.g0_.z) * vec4<f32>(_e111.g1_.x, _e114.g0_.x, _e117.g0_.y, _e120.g0_.z))) + (_e126.g8_ * vec4<f32>(_e128.g1_.y))), (_e134.g9_ * vec4<f32>(_e136.g1_.y)));
}

fn multi_vector_dilation_right_anti_contraction(self_2382: MultiVector, other_2126: Dilation) -> MultiVector {
    var self_2383: MultiVector;
    var other_2127: Dilation;

    self_2383 = self_2382;
    other_2127 = other_2126;
    let _e4: MultiVector = self_2383;
    let _e6: Dilation = other_2127;
    let _e11: MultiVector = self_2383;
    let _e13: Dilation = other_2127;
    let _e18: MultiVector = self_2383;
    let _e20: Dilation = other_2127;
    let _e25: MultiVector = self_2383;
    let _e27: Dilation = other_2127;
    let _e32: MultiVector = self_2383;
    let _e34: Dilation = other_2127;
    let _e39: MultiVector = self_2383;
    let _e41: Dilation = other_2127;
    let _e46: MultiVector = self_2383;
    let _e48: Dilation = other_2127;
    let _e53: MultiVector = self_2383;
    let _e55: Dilation = other_2127;
    let _e60: MultiVector = self_2383;
    let _e62: Dilation = other_2127;
    let _e67: MultiVector = self_2383;
    let _e69: Dilation = other_2127;
    return MultiVector((_e4.g0_ * vec3<f32>(_e6.g1_.y)), (_e11.g1_ * vec3<f32>(_e13.g1_.y)), (_e18.g2_ * vec2<f32>(_e20.g1_.y)), (_e25.g3_ * vec4<f32>(_e27.g1_.y)), (_e32.g4_ * vec3<f32>(_e34.g1_.y)), (_e39.g5_ * vec3<f32>(_e41.g1_.y)), (_e46.g6_ * vec3<f32>(_e48.g1_.y)), (_e53.g7_ * vec3<f32>(_e55.g1_.y)), (_e60.g8_ * vec4<f32>(_e62.g1_.y)), (_e67.g9_ * vec4<f32>(_e69.g1_.y)));
}

fn multi_vector_dilation_scalar_product(self_2384: MultiVector, other_2128: Dilation) -> Scalar {
    var self_2385: MultiVector;
    var other_2129: Dilation;

    self_2385 = self_2384;
    other_2129 = other_2128;
    let _e4: MultiVector = self_2385;
    let _e7: Dilation = other_2129;
    return Scalar((_e4.g8_.w * _e7.g0_.z));
}

fn multi_vector_dilation_anti_scalar_product(self_2386: MultiVector, other_2130: Dilation) -> AntiScalar {
    var self_2387: MultiVector;
    var other_2131: Dilation;

    self_2387 = self_2386;
    other_2131 = other_2130;
    let _e4: MultiVector = self_2387;
    let _e7: Dilation = other_2131;
    return AntiScalar((_e4.g0_.z * _e7.g1_.y));
}

fn multi_vector_multi_vector_add(self_2388: MultiVector, other_2132: MultiVector) -> MultiVector {
    var self_2389: MultiVector;
    var other_2133: MultiVector;

    self_2389 = self_2388;
    other_2133 = other_2132;
    let _e4: MultiVector = self_2389;
    let _e6: MultiVector = other_2133;
    let _e9: MultiVector = self_2389;
    let _e11: MultiVector = other_2133;
    let _e14: MultiVector = self_2389;
    let _e16: MultiVector = other_2133;
    let _e19: MultiVector = self_2389;
    let _e21: MultiVector = other_2133;
    let _e24: MultiVector = self_2389;
    let _e26: MultiVector = other_2133;
    let _e29: MultiVector = self_2389;
    let _e31: MultiVector = other_2133;
    let _e34: MultiVector = self_2389;
    let _e36: MultiVector = other_2133;
    let _e39: MultiVector = self_2389;
    let _e41: MultiVector = other_2133;
    let _e44: MultiVector = self_2389;
    let _e46: MultiVector = other_2133;
    let _e49: MultiVector = self_2389;
    let _e51: MultiVector = other_2133;
    return MultiVector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_), (_e19.g3_ + _e21.g3_), (_e24.g4_ + _e26.g4_), (_e29.g5_ + _e31.g5_), (_e34.g6_ + _e36.g6_), (_e39.g7_ + _e41.g7_), (_e44.g8_ + _e46.g8_), (_e49.g9_ + _e51.g9_));
}

fn multi_vector_multi_vector_sub(self_2390: MultiVector, other_2134: MultiVector) -> MultiVector {
    var self_2391: MultiVector;
    var other_2135: MultiVector;

    self_2391 = self_2390;
    other_2135 = other_2134;
    let _e4: MultiVector = self_2391;
    let _e6: MultiVector = other_2135;
    let _e9: MultiVector = self_2391;
    let _e11: MultiVector = other_2135;
    let _e14: MultiVector = self_2391;
    let _e16: MultiVector = other_2135;
    let _e19: MultiVector = self_2391;
    let _e21: MultiVector = other_2135;
    let _e24: MultiVector = self_2391;
    let _e26: MultiVector = other_2135;
    let _e29: MultiVector = self_2391;
    let _e31: MultiVector = other_2135;
    let _e34: MultiVector = self_2391;
    let _e36: MultiVector = other_2135;
    let _e39: MultiVector = self_2391;
    let _e41: MultiVector = other_2135;
    let _e44: MultiVector = self_2391;
    let _e46: MultiVector = other_2135;
    let _e49: MultiVector = self_2391;
    let _e51: MultiVector = other_2135;
    return MultiVector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_), (_e19.g3_ - _e21.g3_), (_e24.g4_ - _e26.g4_), (_e29.g5_ - _e31.g5_), (_e34.g6_ - _e36.g6_), (_e39.g7_ - _e41.g7_), (_e44.g8_ - _e46.g8_), (_e49.g9_ - _e51.g9_));
}

fn multi_vector_multi_vector_mul(self_2392: MultiVector, other_2136: MultiVector) -> MultiVector {
    var self_2393: MultiVector;
    var other_2137: MultiVector;

    self_2393 = self_2392;
    other_2137 = other_2136;
    let _e4: MultiVector = self_2393;
    let _e6: MultiVector = other_2137;
    let _e9: MultiVector = self_2393;
    let _e11: MultiVector = other_2137;
    let _e14: MultiVector = self_2393;
    let _e16: MultiVector = other_2137;
    let _e19: MultiVector = self_2393;
    let _e21: MultiVector = other_2137;
    let _e24: MultiVector = self_2393;
    let _e26: MultiVector = other_2137;
    let _e29: MultiVector = self_2393;
    let _e31: MultiVector = other_2137;
    let _e34: MultiVector = self_2393;
    let _e36: MultiVector = other_2137;
    let _e39: MultiVector = self_2393;
    let _e41: MultiVector = other_2137;
    let _e44: MultiVector = self_2393;
    let _e46: MultiVector = other_2137;
    let _e49: MultiVector = self_2393;
    let _e51: MultiVector = other_2137;
    return MultiVector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_), (_e19.g3_ * _e21.g3_), (_e24.g4_ * _e26.g4_), (_e29.g5_ * _e31.g5_), (_e34.g6_ * _e36.g6_), (_e39.g7_ * _e41.g7_), (_e44.g8_ * _e46.g8_), (_e49.g9_ * _e51.g9_));
}

fn multi_vector_multi_vector_div(self_2394: MultiVector, other_2138: MultiVector) -> MultiVector {
    var self_2395: MultiVector;
    var other_2139: MultiVector;

    self_2395 = self_2394;
    other_2139 = other_2138;
    let _e4: MultiVector = self_2395;
    let _e7: MultiVector = self_2395;
    let _e10: MultiVector = self_2395;
    let _e19: MultiVector = other_2139;
    let _e22: MultiVector = other_2139;
    let _e25: MultiVector = other_2139;
    let _e35: MultiVector = self_2395;
    let _e38: MultiVector = self_2395;
    let _e41: MultiVector = self_2395;
    let _e50: MultiVector = other_2139;
    let _e53: MultiVector = other_2139;
    let _e56: MultiVector = other_2139;
    let _e66: MultiVector = self_2395;
    let _e69: MultiVector = self_2395;
    let _e77: MultiVector = other_2139;
    let _e80: MultiVector = other_2139;
    let _e89: MultiVector = self_2395;
    let _e92: MultiVector = self_2395;
    let _e95: MultiVector = self_2395;
    let _e98: MultiVector = self_2395;
    let _e108: MultiVector = other_2139;
    let _e111: MultiVector = other_2139;
    let _e114: MultiVector = other_2139;
    let _e117: MultiVector = other_2139;
    let _e128: MultiVector = self_2395;
    let _e131: MultiVector = self_2395;
    let _e134: MultiVector = self_2395;
    let _e143: MultiVector = other_2139;
    let _e146: MultiVector = other_2139;
    let _e149: MultiVector = other_2139;
    let _e159: MultiVector = self_2395;
    let _e162: MultiVector = self_2395;
    let _e165: MultiVector = self_2395;
    let _e174: MultiVector = other_2139;
    let _e177: MultiVector = other_2139;
    let _e180: MultiVector = other_2139;
    let _e190: MultiVector = self_2395;
    let _e193: MultiVector = self_2395;
    let _e196: MultiVector = self_2395;
    let _e205: MultiVector = other_2139;
    let _e208: MultiVector = other_2139;
    let _e211: MultiVector = other_2139;
    let _e221: MultiVector = self_2395;
    let _e224: MultiVector = self_2395;
    let _e227: MultiVector = self_2395;
    let _e236: MultiVector = other_2139;
    let _e239: MultiVector = other_2139;
    let _e242: MultiVector = other_2139;
    let _e252: MultiVector = self_2395;
    let _e255: MultiVector = self_2395;
    let _e258: MultiVector = self_2395;
    let _e261: MultiVector = self_2395;
    let _e271: MultiVector = other_2139;
    let _e274: MultiVector = other_2139;
    let _e277: MultiVector = other_2139;
    let _e280: MultiVector = other_2139;
    let _e291: MultiVector = self_2395;
    let _e294: MultiVector = self_2395;
    let _e297: MultiVector = self_2395;
    let _e300: MultiVector = self_2395;
    let _e310: MultiVector = other_2139;
    let _e313: MultiVector = other_2139;
    let _e316: MultiVector = other_2139;
    let _e319: MultiVector = other_2139;
    return MultiVector((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec2<f32>(_e66.g2_.x, _e69.g2_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e77.g2_.x, _e80.g2_.y)) * vec2<f32>(1.0, 1.0)), (((vec4<f32>(_e89.g3_.x, _e92.g3_.y, _e95.g3_.z, _e98.g3_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e108.g3_.x, _e111.g3_.y, _e114.g3_.z, _e117.g3_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e128.g4_.x, _e131.g4_.y, _e134.g4_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e143.g4_.x, _e146.g4_.y, _e149.g4_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e159.g5_.x, _e162.g5_.y, _e165.g5_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e174.g5_.x, _e177.g5_.y, _e180.g5_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e190.g6_.x, _e193.g6_.y, _e196.g6_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e205.g6_.x, _e208.g6_.y, _e211.g6_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e221.g7_.x, _e224.g7_.y, _e227.g7_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e236.g7_.x, _e239.g7_.y, _e242.g7_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec4<f32>(_e252.g8_.x, _e255.g8_.y, _e258.g8_.z, _e261.g8_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e271.g8_.x, _e274.g8_.y, _e277.g8_.z, _e280.g8_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e291.g9_.x, _e294.g9_.y, _e297.g9_.z, _e300.g9_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e310.g9_.x, _e313.g9_.y, _e316.g9_.z, _e319.g9_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn multi_vector_multi_vector_geometric_product(self_2396: MultiVector, other_2140: MultiVector) -> MultiVector {
    var self_2397: MultiVector;
    var other_2141: MultiVector;

    self_2397 = self_2396;
    other_2141 = other_2140;
    let _e4: MultiVector = self_2397;
    let _e8: MultiVector = other_2141;
    let _e11: MultiVector = self_2397;
    let _e15: MultiVector = other_2141;
    let _e26: MultiVector = self_2397;
    let _e30: MultiVector = other_2141;
    let _e33: MultiVector = other_2141;
    let _e36: MultiVector = other_2141;
    let _e42: MultiVector = self_2397;
    let _e46: MultiVector = other_2141;
    let _e49: MultiVector = other_2141;
    let _e52: MultiVector = other_2141;
    let _e58: MultiVector = self_2397;
    let _e62: MultiVector = other_2141;
    let _e65: MultiVector = other_2141;
    let _e68: MultiVector = other_2141;
    let _e74: MultiVector = self_2397;
    let _e78: MultiVector = other_2141;
    let _e81: MultiVector = other_2141;
    let _e84: MultiVector = other_2141;
    let _e95: MultiVector = self_2397;
    let _e99: MultiVector = other_2141;
    let _e110: MultiVector = self_2397;
    let _e114: MultiVector = other_2141;
    let _e126: MultiVector = self_2397;
    let _e130: MultiVector = other_2141;
    let _e142: MultiVector = self_2397;
    let _e146: MultiVector = other_2141;
    let _e158: MultiVector = self_2397;
    let _e162: MultiVector = other_2141;
    let _e174: MultiVector = self_2397;
    let _e178: MultiVector = other_2141;
    let _e181: MultiVector = other_2141;
    let _e184: MultiVector = other_2141;
    let _e197: MultiVector = self_2397;
    let _e201: MultiVector = other_2141;
    let _e204: MultiVector = other_2141;
    let _e207: MultiVector = other_2141;
    let _e220: MultiVector = self_2397;
    let _e224: MultiVector = other_2141;
    let _e227: MultiVector = other_2141;
    let _e230: MultiVector = other_2141;
    let _e243: MultiVector = self_2397;
    let _e247: MultiVector = other_2141;
    let _e250: MultiVector = other_2141;
    let _e253: MultiVector = other_2141;
    let _e259: MultiVector = self_2397;
    let _e263: MultiVector = other_2141;
    let _e266: MultiVector = other_2141;
    let _e269: MultiVector = other_2141;
    let _e275: MultiVector = self_2397;
    let _e279: MultiVector = other_2141;
    let _e282: MultiVector = other_2141;
    let _e285: MultiVector = other_2141;
    let _e291: MultiVector = self_2397;
    let _e295: MultiVector = other_2141;
    let _e307: MultiVector = self_2397;
    let _e311: MultiVector = other_2141;
    let _e323: MultiVector = self_2397;
    let _e327: MultiVector = other_2141;
    let _e339: MultiVector = self_2397;
    let _e343: MultiVector = other_2141;
    let _e355: MultiVector = self_2397;
    let _e359: MultiVector = other_2141;
    let _e371: MultiVector = self_2397;
    let _e375: MultiVector = other_2141;
    let _e387: MultiVector = self_2397;
    let _e391: MultiVector = other_2141;
    let _e394: MultiVector = other_2141;
    let _e397: MultiVector = other_2141;
    let _e410: MultiVector = self_2397;
    let _e414: MultiVector = other_2141;
    let _e417: MultiVector = other_2141;
    let _e420: MultiVector = other_2141;
    let _e433: MultiVector = self_2397;
    let _e437: MultiVector = other_2141;
    let _e440: MultiVector = other_2141;
    let _e443: MultiVector = other_2141;
    let _e456: MultiVector = self_2397;
    let _e460: MultiVector = other_2141;
    let _e463: MultiVector = other_2141;
    let _e466: MultiVector = other_2141;
    let _e472: MultiVector = self_2397;
    let _e476: MultiVector = other_2141;
    let _e487: MultiVector = self_2397;
    let _e491: MultiVector = other_2141;
    let _e502: MultiVector = self_2397;
    let _e506: MultiVector = other_2141;
    let _e517: MultiVector = self_2397;
    let _e521: MultiVector = other_2141;
    let _e532: MultiVector = self_2397;
    let _e535: MultiVector = other_2141;
    let _e538: MultiVector = other_2141;
    let _e541: MultiVector = other_2141;
    let _e552: MultiVector = self_2397;
    let _e556: MultiVector = other_2141;
    let _e559: MultiVector = self_2397;
    let _e563: MultiVector = other_2141;
    let _e566: MultiVector = other_2141;
    let _e569: MultiVector = other_2141;
    let _e581: MultiVector = self_2397;
    let _e585: MultiVector = other_2141;
    let _e588: MultiVector = other_2141;
    let _e591: MultiVector = other_2141;
    let _e603: MultiVector = self_2397;
    let _e607: MultiVector = other_2141;
    let _e610: MultiVector = other_2141;
    let _e613: MultiVector = other_2141;
    let _e625: MultiVector = self_2397;
    let _e629: MultiVector = other_2141;
    let _e632: MultiVector = other_2141;
    let _e635: MultiVector = other_2141;
    let _e647: MultiVector = self_2397;
    let _e651: MultiVector = other_2141;
    let _e654: MultiVector = other_2141;
    let _e657: MultiVector = other_2141;
    let _e669: MultiVector = self_2397;
    let _e673: MultiVector = other_2141;
    let _e676: MultiVector = other_2141;
    let _e679: MultiVector = other_2141;
    let _e691: MultiVector = self_2397;
    let _e695: MultiVector = other_2141;
    let _e699: MultiVector = self_2397;
    let _e703: MultiVector = other_2141;
    let _e706: MultiVector = self_2397;
    let _e710: MultiVector = other_2141;
    let _e713: MultiVector = other_2141;
    let _e724: MultiVector = self_2397;
    let _e728: MultiVector = other_2141;
    let _e731: MultiVector = other_2141;
    let _e742: MultiVector = self_2397;
    let _e746: MultiVector = other_2141;
    let _e749: MultiVector = other_2141;
    let _e760: MultiVector = self_2397;
    let _e764: MultiVector = other_2141;
    let _e774: MultiVector = self_2397;
    let _e778: MultiVector = other_2141;
    let _e788: MultiVector = self_2397;
    let _e792: MultiVector = other_2141;
    let _e803: MultiVector = self_2397;
    let _e807: MultiVector = other_2141;
    let _e818: MultiVector = self_2397;
    let _e822: MultiVector = other_2141;
    let _e833: MultiVector = self_2397;
    let _e837: MultiVector = other_2141;
    let _e847: MultiVector = self_2397;
    let _e851: MultiVector = other_2141;
    let _e861: MultiVector = self_2397;
    let _e865: MultiVector = other_2141;
    let _e875: MultiVector = self_2397;
    let _e879: MultiVector = other_2141;
    let _e882: MultiVector = other_2141;
    let _e888: MultiVector = self_2397;
    let _e892: MultiVector = other_2141;
    let _e895: MultiVector = other_2141;
    let _e901: MultiVector = self_2397;
    let _e905: MultiVector = other_2141;
    let _e908: MultiVector = other_2141;
    let _e914: MultiVector = self_2397;
    let _e918: MultiVector = other_2141;
    let _e929: MultiVector = self_2397;
    let _e933: MultiVector = other_2141;
    let _e944: MultiVector = self_2397;
    let _e948: MultiVector = other_2141;
    let _e959: MultiVector = self_2397;
    let _e963: MultiVector = other_2141;
    let _e974: MultiVector = self_2397;
    let _e978: MultiVector = other_2141;
    let _e989: MultiVector = self_2397;
    let _e993: MultiVector = other_2141;
    let _e1004: MultiVector = self_2397;
    let _e1008: MultiVector = other_2141;
    let _e1011: MultiVector = other_2141;
    let _e1022: MultiVector = self_2397;
    let _e1026: MultiVector = other_2141;
    let _e1036: MultiVector = self_2397;
    let _e1039: MultiVector = self_2397;
    let _e1043: MultiVector = other_2141;
    let _e1046: MultiVector = other_2141;
    let _e1057: MultiVector = self_2397;
    let _e1061: MultiVector = other_2141;
    let _e1064: MultiVector = self_2397;
    let _e1068: MultiVector = other_2141;
    let _e1080: MultiVector = self_2397;
    let _e1084: MultiVector = other_2141;
    let _e1087: MultiVector = other_2141;
    let _e1090: MultiVector = other_2141;
    let _e1093: MultiVector = other_2141;
    let _e1107: MultiVector = self_2397;
    let _e1111: MultiVector = other_2141;
    let _e1114: MultiVector = other_2141;
    let _e1117: MultiVector = other_2141;
    let _e1120: MultiVector = other_2141;
    let _e1134: MultiVector = self_2397;
    let _e1138: MultiVector = other_2141;
    let _e1141: MultiVector = other_2141;
    let _e1144: MultiVector = other_2141;
    let _e1147: MultiVector = other_2141;
    let _e1161: MultiVector = self_2397;
    let _e1165: MultiVector = other_2141;
    let _e1177: MultiVector = self_2397;
    let _e1181: MultiVector = other_2141;
    let _e1184: MultiVector = other_2141;
    let _e1187: MultiVector = other_2141;
    let _e1190: MultiVector = other_2141;
    let _e1196: MultiVector = self_2397;
    let _e1200: MultiVector = other_2141;
    let _e1203: MultiVector = other_2141;
    let _e1206: MultiVector = other_2141;
    let _e1209: MultiVector = other_2141;
    let _e1223: MultiVector = self_2397;
    let _e1227: MultiVector = other_2141;
    let _e1230: MultiVector = other_2141;
    let _e1233: MultiVector = other_2141;
    let _e1236: MultiVector = other_2141;
    let _e1250: MultiVector = self_2397;
    let _e1254: MultiVector = other_2141;
    let _e1257: MultiVector = other_2141;
    let _e1260: MultiVector = other_2141;
    let _e1263: MultiVector = other_2141;
    let _e1277: MultiVector = self_2397;
    let _e1281: MultiVector = other_2141;
    let _e1293: MultiVector = self_2397;
    let _e1297: MultiVector = other_2141;
    let _e1309: MultiVector = self_2397;
    let _e1313: MultiVector = other_2141;
    let _e1325: MultiVector = self_2397;
    let _e1329: MultiVector = other_2141;
    let _e1341: MultiVector = self_2397;
    let _e1345: MultiVector = other_2141;
    let _e1348: MultiVector = other_2141;
    let _e1351: MultiVector = other_2141;
    let _e1354: MultiVector = other_2141;
    let _e1368: MultiVector = self_2397;
    let _e1372: MultiVector = other_2141;
    let _e1375: MultiVector = other_2141;
    let _e1378: MultiVector = other_2141;
    let _e1381: MultiVector = other_2141;
    let _e1395: MultiVector = self_2397;
    let _e1399: MultiVector = other_2141;
    let _e1402: MultiVector = other_2141;
    let _e1405: MultiVector = other_2141;
    let _e1408: MultiVector = other_2141;
    let _e1422: MultiVector = self_2397;
    let _e1426: MultiVector = other_2141;
    let _e1439: MultiVector = self_2397;
    let _e1443: MultiVector = other_2141;
    let _e1456: MultiVector = self_2397;
    let _e1460: MultiVector = other_2141;
    let _e1473: MultiVector = self_2397;
    let _e1477: MultiVector = other_2141;
    let _e1480: MultiVector = other_2141;
    let _e1483: MultiVector = other_2141;
    let _e1486: MultiVector = other_2141;
    let _e1500: MultiVector = self_2397;
    let _e1504: MultiVector = other_2141;
    let _e1507: MultiVector = other_2141;
    let _e1510: MultiVector = other_2141;
    let _e1513: MultiVector = other_2141;
    let _e1527: MultiVector = self_2397;
    let _e1531: MultiVector = other_2141;
    let _e1534: MultiVector = other_2141;
    let _e1537: MultiVector = other_2141;
    let _e1540: MultiVector = other_2141;
    let _e1554: MultiVector = self_2397;
    let _e1558: MultiVector = other_2141;
    let _e1571: MultiVector = self_2397;
    let _e1575: MultiVector = other_2141;
    let _e1588: MultiVector = self_2397;
    let _e1592: MultiVector = other_2141;
    let _e1605: MultiVector = self_2397;
    let _e1609: MultiVector = other_2141;
    let _e1612: MultiVector = other_2141;
    let _e1615: MultiVector = other_2141;
    let _e1618: MultiVector = other_2141;
    let _e1624: MultiVector = self_2397;
    let _e1628: MultiVector = other_2141;
    let _e1641: MultiVector = self_2397;
    let _e1645: MultiVector = other_2141;
    let _e1658: MultiVector = self_2397;
    let _e1662: MultiVector = other_2141;
    let _e1675: MultiVector = self_2397;
    let _e1679: MultiVector = other_2141;
    let _e1682: MultiVector = other_2141;
    let _e1685: MultiVector = other_2141;
    let _e1688: MultiVector = other_2141;
    let _e1694: MultiVector = self_2397;
    let _e1697: MultiVector = self_2397;
    let _e1700: MultiVector = self_2397;
    let _e1703: MultiVector = self_2397;
    let _e1707: MultiVector = other_2141;
    let _e1719: MultiVector = self_2397;
    let _e1723: MultiVector = other_2141;
    let _e1726: MultiVector = self_2397;
    let _e1730: MultiVector = other_2141;
    let _e1734: MultiVector = self_2397;
    let _e1738: MultiVector = other_2141;
    let _e1741: MultiVector = other_2141;
    let _e1744: MultiVector = other_2141;
    let _e1757: MultiVector = self_2397;
    let _e1761: MultiVector = other_2141;
    let _e1764: MultiVector = other_2141;
    let _e1767: MultiVector = other_2141;
    let _e1780: MultiVector = self_2397;
    let _e1784: MultiVector = other_2141;
    let _e1787: MultiVector = other_2141;
    let _e1790: MultiVector = other_2141;
    let _e1803: MultiVector = self_2397;
    let _e1807: MultiVector = other_2141;
    let _e1811: MultiVector = self_2397;
    let _e1815: MultiVector = other_2141;
    let _e1818: MultiVector = other_2141;
    let _e1821: MultiVector = other_2141;
    let _e1833: MultiVector = self_2397;
    let _e1837: MultiVector = other_2141;
    let _e1840: MultiVector = other_2141;
    let _e1843: MultiVector = other_2141;
    let _e1855: MultiVector = self_2397;
    let _e1859: MultiVector = other_2141;
    let _e1862: MultiVector = other_2141;
    let _e1865: MultiVector = other_2141;
    let _e1877: MultiVector = self_2397;
    let _e1881: MultiVector = other_2141;
    let _e1884: MultiVector = other_2141;
    let _e1887: MultiVector = other_2141;
    let _e1899: MultiVector = self_2397;
    let _e1903: MultiVector = other_2141;
    let _e1906: MultiVector = other_2141;
    let _e1909: MultiVector = other_2141;
    let _e1921: MultiVector = self_2397;
    let _e1925: MultiVector = other_2141;
    let _e1928: MultiVector = other_2141;
    let _e1931: MultiVector = other_2141;
    let _e1943: MultiVector = self_2397;
    let _e1947: MultiVector = other_2141;
    let _e1950: MultiVector = other_2141;
    let _e1953: MultiVector = other_2141;
    let _e1965: MultiVector = self_2397;
    let _e1969: MultiVector = other_2141;
    let _e1972: MultiVector = other_2141;
    let _e1975: MultiVector = other_2141;
    let _e1987: MultiVector = self_2397;
    let _e1991: MultiVector = other_2141;
    let _e1994: MultiVector = other_2141;
    let _e1997: MultiVector = other_2141;
    let _e2009: MultiVector = self_2397;
    let _e2013: MultiVector = other_2141;
    let _e2016: MultiVector = other_2141;
    let _e2019: MultiVector = other_2141;
    let _e2025: MultiVector = self_2397;
    let _e2029: MultiVector = other_2141;
    let _e2032: MultiVector = self_2397;
    let _e2036: MultiVector = other_2141;
    let _e2039: MultiVector = other_2141;
    let _e2042: MultiVector = other_2141;
    let _e2055: MultiVector = self_2397;
    let _e2059: MultiVector = other_2141;
    let _e2062: MultiVector = other_2141;
    let _e2065: MultiVector = other_2141;
    let _e2078: MultiVector = self_2397;
    let _e2082: MultiVector = other_2141;
    let _e2085: MultiVector = other_2141;
    let _e2088: MultiVector = other_2141;
    let _e2101: MultiVector = self_2397;
    let _e2105: MultiVector = other_2141;
    let _e2108: MultiVector = other_2141;
    let _e2111: MultiVector = other_2141;
    let _e2123: MultiVector = self_2397;
    let _e2127: MultiVector = other_2141;
    let _e2130: MultiVector = other_2141;
    let _e2133: MultiVector = other_2141;
    let _e2145: MultiVector = self_2397;
    let _e2149: MultiVector = other_2141;
    let _e2152: MultiVector = other_2141;
    let _e2155: MultiVector = other_2141;
    let _e2167: MultiVector = self_2397;
    let _e2171: MultiVector = other_2141;
    let _e2175: MultiVector = self_2397;
    let _e2179: MultiVector = other_2141;
    let _e2182: MultiVector = self_2397;
    let _e2186: MultiVector = other_2141;
    let _e2190: MultiVector = self_2397;
    let _e2194: MultiVector = other_2141;
    let _e2198: MultiVector = self_2397;
    let _e2202: MultiVector = other_2141;
    let _e2205: MultiVector = other_2141;
    let _e2208: MultiVector = other_2141;
    let _e2221: MultiVector = self_2397;
    let _e2225: MultiVector = other_2141;
    let _e2228: MultiVector = other_2141;
    let _e2231: MultiVector = other_2141;
    let _e2244: MultiVector = self_2397;
    let _e2248: MultiVector = other_2141;
    let _e2251: MultiVector = other_2141;
    let _e2254: MultiVector = other_2141;
    let _e2267: MultiVector = self_2397;
    let _e2271: MultiVector = other_2141;
    let _e2274: MultiVector = other_2141;
    let _e2277: MultiVector = other_2141;
    let _e2283: MultiVector = self_2397;
    let _e2287: MultiVector = other_2141;
    let _e2291: MultiVector = self_2397;
    let _e2295: MultiVector = other_2141;
    let _e2298: MultiVector = other_2141;
    let _e2301: MultiVector = other_2141;
    let _e2313: MultiVector = self_2397;
    let _e2317: MultiVector = other_2141;
    let _e2320: MultiVector = other_2141;
    let _e2323: MultiVector = other_2141;
    let _e2335: MultiVector = self_2397;
    let _e2339: MultiVector = other_2141;
    let _e2342: MultiVector = other_2141;
    let _e2345: MultiVector = other_2141;
    let _e2357: MultiVector = self_2397;
    let _e2361: MultiVector = other_2141;
    let _e2365: MultiVector = self_2397;
    let _e2369: MultiVector = other_2141;
    let _e2372: MultiVector = other_2141;
    let _e2375: MultiVector = other_2141;
    let _e2387: MultiVector = self_2397;
    let _e2391: MultiVector = other_2141;
    let _e2394: MultiVector = other_2141;
    let _e2397: MultiVector = other_2141;
    let _e2409: MultiVector = self_2397;
    let _e2413: MultiVector = other_2141;
    let _e2416: MultiVector = other_2141;
    let _e2419: MultiVector = other_2141;
    let _e2431: MultiVector = self_2397;
    let _e2435: MultiVector = other_2141;
    let _e2438: MultiVector = other_2141;
    let _e2441: MultiVector = other_2141;
    let _e2453: MultiVector = self_2397;
    let _e2457: MultiVector = other_2141;
    let _e2460: MultiVector = other_2141;
    let _e2463: MultiVector = other_2141;
    let _e2475: MultiVector = self_2397;
    let _e2479: MultiVector = other_2141;
    let _e2482: MultiVector = other_2141;
    let _e2485: MultiVector = other_2141;
    let _e2497: MultiVector = self_2397;
    let _e2501: MultiVector = other_2141;
    let _e2504: MultiVector = other_2141;
    let _e2507: MultiVector = other_2141;
    let _e2519: MultiVector = self_2397;
    let _e2523: MultiVector = other_2141;
    let _e2526: MultiVector = other_2141;
    let _e2529: MultiVector = other_2141;
    let _e2541: MultiVector = self_2397;
    let _e2545: MultiVector = other_2141;
    let _e2548: MultiVector = other_2141;
    let _e2551: MultiVector = other_2141;
    let _e2563: MultiVector = self_2397;
    let _e2567: MultiVector = other_2141;
    let _e2570: MultiVector = other_2141;
    let _e2573: MultiVector = other_2141;
    let _e2585: MultiVector = self_2397;
    let _e2589: MultiVector = other_2141;
    let _e2592: MultiVector = other_2141;
    let _e2595: MultiVector = other_2141;
    let _e2607: MultiVector = self_2397;
    let _e2611: MultiVector = other_2141;
    let _e2614: MultiVector = other_2141;
    let _e2617: MultiVector = other_2141;
    let _e2629: MultiVector = self_2397;
    let _e2633: MultiVector = other_2141;
    let _e2636: MultiVector = other_2141;
    let _e2639: MultiVector = other_2141;
    let _e2651: MultiVector = self_2397;
    let _e2655: MultiVector = other_2141;
    let _e2658: MultiVector = other_2141;
    let _e2661: MultiVector = other_2141;
    let _e2673: MultiVector = self_2397;
    let _e2677: MultiVector = other_2141;
    let _e2680: MultiVector = other_2141;
    let _e2683: MultiVector = other_2141;
    let _e2695: MultiVector = self_2397;
    let _e2699: MultiVector = other_2141;
    let _e2702: MultiVector = other_2141;
    let _e2705: MultiVector = other_2141;
    let _e2711: MultiVector = self_2397;
    let _e2715: MultiVector = other_2141;
    let _e2718: MultiVector = other_2141;
    let _e2721: MultiVector = other_2141;
    let _e2734: MultiVector = self_2397;
    let _e2738: MultiVector = other_2141;
    let _e2741: MultiVector = other_2141;
    let _e2744: MultiVector = other_2141;
    let _e2757: MultiVector = self_2397;
    let _e2761: MultiVector = other_2141;
    let _e2764: MultiVector = other_2141;
    let _e2767: MultiVector = other_2141;
    let _e2780: MultiVector = self_2397;
    let _e2784: MultiVector = other_2141;
    let _e2787: MultiVector = other_2141;
    let _e2790: MultiVector = other_2141;
    let _e2796: MultiVector = self_2397;
    let _e2800: MultiVector = other_2141;
    let _e2803: MultiVector = self_2397;
    let _e2807: MultiVector = other_2141;
    let _e2810: MultiVector = other_2141;
    let _e2813: MultiVector = other_2141;
    let _e2826: MultiVector = self_2397;
    let _e2830: MultiVector = other_2141;
    let _e2833: MultiVector = other_2141;
    let _e2836: MultiVector = other_2141;
    let _e2849: MultiVector = self_2397;
    let _e2853: MultiVector = other_2141;
    let _e2856: MultiVector = other_2141;
    let _e2859: MultiVector = other_2141;
    let _e2872: MultiVector = self_2397;
    let _e2876: MultiVector = other_2141;
    let _e2880: MultiVector = self_2397;
    let _e2884: MultiVector = other_2141;
    let _e2887: MultiVector = other_2141;
    let _e2890: MultiVector = other_2141;
    let _e2902: MultiVector = self_2397;
    let _e2906: MultiVector = other_2141;
    let _e2909: MultiVector = other_2141;
    let _e2912: MultiVector = other_2141;
    let _e2924: MultiVector = self_2397;
    let _e2928: MultiVector = other_2141;
    let _e2931: MultiVector = other_2141;
    let _e2934: MultiVector = other_2141;
    let _e2946: MultiVector = self_2397;
    let _e2950: MultiVector = other_2141;
    let _e2953: MultiVector = other_2141;
    let _e2956: MultiVector = other_2141;
    let _e2968: MultiVector = self_2397;
    let _e2972: MultiVector = other_2141;
    let _e2975: MultiVector = other_2141;
    let _e2978: MultiVector = other_2141;
    let _e2990: MultiVector = self_2397;
    let _e2994: MultiVector = other_2141;
    let _e2997: MultiVector = other_2141;
    let _e3000: MultiVector = other_2141;
    let _e3012: MultiVector = self_2397;
    let _e3016: MultiVector = other_2141;
    let _e3019: MultiVector = other_2141;
    let _e3022: MultiVector = other_2141;
    let _e3034: MultiVector = self_2397;
    let _e3038: MultiVector = other_2141;
    let _e3041: MultiVector = other_2141;
    let _e3044: MultiVector = other_2141;
    let _e3056: MultiVector = self_2397;
    let _e3060: MultiVector = other_2141;
    let _e3063: MultiVector = other_2141;
    let _e3066: MultiVector = other_2141;
    let _e3078: MultiVector = self_2397;
    let _e3082: MultiVector = other_2141;
    let _e3085: MultiVector = other_2141;
    let _e3088: MultiVector = other_2141;
    let _e3094: MultiVector = self_2397;
    let _e3098: MultiVector = other_2141;
    let _e3102: MultiVector = self_2397;
    let _e3106: MultiVector = other_2141;
    let _e3109: MultiVector = self_2397;
    let _e3113: MultiVector = other_2141;
    let _e3116: MultiVector = other_2141;
    let _e3119: MultiVector = other_2141;
    let _e3122: MultiVector = other_2141;
    let _e3136: MultiVector = self_2397;
    let _e3140: MultiVector = other_2141;
    let _e3143: MultiVector = other_2141;
    let _e3146: MultiVector = other_2141;
    let _e3149: MultiVector = other_2141;
    let _e3163: MultiVector = self_2397;
    let _e3167: MultiVector = other_2141;
    let _e3170: MultiVector = other_2141;
    let _e3173: MultiVector = other_2141;
    let _e3176: MultiVector = other_2141;
    let _e3190: MultiVector = self_2397;
    let _e3194: MultiVector = other_2141;
    let _e3197: MultiVector = other_2141;
    let _e3200: MultiVector = other_2141;
    let _e3203: MultiVector = other_2141;
    let _e3215: MultiVector = self_2397;
    let _e3219: MultiVector = other_2141;
    let _e3222: MultiVector = other_2141;
    let _e3225: MultiVector = other_2141;
    let _e3228: MultiVector = other_2141;
    let _e3242: MultiVector = self_2397;
    let _e3246: MultiVector = other_2141;
    let _e3249: MultiVector = other_2141;
    let _e3252: MultiVector = other_2141;
    let _e3255: MultiVector = other_2141;
    let _e3269: MultiVector = self_2397;
    let _e3273: MultiVector = other_2141;
    let _e3276: MultiVector = other_2141;
    let _e3279: MultiVector = other_2141;
    let _e3282: MultiVector = other_2141;
    let _e3296: MultiVector = self_2397;
    let _e3300: MultiVector = other_2141;
    let _e3303: MultiVector = other_2141;
    let _e3306: MultiVector = other_2141;
    let _e3309: MultiVector = other_2141;
    let _e3323: MultiVector = self_2397;
    let _e3327: MultiVector = other_2141;
    let _e3330: MultiVector = other_2141;
    let _e3333: MultiVector = other_2141;
    let _e3336: MultiVector = other_2141;
    let _e3350: MultiVector = self_2397;
    let _e3354: MultiVector = other_2141;
    let _e3357: MultiVector = other_2141;
    let _e3360: MultiVector = other_2141;
    let _e3363: MultiVector = other_2141;
    let _e3377: MultiVector = self_2397;
    let _e3381: MultiVector = other_2141;
    let _e3384: MultiVector = other_2141;
    let _e3387: MultiVector = other_2141;
    let _e3390: MultiVector = other_2141;
    let _e3403: MultiVector = self_2397;
    let _e3407: MultiVector = other_2141;
    let _e3410: MultiVector = other_2141;
    let _e3413: MultiVector = other_2141;
    let _e3416: MultiVector = other_2141;
    let _e3429: MultiVector = self_2397;
    let _e3433: MultiVector = other_2141;
    let _e3436: MultiVector = other_2141;
    let _e3439: MultiVector = other_2141;
    let _e3442: MultiVector = other_2141;
    let _e3455: MultiVector = self_2397;
    let _e3459: MultiVector = other_2141;
    let _e3462: MultiVector = other_2141;
    let _e3465: MultiVector = other_2141;
    let _e3468: MultiVector = other_2141;
    let _e3474: MultiVector = self_2397;
    let _e3477: MultiVector = self_2397;
    let _e3480: MultiVector = self_2397;
    let _e3483: MultiVector = self_2397;
    let _e3487: MultiVector = other_2141;
    let _e3490: MultiVector = other_2141;
    let _e3493: MultiVector = other_2141;
    let _e3496: MultiVector = other_2141;
    let _e3511: MultiVector = self_2397;
    let _e3515: MultiVector = other_2141;
    let _e3518: MultiVector = self_2397;
    let _e3522: MultiVector = other_2141;
    let _e3525: MultiVector = other_2141;
    let _e3528: MultiVector = other_2141;
    let _e3531: MultiVector = other_2141;
    let _e3543: MultiVector = self_2397;
    let _e3547: MultiVector = other_2141;
    let _e3550: MultiVector = other_2141;
    let _e3553: MultiVector = other_2141;
    let _e3556: MultiVector = other_2141;
    let _e3570: MultiVector = self_2397;
    let _e3574: MultiVector = other_2141;
    let _e3577: MultiVector = other_2141;
    let _e3580: MultiVector = other_2141;
    let _e3583: MultiVector = other_2141;
    let _e3597: MultiVector = self_2397;
    let _e3601: MultiVector = other_2141;
    let _e3604: MultiVector = other_2141;
    let _e3607: MultiVector = other_2141;
    let _e3610: MultiVector = other_2141;
    let _e3624: MultiVector = self_2397;
    let _e3628: MultiVector = other_2141;
    let _e3631: MultiVector = other_2141;
    let _e3634: MultiVector = other_2141;
    let _e3637: MultiVector = other_2141;
    let _e3649: MultiVector = self_2397;
    let _e3653: MultiVector = other_2141;
    let _e3657: MultiVector = self_2397;
    let _e3661: MultiVector = other_2141;
    let _e3664: MultiVector = other_2141;
    let _e3667: MultiVector = other_2141;
    let _e3670: MultiVector = other_2141;
    let _e3684: MultiVector = self_2397;
    let _e3688: MultiVector = other_2141;
    let _e3691: MultiVector = other_2141;
    let _e3694: MultiVector = other_2141;
    let _e3697: MultiVector = other_2141;
    let _e3711: MultiVector = self_2397;
    let _e3715: MultiVector = other_2141;
    let _e3718: MultiVector = other_2141;
    let _e3721: MultiVector = other_2141;
    let _e3724: MultiVector = other_2141;
    let _e3738: MultiVector = self_2397;
    let _e3742: MultiVector = other_2141;
    let _e3745: MultiVector = other_2141;
    let _e3748: MultiVector = other_2141;
    let _e3751: MultiVector = other_2141;
    let _e3763: MultiVector = self_2397;
    let _e3767: MultiVector = other_2141;
    let _e3770: MultiVector = other_2141;
    let _e3773: MultiVector = other_2141;
    let _e3776: MultiVector = other_2141;
    let _e3790: MultiVector = self_2397;
    let _e3794: MultiVector = other_2141;
    let _e3797: MultiVector = other_2141;
    let _e3800: MultiVector = other_2141;
    let _e3803: MultiVector = other_2141;
    let _e3817: MultiVector = self_2397;
    let _e3821: MultiVector = other_2141;
    let _e3824: MultiVector = other_2141;
    let _e3827: MultiVector = other_2141;
    let _e3830: MultiVector = other_2141;
    let _e3844: MultiVector = self_2397;
    let _e3848: MultiVector = other_2141;
    let _e3851: MultiVector = other_2141;
    let _e3854: MultiVector = other_2141;
    let _e3857: MultiVector = other_2141;
    let _e3871: MultiVector = self_2397;
    let _e3875: MultiVector = other_2141;
    let _e3878: MultiVector = other_2141;
    let _e3881: MultiVector = other_2141;
    let _e3884: MultiVector = other_2141;
    let _e3898: MultiVector = self_2397;
    let _e3902: MultiVector = other_2141;
    let _e3905: MultiVector = other_2141;
    let _e3908: MultiVector = other_2141;
    let _e3911: MultiVector = other_2141;
    let _e3925: MultiVector = self_2397;
    let _e3929: MultiVector = other_2141;
    let _e3932: MultiVector = other_2141;
    let _e3935: MultiVector = other_2141;
    let _e3938: MultiVector = other_2141;
    let _e3951: MultiVector = self_2397;
    let _e3955: MultiVector = other_2141;
    let _e3958: MultiVector = other_2141;
    let _e3961: MultiVector = other_2141;
    let _e3964: MultiVector = other_2141;
    let _e3977: MultiVector = self_2397;
    let _e3981: MultiVector = other_2141;
    let _e3984: MultiVector = other_2141;
    let _e3987: MultiVector = other_2141;
    let _e3990: MultiVector = other_2141;
    let _e4003: MultiVector = self_2397;
    let _e4007: MultiVector = other_2141;
    let _e4010: MultiVector = other_2141;
    let _e4013: MultiVector = other_2141;
    let _e4016: MultiVector = other_2141;
    let _e4030: MultiVector = self_2397;
    let _e4034: MultiVector = other_2141;
    let _e4037: MultiVector = other_2141;
    let _e4040: MultiVector = other_2141;
    let _e4043: MultiVector = other_2141;
    let _e4057: MultiVector = self_2397;
    let _e4061: MultiVector = other_2141;
    let _e4064: MultiVector = other_2141;
    let _e4067: MultiVector = other_2141;
    let _e4070: MultiVector = other_2141;
    let _e4084: MultiVector = self_2397;
    let _e4088: MultiVector = other_2141;
    let _e4091: MultiVector = other_2141;
    let _e4094: MultiVector = other_2141;
    let _e4097: MultiVector = other_2141;
    let _e4110: MultiVector = self_2397;
    let _e4114: MultiVector = other_2141;
    let _e4117: MultiVector = other_2141;
    let _e4120: MultiVector = other_2141;
    let _e4123: MultiVector = other_2141;
    let _e4136: MultiVector = self_2397;
    let _e4140: MultiVector = other_2141;
    let _e4143: MultiVector = other_2141;
    let _e4146: MultiVector = other_2141;
    let _e4149: MultiVector = other_2141;
    let _e4162: MultiVector = self_2397;
    let _e4166: MultiVector = other_2141;
    let _e4169: MultiVector = other_2141;
    let _e4172: MultiVector = other_2141;
    let _e4175: MultiVector = other_2141;
    let _e4181: MultiVector = self_2397;
    let _e4185: MultiVector = other_2141;
    let _e4188: MultiVector = other_2141;
    let _e4191: MultiVector = other_2141;
    let _e4194: MultiVector = other_2141;
    let _e4207: MultiVector = self_2397;
    let _e4211: MultiVector = other_2141;
    let _e4214: MultiVector = other_2141;
    let _e4217: MultiVector = other_2141;
    let _e4220: MultiVector = other_2141;
    let _e4233: MultiVector = self_2397;
    let _e4237: MultiVector = other_2141;
    let _e4240: MultiVector = other_2141;
    let _e4243: MultiVector = other_2141;
    let _e4246: MultiVector = other_2141;
    let _e4259: MultiVector = self_2397;
    let _e4263: MultiVector = other_2141;
    let _e4266: MultiVector = other_2141;
    let _e4269: MultiVector = other_2141;
    let _e4272: MultiVector = other_2141;
    let _e4278: MultiVector = self_2397;
    let _e4281: MultiVector = self_2397;
    let _e4284: MultiVector = self_2397;
    let _e4287: MultiVector = self_2397;
    let _e4291: MultiVector = other_2141;
    return MultiVector(((((((((((((((((((((((((((((((((vec3<f32>(_e4.g0_.x) * _e8.g0_) + ((vec3<f32>(_e11.g0_.z) * vec3<f32>(_e15.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e26.g1_.x) * vec3<f32>(_e30.g1_.x, _e33.g8_.x, _e36.g9_.x))) + (vec3<f32>(_e42.g1_.y) * vec3<f32>(_e46.g1_.y, _e49.g8_.y, _e52.g9_.y))) + (vec3<f32>(_e58.g1_.z) * vec3<f32>(_e62.g1_.z, _e65.g8_.z, _e68.g9_.z))) + ((vec3<f32>(_e74.g2_.x) * vec3<f32>(_e78.g8_.w, _e81.g8_.w, _e84.g9_.w)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e95.g2_.y) * vec3<f32>(_e99.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e110.g3_.x) * vec3<f32>(_e114.g8_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e126.g3_.y) * vec3<f32>(_e130.g8_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e142.g3_.z) * vec3<f32>(_e146.g8_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e158.g3_.w) * vec3<f32>(_e162.g8_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e174.g4_.x) * vec3<f32>(_e178.g5_.x, _e181.g5_.x, _e184.g7_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e197.g4_.y) * vec3<f32>(_e201.g5_.y, _e204.g5_.y, _e207.g7_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e220.g4_.z) * vec3<f32>(_e224.g5_.z, _e227.g5_.z, _e230.g7_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) - (vec3<f32>(_e243.g5_.x) * vec3<f32>(_e247.g5_.x, _e250.g4_.x, _e253.g6_.x))) - (vec3<f32>(_e259.g5_.y) * vec3<f32>(_e263.g5_.y, _e266.g4_.y, _e269.g6_.y))) - (vec3<f32>(_e275.g5_.z) * vec3<f32>(_e279.g5_.z, _e282.g4_.z, _e285.g6_.z))) + ((vec3<f32>(_e291.g6_.x) * vec3<f32>(_e295.g5_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e307.g6_.y) * vec3<f32>(_e311.g5_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e323.g6_.z) * vec3<f32>(_e327.g5_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e339.g7_.x) * vec3<f32>(_e343.g4_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e355.g7_.y) * vec3<f32>(_e359.g4_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e371.g7_.z) * vec3<f32>(_e375.g4_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e387.g8_.x) * vec3<f32>(_e391.g1_.x, _e394.g1_.x, _e397.g3_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e410.g8_.y) * vec3<f32>(_e414.g1_.y, _e417.g1_.y, _e420.g3_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e433.g8_.z) * vec3<f32>(_e437.g1_.z, _e440.g1_.z, _e443.g3_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) - (vec3<f32>(_e456.g8_.w) * vec3<f32>(_e460.g8_.w, _e463.g2_.x, _e466.g3_.w))) + ((vec3<f32>(_e472.g9_.x) * vec3<f32>(_e476.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e487.g9_.y) * vec3<f32>(_e491.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e502.g9_.z) * vec3<f32>(_e506.g1_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e517.g9_.w) * vec3<f32>(_e521.g2_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e532.g0_.xyy * vec3<f32>(_e535.g0_.x, _e538.g0_.x, _e541.g2_.y)) * vec3<f32>(0.0, 1.0, 1.0))), ((((((((vec3<f32>(_e552.g0_.x) * _e556.g1_) + ((vec3<f32>(_e559.g1_.x) * vec3<f32>(_e563.g0_.x, _e566.g5_.z, _e569.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e581.g1_.y) * vec3<f32>(_e585.g5_.z, _e588.g0_.x, _e591.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e603.g1_.z) * vec3<f32>(_e607.g5_.y, _e610.g5_.x, _e613.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e625.g5_.x) * vec3<f32>(_e629.g8_.w, _e632.g1_.z, _e635.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e647.g5_.y) * vec3<f32>(_e651.g1_.z, _e654.g8_.w, _e657.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e669.g5_.z) * vec3<f32>(_e673.g1_.y, _e676.g1_.x, _e679.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e691.g8_.w) * _e695.g5_)), ((((((((((((((((((((((((vec2<f32>(_e699.g0_.x) * _e703.g2_) + ((vec2<f32>(_e706.g1_.x) * vec2<f32>(_e710.g4_.x, _e713.g3_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e724.g1_.y) * vec2<f32>(_e728.g4_.y, _e731.g3_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e742.g1_.z) * vec2<f32>(_e746.g4_.z, _e749.g3_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e760.g2_.x) * vec2<f32>(_e764.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e774.g2_.y) * vec2<f32>(_e778.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e788.g3_.x) * vec2<f32>(_e792.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e803.g3_.y) * vec2<f32>(_e807.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e818.g3_.z) * vec2<f32>(_e822.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e833.g4_.x) * vec2<f32>(_e837.g1_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e847.g4_.y) * vec2<f32>(_e851.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e861.g4_.z) * vec2<f32>(_e865.g1_.z)) * vec2<f32>(1.0, 0.0))) - (vec2<f32>(_e875.g5_.x) * vec2<f32>(_e879.g8_.x, _e882.g7_.x))) - (vec2<f32>(_e888.g5_.y) * vec2<f32>(_e892.g8_.y, _e895.g7_.y))) - (vec2<f32>(_e901.g5_.z) * vec2<f32>(_e905.g8_.z, _e908.g7_.z))) + ((vec2<f32>(_e914.g7_.x) * vec2<f32>(_e918.g5_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e929.g7_.y) * vec2<f32>(_e933.g5_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e944.g7_.z) * vec2<f32>(_e948.g5_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e959.g8_.x) * vec2<f32>(_e963.g5_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e974.g8_.y) * vec2<f32>(_e978.g5_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e989.g8_.z) * vec2<f32>(_e993.g5_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1004.g8_.w) * vec2<f32>(_e1008.g0_.y, _e1011.g9_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1022.g9_.w) * vec2<f32>(_e1026.g8_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e1036.g0_.y, _e1039.g0_.x) * vec2<f32>(_e1043.g8_.w, _e1046.g8_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((((((((((((((((((((((((((vec4<f32>(_e1057.g0_.x) * _e1061.g3_) + ((vec4<f32>(_e1064.g0_.z) * vec4<f32>(_e1068.g8_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1080.g1_.x) * vec4<f32>(_e1084.g2_.y, _e1087.g7_.z, _e1090.g7_.y, _e1093.g6_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1107.g1_.y) * vec4<f32>(_e1111.g7_.z, _e1114.g2_.y, _e1117.g7_.x, _e1120.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1134.g1_.z) * vec4<f32>(_e1138.g7_.y, _e1141.g7_.x, _e1144.g2_.y, _e1147.g6_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1161.g2_.x) * vec4<f32>(_e1165.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) - (vec4<f32>(_e1177.g2_.y) * vec4<f32>(_e1181.g1_.x, _e1184.g1_.y, _e1187.g1_.z, _e1190.g2_.x))) + ((vec4<f32>(_e1196.g3_.x) * vec4<f32>(_e1200.g0_.x, _e1203.g5_.z, _e1206.g5_.y, _e1209.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1223.g3_.y) * vec4<f32>(_e1227.g5_.z, _e1230.g0_.x, _e1233.g5_.x, _e1236.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1250.g3_.z) * vec4<f32>(_e1254.g5_.y, _e1257.g5_.x, _e1260.g0_.x, _e1263.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1277.g3_.w) * vec4<f32>(_e1281.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1293.g4_.x) * vec4<f32>(_e1297.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1309.g4_.y) * vec4<f32>(_e1313.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1325.g4_.z) * vec4<f32>(_e1329.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1341.g5_.x) * vec4<f32>(_e1345.g9_.w, _e1348.g3_.z, _e1351.g3_.y, _e1354.g9_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1368.g5_.y) * vec4<f32>(_e1372.g3_.z, _e1375.g9_.w, _e1378.g3_.x, _e1381.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1395.g5_.z) * vec4<f32>(_e1399.g3_.y, _e1402.g3_.x, _e1405.g9_.w, _e1408.g9_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1422.g6_.x) * vec4<f32>(_e1426.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1439.g6_.y) * vec4<f32>(_e1443.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1456.g6_.z) * vec4<f32>(_e1460.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1473.g7_.x) * vec4<f32>(_e1477.g8_.w, _e1480.g1_.z, _e1483.g1_.y, _e1486.g8_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1500.g7_.y) * vec4<f32>(_e1504.g1_.z, _e1507.g8_.w, _e1510.g1_.x, _e1513.g8_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e1527.g7_.z) * vec4<f32>(_e1531.g1_.y, _e1534.g1_.x, _e1537.g8_.w, _e1540.g8_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1554.g8_.x) * vec4<f32>(_e1558.g7_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1571.g8_.y) * vec4<f32>(_e1575.g7_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1588.g8_.z) * vec4<f32>(_e1592.g7_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e1605.g8_.w) * vec4<f32>(_e1609.g7_.x, _e1612.g7_.y, _e1615.g7_.z, _e1618.g0_.z))) + ((vec4<f32>(_e1624.g9_.x) * vec4<f32>(_e1628.g5_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1641.g9_.y) * vec4<f32>(_e1645.g5_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1658.g9_.z) * vec4<f32>(_e1662.g5_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e1675.g9_.w) * vec4<f32>(_e1679.g5_.x, _e1682.g5_.y, _e1685.g5_.z, _e1688.g0_.y))) + ((vec4<f32>(_e1694.g0_.x, _e1697.g0_.x, _e1700.g0_.x, _e1703.g0_.y) * _e1707.g9_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((((((((((vec3<f32>(_e1719.g0_.x) * _e1723.g4_) + (vec3<f32>(_e1726.g0_.y) * _e1730.g5_)) + ((vec3<f32>(_e1734.g1_.x) * vec3<f32>(_e1738.g2_.x, _e1741.g8_.z, _e1744.g8_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e1757.g1_.y) * vec3<f32>(_e1761.g8_.z, _e1764.g2_.x, _e1767.g8_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e1780.g1_.z) * vec3<f32>(_e1784.g8_.y, _e1787.g8_.x, _e1790.g2_.x)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e1803.g2_.x) * _e1807.g1_)) + ((vec3<f32>(_e1811.g4_.x) * vec3<f32>(_e1815.g0_.x, _e1818.g5_.z, _e1821.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1833.g4_.y) * vec3<f32>(_e1837.g5_.z, _e1840.g0_.x, _e1843.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1855.g4_.z) * vec3<f32>(_e1859.g5_.y, _e1862.g5_.x, _e1865.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1877.g5_.x) * vec3<f32>(_e1881.g0_.y, _e1884.g4_.z, _e1887.g4_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1899.g5_.y) * vec3<f32>(_e1903.g4_.z, _e1906.g0_.y, _e1909.g4_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1921.g5_.z) * vec3<f32>(_e1925.g4_.y, _e1928.g4_.x, _e1931.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1943.g8_.x) * vec3<f32>(_e1947.g8_.w, _e1950.g1_.z, _e1953.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1965.g8_.y) * vec3<f32>(_e1969.g1_.z, _e1972.g8_.w, _e1975.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1987.g8_.z) * vec3<f32>(_e1991.g1_.y, _e1994.g1_.x, _e1997.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e2009.g8_.w) * vec3<f32>(_e2013.g8_.x, _e2016.g8_.y, _e2019.g8_.z))), ((((((((vec3<f32>(_e2025.g0_.x) * _e2029.g5_) + ((vec3<f32>(_e2032.g1_.x) * vec3<f32>(_e2036.g8_.w, _e2039.g1_.z, _e2042.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2055.g1_.y) * vec3<f32>(_e2059.g1_.z, _e2062.g8_.w, _e2065.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e2078.g1_.z) * vec3<f32>(_e2082.g1_.y, _e2085.g1_.x, _e2088.g8_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e2101.g5_.x) * vec3<f32>(_e2105.g0_.x, _e2108.g5_.z, _e2111.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2123.g5_.y) * vec3<f32>(_e2127.g5_.z, _e2130.g0_.x, _e2133.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2145.g5_.z) * vec3<f32>(_e2149.g5_.y, _e2152.g5_.x, _e2155.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e2167.g8_.w) * _e2171.g1_)), ((((((((((((((((((((((((((((((((vec3<f32>(_e2175.g0_.x) * _e2179.g6_) + (vec3<f32>(_e2182.g0_.y) * _e2186.g7_)) + (vec3<f32>(_e2190.g0_.z) * _e2194.g5_)) + ((vec3<f32>(_e2198.g1_.x) * vec3<f32>(_e2202.g3_.w, _e2205.g9_.z, _e2208.g9_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2221.g1_.y) * vec3<f32>(_e2225.g9_.z, _e2228.g3_.w, _e2231.g9_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e2244.g1_.z) * vec3<f32>(_e2248.g9_.y, _e2251.g9_.x, _e2254.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e2267.g2_.x) * vec3<f32>(_e2271.g3_.x, _e2274.g3_.y, _e2277.g3_.z))) + (vec3<f32>(_e2283.g2_.y) * _e2287.g4_)) + ((vec3<f32>(_e2291.g3_.x) * vec3<f32>(_e2295.g2_.x, _e2298.g8_.z, _e2301.g8_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2313.g3_.y) * vec3<f32>(_e2317.g8_.z, _e2320.g2_.x, _e2323.g8_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2335.g3_.z) * vec3<f32>(_e2339.g8_.y, _e2342.g8_.x, _e2345.g2_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e2357.g3_.w) * _e2361.g1_)) + ((vec3<f32>(_e2365.g4_.x) * vec3<f32>(_e2369.g2_.y, _e2372.g7_.z, _e2375.g7_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2387.g4_.y) * vec3<f32>(_e2391.g7_.z, _e2394.g2_.y, _e2397.g7_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2409.g4_.z) * vec3<f32>(_e2413.g7_.y, _e2416.g7_.x, _e2419.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2431.g5_.x) * vec3<f32>(_e2435.g0_.z, _e2438.g6_.z, _e2441.g6_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2453.g5_.y) * vec3<f32>(_e2457.g6_.z, _e2460.g0_.z, _e2463.g6_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2475.g5_.z) * vec3<f32>(_e2479.g6_.y, _e2482.g6_.x, _e2485.g0_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2497.g6_.x) * vec3<f32>(_e2501.g0_.x, _e2504.g5_.z, _e2507.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2519.g6_.y) * vec3<f32>(_e2523.g5_.z, _e2526.g0_.x, _e2529.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2541.g6_.z) * vec3<f32>(_e2545.g5_.y, _e2548.g5_.x, _e2551.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2563.g7_.x) * vec3<f32>(_e2567.g0_.y, _e2570.g4_.z, _e2573.g4_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2585.g7_.y) * vec3<f32>(_e2589.g4_.z, _e2592.g0_.y, _e2595.g4_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2607.g7_.z) * vec3<f32>(_e2611.g4_.y, _e2614.g4_.x, _e2617.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2629.g8_.x) * vec3<f32>(_e2633.g9_.w, _e2636.g3_.z, _e2639.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2651.g8_.y) * vec3<f32>(_e2655.g3_.z, _e2658.g9_.w, _e2661.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2673.g8_.z) * vec3<f32>(_e2677.g3_.y, _e2680.g3_.x, _e2683.g9_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e2695.g8_.w) * vec3<f32>(_e2699.g9_.x, _e2702.g9_.y, _e2705.g9_.z))) + ((vec3<f32>(_e2711.g9_.x) * vec3<f32>(_e2715.g8_.w, _e2718.g1_.z, _e2721.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2734.g9_.y) * vec3<f32>(_e2738.g1_.z, _e2741.g8_.w, _e2744.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e2757.g9_.z) * vec3<f32>(_e2761.g1_.y, _e2764.g1_.x, _e2767.g8_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e2780.g9_.w) * vec3<f32>(_e2784.g8_.x, _e2787.g8_.y, _e2790.g8_.z))), ((((((((((((((((vec3<f32>(_e2796.g0_.x) * _e2800.g7_) + ((vec3<f32>(_e2803.g1_.x) * vec3<f32>(_e2807.g9_.w, _e2810.g3_.z, _e2813.g3_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2826.g1_.y) * vec3<f32>(_e2830.g3_.z, _e2833.g9_.w, _e2836.g3_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e2849.g1_.z) * vec3<f32>(_e2853.g3_.y, _e2856.g3_.x, _e2859.g9_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e2872.g2_.y) * _e2876.g5_)) + ((vec3<f32>(_e2880.g3_.x) * vec3<f32>(_e2884.g8_.w, _e2887.g1_.z, _e2890.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2902.g3_.y) * vec3<f32>(_e2906.g1_.z, _e2909.g8_.w, _e2912.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2924.g3_.z) * vec3<f32>(_e2928.g1_.y, _e2931.g1_.x, _e2934.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2946.g5_.x) * vec3<f32>(_e2950.g2_.y, _e2953.g7_.z, _e2956.g7_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2968.g5_.y) * vec3<f32>(_e2972.g7_.z, _e2975.g2_.y, _e2978.g7_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2990.g5_.z) * vec3<f32>(_e2994.g7_.y, _e2997.g7_.x, _e3000.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e3012.g7_.x) * vec3<f32>(_e3016.g0_.x, _e3019.g5_.z, _e3022.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e3034.g7_.y) * vec3<f32>(_e3038.g5_.z, _e3041.g0_.x, _e3044.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e3056.g7_.z) * vec3<f32>(_e3060.g5_.y, _e3063.g5_.x, _e3066.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e3078.g8_.w) * vec3<f32>(_e3082.g3_.x, _e3085.g3_.y, _e3088.g3_.z))) + (vec3<f32>(_e3094.g9_.w) * _e3098.g1_)), ((((((((((((((((vec4<f32>(_e3102.g0_.x) * _e3106.g8_) + ((vec4<f32>(_e3109.g1_.x) * vec4<f32>(_e3113.g0_.y, _e3116.g4_.z, _e3119.g4_.y, _e3122.g5_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3136.g1_.y) * vec4<f32>(_e3140.g4_.z, _e3143.g0_.y, _e3146.g4_.x, _e3149.g5_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3163.g1_.z) * vec4<f32>(_e3167.g4_.y, _e3170.g4_.x, _e3173.g0_.y, _e3176.g5_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3190.g2_.x) * vec4<f32>(_e3194.g5_.x, _e3197.g5_.y, _e3200.g5_.z, _e3203.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e3215.g4_.x) * vec4<f32>(_e3219.g8_.w, _e3222.g1_.z, _e3225.g1_.y, _e3228.g8_.w)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e3242.g4_.y) * vec4<f32>(_e3246.g1_.z, _e3249.g8_.w, _e3252.g1_.x, _e3255.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e3269.g4_.z) * vec4<f32>(_e3273.g1_.y, _e3276.g1_.x, _e3279.g8_.w, _e3282.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e3296.g5_.x) * vec4<f32>(_e3300.g2_.x, _e3303.g8_.z, _e3306.g8_.y, _e3309.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3323.g5_.y) * vec4<f32>(_e3327.g8_.z, _e3330.g2_.x, _e3333.g8_.x, _e3336.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3350.g5_.z) * vec4<f32>(_e3354.g8_.y, _e3357.g8_.x, _e3360.g2_.x, _e3363.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3377.g8_.x) * vec4<f32>(_e3381.g0_.x, _e3384.g5_.z, _e3387.g5_.y, _e3390.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e3403.g8_.y) * vec4<f32>(_e3407.g5_.z, _e3410.g0_.x, _e3413.g5_.x, _e3416.g5_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e3429.g8_.z) * vec4<f32>(_e3433.g5_.y, _e3436.g5_.x, _e3439.g0_.x, _e3442.g5_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e3455.g8_.w) * vec4<f32>(_e3459.g4_.x, _e3462.g4_.y, _e3465.g4_.z, _e3468.g0_.x))) + ((vec4<f32>(_e3474.g0_.y, _e3477.g0_.y, _e3480.g0_.y, _e3483.g0_.x) * vec4<f32>(_e3487.g1_.x, _e3490.g1_.y, _e3493.g1_.z, _e3496.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((((((((((((((((((((((((((((((((vec4<f32>(_e3511.g0_.x) * _e3515.g9_) + ((vec4<f32>(_e3518.g0_.z) * vec4<f32>(_e3522.g1_.x, _e3525.g1_.y, _e3528.g1_.z, _e3531.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e3543.g1_.x) * vec4<f32>(_e3547.g0_.z, _e3550.g6_.z, _e3553.g6_.y, _e3556.g7_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3570.g1_.y) * vec4<f32>(_e3574.g6_.z, _e3577.g0_.z, _e3580.g6_.x, _e3583.g7_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3597.g1_.z) * vec4<f32>(_e3601.g6_.y, _e3604.g6_.x, _e3607.g0_.z, _e3610.g7_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3624.g2_.x) * vec4<f32>(_e3628.g7_.x, _e3631.g7_.y, _e3634.g7_.z, _e3637.g7_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) - (vec4<f32>(_e3649.g2_.y) * _e3653.g8_)) + ((vec4<f32>(_e3657.g3_.x) * vec4<f32>(_e3661.g0_.y, _e3664.g4_.z, _e3667.g4_.y, _e3670.g5_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3684.g3_.y) * vec4<f32>(_e3688.g4_.z, _e3691.g0_.y, _e3694.g4_.x, _e3697.g5_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3711.g3_.z) * vec4<f32>(_e3715.g4_.y, _e3718.g4_.x, _e3721.g0_.y, _e3724.g5_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3738.g3_.w) * vec4<f32>(_e3742.g5_.x, _e3745.g5_.y, _e3748.g5_.z, _e3751.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e3763.g4_.x) * vec4<f32>(_e3767.g9_.w, _e3770.g3_.z, _e3773.g3_.y, _e3776.g9_.w)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e3790.g4_.y) * vec4<f32>(_e3794.g3_.z, _e3797.g9_.w, _e3800.g3_.x, _e3803.g3_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e3817.g4_.z) * vec4<f32>(_e3821.g3_.y, _e3824.g3_.x, _e3827.g9_.w, _e3830.g3_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e3844.g5_.x) * vec4<f32>(_e3848.g3_.w, _e3851.g9_.z, _e3854.g9_.y, _e3857.g3_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3871.g5_.y) * vec4<f32>(_e3875.g9_.z, _e3878.g3_.w, _e3881.g9_.x, _e3884.g3_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3898.g5_.z) * vec4<f32>(_e3902.g9_.y, _e3905.g9_.x, _e3908.g3_.w, _e3911.g3_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3925.g6_.x) * vec4<f32>(_e3929.g8_.w, _e3932.g1_.z, _e3935.g1_.y, _e3938.g8_.w)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e3951.g6_.y) * vec4<f32>(_e3955.g1_.z, _e3958.g8_.w, _e3961.g1_.x, _e3964.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e3977.g6_.z) * vec4<f32>(_e3981.g1_.y, _e3984.g1_.x, _e3987.g8_.w, _e3990.g1_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e4003.g7_.x) * vec4<f32>(_e4007.g2_.x, _e4010.g8_.z, _e4013.g8_.y, _e4016.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e4030.g7_.y) * vec4<f32>(_e4034.g8_.z, _e4037.g2_.x, _e4040.g8_.x, _e4043.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e4057.g7_.z) * vec4<f32>(_e4061.g8_.y, _e4064.g8_.x, _e4067.g2_.x, _e4070.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e4084.g8_.x) * vec4<f32>(_e4088.g2_.y, _e4091.g7_.z, _e4094.g7_.y, _e4097.g2_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e4110.g8_.y) * vec4<f32>(_e4114.g7_.z, _e4117.g2_.y, _e4120.g7_.x, _e4123.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e4136.g8_.z) * vec4<f32>(_e4140.g7_.y, _e4143.g7_.x, _e4146.g2_.y, _e4149.g7_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e4162.g8_.w) * vec4<f32>(_e4166.g6_.x, _e4169.g6_.y, _e4172.g6_.z, _e4175.g2_.y))) + ((vec4<f32>(_e4181.g9_.x) * vec4<f32>(_e4185.g0_.x, _e4188.g5_.z, _e4191.g5_.y, _e4194.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e4207.g9_.y) * vec4<f32>(_e4211.g5_.z, _e4214.g0_.x, _e4217.g5_.x, _e4220.g5_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e4233.g9_.z) * vec4<f32>(_e4237.g5_.y, _e4240.g5_.x, _e4243.g0_.x, _e4246.g5_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e4259.g9_.w) * vec4<f32>(_e4263.g4_.x, _e4266.g4_.y, _e4269.g4_.z, _e4272.g0_.x))) + ((vec4<f32>(_e4278.g0_.y, _e4281.g0_.y, _e4284.g0_.y, _e4287.g0_.x) * _e4291.g3_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_multi_vector_regressive_product(self_2398: MultiVector, other_2142: MultiVector) -> MultiVector {
    var self_2399: MultiVector;
    var other_2143: MultiVector;

    self_2399 = self_2398;
    other_2143 = other_2142;
    let _e4: MultiVector = self_2399;
    let _e8: MultiVector = other_2143;
    let _e11: MultiVector = other_2143;
    let _e14: MultiVector = other_2143;
    let _e24: MultiVector = self_2399;
    let _e28: MultiVector = other_2143;
    let _e32: MultiVector = self_2399;
    let _e36: MultiVector = other_2143;
    let _e47: MultiVector = self_2399;
    let _e51: MultiVector = other_2143;
    let _e62: MultiVector = self_2399;
    let _e66: MultiVector = other_2143;
    let _e77: MultiVector = self_2399;
    let _e81: MultiVector = other_2143;
    let _e92: MultiVector = self_2399;
    let _e96: MultiVector = other_2143;
    let _e107: MultiVector = self_2399;
    let _e111: MultiVector = other_2143;
    let _e123: MultiVector = self_2399;
    let _e127: MultiVector = other_2143;
    let _e139: MultiVector = self_2399;
    let _e143: MultiVector = other_2143;
    let _e155: MultiVector = self_2399;
    let _e159: MultiVector = other_2143;
    let _e171: MultiVector = self_2399;
    let _e175: MultiVector = other_2143;
    let _e187: MultiVector = self_2399;
    let _e191: MultiVector = other_2143;
    let _e203: MultiVector = self_2399;
    let _e207: MultiVector = other_2143;
    let _e219: MultiVector = self_2399;
    let _e223: MultiVector = other_2143;
    let _e235: MultiVector = self_2399;
    let _e239: MultiVector = other_2143;
    let _e251: MultiVector = self_2399;
    let _e255: MultiVector = other_2143;
    let _e267: MultiVector = self_2399;
    let _e271: MultiVector = other_2143;
    let _e283: MultiVector = self_2399;
    let _e287: MultiVector = other_2143;
    let _e299: MultiVector = self_2399;
    let _e303: MultiVector = other_2143;
    let _e315: MultiVector = self_2399;
    let _e319: MultiVector = other_2143;
    let _e331: MultiVector = self_2399;
    let _e335: MultiVector = other_2143;
    let _e347: MultiVector = self_2399;
    let _e351: MultiVector = other_2143;
    let _e363: MultiVector = self_2399;
    let _e367: MultiVector = other_2143;
    let _e379: MultiVector = self_2399;
    let _e383: MultiVector = other_2143;
    let _e395: MultiVector = self_2399;
    let _e399: MultiVector = other_2143;
    let _e411: MultiVector = self_2399;
    let _e415: MultiVector = other_2143;
    let _e427: MultiVector = self_2399;
    let _e431: MultiVector = other_2143;
    let _e442: MultiVector = self_2399;
    let _e446: MultiVector = other_2143;
    let _e457: MultiVector = self_2399;
    let _e461: MultiVector = other_2143;
    let _e472: MultiVector = self_2399;
    let _e476: MultiVector = other_2143;
    let _e487: MultiVector = self_2399;
    let _e491: MultiVector = other_2143;
    let _e501: MultiVector = self_2399;
    let _e505: MultiVector = other_2143;
    let _e508: MultiVector = other_2143;
    let _e511: MultiVector = other_2143;
    let _e516: MultiVector = self_2399;
    let _e520: MultiVector = other_2143;
    let _e524: MultiVector = self_2399;
    let _e528: MultiVector = other_2143;
    let _e540: MultiVector = self_2399;
    let _e544: MultiVector = other_2143;
    let _e556: MultiVector = self_2399;
    let _e560: MultiVector = other_2143;
    let _e572: MultiVector = self_2399;
    let _e576: MultiVector = other_2143;
    let _e587: MultiVector = self_2399;
    let _e591: MultiVector = other_2143;
    let _e602: MultiVector = self_2399;
    let _e606: MultiVector = other_2143;
    let _e617: MultiVector = self_2399;
    let _e621: MultiVector = other_2143;
    let _e624: MultiVector = other_2143;
    let _e627: MultiVector = other_2143;
    let _e639: MultiVector = self_2399;
    let _e643: MultiVector = other_2143;
    let _e646: MultiVector = other_2143;
    let _e649: MultiVector = other_2143;
    let _e661: MultiVector = self_2399;
    let _e665: MultiVector = other_2143;
    let _e668: MultiVector = other_2143;
    let _e671: MultiVector = other_2143;
    let _e683: MultiVector = self_2399;
    let _e687: MultiVector = other_2143;
    let _e698: MultiVector = self_2399;
    let _e702: MultiVector = other_2143;
    let _e713: MultiVector = self_2399;
    let _e717: MultiVector = other_2143;
    let _e728: MultiVector = self_2399;
    let _e732: MultiVector = other_2143;
    let _e735: MultiVector = other_2143;
    let _e738: MultiVector = other_2143;
    let _e750: MultiVector = self_2399;
    let _e754: MultiVector = other_2143;
    let _e757: MultiVector = other_2143;
    let _e760: MultiVector = other_2143;
    let _e772: MultiVector = self_2399;
    let _e776: MultiVector = other_2143;
    let _e779: MultiVector = other_2143;
    let _e782: MultiVector = other_2143;
    let _e794: MultiVector = self_2399;
    let _e798: MultiVector = other_2143;
    let _e809: MultiVector = self_2399;
    let _e813: MultiVector = other_2143;
    let _e824: MultiVector = self_2399;
    let _e828: MultiVector = other_2143;
    let _e839: MultiVector = self_2399;
    let _e843: MultiVector = other_2143;
    let _e847: MultiVector = self_2399;
    let _e851: MultiVector = other_2143;
    let _e862: MultiVector = self_2399;
    let _e866: MultiVector = other_2143;
    let _e877: MultiVector = self_2399;
    let _e881: MultiVector = other_2143;
    let _e892: MultiVector = self_2399;
    let _e896: MultiVector = other_2143;
    let _e900: MultiVector = self_2399;
    let _e902: MultiVector = other_2143;
    let _e908: MultiVector = self_2399;
    let _e912: MultiVector = other_2143;
    let _e915: MultiVector = self_2399;
    let _e919: MultiVector = other_2143;
    let _e929: MultiVector = self_2399;
    let _e933: MultiVector = other_2143;
    let _e943: MultiVector = self_2399;
    let _e947: MultiVector = other_2143;
    let _e957: MultiVector = self_2399;
    let _e961: MultiVector = other_2143;
    let _e971: MultiVector = self_2399;
    let _e975: MultiVector = other_2143;
    let _e985: MultiVector = self_2399;
    let _e989: MultiVector = other_2143;
    let _e992: MultiVector = other_2143;
    let _e1003: MultiVector = self_2399;
    let _e1007: MultiVector = other_2143;
    let _e1018: MultiVector = self_2399;
    let _e1022: MultiVector = other_2143;
    let _e1033: MultiVector = self_2399;
    let _e1037: MultiVector = other_2143;
    let _e1048: MultiVector = self_2399;
    let _e1052: MultiVector = other_2143;
    let _e1055: MultiVector = other_2143;
    let _e1061: MultiVector = self_2399;
    let _e1065: MultiVector = other_2143;
    let _e1068: MultiVector = other_2143;
    let _e1074: MultiVector = self_2399;
    let _e1078: MultiVector = other_2143;
    let _e1081: MultiVector = other_2143;
    let _e1087: MultiVector = self_2399;
    let _e1091: MultiVector = other_2143;
    let _e1102: MultiVector = self_2399;
    let _e1106: MultiVector = other_2143;
    let _e1117: MultiVector = self_2399;
    let _e1121: MultiVector = other_2143;
    let _e1132: MultiVector = self_2399;
    let _e1136: MultiVector = other_2143;
    let _e1147: MultiVector = self_2399;
    let _e1151: MultiVector = other_2143;
    let _e1162: MultiVector = self_2399;
    let _e1166: MultiVector = other_2143;
    let _e1177: MultiVector = self_2399;
    let _e1181: MultiVector = other_2143;
    let _e1184: MultiVector = other_2143;
    let _e1195: MultiVector = self_2399;
    let _e1199: MultiVector = other_2143;
    let _e1202: MultiVector = other_2143;
    let _e1213: MultiVector = self_2399;
    let _e1217: MultiVector = other_2143;
    let _e1220: MultiVector = other_2143;
    let _e1231: MultiVector = self_2399;
    let _e1235: MultiVector = other_2143;
    let _e1246: MultiVector = self_2399;
    let _e1249: MultiVector = self_2399;
    let _e1253: MultiVector = other_2143;
    let _e1256: MultiVector = other_2143;
    let _e1266: MultiVector = self_2399;
    let _e1270: MultiVector = other_2143;
    let _e1273: MultiVector = self_2399;
    let _e1277: MultiVector = other_2143;
    let _e1289: MultiVector = self_2399;
    let _e1293: MultiVector = other_2143;
    let _e1305: MultiVector = self_2399;
    let _e1309: MultiVector = other_2143;
    let _e1321: MultiVector = self_2399;
    let _e1325: MultiVector = other_2143;
    let _e1337: MultiVector = self_2399;
    let _e1341: MultiVector = other_2143;
    let _e1353: MultiVector = self_2399;
    let _e1357: MultiVector = other_2143;
    let _e1369: MultiVector = self_2399;
    let _e1373: MultiVector = other_2143;
    let _e1376: MultiVector = other_2143;
    let _e1379: MultiVector = other_2143;
    let _e1382: MultiVector = other_2143;
    let _e1396: MultiVector = self_2399;
    let _e1400: MultiVector = other_2143;
    let _e1403: MultiVector = other_2143;
    let _e1406: MultiVector = other_2143;
    let _e1409: MultiVector = other_2143;
    let _e1423: MultiVector = self_2399;
    let _e1427: MultiVector = other_2143;
    let _e1430: MultiVector = other_2143;
    let _e1433: MultiVector = other_2143;
    let _e1436: MultiVector = other_2143;
    let _e1450: MultiVector = self_2399;
    let _e1454: MultiVector = other_2143;
    let _e1457: MultiVector = other_2143;
    let _e1460: MultiVector = other_2143;
    let _e1463: MultiVector = other_2143;
    let _e1475: MultiVector = self_2399;
    let _e1477: MultiVector = other_2143;
    let _e1483: MultiVector = self_2399;
    let _e1487: MultiVector = other_2143;
    let _e1490: MultiVector = self_2399;
    let _e1494: MultiVector = other_2143;
    let _e1498: MultiVector = self_2399;
    let _e1502: MultiVector = other_2143;
    let _e1513: MultiVector = self_2399;
    let _e1517: MultiVector = other_2143;
    let _e1528: MultiVector = self_2399;
    let _e1532: MultiVector = other_2143;
    let _e1543: MultiVector = self_2399;
    let _e1547: MultiVector = other_2143;
    let _e1550: MultiVector = other_2143;
    let _e1553: MultiVector = other_2143;
    let _e1565: MultiVector = self_2399;
    let _e1569: MultiVector = other_2143;
    let _e1572: MultiVector = other_2143;
    let _e1575: MultiVector = other_2143;
    let _e1587: MultiVector = self_2399;
    let _e1591: MultiVector = other_2143;
    let _e1594: MultiVector = other_2143;
    let _e1597: MultiVector = other_2143;
    let _e1609: MultiVector = self_2399;
    let _e1613: MultiVector = other_2143;
    let _e1616: MultiVector = other_2143;
    let _e1619: MultiVector = other_2143;
    let _e1631: MultiVector = self_2399;
    let _e1635: MultiVector = other_2143;
    let _e1638: MultiVector = other_2143;
    let _e1641: MultiVector = other_2143;
    let _e1653: MultiVector = self_2399;
    let _e1657: MultiVector = other_2143;
    let _e1660: MultiVector = other_2143;
    let _e1663: MultiVector = other_2143;
    let _e1675: MultiVector = self_2399;
    let _e1677: MultiVector = other_2143;
    let _e1683: MultiVector = self_2399;
    let _e1687: MultiVector = other_2143;
    let _e1690: MultiVector = self_2399;
    let _e1694: MultiVector = other_2143;
    let _e1698: MultiVector = self_2399;
    let _e1702: MultiVector = other_2143;
    let _e1713: MultiVector = self_2399;
    let _e1717: MultiVector = other_2143;
    let _e1728: MultiVector = self_2399;
    let _e1732: MultiVector = other_2143;
    let _e1743: MultiVector = self_2399;
    let _e1747: MultiVector = other_2143;
    let _e1758: MultiVector = self_2399;
    let _e1762: MultiVector = other_2143;
    let _e1773: MultiVector = self_2399;
    let _e1777: MultiVector = other_2143;
    let _e1788: MultiVector = self_2399;
    let _e1792: MultiVector = other_2143;
    let _e1795: MultiVector = other_2143;
    let _e1798: MultiVector = other_2143;
    let _e1804: MultiVector = self_2399;
    let _e1808: MultiVector = other_2143;
    let _e1820: MultiVector = self_2399;
    let _e1824: MultiVector = other_2143;
    let _e1836: MultiVector = self_2399;
    let _e1840: MultiVector = other_2143;
    let _e1852: MultiVector = self_2399;
    let _e1856: MultiVector = other_2143;
    let _e1859: MultiVector = other_2143;
    let _e1862: MultiVector = other_2143;
    let _e1868: MultiVector = self_2399;
    let _e1870: MultiVector = other_2143;
    let _e1876: MultiVector = self_2399;
    let _e1880: MultiVector = other_2143;
    let _e1883: MultiVector = self_2399;
    let _e1887: MultiVector = other_2143;
    let _e1890: MultiVector = other_2143;
    let _e1893: MultiVector = other_2143;
    let _e1905: MultiVector = self_2399;
    let _e1909: MultiVector = other_2143;
    let _e1912: MultiVector = other_2143;
    let _e1915: MultiVector = other_2143;
    let _e1927: MultiVector = self_2399;
    let _e1931: MultiVector = other_2143;
    let _e1934: MultiVector = other_2143;
    let _e1937: MultiVector = other_2143;
    let _e1949: MultiVector = self_2399;
    let _e1951: MultiVector = other_2143;
    let _e1957: MultiVector = self_2399;
    let _e1961: MultiVector = other_2143;
    let _e1964: MultiVector = self_2399;
    let _e1968: MultiVector = other_2143;
    let _e1979: MultiVector = self_2399;
    let _e1983: MultiVector = other_2143;
    let _e1994: MultiVector = self_2399;
    let _e1998: MultiVector = other_2143;
    let _e2009: MultiVector = self_2399;
    let _e2013: MultiVector = other_2143;
    let _e2016: MultiVector = other_2143;
    let _e2019: MultiVector = other_2143;
    let _e2025: MultiVector = self_2399;
    let _e2027: MultiVector = other_2143;
    let _e2033: MultiVector = self_2399;
    let _e2037: MultiVector = other_2143;
    let _e2040: MultiVector = self_2399;
    let _e2044: MultiVector = other_2143;
    let _e2048: MultiVector = self_2399;
    let _e2052: MultiVector = other_2143;
    let _e2065: MultiVector = self_2399;
    let _e2069: MultiVector = other_2143;
    let _e2082: MultiVector = self_2399;
    let _e2086: MultiVector = other_2143;
    let _e2099: MultiVector = self_2399;
    let _e2103: MultiVector = other_2143;
    let _e2116: MultiVector = self_2399;
    let _e2118: MultiVector = other_2143;
    let _e2124: MultiVector = self_2399;
    let _e2128: MultiVector = other_2143;
    let _e2131: MultiVector = self_2399;
    let _e2133: MultiVector = other_2143;
    return MultiVector((((((((((((((((((((((((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g2_.y, _e11.g0_.z, _e14.g2_.y)) * vec3<f32>(1.0, 1.0, 0.0)) + (vec3<f32>(_e24.g0_.z) * _e28.g0_)) + ((vec3<f32>(_e32.g1_.x) * vec3<f32>(_e36.g9_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e47.g1_.y) * vec3<f32>(_e51.g9_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e62.g1_.z) * vec3<f32>(_e66.g9_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e77.g2_.x) * vec3<f32>(_e81.g9_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e92.g2_.y) * vec3<f32>(_e96.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e107.g3_.x) * vec3<f32>(_e111.g8_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e123.g3_.y) * vec3<f32>(_e127.g8_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e139.g3_.z) * vec3<f32>(_e143.g8_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e155.g3_.w) * vec3<f32>(_e159.g8_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e171.g4_.x) * vec3<f32>(_e175.g7_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e187.g4_.y) * vec3<f32>(_e191.g7_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e203.g4_.z) * vec3<f32>(_e207.g7_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e219.g5_.x) * vec3<f32>(_e223.g6_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e235.g5_.y) * vec3<f32>(_e239.g6_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e251.g5_.z) * vec3<f32>(_e255.g6_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e267.g6_.x) * vec3<f32>(_e271.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e283.g6_.y) * vec3<f32>(_e287.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e299.g6_.z) * vec3<f32>(_e303.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e315.g7_.x) * vec3<f32>(_e319.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e331.g7_.y) * vec3<f32>(_e335.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e347.g7_.z) * vec3<f32>(_e351.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e363.g8_.x) * vec3<f32>(_e367.g3_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e379.g8_.y) * vec3<f32>(_e383.g3_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e395.g8_.z) * vec3<f32>(_e399.g3_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e411.g8_.w) * vec3<f32>(_e415.g3_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e427.g9_.x) * vec3<f32>(_e431.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e442.g9_.y) * vec3<f32>(_e446.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e457.g9_.z) * vec3<f32>(_e461.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e472.g9_.w) * vec3<f32>(_e476.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e487.g0_.x) * _e491.g0_.zxx) * vec3<f32>(1.0, 0.0, 0.0))), ((((((((((((((((((((((((((vec3<f32>(_e501.g0_.y) * vec3<f32>(_e505.g3_.x, _e508.g3_.y, _e511.g3_.z)) + (vec3<f32>(_e516.g0_.z) * _e520.g1_)) + ((vec3<f32>(_e524.g3_.x) * vec3<f32>(_e528.g0_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e540.g3_.y) * vec3<f32>(_e544.g0_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e556.g3_.z) * vec3<f32>(_e560.g0_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e572.g4_.x) * vec3<f32>(_e576.g9_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e587.g4_.y) * vec3<f32>(_e591.g9_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e602.g4_.z) * vec3<f32>(_e606.g9_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e617.g5_.x) * vec3<f32>(_e621.g9_.z, _e624.g9_.z, _e627.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e639.g5_.y) * vec3<f32>(_e643.g9_.z, _e646.g9_.z, _e649.g9_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e661.g5_.z) * vec3<f32>(_e665.g9_.y, _e668.g9_.x, _e671.g9_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e683.g6_.x) * vec3<f32>(_e687.g8_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e698.g6_.y) * vec3<f32>(_e702.g8_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e713.g6_.z) * vec3<f32>(_e717.g8_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e728.g7_.x) * vec3<f32>(_e732.g8_.z, _e735.g8_.z, _e738.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e750.g7_.y) * vec3<f32>(_e754.g8_.z, _e757.g8_.z, _e760.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e772.g7_.z) * vec3<f32>(_e776.g8_.y, _e779.g8_.x, _e782.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e794.g8_.x) * _e798.g7_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e809.g8_.y) * _e813.g7_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e824.g8_.z) * _e828.g7_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e839.g8_.w) * _e843.g6_)) + ((vec3<f32>(_e847.g9_.x) * _e851.g5_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e862.g9_.y) * _e866.g5_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e877.g9_.z) * _e881.g5_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e892.g9_.w) * _e896.g4_)) + (_e900.g1_ * vec3<f32>(_e902.g0_.z))), ((((((((((((((((((((((((vec2<f32>(_e908.g0_.z) * _e912.g2_) + ((vec2<f32>(_e915.g2_.x) * vec2<f32>(_e919.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e929.g2_.y) * vec2<f32>(_e933.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e943.g3_.x) * vec2<f32>(_e947.g9_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e957.g3_.y) * vec2<f32>(_e961.g9_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e971.g3_.z) * vec2<f32>(_e975.g9_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e985.g3_.w) * vec2<f32>(_e989.g0_.y, _e992.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e1003.g4_.x) * vec2<f32>(_e1007.g9_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1018.g4_.y) * vec2<f32>(_e1022.g9_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1033.g4_.z) * vec2<f32>(_e1037.g9_.z)) * vec2<f32>(-(1.0), 0.0))) - (vec2<f32>(_e1048.g6_.x) * vec2<f32>(_e1052.g8_.x, _e1055.g7_.x))) - (vec2<f32>(_e1061.g6_.y) * vec2<f32>(_e1065.g8_.y, _e1068.g7_.y))) - (vec2<f32>(_e1074.g6_.z) * vec2<f32>(_e1078.g8_.z, _e1081.g7_.z))) + ((vec2<f32>(_e1087.g7_.x) * vec2<f32>(_e1091.g6_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1102.g7_.y) * vec2<f32>(_e1106.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1117.g7_.z) * vec2<f32>(_e1121.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1132.g8_.x) * vec2<f32>(_e1136.g6_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1147.g8_.y) * vec2<f32>(_e1151.g6_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1162.g8_.z) * vec2<f32>(_e1166.g6_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1177.g9_.x) * vec2<f32>(_e1181.g4_.x, _e1184.g3_.x)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1195.g9_.y) * vec2<f32>(_e1199.g4_.y, _e1202.g3_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1213.g9_.z) * vec2<f32>(_e1217.g4_.z, _e1220.g3_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1231.g9_.w) * vec2<f32>(_e1235.g3_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1246.g0_.y, _e1249.g0_.x) * vec2<f32>(_e1253.g3_.w, _e1256.g3_.x)) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4<f32>(_e1266.g0_.z) * _e1270.g3_) + ((vec4<f32>(_e1273.g6_.x) * _e1277.g9_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1289.g6_.y) * _e1293.g9_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1305.g6_.z) * _e1309.g9_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1321.g7_.x) * _e1325.g9_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1337.g7_.y) * _e1341.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1353.g7_.z) * _e1357.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1369.g9_.x) * vec4<f32>(_e1373.g7_.z, _e1376.g7_.z, _e1379.g7_.y, _e1382.g6_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1396.g9_.y) * vec4<f32>(_e1400.g7_.z, _e1403.g7_.z, _e1406.g7_.x, _e1409.g6_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1423.g9_.z) * vec4<f32>(_e1427.g7_.y, _e1430.g7_.x, _e1433.g7_.y, _e1436.g6_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1450.g9_.w) * vec4<f32>(_e1454.g6_.x, _e1457.g6_.y, _e1460.g6_.z, _e1463.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e1475.g3_ * vec4<f32>(_e1477.g0_.z))), ((((((((((((vec3<f32>(_e1483.g0_.y) * _e1487.g6_) + (vec3<f32>(_e1490.g0_.z) * _e1494.g4_)) + ((vec3<f32>(_e1498.g6_.x) * vec3<f32>(_e1502.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1513.g6_.y) * vec3<f32>(_e1517.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1528.g6_.z) * vec3<f32>(_e1532.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1543.g8_.x) * vec3<f32>(_e1547.g9_.z, _e1550.g9_.z, _e1553.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1565.g8_.y) * vec3<f32>(_e1569.g9_.z, _e1572.g9_.z, _e1575.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1587.g8_.z) * vec3<f32>(_e1591.g9_.y, _e1594.g9_.x, _e1597.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e1609.g9_.x) * vec3<f32>(_e1613.g8_.z, _e1616.g8_.z, _e1619.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1631.g9_.y) * vec3<f32>(_e1635.g8_.z, _e1638.g8_.z, _e1641.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1653.g9_.z) * vec3<f32>(_e1657.g8_.y, _e1660.g8_.x, _e1663.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e1675.g4_ * vec3<f32>(_e1677.g0_.z))), ((((((((((((((vec3<f32>(_e1683.g0_.y) * _e1687.g7_) + (vec3<f32>(_e1690.g0_.z) * _e1694.g5_)) + ((vec3<f32>(_e1698.g7_.x) * vec3<f32>(_e1702.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1713.g7_.y) * vec3<f32>(_e1717.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1728.g7_.z) * vec3<f32>(_e1732.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1743.g8_.x) * vec3<f32>(_e1747.g9_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1758.g8_.y) * vec3<f32>(_e1762.g9_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1773.g8_.z) * vec3<f32>(_e1777.g9_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e1788.g8_.w) * vec3<f32>(_e1792.g9_.x, _e1795.g9_.y, _e1798.g9_.z))) + ((vec3<f32>(_e1804.g9_.x) * vec3<f32>(_e1808.g8_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e1820.g9_.y) * vec3<f32>(_e1824.g8_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e1836.g9_.z) * vec3<f32>(_e1840.g8_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (vec3<f32>(_e1852.g9_.w) * vec3<f32>(_e1856.g8_.x, _e1859.g8_.y, _e1862.g8_.z))) + (_e1868.g5_ * vec3<f32>(_e1870.g0_.z))), (((((vec3<f32>(_e1876.g0_.z) * _e1880.g6_) + ((vec3<f32>(_e1883.g9_.x) * vec3<f32>(_e1887.g9_.z, _e1890.g9_.z, _e1893.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1905.g9_.y) * vec3<f32>(_e1909.g9_.z, _e1912.g9_.z, _e1915.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1927.g9_.z) * vec3<f32>(_e1931.g9_.y, _e1934.g9_.x, _e1937.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e1949.g6_ * vec3<f32>(_e1951.g0_.z))), ((((((vec3<f32>(_e1957.g0_.z) * _e1961.g7_) + ((vec3<f32>(_e1964.g9_.x) * vec3<f32>(_e1968.g9_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1979.g9_.y) * vec3<f32>(_e1983.g9_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1994.g9_.z) * vec3<f32>(_e1998.g9_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e2009.g9_.w) * vec3<f32>(_e2013.g9_.x, _e2016.g9_.y, _e2019.g9_.z))) + (_e2025.g7_ * vec3<f32>(_e2027.g0_.z))), (((((((vec4<f32>(_e2033.g0_.y) * _e2037.g9_) + (vec4<f32>(_e2040.g0_.z) * _e2044.g8_)) + ((vec4<f32>(_e2048.g9_.x) * vec4<f32>(_e2052.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e2065.g9_.y) * vec4<f32>(_e2069.g0_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e2082.g9_.z) * vec4<f32>(_e2086.g0_.y)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e2099.g9_.w) * vec4<f32>(_e2103.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (_e2116.g8_ * vec4<f32>(_e2118.g0_.z))), ((vec4<f32>(_e2124.g0_.z) * _e2128.g9_) + (_e2131.g9_ * vec4<f32>(_e2133.g0_.z))));
}

fn multi_vector_multi_vector_outer_product(self_2400: MultiVector, other_2144: MultiVector) -> MultiVector {
    var self_2401: MultiVector;
    var other_2145: MultiVector;

    self_2401 = self_2400;
    other_2145 = other_2144;
    let _e4: MultiVector = self_2401;
    let _e8: MultiVector = other_2145;
    let _e11: MultiVector = self_2401;
    let _e15: MultiVector = other_2145;
    let _e26: MultiVector = self_2401;
    let _e30: MultiVector = other_2145;
    let _e33: MultiVector = other_2145;
    let _e36: MultiVector = other_2145;
    let _e47: MultiVector = self_2401;
    let _e51: MultiVector = other_2145;
    let _e54: MultiVector = other_2145;
    let _e57: MultiVector = other_2145;
    let _e68: MultiVector = self_2401;
    let _e72: MultiVector = other_2145;
    let _e75: MultiVector = other_2145;
    let _e78: MultiVector = other_2145;
    let _e89: MultiVector = self_2401;
    let _e93: MultiVector = other_2145;
    let _e96: MultiVector = other_2145;
    let _e99: MultiVector = other_2145;
    let _e110: MultiVector = self_2401;
    let _e114: MultiVector = other_2145;
    let _e125: MultiVector = self_2401;
    let _e129: MultiVector = other_2145;
    let _e141: MultiVector = self_2401;
    let _e145: MultiVector = other_2145;
    let _e157: MultiVector = self_2401;
    let _e161: MultiVector = other_2145;
    let _e173: MultiVector = self_2401;
    let _e177: MultiVector = other_2145;
    let _e189: MultiVector = self_2401;
    let _e193: MultiVector = other_2145;
    let _e196: MultiVector = other_2145;
    let _e199: MultiVector = other_2145;
    let _e212: MultiVector = self_2401;
    let _e216: MultiVector = other_2145;
    let _e219: MultiVector = other_2145;
    let _e222: MultiVector = other_2145;
    let _e235: MultiVector = self_2401;
    let _e239: MultiVector = other_2145;
    let _e242: MultiVector = other_2145;
    let _e245: MultiVector = other_2145;
    let _e258: MultiVector = self_2401;
    let _e262: MultiVector = other_2145;
    let _e265: MultiVector = other_2145;
    let _e268: MultiVector = other_2145;
    let _e281: MultiVector = self_2401;
    let _e285: MultiVector = other_2145;
    let _e288: MultiVector = other_2145;
    let _e291: MultiVector = other_2145;
    let _e304: MultiVector = self_2401;
    let _e308: MultiVector = other_2145;
    let _e311: MultiVector = other_2145;
    let _e314: MultiVector = other_2145;
    let _e327: MultiVector = self_2401;
    let _e331: MultiVector = other_2145;
    let _e343: MultiVector = self_2401;
    let _e347: MultiVector = other_2145;
    let _e359: MultiVector = self_2401;
    let _e363: MultiVector = other_2145;
    let _e375: MultiVector = self_2401;
    let _e379: MultiVector = other_2145;
    let _e391: MultiVector = self_2401;
    let _e395: MultiVector = other_2145;
    let _e407: MultiVector = self_2401;
    let _e411: MultiVector = other_2145;
    let _e423: MultiVector = self_2401;
    let _e427: MultiVector = other_2145;
    let _e430: MultiVector = other_2145;
    let _e433: MultiVector = other_2145;
    let _e446: MultiVector = self_2401;
    let _e450: MultiVector = other_2145;
    let _e453: MultiVector = other_2145;
    let _e456: MultiVector = other_2145;
    let _e469: MultiVector = self_2401;
    let _e473: MultiVector = other_2145;
    let _e476: MultiVector = other_2145;
    let _e479: MultiVector = other_2145;
    let _e492: MultiVector = self_2401;
    let _e496: MultiVector = other_2145;
    let _e499: MultiVector = other_2145;
    let _e502: MultiVector = other_2145;
    let _e515: MultiVector = self_2401;
    let _e519: MultiVector = other_2145;
    let _e530: MultiVector = self_2401;
    let _e534: MultiVector = other_2145;
    let _e545: MultiVector = self_2401;
    let _e549: MultiVector = other_2145;
    let _e560: MultiVector = self_2401;
    let _e564: MultiVector = other_2145;
    let _e575: MultiVector = self_2401;
    let _e578: MultiVector = other_2145;
    let _e581: MultiVector = other_2145;
    let _e584: MultiVector = other_2145;
    let _e595: MultiVector = self_2401;
    let _e599: MultiVector = other_2145;
    let _e602: MultiVector = self_2401;
    let _e604: MultiVector = other_2145;
    let _e610: MultiVector = self_2401;
    let _e614: MultiVector = other_2145;
    let _e617: MultiVector = self_2401;
    let _e619: MultiVector = other_2145;
    let _e625: MultiVector = self_2401;
    let _e629: MultiVector = other_2145;
    let _e632: MultiVector = self_2401;
    let _e636: MultiVector = other_2145;
    let _e648: MultiVector = self_2401;
    let _e652: MultiVector = other_2145;
    let _e655: MultiVector = other_2145;
    let _e658: MultiVector = other_2145;
    let _e661: MultiVector = other_2145;
    let _e667: MultiVector = self_2401;
    let _e671: MultiVector = other_2145;
    let _e683: MultiVector = self_2401;
    let _e687: MultiVector = other_2145;
    let _e699: MultiVector = self_2401;
    let _e703: MultiVector = other_2145;
    let _e715: MultiVector = self_2401;
    let _e719: MultiVector = other_2145;
    let _e731: MultiVector = self_2401;
    let _e734: MultiVector = self_2401;
    let _e737: MultiVector = self_2401;
    let _e740: MultiVector = self_2401;
    let _e744: MultiVector = other_2145;
    let _e747: MultiVector = other_2145;
    let _e750: MultiVector = other_2145;
    let _e753: MultiVector = other_2145;
    let _e765: MultiVector = self_2401;
    let _e769: MultiVector = other_2145;
    let _e772: MultiVector = self_2401;
    let _e776: MultiVector = other_2145;
    let _e780: MultiVector = self_2401;
    let _e784: MultiVector = other_2145;
    let _e795: MultiVector = self_2401;
    let _e799: MultiVector = other_2145;
    let _e810: MultiVector = self_2401;
    let _e814: MultiVector = other_2145;
    let _e825: MultiVector = self_2401;
    let _e827: MultiVector = other_2145;
    let _e837: MultiVector = self_2401;
    let _e841: MultiVector = other_2145;
    let _e844: MultiVector = self_2401;
    let _e848: MultiVector = other_2145;
    let _e859: MultiVector = self_2401;
    let _e863: MultiVector = other_2145;
    let _e874: MultiVector = self_2401;
    let _e878: MultiVector = other_2145;
    let _e889: MultiVector = self_2401;
    let _e893: MultiVector = other_2145;
    let _e904: MultiVector = self_2401;
    let _e907: MultiVector = self_2401;
    let _e910: MultiVector = self_2401;
    let _e914: MultiVector = other_2145;
    let _e917: MultiVector = other_2145;
    let _e920: MultiVector = other_2145;
    let _e932: MultiVector = self_2401;
    let _e936: MultiVector = other_2145;
    let _e939: MultiVector = self_2401;
    let _e943: MultiVector = other_2145;
    let _e946: MultiVector = other_2145;
    let _e949: MultiVector = other_2145;
    let _e955: MultiVector = self_2401;
    let _e959: MultiVector = other_2145;
    let _e963: MultiVector = self_2401;
    let _e967: MultiVector = other_2145;
    let _e978: MultiVector = self_2401;
    let _e982: MultiVector = other_2145;
    let _e993: MultiVector = self_2401;
    let _e997: MultiVector = other_2145;
    let _e1008: MultiVector = self_2401;
    let _e1012: MultiVector = other_2145;
    let _e1016: MultiVector = self_2401;
    let _e1020: MultiVector = other_2145;
    let _e1031: MultiVector = self_2401;
    let _e1035: MultiVector = other_2145;
    let _e1046: MultiVector = self_2401;
    let _e1050: MultiVector = other_2145;
    let _e1061: MultiVector = self_2401;
    let _e1065: MultiVector = other_2145;
    let _e1076: MultiVector = self_2401;
    let _e1080: MultiVector = other_2145;
    let _e1091: MultiVector = self_2401;
    let _e1095: MultiVector = other_2145;
    let _e1106: MultiVector = self_2401;
    let _e1108: MultiVector = other_2145;
    let _e1118: MultiVector = self_2401;
    let _e1122: MultiVector = other_2145;
    let _e1125: MultiVector = self_2401;
    let _e1129: MultiVector = other_2145;
    let _e1132: MultiVector = other_2145;
    let _e1135: MultiVector = other_2145;
    let _e1147: MultiVector = self_2401;
    let _e1151: MultiVector = other_2145;
    let _e1154: MultiVector = other_2145;
    let _e1157: MultiVector = other_2145;
    let _e1169: MultiVector = self_2401;
    let _e1173: MultiVector = other_2145;
    let _e1177: MultiVector = self_2401;
    let _e1181: MultiVector = other_2145;
    let _e1192: MultiVector = self_2401;
    let _e1196: MultiVector = other_2145;
    let _e1207: MultiVector = self_2401;
    let _e1211: MultiVector = other_2145;
    let _e1222: MultiVector = self_2401;
    let _e1226: MultiVector = other_2145;
    let _e1237: MultiVector = self_2401;
    let _e1241: MultiVector = other_2145;
    let _e1252: MultiVector = self_2401;
    let _e1256: MultiVector = other_2145;
    let _e1267: MultiVector = self_2401;
    let _e1271: MultiVector = other_2145;
    let _e1282: MultiVector = self_2401;
    let _e1286: MultiVector = other_2145;
    let _e1297: MultiVector = self_2401;
    let _e1301: MultiVector = other_2145;
    let _e1312: MultiVector = self_2401;
    let _e1316: MultiVector = other_2145;
    let _e1319: MultiVector = other_2145;
    let _e1322: MultiVector = other_2145;
    let _e1334: MultiVector = self_2401;
    let _e1338: MultiVector = other_2145;
    let _e1341: MultiVector = self_2401;
    let _e1345: MultiVector = other_2145;
    let _e1348: MultiVector = other_2145;
    let _e1351: MultiVector = other_2145;
    let _e1354: MultiVector = other_2145;
    let _e1368: MultiVector = self_2401;
    let _e1372: MultiVector = other_2145;
    let _e1375: MultiVector = other_2145;
    let _e1378: MultiVector = other_2145;
    let _e1381: MultiVector = other_2145;
    let _e1395: MultiVector = self_2401;
    let _e1399: MultiVector = other_2145;
    let _e1402: MultiVector = other_2145;
    let _e1405: MultiVector = other_2145;
    let _e1408: MultiVector = other_2145;
    let _e1420: MultiVector = self_2401;
    let _e1424: MultiVector = other_2145;
    let _e1427: MultiVector = other_2145;
    let _e1430: MultiVector = other_2145;
    let _e1433: MultiVector = other_2145;
    let _e1446: MultiVector = self_2401;
    let _e1450: MultiVector = other_2145;
    let _e1453: MultiVector = other_2145;
    let _e1456: MultiVector = other_2145;
    let _e1459: MultiVector = other_2145;
    let _e1472: MultiVector = self_2401;
    let _e1476: MultiVector = other_2145;
    let _e1479: MultiVector = other_2145;
    let _e1482: MultiVector = other_2145;
    let _e1485: MultiVector = other_2145;
    let _e1498: MultiVector = self_2401;
    let _e1502: MultiVector = other_2145;
    let _e1505: MultiVector = other_2145;
    let _e1508: MultiVector = other_2145;
    let _e1511: MultiVector = other_2145;
    let _e1524: MultiVector = self_2401;
    let _e1528: MultiVector = other_2145;
    let _e1531: MultiVector = other_2145;
    let _e1534: MultiVector = other_2145;
    let _e1537: MultiVector = other_2145;
    let _e1550: MultiVector = self_2401;
    let _e1554: MultiVector = other_2145;
    let _e1557: MultiVector = other_2145;
    let _e1560: MultiVector = other_2145;
    let _e1563: MultiVector = other_2145;
    let _e1576: MultiVector = self_2401;
    let _e1580: MultiVector = other_2145;
    let _e1592: MultiVector = self_2401;
    let _e1596: MultiVector = other_2145;
    let _e1608: MultiVector = self_2401;
    let _e1612: MultiVector = other_2145;
    let _e1624: MultiVector = self_2401;
    let _e1628: MultiVector = other_2145;
    let _e1640: MultiVector = self_2401;
    let _e1644: MultiVector = other_2145;
    let _e1647: MultiVector = other_2145;
    let _e1650: MultiVector = other_2145;
    let _e1653: MultiVector = other_2145;
    let _e1667: MultiVector = self_2401;
    let _e1671: MultiVector = other_2145;
    let _e1674: MultiVector = self_2401;
    let _e1678: MultiVector = other_2145;
    let _e1681: MultiVector = other_2145;
    let _e1684: MultiVector = other_2145;
    let _e1687: MultiVector = other_2145;
    let _e1701: MultiVector = self_2401;
    let _e1705: MultiVector = other_2145;
    let _e1708: MultiVector = other_2145;
    let _e1711: MultiVector = other_2145;
    let _e1714: MultiVector = other_2145;
    let _e1728: MultiVector = self_2401;
    let _e1732: MultiVector = other_2145;
    let _e1735: MultiVector = other_2145;
    let _e1738: MultiVector = other_2145;
    let _e1741: MultiVector = other_2145;
    let _e1753: MultiVector = self_2401;
    let _e1757: MultiVector = other_2145;
    let _e1761: MultiVector = self_2401;
    let _e1765: MultiVector = other_2145;
    let _e1768: MultiVector = other_2145;
    let _e1771: MultiVector = other_2145;
    let _e1774: MultiVector = other_2145;
    let _e1788: MultiVector = self_2401;
    let _e1792: MultiVector = other_2145;
    let _e1795: MultiVector = other_2145;
    let _e1798: MultiVector = other_2145;
    let _e1801: MultiVector = other_2145;
    let _e1815: MultiVector = self_2401;
    let _e1819: MultiVector = other_2145;
    let _e1822: MultiVector = other_2145;
    let _e1825: MultiVector = other_2145;
    let _e1828: MultiVector = other_2145;
    let _e1842: MultiVector = self_2401;
    let _e1846: MultiVector = other_2145;
    let _e1849: MultiVector = other_2145;
    let _e1852: MultiVector = other_2145;
    let _e1855: MultiVector = other_2145;
    let _e1867: MultiVector = self_2401;
    let _e1871: MultiVector = other_2145;
    let _e1883: MultiVector = self_2401;
    let _e1887: MultiVector = other_2145;
    let _e1899: MultiVector = self_2401;
    let _e1903: MultiVector = other_2145;
    let _e1915: MultiVector = self_2401;
    let _e1919: MultiVector = other_2145;
    let _e1931: MultiVector = self_2401;
    let _e1935: MultiVector = other_2145;
    let _e1947: MultiVector = self_2401;
    let _e1951: MultiVector = other_2145;
    let _e1963: MultiVector = self_2401;
    let _e1967: MultiVector = other_2145;
    let _e1970: MultiVector = other_2145;
    let _e1973: MultiVector = other_2145;
    let _e1976: MultiVector = other_2145;
    let _e1989: MultiVector = self_2401;
    let _e1993: MultiVector = other_2145;
    let _e1996: MultiVector = other_2145;
    let _e1999: MultiVector = other_2145;
    let _e2002: MultiVector = other_2145;
    let _e2015: MultiVector = self_2401;
    let _e2019: MultiVector = other_2145;
    let _e2022: MultiVector = other_2145;
    let _e2025: MultiVector = other_2145;
    let _e2028: MultiVector = other_2145;
    let _e2041: MultiVector = self_2401;
    let _e2045: MultiVector = other_2145;
    let _e2048: MultiVector = other_2145;
    let _e2051: MultiVector = other_2145;
    let _e2054: MultiVector = other_2145;
    let _e2067: MultiVector = self_2401;
    let _e2071: MultiVector = other_2145;
    let _e2074: MultiVector = other_2145;
    let _e2077: MultiVector = other_2145;
    let _e2080: MultiVector = other_2145;
    let _e2093: MultiVector = self_2401;
    let _e2097: MultiVector = other_2145;
    let _e2100: MultiVector = other_2145;
    let _e2103: MultiVector = other_2145;
    let _e2106: MultiVector = other_2145;
    let _e2119: MultiVector = self_2401;
    let _e2123: MultiVector = other_2145;
    let _e2135: MultiVector = self_2401;
    let _e2139: MultiVector = other_2145;
    let _e2151: MultiVector = self_2401;
    let _e2155: MultiVector = other_2145;
    let _e2167: MultiVector = self_2401;
    let _e2171: MultiVector = other_2145;
    let _e2183: MultiVector = self_2401;
    let _e2187: MultiVector = other_2145;
    let _e2199: MultiVector = self_2401;
    let _e2203: MultiVector = other_2145;
    let _e2215: MultiVector = self_2401;
    let _e2219: MultiVector = other_2145;
    let _e2231: MultiVector = self_2401;
    let _e2235: MultiVector = other_2145;
    let _e2247: MultiVector = self_2401;
    let _e2251: MultiVector = other_2145;
    let _e2254: MultiVector = other_2145;
    let _e2257: MultiVector = other_2145;
    let _e2260: MultiVector = other_2145;
    return MultiVector(((((((((((((((((((((((((((((((((vec3<f32>(_e4.g0_.x) * _e8.g0_) + ((vec3<f32>(_e11.g0_.z) * vec3<f32>(_e15.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e26.g1_.x) * vec3<f32>(_e30.g8_.x, _e33.g8_.x, _e36.g9_.x)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e47.g1_.y) * vec3<f32>(_e51.g8_.y, _e54.g8_.y, _e57.g9_.y)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e68.g1_.z) * vec3<f32>(_e72.g8_.z, _e75.g8_.z, _e78.g9_.z)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e89.g2_.x) * vec3<f32>(_e93.g8_.w, _e96.g8_.w, _e99.g9_.w)) * vec3<f32>(0.0, 1.0, 1.0))) + ((vec3<f32>(_e110.g2_.y) * vec3<f32>(_e114.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e125.g3_.x) * vec3<f32>(_e129.g8_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e141.g3_.y) * vec3<f32>(_e145.g8_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e157.g3_.z) * vec3<f32>(_e161.g8_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e173.g3_.w) * vec3<f32>(_e177.g8_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e189.g4_.x) * vec3<f32>(_e193.g5_.x, _e196.g5_.x, _e199.g7_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e212.g4_.y) * vec3<f32>(_e216.g5_.y, _e219.g5_.y, _e222.g7_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e235.g4_.z) * vec3<f32>(_e239.g5_.z, _e242.g5_.z, _e245.g7_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e258.g5_.x) * vec3<f32>(_e262.g4_.x, _e265.g4_.x, _e268.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e281.g5_.y) * vec3<f32>(_e285.g4_.y, _e288.g4_.y, _e291.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e304.g5_.z) * vec3<f32>(_e308.g4_.z, _e311.g4_.z, _e314.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e327.g6_.x) * vec3<f32>(_e331.g5_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e343.g6_.y) * vec3<f32>(_e347.g5_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e359.g6_.z) * vec3<f32>(_e363.g5_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e375.g7_.x) * vec3<f32>(_e379.g4_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e391.g7_.y) * vec3<f32>(_e395.g4_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e407.g7_.z) * vec3<f32>(_e411.g4_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e423.g8_.x) * vec3<f32>(_e427.g1_.x, _e430.g1_.x, _e433.g3_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e446.g8_.y) * vec3<f32>(_e450.g1_.y, _e453.g1_.y, _e456.g3_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e469.g8_.z) * vec3<f32>(_e473.g1_.z, _e476.g1_.z, _e479.g3_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e492.g8_.w) * vec3<f32>(_e496.g2_.x, _e499.g2_.x, _e502.g3_.w)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e515.g9_.x) * vec3<f32>(_e519.g1_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e530.g9_.y) * vec3<f32>(_e534.g1_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e545.g9_.z) * vec3<f32>(_e549.g1_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e560.g9_.w) * vec3<f32>(_e564.g2_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e575.g0_.xyy * vec3<f32>(_e578.g0_.x, _e581.g0_.x, _e584.g2_.y)) * vec3<f32>(0.0, 1.0, 1.0))), ((vec3<f32>(_e595.g0_.x) * _e599.g1_) + (_e602.g1_ * vec3<f32>(_e604.g0_.x))), ((vec2<f32>(_e610.g0_.x) * _e614.g2_) + (_e617.g2_ * vec2<f32>(_e619.g0_.x))), ((((((((vec4<f32>(_e625.g0_.x) * _e629.g3_) + ((vec4<f32>(_e632.g2_.x) * vec4<f32>(_e636.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) - (vec4<f32>(_e648.g2_.y) * vec4<f32>(_e652.g1_.x, _e655.g1_.y, _e658.g1_.z, _e661.g2_.x))) + ((vec4<f32>(_e667.g3_.x) * vec4<f32>(_e671.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e683.g3_.y) * vec4<f32>(_e687.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e699.g3_.z) * vec4<f32>(_e703.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e715.g3_.w) * vec4<f32>(_e719.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e731.g1_.x, _e734.g1_.y, _e737.g1_.z, _e740.g1_.x) * vec4<f32>(_e744.g2_.y, _e747.g2_.y, _e750.g2_.y, _e753.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((vec3<f32>(_e765.g0_.x) * _e769.g4_) + (vec3<f32>(_e772.g2_.x) * _e776.g1_)) + ((vec3<f32>(_e780.g4_.x) * vec3<f32>(_e784.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e795.g4_.y) * vec3<f32>(_e799.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e810.g4_.z) * vec3<f32>(_e814.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e825.g1_ * vec3<f32>(_e827.g2_.x)) * vec3<f32>(-(1.0)))), ((((((vec3<f32>(_e837.g0_.x) * _e841.g5_) + ((vec3<f32>(_e844.g1_.y) * _e848.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e859.g1_.z) * _e863.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e874.g5_.y) * vec3<f32>(_e878.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e889.g5_.z) * vec3<f32>(_e893.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e904.g5_.x, _e907.g1_.x, _e910.g1_.x) * vec3<f32>(_e914.g0_.x, _e917.g1_.z, _e920.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((((((((((((vec3<f32>(_e932.g0_.x) * _e936.g6_) + (vec3<f32>(_e939.g2_.x) * vec3<f32>(_e943.g3_.x, _e946.g3_.y, _e949.g3_.z))) + (vec3<f32>(_e955.g2_.y) * _e959.g4_)) + ((vec3<f32>(_e963.g3_.x) * vec3<f32>(_e967.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e978.g3_.y) * vec3<f32>(_e982.g2_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e993.g3_.z) * vec3<f32>(_e997.g2_.x)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e1008.g3_.w) * _e1012.g1_)) + ((vec3<f32>(_e1016.g4_.x) * vec3<f32>(_e1020.g2_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1031.g4_.y) * vec3<f32>(_e1035.g2_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1046.g4_.z) * vec3<f32>(_e1050.g2_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1061.g6_.x) * vec3<f32>(_e1065.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1076.g6_.y) * vec3<f32>(_e1080.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1091.g6_.z) * vec3<f32>(_e1095.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((_e1106.g1_ * vec3<f32>(_e1108.g3_.w)) * vec3<f32>(-(1.0)))), ((((((((((((((vec3<f32>(_e1118.g0_.x) * _e1122.g7_) + ((vec3<f32>(_e1125.g1_.y) * vec3<f32>(_e1129.g3_.z, _e1132.g3_.z, _e1135.g3_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1147.g1_.z) * vec3<f32>(_e1151.g3_.y, _e1154.g3_.x, _e1157.g3_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (vec3<f32>(_e1169.g2_.y) * _e1173.g5_)) + ((vec3<f32>(_e1177.g3_.x) * _e1181.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1192.g3_.y) * _e1196.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1207.g3_.z) * _e1211.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e1222.g5_.x) * vec3<f32>(_e1226.g2_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1237.g5_.y) * vec3<f32>(_e1241.g2_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1252.g5_.z) * vec3<f32>(_e1256.g2_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1267.g7_.x) * vec3<f32>(_e1271.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1282.g7_.y) * vec3<f32>(_e1286.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1297.g7_.z) * vec3<f32>(_e1301.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1312.g1_.x) * vec3<f32>(_e1316.g3_.x, _e1319.g3_.z, _e1322.g3_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((((((((vec4<f32>(_e1334.g0_.x) * _e1338.g8_) + ((vec4<f32>(_e1341.g1_.y) * vec4<f32>(_e1345.g4_.z, _e1348.g4_.z, _e1351.g4_.x, _e1354.g5_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1368.g1_.z) * vec4<f32>(_e1372.g4_.y, _e1375.g4_.x, _e1378.g4_.y, _e1381.g5_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1395.g2_.x) * vec4<f32>(_e1399.g5_.x, _e1402.g5_.y, _e1405.g5_.z, _e1408.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1420.g4_.x) * vec4<f32>(_e1424.g1_.z, _e1427.g1_.z, _e1430.g1_.y, _e1433.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1446.g4_.y) * vec4<f32>(_e1450.g1_.z, _e1453.g1_.z, _e1456.g1_.x, _e1459.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1472.g4_.z) * vec4<f32>(_e1476.g1_.y, _e1479.g1_.x, _e1482.g1_.y, _e1485.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1498.g5_.x) * vec4<f32>(_e1502.g2_.x, _e1505.g2_.x, _e1508.g2_.x, _e1511.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1524.g5_.y) * vec4<f32>(_e1528.g2_.x, _e1531.g2_.x, _e1534.g2_.x, _e1537.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1550.g5_.z) * vec4<f32>(_e1554.g2_.x, _e1557.g2_.x, _e1560.g2_.x, _e1563.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1576.g8_.x) * vec4<f32>(_e1580.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1592.g8_.y) * vec4<f32>(_e1596.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1608.g8_.z) * vec4<f32>(_e1612.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1624.g8_.w) * vec4<f32>(_e1628.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1640.g1_.x) * vec4<f32>(_e1644.g4_.x, _e1647.g4_.z, _e1650.g4_.y, _e1653.g5_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((((((((((((((((((((((((((vec4<f32>(_e1667.g0_.x) * _e1671.g9_) + ((vec4<f32>(_e1674.g1_.y) * vec4<f32>(_e1678.g6_.z, _e1681.g6_.z, _e1684.g6_.x, _e1687.g7_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1701.g1_.z) * vec4<f32>(_e1705.g6_.y, _e1708.g6_.x, _e1711.g6_.y, _e1714.g7_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1728.g2_.x) * vec4<f32>(_e1732.g7_.x, _e1735.g7_.y, _e1738.g7_.z, _e1741.g7_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) - (vec4<f32>(_e1753.g2_.y) * _e1757.g8_)) + ((vec4<f32>(_e1761.g3_.x) * vec4<f32>(_e1765.g4_.z, _e1768.g4_.z, _e1771.g4_.y, _e1774.g5_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1788.g3_.y) * vec4<f32>(_e1792.g4_.z, _e1795.g4_.z, _e1798.g4_.x, _e1801.g5_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1815.g3_.z) * vec4<f32>(_e1819.g4_.y, _e1822.g4_.x, _e1825.g4_.y, _e1828.g5_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1842.g3_.w) * vec4<f32>(_e1846.g5_.x, _e1849.g5_.y, _e1852.g5_.z, _e1855.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1867.g4_.x) * _e1871.g3_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1883.g4_.y) * _e1887.g3_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1899.g4_.z) * _e1903.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1915.g5_.x) * _e1919.g3_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1931.g5_.y) * _e1935.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1947.g5_.z) * _e1951.g3_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1963.g6_.x) * vec4<f32>(_e1967.g1_.z, _e1970.g1_.z, _e1973.g1_.y, _e1976.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1989.g6_.y) * vec4<f32>(_e1993.g1_.z, _e1996.g1_.z, _e1999.g1_.x, _e2002.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e2015.g6_.z) * vec4<f32>(_e2019.g1_.y, _e2022.g1_.x, _e2025.g1_.y, _e2028.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e2041.g7_.x) * vec4<f32>(_e2045.g2_.x, _e2048.g2_.x, _e2051.g2_.x, _e2054.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e2067.g7_.y) * vec4<f32>(_e2071.g2_.x, _e2074.g2_.x, _e2077.g2_.x, _e2080.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e2093.g7_.z) * vec4<f32>(_e2097.g2_.x, _e2100.g2_.x, _e2103.g2_.x, _e2106.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e2119.g8_.x) * vec4<f32>(_e2123.g2_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e2135.g8_.y) * vec4<f32>(_e2139.g2_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e2151.g8_.z) * vec4<f32>(_e2155.g2_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e2167.g8_.w) * vec4<f32>(_e2171.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e2183.g9_.x) * vec4<f32>(_e2187.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e2199.g9_.y) * vec4<f32>(_e2203.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e2215.g9_.z) * vec4<f32>(_e2219.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e2231.g9_.w) * vec4<f32>(_e2235.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e2247.g1_.x) * vec4<f32>(_e2251.g6_.x, _e2254.g6_.z, _e2257.g6_.y, _e2260.g7_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_inner_product(self_2402: MultiVector, other_2146: MultiVector) -> MultiVector {
    var self_2403: MultiVector;
    var other_2147: MultiVector;

    self_2403 = self_2402;
    other_2147 = other_2146;
    let _e4: MultiVector = self_2403;
    let _e8: MultiVector = other_2147;
    let _e11: MultiVector = self_2403;
    let _e15: MultiVector = other_2147;
    let _e26: MultiVector = self_2403;
    let _e30: MultiVector = other_2147;
    let _e41: MultiVector = self_2403;
    let _e45: MultiVector = other_2147;
    let _e57: MultiVector = self_2403;
    let _e61: MultiVector = other_2147;
    let _e73: MultiVector = self_2403;
    let _e77: MultiVector = other_2147;
    let _e89: MultiVector = self_2403;
    let _e93: MultiVector = other_2147;
    let _e105: MultiVector = self_2403;
    let _e108: MultiVector = self_2403;
    let _e111: MultiVector = self_2403;
    let _e115: MultiVector = other_2147;
    let _e118: MultiVector = other_2147;
    let _e121: MultiVector = other_2147;
    let _e127: MultiVector = self_2403;
    let _e131: MultiVector = other_2147;
    let _e134: MultiVector = self_2403;
    let _e138: MultiVector = other_2147;
    let _e141: MultiVector = other_2147;
    let _e144: MultiVector = other_2147;
    let _e156: MultiVector = self_2403;
    let _e160: MultiVector = other_2147;
    let _e163: MultiVector = other_2147;
    let _e166: MultiVector = other_2147;
    let _e178: MultiVector = self_2403;
    let _e182: MultiVector = other_2147;
    let _e185: MultiVector = other_2147;
    let _e188: MultiVector = other_2147;
    let _e200: MultiVector = self_2403;
    let _e204: MultiVector = other_2147;
    let _e207: MultiVector = other_2147;
    let _e210: MultiVector = other_2147;
    let _e222: MultiVector = self_2403;
    let _e226: MultiVector = other_2147;
    let _e229: MultiVector = other_2147;
    let _e232: MultiVector = other_2147;
    let _e244: MultiVector = self_2403;
    let _e248: MultiVector = other_2147;
    let _e251: MultiVector = other_2147;
    let _e254: MultiVector = other_2147;
    let _e266: MultiVector = self_2403;
    let _e270: MultiVector = other_2147;
    let _e274: MultiVector = self_2403;
    let _e278: MultiVector = other_2147;
    let _e281: MultiVector = self_2403;
    let _e285: MultiVector = other_2147;
    let _e288: MultiVector = other_2147;
    let _e299: MultiVector = self_2403;
    let _e303: MultiVector = other_2147;
    let _e306: MultiVector = other_2147;
    let _e317: MultiVector = self_2403;
    let _e321: MultiVector = other_2147;
    let _e324: MultiVector = other_2147;
    let _e335: MultiVector = self_2403;
    let _e339: MultiVector = other_2147;
    let _e349: MultiVector = self_2403;
    let _e353: MultiVector = other_2147;
    let _e363: MultiVector = self_2403;
    let _e367: MultiVector = other_2147;
    let _e378: MultiVector = self_2403;
    let _e382: MultiVector = other_2147;
    let _e393: MultiVector = self_2403;
    let _e397: MultiVector = other_2147;
    let _e408: MultiVector = self_2403;
    let _e412: MultiVector = other_2147;
    let _e422: MultiVector = self_2403;
    let _e426: MultiVector = other_2147;
    let _e436: MultiVector = self_2403;
    let _e440: MultiVector = other_2147;
    let _e450: MultiVector = self_2403;
    let _e454: MultiVector = other_2147;
    let _e457: MultiVector = other_2147;
    let _e463: MultiVector = self_2403;
    let _e467: MultiVector = other_2147;
    let _e470: MultiVector = other_2147;
    let _e476: MultiVector = self_2403;
    let _e480: MultiVector = other_2147;
    let _e483: MultiVector = other_2147;
    let _e489: MultiVector = self_2403;
    let _e493: MultiVector = other_2147;
    let _e504: MultiVector = self_2403;
    let _e508: MultiVector = other_2147;
    let _e519: MultiVector = self_2403;
    let _e523: MultiVector = other_2147;
    let _e534: MultiVector = self_2403;
    let _e538: MultiVector = other_2147;
    let _e549: MultiVector = self_2403;
    let _e553: MultiVector = other_2147;
    let _e564: MultiVector = self_2403;
    let _e568: MultiVector = other_2147;
    let _e579: MultiVector = self_2403;
    let _e583: MultiVector = other_2147;
    let _e586: MultiVector = other_2147;
    let _e597: MultiVector = self_2403;
    let _e601: MultiVector = other_2147;
    let _e611: MultiVector = self_2403;
    let _e614: MultiVector = self_2403;
    let _e618: MultiVector = other_2147;
    let _e621: MultiVector = other_2147;
    let _e632: MultiVector = self_2403;
    let _e636: MultiVector = other_2147;
    let _e639: MultiVector = self_2403;
    let _e643: MultiVector = other_2147;
    let _e646: MultiVector = other_2147;
    let _e649: MultiVector = other_2147;
    let _e652: MultiVector = other_2147;
    let _e666: MultiVector = self_2403;
    let _e670: MultiVector = other_2147;
    let _e673: MultiVector = other_2147;
    let _e676: MultiVector = other_2147;
    let _e679: MultiVector = other_2147;
    let _e693: MultiVector = self_2403;
    let _e697: MultiVector = other_2147;
    let _e700: MultiVector = other_2147;
    let _e703: MultiVector = other_2147;
    let _e706: MultiVector = other_2147;
    let _e720: MultiVector = self_2403;
    let _e724: MultiVector = other_2147;
    let _e736: MultiVector = self_2403;
    let _e740: MultiVector = other_2147;
    let _e752: MultiVector = self_2403;
    let _e756: MultiVector = other_2147;
    let _e768: MultiVector = self_2403;
    let _e772: MultiVector = other_2147;
    let _e784: MultiVector = self_2403;
    let _e788: MultiVector = other_2147;
    let _e800: MultiVector = self_2403;
    let _e804: MultiVector = other_2147;
    let _e816: MultiVector = self_2403;
    let _e820: MultiVector = other_2147;
    let _e832: MultiVector = self_2403;
    let _e836: MultiVector = other_2147;
    let _e849: MultiVector = self_2403;
    let _e853: MultiVector = other_2147;
    let _e866: MultiVector = self_2403;
    let _e870: MultiVector = other_2147;
    let _e883: MultiVector = self_2403;
    let _e887: MultiVector = other_2147;
    let _e890: MultiVector = other_2147;
    let _e893: MultiVector = other_2147;
    let _e896: MultiVector = other_2147;
    let _e909: MultiVector = self_2403;
    let _e913: MultiVector = other_2147;
    let _e916: MultiVector = other_2147;
    let _e919: MultiVector = other_2147;
    let _e922: MultiVector = other_2147;
    let _e935: MultiVector = self_2403;
    let _e939: MultiVector = other_2147;
    let _e942: MultiVector = other_2147;
    let _e945: MultiVector = other_2147;
    let _e948: MultiVector = other_2147;
    let _e961: MultiVector = self_2403;
    let _e965: MultiVector = other_2147;
    let _e977: MultiVector = self_2403;
    let _e981: MultiVector = other_2147;
    let _e994: MultiVector = self_2403;
    let _e998: MultiVector = other_2147;
    let _e1011: MultiVector = self_2403;
    let _e1015: MultiVector = other_2147;
    let _e1028: MultiVector = self_2403;
    let _e1032: MultiVector = other_2147;
    let _e1035: MultiVector = other_2147;
    let _e1038: MultiVector = other_2147;
    let _e1041: MultiVector = other_2147;
    let _e1053: MultiVector = self_2403;
    let _e1056: MultiVector = self_2403;
    let _e1059: MultiVector = self_2403;
    let _e1062: MultiVector = self_2403;
    let _e1066: MultiVector = other_2147;
    let _e1077: MultiVector = self_2403;
    let _e1081: MultiVector = other_2147;
    let _e1084: MultiVector = self_2403;
    let _e1088: MultiVector = other_2147;
    let _e1092: MultiVector = self_2403;
    let _e1096: MultiVector = other_2147;
    let _e1099: MultiVector = other_2147;
    let _e1102: MultiVector = other_2147;
    let _e1114: MultiVector = self_2403;
    let _e1118: MultiVector = other_2147;
    let _e1121: MultiVector = other_2147;
    let _e1124: MultiVector = other_2147;
    let _e1136: MultiVector = self_2403;
    let _e1140: MultiVector = other_2147;
    let _e1151: MultiVector = self_2403;
    let _e1155: MultiVector = other_2147;
    let _e1166: MultiVector = self_2403;
    let _e1170: MultiVector = other_2147;
    let _e1181: MultiVector = self_2403;
    let _e1185: MultiVector = other_2147;
    let _e1196: MultiVector = self_2403;
    let _e1200: MultiVector = other_2147;
    let _e1211: MultiVector = self_2403;
    let _e1215: MultiVector = other_2147;
    let _e1226: MultiVector = self_2403;
    let _e1230: MultiVector = other_2147;
    let _e1241: MultiVector = self_2403;
    let _e1245: MultiVector = other_2147;
    let _e1256: MultiVector = self_2403;
    let _e1260: MultiVector = other_2147;
    let _e1271: MultiVector = self_2403;
    let _e1275: MultiVector = other_2147;
    let _e1278: MultiVector = other_2147;
    let _e1281: MultiVector = other_2147;
    let _e1293: MultiVector = self_2403;
    let _e1297: MultiVector = other_2147;
    let _e1300: MultiVector = self_2403;
    let _e1304: MultiVector = other_2147;
    let _e1315: MultiVector = self_2403;
    let _e1319: MultiVector = other_2147;
    let _e1330: MultiVector = self_2403;
    let _e1334: MultiVector = other_2147;
    let _e1345: MultiVector = self_2403;
    let _e1349: MultiVector = other_2147;
    let _e1353: MultiVector = self_2403;
    let _e1355: MultiVector = other_2147;
    let _e1365: MultiVector = self_2403;
    let _e1369: MultiVector = other_2147;
    let _e1372: MultiVector = self_2403;
    let _e1376: MultiVector = other_2147;
    let _e1380: MultiVector = self_2403;
    let _e1384: MultiVector = other_2147;
    let _e1387: MultiVector = other_2147;
    let _e1390: MultiVector = other_2147;
    let _e1402: MultiVector = self_2403;
    let _e1406: MultiVector = other_2147;
    let _e1409: MultiVector = other_2147;
    let _e1412: MultiVector = other_2147;
    let _e1424: MultiVector = self_2403;
    let _e1428: MultiVector = other_2147;
    let _e1439: MultiVector = self_2403;
    let _e1443: MultiVector = other_2147;
    let _e1454: MultiVector = self_2403;
    let _e1458: MultiVector = other_2147;
    let _e1469: MultiVector = self_2403;
    let _e1473: MultiVector = other_2147;
    let _e1484: MultiVector = self_2403;
    let _e1488: MultiVector = other_2147;
    let _e1499: MultiVector = self_2403;
    let _e1503: MultiVector = other_2147;
    let _e1514: MultiVector = self_2403;
    let _e1518: MultiVector = other_2147;
    let _e1529: MultiVector = self_2403;
    let _e1533: MultiVector = other_2147;
    let _e1544: MultiVector = self_2403;
    let _e1548: MultiVector = other_2147;
    let _e1559: MultiVector = self_2403;
    let _e1563: MultiVector = other_2147;
    let _e1566: MultiVector = other_2147;
    let _e1569: MultiVector = other_2147;
    let _e1581: MultiVector = self_2403;
    let _e1585: MultiVector = other_2147;
    let _e1588: MultiVector = self_2403;
    let _e1592: MultiVector = other_2147;
    let _e1603: MultiVector = self_2403;
    let _e1607: MultiVector = other_2147;
    let _e1618: MultiVector = self_2403;
    let _e1622: MultiVector = other_2147;
    let _e1633: MultiVector = self_2403;
    let _e1637: MultiVector = other_2147;
    let _e1641: MultiVector = self_2403;
    let _e1643: MultiVector = other_2147;
    let _e1653: MultiVector = self_2403;
    let _e1657: MultiVector = other_2147;
    let _e1660: MultiVector = self_2403;
    let _e1664: MultiVector = other_2147;
    let _e1676: MultiVector = self_2403;
    let _e1680: MultiVector = other_2147;
    let _e1692: MultiVector = self_2403;
    let _e1696: MultiVector = other_2147;
    let _e1708: MultiVector = self_2403;
    let _e1712: MultiVector = other_2147;
    let _e1724: MultiVector = self_2403;
    let _e1728: MultiVector = other_2147;
    let _e1740: MultiVector = self_2403;
    let _e1744: MultiVector = other_2147;
    let _e1756: MultiVector = self_2403;
    let _e1760: MultiVector = other_2147;
    let _e1772: MultiVector = self_2403;
    let _e1775: MultiVector = self_2403;
    let _e1778: MultiVector = self_2403;
    let _e1781: MultiVector = self_2403;
    let _e1785: MultiVector = other_2147;
    let _e1788: MultiVector = other_2147;
    let _e1791: MultiVector = other_2147;
    let _e1794: MultiVector = other_2147;
    let _e1809: MultiVector = self_2403;
    let _e1813: MultiVector = other_2147;
    let _e1816: MultiVector = self_2403;
    let _e1820: MultiVector = other_2147;
    let _e1832: MultiVector = self_2403;
    let _e1836: MultiVector = other_2147;
    let _e1848: MultiVector = self_2403;
    let _e1852: MultiVector = other_2147;
    let _e1864: MultiVector = self_2403;
    let _e1868: MultiVector = other_2147;
    let _e1880: MultiVector = self_2403;
    let _e1884: MultiVector = other_2147;
    let _e1896: MultiVector = self_2403;
    let _e1900: MultiVector = other_2147;
    let _e1912: MultiVector = self_2403;
    let _e1916: MultiVector = other_2147;
    let _e1928: MultiVector = self_2403;
    let _e1931: MultiVector = self_2403;
    let _e1934: MultiVector = self_2403;
    let _e1937: MultiVector = self_2403;
    let _e1941: MultiVector = other_2147;
    let _e1944: MultiVector = other_2147;
    let _e1947: MultiVector = other_2147;
    let _e1950: MultiVector = other_2147;
    return MultiVector(((((((((vec3<f32>(_e4.g0_.x) * _e8.g0_) + ((vec3<f32>(_e11.g1_.y) * vec3<f32>(_e15.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e26.g1_.z) * vec3<f32>(_e30.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e41.g5_.x) * vec3<f32>(_e45.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e57.g5_.y) * vec3<f32>(_e61.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e73.g5_.z) * vec3<f32>(_e77.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e89.g8_.w) * vec3<f32>(_e93.g8_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (vec3<f32>(_e105.g1_.x, _e108.g0_.y, _e111.g0_.z) * vec3<f32>(_e115.g1_.x, _e118.g0_.x, _e121.g0_.x))), ((((((((vec3<f32>(_e127.g0_.x) * _e131.g1_) + ((vec3<f32>(_e134.g1_.x) * vec3<f32>(_e138.g0_.x, _e141.g5_.z, _e144.g5_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e156.g1_.y) * vec3<f32>(_e160.g5_.z, _e163.g0_.x, _e166.g5_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e178.g1_.z) * vec3<f32>(_e182.g5_.y, _e185.g5_.x, _e188.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e200.g5_.x) * vec3<f32>(_e204.g8_.w, _e207.g1_.z, _e210.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e222.g5_.y) * vec3<f32>(_e226.g1_.z, _e229.g8_.w, _e232.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e244.g5_.z) * vec3<f32>(_e248.g1_.y, _e251.g1_.x, _e254.g8_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e266.g8_.w) * _e270.g5_)), ((((((((((((((((((((((((vec2<f32>(_e274.g0_.x) * _e278.g2_) + ((vec2<f32>(_e281.g1_.x) * vec2<f32>(_e285.g4_.x, _e288.g3_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e299.g1_.y) * vec2<f32>(_e303.g4_.y, _e306.g3_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e317.g1_.z) * vec2<f32>(_e321.g4_.z, _e324.g3_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e335.g2_.x) * vec2<f32>(_e339.g0_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e349.g2_.y) * vec2<f32>(_e353.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e363.g3_.x) * vec2<f32>(_e367.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e378.g3_.y) * vec2<f32>(_e382.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e393.g3_.z) * vec2<f32>(_e397.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e408.g4_.x) * vec2<f32>(_e412.g1_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e422.g4_.y) * vec2<f32>(_e426.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e436.g4_.z) * vec2<f32>(_e440.g1_.z)) * vec2<f32>(1.0, 0.0))) - (vec2<f32>(_e450.g5_.x) * vec2<f32>(_e454.g8_.x, _e457.g7_.x))) - (vec2<f32>(_e463.g5_.y) * vec2<f32>(_e467.g8_.y, _e470.g7_.y))) - (vec2<f32>(_e476.g5_.z) * vec2<f32>(_e480.g8_.z, _e483.g7_.z))) + ((vec2<f32>(_e489.g7_.x) * vec2<f32>(_e493.g5_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e504.g7_.y) * vec2<f32>(_e508.g5_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e519.g7_.z) * vec2<f32>(_e523.g5_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e534.g8_.x) * vec2<f32>(_e538.g5_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e549.g8_.y) * vec2<f32>(_e553.g5_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e564.g8_.z) * vec2<f32>(_e568.g5_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e579.g8_.w) * vec2<f32>(_e583.g0_.y, _e586.g9_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e597.g9_.w) * vec2<f32>(_e601.g8_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e611.g0_.y, _e614.g0_.x) * vec2<f32>(_e618.g8_.w, _e621.g8_.x)) * vec2<f32>(-(1.0), 0.0))), (((((((((((((((((((((((vec4<f32>(_e632.g0_.x) * _e636.g3_) + ((vec4<f32>(_e639.g1_.x) * vec4<f32>(_e643.g7_.z, _e646.g7_.z, _e649.g7_.y, _e652.g6_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e666.g1_.y) * vec4<f32>(_e670.g7_.z, _e673.g7_.z, _e676.g7_.x, _e679.g6_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e693.g1_.z) * vec4<f32>(_e697.g7_.y, _e700.g7_.x, _e703.g7_.y, _e706.g6_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e720.g3_.x) * vec4<f32>(_e724.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e736.g3_.y) * vec4<f32>(_e740.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e752.g3_.z) * vec4<f32>(_e756.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e768.g3_.w) * vec4<f32>(_e772.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e784.g5_.x) * _e788.g9_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e800.g5_.y) * _e804.g9_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e816.g5_.z) * _e820.g9_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e832.g6_.x) * vec4<f32>(_e836.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e849.g6_.y) * vec4<f32>(_e853.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e866.g6_.z) * vec4<f32>(_e870.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e883.g7_.x) * vec4<f32>(_e887.g1_.z, _e890.g1_.z, _e893.g1_.y, _e896.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e909.g7_.y) * vec4<f32>(_e913.g1_.z, _e916.g1_.z, _e919.g1_.x, _e922.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e935.g7_.z) * vec4<f32>(_e939.g1_.y, _e942.g1_.x, _e945.g1_.y, _e948.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e961.g8_.w) * vec4<f32>(_e965.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e977.g9_.x) * vec4<f32>(_e981.g5_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e994.g9_.y) * vec4<f32>(_e998.g5_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1011.g9_.z) * vec4<f32>(_e1015.g5_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1028.g9_.w) * vec4<f32>(_e1032.g5_.x, _e1035.g5_.y, _e1038.g5_.z, _e1041.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1053.g0_.x, _e1056.g0_.x, _e1059.g0_.x, _e1062.g0_.z) * _e1066.g8_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((((((((vec3<f32>(_e1077.g0_.x) * _e1081.g4_) + (vec3<f32>(_e1084.g0_.y) * _e1088.g5_)) + ((vec3<f32>(_e1092.g1_.y) * vec3<f32>(_e1096.g8_.z, _e1099.g8_.z, _e1102.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1114.g1_.z) * vec3<f32>(_e1118.g8_.y, _e1121.g8_.x, _e1124.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1136.g4_.x) * vec3<f32>(_e1140.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1151.g4_.y) * vec3<f32>(_e1155.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1166.g4_.z) * vec3<f32>(_e1170.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1181.g5_.x) * vec3<f32>(_e1185.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1196.g5_.y) * vec3<f32>(_e1200.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1211.g5_.z) * vec3<f32>(_e1215.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1226.g8_.x) * _e1230.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1241.g8_.y) * _e1245.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e1256.g8_.z) * _e1260.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e1271.g1_.x) * vec3<f32>(_e1275.g8_.x, _e1278.g8_.z, _e1281.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((vec3<f32>(_e1293.g0_.x) * _e1297.g5_) + ((vec3<f32>(_e1300.g5_.x) * vec3<f32>(_e1304.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1315.g5_.y) * vec3<f32>(_e1319.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1330.g5_.z) * vec3<f32>(_e1334.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e1345.g8_.w) * _e1349.g1_)) + ((_e1353.g1_ * vec3<f32>(_e1355.g8_.w)) * vec3<f32>(-(1.0)))), ((((((((((((((vec3<f32>(_e1365.g0_.x) * _e1369.g6_) + (vec3<f32>(_e1372.g0_.z) * _e1376.g5_)) + ((vec3<f32>(_e1380.g1_.y) * vec3<f32>(_e1384.g9_.z, _e1387.g9_.z, _e1390.g9_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1402.g1_.z) * vec3<f32>(_e1406.g9_.y, _e1409.g9_.x, _e1412.g9_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1424.g5_.x) * vec3<f32>(_e1428.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1439.g5_.y) * vec3<f32>(_e1443.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1454.g5_.z) * vec3<f32>(_e1458.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1469.g6_.x) * vec3<f32>(_e1473.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1484.g6_.y) * vec3<f32>(_e1488.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1499.g6_.z) * vec3<f32>(_e1503.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1514.g9_.x) * _e1518.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1529.g9_.y) * _e1533.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1544.g9_.z) * _e1548.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1559.g1_.x) * vec3<f32>(_e1563.g9_.x, _e1566.g9_.z, _e1569.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((vec3<f32>(_e1581.g0_.x) * _e1585.g7_) + ((vec3<f32>(_e1588.g7_.x) * vec3<f32>(_e1592.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1603.g7_.y) * vec3<f32>(_e1607.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1618.g7_.z) * vec3<f32>(_e1622.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e1633.g9_.w) * _e1637.g1_)) + ((_e1641.g1_ * vec3<f32>(_e1643.g9_.w)) * vec3<f32>(-(1.0)))), (((((((((vec4<f32>(_e1653.g0_.x) * _e1657.g8_) + ((vec4<f32>(_e1660.g1_.x) * vec4<f32>(_e1664.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1676.g1_.y) * vec4<f32>(_e1680.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1692.g1_.z) * vec4<f32>(_e1696.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1708.g8_.x) * vec4<f32>(_e1712.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1724.g8_.y) * vec4<f32>(_e1728.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1740.g8_.z) * vec4<f32>(_e1744.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1756.g8_.w) * vec4<f32>(_e1760.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1772.g0_.y, _e1775.g0_.y, _e1778.g0_.y, _e1781.g0_.x) * vec4<f32>(_e1785.g1_.x, _e1788.g1_.y, _e1791.g1_.z, _e1794.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), (((((((((vec4<f32>(_e1809.g0_.x) * _e1813.g9_) + ((vec4<f32>(_e1816.g1_.x) * vec4<f32>(_e1820.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1832.g1_.y) * vec4<f32>(_e1836.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1848.g1_.z) * vec4<f32>(_e1852.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1864.g9_.x) * vec4<f32>(_e1868.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1880.g9_.y) * vec4<f32>(_e1884.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1896.g9_.z) * vec4<f32>(_e1900.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1912.g9_.w) * vec4<f32>(_e1916.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1928.g0_.z, _e1931.g0_.z, _e1934.g0_.z, _e1937.g0_.x) * vec4<f32>(_e1941.g1_.x, _e1944.g1_.y, _e1947.g1_.z, _e1950.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_multi_vector_geometric_anti_product(self_2404: MultiVector, other_2148: MultiVector) -> MultiVector {
    var self_2405: MultiVector;
    var other_2149: MultiVector;

    self_2405 = self_2404;
    other_2149 = other_2148;
    let _e4: MultiVector = self_2405;
    let _e8: MultiVector = other_2149;
    let _e11: MultiVector = other_2149;
    let _e14: MultiVector = other_2149;
    let _e24: MultiVector = self_2405;
    let _e28: MultiVector = other_2149;
    let _e32: MultiVector = self_2405;
    let _e36: MultiVector = other_2149;
    let _e47: MultiVector = self_2405;
    let _e51: MultiVector = other_2149;
    let _e62: MultiVector = self_2405;
    let _e66: MultiVector = other_2149;
    let _e77: MultiVector = self_2405;
    let _e81: MultiVector = other_2149;
    let _e84: MultiVector = other_2149;
    let _e87: MultiVector = other_2149;
    let _e99: MultiVector = self_2405;
    let _e103: MultiVector = other_2149;
    let _e114: MultiVector = self_2405;
    let _e118: MultiVector = other_2149;
    let _e130: MultiVector = self_2405;
    let _e134: MultiVector = other_2149;
    let _e146: MultiVector = self_2405;
    let _e150: MultiVector = other_2149;
    let _e162: MultiVector = self_2405;
    let _e166: MultiVector = other_2149;
    let _e169: MultiVector = other_2149;
    let _e172: MultiVector = other_2149;
    let _e185: MultiVector = self_2405;
    let _e189: MultiVector = other_2149;
    let _e192: MultiVector = other_2149;
    let _e195: MultiVector = other_2149;
    let _e208: MultiVector = self_2405;
    let _e212: MultiVector = other_2149;
    let _e215: MultiVector = other_2149;
    let _e218: MultiVector = other_2149;
    let _e231: MultiVector = self_2405;
    let _e235: MultiVector = other_2149;
    let _e238: MultiVector = other_2149;
    let _e241: MultiVector = other_2149;
    let _e254: MultiVector = self_2405;
    let _e258: MultiVector = other_2149;
    let _e270: MultiVector = self_2405;
    let _e274: MultiVector = other_2149;
    let _e286: MultiVector = self_2405;
    let _e290: MultiVector = other_2149;
    let _e302: MultiVector = self_2405;
    let _e306: MultiVector = other_2149;
    let _e309: MultiVector = other_2149;
    let _e312: MultiVector = other_2149;
    let _e318: MultiVector = self_2405;
    let _e322: MultiVector = other_2149;
    let _e325: MultiVector = other_2149;
    let _e328: MultiVector = other_2149;
    let _e334: MultiVector = self_2405;
    let _e338: MultiVector = other_2149;
    let _e341: MultiVector = other_2149;
    let _e344: MultiVector = other_2149;
    let _e350: MultiVector = self_2405;
    let _e354: MultiVector = other_2149;
    let _e366: MultiVector = self_2405;
    let _e370: MultiVector = other_2149;
    let _e382: MultiVector = self_2405;
    let _e386: MultiVector = other_2149;
    let _e398: MultiVector = self_2405;
    let _e402: MultiVector = other_2149;
    let _e405: MultiVector = other_2149;
    let _e408: MultiVector = other_2149;
    let _e420: MultiVector = self_2405;
    let _e424: MultiVector = other_2149;
    let _e427: MultiVector = other_2149;
    let _e430: MultiVector = other_2149;
    let _e442: MultiVector = self_2405;
    let _e446: MultiVector = other_2149;
    let _e449: MultiVector = other_2149;
    let _e452: MultiVector = other_2149;
    let _e464: MultiVector = self_2405;
    let _e468: MultiVector = other_2149;
    let _e480: MultiVector = self_2405;
    let _e484: MultiVector = other_2149;
    let _e487: MultiVector = other_2149;
    let _e490: MultiVector = other_2149;
    let _e502: MultiVector = self_2405;
    let _e506: MultiVector = other_2149;
    let _e509: MultiVector = other_2149;
    let _e512: MultiVector = other_2149;
    let _e524: MultiVector = self_2405;
    let _e528: MultiVector = other_2149;
    let _e531: MultiVector = other_2149;
    let _e534: MultiVector = other_2149;
    let _e546: MultiVector = self_2405;
    let _e550: MultiVector = other_2149;
    let _e561: MultiVector = self_2405;
    let _e565: MultiVector = other_2149;
    let _e575: MultiVector = self_2405;
    let _e579: MultiVector = other_2149;
    let _e582: MultiVector = other_2149;
    let _e585: MultiVector = other_2149;
    let _e590: MultiVector = self_2405;
    let _e594: MultiVector = other_2149;
    let _e597: MultiVector = other_2149;
    let _e600: MultiVector = other_2149;
    let _e606: MultiVector = self_2405;
    let _e610: MultiVector = other_2149;
    let _e614: MultiVector = self_2405;
    let _e618: MultiVector = other_2149;
    let _e621: MultiVector = other_2149;
    let _e624: MultiVector = other_2149;
    let _e636: MultiVector = self_2405;
    let _e640: MultiVector = other_2149;
    let _e643: MultiVector = other_2149;
    let _e646: MultiVector = other_2149;
    let _e658: MultiVector = self_2405;
    let _e662: MultiVector = other_2149;
    let _e665: MultiVector = other_2149;
    let _e668: MultiVector = other_2149;
    let _e680: MultiVector = self_2405;
    let _e684: MultiVector = other_2149;
    let _e688: MultiVector = self_2405;
    let _e692: MultiVector = other_2149;
    let _e695: MultiVector = other_2149;
    let _e698: MultiVector = other_2149;
    let _e704: MultiVector = self_2405;
    let _e708: MultiVector = other_2149;
    let _e711: MultiVector = other_2149;
    let _e714: MultiVector = other_2149;
    let _e727: MultiVector = self_2405;
    let _e731: MultiVector = other_2149;
    let _e734: MultiVector = other_2149;
    let _e737: MultiVector = other_2149;
    let _e750: MultiVector = self_2405;
    let _e754: MultiVector = other_2149;
    let _e757: MultiVector = other_2149;
    let _e760: MultiVector = other_2149;
    let _e773: MultiVector = self_2405;
    let _e777: MultiVector = other_2149;
    let _e781: MultiVector = self_2405;
    let _e785: MultiVector = other_2149;
    let _e788: MultiVector = other_2149;
    let _e791: MultiVector = other_2149;
    let _e803: MultiVector = self_2405;
    let _e807: MultiVector = other_2149;
    let _e810: MultiVector = other_2149;
    let _e813: MultiVector = other_2149;
    let _e825: MultiVector = self_2405;
    let _e829: MultiVector = other_2149;
    let _e832: MultiVector = other_2149;
    let _e835: MultiVector = other_2149;
    let _e847: MultiVector = self_2405;
    let _e851: MultiVector = other_2149;
    let _e854: MultiVector = other_2149;
    let _e857: MultiVector = other_2149;
    let _e869: MultiVector = self_2405;
    let _e873: MultiVector = other_2149;
    let _e876: MultiVector = other_2149;
    let _e879: MultiVector = other_2149;
    let _e891: MultiVector = self_2405;
    let _e895: MultiVector = other_2149;
    let _e898: MultiVector = other_2149;
    let _e901: MultiVector = other_2149;
    let _e913: MultiVector = self_2405;
    let _e917: MultiVector = other_2149;
    let _e920: MultiVector = other_2149;
    let _e923: MultiVector = other_2149;
    let _e935: MultiVector = self_2405;
    let _e939: MultiVector = other_2149;
    let _e942: MultiVector = other_2149;
    let _e945: MultiVector = other_2149;
    let _e957: MultiVector = self_2405;
    let _e961: MultiVector = other_2149;
    let _e964: MultiVector = other_2149;
    let _e967: MultiVector = other_2149;
    let _e979: MultiVector = self_2405;
    let _e983: MultiVector = other_2149;
    let _e986: MultiVector = other_2149;
    let _e989: MultiVector = other_2149;
    let _e1001: MultiVector = self_2405;
    let _e1005: MultiVector = other_2149;
    let _e1008: MultiVector = other_2149;
    let _e1011: MultiVector = other_2149;
    let _e1023: MultiVector = self_2405;
    let _e1027: MultiVector = other_2149;
    let _e1030: MultiVector = other_2149;
    let _e1033: MultiVector = other_2149;
    let _e1045: MultiVector = self_2405;
    let _e1049: MultiVector = other_2149;
    let _e1052: MultiVector = other_2149;
    let _e1055: MultiVector = other_2149;
    let _e1068: MultiVector = self_2405;
    let _e1072: MultiVector = other_2149;
    let _e1075: MultiVector = other_2149;
    let _e1078: MultiVector = other_2149;
    let _e1091: MultiVector = self_2405;
    let _e1095: MultiVector = other_2149;
    let _e1098: MultiVector = other_2149;
    let _e1101: MultiVector = other_2149;
    let _e1114: MultiVector = self_2405;
    let _e1118: MultiVector = other_2149;
    let _e1122: MultiVector = self_2405;
    let _e1126: MultiVector = other_2149;
    let _e1129: MultiVector = other_2149;
    let _e1132: MultiVector = other_2149;
    let _e1144: MultiVector = self_2405;
    let _e1148: MultiVector = other_2149;
    let _e1151: MultiVector = other_2149;
    let _e1154: MultiVector = other_2149;
    let _e1166: MultiVector = self_2405;
    let _e1170: MultiVector = other_2149;
    let _e1173: MultiVector = other_2149;
    let _e1176: MultiVector = other_2149;
    let _e1188: MultiVector = self_2405;
    let _e1192: MultiVector = other_2149;
    let _e1196: MultiVector = self_2405;
    let _e1200: MultiVector = other_2149;
    let _e1203: MultiVector = self_2405;
    let _e1207: MultiVector = other_2149;
    let _e1217: MultiVector = self_2405;
    let _e1221: MultiVector = other_2149;
    let _e1231: MultiVector = self_2405;
    let _e1235: MultiVector = other_2149;
    let _e1245: MultiVector = self_2405;
    let _e1249: MultiVector = other_2149;
    let _e1259: MultiVector = self_2405;
    let _e1263: MultiVector = other_2149;
    let _e1273: MultiVector = self_2405;
    let _e1277: MultiVector = other_2149;
    let _e1280: MultiVector = other_2149;
    let _e1291: MultiVector = self_2405;
    let _e1295: MultiVector = other_2149;
    let _e1306: MultiVector = self_2405;
    let _e1310: MultiVector = other_2149;
    let _e1321: MultiVector = self_2405;
    let _e1325: MultiVector = other_2149;
    let _e1336: MultiVector = self_2405;
    let _e1340: MultiVector = other_2149;
    let _e1343: MultiVector = other_2149;
    let _e1349: MultiVector = self_2405;
    let _e1353: MultiVector = other_2149;
    let _e1356: MultiVector = other_2149;
    let _e1362: MultiVector = self_2405;
    let _e1366: MultiVector = other_2149;
    let _e1369: MultiVector = other_2149;
    let _e1375: MultiVector = self_2405;
    let _e1379: MultiVector = other_2149;
    let _e1390: MultiVector = self_2405;
    let _e1394: MultiVector = other_2149;
    let _e1405: MultiVector = self_2405;
    let _e1409: MultiVector = other_2149;
    let _e1420: MultiVector = self_2405;
    let _e1424: MultiVector = other_2149;
    let _e1435: MultiVector = self_2405;
    let _e1439: MultiVector = other_2149;
    let _e1450: MultiVector = self_2405;
    let _e1454: MultiVector = other_2149;
    let _e1465: MultiVector = self_2405;
    let _e1469: MultiVector = other_2149;
    let _e1472: MultiVector = other_2149;
    let _e1483: MultiVector = self_2405;
    let _e1487: MultiVector = other_2149;
    let _e1490: MultiVector = other_2149;
    let _e1501: MultiVector = self_2405;
    let _e1505: MultiVector = other_2149;
    let _e1508: MultiVector = other_2149;
    let _e1519: MultiVector = self_2405;
    let _e1523: MultiVector = other_2149;
    let _e1534: MultiVector = self_2405;
    let _e1537: MultiVector = self_2405;
    let _e1541: MultiVector = other_2149;
    let _e1544: MultiVector = other_2149;
    let _e1554: MultiVector = self_2405;
    let _e1558: MultiVector = other_2149;
    let _e1561: MultiVector = self_2405;
    let _e1565: MultiVector = other_2149;
    let _e1568: MultiVector = other_2149;
    let _e1571: MultiVector = other_2149;
    let _e1574: MultiVector = other_2149;
    let _e1587: MultiVector = self_2405;
    let _e1591: MultiVector = other_2149;
    let _e1594: MultiVector = other_2149;
    let _e1597: MultiVector = other_2149;
    let _e1600: MultiVector = other_2149;
    let _e1613: MultiVector = self_2405;
    let _e1617: MultiVector = other_2149;
    let _e1620: MultiVector = other_2149;
    let _e1623: MultiVector = other_2149;
    let _e1626: MultiVector = other_2149;
    let _e1639: MultiVector = self_2405;
    let _e1643: MultiVector = other_2149;
    let _e1646: MultiVector = other_2149;
    let _e1649: MultiVector = other_2149;
    let _e1652: MultiVector = other_2149;
    let _e1667: MultiVector = self_2405;
    let _e1671: MultiVector = other_2149;
    let _e1674: MultiVector = other_2149;
    let _e1677: MultiVector = other_2149;
    let _e1680: MultiVector = other_2149;
    let _e1694: MultiVector = self_2405;
    let _e1698: MultiVector = other_2149;
    let _e1701: MultiVector = other_2149;
    let _e1704: MultiVector = other_2149;
    let _e1707: MultiVector = other_2149;
    let _e1721: MultiVector = self_2405;
    let _e1725: MultiVector = other_2149;
    let _e1728: MultiVector = other_2149;
    let _e1731: MultiVector = other_2149;
    let _e1734: MultiVector = other_2149;
    let _e1748: MultiVector = self_2405;
    let _e1752: MultiVector = other_2149;
    let _e1755: MultiVector = other_2149;
    let _e1758: MultiVector = other_2149;
    let _e1761: MultiVector = other_2149;
    let _e1774: MultiVector = self_2405;
    let _e1778: MultiVector = other_2149;
    let _e1781: MultiVector = other_2149;
    let _e1784: MultiVector = other_2149;
    let _e1787: MultiVector = other_2149;
    let _e1800: MultiVector = self_2405;
    let _e1804: MultiVector = other_2149;
    let _e1807: MultiVector = other_2149;
    let _e1810: MultiVector = other_2149;
    let _e1813: MultiVector = other_2149;
    let _e1826: MultiVector = self_2405;
    let _e1830: MultiVector = other_2149;
    let _e1833: MultiVector = other_2149;
    let _e1836: MultiVector = other_2149;
    let _e1839: MultiVector = other_2149;
    let _e1854: MultiVector = self_2405;
    let _e1858: MultiVector = other_2149;
    let _e1861: MultiVector = other_2149;
    let _e1864: MultiVector = other_2149;
    let _e1867: MultiVector = other_2149;
    let _e1882: MultiVector = self_2405;
    let _e1886: MultiVector = other_2149;
    let _e1889: MultiVector = other_2149;
    let _e1892: MultiVector = other_2149;
    let _e1895: MultiVector = other_2149;
    let _e1910: MultiVector = self_2405;
    let _e1914: MultiVector = other_2149;
    let _e1917: MultiVector = other_2149;
    let _e1920: MultiVector = other_2149;
    let _e1923: MultiVector = other_2149;
    let _e1935: MultiVector = self_2405;
    let _e1938: MultiVector = self_2405;
    let _e1941: MultiVector = self_2405;
    let _e1944: MultiVector = self_2405;
    let _e1948: MultiVector = other_2149;
    let _e1959: MultiVector = self_2405;
    let _e1963: MultiVector = other_2149;
    let _e1966: MultiVector = self_2405;
    let _e1970: MultiVector = other_2149;
    let _e1974: MultiVector = self_2405;
    let _e1978: MultiVector = other_2149;
    let _e1981: MultiVector = other_2149;
    let _e1984: MultiVector = other_2149;
    let _e1990: MultiVector = self_2405;
    let _e1994: MultiVector = other_2149;
    let _e1997: MultiVector = other_2149;
    let _e2000: MultiVector = other_2149;
    let _e2006: MultiVector = self_2405;
    let _e2010: MultiVector = other_2149;
    let _e2013: MultiVector = other_2149;
    let _e2016: MultiVector = other_2149;
    let _e2028: MultiVector = self_2405;
    let _e2032: MultiVector = other_2149;
    let _e2035: MultiVector = other_2149;
    let _e2038: MultiVector = other_2149;
    let _e2050: MultiVector = self_2405;
    let _e2054: MultiVector = other_2149;
    let _e2057: MultiVector = other_2149;
    let _e2060: MultiVector = other_2149;
    let _e2072: MultiVector = self_2405;
    let _e2076: MultiVector = other_2149;
    let _e2079: MultiVector = other_2149;
    let _e2082: MultiVector = other_2149;
    let _e2094: MultiVector = self_2405;
    let _e2098: MultiVector = other_2149;
    let _e2101: MultiVector = other_2149;
    let _e2104: MultiVector = other_2149;
    let _e2116: MultiVector = self_2405;
    let _e2120: MultiVector = other_2149;
    let _e2123: MultiVector = other_2149;
    let _e2126: MultiVector = other_2149;
    let _e2138: MultiVector = self_2405;
    let _e2142: MultiVector = other_2149;
    let _e2145: MultiVector = other_2149;
    let _e2148: MultiVector = other_2149;
    let _e2161: MultiVector = self_2405;
    let _e2165: MultiVector = other_2149;
    let _e2168: MultiVector = other_2149;
    let _e2171: MultiVector = other_2149;
    let _e2184: MultiVector = self_2405;
    let _e2188: MultiVector = other_2149;
    let _e2191: MultiVector = other_2149;
    let _e2194: MultiVector = other_2149;
    let _e2207: MultiVector = self_2405;
    let _e2211: MultiVector = other_2149;
    let _e2214: MultiVector = other_2149;
    let _e2217: MultiVector = other_2149;
    let _e2229: MultiVector = self_2405;
    let _e2233: MultiVector = other_2149;
    let _e2236: MultiVector = other_2149;
    let _e2239: MultiVector = other_2149;
    let _e2251: MultiVector = self_2405;
    let _e2255: MultiVector = other_2149;
    let _e2258: MultiVector = other_2149;
    let _e2261: MultiVector = other_2149;
    let _e2273: MultiVector = self_2405;
    let _e2277: MultiVector = other_2149;
    let _e2280: MultiVector = self_2405;
    let _e2284: MultiVector = other_2149;
    let _e2288: MultiVector = self_2405;
    let _e2292: MultiVector = other_2149;
    let _e2296: MultiVector = self_2405;
    let _e2300: MultiVector = other_2149;
    let _e2303: MultiVector = other_2149;
    let _e2306: MultiVector = other_2149;
    let _e2319: MultiVector = self_2405;
    let _e2323: MultiVector = other_2149;
    let _e2326: MultiVector = other_2149;
    let _e2329: MultiVector = other_2149;
    let _e2342: MultiVector = self_2405;
    let _e2346: MultiVector = other_2149;
    let _e2349: MultiVector = other_2149;
    let _e2352: MultiVector = other_2149;
    let _e2365: MultiVector = self_2405;
    let _e2369: MultiVector = other_2149;
    let _e2372: MultiVector = other_2149;
    let _e2375: MultiVector = other_2149;
    let _e2381: MultiVector = self_2405;
    let _e2385: MultiVector = other_2149;
    let _e2389: MultiVector = self_2405;
    let _e2393: MultiVector = other_2149;
    let _e2396: MultiVector = other_2149;
    let _e2399: MultiVector = other_2149;
    let _e2411: MultiVector = self_2405;
    let _e2415: MultiVector = other_2149;
    let _e2418: MultiVector = other_2149;
    let _e2421: MultiVector = other_2149;
    let _e2433: MultiVector = self_2405;
    let _e2437: MultiVector = other_2149;
    let _e2440: MultiVector = other_2149;
    let _e2443: MultiVector = other_2149;
    let _e2455: MultiVector = self_2405;
    let _e2459: MultiVector = other_2149;
    let _e2463: MultiVector = self_2405;
    let _e2467: MultiVector = other_2149;
    let _e2470: MultiVector = other_2149;
    let _e2473: MultiVector = other_2149;
    let _e2485: MultiVector = self_2405;
    let _e2489: MultiVector = other_2149;
    let _e2492: MultiVector = other_2149;
    let _e2495: MultiVector = other_2149;
    let _e2507: MultiVector = self_2405;
    let _e2511: MultiVector = other_2149;
    let _e2514: MultiVector = other_2149;
    let _e2517: MultiVector = other_2149;
    let _e2529: MultiVector = self_2405;
    let _e2533: MultiVector = other_2149;
    let _e2536: MultiVector = other_2149;
    let _e2539: MultiVector = other_2149;
    let _e2551: MultiVector = self_2405;
    let _e2555: MultiVector = other_2149;
    let _e2558: MultiVector = other_2149;
    let _e2561: MultiVector = other_2149;
    let _e2573: MultiVector = self_2405;
    let _e2577: MultiVector = other_2149;
    let _e2580: MultiVector = other_2149;
    let _e2583: MultiVector = other_2149;
    let _e2595: MultiVector = self_2405;
    let _e2599: MultiVector = other_2149;
    let _e2602: MultiVector = other_2149;
    let _e2605: MultiVector = other_2149;
    let _e2617: MultiVector = self_2405;
    let _e2621: MultiVector = other_2149;
    let _e2624: MultiVector = other_2149;
    let _e2627: MultiVector = other_2149;
    let _e2639: MultiVector = self_2405;
    let _e2643: MultiVector = other_2149;
    let _e2646: MultiVector = other_2149;
    let _e2649: MultiVector = other_2149;
    let _e2661: MultiVector = self_2405;
    let _e2665: MultiVector = other_2149;
    let _e2668: MultiVector = other_2149;
    let _e2671: MultiVector = other_2149;
    let _e2683: MultiVector = self_2405;
    let _e2687: MultiVector = other_2149;
    let _e2690: MultiVector = other_2149;
    let _e2693: MultiVector = other_2149;
    let _e2705: MultiVector = self_2405;
    let _e2709: MultiVector = other_2149;
    let _e2712: MultiVector = other_2149;
    let _e2715: MultiVector = other_2149;
    let _e2727: MultiVector = self_2405;
    let _e2731: MultiVector = other_2149;
    let _e2734: MultiVector = other_2149;
    let _e2737: MultiVector = other_2149;
    let _e2749: MultiVector = self_2405;
    let _e2753: MultiVector = other_2149;
    let _e2756: MultiVector = other_2149;
    let _e2759: MultiVector = other_2149;
    let _e2771: MultiVector = self_2405;
    let _e2775: MultiVector = other_2149;
    let _e2778: MultiVector = other_2149;
    let _e2781: MultiVector = other_2149;
    let _e2793: MultiVector = self_2405;
    let _e2797: MultiVector = other_2149;
    let _e2800: MultiVector = other_2149;
    let _e2803: MultiVector = other_2149;
    let _e2809: MultiVector = self_2405;
    let _e2813: MultiVector = other_2149;
    let _e2816: MultiVector = other_2149;
    let _e2819: MultiVector = other_2149;
    let _e2832: MultiVector = self_2405;
    let _e2836: MultiVector = other_2149;
    let _e2839: MultiVector = other_2149;
    let _e2842: MultiVector = other_2149;
    let _e2855: MultiVector = self_2405;
    let _e2859: MultiVector = other_2149;
    let _e2862: MultiVector = other_2149;
    let _e2865: MultiVector = other_2149;
    let _e2878: MultiVector = self_2405;
    let _e2882: MultiVector = other_2149;
    let _e2885: MultiVector = other_2149;
    let _e2888: MultiVector = other_2149;
    let _e2894: MultiVector = self_2405;
    let _e2898: MultiVector = other_2149;
    let _e2901: MultiVector = self_2405;
    let _e2905: MultiVector = other_2149;
    let _e2908: MultiVector = other_2149;
    let _e2911: MultiVector = other_2149;
    let _e2917: MultiVector = self_2405;
    let _e2921: MultiVector = other_2149;
    let _e2924: MultiVector = other_2149;
    let _e2927: MultiVector = other_2149;
    let _e2939: MultiVector = self_2405;
    let _e2943: MultiVector = other_2149;
    let _e2946: MultiVector = other_2149;
    let _e2949: MultiVector = other_2149;
    let _e2961: MultiVector = self_2405;
    let _e2965: MultiVector = other_2149;
    let _e2968: MultiVector = other_2149;
    let _e2971: MultiVector = other_2149;
    let _e2983: MultiVector = self_2405;
    let _e2987: MultiVector = other_2149;
    let _e2990: MultiVector = other_2149;
    let _e2993: MultiVector = other_2149;
    let _e3006: MultiVector = self_2405;
    let _e3010: MultiVector = other_2149;
    let _e3013: MultiVector = other_2149;
    let _e3016: MultiVector = other_2149;
    let _e3029: MultiVector = self_2405;
    let _e3033: MultiVector = other_2149;
    let _e3036: MultiVector = other_2149;
    let _e3039: MultiVector = other_2149;
    let _e3052: MultiVector = self_2405;
    let _e3056: MultiVector = other_2149;
    let _e3059: MultiVector = self_2405;
    let _e3063: MultiVector = other_2149;
    let _e3067: MultiVector = self_2405;
    let _e3071: MultiVector = other_2149;
    let _e3074: MultiVector = other_2149;
    let _e3077: MultiVector = other_2149;
    let _e3090: MultiVector = self_2405;
    let _e3094: MultiVector = other_2149;
    let _e3097: MultiVector = other_2149;
    let _e3100: MultiVector = other_2149;
    let _e3113: MultiVector = self_2405;
    let _e3117: MultiVector = other_2149;
    let _e3120: MultiVector = other_2149;
    let _e3123: MultiVector = other_2149;
    let _e3136: MultiVector = self_2405;
    let _e3140: MultiVector = other_2149;
    let _e3143: MultiVector = other_2149;
    let _e3146: MultiVector = other_2149;
    let _e3152: MultiVector = self_2405;
    let _e3156: MultiVector = other_2149;
    let _e3159: MultiVector = other_2149;
    let _e3162: MultiVector = other_2149;
    let _e3174: MultiVector = self_2405;
    let _e3178: MultiVector = other_2149;
    let _e3181: MultiVector = other_2149;
    let _e3184: MultiVector = other_2149;
    let _e3196: MultiVector = self_2405;
    let _e3200: MultiVector = other_2149;
    let _e3203: MultiVector = other_2149;
    let _e3206: MultiVector = other_2149;
    let _e3218: MultiVector = self_2405;
    let _e3222: MultiVector = other_2149;
    let _e3225: MultiVector = other_2149;
    let _e3228: MultiVector = other_2149;
    let _e3240: MultiVector = self_2405;
    let _e3244: MultiVector = other_2149;
    let _e3247: MultiVector = other_2149;
    let _e3250: MultiVector = other_2149;
    let _e3262: MultiVector = self_2405;
    let _e3266: MultiVector = other_2149;
    let _e3269: MultiVector = other_2149;
    let _e3272: MultiVector = other_2149;
    let _e3284: MultiVector = self_2405;
    let _e3288: MultiVector = other_2149;
    let _e3291: MultiVector = other_2149;
    let _e3294: MultiVector = other_2149;
    let _e3306: MultiVector = self_2405;
    let _e3310: MultiVector = other_2149;
    let _e3313: MultiVector = other_2149;
    let _e3316: MultiVector = other_2149;
    let _e3328: MultiVector = self_2405;
    let _e3332: MultiVector = other_2149;
    let _e3335: MultiVector = other_2149;
    let _e3338: MultiVector = other_2149;
    let _e3350: MultiVector = self_2405;
    let _e3354: MultiVector = other_2149;
    let _e3357: MultiVector = other_2149;
    let _e3360: MultiVector = other_2149;
    let _e3366: MultiVector = self_2405;
    let _e3370: MultiVector = other_2149;
    let _e3373: MultiVector = self_2405;
    let _e3377: MultiVector = other_2149;
    let _e3381: MultiVector = self_2405;
    let _e3385: MultiVector = other_2149;
    let _e3398: MultiVector = self_2405;
    let _e3402: MultiVector = other_2149;
    let _e3415: MultiVector = self_2405;
    let _e3419: MultiVector = other_2149;
    let _e3432: MultiVector = self_2405;
    let _e3436: MultiVector = other_2149;
    let _e3439: MultiVector = other_2149;
    let _e3442: MultiVector = other_2149;
    let _e3445: MultiVector = other_2149;
    let _e3458: MultiVector = self_2405;
    let _e3462: MultiVector = other_2149;
    let _e3474: MultiVector = self_2405;
    let _e3478: MultiVector = other_2149;
    let _e3490: MultiVector = self_2405;
    let _e3494: MultiVector = other_2149;
    let _e3506: MultiVector = self_2405;
    let _e3510: MultiVector = other_2149;
    let _e3522: MultiVector = self_2405;
    let _e3526: MultiVector = other_2149;
    let _e3529: MultiVector = other_2149;
    let _e3532: MultiVector = other_2149;
    let _e3535: MultiVector = other_2149;
    let _e3550: MultiVector = self_2405;
    let _e3554: MultiVector = other_2149;
    let _e3557: MultiVector = other_2149;
    let _e3560: MultiVector = other_2149;
    let _e3563: MultiVector = other_2149;
    let _e3577: MultiVector = self_2405;
    let _e3581: MultiVector = other_2149;
    let _e3584: MultiVector = other_2149;
    let _e3587: MultiVector = other_2149;
    let _e3590: MultiVector = other_2149;
    let _e3604: MultiVector = self_2405;
    let _e3608: MultiVector = other_2149;
    let _e3611: MultiVector = other_2149;
    let _e3614: MultiVector = other_2149;
    let _e3617: MultiVector = other_2149;
    let _e3631: MultiVector = self_2405;
    let _e3635: MultiVector = other_2149;
    let _e3648: MultiVector = self_2405;
    let _e3652: MultiVector = other_2149;
    let _e3665: MultiVector = self_2405;
    let _e3669: MultiVector = other_2149;
    let _e3682: MultiVector = self_2405;
    let _e3686: MultiVector = other_2149;
    let _e3689: MultiVector = other_2149;
    let _e3692: MultiVector = other_2149;
    let _e3695: MultiVector = other_2149;
    let _e3709: MultiVector = self_2405;
    let _e3713: MultiVector = other_2149;
    let _e3716: MultiVector = other_2149;
    let _e3719: MultiVector = other_2149;
    let _e3722: MultiVector = other_2149;
    let _e3736: MultiVector = self_2405;
    let _e3740: MultiVector = other_2149;
    let _e3743: MultiVector = other_2149;
    let _e3746: MultiVector = other_2149;
    let _e3749: MultiVector = other_2149;
    let _e3763: MultiVector = self_2405;
    let _e3767: MultiVector = other_2149;
    let _e3780: MultiVector = self_2405;
    let _e3784: MultiVector = other_2149;
    let _e3797: MultiVector = self_2405;
    let _e3801: MultiVector = other_2149;
    let _e3814: MultiVector = self_2405;
    let _e3818: MultiVector = other_2149;
    let _e3821: MultiVector = other_2149;
    let _e3824: MultiVector = other_2149;
    let _e3827: MultiVector = other_2149;
    let _e3840: MultiVector = self_2405;
    let _e3844: MultiVector = other_2149;
    let _e3847: MultiVector = other_2149;
    let _e3850: MultiVector = other_2149;
    let _e3853: MultiVector = other_2149;
    let _e3866: MultiVector = self_2405;
    let _e3870: MultiVector = other_2149;
    let _e3873: MultiVector = other_2149;
    let _e3876: MultiVector = other_2149;
    let _e3879: MultiVector = other_2149;
    let _e3892: MultiVector = self_2405;
    let _e3896: MultiVector = other_2149;
    let _e3908: MultiVector = self_2405;
    let _e3912: MultiVector = other_2149;
    let _e3915: MultiVector = other_2149;
    let _e3918: MultiVector = other_2149;
    let _e3921: MultiVector = other_2149;
    let _e3936: MultiVector = self_2405;
    let _e3940: MultiVector = other_2149;
    let _e3943: MultiVector = other_2149;
    let _e3946: MultiVector = other_2149;
    let _e3949: MultiVector = other_2149;
    let _e3964: MultiVector = self_2405;
    let _e3968: MultiVector = other_2149;
    let _e3971: MultiVector = other_2149;
    let _e3974: MultiVector = other_2149;
    let _e3977: MultiVector = other_2149;
    let _e3992: MultiVector = self_2405;
    let _e3996: MultiVector = other_2149;
    let _e4009: MultiVector = self_2405;
    let _e4013: MultiVector = other_2149;
    let _e4024: MultiVector = self_2405;
    let _e4028: MultiVector = other_2149;
    let _e4031: MultiVector = self_2405;
    let _e4035: MultiVector = other_2149;
    let _e4048: MultiVector = self_2405;
    let _e4052: MultiVector = other_2149;
    let _e4065: MultiVector = self_2405;
    let _e4069: MultiVector = other_2149;
    let _e4082: MultiVector = self_2405;
    let _e4086: MultiVector = other_2149;
    let _e4089: MultiVector = other_2149;
    let _e4092: MultiVector = other_2149;
    let _e4095: MultiVector = other_2149;
    let _e4108: MultiVector = self_2405;
    let _e4112: MultiVector = other_2149;
    let _e4115: MultiVector = other_2149;
    let _e4118: MultiVector = other_2149;
    let _e4121: MultiVector = other_2149;
    let _e4135: MultiVector = self_2405;
    let _e4139: MultiVector = other_2149;
    let _e4142: MultiVector = other_2149;
    let _e4145: MultiVector = other_2149;
    let _e4148: MultiVector = other_2149;
    let _e4162: MultiVector = self_2405;
    let _e4166: MultiVector = other_2149;
    let _e4169: MultiVector = other_2149;
    let _e4172: MultiVector = other_2149;
    let _e4175: MultiVector = other_2149;
    let _e4189: MultiVector = self_2405;
    let _e4193: MultiVector = other_2149;
    let _e4206: MultiVector = self_2405;
    let _e4210: MultiVector = other_2149;
    let _e4223: MultiVector = self_2405;
    let _e4227: MultiVector = other_2149;
    let _e4240: MultiVector = self_2405;
    let _e4244: MultiVector = other_2149;
    let _e4247: MultiVector = other_2149;
    let _e4250: MultiVector = other_2149;
    let _e4253: MultiVector = other_2149;
    let _e4266: MultiVector = self_2405;
    let _e4270: MultiVector = other_2149;
    let _e4273: MultiVector = other_2149;
    let _e4276: MultiVector = other_2149;
    let _e4279: MultiVector = other_2149;
    let _e4292: MultiVector = self_2405;
    let _e4296: MultiVector = other_2149;
    let _e4299: MultiVector = other_2149;
    let _e4302: MultiVector = other_2149;
    let _e4305: MultiVector = other_2149;
    let _e4318: MultiVector = self_2405;
    let _e4322: MultiVector = other_2149;
    let _e4334: MultiVector = self_2405;
    let _e4337: MultiVector = self_2405;
    let _e4340: MultiVector = self_2405;
    let _e4343: MultiVector = self_2405;
    let _e4347: MultiVector = other_2149;
    return MultiVector((((((((((((((((((((((((((((((((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g2_.y, _e11.g0_.z, _e14.g2_.y)) * vec3<f32>(1.0, 1.0, 0.0)) + (vec3<f32>(_e24.g0_.z) * _e28.g0_)) + ((vec3<f32>(_e32.g1_.x) * vec3<f32>(_e36.g9_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e47.g1_.y) * vec3<f32>(_e51.g9_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e62.g1_.z) * vec3<f32>(_e66.g9_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e77.g2_.x) * vec3<f32>(_e81.g9_.w, _e84.g3_.w, _e87.g9_.w)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e99.g2_.y) * vec3<f32>(_e103.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e114.g3_.x) * vec3<f32>(_e118.g8_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e130.g3_.y) * vec3<f32>(_e134.g8_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e146.g3_.z) * vec3<f32>(_e150.g8_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e162.g3_.w) * vec3<f32>(_e166.g8_.w, _e169.g2_.x, _e172.g3_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e185.g4_.x) * vec3<f32>(_e189.g7_.x, _e192.g6_.x, _e195.g7_.x)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e208.g4_.y) * vec3<f32>(_e212.g7_.y, _e215.g6_.y, _e218.g7_.y)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e231.g4_.z) * vec3<f32>(_e235.g7_.z, _e238.g6_.z, _e241.g7_.z)) * vec3<f32>(-(1.0), -(1.0), 0.0))) + ((vec3<f32>(_e254.g5_.x) * vec3<f32>(_e258.g6_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e270.g5_.y) * vec3<f32>(_e274.g6_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e286.g5_.z) * vec3<f32>(_e290.g6_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) - (vec3<f32>(_e302.g6_.x) * vec3<f32>(_e306.g5_.x, _e309.g4_.x, _e312.g6_.x))) - (vec3<f32>(_e318.g6_.y) * vec3<f32>(_e322.g5_.y, _e325.g4_.y, _e328.g6_.y))) - (vec3<f32>(_e334.g6_.z) * vec3<f32>(_e338.g5_.z, _e341.g4_.z, _e344.g6_.z))) + ((vec3<f32>(_e350.g7_.x) * vec3<f32>(_e354.g4_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e366.g7_.y) * vec3<f32>(_e370.g4_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e382.g7_.z) * vec3<f32>(_e386.g4_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e398.g8_.x) * vec3<f32>(_e402.g3_.x, _e405.g9_.x, _e408.g3_.x)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e420.g8_.y) * vec3<f32>(_e424.g3_.y, _e427.g9_.y, _e430.g3_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e442.g8_.z) * vec3<f32>(_e446.g3_.z, _e449.g9_.z, _e452.g3_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e464.g8_.w) * vec3<f32>(_e468.g3_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e480.g9_.x) * vec3<f32>(_e484.g1_.x, _e487.g8_.x, _e490.g9_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e502.g9_.y) * vec3<f32>(_e506.g1_.y, _e509.g8_.y, _e512.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e524.g9_.z) * vec3<f32>(_e528.g1_.z, _e531.g8_.z, _e534.g9_.z)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e546.g9_.w) * vec3<f32>(_e550.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e561.g0_.x) * _e565.g0_.zxx) * vec3<f32>(1.0, 0.0, 0.0))), ((((((((((((((((((((((((((((((((vec3<f32>(_e575.g0_.x) * vec3<f32>(_e579.g9_.x, _e582.g9_.y, _e585.g9_.z)) + (vec3<f32>(_e590.g0_.y) * vec3<f32>(_e594.g3_.x, _e597.g3_.y, _e600.g3_.z))) + (vec3<f32>(_e606.g0_.z) * _e610.g1_)) + ((vec3<f32>(_e614.g1_.x) * vec3<f32>(_e618.g0_.z, _e621.g6_.z, _e624.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e636.g1_.y) * vec3<f32>(_e640.g6_.z, _e643.g0_.z, _e646.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e658.g1_.z) * vec3<f32>(_e662.g6_.y, _e665.g6_.x, _e668.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e680.g2_.x) * _e684.g7_)) + (vec3<f32>(_e688.g2_.y) * vec3<f32>(_e692.g8_.x, _e695.g8_.y, _e698.g8_.z))) + ((vec3<f32>(_e704.g3_.x) * vec3<f32>(_e708.g0_.y, _e711.g4_.z, _e714.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e727.g3_.y) * vec3<f32>(_e731.g4_.z, _e734.g0_.y, _e737.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e750.g3_.z) * vec3<f32>(_e754.g4_.y, _e757.g4_.x, _e760.g0_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e773.g3_.w) * _e777.g5_)) + ((vec3<f32>(_e781.g4_.x) * vec3<f32>(_e785.g9_.w, _e788.g3_.z, _e791.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e803.g4_.y) * vec3<f32>(_e807.g3_.z, _e810.g9_.w, _e813.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e825.g4_.z) * vec3<f32>(_e829.g3_.y, _e832.g3_.x, _e835.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e847.g5_.x) * vec3<f32>(_e851.g3_.w, _e854.g9_.z, _e857.g9_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e869.g5_.y) * vec3<f32>(_e873.g9_.z, _e876.g3_.w, _e879.g9_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e891.g5_.z) * vec3<f32>(_e895.g9_.y, _e898.g9_.x, _e901.g3_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e913.g6_.x) * vec3<f32>(_e917.g8_.w, _e920.g1_.z, _e923.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e935.g6_.y) * vec3<f32>(_e939.g1_.z, _e942.g8_.w, _e945.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e957.g6_.z) * vec3<f32>(_e961.g1_.y, _e964.g1_.x, _e967.g8_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e979.g7_.x) * vec3<f32>(_e983.g2_.x, _e986.g8_.z, _e989.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1001.g7_.y) * vec3<f32>(_e1005.g8_.z, _e1008.g2_.x, _e1011.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1023.g7_.z) * vec3<f32>(_e1027.g8_.y, _e1030.g8_.x, _e1033.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1045.g8_.x) * vec3<f32>(_e1049.g2_.y, _e1052.g7_.z, _e1055.g7_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e1068.g8_.y) * vec3<f32>(_e1072.g7_.z, _e1075.g2_.y, _e1078.g7_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e1091.g8_.z) * vec3<f32>(_e1095.g7_.y, _e1098.g7_.x, _e1101.g2_.y)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e1114.g8_.w) * _e1118.g6_)) + ((vec3<f32>(_e1122.g9_.x) * vec3<f32>(_e1126.g0_.x, _e1129.g5_.z, _e1132.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1144.g9_.y) * vec3<f32>(_e1148.g5_.z, _e1151.g0_.x, _e1154.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1166.g9_.z) * vec3<f32>(_e1170.g5_.y, _e1173.g5_.x, _e1176.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e1188.g9_.w) * _e1192.g4_)), ((((((((((((((((((((((((vec2<f32>(_e1196.g0_.z) * _e1200.g2_) + ((vec2<f32>(_e1203.g2_.x) * vec2<f32>(_e1207.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e1217.g2_.y) * vec2<f32>(_e1221.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e1231.g3_.x) * vec2<f32>(_e1235.g9_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e1245.g3_.y) * vec2<f32>(_e1249.g9_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e1259.g3_.z) * vec2<f32>(_e1263.g9_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e1273.g3_.w) * vec2<f32>(_e1277.g0_.y, _e1280.g9_.w)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e1291.g4_.x) * vec2<f32>(_e1295.g9_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1306.g4_.y) * vec2<f32>(_e1310.g9_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1321.g4_.z) * vec2<f32>(_e1325.g9_.z)) * vec2<f32>(-(1.0), 0.0))) - (vec2<f32>(_e1336.g6_.x) * vec2<f32>(_e1340.g8_.x, _e1343.g7_.x))) - (vec2<f32>(_e1349.g6_.y) * vec2<f32>(_e1353.g8_.y, _e1356.g7_.y))) - (vec2<f32>(_e1362.g6_.z) * vec2<f32>(_e1366.g8_.z, _e1369.g7_.z))) + ((vec2<f32>(_e1375.g7_.x) * vec2<f32>(_e1379.g6_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1390.g7_.y) * vec2<f32>(_e1394.g6_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1405.g7_.z) * vec2<f32>(_e1409.g6_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1420.g8_.x) * vec2<f32>(_e1424.g6_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1435.g8_.y) * vec2<f32>(_e1439.g6_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1450.g8_.z) * vec2<f32>(_e1454.g6_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e1465.g9_.x) * vec2<f32>(_e1469.g4_.x, _e1472.g3_.x)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1483.g9_.y) * vec2<f32>(_e1487.g4_.y, _e1490.g3_.y)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1501.g9_.z) * vec2<f32>(_e1505.g4_.z, _e1508.g3_.z)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e1519.g9_.w) * vec2<f32>(_e1523.g3_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e1534.g0_.y, _e1537.g0_.x) * vec2<f32>(_e1541.g3_.w, _e1544.g3_.x)) * vec2<f32>(1.0, 0.0))), ((((((((((((((((vec4<f32>(_e1554.g0_.z) * _e1558.g3_) + ((vec4<f32>(_e1561.g3_.x) * vec4<f32>(_e1565.g0_.z, _e1568.g6_.z, _e1571.g6_.y, _e1574.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1587.g3_.y) * vec4<f32>(_e1591.g6_.z, _e1594.g0_.z, _e1597.g6_.x, _e1600.g6_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1613.g3_.z) * vec4<f32>(_e1617.g6_.y, _e1620.g6_.x, _e1623.g0_.z, _e1626.g6_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1639.g3_.w) * vec4<f32>(_e1643.g7_.x, _e1646.g7_.y, _e1649.g7_.z, _e1652.g0_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e1667.g6_.x) * vec4<f32>(_e1671.g9_.w, _e1674.g3_.z, _e1677.g3_.y, _e1680.g9_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1694.g6_.y) * vec4<f32>(_e1698.g3_.z, _e1701.g9_.w, _e1704.g3_.x, _e1707.g9_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1721.g6_.z) * vec4<f32>(_e1725.g3_.y, _e1728.g3_.x, _e1731.g9_.w, _e1734.g9_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1748.g7_.x) * vec4<f32>(_e1752.g3_.w, _e1755.g9_.z, _e1758.g9_.y, _e1761.g3_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1774.g7_.y) * vec4<f32>(_e1778.g9_.z, _e1781.g3_.w, _e1784.g9_.x, _e1787.g9_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1800.g7_.z) * vec4<f32>(_e1804.g9_.y, _e1807.g9_.x, _e1810.g3_.w, _e1813.g9_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1826.g9_.x) * vec4<f32>(_e1830.g2_.y, _e1833.g7_.z, _e1836.g7_.y, _e1839.g6_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1854.g9_.y) * vec4<f32>(_e1858.g7_.z, _e1861.g2_.y, _e1864.g7_.x, _e1867.g6_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1882.g9_.z) * vec4<f32>(_e1886.g7_.y, _e1889.g7_.x, _e1892.g2_.y, _e1895.g6_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e1910.g9_.w) * vec4<f32>(_e1914.g6_.x, _e1917.g6_.y, _e1920.g6_.z, _e1923.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1935.g2_.y, _e1938.g2_.y, _e1941.g2_.y, _e1944.g2_.x) * _e1948.g9_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((((((((((((vec3<f32>(_e1959.g0_.y) * _e1963.g6_) + (vec3<f32>(_e1966.g0_.z) * _e1970.g4_)) - (vec3<f32>(_e1974.g2_.x) * vec3<f32>(_e1978.g9_.x, _e1981.g9_.y, _e1984.g9_.z))) + (vec3<f32>(_e1990.g3_.w) * vec3<f32>(_e1994.g8_.x, _e1997.g8_.y, _e2000.g8_.z))) + ((vec3<f32>(_e2006.g4_.x) * vec3<f32>(_e2010.g0_.z, _e2013.g6_.z, _e2016.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2028.g4_.y) * vec3<f32>(_e2032.g6_.z, _e2035.g0_.z, _e2038.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2050.g4_.z) * vec3<f32>(_e2054.g6_.y, _e2057.g6_.x, _e2060.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2072.g6_.x) * vec3<f32>(_e2076.g0_.y, _e2079.g4_.z, _e2082.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2094.g6_.y) * vec3<f32>(_e2098.g4_.z, _e2101.g0_.y, _e2104.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2116.g6_.z) * vec3<f32>(_e2120.g4_.y, _e2123.g4_.x, _e2126.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2138.g8_.x) * vec3<f32>(_e2142.g3_.w, _e2145.g9_.z, _e2148.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e2161.g8_.y) * vec3<f32>(_e2165.g9_.z, _e2168.g3_.w, _e2171.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2184.g8_.z) * vec3<f32>(_e2188.g9_.y, _e2191.g9_.x, _e2194.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e2207.g9_.x) * vec3<f32>(_e2211.g2_.x, _e2214.g8_.z, _e2217.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2229.g9_.y) * vec3<f32>(_e2233.g8_.z, _e2236.g2_.x, _e2239.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2251.g9_.z) * vec3<f32>(_e2255.g8_.y, _e2258.g8_.x, _e2261.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((((((((((((((((((((((((((vec3<f32>(_e2273.g0_.x) * _e2277.g6_) + (vec3<f32>(_e2280.g0_.y) * _e2284.g7_)) + (vec3<f32>(_e2288.g0_.z) * _e2292.g5_)) + ((vec3<f32>(_e2296.g1_.x) * vec3<f32>(_e2300.g3_.w, _e2303.g9_.z, _e2306.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e2319.g1_.y) * vec3<f32>(_e2323.g9_.z, _e2326.g3_.w, _e2329.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2342.g1_.z) * vec3<f32>(_e2346.g9_.y, _e2349.g9_.x, _e2352.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e2365.g2_.x) * vec3<f32>(_e2369.g3_.x, _e2372.g3_.y, _e2375.g3_.z))) + (vec3<f32>(_e2381.g2_.y) * _e2385.g4_)) + ((vec3<f32>(_e2389.g3_.x) * vec3<f32>(_e2393.g2_.x, _e2396.g8_.z, _e2399.g8_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2411.g3_.y) * vec3<f32>(_e2415.g8_.z, _e2418.g2_.x, _e2421.g8_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2433.g3_.z) * vec3<f32>(_e2437.g8_.y, _e2440.g8_.x, _e2443.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e2455.g3_.w) * _e2459.g1_)) + ((vec3<f32>(_e2463.g4_.x) * vec3<f32>(_e2467.g2_.y, _e2470.g7_.z, _e2473.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2485.g4_.y) * vec3<f32>(_e2489.g7_.z, _e2492.g2_.y, _e2495.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2507.g4_.z) * vec3<f32>(_e2511.g7_.y, _e2514.g7_.x, _e2517.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2529.g5_.x) * vec3<f32>(_e2533.g0_.z, _e2536.g6_.z, _e2539.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2551.g5_.y) * vec3<f32>(_e2555.g6_.z, _e2558.g0_.z, _e2561.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2573.g5_.z) * vec3<f32>(_e2577.g6_.y, _e2580.g6_.x, _e2583.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2595.g6_.x) * vec3<f32>(_e2599.g0_.x, _e2602.g5_.z, _e2605.g5_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2617.g6_.y) * vec3<f32>(_e2621.g5_.z, _e2624.g0_.x, _e2627.g5_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2639.g6_.z) * vec3<f32>(_e2643.g5_.y, _e2646.g5_.x, _e2649.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2661.g7_.x) * vec3<f32>(_e2665.g0_.y, _e2668.g4_.z, _e2671.g4_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2683.g7_.y) * vec3<f32>(_e2687.g4_.z, _e2690.g0_.y, _e2693.g4_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2705.g7_.z) * vec3<f32>(_e2709.g4_.y, _e2712.g4_.x, _e2715.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2727.g8_.x) * vec3<f32>(_e2731.g9_.w, _e2734.g3_.z, _e2737.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2749.g8_.y) * vec3<f32>(_e2753.g3_.z, _e2756.g9_.w, _e2759.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2771.g8_.z) * vec3<f32>(_e2775.g3_.y, _e2778.g3_.x, _e2781.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e2793.g8_.w) * vec3<f32>(_e2797.g9_.x, _e2800.g9_.y, _e2803.g9_.z))) + ((vec3<f32>(_e2809.g9_.x) * vec3<f32>(_e2813.g8_.w, _e2816.g1_.z, _e2819.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e2832.g9_.y) * vec3<f32>(_e2836.g1_.z, _e2839.g8_.w, _e2842.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e2855.g9_.z) * vec3<f32>(_e2859.g1_.y, _e2862.g1_.x, _e2865.g8_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e2878.g9_.w) * vec3<f32>(_e2882.g8_.x, _e2885.g8_.y, _e2888.g8_.z))), ((((((((vec3<f32>(_e2894.g0_.z) * _e2898.g6_) - (vec3<f32>(_e2901.g3_.w) * vec3<f32>(_e2905.g9_.x, _e2908.g9_.y, _e2911.g9_.z))) + ((vec3<f32>(_e2917.g6_.x) * vec3<f32>(_e2921.g0_.z, _e2924.g6_.z, _e2927.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e2939.g6_.y) * vec3<f32>(_e2943.g6_.z, _e2946.g0_.z, _e2949.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e2961.g6_.z) * vec3<f32>(_e2965.g6_.y, _e2968.g6_.x, _e2971.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e2983.g9_.x) * vec3<f32>(_e2987.g3_.w, _e2990.g9_.z, _e2993.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e3006.g9_.y) * vec3<f32>(_e3010.g9_.z, _e3013.g3_.w, _e3016.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e3029.g9_.z) * vec3<f32>(_e3033.g9_.y, _e3036.g9_.x, _e3039.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), ((((((((((((((((vec3<f32>(_e3052.g0_.z) * _e3056.g7_) + (vec3<f32>(_e3059.g2_.y) * _e3063.g6_)) + ((vec3<f32>(_e3067.g3_.x) * vec3<f32>(_e3071.g3_.w, _e3074.g9_.z, _e3077.g9_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e3090.g3_.y) * vec3<f32>(_e3094.g9_.z, _e3097.g3_.w, _e3100.g9_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e3113.g3_.z) * vec3<f32>(_e3117.g9_.y, _e3120.g9_.x, _e3123.g3_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e3136.g3_.w) * vec3<f32>(_e3140.g3_.x, _e3143.g3_.y, _e3146.g3_.z))) + ((vec3<f32>(_e3152.g6_.x) * vec3<f32>(_e3156.g2_.y, _e3159.g7_.z, _e3162.g7_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e3174.g6_.y) * vec3<f32>(_e3178.g7_.z, _e3181.g2_.y, _e3184.g7_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e3196.g6_.z) * vec3<f32>(_e3200.g7_.y, _e3203.g7_.x, _e3206.g2_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e3218.g7_.x) * vec3<f32>(_e3222.g0_.z, _e3225.g6_.z, _e3228.g6_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e3240.g7_.y) * vec3<f32>(_e3244.g6_.z, _e3247.g0_.z, _e3250.g6_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e3262.g7_.z) * vec3<f32>(_e3266.g6_.y, _e3269.g6_.x, _e3272.g0_.z)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e3284.g9_.x) * vec3<f32>(_e3288.g9_.w, _e3291.g3_.z, _e3294.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e3306.g9_.y) * vec3<f32>(_e3310.g3_.z, _e3313.g9_.w, _e3316.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e3328.g9_.z) * vec3<f32>(_e3332.g3_.y, _e3335.g3_.x, _e3338.g9_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e3350.g9_.w) * vec3<f32>(_e3354.g9_.x, _e3357.g9_.y, _e3360.g9_.z))), ((((((((((((((((((((((((((((((((vec4<f32>(_e3366.g0_.y) * _e3370.g9_) + (vec4<f32>(_e3373.g0_.z) * _e3377.g8_)) + ((vec4<f32>(_e3381.g1_.x) * vec4<f32>(_e3385.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3398.g1_.y) * vec4<f32>(_e3402.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3415.g1_.z) * vec4<f32>(_e3419.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3432.g2_.x) * vec4<f32>(_e3436.g6_.x, _e3439.g6_.y, _e3442.g6_.z, _e3445.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3458.g2_.y) * vec4<f32>(_e3462.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e3474.g3_.x) * vec4<f32>(_e3478.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e3490.g3_.y) * vec4<f32>(_e3494.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e3506.g3_.z) * vec4<f32>(_e3510.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e3522.g3_.w) * vec4<f32>(_e3526.g4_.x, _e3529.g4_.y, _e3532.g4_.z, _e3535.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e3550.g4_.x) * vec4<f32>(_e3554.g3_.w, _e3557.g9_.z, _e3560.g9_.y, _e3563.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3577.g4_.y) * vec4<f32>(_e3581.g9_.z, _e3584.g3_.w, _e3587.g9_.x, _e3590.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3604.g4_.z) * vec4<f32>(_e3608.g9_.y, _e3611.g9_.x, _e3614.g3_.w, _e3617.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3631.g5_.x) * vec4<f32>(_e3635.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3648.g5_.y) * vec4<f32>(_e3652.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3665.g5_.z) * vec4<f32>(_e3669.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3682.g6_.x) * vec4<f32>(_e3686.g2_.x, _e3689.g8_.z, _e3692.g8_.y, _e3695.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3709.g6_.y) * vec4<f32>(_e3713.g8_.z, _e3716.g2_.x, _e3719.g8_.x, _e3722.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3736.g6_.z) * vec4<f32>(_e3740.g8_.y, _e3743.g8_.x, _e3746.g2_.x, _e3749.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e3763.g7_.x) * vec4<f32>(_e3767.g8_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3780.g7_.y) * vec4<f32>(_e3784.g8_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3797.g7_.z) * vec4<f32>(_e3801.g8_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e3814.g8_.x) * vec4<f32>(_e3818.g0_.z, _e3821.g6_.z, _e3824.g6_.y, _e3827.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e3840.g8_.y) * vec4<f32>(_e3844.g6_.z, _e3847.g0_.z, _e3850.g6_.x, _e3853.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e3866.g8_.z) * vec4<f32>(_e3870.g6_.y, _e3873.g6_.x, _e3876.g0_.z, _e3879.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e3892.g8_.w) * vec4<f32>(_e3896.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e3908.g9_.x) * vec4<f32>(_e3912.g0_.y, _e3915.g4_.z, _e3918.g4_.y, _e3921.g5_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e3936.g9_.y) * vec4<f32>(_e3940.g4_.z, _e3943.g0_.y, _e3946.g4_.x, _e3949.g5_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e3964.g9_.z) * vec4<f32>(_e3968.g4_.y, _e3971.g4_.x, _e3974.g0_.y, _e3977.g5_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e3992.g9_.w) * vec4<f32>(_e3996.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4009.g0_.x) * _e4013.g3_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((((((((((vec4<f32>(_e4024.g0_.z) * _e4028.g9_) + ((vec4<f32>(_e4031.g3_.x) * vec4<f32>(_e4035.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4048.g3_.y) * vec4<f32>(_e4052.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4065.g3_.z) * vec4<f32>(_e4069.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4082.g3_.w) * vec4<f32>(_e4086.g6_.x, _e4089.g6_.y, _e4092.g6_.z, _e4095.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e4108.g6_.x) * vec4<f32>(_e4112.g3_.w, _e4115.g9_.z, _e4118.g9_.y, _e4121.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e4135.g6_.y) * vec4<f32>(_e4139.g9_.z, _e4142.g3_.w, _e4145.g9_.x, _e4148.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e4162.g6_.z) * vec4<f32>(_e4166.g9_.y, _e4169.g9_.x, _e4172.g3_.w, _e4175.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e4189.g7_.x) * vec4<f32>(_e4193.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4206.g7_.y) * vec4<f32>(_e4210.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4223.g7_.z) * vec4<f32>(_e4227.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e4240.g9_.x) * vec4<f32>(_e4244.g0_.z, _e4247.g6_.z, _e4250.g6_.y, _e4253.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e4266.g9_.y) * vec4<f32>(_e4270.g6_.z, _e4273.g0_.z, _e4276.g6_.x, _e4279.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e4292.g9_.z) * vec4<f32>(_e4296.g6_.y, _e4299.g6_.x, _e4302.g0_.z, _e4305.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e4318.g9_.w) * vec4<f32>(_e4322.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e4334.g2_.x, _e4337.g2_.x, _e4340.g2_.x, _e4343.g2_.y) * _e4347.g3_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_inner_anti_product(self_2406: MultiVector, other_2150: MultiVector) -> MultiVector {
    var self_2407: MultiVector;
    var other_2151: MultiVector;

    self_2407 = self_2406;
    other_2151 = other_2150;
    let _e4: MultiVector = self_2407;
    let _e8: MultiVector = other_2151;
    let _e11: MultiVector = self_2407;
    let _e15: MultiVector = other_2151;
    let _e27: MultiVector = self_2407;
    let _e31: MultiVector = other_2151;
    let _e34: MultiVector = other_2151;
    let _e37: MultiVector = other_2151;
    let _e49: MultiVector = self_2407;
    let _e53: MultiVector = other_2151;
    let _e65: MultiVector = self_2407;
    let _e69: MultiVector = other_2151;
    let _e81: MultiVector = self_2407;
    let _e85: MultiVector = other_2151;
    let _e97: MultiVector = self_2407;
    let _e101: MultiVector = other_2151;
    let _e104: MultiVector = other_2151;
    let _e107: MultiVector = other_2151;
    let _e120: MultiVector = self_2407;
    let _e124: MultiVector = other_2151;
    let _e127: MultiVector = other_2151;
    let _e130: MultiVector = other_2151;
    let _e143: MultiVector = self_2407;
    let _e147: MultiVector = other_2151;
    let _e150: MultiVector = other_2151;
    let _e153: MultiVector = other_2151;
    let _e166: MultiVector = self_2407;
    let _e170: MultiVector = other_2151;
    let _e181: MultiVector = self_2407;
    let _e185: MultiVector = other_2151;
    let _e196: MultiVector = self_2407;
    let _e200: MultiVector = other_2151;
    let _e211: MultiVector = self_2407;
    let _e215: MultiVector = other_2151;
    let _e218: MultiVector = other_2151;
    let _e221: MultiVector = other_2151;
    let _e233: MultiVector = self_2407;
    let _e237: MultiVector = other_2151;
    let _e240: MultiVector = other_2151;
    let _e243: MultiVector = other_2151;
    let _e255: MultiVector = self_2407;
    let _e259: MultiVector = other_2151;
    let _e262: MultiVector = other_2151;
    let _e265: MultiVector = other_2151;
    let _e277: MultiVector = self_2407;
    let _e280: MultiVector = other_2151;
    let _e290: MultiVector = self_2407;
    let _e294: MultiVector = other_2151;
    let _e297: MultiVector = other_2151;
    let _e300: MultiVector = other_2151;
    let _e305: MultiVector = self_2407;
    let _e309: MultiVector = other_2151;
    let _e313: MultiVector = self_2407;
    let _e317: MultiVector = other_2151;
    let _e328: MultiVector = self_2407;
    let _e332: MultiVector = other_2151;
    let _e343: MultiVector = self_2407;
    let _e347: MultiVector = other_2151;
    let _e358: MultiVector = self_2407;
    let _e360: MultiVector = other_2151;
    let _e366: MultiVector = self_2407;
    let _e370: MultiVector = other_2151;
    let _e373: MultiVector = self_2407;
    let _e375: MultiVector = other_2151;
    let _e381: MultiVector = self_2407;
    let _e385: MultiVector = other_2151;
    let _e388: MultiVector = self_2407;
    let _e392: MultiVector = other_2151;
    let _e404: MultiVector = self_2407;
    let _e408: MultiVector = other_2151;
    let _e420: MultiVector = self_2407;
    let _e424: MultiVector = other_2151;
    let _e436: MultiVector = self_2407;
    let _e440: MultiVector = other_2151;
    let _e452: MultiVector = self_2407;
    let _e456: MultiVector = other_2151;
    let _e469: MultiVector = self_2407;
    let _e473: MultiVector = other_2151;
    let _e486: MultiVector = self_2407;
    let _e490: MultiVector = other_2151;
    let _e503: MultiVector = self_2407;
    let _e506: MultiVector = self_2407;
    let _e509: MultiVector = self_2407;
    let _e512: MultiVector = self_2407;
    let _e516: MultiVector = other_2151;
    let _e527: MultiVector = self_2407;
    let _e531: MultiVector = other_2151;
    let _e534: MultiVector = self_2407;
    let _e538: MultiVector = other_2151;
    let _e541: MultiVector = other_2151;
    let _e544: MultiVector = other_2151;
    let _e550: MultiVector = self_2407;
    let _e554: MultiVector = other_2151;
    let _e565: MultiVector = self_2407;
    let _e569: MultiVector = other_2151;
    let _e580: MultiVector = self_2407;
    let _e584: MultiVector = other_2151;
    let _e595: MultiVector = self_2407;
    let _e597: MultiVector = other_2151;
    let _e603: MultiVector = self_2407;
    let _e607: MultiVector = other_2151;
    let _e610: MultiVector = self_2407;
    let _e614: MultiVector = other_2151;
    let _e618: MultiVector = self_2407;
    let _e622: MultiVector = other_2151;
    let _e625: MultiVector = other_2151;
    let _e628: MultiVector = other_2151;
    let _e640: MultiVector = self_2407;
    let _e644: MultiVector = other_2151;
    let _e647: MultiVector = other_2151;
    let _e650: MultiVector = other_2151;
    let _e662: MultiVector = self_2407;
    let _e666: MultiVector = other_2151;
    let _e677: MultiVector = self_2407;
    let _e681: MultiVector = other_2151;
    let _e692: MultiVector = self_2407;
    let _e696: MultiVector = other_2151;
    let _e707: MultiVector = self_2407;
    let _e711: MultiVector = other_2151;
    let _e722: MultiVector = self_2407;
    let _e726: MultiVector = other_2151;
    let _e737: MultiVector = self_2407;
    let _e741: MultiVector = other_2151;
    let _e752: MultiVector = self_2407;
    let _e756: MultiVector = other_2151;
    let _e767: MultiVector = self_2407;
    let _e771: MultiVector = other_2151;
    let _e782: MultiVector = self_2407;
    let _e786: MultiVector = other_2151;
    let _e797: MultiVector = self_2407;
    let _e801: MultiVector = other_2151;
    let _e804: MultiVector = other_2151;
    let _e807: MultiVector = other_2151;
    let _e819: MultiVector = self_2407;
    let _e823: MultiVector = other_2151;
    let _e826: MultiVector = self_2407;
    let _e830: MultiVector = other_2151;
    let _e833: MultiVector = other_2151;
    let _e836: MultiVector = other_2151;
    let _e842: MultiVector = self_2407;
    let _e846: MultiVector = other_2151;
    let _e858: MultiVector = self_2407;
    let _e862: MultiVector = other_2151;
    let _e874: MultiVector = self_2407;
    let _e878: MultiVector = other_2151;
    let _e890: MultiVector = self_2407;
    let _e892: MultiVector = other_2151;
    let _e898: MultiVector = self_2407;
    let _e902: MultiVector = other_2151;
    let _e905: MultiVector = self_2407;
    let _e909: MultiVector = other_2151;
    let _e913: MultiVector = self_2407;
    let _e917: MultiVector = other_2151;
    let _e920: MultiVector = other_2151;
    let _e923: MultiVector = other_2151;
    let _e935: MultiVector = self_2407;
    let _e939: MultiVector = other_2151;
    let _e942: MultiVector = other_2151;
    let _e945: MultiVector = other_2151;
    let _e957: MultiVector = self_2407;
    let _e961: MultiVector = other_2151;
    let _e972: MultiVector = self_2407;
    let _e976: MultiVector = other_2151;
    let _e987: MultiVector = self_2407;
    let _e991: MultiVector = other_2151;
    let _e1002: MultiVector = self_2407;
    let _e1006: MultiVector = other_2151;
    let _e1017: MultiVector = self_2407;
    let _e1021: MultiVector = other_2151;
    let _e1032: MultiVector = self_2407;
    let _e1036: MultiVector = other_2151;
    let _e1047: MultiVector = self_2407;
    let _e1051: MultiVector = other_2151;
    let _e1054: MultiVector = other_2151;
    let _e1057: MultiVector = other_2151;
    let _e1069: MultiVector = self_2407;
    let _e1073: MultiVector = other_2151;
    let _e1076: MultiVector = other_2151;
    let _e1079: MultiVector = other_2151;
    let _e1091: MultiVector = self_2407;
    let _e1095: MultiVector = other_2151;
    let _e1098: MultiVector = other_2151;
    let _e1101: MultiVector = other_2151;
    let _e1113: MultiVector = self_2407;
    let _e1117: MultiVector = other_2151;
    let _e1120: MultiVector = other_2151;
    let _e1123: MultiVector = other_2151;
    let _e1135: MultiVector = self_2407;
    let _e1139: MultiVector = other_2151;
    let _e1142: MultiVector = self_2407;
    let _e1146: MultiVector = other_2151;
    let _e1159: MultiVector = self_2407;
    let _e1163: MultiVector = other_2151;
    let _e1176: MultiVector = self_2407;
    let _e1180: MultiVector = other_2151;
    let _e1193: MultiVector = self_2407;
    let _e1197: MultiVector = other_2151;
    let _e1200: MultiVector = other_2151;
    let _e1203: MultiVector = other_2151;
    let _e1206: MultiVector = other_2151;
    let _e1218: MultiVector = self_2407;
    let _e1222: MultiVector = other_2151;
    let _e1234: MultiVector = self_2407;
    let _e1238: MultiVector = other_2151;
    let _e1250: MultiVector = self_2407;
    let _e1254: MultiVector = other_2151;
    let _e1266: MultiVector = self_2407;
    let _e1270: MultiVector = other_2151;
    let _e1283: MultiVector = self_2407;
    let _e1287: MultiVector = other_2151;
    let _e1300: MultiVector = self_2407;
    let _e1304: MultiVector = other_2151;
    let _e1317: MultiVector = self_2407;
    let _e1321: MultiVector = other_2151;
    let _e1324: MultiVector = other_2151;
    let _e1327: MultiVector = other_2151;
    let _e1330: MultiVector = other_2151;
    let _e1343: MultiVector = self_2407;
    let _e1347: MultiVector = other_2151;
    let _e1350: MultiVector = other_2151;
    let _e1353: MultiVector = other_2151;
    let _e1356: MultiVector = other_2151;
    let _e1369: MultiVector = self_2407;
    let _e1373: MultiVector = other_2151;
    let _e1376: MultiVector = other_2151;
    let _e1379: MultiVector = other_2151;
    let _e1382: MultiVector = other_2151;
    let _e1395: MultiVector = self_2407;
    let _e1399: MultiVector = other_2151;
    let _e1411: MultiVector = self_2407;
    let _e1415: MultiVector = other_2151;
    let _e1427: MultiVector = self_2407;
    let _e1431: MultiVector = other_2151;
    let _e1443: MultiVector = self_2407;
    let _e1447: MultiVector = other_2151;
    let _e1459: MultiVector = self_2407;
    let _e1463: MultiVector = other_2151;
    let _e1466: MultiVector = other_2151;
    let _e1469: MultiVector = other_2151;
    let _e1472: MultiVector = other_2151;
    let _e1486: MultiVector = self_2407;
    let _e1490: MultiVector = other_2151;
    let _e1493: MultiVector = other_2151;
    let _e1496: MultiVector = other_2151;
    let _e1499: MultiVector = other_2151;
    let _e1513: MultiVector = self_2407;
    let _e1517: MultiVector = other_2151;
    let _e1520: MultiVector = other_2151;
    let _e1523: MultiVector = other_2151;
    let _e1526: MultiVector = other_2151;
    let _e1540: MultiVector = self_2407;
    let _e1543: MultiVector = self_2407;
    let _e1546: MultiVector = self_2407;
    let _e1549: MultiVector = self_2407;
    let _e1553: MultiVector = other_2151;
    let _e1556: MultiVector = other_2151;
    let _e1559: MultiVector = other_2151;
    let _e1562: MultiVector = other_2151;
    let _e1575: MultiVector = self_2407;
    let _e1579: MultiVector = other_2151;
    let _e1582: MultiVector = self_2407;
    let _e1586: MultiVector = other_2151;
    let _e1599: MultiVector = self_2407;
    let _e1603: MultiVector = other_2151;
    let _e1616: MultiVector = self_2407;
    let _e1620: MultiVector = other_2151;
    let _e1633: MultiVector = self_2407;
    let _e1637: MultiVector = other_2151;
    let _e1640: MultiVector = other_2151;
    let _e1643: MultiVector = other_2151;
    let _e1646: MultiVector = other_2151;
    let _e1659: MultiVector = self_2407;
    let _e1663: MultiVector = other_2151;
    let _e1666: MultiVector = other_2151;
    let _e1669: MultiVector = other_2151;
    let _e1672: MultiVector = other_2151;
    let _e1686: MultiVector = self_2407;
    let _e1690: MultiVector = other_2151;
    let _e1693: MultiVector = other_2151;
    let _e1696: MultiVector = other_2151;
    let _e1699: MultiVector = other_2151;
    let _e1713: MultiVector = self_2407;
    let _e1717: MultiVector = other_2151;
    let _e1720: MultiVector = other_2151;
    let _e1723: MultiVector = other_2151;
    let _e1726: MultiVector = other_2151;
    let _e1740: MultiVector = self_2407;
    let _e1744: MultiVector = other_2151;
    let _e1757: MultiVector = self_2407;
    let _e1761: MultiVector = other_2151;
    let _e1774: MultiVector = self_2407;
    let _e1778: MultiVector = other_2151;
    let _e1791: MultiVector = self_2407;
    let _e1795: MultiVector = other_2151;
    let _e1798: MultiVector = other_2151;
    let _e1801: MultiVector = other_2151;
    let _e1804: MultiVector = other_2151;
    let _e1817: MultiVector = self_2407;
    let _e1821: MultiVector = other_2151;
    let _e1824: MultiVector = other_2151;
    let _e1827: MultiVector = other_2151;
    let _e1830: MultiVector = other_2151;
    let _e1843: MultiVector = self_2407;
    let _e1847: MultiVector = other_2151;
    let _e1850: MultiVector = other_2151;
    let _e1853: MultiVector = other_2151;
    let _e1856: MultiVector = other_2151;
    let _e1869: MultiVector = self_2407;
    let _e1873: MultiVector = other_2151;
    let _e1885: MultiVector = self_2407;
    let _e1888: MultiVector = self_2407;
    let _e1891: MultiVector = self_2407;
    let _e1894: MultiVector = self_2407;
    let _e1898: MultiVector = other_2151;
    return MultiVector(((((((((((((((((vec3<f32>(_e4.g0_.z) * _e8.g0_) + ((vec3<f32>(_e11.g2_.x) * vec3<f32>(_e15.g3_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e27.g3_.w) * vec3<f32>(_e31.g2_.x, _e34.g2_.x, _e37.g3_.w)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e49.g4_.x) * vec3<f32>(_e53.g6_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e65.g4_.y) * vec3<f32>(_e69.g6_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e81.g4_.z) * vec3<f32>(_e85.g6_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e97.g6_.x) * vec3<f32>(_e101.g4_.x, _e104.g4_.x, _e107.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e120.g6_.y) * vec3<f32>(_e124.g4_.y, _e127.g4_.y, _e130.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e143.g6_.z) * vec3<f32>(_e147.g4_.z, _e150.g4_.z, _e153.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e166.g8_.x) * vec3<f32>(_e170.g9_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e181.g8_.y) * vec3<f32>(_e185.g9_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e196.g8_.z) * vec3<f32>(_e200.g9_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e211.g9_.x) * vec3<f32>(_e215.g8_.x, _e218.g8_.x, _e221.g9_.x)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e233.g9_.y) * vec3<f32>(_e237.g8_.y, _e240.g8_.y, _e243.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e255.g9_.z) * vec3<f32>(_e259.g8_.z, _e262.g8_.z, _e265.g9_.z)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((_e277.g0_.xyx * _e280.g0_.zzx) * vec3<f32>(1.0, 1.0, 0.0))), ((((((vec3<f32>(_e290.g0_.x) * vec3<f32>(_e294.g9_.x, _e297.g9_.y, _e300.g9_.z)) + (vec3<f32>(_e305.g0_.z) * _e309.g1_)) + ((vec3<f32>(_e313.g9_.x) * vec3<f32>(_e317.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e328.g9_.y) * vec3<f32>(_e332.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e343.g9_.z) * vec3<f32>(_e347.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e358.g1_ * vec3<f32>(_e360.g0_.z))), ((vec2<f32>(_e366.g0_.z) * _e370.g2_) + (_e373.g2_ * vec2<f32>(_e375.g0_.z))), (((((((((vec4<f32>(_e381.g0_.z) * _e385.g3_) + ((vec4<f32>(_e388.g3_.x) * vec4<f32>(_e392.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e404.g3_.y) * vec4<f32>(_e408.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e420.g3_.z) * vec4<f32>(_e424.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e436.g3_.w) * vec4<f32>(_e440.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e452.g9_.x) * vec4<f32>(_e456.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e469.g9_.y) * vec4<f32>(_e473.g2_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e486.g9_.z) * vec4<f32>(_e490.g2_.y)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e503.g2_.y, _e506.g2_.y, _e509.g2_.y, _e512.g2_.x) * _e516.g9_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((vec3<f32>(_e527.g0_.z) * _e531.g4_) - (vec3<f32>(_e534.g2_.x) * vec3<f32>(_e538.g9_.x, _e541.g9_.y, _e544.g9_.z))) + ((vec3<f32>(_e550.g9_.x) * vec3<f32>(_e554.g2_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e565.g9_.y) * vec3<f32>(_e569.g2_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e580.g9_.z) * vec3<f32>(_e584.g2_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e595.g4_ * vec3<f32>(_e597.g0_.z))), ((((((((((((((vec3<f32>(_e603.g0_.x) * _e607.g6_) + (vec3<f32>(_e610.g0_.z) * _e614.g5_)) + ((vec3<f32>(_e618.g1_.y) * vec3<f32>(_e622.g9_.z, _e625.g9_.z, _e628.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e640.g1_.z) * vec3<f32>(_e644.g9_.y, _e647.g9_.x, _e650.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e662.g5_.x) * vec3<f32>(_e666.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e677.g5_.y) * vec3<f32>(_e681.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e692.g5_.z) * vec3<f32>(_e696.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e707.g6_.x) * vec3<f32>(_e711.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e722.g6_.y) * vec3<f32>(_e726.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e737.g6_.z) * vec3<f32>(_e741.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e752.g9_.x) * _e756.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e767.g9_.y) * _e771.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e782.g9_.z) * _e786.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e797.g1_.x) * vec3<f32>(_e801.g9_.x, _e804.g9_.z, _e807.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((vec3<f32>(_e819.g0_.z) * _e823.g6_) - (vec3<f32>(_e826.g3_.w) * vec3<f32>(_e830.g9_.x, _e833.g9_.y, _e836.g9_.z))) + ((vec3<f32>(_e842.g9_.x) * vec3<f32>(_e846.g3_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e858.g9_.y) * vec3<f32>(_e862.g3_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e874.g9_.z) * vec3<f32>(_e878.g3_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e890.g6_ * vec3<f32>(_e892.g0_.z))), ((((((((((((((vec3<f32>(_e898.g0_.z) * _e902.g7_) + (vec3<f32>(_e905.g2_.y) * _e909.g6_)) + ((vec3<f32>(_e913.g3_.y) * vec3<f32>(_e917.g9_.z, _e920.g9_.z, _e923.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e935.g3_.z) * vec3<f32>(_e939.g9_.y, _e942.g9_.x, _e945.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e957.g6_.x) * vec3<f32>(_e961.g2_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e972.g6_.y) * vec3<f32>(_e976.g2_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e987.g6_.z) * vec3<f32>(_e991.g2_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1002.g7_.x) * vec3<f32>(_e1006.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e1017.g7_.y) * vec3<f32>(_e1021.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e1032.g7_.z) * vec3<f32>(_e1036.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e1047.g9_.x) * vec3<f32>(_e1051.g3_.z, _e1054.g3_.z, _e1057.g3_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e1069.g9_.y) * vec3<f32>(_e1073.g3_.z, _e1076.g3_.z, _e1079.g3_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e1091.g9_.z) * vec3<f32>(_e1095.g3_.y, _e1098.g3_.x, _e1101.g3_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e1113.g3_.x) * vec3<f32>(_e1117.g9_.x, _e1120.g9_.z, _e1123.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((((((((((((((vec4<f32>(_e1135.g0_.z) * _e1139.g8_) + ((vec4<f32>(_e1142.g1_.x) * vec4<f32>(_e1146.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1159.g1_.y) * vec4<f32>(_e1163.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1176.g1_.z) * vec4<f32>(_e1180.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1193.g2_.x) * vec4<f32>(_e1197.g6_.x, _e1200.g6_.y, _e1203.g6_.z, _e1206.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1218.g3_.w) * vec4<f32>(_e1222.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1234.g4_.y) * _e1238.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e1250.g4_.z) * _e1254.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1266.g5_.x) * vec4<f32>(_e1270.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1283.g5_.y) * vec4<f32>(_e1287.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1300.g5_.z) * vec4<f32>(_e1304.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1317.g6_.x) * vec4<f32>(_e1321.g2_.x, _e1324.g2_.x, _e1327.g2_.x, _e1330.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1343.g6_.y) * vec4<f32>(_e1347.g2_.x, _e1350.g2_.x, _e1353.g2_.x, _e1356.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1369.g6_.z) * vec4<f32>(_e1373.g2_.x, _e1376.g2_.x, _e1379.g2_.x, _e1382.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1395.g8_.x) * vec4<f32>(_e1399.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1411.g8_.y) * vec4<f32>(_e1415.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1427.g8_.z) * vec4<f32>(_e1431.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1443.g8_.w) * vec4<f32>(_e1447.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1459.g9_.x) * vec4<f32>(_e1463.g4_.z, _e1466.g4_.z, _e1469.g4_.y, _e1472.g5_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1486.g9_.y) * vec4<f32>(_e1490.g4_.z, _e1493.g4_.z, _e1496.g4_.x, _e1499.g5_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1513.g9_.z) * vec4<f32>(_e1517.g4_.y, _e1520.g4_.x, _e1523.g4_.y, _e1526.g5_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e1540.g0_.x, _e1543.g4_.x, _e1546.g4_.x, _e1549.g0_.x) * vec4<f32>(_e1553.g3_.x, _e1556.g9_.z, _e1559.g9_.y, _e1562.g3_.w)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))), ((((((((((((((((vec4<f32>(_e1575.g0_.z) * _e1579.g9_) + ((vec4<f32>(_e1582.g3_.x) * vec4<f32>(_e1586.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1599.g3_.y) * vec4<f32>(_e1603.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1616.g3_.z) * vec4<f32>(_e1620.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1633.g3_.w) * vec4<f32>(_e1637.g6_.x, _e1640.g6_.y, _e1643.g6_.z, _e1646.g2_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1659.g6_.x) * vec4<f32>(_e1663.g3_.w, _e1666.g9_.z, _e1669.g9_.y, _e1672.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1686.g6_.y) * vec4<f32>(_e1690.g9_.z, _e1693.g3_.w, _e1696.g9_.x, _e1699.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1713.g6_.z) * vec4<f32>(_e1717.g9_.y, _e1720.g9_.x, _e1723.g3_.w, _e1726.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1740.g7_.x) * vec4<f32>(_e1744.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1757.g7_.y) * vec4<f32>(_e1761.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1774.g7_.z) * vec4<f32>(_e1778.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1791.g9_.x) * vec4<f32>(_e1795.g0_.z, _e1798.g6_.z, _e1801.g6_.y, _e1804.g7_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1817.g9_.y) * vec4<f32>(_e1821.g6_.z, _e1824.g0_.z, _e1827.g6_.x, _e1830.g7_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1843.g9_.z) * vec4<f32>(_e1847.g6_.y, _e1850.g6_.x, _e1853.g0_.z, _e1856.g7_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1869.g9_.w) * vec4<f32>(_e1873.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1885.g2_.x, _e1888.g2_.x, _e1891.g2_.x, _e1894.g2_.y) * _e1898.g3_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_left_contraction(self_2408: MultiVector, other_2152: MultiVector) -> MultiVector {
    var self_2409: MultiVector;
    var other_2153: MultiVector;

    self_2409 = self_2408;
    other_2153 = other_2152;
    let _e4: MultiVector = self_2409;
    let _e8: MultiVector = other_2153;
    let _e11: MultiVector = self_2409;
    let _e15: MultiVector = other_2153;
    let _e26: MultiVector = self_2409;
    let _e30: MultiVector = other_2153;
    let _e41: MultiVector = self_2409;
    let _e45: MultiVector = other_2153;
    let _e57: MultiVector = self_2409;
    let _e61: MultiVector = other_2153;
    let _e73: MultiVector = self_2409;
    let _e77: MultiVector = other_2153;
    let _e89: MultiVector = self_2409;
    let _e93: MultiVector = other_2153;
    let _e105: MultiVector = self_2409;
    let _e109: MultiVector = other_2153;
    let _e120: MultiVector = self_2409;
    let _e124: MultiVector = other_2153;
    let _e127: MultiVector = self_2409;
    let _e131: MultiVector = other_2153;
    let _e142: MultiVector = self_2409;
    let _e146: MultiVector = other_2153;
    let _e157: MultiVector = self_2409;
    let _e161: MultiVector = other_2153;
    let _e172: MultiVector = self_2409;
    let _e176: MultiVector = other_2153;
    let _e187: MultiVector = self_2409;
    let _e191: MultiVector = other_2153;
    let _e202: MultiVector = self_2409;
    let _e206: MultiVector = other_2153;
    let _e217: MultiVector = self_2409;
    let _e221: MultiVector = other_2153;
    let _e224: MultiVector = self_2409;
    let _e228: MultiVector = other_2153;
    let _e231: MultiVector = other_2153;
    let _e242: MultiVector = self_2409;
    let _e246: MultiVector = other_2153;
    let _e249: MultiVector = other_2153;
    let _e260: MultiVector = self_2409;
    let _e264: MultiVector = other_2153;
    let _e267: MultiVector = other_2153;
    let _e278: MultiVector = self_2409;
    let _e282: MultiVector = other_2153;
    let _e285: MultiVector = other_2153;
    let _e291: MultiVector = self_2409;
    let _e295: MultiVector = other_2153;
    let _e298: MultiVector = other_2153;
    let _e304: MultiVector = self_2409;
    let _e308: MultiVector = other_2153;
    let _e311: MultiVector = other_2153;
    let _e317: MultiVector = self_2409;
    let _e321: MultiVector = other_2153;
    let _e324: MultiVector = other_2153;
    let _e335: MultiVector = self_2409;
    let _e339: MultiVector = other_2153;
    let _e342: MultiVector = self_2409;
    let _e346: MultiVector = other_2153;
    let _e349: MultiVector = other_2153;
    let _e352: MultiVector = other_2153;
    let _e355: MultiVector = other_2153;
    let _e369: MultiVector = self_2409;
    let _e373: MultiVector = other_2153;
    let _e376: MultiVector = other_2153;
    let _e379: MultiVector = other_2153;
    let _e382: MultiVector = other_2153;
    let _e396: MultiVector = self_2409;
    let _e400: MultiVector = other_2153;
    let _e412: MultiVector = self_2409;
    let _e416: MultiVector = other_2153;
    let _e428: MultiVector = self_2409;
    let _e432: MultiVector = other_2153;
    let _e444: MultiVector = self_2409;
    let _e448: MultiVector = other_2153;
    let _e460: MultiVector = self_2409;
    let _e464: MultiVector = other_2153;
    let _e467: MultiVector = other_2153;
    let _e470: MultiVector = other_2153;
    let _e473: MultiVector = other_2153;
    let _e487: MultiVector = self_2409;
    let _e491: MultiVector = other_2153;
    let _e494: MultiVector = self_2409;
    let _e498: MultiVector = other_2153;
    let _e501: MultiVector = other_2153;
    let _e504: MultiVector = other_2153;
    let _e516: MultiVector = self_2409;
    let _e520: MultiVector = other_2153;
    let _e523: MultiVector = other_2153;
    let _e526: MultiVector = other_2153;
    let _e538: MultiVector = self_2409;
    let _e542: MultiVector = other_2153;
    let _e553: MultiVector = self_2409;
    let _e557: MultiVector = other_2153;
    let _e568: MultiVector = self_2409;
    let _e572: MultiVector = other_2153;
    let _e583: MultiVector = self_2409;
    let _e587: MultiVector = other_2153;
    let _e590: MultiVector = other_2153;
    let _e593: MultiVector = other_2153;
    let _e605: MultiVector = self_2409;
    let _e609: MultiVector = other_2153;
    let _e612: MultiVector = self_2409;
    let _e614: MultiVector = other_2153;
    let _e624: MultiVector = self_2409;
    let _e628: MultiVector = other_2153;
    let _e631: MultiVector = self_2409;
    let _e635: MultiVector = other_2153;
    let _e638: MultiVector = other_2153;
    let _e641: MultiVector = other_2153;
    let _e653: MultiVector = self_2409;
    let _e657: MultiVector = other_2153;
    let _e660: MultiVector = other_2153;
    let _e663: MultiVector = other_2153;
    let _e675: MultiVector = self_2409;
    let _e679: MultiVector = other_2153;
    let _e690: MultiVector = self_2409;
    let _e694: MultiVector = other_2153;
    let _e705: MultiVector = self_2409;
    let _e709: MultiVector = other_2153;
    let _e720: MultiVector = self_2409;
    let _e724: MultiVector = other_2153;
    let _e727: MultiVector = other_2153;
    let _e730: MultiVector = other_2153;
    let _e742: MultiVector = self_2409;
    let _e746: MultiVector = other_2153;
    let _e749: MultiVector = self_2409;
    let _e751: MultiVector = other_2153;
    let _e761: MultiVector = self_2409;
    let _e765: MultiVector = other_2153;
    let _e768: MultiVector = self_2409;
    let _e771: MultiVector = self_2409;
    let _e774: MultiVector = self_2409;
    let _e777: MultiVector = self_2409;
    let _e781: MultiVector = other_2153;
    let _e784: MultiVector = other_2153;
    let _e787: MultiVector = other_2153;
    let _e790: MultiVector = other_2153;
    let _e802: MultiVector = self_2409;
    let _e806: MultiVector = other_2153;
    let _e809: MultiVector = self_2409;
    let _e812: MultiVector = self_2409;
    let _e815: MultiVector = self_2409;
    let _e818: MultiVector = self_2409;
    let _e822: MultiVector = other_2153;
    let _e825: MultiVector = other_2153;
    let _e828: MultiVector = other_2153;
    let _e831: MultiVector = other_2153;
    return MultiVector(((((((((vec3<f32>(_e4.g0_.x) * _e8.g0_) + ((vec3<f32>(_e11.g1_.y) * vec3<f32>(_e15.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e26.g1_.z) * vec3<f32>(_e30.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e41.g5_.x) * vec3<f32>(_e45.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e57.g5_.y) * vec3<f32>(_e61.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e73.g5_.z) * vec3<f32>(_e77.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e89.g8_.w) * vec3<f32>(_e93.g8_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e105.g1_.x) * vec3<f32>(_e109.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0))), (((((((vec3<f32>(_e120.g0_.x) * _e124.g1_) + ((vec3<f32>(_e127.g1_.y) * _e131.g5_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e142.g1_.z) * _e146.g5_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e157.g5_.x) * vec3<f32>(_e161.g8_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e172.g5_.y) * vec3<f32>(_e176.g8_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e187.g5_.z) * vec3<f32>(_e191.g8_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e202.g1_.x) * _e206.g5_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((vec2<f32>(_e217.g0_.x) * _e221.g2_) + ((vec2<f32>(_e224.g1_.x) * vec2<f32>(_e228.g4_.x, _e231.g3_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e242.g1_.y) * vec2<f32>(_e246.g4_.y, _e249.g3_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e260.g1_.z) * vec2<f32>(_e264.g4_.z, _e267.g3_.z)) * vec2<f32>(-(1.0), 1.0))) - (vec2<f32>(_e278.g5_.x) * vec2<f32>(_e282.g8_.x, _e285.g7_.x))) - (vec2<f32>(_e291.g5_.y) * vec2<f32>(_e295.g8_.y, _e298.g7_.y))) - (vec2<f32>(_e304.g5_.z) * vec2<f32>(_e308.g8_.z, _e311.g7_.z))) + ((vec2<f32>(_e317.g8_.w) * vec2<f32>(_e321.g0_.y, _e324.g9_.w)) * vec2<f32>(1.0, -(1.0)))), ((((((((vec4<f32>(_e335.g0_.x) * _e339.g3_) + ((vec4<f32>(_e342.g1_.y) * vec4<f32>(_e346.g7_.z, _e349.g7_.z, _e352.g7_.x, _e355.g6_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e369.g1_.z) * vec4<f32>(_e373.g7_.y, _e376.g7_.x, _e379.g7_.y, _e382.g6_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e396.g5_.x) * _e400.g9_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e412.g5_.y) * _e416.g9_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e428.g5_.z) * _e432.g9_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e444.g8_.w) * vec4<f32>(_e448.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e460.g1_.x) * vec4<f32>(_e464.g7_.x, _e467.g7_.z, _e470.g7_.y, _e473.g6_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((vec3<f32>(_e487.g0_.x) * _e491.g4_) + ((vec3<f32>(_e494.g1_.y) * vec3<f32>(_e498.g8_.z, _e501.g8_.z, _e504.g8_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e516.g1_.z) * vec3<f32>(_e520.g8_.y, _e523.g8_.x, _e526.g8_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e538.g5_.x) * vec3<f32>(_e542.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e553.g5_.y) * vec3<f32>(_e557.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e568.g5_.z) * vec3<f32>(_e572.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e583.g1_.x) * vec3<f32>(_e587.g8_.x, _e590.g8_.z, _e593.g8_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e605.g0_.x) * _e609.g5_) + ((_e612.g1_ * vec3<f32>(_e614.g8_.w)) * vec3<f32>(-(1.0)))), (((((((vec3<f32>(_e624.g0_.x) * _e628.g6_) + ((vec3<f32>(_e631.g1_.y) * vec3<f32>(_e635.g9_.z, _e638.g9_.z, _e641.g9_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e653.g1_.z) * vec3<f32>(_e657.g9_.y, _e660.g9_.x, _e663.g9_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e675.g5_.x) * vec3<f32>(_e679.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e690.g5_.y) * vec3<f32>(_e694.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e705.g5_.z) * vec3<f32>(_e709.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e720.g1_.x) * vec3<f32>(_e724.g9_.x, _e727.g9_.z, _e730.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e742.g0_.x) * _e746.g7_) + ((_e749.g1_ * vec3<f32>(_e751.g9_.w)) * vec3<f32>(-(1.0)))), ((vec4<f32>(_e761.g0_.x) * _e765.g8_) + ((vec4<f32>(_e768.g1_.x, _e771.g1_.y, _e774.g1_.z, _e777.g1_.x) * vec4<f32>(_e781.g0_.y, _e784.g0_.y, _e787.g0_.y, _e790.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec4<f32>(_e802.g0_.x) * _e806.g9_) + ((vec4<f32>(_e809.g1_.x, _e812.g1_.y, _e815.g1_.z, _e818.g1_.x) * vec4<f32>(_e822.g0_.z, _e825.g0_.z, _e828.g0_.z, _e831.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_multi_vector_right_contraction(self_2410: MultiVector, other_2154: MultiVector) -> MultiVector {
    var self_2411: MultiVector;
    var other_2155: MultiVector;

    self_2411 = self_2410;
    other_2155 = other_2154;
    let _e4: MultiVector = self_2411;
    let _e8: MultiVector = other_2155;
    let _e18: MultiVector = self_2411;
    let _e22: MultiVector = other_2155;
    let _e33: MultiVector = self_2411;
    let _e37: MultiVector = other_2155;
    let _e48: MultiVector = self_2411;
    let _e52: MultiVector = other_2155;
    let _e64: MultiVector = self_2411;
    let _e68: MultiVector = other_2155;
    let _e80: MultiVector = self_2411;
    let _e84: MultiVector = other_2155;
    let _e96: MultiVector = self_2411;
    let _e100: MultiVector = other_2155;
    let _e112: MultiVector = self_2411;
    let _e114: MultiVector = other_2155;
    let _e120: MultiVector = self_2411;
    let _e124: MultiVector = other_2155;
    let _e134: MultiVector = self_2411;
    let _e138: MultiVector = other_2155;
    let _e149: MultiVector = self_2411;
    let _e153: MultiVector = other_2155;
    let _e164: MultiVector = self_2411;
    let _e168: MultiVector = other_2155;
    let _e172: MultiVector = self_2411;
    let _e174: MultiVector = other_2155;
    let _e180: MultiVector = self_2411;
    let _e184: MultiVector = other_2155;
    let _e193: MultiVector = self_2411;
    let _e197: MultiVector = other_2155;
    let _e207: MultiVector = self_2411;
    let _e211: MultiVector = other_2155;
    let _e222: MultiVector = self_2411;
    let _e226: MultiVector = other_2155;
    let _e237: MultiVector = self_2411;
    let _e241: MultiVector = other_2155;
    let _e252: MultiVector = self_2411;
    let _e256: MultiVector = other_2155;
    let _e266: MultiVector = self_2411;
    let _e270: MultiVector = other_2155;
    let _e280: MultiVector = self_2411;
    let _e284: MultiVector = other_2155;
    let _e294: MultiVector = self_2411;
    let _e298: MultiVector = other_2155;
    let _e309: MultiVector = self_2411;
    let _e313: MultiVector = other_2155;
    let _e324: MultiVector = self_2411;
    let _e328: MultiVector = other_2155;
    let _e339: MultiVector = self_2411;
    let _e343: MultiVector = other_2155;
    let _e354: MultiVector = self_2411;
    let _e358: MultiVector = other_2155;
    let _e369: MultiVector = self_2411;
    let _e373: MultiVector = other_2155;
    let _e384: MultiVector = self_2411;
    let _e388: MultiVector = other_2155;
    let _e398: MultiVector = self_2411;
    let _e401: MultiVector = self_2411;
    let _e405: MultiVector = other_2155;
    let _e408: MultiVector = other_2155;
    let _e419: MultiVector = self_2411;
    let _e423: MultiVector = other_2155;
    let _e434: MultiVector = self_2411;
    let _e438: MultiVector = other_2155;
    let _e450: MultiVector = self_2411;
    let _e454: MultiVector = other_2155;
    let _e466: MultiVector = self_2411;
    let _e470: MultiVector = other_2155;
    let _e482: MultiVector = self_2411;
    let _e486: MultiVector = other_2155;
    let _e499: MultiVector = self_2411;
    let _e503: MultiVector = other_2155;
    let _e516: MultiVector = self_2411;
    let _e520: MultiVector = other_2155;
    let _e533: MultiVector = self_2411;
    let _e537: MultiVector = other_2155;
    let _e540: MultiVector = other_2155;
    let _e543: MultiVector = other_2155;
    let _e546: MultiVector = other_2155;
    let _e559: MultiVector = self_2411;
    let _e563: MultiVector = other_2155;
    let _e566: MultiVector = other_2155;
    let _e569: MultiVector = other_2155;
    let _e572: MultiVector = other_2155;
    let _e585: MultiVector = self_2411;
    let _e589: MultiVector = other_2155;
    let _e592: MultiVector = other_2155;
    let _e595: MultiVector = other_2155;
    let _e598: MultiVector = other_2155;
    let _e611: MultiVector = self_2411;
    let _e615: MultiVector = other_2155;
    let _e628: MultiVector = self_2411;
    let _e632: MultiVector = other_2155;
    let _e645: MultiVector = self_2411;
    let _e649: MultiVector = other_2155;
    let _e662: MultiVector = self_2411;
    let _e666: MultiVector = other_2155;
    let _e669: MultiVector = other_2155;
    let _e672: MultiVector = other_2155;
    let _e675: MultiVector = other_2155;
    let _e687: MultiVector = self_2411;
    let _e690: MultiVector = self_2411;
    let _e693: MultiVector = self_2411;
    let _e696: MultiVector = self_2411;
    let _e700: MultiVector = other_2155;
    let _e711: MultiVector = self_2411;
    let _e715: MultiVector = other_2155;
    let _e718: MultiVector = self_2411;
    let _e722: MultiVector = other_2155;
    let _e733: MultiVector = self_2411;
    let _e737: MultiVector = other_2155;
    let _e748: MultiVector = self_2411;
    let _e752: MultiVector = other_2155;
    let _e763: MultiVector = self_2411;
    let _e765: MultiVector = other_2155;
    let _e773: MultiVector = self_2411;
    let _e777: MultiVector = other_2155;
    let _e781: MultiVector = self_2411;
    let _e783: MultiVector = other_2155;
    let _e789: MultiVector = self_2411;
    let _e793: MultiVector = other_2155;
    let _e796: MultiVector = self_2411;
    let _e800: MultiVector = other_2155;
    let _e811: MultiVector = self_2411;
    let _e815: MultiVector = other_2155;
    let _e826: MultiVector = self_2411;
    let _e830: MultiVector = other_2155;
    let _e841: MultiVector = self_2411;
    let _e843: MultiVector = other_2155;
    let _e849: MultiVector = self_2411;
    let _e853: MultiVector = other_2155;
    let _e856: MultiVector = self_2411;
    let _e858: MultiVector = other_2155;
    let _e864: MultiVector = self_2411;
    let _e868: MultiVector = other_2155;
    let _e879: MultiVector = self_2411;
    let _e883: MultiVector = other_2155;
    let _e895: MultiVector = self_2411;
    let _e899: MultiVector = other_2155;
    let _e911: MultiVector = self_2411;
    let _e915: MultiVector = other_2155;
    let _e927: MultiVector = self_2411;
    let _e930: MultiVector = self_2411;
    let _e933: MultiVector = self_2411;
    let _e936: MultiVector = self_2411;
    let _e940: MultiVector = other_2155;
    let _e943: MultiVector = other_2155;
    let _e946: MultiVector = other_2155;
    let _e949: MultiVector = other_2155;
    let _e964: MultiVector = self_2411;
    let _e968: MultiVector = other_2155;
    let _e979: MultiVector = self_2411;
    let _e983: MultiVector = other_2155;
    let _e995: MultiVector = self_2411;
    let _e999: MultiVector = other_2155;
    let _e1011: MultiVector = self_2411;
    let _e1015: MultiVector = other_2155;
    let _e1027: MultiVector = self_2411;
    let _e1030: MultiVector = self_2411;
    let _e1033: MultiVector = self_2411;
    let _e1036: MultiVector = self_2411;
    let _e1040: MultiVector = other_2155;
    let _e1043: MultiVector = other_2155;
    let _e1046: MultiVector = other_2155;
    let _e1049: MultiVector = other_2155;
    return MultiVector((((((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g1_.x)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.y) * vec3<f32>(_e22.g1_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g1_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e48.g5_.x) * vec3<f32>(_e52.g5_.x)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e64.g5_.y) * vec3<f32>(_e68.g5_.y)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e80.g5_.z) * vec3<f32>(_e84.g5_.z)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e96.g8_.w) * vec3<f32>(_e100.g8_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + (_e112.g0_ * vec3<f32>(_e114.g0_.x))), ((((((vec3<f32>(_e120.g5_.x) * _e124.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0))) + ((vec3<f32>(_e134.g5_.y) * _e138.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e149.g5_.z) * _e153.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (vec3<f32>(_e164.g8_.w) * _e168.g5_)) + (_e172.g1_ * vec3<f32>(_e174.g0_.x))), (((((((((((((((((vec2<f32>(_e180.g2_.x) * vec2<f32>(_e184.g0_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e193.g2_.y) * vec2<f32>(_e197.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e207.g3_.x) * vec2<f32>(_e211.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e222.g3_.y) * vec2<f32>(_e226.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e237.g3_.z) * vec2<f32>(_e241.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e252.g4_.x) * vec2<f32>(_e256.g1_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e266.g4_.y) * vec2<f32>(_e270.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e280.g4_.z) * vec2<f32>(_e284.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e294.g7_.x) * vec2<f32>(_e298.g5_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e309.g7_.y) * vec2<f32>(_e313.g5_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e324.g7_.z) * vec2<f32>(_e328.g5_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e339.g8_.x) * vec2<f32>(_e343.g5_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e354.g8_.y) * vec2<f32>(_e358.g5_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e369.g8_.z) * vec2<f32>(_e373.g5_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e384.g9_.w) * vec2<f32>(_e388.g8_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e398.g0_.y, _e401.g0_.x) * vec2<f32>(_e405.g8_.w, _e408.g8_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((((((((((vec4<f32>(_e419.g3_.x) * vec4<f32>(_e423.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e434.g3_.y) * vec4<f32>(_e438.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e450.g3_.z) * vec4<f32>(_e454.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e466.g3_.w) * vec4<f32>(_e470.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e482.g6_.x) * vec4<f32>(_e486.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e499.g6_.y) * vec4<f32>(_e503.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e516.g6_.z) * vec4<f32>(_e520.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e533.g7_.x) * vec4<f32>(_e537.g1_.z, _e540.g1_.z, _e543.g1_.y, _e546.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e559.g7_.y) * vec4<f32>(_e563.g1_.z, _e566.g1_.z, _e569.g1_.x, _e572.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e585.g7_.z) * vec4<f32>(_e589.g1_.y, _e592.g1_.x, _e595.g1_.y, _e598.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e611.g9_.x) * vec4<f32>(_e615.g5_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e628.g9_.y) * vec4<f32>(_e632.g5_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e645.g9_.z) * vec4<f32>(_e649.g5_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e662.g9_.w) * vec4<f32>(_e666.g5_.x, _e669.g5_.y, _e672.g5_.z, _e675.g5_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e687.g0_.x, _e690.g0_.x, _e693.g0_.x, _e696.g0_.z) * _e700.g8_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3<f32>(_e711.g0_.y) * _e715.g5_) + ((vec3<f32>(_e718.g8_.x) * _e722.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e733.g8_.y) * _e737.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e748.g8_.z) * _e752.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e763.g4_ * vec3<f32>(_e765.g0_.x))), ((vec3<f32>(0.0) - (vec3<f32>(_e773.g8_.w) * _e777.g1_)) + (_e781.g5_ * vec3<f32>(_e783.g0_.x))), (((((vec3<f32>(_e789.g0_.z) * _e793.g5_) + ((vec3<f32>(_e796.g9_.x) * _e800.g1_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e811.g9_.y) * _e815.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e826.g9_.z) * _e830.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e841.g6_ * vec3<f32>(_e843.g0_.x))), ((vec3<f32>(_e849.g9_.w) * _e853.g1_) + (_e856.g7_ * vec3<f32>(_e858.g0_.x))), ((((((vec4<f32>(_e864.g8_.x) * vec4<f32>(_e868.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e879.g8_.y) * vec4<f32>(_e883.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e895.g8_.z) * vec4<f32>(_e899.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e911.g8_.w) * vec4<f32>(_e915.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e927.g0_.y, _e930.g0_.y, _e933.g0_.y, _e936.g0_.x) * vec4<f32>(_e940.g1_.x, _e943.g1_.y, _e946.g1_.z, _e949.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((((((vec4<f32>(_e964.g9_.x) * vec4<f32>(_e968.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e979.g9_.y) * vec4<f32>(_e983.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e995.g9_.z) * vec4<f32>(_e999.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1011.g9_.w) * vec4<f32>(_e1015.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1027.g0_.z, _e1030.g0_.z, _e1033.g0_.z, _e1036.g0_.x) * vec4<f32>(_e1040.g1_.x, _e1043.g1_.y, _e1046.g1_.z, _e1049.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_multi_vector_left_anti_contraction(self_2412: MultiVector, other_2156: MultiVector) -> MultiVector {
    var self_2413: MultiVector;
    var other_2157: MultiVector;

    self_2413 = self_2412;
    other_2157 = other_2156;
    let _e4: MultiVector = self_2413;
    let _e8: MultiVector = other_2157;
    let _e11: MultiVector = self_2413;
    let _e15: MultiVector = other_2157;
    let _e18: MultiVector = other_2157;
    let _e21: MultiVector = other_2157;
    let _e34: MultiVector = self_2413;
    let _e38: MultiVector = other_2157;
    let _e41: MultiVector = other_2157;
    let _e44: MultiVector = other_2157;
    let _e57: MultiVector = self_2413;
    let _e61: MultiVector = other_2157;
    let _e64: MultiVector = other_2157;
    let _e67: MultiVector = other_2157;
    let _e80: MultiVector = self_2413;
    let _e84: MultiVector = other_2157;
    let _e87: MultiVector = other_2157;
    let _e90: MultiVector = other_2157;
    let _e102: MultiVector = self_2413;
    let _e106: MultiVector = other_2157;
    let _e109: MultiVector = other_2157;
    let _e112: MultiVector = other_2157;
    let _e124: MultiVector = self_2413;
    let _e128: MultiVector = other_2157;
    let _e131: MultiVector = other_2157;
    let _e134: MultiVector = other_2157;
    let _e146: MultiVector = self_2413;
    let _e149: MultiVector = self_2413;
    let _e152: MultiVector = self_2413;
    let _e156: MultiVector = other_2157;
    let _e159: MultiVector = other_2157;
    let _e162: MultiVector = other_2157;
    let _e174: MultiVector = self_2413;
    let _e178: MultiVector = other_2157;
    let _e181: MultiVector = self_2413;
    let _e184: MultiVector = self_2413;
    let _e187: MultiVector = self_2413;
    let _e191: MultiVector = other_2157;
    let _e197: MultiVector = self_2413;
    let _e201: MultiVector = other_2157;
    let _e204: MultiVector = self_2413;
    let _e208: MultiVector = other_2157;
    let _e211: MultiVector = self_2413;
    let _e214: MultiVector = other_2157;
    let _e217: MultiVector = other_2157;
    let _e220: MultiVector = other_2157;
    let _e223: MultiVector = other_2157;
    let _e238: MultiVector = self_2413;
    let _e242: MultiVector = other_2157;
    let _e245: MultiVector = self_2413;
    let _e248: MultiVector = self_2413;
    let _e251: MultiVector = self_2413;
    let _e255: MultiVector = other_2157;
    let _e261: MultiVector = self_2413;
    let _e265: MultiVector = other_2157;
    let _e268: MultiVector = self_2413;
    let _e272: MultiVector = other_2157;
    let _e283: MultiVector = self_2413;
    let _e287: MultiVector = other_2157;
    let _e298: MultiVector = self_2413;
    let _e302: MultiVector = other_2157;
    let _e313: MultiVector = self_2413;
    let _e315: MultiVector = other_2157;
    let _e321: MultiVector = self_2413;
    let _e325: MultiVector = other_2157;
    let _e328: MultiVector = self_2413;
    let _e331: MultiVector = self_2413;
    let _e334: MultiVector = self_2413;
    let _e338: MultiVector = other_2157;
    let _e348: MultiVector = self_2413;
    let _e352: MultiVector = other_2157;
    let _e355: MultiVector = self_2413;
    let _e359: MultiVector = other_2157;
    let _e362: MultiVector = other_2157;
    let _e365: MultiVector = other_2157;
    let _e377: MultiVector = self_2413;
    let _e381: MultiVector = other_2157;
    let _e384: MultiVector = other_2157;
    let _e387: MultiVector = other_2157;
    let _e399: MultiVector = self_2413;
    let _e403: MultiVector = other_2157;
    let _e406: MultiVector = other_2157;
    let _e409: MultiVector = other_2157;
    let _e421: MultiVector = self_2413;
    let _e423: MultiVector = other_2157;
    let _e429: MultiVector = self_2413;
    let _e433: MultiVector = other_2157;
    let _e436: MultiVector = self_2413;
    let _e440: MultiVector = other_2157;
    let _e443: MultiVector = other_2157;
    let _e446: MultiVector = other_2157;
    let _e449: MultiVector = other_2157;
    let _e462: MultiVector = self_2413;
    let _e466: MultiVector = other_2157;
    let _e469: MultiVector = other_2157;
    let _e472: MultiVector = other_2157;
    let _e475: MultiVector = other_2157;
    let _e488: MultiVector = self_2413;
    let _e492: MultiVector = other_2157;
    let _e495: MultiVector = other_2157;
    let _e498: MultiVector = other_2157;
    let _e501: MultiVector = other_2157;
    let _e514: MultiVector = self_2413;
    let _e518: MultiVector = other_2157;
    let _e521: MultiVector = other_2157;
    let _e524: MultiVector = other_2157;
    let _e527: MultiVector = other_2157;
    let _e541: MultiVector = self_2413;
    let _e545: MultiVector = other_2157;
    let _e548: MultiVector = other_2157;
    let _e551: MultiVector = other_2157;
    let _e554: MultiVector = other_2157;
    let _e568: MultiVector = self_2413;
    let _e572: MultiVector = other_2157;
    let _e575: MultiVector = other_2157;
    let _e578: MultiVector = other_2157;
    let _e581: MultiVector = other_2157;
    let _e595: MultiVector = self_2413;
    let _e598: MultiVector = other_2157;
    let _e610: MultiVector = self_2413;
    let _e614: MultiVector = other_2157;
    let _e617: MultiVector = self_2413;
    let _e621: MultiVector = other_2157;
    let _e633: MultiVector = self_2413;
    let _e637: MultiVector = other_2157;
    let _e649: MultiVector = self_2413;
    let _e653: MultiVector = other_2157;
    let _e665: MultiVector = self_2413;
    let _e669: MultiVector = other_2157;
    let _e672: MultiVector = other_2157;
    let _e675: MultiVector = other_2157;
    let _e678: MultiVector = other_2157;
    let _e691: MultiVector = self_2413;
    let _e695: MultiVector = other_2157;
    let _e698: MultiVector = other_2157;
    let _e701: MultiVector = other_2157;
    let _e704: MultiVector = other_2157;
    let _e717: MultiVector = self_2413;
    let _e721: MultiVector = other_2157;
    let _e724: MultiVector = other_2157;
    let _e727: MultiVector = other_2157;
    let _e730: MultiVector = other_2157;
    let _e743: MultiVector = self_2413;
    let _e746: MultiVector = other_2157;
    let _e749: MultiVector = other_2157;
    let _e752: MultiVector = other_2157;
    let _e755: MultiVector = other_2157;
    return MultiVector(((((((((vec3<f32>(_e4.g0_.z) * _e8.g0_) + ((vec3<f32>(_e11.g6_.x) * vec3<f32>(_e15.g4_.x, _e18.g4_.x, _e21.g6_.x)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e34.g6_.y) * vec3<f32>(_e38.g4_.y, _e41.g4_.y, _e44.g6_.y)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e57.g6_.z) * vec3<f32>(_e61.g4_.z, _e64.g4_.z, _e67.g6_.z)) * vec3<f32>(0.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e80.g9_.x) * vec3<f32>(_e84.g8_.x, _e87.g8_.x, _e90.g9_.x)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e102.g9_.y) * vec3<f32>(_e106.g8_.y, _e109.g8_.y, _e112.g9_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e124.g9_.z) * vec3<f32>(_e128.g8_.z, _e131.g8_.z, _e134.g9_.z)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e146.g3_.x, _e149.g3_.w, _e152.g3_.w) * vec3<f32>(_e156.g2_.x, _e159.g2_.x, _e162.g3_.w)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(_e174.g0_.z) * _e178.g1_) + (vec3<f32>(_e181.g9_.x, _e184.g9_.y, _e187.g9_.z) * vec3<f32>(_e191.g0_.x))), (vec2<f32>(_e197.g0_.z) * _e201.g2_), ((vec4<f32>(_e204.g0_.z) * _e208.g3_) + ((_e211.g9_.xyzx * vec4<f32>(_e214.g2_.y, _e217.g2_.y, _e220.g2_.y, _e223.g2_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((vec3<f32>(_e238.g0_.z) * _e242.g4_) + (vec3<f32>(_e245.g9_.x, _e248.g9_.y, _e251.g9_.z) * vec3<f32>(_e255.g2_.x))), (((((vec3<f32>(_e261.g0_.z) * _e265.g5_) + ((vec3<f32>(_e268.g9_.x) * _e272.g1_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e283.g9_.y) * _e287.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e298.g9_.z) * _e302.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e313.g6_ * vec3<f32>(_e315.g0_.x))), ((vec3<f32>(_e321.g0_.z) * _e325.g6_) + ((vec3<f32>(_e328.g9_.x, _e331.g9_.y, _e334.g9_.z) * vec3<f32>(_e338.g3_.w)) * vec3<f32>(-(1.0)))), (((((vec3<f32>(_e348.g0_.z) * _e352.g7_) + ((vec3<f32>(_e355.g9_.x) * vec3<f32>(_e359.g3_.z, _e362.g3_.z, _e365.g3_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e377.g9_.y) * vec3<f32>(_e381.g3_.z, _e384.g3_.z, _e387.g3_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e399.g9_.z) * vec3<f32>(_e403.g3_.y, _e406.g3_.x, _e409.g3_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e421.g6_ * vec3<f32>(_e423.g2_.y))), ((((((((vec4<f32>(_e429.g0_.z) * _e433.g8_) + ((vec4<f32>(_e436.g6_.x) * vec4<f32>(_e440.g2_.x, _e443.g2_.x, _e446.g2_.x, _e449.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e462.g6_.y) * vec4<f32>(_e466.g2_.x, _e469.g2_.x, _e472.g2_.x, _e475.g1_.y)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e488.g6_.z) * vec4<f32>(_e492.g2_.x, _e495.g2_.x, _e498.g2_.x, _e501.g1_.z)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e514.g9_.x) * vec4<f32>(_e518.g4_.z, _e521.g4_.z, _e524.g4_.y, _e527.g5_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e541.g9_.y) * vec4<f32>(_e545.g4_.z, _e548.g4_.z, _e551.g4_.x, _e554.g5_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e568.g9_.z) * vec4<f32>(_e572.g4_.y, _e575.g4_.x, _e578.g4_.y, _e581.g5_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((_e595.g3_.xxxw * vec4<f32>(_e598.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4<f32>(_e610.g0_.z) * _e614.g9_) + ((vec4<f32>(_e617.g6_.x) * _e621.g3_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e633.g6_.y) * _e637.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e649.g6_.z) * _e653.g3_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e665.g9_.x) * vec4<f32>(_e669.g6_.z, _e672.g6_.z, _e675.g6_.y, _e678.g7_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e691.g9_.y) * vec4<f32>(_e695.g6_.z, _e698.g6_.z, _e701.g6_.x, _e704.g7_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e717.g9_.z) * vec4<f32>(_e721.g6_.y, _e724.g6_.x, _e727.g6_.y, _e730.g7_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e743.g3_.xxxw * vec4<f32>(_e746.g2_.x, _e749.g2_.x, _e752.g2_.x, _e755.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn multi_vector_multi_vector_right_anti_contraction(self_2414: MultiVector, other_2158: MultiVector) -> MultiVector {
    var self_2415: MultiVector;
    var other_2159: MultiVector;

    self_2415 = self_2414;
    other_2159 = other_2158;
    let _e4: MultiVector = self_2415;
    let _e8: MultiVector = other_2159;
    let _e19: MultiVector = self_2415;
    let _e23: MultiVector = other_2159;
    let _e35: MultiVector = self_2415;
    let _e39: MultiVector = other_2159;
    let _e51: MultiVector = self_2415;
    let _e55: MultiVector = other_2159;
    let _e67: MultiVector = self_2415;
    let _e71: MultiVector = other_2159;
    let _e83: MultiVector = self_2415;
    let _e87: MultiVector = other_2159;
    let _e99: MultiVector = self_2415;
    let _e103: MultiVector = other_2159;
    let _e115: MultiVector = self_2415;
    let _e119: MultiVector = other_2159;
    let _e131: MultiVector = self_2415;
    let _e135: MultiVector = other_2159;
    let _e146: MultiVector = self_2415;
    let _e150: MultiVector = other_2159;
    let _e161: MultiVector = self_2415;
    let _e165: MultiVector = other_2159;
    let _e176: MultiVector = self_2415;
    let _e180: MultiVector = other_2159;
    let _e191: MultiVector = self_2415;
    let _e195: MultiVector = other_2159;
    let _e206: MultiVector = self_2415;
    let _e210: MultiVector = other_2159;
    let _e221: MultiVector = self_2415;
    let _e223: MultiVector = other_2159;
    let _e229: MultiVector = self_2415;
    let _e233: MultiVector = other_2159;
    let _e236: MultiVector = other_2159;
    let _e239: MultiVector = other_2159;
    let _e244: MultiVector = self_2415;
    let _e246: MultiVector = other_2159;
    let _e252: MultiVector = self_2415;
    let _e254: MultiVector = other_2159;
    let _e259: MultiVector = self_2415;
    let _e263: MultiVector = other_2159;
    let _e274: MultiVector = self_2415;
    let _e278: MultiVector = other_2159;
    let _e290: MultiVector = self_2415;
    let _e294: MultiVector = other_2159;
    let _e306: MultiVector = self_2415;
    let _e310: MultiVector = other_2159;
    let _e322: MultiVector = self_2415;
    let _e325: MultiVector = self_2415;
    let _e328: MultiVector = self_2415;
    let _e331: MultiVector = self_2415;
    let _e335: MultiVector = other_2159;
    let _e348: MultiVector = self_2415;
    let _e352: MultiVector = other_2159;
    let _e355: MultiVector = other_2159;
    let _e358: MultiVector = other_2159;
    let _e364: MultiVector = self_2415;
    let _e366: MultiVector = other_2159;
    let _e372: MultiVector = self_2415;
    let _e376: MultiVector = other_2159;
    let _e379: MultiVector = self_2415;
    let _e383: MultiVector = other_2159;
    let _e386: MultiVector = other_2159;
    let _e389: MultiVector = other_2159;
    let _e401: MultiVector = self_2415;
    let _e405: MultiVector = other_2159;
    let _e408: MultiVector = other_2159;
    let _e411: MultiVector = other_2159;
    let _e423: MultiVector = self_2415;
    let _e427: MultiVector = other_2159;
    let _e438: MultiVector = self_2415;
    let _e442: MultiVector = other_2159;
    let _e453: MultiVector = self_2415;
    let _e457: MultiVector = other_2159;
    let _e468: MultiVector = self_2415;
    let _e472: MultiVector = other_2159;
    let _e475: MultiVector = other_2159;
    let _e478: MultiVector = other_2159;
    let _e492: MultiVector = self_2415;
    let _e496: MultiVector = other_2159;
    let _e499: MultiVector = other_2159;
    let _e502: MultiVector = other_2159;
    let _e508: MultiVector = self_2415;
    let _e510: MultiVector = other_2159;
    let _e516: MultiVector = self_2415;
    let _e520: MultiVector = other_2159;
    let _e523: MultiVector = self_2415;
    let _e527: MultiVector = other_2159;
    let _e530: MultiVector = other_2159;
    let _e533: MultiVector = other_2159;
    let _e545: MultiVector = self_2415;
    let _e549: MultiVector = other_2159;
    let _e552: MultiVector = other_2159;
    let _e555: MultiVector = other_2159;
    let _e567: MultiVector = self_2415;
    let _e571: MultiVector = other_2159;
    let _e582: MultiVector = self_2415;
    let _e586: MultiVector = other_2159;
    let _e597: MultiVector = self_2415;
    let _e601: MultiVector = other_2159;
    let _e612: MultiVector = self_2415;
    let _e616: MultiVector = other_2159;
    let _e619: MultiVector = other_2159;
    let _e622: MultiVector = other_2159;
    let _e634: MultiVector = self_2415;
    let _e638: MultiVector = other_2159;
    let _e650: MultiVector = self_2415;
    let _e654: MultiVector = other_2159;
    let _e667: MultiVector = self_2415;
    let _e671: MultiVector = other_2159;
    let _e684: MultiVector = self_2415;
    let _e688: MultiVector = other_2159;
    let _e691: MultiVector = other_2159;
    let _e694: MultiVector = other_2159;
    let _e697: MultiVector = other_2159;
    let _e709: MultiVector = self_2415;
    let _e713: MultiVector = other_2159;
    let _e725: MultiVector = self_2415;
    let _e729: MultiVector = other_2159;
    let _e741: MultiVector = self_2415;
    let _e745: MultiVector = other_2159;
    let _e758: MultiVector = self_2415;
    let _e762: MultiVector = other_2159;
    let _e775: MultiVector = self_2415;
    let _e779: MultiVector = other_2159;
    let _e792: MultiVector = self_2415;
    let _e796: MultiVector = other_2159;
    let _e808: MultiVector = self_2415;
    let _e812: MultiVector = other_2159;
    let _e824: MultiVector = self_2415;
    let _e828: MultiVector = other_2159;
    let _e840: MultiVector = self_2415;
    let _e844: MultiVector = other_2159;
    let _e856: MultiVector = self_2415;
    let _e859: MultiVector = self_2415;
    let _e862: MultiVector = self_2415;
    let _e865: MultiVector = self_2415;
    let _e869: MultiVector = other_2159;
    let _e872: MultiVector = other_2159;
    let _e875: MultiVector = other_2159;
    let _e878: MultiVector = other_2159;
    let _e891: MultiVector = self_2415;
    let _e895: MultiVector = other_2159;
    let _e907: MultiVector = self_2415;
    let _e911: MultiVector = other_2159;
    let _e924: MultiVector = self_2415;
    let _e928: MultiVector = other_2159;
    let _e941: MultiVector = self_2415;
    let _e945: MultiVector = other_2159;
    let _e948: MultiVector = other_2159;
    let _e951: MultiVector = other_2159;
    let _e954: MultiVector = other_2159;
    let _e966: MultiVector = self_2415;
    let _e970: MultiVector = other_2159;
    let _e982: MultiVector = self_2415;
    let _e986: MultiVector = other_2159;
    let _e998: MultiVector = self_2415;
    let _e1002: MultiVector = other_2159;
    let _e1014: MultiVector = self_2415;
    let _e1018: MultiVector = other_2159;
    let _e1031: MultiVector = self_2415;
    let _e1035: MultiVector = other_2159;
    let _e1048: MultiVector = self_2415;
    let _e1052: MultiVector = other_2159;
    let _e1065: MultiVector = self_2415;
    let _e1069: MultiVector = other_2159;
    let _e1081: MultiVector = self_2415;
    let _e1085: MultiVector = other_2159;
    let _e1097: MultiVector = self_2415;
    let _e1101: MultiVector = other_2159;
    let _e1113: MultiVector = self_2415;
    let _e1117: MultiVector = other_2159;
    let _e1129: MultiVector = self_2415;
    let _e1132: MultiVector = self_2415;
    let _e1135: MultiVector = self_2415;
    let _e1138: MultiVector = self_2415;
    let _e1142: MultiVector = other_2159;
    return MultiVector(((((((((((((((((vec3<f32>(_e4.g2_.x) * vec3<f32>(_e8.g3_.w)) * vec3<f32>(0.0, -(1.0), 0.0)) + ((vec3<f32>(_e19.g3_.w) * vec3<f32>(_e23.g3_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e35.g4_.x) * vec3<f32>(_e39.g6_.x)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e51.g4_.y) * vec3<f32>(_e55.g6_.y)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e67.g4_.z) * vec3<f32>(_e71.g6_.z)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e83.g6_.x) * vec3<f32>(_e87.g6_.x)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e99.g6_.y) * vec3<f32>(_e103.g6_.y)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e115.g6_.z) * vec3<f32>(_e119.g6_.z)) * vec3<f32>(0.0, 0.0, -(1.0)))) + ((vec3<f32>(_e131.g8_.x) * vec3<f32>(_e135.g9_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e146.g8_.y) * vec3<f32>(_e150.g9_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e161.g8_.z) * vec3<f32>(_e165.g9_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e176.g9_.x) * vec3<f32>(_e180.g9_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e191.g9_.y) * vec3<f32>(_e195.g9_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e206.g9_.z) * vec3<f32>(_e210.g9_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e221.g0_ * vec3<f32>(_e223.g0_.z))), ((vec3<f32>(_e229.g0_.x) * vec3<f32>(_e233.g9_.x, _e236.g9_.y, _e239.g9_.z)) + (_e244.g1_ * vec3<f32>(_e246.g0_.z))), (_e252.g2_ * vec2<f32>(_e254.g0_.z)), ((((((vec4<f32>(_e259.g3_.x) * vec4<f32>(_e263.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e274.g3_.y) * vec4<f32>(_e278.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e290.g3_.z) * vec4<f32>(_e294.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e306.g3_.w) * vec4<f32>(_e310.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e322.g2_.y, _e325.g2_.y, _e328.g2_.y, _e331.g2_.x) * _e335.g9_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec3<f32>(0.0) - (vec3<f32>(_e348.g2_.x) * vec3<f32>(_e352.g9_.x, _e355.g9_.y, _e358.g9_.z))) + (_e364.g4_ * vec3<f32>(_e366.g0_.z))), (((((((vec3<f32>(_e372.g0_.x) * _e376.g6_) + ((vec3<f32>(_e379.g1_.y) * vec3<f32>(_e383.g9_.z, _e386.g9_.z, _e389.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e401.g1_.z) * vec3<f32>(_e405.g9_.y, _e408.g9_.x, _e411.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e423.g5_.x) * vec3<f32>(_e427.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e438.g5_.y) * vec3<f32>(_e442.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e453.g5_.z) * vec3<f32>(_e457.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e468.g1_.x) * vec3<f32>(_e472.g9_.x, _e475.g9_.z, _e478.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e492.g3_.w) * vec3<f32>(_e496.g9_.x, _e499.g9_.y, _e502.g9_.z))) + (_e508.g6_ * vec3<f32>(_e510.g0_.z))), (((((((vec3<f32>(_e516.g2_.y) * _e520.g6_) + ((vec3<f32>(_e523.g3_.y) * vec3<f32>(_e527.g9_.z, _e530.g9_.z, _e533.g9_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e545.g3_.z) * vec3<f32>(_e549.g9_.y, _e552.g9_.x, _e555.g9_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e567.g7_.x) * vec3<f32>(_e571.g0_.z)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e582.g7_.y) * vec3<f32>(_e586.g0_.z)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e597.g7_.z) * vec3<f32>(_e601.g0_.z)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e612.g3_.x) * vec3<f32>(_e616.g9_.x, _e619.g9_.z, _e622.g9_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((((((((((vec4<f32>(_e634.g1_.x) * vec4<f32>(_e638.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e650.g1_.y) * vec4<f32>(_e654.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e667.g1_.z) * vec4<f32>(_e671.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e684.g2_.x) * vec4<f32>(_e688.g6_.x, _e691.g6_.y, _e694.g6_.z, _e697.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e709.g4_.y) * _e713.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e725.g4_.z) * _e729.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e741.g5_.x) * vec4<f32>(_e745.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e758.g5_.y) * vec4<f32>(_e762.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e775.g5_.z) * vec4<f32>(_e779.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e792.g8_.x) * vec4<f32>(_e796.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e808.g8_.y) * vec4<f32>(_e812.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e824.g8_.z) * vec4<f32>(_e828.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e840.g8_.w) * vec4<f32>(_e844.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e856.g0_.x, _e859.g4_.x, _e862.g4_.x, _e865.g0_.x) * vec4<f32>(_e869.g3_.x, _e872.g9_.z, _e875.g9_.y, _e878.g3_.w)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))), ((((((((((((((((vec4<f32>(_e891.g3_.x) * vec4<f32>(_e895.g6_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e907.g3_.y) * vec4<f32>(_e911.g6_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e924.g3_.z) * vec4<f32>(_e928.g6_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e941.g3_.w) * vec4<f32>(_e945.g6_.x, _e948.g6_.y, _e951.g6_.z, _e954.g6_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e966.g6_.x) * _e970.g9_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e982.g6_.y) * _e986.g9_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e998.g6_.z) * _e1002.g9_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1014.g7_.x) * vec4<f32>(_e1018.g9_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1031.g7_.y) * vec4<f32>(_e1035.g9_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1048.g7_.z) * vec4<f32>(_e1052.g9_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1065.g9_.x) * vec4<f32>(_e1069.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e1081.g9_.y) * vec4<f32>(_e1085.g0_.z)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e1097.g9_.z) * vec4<f32>(_e1101.g0_.z)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e1113.g9_.w) * vec4<f32>(_e1117.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1129.g2_.x, _e1132.g2_.x, _e1135.g2_.x, _e1138.g2_.y) * _e1142.g3_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_scalar_product(self_2416: MultiVector, other_2160: MultiVector) -> Scalar {
    var self_2417: MultiVector;
    var other_2161: MultiVector;

    self_2417 = self_2416;
    other_2161 = other_2160;
    let _e4: MultiVector = self_2417;
    let _e7: MultiVector = other_2161;
    let _e11: MultiVector = self_2417;
    let _e14: MultiVector = other_2161;
    let _e19: MultiVector = self_2417;
    let _e22: MultiVector = other_2161;
    let _e27: MultiVector = self_2417;
    let _e30: MultiVector = other_2161;
    let _e35: MultiVector = self_2417;
    let _e38: MultiVector = other_2161;
    let _e43: MultiVector = self_2417;
    let _e46: MultiVector = other_2161;
    let _e51: MultiVector = self_2417;
    let _e54: MultiVector = other_2161;
    let _e59: MultiVector = self_2417;
    let _e62: MultiVector = other_2161;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g1_.x * _e14.g1_.x)) + (_e19.g1_.y * _e22.g1_.y)) + (_e27.g1_.z * _e30.g1_.z)) - (_e35.g5_.x * _e38.g5_.x)) - (_e43.g5_.y * _e46.g5_.y)) - (_e51.g5_.z * _e54.g5_.z)) - (_e59.g8_.w * _e62.g8_.w)));
}

fn multi_vector_multi_vector_anti_scalar_product(self_2418: MultiVector, other_2162: MultiVector) -> AntiScalar {
    var self_2419: MultiVector;
    var other_2163: MultiVector;

    self_2419 = self_2418;
    other_2163 = other_2162;
    let _e4: MultiVector = self_2419;
    let _e7: MultiVector = other_2163;
    let _e11: MultiVector = self_2419;
    let _e14: MultiVector = other_2163;
    let _e19: MultiVector = self_2419;
    let _e22: MultiVector = other_2163;
    let _e27: MultiVector = self_2419;
    let _e30: MultiVector = other_2163;
    let _e35: MultiVector = self_2419;
    let _e38: MultiVector = other_2163;
    let _e43: MultiVector = self_2419;
    let _e46: MultiVector = other_2163;
    let _e51: MultiVector = self_2419;
    let _e54: MultiVector = other_2163;
    let _e59: MultiVector = self_2419;
    let _e62: MultiVector = other_2163;
    return AntiScalar(((((((((_e4.g0_.z * _e7.g0_.z) - (_e11.g3_.w * _e14.g3_.w)) - (_e19.g6_.x * _e22.g6_.x)) - (_e27.g6_.y * _e30.g6_.y)) - (_e35.g6_.z * _e38.g6_.z)) + (_e43.g9_.x * _e46.g9_.x)) + (_e51.g9_.y * _e54.g9_.y)) + (_e59.g9_.z * _e62.g9_.z)));
}

fn multi_vector_squared_magnitude(self_2420: MultiVector) -> Scalar {
    var self_2421: MultiVector;

    self_2421 = self_2420;
    let _e2: MultiVector = self_2421;
    let _e3: MultiVector = self_2421;
    let _e4: MultiVector = multi_vector_reversal(_e3);
    let _e5: Scalar = multi_vector_multi_vector_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_magnitude(self_2422: MultiVector) -> Scalar {
    var self_2423: MultiVector;

    self_2423 = self_2422;
    let _e2: MultiVector = self_2423;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_scale(self_2424: MultiVector, other_2164: f32) -> MultiVector {
    var self_2425: MultiVector;
    var other_2165: f32;

    self_2425 = self_2424;
    other_2165 = other_2164;
    let _e4: MultiVector = self_2425;
    let _e5: f32 = other_2165;
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn multi_vector_signum(self_2426: MultiVector) -> MultiVector {
    var self_2427: MultiVector;

    self_2427 = self_2426;
    let _e2: MultiVector = self_2427;
    let _e3: MultiVector = self_2427;
    let _e4: Scalar = multi_vector_magnitude(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_inverse(self_2428: MultiVector) -> MultiVector {
    var self_2429: MultiVector;

    self_2429 = self_2428;
    let _e2: MultiVector = self_2429;
    let _e3: MultiVector = multi_vector_reversal(_e2);
    let _e4: MultiVector = self_2429;
    let _e5: Scalar = multi_vector_squared_magnitude(_e4);
    let _e10: MultiVector = multi_vector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn anti_scalar_scalar_geometric_quotient(self_2430: AntiScalar, other_2166: Scalar) -> AntiScalar {
    var self_2431: AntiScalar;
    var other_2167: Scalar;

    self_2431 = self_2430;
    other_2167 = other_2166;
    let _e4: AntiScalar = self_2431;
    let _e5: Scalar = other_2167;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn circle_flector_transformation(self_2432: Circle, other_2168: Flector) -> Flector {
    var self_2433: Circle;
    var other_2169: Flector;

    self_2433 = self_2432;
    other_2169 = other_2168;
    let _e4: Circle = self_2433;
    let _e5: Flector = other_2169;
    let _e6: Motor = circle_flector_geometric_product(_e4, _e5);
    let _e7: Circle = self_2433;
    let _e8: Circle = circle_reversal(_e7);
    let _e9: Flector = motor_circle_geometric_product(_e6, _e8);
    return _e9;
}

fn circle_motor_transformation(self_2434: Circle, other_2170: Motor) -> Motor {
    var self_2435: Circle;
    var other_2171: Motor;

    self_2435 = self_2434;
    other_2171 = other_2170;
    let _e4: Circle = self_2435;
    let _e5: Motor = other_2171;
    let _e6: Flector = circle_motor_geometric_product(_e4, _e5);
    let _e7: Circle = self_2435;
    let _e8: Circle = circle_reversal(_e7);
    let _e9: Motor = flector_circle_geometric_product(_e6, _e8);
    return _e9;
}

fn circle_multi_vector_geometric_quotient(self_2436: Circle, other_2172: MultiVector) -> MultiVector {
    var self_2437: Circle;
    var other_2173: MultiVector;

    self_2437 = self_2436;
    other_2173 = other_2172;
    let _e4: Circle = self_2437;
    let _e5: MultiVector = other_2173;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = circle_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn circle_multi_vector_transformation(self_2438: Circle, other_2174: MultiVector) -> MultiVector {
    var self_2439: Circle;
    var other_2175: MultiVector;

    self_2439 = self_2438;
    other_2175 = other_2174;
    let _e4: Circle = self_2439;
    let _e5: MultiVector = other_2175;
    let _e6: MultiVector = circle_multi_vector_geometric_product(_e4, _e5);
    let _e7: Circle = self_2439;
    let _e8: Circle = circle_reversal(_e7);
    let _e9: MultiVector = multi_vector_circle_geometric_product(_e6, _e8);
    return _e9;
}

fn circle_scalar_geometric_quotient(self_2440: Circle, other_2176: Scalar) -> Circle {
    var self_2441: Circle;
    var other_2177: Scalar;

    self_2441 = self_2440;
    other_2177 = other_2176;
    let _e4: Circle = self_2441;
    let _e5: Scalar = other_2177;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Circle = circle_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn dilation_flector_transformation(self_2442: Dilation, other_2178: Flector) -> Flector {
    var self_2443: Dilation;
    var other_2179: Flector;

    self_2443 = self_2442;
    other_2179 = other_2178;
    let _e4: Dilation = self_2443;
    let _e5: Flector = other_2179;
    let _e6: Motor = dilation_flector_geometric_product(_e4, _e5);
    let _e7: Dilation = self_2443;
    let _e8: Dilation = dilation_reversal(_e7);
    let _e9: Flector = motor_dilation_geometric_product(_e6, _e8);
    return _e9;
}

fn dilation_motor_transformation(self_2444: Dilation, other_2180: Motor) -> Motor {
    var self_2445: Dilation;
    var other_2181: Motor;

    self_2445 = self_2444;
    other_2181 = other_2180;
    let _e4: Dilation = self_2445;
    let _e5: Motor = other_2181;
    let _e6: Flector = dilation_motor_geometric_product(_e4, _e5);
    let _e7: Dilation = self_2445;
    let _e8: Dilation = dilation_reversal(_e7);
    let _e9: Motor = flector_dilation_geometric_product(_e6, _e8);
    return _e9;
}

fn dilation_multi_vector_geometric_quotient(self_2446: Dilation, other_2182: MultiVector) -> MultiVector {
    var self_2447: Dilation;
    var other_2183: MultiVector;

    self_2447 = self_2446;
    other_2183 = other_2182;
    let _e4: Dilation = self_2447;
    let _e5: MultiVector = other_2183;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = dilation_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn dilation_multi_vector_transformation(self_2448: Dilation, other_2184: MultiVector) -> MultiVector {
    var self_2449: Dilation;
    var other_2185: MultiVector;

    self_2449 = self_2448;
    other_2185 = other_2184;
    let _e4: Dilation = self_2449;
    let _e5: MultiVector = other_2185;
    let _e6: MultiVector = dilation_multi_vector_geometric_product(_e4, _e5);
    let _e7: Dilation = self_2449;
    let _e8: Dilation = dilation_reversal(_e7);
    let _e9: MultiVector = multi_vector_dilation_geometric_product(_e6, _e8);
    return _e9;
}

fn dilation_scalar_geometric_quotient(self_2450: Dilation, other_2186: Scalar) -> Dilation {
    var self_2451: Dilation;
    var other_2187: Scalar;

    self_2451 = self_2450;
    other_2187 = other_2186;
    let _e4: Dilation = self_2451;
    let _e5: Scalar = other_2187;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Dilation = dilation_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn dipole_flat_point_transformation(self_2452: Dipole, other_2188: FlatPoint) -> FlatPoint {
    var self_2453: Dipole;
    var other_2189: FlatPoint;

    self_2453 = self_2452;
    other_2189 = other_2188;
    let _e4: Dipole = self_2453;
    let _e5: FlatPoint = other_2189;
    let _e6: Flector = dipole_flat_point_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2453;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Flector = flector_dipole_geometric_product(_e6, _e8);
    let _e10: FlatPoint = flector_flat_point_into(_e9);
    return _e10;
}

fn dipole_flector_transformation(self_2454: Dipole, other_2190: Flector) -> Flector {
    var self_2455: Dipole;
    var other_2191: Flector;

    self_2455 = self_2454;
    other_2191 = other_2190;
    let _e4: Dipole = self_2455;
    let _e5: Flector = other_2191;
    let _e6: Flector = dipole_flector_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2455;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Flector = flector_dipole_geometric_product(_e6, _e8);
    return _e9;
}

fn dipole_line_transformation(self_2456: Dipole, other_2192: Line) -> Line {
    var self_2457: Dipole;
    var other_2193: Line;

    self_2457 = self_2456;
    other_2193 = other_2192;
    let _e4: Dipole = self_2457;
    let _e5: Line = other_2193;
    let _e6: Motor = dipole_line_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2457;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Motor = motor_dipole_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn dipole_motor_transformation(self_2458: Dipole, other_2194: Motor) -> Motor {
    var self_2459: Dipole;
    var other_2195: Motor;

    self_2459 = self_2458;
    other_2195 = other_2194;
    let _e4: Dipole = self_2459;
    let _e5: Motor = other_2195;
    let _e6: Motor = dipole_motor_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2459;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Motor = motor_dipole_geometric_product(_e6, _e8);
    return _e9;
}

fn dipole_multi_vector_geometric_quotient(self_2460: Dipole, other_2196: MultiVector) -> MultiVector {
    var self_2461: Dipole;
    var other_2197: MultiVector;

    self_2461 = self_2460;
    other_2197 = other_2196;
    let _e4: Dipole = self_2461;
    let _e5: MultiVector = other_2197;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = dipole_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn dipole_multi_vector_transformation(self_2462: Dipole, other_2198: MultiVector) -> MultiVector {
    var self_2463: Dipole;
    var other_2199: MultiVector;

    self_2463 = self_2462;
    other_2199 = other_2198;
    let _e4: Dipole = self_2463;
    let _e5: MultiVector = other_2199;
    let _e6: MultiVector = dipole_multi_vector_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2463;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: MultiVector = multi_vector_dipole_geometric_product(_e6, _e8);
    return _e9;
}

fn dipole_rotor_transformation(self_2464: Dipole, other_2200: Rotor) -> Rotor {
    var self_2465: Dipole;
    var other_2201: Rotor;

    self_2465 = self_2464;
    other_2201 = other_2200;
    let _e4: Dipole = self_2465;
    let _e5: Rotor = other_2201;
    let _e6: Rotor = dipole_rotor_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2465;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Rotor = rotor_dipole_geometric_product(_e6, _e8);
    return _e9;
}

fn dipole_scalar_geometric_quotient(self_2466: Dipole, other_2202: Scalar) -> Dipole {
    var self_2467: Dipole;
    var other_2203: Scalar;

    self_2467 = self_2466;
    other_2203 = other_2202;
    let _e4: Dipole = self_2467;
    let _e5: Scalar = other_2203;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Dipole = dipole_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn dipole_translator_transformation(self_2468: Dipole, other_2204: Translator) -> Translator {
    var self_2469: Dipole;
    var other_2205: Translator;

    self_2469 = self_2468;
    other_2205 = other_2204;
    let _e4: Dipole = self_2469;
    let _e5: Translator = other_2205;
    let _e6: Motor = dipole_translator_geometric_product(_e4, _e5);
    let _e7: Dipole = self_2469;
    let _e8: Dipole = dipole_reversal(_e7);
    let _e9: Motor = motor_dipole_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn flat_point_dipole_geometric_quotient(self_2470: FlatPoint, other_2206: Dipole) -> Flector {
    var self_2471: FlatPoint;
    var other_2207: Dipole;

    self_2471 = self_2470;
    other_2207 = other_2206;
    let _e4: FlatPoint = self_2471;
    let _e5: Dipole = other_2207;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Flector = flat_point_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn flat_point_scalar_geometric_quotient(self_2472: FlatPoint, other_2208: Scalar) -> FlatPoint {
    var self_2473: FlatPoint;
    var other_2209: Scalar;

    self_2473 = self_2472;
    other_2209 = other_2208;
    let _e4: FlatPoint = self_2473;
    let _e5: Scalar = other_2209;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: FlatPoint = flat_point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_circle_geometric_quotient(self_2474: Flector, other_2210: Circle) -> Motor {
    var self_2475: Flector;
    var other_2211: Circle;

    self_2475 = self_2474;
    other_2211 = other_2210;
    let _e4: Flector = self_2475;
    let _e5: Circle = other_2211;
    let _e6: Circle = circle_inverse(_e5);
    let _e7: Motor = flector_circle_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_dilation_geometric_quotient(self_2476: Flector, other_2212: Dilation) -> Motor {
    var self_2477: Flector;
    var other_2213: Dilation;

    self_2477 = self_2476;
    other_2213 = other_2212;
    let _e4: Flector = self_2477;
    let _e5: Dilation = other_2213;
    let _e6: Dilation = dilation_inverse(_e5);
    let _e7: Motor = flector_dilation_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_dipole_geometric_quotient(self_2478: Flector, other_2214: Dipole) -> Flector {
    var self_2479: Flector;
    var other_2215: Dipole;

    self_2479 = self_2478;
    other_2215 = other_2214;
    let _e4: Flector = self_2479;
    let _e5: Dipole = other_2215;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Flector = flector_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_radial_point_geometric_quotient(self_2480: Flector, other_2216: RadialPoint) -> Motor {
    var self_2481: Flector;
    var other_2217: RadialPoint;

    self_2481 = self_2480;
    other_2217 = other_2216;
    let _e4: Flector = self_2481;
    let _e5: RadialPoint = other_2217;
    let _e6: RadialPoint = radial_point_inverse(_e5);
    let _e7: Motor = flector_radial_point_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_scalar_geometric_quotient(self_2482: Flector, other_2218: Scalar) -> Flector {
    var self_2483: Flector;
    var other_2219: Scalar;

    self_2483 = self_2482;
    other_2219 = other_2218;
    let _e4: Flector = self_2483;
    let _e5: Scalar = other_2219;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Flector = flector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn line_dipole_geometric_quotient(self_2484: Line, other_2220: Dipole) -> Motor {
    var self_2485: Line;
    var other_2221: Dipole;

    self_2485 = self_2484;
    other_2221 = other_2220;
    let _e4: Line = self_2485;
    let _e5: Dipole = other_2221;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Motor = line_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn line_radial_point_geometric_quotient(self_2486: Line, other_2222: RadialPoint) -> Flector {
    var self_2487: Line;
    var other_2223: RadialPoint;

    self_2487 = self_2486;
    other_2223 = other_2222;
    let _e4: Line = self_2487;
    let _e5: RadialPoint = other_2223;
    let _e6: RadialPoint = radial_point_inverse(_e5);
    let _e7: Flector = line_radial_point_geometric_product(_e4, _e6);
    return _e7;
}

fn line_scalar_geometric_quotient(self_2488: Line, other_2224: Scalar) -> Line {
    var self_2489: Line;
    var other_2225: Scalar;

    self_2489 = self_2488;
    other_2225 = other_2224;
    let _e4: Line = self_2489;
    let _e5: Scalar = other_2225;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Line = line_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_circle_geometric_quotient(self_2490: Motor, other_2226: Circle) -> Flector {
    var self_2491: Motor;
    var other_2227: Circle;

    self_2491 = self_2490;
    other_2227 = other_2226;
    let _e4: Motor = self_2491;
    let _e5: Circle = other_2227;
    let _e6: Circle = circle_inverse(_e5);
    let _e7: Flector = motor_circle_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_dilation_geometric_quotient(self_2492: Motor, other_2228: Dilation) -> Flector {
    var self_2493: Motor;
    var other_2229: Dilation;

    self_2493 = self_2492;
    other_2229 = other_2228;
    let _e4: Motor = self_2493;
    let _e5: Dilation = other_2229;
    let _e6: Dilation = dilation_inverse(_e5);
    let _e7: Flector = motor_dilation_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_dipole_geometric_quotient(self_2494: Motor, other_2230: Dipole) -> Motor {
    var self_2495: Motor;
    var other_2231: Dipole;

    self_2495 = self_2494;
    other_2231 = other_2230;
    let _e4: Motor = self_2495;
    let _e5: Dipole = other_2231;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Motor = motor_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_radial_point_geometric_quotient(self_2496: Motor, other_2232: RadialPoint) -> Flector {
    var self_2497: Motor;
    var other_2233: RadialPoint;

    self_2497 = self_2496;
    other_2233 = other_2232;
    let _e4: Motor = self_2497;
    let _e5: RadialPoint = other_2233;
    let _e6: RadialPoint = radial_point_inverse(_e5);
    let _e7: Flector = motor_radial_point_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_scalar_geometric_quotient(self_2498: Motor, other_2234: Scalar) -> Motor {
    var self_2499: Motor;
    var other_2235: Scalar;

    self_2499 = self_2498;
    other_2235 = other_2234;
    let _e4: Motor = self_2499;
    let _e5: Scalar = other_2235;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Motor = motor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_circle_geometric_quotient(self_2500: MultiVector, other_2236: Circle) -> MultiVector {
    var self_2501: MultiVector;
    var other_2237: Circle;

    self_2501 = self_2500;
    other_2237 = other_2236;
    let _e4: MultiVector = self_2501;
    let _e5: Circle = other_2237;
    let _e6: Circle = circle_inverse(_e5);
    let _e7: MultiVector = multi_vector_circle_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_circle_transformation(self_2502: MultiVector, other_2238: Circle) -> Circle {
    var self_2503: MultiVector;
    var other_2239: Circle;

    self_2503 = self_2502;
    other_2239 = other_2238;
    let _e4: MultiVector = self_2503;
    let _e5: Circle = other_2239;
    let _e6: MultiVector = multi_vector_circle_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2503;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Circle = multi_vector_circle_into(_e9);
    return _e10;
}

fn multi_vector_dilation_geometric_quotient(self_2504: MultiVector, other_2240: Dilation) -> MultiVector {
    var self_2505: MultiVector;
    var other_2241: Dilation;

    self_2505 = self_2504;
    other_2241 = other_2240;
    let _e4: MultiVector = self_2505;
    let _e5: Dilation = other_2241;
    let _e6: Dilation = dilation_inverse(_e5);
    let _e7: MultiVector = multi_vector_dilation_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_dilation_transformation(self_2506: MultiVector, other_2242: Dilation) -> Dilation {
    var self_2507: MultiVector;
    var other_2243: Dilation;

    self_2507 = self_2506;
    other_2243 = other_2242;
    let _e4: MultiVector = self_2507;
    let _e5: Dilation = other_2243;
    let _e6: MultiVector = multi_vector_dilation_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2507;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Dilation = multi_vector_dilation_into(_e9);
    return _e10;
}

fn multi_vector_dipole_geometric_quotient(self_2508: MultiVector, other_2244: Dipole) -> MultiVector {
    var self_2509: MultiVector;
    var other_2245: Dipole;

    self_2509 = self_2508;
    other_2245 = other_2244;
    let _e4: MultiVector = self_2509;
    let _e5: Dipole = other_2245;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: MultiVector = multi_vector_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_dipole_transformation(self_2510: MultiVector, other_2246: Dipole) -> Dipole {
    var self_2511: MultiVector;
    var other_2247: Dipole;

    self_2511 = self_2510;
    other_2247 = other_2246;
    let _e4: MultiVector = self_2511;
    let _e5: Dipole = other_2247;
    let _e6: MultiVector = multi_vector_dipole_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2511;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Dipole = multi_vector_dipole_into(_e9);
    return _e10;
}

fn multi_vector_powi(self_2512: MultiVector, exponent: i32) -> MultiVector {
    var self_2513: MultiVector;
    var exponent_1: i32;
    var local: MultiVector;
    var x: MultiVector;
    var y: MultiVector;
    var n: i32;

    self_2513 = self_2512;
    exponent_1 = exponent;
    let _e4: i32 = exponent_1;
    if (_e4 == 0) {
        {
            let _e7: MultiVector = multi_vector_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_1;
    if (_e8 < 0) {
        let _e11: MultiVector = self_2513;
        let _e12: MultiVector = multi_vector_inverse(_e11);
        local = _e12;
    } else {
        let _e14: MultiVector = self_2513;
        local = _e14;
    }
    let _e15: MultiVector = local;
    x = _e15;
    let _e17: MultiVector = multi_vector_one();
    y = _e17;
    let _e19: i32 = exponent_1;
    n = abs(_e19);
    loop {
        let _e23: i32 = n;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: MultiVector = x;
                    let _e32: MultiVector = y;
                    let _e33: MultiVector = multi_vector_multi_vector_geometric_product(_e31, _e32);
                    y = _e33;
                }
            }
            let _e34: MultiVector = x;
            let _e35: MultiVector = x;
            let _e36: MultiVector = multi_vector_multi_vector_geometric_product(_e34, _e35);
            x = _e36;
            let _e37: i32 = n;
            n = (_e37 >> u32(1));
        }
    }
    let _e41: MultiVector = x;
    let _e42: MultiVector = y;
    let _e43: MultiVector = multi_vector_multi_vector_geometric_product(_e41, _e42);
    return _e43;
}

fn multi_vector_multi_vector_geometric_quotient(self_2514: MultiVector, other_2248: MultiVector) -> MultiVector {
    var self_2515: MultiVector;
    var other_2249: MultiVector;

    self_2515 = self_2514;
    other_2249 = other_2248;
    let _e4: MultiVector = self_2515;
    let _e5: MultiVector = other_2249;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_multi_vector_transformation(self_2516: MultiVector, other_2250: MultiVector) -> MultiVector {
    var self_2517: MultiVector;
    var other_2251: MultiVector;

    self_2517 = self_2516;
    other_2251 = other_2250;
    let _e4: MultiVector = self_2517;
    let _e5: MultiVector = other_2251;
    let _e6: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2517;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    return _e9;
}

fn multi_vector_radial_point_geometric_quotient(self_2518: MultiVector, other_2252: RadialPoint) -> MultiVector {
    var self_2519: MultiVector;
    var other_2253: RadialPoint;

    self_2519 = self_2518;
    other_2253 = other_2252;
    let _e4: MultiVector = self_2519;
    let _e5: RadialPoint = other_2253;
    let _e6: RadialPoint = radial_point_inverse(_e5);
    let _e7: MultiVector = multi_vector_radial_point_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_radial_point_transformation(self_2520: MultiVector, other_2254: RadialPoint) -> RadialPoint {
    var self_2521: MultiVector;
    var other_2255: RadialPoint;

    self_2521 = self_2520;
    other_2255 = other_2254;
    let _e4: MultiVector = self_2521;
    let _e5: RadialPoint = other_2255;
    let _e6: MultiVector = multi_vector_radial_point_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2521;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: RadialPoint = multi_vector_radial_point_into(_e9);
    return _e10;
}

fn multi_vector_scalar_geometric_quotient(self_2522: MultiVector, other_2256: Scalar) -> MultiVector {
    var self_2523: MultiVector;
    var other_2257: Scalar;

    self_2523 = self_2522;
    other_2257 = other_2256;
    let _e4: MultiVector = self_2523;
    let _e5: Scalar = other_2257;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_scalar_transformation(self_2524: MultiVector, other_2258: Scalar) -> Scalar {
    var self_2525: MultiVector;
    var other_2259: Scalar;

    self_2525 = self_2524;
    other_2259 = other_2258;
    let _e4: MultiVector = self_2525;
    let _e5: Scalar = other_2259;
    let _e6: MultiVector = multi_vector_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2525;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn plane_scalar_geometric_quotient(self_2526: Plane, other_2260: Scalar) -> Plane {
    var self_2527: Plane;
    var other_2261: Scalar;

    self_2527 = self_2526;
    other_2261 = other_2260;
    let _e4: Plane = self_2527;
    let _e5: Scalar = other_2261;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Plane = plane_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn radial_point_flector_transformation(self_2528: RadialPoint, other_2262: Flector) -> Flector {
    var self_2529: RadialPoint;
    var other_2263: Flector;

    self_2529 = self_2528;
    other_2263 = other_2262;
    let _e4: RadialPoint = self_2529;
    let _e5: Flector = other_2263;
    let _e6: Motor = radial_point_flector_geometric_product(_e4, _e5);
    let _e7: RadialPoint = self_2529;
    let _e8: RadialPoint = radial_point_reversal(_e7);
    let _e9: Flector = motor_radial_point_geometric_product(_e6, _e8);
    return _e9;
}

fn radial_point_line_transformation(self_2530: RadialPoint, other_2264: Line) -> Line {
    var self_2531: RadialPoint;
    var other_2265: Line;

    self_2531 = self_2530;
    other_2265 = other_2264;
    let _e4: RadialPoint = self_2531;
    let _e5: Line = other_2265;
    let _e6: Flector = radial_point_line_geometric_product(_e4, _e5);
    let _e7: RadialPoint = self_2531;
    let _e8: RadialPoint = radial_point_reversal(_e7);
    let _e9: Motor = flector_radial_point_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn radial_point_motor_transformation(self_2532: RadialPoint, other_2266: Motor) -> Motor {
    var self_2533: RadialPoint;
    var other_2267: Motor;

    self_2533 = self_2532;
    other_2267 = other_2266;
    let _e4: RadialPoint = self_2533;
    let _e5: Motor = other_2267;
    let _e6: Flector = radial_point_motor_geometric_product(_e4, _e5);
    let _e7: RadialPoint = self_2533;
    let _e8: RadialPoint = radial_point_reversal(_e7);
    let _e9: Motor = flector_radial_point_geometric_product(_e6, _e8);
    return _e9;
}

fn radial_point_multi_vector_geometric_quotient(self_2534: RadialPoint, other_2268: MultiVector) -> MultiVector {
    var self_2535: RadialPoint;
    var other_2269: MultiVector;

    self_2535 = self_2534;
    other_2269 = other_2268;
    let _e4: RadialPoint = self_2535;
    let _e5: MultiVector = other_2269;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = radial_point_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn radial_point_multi_vector_transformation(self_2536: RadialPoint, other_2270: MultiVector) -> MultiVector {
    var self_2537: RadialPoint;
    var other_2271: MultiVector;

    self_2537 = self_2536;
    other_2271 = other_2270;
    let _e4: RadialPoint = self_2537;
    let _e5: MultiVector = other_2271;
    let _e6: MultiVector = radial_point_multi_vector_geometric_product(_e4, _e5);
    let _e7: RadialPoint = self_2537;
    let _e8: RadialPoint = radial_point_reversal(_e7);
    let _e9: MultiVector = multi_vector_radial_point_geometric_product(_e6, _e8);
    return _e9;
}

fn radial_point_scalar_geometric_quotient(self_2538: RadialPoint, other_2272: Scalar) -> RadialPoint {
    var self_2539: RadialPoint;
    var other_2273: Scalar;

    self_2539 = self_2538;
    other_2273 = other_2272;
    let _e4: RadialPoint = self_2539;
    let _e5: Scalar = other_2273;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: RadialPoint = radial_point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_dipole_geometric_quotient(self_2540: Rotor, other_2274: Dipole) -> Rotor {
    var self_2541: Rotor;
    var other_2275: Dipole;

    self_2541 = self_2540;
    other_2275 = other_2274;
    let _e4: Rotor = self_2541;
    let _e5: Dipole = other_2275;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Rotor = rotor_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_scalar_geometric_quotient(self_2542: Rotor, other_2276: Scalar) -> Rotor {
    var self_2543: Rotor;
    var other_2277: Scalar;

    self_2543 = self_2542;
    other_2277 = other_2276;
    let _e4: Rotor = self_2543;
    let _e5: Scalar = other_2277;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_anti_scalar_transformation(self_2544: Scalar, other_2278: AntiScalar) -> AntiScalar {
    var self_2545: Scalar;
    var other_2279: AntiScalar;

    self_2545 = self_2544;
    other_2279 = other_2278;
    let _e4: Scalar = self_2545;
    let _e5: AntiScalar = other_2279;
    let _e6: AntiScalar = scalar_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2545;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_circle_geometric_quotient(self_2546: Scalar, other_2280: Circle) -> Circle {
    var self_2547: Scalar;
    var other_2281: Circle;

    self_2547 = self_2546;
    other_2281 = other_2280;
    let _e4: Scalar = self_2547;
    let _e5: Circle = other_2281;
    let _e6: Circle = circle_inverse(_e5);
    let _e7: Circle = scalar_circle_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_circle_transformation(self_2548: Scalar, other_2282: Circle) -> Circle {
    var self_2549: Scalar;
    var other_2283: Circle;

    self_2549 = self_2548;
    other_2283 = other_2282;
    let _e4: Scalar = self_2549;
    let _e5: Circle = other_2283;
    let _e6: Circle = scalar_circle_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2549;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Circle = circle_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_dilation_geometric_quotient(self_2550: Scalar, other_2284: Dilation) -> Dilation {
    var self_2551: Scalar;
    var other_2285: Dilation;

    self_2551 = self_2550;
    other_2285 = other_2284;
    let _e4: Scalar = self_2551;
    let _e5: Dilation = other_2285;
    let _e6: Dilation = dilation_inverse(_e5);
    let _e7: Dilation = scalar_dilation_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_dilation_transformation(self_2552: Scalar, other_2286: Dilation) -> Dilation {
    var self_2553: Scalar;
    var other_2287: Dilation;

    self_2553 = self_2552;
    other_2287 = other_2286;
    let _e4: Scalar = self_2553;
    let _e5: Dilation = other_2287;
    let _e6: Dilation = scalar_dilation_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2553;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Dilation = dilation_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_dipole_geometric_quotient(self_2554: Scalar, other_2288: Dipole) -> Dipole {
    var self_2555: Scalar;
    var other_2289: Dipole;

    self_2555 = self_2554;
    other_2289 = other_2288;
    let _e4: Scalar = self_2555;
    let _e5: Dipole = other_2289;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Dipole = scalar_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_dipole_transformation(self_2556: Scalar, other_2290: Dipole) -> Dipole {
    var self_2557: Scalar;
    var other_2291: Dipole;

    self_2557 = self_2556;
    other_2291 = other_2290;
    let _e4: Scalar = self_2557;
    let _e5: Dipole = other_2291;
    let _e6: Dipole = scalar_dipole_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2557;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Dipole = dipole_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_flat_point_transformation(self_2558: Scalar, other_2292: FlatPoint) -> FlatPoint {
    var self_2559: Scalar;
    var other_2293: FlatPoint;

    self_2559 = self_2558;
    other_2293 = other_2292;
    let _e4: Scalar = self_2559;
    let _e5: FlatPoint = other_2293;
    let _e6: FlatPoint = scalar_flat_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2559;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: FlatPoint = flat_point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_flector_transformation(self_2560: Scalar, other_2294: Flector) -> Flector {
    var self_2561: Scalar;
    var other_2295: Flector;

    self_2561 = self_2560;
    other_2295 = other_2294;
    let _e4: Scalar = self_2561;
    let _e5: Flector = other_2295;
    let _e6: Flector = scalar_flector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2561;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Flector = flector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_line_transformation(self_2562: Scalar, other_2296: Line) -> Line {
    var self_2563: Scalar;
    var other_2297: Line;

    self_2563 = self_2562;
    other_2297 = other_2296;
    let _e4: Scalar = self_2563;
    let _e5: Line = other_2297;
    let _e6: Line = scalar_line_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2563;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Line = line_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_motor_transformation(self_2564: Scalar, other_2298: Motor) -> Motor {
    var self_2565: Scalar;
    var other_2299: Motor;

    self_2565 = self_2564;
    other_2299 = other_2298;
    let _e4: Scalar = self_2565;
    let _e5: Motor = other_2299;
    let _e6: Motor = scalar_motor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2565;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Motor = motor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_multi_vector_geometric_quotient(self_2566: Scalar, other_2300: MultiVector) -> MultiVector {
    var self_2567: Scalar;
    var other_2301: MultiVector;

    self_2567 = self_2566;
    other_2301 = other_2300;
    let _e4: Scalar = self_2567;
    let _e5: MultiVector = other_2301;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_multi_vector_transformation(self_2568: Scalar, other_2302: MultiVector) -> MultiVector {
    var self_2569: Scalar;
    var other_2303: MultiVector;

    self_2569 = self_2568;
    other_2303 = other_2302;
    let _e4: Scalar = self_2569;
    let _e5: MultiVector = other_2303;
    let _e6: MultiVector = scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2569;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_plane_transformation(self_2570: Scalar, other_2304: Plane) -> Plane {
    var self_2571: Scalar;
    var other_2305: Plane;

    self_2571 = self_2570;
    other_2305 = other_2304;
    let _e4: Scalar = self_2571;
    let _e5: Plane = other_2305;
    let _e6: Plane = scalar_plane_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2571;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Plane = plane_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_radial_point_geometric_quotient(self_2572: Scalar, other_2306: RadialPoint) -> RadialPoint {
    var self_2573: Scalar;
    var other_2307: RadialPoint;

    self_2573 = self_2572;
    other_2307 = other_2306;
    let _e4: Scalar = self_2573;
    let _e5: RadialPoint = other_2307;
    let _e6: RadialPoint = radial_point_inverse(_e5);
    let _e7: RadialPoint = scalar_radial_point_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_radial_point_transformation(self_2574: Scalar, other_2308: RadialPoint) -> RadialPoint {
    var self_2575: Scalar;
    var other_2309: RadialPoint;

    self_2575 = self_2574;
    other_2309 = other_2308;
    let _e4: Scalar = self_2575;
    let _e5: RadialPoint = other_2309;
    let _e6: RadialPoint = scalar_radial_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2575;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: RadialPoint = radial_point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_rotor_transformation(self_2576: Scalar, other_2310: Rotor) -> Rotor {
    var self_2577: Scalar;
    var other_2311: Rotor;

    self_2577 = self_2576;
    other_2311 = other_2310;
    let _e4: Scalar = self_2577;
    let _e5: Rotor = other_2311;
    let _e6: Rotor = scalar_rotor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2577;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Rotor = rotor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_powi(self_2578: Scalar, exponent_2: i32) -> Scalar {
    var self_2579: Scalar;
    var exponent_3: i32;
    var local_1: Scalar;
    var x_1: Scalar;
    var y_1: Scalar;
    var n_1: i32;

    self_2579 = self_2578;
    exponent_3 = exponent_2;
    let _e4: i32 = exponent_3;
    if (_e4 == 0) {
        {
            let _e7: Scalar = scalar_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_3;
    if (_e8 < 0) {
        let _e11: Scalar = self_2579;
        let _e12: Scalar = scalar_inverse(_e11);
        local_1 = _e12;
    } else {
        let _e14: Scalar = self_2579;
        local_1 = _e14;
    }
    let _e15: Scalar = local_1;
    x_1 = _e15;
    let _e17: Scalar = scalar_one();
    y_1 = _e17;
    let _e19: i32 = exponent_3;
    n_1 = abs(_e19);
    loop {
        let _e23: i32 = n_1;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_1;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Scalar = x_1;
                    let _e32: Scalar = y_1;
                    let _e33: Scalar = scalar_scalar_geometric_product(_e31, _e32);
                    y_1 = _e33;
                }
            }
            let _e34: Scalar = x_1;
            let _e35: Scalar = x_1;
            let _e36: Scalar = scalar_scalar_geometric_product(_e34, _e35);
            x_1 = _e36;
            let _e37: i32 = n_1;
            n_1 = (_e37 >> u32(1));
        }
    }
    let _e41: Scalar = x_1;
    let _e42: Scalar = y_1;
    let _e43: Scalar = scalar_scalar_geometric_product(_e41, _e42);
    return _e43;
}

fn scalar_scalar_geometric_quotient(self_2580: Scalar, other_2312: Scalar) -> Scalar {
    var self_2581: Scalar;
    var other_2313: Scalar;

    self_2581 = self_2580;
    other_2313 = other_2312;
    let _e4: Scalar = self_2581;
    let _e5: Scalar = other_2313;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_scalar_transformation(self_2582: Scalar, other_2314: Scalar) -> Scalar {
    var self_2583: Scalar;
    var other_2315: Scalar;

    self_2583 = self_2582;
    other_2315 = other_2314;
    let _e4: Scalar = self_2583;
    let _e5: Scalar = other_2315;
    let _e6: Scalar = scalar_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2583;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Scalar = scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_sphere_transformation(self_2584: Scalar, other_2316: Sphere) -> Sphere {
    var self_2585: Scalar;
    var other_2317: Sphere;

    self_2585 = self_2584;
    other_2317 = other_2316;
    let _e4: Scalar = self_2585;
    let _e5: Sphere = other_2317;
    let _e6: Sphere = scalar_sphere_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2585;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Sphere = sphere_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_translator_transformation(self_2586: Scalar, other_2318: Translator) -> Translator {
    var self_2587: Scalar;
    var other_2319: Translator;

    self_2587 = self_2586;
    other_2319 = other_2318;
    let _e4: Scalar = self_2587;
    let _e5: Translator = other_2319;
    let _e6: Translator = scalar_translator_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2587;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Translator = translator_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn sphere_scalar_geometric_quotient(self_2588: Sphere, other_2320: Scalar) -> Sphere {
    var self_2589: Sphere;
    var other_2321: Scalar;

    self_2589 = self_2588;
    other_2321 = other_2320;
    let _e4: Sphere = self_2589;
    let _e5: Scalar = other_2321;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Sphere = sphere_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_dipole_geometric_quotient(self_2590: Translator, other_2322: Dipole) -> Motor {
    var self_2591: Translator;
    var other_2323: Dipole;

    self_2591 = self_2590;
    other_2323 = other_2322;
    let _e4: Translator = self_2591;
    let _e5: Dipole = other_2323;
    let _e6: Dipole = dipole_inverse(_e5);
    let _e7: Motor = translator_dipole_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_scalar_geometric_quotient(self_2592: Translator, other_2324: Scalar) -> Translator {
    var self_2593: Translator;
    var other_2325: Scalar;

    self_2593 = self_2592;
    other_2325 = other_2324;
    let _e4: Translator = self_2593;
    let _e5: Scalar = other_2325;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Translator = translator_scalar_geometric_product(_e4, _e6);
    return _e7;
}

