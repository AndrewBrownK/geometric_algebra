struct Scalar {
    g0_: f32,
}

struct AntiScalar {
    g0_: f32,
}

struct HomogeneousMagnitude {
    g0_: vec2<f32>,
}

struct Point {
    g0_: vec4<f32>,
}

struct Plane {
    g0_: vec4<f32>,
}

struct Line {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
}

struct Translator {
    g0_: vec4<f32>,
}

struct Motor {
    g0_: vec4<f32>,
    g1_: vec3<f32>,
}

struct MultiVector {
    g0_: vec2<f32>,
    g1_: vec4<f32>,
    g2_: vec3<f32>,
    g3_: vec3<f32>,
    g4_: vec4<f32>,
}

struct Rotor {
    g0_: vec4<f32>,
}

struct Flector {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

fn scalar_zero() -> Scalar {
    return Scalar(0.0);
}

fn scalar_one() -> Scalar {
    return Scalar(1.0);
}

fn scalar_grade(self_: Scalar) -> i32 {
    return 0;
}

fn scalar_anti_grade(self_1: Scalar) -> i32 {
    return 4;
}

fn scalar_neg(self_2: Scalar) -> Scalar {
    var self_3: Scalar;

    self_3 = self_2;
    let _e2: Scalar = self_3;
    return Scalar((_e2.g0_ * -1.0));
}

fn scalar_automorphism(self_4: Scalar) -> Scalar {
    var self_5: Scalar;

    self_5 = self_4;
    let _e2: Scalar = self_5;
    return Scalar(_e2.g0_);
}

fn scalar_reversal(self_6: Scalar) -> Scalar {
    var self_7: Scalar;

    self_7 = self_6;
    let _e2: Scalar = self_7;
    return Scalar(_e2.g0_);
}

fn scalar_conjugation(self_8: Scalar) -> Scalar {
    var self_9: Scalar;

    self_9 = self_8;
    let _e2: Scalar = self_9;
    return Scalar(_e2.g0_);
}

fn scalar_dual(self_10: Scalar) -> AntiScalar {
    var self_11: Scalar;

    self_11 = self_10;
    let _e2: Scalar = self_11;
    return AntiScalar(_e2.g0_);
}

fn scalar_anti_reversal(self_12: Scalar) -> Scalar {
    var self_13: Scalar;

    self_13 = self_12;
    let _e2: Scalar = self_13;
    return Scalar(_e2.g0_);
}

fn scalar_right_complement(self_14: Scalar) -> AntiScalar {
    var self_15: Scalar;

    self_15 = self_14;
    let _e2: Scalar = self_15;
    return AntiScalar(_e2.g0_);
}

fn scalar_left_complement(self_16: Scalar) -> AntiScalar {
    var self_17: Scalar;

    self_17 = self_16;
    let _e2: Scalar = self_17;
    return AntiScalar(_e2.g0_);
}

fn scalar_double_complement(self_18: Scalar) -> Scalar {
    var self_19: Scalar;

    self_19 = self_18;
    let _e2: Scalar = self_19;
    return Scalar(_e2.g0_);
}

fn scalar_scalar_add(self_20: Scalar, other: Scalar) -> Scalar {
    var self_21: Scalar;
    var other_1: Scalar;

    self_21 = self_20;
    other_1 = other;
    let _e4: Scalar = self_21;
    let _e6: Scalar = other_1;
    return Scalar((_e4.g0_ + _e6.g0_));
}

fn scalar_scalar_sub(self_22: Scalar, other_2: Scalar) -> Scalar {
    var self_23: Scalar;
    var other_3: Scalar;

    self_23 = self_22;
    other_3 = other_2;
    let _e4: Scalar = self_23;
    let _e6: Scalar = other_3;
    return Scalar((_e4.g0_ - _e6.g0_));
}

fn scalar_scalar_mul(self_24: Scalar, other_4: Scalar) -> Scalar {
    var self_25: Scalar;
    var other_5: Scalar;

    self_25 = self_24;
    other_5 = other_4;
    let _e4: Scalar = self_25;
    let _e6: Scalar = other_5;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_div(self_26: Scalar, other_6: Scalar) -> Scalar {
    var self_27: Scalar;
    var other_7: Scalar;

    self_27 = self_26;
    other_7 = other_6;
    let _e4: Scalar = self_27;
    let _e8: Scalar = other_7;
    return Scalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn scalar_scalar_geometric_product(self_28: Scalar, other_8: Scalar) -> Scalar {
    var self_29: Scalar;
    var other_9: Scalar;

    self_29 = self_28;
    other_9 = other_8;
    let _e4: Scalar = self_29;
    let _e6: Scalar = other_9;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_outer_product(self_30: Scalar, other_10: Scalar) -> Scalar {
    var self_31: Scalar;
    var other_11: Scalar;

    self_31 = self_30;
    other_11 = other_10;
    let _e4: Scalar = self_31;
    let _e6: Scalar = other_11;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_wedge(self_32: Scalar, other_12: Scalar) -> Scalar {
    var self_33: Scalar;
    var other_13: Scalar;

    self_33 = self_32;
    other_13 = other_12;
    let _e4: Scalar = self_33;
    let _e6: Scalar = other_13;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_join(self_34: Scalar, other_14: Scalar) -> Scalar {
    var self_35: Scalar;
    var other_15: Scalar;

    self_35 = self_34;
    other_15 = other_14;
    let _e4: Scalar = self_35;
    let _e6: Scalar = other_15;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_inner_product(self_36: Scalar, other_16: Scalar) -> Scalar {
    var self_37: Scalar;
    var other_17: Scalar;

    self_37 = self_36;
    other_17 = other_16;
    let _e4: Scalar = self_37;
    let _e6: Scalar = other_17;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_left_contraction(self_38: Scalar, other_18: Scalar) -> Scalar {
    var self_39: Scalar;
    var other_19: Scalar;

    self_39 = self_38;
    other_19 = other_18;
    let _e4: Scalar = self_39;
    let _e6: Scalar = other_19;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_right_contraction(self_40: Scalar, other_20: Scalar) -> Scalar {
    var self_41: Scalar;
    var other_21: Scalar;

    self_41 = self_40;
    other_21 = other_20;
    let _e4: Scalar = self_41;
    let _e6: Scalar = other_21;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_scalar_product(self_42: Scalar, other_22: Scalar) -> Scalar {
    var self_43: Scalar;
    var other_23: Scalar;

    self_43 = self_42;
    other_23 = other_22;
    let _e4: Scalar = self_43;
    let _e6: Scalar = other_23;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_dot(self_44: Scalar, other_24: Scalar) -> Scalar {
    var self_45: Scalar;
    var other_25: Scalar;

    self_45 = self_44;
    other_25 = other_24;
    let _e4: Scalar = self_45;
    let _e6: Scalar = other_25;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_add(self_46: Scalar, other_26: AntiScalar) -> HomogeneousMagnitude {
    var self_47: Scalar;
    var other_27: AntiScalar;

    self_47 = self_46;
    other_27 = other_26;
    let _e4: Scalar = self_47;
    let _e11: AntiScalar = other_27;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) + (vec2(_e11.g0_) * vec2<f32>(0.0, 1.0))));
}

fn scalar_anti_scalar_sub(self_48: Scalar, other_28: AntiScalar) -> HomogeneousMagnitude {
    var self_49: Scalar;
    var other_29: AntiScalar;

    self_49 = self_48;
    other_29 = other_28;
    let _e4: Scalar = self_49;
    let _e11: AntiScalar = other_29;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) - (vec2(_e11.g0_) * vec2<f32>(0.0, 1.0))));
}

fn scalar_anti_scalar_geometric_product(self_50: Scalar, other_30: AntiScalar) -> AntiScalar {
    var self_51: Scalar;
    var other_31: AntiScalar;

    self_51 = self_50;
    other_31 = other_30;
    let _e4: Scalar = self_51;
    let _e6: AntiScalar = other_31;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_anti_product(self_52: Scalar, other_32: AntiScalar) -> Scalar {
    var self_53: Scalar;
    var other_33: AntiScalar;

    self_53 = self_52;
    other_33 = other_32;
    let _e4: Scalar = self_53;
    let _e6: AntiScalar = other_33;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_regressive_product(self_54: Scalar, other_34: AntiScalar) -> Scalar {
    var self_55: Scalar;
    var other_35: AntiScalar;

    self_55 = self_54;
    other_35 = other_34;
    let _e4: Scalar = self_55;
    let _e6: AntiScalar = other_35;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_anti_wedge(self_56: Scalar, other_36: AntiScalar) -> Scalar {
    var self_57: Scalar;
    var other_37: AntiScalar;

    self_57 = self_56;
    other_37 = other_36;
    let _e4: Scalar = self_57;
    let _e6: AntiScalar = other_37;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_meet(self_58: Scalar, other_38: AntiScalar) -> Scalar {
    var self_59: Scalar;
    var other_39: AntiScalar;

    self_59 = self_58;
    other_39 = other_38;
    let _e4: Scalar = self_59;
    let _e6: AntiScalar = other_39;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_outer_product(self_60: Scalar, other_40: AntiScalar) -> AntiScalar {
    var self_61: Scalar;
    var other_41: AntiScalar;

    self_61 = self_60;
    other_41 = other_40;
    let _e4: Scalar = self_61;
    let _e6: AntiScalar = other_41;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_wedge(self_62: Scalar, other_42: AntiScalar) -> AntiScalar {
    var self_63: Scalar;
    var other_43: AntiScalar;

    self_63 = self_62;
    other_43 = other_42;
    let _e4: Scalar = self_63;
    let _e6: AntiScalar = other_43;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_join(self_64: Scalar, other_44: AntiScalar) -> AntiScalar {
    var self_65: Scalar;
    var other_45: AntiScalar;

    self_65 = self_64;
    other_45 = other_44;
    let _e4: Scalar = self_65;
    let _e6: AntiScalar = other_45;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_product(self_66: Scalar, other_46: AntiScalar) -> AntiScalar {
    var self_67: Scalar;
    var other_47: AntiScalar;

    self_67 = self_66;
    other_47 = other_46;
    let _e4: Scalar = self_67;
    let _e6: AntiScalar = other_47;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_anti_product(self_68: Scalar, other_48: AntiScalar) -> Scalar {
    var self_69: Scalar;
    var other_49: AntiScalar;

    self_69 = self_68;
    other_49 = other_48;
    let _e4: Scalar = self_69;
    let _e6: AntiScalar = other_49;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_left_contraction(self_70: Scalar, other_50: AntiScalar) -> AntiScalar {
    var self_71: Scalar;
    var other_51: AntiScalar;

    self_71 = self_70;
    other_51 = other_50;
    let _e4: Scalar = self_71;
    let _e6: AntiScalar = other_51;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_right_anti_contraction(self_72: Scalar, other_52: AntiScalar) -> Scalar {
    var self_73: Scalar;
    var other_53: AntiScalar;

    self_73 = self_72;
    other_53 = other_52;
    let _e4: Scalar = self_73;
    let _e6: AntiScalar = other_53;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_homogeneous_magnitude_add(self_74: Scalar, other_54: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_75: Scalar;
    var other_55: HomogeneousMagnitude;

    self_75 = self_74;
    other_55 = other_54;
    let _e4: Scalar = self_75;
    let _e11: HomogeneousMagnitude = other_55;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) + _e11.g0_));
}

fn scalar_homogeneous_magnitude_sub(self_76: Scalar, other_56: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_77: Scalar;
    var other_57: HomogeneousMagnitude;

    self_77 = self_76;
    other_57 = other_56;
    let _e4: Scalar = self_77;
    let _e11: HomogeneousMagnitude = other_57;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) - _e11.g0_));
}

fn scalar_homogeneous_magnitude_geometric_product(self_78: Scalar, other_58: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_79: Scalar;
    var other_59: HomogeneousMagnitude;

    self_79 = self_78;
    other_59 = other_58;
    let _e4: Scalar = self_79;
    let _e7: HomogeneousMagnitude = other_59;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_geometric_anti_product(self_80: Scalar, other_60: HomogeneousMagnitude) -> Scalar {
    var self_81: Scalar;
    var other_61: HomogeneousMagnitude;

    self_81 = self_80;
    other_61 = other_60;
    let _e4: Scalar = self_81;
    let _e6: HomogeneousMagnitude = other_61;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_regressive_product(self_82: Scalar, other_62: HomogeneousMagnitude) -> Scalar {
    var self_83: Scalar;
    var other_63: HomogeneousMagnitude;

    self_83 = self_82;
    other_63 = other_62;
    let _e4: Scalar = self_83;
    let _e6: HomogeneousMagnitude = other_63;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_anti_wedge(self_84: Scalar, other_64: HomogeneousMagnitude) -> Scalar {
    var self_85: Scalar;
    var other_65: HomogeneousMagnitude;

    self_85 = self_84;
    other_65 = other_64;
    let _e4: Scalar = self_85;
    let _e6: HomogeneousMagnitude = other_65;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_meet(self_86: Scalar, other_66: HomogeneousMagnitude) -> Scalar {
    var self_87: Scalar;
    var other_67: HomogeneousMagnitude;

    self_87 = self_86;
    other_67 = other_66;
    let _e4: Scalar = self_87;
    let _e6: HomogeneousMagnitude = other_67;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_outer_product(self_88: Scalar, other_68: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_89: Scalar;
    var other_69: HomogeneousMagnitude;

    self_89 = self_88;
    other_69 = other_68;
    let _e4: Scalar = self_89;
    let _e7: HomogeneousMagnitude = other_69;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_wedge(self_90: Scalar, other_70: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_91: Scalar;
    var other_71: HomogeneousMagnitude;

    self_91 = self_90;
    other_71 = other_70;
    let _e4: Scalar = self_91;
    let _e7: HomogeneousMagnitude = other_71;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_join(self_92: Scalar, other_72: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_93: Scalar;
    var other_73: HomogeneousMagnitude;

    self_93 = self_92;
    other_73 = other_72;
    let _e4: Scalar = self_93;
    let _e7: HomogeneousMagnitude = other_73;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_inner_product(self_94: Scalar, other_74: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_95: Scalar;
    var other_75: HomogeneousMagnitude;

    self_95 = self_94;
    other_75 = other_74;
    let _e4: Scalar = self_95;
    let _e7: HomogeneousMagnitude = other_75;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_inner_anti_product(self_96: Scalar, other_76: HomogeneousMagnitude) -> Scalar {
    var self_97: Scalar;
    var other_77: HomogeneousMagnitude;

    self_97 = self_96;
    other_77 = other_76;
    let _e4: Scalar = self_97;
    let _e6: HomogeneousMagnitude = other_77;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_left_contraction(self_98: Scalar, other_78: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_99: Scalar;
    var other_79: HomogeneousMagnitude;

    self_99 = self_98;
    other_79 = other_78;
    let _e4: Scalar = self_99;
    let _e7: HomogeneousMagnitude = other_79;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_right_contraction(self_100: Scalar, other_80: HomogeneousMagnitude) -> Scalar {
    var self_101: Scalar;
    var other_81: HomogeneousMagnitude;

    self_101 = self_100;
    other_81 = other_80;
    let _e4: Scalar = self_101;
    let _e6: HomogeneousMagnitude = other_81;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_homogeneous_magnitude_right_anti_contraction(self_102: Scalar, other_82: HomogeneousMagnitude) -> Scalar {
    var self_103: Scalar;
    var other_83: HomogeneousMagnitude;

    self_103 = self_102;
    other_83 = other_82;
    let _e4: Scalar = self_103;
    let _e6: HomogeneousMagnitude = other_83;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_scalar_product(self_104: Scalar, other_84: HomogeneousMagnitude) -> Scalar {
    var self_105: Scalar;
    var other_85: HomogeneousMagnitude;

    self_105 = self_104;
    other_85 = other_84;
    let _e4: Scalar = self_105;
    let _e6: HomogeneousMagnitude = other_85;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_homogeneous_magnitude_dot(self_106: Scalar, other_86: HomogeneousMagnitude) -> Scalar {
    var self_107: Scalar;
    var other_87: HomogeneousMagnitude;

    self_107 = self_106;
    other_87 = other_86;
    let _e4: Scalar = self_107;
    let _e6: HomogeneousMagnitude = other_87;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_point_geometric_product(self_108: Scalar, other_88: Point) -> Point {
    var self_109: Scalar;
    var other_89: Point;

    self_109 = self_108;
    other_89 = other_88;
    let _e4: Scalar = self_109;
    let _e7: Point = other_89;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_geometric_anti_product(self_110: Scalar, other_90: Point) -> Plane {
    var self_111: Scalar;
    var other_91: Point;

    self_111 = self_110;
    other_91 = other_90;
    let _e4: Scalar = self_111;
    let _e7: Point = other_91;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_point_outer_product(self_112: Scalar, other_92: Point) -> Point {
    var self_113: Scalar;
    var other_93: Point;

    self_113 = self_112;
    other_93 = other_92;
    let _e4: Scalar = self_113;
    let _e7: Point = other_93;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_wedge(self_114: Scalar, other_94: Point) -> Point {
    var self_115: Scalar;
    var other_95: Point;

    self_115 = self_114;
    other_95 = other_94;
    let _e4: Scalar = self_115;
    let _e7: Point = other_95;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_join(self_116: Scalar, other_96: Point) -> Point {
    var self_117: Scalar;
    var other_97: Point;

    self_117 = self_116;
    other_97 = other_96;
    let _e4: Scalar = self_117;
    let _e7: Point = other_97;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_inner_product(self_118: Scalar, other_98: Point) -> Point {
    var self_119: Scalar;
    var other_99: Point;

    self_119 = self_118;
    other_99 = other_98;
    let _e4: Scalar = self_119;
    let _e7: Point = other_99;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_inner_anti_product(self_120: Scalar, other_100: Point) -> Plane {
    var self_121: Scalar;
    var other_101: Point;

    self_121 = self_120;
    other_101 = other_100;
    let _e4: Scalar = self_121;
    let _e7: Point = other_101;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_point_left_contraction(self_122: Scalar, other_102: Point) -> Point {
    var self_123: Scalar;
    var other_103: Point;

    self_123 = self_122;
    other_103 = other_102;
    let _e4: Scalar = self_123;
    let _e7: Point = other_103;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_point_right_anti_contraction(self_124: Scalar, other_104: Point) -> Plane {
    var self_125: Scalar;
    var other_105: Point;

    self_125 = self_124;
    other_105 = other_104;
    let _e4: Scalar = self_125;
    let _e7: Point = other_105;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_line_geometric_product(self_126: Scalar, other_106: Line) -> Line {
    var self_127: Scalar;
    var other_107: Line;

    self_127 = self_126;
    other_107 = other_106;
    let _e4: Scalar = self_127;
    let _e7: Line = other_107;
    let _e10: Scalar = self_127;
    let _e13: Line = other_107;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_geometric_anti_product(self_128: Scalar, other_108: Line) -> Translator {
    var self_129: Scalar;
    var other_109: Line;

    self_129 = self_128;
    other_109 = other_108;
    let _e4: Scalar = self_129;
    let _e7: Line = other_109;
    let _e10: Line = other_109;
    let _e13: Line = other_109;
    let _e16: Line = other_109;
    return Translator(((vec4(_e4.g0_) * vec4<f32>(_e7.g0_.x, _e10.g0_.y, _e13.g0_.z, _e16.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_line_outer_product(self_130: Scalar, other_110: Line) -> Line {
    var self_131: Scalar;
    var other_111: Line;

    self_131 = self_130;
    other_111 = other_110;
    let _e4: Scalar = self_131;
    let _e7: Line = other_111;
    let _e10: Scalar = self_131;
    let _e13: Line = other_111;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_wedge(self_132: Scalar, other_112: Line) -> Line {
    var self_133: Scalar;
    var other_113: Line;

    self_133 = self_132;
    other_113 = other_112;
    let _e4: Scalar = self_133;
    let _e7: Line = other_113;
    let _e10: Scalar = self_133;
    let _e13: Line = other_113;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_join(self_134: Scalar, other_114: Line) -> Line {
    var self_135: Scalar;
    var other_115: Line;

    self_135 = self_134;
    other_115 = other_114;
    let _e4: Scalar = self_135;
    let _e7: Line = other_115;
    let _e10: Scalar = self_135;
    let _e13: Line = other_115;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_inner_product(self_136: Scalar, other_116: Line) -> Line {
    var self_137: Scalar;
    var other_117: Line;

    self_137 = self_136;
    other_117 = other_116;
    let _e4: Scalar = self_137;
    let _e7: Line = other_117;
    let _e10: Scalar = self_137;
    let _e13: Line = other_117;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_inner_anti_product(self_138: Scalar, other_118: Line) -> Translator {
    var self_139: Scalar;
    var other_119: Line;

    self_139 = self_138;
    other_119 = other_118;
    let _e4: Scalar = self_139;
    let _e7: Line = other_119;
    let _e10: Line = other_119;
    let _e13: Line = other_119;
    let _e16: Line = other_119;
    return Translator(((vec4(_e4.g0_) * vec4<f32>(_e7.g0_.x, _e10.g0_.y, _e13.g0_.z, _e16.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_line_left_contraction(self_140: Scalar, other_120: Line) -> Line {
    var self_141: Scalar;
    var other_121: Line;

    self_141 = self_140;
    other_121 = other_120;
    let _e4: Scalar = self_141;
    let _e7: Line = other_121;
    let _e10: Scalar = self_141;
    let _e13: Line = other_121;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_line_right_anti_contraction(self_142: Scalar, other_122: Line) -> Translator {
    var self_143: Scalar;
    var other_123: Line;

    self_143 = self_142;
    other_123 = other_122;
    let _e4: Scalar = self_143;
    let _e7: Line = other_123;
    let _e10: Line = other_123;
    let _e13: Line = other_123;
    let _e16: Line = other_123;
    return Translator(((vec4(_e4.g0_) * vec4<f32>(_e7.g0_.x, _e10.g0_.y, _e13.g0_.z, _e16.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_plane_geometric_product(self_144: Scalar, other_124: Plane) -> Plane {
    var self_145: Scalar;
    var other_125: Plane;

    self_145 = self_144;
    other_125 = other_124;
    let _e4: Scalar = self_145;
    let _e7: Plane = other_125;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_geometric_anti_product(self_146: Scalar, other_126: Plane) -> Point {
    var self_147: Scalar;
    var other_127: Plane;

    self_147 = self_146;
    other_127 = other_126;
    let _e4: Scalar = self_147;
    let _e7: Plane = other_127;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_plane_outer_product(self_148: Scalar, other_128: Plane) -> Plane {
    var self_149: Scalar;
    var other_129: Plane;

    self_149 = self_148;
    other_129 = other_128;
    let _e4: Scalar = self_149;
    let _e7: Plane = other_129;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_wedge(self_150: Scalar, other_130: Plane) -> Plane {
    var self_151: Scalar;
    var other_131: Plane;

    self_151 = self_150;
    other_131 = other_130;
    let _e4: Scalar = self_151;
    let _e7: Plane = other_131;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_join(self_152: Scalar, other_132: Plane) -> Plane {
    var self_153: Scalar;
    var other_133: Plane;

    self_153 = self_152;
    other_133 = other_132;
    let _e4: Scalar = self_153;
    let _e7: Plane = other_133;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_product(self_154: Scalar, other_134: Plane) -> Plane {
    var self_155: Scalar;
    var other_135: Plane;

    self_155 = self_154;
    other_135 = other_134;
    let _e4: Scalar = self_155;
    let _e7: Plane = other_135;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_anti_product(self_156: Scalar, other_136: Plane) -> Point {
    var self_157: Scalar;
    var other_137: Plane;

    self_157 = self_156;
    other_137 = other_136;
    let _e4: Scalar = self_157;
    let _e7: Plane = other_137;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_plane_left_contraction(self_158: Scalar, other_138: Plane) -> Plane {
    var self_159: Scalar;
    var other_139: Plane;

    self_159 = self_158;
    other_139 = other_138;
    let _e4: Scalar = self_159;
    let _e7: Plane = other_139;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_right_anti_contraction(self_160: Scalar, other_140: Plane) -> Point {
    var self_161: Scalar;
    var other_141: Plane;

    self_161 = self_160;
    other_141 = other_140;
    let _e4: Scalar = self_161;
    let _e7: Plane = other_141;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn scalar_motor_geometric_product(self_162: Scalar, other_142: Motor) -> Motor {
    var self_163: Scalar;
    var other_143: Motor;

    self_163 = self_162;
    other_143 = other_142;
    let _e4: Scalar = self_163;
    let _e7: Motor = other_143;
    let _e10: Scalar = self_163;
    let _e13: Motor = other_143;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_geometric_anti_product(self_164: Scalar, other_144: Motor) -> MultiVector {
    var self_165: Scalar;
    var other_145: Motor;

    self_165 = self_164;
    other_145 = other_144;
    let _e4: Scalar = self_165;
    let _e7: Motor = other_145;
    let _e10: Motor = other_145;
    let _e23: Scalar = self_165;
    let _e26: Motor = other_145;
    let _e29: Motor = other_145;
    let _e32: Motor = other_145;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_motor_regressive_product(self_166: Scalar, other_146: Motor) -> Scalar {
    var self_167: Scalar;
    var other_147: Motor;

    self_167 = self_166;
    other_147 = other_146;
    let _e4: Scalar = self_167;
    let _e6: Motor = other_147;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_anti_wedge(self_168: Scalar, other_148: Motor) -> Scalar {
    var self_169: Scalar;
    var other_149: Motor;

    self_169 = self_168;
    other_149 = other_148;
    let _e4: Scalar = self_169;
    let _e6: Motor = other_149;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_meet(self_170: Scalar, other_150: Motor) -> Scalar {
    var self_171: Scalar;
    var other_151: Motor;

    self_171 = self_170;
    other_151 = other_150;
    let _e4: Scalar = self_171;
    let _e6: Motor = other_151;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_outer_product(self_172: Scalar, other_152: Motor) -> Motor {
    var self_173: Scalar;
    var other_153: Motor;

    self_173 = self_172;
    other_153 = other_152;
    let _e4: Scalar = self_173;
    let _e7: Motor = other_153;
    let _e10: Scalar = self_173;
    let _e13: Motor = other_153;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_wedge(self_174: Scalar, other_154: Motor) -> Motor {
    var self_175: Scalar;
    var other_155: Motor;

    self_175 = self_174;
    other_155 = other_154;
    let _e4: Scalar = self_175;
    let _e7: Motor = other_155;
    let _e10: Scalar = self_175;
    let _e13: Motor = other_155;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_join(self_176: Scalar, other_156: Motor) -> Motor {
    var self_177: Scalar;
    var other_157: Motor;

    self_177 = self_176;
    other_157 = other_156;
    let _e4: Scalar = self_177;
    let _e7: Motor = other_157;
    let _e10: Scalar = self_177;
    let _e13: Motor = other_157;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_inner_product(self_178: Scalar, other_158: Motor) -> Motor {
    var self_179: Scalar;
    var other_159: Motor;

    self_179 = self_178;
    other_159 = other_158;
    let _e4: Scalar = self_179;
    let _e7: Motor = other_159;
    let _e10: Scalar = self_179;
    let _e13: Motor = other_159;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_inner_anti_product(self_180: Scalar, other_160: Motor) -> MultiVector {
    var self_181: Scalar;
    var other_161: Motor;

    self_181 = self_180;
    other_161 = other_160;
    let _e4: Scalar = self_181;
    let _e7: Motor = other_161;
    let _e10: Motor = other_161;
    let _e23: Scalar = self_181;
    let _e26: Motor = other_161;
    let _e29: Motor = other_161;
    let _e32: Motor = other_161;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_motor_left_contraction(self_182: Scalar, other_162: Motor) -> Motor {
    var self_183: Scalar;
    var other_163: Motor;

    self_183 = self_182;
    other_163 = other_162;
    let _e4: Scalar = self_183;
    let _e7: Motor = other_163;
    let _e10: Scalar = self_183;
    let _e13: Motor = other_163;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_right_anti_contraction(self_184: Scalar, other_164: Motor) -> MultiVector {
    var self_185: Scalar;
    var other_165: Motor;

    self_185 = self_184;
    other_165 = other_164;
    let _e4: Scalar = self_185;
    let _e7: Motor = other_165;
    let _e10: Motor = other_165;
    let _e23: Scalar = self_185;
    let _e26: Motor = other_165;
    let _e29: Motor = other_165;
    let _e32: Motor = other_165;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_rotor_geometric_product(self_186: Scalar, other_166: Rotor) -> Rotor {
    var self_187: Scalar;
    var other_167: Rotor;

    self_187 = self_186;
    other_167 = other_166;
    let _e4: Scalar = self_187;
    let _e7: Rotor = other_167;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_geometric_anti_product(self_188: Scalar, other_168: Rotor) -> MultiVector {
    var self_189: Scalar;
    var other_169: Rotor;

    self_189 = self_188;
    other_169 = other_168;
    let _e4: Scalar = self_189;
    let _e7: Rotor = other_169;
    let _e10: Rotor = other_169;
    let _e23: Scalar = self_189;
    let _e26: Rotor = other_169;
    let _e29: Rotor = other_169;
    let _e32: Rotor = other_169;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_rotor_regressive_product(self_190: Scalar, other_170: Rotor) -> Scalar {
    var self_191: Scalar;
    var other_171: Rotor;

    self_191 = self_190;
    other_171 = other_170;
    let _e4: Scalar = self_191;
    let _e6: Rotor = other_171;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_anti_wedge(self_192: Scalar, other_172: Rotor) -> Scalar {
    var self_193: Scalar;
    var other_173: Rotor;

    self_193 = self_192;
    other_173 = other_172;
    let _e4: Scalar = self_193;
    let _e6: Rotor = other_173;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_meet(self_194: Scalar, other_174: Rotor) -> Scalar {
    var self_195: Scalar;
    var other_175: Rotor;

    self_195 = self_194;
    other_175 = other_174;
    let _e4: Scalar = self_195;
    let _e6: Rotor = other_175;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_outer_product(self_196: Scalar, other_176: Rotor) -> Rotor {
    var self_197: Scalar;
    var other_177: Rotor;

    self_197 = self_196;
    other_177 = other_176;
    let _e4: Scalar = self_197;
    let _e7: Rotor = other_177;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_wedge(self_198: Scalar, other_178: Rotor) -> Rotor {
    var self_199: Scalar;
    var other_179: Rotor;

    self_199 = self_198;
    other_179 = other_178;
    let _e4: Scalar = self_199;
    let _e7: Rotor = other_179;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_join(self_200: Scalar, other_180: Rotor) -> Rotor {
    var self_201: Scalar;
    var other_181: Rotor;

    self_201 = self_200;
    other_181 = other_180;
    let _e4: Scalar = self_201;
    let _e7: Rotor = other_181;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_inner_product(self_202: Scalar, other_182: Rotor) -> Rotor {
    var self_203: Scalar;
    var other_183: Rotor;

    self_203 = self_202;
    other_183 = other_182;
    let _e4: Scalar = self_203;
    let _e7: Rotor = other_183;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_inner_anti_product(self_204: Scalar, other_184: Rotor) -> MultiVector {
    var self_205: Scalar;
    var other_185: Rotor;

    self_205 = self_204;
    other_185 = other_184;
    let _e4: Scalar = self_205;
    let _e7: Rotor = other_185;
    let _e10: Rotor = other_185;
    let _e23: Scalar = self_205;
    let _e26: Rotor = other_185;
    let _e29: Rotor = other_185;
    let _e32: Rotor = other_185;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_rotor_left_contraction(self_206: Scalar, other_186: Rotor) -> Rotor {
    var self_207: Scalar;
    var other_187: Rotor;

    self_207 = self_206;
    other_187 = other_186;
    let _e4: Scalar = self_207;
    let _e7: Rotor = other_187;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_right_anti_contraction(self_208: Scalar, other_188: Rotor) -> MultiVector {
    var self_209: Scalar;
    var other_189: Rotor;

    self_209 = self_208;
    other_189 = other_188;
    let _e4: Scalar = self_209;
    let _e7: Rotor = other_189;
    let _e10: Rotor = other_189;
    let _e23: Scalar = self_209;
    let _e26: Rotor = other_189;
    let _e29: Rotor = other_189;
    let _e32: Rotor = other_189;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(_e7.g0_.w, _e10.g0_.x)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3(_e23.g0_) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), vec4(0.0));
}

fn scalar_translator_geometric_product(self_210: Scalar, other_190: Translator) -> Translator {
    var self_211: Scalar;
    var other_191: Translator;

    self_211 = self_210;
    other_191 = other_190;
    let _e4: Scalar = self_211;
    let _e7: Translator = other_191;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_geometric_anti_product(self_212: Scalar, other_192: Translator) -> Scalar {
    var self_213: Scalar;
    var other_193: Translator;

    self_213 = self_212;
    other_193 = other_192;
    let _e4: Scalar = self_213;
    let _e6: Translator = other_193;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_regressive_product(self_214: Scalar, other_194: Translator) -> Scalar {
    var self_215: Scalar;
    var other_195: Translator;

    self_215 = self_214;
    other_195 = other_194;
    let _e4: Scalar = self_215;
    let _e6: Translator = other_195;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_anti_wedge(self_216: Scalar, other_196: Translator) -> Scalar {
    var self_217: Scalar;
    var other_197: Translator;

    self_217 = self_216;
    other_197 = other_196;
    let _e4: Scalar = self_217;
    let _e6: Translator = other_197;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_meet(self_218: Scalar, other_198: Translator) -> Scalar {
    var self_219: Scalar;
    var other_199: Translator;

    self_219 = self_218;
    other_199 = other_198;
    let _e4: Scalar = self_219;
    let _e6: Translator = other_199;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_outer_product(self_220: Scalar, other_200: Translator) -> Translator {
    var self_221: Scalar;
    var other_201: Translator;

    self_221 = self_220;
    other_201 = other_200;
    let _e4: Scalar = self_221;
    let _e7: Translator = other_201;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_wedge(self_222: Scalar, other_202: Translator) -> Translator {
    var self_223: Scalar;
    var other_203: Translator;

    self_223 = self_222;
    other_203 = other_202;
    let _e4: Scalar = self_223;
    let _e7: Translator = other_203;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_join(self_224: Scalar, other_204: Translator) -> Translator {
    var self_225: Scalar;
    var other_205: Translator;

    self_225 = self_224;
    other_205 = other_204;
    let _e4: Scalar = self_225;
    let _e7: Translator = other_205;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_product(self_226: Scalar, other_206: Translator) -> Translator {
    var self_227: Scalar;
    var other_207: Translator;

    self_227 = self_226;
    other_207 = other_206;
    let _e4: Scalar = self_227;
    let _e7: Translator = other_207;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_anti_product(self_228: Scalar, other_208: Translator) -> Scalar {
    var self_229: Scalar;
    var other_209: Translator;

    self_229 = self_228;
    other_209 = other_208;
    let _e4: Scalar = self_229;
    let _e6: Translator = other_209;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_left_contraction(self_230: Scalar, other_210: Translator) -> Translator {
    var self_231: Scalar;
    var other_211: Translator;

    self_231 = self_230;
    other_211 = other_210;
    let _e4: Scalar = self_231;
    let _e7: Translator = other_211;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_right_anti_contraction(self_232: Scalar, other_212: Translator) -> Scalar {
    var self_233: Scalar;
    var other_213: Translator;

    self_233 = self_232;
    other_213 = other_212;
    let _e4: Scalar = self_233;
    let _e6: Translator = other_213;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_flector_geometric_product(self_234: Scalar, other_214: Flector) -> Flector {
    var self_235: Scalar;
    var other_215: Flector;

    self_235 = self_234;
    other_215 = other_214;
    let _e4: Scalar = self_235;
    let _e7: Flector = other_215;
    let _e10: Scalar = self_235;
    let _e13: Flector = other_215;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_geometric_anti_product(self_236: Scalar, other_216: Flector) -> Flector {
    var self_237: Scalar;
    var other_217: Flector;

    self_237 = self_236;
    other_217 = other_216;
    let _e4: Scalar = self_237;
    let _e7: Flector = other_217;
    let _e17: Scalar = self_237;
    let _e20: Flector = other_217;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), ((vec4(_e17.g0_) * _e20.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_flector_outer_product(self_238: Scalar, other_218: Flector) -> Flector {
    var self_239: Scalar;
    var other_219: Flector;

    self_239 = self_238;
    other_219 = other_218;
    let _e4: Scalar = self_239;
    let _e7: Flector = other_219;
    let _e10: Scalar = self_239;
    let _e13: Flector = other_219;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_wedge(self_240: Scalar, other_220: Flector) -> Flector {
    var self_241: Scalar;
    var other_221: Flector;

    self_241 = self_240;
    other_221 = other_220;
    let _e4: Scalar = self_241;
    let _e7: Flector = other_221;
    let _e10: Scalar = self_241;
    let _e13: Flector = other_221;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_join(self_242: Scalar, other_222: Flector) -> Flector {
    var self_243: Scalar;
    var other_223: Flector;

    self_243 = self_242;
    other_223 = other_222;
    let _e4: Scalar = self_243;
    let _e7: Flector = other_223;
    let _e10: Scalar = self_243;
    let _e13: Flector = other_223;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_inner_product(self_244: Scalar, other_224: Flector) -> Flector {
    var self_245: Scalar;
    var other_225: Flector;

    self_245 = self_244;
    other_225 = other_224;
    let _e4: Scalar = self_245;
    let _e7: Flector = other_225;
    let _e10: Scalar = self_245;
    let _e13: Flector = other_225;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_inner_anti_product(self_246: Scalar, other_226: Flector) -> Flector {
    var self_247: Scalar;
    var other_227: Flector;

    self_247 = self_246;
    other_227 = other_226;
    let _e4: Scalar = self_247;
    let _e7: Flector = other_227;
    let _e17: Scalar = self_247;
    let _e20: Flector = other_227;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), ((vec4(_e17.g0_) * _e20.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_flector_left_contraction(self_248: Scalar, other_228: Flector) -> Flector {
    var self_249: Scalar;
    var other_229: Flector;

    self_249 = self_248;
    other_229 = other_228;
    let _e4: Scalar = self_249;
    let _e7: Flector = other_229;
    let _e10: Scalar = self_249;
    let _e13: Flector = other_229;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_right_anti_contraction(self_250: Scalar, other_230: Flector) -> Flector {
    var self_251: Scalar;
    var other_231: Flector;

    self_251 = self_250;
    other_231 = other_230;
    let _e4: Scalar = self_251;
    let _e7: Flector = other_231;
    let _e17: Scalar = self_251;
    let _e20: Flector = other_231;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), ((vec4(_e17.g0_) * _e20.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_multi_vector_add(self_252: Scalar, other_232: MultiVector) -> MultiVector {
    var self_253: Scalar;
    var other_233: MultiVector;

    self_253 = self_252;
    other_233 = other_232;
    let _e4: Scalar = self_253;
    let _e11: MultiVector = other_233;
    let _e14: MultiVector = other_233;
    let _e16: MultiVector = other_233;
    let _e18: MultiVector = other_233;
    let _e20: MultiVector = other_233;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) + _e11.g0_), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn scalar_multi_vector_sub(self_254: Scalar, other_234: MultiVector) -> MultiVector {
    var self_255: Scalar;
    var other_235: MultiVector;

    self_255 = self_254;
    other_235 = other_234;
    let _e4: Scalar = self_255;
    let _e11: MultiVector = other_235;
    let _e16: MultiVector = other_235;
    let _e21: MultiVector = other_235;
    let _e26: MultiVector = other_235;
    let _e31: MultiVector = other_235;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(1.0, 0.0)) - _e11.g0_), (vec4(0.0) - _e16.g1_), (vec3(0.0) - _e21.g2_), (vec3(0.0) - _e26.g3_), (vec4(0.0) - _e31.g4_));
}

fn scalar_multi_vector_geometric_product(self_256: Scalar, other_236: MultiVector) -> MultiVector {
    var self_257: Scalar;
    var other_237: MultiVector;

    self_257 = self_256;
    other_237 = other_236;
    let _e4: Scalar = self_257;
    let _e7: MultiVector = other_237;
    let _e10: Scalar = self_257;
    let _e13: MultiVector = other_237;
    let _e16: Scalar = self_257;
    let _e19: MultiVector = other_237;
    let _e22: Scalar = self_257;
    let _e25: MultiVector = other_237;
    let _e28: Scalar = self_257;
    let _e31: MultiVector = other_237;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_geometric_anti_product(self_258: Scalar, other_238: MultiVector) -> MultiVector {
    var self_259: Scalar;
    var other_239: MultiVector;

    self_259 = self_258;
    other_239 = other_238;
    let _e4: Scalar = self_259;
    let _e7: MultiVector = other_239;
    let _e15: Scalar = self_259;
    let _e18: MultiVector = other_239;
    let _e30: Scalar = self_259;
    let _e33: MultiVector = other_239;
    let _e36: Scalar = self_259;
    let _e39: MultiVector = other_239;
    return MultiVector(((vec2(_e4.g0_) * _e7.g0_.yx) * vec2<f32>(1.0, 0.0)), ((vec4(_e15.g0_) * _e18.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), vec3(0.0), (vec3(_e30.g0_) * _e33.g2_), ((vec4(_e36.g0_) * _e39.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_multi_vector_regressive_product(self_260: Scalar, other_240: MultiVector) -> Scalar {
    var self_261: Scalar;
    var other_241: MultiVector;

    self_261 = self_260;
    other_241 = other_240;
    let _e4: Scalar = self_261;
    let _e6: MultiVector = other_241;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_anti_wedge(self_262: Scalar, other_242: MultiVector) -> Scalar {
    var self_263: Scalar;
    var other_243: MultiVector;

    self_263 = self_262;
    other_243 = other_242;
    let _e4: Scalar = self_263;
    let _e6: MultiVector = other_243;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_meet(self_264: Scalar, other_244: MultiVector) -> Scalar {
    var self_265: Scalar;
    var other_245: MultiVector;

    self_265 = self_264;
    other_245 = other_244;
    let _e4: Scalar = self_265;
    let _e6: MultiVector = other_245;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_outer_product(self_266: Scalar, other_246: MultiVector) -> MultiVector {
    var self_267: Scalar;
    var other_247: MultiVector;

    self_267 = self_266;
    other_247 = other_246;
    let _e4: Scalar = self_267;
    let _e7: MultiVector = other_247;
    let _e10: Scalar = self_267;
    let _e13: MultiVector = other_247;
    let _e16: Scalar = self_267;
    let _e19: MultiVector = other_247;
    let _e22: Scalar = self_267;
    let _e25: MultiVector = other_247;
    let _e28: Scalar = self_267;
    let _e31: MultiVector = other_247;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_wedge(self_268: Scalar, other_248: MultiVector) -> MultiVector {
    var self_269: Scalar;
    var other_249: MultiVector;

    self_269 = self_268;
    other_249 = other_248;
    let _e4: Scalar = self_269;
    let _e7: MultiVector = other_249;
    let _e10: Scalar = self_269;
    let _e13: MultiVector = other_249;
    let _e16: Scalar = self_269;
    let _e19: MultiVector = other_249;
    let _e22: Scalar = self_269;
    let _e25: MultiVector = other_249;
    let _e28: Scalar = self_269;
    let _e31: MultiVector = other_249;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_join(self_270: Scalar, other_250: MultiVector) -> MultiVector {
    var self_271: Scalar;
    var other_251: MultiVector;

    self_271 = self_270;
    other_251 = other_250;
    let _e4: Scalar = self_271;
    let _e7: MultiVector = other_251;
    let _e10: Scalar = self_271;
    let _e13: MultiVector = other_251;
    let _e16: Scalar = self_271;
    let _e19: MultiVector = other_251;
    let _e22: Scalar = self_271;
    let _e25: MultiVector = other_251;
    let _e28: Scalar = self_271;
    let _e31: MultiVector = other_251;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_inner_product(self_272: Scalar, other_252: MultiVector) -> MultiVector {
    var self_273: Scalar;
    var other_253: MultiVector;

    self_273 = self_272;
    other_253 = other_252;
    let _e4: Scalar = self_273;
    let _e7: MultiVector = other_253;
    let _e10: Scalar = self_273;
    let _e13: MultiVector = other_253;
    let _e16: Scalar = self_273;
    let _e19: MultiVector = other_253;
    let _e22: Scalar = self_273;
    let _e25: MultiVector = other_253;
    let _e28: Scalar = self_273;
    let _e31: MultiVector = other_253;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_inner_anti_product(self_274: Scalar, other_254: MultiVector) -> MultiVector {
    var self_275: Scalar;
    var other_255: MultiVector;

    self_275 = self_274;
    other_255 = other_254;
    let _e4: Scalar = self_275;
    let _e7: MultiVector = other_255;
    let _e15: Scalar = self_275;
    let _e18: MultiVector = other_255;
    let _e30: Scalar = self_275;
    let _e33: MultiVector = other_255;
    let _e36: Scalar = self_275;
    let _e39: MultiVector = other_255;
    return MultiVector(((vec2(_e4.g0_) * _e7.g0_.yx) * vec2<f32>(1.0, 0.0)), ((vec4(_e15.g0_) * _e18.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), vec3(0.0), (vec3(_e30.g0_) * _e33.g2_), ((vec4(_e36.g0_) * _e39.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_multi_vector_left_contraction(self_276: Scalar, other_256: MultiVector) -> MultiVector {
    var self_277: Scalar;
    var other_257: MultiVector;

    self_277 = self_276;
    other_257 = other_256;
    let _e4: Scalar = self_277;
    let _e7: MultiVector = other_257;
    let _e10: Scalar = self_277;
    let _e13: MultiVector = other_257;
    let _e16: Scalar = self_277;
    let _e19: MultiVector = other_257;
    let _e22: Scalar = self_277;
    let _e25: MultiVector = other_257;
    let _e28: Scalar = self_277;
    let _e31: MultiVector = other_257;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_right_contraction(self_278: Scalar, other_258: MultiVector) -> Scalar {
    var self_279: Scalar;
    var other_259: MultiVector;

    self_279 = self_278;
    other_259 = other_258;
    let _e4: Scalar = self_279;
    let _e6: MultiVector = other_259;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_right_anti_contraction(self_280: Scalar, other_260: MultiVector) -> MultiVector {
    var self_281: Scalar;
    var other_261: MultiVector;

    self_281 = self_280;
    other_261 = other_260;
    let _e4: Scalar = self_281;
    let _e7: MultiVector = other_261;
    let _e15: Scalar = self_281;
    let _e18: MultiVector = other_261;
    let _e30: Scalar = self_281;
    let _e33: MultiVector = other_261;
    let _e36: Scalar = self_281;
    let _e39: MultiVector = other_261;
    return MultiVector(((vec2(_e4.g0_) * _e7.g0_.yx) * vec2<f32>(1.0, 0.0)), ((vec4(_e15.g0_) * _e18.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), vec3(0.0), (vec3(_e30.g0_) * _e33.g2_), ((vec4(_e36.g0_) * _e39.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn scalar_multi_vector_scalar_product(self_282: Scalar, other_262: MultiVector) -> Scalar {
    var self_283: Scalar;
    var other_263: MultiVector;

    self_283 = self_282;
    other_263 = other_262;
    let _e4: Scalar = self_283;
    let _e6: MultiVector = other_263;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_dot(self_284: Scalar, other_264: MultiVector) -> Scalar {
    var self_285: Scalar;
    var other_265: MultiVector;

    self_285 = self_284;
    other_265 = other_264;
    let _e4: Scalar = self_285;
    let _e6: MultiVector = other_265;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_squared_magnitude(self_286: Scalar) -> Scalar {
    var self_287: Scalar;

    self_287 = self_286;
    let _e2: Scalar = self_287;
    let _e3: Scalar = self_287;
    let _e4: Scalar = scalar_reversal(_e3);
    let _e5: Scalar = scalar_scalar_scalar_product(_e2, _e4);
    return _e5;
}

fn scalar_magnitude(self_288: Scalar) -> Scalar {
    var self_289: Scalar;

    self_289 = self_288;
    let _e2: Scalar = self_289;
    let _e3: Scalar = scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn scalar_scale(self_290: Scalar, other_266: f32) -> Scalar {
    var self_291: Scalar;
    var other_267: f32;

    self_291 = self_290;
    other_267 = other_266;
    let _e4: Scalar = self_291;
    let _e5: f32 = other_267;
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn scalar_signum(self_292: Scalar) -> Scalar {
    var self_293: Scalar;

    self_293 = self_292;
    let _e2: Scalar = self_293;
    let _e3: Scalar = self_293;
    let _e4: Scalar = scalar_magnitude(_e3);
    let _e9: Scalar = scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn scalar_inverse(self_294: Scalar) -> Scalar {
    var self_295: Scalar;

    self_295 = self_294;
    let _e2: Scalar = self_295;
    let _e3: Scalar = scalar_reversal(_e2);
    let _e4: Scalar = self_295;
    let _e5: Scalar = scalar_squared_magnitude(_e4);
    let _e10: Scalar = scalar_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn anti_scalar_zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_grade(self_296: AntiScalar) -> i32 {
    return 4;
}

fn anti_scalar_anti_grade(self_297: AntiScalar) -> i32 {
    return 0;
}

fn anti_scalar_neg(self_298: AntiScalar) -> AntiScalar {
    var self_299: AntiScalar;

    self_299 = self_298;
    let _e2: AntiScalar = self_299;
    return AntiScalar((_e2.g0_ * -1.0));
}

fn anti_scalar_automorphism(self_300: AntiScalar) -> AntiScalar {
    var self_301: AntiScalar;

    self_301 = self_300;
    let _e2: AntiScalar = self_301;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_reversal(self_302: AntiScalar) -> AntiScalar {
    var self_303: AntiScalar;

    self_303 = self_302;
    let _e2: AntiScalar = self_303;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_conjugation(self_304: AntiScalar) -> AntiScalar {
    var self_305: AntiScalar;

    self_305 = self_304;
    let _e2: AntiScalar = self_305;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_dual(self_306: AntiScalar) -> Scalar {
    var self_307: AntiScalar;

    self_307 = self_306;
    let _e2: AntiScalar = self_307;
    return Scalar(_e2.g0_);
}

fn anti_scalar_anti_reversal(self_308: AntiScalar) -> AntiScalar {
    var self_309: AntiScalar;

    self_309 = self_308;
    let _e2: AntiScalar = self_309;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_right_complement(self_310: AntiScalar) -> Scalar {
    var self_311: AntiScalar;

    self_311 = self_310;
    let _e2: AntiScalar = self_311;
    return Scalar(_e2.g0_);
}

fn anti_scalar_left_complement(self_312: AntiScalar) -> Scalar {
    var self_313: AntiScalar;

    self_313 = self_312;
    let _e2: AntiScalar = self_313;
    return Scalar(_e2.g0_);
}

fn anti_scalar_double_complement(self_314: AntiScalar) -> AntiScalar {
    var self_315: AntiScalar;

    self_315 = self_314;
    let _e2: AntiScalar = self_315;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_scalar_add(self_316: AntiScalar, other_268: Scalar) -> HomogeneousMagnitude {
    var self_317: AntiScalar;
    var other_269: Scalar;

    self_317 = self_316;
    other_269 = other_268;
    let _e4: AntiScalar = self_317;
    let _e11: Scalar = other_269;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) + (vec2(_e11.g0_) * vec2<f32>(1.0, 0.0))));
}

fn anti_scalar_scalar_sub(self_318: AntiScalar, other_270: Scalar) -> HomogeneousMagnitude {
    var self_319: AntiScalar;
    var other_271: Scalar;

    self_319 = self_318;
    other_271 = other_270;
    let _e4: AntiScalar = self_319;
    let _e11: Scalar = other_271;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) - (vec2(_e11.g0_) * vec2<f32>(1.0, 0.0))));
}

fn anti_scalar_scalar_geometric_product(self_320: AntiScalar, other_272: Scalar) -> AntiScalar {
    var self_321: AntiScalar;
    var other_273: Scalar;

    self_321 = self_320;
    other_273 = other_272;
    let _e4: AntiScalar = self_321;
    let _e6: Scalar = other_273;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_geometric_anti_product(self_322: AntiScalar, other_274: Scalar) -> Scalar {
    var self_323: AntiScalar;
    var other_275: Scalar;

    self_323 = self_322;
    other_275 = other_274;
    let _e4: AntiScalar = self_323;
    let _e6: Scalar = other_275;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_regressive_product(self_324: AntiScalar, other_276: Scalar) -> Scalar {
    var self_325: AntiScalar;
    var other_277: Scalar;

    self_325 = self_324;
    other_277 = other_276;
    let _e4: AntiScalar = self_325;
    let _e6: Scalar = other_277;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_anti_wedge(self_326: AntiScalar, other_278: Scalar) -> Scalar {
    var self_327: AntiScalar;
    var other_279: Scalar;

    self_327 = self_326;
    other_279 = other_278;
    let _e4: AntiScalar = self_327;
    let _e6: Scalar = other_279;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_meet(self_328: AntiScalar, other_280: Scalar) -> Scalar {
    var self_329: AntiScalar;
    var other_281: Scalar;

    self_329 = self_328;
    other_281 = other_280;
    let _e4: AntiScalar = self_329;
    let _e6: Scalar = other_281;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_outer_product(self_330: AntiScalar, other_282: Scalar) -> AntiScalar {
    var self_331: AntiScalar;
    var other_283: Scalar;

    self_331 = self_330;
    other_283 = other_282;
    let _e4: AntiScalar = self_331;
    let _e6: Scalar = other_283;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_wedge(self_332: AntiScalar, other_284: Scalar) -> AntiScalar {
    var self_333: AntiScalar;
    var other_285: Scalar;

    self_333 = self_332;
    other_285 = other_284;
    let _e4: AntiScalar = self_333;
    let _e6: Scalar = other_285;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_join(self_334: AntiScalar, other_286: Scalar) -> AntiScalar {
    var self_335: AntiScalar;
    var other_287: Scalar;

    self_335 = self_334;
    other_287 = other_286;
    let _e4: AntiScalar = self_335;
    let _e6: Scalar = other_287;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_product(self_336: AntiScalar, other_288: Scalar) -> AntiScalar {
    var self_337: AntiScalar;
    var other_289: Scalar;

    self_337 = self_336;
    other_289 = other_288;
    let _e4: AntiScalar = self_337;
    let _e6: Scalar = other_289;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_anti_product(self_338: AntiScalar, other_290: Scalar) -> Scalar {
    var self_339: AntiScalar;
    var other_291: Scalar;

    self_339 = self_338;
    other_291 = other_290;
    let _e4: AntiScalar = self_339;
    let _e6: Scalar = other_291;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_right_contraction(self_340: AntiScalar, other_292: Scalar) -> AntiScalar {
    var self_341: AntiScalar;
    var other_293: Scalar;

    self_341 = self_340;
    other_293 = other_292;
    let _e4: AntiScalar = self_341;
    let _e6: Scalar = other_293;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_left_anti_contraction(self_342: AntiScalar, other_294: Scalar) -> Scalar {
    var self_343: AntiScalar;
    var other_295: Scalar;

    self_343 = self_342;
    other_295 = other_294;
    let _e4: AntiScalar = self_343;
    let _e6: Scalar = other_295;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_add(self_344: AntiScalar, other_296: AntiScalar) -> AntiScalar {
    var self_345: AntiScalar;
    var other_297: AntiScalar;

    self_345 = self_344;
    other_297 = other_296;
    let _e4: AntiScalar = self_345;
    let _e6: AntiScalar = other_297;
    return AntiScalar((_e4.g0_ + _e6.g0_));
}

fn anti_scalar_anti_scalar_sub(self_346: AntiScalar, other_298: AntiScalar) -> AntiScalar {
    var self_347: AntiScalar;
    var other_299: AntiScalar;

    self_347 = self_346;
    other_299 = other_298;
    let _e4: AntiScalar = self_347;
    let _e6: AntiScalar = other_299;
    return AntiScalar((_e4.g0_ - _e6.g0_));
}

fn anti_scalar_anti_scalar_mul(self_348: AntiScalar, other_300: AntiScalar) -> AntiScalar {
    var self_349: AntiScalar;
    var other_301: AntiScalar;

    self_349 = self_348;
    other_301 = other_300;
    let _e4: AntiScalar = self_349;
    let _e6: AntiScalar = other_301;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_div(self_350: AntiScalar, other_302: AntiScalar) -> AntiScalar {
    var self_351: AntiScalar;
    var other_303: AntiScalar;

    self_351 = self_350;
    other_303 = other_302;
    let _e4: AntiScalar = self_351;
    let _e8: AntiScalar = other_303;
    return AntiScalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn anti_scalar_anti_scalar_geometric_anti_product(self_352: AntiScalar, other_304: AntiScalar) -> AntiScalar {
    var self_353: AntiScalar;
    var other_305: AntiScalar;

    self_353 = self_352;
    other_305 = other_304;
    let _e4: AntiScalar = self_353;
    let _e6: AntiScalar = other_305;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_regressive_product(self_354: AntiScalar, other_306: AntiScalar) -> AntiScalar {
    var self_355: AntiScalar;
    var other_307: AntiScalar;

    self_355 = self_354;
    other_307 = other_306;
    let _e4: AntiScalar = self_355;
    let _e6: AntiScalar = other_307;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_wedge(self_356: AntiScalar, other_308: AntiScalar) -> AntiScalar {
    var self_357: AntiScalar;
    var other_309: AntiScalar;

    self_357 = self_356;
    other_309 = other_308;
    let _e4: AntiScalar = self_357;
    let _e6: AntiScalar = other_309;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_meet(self_358: AntiScalar, other_310: AntiScalar) -> AntiScalar {
    var self_359: AntiScalar;
    var other_311: AntiScalar;

    self_359 = self_358;
    other_311 = other_310;
    let _e4: AntiScalar = self_359;
    let _e6: AntiScalar = other_311;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_inner_anti_product(self_360: AntiScalar, other_312: AntiScalar) -> AntiScalar {
    var self_361: AntiScalar;
    var other_313: AntiScalar;

    self_361 = self_360;
    other_313 = other_312;
    let _e4: AntiScalar = self_361;
    let _e6: AntiScalar = other_313;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_left_anti_contraction(self_362: AntiScalar, other_314: AntiScalar) -> AntiScalar {
    var self_363: AntiScalar;
    var other_315: AntiScalar;

    self_363 = self_362;
    other_315 = other_314;
    let _e4: AntiScalar = self_363;
    let _e6: AntiScalar = other_315;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_right_anti_contraction(self_364: AntiScalar, other_316: AntiScalar) -> AntiScalar {
    var self_365: AntiScalar;
    var other_317: AntiScalar;

    self_365 = self_364;
    other_317 = other_316;
    let _e4: AntiScalar = self_365;
    let _e6: AntiScalar = other_317;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_scalar_product(self_366: AntiScalar, other_318: AntiScalar) -> AntiScalar {
    var self_367: AntiScalar;
    var other_319: AntiScalar;

    self_367 = self_366;
    other_319 = other_318;
    let _e4: AntiScalar = self_367;
    let _e6: AntiScalar = other_319;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_dot(self_368: AntiScalar, other_320: AntiScalar) -> AntiScalar {
    var self_369: AntiScalar;
    var other_321: AntiScalar;

    self_369 = self_368;
    other_321 = other_320;
    let _e4: AntiScalar = self_369;
    let _e6: AntiScalar = other_321;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_homogeneous_magnitude_add(self_370: AntiScalar, other_322: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_371: AntiScalar;
    var other_323: HomogeneousMagnitude;

    self_371 = self_370;
    other_323 = other_322;
    let _e4: AntiScalar = self_371;
    let _e11: HomogeneousMagnitude = other_323;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) + _e11.g0_));
}

fn anti_scalar_homogeneous_magnitude_sub(self_372: AntiScalar, other_324: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_373: AntiScalar;
    var other_325: HomogeneousMagnitude;

    self_373 = self_372;
    other_325 = other_324;
    let _e4: AntiScalar = self_373;
    let _e11: HomogeneousMagnitude = other_325;
    return HomogeneousMagnitude(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) - _e11.g0_));
}

fn anti_scalar_homogeneous_magnitude_geometric_product(self_374: AntiScalar, other_326: HomogeneousMagnitude) -> AntiScalar {
    var self_375: AntiScalar;
    var other_327: HomogeneousMagnitude;

    self_375 = self_374;
    other_327 = other_326;
    let _e4: AntiScalar = self_375;
    let _e6: HomogeneousMagnitude = other_327;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_geometric_anti_product(self_376: AntiScalar, other_328: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_377: AntiScalar;
    var other_329: HomogeneousMagnitude;

    self_377 = self_376;
    other_329 = other_328;
    let _e4: AntiScalar = self_377;
    let _e7: HomogeneousMagnitude = other_329;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_regressive_product(self_378: AntiScalar, other_330: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_379: AntiScalar;
    var other_331: HomogeneousMagnitude;

    self_379 = self_378;
    other_331 = other_330;
    let _e4: AntiScalar = self_379;
    let _e7: HomogeneousMagnitude = other_331;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_anti_wedge(self_380: AntiScalar, other_332: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_381: AntiScalar;
    var other_333: HomogeneousMagnitude;

    self_381 = self_380;
    other_333 = other_332;
    let _e4: AntiScalar = self_381;
    let _e7: HomogeneousMagnitude = other_333;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_meet(self_382: AntiScalar, other_334: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_383: AntiScalar;
    var other_335: HomogeneousMagnitude;

    self_383 = self_382;
    other_335 = other_334;
    let _e4: AntiScalar = self_383;
    let _e7: HomogeneousMagnitude = other_335;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_outer_product(self_384: AntiScalar, other_336: HomogeneousMagnitude) -> AntiScalar {
    var self_385: AntiScalar;
    var other_337: HomogeneousMagnitude;

    self_385 = self_384;
    other_337 = other_336;
    let _e4: AntiScalar = self_385;
    let _e6: HomogeneousMagnitude = other_337;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_wedge(self_386: AntiScalar, other_338: HomogeneousMagnitude) -> AntiScalar {
    var self_387: AntiScalar;
    var other_339: HomogeneousMagnitude;

    self_387 = self_386;
    other_339 = other_338;
    let _e4: AntiScalar = self_387;
    let _e6: HomogeneousMagnitude = other_339;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_join(self_388: AntiScalar, other_340: HomogeneousMagnitude) -> AntiScalar {
    var self_389: AntiScalar;
    var other_341: HomogeneousMagnitude;

    self_389 = self_388;
    other_341 = other_340;
    let _e4: AntiScalar = self_389;
    let _e6: HomogeneousMagnitude = other_341;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_inner_product(self_390: AntiScalar, other_342: HomogeneousMagnitude) -> AntiScalar {
    var self_391: AntiScalar;
    var other_343: HomogeneousMagnitude;

    self_391 = self_390;
    other_343 = other_342;
    let _e4: AntiScalar = self_391;
    let _e6: HomogeneousMagnitude = other_343;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_inner_anti_product(self_392: AntiScalar, other_344: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_393: AntiScalar;
    var other_345: HomogeneousMagnitude;

    self_393 = self_392;
    other_345 = other_344;
    let _e4: AntiScalar = self_393;
    let _e7: HomogeneousMagnitude = other_345;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_right_contraction(self_394: AntiScalar, other_346: HomogeneousMagnitude) -> AntiScalar {
    var self_395: AntiScalar;
    var other_347: HomogeneousMagnitude;

    self_395 = self_394;
    other_347 = other_346;
    let _e4: AntiScalar = self_395;
    let _e6: HomogeneousMagnitude = other_347;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_left_anti_contraction(self_396: AntiScalar, other_348: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_397: AntiScalar;
    var other_349: HomogeneousMagnitude;

    self_397 = self_396;
    other_349 = other_348;
    let _e4: AntiScalar = self_397;
    let _e7: HomogeneousMagnitude = other_349;
    return HomogeneousMagnitude((vec2(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_right_anti_contraction(self_398: AntiScalar, other_350: HomogeneousMagnitude) -> AntiScalar {
    var self_399: AntiScalar;
    var other_351: HomogeneousMagnitude;

    self_399 = self_398;
    other_351 = other_350;
    let _e4: AntiScalar = self_399;
    let _e6: HomogeneousMagnitude = other_351;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_homogeneous_magnitude_anti_scalar_product(self_400: AntiScalar, other_352: HomogeneousMagnitude) -> AntiScalar {
    var self_401: AntiScalar;
    var other_353: HomogeneousMagnitude;

    self_401 = self_400;
    other_353 = other_352;
    let _e4: AntiScalar = self_401;
    let _e6: HomogeneousMagnitude = other_353;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_homogeneous_magnitude_anti_dot(self_402: AntiScalar, other_354: HomogeneousMagnitude) -> AntiScalar {
    var self_403: AntiScalar;
    var other_355: HomogeneousMagnitude;

    self_403 = self_402;
    other_355 = other_354;
    let _e4: AntiScalar = self_403;
    let _e6: HomogeneousMagnitude = other_355;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_point_geometric_product(self_404: AntiScalar, other_356: Point) -> Plane {
    var self_405: AntiScalar;
    var other_357: Point;

    self_405 = self_404;
    other_357 = other_356;
    let _e4: AntiScalar = self_405;
    let _e7: Point = other_357;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_point_geometric_anti_product(self_406: AntiScalar, other_358: Point) -> Point {
    var self_407: AntiScalar;
    var other_359: Point;

    self_407 = self_406;
    other_359 = other_358;
    let _e4: AntiScalar = self_407;
    let _e7: Point = other_359;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_regressive_product(self_408: AntiScalar, other_360: Point) -> Point {
    var self_409: AntiScalar;
    var other_361: Point;

    self_409 = self_408;
    other_361 = other_360;
    let _e4: AntiScalar = self_409;
    let _e7: Point = other_361;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_anti_wedge(self_410: AntiScalar, other_362: Point) -> Point {
    var self_411: AntiScalar;
    var other_363: Point;

    self_411 = self_410;
    other_363 = other_362;
    let _e4: AntiScalar = self_411;
    let _e7: Point = other_363;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_meet(self_412: AntiScalar, other_364: Point) -> Point {
    var self_413: AntiScalar;
    var other_365: Point;

    self_413 = self_412;
    other_365 = other_364;
    let _e4: AntiScalar = self_413;
    let _e7: Point = other_365;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_inner_product(self_414: AntiScalar, other_366: Point) -> Plane {
    var self_415: AntiScalar;
    var other_367: Point;

    self_415 = self_414;
    other_367 = other_366;
    let _e4: AntiScalar = self_415;
    let _e7: Point = other_367;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_point_inner_anti_product(self_416: AntiScalar, other_368: Point) -> Point {
    var self_417: AntiScalar;
    var other_369: Point;

    self_417 = self_416;
    other_369 = other_368;
    let _e4: AntiScalar = self_417;
    let _e7: Point = other_369;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_right_contraction(self_418: AntiScalar, other_370: Point) -> Plane {
    var self_419: AntiScalar;
    var other_371: Point;

    self_419 = self_418;
    other_371 = other_370;
    let _e4: AntiScalar = self_419;
    let _e7: Point = other_371;
    return Plane(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_point_left_anti_contraction(self_420: AntiScalar, other_372: Point) -> Point {
    var self_421: AntiScalar;
    var other_373: Point;

    self_421 = self_420;
    other_373 = other_372;
    let _e4: AntiScalar = self_421;
    let _e7: Point = other_373;
    return Point((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_line_add(self_422: AntiScalar, other_374: Line) -> Motor {
    var self_423: AntiScalar;
    var other_375: Line;

    self_423 = self_422;
    other_375 = other_374;
    let _e4: AntiScalar = self_423;
    let _e13: Line = other_375;
    let _e16: Line = other_375;
    let _e19: Line = other_375;
    let _e22: Line = other_375;
    let _e33: Line = other_375;
    return Motor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), _e33.g1_);
}

fn anti_scalar_line_sub(self_424: AntiScalar, other_376: Line) -> Motor {
    var self_425: AntiScalar;
    var other_377: Line;

    self_425 = self_424;
    other_377 = other_376;
    let _e4: AntiScalar = self_425;
    let _e13: Line = other_377;
    let _e16: Line = other_377;
    let _e19: Line = other_377;
    let _e22: Line = other_377;
    let _e35: Line = other_377;
    return Motor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(0.0) - _e35.g1_));
}

fn anti_scalar_line_geometric_product(self_426: AntiScalar, other_378: Line) -> Rotor {
    var self_427: AntiScalar;
    var other_379: Line;

    self_427 = self_426;
    other_379 = other_378;
    let _e4: AntiScalar = self_427;
    let _e7: Line = other_379;
    let _e10: Line = other_379;
    let _e13: Line = other_379;
    let _e16: Line = other_379;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_line_geometric_anti_product(self_428: AntiScalar, other_380: Line) -> Line {
    var self_429: AntiScalar;
    var other_381: Line;

    self_429 = self_428;
    other_381 = other_380;
    let _e4: AntiScalar = self_429;
    let _e7: Line = other_381;
    let _e10: AntiScalar = self_429;
    let _e13: Line = other_381;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_regressive_product(self_430: AntiScalar, other_382: Line) -> Line {
    var self_431: AntiScalar;
    var other_383: Line;

    self_431 = self_430;
    other_383 = other_382;
    let _e4: AntiScalar = self_431;
    let _e7: Line = other_383;
    let _e10: AntiScalar = self_431;
    let _e13: Line = other_383;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_anti_wedge(self_432: AntiScalar, other_384: Line) -> Line {
    var self_433: AntiScalar;
    var other_385: Line;

    self_433 = self_432;
    other_385 = other_384;
    let _e4: AntiScalar = self_433;
    let _e7: Line = other_385;
    let _e10: AntiScalar = self_433;
    let _e13: Line = other_385;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_meet(self_434: AntiScalar, other_386: Line) -> Line {
    var self_435: AntiScalar;
    var other_387: Line;

    self_435 = self_434;
    other_387 = other_386;
    let _e4: AntiScalar = self_435;
    let _e7: Line = other_387;
    let _e10: AntiScalar = self_435;
    let _e13: Line = other_387;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_inner_product(self_436: AntiScalar, other_388: Line) -> Rotor {
    var self_437: AntiScalar;
    var other_389: Line;

    self_437 = self_436;
    other_389 = other_388;
    let _e4: AntiScalar = self_437;
    let _e7: Line = other_389;
    let _e10: Line = other_389;
    let _e13: Line = other_389;
    let _e16: Line = other_389;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_line_inner_anti_product(self_438: AntiScalar, other_390: Line) -> Line {
    var self_439: AntiScalar;
    var other_391: Line;

    self_439 = self_438;
    other_391 = other_390;
    let _e4: AntiScalar = self_439;
    let _e7: Line = other_391;
    let _e10: AntiScalar = self_439;
    let _e13: Line = other_391;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_right_contraction(self_440: AntiScalar, other_392: Line) -> Rotor {
    var self_441: AntiScalar;
    var other_393: Line;

    self_441 = self_440;
    other_393 = other_392;
    let _e4: AntiScalar = self_441;
    let _e7: Line = other_393;
    let _e10: Line = other_393;
    let _e13: Line = other_393;
    let _e16: Line = other_393;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_line_left_anti_contraction(self_442: AntiScalar, other_394: Line) -> Line {
    var self_443: AntiScalar;
    var other_395: Line;

    self_443 = self_442;
    other_395 = other_394;
    let _e4: AntiScalar = self_443;
    let _e7: Line = other_395;
    let _e10: AntiScalar = self_443;
    let _e13: Line = other_395;
    return Line((vec3(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_plane_geometric_product(self_444: AntiScalar, other_396: Plane) -> Point {
    var self_445: AntiScalar;
    var other_397: Plane;

    self_445 = self_444;
    other_397 = other_396;
    let _e4: AntiScalar = self_445;
    let _e7: Plane = other_397;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn anti_scalar_plane_geometric_anti_product(self_446: AntiScalar, other_398: Plane) -> Plane {
    var self_447: AntiScalar;
    var other_399: Plane;

    self_447 = self_446;
    other_399 = other_398;
    let _e4: AntiScalar = self_447;
    let _e7: Plane = other_399;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_regressive_product(self_448: AntiScalar, other_400: Plane) -> Plane {
    var self_449: AntiScalar;
    var other_401: Plane;

    self_449 = self_448;
    other_401 = other_400;
    let _e4: AntiScalar = self_449;
    let _e7: Plane = other_401;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_anti_wedge(self_450: AntiScalar, other_402: Plane) -> Plane {
    var self_451: AntiScalar;
    var other_403: Plane;

    self_451 = self_450;
    other_403 = other_402;
    let _e4: AntiScalar = self_451;
    let _e7: Plane = other_403;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_meet(self_452: AntiScalar, other_404: Plane) -> Plane {
    var self_453: AntiScalar;
    var other_405: Plane;

    self_453 = self_452;
    other_405 = other_404;
    let _e4: AntiScalar = self_453;
    let _e7: Plane = other_405;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_inner_product(self_454: AntiScalar, other_406: Plane) -> Point {
    var self_455: AntiScalar;
    var other_407: Plane;

    self_455 = self_454;
    other_407 = other_406;
    let _e4: AntiScalar = self_455;
    let _e7: Plane = other_407;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn anti_scalar_plane_inner_anti_product(self_456: AntiScalar, other_408: Plane) -> Plane {
    var self_457: AntiScalar;
    var other_409: Plane;

    self_457 = self_456;
    other_409 = other_408;
    let _e4: AntiScalar = self_457;
    let _e7: Plane = other_409;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_right_contraction(self_458: AntiScalar, other_410: Plane) -> Point {
    var self_459: AntiScalar;
    var other_411: Plane;

    self_459 = self_458;
    other_411 = other_410;
    let _e4: AntiScalar = self_459;
    let _e7: Plane = other_411;
    return Point(((vec4(_e4.g0_) * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn anti_scalar_plane_left_anti_contraction(self_460: AntiScalar, other_412: Plane) -> Plane {
    var self_461: AntiScalar;
    var other_413: Plane;

    self_461 = self_460;
    other_413 = other_412;
    let _e4: AntiScalar = self_461;
    let _e7: Plane = other_413;
    return Plane((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_motor_add(self_462: AntiScalar, other_414: Motor) -> Motor {
    var self_463: AntiScalar;
    var other_415: Motor;

    self_463 = self_462;
    other_415 = other_414;
    let _e4: AntiScalar = self_463;
    let _e13: Motor = other_415;
    let _e16: Motor = other_415;
    return Motor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), _e16.g1_);
}

fn anti_scalar_motor_sub(self_464: AntiScalar, other_416: Motor) -> Motor {
    var self_465: AntiScalar;
    var other_417: Motor;

    self_465 = self_464;
    other_417 = other_416;
    let _e4: AntiScalar = self_465;
    let _e13: Motor = other_417;
    let _e18: Motor = other_417;
    return Motor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), (vec3(0.0) - _e18.g1_));
}

fn anti_scalar_motor_geometric_product(self_466: AntiScalar, other_418: Motor) -> Rotor {
    var self_467: AntiScalar;
    var other_419: Motor;

    self_467 = self_466;
    other_419 = other_418;
    let _e4: AntiScalar = self_467;
    let _e7: Motor = other_419;
    let _e10: Motor = other_419;
    let _e13: Motor = other_419;
    let _e16: Motor = other_419;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_motor_geometric_anti_product(self_468: AntiScalar, other_420: Motor) -> Motor {
    var self_469: AntiScalar;
    var other_421: Motor;

    self_469 = self_468;
    other_421 = other_420;
    let _e4: AntiScalar = self_469;
    let _e7: Motor = other_421;
    let _e10: AntiScalar = self_469;
    let _e13: Motor = other_421;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_regressive_product(self_470: AntiScalar, other_422: Motor) -> Motor {
    var self_471: AntiScalar;
    var other_423: Motor;

    self_471 = self_470;
    other_423 = other_422;
    let _e4: AntiScalar = self_471;
    let _e7: Motor = other_423;
    let _e10: AntiScalar = self_471;
    let _e13: Motor = other_423;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_anti_wedge(self_472: AntiScalar, other_424: Motor) -> Motor {
    var self_473: AntiScalar;
    var other_425: Motor;

    self_473 = self_472;
    other_425 = other_424;
    let _e4: AntiScalar = self_473;
    let _e7: Motor = other_425;
    let _e10: AntiScalar = self_473;
    let _e13: Motor = other_425;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_meet(self_474: AntiScalar, other_426: Motor) -> Motor {
    var self_475: AntiScalar;
    var other_427: Motor;

    self_475 = self_474;
    other_427 = other_426;
    let _e4: AntiScalar = self_475;
    let _e7: Motor = other_427;
    let _e10: AntiScalar = self_475;
    let _e13: Motor = other_427;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_inner_product(self_476: AntiScalar, other_428: Motor) -> Rotor {
    var self_477: AntiScalar;
    var other_429: Motor;

    self_477 = self_476;
    other_429 = other_428;
    let _e4: AntiScalar = self_477;
    let _e7: Motor = other_429;
    let _e10: Motor = other_429;
    let _e13: Motor = other_429;
    let _e16: Motor = other_429;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_motor_inner_anti_product(self_478: AntiScalar, other_430: Motor) -> Motor {
    var self_479: AntiScalar;
    var other_431: Motor;

    self_479 = self_478;
    other_431 = other_430;
    let _e4: AntiScalar = self_479;
    let _e7: Motor = other_431;
    let _e10: AntiScalar = self_479;
    let _e13: Motor = other_431;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_right_contraction(self_480: AntiScalar, other_432: Motor) -> Rotor {
    var self_481: AntiScalar;
    var other_433: Motor;

    self_481 = self_480;
    other_433 = other_432;
    let _e4: AntiScalar = self_481;
    let _e7: Motor = other_433;
    let _e10: Motor = other_433;
    let _e13: Motor = other_433;
    let _e16: Motor = other_433;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_motor_left_anti_contraction(self_482: AntiScalar, other_434: Motor) -> Motor {
    var self_483: AntiScalar;
    var other_435: Motor;

    self_483 = self_482;
    other_435 = other_434;
    let _e4: AntiScalar = self_483;
    let _e7: Motor = other_435;
    let _e10: AntiScalar = self_483;
    let _e13: Motor = other_435;
    return Motor((vec4(_e4.g0_) * _e7.g0_), (vec3(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_right_anti_contraction(self_484: AntiScalar, other_436: Motor) -> AntiScalar {
    var self_485: AntiScalar;
    var other_437: Motor;

    self_485 = self_484;
    other_437 = other_436;
    let _e4: AntiScalar = self_485;
    let _e6: Motor = other_437;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_motor_anti_scalar_product(self_486: AntiScalar, other_438: Motor) -> AntiScalar {
    var self_487: AntiScalar;
    var other_439: Motor;

    self_487 = self_486;
    other_439 = other_438;
    let _e4: AntiScalar = self_487;
    let _e6: Motor = other_439;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_motor_anti_dot(self_488: AntiScalar, other_440: Motor) -> AntiScalar {
    var self_489: AntiScalar;
    var other_441: Motor;

    self_489 = self_488;
    other_441 = other_440;
    let _e4: AntiScalar = self_489;
    let _e6: Motor = other_441;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_add(self_490: AntiScalar, other_442: Rotor) -> Rotor {
    var self_491: AntiScalar;
    var other_443: Rotor;

    self_491 = self_490;
    other_443 = other_442;
    let _e4: AntiScalar = self_491;
    let _e13: Rotor = other_443;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_rotor_sub(self_492: AntiScalar, other_444: Rotor) -> Rotor {
    var self_493: AntiScalar;
    var other_445: Rotor;

    self_493 = self_492;
    other_445 = other_444;
    let _e4: AntiScalar = self_493;
    let _e13: Rotor = other_445;
    return Rotor(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_rotor_geometric_anti_product(self_494: AntiScalar, other_446: Rotor) -> Rotor {
    var self_495: AntiScalar;
    var other_447: Rotor;

    self_495 = self_494;
    other_447 = other_446;
    let _e4: AntiScalar = self_495;
    let _e7: Rotor = other_447;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_regressive_product(self_496: AntiScalar, other_448: Rotor) -> Rotor {
    var self_497: AntiScalar;
    var other_449: Rotor;

    self_497 = self_496;
    other_449 = other_448;
    let _e4: AntiScalar = self_497;
    let _e7: Rotor = other_449;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_anti_wedge(self_498: AntiScalar, other_450: Rotor) -> Rotor {
    var self_499: AntiScalar;
    var other_451: Rotor;

    self_499 = self_498;
    other_451 = other_450;
    let _e4: AntiScalar = self_499;
    let _e7: Rotor = other_451;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_meet(self_500: AntiScalar, other_452: Rotor) -> Rotor {
    var self_501: AntiScalar;
    var other_453: Rotor;

    self_501 = self_500;
    other_453 = other_452;
    let _e4: AntiScalar = self_501;
    let _e7: Rotor = other_453;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_inner_anti_product(self_502: AntiScalar, other_454: Rotor) -> Rotor {
    var self_503: AntiScalar;
    var other_455: Rotor;

    self_503 = self_502;
    other_455 = other_454;
    let _e4: AntiScalar = self_503;
    let _e7: Rotor = other_455;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_left_anti_contraction(self_504: AntiScalar, other_456: Rotor) -> Rotor {
    var self_505: AntiScalar;
    var other_457: Rotor;

    self_505 = self_504;
    other_457 = other_456;
    let _e4: AntiScalar = self_505;
    let _e7: Rotor = other_457;
    return Rotor((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_right_anti_contraction(self_506: AntiScalar, other_458: Rotor) -> AntiScalar {
    var self_507: AntiScalar;
    var other_459: Rotor;

    self_507 = self_506;
    other_459 = other_458;
    let _e4: AntiScalar = self_507;
    let _e6: Rotor = other_459;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_anti_scalar_product(self_508: AntiScalar, other_460: Rotor) -> AntiScalar {
    var self_509: AntiScalar;
    var other_461: Rotor;

    self_509 = self_508;
    other_461 = other_460;
    let _e4: AntiScalar = self_509;
    let _e6: Rotor = other_461;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_anti_dot(self_510: AntiScalar, other_462: Rotor) -> AntiScalar {
    var self_511: AntiScalar;
    var other_463: Rotor;

    self_511 = self_510;
    other_463 = other_462;
    let _e4: AntiScalar = self_511;
    let _e6: Rotor = other_463;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_add(self_512: AntiScalar, other_464: Translator) -> Translator {
    var self_513: AntiScalar;
    var other_465: Translator;

    self_513 = self_512;
    other_465 = other_464;
    let _e4: AntiScalar = self_513;
    let _e13: Translator = other_465;
    return Translator(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_translator_sub(self_514: AntiScalar, other_466: Translator) -> Translator {
    var self_515: AntiScalar;
    var other_467: Translator;

    self_515 = self_514;
    other_467 = other_466;
    let _e4: AntiScalar = self_515;
    let _e13: Translator = other_467;
    return Translator(((vec4(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_translator_geometric_product(self_516: AntiScalar, other_468: Translator) -> Rotor {
    var self_517: AntiScalar;
    var other_469: Translator;

    self_517 = self_516;
    other_469 = other_468;
    let _e4: AntiScalar = self_517;
    let _e7: Translator = other_469;
    return Rotor(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_translator_geometric_anti_product(self_518: AntiScalar, other_470: Translator) -> Translator {
    var self_519: AntiScalar;
    var other_471: Translator;

    self_519 = self_518;
    other_471 = other_470;
    let _e4: AntiScalar = self_519;
    let _e7: Translator = other_471;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_regressive_product(self_520: AntiScalar, other_472: Translator) -> Translator {
    var self_521: AntiScalar;
    var other_473: Translator;

    self_521 = self_520;
    other_473 = other_472;
    let _e4: AntiScalar = self_521;
    let _e7: Translator = other_473;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_anti_wedge(self_522: AntiScalar, other_474: Translator) -> Translator {
    var self_523: AntiScalar;
    var other_475: Translator;

    self_523 = self_522;
    other_475 = other_474;
    let _e4: AntiScalar = self_523;
    let _e7: Translator = other_475;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_meet(self_524: AntiScalar, other_476: Translator) -> Translator {
    var self_525: AntiScalar;
    var other_477: Translator;

    self_525 = self_524;
    other_477 = other_476;
    let _e4: AntiScalar = self_525;
    let _e7: Translator = other_477;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_inner_product(self_526: AntiScalar, other_478: Translator) -> Rotor {
    var self_527: AntiScalar;
    var other_479: Translator;

    self_527 = self_526;
    other_479 = other_478;
    let _e4: AntiScalar = self_527;
    let _e7: Translator = other_479;
    return Rotor(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_translator_inner_anti_product(self_528: AntiScalar, other_480: Translator) -> Translator {
    var self_529: AntiScalar;
    var other_481: Translator;

    self_529 = self_528;
    other_481 = other_480;
    let _e4: AntiScalar = self_529;
    let _e7: Translator = other_481;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_right_contraction(self_530: AntiScalar, other_482: Translator) -> Rotor {
    var self_531: AntiScalar;
    var other_483: Translator;

    self_531 = self_530;
    other_483 = other_482;
    let _e4: AntiScalar = self_531;
    let _e7: Translator = other_483;
    return Rotor(((vec4(_e4.g0_) * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn anti_scalar_translator_left_anti_contraction(self_532: AntiScalar, other_484: Translator) -> Translator {
    var self_533: AntiScalar;
    var other_485: Translator;

    self_533 = self_532;
    other_485 = other_484;
    let _e4: AntiScalar = self_533;
    let _e7: Translator = other_485;
    return Translator((vec4(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_right_anti_contraction(self_534: AntiScalar, other_486: Translator) -> AntiScalar {
    var self_535: AntiScalar;
    var other_487: Translator;

    self_535 = self_534;
    other_487 = other_486;
    let _e4: AntiScalar = self_535;
    let _e6: Translator = other_487;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_anti_scalar_product(self_536: AntiScalar, other_488: Translator) -> AntiScalar {
    var self_537: AntiScalar;
    var other_489: Translator;

    self_537 = self_536;
    other_489 = other_488;
    let _e4: AntiScalar = self_537;
    let _e6: Translator = other_489;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_anti_dot(self_538: AntiScalar, other_490: Translator) -> AntiScalar {
    var self_539: AntiScalar;
    var other_491: Translator;

    self_539 = self_538;
    other_491 = other_490;
    let _e4: AntiScalar = self_539;
    let _e6: Translator = other_491;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_flector_geometric_product(self_540: AntiScalar, other_492: Flector) -> Flector {
    var self_541: AntiScalar;
    var other_493: Flector;

    self_541 = self_540;
    other_493 = other_492;
    let _e4: AntiScalar = self_541;
    let _e7: Flector = other_493;
    let _e17: AntiScalar = self_541;
    let _e20: Flector = other_493;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), ((vec4(_e17.g0_) * _e20.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_flector_geometric_anti_product(self_542: AntiScalar, other_494: Flector) -> Flector {
    var self_543: AntiScalar;
    var other_495: Flector;

    self_543 = self_542;
    other_495 = other_494;
    let _e4: AntiScalar = self_543;
    let _e7: Flector = other_495;
    let _e10: AntiScalar = self_543;
    let _e13: Flector = other_495;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_regressive_product(self_544: AntiScalar, other_496: Flector) -> Flector {
    var self_545: AntiScalar;
    var other_497: Flector;

    self_545 = self_544;
    other_497 = other_496;
    let _e4: AntiScalar = self_545;
    let _e7: Flector = other_497;
    let _e10: AntiScalar = self_545;
    let _e13: Flector = other_497;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_anti_wedge(self_546: AntiScalar, other_498: Flector) -> Flector {
    var self_547: AntiScalar;
    var other_499: Flector;

    self_547 = self_546;
    other_499 = other_498;
    let _e4: AntiScalar = self_547;
    let _e7: Flector = other_499;
    let _e10: AntiScalar = self_547;
    let _e13: Flector = other_499;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_meet(self_548: AntiScalar, other_500: Flector) -> Flector {
    var self_549: AntiScalar;
    var other_501: Flector;

    self_549 = self_548;
    other_501 = other_500;
    let _e4: AntiScalar = self_549;
    let _e7: Flector = other_501;
    let _e10: AntiScalar = self_549;
    let _e13: Flector = other_501;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_inner_product(self_550: AntiScalar, other_502: Flector) -> Flector {
    var self_551: AntiScalar;
    var other_503: Flector;

    self_551 = self_550;
    other_503 = other_502;
    let _e4: AntiScalar = self_551;
    let _e7: Flector = other_503;
    let _e17: AntiScalar = self_551;
    let _e20: Flector = other_503;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), ((vec4(_e17.g0_) * _e20.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_flector_inner_anti_product(self_552: AntiScalar, other_504: Flector) -> Flector {
    var self_553: AntiScalar;
    var other_505: Flector;

    self_553 = self_552;
    other_505 = other_504;
    let _e4: AntiScalar = self_553;
    let _e7: Flector = other_505;
    let _e10: AntiScalar = self_553;
    let _e13: Flector = other_505;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_right_contraction(self_554: AntiScalar, other_506: Flector) -> Flector {
    var self_555: AntiScalar;
    var other_507: Flector;

    self_555 = self_554;
    other_507 = other_506;
    let _e4: AntiScalar = self_555;
    let _e7: Flector = other_507;
    let _e17: AntiScalar = self_555;
    let _e20: Flector = other_507;
    return Flector(((vec4(_e4.g0_) * _e7.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), ((vec4(_e17.g0_) * _e20.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_flector_left_anti_contraction(self_556: AntiScalar, other_508: Flector) -> Flector {
    var self_557: AntiScalar;
    var other_509: Flector;

    self_557 = self_556;
    other_509 = other_508;
    let _e4: AntiScalar = self_557;
    let _e7: Flector = other_509;
    let _e10: AntiScalar = self_557;
    let _e13: Flector = other_509;
    return Flector((vec4(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_multi_vector_add(self_558: AntiScalar, other_510: MultiVector) -> MultiVector {
    var self_559: AntiScalar;
    var other_511: MultiVector;

    self_559 = self_558;
    other_511 = other_510;
    let _e4: AntiScalar = self_559;
    let _e11: MultiVector = other_511;
    let _e14: MultiVector = other_511;
    let _e16: MultiVector = other_511;
    let _e18: MultiVector = other_511;
    let _e20: MultiVector = other_511;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) + _e11.g0_), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn anti_scalar_multi_vector_sub(self_560: AntiScalar, other_512: MultiVector) -> MultiVector {
    var self_561: AntiScalar;
    var other_513: MultiVector;

    self_561 = self_560;
    other_513 = other_512;
    let _e4: AntiScalar = self_561;
    let _e11: MultiVector = other_513;
    let _e16: MultiVector = other_513;
    let _e21: MultiVector = other_513;
    let _e26: MultiVector = other_513;
    let _e31: MultiVector = other_513;
    return MultiVector(((vec2(_e4.g0_) * vec2<f32>(0.0, 1.0)) - _e11.g0_), (vec4(0.0) - _e16.g1_), (vec3(0.0) - _e21.g2_), (vec3(0.0) - _e26.g3_), (vec4(0.0) - _e31.g4_));
}

fn anti_scalar_multi_vector_geometric_product(self_562: AntiScalar, other_514: MultiVector) -> MultiVector {
    var self_563: AntiScalar;
    var other_515: MultiVector;

    self_563 = self_562;
    other_515 = other_514;
    let _e4: AntiScalar = self_563;
    let _e7: MultiVector = other_515;
    let _e16: AntiScalar = self_563;
    let _e19: MultiVector = other_515;
    let _e29: AntiScalar = self_563;
    let _e32: MultiVector = other_515;
    let _e37: AntiScalar = self_563;
    let _e40: MultiVector = other_515;
    return MultiVector(((vec2(_e4.g0_) * vec2(_e7.g0_.x)) * vec2<f32>(0.0, 1.0)), ((vec4(_e16.g0_) * _e19.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec3(_e29.g0_) * _e32.g3_), vec3(0.0), ((vec4(_e37.g0_) * _e40.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_multi_vector_geometric_anti_product(self_564: AntiScalar, other_516: MultiVector) -> MultiVector {
    var self_565: AntiScalar;
    var other_517: MultiVector;

    self_565 = self_564;
    other_517 = other_516;
    let _e4: AntiScalar = self_565;
    let _e7: MultiVector = other_517;
    let _e10: AntiScalar = self_565;
    let _e13: MultiVector = other_517;
    let _e16: AntiScalar = self_565;
    let _e19: MultiVector = other_517;
    let _e22: AntiScalar = self_565;
    let _e25: MultiVector = other_517;
    let _e28: AntiScalar = self_565;
    let _e31: MultiVector = other_517;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_regressive_product(self_566: AntiScalar, other_518: MultiVector) -> MultiVector {
    var self_567: AntiScalar;
    var other_519: MultiVector;

    self_567 = self_566;
    other_519 = other_518;
    let _e4: AntiScalar = self_567;
    let _e7: MultiVector = other_519;
    let _e10: AntiScalar = self_567;
    let _e13: MultiVector = other_519;
    let _e16: AntiScalar = self_567;
    let _e19: MultiVector = other_519;
    let _e22: AntiScalar = self_567;
    let _e25: MultiVector = other_519;
    let _e28: AntiScalar = self_567;
    let _e31: MultiVector = other_519;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_anti_wedge(self_568: AntiScalar, other_520: MultiVector) -> MultiVector {
    var self_569: AntiScalar;
    var other_521: MultiVector;

    self_569 = self_568;
    other_521 = other_520;
    let _e4: AntiScalar = self_569;
    let _e7: MultiVector = other_521;
    let _e10: AntiScalar = self_569;
    let _e13: MultiVector = other_521;
    let _e16: AntiScalar = self_569;
    let _e19: MultiVector = other_521;
    let _e22: AntiScalar = self_569;
    let _e25: MultiVector = other_521;
    let _e28: AntiScalar = self_569;
    let _e31: MultiVector = other_521;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_meet(self_570: AntiScalar, other_522: MultiVector) -> MultiVector {
    var self_571: AntiScalar;
    var other_523: MultiVector;

    self_571 = self_570;
    other_523 = other_522;
    let _e4: AntiScalar = self_571;
    let _e7: MultiVector = other_523;
    let _e10: AntiScalar = self_571;
    let _e13: MultiVector = other_523;
    let _e16: AntiScalar = self_571;
    let _e19: MultiVector = other_523;
    let _e22: AntiScalar = self_571;
    let _e25: MultiVector = other_523;
    let _e28: AntiScalar = self_571;
    let _e31: MultiVector = other_523;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_outer_product(self_572: AntiScalar, other_524: MultiVector) -> AntiScalar {
    var self_573: AntiScalar;
    var other_525: MultiVector;

    self_573 = self_572;
    other_525 = other_524;
    let _e4: AntiScalar = self_573;
    let _e6: MultiVector = other_525;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_wedge(self_574: AntiScalar, other_526: MultiVector) -> AntiScalar {
    var self_575: AntiScalar;
    var other_527: MultiVector;

    self_575 = self_574;
    other_527 = other_526;
    let _e4: AntiScalar = self_575;
    let _e6: MultiVector = other_527;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_join(self_576: AntiScalar, other_528: MultiVector) -> AntiScalar {
    var self_577: AntiScalar;
    var other_529: MultiVector;

    self_577 = self_576;
    other_529 = other_528;
    let _e4: AntiScalar = self_577;
    let _e6: MultiVector = other_529;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_inner_product(self_578: AntiScalar, other_530: MultiVector) -> MultiVector {
    var self_579: AntiScalar;
    var other_531: MultiVector;

    self_579 = self_578;
    other_531 = other_530;
    let _e4: AntiScalar = self_579;
    let _e7: MultiVector = other_531;
    let _e16: AntiScalar = self_579;
    let _e19: MultiVector = other_531;
    let _e29: AntiScalar = self_579;
    let _e32: MultiVector = other_531;
    let _e37: AntiScalar = self_579;
    let _e40: MultiVector = other_531;
    return MultiVector(((vec2(_e4.g0_) * vec2(_e7.g0_.x)) * vec2<f32>(0.0, 1.0)), ((vec4(_e16.g0_) * _e19.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec3(_e29.g0_) * _e32.g3_), vec3(0.0), ((vec4(_e37.g0_) * _e40.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_multi_vector_inner_anti_product(self_580: AntiScalar, other_532: MultiVector) -> MultiVector {
    var self_581: AntiScalar;
    var other_533: MultiVector;

    self_581 = self_580;
    other_533 = other_532;
    let _e4: AntiScalar = self_581;
    let _e7: MultiVector = other_533;
    let _e10: AntiScalar = self_581;
    let _e13: MultiVector = other_533;
    let _e16: AntiScalar = self_581;
    let _e19: MultiVector = other_533;
    let _e22: AntiScalar = self_581;
    let _e25: MultiVector = other_533;
    let _e28: AntiScalar = self_581;
    let _e31: MultiVector = other_533;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_right_contraction(self_582: AntiScalar, other_534: MultiVector) -> MultiVector {
    var self_583: AntiScalar;
    var other_535: MultiVector;

    self_583 = self_582;
    other_535 = other_534;
    let _e4: AntiScalar = self_583;
    let _e7: MultiVector = other_535;
    let _e16: AntiScalar = self_583;
    let _e19: MultiVector = other_535;
    let _e29: AntiScalar = self_583;
    let _e32: MultiVector = other_535;
    let _e37: AntiScalar = self_583;
    let _e40: MultiVector = other_535;
    return MultiVector(((vec2(_e4.g0_) * vec2(_e7.g0_.x)) * vec2<f32>(0.0, 1.0)), ((vec4(_e16.g0_) * _e19.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec3(_e29.g0_) * _e32.g3_), vec3(0.0), ((vec4(_e37.g0_) * _e40.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn anti_scalar_multi_vector_left_anti_contraction(self_584: AntiScalar, other_536: MultiVector) -> MultiVector {
    var self_585: AntiScalar;
    var other_537: MultiVector;

    self_585 = self_584;
    other_537 = other_536;
    let _e4: AntiScalar = self_585;
    let _e7: MultiVector = other_537;
    let _e10: AntiScalar = self_585;
    let _e13: MultiVector = other_537;
    let _e16: AntiScalar = self_585;
    let _e19: MultiVector = other_537;
    let _e22: AntiScalar = self_585;
    let _e25: MultiVector = other_537;
    let _e28: AntiScalar = self_585;
    let _e31: MultiVector = other_537;
    return MultiVector((vec2(_e4.g0_) * _e7.g0_), (vec4(_e10.g0_) * _e13.g1_), (vec3(_e16.g0_) * _e19.g2_), (vec3(_e22.g0_) * _e25.g3_), (vec4(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_right_anti_contraction(self_586: AntiScalar, other_538: MultiVector) -> AntiScalar {
    var self_587: AntiScalar;
    var other_539: MultiVector;

    self_587 = self_586;
    other_539 = other_538;
    let _e4: AntiScalar = self_587;
    let _e6: MultiVector = other_539;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_multi_vector_anti_scalar_product(self_588: AntiScalar, other_540: MultiVector) -> AntiScalar {
    var self_589: AntiScalar;
    var other_541: MultiVector;

    self_589 = self_588;
    other_541 = other_540;
    let _e4: AntiScalar = self_589;
    let _e6: MultiVector = other_541;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_multi_vector_anti_dot(self_590: AntiScalar, other_542: MultiVector) -> AntiScalar {
    var self_591: AntiScalar;
    var other_543: MultiVector;

    self_591 = self_590;
    other_543 = other_542;
    let _e4: AntiScalar = self_591;
    let _e6: MultiVector = other_543;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_scale(self_592: AntiScalar, other_544: f32) -> AntiScalar {
    var self_593: AntiScalar;
    var other_545: f32;

    self_593 = self_592;
    other_545 = other_544;
    let _e4: AntiScalar = self_593;
    let _e5: f32 = other_545;
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn anti_scalar_attitude(self_594: AntiScalar) -> Plane {
    var self_595: AntiScalar;

    self_595 = self_594;
    let _e2: AntiScalar = self_595;
    let _e9: Plane = anti_scalar_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn homogeneous_magnitude_zero() -> HomogeneousMagnitude {
    return HomogeneousMagnitude(vec2(0.0));
}

fn homogeneous_magnitude_one() -> HomogeneousMagnitude {
    return HomogeneousMagnitude(vec2<f32>(1.0, 0.0));
}

fn homogeneous_magnitude_neg(self_596: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_597: HomogeneousMagnitude;

    self_597 = self_596;
    let _e2: HomogeneousMagnitude = self_597;
    return HomogeneousMagnitude((_e2.g0_ * vec2(-1.0)));
}

fn homogeneous_magnitude_automorphism(self_598: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_599: HomogeneousMagnitude;

    self_599 = self_598;
    let _e2: HomogeneousMagnitude = self_599;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_reversal(self_600: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_601: HomogeneousMagnitude;

    self_601 = self_600;
    let _e2: HomogeneousMagnitude = self_601;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_conjugation(self_602: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_603: HomogeneousMagnitude;

    self_603 = self_602;
    let _e2: HomogeneousMagnitude = self_603;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_dual(self_604: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_605: HomogeneousMagnitude;

    self_605 = self_604;
    let _e2: HomogeneousMagnitude = self_605;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_anti_reversal(self_606: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_607: HomogeneousMagnitude;

    self_607 = self_606;
    let _e2: HomogeneousMagnitude = self_607;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_right_complement(self_608: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_609: HomogeneousMagnitude;

    self_609 = self_608;
    let _e2: HomogeneousMagnitude = self_609;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_left_complement(self_610: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_611: HomogeneousMagnitude;

    self_611 = self_610;
    let _e2: HomogeneousMagnitude = self_611;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_double_complement(self_612: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_613: HomogeneousMagnitude;

    self_613 = self_612;
    let _e2: HomogeneousMagnitude = self_613;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_scalar_into(self_614: HomogeneousMagnitude) -> Scalar {
    var self_615: HomogeneousMagnitude;

    self_615 = self_614;
    let _e2: HomogeneousMagnitude = self_615;
    return Scalar(_e2.g0_.x);
}

fn homogeneous_magnitude_scalar_add(self_616: HomogeneousMagnitude, other_546: Scalar) -> HomogeneousMagnitude {
    var self_617: HomogeneousMagnitude;
    var other_547: Scalar;

    self_617 = self_616;
    other_547 = other_546;
    let _e4: HomogeneousMagnitude = self_617;
    let _e6: Scalar = other_547;
    return HomogeneousMagnitude((_e4.g0_ + (vec2(_e6.g0_) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_scalar_sub(self_618: HomogeneousMagnitude, other_548: Scalar) -> HomogeneousMagnitude {
    var self_619: HomogeneousMagnitude;
    var other_549: Scalar;

    self_619 = self_618;
    other_549 = other_548;
    let _e4: HomogeneousMagnitude = self_619;
    let _e6: Scalar = other_549;
    return HomogeneousMagnitude((_e4.g0_ - (vec2(_e6.g0_) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_scalar_geometric_product(self_620: HomogeneousMagnitude, other_550: Scalar) -> HomogeneousMagnitude {
    var self_621: HomogeneousMagnitude;
    var other_551: Scalar;

    self_621 = self_620;
    other_551 = other_550;
    let _e4: HomogeneousMagnitude = self_621;
    let _e6: Scalar = other_551;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_geometric_anti_product(self_622: HomogeneousMagnitude, other_552: Scalar) -> Scalar {
    var self_623: HomogeneousMagnitude;
    var other_553: Scalar;

    self_623 = self_622;
    other_553 = other_552;
    let _e4: HomogeneousMagnitude = self_623;
    let _e7: Scalar = other_553;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_regressive_product(self_624: HomogeneousMagnitude, other_554: Scalar) -> Scalar {
    var self_625: HomogeneousMagnitude;
    var other_555: Scalar;

    self_625 = self_624;
    other_555 = other_554;
    let _e4: HomogeneousMagnitude = self_625;
    let _e7: Scalar = other_555;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_anti_wedge(self_626: HomogeneousMagnitude, other_556: Scalar) -> Scalar {
    var self_627: HomogeneousMagnitude;
    var other_557: Scalar;

    self_627 = self_626;
    other_557 = other_556;
    let _e4: HomogeneousMagnitude = self_627;
    let _e7: Scalar = other_557;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_meet(self_628: HomogeneousMagnitude, other_558: Scalar) -> Scalar {
    var self_629: HomogeneousMagnitude;
    var other_559: Scalar;

    self_629 = self_628;
    other_559 = other_558;
    let _e4: HomogeneousMagnitude = self_629;
    let _e7: Scalar = other_559;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_outer_product(self_630: HomogeneousMagnitude, other_560: Scalar) -> HomogeneousMagnitude {
    var self_631: HomogeneousMagnitude;
    var other_561: Scalar;

    self_631 = self_630;
    other_561 = other_560;
    let _e4: HomogeneousMagnitude = self_631;
    let _e6: Scalar = other_561;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_wedge(self_632: HomogeneousMagnitude, other_562: Scalar) -> HomogeneousMagnitude {
    var self_633: HomogeneousMagnitude;
    var other_563: Scalar;

    self_633 = self_632;
    other_563 = other_562;
    let _e4: HomogeneousMagnitude = self_633;
    let _e6: Scalar = other_563;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_join(self_634: HomogeneousMagnitude, other_564: Scalar) -> HomogeneousMagnitude {
    var self_635: HomogeneousMagnitude;
    var other_565: Scalar;

    self_635 = self_634;
    other_565 = other_564;
    let _e4: HomogeneousMagnitude = self_635;
    let _e6: Scalar = other_565;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_inner_product(self_636: HomogeneousMagnitude, other_566: Scalar) -> HomogeneousMagnitude {
    var self_637: HomogeneousMagnitude;
    var other_567: Scalar;

    self_637 = self_636;
    other_567 = other_566;
    let _e4: HomogeneousMagnitude = self_637;
    let _e6: Scalar = other_567;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_inner_anti_product(self_638: HomogeneousMagnitude, other_568: Scalar) -> Scalar {
    var self_639: HomogeneousMagnitude;
    var other_569: Scalar;

    self_639 = self_638;
    other_569 = other_568;
    let _e4: HomogeneousMagnitude = self_639;
    let _e7: Scalar = other_569;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_left_contraction(self_640: HomogeneousMagnitude, other_570: Scalar) -> Scalar {
    var self_641: HomogeneousMagnitude;
    var other_571: Scalar;

    self_641 = self_640;
    other_571 = other_570;
    let _e4: HomogeneousMagnitude = self_641;
    let _e7: Scalar = other_571;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_scalar_right_contraction(self_642: HomogeneousMagnitude, other_572: Scalar) -> HomogeneousMagnitude {
    var self_643: HomogeneousMagnitude;
    var other_573: Scalar;

    self_643 = self_642;
    other_573 = other_572;
    let _e4: HomogeneousMagnitude = self_643;
    let _e6: Scalar = other_573;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_left_anti_contraction(self_644: HomogeneousMagnitude, other_574: Scalar) -> Scalar {
    var self_645: HomogeneousMagnitude;
    var other_575: Scalar;

    self_645 = self_644;
    other_575 = other_574;
    let _e4: HomogeneousMagnitude = self_645;
    let _e7: Scalar = other_575;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_scalar_product(self_646: HomogeneousMagnitude, other_576: Scalar) -> Scalar {
    var self_647: HomogeneousMagnitude;
    var other_577: Scalar;

    self_647 = self_646;
    other_577 = other_576;
    let _e4: HomogeneousMagnitude = self_647;
    let _e7: Scalar = other_577;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_scalar_dot(self_648: HomogeneousMagnitude, other_578: Scalar) -> Scalar {
    var self_649: HomogeneousMagnitude;
    var other_579: Scalar;

    self_649 = self_648;
    other_579 = other_578;
    let _e4: HomogeneousMagnitude = self_649;
    let _e7: Scalar = other_579;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_into(self_650: HomogeneousMagnitude) -> AntiScalar {
    var self_651: HomogeneousMagnitude;

    self_651 = self_650;
    let _e2: HomogeneousMagnitude = self_651;
    return AntiScalar(_e2.g0_.y);
}

fn homogeneous_magnitude_anti_scalar_add(self_652: HomogeneousMagnitude, other_580: AntiScalar) -> HomogeneousMagnitude {
    var self_653: HomogeneousMagnitude;
    var other_581: AntiScalar;

    self_653 = self_652;
    other_581 = other_580;
    let _e4: HomogeneousMagnitude = self_653;
    let _e6: AntiScalar = other_581;
    return HomogeneousMagnitude((_e4.g0_ + (vec2(_e6.g0_) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_anti_scalar_sub(self_654: HomogeneousMagnitude, other_582: AntiScalar) -> HomogeneousMagnitude {
    var self_655: HomogeneousMagnitude;
    var other_583: AntiScalar;

    self_655 = self_654;
    other_583 = other_582;
    let _e4: HomogeneousMagnitude = self_655;
    let _e6: AntiScalar = other_583;
    return HomogeneousMagnitude((_e4.g0_ - (vec2(_e6.g0_) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_anti_scalar_geometric_product(self_656: HomogeneousMagnitude, other_584: AntiScalar) -> AntiScalar {
    var self_657: HomogeneousMagnitude;
    var other_585: AntiScalar;

    self_657 = self_656;
    other_585 = other_584;
    let _e4: HomogeneousMagnitude = self_657;
    let _e7: AntiScalar = other_585;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_geometric_anti_product(self_658: HomogeneousMagnitude, other_586: AntiScalar) -> HomogeneousMagnitude {
    var self_659: HomogeneousMagnitude;
    var other_587: AntiScalar;

    self_659 = self_658;
    other_587 = other_586;
    let _e4: HomogeneousMagnitude = self_659;
    let _e6: AntiScalar = other_587;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_regressive_product(self_660: HomogeneousMagnitude, other_588: AntiScalar) -> HomogeneousMagnitude {
    var self_661: HomogeneousMagnitude;
    var other_589: AntiScalar;

    self_661 = self_660;
    other_589 = other_588;
    let _e4: HomogeneousMagnitude = self_661;
    let _e6: AntiScalar = other_589;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_anti_wedge(self_662: HomogeneousMagnitude, other_590: AntiScalar) -> HomogeneousMagnitude {
    var self_663: HomogeneousMagnitude;
    var other_591: AntiScalar;

    self_663 = self_662;
    other_591 = other_590;
    let _e4: HomogeneousMagnitude = self_663;
    let _e6: AntiScalar = other_591;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_meet(self_664: HomogeneousMagnitude, other_592: AntiScalar) -> HomogeneousMagnitude {
    var self_665: HomogeneousMagnitude;
    var other_593: AntiScalar;

    self_665 = self_664;
    other_593 = other_592;
    let _e4: HomogeneousMagnitude = self_665;
    let _e6: AntiScalar = other_593;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_outer_product(self_666: HomogeneousMagnitude, other_594: AntiScalar) -> AntiScalar {
    var self_667: HomogeneousMagnitude;
    var other_595: AntiScalar;

    self_667 = self_666;
    other_595 = other_594;
    let _e4: HomogeneousMagnitude = self_667;
    let _e7: AntiScalar = other_595;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_wedge(self_668: HomogeneousMagnitude, other_596: AntiScalar) -> AntiScalar {
    var self_669: HomogeneousMagnitude;
    var other_597: AntiScalar;

    self_669 = self_668;
    other_597 = other_596;
    let _e4: HomogeneousMagnitude = self_669;
    let _e7: AntiScalar = other_597;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_join(self_670: HomogeneousMagnitude, other_598: AntiScalar) -> AntiScalar {
    var self_671: HomogeneousMagnitude;
    var other_599: AntiScalar;

    self_671 = self_670;
    other_599 = other_598;
    let _e4: HomogeneousMagnitude = self_671;
    let _e7: AntiScalar = other_599;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_inner_product(self_672: HomogeneousMagnitude, other_600: AntiScalar) -> AntiScalar {
    var self_673: HomogeneousMagnitude;
    var other_601: AntiScalar;

    self_673 = self_672;
    other_601 = other_600;
    let _e4: HomogeneousMagnitude = self_673;
    let _e7: AntiScalar = other_601;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_inner_anti_product(self_674: HomogeneousMagnitude, other_602: AntiScalar) -> HomogeneousMagnitude {
    var self_675: HomogeneousMagnitude;
    var other_603: AntiScalar;

    self_675 = self_674;
    other_603 = other_602;
    let _e4: HomogeneousMagnitude = self_675;
    let _e6: AntiScalar = other_603;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_left_contraction(self_676: HomogeneousMagnitude, other_604: AntiScalar) -> AntiScalar {
    var self_677: HomogeneousMagnitude;
    var other_605: AntiScalar;

    self_677 = self_676;
    other_605 = other_604;
    let _e4: HomogeneousMagnitude = self_677;
    let _e7: AntiScalar = other_605;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_left_anti_contraction(self_678: HomogeneousMagnitude, other_606: AntiScalar) -> AntiScalar {
    var self_679: HomogeneousMagnitude;
    var other_607: AntiScalar;

    self_679 = self_678;
    other_607 = other_606;
    let _e4: HomogeneousMagnitude = self_679;
    let _e7: AntiScalar = other_607;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_right_anti_contraction(self_680: HomogeneousMagnitude, other_608: AntiScalar) -> HomogeneousMagnitude {
    var self_681: HomogeneousMagnitude;
    var other_609: AntiScalar;

    self_681 = self_680;
    other_609 = other_608;
    let _e4: HomogeneousMagnitude = self_681;
    let _e6: AntiScalar = other_609;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_anti_scalar_product(self_682: HomogeneousMagnitude, other_610: AntiScalar) -> AntiScalar {
    var self_683: HomogeneousMagnitude;
    var other_611: AntiScalar;

    self_683 = self_682;
    other_611 = other_610;
    let _e4: HomogeneousMagnitude = self_683;
    let _e7: AntiScalar = other_611;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_anti_dot(self_684: HomogeneousMagnitude, other_612: AntiScalar) -> AntiScalar {
    var self_685: HomogeneousMagnitude;
    var other_613: AntiScalar;

    self_685 = self_684;
    other_613 = other_612;
    let _e4: HomogeneousMagnitude = self_685;
    let _e7: AntiScalar = other_613;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_add(self_686: HomogeneousMagnitude, other_614: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_687: HomogeneousMagnitude;
    var other_615: HomogeneousMagnitude;

    self_687 = self_686;
    other_615 = other_614;
    let _e4: HomogeneousMagnitude = self_687;
    let _e6: HomogeneousMagnitude = other_615;
    return HomogeneousMagnitude((_e4.g0_ + _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_sub(self_688: HomogeneousMagnitude, other_616: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_689: HomogeneousMagnitude;
    var other_617: HomogeneousMagnitude;

    self_689 = self_688;
    other_617 = other_616;
    let _e4: HomogeneousMagnitude = self_689;
    let _e6: HomogeneousMagnitude = other_617;
    return HomogeneousMagnitude((_e4.g0_ - _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_mul(self_690: HomogeneousMagnitude, other_618: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_691: HomogeneousMagnitude;
    var other_619: HomogeneousMagnitude;

    self_691 = self_690;
    other_619 = other_618;
    let _e4: HomogeneousMagnitude = self_691;
    let _e6: HomogeneousMagnitude = other_619;
    return HomogeneousMagnitude((_e4.g0_ * _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_div(self_692: HomogeneousMagnitude, other_620: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_693: HomogeneousMagnitude;
    var other_621: HomogeneousMagnitude;

    self_693 = self_692;
    other_621 = other_620;
    let _e4: HomogeneousMagnitude = self_693;
    let _e7: HomogeneousMagnitude = self_693;
    let _e15: HomogeneousMagnitude = other_621;
    let _e18: HomogeneousMagnitude = other_621;
    return HomogeneousMagnitude((((vec2<f32>(_e4.g0_.x, _e7.g0_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e15.g0_.x, _e18.g0_.y)) * vec2<f32>(1.0, 1.0)));
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_product(self_694: HomogeneousMagnitude, other_622: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_695: HomogeneousMagnitude;
    var other_623: HomogeneousMagnitude;

    self_695 = self_694;
    other_623 = other_622;
    let _e4: HomogeneousMagnitude = self_695;
    let _e8: HomogeneousMagnitude = other_623;
    let _e11: HomogeneousMagnitude = self_695;
    let _e13: HomogeneousMagnitude = other_623;
    return HomogeneousMagnitude(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(self_696: HomogeneousMagnitude, other_624: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_697: HomogeneousMagnitude;
    var other_625: HomogeneousMagnitude;

    self_697 = self_696;
    other_625 = other_624;
    let _e4: HomogeneousMagnitude = self_697;
    let _e8: HomogeneousMagnitude = other_625;
    let _e11: HomogeneousMagnitude = self_697;
    let _e15: HomogeneousMagnitude = other_625;
    return HomogeneousMagnitude(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_regressive_product(self_698: HomogeneousMagnitude, other_626: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_699: HomogeneousMagnitude;
    var other_627: HomogeneousMagnitude;

    self_699 = self_698;
    other_627 = other_626;
    let _e4: HomogeneousMagnitude = self_699;
    let _e8: HomogeneousMagnitude = other_627;
    let _e11: HomogeneousMagnitude = self_699;
    let _e15: HomogeneousMagnitude = other_627;
    return HomogeneousMagnitude(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_wedge(self_700: HomogeneousMagnitude, other_628: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_701: HomogeneousMagnitude;
    var other_629: HomogeneousMagnitude;

    self_701 = self_700;
    other_629 = other_628;
    let _e4: HomogeneousMagnitude = self_701;
    let _e8: HomogeneousMagnitude = other_629;
    let _e11: HomogeneousMagnitude = self_701;
    let _e15: HomogeneousMagnitude = other_629;
    return HomogeneousMagnitude(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_meet(self_702: HomogeneousMagnitude, other_630: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_703: HomogeneousMagnitude;
    var other_631: HomogeneousMagnitude;

    self_703 = self_702;
    other_631 = other_630;
    let _e4: HomogeneousMagnitude = self_703;
    let _e8: HomogeneousMagnitude = other_631;
    let _e11: HomogeneousMagnitude = self_703;
    let _e15: HomogeneousMagnitude = other_631;
    return HomogeneousMagnitude(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_outer_product(self_704: HomogeneousMagnitude, other_632: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_705: HomogeneousMagnitude;
    var other_633: HomogeneousMagnitude;

    self_705 = self_704;
    other_633 = other_632;
    let _e4: HomogeneousMagnitude = self_705;
    let _e8: HomogeneousMagnitude = other_633;
    let _e11: HomogeneousMagnitude = self_705;
    let _e13: HomogeneousMagnitude = other_633;
    return HomogeneousMagnitude(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_wedge(self_706: HomogeneousMagnitude, other_634: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_707: HomogeneousMagnitude;
    var other_635: HomogeneousMagnitude;

    self_707 = self_706;
    other_635 = other_634;
    let _e4: HomogeneousMagnitude = self_707;
    let _e8: HomogeneousMagnitude = other_635;
    let _e11: HomogeneousMagnitude = self_707;
    let _e13: HomogeneousMagnitude = other_635;
    return HomogeneousMagnitude(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_join(self_708: HomogeneousMagnitude, other_636: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_709: HomogeneousMagnitude;
    var other_637: HomogeneousMagnitude;

    self_709 = self_708;
    other_637 = other_636;
    let _e4: HomogeneousMagnitude = self_709;
    let _e8: HomogeneousMagnitude = other_637;
    let _e11: HomogeneousMagnitude = self_709;
    let _e13: HomogeneousMagnitude = other_637;
    return HomogeneousMagnitude(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_inner_product(self_710: HomogeneousMagnitude, other_638: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_711: HomogeneousMagnitude;
    var other_639: HomogeneousMagnitude;

    self_711 = self_710;
    other_639 = other_638;
    let _e4: HomogeneousMagnitude = self_711;
    let _e8: HomogeneousMagnitude = other_639;
    let _e11: HomogeneousMagnitude = self_711;
    let _e13: HomogeneousMagnitude = other_639;
    return HomogeneousMagnitude(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_inner_anti_product(self_712: HomogeneousMagnitude, other_640: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_713: HomogeneousMagnitude;
    var other_641: HomogeneousMagnitude;

    self_713 = self_712;
    other_641 = other_640;
    let _e4: HomogeneousMagnitude = self_713;
    let _e8: HomogeneousMagnitude = other_641;
    let _e11: HomogeneousMagnitude = self_713;
    let _e15: HomogeneousMagnitude = other_641;
    return HomogeneousMagnitude(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_left_contraction(self_714: HomogeneousMagnitude, other_642: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_715: HomogeneousMagnitude;
    var other_643: HomogeneousMagnitude;

    self_715 = self_714;
    other_643 = other_642;
    let _e4: HomogeneousMagnitude = self_715;
    let _e8: HomogeneousMagnitude = other_643;
    return HomogeneousMagnitude((vec2(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_right_contraction(self_716: HomogeneousMagnitude, other_644: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_717: HomogeneousMagnitude;
    var other_645: HomogeneousMagnitude;

    self_717 = self_716;
    other_645 = other_644;
    let _e4: HomogeneousMagnitude = self_717;
    let _e6: HomogeneousMagnitude = other_645;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_.x)));
}

fn homogeneous_magnitude_homogeneous_magnitude_left_anti_contraction(self_718: HomogeneousMagnitude, other_646: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_719: HomogeneousMagnitude;
    var other_647: HomogeneousMagnitude;

    self_719 = self_718;
    other_647 = other_646;
    let _e4: HomogeneousMagnitude = self_719;
    let _e8: HomogeneousMagnitude = other_647;
    return HomogeneousMagnitude((vec2(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_right_anti_contraction(self_720: HomogeneousMagnitude, other_648: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_721: HomogeneousMagnitude;
    var other_649: HomogeneousMagnitude;

    self_721 = self_720;
    other_649 = other_648;
    let _e4: HomogeneousMagnitude = self_721;
    let _e6: HomogeneousMagnitude = other_649;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_.y)));
}

fn homogeneous_magnitude_homogeneous_magnitude_scalar_product(self_722: HomogeneousMagnitude, other_650: HomogeneousMagnitude) -> Scalar {
    var self_723: HomogeneousMagnitude;
    var other_651: HomogeneousMagnitude;

    self_723 = self_722;
    other_651 = other_650;
    let _e4: HomogeneousMagnitude = self_723;
    let _e7: HomogeneousMagnitude = other_651;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_homogeneous_magnitude_dot(self_724: HomogeneousMagnitude, other_652: HomogeneousMagnitude) -> Scalar {
    var self_725: HomogeneousMagnitude;
    var other_653: HomogeneousMagnitude;

    self_725 = self_724;
    other_653 = other_652;
    let _e4: HomogeneousMagnitude = self_725;
    let _e7: HomogeneousMagnitude = other_653;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_scalar_product(self_726: HomogeneousMagnitude, other_654: HomogeneousMagnitude) -> AntiScalar {
    var self_727: HomogeneousMagnitude;
    var other_655: HomogeneousMagnitude;

    self_727 = self_726;
    other_655 = other_654;
    let _e4: HomogeneousMagnitude = self_727;
    let _e7: HomogeneousMagnitude = other_655;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_dot(self_728: HomogeneousMagnitude, other_656: HomogeneousMagnitude) -> AntiScalar {
    var self_729: HomogeneousMagnitude;
    var other_657: HomogeneousMagnitude;

    self_729 = self_728;
    other_657 = other_656;
    let _e4: HomogeneousMagnitude = self_729;
    let _e7: HomogeneousMagnitude = other_657;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_point_geometric_product(self_730: HomogeneousMagnitude, other_658: Point) -> Flector {
    var self_731: HomogeneousMagnitude;
    var other_659: Point;

    self_731 = self_730;
    other_659 = other_658;
    let _e4: HomogeneousMagnitude = self_731;
    let _e8: Point = other_659;
    let _e11: HomogeneousMagnitude = self_731;
    let _e14: HomogeneousMagnitude = self_731;
    let _e17: HomogeneousMagnitude = self_731;
    let _e20: HomogeneousMagnitude = self_731;
    let _e24: Point = other_659;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * _e24.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn homogeneous_magnitude_point_geometric_anti_product(self_732: HomogeneousMagnitude, other_660: Point) -> Flector {
    var self_733: HomogeneousMagnitude;
    var other_661: Point;

    self_733 = self_732;
    other_661 = other_660;
    let _e4: HomogeneousMagnitude = self_733;
    let _e8: Point = other_661;
    let _e11: HomogeneousMagnitude = self_733;
    let _e15: Point = other_661;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), ((vec4(_e11.g0_.x) * _e15.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn homogeneous_magnitude_point_regressive_product(self_734: HomogeneousMagnitude, other_662: Point) -> Point {
    var self_735: HomogeneousMagnitude;
    var other_663: Point;

    self_735 = self_734;
    other_663 = other_662;
    let _e4: HomogeneousMagnitude = self_735;
    let _e8: Point = other_663;
    return Point((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_anti_wedge(self_736: HomogeneousMagnitude, other_664: Point) -> Point {
    var self_737: HomogeneousMagnitude;
    var other_665: Point;

    self_737 = self_736;
    other_665 = other_664;
    let _e4: HomogeneousMagnitude = self_737;
    let _e8: Point = other_665;
    return Point((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_meet(self_738: HomogeneousMagnitude, other_666: Point) -> Point {
    var self_739: HomogeneousMagnitude;
    var other_667: Point;

    self_739 = self_738;
    other_667 = other_666;
    let _e4: HomogeneousMagnitude = self_739;
    let _e8: Point = other_667;
    return Point((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_outer_product(self_740: HomogeneousMagnitude, other_668: Point) -> Point {
    var self_741: HomogeneousMagnitude;
    var other_669: Point;

    self_741 = self_740;
    other_669 = other_668;
    let _e4: HomogeneousMagnitude = self_741;
    let _e8: Point = other_669;
    return Point((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_wedge(self_742: HomogeneousMagnitude, other_670: Point) -> Point {
    var self_743: HomogeneousMagnitude;
    var other_671: Point;

    self_743 = self_742;
    other_671 = other_670;
    let _e4: HomogeneousMagnitude = self_743;
    let _e8: Point = other_671;
    return Point((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_join(self_744: HomogeneousMagnitude, other_672: Point) -> Point {
    var self_745: HomogeneousMagnitude;
    var other_673: Point;

    self_745 = self_744;
    other_673 = other_672;
    let _e4: HomogeneousMagnitude = self_745;
    let _e8: Point = other_673;
    return Point((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_inner_product(self_746: HomogeneousMagnitude, other_674: Point) -> Flector {
    var self_747: HomogeneousMagnitude;
    var other_675: Point;

    self_747 = self_746;
    other_675 = other_674;
    let _e4: HomogeneousMagnitude = self_747;
    let _e8: Point = other_675;
    let _e11: HomogeneousMagnitude = self_747;
    let _e14: HomogeneousMagnitude = self_747;
    let _e17: HomogeneousMagnitude = self_747;
    let _e20: HomogeneousMagnitude = self_747;
    let _e24: Point = other_675;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * _e24.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn homogeneous_magnitude_point_inner_anti_product(self_748: HomogeneousMagnitude, other_676: Point) -> Flector {
    var self_749: HomogeneousMagnitude;
    var other_677: Point;

    self_749 = self_748;
    other_677 = other_676;
    let _e4: HomogeneousMagnitude = self_749;
    let _e8: Point = other_677;
    let _e11: HomogeneousMagnitude = self_749;
    let _e15: Point = other_677;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), ((vec4(_e11.g0_.x) * _e15.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn homogeneous_magnitude_point_left_contraction(self_750: HomogeneousMagnitude, other_678: Point) -> Point {
    var self_751: HomogeneousMagnitude;
    var other_679: Point;

    self_751 = self_750;
    other_679 = other_678;
    let _e4: HomogeneousMagnitude = self_751;
    let _e8: Point = other_679;
    return Point((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_right_contraction(self_752: HomogeneousMagnitude, other_680: Point) -> Plane {
    var self_753: HomogeneousMagnitude;
    var other_681: Point;

    self_753 = self_752;
    other_681 = other_680;
    let _e4: HomogeneousMagnitude = self_753;
    let _e7: HomogeneousMagnitude = self_753;
    let _e10: HomogeneousMagnitude = self_753;
    let _e13: HomogeneousMagnitude = self_753;
    let _e17: Point = other_681;
    return Plane(((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn homogeneous_magnitude_point_left_anti_contraction(self_754: HomogeneousMagnitude, other_682: Point) -> Point {
    var self_755: HomogeneousMagnitude;
    var other_683: Point;

    self_755 = self_754;
    other_683 = other_682;
    let _e4: HomogeneousMagnitude = self_755;
    let _e8: Point = other_683;
    return Point((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_right_anti_contraction(self_756: HomogeneousMagnitude, other_684: Point) -> Plane {
    var self_757: HomogeneousMagnitude;
    var other_685: Point;

    self_757 = self_756;
    other_685 = other_684;
    let _e4: HomogeneousMagnitude = self_757;
    let _e8: Point = other_685;
    return Plane(((vec4(_e4.g0_.x) * _e8.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn homogeneous_magnitude_line_geometric_product(self_758: HomogeneousMagnitude, other_686: Line) -> Line {
    var self_759: HomogeneousMagnitude;
    var other_687: Line;

    self_759 = self_758;
    other_687 = other_686;
    let _e4: HomogeneousMagnitude = self_759;
    let _e8: Line = other_687;
    let _e11: HomogeneousMagnitude = self_759;
    let _e15: Line = other_687;
    let _e19: HomogeneousMagnitude = self_759;
    let _e23: Line = other_687;
    return Line(((vec3(_e4.g0_.x) * _e8.g0_) + (vec3(_e11.g0_.y) * _e15.g1_)), (vec3(_e19.g0_.x) * _e23.g1_));
}

fn homogeneous_magnitude_line_geometric_anti_product(self_760: HomogeneousMagnitude, other_688: Line) -> Line {
    var self_761: HomogeneousMagnitude;
    var other_689: Line;

    self_761 = self_760;
    other_689 = other_688;
    let _e4: HomogeneousMagnitude = self_761;
    let _e8: Line = other_689;
    let _e11: HomogeneousMagnitude = self_761;
    let _e15: Line = other_689;
    let _e18: HomogeneousMagnitude = self_761;
    let _e22: Line = other_689;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), ((vec3(_e11.g0_.x) * _e15.g0_) + (vec3(_e18.g0_.y) * _e22.g1_)));
}

fn homogeneous_magnitude_line_regressive_product(self_762: HomogeneousMagnitude, other_690: Line) -> Line {
    var self_763: HomogeneousMagnitude;
    var other_691: Line;

    self_763 = self_762;
    other_691 = other_690;
    let _e4: HomogeneousMagnitude = self_763;
    let _e8: Line = other_691;
    let _e11: HomogeneousMagnitude = self_763;
    let _e15: Line = other_691;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), (vec3(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_anti_wedge(self_764: HomogeneousMagnitude, other_692: Line) -> Line {
    var self_765: HomogeneousMagnitude;
    var other_693: Line;

    self_765 = self_764;
    other_693 = other_692;
    let _e4: HomogeneousMagnitude = self_765;
    let _e8: Line = other_693;
    let _e11: HomogeneousMagnitude = self_765;
    let _e15: Line = other_693;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), (vec3(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_meet(self_766: HomogeneousMagnitude, other_694: Line) -> Line {
    var self_767: HomogeneousMagnitude;
    var other_695: Line;

    self_767 = self_766;
    other_695 = other_694;
    let _e4: HomogeneousMagnitude = self_767;
    let _e8: Line = other_695;
    let _e11: HomogeneousMagnitude = self_767;
    let _e15: Line = other_695;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), (vec3(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_outer_product(self_768: HomogeneousMagnitude, other_696: Line) -> Line {
    var self_769: HomogeneousMagnitude;
    var other_697: Line;

    self_769 = self_768;
    other_697 = other_696;
    let _e4: HomogeneousMagnitude = self_769;
    let _e8: Line = other_697;
    let _e11: HomogeneousMagnitude = self_769;
    let _e15: Line = other_697;
    return Line((vec3(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_wedge(self_770: HomogeneousMagnitude, other_698: Line) -> Line {
    var self_771: HomogeneousMagnitude;
    var other_699: Line;

    self_771 = self_770;
    other_699 = other_698;
    let _e4: HomogeneousMagnitude = self_771;
    let _e8: Line = other_699;
    let _e11: HomogeneousMagnitude = self_771;
    let _e15: Line = other_699;
    return Line((vec3(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_join(self_772: HomogeneousMagnitude, other_700: Line) -> Line {
    var self_773: HomogeneousMagnitude;
    var other_701: Line;

    self_773 = self_772;
    other_701 = other_700;
    let _e4: HomogeneousMagnitude = self_773;
    let _e8: Line = other_701;
    let _e11: HomogeneousMagnitude = self_773;
    let _e15: Line = other_701;
    return Line((vec3(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_inner_product(self_774: HomogeneousMagnitude, other_702: Line) -> Line {
    var self_775: HomogeneousMagnitude;
    var other_703: Line;

    self_775 = self_774;
    other_703 = other_702;
    let _e4: HomogeneousMagnitude = self_775;
    let _e8: Line = other_703;
    let _e11: HomogeneousMagnitude = self_775;
    let _e15: Line = other_703;
    let _e19: HomogeneousMagnitude = self_775;
    let _e23: Line = other_703;
    return Line(((vec3(_e4.g0_.x) * _e8.g0_) + (vec3(_e11.g0_.y) * _e15.g1_)), (vec3(_e19.g0_.x) * _e23.g1_));
}

fn homogeneous_magnitude_line_inner_anti_product(self_776: HomogeneousMagnitude, other_704: Line) -> Line {
    var self_777: HomogeneousMagnitude;
    var other_705: Line;

    self_777 = self_776;
    other_705 = other_704;
    let _e4: HomogeneousMagnitude = self_777;
    let _e8: Line = other_705;
    let _e11: HomogeneousMagnitude = self_777;
    let _e15: Line = other_705;
    let _e18: HomogeneousMagnitude = self_777;
    let _e22: Line = other_705;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), ((vec3(_e11.g0_.x) * _e15.g0_) + (vec3(_e18.g0_.y) * _e22.g1_)));
}

fn homogeneous_magnitude_line_left_contraction(self_778: HomogeneousMagnitude, other_706: Line) -> Line {
    var self_779: HomogeneousMagnitude;
    var other_707: Line;

    self_779 = self_778;
    other_707 = other_706;
    let _e4: HomogeneousMagnitude = self_779;
    let _e8: Line = other_707;
    let _e11: HomogeneousMagnitude = self_779;
    let _e15: Line = other_707;
    return Line((vec3(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_right_contraction(self_780: HomogeneousMagnitude, other_708: Line) -> Rotor {
    var self_781: HomogeneousMagnitude;
    var other_709: Line;

    self_781 = self_780;
    other_709 = other_708;
    let _e4: HomogeneousMagnitude = self_781;
    let _e7: HomogeneousMagnitude = self_781;
    let _e10: HomogeneousMagnitude = self_781;
    let _e13: HomogeneousMagnitude = self_781;
    let _e17: Line = other_709;
    let _e20: Line = other_709;
    let _e23: Line = other_709;
    let _e26: Line = other_709;
    return Rotor(((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * vec4<f32>(_e17.g1_.x, _e20.g1_.y, _e23.g1_.z, _e26.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn homogeneous_magnitude_line_left_anti_contraction(self_782: HomogeneousMagnitude, other_710: Line) -> Line {
    var self_783: HomogeneousMagnitude;
    var other_711: Line;

    self_783 = self_782;
    other_711 = other_710;
    let _e4: HomogeneousMagnitude = self_783;
    let _e8: Line = other_711;
    let _e11: HomogeneousMagnitude = self_783;
    let _e15: Line = other_711;
    return Line((vec3(_e4.g0_.y) * _e8.g0_), (vec3(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_right_anti_contraction(self_784: HomogeneousMagnitude, other_712: Line) -> Translator {
    var self_785: HomogeneousMagnitude;
    var other_713: Line;

    self_785 = self_784;
    other_713 = other_712;
    let _e4: HomogeneousMagnitude = self_785;
    let _e8: Line = other_713;
    let _e11: Line = other_713;
    let _e14: Line = other_713;
    let _e17: Line = other_713;
    return Translator(((vec4(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn homogeneous_magnitude_plane_geometric_product(self_786: HomogeneousMagnitude, other_714: Plane) -> Flector {
    var self_787: HomogeneousMagnitude;
    var other_715: Plane;

    self_787 = self_786;
    other_715 = other_714;
    let _e4: HomogeneousMagnitude = self_787;
    let _e7: HomogeneousMagnitude = self_787;
    let _e10: HomogeneousMagnitude = self_787;
    let _e13: HomogeneousMagnitude = self_787;
    let _e17: Plane = other_715;
    let _e27: HomogeneousMagnitude = self_787;
    let _e31: Plane = other_715;
    return Flector(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.x, _e13.g0_.y) * _e17.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec4(_e27.g0_.x) * _e31.g0_));
}

fn homogeneous_magnitude_plane_geometric_anti_product(self_788: HomogeneousMagnitude, other_716: Plane) -> Flector {
    var self_789: HomogeneousMagnitude;
    var other_717: Plane;

    self_789 = self_788;
    other_717 = other_716;
    let _e4: HomogeneousMagnitude = self_789;
    let _e8: Plane = other_717;
    let _e18: HomogeneousMagnitude = self_789;
    let _e22: Plane = other_717;
    return Flector(((vec4(_e4.g0_.x) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), (vec4(_e18.g0_.y) * _e22.g0_));
}

fn homogeneous_magnitude_plane_regressive_product(self_790: HomogeneousMagnitude, other_718: Plane) -> Plane {
    var self_791: HomogeneousMagnitude;
    var other_719: Plane;

    self_791 = self_790;
    other_719 = other_718;
    let _e4: HomogeneousMagnitude = self_791;
    let _e8: Plane = other_719;
    return Plane((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_anti_wedge(self_792: HomogeneousMagnitude, other_720: Plane) -> Plane {
    var self_793: HomogeneousMagnitude;
    var other_721: Plane;

    self_793 = self_792;
    other_721 = other_720;
    let _e4: HomogeneousMagnitude = self_793;
    let _e8: Plane = other_721;
    return Plane((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_meet(self_794: HomogeneousMagnitude, other_722: Plane) -> Plane {
    var self_795: HomogeneousMagnitude;
    var other_723: Plane;

    self_795 = self_794;
    other_723 = other_722;
    let _e4: HomogeneousMagnitude = self_795;
    let _e8: Plane = other_723;
    return Plane((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_outer_product(self_796: HomogeneousMagnitude, other_724: Plane) -> Plane {
    var self_797: HomogeneousMagnitude;
    var other_725: Plane;

    self_797 = self_796;
    other_725 = other_724;
    let _e4: HomogeneousMagnitude = self_797;
    let _e8: Plane = other_725;
    return Plane((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_wedge(self_798: HomogeneousMagnitude, other_726: Plane) -> Plane {
    var self_799: HomogeneousMagnitude;
    var other_727: Plane;

    self_799 = self_798;
    other_727 = other_726;
    let _e4: HomogeneousMagnitude = self_799;
    let _e8: Plane = other_727;
    return Plane((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_join(self_800: HomogeneousMagnitude, other_728: Plane) -> Plane {
    var self_801: HomogeneousMagnitude;
    var other_729: Plane;

    self_801 = self_800;
    other_729 = other_728;
    let _e4: HomogeneousMagnitude = self_801;
    let _e8: Plane = other_729;
    return Plane((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_inner_product(self_802: HomogeneousMagnitude, other_730: Plane) -> Flector {
    var self_803: HomogeneousMagnitude;
    var other_731: Plane;

    self_803 = self_802;
    other_731 = other_730;
    let _e4: HomogeneousMagnitude = self_803;
    let _e7: HomogeneousMagnitude = self_803;
    let _e10: HomogeneousMagnitude = self_803;
    let _e13: HomogeneousMagnitude = self_803;
    let _e17: Plane = other_731;
    let _e27: HomogeneousMagnitude = self_803;
    let _e31: Plane = other_731;
    return Flector(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.x, _e13.g0_.y) * _e17.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec4(_e27.g0_.x) * _e31.g0_));
}

fn homogeneous_magnitude_plane_inner_anti_product(self_804: HomogeneousMagnitude, other_732: Plane) -> Flector {
    var self_805: HomogeneousMagnitude;
    var other_733: Plane;

    self_805 = self_804;
    other_733 = other_732;
    let _e4: HomogeneousMagnitude = self_805;
    let _e8: Plane = other_733;
    let _e18: HomogeneousMagnitude = self_805;
    let _e22: Plane = other_733;
    return Flector(((vec4(_e4.g0_.x) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), (vec4(_e18.g0_.y) * _e22.g0_));
}

fn homogeneous_magnitude_plane_left_contraction(self_806: HomogeneousMagnitude, other_734: Plane) -> Plane {
    var self_807: HomogeneousMagnitude;
    var other_735: Plane;

    self_807 = self_806;
    other_735 = other_734;
    let _e4: HomogeneousMagnitude = self_807;
    let _e8: Plane = other_735;
    return Plane((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_right_contraction(self_808: HomogeneousMagnitude, other_736: Plane) -> Point {
    var self_809: HomogeneousMagnitude;
    var other_737: Plane;

    self_809 = self_808;
    other_737 = other_736;
    let _e4: HomogeneousMagnitude = self_809;
    let _e7: HomogeneousMagnitude = self_809;
    let _e10: HomogeneousMagnitude = self_809;
    let _e13: HomogeneousMagnitude = self_809;
    let _e17: Plane = other_737;
    return Point(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.x, _e13.g0_.y) * _e17.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn homogeneous_magnitude_plane_left_anti_contraction(self_810: HomogeneousMagnitude, other_738: Plane) -> Plane {
    var self_811: HomogeneousMagnitude;
    var other_739: Plane;

    self_811 = self_810;
    other_739 = other_738;
    let _e4: HomogeneousMagnitude = self_811;
    let _e8: Plane = other_739;
    return Plane((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_right_anti_contraction(self_812: HomogeneousMagnitude, other_740: Plane) -> Point {
    var self_813: HomogeneousMagnitude;
    var other_741: Plane;

    self_813 = self_812;
    other_741 = other_740;
    let _e4: HomogeneousMagnitude = self_813;
    let _e8: Plane = other_741;
    return Point(((vec4(_e4.g0_.x) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn homogeneous_magnitude_motor_geometric_product(self_814: HomogeneousMagnitude, other_742: Motor) -> Motor {
    var self_815: HomogeneousMagnitude;
    var other_743: Motor;

    self_815 = self_814;
    other_743 = other_742;
    let _e4: HomogeneousMagnitude = self_815;
    let _e8: Motor = other_743;
    let _e11: HomogeneousMagnitude = self_815;
    let _e14: HomogeneousMagnitude = self_815;
    let _e17: HomogeneousMagnitude = self_815;
    let _e20: HomogeneousMagnitude = self_815;
    let _e24: Motor = other_743;
    let _e27: Motor = other_743;
    let _e30: Motor = other_743;
    let _e33: Motor = other_743;
    let _e45: HomogeneousMagnitude = self_815;
    let _e49: Motor = other_743;
    return Motor(((vec4(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * vec4<f32>(_e24.g1_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(_e45.g0_.x) * _e49.g1_));
}

fn homogeneous_magnitude_motor_geometric_anti_product(self_816: HomogeneousMagnitude, other_744: Motor) -> MultiVector {
    var self_817: HomogeneousMagnitude;
    var other_745: Motor;

    self_817 = self_816;
    other_745 = other_744;
    let _e4: HomogeneousMagnitude = self_817;
    let _e6: Motor = other_745;
    let _e13: HomogeneousMagnitude = self_817;
    let _e17: Motor = other_745;
    let _e20: Motor = other_745;
    let _e23: Motor = other_745;
    let _e28: HomogeneousMagnitude = self_817;
    let _e32: Motor = other_745;
    let _e35: Motor = other_745;
    let _e38: Motor = other_745;
    let _e43: HomogeneousMagnitude = self_817;
    let _e47: Motor = other_745;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), ((vec3(_e28.g0_.x) * vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z)) + (vec3(_e43.g0_.y) * _e47.g1_)), vec4(0.0));
}

fn homogeneous_magnitude_motor_regressive_product(self_818: HomogeneousMagnitude, other_746: Motor) -> MultiVector {
    var self_819: HomogeneousMagnitude;
    var other_747: Motor;

    self_819 = self_818;
    other_747 = other_746;
    let _e4: HomogeneousMagnitude = self_819;
    let _e6: Motor = other_747;
    let _e13: HomogeneousMagnitude = self_819;
    let _e17: Motor = other_747;
    let _e20: Motor = other_747;
    let _e23: Motor = other_747;
    let _e28: HomogeneousMagnitude = self_819;
    let _e32: Motor = other_747;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), (vec3(_e28.g0_.y) * _e32.g1_), vec4(0.0));
}

fn homogeneous_magnitude_motor_anti_wedge(self_820: HomogeneousMagnitude, other_748: Motor) -> MultiVector {
    var self_821: HomogeneousMagnitude;
    var other_749: Motor;

    self_821 = self_820;
    other_749 = other_748;
    let _e4: HomogeneousMagnitude = self_821;
    let _e6: Motor = other_749;
    let _e13: HomogeneousMagnitude = self_821;
    let _e17: Motor = other_749;
    let _e20: Motor = other_749;
    let _e23: Motor = other_749;
    let _e28: HomogeneousMagnitude = self_821;
    let _e32: Motor = other_749;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), (vec3(_e28.g0_.y) * _e32.g1_), vec4(0.0));
}

fn homogeneous_magnitude_motor_meet(self_822: HomogeneousMagnitude, other_750: Motor) -> MultiVector {
    var self_823: HomogeneousMagnitude;
    var other_751: Motor;

    self_823 = self_822;
    other_751 = other_750;
    let _e4: HomogeneousMagnitude = self_823;
    let _e6: Motor = other_751;
    let _e13: HomogeneousMagnitude = self_823;
    let _e17: Motor = other_751;
    let _e20: Motor = other_751;
    let _e23: Motor = other_751;
    let _e28: HomogeneousMagnitude = self_823;
    let _e32: Motor = other_751;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), (vec3(_e28.g0_.y) * _e32.g1_), vec4(0.0));
}

fn homogeneous_magnitude_motor_outer_product(self_824: HomogeneousMagnitude, other_752: Motor) -> Motor {
    var self_825: HomogeneousMagnitude;
    var other_753: Motor;

    self_825 = self_824;
    other_753 = other_752;
    let _e4: HomogeneousMagnitude = self_825;
    let _e8: Motor = other_753;
    let _e11: HomogeneousMagnitude = self_825;
    let _e15: Motor = other_753;
    return Motor((vec4(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_wedge(self_826: HomogeneousMagnitude, other_754: Motor) -> Motor {
    var self_827: HomogeneousMagnitude;
    var other_755: Motor;

    self_827 = self_826;
    other_755 = other_754;
    let _e4: HomogeneousMagnitude = self_827;
    let _e8: Motor = other_755;
    let _e11: HomogeneousMagnitude = self_827;
    let _e15: Motor = other_755;
    return Motor((vec4(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_join(self_828: HomogeneousMagnitude, other_756: Motor) -> Motor {
    var self_829: HomogeneousMagnitude;
    var other_757: Motor;

    self_829 = self_828;
    other_757 = other_756;
    let _e4: HomogeneousMagnitude = self_829;
    let _e8: Motor = other_757;
    let _e11: HomogeneousMagnitude = self_829;
    let _e15: Motor = other_757;
    return Motor((vec4(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_inner_product(self_830: HomogeneousMagnitude, other_758: Motor) -> Motor {
    var self_831: HomogeneousMagnitude;
    var other_759: Motor;

    self_831 = self_830;
    other_759 = other_758;
    let _e4: HomogeneousMagnitude = self_831;
    let _e8: Motor = other_759;
    let _e11: HomogeneousMagnitude = self_831;
    let _e14: HomogeneousMagnitude = self_831;
    let _e17: HomogeneousMagnitude = self_831;
    let _e20: HomogeneousMagnitude = self_831;
    let _e24: Motor = other_759;
    let _e27: Motor = other_759;
    let _e30: Motor = other_759;
    let _e33: Motor = other_759;
    let _e45: HomogeneousMagnitude = self_831;
    let _e49: Motor = other_759;
    return Motor(((vec4(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * vec4<f32>(_e24.g1_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(_e45.g0_.x) * _e49.g1_));
}

fn homogeneous_magnitude_motor_inner_anti_product(self_832: HomogeneousMagnitude, other_760: Motor) -> MultiVector {
    var self_833: HomogeneousMagnitude;
    var other_761: Motor;

    self_833 = self_832;
    other_761 = other_760;
    let _e4: HomogeneousMagnitude = self_833;
    let _e6: Motor = other_761;
    let _e13: HomogeneousMagnitude = self_833;
    let _e17: Motor = other_761;
    let _e20: Motor = other_761;
    let _e23: Motor = other_761;
    let _e28: HomogeneousMagnitude = self_833;
    let _e32: Motor = other_761;
    let _e35: Motor = other_761;
    let _e38: Motor = other_761;
    let _e43: HomogeneousMagnitude = self_833;
    let _e47: Motor = other_761;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), ((vec3(_e28.g0_.x) * vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z)) + (vec3(_e43.g0_.y) * _e47.g1_)), vec4(0.0));
}

fn homogeneous_magnitude_motor_left_contraction(self_834: HomogeneousMagnitude, other_762: Motor) -> Motor {
    var self_835: HomogeneousMagnitude;
    var other_763: Motor;

    self_835 = self_834;
    other_763 = other_762;
    let _e4: HomogeneousMagnitude = self_835;
    let _e8: Motor = other_763;
    let _e11: HomogeneousMagnitude = self_835;
    let _e15: Motor = other_763;
    return Motor((vec4(_e4.g0_.x) * _e8.g0_), (vec3(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_right_contraction(self_836: HomogeneousMagnitude, other_764: Motor) -> Rotor {
    var self_837: HomogeneousMagnitude;
    var other_765: Motor;

    self_837 = self_836;
    other_765 = other_764;
    let _e4: HomogeneousMagnitude = self_837;
    let _e7: HomogeneousMagnitude = self_837;
    let _e10: HomogeneousMagnitude = self_837;
    let _e13: HomogeneousMagnitude = self_837;
    let _e17: Motor = other_765;
    let _e20: Motor = other_765;
    let _e23: Motor = other_765;
    let _e26: Motor = other_765;
    return Rotor(((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * vec4<f32>(_e17.g1_.x, _e20.g1_.y, _e23.g1_.z, _e26.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn homogeneous_magnitude_motor_left_anti_contraction(self_838: HomogeneousMagnitude, other_766: Motor) -> Motor {
    var self_839: HomogeneousMagnitude;
    var other_767: Motor;

    self_839 = self_838;
    other_767 = other_766;
    let _e4: HomogeneousMagnitude = self_839;
    let _e8: Motor = other_767;
    let _e11: HomogeneousMagnitude = self_839;
    let _e15: Motor = other_767;
    return Motor((vec4(_e4.g0_.y) * _e8.g0_), (vec3(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_motor_right_anti_contraction(self_840: HomogeneousMagnitude, other_768: Motor) -> MultiVector {
    var self_841: HomogeneousMagnitude;
    var other_769: Motor;

    self_841 = self_840;
    other_769 = other_768;
    let _e4: HomogeneousMagnitude = self_841;
    let _e6: Motor = other_769;
    let _e15: HomogeneousMagnitude = self_841;
    let _e19: Motor = other_769;
    let _e22: Motor = other_769;
    let _e25: Motor = other_769;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.x) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_motor_anti_scalar_product(self_842: HomogeneousMagnitude, other_770: Motor) -> AntiScalar {
    var self_843: HomogeneousMagnitude;
    var other_771: Motor;

    self_843 = self_842;
    other_771 = other_770;
    let _e4: HomogeneousMagnitude = self_843;
    let _e7: Motor = other_771;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_motor_anti_dot(self_844: HomogeneousMagnitude, other_772: Motor) -> AntiScalar {
    var self_845: HomogeneousMagnitude;
    var other_773: Motor;

    self_845 = self_844;
    other_773 = other_772;
    let _e4: HomogeneousMagnitude = self_845;
    let _e7: Motor = other_773;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_rotor_geometric_product(self_846: HomogeneousMagnitude, other_774: Rotor) -> Rotor {
    var self_847: HomogeneousMagnitude;
    var other_775: Rotor;

    self_847 = self_846;
    other_775 = other_774;
    let _e4: HomogeneousMagnitude = self_847;
    let _e8: Rotor = other_775;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_geometric_anti_product(self_848: HomogeneousMagnitude, other_776: Rotor) -> MultiVector {
    var self_849: HomogeneousMagnitude;
    var other_777: Rotor;

    self_849 = self_848;
    other_777 = other_776;
    let _e4: HomogeneousMagnitude = self_849;
    let _e6: Rotor = other_777;
    let _e13: HomogeneousMagnitude = self_849;
    let _e17: Rotor = other_777;
    let _e20: Rotor = other_777;
    let _e23: Rotor = other_777;
    let _e28: HomogeneousMagnitude = self_849;
    let _e32: Rotor = other_777;
    let _e35: Rotor = other_777;
    let _e38: Rotor = other_777;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), (vec3(_e28.g0_.x) * vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_rotor_regressive_product(self_850: HomogeneousMagnitude, other_778: Rotor) -> MultiVector {
    var self_851: HomogeneousMagnitude;
    var other_779: Rotor;

    self_851 = self_850;
    other_779 = other_778;
    let _e4: HomogeneousMagnitude = self_851;
    let _e6: Rotor = other_779;
    let _e13: HomogeneousMagnitude = self_851;
    let _e17: Rotor = other_779;
    let _e20: Rotor = other_779;
    let _e23: Rotor = other_779;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), vec3(0.0), vec4(0.0));
}

fn homogeneous_magnitude_rotor_anti_wedge(self_852: HomogeneousMagnitude, other_780: Rotor) -> MultiVector {
    var self_853: HomogeneousMagnitude;
    var other_781: Rotor;

    self_853 = self_852;
    other_781 = other_780;
    let _e4: HomogeneousMagnitude = self_853;
    let _e6: Rotor = other_781;
    let _e13: HomogeneousMagnitude = self_853;
    let _e17: Rotor = other_781;
    let _e20: Rotor = other_781;
    let _e23: Rotor = other_781;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), vec3(0.0), vec4(0.0));
}

fn homogeneous_magnitude_rotor_meet(self_854: HomogeneousMagnitude, other_782: Rotor) -> MultiVector {
    var self_855: HomogeneousMagnitude;
    var other_783: Rotor;

    self_855 = self_854;
    other_783 = other_782;
    let _e4: HomogeneousMagnitude = self_855;
    let _e6: Rotor = other_783;
    let _e13: HomogeneousMagnitude = self_855;
    let _e17: Rotor = other_783;
    let _e20: Rotor = other_783;
    let _e23: Rotor = other_783;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), vec3(0.0), vec4(0.0));
}

fn homogeneous_magnitude_rotor_outer_product(self_856: HomogeneousMagnitude, other_784: Rotor) -> Rotor {
    var self_857: HomogeneousMagnitude;
    var other_785: Rotor;

    self_857 = self_856;
    other_785 = other_784;
    let _e4: HomogeneousMagnitude = self_857;
    let _e8: Rotor = other_785;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_wedge(self_858: HomogeneousMagnitude, other_786: Rotor) -> Rotor {
    var self_859: HomogeneousMagnitude;
    var other_787: Rotor;

    self_859 = self_858;
    other_787 = other_786;
    let _e4: HomogeneousMagnitude = self_859;
    let _e8: Rotor = other_787;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_join(self_860: HomogeneousMagnitude, other_788: Rotor) -> Rotor {
    var self_861: HomogeneousMagnitude;
    var other_789: Rotor;

    self_861 = self_860;
    other_789 = other_788;
    let _e4: HomogeneousMagnitude = self_861;
    let _e8: Rotor = other_789;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_inner_product(self_862: HomogeneousMagnitude, other_790: Rotor) -> Rotor {
    var self_863: HomogeneousMagnitude;
    var other_791: Rotor;

    self_863 = self_862;
    other_791 = other_790;
    let _e4: HomogeneousMagnitude = self_863;
    let _e8: Rotor = other_791;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_inner_anti_product(self_864: HomogeneousMagnitude, other_792: Rotor) -> MultiVector {
    var self_865: HomogeneousMagnitude;
    var other_793: Rotor;

    self_865 = self_864;
    other_793 = other_792;
    let _e4: HomogeneousMagnitude = self_865;
    let _e6: Rotor = other_793;
    let _e13: HomogeneousMagnitude = self_865;
    let _e17: Rotor = other_793;
    let _e20: Rotor = other_793;
    let _e23: Rotor = other_793;
    let _e28: HomogeneousMagnitude = self_865;
    let _e32: Rotor = other_793;
    let _e35: Rotor = other_793;
    let _e38: Rotor = other_793;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), (vec3(_e13.g0_.y) * vec3<f32>(_e17.g0_.x, _e20.g0_.y, _e23.g0_.z)), (vec3(_e28.g0_.x) * vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_rotor_left_contraction(self_866: HomogeneousMagnitude, other_794: Rotor) -> Rotor {
    var self_867: HomogeneousMagnitude;
    var other_795: Rotor;

    self_867 = self_866;
    other_795 = other_794;
    let _e4: HomogeneousMagnitude = self_867;
    let _e8: Rotor = other_795;
    return Rotor((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_left_anti_contraction(self_868: HomogeneousMagnitude, other_796: Rotor) -> Rotor {
    var self_869: HomogeneousMagnitude;
    var other_797: Rotor;

    self_869 = self_868;
    other_797 = other_796;
    let _e4: HomogeneousMagnitude = self_869;
    let _e8: Rotor = other_797;
    return Rotor((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_right_anti_contraction(self_870: HomogeneousMagnitude, other_798: Rotor) -> MultiVector {
    var self_871: HomogeneousMagnitude;
    var other_799: Rotor;

    self_871 = self_870;
    other_799 = other_798;
    let _e4: HomogeneousMagnitude = self_871;
    let _e6: Rotor = other_799;
    let _e15: HomogeneousMagnitude = self_871;
    let _e19: Rotor = other_799;
    let _e22: Rotor = other_799;
    let _e25: Rotor = other_799;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.x) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_rotor_anti_scalar_product(self_872: HomogeneousMagnitude, other_800: Rotor) -> AntiScalar {
    var self_873: HomogeneousMagnitude;
    var other_801: Rotor;

    self_873 = self_872;
    other_801 = other_800;
    let _e4: HomogeneousMagnitude = self_873;
    let _e7: Rotor = other_801;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_rotor_anti_dot(self_874: HomogeneousMagnitude, other_802: Rotor) -> AntiScalar {
    var self_875: HomogeneousMagnitude;
    var other_803: Rotor;

    self_875 = self_874;
    other_803 = other_802;
    let _e4: HomogeneousMagnitude = self_875;
    let _e7: Rotor = other_803;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_translator_geometric_product(self_876: HomogeneousMagnitude, other_804: Translator) -> Motor {
    var self_877: HomogeneousMagnitude;
    var other_805: Translator;

    self_877 = self_876;
    other_805 = other_804;
    let _e4: HomogeneousMagnitude = self_877;
    let _e7: HomogeneousMagnitude = self_877;
    let _e10: HomogeneousMagnitude = self_877;
    let _e13: HomogeneousMagnitude = self_877;
    let _e17: Translator = other_805;
    let _e20: HomogeneousMagnitude = self_877;
    let _e24: Translator = other_805;
    let _e27: Translator = other_805;
    let _e30: Translator = other_805;
    return Motor((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_), (vec3(_e20.g0_.x) * vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)));
}

fn homogeneous_magnitude_translator_geometric_anti_product(self_878: HomogeneousMagnitude, other_806: Translator) -> MultiVector {
    var self_879: HomogeneousMagnitude;
    var other_807: Translator;

    self_879 = self_878;
    other_807 = other_806;
    let _e4: HomogeneousMagnitude = self_879;
    let _e6: Translator = other_807;
    let _e15: HomogeneousMagnitude = self_879;
    let _e19: Translator = other_807;
    let _e22: Translator = other_807;
    let _e25: Translator = other_807;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.y) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_translator_regressive_product(self_880: HomogeneousMagnitude, other_808: Translator) -> MultiVector {
    var self_881: HomogeneousMagnitude;
    var other_809: Translator;

    self_881 = self_880;
    other_809 = other_808;
    let _e4: HomogeneousMagnitude = self_881;
    let _e6: Translator = other_809;
    let _e15: HomogeneousMagnitude = self_881;
    let _e19: Translator = other_809;
    let _e22: Translator = other_809;
    let _e25: Translator = other_809;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.y) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_translator_anti_wedge(self_882: HomogeneousMagnitude, other_810: Translator) -> MultiVector {
    var self_883: HomogeneousMagnitude;
    var other_811: Translator;

    self_883 = self_882;
    other_811 = other_810;
    let _e4: HomogeneousMagnitude = self_883;
    let _e6: Translator = other_811;
    let _e15: HomogeneousMagnitude = self_883;
    let _e19: Translator = other_811;
    let _e22: Translator = other_811;
    let _e25: Translator = other_811;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.y) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_translator_meet(self_884: HomogeneousMagnitude, other_812: Translator) -> MultiVector {
    var self_885: HomogeneousMagnitude;
    var other_813: Translator;

    self_885 = self_884;
    other_813 = other_812;
    let _e4: HomogeneousMagnitude = self_885;
    let _e6: Translator = other_813;
    let _e15: HomogeneousMagnitude = self_885;
    let _e19: Translator = other_813;
    let _e22: Translator = other_813;
    let _e25: Translator = other_813;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.y) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_translator_outer_product(self_886: HomogeneousMagnitude, other_814: Translator) -> Translator {
    var self_887: HomogeneousMagnitude;
    var other_815: Translator;

    self_887 = self_886;
    other_815 = other_814;
    let _e4: HomogeneousMagnitude = self_887;
    let _e8: Translator = other_815;
    return Translator((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_wedge(self_888: HomogeneousMagnitude, other_816: Translator) -> Translator {
    var self_889: HomogeneousMagnitude;
    var other_817: Translator;

    self_889 = self_888;
    other_817 = other_816;
    let _e4: HomogeneousMagnitude = self_889;
    let _e8: Translator = other_817;
    return Translator((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_join(self_890: HomogeneousMagnitude, other_818: Translator) -> Translator {
    var self_891: HomogeneousMagnitude;
    var other_819: Translator;

    self_891 = self_890;
    other_819 = other_818;
    let _e4: HomogeneousMagnitude = self_891;
    let _e8: Translator = other_819;
    return Translator((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_inner_product(self_892: HomogeneousMagnitude, other_820: Translator) -> Motor {
    var self_893: HomogeneousMagnitude;
    var other_821: Translator;

    self_893 = self_892;
    other_821 = other_820;
    let _e4: HomogeneousMagnitude = self_893;
    let _e7: HomogeneousMagnitude = self_893;
    let _e10: HomogeneousMagnitude = self_893;
    let _e13: HomogeneousMagnitude = self_893;
    let _e17: Translator = other_821;
    let _e20: HomogeneousMagnitude = self_893;
    let _e24: Translator = other_821;
    let _e27: Translator = other_821;
    let _e30: Translator = other_821;
    return Motor((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_), (vec3(_e20.g0_.x) * vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)));
}

fn homogeneous_magnitude_translator_inner_anti_product(self_894: HomogeneousMagnitude, other_822: Translator) -> MultiVector {
    var self_895: HomogeneousMagnitude;
    var other_823: Translator;

    self_895 = self_894;
    other_823 = other_822;
    let _e4: HomogeneousMagnitude = self_895;
    let _e6: Translator = other_823;
    let _e15: HomogeneousMagnitude = self_895;
    let _e19: Translator = other_823;
    let _e22: Translator = other_823;
    let _e25: Translator = other_823;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), vec4(0.0), vec3(0.0), (vec3(_e15.g0_.y) * vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)), vec4(0.0));
}

fn homogeneous_magnitude_translator_left_contraction(self_896: HomogeneousMagnitude, other_824: Translator) -> Translator {
    var self_897: HomogeneousMagnitude;
    var other_825: Translator;

    self_897 = self_896;
    other_825 = other_824;
    let _e4: HomogeneousMagnitude = self_897;
    let _e8: Translator = other_825;
    return Translator((vec4(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_right_contraction(self_898: HomogeneousMagnitude, other_826: Translator) -> Rotor {
    var self_899: HomogeneousMagnitude;
    var other_827: Translator;

    self_899 = self_898;
    other_827 = other_826;
    let _e4: HomogeneousMagnitude = self_899;
    let _e7: HomogeneousMagnitude = self_899;
    let _e10: HomogeneousMagnitude = self_899;
    let _e13: HomogeneousMagnitude = self_899;
    let _e17: Translator = other_827;
    return Rotor(((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn homogeneous_magnitude_translator_left_anti_contraction(self_900: HomogeneousMagnitude, other_828: Translator) -> Translator {
    var self_901: HomogeneousMagnitude;
    var other_829: Translator;

    self_901 = self_900;
    other_829 = other_828;
    let _e4: HomogeneousMagnitude = self_901;
    let _e8: Translator = other_829;
    return Translator((vec4(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_translator_right_anti_contraction(self_902: HomogeneousMagnitude, other_830: Translator) -> HomogeneousMagnitude {
    var self_903: HomogeneousMagnitude;
    var other_831: Translator;

    self_903 = self_902;
    other_831 = other_830;
    let _e4: HomogeneousMagnitude = self_903;
    let _e6: Translator = other_831;
    return HomogeneousMagnitude((_e4.g0_ * vec2(_e6.g0_.w)));
}

fn homogeneous_magnitude_translator_anti_scalar_product(self_904: HomogeneousMagnitude, other_832: Translator) -> AntiScalar {
    var self_905: HomogeneousMagnitude;
    var other_833: Translator;

    self_905 = self_904;
    other_833 = other_832;
    let _e4: HomogeneousMagnitude = self_905;
    let _e7: Translator = other_833;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_translator_anti_dot(self_906: HomogeneousMagnitude, other_834: Translator) -> AntiScalar {
    var self_907: HomogeneousMagnitude;
    var other_835: Translator;

    self_907 = self_906;
    other_835 = other_834;
    let _e4: HomogeneousMagnitude = self_907;
    let _e7: Translator = other_835;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_flector_geometric_product(self_908: HomogeneousMagnitude, other_836: Flector) -> Flector {
    var self_909: HomogeneousMagnitude;
    var other_837: Flector;

    self_909 = self_908;
    other_837 = other_836;
    let _e4: HomogeneousMagnitude = self_909;
    let _e8: Flector = other_837;
    let _e11: HomogeneousMagnitude = self_909;
    let _e14: HomogeneousMagnitude = self_909;
    let _e17: HomogeneousMagnitude = self_909;
    let _e20: HomogeneousMagnitude = self_909;
    let _e24: Flector = other_837;
    let _e35: HomogeneousMagnitude = self_909;
    let _e39: Flector = other_837;
    let _e42: HomogeneousMagnitude = self_909;
    let _e45: HomogeneousMagnitude = self_909;
    let _e48: HomogeneousMagnitude = self_909;
    let _e51: HomogeneousMagnitude = self_909;
    let _e55: Flector = other_837;
    return Flector(((vec4(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x, _e14.g0_.x, _e17.g0_.x, _e20.g0_.y) * _e24.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec4(_e35.g0_.x) * _e39.g1_) + ((vec4<f32>(_e42.g0_.y, _e45.g0_.y, _e48.g0_.y, _e51.g0_.x) * _e55.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn homogeneous_magnitude_flector_geometric_anti_product(self_910: HomogeneousMagnitude, other_838: Flector) -> Flector {
    var self_911: HomogeneousMagnitude;
    var other_839: Flector;

    self_911 = self_910;
    other_839 = other_838;
    let _e4: HomogeneousMagnitude = self_911;
    let _e8: Flector = other_839;
    let _e11: HomogeneousMagnitude = self_911;
    let _e15: Flector = other_839;
    let _e26: HomogeneousMagnitude = self_911;
    let _e30: Flector = other_839;
    let _e33: HomogeneousMagnitude = self_911;
    let _e37: Flector = other_839;
    return Flector(((vec4(_e4.g0_.y) * _e8.g0_) + ((vec4(_e11.g0_.x) * _e15.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec4(_e26.g0_.y) * _e30.g1_) + ((vec4(_e33.g0_.x) * _e37.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_flector_regressive_product(self_912: HomogeneousMagnitude, other_840: Flector) -> Flector {
    var self_913: HomogeneousMagnitude;
    var other_841: Flector;

    self_913 = self_912;
    other_841 = other_840;
    let _e4: HomogeneousMagnitude = self_913;
    let _e8: Flector = other_841;
    let _e11: HomogeneousMagnitude = self_913;
    let _e15: Flector = other_841;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), (vec4(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_anti_wedge(self_914: HomogeneousMagnitude, other_842: Flector) -> Flector {
    var self_915: HomogeneousMagnitude;
    var other_843: Flector;

    self_915 = self_914;
    other_843 = other_842;
    let _e4: HomogeneousMagnitude = self_915;
    let _e8: Flector = other_843;
    let _e11: HomogeneousMagnitude = self_915;
    let _e15: Flector = other_843;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), (vec4(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_meet(self_916: HomogeneousMagnitude, other_844: Flector) -> Flector {
    var self_917: HomogeneousMagnitude;
    var other_845: Flector;

    self_917 = self_916;
    other_845 = other_844;
    let _e4: HomogeneousMagnitude = self_917;
    let _e8: Flector = other_845;
    let _e11: HomogeneousMagnitude = self_917;
    let _e15: Flector = other_845;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), (vec4(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_outer_product(self_918: HomogeneousMagnitude, other_846: Flector) -> Flector {
    var self_919: HomogeneousMagnitude;
    var other_847: Flector;

    self_919 = self_918;
    other_847 = other_846;
    let _e4: HomogeneousMagnitude = self_919;
    let _e8: Flector = other_847;
    let _e11: HomogeneousMagnitude = self_919;
    let _e15: Flector = other_847;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), (vec4(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_wedge(self_920: HomogeneousMagnitude, other_848: Flector) -> Flector {
    var self_921: HomogeneousMagnitude;
    var other_849: Flector;

    self_921 = self_920;
    other_849 = other_848;
    let _e4: HomogeneousMagnitude = self_921;
    let _e8: Flector = other_849;
    let _e11: HomogeneousMagnitude = self_921;
    let _e15: Flector = other_849;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), (vec4(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_join(self_922: HomogeneousMagnitude, other_850: Flector) -> Flector {
    var self_923: HomogeneousMagnitude;
    var other_851: Flector;

    self_923 = self_922;
    other_851 = other_850;
    let _e4: HomogeneousMagnitude = self_923;
    let _e8: Flector = other_851;
    let _e11: HomogeneousMagnitude = self_923;
    let _e15: Flector = other_851;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), (vec4(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_inner_product(self_924: HomogeneousMagnitude, other_852: Flector) -> Flector {
    var self_925: HomogeneousMagnitude;
    var other_853: Flector;

    self_925 = self_924;
    other_853 = other_852;
    let _e4: HomogeneousMagnitude = self_925;
    let _e8: Flector = other_853;
    let _e11: HomogeneousMagnitude = self_925;
    let _e14: HomogeneousMagnitude = self_925;
    let _e17: HomogeneousMagnitude = self_925;
    let _e20: HomogeneousMagnitude = self_925;
    let _e24: Flector = other_853;
    let _e35: HomogeneousMagnitude = self_925;
    let _e39: Flector = other_853;
    let _e42: HomogeneousMagnitude = self_925;
    let _e45: HomogeneousMagnitude = self_925;
    let _e48: HomogeneousMagnitude = self_925;
    let _e51: HomogeneousMagnitude = self_925;
    let _e55: Flector = other_853;
    return Flector(((vec4(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x, _e14.g0_.x, _e17.g0_.x, _e20.g0_.y) * _e24.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec4(_e35.g0_.x) * _e39.g1_) + ((vec4<f32>(_e42.g0_.y, _e45.g0_.y, _e48.g0_.y, _e51.g0_.x) * _e55.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn homogeneous_magnitude_flector_inner_anti_product(self_926: HomogeneousMagnitude, other_854: Flector) -> Flector {
    var self_927: HomogeneousMagnitude;
    var other_855: Flector;

    self_927 = self_926;
    other_855 = other_854;
    let _e4: HomogeneousMagnitude = self_927;
    let _e8: Flector = other_855;
    let _e11: HomogeneousMagnitude = self_927;
    let _e15: Flector = other_855;
    let _e26: HomogeneousMagnitude = self_927;
    let _e30: Flector = other_855;
    let _e33: HomogeneousMagnitude = self_927;
    let _e37: Flector = other_855;
    return Flector(((vec4(_e4.g0_.y) * _e8.g0_) + ((vec4(_e11.g0_.x) * _e15.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec4(_e26.g0_.y) * _e30.g1_) + ((vec4(_e33.g0_.x) * _e37.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_flector_left_contraction(self_928: HomogeneousMagnitude, other_856: Flector) -> Flector {
    var self_929: HomogeneousMagnitude;
    var other_857: Flector;

    self_929 = self_928;
    other_857 = other_856;
    let _e4: HomogeneousMagnitude = self_929;
    let _e8: Flector = other_857;
    let _e11: HomogeneousMagnitude = self_929;
    let _e15: Flector = other_857;
    return Flector((vec4(_e4.g0_.x) * _e8.g0_), (vec4(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_right_contraction(self_930: HomogeneousMagnitude, other_858: Flector) -> Flector {
    var self_931: HomogeneousMagnitude;
    var other_859: Flector;

    self_931 = self_930;
    other_859 = other_858;
    let _e4: HomogeneousMagnitude = self_931;
    let _e7: HomogeneousMagnitude = self_931;
    let _e10: HomogeneousMagnitude = self_931;
    let _e13: HomogeneousMagnitude = self_931;
    let _e17: Flector = other_859;
    let _e27: HomogeneousMagnitude = self_931;
    let _e30: HomogeneousMagnitude = self_931;
    let _e33: HomogeneousMagnitude = self_931;
    let _e36: HomogeneousMagnitude = self_931;
    let _e40: Flector = other_859;
    return Flector(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.x, _e13.g0_.y) * _e17.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), ((vec4<f32>(_e27.g0_.y, _e30.g0_.y, _e33.g0_.y, _e36.g0_.x) * _e40.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn homogeneous_magnitude_flector_left_anti_contraction(self_932: HomogeneousMagnitude, other_860: Flector) -> Flector {
    var self_933: HomogeneousMagnitude;
    var other_861: Flector;

    self_933 = self_932;
    other_861 = other_860;
    let _e4: HomogeneousMagnitude = self_933;
    let _e8: Flector = other_861;
    let _e11: HomogeneousMagnitude = self_933;
    let _e15: Flector = other_861;
    return Flector((vec4(_e4.g0_.y) * _e8.g0_), (vec4(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_right_anti_contraction(self_934: HomogeneousMagnitude, other_862: Flector) -> Flector {
    var self_935: HomogeneousMagnitude;
    var other_863: Flector;

    self_935 = self_934;
    other_863 = other_862;
    let _e4: HomogeneousMagnitude = self_935;
    let _e8: Flector = other_863;
    let _e18: HomogeneousMagnitude = self_935;
    let _e22: Flector = other_863;
    return Flector(((vec4(_e4.g0_.x) * _e8.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), ((vec4(_e18.g0_.x) * _e22.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn homogeneous_magnitude_multi_vector_add(self_936: HomogeneousMagnitude, other_864: MultiVector) -> MultiVector {
    var self_937: HomogeneousMagnitude;
    var other_865: MultiVector;

    self_937 = self_936;
    other_865 = other_864;
    let _e4: HomogeneousMagnitude = self_937;
    let _e6: MultiVector = other_865;
    let _e9: MultiVector = other_865;
    let _e11: MultiVector = other_865;
    let _e13: MultiVector = other_865;
    let _e15: MultiVector = other_865;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn homogeneous_magnitude_multi_vector_sub(self_938: HomogeneousMagnitude, other_866: MultiVector) -> MultiVector {
    var self_939: HomogeneousMagnitude;
    var other_867: MultiVector;

    self_939 = self_938;
    other_867 = other_866;
    let _e4: HomogeneousMagnitude = self_939;
    let _e6: MultiVector = other_867;
    let _e11: MultiVector = other_867;
    let _e16: MultiVector = other_867;
    let _e21: MultiVector = other_867;
    let _e26: MultiVector = other_867;
    return MultiVector((_e4.g0_ - _e6.g0_), (vec4(0.0) - _e11.g1_), (vec3(0.0) - _e16.g2_), (vec3(0.0) - _e21.g3_), (vec4(0.0) - _e26.g4_));
}

fn homogeneous_magnitude_multi_vector_geometric_product(self_940: HomogeneousMagnitude, other_868: MultiVector) -> MultiVector {
    var self_941: HomogeneousMagnitude;
    var other_869: MultiVector;

    self_941 = self_940;
    other_869 = other_868;
    let _e4: HomogeneousMagnitude = self_941;
    let _e8: MultiVector = other_869;
    let _e11: HomogeneousMagnitude = self_941;
    let _e13: MultiVector = other_869;
    let _e23: HomogeneousMagnitude = self_941;
    let _e27: MultiVector = other_869;
    let _e30: HomogeneousMagnitude = self_941;
    let _e33: HomogeneousMagnitude = self_941;
    let _e36: HomogeneousMagnitude = self_941;
    let _e39: HomogeneousMagnitude = self_941;
    let _e43: MultiVector = other_869;
    let _e54: HomogeneousMagnitude = self_941;
    let _e58: MultiVector = other_869;
    let _e61: HomogeneousMagnitude = self_941;
    let _e65: MultiVector = other_869;
    let _e69: HomogeneousMagnitude = self_941;
    let _e73: MultiVector = other_869;
    let _e76: HomogeneousMagnitude = self_941;
    let _e80: MultiVector = other_869;
    let _e83: HomogeneousMagnitude = self_941;
    let _e86: HomogeneousMagnitude = self_941;
    let _e89: HomogeneousMagnitude = self_941;
    let _e92: HomogeneousMagnitude = self_941;
    let _e96: MultiVector = other_869;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e23.g0_.x) * _e27.g1_) + ((vec4<f32>(_e30.g0_.x, _e33.g0_.x, _e36.g0_.x, _e39.g0_.y) * _e43.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec3(_e54.g0_.x) * _e58.g2_) + (vec3(_e61.g0_.y) * _e65.g3_)), (vec3(_e69.g0_.x) * _e73.g3_), ((vec4(_e76.g0_.x) * _e80.g4_) + ((vec4<f32>(_e83.g0_.y, _e86.g0_.y, _e89.g0_.y, _e92.g0_.x) * _e96.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn homogeneous_magnitude_multi_vector_geometric_anti_product(self_942: HomogeneousMagnitude, other_870: MultiVector) -> MultiVector {
    var self_943: HomogeneousMagnitude;
    var other_871: MultiVector;

    self_943 = self_942;
    other_871 = other_870;
    let _e4: HomogeneousMagnitude = self_943;
    let _e8: MultiVector = other_871;
    let _e11: HomogeneousMagnitude = self_943;
    let _e15: MultiVector = other_871;
    let _e24: HomogeneousMagnitude = self_943;
    let _e28: MultiVector = other_871;
    let _e31: HomogeneousMagnitude = self_943;
    let _e35: MultiVector = other_871;
    let _e46: HomogeneousMagnitude = self_943;
    let _e50: MultiVector = other_871;
    let _e53: HomogeneousMagnitude = self_943;
    let _e57: MultiVector = other_871;
    let _e60: HomogeneousMagnitude = self_943;
    let _e64: MultiVector = other_871;
    let _e68: HomogeneousMagnitude = self_943;
    let _e72: MultiVector = other_871;
    let _e75: HomogeneousMagnitude = self_943;
    let _e79: MultiVector = other_871;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), ((vec4(_e24.g0_.y) * _e28.g1_) + ((vec4(_e31.g0_.x) * _e35.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(_e46.g0_.y) * _e50.g2_), ((vec3(_e53.g0_.x) * _e57.g2_) + (vec3(_e60.g0_.y) * _e64.g3_)), ((vec4(_e68.g0_.y) * _e72.g4_) + ((vec4(_e75.g0_.x) * _e79.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_multi_vector_regressive_product(self_944: HomogeneousMagnitude, other_872: MultiVector) -> MultiVector {
    var self_945: HomogeneousMagnitude;
    var other_873: MultiVector;

    self_945 = self_944;
    other_873 = other_872;
    let _e4: HomogeneousMagnitude = self_945;
    let _e8: MultiVector = other_873;
    let _e11: HomogeneousMagnitude = self_945;
    let _e15: MultiVector = other_873;
    let _e24: HomogeneousMagnitude = self_945;
    let _e28: MultiVector = other_873;
    let _e31: HomogeneousMagnitude = self_945;
    let _e35: MultiVector = other_873;
    let _e38: HomogeneousMagnitude = self_945;
    let _e42: MultiVector = other_873;
    let _e45: HomogeneousMagnitude = self_945;
    let _e49: MultiVector = other_873;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4(_e24.g0_.y) * _e28.g1_), (vec3(_e31.g0_.y) * _e35.g2_), (vec3(_e38.g0_.y) * _e42.g3_), (vec4(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_anti_wedge(self_946: HomogeneousMagnitude, other_874: MultiVector) -> MultiVector {
    var self_947: HomogeneousMagnitude;
    var other_875: MultiVector;

    self_947 = self_946;
    other_875 = other_874;
    let _e4: HomogeneousMagnitude = self_947;
    let _e8: MultiVector = other_875;
    let _e11: HomogeneousMagnitude = self_947;
    let _e15: MultiVector = other_875;
    let _e24: HomogeneousMagnitude = self_947;
    let _e28: MultiVector = other_875;
    let _e31: HomogeneousMagnitude = self_947;
    let _e35: MultiVector = other_875;
    let _e38: HomogeneousMagnitude = self_947;
    let _e42: MultiVector = other_875;
    let _e45: HomogeneousMagnitude = self_947;
    let _e49: MultiVector = other_875;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4(_e24.g0_.y) * _e28.g1_), (vec3(_e31.g0_.y) * _e35.g2_), (vec3(_e38.g0_.y) * _e42.g3_), (vec4(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_meet(self_948: HomogeneousMagnitude, other_876: MultiVector) -> MultiVector {
    var self_949: HomogeneousMagnitude;
    var other_877: MultiVector;

    self_949 = self_948;
    other_877 = other_876;
    let _e4: HomogeneousMagnitude = self_949;
    let _e8: MultiVector = other_877;
    let _e11: HomogeneousMagnitude = self_949;
    let _e15: MultiVector = other_877;
    let _e24: HomogeneousMagnitude = self_949;
    let _e28: MultiVector = other_877;
    let _e31: HomogeneousMagnitude = self_949;
    let _e35: MultiVector = other_877;
    let _e38: HomogeneousMagnitude = self_949;
    let _e42: MultiVector = other_877;
    let _e45: HomogeneousMagnitude = self_949;
    let _e49: MultiVector = other_877;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4(_e24.g0_.y) * _e28.g1_), (vec3(_e31.g0_.y) * _e35.g2_), (vec3(_e38.g0_.y) * _e42.g3_), (vec4(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_outer_product(self_950: HomogeneousMagnitude, other_878: MultiVector) -> MultiVector {
    var self_951: HomogeneousMagnitude;
    var other_879: MultiVector;

    self_951 = self_950;
    other_879 = other_878;
    let _e4: HomogeneousMagnitude = self_951;
    let _e8: MultiVector = other_879;
    let _e11: HomogeneousMagnitude = self_951;
    let _e13: MultiVector = other_879;
    let _e23: HomogeneousMagnitude = self_951;
    let _e27: MultiVector = other_879;
    let _e30: HomogeneousMagnitude = self_951;
    let _e34: MultiVector = other_879;
    let _e37: HomogeneousMagnitude = self_951;
    let _e41: MultiVector = other_879;
    let _e44: HomogeneousMagnitude = self_951;
    let _e48: MultiVector = other_879;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e23.g0_.x) * _e27.g1_), (vec3(_e30.g0_.x) * _e34.g2_), (vec3(_e37.g0_.x) * _e41.g3_), (vec4(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_wedge(self_952: HomogeneousMagnitude, other_880: MultiVector) -> MultiVector {
    var self_953: HomogeneousMagnitude;
    var other_881: MultiVector;

    self_953 = self_952;
    other_881 = other_880;
    let _e4: HomogeneousMagnitude = self_953;
    let _e8: MultiVector = other_881;
    let _e11: HomogeneousMagnitude = self_953;
    let _e13: MultiVector = other_881;
    let _e23: HomogeneousMagnitude = self_953;
    let _e27: MultiVector = other_881;
    let _e30: HomogeneousMagnitude = self_953;
    let _e34: MultiVector = other_881;
    let _e37: HomogeneousMagnitude = self_953;
    let _e41: MultiVector = other_881;
    let _e44: HomogeneousMagnitude = self_953;
    let _e48: MultiVector = other_881;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e23.g0_.x) * _e27.g1_), (vec3(_e30.g0_.x) * _e34.g2_), (vec3(_e37.g0_.x) * _e41.g3_), (vec4(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_join(self_954: HomogeneousMagnitude, other_882: MultiVector) -> MultiVector {
    var self_955: HomogeneousMagnitude;
    var other_883: MultiVector;

    self_955 = self_954;
    other_883 = other_882;
    let _e4: HomogeneousMagnitude = self_955;
    let _e8: MultiVector = other_883;
    let _e11: HomogeneousMagnitude = self_955;
    let _e13: MultiVector = other_883;
    let _e23: HomogeneousMagnitude = self_955;
    let _e27: MultiVector = other_883;
    let _e30: HomogeneousMagnitude = self_955;
    let _e34: MultiVector = other_883;
    let _e37: HomogeneousMagnitude = self_955;
    let _e41: MultiVector = other_883;
    let _e44: HomogeneousMagnitude = self_955;
    let _e48: MultiVector = other_883;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e23.g0_.x) * _e27.g1_), (vec3(_e30.g0_.x) * _e34.g2_), (vec3(_e37.g0_.x) * _e41.g3_), (vec4(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_inner_product(self_956: HomogeneousMagnitude, other_884: MultiVector) -> MultiVector {
    var self_957: HomogeneousMagnitude;
    var other_885: MultiVector;

    self_957 = self_956;
    other_885 = other_884;
    let _e4: HomogeneousMagnitude = self_957;
    let _e8: MultiVector = other_885;
    let _e11: HomogeneousMagnitude = self_957;
    let _e13: MultiVector = other_885;
    let _e23: HomogeneousMagnitude = self_957;
    let _e27: MultiVector = other_885;
    let _e30: HomogeneousMagnitude = self_957;
    let _e33: HomogeneousMagnitude = self_957;
    let _e36: HomogeneousMagnitude = self_957;
    let _e39: HomogeneousMagnitude = self_957;
    let _e43: MultiVector = other_885;
    let _e54: HomogeneousMagnitude = self_957;
    let _e58: MultiVector = other_885;
    let _e61: HomogeneousMagnitude = self_957;
    let _e65: MultiVector = other_885;
    let _e69: HomogeneousMagnitude = self_957;
    let _e73: MultiVector = other_885;
    let _e76: HomogeneousMagnitude = self_957;
    let _e80: MultiVector = other_885;
    let _e83: HomogeneousMagnitude = self_957;
    let _e86: HomogeneousMagnitude = self_957;
    let _e89: HomogeneousMagnitude = self_957;
    let _e92: HomogeneousMagnitude = self_957;
    let _e96: MultiVector = other_885;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e23.g0_.x) * _e27.g1_) + ((vec4<f32>(_e30.g0_.x, _e33.g0_.x, _e36.g0_.x, _e39.g0_.y) * _e43.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec3(_e54.g0_.x) * _e58.g2_) + (vec3(_e61.g0_.y) * _e65.g3_)), (vec3(_e69.g0_.x) * _e73.g3_), ((vec4(_e76.g0_.x) * _e80.g4_) + ((vec4<f32>(_e83.g0_.y, _e86.g0_.y, _e89.g0_.y, _e92.g0_.x) * _e96.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn homogeneous_magnitude_multi_vector_inner_anti_product(self_958: HomogeneousMagnitude, other_886: MultiVector) -> MultiVector {
    var self_959: HomogeneousMagnitude;
    var other_887: MultiVector;

    self_959 = self_958;
    other_887 = other_886;
    let _e4: HomogeneousMagnitude = self_959;
    let _e8: MultiVector = other_887;
    let _e11: HomogeneousMagnitude = self_959;
    let _e15: MultiVector = other_887;
    let _e24: HomogeneousMagnitude = self_959;
    let _e28: MultiVector = other_887;
    let _e31: HomogeneousMagnitude = self_959;
    let _e35: MultiVector = other_887;
    let _e46: HomogeneousMagnitude = self_959;
    let _e50: MultiVector = other_887;
    let _e53: HomogeneousMagnitude = self_959;
    let _e57: MultiVector = other_887;
    let _e60: HomogeneousMagnitude = self_959;
    let _e64: MultiVector = other_887;
    let _e68: HomogeneousMagnitude = self_959;
    let _e72: MultiVector = other_887;
    let _e75: HomogeneousMagnitude = self_959;
    let _e79: MultiVector = other_887;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), ((vec4(_e24.g0_.y) * _e28.g1_) + ((vec4(_e31.g0_.x) * _e35.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(_e46.g0_.y) * _e50.g2_), ((vec3(_e53.g0_.x) * _e57.g2_) + (vec3(_e60.g0_.y) * _e64.g3_)), ((vec4(_e68.g0_.y) * _e72.g4_) + ((vec4(_e75.g0_.x) * _e79.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_multi_vector_left_contraction(self_960: HomogeneousMagnitude, other_888: MultiVector) -> MultiVector {
    var self_961: HomogeneousMagnitude;
    var other_889: MultiVector;

    self_961 = self_960;
    other_889 = other_888;
    let _e4: HomogeneousMagnitude = self_961;
    let _e8: MultiVector = other_889;
    let _e11: HomogeneousMagnitude = self_961;
    let _e15: MultiVector = other_889;
    let _e18: HomogeneousMagnitude = self_961;
    let _e22: MultiVector = other_889;
    let _e25: HomogeneousMagnitude = self_961;
    let _e29: MultiVector = other_889;
    let _e32: HomogeneousMagnitude = self_961;
    let _e36: MultiVector = other_889;
    return MultiVector((vec2(_e4.g0_.x) * _e8.g0_), (vec4(_e11.g0_.x) * _e15.g1_), (vec3(_e18.g0_.x) * _e22.g2_), (vec3(_e25.g0_.x) * _e29.g3_), (vec4(_e32.g0_.x) * _e36.g4_));
}

fn homogeneous_magnitude_multi_vector_right_contraction(self_962: HomogeneousMagnitude, other_890: MultiVector) -> MultiVector {
    var self_963: HomogeneousMagnitude;
    var other_891: MultiVector;

    self_963 = self_962;
    other_891 = other_890;
    let _e4: HomogeneousMagnitude = self_963;
    let _e6: MultiVector = other_891;
    let _e11: HomogeneousMagnitude = self_963;
    let _e14: HomogeneousMagnitude = self_963;
    let _e17: HomogeneousMagnitude = self_963;
    let _e20: HomogeneousMagnitude = self_963;
    let _e24: MultiVector = other_891;
    let _e34: HomogeneousMagnitude = self_963;
    let _e38: MultiVector = other_891;
    let _e43: HomogeneousMagnitude = self_963;
    let _e46: HomogeneousMagnitude = self_963;
    let _e49: HomogeneousMagnitude = self_963;
    let _e52: HomogeneousMagnitude = self_963;
    let _e56: MultiVector = other_891;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.x)), ((vec4<f32>(_e11.g0_.x, _e14.g0_.x, _e17.g0_.x, _e20.g0_.y) * _e24.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), (vec3(_e34.g0_.y) * _e38.g3_), vec3(0.0), ((vec4<f32>(_e43.g0_.y, _e46.g0_.y, _e49.g0_.y, _e52.g0_.x) * _e56.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn homogeneous_magnitude_multi_vector_left_anti_contraction(self_964: HomogeneousMagnitude, other_892: MultiVector) -> MultiVector {
    var self_965: HomogeneousMagnitude;
    var other_893: MultiVector;

    self_965 = self_964;
    other_893 = other_892;
    let _e4: HomogeneousMagnitude = self_965;
    let _e8: MultiVector = other_893;
    let _e11: HomogeneousMagnitude = self_965;
    let _e15: MultiVector = other_893;
    let _e18: HomogeneousMagnitude = self_965;
    let _e22: MultiVector = other_893;
    let _e25: HomogeneousMagnitude = self_965;
    let _e29: MultiVector = other_893;
    let _e32: HomogeneousMagnitude = self_965;
    let _e36: MultiVector = other_893;
    return MultiVector((vec2(_e4.g0_.y) * _e8.g0_), (vec4(_e11.g0_.y) * _e15.g1_), (vec3(_e18.g0_.y) * _e22.g2_), (vec3(_e25.g0_.y) * _e29.g3_), (vec4(_e32.g0_.y) * _e36.g4_));
}

fn homogeneous_magnitude_multi_vector_right_anti_contraction(self_966: HomogeneousMagnitude, other_894: MultiVector) -> MultiVector {
    var self_967: HomogeneousMagnitude;
    var other_895: MultiVector;

    self_967 = self_966;
    other_895 = other_894;
    let _e4: HomogeneousMagnitude = self_967;
    let _e6: MultiVector = other_895;
    let _e11: HomogeneousMagnitude = self_967;
    let _e15: MultiVector = other_895;
    let _e27: HomogeneousMagnitude = self_967;
    let _e31: MultiVector = other_895;
    let _e34: HomogeneousMagnitude = self_967;
    let _e38: MultiVector = other_895;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.y)), ((vec4(_e11.g0_.x) * _e15.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), vec3(0.0), (vec3(_e27.g0_.x) * _e31.g2_), ((vec4(_e34.g0_.x) * _e38.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn homogeneous_magnitude_multi_vector_scalar_product(self_968: HomogeneousMagnitude, other_896: MultiVector) -> Scalar {
    var self_969: HomogeneousMagnitude;
    var other_897: MultiVector;

    self_969 = self_968;
    other_897 = other_896;
    let _e4: HomogeneousMagnitude = self_969;
    let _e7: MultiVector = other_897;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_multi_vector_dot(self_970: HomogeneousMagnitude, other_898: MultiVector) -> Scalar {
    var self_971: HomogeneousMagnitude;
    var other_899: MultiVector;

    self_971 = self_970;
    other_899 = other_898;
    let _e4: HomogeneousMagnitude = self_971;
    let _e7: MultiVector = other_899;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_multi_vector_anti_scalar_product(self_972: HomogeneousMagnitude, other_900: MultiVector) -> AntiScalar {
    var self_973: HomogeneousMagnitude;
    var other_901: MultiVector;

    self_973 = self_972;
    other_901 = other_900;
    let _e4: HomogeneousMagnitude = self_973;
    let _e7: MultiVector = other_901;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_multi_vector_anti_dot(self_974: HomogeneousMagnitude, other_902: MultiVector) -> AntiScalar {
    var self_975: HomogeneousMagnitude;
    var other_903: MultiVector;

    self_975 = self_974;
    other_903 = other_902;
    let _e4: HomogeneousMagnitude = self_975;
    let _e7: MultiVector = other_903;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_squared_magnitude(self_976: HomogeneousMagnitude) -> Scalar {
    var self_977: HomogeneousMagnitude;

    self_977 = self_976;
    let _e2: HomogeneousMagnitude = self_977;
    let _e3: HomogeneousMagnitude = self_977;
    let _e4: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e3);
    let _e5: Scalar = homogeneous_magnitude_homogeneous_magnitude_scalar_product(_e2, _e4);
    return _e5;
}

fn homogeneous_magnitude_magnitude(self_978: HomogeneousMagnitude) -> Scalar {
    var self_979: HomogeneousMagnitude;

    self_979 = self_978;
    let _e2: HomogeneousMagnitude = self_979;
    let _e3: Scalar = homogeneous_magnitude_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_bulk_norm(self_980: HomogeneousMagnitude) -> Scalar {
    var self_981: HomogeneousMagnitude;

    self_981 = self_980;
    let _e2: HomogeneousMagnitude = self_981;
    let _e3: Scalar = homogeneous_magnitude_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_squared_anti_magnitude(self_982: HomogeneousMagnitude) -> AntiScalar {
    var self_983: HomogeneousMagnitude;

    self_983 = self_982;
    let _e2: HomogeneousMagnitude = self_983;
    let _e3: HomogeneousMagnitude = self_983;
    let _e4: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e3);
    let _e5: AntiScalar = homogeneous_magnitude_homogeneous_magnitude_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn homogeneous_magnitude_weight_norm(self_984: HomogeneousMagnitude) -> AntiScalar {
    var self_985: HomogeneousMagnitude;

    self_985 = self_984;
    let _e2: HomogeneousMagnitude = self_985;
    let _e3: AntiScalar = homogeneous_magnitude_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_geometric_norm(self_986: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_987: HomogeneousMagnitude;

    self_987 = self_986;
    let _e2: HomogeneousMagnitude = self_987;
    let _e3: Scalar = homogeneous_magnitude_bulk_norm(_e2);
    let _e4: HomogeneousMagnitude = self_987;
    let _e5: AntiScalar = homogeneous_magnitude_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn homogeneous_magnitude_scale(self_988: HomogeneousMagnitude, other_904: f32) -> HomogeneousMagnitude {
    var self_989: HomogeneousMagnitude;
    var other_905: f32;

    self_989 = self_988;
    other_905 = other_904;
    let _e4: HomogeneousMagnitude = self_989;
    let _e5: f32 = other_905;
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn homogeneous_magnitude_signum(self_990: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_991: HomogeneousMagnitude;

    self_991 = self_990;
    let _e2: HomogeneousMagnitude = self_991;
    let _e3: HomogeneousMagnitude = self_991;
    let _e4: Scalar = homogeneous_magnitude_magnitude(_e3);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn homogeneous_magnitude_inverse(self_992: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_993: HomogeneousMagnitude;

    self_993 = self_992;
    let _e2: HomogeneousMagnitude = self_993;
    let _e3: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e2);
    let _e4: HomogeneousMagnitude = self_993;
    let _e5: Scalar = homogeneous_magnitude_squared_magnitude(_e4);
    let _e10: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn homogeneous_magnitude_unitize(self_994: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_995: HomogeneousMagnitude;

    self_995 = self_994;
    let _e2: HomogeneousMagnitude = self_995;
    let _e3: HomogeneousMagnitude = self_995;
    let _e4: AntiScalar = homogeneous_magnitude_weight_norm(_e3);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn homogeneous_magnitude_attitude(self_996: HomogeneousMagnitude) -> Plane {
    var self_997: HomogeneousMagnitude;

    self_997 = self_996;
    let _e2: HomogeneousMagnitude = self_997;
    let _e9: Plane = homogeneous_magnitude_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn point_zero() -> Point {
    return Point(vec4(0.0));
}

fn point_one() -> Point {
    return Point(vec4(0.0));
}

fn point_grade(self_998: Point) -> i32 {
    return 1;
}

fn point_anti_grade(self_999: Point) -> i32 {
    return 3;
}

fn point_neg(self_1000: Point) -> Point {
    var self_1001: Point;

    self_1001 = self_1000;
    let _e2: Point = self_1001;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn point_automorphism(self_1002: Point) -> Point {
    var self_1003: Point;

    self_1003 = self_1002;
    let _e2: Point = self_1003;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn point_reversal(self_1004: Point) -> Point {
    var self_1005: Point;

    self_1005 = self_1004;
    let _e2: Point = self_1005;
    return Point(_e2.g0_);
}

fn point_conjugation(self_1006: Point) -> Point {
    var self_1007: Point;

    self_1007 = self_1006;
    let _e2: Point = self_1007;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn point_dual(self_1008: Point) -> Plane {
    var self_1009: Point;

    self_1009 = self_1008;
    let _e2: Point = self_1009;
    return Plane(_e2.g0_);
}

fn point_anti_reversal(self_1010: Point) -> Point {
    var self_1011: Point;

    self_1011 = self_1010;
    let _e2: Point = self_1011;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn point_right_complement(self_1012: Point) -> Plane {
    var self_1013: Point;

    self_1013 = self_1012;
    let _e2: Point = self_1013;
    return Plane(_e2.g0_);
}

fn point_left_complement(self_1014: Point) -> Plane {
    var self_1015: Point;

    self_1015 = self_1014;
    let _e2: Point = self_1015;
    return Plane((_e2.g0_ * vec4(-1.0)));
}

fn point_double_complement(self_1016: Point) -> Point {
    var self_1017: Point;

    self_1017 = self_1016;
    let _e2: Point = self_1017;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn point_scalar_geometric_product(self_1018: Point, other_906: Scalar) -> Point {
    var self_1019: Point;
    var other_907: Scalar;

    self_1019 = self_1018;
    other_907 = other_906;
    let _e4: Point = self_1019;
    let _e6: Scalar = other_907;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_geometric_anti_product(self_1020: Point, other_908: Scalar) -> Plane {
    var self_1021: Point;
    var other_909: Scalar;

    self_1021 = self_1020;
    other_909 = other_908;
    let _e4: Point = self_1021;
    let _e7: Scalar = other_909;
    return Plane(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_scalar_outer_product(self_1022: Point, other_910: Scalar) -> Point {
    var self_1023: Point;
    var other_911: Scalar;

    self_1023 = self_1022;
    other_911 = other_910;
    let _e4: Point = self_1023;
    let _e6: Scalar = other_911;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_wedge(self_1024: Point, other_912: Scalar) -> Point {
    var self_1025: Point;
    var other_913: Scalar;

    self_1025 = self_1024;
    other_913 = other_912;
    let _e4: Point = self_1025;
    let _e6: Scalar = other_913;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_join(self_1026: Point, other_914: Scalar) -> Point {
    var self_1027: Point;
    var other_915: Scalar;

    self_1027 = self_1026;
    other_915 = other_914;
    let _e4: Point = self_1027;
    let _e6: Scalar = other_915;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_inner_product(self_1028: Point, other_916: Scalar) -> Point {
    var self_1029: Point;
    var other_917: Scalar;

    self_1029 = self_1028;
    other_917 = other_916;
    let _e4: Point = self_1029;
    let _e6: Scalar = other_917;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_inner_anti_product(self_1030: Point, other_918: Scalar) -> Plane {
    var self_1031: Point;
    var other_919: Scalar;

    self_1031 = self_1030;
    other_919 = other_918;
    let _e4: Point = self_1031;
    let _e7: Scalar = other_919;
    return Plane(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_scalar_right_contraction(self_1032: Point, other_920: Scalar) -> Point {
    var self_1033: Point;
    var other_921: Scalar;

    self_1033 = self_1032;
    other_921 = other_920;
    let _e4: Point = self_1033;
    let _e6: Scalar = other_921;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_scalar_left_anti_contraction(self_1034: Point, other_922: Scalar) -> Plane {
    var self_1035: Point;
    var other_923: Scalar;

    self_1035 = self_1034;
    other_923 = other_922;
    let _e4: Point = self_1035;
    let _e7: Scalar = other_923;
    return Plane(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_anti_scalar_geometric_product(self_1036: Point, other_924: AntiScalar) -> Plane {
    var self_1037: Point;
    var other_925: AntiScalar;

    self_1037 = self_1036;
    other_925 = other_924;
    let _e4: Point = self_1037;
    let _e7: AntiScalar = other_925;
    return Plane(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_anti_scalar_geometric_anti_product(self_1038: Point, other_926: AntiScalar) -> Point {
    var self_1039: Point;
    var other_927: AntiScalar;

    self_1039 = self_1038;
    other_927 = other_926;
    let _e4: Point = self_1039;
    let _e6: AntiScalar = other_927;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_anti_scalar_regressive_product(self_1040: Point, other_928: AntiScalar) -> Point {
    var self_1041: Point;
    var other_929: AntiScalar;

    self_1041 = self_1040;
    other_929 = other_928;
    let _e4: Point = self_1041;
    let _e6: AntiScalar = other_929;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_anti_scalar_anti_wedge(self_1042: Point, other_930: AntiScalar) -> Point {
    var self_1043: Point;
    var other_931: AntiScalar;

    self_1043 = self_1042;
    other_931 = other_930;
    let _e4: Point = self_1043;
    let _e6: AntiScalar = other_931;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_anti_scalar_meet(self_1044: Point, other_932: AntiScalar) -> Point {
    var self_1045: Point;
    var other_933: AntiScalar;

    self_1045 = self_1044;
    other_933 = other_932;
    let _e4: Point = self_1045;
    let _e6: AntiScalar = other_933;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_anti_scalar_inner_product(self_1046: Point, other_934: AntiScalar) -> Plane {
    var self_1047: Point;
    var other_935: AntiScalar;

    self_1047 = self_1046;
    other_935 = other_934;
    let _e4: Point = self_1047;
    let _e7: AntiScalar = other_935;
    return Plane(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_anti_scalar_inner_anti_product(self_1048: Point, other_936: AntiScalar) -> Point {
    var self_1049: Point;
    var other_937: AntiScalar;

    self_1049 = self_1048;
    other_937 = other_936;
    let _e4: Point = self_1049;
    let _e6: AntiScalar = other_937;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_anti_scalar_left_contraction(self_1050: Point, other_938: AntiScalar) -> Plane {
    var self_1051: Point;
    var other_939: AntiScalar;

    self_1051 = self_1050;
    other_939 = other_938;
    let _e4: Point = self_1051;
    let _e7: AntiScalar = other_939;
    return Plane(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_anti_scalar_right_anti_contraction(self_1052: Point, other_940: AntiScalar) -> Point {
    var self_1053: Point;
    var other_941: AntiScalar;

    self_1053 = self_1052;
    other_941 = other_940;
    let _e4: Point = self_1053;
    let _e6: AntiScalar = other_941;
    return Point((_e4.g0_ * vec4(_e6.g0_)));
}

fn point_homogeneous_magnitude_geometric_product(self_1054: Point, other_942: HomogeneousMagnitude) -> Flector {
    var self_1055: Point;
    var other_943: HomogeneousMagnitude;

    self_1055 = self_1054;
    other_943 = other_942;
    let _e4: Point = self_1055;
    let _e6: HomogeneousMagnitude = other_943;
    let _e11: Point = self_1055;
    let _e14: HomogeneousMagnitude = other_943;
    let _e17: HomogeneousMagnitude = other_943;
    let _e20: HomogeneousMagnitude = other_943;
    let _e23: HomogeneousMagnitude = other_943;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), ((_e11.g0_.xyzx * vec4<f32>(_e14.g0_.y, _e17.g0_.y, _e20.g0_.y, _e23.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_homogeneous_magnitude_geometric_anti_product(self_1056: Point, other_944: HomogeneousMagnitude) -> Flector {
    var self_1057: Point;
    var other_945: HomogeneousMagnitude;

    self_1057 = self_1056;
    other_945 = other_944;
    let _e4: Point = self_1057;
    let _e6: HomogeneousMagnitude = other_945;
    let _e11: Point = self_1057;
    let _e14: HomogeneousMagnitude = other_945;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), ((_e11.g0_.xxxw * vec4(_e14.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_homogeneous_magnitude_regressive_product(self_1058: Point, other_946: HomogeneousMagnitude) -> Point {
    var self_1059: Point;
    var other_947: HomogeneousMagnitude;

    self_1059 = self_1058;
    other_947 = other_946;
    let _e4: Point = self_1059;
    let _e6: HomogeneousMagnitude = other_947;
    return Point((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_anti_wedge(self_1060: Point, other_948: HomogeneousMagnitude) -> Point {
    var self_1061: Point;
    var other_949: HomogeneousMagnitude;

    self_1061 = self_1060;
    other_949 = other_948;
    let _e4: Point = self_1061;
    let _e6: HomogeneousMagnitude = other_949;
    return Point((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_meet(self_1062: Point, other_950: HomogeneousMagnitude) -> Point {
    var self_1063: Point;
    var other_951: HomogeneousMagnitude;

    self_1063 = self_1062;
    other_951 = other_950;
    let _e4: Point = self_1063;
    let _e6: HomogeneousMagnitude = other_951;
    return Point((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_outer_product(self_1064: Point, other_952: HomogeneousMagnitude) -> Point {
    var self_1065: Point;
    var other_953: HomogeneousMagnitude;

    self_1065 = self_1064;
    other_953 = other_952;
    let _e4: Point = self_1065;
    let _e6: HomogeneousMagnitude = other_953;
    return Point((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_wedge(self_1066: Point, other_954: HomogeneousMagnitude) -> Point {
    var self_1067: Point;
    var other_955: HomogeneousMagnitude;

    self_1067 = self_1066;
    other_955 = other_954;
    let _e4: Point = self_1067;
    let _e6: HomogeneousMagnitude = other_955;
    return Point((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_join(self_1068: Point, other_956: HomogeneousMagnitude) -> Point {
    var self_1069: Point;
    var other_957: HomogeneousMagnitude;

    self_1069 = self_1068;
    other_957 = other_956;
    let _e4: Point = self_1069;
    let _e6: HomogeneousMagnitude = other_957;
    return Point((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_inner_product(self_1070: Point, other_958: HomogeneousMagnitude) -> Flector {
    var self_1071: Point;
    var other_959: HomogeneousMagnitude;

    self_1071 = self_1070;
    other_959 = other_958;
    let _e4: Point = self_1071;
    let _e6: HomogeneousMagnitude = other_959;
    let _e11: Point = self_1071;
    let _e14: HomogeneousMagnitude = other_959;
    let _e17: HomogeneousMagnitude = other_959;
    let _e20: HomogeneousMagnitude = other_959;
    let _e23: HomogeneousMagnitude = other_959;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), ((_e11.g0_.xyzx * vec4<f32>(_e14.g0_.y, _e17.g0_.y, _e20.g0_.y, _e23.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_homogeneous_magnitude_inner_anti_product(self_1072: Point, other_960: HomogeneousMagnitude) -> Flector {
    var self_1073: Point;
    var other_961: HomogeneousMagnitude;

    self_1073 = self_1072;
    other_961 = other_960;
    let _e4: Point = self_1073;
    let _e6: HomogeneousMagnitude = other_961;
    let _e11: Point = self_1073;
    let _e14: HomogeneousMagnitude = other_961;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), ((_e11.g0_.xxxw * vec4(_e14.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_homogeneous_magnitude_left_contraction(self_1074: Point, other_962: HomogeneousMagnitude) -> Plane {
    var self_1075: Point;
    var other_963: HomogeneousMagnitude;

    self_1075 = self_1074;
    other_963 = other_962;
    let _e4: Point = self_1075;
    let _e7: HomogeneousMagnitude = other_963;
    let _e10: HomogeneousMagnitude = other_963;
    let _e13: HomogeneousMagnitude = other_963;
    let _e16: HomogeneousMagnitude = other_963;
    return Plane(((_e4.g0_.xyzx * vec4<f32>(_e7.g0_.y, _e10.g0_.y, _e13.g0_.y, _e16.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_homogeneous_magnitude_right_contraction(self_1076: Point, other_964: HomogeneousMagnitude) -> Point {
    var self_1077: Point;
    var other_965: HomogeneousMagnitude;

    self_1077 = self_1076;
    other_965 = other_964;
    let _e4: Point = self_1077;
    let _e6: HomogeneousMagnitude = other_965;
    return Point((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_left_anti_contraction(self_1078: Point, other_966: HomogeneousMagnitude) -> Plane {
    var self_1079: Point;
    var other_967: HomogeneousMagnitude;

    self_1079 = self_1078;
    other_967 = other_966;
    let _e4: Point = self_1079;
    let _e7: HomogeneousMagnitude = other_967;
    return Plane(((_e4.g0_.xxxw * vec4(_e7.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_homogeneous_magnitude_right_anti_contraction(self_1080: Point, other_968: HomogeneousMagnitude) -> Point {
    var self_1081: Point;
    var other_969: HomogeneousMagnitude;

    self_1081 = self_1080;
    other_969 = other_968;
    let _e4: Point = self_1081;
    let _e6: HomogeneousMagnitude = other_969;
    return Point((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn point_point_add(self_1082: Point, other_970: Point) -> Point {
    var self_1083: Point;
    var other_971: Point;

    self_1083 = self_1082;
    other_971 = other_970;
    let _e4: Point = self_1083;
    let _e6: Point = other_971;
    return Point((_e4.g0_ + _e6.g0_));
}

fn point_point_sub(self_1084: Point, other_972: Point) -> Point {
    var self_1085: Point;
    var other_973: Point;

    self_1085 = self_1084;
    other_973 = other_972;
    let _e4: Point = self_1085;
    let _e6: Point = other_973;
    return Point((_e4.g0_ - _e6.g0_));
}

fn point_point_mul(self_1086: Point, other_974: Point) -> Point {
    var self_1087: Point;
    var other_975: Point;

    self_1087 = self_1086;
    other_975 = other_974;
    let _e4: Point = self_1087;
    let _e6: Point = other_975;
    return Point((_e4.g0_ * _e6.g0_));
}

fn point_point_div(self_1088: Point, other_976: Point) -> Point {
    var self_1089: Point;
    var other_977: Point;

    self_1089 = self_1088;
    other_977 = other_976;
    let _e4: Point = self_1089;
    let _e7: Point = self_1089;
    let _e10: Point = self_1089;
    let _e13: Point = self_1089;
    let _e23: Point = other_977;
    let _e26: Point = other_977;
    let _e29: Point = other_977;
    let _e32: Point = other_977;
    return Point((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn point_point_geometric_product(self_1090: Point, other_978: Point) -> MultiVector {
    var self_1091: Point;
    var other_979: Point;

    self_1091 = self_1090;
    other_979 = other_978;
    let _e4: Point = self_1091;
    let _e8: Point = other_979;
    let _e17: Point = self_1091;
    let _e21: Point = other_979;
    let _e31: Point = self_1091;
    let _e35: Point = other_979;
    let _e47: Point = self_1091;
    let _e51: Point = other_979;
    let _e54: Point = other_979;
    let _e57: Point = other_979;
    let _e62: Point = self_1091;
    let _e65: Point = self_1091;
    let _e68: Point = self_1091;
    let _e72: Point = other_979;
    let _e81: Point = self_1091;
    let _e85: Point = other_979;
    let _e88: Point = other_979;
    let _e91: Point = other_979;
    let _e101: Point = self_1091;
    let _e105: Point = other_979;
    let _e108: Point = other_979;
    let _e111: Point = other_979;
    let _e122: Point = self_1091;
    let _e126: Point = other_979;
    let _e129: Point = other_979;
    let _e132: Point = other_979;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)) + ((vec3<f32>(_e62.g0_.x, _e65.g0_.y, _e68.g0_.z) * vec3(_e72.g0_.w)) * vec3(-1.0))), ((((vec3(_e81.g0_.y) * vec3<f32>(_e85.g0_.z, _e88.g0_.z, _e91.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e101.g0_.z) * vec3<f32>(_e105.g0_.y, _e108.g0_.x, _e111.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e122.g0_.x) * vec3<f32>(_e126.g0_.x, _e129.g0_.z, _e132.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn point_point_geometric_anti_product(self_1092: Point, other_980: Point) -> Translator {
    var self_1093: Point;
    var other_981: Point;

    self_1093 = self_1092;
    other_981 = other_980;
    let _e4: Point = self_1093;
    let _e8: Point = other_981;
    let _e17: Point = self_1093;
    let _e20: Point = other_981;
    return Translator((((vec4(_e4.g0_.w) * _e8.g0_) * vec4<f32>(1.0, 1.0, 1.0, -1.0)) + ((_e17.g0_.xyzx * _e20.g0_.wwwx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn point_point_outer_product(self_1094: Point, other_982: Point) -> Line {
    var self_1095: Point;
    var other_983: Point;

    self_1095 = self_1094;
    other_983 = other_982;
    let _e4: Point = self_1095;
    let _e8: Point = other_983;
    let _e11: Point = other_983;
    let _e14: Point = other_983;
    let _e19: Point = self_1095;
    let _e22: Point = self_1095;
    let _e25: Point = self_1095;
    let _e29: Point = other_983;
    let _e38: Point = self_1095;
    let _e42: Point = other_983;
    let _e45: Point = other_983;
    let _e48: Point = other_983;
    let _e58: Point = self_1095;
    let _e62: Point = other_983;
    let _e65: Point = other_983;
    let _e68: Point = other_983;
    let _e79: Point = self_1095;
    let _e83: Point = other_983;
    let _e86: Point = other_983;
    let _e89: Point = other_983;
    return Line(((vec3(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3(_e29.g0_.w)) * vec3(-1.0))), ((((vec3(_e38.g0_.y) * vec3<f32>(_e42.g0_.z, _e45.g0_.z, _e48.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e58.g0_.z) * vec3<f32>(_e62.g0_.y, _e65.g0_.x, _e68.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e79.g0_.x) * vec3<f32>(_e83.g0_.x, _e86.g0_.z, _e89.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_point_wedge(self_1096: Point, other_984: Point) -> Line {
    var self_1097: Point;
    var other_985: Point;

    self_1097 = self_1096;
    other_985 = other_984;
    let _e4: Point = self_1097;
    let _e8: Point = other_985;
    let _e11: Point = other_985;
    let _e14: Point = other_985;
    let _e19: Point = self_1097;
    let _e22: Point = self_1097;
    let _e25: Point = self_1097;
    let _e29: Point = other_985;
    let _e38: Point = self_1097;
    let _e42: Point = other_985;
    let _e45: Point = other_985;
    let _e48: Point = other_985;
    let _e58: Point = self_1097;
    let _e62: Point = other_985;
    let _e65: Point = other_985;
    let _e68: Point = other_985;
    let _e79: Point = self_1097;
    let _e83: Point = other_985;
    let _e86: Point = other_985;
    let _e89: Point = other_985;
    return Line(((vec3(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3(_e29.g0_.w)) * vec3(-1.0))), ((((vec3(_e38.g0_.y) * vec3<f32>(_e42.g0_.z, _e45.g0_.z, _e48.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e58.g0_.z) * vec3<f32>(_e62.g0_.y, _e65.g0_.x, _e68.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e79.g0_.x) * vec3<f32>(_e83.g0_.x, _e86.g0_.z, _e89.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_point_join(self_1098: Point, other_986: Point) -> Line {
    var self_1099: Point;
    var other_987: Point;

    self_1099 = self_1098;
    other_987 = other_986;
    let _e4: Point = self_1099;
    let _e8: Point = other_987;
    let _e11: Point = other_987;
    let _e14: Point = other_987;
    let _e19: Point = self_1099;
    let _e22: Point = self_1099;
    let _e25: Point = self_1099;
    let _e29: Point = other_987;
    let _e38: Point = self_1099;
    let _e42: Point = other_987;
    let _e45: Point = other_987;
    let _e48: Point = other_987;
    let _e58: Point = self_1099;
    let _e62: Point = other_987;
    let _e65: Point = other_987;
    let _e68: Point = other_987;
    let _e79: Point = self_1099;
    let _e83: Point = other_987;
    let _e86: Point = other_987;
    let _e89: Point = other_987;
    return Line(((vec3(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3(_e29.g0_.w)) * vec3(-1.0))), ((((vec3(_e38.g0_.y) * vec3<f32>(_e42.g0_.z, _e45.g0_.z, _e48.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e58.g0_.z) * vec3<f32>(_e62.g0_.y, _e65.g0_.x, _e68.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e79.g0_.x) * vec3<f32>(_e83.g0_.x, _e86.g0_.z, _e89.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_point_inner_product(self_1100: Point, other_988: Point) -> Scalar {
    var self_1101: Point;
    var other_989: Point;

    self_1101 = self_1100;
    other_989 = other_988;
    let _e4: Point = self_1101;
    let _e7: Point = other_989;
    let _e11: Point = self_1101;
    let _e14: Point = other_989;
    let _e19: Point = self_1101;
    let _e22: Point = other_989;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_inner_anti_product(self_1102: Point, other_990: Point) -> AntiScalar {
    var self_1103: Point;
    var other_991: Point;

    self_1103 = self_1102;
    other_991 = other_990;
    let _e5: Point = self_1103;
    let _e8: Point = other_991;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_left_contraction(self_1104: Point, other_992: Point) -> Scalar {
    var self_1105: Point;
    var other_993: Point;

    self_1105 = self_1104;
    other_993 = other_992;
    let _e4: Point = self_1105;
    let _e7: Point = other_993;
    let _e11: Point = self_1105;
    let _e14: Point = other_993;
    let _e19: Point = self_1105;
    let _e22: Point = other_993;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_right_contraction(self_1106: Point, other_994: Point) -> Scalar {
    var self_1107: Point;
    var other_995: Point;

    self_1107 = self_1106;
    other_995 = other_994;
    let _e4: Point = self_1107;
    let _e7: Point = other_995;
    let _e11: Point = self_1107;
    let _e14: Point = other_995;
    let _e19: Point = self_1107;
    let _e22: Point = other_995;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_left_anti_contraction(self_1108: Point, other_996: Point) -> AntiScalar {
    var self_1109: Point;
    var other_997: Point;

    self_1109 = self_1108;
    other_997 = other_996;
    let _e5: Point = self_1109;
    let _e8: Point = other_997;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_right_anti_contraction(self_1110: Point, other_998: Point) -> AntiScalar {
    var self_1111: Point;
    var other_999: Point;

    self_1111 = self_1110;
    other_999 = other_998;
    let _e5: Point = self_1111;
    let _e8: Point = other_999;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_scalar_product(self_1112: Point, other_1000: Point) -> Scalar {
    var self_1113: Point;
    var other_1001: Point;

    self_1113 = self_1112;
    other_1001 = other_1000;
    let _e4: Point = self_1113;
    let _e7: Point = other_1001;
    let _e11: Point = self_1113;
    let _e14: Point = other_1001;
    let _e19: Point = self_1113;
    let _e22: Point = other_1001;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_dot(self_1114: Point, other_1002: Point) -> Scalar {
    var self_1115: Point;
    var other_1003: Point;

    self_1115 = self_1114;
    other_1003 = other_1002;
    let _e4: Point = self_1115;
    let _e7: Point = other_1003;
    let _e11: Point = self_1115;
    let _e14: Point = other_1003;
    let _e19: Point = self_1115;
    let _e22: Point = other_1003;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_anti_scalar_product(self_1116: Point, other_1004: Point) -> AntiScalar {
    var self_1117: Point;
    var other_1005: Point;

    self_1117 = self_1116;
    other_1005 = other_1004;
    let _e5: Point = self_1117;
    let _e8: Point = other_1005;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_anti_dot(self_1118: Point, other_1006: Point) -> AntiScalar {
    var self_1119: Point;
    var other_1007: Point;

    self_1119 = self_1118;
    other_1007 = other_1006;
    let _e5: Point = self_1119;
    let _e8: Point = other_1007;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_line_geometric_product(self_1120: Point, other_1008: Line) -> Flector {
    var self_1121: Point;
    var other_1009: Line;

    self_1121 = self_1120;
    other_1009 = other_1008;
    let _e4: Point = self_1121;
    let _e8: Line = other_1009;
    let _e11: Line = other_1009;
    let _e14: Line = other_1009;
    let _e17: Line = other_1009;
    let _e28: Point = self_1121;
    let _e32: Line = other_1009;
    let _e35: Line = other_1009;
    let _e38: Line = other_1009;
    let _e41: Line = other_1009;
    let _e53: Point = self_1121;
    let _e57: Line = other_1009;
    let _e60: Line = other_1009;
    let _e63: Line = other_1009;
    let _e66: Line = other_1009;
    let _e78: Point = self_1121;
    let _e82: Line = other_1009;
    let _e85: Line = other_1009;
    let _e88: Line = other_1009;
    let _e91: Line = other_1009;
    let _e102: Point = self_1121;
    let _e106: Line = other_1009;
    let _e109: Line = other_1009;
    let _e112: Line = other_1009;
    let _e115: Line = other_1009;
    let _e127: Point = self_1121;
    let _e131: Line = other_1009;
    let _e134: Line = other_1009;
    let _e137: Line = other_1009;
    let _e140: Line = other_1009;
    let _e152: Point = self_1121;
    let _e156: Line = other_1009;
    let _e159: Line = other_1009;
    let _e162: Line = other_1009;
    let _e165: Line = other_1009;
    return Flector(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((vec4(_e78.g0_.y) * vec4<f32>(_e82.g0_.z, _e85.g0_.z, _e88.g0_.x, _e91.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e102.g0_.z) * vec4<f32>(_e106.g0_.y, _e109.g0_.x, _e112.g0_.y, _e115.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e127.g0_.w) * vec4<f32>(_e131.g1_.x, _e134.g1_.y, _e137.g1_.z, _e140.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e152.g0_.x) * vec4<f32>(_e156.g0_.x, _e159.g0_.z, _e162.g0_.y, _e165.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_geometric_anti_product(self_1122: Point, other_1010: Line) -> Flector {
    var self_1123: Point;
    var other_1011: Line;

    self_1123 = self_1122;
    other_1011 = other_1010;
    let _e4: Point = self_1123;
    let _e8: Line = other_1011;
    let _e11: Line = other_1011;
    let _e14: Line = other_1011;
    let _e17: Line = other_1011;
    let _e28: Point = self_1123;
    let _e32: Line = other_1011;
    let _e35: Line = other_1011;
    let _e38: Line = other_1011;
    let _e41: Line = other_1011;
    let _e53: Point = self_1123;
    let _e57: Line = other_1011;
    let _e60: Line = other_1011;
    let _e63: Line = other_1011;
    let _e66: Line = other_1011;
    let _e78: Point = self_1123;
    let _e82: Line = other_1011;
    let _e85: Line = other_1011;
    let _e88: Line = other_1011;
    let _e91: Line = other_1011;
    let _e103: Point = self_1123;
    let _e107: Line = other_1011;
    let _e118: Point = self_1123;
    let _e122: Line = other_1011;
    let _e134: Point = self_1123;
    let _e137: Line = other_1011;
    let _e140: Line = other_1011;
    let _e143: Line = other_1011;
    let _e146: Line = other_1011;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g0_.y)) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g0_.x)) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), ((((vec4(_e103.g0_.y) * vec4(_e107.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e118.g0_.z) * vec4(_e122.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e134.g0_.wwwx * vec4<f32>(_e137.g0_.x, _e140.g0_.y, _e143.g0_.z, _e146.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_line_outer_product(self_1124: Point, other_1012: Line) -> Plane {
    var self_1125: Point;
    var other_1013: Line;

    self_1125 = self_1124;
    other_1013 = other_1012;
    let _e4: Point = self_1125;
    let _e8: Line = other_1013;
    let _e11: Line = other_1013;
    let _e14: Line = other_1013;
    let _e17: Line = other_1013;
    let _e28: Point = self_1125;
    let _e32: Line = other_1013;
    let _e35: Line = other_1013;
    let _e38: Line = other_1013;
    let _e41: Line = other_1013;
    let _e53: Point = self_1125;
    let _e57: Line = other_1013;
    let _e60: Line = other_1013;
    let _e63: Line = other_1013;
    let _e66: Line = other_1013;
    let _e78: Point = self_1125;
    let _e82: Line = other_1013;
    let _e85: Line = other_1013;
    let _e88: Line = other_1013;
    let _e91: Line = other_1013;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_wedge(self_1126: Point, other_1014: Line) -> Plane {
    var self_1127: Point;
    var other_1015: Line;

    self_1127 = self_1126;
    other_1015 = other_1014;
    let _e4: Point = self_1127;
    let _e8: Line = other_1015;
    let _e11: Line = other_1015;
    let _e14: Line = other_1015;
    let _e17: Line = other_1015;
    let _e28: Point = self_1127;
    let _e32: Line = other_1015;
    let _e35: Line = other_1015;
    let _e38: Line = other_1015;
    let _e41: Line = other_1015;
    let _e53: Point = self_1127;
    let _e57: Line = other_1015;
    let _e60: Line = other_1015;
    let _e63: Line = other_1015;
    let _e66: Line = other_1015;
    let _e78: Point = self_1127;
    let _e82: Line = other_1015;
    let _e85: Line = other_1015;
    let _e88: Line = other_1015;
    let _e91: Line = other_1015;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_join(self_1128: Point, other_1016: Line) -> Plane {
    var self_1129: Point;
    var other_1017: Line;

    self_1129 = self_1128;
    other_1017 = other_1016;
    let _e4: Point = self_1129;
    let _e8: Line = other_1017;
    let _e11: Line = other_1017;
    let _e14: Line = other_1017;
    let _e17: Line = other_1017;
    let _e28: Point = self_1129;
    let _e32: Line = other_1017;
    let _e35: Line = other_1017;
    let _e38: Line = other_1017;
    let _e41: Line = other_1017;
    let _e53: Point = self_1129;
    let _e57: Line = other_1017;
    let _e60: Line = other_1017;
    let _e63: Line = other_1017;
    let _e66: Line = other_1017;
    let _e78: Point = self_1129;
    let _e82: Line = other_1017;
    let _e85: Line = other_1017;
    let _e88: Line = other_1017;
    let _e91: Line = other_1017;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_inner_product(self_1130: Point, other_1018: Line) -> Point {
    var self_1131: Point;
    var other_1019: Line;

    self_1131 = self_1130;
    other_1019 = other_1018;
    let _e4: Point = self_1131;
    let _e8: Line = other_1019;
    let _e11: Line = other_1019;
    let _e14: Line = other_1019;
    let _e17: Line = other_1019;
    let _e28: Point = self_1131;
    let _e32: Line = other_1019;
    let _e35: Line = other_1019;
    let _e38: Line = other_1019;
    let _e41: Line = other_1019;
    let _e53: Point = self_1131;
    let _e57: Line = other_1019;
    let _e60: Line = other_1019;
    let _e63: Line = other_1019;
    let _e66: Line = other_1019;
    return Point(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_inner_anti_product(self_1132: Point, other_1020: Line) -> Plane {
    var self_1133: Point;
    var other_1021: Line;

    self_1133 = self_1132;
    other_1021 = other_1020;
    let _e4: Point = self_1133;
    let _e8: Line = other_1021;
    let _e19: Point = self_1133;
    let _e23: Line = other_1021;
    let _e35: Point = self_1133;
    let _e38: Line = other_1021;
    let _e41: Line = other_1021;
    let _e44: Line = other_1021;
    let _e47: Line = other_1021;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_line_left_contraction(self_1134: Point, other_1022: Line) -> Point {
    var self_1135: Point;
    var other_1023: Line;

    self_1135 = self_1134;
    other_1023 = other_1022;
    let _e4: Point = self_1135;
    let _e8: Line = other_1023;
    let _e11: Line = other_1023;
    let _e14: Line = other_1023;
    let _e17: Line = other_1023;
    let _e28: Point = self_1135;
    let _e32: Line = other_1023;
    let _e35: Line = other_1023;
    let _e38: Line = other_1023;
    let _e41: Line = other_1023;
    let _e53: Point = self_1135;
    let _e57: Line = other_1023;
    let _e60: Line = other_1023;
    let _e63: Line = other_1023;
    let _e66: Line = other_1023;
    return Point(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_line_right_anti_contraction(self_1136: Point, other_1024: Line) -> Plane {
    var self_1137: Point;
    var other_1025: Line;

    self_1137 = self_1136;
    other_1025 = other_1024;
    let _e4: Point = self_1137;
    let _e8: Line = other_1025;
    let _e19: Point = self_1137;
    let _e23: Line = other_1025;
    let _e35: Point = self_1137;
    let _e38: Line = other_1025;
    let _e41: Line = other_1025;
    let _e44: Line = other_1025;
    let _e47: Line = other_1025;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_plane_add(self_1138: Point, other_1026: Plane) -> Flector {
    var self_1139: Point;
    var other_1027: Plane;

    self_1139 = self_1138;
    other_1027 = other_1026;
    let _e4: Point = self_1139;
    let _e6: Plane = other_1027;
    return Flector(_e4.g0_, _e6.g0_);
}

fn point_plane_sub(self_1140: Point, other_1028: Plane) -> Flector {
    var self_1141: Point;
    var other_1029: Plane;

    self_1141 = self_1140;
    other_1029 = other_1028;
    let _e4: Point = self_1141;
    let _e8: Plane = other_1029;
    return Flector(_e4.g0_, (vec4(0.0) - _e8.g0_));
}

fn point_plane_geometric_product(self_1142: Point, other_1030: Plane) -> Motor {
    var self_1143: Point;
    var other_1031: Plane;

    self_1143 = self_1142;
    other_1031 = other_1030;
    let _e4: Point = self_1143;
    let _e8: Plane = other_1031;
    let _e18: Point = self_1143;
    let _e22: Plane = other_1031;
    let _e33: Point = self_1143;
    let _e37: Plane = other_1031;
    let _e49: Point = self_1143;
    let _e53: Plane = other_1031;
    let _e64: Point = self_1143;
    let _e67: Point = self_1143;
    let _e70: Point = self_1143;
    let _e74: Plane = other_1031;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyz) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 1.0))), ((vec3<f32>(_e64.g0_.x, _e67.g0_.y, _e70.g0_.z) * vec3(_e74.g0_.w)) * vec3(-1.0)));
}

fn point_plane_geometric_anti_product(self_1144: Point, other_1032: Plane) -> MultiVector {
    var self_1145: Point;
    var other_1033: Plane;

    self_1145 = self_1144;
    other_1033 = other_1032;
    let _e4: Point = self_1145;
    let _e8: Plane = other_1033;
    let _e17: Point = self_1145;
    let _e21: Plane = other_1033;
    let _e31: Point = self_1145;
    let _e35: Plane = other_1033;
    let _e45: Point = self_1145;
    let _e49: Plane = other_1033;
    let _e63: Point = self_1145;
    let _e67: Plane = other_1033;
    let _e70: Plane = other_1033;
    let _e73: Plane = other_1033;
    let _e79: Point = self_1145;
    let _e83: Plane = other_1033;
    let _e86: Plane = other_1033;
    let _e89: Plane = other_1033;
    let _e99: Point = self_1145;
    let _e103: Plane = other_1033;
    let _e106: Plane = other_1033;
    let _e109: Plane = other_1033;
    let _e120: Point = self_1145;
    let _e124: Plane = other_1033;
    let _e127: Plane = other_1033;
    let _e130: Plane = other_1033;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), (vec3(0.0) - (vec3(_e63.g0_.w) * vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z))), ((((vec3(_e79.g0_.y) * vec3<f32>(_e83.g0_.z, _e86.g0_.z, _e89.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e99.g0_.z) * vec3<f32>(_e103.g0_.y, _e106.g0_.x, _e109.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e120.g0_.x) * vec3<f32>(_e124.g0_.x, _e127.g0_.z, _e130.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn point_plane_regressive_product(self_1146: Point, other_1034: Plane) -> Scalar {
    var self_1147: Point;
    var other_1035: Plane;

    self_1147 = self_1146;
    other_1035 = other_1034;
    let _e4: Point = self_1147;
    let _e7: Plane = other_1035;
    let _e11: Point = self_1147;
    let _e14: Plane = other_1035;
    let _e19: Point = self_1147;
    let _e22: Plane = other_1035;
    let _e27: Point = self_1147;
    let _e30: Plane = other_1035;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_anti_wedge(self_1148: Point, other_1036: Plane) -> Scalar {
    var self_1149: Point;
    var other_1037: Plane;

    self_1149 = self_1148;
    other_1037 = other_1036;
    let _e4: Point = self_1149;
    let _e7: Plane = other_1037;
    let _e11: Point = self_1149;
    let _e14: Plane = other_1037;
    let _e19: Point = self_1149;
    let _e22: Plane = other_1037;
    let _e27: Point = self_1149;
    let _e30: Plane = other_1037;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_meet(self_1150: Point, other_1038: Plane) -> Scalar {
    var self_1151: Point;
    var other_1039: Plane;

    self_1151 = self_1150;
    other_1039 = other_1038;
    let _e4: Point = self_1151;
    let _e7: Plane = other_1039;
    let _e11: Point = self_1151;
    let _e14: Plane = other_1039;
    let _e19: Point = self_1151;
    let _e22: Plane = other_1039;
    let _e27: Point = self_1151;
    let _e30: Plane = other_1039;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_outer_product(self_1152: Point, other_1040: Plane) -> AntiScalar {
    var self_1153: Point;
    var other_1041: Plane;

    self_1153 = self_1152;
    other_1041 = other_1040;
    let _e4: Point = self_1153;
    let _e7: Plane = other_1041;
    let _e11: Point = self_1153;
    let _e14: Plane = other_1041;
    let _e19: Point = self_1153;
    let _e22: Plane = other_1041;
    let _e27: Point = self_1153;
    let _e30: Plane = other_1041;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_wedge(self_1154: Point, other_1042: Plane) -> AntiScalar {
    var self_1155: Point;
    var other_1043: Plane;

    self_1155 = self_1154;
    other_1043 = other_1042;
    let _e4: Point = self_1155;
    let _e7: Plane = other_1043;
    let _e11: Point = self_1155;
    let _e14: Plane = other_1043;
    let _e19: Point = self_1155;
    let _e22: Plane = other_1043;
    let _e27: Point = self_1155;
    let _e30: Plane = other_1043;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_join(self_1156: Point, other_1044: Plane) -> AntiScalar {
    var self_1157: Point;
    var other_1045: Plane;

    self_1157 = self_1156;
    other_1045 = other_1044;
    let _e4: Point = self_1157;
    let _e7: Plane = other_1045;
    let _e11: Point = self_1157;
    let _e14: Plane = other_1045;
    let _e19: Point = self_1157;
    let _e22: Plane = other_1045;
    let _e27: Point = self_1157;
    let _e30: Plane = other_1045;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_inner_product(self_1158: Point, other_1046: Plane) -> Line {
    var self_1159: Point;
    var other_1047: Plane;

    self_1159 = self_1158;
    other_1047 = other_1046;
    let _e4: Point = self_1159;
    let _e8: Plane = other_1047;
    let _e11: Plane = other_1047;
    let _e14: Plane = other_1047;
    let _e24: Point = self_1159;
    let _e28: Plane = other_1047;
    let _e31: Plane = other_1047;
    let _e34: Plane = other_1047;
    let _e45: Point = self_1159;
    let _e49: Plane = other_1047;
    let _e52: Plane = other_1047;
    let _e55: Plane = other_1047;
    let _e66: Point = self_1159;
    let _e69: Point = self_1159;
    let _e72: Point = self_1159;
    let _e76: Plane = other_1047;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z) * vec3(_e76.g0_.w)) * vec3(-1.0)));
}

fn point_plane_inner_anti_product(self_1160: Point, other_1048: Plane) -> Line {
    var self_1161: Point;
    var other_1049: Plane;

    self_1161 = self_1160;
    other_1049 = other_1048;
    let _e6: Point = self_1161;
    let _e10: Plane = other_1049;
    let _e13: Plane = other_1049;
    let _e16: Plane = other_1049;
    let _e22: Point = self_1161;
    let _e26: Plane = other_1049;
    let _e29: Plane = other_1049;
    let _e32: Plane = other_1049;
    let _e42: Point = self_1161;
    let _e46: Plane = other_1049;
    let _e49: Plane = other_1049;
    let _e52: Plane = other_1049;
    let _e63: Point = self_1161;
    let _e67: Plane = other_1049;
    let _e70: Plane = other_1049;
    let _e73: Plane = other_1049;
    return Line((vec3(0.0) - (vec3(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e42.g0_.z) * vec3<f32>(_e46.g0_.y, _e49.g0_.x, _e52.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e63.g0_.x) * vec3<f32>(_e67.g0_.x, _e70.g0_.z, _e73.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn point_plane_left_contraction(self_1162: Point, other_1050: Plane) -> Line {
    var self_1163: Point;
    var other_1051: Plane;

    self_1163 = self_1162;
    other_1051 = other_1050;
    let _e4: Point = self_1163;
    let _e8: Plane = other_1051;
    let _e11: Plane = other_1051;
    let _e14: Plane = other_1051;
    let _e24: Point = self_1163;
    let _e28: Plane = other_1051;
    let _e31: Plane = other_1051;
    let _e34: Plane = other_1051;
    let _e45: Point = self_1163;
    let _e49: Plane = other_1051;
    let _e52: Plane = other_1051;
    let _e55: Plane = other_1051;
    let _e66: Point = self_1163;
    let _e69: Point = self_1163;
    let _e72: Point = self_1163;
    let _e76: Plane = other_1051;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z) * vec3(_e76.g0_.w)) * vec3(-1.0)));
}

fn point_plane_right_anti_contraction(self_1164: Point, other_1052: Plane) -> Line {
    var self_1165: Point;
    var other_1053: Plane;

    self_1165 = self_1164;
    other_1053 = other_1052;
    let _e6: Point = self_1165;
    let _e10: Plane = other_1053;
    let _e13: Plane = other_1053;
    let _e16: Plane = other_1053;
    let _e22: Point = self_1165;
    let _e26: Plane = other_1053;
    let _e29: Plane = other_1053;
    let _e32: Plane = other_1053;
    let _e42: Point = self_1165;
    let _e46: Plane = other_1053;
    let _e49: Plane = other_1053;
    let _e52: Plane = other_1053;
    let _e63: Point = self_1165;
    let _e67: Plane = other_1053;
    let _e70: Plane = other_1053;
    let _e73: Plane = other_1053;
    return Line((vec3(0.0) - (vec3(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e42.g0_.z) * vec3<f32>(_e46.g0_.y, _e49.g0_.x, _e52.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e63.g0_.x) * vec3<f32>(_e67.g0_.x, _e70.g0_.z, _e73.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn point_motor_geometric_product(self_1166: Point, other_1054: Motor) -> Flector {
    var self_1167: Point;
    var other_1055: Motor;

    self_1167 = self_1166;
    other_1055 = other_1054;
    let _e4: Point = self_1167;
    let _e8: Motor = other_1055;
    let _e11: Motor = other_1055;
    let _e14: Motor = other_1055;
    let _e17: Motor = other_1055;
    let _e28: Point = self_1167;
    let _e32: Motor = other_1055;
    let _e35: Motor = other_1055;
    let _e38: Motor = other_1055;
    let _e41: Motor = other_1055;
    let _e53: Point = self_1167;
    let _e57: Motor = other_1055;
    let _e60: Motor = other_1055;
    let _e63: Motor = other_1055;
    let _e66: Motor = other_1055;
    let _e78: Point = self_1167;
    let _e82: Motor = other_1055;
    let _e85: Motor = other_1055;
    let _e88: Motor = other_1055;
    let _e91: Motor = other_1055;
    let _e102: Point = self_1167;
    let _e106: Motor = other_1055;
    let _e109: Motor = other_1055;
    let _e112: Motor = other_1055;
    let _e115: Motor = other_1055;
    let _e127: Point = self_1167;
    let _e131: Motor = other_1055;
    let _e134: Motor = other_1055;
    let _e137: Motor = other_1055;
    let _e140: Motor = other_1055;
    let _e152: Point = self_1167;
    let _e155: Motor = other_1055;
    let _e158: Motor = other_1055;
    let _e161: Motor = other_1055;
    let _e164: Motor = other_1055;
    return Flector(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.w, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e102.g0_.y) * vec4<f32>(_e106.g0_.z, _e109.g0_.w, _e112.g0_.x, _e115.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e127.g0_.z) * vec4<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.w, _e140.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e152.g0_.wwwx * vec4<f32>(_e155.g1_.x, _e158.g1_.y, _e161.g1_.z, _e164.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_motor_geometric_anti_product(self_1168: Point, other_1056: Motor) -> Flector {
    var self_1169: Point;
    var other_1057: Motor;

    self_1169 = self_1168;
    other_1057 = other_1056;
    let _e4: Point = self_1169;
    let _e8: Motor = other_1057;
    let _e18: Point = self_1169;
    let _e22: Motor = other_1057;
    let _e33: Point = self_1169;
    let _e37: Motor = other_1057;
    let _e40: Motor = other_1057;
    let _e43: Motor = other_1057;
    let _e46: Motor = other_1057;
    let _e58: Point = self_1169;
    let _e62: Motor = other_1057;
    let _e73: Point = self_1169;
    let _e77: Motor = other_1057;
    let _e88: Point = self_1169;
    let _e92: Motor = other_1057;
    let _e104: Point = self_1169;
    let _e107: Motor = other_1057;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e33.g0_.w) * vec4<f32>(_e37.g1_.x, _e40.g1_.y, _e43.g1_.z, _e46.g0_.w)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e58.g0_.x) * _e62.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((vec4(_e73.g0_.y) * vec4(_e77.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e88.g0_.z) * vec4(_e92.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e104.g0_.wwwx * _e107.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_motor_regressive_product(self_1170: Point, other_1058: Motor) -> Point {
    var self_1171: Point;
    var other_1059: Motor;

    self_1171 = self_1170;
    other_1059 = other_1058;
    let _e4: Point = self_1171;
    let _e6: Motor = other_1059;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_motor_anti_wedge(self_1172: Point, other_1060: Motor) -> Point {
    var self_1173: Point;
    var other_1061: Motor;

    self_1173 = self_1172;
    other_1061 = other_1060;
    let _e4: Point = self_1173;
    let _e6: Motor = other_1061;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_motor_meet(self_1174: Point, other_1062: Motor) -> Point {
    var self_1175: Point;
    var other_1063: Motor;

    self_1175 = self_1174;
    other_1063 = other_1062;
    let _e4: Point = self_1175;
    let _e6: Motor = other_1063;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_motor_outer_product(self_1176: Point, other_1064: Motor) -> Plane {
    var self_1177: Point;
    var other_1065: Motor;

    self_1177 = self_1176;
    other_1065 = other_1064;
    let _e4: Point = self_1177;
    let _e8: Motor = other_1065;
    let _e11: Motor = other_1065;
    let _e14: Motor = other_1065;
    let _e17: Motor = other_1065;
    let _e28: Point = self_1177;
    let _e32: Motor = other_1065;
    let _e35: Motor = other_1065;
    let _e38: Motor = other_1065;
    let _e41: Motor = other_1065;
    let _e53: Point = self_1177;
    let _e57: Motor = other_1065;
    let _e60: Motor = other_1065;
    let _e63: Motor = other_1065;
    let _e66: Motor = other_1065;
    let _e78: Point = self_1177;
    let _e82: Motor = other_1065;
    let _e85: Motor = other_1065;
    let _e88: Motor = other_1065;
    let _e91: Motor = other_1065;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_motor_wedge(self_1178: Point, other_1066: Motor) -> Plane {
    var self_1179: Point;
    var other_1067: Motor;

    self_1179 = self_1178;
    other_1067 = other_1066;
    let _e4: Point = self_1179;
    let _e8: Motor = other_1067;
    let _e11: Motor = other_1067;
    let _e14: Motor = other_1067;
    let _e17: Motor = other_1067;
    let _e28: Point = self_1179;
    let _e32: Motor = other_1067;
    let _e35: Motor = other_1067;
    let _e38: Motor = other_1067;
    let _e41: Motor = other_1067;
    let _e53: Point = self_1179;
    let _e57: Motor = other_1067;
    let _e60: Motor = other_1067;
    let _e63: Motor = other_1067;
    let _e66: Motor = other_1067;
    let _e78: Point = self_1179;
    let _e82: Motor = other_1067;
    let _e85: Motor = other_1067;
    let _e88: Motor = other_1067;
    let _e91: Motor = other_1067;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_motor_join(self_1180: Point, other_1068: Motor) -> Plane {
    var self_1181: Point;
    var other_1069: Motor;

    self_1181 = self_1180;
    other_1069 = other_1068;
    let _e4: Point = self_1181;
    let _e8: Motor = other_1069;
    let _e11: Motor = other_1069;
    let _e14: Motor = other_1069;
    let _e17: Motor = other_1069;
    let _e28: Point = self_1181;
    let _e32: Motor = other_1069;
    let _e35: Motor = other_1069;
    let _e38: Motor = other_1069;
    let _e41: Motor = other_1069;
    let _e53: Point = self_1181;
    let _e57: Motor = other_1069;
    let _e60: Motor = other_1069;
    let _e63: Motor = other_1069;
    let _e66: Motor = other_1069;
    let _e78: Point = self_1181;
    let _e82: Motor = other_1069;
    let _e85: Motor = other_1069;
    let _e88: Motor = other_1069;
    let _e91: Motor = other_1069;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_motor_inner_product(self_1182: Point, other_1070: Motor) -> Flector {
    var self_1183: Point;
    var other_1071: Motor;

    self_1183 = self_1182;
    other_1071 = other_1070;
    let _e4: Point = self_1183;
    let _e8: Motor = other_1071;
    let _e11: Motor = other_1071;
    let _e14: Motor = other_1071;
    let _e17: Motor = other_1071;
    let _e28: Point = self_1183;
    let _e32: Motor = other_1071;
    let _e35: Motor = other_1071;
    let _e38: Motor = other_1071;
    let _e41: Motor = other_1071;
    let _e53: Point = self_1183;
    let _e57: Motor = other_1071;
    let _e60: Motor = other_1071;
    let _e63: Motor = other_1071;
    let _e66: Motor = other_1071;
    let _e78: Point = self_1183;
    let _e81: Motor = other_1071;
    return Flector(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e78.g0_.xyzx * _e81.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_motor_inner_anti_product(self_1184: Point, other_1072: Motor) -> Flector {
    var self_1185: Point;
    var other_1073: Motor;

    self_1185 = self_1184;
    other_1073 = other_1072;
    let _e4: Point = self_1185;
    let _e6: Motor = other_1073;
    let _e11: Point = self_1185;
    let _e15: Motor = other_1073;
    let _e26: Point = self_1185;
    let _e30: Motor = other_1073;
    let _e42: Point = self_1185;
    let _e45: Motor = other_1073;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e42.g0_.wwwx * _e45.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_motor_left_contraction(self_1186: Point, other_1074: Motor) -> Flector {
    var self_1187: Point;
    var other_1075: Motor;

    self_1187 = self_1186;
    other_1075 = other_1074;
    let _e4: Point = self_1187;
    let _e8: Motor = other_1075;
    let _e11: Motor = other_1075;
    let _e14: Motor = other_1075;
    let _e17: Motor = other_1075;
    let _e28: Point = self_1187;
    let _e32: Motor = other_1075;
    let _e35: Motor = other_1075;
    let _e38: Motor = other_1075;
    let _e41: Motor = other_1075;
    let _e53: Point = self_1187;
    let _e57: Motor = other_1075;
    let _e60: Motor = other_1075;
    let _e63: Motor = other_1075;
    let _e66: Motor = other_1075;
    let _e78: Point = self_1187;
    let _e81: Motor = other_1075;
    return Flector(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e78.g0_.xyzx * _e81.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_motor_right_anti_contraction(self_1188: Point, other_1076: Motor) -> Flector {
    var self_1189: Point;
    var other_1077: Motor;

    self_1189 = self_1188;
    other_1077 = other_1076;
    let _e4: Point = self_1189;
    let _e6: Motor = other_1077;
    let _e11: Point = self_1189;
    let _e15: Motor = other_1077;
    let _e26: Point = self_1189;
    let _e30: Motor = other_1077;
    let _e42: Point = self_1189;
    let _e45: Motor = other_1077;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e42.g0_.wwwx * _e45.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_rotor_geometric_product(self_1190: Point, other_1078: Rotor) -> Flector {
    var self_1191: Point;
    var other_1079: Rotor;

    self_1191 = self_1190;
    other_1079 = other_1078;
    let _e4: Point = self_1191;
    let _e8: Rotor = other_1079;
    let _e19: Point = self_1191;
    let _e23: Rotor = other_1079;
    let _e35: Point = self_1191;
    let _e39: Rotor = other_1079;
    let _e51: Point = self_1191;
    let _e55: Rotor = other_1079;
    let _e65: Point = self_1191;
    let _e69: Rotor = other_1079;
    let _e80: Point = self_1191;
    let _e84: Rotor = other_1079;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec4(_e51.g0_.y) * _e55.g0_.zwxz) * vec4<f32>(-1.0, 1.0, 1.0, 0.0)) + ((vec4(_e65.g0_.z) * _e69.g0_.yxwy) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e80.g0_.x) * _e84.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, 0.0))));
}

fn point_rotor_geometric_anti_product(self_1192: Point, other_1080: Rotor) -> Flector {
    var self_1193: Point;
    var other_1081: Rotor;

    self_1193 = self_1192;
    other_1081 = other_1080;
    let _e4: Point = self_1193;
    let _e8: Rotor = other_1081;
    let _e18: Point = self_1193;
    let _e22: Rotor = other_1081;
    let _e33: Point = self_1193;
    let _e36: Rotor = other_1081;
    let _e47: Point = self_1193;
    let _e51: Rotor = other_1081;
    let _e62: Point = self_1193;
    let _e66: Rotor = other_1081;
    let _e78: Point = self_1193;
    let _e81: Rotor = other_1081;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((_e33.g0_.xxxw * _e36.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 1.0))), ((((vec4(_e47.g0_.y) * vec4(_e51.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e62.g0_.z) * vec4(_e66.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e78.g0_.wwwx * _e81.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_rotor_regressive_product(self_1194: Point, other_1082: Rotor) -> Point {
    var self_1195: Point;
    var other_1083: Rotor;

    self_1195 = self_1194;
    other_1083 = other_1082;
    let _e4: Point = self_1195;
    let _e6: Rotor = other_1083;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_rotor_anti_wedge(self_1196: Point, other_1084: Rotor) -> Point {
    var self_1197: Point;
    var other_1085: Rotor;

    self_1197 = self_1196;
    other_1085 = other_1084;
    let _e4: Point = self_1197;
    let _e6: Rotor = other_1085;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_rotor_meet(self_1198: Point, other_1086: Rotor) -> Point {
    var self_1199: Point;
    var other_1087: Rotor;

    self_1199 = self_1198;
    other_1087 = other_1086;
    let _e4: Point = self_1199;
    let _e6: Rotor = other_1087;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_rotor_outer_product(self_1200: Point, other_1088: Rotor) -> Plane {
    var self_1201: Point;
    var other_1089: Rotor;

    self_1201 = self_1200;
    other_1089 = other_1088;
    let _e4: Point = self_1201;
    let _e8: Rotor = other_1089;
    let _e18: Point = self_1201;
    let _e22: Rotor = other_1089;
    let _e33: Point = self_1201;
    let _e37: Rotor = other_1089;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn point_rotor_wedge(self_1202: Point, other_1090: Rotor) -> Plane {
    var self_1203: Point;
    var other_1091: Rotor;

    self_1203 = self_1202;
    other_1091 = other_1090;
    let _e4: Point = self_1203;
    let _e8: Rotor = other_1091;
    let _e18: Point = self_1203;
    let _e22: Rotor = other_1091;
    let _e33: Point = self_1203;
    let _e37: Rotor = other_1091;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn point_rotor_join(self_1204: Point, other_1092: Rotor) -> Plane {
    var self_1205: Point;
    var other_1093: Rotor;

    self_1205 = self_1204;
    other_1093 = other_1092;
    let _e4: Point = self_1205;
    let _e8: Rotor = other_1093;
    let _e18: Point = self_1205;
    let _e22: Rotor = other_1093;
    let _e33: Point = self_1205;
    let _e37: Rotor = other_1093;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn point_rotor_inner_product(self_1206: Point, other_1094: Rotor) -> Flector {
    var self_1207: Point;
    var other_1095: Rotor;

    self_1207 = self_1206;
    other_1095 = other_1094;
    let _e4: Point = self_1207;
    let _e8: Rotor = other_1095;
    let _e19: Point = self_1207;
    let _e23: Rotor = other_1095;
    let _e35: Point = self_1207;
    let _e39: Rotor = other_1095;
    let _e51: Point = self_1207;
    let _e54: Rotor = other_1095;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((_e51.g0_.xyzx * _e54.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_rotor_inner_anti_product(self_1208: Point, other_1096: Rotor) -> Flector {
    var self_1209: Point;
    var other_1097: Rotor;

    self_1209 = self_1208;
    other_1097 = other_1096;
    let _e4: Point = self_1209;
    let _e6: Rotor = other_1097;
    let _e11: Point = self_1209;
    let _e15: Rotor = other_1097;
    let _e26: Point = self_1209;
    let _e30: Rotor = other_1097;
    let _e42: Point = self_1209;
    let _e45: Rotor = other_1097;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e42.g0_.wwwx * _e45.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_rotor_left_contraction(self_1210: Point, other_1098: Rotor) -> Flector {
    var self_1211: Point;
    var other_1099: Rotor;

    self_1211 = self_1210;
    other_1099 = other_1098;
    let _e4: Point = self_1211;
    let _e8: Rotor = other_1099;
    let _e19: Point = self_1211;
    let _e23: Rotor = other_1099;
    let _e35: Point = self_1211;
    let _e39: Rotor = other_1099;
    let _e51: Point = self_1211;
    let _e54: Rotor = other_1099;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((_e51.g0_.xyzx * _e54.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_rotor_right_anti_contraction(self_1212: Point, other_1100: Rotor) -> Flector {
    var self_1213: Point;
    var other_1101: Rotor;

    self_1213 = self_1212;
    other_1101 = other_1100;
    let _e4: Point = self_1213;
    let _e6: Rotor = other_1101;
    let _e11: Point = self_1213;
    let _e15: Rotor = other_1101;
    let _e26: Point = self_1213;
    let _e30: Rotor = other_1101;
    let _e42: Point = self_1213;
    let _e45: Rotor = other_1101;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e42.g0_.wwwx * _e45.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_translator_geometric_product(self_1214: Point, other_1102: Translator) -> Flector {
    var self_1215: Point;
    var other_1103: Translator;

    self_1215 = self_1214;
    other_1103 = other_1102;
    let _e4: Point = self_1215;
    let _e8: Translator = other_1103;
    let _e18: Point = self_1215;
    let _e22: Translator = other_1103;
    let _e33: Point = self_1215;
    let _e37: Translator = other_1103;
    let _e48: Point = self_1215;
    let _e52: Translator = other_1103;
    let _e62: Point = self_1215;
    let _e66: Translator = other_1103;
    let _e77: Point = self_1215;
    let _e81: Translator = other_1103;
    let _e92: Point = self_1215;
    let _e96: Translator = other_1103;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (((((vec4(_e48.g0_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e62.g0_.z) * _e66.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e77.g0_.w) * _e81.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e92.g0_.x) * _e96.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn point_translator_geometric_anti_product(self_1216: Point, other_1104: Translator) -> Point {
    var self_1217: Point;
    var other_1105: Translator;

    self_1217 = self_1216;
    other_1105 = other_1104;
    let _e4: Point = self_1217;
    let _e8: Translator = other_1105;
    let _e17: Point = self_1217;
    let _e20: Translator = other_1105;
    return Point((((vec4(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-1.0, -1.0, -1.0, 1.0)) + ((_e17.g0_.xyzx * _e20.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_translator_regressive_product(self_1218: Point, other_1106: Translator) -> Point {
    var self_1219: Point;
    var other_1107: Translator;

    self_1219 = self_1218;
    other_1107 = other_1106;
    let _e4: Point = self_1219;
    let _e6: Translator = other_1107;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_translator_anti_wedge(self_1220: Point, other_1108: Translator) -> Point {
    var self_1221: Point;
    var other_1109: Translator;

    self_1221 = self_1220;
    other_1109 = other_1108;
    let _e4: Point = self_1221;
    let _e6: Translator = other_1109;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_translator_meet(self_1222: Point, other_1110: Translator) -> Point {
    var self_1223: Point;
    var other_1111: Translator;

    self_1223 = self_1222;
    other_1111 = other_1110;
    let _e4: Point = self_1223;
    let _e6: Translator = other_1111;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_translator_outer_product(self_1224: Point, other_1112: Translator) -> Plane {
    var self_1225: Point;
    var other_1113: Translator;

    self_1225 = self_1224;
    other_1113 = other_1112;
    let _e4: Point = self_1225;
    let _e8: Translator = other_1113;
    let _e19: Point = self_1225;
    let _e23: Translator = other_1113;
    let _e35: Point = self_1225;
    let _e38: Translator = other_1113;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_translator_wedge(self_1226: Point, other_1114: Translator) -> Plane {
    var self_1227: Point;
    var other_1115: Translator;

    self_1227 = self_1226;
    other_1115 = other_1114;
    let _e4: Point = self_1227;
    let _e8: Translator = other_1115;
    let _e19: Point = self_1227;
    let _e23: Translator = other_1115;
    let _e35: Point = self_1227;
    let _e38: Translator = other_1115;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_translator_join(self_1228: Point, other_1116: Translator) -> Plane {
    var self_1229: Point;
    var other_1117: Translator;

    self_1229 = self_1228;
    other_1117 = other_1116;
    let _e4: Point = self_1229;
    let _e8: Translator = other_1117;
    let _e19: Point = self_1229;
    let _e23: Translator = other_1117;
    let _e35: Point = self_1229;
    let _e38: Translator = other_1117;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_translator_inner_product(self_1230: Point, other_1118: Translator) -> Flector {
    var self_1231: Point;
    var other_1119: Translator;

    self_1231 = self_1230;
    other_1119 = other_1118;
    let _e4: Point = self_1231;
    let _e8: Translator = other_1119;
    let _e18: Point = self_1231;
    let _e22: Translator = other_1119;
    let _e33: Point = self_1231;
    let _e37: Translator = other_1119;
    let _e48: Point = self_1231;
    let _e51: Translator = other_1119;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), ((_e48.g0_.xyzx * _e51.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_translator_inner_anti_product(self_1232: Point, other_1120: Translator) -> Point {
    var self_1233: Point;
    var other_1121: Translator;

    self_1233 = self_1232;
    other_1121 = other_1120;
    let _e4: Point = self_1233;
    let _e6: Translator = other_1121;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_translator_left_contraction(self_1234: Point, other_1122: Translator) -> Flector {
    var self_1235: Point;
    var other_1123: Translator;

    self_1235 = self_1234;
    other_1123 = other_1122;
    let _e4: Point = self_1235;
    let _e8: Translator = other_1123;
    let _e18: Point = self_1235;
    let _e22: Translator = other_1123;
    let _e33: Point = self_1235;
    let _e37: Translator = other_1123;
    let _e48: Point = self_1235;
    let _e51: Translator = other_1123;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), ((_e48.g0_.xyzx * _e51.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_translator_right_anti_contraction(self_1236: Point, other_1124: Translator) -> Point {
    var self_1237: Point;
    var other_1125: Translator;

    self_1237 = self_1236;
    other_1125 = other_1124;
    let _e4: Point = self_1237;
    let _e6: Translator = other_1125;
    return Point((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn point_flector_add(self_1238: Point, other_1126: Flector) -> Flector {
    var self_1239: Point;
    var other_1127: Flector;

    self_1239 = self_1238;
    other_1127 = other_1126;
    let _e4: Point = self_1239;
    let _e6: Flector = other_1127;
    let _e9: Flector = other_1127;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn point_flector_sub(self_1240: Point, other_1128: Flector) -> Flector {
    var self_1241: Point;
    var other_1129: Flector;

    self_1241 = self_1240;
    other_1129 = other_1128;
    let _e4: Point = self_1241;
    let _e6: Flector = other_1129;
    let _e11: Flector = other_1129;
    return Flector((_e4.g0_ - _e6.g0_), (vec4(0.0) - _e11.g1_));
}

fn point_flector_geometric_product(self_1242: Point, other_1130: Flector) -> MultiVector {
    var self_1243: Point;
    var other_1131: Flector;

    self_1243 = self_1242;
    other_1131 = other_1130;
    let _e4: Point = self_1243;
    let _e8: Flector = other_1131;
    let _e11: Flector = other_1131;
    let _e16: Point = self_1243;
    let _e20: Flector = other_1131;
    let _e23: Flector = other_1131;
    let _e29: Point = self_1243;
    let _e33: Flector = other_1131;
    let _e36: Flector = other_1131;
    let _e42: Point = self_1243;
    let _e45: Point = self_1243;
    let _e49: Flector = other_1131;
    let _e52: Flector = other_1131;
    let _e64: Point = self_1243;
    let _e68: Flector = other_1131;
    let _e71: Flector = other_1131;
    let _e74: Flector = other_1131;
    let _e84: Point = self_1243;
    let _e88: Flector = other_1131;
    let _e91: Flector = other_1131;
    let _e94: Flector = other_1131;
    let _e105: Point = self_1243;
    let _e109: Flector = other_1131;
    let _e112: Flector = other_1131;
    let _e115: Flector = other_1131;
    let _e126: Point = self_1243;
    let _e130: Flector = other_1131;
    let _e133: Flector = other_1131;
    let _e136: Flector = other_1131;
    let _e142: Point = self_1243;
    let _e146: Flector = other_1131;
    let _e149: Flector = other_1131;
    let _e152: Flector = other_1131;
    let _e162: Point = self_1243;
    let _e166: Flector = other_1131;
    let _e169: Flector = other_1131;
    let _e172: Flector = other_1131;
    let _e183: Point = self_1243;
    let _e187: Flector = other_1131;
    let _e190: Flector = other_1131;
    let _e193: Flector = other_1131;
    return MultiVector(((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g1_.x)) + (vec2(_e16.g0_.y) * vec2<f32>(_e20.g0_.y, _e23.g1_.y))) + (vec2(_e29.g0_.z) * vec2<f32>(_e33.g0_.z, _e36.g1_.z))) + ((vec2<f32>(_e42.g0_.x, _e45.g0_.w) * vec2<f32>(_e49.g1_.x, _e52.g1_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (((((vec3(_e64.g0_.x) * vec3<f32>(_e68.g0_.w, _e71.g1_.z, _e74.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e84.g0_.y) * vec3<f32>(_e88.g1_.z, _e91.g0_.w, _e94.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e105.g0_.z) * vec3<f32>(_e109.g1_.y, _e112.g1_.x, _e115.g0_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e126.g0_.w) * vec3<f32>(_e130.g0_.x, _e133.g0_.y, _e136.g0_.z))), ((((vec3(_e142.g0_.x) * vec3<f32>(_e146.g1_.w, _e149.g0_.z, _e152.g0_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e162.g0_.y) * vec3<f32>(_e166.g0_.z, _e169.g1_.w, _e172.g0_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e183.g0_.z) * vec3<f32>(_e187.g0_.y, _e190.g0_.x, _e193.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))), vec4(0.0));
}

fn point_flector_geometric_anti_product(self_1244: Point, other_1132: Flector) -> MultiVector {
    var self_1245: Point;
    var other_1133: Flector;

    self_1245 = self_1244;
    other_1133 = other_1132;
    let _e4: Point = self_1245;
    let _e8: Flector = other_1133;
    let _e17: Point = self_1245;
    let _e21: Flector = other_1133;
    let _e31: Point = self_1245;
    let _e35: Flector = other_1133;
    let _e38: Flector = other_1133;
    let _e48: Point = self_1245;
    let _e52: Flector = other_1133;
    let _e66: Point = self_1245;
    let _e70: Flector = other_1133;
    let _e73: Flector = other_1133;
    let _e76: Flector = other_1133;
    let _e82: Point = self_1245;
    let _e86: Flector = other_1133;
    let _e89: Flector = other_1133;
    let _e92: Flector = other_1133;
    let _e102: Point = self_1245;
    let _e106: Flector = other_1133;
    let _e109: Flector = other_1133;
    let _e112: Flector = other_1133;
    let _e123: Point = self_1245;
    let _e127: Flector = other_1133;
    let _e130: Flector = other_1133;
    let _e133: Flector = other_1133;
    let _e144: Point = self_1245;
    let _e148: Flector = other_1133;
    let _e151: Flector = other_1133;
    let _e154: Flector = other_1133;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2<f32>(_e35.g1_.w, _e38.g0_.w)) * vec2<f32>(1.0, -1.0))) + ((vec2(_e48.g0_.x) * vec2(_e52.g1_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), (vec3(0.0) - (vec3(_e66.g0_.w) * vec3<f32>(_e70.g1_.x, _e73.g1_.y, _e76.g1_.z))), (((((vec3(_e82.g0_.x) * vec3<f32>(_e86.g0_.w, _e89.g1_.z, _e92.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e102.g0_.y) * vec3<f32>(_e106.g1_.z, _e109.g0_.w, _e112.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e123.g0_.z) * vec3<f32>(_e127.g1_.y, _e130.g1_.x, _e133.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e144.g0_.w) * vec3<f32>(_e148.g0_.x, _e151.g0_.y, _e154.g0_.z))), vec4(0.0));
}

fn point_flector_regressive_product(self_1246: Point, other_1134: Flector) -> Scalar {
    var self_1247: Point;
    var other_1135: Flector;

    self_1247 = self_1246;
    other_1135 = other_1134;
    let _e4: Point = self_1247;
    let _e7: Flector = other_1135;
    let _e11: Point = self_1247;
    let _e14: Flector = other_1135;
    let _e19: Point = self_1247;
    let _e22: Flector = other_1135;
    let _e27: Point = self_1247;
    let _e30: Flector = other_1135;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_anti_wedge(self_1248: Point, other_1136: Flector) -> Scalar {
    var self_1249: Point;
    var other_1137: Flector;

    self_1249 = self_1248;
    other_1137 = other_1136;
    let _e4: Point = self_1249;
    let _e7: Flector = other_1137;
    let _e11: Point = self_1249;
    let _e14: Flector = other_1137;
    let _e19: Point = self_1249;
    let _e22: Flector = other_1137;
    let _e27: Point = self_1249;
    let _e30: Flector = other_1137;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_meet(self_1250: Point, other_1138: Flector) -> Scalar {
    var self_1251: Point;
    var other_1139: Flector;

    self_1251 = self_1250;
    other_1139 = other_1138;
    let _e4: Point = self_1251;
    let _e7: Flector = other_1139;
    let _e11: Point = self_1251;
    let _e14: Flector = other_1139;
    let _e19: Point = self_1251;
    let _e22: Flector = other_1139;
    let _e27: Point = self_1251;
    let _e30: Flector = other_1139;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_outer_product(self_1252: Point, other_1140: Flector) -> Motor {
    var self_1253: Point;
    var other_1141: Flector;

    self_1253 = self_1252;
    other_1141 = other_1140;
    let _e4: Point = self_1253;
    let _e8: Flector = other_1141;
    let _e11: Flector = other_1141;
    let _e14: Flector = other_1141;
    let _e17: Flector = other_1141;
    let _e28: Point = self_1253;
    let _e32: Flector = other_1141;
    let _e35: Flector = other_1141;
    let _e38: Flector = other_1141;
    let _e41: Flector = other_1141;
    let _e53: Point = self_1253;
    let _e57: Flector = other_1141;
    let _e60: Flector = other_1141;
    let _e63: Flector = other_1141;
    let _e66: Flector = other_1141;
    let _e72: Point = self_1253;
    let _e76: Flector = other_1141;
    let _e79: Flector = other_1141;
    let _e82: Flector = other_1141;
    let _e85: Flector = other_1141;
    let _e97: Point = self_1253;
    let _e101: Flector = other_1141;
    let _e104: Flector = other_1141;
    let _e107: Flector = other_1141;
    let _e117: Point = self_1253;
    let _e121: Flector = other_1141;
    let _e124: Flector = other_1141;
    let _e127: Flector = other_1141;
    let _e138: Point = self_1253;
    let _e142: Flector = other_1141;
    let _e145: Flector = other_1141;
    let _e148: Flector = other_1141;
    return Motor((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g0_.x) * vec4<f32>(_e76.g0_.w, _e79.g0_.x, _e82.g0_.x, _e85.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e97.g0_.y) * vec3<f32>(_e101.g0_.z, _e104.g0_.z, _e107.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e117.g0_.z) * vec3<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e138.g0_.x) * vec3<f32>(_e142.g0_.x, _e145.g0_.z, _e148.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_flector_wedge(self_1254: Point, other_1142: Flector) -> Motor {
    var self_1255: Point;
    var other_1143: Flector;

    self_1255 = self_1254;
    other_1143 = other_1142;
    let _e4: Point = self_1255;
    let _e8: Flector = other_1143;
    let _e11: Flector = other_1143;
    let _e14: Flector = other_1143;
    let _e17: Flector = other_1143;
    let _e28: Point = self_1255;
    let _e32: Flector = other_1143;
    let _e35: Flector = other_1143;
    let _e38: Flector = other_1143;
    let _e41: Flector = other_1143;
    let _e53: Point = self_1255;
    let _e57: Flector = other_1143;
    let _e60: Flector = other_1143;
    let _e63: Flector = other_1143;
    let _e66: Flector = other_1143;
    let _e72: Point = self_1255;
    let _e76: Flector = other_1143;
    let _e79: Flector = other_1143;
    let _e82: Flector = other_1143;
    let _e85: Flector = other_1143;
    let _e97: Point = self_1255;
    let _e101: Flector = other_1143;
    let _e104: Flector = other_1143;
    let _e107: Flector = other_1143;
    let _e117: Point = self_1255;
    let _e121: Flector = other_1143;
    let _e124: Flector = other_1143;
    let _e127: Flector = other_1143;
    let _e138: Point = self_1255;
    let _e142: Flector = other_1143;
    let _e145: Flector = other_1143;
    let _e148: Flector = other_1143;
    return Motor((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g0_.x) * vec4<f32>(_e76.g0_.w, _e79.g0_.x, _e82.g0_.x, _e85.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e97.g0_.y) * vec3<f32>(_e101.g0_.z, _e104.g0_.z, _e107.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e117.g0_.z) * vec3<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e138.g0_.x) * vec3<f32>(_e142.g0_.x, _e145.g0_.z, _e148.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_flector_join(self_1256: Point, other_1144: Flector) -> Motor {
    var self_1257: Point;
    var other_1145: Flector;

    self_1257 = self_1256;
    other_1145 = other_1144;
    let _e4: Point = self_1257;
    let _e8: Flector = other_1145;
    let _e11: Flector = other_1145;
    let _e14: Flector = other_1145;
    let _e17: Flector = other_1145;
    let _e28: Point = self_1257;
    let _e32: Flector = other_1145;
    let _e35: Flector = other_1145;
    let _e38: Flector = other_1145;
    let _e41: Flector = other_1145;
    let _e53: Point = self_1257;
    let _e57: Flector = other_1145;
    let _e60: Flector = other_1145;
    let _e63: Flector = other_1145;
    let _e66: Flector = other_1145;
    let _e72: Point = self_1257;
    let _e76: Flector = other_1145;
    let _e79: Flector = other_1145;
    let _e82: Flector = other_1145;
    let _e85: Flector = other_1145;
    let _e97: Point = self_1257;
    let _e101: Flector = other_1145;
    let _e104: Flector = other_1145;
    let _e107: Flector = other_1145;
    let _e117: Point = self_1257;
    let _e121: Flector = other_1145;
    let _e124: Flector = other_1145;
    let _e127: Flector = other_1145;
    let _e138: Point = self_1257;
    let _e142: Flector = other_1145;
    let _e145: Flector = other_1145;
    let _e148: Flector = other_1145;
    return Motor((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g0_.x) * vec4<f32>(_e76.g0_.w, _e79.g0_.x, _e82.g0_.x, _e85.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e97.g0_.y) * vec3<f32>(_e101.g0_.z, _e104.g0_.z, _e107.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e117.g0_.z) * vec3<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e138.g0_.x) * vec3<f32>(_e142.g0_.x, _e145.g0_.z, _e148.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn point_flector_inner_product(self_1258: Point, other_1146: Flector) -> MultiVector {
    var self_1259: Point;
    var other_1147: Flector;

    self_1259 = self_1258;
    other_1147 = other_1146;
    let _e4: Point = self_1259;
    let _e8: Flector = other_1147;
    let _e17: Point = self_1259;
    let _e21: Flector = other_1147;
    let _e31: Point = self_1259;
    let _e35: Flector = other_1147;
    let _e47: Point = self_1259;
    let _e51: Flector = other_1147;
    let _e54: Flector = other_1147;
    let _e57: Flector = other_1147;
    let _e67: Point = self_1259;
    let _e71: Flector = other_1147;
    let _e74: Flector = other_1147;
    let _e77: Flector = other_1147;
    let _e88: Point = self_1259;
    let _e92: Flector = other_1147;
    let _e95: Flector = other_1147;
    let _e98: Flector = other_1147;
    let _e109: Point = self_1259;
    let _e112: Point = self_1259;
    let _e115: Point = self_1259;
    let _e119: Flector = other_1147;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e47.g0_.y) * vec3<f32>(_e51.g1_.z, _e54.g1_.z, _e57.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e67.g0_.z) * vec3<f32>(_e71.g1_.y, _e74.g1_.x, _e77.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e88.g0_.x) * vec3<f32>(_e92.g1_.x, _e95.g1_.z, _e98.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z) * vec3(_e119.g1_.w)) * vec3(-1.0)), vec4(0.0));
}

fn point_flector_inner_anti_product(self_1260: Point, other_1148: Flector) -> Motor {
    var self_1261: Point;
    var other_1149: Flector;

    self_1261 = self_1260;
    other_1149 = other_1148;
    let _e6: Point = self_1261;
    let _e10: Flector = other_1149;
    let _e13: Flector = other_1149;
    let _e16: Flector = other_1149;
    let _e19: Flector = other_1149;
    let _e25: Point = self_1261;
    let _e29: Flector = other_1149;
    let _e32: Flector = other_1149;
    let _e35: Flector = other_1149;
    let _e45: Point = self_1261;
    let _e49: Flector = other_1149;
    let _e52: Flector = other_1149;
    let _e55: Flector = other_1149;
    let _e66: Point = self_1261;
    let _e70: Flector = other_1149;
    let _e73: Flector = other_1149;
    let _e76: Flector = other_1149;
    return Motor((vec4(0.0) - (vec4(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g1_.z, _e32.g1_.z, _e35.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g1_.y, _e52.g1_.x, _e55.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g1_.x, _e73.g1_.z, _e76.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn point_flector_left_contraction(self_1262: Point, other_1150: Flector) -> MultiVector {
    var self_1263: Point;
    var other_1151: Flector;

    self_1263 = self_1262;
    other_1151 = other_1150;
    let _e4: Point = self_1263;
    let _e8: Flector = other_1151;
    let _e17: Point = self_1263;
    let _e21: Flector = other_1151;
    let _e31: Point = self_1263;
    let _e35: Flector = other_1151;
    let _e47: Point = self_1263;
    let _e51: Flector = other_1151;
    let _e54: Flector = other_1151;
    let _e57: Flector = other_1151;
    let _e67: Point = self_1263;
    let _e71: Flector = other_1151;
    let _e74: Flector = other_1151;
    let _e77: Flector = other_1151;
    let _e88: Point = self_1263;
    let _e92: Flector = other_1151;
    let _e95: Flector = other_1151;
    let _e98: Flector = other_1151;
    let _e109: Point = self_1263;
    let _e112: Point = self_1263;
    let _e115: Point = self_1263;
    let _e119: Flector = other_1151;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e47.g0_.y) * vec3<f32>(_e51.g1_.z, _e54.g1_.z, _e57.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e67.g0_.z) * vec3<f32>(_e71.g1_.y, _e74.g1_.x, _e77.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e88.g0_.x) * vec3<f32>(_e92.g1_.x, _e95.g1_.z, _e98.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e109.g0_.x, _e112.g0_.y, _e115.g0_.z) * vec3(_e119.g1_.w)) * vec3(-1.0)), vec4(0.0));
}

fn point_flector_right_contraction(self_1264: Point, other_1152: Flector) -> Scalar {
    var self_1265: Point;
    var other_1153: Flector;

    self_1265 = self_1264;
    other_1153 = other_1152;
    let _e4: Point = self_1265;
    let _e7: Flector = other_1153;
    let _e11: Point = self_1265;
    let _e14: Flector = other_1153;
    let _e19: Point = self_1265;
    let _e22: Flector = other_1153;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_left_anti_contraction(self_1266: Point, other_1154: Flector) -> AntiScalar {
    var self_1267: Point;
    var other_1155: Flector;

    self_1267 = self_1266;
    other_1155 = other_1154;
    let _e5: Point = self_1267;
    let _e8: Flector = other_1155;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_flector_right_anti_contraction(self_1268: Point, other_1156: Flector) -> Motor {
    var self_1269: Point;
    var other_1157: Flector;

    self_1269 = self_1268;
    other_1157 = other_1156;
    let _e6: Point = self_1269;
    let _e10: Flector = other_1157;
    let _e13: Flector = other_1157;
    let _e16: Flector = other_1157;
    let _e19: Flector = other_1157;
    let _e25: Point = self_1269;
    let _e29: Flector = other_1157;
    let _e32: Flector = other_1157;
    let _e35: Flector = other_1157;
    let _e45: Point = self_1269;
    let _e49: Flector = other_1157;
    let _e52: Flector = other_1157;
    let _e55: Flector = other_1157;
    let _e66: Point = self_1269;
    let _e70: Flector = other_1157;
    let _e73: Flector = other_1157;
    let _e76: Flector = other_1157;
    return Motor((vec4(0.0) - (vec4(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g1_.z, _e32.g1_.z, _e35.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g1_.y, _e52.g1_.x, _e55.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g1_.x, _e73.g1_.z, _e76.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn point_flector_scalar_product(self_1270: Point, other_1158: Flector) -> Scalar {
    var self_1271: Point;
    var other_1159: Flector;

    self_1271 = self_1270;
    other_1159 = other_1158;
    let _e4: Point = self_1271;
    let _e7: Flector = other_1159;
    let _e11: Point = self_1271;
    let _e14: Flector = other_1159;
    let _e19: Point = self_1271;
    let _e22: Flector = other_1159;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_dot(self_1272: Point, other_1160: Flector) -> Scalar {
    var self_1273: Point;
    var other_1161: Flector;

    self_1273 = self_1272;
    other_1161 = other_1160;
    let _e4: Point = self_1273;
    let _e7: Flector = other_1161;
    let _e11: Point = self_1273;
    let _e14: Flector = other_1161;
    let _e19: Point = self_1273;
    let _e22: Flector = other_1161;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_anti_scalar_product(self_1274: Point, other_1162: Flector) -> AntiScalar {
    var self_1275: Point;
    var other_1163: Flector;

    self_1275 = self_1274;
    other_1163 = other_1162;
    let _e5: Point = self_1275;
    let _e8: Flector = other_1163;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_flector_anti_dot(self_1276: Point, other_1164: Flector) -> AntiScalar {
    var self_1277: Point;
    var other_1165: Flector;

    self_1277 = self_1276;
    other_1165 = other_1164;
    let _e5: Point = self_1277;
    let _e8: Flector = other_1165;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_multi_vector_add(self_1278: Point, other_1166: MultiVector) -> MultiVector {
    var self_1279: Point;
    var other_1167: MultiVector;

    self_1279 = self_1278;
    other_1167 = other_1166;
    let _e4: MultiVector = other_1167;
    let _e6: Point = self_1279;
    let _e8: MultiVector = other_1167;
    let _e11: MultiVector = other_1167;
    let _e13: MultiVector = other_1167;
    let _e15: MultiVector = other_1167;
    return MultiVector(_e4.g0_, (_e6.g0_ + _e8.g1_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn point_multi_vector_sub(self_1280: Point, other_1168: MultiVector) -> MultiVector {
    var self_1281: Point;
    var other_1169: MultiVector;

    self_1281 = self_1280;
    other_1169 = other_1168;
    let _e6: MultiVector = other_1169;
    let _e9: Point = self_1281;
    let _e11: MultiVector = other_1169;
    let _e16: MultiVector = other_1169;
    let _e21: MultiVector = other_1169;
    let _e26: MultiVector = other_1169;
    return MultiVector((vec2(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (vec3(0.0) - _e16.g2_), (vec3(0.0) - _e21.g3_), (vec4(0.0) - _e26.g4_));
}

fn point_multi_vector_geometric_product(self_1282: Point, other_1170: MultiVector) -> MultiVector {
    var self_1283: Point;
    var other_1171: MultiVector;

    self_1283 = self_1282;
    other_1171 = other_1170;
    let _e4: Point = self_1283;
    let _e8: MultiVector = other_1171;
    let _e11: MultiVector = other_1171;
    let _e16: Point = self_1283;
    let _e20: MultiVector = other_1171;
    let _e23: MultiVector = other_1171;
    let _e29: Point = self_1283;
    let _e33: MultiVector = other_1171;
    let _e36: MultiVector = other_1171;
    let _e42: Point = self_1283;
    let _e45: Point = self_1283;
    let _e49: MultiVector = other_1171;
    let _e52: MultiVector = other_1171;
    let _e62: Point = self_1283;
    let _e66: MultiVector = other_1171;
    let _e69: MultiVector = other_1171;
    let _e72: MultiVector = other_1171;
    let _e75: MultiVector = other_1171;
    let _e86: Point = self_1283;
    let _e90: MultiVector = other_1171;
    let _e93: MultiVector = other_1171;
    let _e96: MultiVector = other_1171;
    let _e99: MultiVector = other_1171;
    let _e111: Point = self_1283;
    let _e115: MultiVector = other_1171;
    let _e118: MultiVector = other_1171;
    let _e121: MultiVector = other_1171;
    let _e124: MultiVector = other_1171;
    let _e136: Point = self_1283;
    let _e139: MultiVector = other_1171;
    let _e151: Point = self_1283;
    let _e155: MultiVector = other_1171;
    let _e158: MultiVector = other_1171;
    let _e161: MultiVector = other_1171;
    let _e171: Point = self_1283;
    let _e175: MultiVector = other_1171;
    let _e178: MultiVector = other_1171;
    let _e181: MultiVector = other_1171;
    let _e192: Point = self_1283;
    let _e196: MultiVector = other_1171;
    let _e199: MultiVector = other_1171;
    let _e202: MultiVector = other_1171;
    let _e213: Point = self_1283;
    let _e217: MultiVector = other_1171;
    let _e220: MultiVector = other_1171;
    let _e223: MultiVector = other_1171;
    let _e229: Point = self_1283;
    let _e233: MultiVector = other_1171;
    let _e236: MultiVector = other_1171;
    let _e239: MultiVector = other_1171;
    let _e249: Point = self_1283;
    let _e253: MultiVector = other_1171;
    let _e256: MultiVector = other_1171;
    let _e259: MultiVector = other_1171;
    let _e270: Point = self_1283;
    let _e274: MultiVector = other_1171;
    let _e277: MultiVector = other_1171;
    let _e280: MultiVector = other_1171;
    let _e291: Point = self_1283;
    let _e295: MultiVector = other_1171;
    let _e298: MultiVector = other_1171;
    let _e301: MultiVector = other_1171;
    let _e304: MultiVector = other_1171;
    let _e315: Point = self_1283;
    let _e319: MultiVector = other_1171;
    let _e322: MultiVector = other_1171;
    let _e325: MultiVector = other_1171;
    let _e328: MultiVector = other_1171;
    let _e340: Point = self_1283;
    let _e344: MultiVector = other_1171;
    let _e347: MultiVector = other_1171;
    let _e350: MultiVector = other_1171;
    let _e353: MultiVector = other_1171;
    let _e365: Point = self_1283;
    let _e368: MultiVector = other_1171;
    let _e371: MultiVector = other_1171;
    let _e374: MultiVector = other_1171;
    let _e377: MultiVector = other_1171;
    return MultiVector(((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) + (vec2(_e16.g0_.y) * vec2<f32>(_e20.g1_.y, _e23.g4_.y))) + (vec2(_e29.g0_.z) * vec2<f32>(_e33.g1_.z, _e36.g4_.z))) + ((vec2<f32>(_e42.g0_.x, _e45.g0_.w) * vec2<f32>(_e49.g4_.x, _e52.g4_.w)) * vec2<f32>(0.0, 1.0))), (((((vec4(_e62.g0_.x) * vec4<f32>(_e66.g0_.x, _e69.g3_.z, _e72.g3_.y, _e75.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e86.g0_.y) * vec4<f32>(_e90.g3_.z, _e93.g0_.x, _e96.g3_.x, _e99.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e111.g0_.z) * vec4<f32>(_e115.g3_.y, _e118.g3_.x, _e121.g0_.x, _e124.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e136.g0_.xxxw * vec4(_e139.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3(_e151.g0_.x) * vec3<f32>(_e155.g1_.w, _e158.g4_.z, _e161.g4_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e171.g0_.y) * vec3<f32>(_e175.g4_.z, _e178.g1_.w, _e181.g4_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e192.g0_.z) * vec3<f32>(_e196.g4_.y, _e199.g4_.x, _e202.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e213.g0_.w) * vec3<f32>(_e217.g1_.x, _e220.g1_.y, _e223.g1_.z))), ((((vec3(_e229.g0_.x) * vec3<f32>(_e233.g4_.w, _e236.g1_.z, _e239.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e249.g0_.y) * vec3<f32>(_e253.g1_.z, _e256.g4_.w, _e259.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e270.g0_.z) * vec3<f32>(_e274.g1_.y, _e277.g1_.x, _e280.g4_.w)) * vec3<f32>(-1.0, 1.0, -1.0))), (((((vec4(_e291.g0_.x) * vec4<f32>(_e295.g0_.y, _e298.g2_.z, _e301.g2_.y, _e304.g3_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e315.g0_.y) * vec4<f32>(_e319.g2_.z, _e322.g0_.y, _e325.g2_.x, _e328.g3_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e340.g0_.z) * vec4<f32>(_e344.g2_.y, _e347.g2_.x, _e350.g0_.y, _e353.g3_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e365.g0_.wwwx * vec4<f32>(_e368.g3_.x, _e371.g3_.y, _e374.g3_.z, _e377.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_multi_vector_geometric_anti_product(self_1284: Point, other_1172: MultiVector) -> MultiVector {
    var self_1285: Point;
    var other_1173: MultiVector;

    self_1285 = self_1284;
    other_1173 = other_1172;
    let _e4: Point = self_1285;
    let _e8: MultiVector = other_1173;
    let _e17: Point = self_1285;
    let _e21: MultiVector = other_1173;
    let _e31: Point = self_1285;
    let _e35: MultiVector = other_1173;
    let _e38: MultiVector = other_1173;
    let _e48: Point = self_1285;
    let _e52: MultiVector = other_1173;
    let _e62: Point = self_1285;
    let _e66: MultiVector = other_1173;
    let _e69: MultiVector = other_1173;
    let _e72: MultiVector = other_1173;
    let _e75: MultiVector = other_1173;
    let _e86: Point = self_1285;
    let _e90: MultiVector = other_1173;
    let _e93: MultiVector = other_1173;
    let _e96: MultiVector = other_1173;
    let _e99: MultiVector = other_1173;
    let _e111: Point = self_1285;
    let _e115: MultiVector = other_1173;
    let _e118: MultiVector = other_1173;
    let _e121: MultiVector = other_1173;
    let _e124: MultiVector = other_1173;
    let _e136: Point = self_1285;
    let _e140: MultiVector = other_1173;
    let _e143: MultiVector = other_1173;
    let _e146: MultiVector = other_1173;
    let _e149: MultiVector = other_1173;
    let _e163: Point = self_1285;
    let _e167: MultiVector = other_1173;
    let _e170: MultiVector = other_1173;
    let _e173: MultiVector = other_1173;
    let _e179: Point = self_1285;
    let _e183: MultiVector = other_1173;
    let _e186: MultiVector = other_1173;
    let _e189: MultiVector = other_1173;
    let _e199: Point = self_1285;
    let _e203: MultiVector = other_1173;
    let _e206: MultiVector = other_1173;
    let _e209: MultiVector = other_1173;
    let _e220: Point = self_1285;
    let _e224: MultiVector = other_1173;
    let _e227: MultiVector = other_1173;
    let _e230: MultiVector = other_1173;
    let _e241: Point = self_1285;
    let _e245: MultiVector = other_1173;
    let _e248: MultiVector = other_1173;
    let _e251: MultiVector = other_1173;
    let _e257: Point = self_1285;
    let _e261: MultiVector = other_1173;
    let _e272: Point = self_1285;
    let _e276: MultiVector = other_1173;
    let _e288: Point = self_1285;
    let _e292: MultiVector = other_1173;
    let _e295: MultiVector = other_1173;
    let _e298: MultiVector = other_1173;
    let _e301: MultiVector = other_1173;
    let _e313: Point = self_1285;
    let _e317: MultiVector = other_1173;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2<f32>(_e35.g4_.w, _e38.g1_.w)) * vec2<f32>(1.0, -1.0))) + ((vec2(_e48.g0_.x) * vec2(_e52.g4_.x)) * vec2<f32>(1.0, 0.0))), (((((vec4(_e62.g0_.y) * vec4<f32>(_e66.g2_.z, _e69.g0_.y, _e72.g2_.x, _e75.g2_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e86.g0_.z) * vec4<f32>(_e90.g2_.y, _e93.g2_.x, _e96.g0_.y, _e99.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e111.g0_.w) * vec4<f32>(_e115.g3_.x, _e118.g3_.y, _e121.g3_.z, _e124.g0_.y)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e136.g0_.x) * vec4<f32>(_e140.g0_.y, _e143.g2_.z, _e146.g2_.y, _e149.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), (vec3(0.0) - (vec3(_e163.g0_.w) * vec3<f32>(_e167.g4_.x, _e170.g4_.y, _e173.g4_.z))), (((((vec3(_e179.g0_.x) * vec3<f32>(_e183.g1_.w, _e186.g4_.z, _e189.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e199.g0_.y) * vec3<f32>(_e203.g4_.z, _e206.g1_.w, _e209.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e220.g0_.z) * vec3<f32>(_e224.g4_.y, _e227.g4_.x, _e230.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e241.g0_.w) * vec3<f32>(_e245.g1_.x, _e248.g1_.y, _e251.g1_.z))), (((((vec4(_e257.g0_.y) * vec4(_e261.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e272.g0_.z) * vec4(_e276.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e288.g0_.w) * vec4<f32>(_e292.g2_.x, _e295.g2_.y, _e298.g2_.z, _e301.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e313.g0_.x) * vec4(_e317.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn point_multi_vector_regressive_product(self_1286: Point, other_1174: MultiVector) -> MultiVector {
    var self_1287: Point;
    var other_1175: MultiVector;

    self_1287 = self_1286;
    other_1175 = other_1174;
    let _e4: Point = self_1287;
    let _e8: MultiVector = other_1175;
    let _e17: Point = self_1287;
    let _e21: MultiVector = other_1175;
    let _e31: Point = self_1287;
    let _e35: MultiVector = other_1175;
    let _e45: Point = self_1287;
    let _e49: MultiVector = other_1175;
    let _e59: Point = self_1287;
    let _e61: MultiVector = other_1175;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(1.0, 0.0))), (_e59.g0_ * vec4(_e61.g0_.y)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn point_multi_vector_anti_wedge(self_1288: Point, other_1176: MultiVector) -> MultiVector {
    var self_1289: Point;
    var other_1177: MultiVector;

    self_1289 = self_1288;
    other_1177 = other_1176;
    let _e4: Point = self_1289;
    let _e8: MultiVector = other_1177;
    let _e17: Point = self_1289;
    let _e21: MultiVector = other_1177;
    let _e31: Point = self_1289;
    let _e35: MultiVector = other_1177;
    let _e45: Point = self_1289;
    let _e49: MultiVector = other_1177;
    let _e59: Point = self_1289;
    let _e61: MultiVector = other_1177;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(1.0, 0.0))), (_e59.g0_ * vec4(_e61.g0_.y)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn point_multi_vector_meet(self_1290: Point, other_1178: MultiVector) -> MultiVector {
    var self_1291: Point;
    var other_1179: MultiVector;

    self_1291 = self_1290;
    other_1179 = other_1178;
    let _e4: Point = self_1291;
    let _e8: MultiVector = other_1179;
    let _e17: Point = self_1291;
    let _e21: MultiVector = other_1179;
    let _e31: Point = self_1291;
    let _e35: MultiVector = other_1179;
    let _e45: Point = self_1291;
    let _e49: MultiVector = other_1179;
    let _e59: Point = self_1291;
    let _e61: MultiVector = other_1179;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(1.0, 0.0))), (_e59.g0_ * vec4(_e61.g0_.y)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn point_multi_vector_outer_product(self_1292: Point, other_1180: MultiVector) -> MultiVector {
    var self_1293: Point;
    var other_1181: MultiVector;

    self_1293 = self_1292;
    other_1181 = other_1180;
    let _e4: Point = self_1293;
    let _e8: MultiVector = other_1181;
    let _e17: Point = self_1293;
    let _e21: MultiVector = other_1181;
    let _e31: Point = self_1293;
    let _e35: MultiVector = other_1181;
    let _e45: Point = self_1293;
    let _e49: MultiVector = other_1181;
    let _e59: Point = self_1293;
    let _e61: MultiVector = other_1181;
    let _e66: Point = self_1293;
    let _e70: MultiVector = other_1181;
    let _e73: MultiVector = other_1181;
    let _e76: MultiVector = other_1181;
    let _e81: Point = self_1293;
    let _e84: Point = self_1293;
    let _e87: Point = self_1293;
    let _e91: MultiVector = other_1181;
    let _e100: Point = self_1293;
    let _e104: MultiVector = other_1181;
    let _e107: MultiVector = other_1181;
    let _e110: MultiVector = other_1181;
    let _e120: Point = self_1293;
    let _e124: MultiVector = other_1181;
    let _e127: MultiVector = other_1181;
    let _e130: MultiVector = other_1181;
    let _e141: Point = self_1293;
    let _e145: MultiVector = other_1181;
    let _e148: MultiVector = other_1181;
    let _e151: MultiVector = other_1181;
    let _e162: Point = self_1293;
    let _e166: MultiVector = other_1181;
    let _e169: MultiVector = other_1181;
    let _e172: MultiVector = other_1181;
    let _e175: MultiVector = other_1181;
    let _e186: Point = self_1293;
    let _e190: MultiVector = other_1181;
    let _e193: MultiVector = other_1181;
    let _e196: MultiVector = other_1181;
    let _e199: MultiVector = other_1181;
    let _e211: Point = self_1293;
    let _e215: MultiVector = other_1181;
    let _e218: MultiVector = other_1181;
    let _e221: MultiVector = other_1181;
    let _e224: MultiVector = other_1181;
    let _e236: Point = self_1293;
    let _e240: MultiVector = other_1181;
    let _e243: MultiVector = other_1181;
    let _e246: MultiVector = other_1181;
    let _e249: MultiVector = other_1181;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e59.g0_ * vec4(_e61.g0_.x)), ((vec3(_e66.g0_.w) * vec3<f32>(_e70.g1_.x, _e73.g1_.y, _e76.g1_.z)) + ((vec3<f32>(_e81.g0_.x, _e84.g0_.y, _e87.g0_.z) * vec3(_e91.g1_.w)) * vec3(-1.0))), ((((vec3(_e100.g0_.y) * vec3<f32>(_e104.g1_.z, _e107.g1_.z, _e110.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g0_.z) * vec3<f32>(_e124.g1_.y, _e127.g1_.x, _e130.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g0_.x) * vec3<f32>(_e145.g1_.x, _e148.g1_.z, _e151.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e162.g0_.y) * vec4<f32>(_e166.g2_.z, _e169.g2_.z, _e172.g2_.x, _e175.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e186.g0_.z) * vec4<f32>(_e190.g2_.y, _e193.g2_.x, _e196.g2_.y, _e199.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e211.g0_.w) * vec4<f32>(_e215.g3_.x, _e218.g3_.y, _e221.g3_.z, _e224.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e236.g0_.x) * vec4<f32>(_e240.g2_.x, _e243.g2_.z, _e246.g2_.y, _e249.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_multi_vector_wedge(self_1294: Point, other_1182: MultiVector) -> MultiVector {
    var self_1295: Point;
    var other_1183: MultiVector;

    self_1295 = self_1294;
    other_1183 = other_1182;
    let _e4: Point = self_1295;
    let _e8: MultiVector = other_1183;
    let _e17: Point = self_1295;
    let _e21: MultiVector = other_1183;
    let _e31: Point = self_1295;
    let _e35: MultiVector = other_1183;
    let _e45: Point = self_1295;
    let _e49: MultiVector = other_1183;
    let _e59: Point = self_1295;
    let _e61: MultiVector = other_1183;
    let _e66: Point = self_1295;
    let _e70: MultiVector = other_1183;
    let _e73: MultiVector = other_1183;
    let _e76: MultiVector = other_1183;
    let _e81: Point = self_1295;
    let _e84: Point = self_1295;
    let _e87: Point = self_1295;
    let _e91: MultiVector = other_1183;
    let _e100: Point = self_1295;
    let _e104: MultiVector = other_1183;
    let _e107: MultiVector = other_1183;
    let _e110: MultiVector = other_1183;
    let _e120: Point = self_1295;
    let _e124: MultiVector = other_1183;
    let _e127: MultiVector = other_1183;
    let _e130: MultiVector = other_1183;
    let _e141: Point = self_1295;
    let _e145: MultiVector = other_1183;
    let _e148: MultiVector = other_1183;
    let _e151: MultiVector = other_1183;
    let _e162: Point = self_1295;
    let _e166: MultiVector = other_1183;
    let _e169: MultiVector = other_1183;
    let _e172: MultiVector = other_1183;
    let _e175: MultiVector = other_1183;
    let _e186: Point = self_1295;
    let _e190: MultiVector = other_1183;
    let _e193: MultiVector = other_1183;
    let _e196: MultiVector = other_1183;
    let _e199: MultiVector = other_1183;
    let _e211: Point = self_1295;
    let _e215: MultiVector = other_1183;
    let _e218: MultiVector = other_1183;
    let _e221: MultiVector = other_1183;
    let _e224: MultiVector = other_1183;
    let _e236: Point = self_1295;
    let _e240: MultiVector = other_1183;
    let _e243: MultiVector = other_1183;
    let _e246: MultiVector = other_1183;
    let _e249: MultiVector = other_1183;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e59.g0_ * vec4(_e61.g0_.x)), ((vec3(_e66.g0_.w) * vec3<f32>(_e70.g1_.x, _e73.g1_.y, _e76.g1_.z)) + ((vec3<f32>(_e81.g0_.x, _e84.g0_.y, _e87.g0_.z) * vec3(_e91.g1_.w)) * vec3(-1.0))), ((((vec3(_e100.g0_.y) * vec3<f32>(_e104.g1_.z, _e107.g1_.z, _e110.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g0_.z) * vec3<f32>(_e124.g1_.y, _e127.g1_.x, _e130.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g0_.x) * vec3<f32>(_e145.g1_.x, _e148.g1_.z, _e151.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e162.g0_.y) * vec4<f32>(_e166.g2_.z, _e169.g2_.z, _e172.g2_.x, _e175.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e186.g0_.z) * vec4<f32>(_e190.g2_.y, _e193.g2_.x, _e196.g2_.y, _e199.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e211.g0_.w) * vec4<f32>(_e215.g3_.x, _e218.g3_.y, _e221.g3_.z, _e224.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e236.g0_.x) * vec4<f32>(_e240.g2_.x, _e243.g2_.z, _e246.g2_.y, _e249.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_multi_vector_join(self_1296: Point, other_1184: MultiVector) -> MultiVector {
    var self_1297: Point;
    var other_1185: MultiVector;

    self_1297 = self_1296;
    other_1185 = other_1184;
    let _e4: Point = self_1297;
    let _e8: MultiVector = other_1185;
    let _e17: Point = self_1297;
    let _e21: MultiVector = other_1185;
    let _e31: Point = self_1297;
    let _e35: MultiVector = other_1185;
    let _e45: Point = self_1297;
    let _e49: MultiVector = other_1185;
    let _e59: Point = self_1297;
    let _e61: MultiVector = other_1185;
    let _e66: Point = self_1297;
    let _e70: MultiVector = other_1185;
    let _e73: MultiVector = other_1185;
    let _e76: MultiVector = other_1185;
    let _e81: Point = self_1297;
    let _e84: Point = self_1297;
    let _e87: Point = self_1297;
    let _e91: MultiVector = other_1185;
    let _e100: Point = self_1297;
    let _e104: MultiVector = other_1185;
    let _e107: MultiVector = other_1185;
    let _e110: MultiVector = other_1185;
    let _e120: Point = self_1297;
    let _e124: MultiVector = other_1185;
    let _e127: MultiVector = other_1185;
    let _e130: MultiVector = other_1185;
    let _e141: Point = self_1297;
    let _e145: MultiVector = other_1185;
    let _e148: MultiVector = other_1185;
    let _e151: MultiVector = other_1185;
    let _e162: Point = self_1297;
    let _e166: MultiVector = other_1185;
    let _e169: MultiVector = other_1185;
    let _e172: MultiVector = other_1185;
    let _e175: MultiVector = other_1185;
    let _e186: Point = self_1297;
    let _e190: MultiVector = other_1185;
    let _e193: MultiVector = other_1185;
    let _e196: MultiVector = other_1185;
    let _e199: MultiVector = other_1185;
    let _e211: Point = self_1297;
    let _e215: MultiVector = other_1185;
    let _e218: MultiVector = other_1185;
    let _e221: MultiVector = other_1185;
    let _e224: MultiVector = other_1185;
    let _e236: Point = self_1297;
    let _e240: MultiVector = other_1185;
    let _e243: MultiVector = other_1185;
    let _e246: MultiVector = other_1185;
    let _e249: MultiVector = other_1185;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e59.g0_ * vec4(_e61.g0_.x)), ((vec3(_e66.g0_.w) * vec3<f32>(_e70.g1_.x, _e73.g1_.y, _e76.g1_.z)) + ((vec3<f32>(_e81.g0_.x, _e84.g0_.y, _e87.g0_.z) * vec3(_e91.g1_.w)) * vec3(-1.0))), ((((vec3(_e100.g0_.y) * vec3<f32>(_e104.g1_.z, _e107.g1_.z, _e110.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g0_.z) * vec3<f32>(_e124.g1_.y, _e127.g1_.x, _e130.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g0_.x) * vec3<f32>(_e145.g1_.x, _e148.g1_.z, _e151.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e162.g0_.y) * vec4<f32>(_e166.g2_.z, _e169.g2_.z, _e172.g2_.x, _e175.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e186.g0_.z) * vec4<f32>(_e190.g2_.y, _e193.g2_.x, _e196.g2_.y, _e199.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e211.g0_.w) * vec4<f32>(_e215.g3_.x, _e218.g3_.y, _e221.g3_.z, _e224.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e236.g0_.x) * vec4<f32>(_e240.g2_.x, _e243.g2_.z, _e246.g2_.y, _e249.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn point_multi_vector_inner_product(self_1298: Point, other_1186: MultiVector) -> MultiVector {
    var self_1299: Point;
    var other_1187: MultiVector;

    self_1299 = self_1298;
    other_1187 = other_1186;
    let _e4: Point = self_1299;
    let _e8: MultiVector = other_1187;
    let _e17: Point = self_1299;
    let _e21: MultiVector = other_1187;
    let _e31: Point = self_1299;
    let _e35: MultiVector = other_1187;
    let _e45: Point = self_1299;
    let _e49: MultiVector = other_1187;
    let _e52: MultiVector = other_1187;
    let _e55: MultiVector = other_1187;
    let _e58: MultiVector = other_1187;
    let _e69: Point = self_1299;
    let _e73: MultiVector = other_1187;
    let _e76: MultiVector = other_1187;
    let _e79: MultiVector = other_1187;
    let _e82: MultiVector = other_1187;
    let _e94: Point = self_1299;
    let _e98: MultiVector = other_1187;
    let _e101: MultiVector = other_1187;
    let _e104: MultiVector = other_1187;
    let _e107: MultiVector = other_1187;
    let _e119: Point = self_1299;
    let _e122: MultiVector = other_1187;
    let _e134: Point = self_1299;
    let _e138: MultiVector = other_1187;
    let _e141: MultiVector = other_1187;
    let _e144: MultiVector = other_1187;
    let _e154: Point = self_1299;
    let _e158: MultiVector = other_1187;
    let _e161: MultiVector = other_1187;
    let _e164: MultiVector = other_1187;
    let _e175: Point = self_1299;
    let _e179: MultiVector = other_1187;
    let _e182: MultiVector = other_1187;
    let _e185: MultiVector = other_1187;
    let _e196: Point = self_1299;
    let _e199: Point = self_1299;
    let _e202: Point = self_1299;
    let _e206: MultiVector = other_1187;
    let _e214: Point = self_1299;
    let _e217: MultiVector = other_1187;
    let _e220: MultiVector = other_1187;
    let _e223: MultiVector = other_1187;
    let _e226: MultiVector = other_1187;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(1.0, 0.0))), (((((vec4(_e45.g0_.x) * vec4<f32>(_e49.g0_.x, _e52.g3_.z, _e55.g3_.y, _e58.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e69.g0_.y) * vec4<f32>(_e73.g3_.z, _e76.g0_.x, _e79.g3_.x, _e82.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e94.g0_.z) * vec4<f32>(_e98.g3_.y, _e101.g3_.x, _e104.g0_.x, _e107.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e119.g0_.xxxw * vec4(_e122.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((vec3(_e134.g0_.y) * vec3<f32>(_e138.g4_.z, _e141.g4_.z, _e144.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e154.g0_.z) * vec3<f32>(_e158.g4_.y, _e161.g4_.x, _e164.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e175.g0_.x) * vec3<f32>(_e179.g4_.x, _e182.g4_.z, _e185.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e196.g0_.x, _e199.g0_.y, _e202.g0_.z) * vec3(_e206.g4_.w)) * vec3(-1.0)), ((_e214.g0_.xyzx * vec4<f32>(_e217.g0_.y, _e220.g0_.y, _e223.g0_.y, _e226.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_multi_vector_inner_anti_product(self_1300: Point, other_1188: MultiVector) -> MultiVector {
    var self_1301: Point;
    var other_1189: MultiVector;

    self_1301 = self_1300;
    other_1189 = other_1188;
    let _e4: Point = self_1301;
    let _e7: Point = self_1301;
    let _e11: MultiVector = other_1189;
    let _e14: MultiVector = other_1189;
    let _e23: Point = self_1301;
    let _e25: MultiVector = other_1189;
    let _e32: Point = self_1301;
    let _e36: MultiVector = other_1189;
    let _e39: MultiVector = other_1189;
    let _e42: MultiVector = other_1189;
    let _e48: Point = self_1301;
    let _e52: MultiVector = other_1189;
    let _e55: MultiVector = other_1189;
    let _e58: MultiVector = other_1189;
    let _e68: Point = self_1301;
    let _e72: MultiVector = other_1189;
    let _e75: MultiVector = other_1189;
    let _e78: MultiVector = other_1189;
    let _e89: Point = self_1301;
    let _e93: MultiVector = other_1189;
    let _e96: MultiVector = other_1189;
    let _e99: MultiVector = other_1189;
    let _e110: Point = self_1301;
    let _e114: MultiVector = other_1189;
    let _e125: Point = self_1301;
    let _e129: MultiVector = other_1189;
    let _e141: Point = self_1301;
    let _e145: MultiVector = other_1189;
    let _e148: MultiVector = other_1189;
    let _e151: MultiVector = other_1189;
    let _e154: MultiVector = other_1189;
    let _e166: Point = self_1301;
    let _e170: MultiVector = other_1189;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(_e11.g1_.x, _e14.g1_.w)) * vec2<f32>(0.0, -1.0)), (_e23.g0_ * vec4(_e25.g0_.y)), (vec3(0.0) - (vec3(_e32.g0_.w) * vec3<f32>(_e36.g4_.x, _e39.g4_.y, _e42.g4_.z))), ((((vec3(_e48.g0_.y) * vec3<f32>(_e52.g4_.z, _e55.g4_.z, _e58.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e68.g0_.z) * vec3<f32>(_e72.g4_.y, _e75.g4_.x, _e78.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e89.g0_.x) * vec3<f32>(_e93.g4_.x, _e96.g4_.z, _e99.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (((((vec4(_e110.g0_.y) * vec4(_e114.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e125.g0_.z) * vec4(_e129.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e141.g0_.w) * vec4<f32>(_e145.g2_.x, _e148.g2_.y, _e151.g2_.z, _e154.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e166.g0_.x) * vec4(_e170.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn point_multi_vector_left_contraction(self_1302: Point, other_1190: MultiVector) -> MultiVector {
    var self_1303: Point;
    var other_1191: MultiVector;

    self_1303 = self_1302;
    other_1191 = other_1190;
    let _e4: Point = self_1303;
    let _e8: MultiVector = other_1191;
    let _e17: Point = self_1303;
    let _e21: MultiVector = other_1191;
    let _e31: Point = self_1303;
    let _e35: MultiVector = other_1191;
    let _e45: Point = self_1303;
    let _e49: MultiVector = other_1191;
    let _e52: MultiVector = other_1191;
    let _e55: MultiVector = other_1191;
    let _e58: MultiVector = other_1191;
    let _e69: Point = self_1303;
    let _e73: MultiVector = other_1191;
    let _e76: MultiVector = other_1191;
    let _e79: MultiVector = other_1191;
    let _e82: MultiVector = other_1191;
    let _e94: Point = self_1303;
    let _e98: MultiVector = other_1191;
    let _e101: MultiVector = other_1191;
    let _e104: MultiVector = other_1191;
    let _e107: MultiVector = other_1191;
    let _e119: Point = self_1303;
    let _e123: MultiVector = other_1191;
    let _e126: MultiVector = other_1191;
    let _e129: MultiVector = other_1191;
    let _e139: Point = self_1303;
    let _e143: MultiVector = other_1191;
    let _e146: MultiVector = other_1191;
    let _e149: MultiVector = other_1191;
    let _e160: Point = self_1303;
    let _e164: MultiVector = other_1191;
    let _e167: MultiVector = other_1191;
    let _e170: MultiVector = other_1191;
    let _e181: Point = self_1303;
    let _e184: Point = self_1303;
    let _e187: Point = self_1303;
    let _e191: MultiVector = other_1191;
    let _e199: Point = self_1303;
    let _e202: MultiVector = other_1191;
    let _e205: MultiVector = other_1191;
    let _e208: MultiVector = other_1191;
    let _e211: MultiVector = other_1191;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((vec4(_e45.g0_.y) * vec4<f32>(_e49.g3_.z, _e52.g3_.z, _e55.g3_.x, _e58.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e69.g0_.z) * vec4<f32>(_e73.g3_.y, _e76.g3_.x, _e79.g3_.y, _e82.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e94.g0_.x) * vec4<f32>(_e98.g3_.x, _e101.g3_.z, _e104.g3_.y, _e107.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec3(_e119.g0_.y) * vec3<f32>(_e123.g4_.z, _e126.g4_.z, _e129.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e139.g0_.z) * vec3<f32>(_e143.g4_.y, _e146.g4_.x, _e149.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e160.g0_.x) * vec3<f32>(_e164.g4_.x, _e167.g4_.z, _e170.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e181.g0_.x, _e184.g0_.y, _e187.g0_.z) * vec3(_e191.g4_.w)) * vec3(-1.0)), ((_e199.g0_.xyzx * vec4<f32>(_e202.g0_.y, _e205.g0_.y, _e208.g0_.y, _e211.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn point_multi_vector_right_contraction(self_1304: Point, other_1192: MultiVector) -> MultiVector {
    var self_1305: Point;
    var other_1193: MultiVector;

    self_1305 = self_1304;
    other_1193 = other_1192;
    let _e4: Point = self_1305;
    let _e8: MultiVector = other_1193;
    let _e17: Point = self_1305;
    let _e21: MultiVector = other_1193;
    let _e31: Point = self_1305;
    let _e35: MultiVector = other_1193;
    let _e45: Point = self_1305;
    let _e47: MultiVector = other_1193;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(1.0, 0.0))), (_e45.g0_ * vec4(_e47.g0_.x)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn point_multi_vector_left_anti_contraction(self_1306: Point, other_1194: MultiVector) -> MultiVector {
    var self_1307: Point;
    var other_1195: MultiVector;

    self_1307 = self_1306;
    other_1195 = other_1194;
    let _e4: Point = self_1307;
    let _e7: Point = self_1307;
    let _e11: MultiVector = other_1195;
    let _e14: MultiVector = other_1195;
    let _e29: Point = self_1307;
    let _e32: MultiVector = other_1195;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(_e11.g1_.x, _e14.g1_.w)) * vec2<f32>(0.0, -1.0)), vec4(0.0), vec3(0.0), vec3(0.0), ((_e29.g0_.xxxw * vec4(_e32.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn point_multi_vector_right_anti_contraction(self_1308: Point, other_1196: MultiVector) -> MultiVector {
    var self_1309: Point;
    var other_1197: MultiVector;

    self_1309 = self_1308;
    other_1197 = other_1196;
    let _e4: Point = self_1309;
    let _e7: Point = self_1309;
    let _e11: MultiVector = other_1197;
    let _e14: MultiVector = other_1197;
    let _e23: Point = self_1309;
    let _e25: MultiVector = other_1197;
    let _e32: Point = self_1309;
    let _e36: MultiVector = other_1197;
    let _e39: MultiVector = other_1197;
    let _e42: MultiVector = other_1197;
    let _e48: Point = self_1309;
    let _e52: MultiVector = other_1197;
    let _e55: MultiVector = other_1197;
    let _e58: MultiVector = other_1197;
    let _e68: Point = self_1309;
    let _e72: MultiVector = other_1197;
    let _e75: MultiVector = other_1197;
    let _e78: MultiVector = other_1197;
    let _e89: Point = self_1309;
    let _e93: MultiVector = other_1197;
    let _e96: MultiVector = other_1197;
    let _e99: MultiVector = other_1197;
    let _e110: Point = self_1309;
    let _e114: MultiVector = other_1197;
    let _e125: Point = self_1309;
    let _e129: MultiVector = other_1197;
    let _e141: Point = self_1309;
    let _e144: MultiVector = other_1197;
    let _e147: MultiVector = other_1197;
    let _e150: MultiVector = other_1197;
    let _e153: MultiVector = other_1197;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(_e11.g1_.x, _e14.g1_.w)) * vec2<f32>(0.0, -1.0)), (_e23.g0_ * vec4(_e25.g0_.y)), (vec3(0.0) - (vec3(_e32.g0_.w) * vec3<f32>(_e36.g4_.x, _e39.g4_.y, _e42.g4_.z))), ((((vec3(_e48.g0_.y) * vec3<f32>(_e52.g4_.z, _e55.g4_.z, _e58.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e68.g0_.z) * vec3<f32>(_e72.g4_.y, _e75.g4_.x, _e78.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e89.g0_.x) * vec3<f32>(_e93.g4_.x, _e96.g4_.z, _e99.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec4(_e110.g0_.y) * vec4(_e114.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e125.g0_.z) * vec4(_e129.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e141.g0_.wwwx * vec4<f32>(_e144.g2_.x, _e147.g2_.y, _e150.g2_.z, _e153.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn point_multi_vector_scalar_product(self_1310: Point, other_1198: MultiVector) -> Scalar {
    var self_1311: Point;
    var other_1199: MultiVector;

    self_1311 = self_1310;
    other_1199 = other_1198;
    let _e4: Point = self_1311;
    let _e7: MultiVector = other_1199;
    let _e11: Point = self_1311;
    let _e14: MultiVector = other_1199;
    let _e19: Point = self_1311;
    let _e22: MultiVector = other_1199;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn point_multi_vector_dot(self_1312: Point, other_1200: MultiVector) -> Scalar {
    var self_1313: Point;
    var other_1201: MultiVector;

    self_1313 = self_1312;
    other_1201 = other_1200;
    let _e4: Point = self_1313;
    let _e7: MultiVector = other_1201;
    let _e11: Point = self_1313;
    let _e14: MultiVector = other_1201;
    let _e19: Point = self_1313;
    let _e22: MultiVector = other_1201;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn point_multi_vector_anti_scalar_product(self_1314: Point, other_1202: MultiVector) -> AntiScalar {
    var self_1315: Point;
    var other_1203: MultiVector;

    self_1315 = self_1314;
    other_1203 = other_1202;
    let _e5: Point = self_1315;
    let _e8: MultiVector = other_1203;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn point_multi_vector_anti_dot(self_1316: Point, other_1204: MultiVector) -> AntiScalar {
    var self_1317: Point;
    var other_1205: MultiVector;

    self_1317 = self_1316;
    other_1205 = other_1204;
    let _e5: Point = self_1317;
    let _e8: MultiVector = other_1205;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn point_squared_magnitude(self_1318: Point) -> Scalar {
    var self_1319: Point;

    self_1319 = self_1318;
    let _e2: Point = self_1319;
    let _e3: Point = self_1319;
    let _e4: Point = point_reversal(_e3);
    let _e5: Scalar = point_point_scalar_product(_e2, _e4);
    return _e5;
}

fn point_magnitude(self_1320: Point) -> Scalar {
    var self_1321: Point;

    self_1321 = self_1320;
    let _e2: Point = self_1321;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_bulk_norm(self_1322: Point) -> Scalar {
    var self_1323: Point;

    self_1323 = self_1322;
    let _e2: Point = self_1323;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_squared_anti_magnitude(self_1324: Point) -> AntiScalar {
    var self_1325: Point;

    self_1325 = self_1324;
    let _e2: Point = self_1325;
    let _e3: Point = self_1325;
    let _e4: Point = point_anti_reversal(_e3);
    let _e5: AntiScalar = point_point_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn point_weight_norm(self_1326: Point) -> AntiScalar {
    var self_1327: Point;

    self_1327 = self_1326;
    let _e2: Point = self_1327;
    let _e3: AntiScalar = point_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn point_geometric_norm(self_1328: Point) -> HomogeneousMagnitude {
    var self_1329: Point;

    self_1329 = self_1328;
    let _e2: Point = self_1329;
    let _e3: Scalar = point_bulk_norm(_e2);
    let _e4: Point = self_1329;
    let _e5: AntiScalar = point_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn point_scale(self_1330: Point, other_1206: f32) -> Point {
    var self_1331: Point;
    var other_1207: f32;

    self_1331 = self_1330;
    other_1207 = other_1206;
    let _e4: Point = self_1331;
    let _e5: f32 = other_1207;
    let _e7: Point = point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn point_signum(self_1332: Point) -> Point {
    var self_1333: Point;

    self_1333 = self_1332;
    let _e2: Point = self_1333;
    let _e3: Point = self_1333;
    let _e4: Scalar = point_magnitude(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_inverse(self_1334: Point) -> Point {
    var self_1335: Point;

    self_1335 = self_1334;
    let _e2: Point = self_1335;
    let _e3: Point = point_reversal(_e2);
    let _e4: Point = self_1335;
    let _e5: Scalar = point_squared_magnitude(_e4);
    let _e10: Point = point_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn point_unitize(self_1336: Point) -> Point {
    var self_1337: Point;

    self_1337 = self_1336;
    let _e2: Point = self_1337;
    let _e3: Point = self_1337;
    let _e4: AntiScalar = point_weight_norm(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_attitude(self_1338: Point) -> Scalar {
    var self_1339: Point;

    self_1339 = self_1338;
    let _e2: Point = self_1339;
    let _e9: Scalar = point_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn line_zero() -> Line {
    return Line(vec3(0.0), vec3(0.0));
}

fn line_one() -> Line {
    return Line(vec3(0.0), vec3(0.0));
}

fn line_grade(self_1340: Line) -> i32 {
    return 2;
}

fn line_anti_grade(self_1341: Line) -> i32 {
    return 2;
}

fn line_neg(self_1342: Line) -> Line {
    var self_1343: Line;

    self_1343 = self_1342;
    let _e2: Line = self_1343;
    let _e7: Line = self_1343;
    return Line((_e2.g0_ * vec3(-1.0)), (_e7.g1_ * vec3(-1.0)));
}

fn line_automorphism(self_1344: Line) -> Line {
    var self_1345: Line;

    self_1345 = self_1344;
    let _e2: Line = self_1345;
    let _e4: Line = self_1345;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_reversal(self_1346: Line) -> Line {
    var self_1347: Line;

    self_1347 = self_1346;
    let _e2: Line = self_1347;
    let _e7: Line = self_1347;
    return Line((_e2.g0_ * vec3(-1.0)), (_e7.g1_ * vec3(-1.0)));
}

fn line_conjugation(self_1348: Line) -> Line {
    var self_1349: Line;

    self_1349 = self_1348;
    let _e2: Line = self_1349;
    let _e7: Line = self_1349;
    return Line((_e2.g0_ * vec3(-1.0)), (_e7.g1_ * vec3(-1.0)));
}

fn line_dual(self_1350: Line) -> Line {
    var self_1351: Line;

    self_1351 = self_1350;
    let _e2: Line = self_1351;
    let _e7: Line = self_1351;
    return Line((_e2.g1_ * vec3(-1.0)), (_e7.g0_ * vec3(-1.0)));
}

fn line_anti_reversal(self_1352: Line) -> Line {
    var self_1353: Line;

    self_1353 = self_1352;
    let _e2: Line = self_1353;
    let _e7: Line = self_1353;
    return Line((_e2.g0_ * vec3(-1.0)), (_e7.g1_ * vec3(-1.0)));
}

fn line_right_complement(self_1354: Line) -> Line {
    var self_1355: Line;

    self_1355 = self_1354;
    let _e2: Line = self_1355;
    let _e7: Line = self_1355;
    return Line((_e2.g1_ * vec3(-1.0)), (_e7.g0_ * vec3(-1.0)));
}

fn line_left_complement(self_1356: Line) -> Line {
    var self_1357: Line;

    self_1357 = self_1356;
    let _e2: Line = self_1357;
    let _e7: Line = self_1357;
    return Line((_e2.g1_ * vec3(-1.0)), (_e7.g0_ * vec3(-1.0)));
}

fn line_double_complement(self_1358: Line) -> Line {
    var self_1359: Line;

    self_1359 = self_1358;
    let _e2: Line = self_1359;
    let _e4: Line = self_1359;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_scalar_geometric_product(self_1360: Line, other_1208: Scalar) -> Line {
    var self_1361: Line;
    var other_1209: Scalar;

    self_1361 = self_1360;
    other_1209 = other_1208;
    let _e4: Line = self_1361;
    let _e6: Scalar = other_1209;
    let _e10: Line = self_1361;
    let _e12: Scalar = other_1209;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_geometric_anti_product(self_1362: Line, other_1210: Scalar) -> Translator {
    var self_1363: Line;
    var other_1211: Scalar;

    self_1363 = self_1362;
    other_1211 = other_1210;
    let _e4: Line = self_1363;
    let _e7: Line = self_1363;
    let _e10: Line = self_1363;
    let _e13: Line = self_1363;
    let _e17: Scalar = other_1211;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_scalar_outer_product(self_1364: Line, other_1212: Scalar) -> Line {
    var self_1365: Line;
    var other_1213: Scalar;

    self_1365 = self_1364;
    other_1213 = other_1212;
    let _e4: Line = self_1365;
    let _e6: Scalar = other_1213;
    let _e10: Line = self_1365;
    let _e12: Scalar = other_1213;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_wedge(self_1366: Line, other_1214: Scalar) -> Line {
    var self_1367: Line;
    var other_1215: Scalar;

    self_1367 = self_1366;
    other_1215 = other_1214;
    let _e4: Line = self_1367;
    let _e6: Scalar = other_1215;
    let _e10: Line = self_1367;
    let _e12: Scalar = other_1215;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_join(self_1368: Line, other_1216: Scalar) -> Line {
    var self_1369: Line;
    var other_1217: Scalar;

    self_1369 = self_1368;
    other_1217 = other_1216;
    let _e4: Line = self_1369;
    let _e6: Scalar = other_1217;
    let _e10: Line = self_1369;
    let _e12: Scalar = other_1217;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_inner_product(self_1370: Line, other_1218: Scalar) -> Line {
    var self_1371: Line;
    var other_1219: Scalar;

    self_1371 = self_1370;
    other_1219 = other_1218;
    let _e4: Line = self_1371;
    let _e6: Scalar = other_1219;
    let _e10: Line = self_1371;
    let _e12: Scalar = other_1219;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_inner_anti_product(self_1372: Line, other_1220: Scalar) -> Translator {
    var self_1373: Line;
    var other_1221: Scalar;

    self_1373 = self_1372;
    other_1221 = other_1220;
    let _e4: Line = self_1373;
    let _e7: Line = self_1373;
    let _e10: Line = self_1373;
    let _e13: Line = self_1373;
    let _e17: Scalar = other_1221;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_scalar_right_contraction(self_1374: Line, other_1222: Scalar) -> Line {
    var self_1375: Line;
    var other_1223: Scalar;

    self_1375 = self_1374;
    other_1223 = other_1222;
    let _e4: Line = self_1375;
    let _e6: Scalar = other_1223;
    let _e10: Line = self_1375;
    let _e12: Scalar = other_1223;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_scalar_left_anti_contraction(self_1376: Line, other_1224: Scalar) -> Translator {
    var self_1377: Line;
    var other_1225: Scalar;

    self_1377 = self_1376;
    other_1225 = other_1224;
    let _e4: Line = self_1377;
    let _e7: Line = self_1377;
    let _e10: Line = self_1377;
    let _e13: Line = self_1377;
    let _e17: Scalar = other_1225;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_anti_scalar_add(self_1378: Line, other_1226: AntiScalar) -> Motor {
    var self_1379: Line;
    var other_1227: AntiScalar;

    self_1379 = self_1378;
    other_1227 = other_1226;
    let _e4: Line = self_1379;
    let _e7: Line = self_1379;
    let _e10: Line = self_1379;
    let _e13: Line = self_1379;
    let _e23: AntiScalar = other_1227;
    let _e33: Line = self_1379;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + (vec4(_e23.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e33.g1_);
}

fn line_anti_scalar_sub(self_1380: Line, other_1228: AntiScalar) -> Motor {
    var self_1381: Line;
    var other_1229: AntiScalar;

    self_1381 = self_1380;
    other_1229 = other_1228;
    let _e4: Line = self_1381;
    let _e7: Line = self_1381;
    let _e10: Line = self_1381;
    let _e13: Line = self_1381;
    let _e23: AntiScalar = other_1229;
    let _e33: Line = self_1381;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - (vec4(_e23.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e33.g1_);
}

fn line_anti_scalar_geometric_product(self_1382: Line, other_1230: AntiScalar) -> Rotor {
    var self_1383: Line;
    var other_1231: AntiScalar;

    self_1383 = self_1382;
    other_1231 = other_1230;
    let _e4: Line = self_1383;
    let _e7: Line = self_1383;
    let _e10: Line = self_1383;
    let _e13: Line = self_1383;
    let _e17: AntiScalar = other_1231;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_anti_scalar_geometric_anti_product(self_1384: Line, other_1232: AntiScalar) -> Line {
    var self_1385: Line;
    var other_1233: AntiScalar;

    self_1385 = self_1384;
    other_1233 = other_1232;
    let _e4: Line = self_1385;
    let _e6: AntiScalar = other_1233;
    let _e10: Line = self_1385;
    let _e12: AntiScalar = other_1233;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_anti_scalar_regressive_product(self_1386: Line, other_1234: AntiScalar) -> Line {
    var self_1387: Line;
    var other_1235: AntiScalar;

    self_1387 = self_1386;
    other_1235 = other_1234;
    let _e4: Line = self_1387;
    let _e6: AntiScalar = other_1235;
    let _e10: Line = self_1387;
    let _e12: AntiScalar = other_1235;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_anti_scalar_anti_wedge(self_1388: Line, other_1236: AntiScalar) -> Line {
    var self_1389: Line;
    var other_1237: AntiScalar;

    self_1389 = self_1388;
    other_1237 = other_1236;
    let _e4: Line = self_1389;
    let _e6: AntiScalar = other_1237;
    let _e10: Line = self_1389;
    let _e12: AntiScalar = other_1237;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_anti_scalar_meet(self_1390: Line, other_1238: AntiScalar) -> Line {
    var self_1391: Line;
    var other_1239: AntiScalar;

    self_1391 = self_1390;
    other_1239 = other_1238;
    let _e4: Line = self_1391;
    let _e6: AntiScalar = other_1239;
    let _e10: Line = self_1391;
    let _e12: AntiScalar = other_1239;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_anti_scalar_inner_product(self_1392: Line, other_1240: AntiScalar) -> Rotor {
    var self_1393: Line;
    var other_1241: AntiScalar;

    self_1393 = self_1392;
    other_1241 = other_1240;
    let _e4: Line = self_1393;
    let _e7: Line = self_1393;
    let _e10: Line = self_1393;
    let _e13: Line = self_1393;
    let _e17: AntiScalar = other_1241;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_anti_scalar_inner_anti_product(self_1394: Line, other_1242: AntiScalar) -> Line {
    var self_1395: Line;
    var other_1243: AntiScalar;

    self_1395 = self_1394;
    other_1243 = other_1242;
    let _e4: Line = self_1395;
    let _e6: AntiScalar = other_1243;
    let _e10: Line = self_1395;
    let _e12: AntiScalar = other_1243;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_anti_scalar_left_contraction(self_1396: Line, other_1244: AntiScalar) -> Rotor {
    var self_1397: Line;
    var other_1245: AntiScalar;

    self_1397 = self_1396;
    other_1245 = other_1244;
    let _e4: Line = self_1397;
    let _e7: Line = self_1397;
    let _e10: Line = self_1397;
    let _e13: Line = self_1397;
    let _e17: AntiScalar = other_1245;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_anti_scalar_right_anti_contraction(self_1398: Line, other_1246: AntiScalar) -> Line {
    var self_1399: Line;
    var other_1247: AntiScalar;

    self_1399 = self_1398;
    other_1247 = other_1246;
    let _e4: Line = self_1399;
    let _e6: AntiScalar = other_1247;
    let _e10: Line = self_1399;
    let _e12: AntiScalar = other_1247;
    return Line((_e4.g0_ * vec3(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn line_homogeneous_magnitude_geometric_product(self_1400: Line, other_1248: HomogeneousMagnitude) -> Line {
    var self_1401: Line;
    var other_1249: HomogeneousMagnitude;

    self_1401 = self_1400;
    other_1249 = other_1248;
    let _e4: Line = self_1401;
    let _e8: HomogeneousMagnitude = other_1249;
    let _e18: Line = self_1401;
    let _e22: HomogeneousMagnitude = other_1249;
    let _e33: Line = self_1401;
    let _e37: HomogeneousMagnitude = other_1249;
    let _e48: Line = self_1401;
    let _e50: HomogeneousMagnitude = other_1249;
    let _e56: Line = self_1401;
    let _e58: HomogeneousMagnitude = other_1249;
    return Line((((((vec3(_e4.g1_.x) * vec3(_e8.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e18.g1_.y) * vec3(_e22.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e33.g1_.z) * vec3(_e37.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e48.g0_ * vec3(_e50.g0_.x))), (_e56.g1_ * vec3(_e58.g0_.x)));
}

fn line_homogeneous_magnitude_geometric_anti_product(self_1402: Line, other_1250: HomogeneousMagnitude) -> Line {
    var self_1403: Line;
    var other_1251: HomogeneousMagnitude;

    self_1403 = self_1402;
    other_1251 = other_1250;
    let _e4: Line = self_1403;
    let _e6: HomogeneousMagnitude = other_1251;
    let _e11: Line = self_1403;
    let _e15: HomogeneousMagnitude = other_1251;
    let _e25: Line = self_1403;
    let _e29: HomogeneousMagnitude = other_1251;
    let _e40: Line = self_1403;
    let _e44: HomogeneousMagnitude = other_1251;
    let _e55: Line = self_1403;
    let _e57: HomogeneousMagnitude = other_1251;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (((((vec3(_e11.g1_.x) * vec3(_e15.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e25.g1_.y) * vec3(_e29.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e40.g1_.z) * vec3(_e44.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e55.g0_ * vec3(_e57.g0_.x))));
}

fn line_homogeneous_magnitude_regressive_product(self_1404: Line, other_1252: HomogeneousMagnitude) -> Line {
    var self_1405: Line;
    var other_1253: HomogeneousMagnitude;

    self_1405 = self_1404;
    other_1253 = other_1252;
    let _e4: Line = self_1405;
    let _e6: HomogeneousMagnitude = other_1253;
    let _e11: Line = self_1405;
    let _e13: HomogeneousMagnitude = other_1253;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (_e11.g1_ * vec3(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_anti_wedge(self_1406: Line, other_1254: HomogeneousMagnitude) -> Line {
    var self_1407: Line;
    var other_1255: HomogeneousMagnitude;

    self_1407 = self_1406;
    other_1255 = other_1254;
    let _e4: Line = self_1407;
    let _e6: HomogeneousMagnitude = other_1255;
    let _e11: Line = self_1407;
    let _e13: HomogeneousMagnitude = other_1255;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (_e11.g1_ * vec3(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_meet(self_1408: Line, other_1256: HomogeneousMagnitude) -> Line {
    var self_1409: Line;
    var other_1257: HomogeneousMagnitude;

    self_1409 = self_1408;
    other_1257 = other_1256;
    let _e4: Line = self_1409;
    let _e6: HomogeneousMagnitude = other_1257;
    let _e11: Line = self_1409;
    let _e13: HomogeneousMagnitude = other_1257;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (_e11.g1_ * vec3(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_outer_product(self_1410: Line, other_1258: HomogeneousMagnitude) -> Line {
    var self_1411: Line;
    var other_1259: HomogeneousMagnitude;

    self_1411 = self_1410;
    other_1259 = other_1258;
    let _e4: Line = self_1411;
    let _e6: HomogeneousMagnitude = other_1259;
    let _e11: Line = self_1411;
    let _e13: HomogeneousMagnitude = other_1259;
    return Line((_e4.g0_ * vec3(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_wedge(self_1412: Line, other_1260: HomogeneousMagnitude) -> Line {
    var self_1413: Line;
    var other_1261: HomogeneousMagnitude;

    self_1413 = self_1412;
    other_1261 = other_1260;
    let _e4: Line = self_1413;
    let _e6: HomogeneousMagnitude = other_1261;
    let _e11: Line = self_1413;
    let _e13: HomogeneousMagnitude = other_1261;
    return Line((_e4.g0_ * vec3(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_join(self_1414: Line, other_1262: HomogeneousMagnitude) -> Line {
    var self_1415: Line;
    var other_1263: HomogeneousMagnitude;

    self_1415 = self_1414;
    other_1263 = other_1262;
    let _e4: Line = self_1415;
    let _e6: HomogeneousMagnitude = other_1263;
    let _e11: Line = self_1415;
    let _e13: HomogeneousMagnitude = other_1263;
    return Line((_e4.g0_ * vec3(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_inner_product(self_1416: Line, other_1264: HomogeneousMagnitude) -> Line {
    var self_1417: Line;
    var other_1265: HomogeneousMagnitude;

    self_1417 = self_1416;
    other_1265 = other_1264;
    let _e4: Line = self_1417;
    let _e8: HomogeneousMagnitude = other_1265;
    let _e18: Line = self_1417;
    let _e22: HomogeneousMagnitude = other_1265;
    let _e33: Line = self_1417;
    let _e37: HomogeneousMagnitude = other_1265;
    let _e48: Line = self_1417;
    let _e50: HomogeneousMagnitude = other_1265;
    let _e56: Line = self_1417;
    let _e58: HomogeneousMagnitude = other_1265;
    return Line((((((vec3(_e4.g1_.x) * vec3(_e8.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e18.g1_.y) * vec3(_e22.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e33.g1_.z) * vec3(_e37.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e48.g0_ * vec3(_e50.g0_.x))), (_e56.g1_ * vec3(_e58.g0_.x)));
}

fn line_homogeneous_magnitude_inner_anti_product(self_1418: Line, other_1266: HomogeneousMagnitude) -> Line {
    var self_1419: Line;
    var other_1267: HomogeneousMagnitude;

    self_1419 = self_1418;
    other_1267 = other_1266;
    let _e4: Line = self_1419;
    let _e6: HomogeneousMagnitude = other_1267;
    let _e11: Line = self_1419;
    let _e15: HomogeneousMagnitude = other_1267;
    let _e25: Line = self_1419;
    let _e29: HomogeneousMagnitude = other_1267;
    let _e40: Line = self_1419;
    let _e44: HomogeneousMagnitude = other_1267;
    let _e55: Line = self_1419;
    let _e57: HomogeneousMagnitude = other_1267;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (((((vec3(_e11.g1_.x) * vec3(_e15.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e25.g1_.y) * vec3(_e29.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e40.g1_.z) * vec3(_e44.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e55.g0_ * vec3(_e57.g0_.x))));
}

fn line_homogeneous_magnitude_left_contraction(self_1420: Line, other_1268: HomogeneousMagnitude) -> Rotor {
    var self_1421: Line;
    var other_1269: HomogeneousMagnitude;

    self_1421 = self_1420;
    other_1269 = other_1268;
    let _e4: Line = self_1421;
    let _e7: Line = self_1421;
    let _e10: Line = self_1421;
    let _e13: Line = self_1421;
    let _e17: HomogeneousMagnitude = other_1269;
    let _e20: HomogeneousMagnitude = other_1269;
    let _e23: HomogeneousMagnitude = other_1269;
    let _e26: HomogeneousMagnitude = other_1269;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4<f32>(_e17.g0_.y, _e20.g0_.y, _e23.g0_.y, _e26.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_homogeneous_magnitude_right_contraction(self_1422: Line, other_1270: HomogeneousMagnitude) -> Line {
    var self_1423: Line;
    var other_1271: HomogeneousMagnitude;

    self_1423 = self_1422;
    other_1271 = other_1270;
    let _e4: Line = self_1423;
    let _e6: HomogeneousMagnitude = other_1271;
    let _e11: Line = self_1423;
    let _e13: HomogeneousMagnitude = other_1271;
    return Line((_e4.g0_ * vec3(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_left_anti_contraction(self_1424: Line, other_1272: HomogeneousMagnitude) -> Translator {
    var self_1425: Line;
    var other_1273: HomogeneousMagnitude;

    self_1425 = self_1424;
    other_1273 = other_1272;
    let _e4: Line = self_1425;
    let _e7: Line = self_1425;
    let _e10: Line = self_1425;
    let _e13: Line = self_1425;
    let _e17: HomogeneousMagnitude = other_1273;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4(_e17.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_homogeneous_magnitude_right_anti_contraction(self_1426: Line, other_1274: HomogeneousMagnitude) -> Line {
    var self_1427: Line;
    var other_1275: HomogeneousMagnitude;

    self_1427 = self_1426;
    other_1275 = other_1274;
    let _e4: Line = self_1427;
    let _e6: HomogeneousMagnitude = other_1275;
    let _e11: Line = self_1427;
    let _e13: HomogeneousMagnitude = other_1275;
    return Line((_e4.g0_ * vec3(_e6.g0_.y)), (_e11.g1_ * vec3(_e13.g0_.y)));
}

fn line_point_geometric_product(self_1428: Line, other_1276: Point) -> Flector {
    var self_1429: Line;
    var other_1277: Point;

    self_1429 = self_1428;
    other_1277 = other_1276;
    let _e4: Line = self_1429;
    let _e8: Point = other_1277;
    let _e19: Line = self_1429;
    let _e23: Point = other_1277;
    let _e35: Line = self_1429;
    let _e39: Point = other_1277;
    let _e50: Line = self_1429;
    let _e54: Point = other_1277;
    let _e65: Line = self_1429;
    let _e68: Line = self_1429;
    let _e71: Line = self_1429;
    let _e74: Line = self_1429;
    let _e78: Point = other_1277;
    let _e89: Line = self_1429;
    let _e93: Point = other_1277;
    let _e103: Line = self_1429;
    let _e107: Point = other_1277;
    let _e118: Line = self_1429;
    let _e122: Point = other_1277;
    let _e133: Line = self_1429;
    let _e137: Point = other_1277;
    let _e148: Line = self_1429;
    let _e151: Line = self_1429;
    let _e154: Line = self_1429;
    let _e157: Line = self_1429;
    let _e161: Point = other_1277;
    return Flector(((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e50.g1_.z) * _e54.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g1_.x, _e71.g1_.x, _e74.g0_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), ((((((vec4(_e89.g0_.y) * _e93.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e103.g0_.z) * _e107.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e118.g1_.y) * _e122.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e133.g1_.z) * _e137.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e148.g1_.x, _e151.g0_.x, _e154.g0_.x, _e157.g1_.x) * _e161.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_point_geometric_anti_product(self_1430: Line, other_1278: Point) -> Flector {
    var self_1431: Line;
    var other_1279: Point;

    self_1431 = self_1430;
    other_1279 = other_1278;
    let _e4: Line = self_1431;
    let _e8: Point = other_1279;
    let _e18: Line = self_1431;
    let _e22: Point = other_1279;
    let _e33: Line = self_1431;
    let _e37: Point = other_1279;
    let _e49: Line = self_1431;
    let _e53: Point = other_1279;
    let _e65: Line = self_1431;
    let _e68: Line = self_1431;
    let _e71: Line = self_1431;
    let _e74: Line = self_1431;
    let _e78: Point = other_1279;
    let _e89: Line = self_1431;
    let _e93: Point = other_1279;
    let _e103: Line = self_1431;
    let _e107: Point = other_1279;
    let _e118: Line = self_1431;
    let _e122: Point = other_1279;
    return Flector(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e65.g1_.x, _e68.g0_.x, _e71.g0_.x, _e74.g0_.x) * _e78.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((vec4(_e89.g0_.y) * _e93.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e103.g0_.z) * _e107.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e118.g0_.x) * _e122.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_point_outer_product(self_1432: Line, other_1280: Point) -> Plane {
    var self_1433: Line;
    var other_1281: Point;

    self_1433 = self_1432;
    other_1281 = other_1280;
    let _e4: Line = self_1433;
    let _e8: Point = other_1281;
    let _e18: Line = self_1433;
    let _e22: Point = other_1281;
    let _e33: Line = self_1433;
    let _e37: Point = other_1281;
    let _e48: Line = self_1433;
    let _e52: Point = other_1281;
    let _e63: Line = self_1433;
    let _e66: Line = self_1433;
    let _e69: Line = self_1433;
    let _e72: Line = self_1433;
    let _e76: Point = other_1281;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_point_wedge(self_1434: Line, other_1282: Point) -> Plane {
    var self_1435: Line;
    var other_1283: Point;

    self_1435 = self_1434;
    other_1283 = other_1282;
    let _e4: Line = self_1435;
    let _e8: Point = other_1283;
    let _e18: Line = self_1435;
    let _e22: Point = other_1283;
    let _e33: Line = self_1435;
    let _e37: Point = other_1283;
    let _e48: Line = self_1435;
    let _e52: Point = other_1283;
    let _e63: Line = self_1435;
    let _e66: Line = self_1435;
    let _e69: Line = self_1435;
    let _e72: Line = self_1435;
    let _e76: Point = other_1283;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_point_join(self_1436: Line, other_1284: Point) -> Plane {
    var self_1437: Line;
    var other_1285: Point;

    self_1437 = self_1436;
    other_1285 = other_1284;
    let _e4: Line = self_1437;
    let _e8: Point = other_1285;
    let _e18: Line = self_1437;
    let _e22: Point = other_1285;
    let _e33: Line = self_1437;
    let _e37: Point = other_1285;
    let _e48: Line = self_1437;
    let _e52: Point = other_1285;
    let _e63: Line = self_1437;
    let _e66: Line = self_1437;
    let _e69: Line = self_1437;
    let _e72: Line = self_1437;
    let _e76: Point = other_1285;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_point_inner_product(self_1438: Line, other_1286: Point) -> Point {
    var self_1439: Line;
    var other_1287: Point;

    self_1439 = self_1438;
    other_1287 = other_1286;
    let _e4: Line = self_1439;
    let _e8: Point = other_1287;
    let _e19: Line = self_1439;
    let _e23: Point = other_1287;
    let _e35: Line = self_1439;
    let _e39: Point = other_1287;
    let _e50: Line = self_1439;
    let _e54: Point = other_1287;
    let _e65: Line = self_1439;
    let _e68: Line = self_1439;
    let _e71: Line = self_1439;
    let _e74: Line = self_1439;
    let _e78: Point = other_1287;
    return Point(((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e50.g1_.z) * _e54.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g1_.x, _e71.g1_.x, _e74.g0_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))));
}

fn line_point_inner_anti_product(self_1440: Line, other_1288: Point) -> Plane {
    var self_1441: Line;
    var other_1289: Point;

    self_1441 = self_1440;
    other_1289 = other_1288;
    let _e4: Line = self_1441;
    let _e8: Point = other_1289;
    let _e18: Line = self_1441;
    let _e22: Point = other_1289;
    let _e33: Line = self_1441;
    let _e37: Point = other_1289;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_point_right_contraction(self_1442: Line, other_1290: Point) -> Point {
    var self_1443: Line;
    var other_1291: Point;

    self_1443 = self_1442;
    other_1291 = other_1290;
    let _e4: Line = self_1443;
    let _e8: Point = other_1291;
    let _e19: Line = self_1443;
    let _e23: Point = other_1291;
    let _e35: Line = self_1443;
    let _e39: Point = other_1291;
    let _e50: Line = self_1443;
    let _e54: Point = other_1291;
    let _e65: Line = self_1443;
    let _e68: Line = self_1443;
    let _e71: Line = self_1443;
    let _e74: Line = self_1443;
    let _e78: Point = other_1291;
    return Point(((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e50.g1_.z) * _e54.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g1_.x, _e71.g1_.x, _e74.g0_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))));
}

fn line_point_left_anti_contraction(self_1444: Line, other_1292: Point) -> Plane {
    var self_1445: Line;
    var other_1293: Point;

    self_1445 = self_1444;
    other_1293 = other_1292;
    let _e4: Line = self_1445;
    let _e8: Point = other_1293;
    let _e18: Line = self_1445;
    let _e22: Point = other_1293;
    let _e33: Line = self_1445;
    let _e37: Point = other_1293;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_line_add(self_1446: Line, other_1294: Line) -> Line {
    var self_1447: Line;
    var other_1295: Line;

    self_1447 = self_1446;
    other_1295 = other_1294;
    let _e4: Line = self_1447;
    let _e6: Line = other_1295;
    let _e9: Line = self_1447;
    let _e11: Line = other_1295;
    return Line((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn line_line_sub(self_1448: Line, other_1296: Line) -> Line {
    var self_1449: Line;
    var other_1297: Line;

    self_1449 = self_1448;
    other_1297 = other_1296;
    let _e4: Line = self_1449;
    let _e6: Line = other_1297;
    let _e9: Line = self_1449;
    let _e11: Line = other_1297;
    return Line((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn line_line_mul(self_1450: Line, other_1298: Line) -> Line {
    var self_1451: Line;
    var other_1299: Line;

    self_1451 = self_1450;
    other_1299 = other_1298;
    let _e4: Line = self_1451;
    let _e6: Line = other_1299;
    let _e9: Line = self_1451;
    let _e11: Line = other_1299;
    return Line((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn line_line_div(self_1452: Line, other_1300: Line) -> Line {
    var self_1453: Line;
    var other_1301: Line;

    self_1453 = self_1452;
    other_1301 = other_1300;
    let _e4: Line = self_1453;
    let _e7: Line = self_1453;
    let _e10: Line = self_1453;
    let _e19: Line = other_1301;
    let _e22: Line = other_1301;
    let _e25: Line = other_1301;
    let _e35: Line = self_1453;
    let _e38: Line = self_1453;
    let _e41: Line = self_1453;
    let _e50: Line = other_1301;
    let _e53: Line = other_1301;
    let _e56: Line = other_1301;
    return Line((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn line_line_geometric_product(self_1454: Line, other_1302: Line) -> MultiVector {
    var self_1455: Line;
    var other_1303: Line;

    self_1455 = self_1454;
    other_1303 = other_1302;
    let _e4: Line = self_1455;
    let _e8: Line = other_1303;
    let _e17: Line = self_1455;
    let _e21: Line = other_1303;
    let _e31: Line = self_1455;
    let _e35: Line = other_1303;
    let _e38: Line = other_1303;
    let _e44: Line = self_1455;
    let _e48: Line = other_1303;
    let _e51: Line = other_1303;
    let _e57: Line = self_1455;
    let _e61: Line = other_1303;
    let _e64: Line = other_1303;
    let _e70: Line = self_1455;
    let _e74: Line = other_1303;
    let _e86: Line = self_1455;
    let _e90: Line = other_1303;
    let _e99: Line = self_1455;
    let _e103: Line = other_1303;
    let _e113: Line = self_1455;
    let _e117: Line = other_1303;
    let _e127: Line = self_1455;
    let _e131: Line = other_1303;
    let _e141: Line = self_1455;
    let _e145: Line = other_1303;
    let _e155: Line = self_1455;
    let _e159: Line = other_1303;
    let _e169: Line = self_1455;
    let _e173: Line = other_1303;
    let _e182: Line = self_1455;
    let _e186: Line = other_1303;
    let _e196: Line = self_1455;
    let _e200: Line = other_1303;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g1_.x) * vec2<f32>(_e35.g1_.x, _e38.g0_.x))) - (vec2(_e44.g1_.y) * vec2<f32>(_e48.g1_.y, _e51.g0_.y))) - (vec2(_e57.g1_.z) * vec2<f32>(_e61.g1_.z, _e64.g0_.z))) + ((vec2(_e70.g0_.x) * vec2(_e74.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (((((((vec3(_e86.g0_.y) * _e90.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e99.g0_.z) * _e103.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e113.g1_.x) * _e117.g0_.zzy) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e127.g1_.y) * _e131.g0_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e141.g1_.z) * _e145.g0_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e155.g0_.x) * _e159.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e169.g1_.y) * _e173.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e182.g1_.z) * _e186.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e196.g1_.x) * _e200.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn line_line_geometric_anti_product(self_1456: Line, other_1304: Line) -> MultiVector {
    var self_1457: Line;
    var other_1305: Line;

    self_1457 = self_1456;
    other_1305 = other_1304;
    let _e6: Line = self_1457;
    let _e10: Line = other_1305;
    let _e13: Line = other_1305;
    let _e19: Line = self_1457;
    let _e23: Line = other_1305;
    let _e26: Line = other_1305;
    let _e32: Line = self_1457;
    let _e36: Line = other_1305;
    let _e39: Line = other_1305;
    let _e45: Line = self_1457;
    let _e49: Line = other_1305;
    let _e59: Line = self_1457;
    let _e63: Line = other_1305;
    let _e73: Line = self_1457;
    let _e77: Line = other_1305;
    let _e89: Line = self_1457;
    let _e93: Line = other_1305;
    let _e102: Line = self_1457;
    let _e106: Line = other_1305;
    let _e116: Line = self_1457;
    let _e120: Line = other_1305;
    let _e130: Line = self_1457;
    let _e134: Line = other_1305;
    let _e143: Line = self_1457;
    let _e147: Line = other_1305;
    let _e157: Line = self_1457;
    let _e161: Line = other_1305;
    let _e171: Line = self_1457;
    let _e175: Line = other_1305;
    let _e185: Line = self_1457;
    let _e189: Line = other_1305;
    let _e199: Line = self_1457;
    let _e203: Line = other_1305;
    return MultiVector(((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.x) * vec2(_e77.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e89.g0_.y) * _e93.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e102.g0_.z) * _e106.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e116.g0_.x) * _e120.g0_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), (((((((vec3(_e130.g0_.y) * _e134.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e143.g0_.z) * _e147.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e157.g1_.x) * _e161.g0_.zzy) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e171.g1_.y) * _e175.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e185.g1_.z) * _e189.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e199.g0_.x) * _e203.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn line_line_regressive_product(self_1458: Line, other_1306: Line) -> Scalar {
    var self_1459: Line;
    var other_1307: Line;

    self_1459 = self_1458;
    other_1307 = other_1306;
    let _e5: Line = self_1459;
    let _e8: Line = other_1307;
    let _e13: Line = self_1459;
    let _e16: Line = other_1307;
    let _e21: Line = self_1459;
    let _e24: Line = other_1307;
    let _e29: Line = self_1459;
    let _e32: Line = other_1307;
    let _e37: Line = self_1459;
    let _e40: Line = other_1307;
    let _e45: Line = self_1459;
    let _e48: Line = other_1307;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_anti_wedge(self_1460: Line, other_1308: Line) -> Scalar {
    var self_1461: Line;
    var other_1309: Line;

    self_1461 = self_1460;
    other_1309 = other_1308;
    let _e5: Line = self_1461;
    let _e8: Line = other_1309;
    let _e13: Line = self_1461;
    let _e16: Line = other_1309;
    let _e21: Line = self_1461;
    let _e24: Line = other_1309;
    let _e29: Line = self_1461;
    let _e32: Line = other_1309;
    let _e37: Line = self_1461;
    let _e40: Line = other_1309;
    let _e45: Line = self_1461;
    let _e48: Line = other_1309;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_meet(self_1462: Line, other_1310: Line) -> Scalar {
    var self_1463: Line;
    var other_1311: Line;

    self_1463 = self_1462;
    other_1311 = other_1310;
    let _e5: Line = self_1463;
    let _e8: Line = other_1311;
    let _e13: Line = self_1463;
    let _e16: Line = other_1311;
    let _e21: Line = self_1463;
    let _e24: Line = other_1311;
    let _e29: Line = self_1463;
    let _e32: Line = other_1311;
    let _e37: Line = self_1463;
    let _e40: Line = other_1311;
    let _e45: Line = self_1463;
    let _e48: Line = other_1311;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_outer_product(self_1464: Line, other_1312: Line) -> AntiScalar {
    var self_1465: Line;
    var other_1313: Line;

    self_1465 = self_1464;
    other_1313 = other_1312;
    let _e5: Line = self_1465;
    let _e8: Line = other_1313;
    let _e13: Line = self_1465;
    let _e16: Line = other_1313;
    let _e21: Line = self_1465;
    let _e24: Line = other_1313;
    let _e29: Line = self_1465;
    let _e32: Line = other_1313;
    let _e37: Line = self_1465;
    let _e40: Line = other_1313;
    let _e45: Line = self_1465;
    let _e48: Line = other_1313;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_wedge(self_1466: Line, other_1314: Line) -> AntiScalar {
    var self_1467: Line;
    var other_1315: Line;

    self_1467 = self_1466;
    other_1315 = other_1314;
    let _e5: Line = self_1467;
    let _e8: Line = other_1315;
    let _e13: Line = self_1467;
    let _e16: Line = other_1315;
    let _e21: Line = self_1467;
    let _e24: Line = other_1315;
    let _e29: Line = self_1467;
    let _e32: Line = other_1315;
    let _e37: Line = self_1467;
    let _e40: Line = other_1315;
    let _e45: Line = self_1467;
    let _e48: Line = other_1315;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_join(self_1468: Line, other_1316: Line) -> AntiScalar {
    var self_1469: Line;
    var other_1317: Line;

    self_1469 = self_1468;
    other_1317 = other_1316;
    let _e5: Line = self_1469;
    let _e8: Line = other_1317;
    let _e13: Line = self_1469;
    let _e16: Line = other_1317;
    let _e21: Line = self_1469;
    let _e24: Line = other_1317;
    let _e29: Line = self_1469;
    let _e32: Line = other_1317;
    let _e37: Line = self_1469;
    let _e40: Line = other_1317;
    let _e45: Line = self_1469;
    let _e48: Line = other_1317;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_inner_product(self_1470: Line, other_1318: Line) -> Scalar {
    var self_1471: Line;
    var other_1319: Line;

    self_1471 = self_1470;
    other_1319 = other_1318;
    let _e5: Line = self_1471;
    let _e8: Line = other_1319;
    let _e13: Line = self_1471;
    let _e16: Line = other_1319;
    let _e21: Line = self_1471;
    let _e24: Line = other_1319;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_inner_anti_product(self_1472: Line, other_1320: Line) -> AntiScalar {
    var self_1473: Line;
    var other_1321: Line;

    self_1473 = self_1472;
    other_1321 = other_1320;
    let _e5: Line = self_1473;
    let _e8: Line = other_1321;
    let _e13: Line = self_1473;
    let _e16: Line = other_1321;
    let _e21: Line = self_1473;
    let _e24: Line = other_1321;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_left_contraction(self_1474: Line, other_1322: Line) -> Scalar {
    var self_1475: Line;
    var other_1323: Line;

    self_1475 = self_1474;
    other_1323 = other_1322;
    let _e5: Line = self_1475;
    let _e8: Line = other_1323;
    let _e13: Line = self_1475;
    let _e16: Line = other_1323;
    let _e21: Line = self_1475;
    let _e24: Line = other_1323;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_right_contraction(self_1476: Line, other_1324: Line) -> Scalar {
    var self_1477: Line;
    var other_1325: Line;

    self_1477 = self_1476;
    other_1325 = other_1324;
    let _e5: Line = self_1477;
    let _e8: Line = other_1325;
    let _e13: Line = self_1477;
    let _e16: Line = other_1325;
    let _e21: Line = self_1477;
    let _e24: Line = other_1325;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_left_anti_contraction(self_1478: Line, other_1326: Line) -> AntiScalar {
    var self_1479: Line;
    var other_1327: Line;

    self_1479 = self_1478;
    other_1327 = other_1326;
    let _e5: Line = self_1479;
    let _e8: Line = other_1327;
    let _e13: Line = self_1479;
    let _e16: Line = other_1327;
    let _e21: Line = self_1479;
    let _e24: Line = other_1327;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_right_anti_contraction(self_1480: Line, other_1328: Line) -> AntiScalar {
    var self_1481: Line;
    var other_1329: Line;

    self_1481 = self_1480;
    other_1329 = other_1328;
    let _e5: Line = self_1481;
    let _e8: Line = other_1329;
    let _e13: Line = self_1481;
    let _e16: Line = other_1329;
    let _e21: Line = self_1481;
    let _e24: Line = other_1329;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_scalar_product(self_1482: Line, other_1330: Line) -> Scalar {
    var self_1483: Line;
    var other_1331: Line;

    self_1483 = self_1482;
    other_1331 = other_1330;
    let _e5: Line = self_1483;
    let _e8: Line = other_1331;
    let _e13: Line = self_1483;
    let _e16: Line = other_1331;
    let _e21: Line = self_1483;
    let _e24: Line = other_1331;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_dot(self_1484: Line, other_1332: Line) -> Scalar {
    var self_1485: Line;
    var other_1333: Line;

    self_1485 = self_1484;
    other_1333 = other_1332;
    let _e5: Line = self_1485;
    let _e8: Line = other_1333;
    let _e13: Line = self_1485;
    let _e16: Line = other_1333;
    let _e21: Line = self_1485;
    let _e24: Line = other_1333;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_anti_scalar_product(self_1486: Line, other_1334: Line) -> AntiScalar {
    var self_1487: Line;
    var other_1335: Line;

    self_1487 = self_1486;
    other_1335 = other_1334;
    let _e5: Line = self_1487;
    let _e8: Line = other_1335;
    let _e13: Line = self_1487;
    let _e16: Line = other_1335;
    let _e21: Line = self_1487;
    let _e24: Line = other_1335;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_anti_dot(self_1488: Line, other_1336: Line) -> AntiScalar {
    var self_1489: Line;
    var other_1337: Line;

    self_1489 = self_1488;
    other_1337 = other_1336;
    let _e5: Line = self_1489;
    let _e8: Line = other_1337;
    let _e13: Line = self_1489;
    let _e16: Line = other_1337;
    let _e21: Line = self_1489;
    let _e24: Line = other_1337;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_plane_geometric_product(self_1490: Line, other_1338: Plane) -> Flector {
    var self_1491: Line;
    var other_1339: Plane;

    self_1491 = self_1490;
    other_1339 = other_1338;
    let _e4: Line = self_1491;
    let _e8: Plane = other_1339;
    let _e18: Line = self_1491;
    let _e22: Plane = other_1339;
    let _e33: Line = self_1491;
    let _e37: Plane = other_1339;
    let _e48: Line = self_1491;
    let _e52: Plane = other_1339;
    let _e62: Line = self_1491;
    let _e66: Plane = other_1339;
    let _e77: Line = self_1491;
    let _e81: Plane = other_1339;
    let _e92: Line = self_1491;
    let _e95: Line = self_1491;
    let _e98: Line = self_1491;
    let _e101: Line = self_1491;
    let _e105: Plane = other_1339;
    return Flector(((((vec4(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (((((vec4(_e48.g1_.x) * _e52.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e62.g1_.y) * _e66.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e77.g1_.z) * _e81.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e92.g0_.x, _e95.g0_.y, _e98.g0_.z, _e101.g0_.x) * _e105.g0_.wwwx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn line_plane_geometric_anti_product(self_1492: Line, other_1340: Plane) -> Flector {
    var self_1493: Line;
    var other_1341: Plane;

    self_1493 = self_1492;
    other_1341 = other_1340;
    let _e4: Line = self_1493;
    let _e8: Plane = other_1341;
    let _e18: Line = self_1493;
    let _e22: Plane = other_1341;
    let _e33: Line = self_1493;
    let _e37: Plane = other_1341;
    let _e48: Line = self_1493;
    let _e52: Plane = other_1341;
    let _e63: Line = self_1493;
    let _e66: Line = self_1493;
    let _e69: Line = self_1493;
    let _e72: Line = self_1493;
    let _e76: Plane = other_1341;
    let _e87: Line = self_1493;
    let _e91: Plane = other_1341;
    let _e101: Line = self_1493;
    let _e105: Plane = other_1341;
    let _e116: Line = self_1493;
    let _e120: Plane = other_1341;
    let _e132: Line = self_1493;
    let _e136: Plane = other_1341;
    let _e148: Line = self_1493;
    let _e151: Line = self_1493;
    let _e154: Line = self_1493;
    let _e157: Line = self_1493;
    let _e161: Plane = other_1341;
    return Flector(((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((((vec4(_e87.g0_.y) * _e91.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e101.g0_.z) * _e105.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e116.g1_.y) * vec4(_e120.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e132.g1_.z) * vec4(_e136.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e148.g0_.x, _e151.g0_.x, _e154.g0_.x, _e157.g1_.x) * _e161.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn line_plane_regressive_product(self_1494: Line, other_1342: Plane) -> Point {
    var self_1495: Line;
    var other_1343: Plane;

    self_1495 = self_1494;
    other_1343 = other_1342;
    let _e4: Line = self_1495;
    let _e8: Plane = other_1343;
    let _e18: Line = self_1495;
    let _e22: Plane = other_1343;
    let _e33: Line = self_1495;
    let _e37: Plane = other_1343;
    let _e48: Line = self_1495;
    let _e52: Plane = other_1343;
    let _e63: Line = self_1495;
    let _e66: Line = self_1495;
    let _e69: Line = self_1495;
    let _e72: Line = self_1495;
    let _e76: Plane = other_1343;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_plane_anti_wedge(self_1496: Line, other_1344: Plane) -> Point {
    var self_1497: Line;
    var other_1345: Plane;

    self_1497 = self_1496;
    other_1345 = other_1344;
    let _e4: Line = self_1497;
    let _e8: Plane = other_1345;
    let _e18: Line = self_1497;
    let _e22: Plane = other_1345;
    let _e33: Line = self_1497;
    let _e37: Plane = other_1345;
    let _e48: Line = self_1497;
    let _e52: Plane = other_1345;
    let _e63: Line = self_1497;
    let _e66: Line = self_1497;
    let _e69: Line = self_1497;
    let _e72: Line = self_1497;
    let _e76: Plane = other_1345;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_plane_meet(self_1498: Line, other_1346: Plane) -> Point {
    var self_1499: Line;
    var other_1347: Plane;

    self_1499 = self_1498;
    other_1347 = other_1346;
    let _e4: Line = self_1499;
    let _e8: Plane = other_1347;
    let _e18: Line = self_1499;
    let _e22: Plane = other_1347;
    let _e33: Line = self_1499;
    let _e37: Plane = other_1347;
    let _e48: Line = self_1499;
    let _e52: Plane = other_1347;
    let _e63: Line = self_1499;
    let _e66: Line = self_1499;
    let _e69: Line = self_1499;
    let _e72: Line = self_1499;
    let _e76: Plane = other_1347;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_plane_inner_product(self_1500: Line, other_1348: Plane) -> Point {
    var self_1501: Line;
    var other_1349: Plane;

    self_1501 = self_1500;
    other_1349 = other_1348;
    let _e4: Line = self_1501;
    let _e8: Plane = other_1349;
    let _e18: Line = self_1501;
    let _e22: Plane = other_1349;
    let _e33: Line = self_1501;
    let _e37: Plane = other_1349;
    return Point(((((vec4(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_plane_inner_anti_product(self_1502: Line, other_1350: Plane) -> Plane {
    var self_1503: Line;
    var other_1351: Plane;

    self_1503 = self_1502;
    other_1351 = other_1350;
    let _e4: Line = self_1503;
    let _e8: Plane = other_1351;
    let _e18: Line = self_1503;
    let _e22: Plane = other_1351;
    let _e33: Line = self_1503;
    let _e37: Plane = other_1351;
    let _e49: Line = self_1503;
    let _e53: Plane = other_1351;
    let _e65: Line = self_1503;
    let _e68: Line = self_1503;
    let _e71: Line = self_1503;
    let _e74: Line = self_1503;
    let _e78: Plane = other_1351;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g0_.x, _e71.g0_.x, _e74.g1_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn line_plane_left_contraction(self_1504: Line, other_1352: Plane) -> Point {
    var self_1505: Line;
    var other_1353: Plane;

    self_1505 = self_1504;
    other_1353 = other_1352;
    let _e4: Line = self_1505;
    let _e8: Plane = other_1353;
    let _e18: Line = self_1505;
    let _e22: Plane = other_1353;
    let _e33: Line = self_1505;
    let _e37: Plane = other_1353;
    return Point(((((vec4(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_plane_right_anti_contraction(self_1506: Line, other_1354: Plane) -> Plane {
    var self_1507: Line;
    var other_1355: Plane;

    self_1507 = self_1506;
    other_1355 = other_1354;
    let _e4: Line = self_1507;
    let _e8: Plane = other_1355;
    let _e18: Line = self_1507;
    let _e22: Plane = other_1355;
    let _e33: Line = self_1507;
    let _e37: Plane = other_1355;
    let _e49: Line = self_1507;
    let _e53: Plane = other_1355;
    let _e65: Line = self_1507;
    let _e68: Line = self_1507;
    let _e71: Line = self_1507;
    let _e74: Line = self_1507;
    let _e78: Plane = other_1355;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g0_.x, _e71.g0_.x, _e74.g1_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn line_motor_add(self_1508: Line, other_1356: Motor) -> Motor {
    var self_1509: Line;
    var other_1357: Motor;

    self_1509 = self_1508;
    other_1357 = other_1356;
    let _e4: Line = self_1509;
    let _e7: Line = self_1509;
    let _e10: Line = self_1509;
    let _e13: Line = self_1509;
    let _e23: Motor = other_1357;
    let _e26: Line = self_1509;
    let _e28: Motor = other_1357;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e23.g0_), (_e26.g1_ + _e28.g1_));
}

fn line_motor_sub(self_1510: Line, other_1358: Motor) -> Motor {
    var self_1511: Line;
    var other_1359: Motor;

    self_1511 = self_1510;
    other_1359 = other_1358;
    let _e4: Line = self_1511;
    let _e7: Line = self_1511;
    let _e10: Line = self_1511;
    let _e13: Line = self_1511;
    let _e23: Motor = other_1359;
    let _e26: Line = self_1511;
    let _e28: Motor = other_1359;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e23.g0_), (_e26.g1_ - _e28.g1_));
}

fn line_motor_geometric_product(self_1512: Line, other_1360: Motor) -> MultiVector {
    var self_1513: Line;
    var other_1361: Motor;

    self_1513 = self_1512;
    other_1361 = other_1360;
    let _e4: Line = self_1513;
    let _e8: Motor = other_1361;
    let _e17: Line = self_1513;
    let _e21: Motor = other_1361;
    let _e31: Line = self_1513;
    let _e35: Motor = other_1361;
    let _e38: Motor = other_1361;
    let _e44: Line = self_1513;
    let _e48: Motor = other_1361;
    let _e51: Motor = other_1361;
    let _e57: Line = self_1513;
    let _e61: Motor = other_1361;
    let _e64: Motor = other_1361;
    let _e70: Line = self_1513;
    let _e74: Motor = other_1361;
    let _e86: Line = self_1513;
    let _e90: Motor = other_1361;
    let _e99: Line = self_1513;
    let _e103: Motor = other_1361;
    let _e113: Line = self_1513;
    let _e117: Motor = other_1361;
    let _e120: Motor = other_1361;
    let _e123: Motor = other_1361;
    let _e134: Line = self_1513;
    let _e138: Motor = other_1361;
    let _e141: Motor = other_1361;
    let _e144: Motor = other_1361;
    let _e155: Line = self_1513;
    let _e159: Motor = other_1361;
    let _e162: Motor = other_1361;
    let _e165: Motor = other_1361;
    let _e176: Line = self_1513;
    let _e180: Motor = other_1361;
    let _e190: Line = self_1513;
    let _e194: Motor = other_1361;
    let _e203: Line = self_1513;
    let _e207: Motor = other_1361;
    let _e217: Line = self_1513;
    let _e221: Motor = other_1361;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g1_.x) * vec2<f32>(_e35.g1_.x, _e38.g0_.x))) - (vec2(_e44.g1_.y) * vec2<f32>(_e48.g1_.y, _e51.g0_.y))) - (vec2(_e57.g1_.z) * vec2<f32>(_e61.g1_.z, _e64.g0_.z))) + ((vec2(_e70.g0_.x) * vec2(_e74.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (((((((vec3(_e86.g0_.y) * _e90.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e99.g0_.z) * _e103.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e113.g1_.x) * vec3<f32>(_e117.g0_.w, _e120.g0_.z, _e123.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e134.g1_.y) * vec3<f32>(_e138.g0_.z, _e141.g0_.w, _e144.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e155.g1_.z) * vec3<f32>(_e159.g0_.y, _e162.g0_.x, _e165.g0_.w)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e176.g0_.x) * _e180.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e190.g1_.y) * _e194.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e203.g1_.z) * _e207.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e217.g1_.x) * _e221.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn line_motor_geometric_anti_product(self_1514: Line, other_1362: Motor) -> MultiVector {
    var self_1515: Line;
    var other_1363: Motor;

    self_1515 = self_1514;
    other_1363 = other_1362;
    let _e6: Line = self_1515;
    let _e10: Motor = other_1363;
    let _e13: Motor = other_1363;
    let _e19: Line = self_1515;
    let _e23: Motor = other_1363;
    let _e26: Motor = other_1363;
    let _e32: Line = self_1515;
    let _e36: Motor = other_1363;
    let _e39: Motor = other_1363;
    let _e45: Line = self_1515;
    let _e49: Motor = other_1363;
    let _e59: Line = self_1515;
    let _e63: Motor = other_1363;
    let _e73: Line = self_1515;
    let _e77: Motor = other_1363;
    let _e89: Line = self_1515;
    let _e93: Motor = other_1363;
    let _e96: Motor = other_1363;
    let _e99: Motor = other_1363;
    let _e109: Line = self_1515;
    let _e113: Motor = other_1363;
    let _e116: Motor = other_1363;
    let _e119: Motor = other_1363;
    let _e130: Line = self_1515;
    let _e134: Motor = other_1363;
    let _e137: Motor = other_1363;
    let _e140: Motor = other_1363;
    let _e151: Line = self_1515;
    let _e155: Motor = other_1363;
    let _e164: Line = self_1515;
    let _e168: Motor = other_1363;
    let _e178: Line = self_1515;
    let _e182: Motor = other_1363;
    let _e185: Motor = other_1363;
    let _e188: Motor = other_1363;
    let _e199: Line = self_1515;
    let _e203: Motor = other_1363;
    let _e206: Motor = other_1363;
    let _e209: Motor = other_1363;
    let _e220: Line = self_1515;
    let _e224: Motor = other_1363;
    let _e227: Motor = other_1363;
    let _e230: Motor = other_1363;
    let _e241: Line = self_1515;
    let _e245: Motor = other_1363;
    return MultiVector(((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.x) * vec2(_e77.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e89.g0_.x) * vec3<f32>(_e93.g0_.w, _e96.g0_.z, _e99.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e109.g0_.y) * vec3<f32>(_e113.g0_.z, _e116.g0_.w, _e119.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e130.g0_.z) * vec3<f32>(_e134.g0_.y, _e137.g0_.x, _e140.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), (((((((vec3(_e151.g0_.y) * _e155.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e164.g0_.z) * _e168.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e178.g1_.x) * vec3<f32>(_e182.g0_.w, _e185.g0_.z, _e188.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e199.g1_.y) * vec3<f32>(_e203.g0_.z, _e206.g0_.w, _e209.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e220.g1_.z) * vec3<f32>(_e224.g0_.y, _e227.g0_.x, _e230.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e241.g0_.x) * _e245.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn line_motor_regressive_product(self_1516: Line, other_1364: Motor) -> MultiVector {
    var self_1517: Line;
    var other_1365: Motor;

    self_1517 = self_1516;
    other_1365 = other_1364;
    let _e4: Line = self_1517;
    let _e8: Motor = other_1365;
    let _e17: Line = self_1517;
    let _e21: Motor = other_1365;
    let _e31: Line = self_1517;
    let _e35: Motor = other_1365;
    let _e45: Line = self_1517;
    let _e49: Motor = other_1365;
    let _e59: Line = self_1517;
    let _e63: Motor = other_1365;
    let _e73: Line = self_1517;
    let _e77: Motor = other_1365;
    let _e89: Line = self_1517;
    let _e91: Motor = other_1365;
    let _e96: Line = self_1517;
    let _e98: Motor = other_1365;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.w)), (_e96.g1_ * vec3(_e98.g0_.w)), vec4(0.0));
}

fn line_motor_anti_wedge(self_1518: Line, other_1366: Motor) -> MultiVector {
    var self_1519: Line;
    var other_1367: Motor;

    self_1519 = self_1518;
    other_1367 = other_1366;
    let _e4: Line = self_1519;
    let _e8: Motor = other_1367;
    let _e17: Line = self_1519;
    let _e21: Motor = other_1367;
    let _e31: Line = self_1519;
    let _e35: Motor = other_1367;
    let _e45: Line = self_1519;
    let _e49: Motor = other_1367;
    let _e59: Line = self_1519;
    let _e63: Motor = other_1367;
    let _e73: Line = self_1519;
    let _e77: Motor = other_1367;
    let _e89: Line = self_1519;
    let _e91: Motor = other_1367;
    let _e96: Line = self_1519;
    let _e98: Motor = other_1367;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.w)), (_e96.g1_ * vec3(_e98.g0_.w)), vec4(0.0));
}

fn line_motor_meet(self_1520: Line, other_1368: Motor) -> MultiVector {
    var self_1521: Line;
    var other_1369: Motor;

    self_1521 = self_1520;
    other_1369 = other_1368;
    let _e4: Line = self_1521;
    let _e8: Motor = other_1369;
    let _e17: Line = self_1521;
    let _e21: Motor = other_1369;
    let _e31: Line = self_1521;
    let _e35: Motor = other_1369;
    let _e45: Line = self_1521;
    let _e49: Motor = other_1369;
    let _e59: Line = self_1521;
    let _e63: Motor = other_1369;
    let _e73: Line = self_1521;
    let _e77: Motor = other_1369;
    let _e89: Line = self_1521;
    let _e91: Motor = other_1369;
    let _e96: Line = self_1521;
    let _e98: Motor = other_1369;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.w)), (_e96.g1_ * vec3(_e98.g0_.w)), vec4(0.0));
}

fn line_motor_outer_product(self_1522: Line, other_1370: Motor) -> AntiScalar {
    var self_1523: Line;
    var other_1371: Motor;

    self_1523 = self_1522;
    other_1371 = other_1370;
    let _e5: Line = self_1523;
    let _e8: Motor = other_1371;
    let _e13: Line = self_1523;
    let _e16: Motor = other_1371;
    let _e21: Line = self_1523;
    let _e24: Motor = other_1371;
    let _e29: Line = self_1523;
    let _e32: Motor = other_1371;
    let _e37: Line = self_1523;
    let _e40: Motor = other_1371;
    let _e45: Line = self_1523;
    let _e48: Motor = other_1371;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_wedge(self_1524: Line, other_1372: Motor) -> AntiScalar {
    var self_1525: Line;
    var other_1373: Motor;

    self_1525 = self_1524;
    other_1373 = other_1372;
    let _e5: Line = self_1525;
    let _e8: Motor = other_1373;
    let _e13: Line = self_1525;
    let _e16: Motor = other_1373;
    let _e21: Line = self_1525;
    let _e24: Motor = other_1373;
    let _e29: Line = self_1525;
    let _e32: Motor = other_1373;
    let _e37: Line = self_1525;
    let _e40: Motor = other_1373;
    let _e45: Line = self_1525;
    let _e48: Motor = other_1373;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_join(self_1526: Line, other_1374: Motor) -> AntiScalar {
    var self_1527: Line;
    var other_1375: Motor;

    self_1527 = self_1526;
    other_1375 = other_1374;
    let _e5: Line = self_1527;
    let _e8: Motor = other_1375;
    let _e13: Line = self_1527;
    let _e16: Motor = other_1375;
    let _e21: Line = self_1527;
    let _e24: Motor = other_1375;
    let _e29: Line = self_1527;
    let _e32: Motor = other_1375;
    let _e37: Line = self_1527;
    let _e40: Motor = other_1375;
    let _e45: Line = self_1527;
    let _e48: Motor = other_1375;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_inner_product(self_1528: Line, other_1376: Motor) -> MultiVector {
    var self_1529: Line;
    var other_1377: Motor;

    self_1529 = self_1528;
    other_1377 = other_1376;
    let _e4: Line = self_1529;
    let _e8: Motor = other_1377;
    let _e17: Line = self_1529;
    let _e21: Motor = other_1377;
    let _e31: Line = self_1529;
    let _e35: Motor = other_1377;
    let _e47: Line = self_1529;
    let _e49: Motor = other_1377;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn line_motor_inner_anti_product(self_1530: Line, other_1378: Motor) -> Motor {
    var self_1531: Line;
    var other_1379: Motor;

    self_1531 = self_1530;
    other_1379 = other_1378;
    let _e4: Line = self_1531;
    let _e8: Motor = other_1379;
    let _e18: Line = self_1531;
    let _e22: Motor = other_1379;
    let _e33: Line = self_1531;
    let _e37: Motor = other_1379;
    let _e48: Line = self_1531;
    let _e50: Motor = other_1379;
    return Motor(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e48.g1_ * vec3(_e50.g0_.w)));
}

fn line_motor_left_contraction(self_1532: Line, other_1380: Motor) -> MultiVector {
    var self_1533: Line;
    var other_1381: Motor;

    self_1533 = self_1532;
    other_1381 = other_1380;
    let _e4: Line = self_1533;
    let _e8: Motor = other_1381;
    let _e17: Line = self_1533;
    let _e21: Motor = other_1381;
    let _e31: Line = self_1533;
    let _e35: Motor = other_1381;
    let _e47: Line = self_1533;
    let _e49: Motor = other_1381;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn line_motor_right_contraction(self_1534: Line, other_1382: Motor) -> Scalar {
    var self_1535: Line;
    var other_1383: Motor;

    self_1535 = self_1534;
    other_1383 = other_1382;
    let _e5: Line = self_1535;
    let _e8: Motor = other_1383;
    let _e13: Line = self_1535;
    let _e16: Motor = other_1383;
    let _e21: Line = self_1535;
    let _e24: Motor = other_1383;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_left_anti_contraction(self_1536: Line, other_1384: Motor) -> AntiScalar {
    var self_1537: Line;
    var other_1385: Motor;

    self_1537 = self_1536;
    other_1385 = other_1384;
    let _e5: Line = self_1537;
    let _e8: Motor = other_1385;
    let _e13: Line = self_1537;
    let _e16: Motor = other_1385;
    let _e21: Line = self_1537;
    let _e24: Motor = other_1385;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_motor_right_anti_contraction(self_1538: Line, other_1386: Motor) -> Motor {
    var self_1539: Line;
    var other_1387: Motor;

    self_1539 = self_1538;
    other_1387 = other_1386;
    let _e4: Line = self_1539;
    let _e8: Motor = other_1387;
    let _e18: Line = self_1539;
    let _e22: Motor = other_1387;
    let _e33: Line = self_1539;
    let _e37: Motor = other_1387;
    let _e48: Line = self_1539;
    let _e50: Motor = other_1387;
    return Motor(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e48.g1_ * vec3(_e50.g0_.w)));
}

fn line_motor_scalar_product(self_1540: Line, other_1388: Motor) -> Scalar {
    var self_1541: Line;
    var other_1389: Motor;

    self_1541 = self_1540;
    other_1389 = other_1388;
    let _e5: Line = self_1541;
    let _e8: Motor = other_1389;
    let _e13: Line = self_1541;
    let _e16: Motor = other_1389;
    let _e21: Line = self_1541;
    let _e24: Motor = other_1389;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_dot(self_1542: Line, other_1390: Motor) -> Scalar {
    var self_1543: Line;
    var other_1391: Motor;

    self_1543 = self_1542;
    other_1391 = other_1390;
    let _e5: Line = self_1543;
    let _e8: Motor = other_1391;
    let _e13: Line = self_1543;
    let _e16: Motor = other_1391;
    let _e21: Line = self_1543;
    let _e24: Motor = other_1391;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_anti_scalar_product(self_1544: Line, other_1392: Motor) -> AntiScalar {
    var self_1545: Line;
    var other_1393: Motor;

    self_1545 = self_1544;
    other_1393 = other_1392;
    let _e5: Line = self_1545;
    let _e8: Motor = other_1393;
    let _e13: Line = self_1545;
    let _e16: Motor = other_1393;
    let _e21: Line = self_1545;
    let _e24: Motor = other_1393;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_motor_anti_dot(self_1546: Line, other_1394: Motor) -> AntiScalar {
    var self_1547: Line;
    var other_1395: Motor;

    self_1547 = self_1546;
    other_1395 = other_1394;
    let _e5: Line = self_1547;
    let _e8: Motor = other_1395;
    let _e13: Line = self_1547;
    let _e16: Motor = other_1395;
    let _e21: Line = self_1547;
    let _e24: Motor = other_1395;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_add(self_1548: Line, other_1396: Rotor) -> Motor {
    var self_1549: Line;
    var other_1397: Rotor;

    self_1549 = self_1548;
    other_1397 = other_1396;
    let _e4: Line = self_1549;
    let _e7: Line = self_1549;
    let _e10: Line = self_1549;
    let _e13: Line = self_1549;
    let _e23: Rotor = other_1397;
    let _e26: Line = self_1549;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e23.g0_), _e26.g1_);
}

fn line_rotor_sub(self_1550: Line, other_1398: Rotor) -> Motor {
    var self_1551: Line;
    var other_1399: Rotor;

    self_1551 = self_1550;
    other_1399 = other_1398;
    let _e4: Line = self_1551;
    let _e7: Line = self_1551;
    let _e10: Line = self_1551;
    let _e13: Line = self_1551;
    let _e23: Rotor = other_1399;
    let _e26: Line = self_1551;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e23.g0_), _e26.g1_);
}

fn line_rotor_geometric_product(self_1552: Line, other_1400: Rotor) -> Rotor {
    var self_1553: Line;
    var other_1401: Rotor;

    self_1553 = self_1552;
    other_1401 = other_1400;
    let _e4: Line = self_1553;
    let _e8: Rotor = other_1401;
    let _e18: Line = self_1553;
    let _e22: Rotor = other_1401;
    let _e33: Line = self_1553;
    let _e37: Rotor = other_1401;
    return Rotor(((((vec4(_e4.g1_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.zwxy) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.yxwz) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_rotor_geometric_anti_product(self_1554: Line, other_1402: Rotor) -> MultiVector {
    var self_1555: Line;
    var other_1403: Rotor;

    self_1555 = self_1554;
    other_1403 = other_1402;
    let _e4: Line = self_1555;
    let _e8: Rotor = other_1403;
    let _e17: Line = self_1555;
    let _e21: Rotor = other_1403;
    let _e31: Line = self_1555;
    let _e35: Rotor = other_1403;
    let _e45: Line = self_1555;
    let _e49: Rotor = other_1403;
    let _e59: Line = self_1555;
    let _e62: Line = self_1555;
    let _e66: Rotor = other_1403;
    let _e77: Line = self_1555;
    let _e81: Rotor = other_1403;
    let _e84: Rotor = other_1403;
    let _e87: Rotor = other_1403;
    let _e97: Line = self_1555;
    let _e101: Rotor = other_1403;
    let _e104: Rotor = other_1403;
    let _e107: Rotor = other_1403;
    let _e118: Line = self_1555;
    let _e122: Rotor = other_1403;
    let _e125: Rotor = other_1403;
    let _e128: Rotor = other_1403;
    let _e139: Line = self_1555;
    let _e143: Rotor = other_1403;
    let _e146: Rotor = other_1403;
    let _e149: Rotor = other_1403;
    let _e159: Line = self_1555;
    let _e163: Rotor = other_1403;
    let _e166: Rotor = other_1403;
    let _e169: Rotor = other_1403;
    let _e180: Line = self_1555;
    let _e184: Rotor = other_1403;
    let _e187: Rotor = other_1403;
    let _e190: Rotor = other_1403;
    return MultiVector(((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.y) * vec2(_e35.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.z) * vec2(_e49.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e59.g1_.x, _e62.g0_.x) * vec2(_e66.g0_.x)) * vec2(-1.0))), vec4(0.0), ((((vec3(_e77.g0_.x) * vec3<f32>(_e81.g0_.w, _e84.g0_.z, _e87.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e97.g0_.y) * vec3<f32>(_e101.g0_.z, _e104.g0_.w, _e107.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e118.g0_.z) * vec3<f32>(_e122.g0_.y, _e125.g0_.x, _e128.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), ((((vec3(_e139.g1_.x) * vec3<f32>(_e143.g0_.w, _e146.g0_.z, _e149.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e159.g1_.y) * vec3<f32>(_e163.g0_.z, _e166.g0_.w, _e169.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e180.g1_.z) * vec3<f32>(_e184.g0_.y, _e187.g0_.x, _e190.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), vec4(0.0));
}

fn line_rotor_regressive_product(self_1556: Line, other_1404: Rotor) -> MultiVector {
    var self_1557: Line;
    var other_1405: Rotor;

    self_1557 = self_1556;
    other_1405 = other_1404;
    let _e4: Line = self_1557;
    let _e8: Rotor = other_1405;
    let _e17: Line = self_1557;
    let _e21: Rotor = other_1405;
    let _e31: Line = self_1557;
    let _e35: Rotor = other_1405;
    let _e47: Line = self_1557;
    let _e49: Rotor = other_1405;
    let _e54: Line = self_1557;
    let _e56: Rotor = other_1405;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_rotor_anti_wedge(self_1558: Line, other_1406: Rotor) -> MultiVector {
    var self_1559: Line;
    var other_1407: Rotor;

    self_1559 = self_1558;
    other_1407 = other_1406;
    let _e4: Line = self_1559;
    let _e8: Rotor = other_1407;
    let _e17: Line = self_1559;
    let _e21: Rotor = other_1407;
    let _e31: Line = self_1559;
    let _e35: Rotor = other_1407;
    let _e47: Line = self_1559;
    let _e49: Rotor = other_1407;
    let _e54: Line = self_1559;
    let _e56: Rotor = other_1407;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_rotor_meet(self_1560: Line, other_1408: Rotor) -> MultiVector {
    var self_1561: Line;
    var other_1409: Rotor;

    self_1561 = self_1560;
    other_1409 = other_1408;
    let _e4: Line = self_1561;
    let _e8: Rotor = other_1409;
    let _e17: Line = self_1561;
    let _e21: Rotor = other_1409;
    let _e31: Line = self_1561;
    let _e35: Rotor = other_1409;
    let _e47: Line = self_1561;
    let _e49: Rotor = other_1409;
    let _e54: Line = self_1561;
    let _e56: Rotor = other_1409;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_rotor_outer_product(self_1562: Line, other_1410: Rotor) -> AntiScalar {
    var self_1563: Line;
    var other_1411: Rotor;

    self_1563 = self_1562;
    other_1411 = other_1410;
    let _e5: Line = self_1563;
    let _e8: Rotor = other_1411;
    let _e13: Line = self_1563;
    let _e16: Rotor = other_1411;
    let _e21: Line = self_1563;
    let _e24: Rotor = other_1411;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_wedge(self_1564: Line, other_1412: Rotor) -> AntiScalar {
    var self_1565: Line;
    var other_1413: Rotor;

    self_1565 = self_1564;
    other_1413 = other_1412;
    let _e5: Line = self_1565;
    let _e8: Rotor = other_1413;
    let _e13: Line = self_1565;
    let _e16: Rotor = other_1413;
    let _e21: Line = self_1565;
    let _e24: Rotor = other_1413;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_join(self_1566: Line, other_1414: Rotor) -> AntiScalar {
    var self_1567: Line;
    var other_1415: Rotor;

    self_1567 = self_1566;
    other_1415 = other_1414;
    let _e5: Line = self_1567;
    let _e8: Rotor = other_1415;
    let _e13: Line = self_1567;
    let _e16: Rotor = other_1415;
    let _e21: Line = self_1567;
    let _e24: Rotor = other_1415;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_inner_product(self_1568: Line, other_1416: Rotor) -> Rotor {
    var self_1569: Line;
    var other_1417: Rotor;

    self_1569 = self_1568;
    other_1417 = other_1416;
    let _e4: Line = self_1569;
    let _e7: Line = self_1569;
    let _e10: Line = self_1569;
    let _e13: Line = self_1569;
    let _e17: Rotor = other_1417;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * _e17.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_rotor_inner_anti_product(self_1570: Line, other_1418: Rotor) -> Motor {
    var self_1571: Line;
    var other_1419: Rotor;

    self_1571 = self_1570;
    other_1419 = other_1418;
    let _e4: Line = self_1571;
    let _e8: Rotor = other_1419;
    let _e18: Line = self_1571;
    let _e22: Rotor = other_1419;
    let _e33: Line = self_1571;
    let _e37: Rotor = other_1419;
    let _e48: Line = self_1571;
    let _e50: Rotor = other_1419;
    return Motor(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e48.g1_ * vec3(_e50.g0_.w)));
}

fn line_rotor_left_contraction(self_1572: Line, other_1420: Rotor) -> Rotor {
    var self_1573: Line;
    var other_1421: Rotor;

    self_1573 = self_1572;
    other_1421 = other_1420;
    let _e4: Line = self_1573;
    let _e7: Line = self_1573;
    let _e10: Line = self_1573;
    let _e13: Line = self_1573;
    let _e17: Rotor = other_1421;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * _e17.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn line_rotor_left_anti_contraction(self_1574: Line, other_1422: Rotor) -> AntiScalar {
    var self_1575: Line;
    var other_1423: Rotor;

    self_1575 = self_1574;
    other_1423 = other_1422;
    let _e5: Line = self_1575;
    let _e8: Rotor = other_1423;
    let _e13: Line = self_1575;
    let _e16: Rotor = other_1423;
    let _e21: Line = self_1575;
    let _e24: Rotor = other_1423;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_right_anti_contraction(self_1576: Line, other_1424: Rotor) -> Motor {
    var self_1577: Line;
    var other_1425: Rotor;

    self_1577 = self_1576;
    other_1425 = other_1424;
    let _e4: Line = self_1577;
    let _e8: Rotor = other_1425;
    let _e18: Line = self_1577;
    let _e22: Rotor = other_1425;
    let _e33: Line = self_1577;
    let _e37: Rotor = other_1425;
    let _e48: Line = self_1577;
    let _e50: Rotor = other_1425;
    return Motor(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e48.g1_ * vec3(_e50.g0_.w)));
}

fn line_rotor_anti_scalar_product(self_1578: Line, other_1426: Rotor) -> AntiScalar {
    var self_1579: Line;
    var other_1427: Rotor;

    self_1579 = self_1578;
    other_1427 = other_1426;
    let _e5: Line = self_1579;
    let _e8: Rotor = other_1427;
    let _e13: Line = self_1579;
    let _e16: Rotor = other_1427;
    let _e21: Line = self_1579;
    let _e24: Rotor = other_1427;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_anti_dot(self_1580: Line, other_1428: Rotor) -> AntiScalar {
    var self_1581: Line;
    var other_1429: Rotor;

    self_1581 = self_1580;
    other_1429 = other_1428;
    let _e5: Line = self_1581;
    let _e8: Rotor = other_1429;
    let _e13: Line = self_1581;
    let _e16: Rotor = other_1429;
    let _e21: Line = self_1581;
    let _e24: Rotor = other_1429;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_add(self_1582: Line, other_1430: Translator) -> Motor {
    var self_1583: Line;
    var other_1431: Translator;

    self_1583 = self_1582;
    other_1431 = other_1430;
    let _e4: Line = self_1583;
    let _e7: Line = self_1583;
    let _e10: Line = self_1583;
    let _e13: Line = self_1583;
    let _e23: Translator = other_1431;
    let _e33: Line = self_1583;
    let _e35: Translator = other_1431;
    let _e38: Translator = other_1431;
    let _e41: Translator = other_1431;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + (_e23.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e33.g1_ + vec3<f32>(_e35.g0_.x, _e38.g0_.y, _e41.g0_.z)));
}

fn line_translator_sub(self_1584: Line, other_1432: Translator) -> Motor {
    var self_1585: Line;
    var other_1433: Translator;

    self_1585 = self_1584;
    other_1433 = other_1432;
    let _e4: Line = self_1585;
    let _e7: Line = self_1585;
    let _e10: Line = self_1585;
    let _e13: Line = self_1585;
    let _e23: Translator = other_1433;
    let _e33: Line = self_1585;
    let _e35: Translator = other_1433;
    let _e38: Translator = other_1433;
    let _e41: Translator = other_1433;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - (_e23.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e33.g1_ - vec3<f32>(_e35.g0_.x, _e38.g0_.y, _e41.g0_.z)));
}

fn line_translator_geometric_product(self_1586: Line, other_1434: Translator) -> MultiVector {
    var self_1587: Line;
    var other_1435: Translator;

    self_1587 = self_1586;
    other_1435 = other_1434;
    let _e4: Line = self_1587;
    let _e8: Translator = other_1435;
    let _e17: Line = self_1587;
    let _e21: Translator = other_1435;
    let _e31: Line = self_1587;
    let _e35: Translator = other_1435;
    let _e45: Line = self_1587;
    let _e49: Translator = other_1435;
    let _e59: Line = self_1587;
    let _e62: Line = self_1587;
    let _e66: Translator = other_1435;
    let _e77: Line = self_1587;
    let _e81: Translator = other_1435;
    let _e84: Translator = other_1435;
    let _e87: Translator = other_1435;
    let _e97: Line = self_1587;
    let _e101: Translator = other_1435;
    let _e104: Translator = other_1435;
    let _e107: Translator = other_1435;
    let _e118: Line = self_1587;
    let _e122: Translator = other_1435;
    let _e133: Line = self_1587;
    let _e137: Translator = other_1435;
    let _e148: Line = self_1587;
    let _e151: Line = self_1587;
    let _e154: Line = self_1587;
    let _e158: Translator = other_1435;
    let _e161: Translator = other_1435;
    let _e164: Translator = other_1435;
    let _e175: Line = self_1587;
    let _e179: Translator = other_1435;
    let _e182: Translator = other_1435;
    let _e185: Translator = other_1435;
    let _e195: Line = self_1587;
    let _e199: Translator = other_1435;
    let _e202: Translator = other_1435;
    let _e205: Translator = other_1435;
    let _e216: Line = self_1587;
    let _e220: Translator = other_1435;
    let _e223: Translator = other_1435;
    let _e226: Translator = other_1435;
    return MultiVector(((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.y) * vec2(_e35.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.z) * vec2(_e49.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e59.g1_.x, _e62.g0_.x) * vec2(_e66.g0_.x)) * vec2(-1.0))), vec4(0.0), ((((((vec3(_e77.g0_.y) * vec3<f32>(_e81.g0_.z, _e84.g0_.z, _e87.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e97.g0_.z) * vec3<f32>(_e101.g0_.y, _e104.g0_.x, _e107.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e118.g1_.y) * vec3(_e122.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e133.g1_.z) * vec3(_e137.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e148.g1_.x, _e151.g0_.x, _e154.g0_.x) * vec3<f32>(_e158.g0_.w, _e161.g0_.z, _e164.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))), ((((vec3(_e175.g1_.y) * vec3<f32>(_e179.g0_.z, _e182.g0_.z, _e185.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e195.g1_.z) * vec3<f32>(_e199.g0_.y, _e202.g0_.x, _e205.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e216.g1_.x) * vec3<f32>(_e220.g0_.x, _e223.g0_.z, _e226.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn line_translator_geometric_anti_product(self_1588: Line, other_1436: Translator) -> MultiVector {
    var self_1589: Line;
    var other_1437: Translator;

    self_1589 = self_1588;
    other_1437 = other_1436;
    let _e4: Line = self_1589;
    let _e8: Translator = other_1437;
    let _e17: Line = self_1589;
    let _e21: Translator = other_1437;
    let _e31: Line = self_1589;
    let _e35: Translator = other_1437;
    let _e47: Line = self_1589;
    let _e49: Translator = other_1437;
    let _e54: Line = self_1589;
    let _e58: Translator = other_1437;
    let _e61: Translator = other_1437;
    let _e64: Translator = other_1437;
    let _e74: Line = self_1589;
    let _e78: Translator = other_1437;
    let _e81: Translator = other_1437;
    let _e84: Translator = other_1437;
    let _e95: Line = self_1589;
    let _e99: Translator = other_1437;
    let _e110: Line = self_1589;
    let _e114: Translator = other_1437;
    let _e125: Line = self_1589;
    let _e128: Line = self_1589;
    let _e131: Line = self_1589;
    let _e135: Translator = other_1437;
    let _e138: Translator = other_1437;
    let _e141: Translator = other_1437;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), ((((((vec3(_e54.g0_.y) * vec3<f32>(_e58.g0_.z, _e61.g0_.z, _e64.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e74.g0_.z) * vec3<f32>(_e78.g0_.y, _e81.g0_.x, _e84.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e95.g1_.y) * vec3(_e99.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e110.g1_.z) * vec3(_e114.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e125.g1_.x, _e128.g0_.x, _e131.g0_.x) * vec3<f32>(_e135.g0_.w, _e138.g0_.z, _e141.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), vec4(0.0));
}

fn line_translator_regressive_product(self_1590: Line, other_1438: Translator) -> MultiVector {
    var self_1591: Line;
    var other_1439: Translator;

    self_1591 = self_1590;
    other_1439 = other_1438;
    let _e4: Line = self_1591;
    let _e8: Translator = other_1439;
    let _e17: Line = self_1591;
    let _e21: Translator = other_1439;
    let _e31: Line = self_1591;
    let _e35: Translator = other_1439;
    let _e47: Line = self_1591;
    let _e49: Translator = other_1439;
    let _e54: Line = self_1591;
    let _e56: Translator = other_1439;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_translator_anti_wedge(self_1592: Line, other_1440: Translator) -> MultiVector {
    var self_1593: Line;
    var other_1441: Translator;

    self_1593 = self_1592;
    other_1441 = other_1440;
    let _e4: Line = self_1593;
    let _e8: Translator = other_1441;
    let _e17: Line = self_1593;
    let _e21: Translator = other_1441;
    let _e31: Line = self_1593;
    let _e35: Translator = other_1441;
    let _e47: Line = self_1593;
    let _e49: Translator = other_1441;
    let _e54: Line = self_1593;
    let _e56: Translator = other_1441;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_translator_meet(self_1594: Line, other_1442: Translator) -> MultiVector {
    var self_1595: Line;
    var other_1443: Translator;

    self_1595 = self_1594;
    other_1443 = other_1442;
    let _e4: Line = self_1595;
    let _e8: Translator = other_1443;
    let _e17: Line = self_1595;
    let _e21: Translator = other_1443;
    let _e31: Line = self_1595;
    let _e35: Translator = other_1443;
    let _e47: Line = self_1595;
    let _e49: Translator = other_1443;
    let _e54: Line = self_1595;
    let _e56: Translator = other_1443;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.w)), (_e54.g1_ * vec3(_e56.g0_.w)), vec4(0.0));
}

fn line_translator_outer_product(self_1596: Line, other_1444: Translator) -> AntiScalar {
    var self_1597: Line;
    var other_1445: Translator;

    self_1597 = self_1596;
    other_1445 = other_1444;
    let _e5: Line = self_1597;
    let _e8: Translator = other_1445;
    let _e13: Line = self_1597;
    let _e16: Translator = other_1445;
    let _e21: Line = self_1597;
    let _e24: Translator = other_1445;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_wedge(self_1598: Line, other_1446: Translator) -> AntiScalar {
    var self_1599: Line;
    var other_1447: Translator;

    self_1599 = self_1598;
    other_1447 = other_1446;
    let _e5: Line = self_1599;
    let _e8: Translator = other_1447;
    let _e13: Line = self_1599;
    let _e16: Translator = other_1447;
    let _e21: Line = self_1599;
    let _e24: Translator = other_1447;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_join(self_1600: Line, other_1448: Translator) -> AntiScalar {
    var self_1601: Line;
    var other_1449: Translator;

    self_1601 = self_1600;
    other_1449 = other_1448;
    let _e5: Line = self_1601;
    let _e8: Translator = other_1449;
    let _e13: Line = self_1601;
    let _e16: Translator = other_1449;
    let _e21: Line = self_1601;
    let _e24: Translator = other_1449;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_inner_product(self_1602: Line, other_1450: Translator) -> MultiVector {
    var self_1603: Line;
    var other_1451: Translator;

    self_1603 = self_1602;
    other_1451 = other_1450;
    let _e4: Line = self_1603;
    let _e8: Translator = other_1451;
    let _e17: Line = self_1603;
    let _e21: Translator = other_1451;
    let _e31: Line = self_1603;
    let _e35: Translator = other_1451;
    let _e47: Line = self_1603;
    let _e49: Translator = other_1451;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn line_translator_inner_anti_product(self_1604: Line, other_1452: Translator) -> Line {
    var self_1605: Line;
    var other_1453: Translator;

    self_1605 = self_1604;
    other_1453 = other_1452;
    let _e4: Line = self_1605;
    let _e6: Translator = other_1453;
    let _e11: Line = self_1605;
    let _e13: Translator = other_1453;
    return Line((_e4.g0_ * vec3(_e6.g0_.w)), (_e11.g1_ * vec3(_e13.g0_.w)));
}

fn line_translator_left_contraction(self_1606: Line, other_1454: Translator) -> MultiVector {
    var self_1607: Line;
    var other_1455: Translator;

    self_1607 = self_1606;
    other_1455 = other_1454;
    let _e4: Line = self_1607;
    let _e8: Translator = other_1455;
    let _e17: Line = self_1607;
    let _e21: Translator = other_1455;
    let _e31: Line = self_1607;
    let _e35: Translator = other_1455;
    let _e47: Line = self_1607;
    let _e49: Translator = other_1455;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn line_translator_right_contraction(self_1608: Line, other_1456: Translator) -> Scalar {
    var self_1609: Line;
    var other_1457: Translator;

    self_1609 = self_1608;
    other_1457 = other_1456;
    let _e5: Line = self_1609;
    let _e8: Translator = other_1457;
    let _e13: Line = self_1609;
    let _e16: Translator = other_1457;
    let _e21: Line = self_1609;
    let _e24: Translator = other_1457;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_translator_right_anti_contraction(self_1610: Line, other_1458: Translator) -> Line {
    var self_1611: Line;
    var other_1459: Translator;

    self_1611 = self_1610;
    other_1459 = other_1458;
    let _e4: Line = self_1611;
    let _e6: Translator = other_1459;
    let _e11: Line = self_1611;
    let _e13: Translator = other_1459;
    return Line((_e4.g0_ * vec3(_e6.g0_.w)), (_e11.g1_ * vec3(_e13.g0_.w)));
}

fn line_translator_scalar_product(self_1612: Line, other_1460: Translator) -> Scalar {
    var self_1613: Line;
    var other_1461: Translator;

    self_1613 = self_1612;
    other_1461 = other_1460;
    let _e5: Line = self_1613;
    let _e8: Translator = other_1461;
    let _e13: Line = self_1613;
    let _e16: Translator = other_1461;
    let _e21: Line = self_1613;
    let _e24: Translator = other_1461;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_translator_dot(self_1614: Line, other_1462: Translator) -> Scalar {
    var self_1615: Line;
    var other_1463: Translator;

    self_1615 = self_1614;
    other_1463 = other_1462;
    let _e5: Line = self_1615;
    let _e8: Translator = other_1463;
    let _e13: Line = self_1615;
    let _e16: Translator = other_1463;
    let _e21: Line = self_1615;
    let _e24: Translator = other_1463;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_flector_geometric_product(self_1616: Line, other_1464: Flector) -> Flector {
    var self_1617: Line;
    var other_1465: Flector;

    self_1617 = self_1616;
    other_1465 = other_1464;
    let _e4: Line = self_1617;
    let _e8: Flector = other_1465;
    let _e19: Line = self_1617;
    let _e23: Flector = other_1465;
    let _e35: Line = self_1617;
    let _e39: Flector = other_1465;
    let _e42: Flector = other_1465;
    let _e45: Flector = other_1465;
    let _e48: Flector = other_1465;
    let _e60: Line = self_1617;
    let _e64: Flector = other_1465;
    let _e67: Flector = other_1465;
    let _e70: Flector = other_1465;
    let _e73: Flector = other_1465;
    let _e85: Line = self_1617;
    let _e89: Flector = other_1465;
    let _e92: Flector = other_1465;
    let _e95: Flector = other_1465;
    let _e98: Flector = other_1465;
    let _e110: Line = self_1617;
    let _e114: Flector = other_1465;
    let _e126: Line = self_1617;
    let _e130: Flector = other_1465;
    let _e133: Flector = other_1465;
    let _e136: Flector = other_1465;
    let _e139: Flector = other_1465;
    let _e150: Line = self_1617;
    let _e154: Flector = other_1465;
    let _e157: Flector = other_1465;
    let _e160: Flector = other_1465;
    let _e163: Flector = other_1465;
    let _e175: Line = self_1617;
    let _e179: Flector = other_1465;
    let _e182: Flector = other_1465;
    let _e185: Flector = other_1465;
    let _e188: Flector = other_1465;
    let _e200: Line = self_1617;
    let _e204: Flector = other_1465;
    let _e207: Flector = other_1465;
    let _e210: Flector = other_1465;
    let _e213: Flector = other_1465;
    let _e225: Line = self_1617;
    let _e229: Flector = other_1465;
    let _e232: Flector = other_1465;
    let _e235: Flector = other_1465;
    let _e238: Flector = other_1465;
    let _e250: Line = self_1617;
    let _e254: Flector = other_1465;
    let _e257: Flector = other_1465;
    let _e260: Flector = other_1465;
    let _e263: Flector = other_1465;
    return Flector((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * vec4<f32>(_e39.g1_.w, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e60.g1_.y) * vec4<f32>(_e64.g0_.z, _e67.g1_.w, _e70.g0_.x, _e73.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4<f32>(_e89.g0_.y, _e92.g0_.x, _e95.g1_.w, _e98.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e110.g0_.x) * vec4(_e114.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec4(_e126.g0_.y) * vec4<f32>(_e130.g0_.z, _e133.g1_.w, _e136.g0_.x, _e139.g0_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e150.g0_.z) * vec4<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g1_.w, _e163.g0_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e175.g1_.x) * vec4<f32>(_e179.g0_.w, _e182.g1_.z, _e185.g1_.y, _e188.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e200.g1_.y) * vec4<f32>(_e204.g1_.z, _e207.g0_.w, _e210.g1_.x, _e213.g0_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e225.g1_.z) * vec4<f32>(_e229.g1_.y, _e232.g1_.x, _e235.g0_.w, _e238.g0_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e250.g0_.x) * vec4<f32>(_e254.g1_.w, _e257.g0_.z, _e260.g0_.y, _e263.g1_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn line_flector_geometric_anti_product(self_1618: Line, other_1466: Flector) -> Flector {
    var self_1619: Line;
    var other_1467: Flector;

    self_1619 = self_1618;
    other_1467 = other_1466;
    let _e4: Line = self_1619;
    let _e8: Flector = other_1467;
    let _e11: Flector = other_1467;
    let _e14: Flector = other_1467;
    let _e17: Flector = other_1467;
    let _e28: Line = self_1619;
    let _e32: Flector = other_1467;
    let _e35: Flector = other_1467;
    let _e38: Flector = other_1467;
    let _e41: Flector = other_1467;
    let _e53: Line = self_1619;
    let _e57: Flector = other_1467;
    let _e60: Flector = other_1467;
    let _e63: Flector = other_1467;
    let _e66: Flector = other_1467;
    let _e78: Line = self_1619;
    let _e82: Flector = other_1467;
    let _e85: Flector = other_1467;
    let _e88: Flector = other_1467;
    let _e91: Flector = other_1467;
    let _e103: Line = self_1619;
    let _e107: Flector = other_1467;
    let _e110: Flector = other_1467;
    let _e113: Flector = other_1467;
    let _e116: Flector = other_1467;
    let _e128: Line = self_1619;
    let _e132: Flector = other_1467;
    let _e135: Flector = other_1467;
    let _e138: Flector = other_1467;
    let _e141: Flector = other_1467;
    let _e153: Line = self_1619;
    let _e157: Flector = other_1467;
    let _e160: Flector = other_1467;
    let _e163: Flector = other_1467;
    let _e166: Flector = other_1467;
    let _e177: Line = self_1619;
    let _e181: Flector = other_1467;
    let _e184: Flector = other_1467;
    let _e187: Flector = other_1467;
    let _e190: Flector = other_1467;
    let _e202: Line = self_1619;
    let _e206: Flector = other_1467;
    let _e209: Flector = other_1467;
    let _e212: Flector = other_1467;
    let _e215: Flector = other_1467;
    let _e227: Line = self_1619;
    let _e231: Flector = other_1467;
    let _e243: Line = self_1619;
    let _e247: Flector = other_1467;
    let _e259: Line = self_1619;
    let _e263: Flector = other_1467;
    return Flector((((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g1_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g1_.w, _e66.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e78.g1_.y) * vec4<f32>(_e82.g1_.z, _e85.g0_.w, _e88.g1_.x, _e91.g1_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e103.g1_.z) * vec4<f32>(_e107.g1_.y, _e110.g1_.x, _e113.g0_.w, _e116.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e128.g1_.x) * vec4<f32>(_e132.g0_.w, _e135.g1_.z, _e138.g1_.y, _e141.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), (((((((vec4(_e153.g0_.x) * vec4<f32>(_e157.g0_.w, _e160.g1_.z, _e163.g1_.y, _e166.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e177.g0_.y) * vec4<f32>(_e181.g1_.z, _e184.g0_.w, _e187.g1_.x, _e190.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e202.g0_.z) * vec4<f32>(_e206.g1_.y, _e209.g1_.x, _e212.g0_.w, _e215.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e227.g1_.y) * vec4(_e231.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e243.g1_.z) * vec4(_e247.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e259.g1_.x) * vec4(_e263.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn line_flector_regressive_product(self_1620: Line, other_1468: Flector) -> Point {
    var self_1621: Line;
    var other_1469: Flector;

    self_1621 = self_1620;
    other_1469 = other_1468;
    let _e4: Line = self_1621;
    let _e8: Flector = other_1469;
    let _e18: Line = self_1621;
    let _e22: Flector = other_1469;
    let _e33: Line = self_1621;
    let _e37: Flector = other_1469;
    let _e48: Line = self_1621;
    let _e52: Flector = other_1469;
    let _e63: Line = self_1621;
    let _e66: Line = self_1621;
    let _e69: Line = self_1621;
    let _e72: Line = self_1621;
    let _e76: Flector = other_1469;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_anti_wedge(self_1622: Line, other_1470: Flector) -> Point {
    var self_1623: Line;
    var other_1471: Flector;

    self_1623 = self_1622;
    other_1471 = other_1470;
    let _e4: Line = self_1623;
    let _e8: Flector = other_1471;
    let _e18: Line = self_1623;
    let _e22: Flector = other_1471;
    let _e33: Line = self_1623;
    let _e37: Flector = other_1471;
    let _e48: Line = self_1623;
    let _e52: Flector = other_1471;
    let _e63: Line = self_1623;
    let _e66: Line = self_1623;
    let _e69: Line = self_1623;
    let _e72: Line = self_1623;
    let _e76: Flector = other_1471;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_meet(self_1624: Line, other_1472: Flector) -> Point {
    var self_1625: Line;
    var other_1473: Flector;

    self_1625 = self_1624;
    other_1473 = other_1472;
    let _e4: Line = self_1625;
    let _e8: Flector = other_1473;
    let _e18: Line = self_1625;
    let _e22: Flector = other_1473;
    let _e33: Line = self_1625;
    let _e37: Flector = other_1473;
    let _e48: Line = self_1625;
    let _e52: Flector = other_1473;
    let _e63: Line = self_1625;
    let _e66: Line = self_1625;
    let _e69: Line = self_1625;
    let _e72: Line = self_1625;
    let _e76: Flector = other_1473;
    return Point(((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.y) * _e37.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e48.g1_.z) * _e52.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e63.g0_.x, _e66.g1_.x, _e69.g1_.x, _e72.g0_.x) * _e76.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_outer_product(self_1626: Line, other_1474: Flector) -> Plane {
    var self_1627: Line;
    var other_1475: Flector;

    self_1627 = self_1626;
    other_1475 = other_1474;
    let _e4: Line = self_1627;
    let _e8: Flector = other_1475;
    let _e18: Line = self_1627;
    let _e22: Flector = other_1475;
    let _e33: Line = self_1627;
    let _e37: Flector = other_1475;
    let _e48: Line = self_1627;
    let _e52: Flector = other_1475;
    let _e63: Line = self_1627;
    let _e66: Line = self_1627;
    let _e69: Line = self_1627;
    let _e72: Line = self_1627;
    let _e76: Flector = other_1475;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_wedge(self_1628: Line, other_1476: Flector) -> Plane {
    var self_1629: Line;
    var other_1477: Flector;

    self_1629 = self_1628;
    other_1477 = other_1476;
    let _e4: Line = self_1629;
    let _e8: Flector = other_1477;
    let _e18: Line = self_1629;
    let _e22: Flector = other_1477;
    let _e33: Line = self_1629;
    let _e37: Flector = other_1477;
    let _e48: Line = self_1629;
    let _e52: Flector = other_1477;
    let _e63: Line = self_1629;
    let _e66: Line = self_1629;
    let _e69: Line = self_1629;
    let _e72: Line = self_1629;
    let _e76: Flector = other_1477;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_join(self_1630: Line, other_1478: Flector) -> Plane {
    var self_1631: Line;
    var other_1479: Flector;

    self_1631 = self_1630;
    other_1479 = other_1478;
    let _e4: Line = self_1631;
    let _e8: Flector = other_1479;
    let _e18: Line = self_1631;
    let _e22: Flector = other_1479;
    let _e33: Line = self_1631;
    let _e37: Flector = other_1479;
    let _e48: Line = self_1631;
    let _e52: Flector = other_1479;
    let _e63: Line = self_1631;
    let _e66: Line = self_1631;
    let _e69: Line = self_1631;
    let _e72: Line = self_1631;
    let _e76: Flector = other_1479;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * _e37.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e48.g1_.z) * _e52.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e63.g1_.x, _e66.g0_.x, _e69.g0_.x, _e72.g1_.x) * _e76.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_flector_inner_product(self_1632: Line, other_1480: Flector) -> Point {
    var self_1633: Line;
    var other_1481: Flector;

    self_1633 = self_1632;
    other_1481 = other_1480;
    let _e4: Line = self_1633;
    let _e8: Flector = other_1481;
    let _e19: Line = self_1633;
    let _e23: Flector = other_1481;
    let _e35: Line = self_1633;
    let _e39: Flector = other_1481;
    let _e42: Flector = other_1481;
    let _e45: Flector = other_1481;
    let _e48: Flector = other_1481;
    let _e60: Line = self_1633;
    let _e64: Flector = other_1481;
    let _e67: Flector = other_1481;
    let _e70: Flector = other_1481;
    let _e73: Flector = other_1481;
    let _e85: Line = self_1633;
    let _e89: Flector = other_1481;
    let _e92: Flector = other_1481;
    let _e95: Flector = other_1481;
    let _e98: Flector = other_1481;
    let _e110: Line = self_1633;
    let _e114: Flector = other_1481;
    return Point((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * vec4<f32>(_e39.g1_.w, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e60.g1_.y) * vec4<f32>(_e64.g0_.z, _e67.g1_.w, _e70.g0_.x, _e73.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4<f32>(_e89.g0_.y, _e92.g0_.x, _e95.g1_.w, _e98.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e110.g0_.x) * vec4(_e114.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn line_flector_inner_anti_product(self_1634: Line, other_1482: Flector) -> Plane {
    var self_1635: Line;
    var other_1483: Flector;

    self_1635 = self_1634;
    other_1483 = other_1482;
    let _e4: Line = self_1635;
    let _e8: Flector = other_1483;
    let _e11: Flector = other_1483;
    let _e14: Flector = other_1483;
    let _e17: Flector = other_1483;
    let _e28: Line = self_1635;
    let _e32: Flector = other_1483;
    let _e35: Flector = other_1483;
    let _e38: Flector = other_1483;
    let _e41: Flector = other_1483;
    let _e53: Line = self_1635;
    let _e57: Flector = other_1483;
    let _e60: Flector = other_1483;
    let _e63: Flector = other_1483;
    let _e66: Flector = other_1483;
    let _e78: Line = self_1635;
    let _e82: Flector = other_1483;
    let _e94: Line = self_1635;
    let _e98: Flector = other_1483;
    let _e110: Line = self_1635;
    let _e114: Flector = other_1483;
    return Plane((((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g1_.z, _e35.g0_.w, _e38.g1_.x, _e41.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g1_.y, _e60.g1_.x, _e63.g0_.w, _e66.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e78.g1_.y) * vec4(_e82.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e94.g1_.z) * vec4(_e98.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e110.g1_.x) * vec4(_e114.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn line_flector_left_contraction(self_1636: Line, other_1484: Flector) -> Point {
    var self_1637: Line;
    var other_1485: Flector;

    self_1637 = self_1636;
    other_1485 = other_1484;
    let _e4: Line = self_1637;
    let _e8: Flector = other_1485;
    let _e18: Line = self_1637;
    let _e22: Flector = other_1485;
    let _e33: Line = self_1637;
    let _e37: Flector = other_1485;
    return Point(((((vec4(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_flector_right_contraction(self_1638: Line, other_1486: Flector) -> Point {
    var self_1639: Line;
    var other_1487: Flector;

    self_1639 = self_1638;
    other_1487 = other_1486;
    let _e4: Line = self_1639;
    let _e8: Flector = other_1487;
    let _e19: Line = self_1639;
    let _e23: Flector = other_1487;
    let _e35: Line = self_1639;
    let _e39: Flector = other_1487;
    let _e50: Line = self_1639;
    let _e54: Flector = other_1487;
    let _e65: Line = self_1639;
    let _e68: Line = self_1639;
    let _e71: Line = self_1639;
    let _e74: Line = self_1639;
    let _e78: Flector = other_1487;
    return Point(((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e50.g1_.z) * _e54.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g1_.x, _e71.g1_.x, _e74.g0_.x) * _e78.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))));
}

fn line_flector_left_anti_contraction(self_1640: Line, other_1488: Flector) -> Plane {
    var self_1641: Line;
    var other_1489: Flector;

    self_1641 = self_1640;
    other_1489 = other_1488;
    let _e4: Line = self_1641;
    let _e8: Flector = other_1489;
    let _e18: Line = self_1641;
    let _e22: Flector = other_1489;
    let _e33: Line = self_1641;
    let _e37: Flector = other_1489;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_flector_right_anti_contraction(self_1642: Line, other_1490: Flector) -> Plane {
    var self_1643: Line;
    var other_1491: Flector;

    self_1643 = self_1642;
    other_1491 = other_1490;
    let _e4: Line = self_1643;
    let _e8: Flector = other_1491;
    let _e18: Line = self_1643;
    let _e22: Flector = other_1491;
    let _e33: Line = self_1643;
    let _e37: Flector = other_1491;
    let _e49: Line = self_1643;
    let _e53: Flector = other_1491;
    let _e65: Line = self_1643;
    let _e68: Line = self_1643;
    let _e71: Line = self_1643;
    let _e74: Line = self_1643;
    let _e78: Flector = other_1491;
    return Plane(((((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e65.g0_.x, _e68.g0_.x, _e71.g0_.x, _e74.g1_.x) * _e78.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn line_multi_vector_add(self_1644: Line, other_1492: MultiVector) -> MultiVector {
    var self_1645: Line;
    var other_1493: MultiVector;

    self_1645 = self_1644;
    other_1493 = other_1492;
    let _e4: MultiVector = other_1493;
    let _e6: MultiVector = other_1493;
    let _e8: Line = self_1645;
    let _e10: MultiVector = other_1493;
    let _e13: Line = self_1645;
    let _e15: MultiVector = other_1493;
    let _e18: MultiVector = other_1493;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g0_ + _e10.g2_), (_e13.g1_ + _e15.g3_), _e18.g4_);
}

fn line_multi_vector_sub(self_1646: Line, other_1494: MultiVector) -> MultiVector {
    var self_1647: Line;
    var other_1495: MultiVector;

    self_1647 = self_1646;
    other_1495 = other_1494;
    let _e6: MultiVector = other_1495;
    let _e11: MultiVector = other_1495;
    let _e14: Line = self_1647;
    let _e16: MultiVector = other_1495;
    let _e19: Line = self_1647;
    let _e21: MultiVector = other_1495;
    let _e26: MultiVector = other_1495;
    return MultiVector((vec2(0.0) - _e6.g0_), (vec4(0.0) - _e11.g1_), (_e14.g0_ - _e16.g2_), (_e19.g1_ - _e21.g3_), (vec4(0.0) - _e26.g4_));
}

fn line_multi_vector_geometric_product(self_1648: Line, other_1496: MultiVector) -> MultiVector {
    var self_1649: Line;
    var other_1497: MultiVector;

    self_1649 = self_1648;
    other_1497 = other_1496;
    let _e4: Line = self_1649;
    let _e8: MultiVector = other_1497;
    let _e17: Line = self_1649;
    let _e21: MultiVector = other_1497;
    let _e31: Line = self_1649;
    let _e35: MultiVector = other_1497;
    let _e38: MultiVector = other_1497;
    let _e44: Line = self_1649;
    let _e48: MultiVector = other_1497;
    let _e51: MultiVector = other_1497;
    let _e57: Line = self_1649;
    let _e61: MultiVector = other_1497;
    let _e64: MultiVector = other_1497;
    let _e70: Line = self_1649;
    let _e74: MultiVector = other_1497;
    let _e84: Line = self_1649;
    let _e88: MultiVector = other_1497;
    let _e99: Line = self_1649;
    let _e103: MultiVector = other_1497;
    let _e115: Line = self_1649;
    let _e119: MultiVector = other_1497;
    let _e122: MultiVector = other_1497;
    let _e125: MultiVector = other_1497;
    let _e128: MultiVector = other_1497;
    let _e140: Line = self_1649;
    let _e144: MultiVector = other_1497;
    let _e147: MultiVector = other_1497;
    let _e150: MultiVector = other_1497;
    let _e153: MultiVector = other_1497;
    let _e165: Line = self_1649;
    let _e169: MultiVector = other_1497;
    let _e172: MultiVector = other_1497;
    let _e175: MultiVector = other_1497;
    let _e178: MultiVector = other_1497;
    let _e190: Line = self_1649;
    let _e194: MultiVector = other_1497;
    let _e206: Line = self_1649;
    let _e210: MultiVector = other_1497;
    let _e213: MultiVector = other_1497;
    let _e216: MultiVector = other_1497;
    let _e226: Line = self_1649;
    let _e230: MultiVector = other_1497;
    let _e233: MultiVector = other_1497;
    let _e236: MultiVector = other_1497;
    let _e247: Line = self_1649;
    let _e251: MultiVector = other_1497;
    let _e254: MultiVector = other_1497;
    let _e257: MultiVector = other_1497;
    let _e268: Line = self_1649;
    let _e272: MultiVector = other_1497;
    let _e275: MultiVector = other_1497;
    let _e278: MultiVector = other_1497;
    let _e289: Line = self_1649;
    let _e293: MultiVector = other_1497;
    let _e296: MultiVector = other_1497;
    let _e299: MultiVector = other_1497;
    let _e310: Line = self_1649;
    let _e314: MultiVector = other_1497;
    let _e317: MultiVector = other_1497;
    let _e320: MultiVector = other_1497;
    let _e331: Line = self_1649;
    let _e335: MultiVector = other_1497;
    let _e338: MultiVector = other_1497;
    let _e341: MultiVector = other_1497;
    let _e351: Line = self_1649;
    let _e355: MultiVector = other_1497;
    let _e358: MultiVector = other_1497;
    let _e361: MultiVector = other_1497;
    let _e372: Line = self_1649;
    let _e376: MultiVector = other_1497;
    let _e379: MultiVector = other_1497;
    let _e382: MultiVector = other_1497;
    let _e393: Line = self_1649;
    let _e397: MultiVector = other_1497;
    let _e400: MultiVector = other_1497;
    let _e403: MultiVector = other_1497;
    let _e406: MultiVector = other_1497;
    let _e417: Line = self_1649;
    let _e421: MultiVector = other_1497;
    let _e424: MultiVector = other_1497;
    let _e427: MultiVector = other_1497;
    let _e430: MultiVector = other_1497;
    let _e442: Line = self_1649;
    let _e446: MultiVector = other_1497;
    let _e449: MultiVector = other_1497;
    let _e452: MultiVector = other_1497;
    let _e455: MultiVector = other_1497;
    let _e467: Line = self_1649;
    let _e471: MultiVector = other_1497;
    let _e474: MultiVector = other_1497;
    let _e477: MultiVector = other_1497;
    let _e480: MultiVector = other_1497;
    let _e492: Line = self_1649;
    let _e496: MultiVector = other_1497;
    let _e499: MultiVector = other_1497;
    let _e502: MultiVector = other_1497;
    let _e505: MultiVector = other_1497;
    let _e517: Line = self_1649;
    let _e521: MultiVector = other_1497;
    let _e524: MultiVector = other_1497;
    let _e527: MultiVector = other_1497;
    let _e530: MultiVector = other_1497;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g1_.x) * vec2<f32>(_e35.g3_.x, _e38.g2_.x))) - (vec2(_e44.g1_.y) * vec2<f32>(_e48.g3_.y, _e51.g2_.y))) - (vec2(_e57.g1_.z) * vec2<f32>(_e61.g3_.z, _e64.g2_.z))) + ((vec2(_e70.g0_.x) * vec2(_e74.g3_.x)) * vec2<f32>(0.0, -1.0))), (((((((vec4(_e84.g0_.y) * vec4(_e88.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e99.g0_.z) * vec4(_e103.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e115.g1_.x) * vec4<f32>(_e119.g4_.w, _e122.g1_.z, _e125.g1_.y, _e128.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e140.g1_.y) * vec4<f32>(_e144.g1_.z, _e147.g4_.w, _e150.g1_.x, _e153.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e165.g1_.z) * vec4<f32>(_e169.g1_.y, _e172.g1_.x, _e175.g4_.w, _e178.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e190.g0_.x) * vec4(_e194.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec3(_e206.g0_.x) * vec3<f32>(_e210.g0_.x, _e213.g3_.z, _e216.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e226.g0_.y) * vec3<f32>(_e230.g3_.z, _e233.g0_.x, _e236.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e247.g0_.z) * vec3<f32>(_e251.g3_.y, _e254.g3_.x, _e257.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e268.g1_.x) * vec3<f32>(_e272.g0_.y, _e275.g2_.z, _e278.g2_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e289.g1_.y) * vec3<f32>(_e293.g2_.z, _e296.g0_.y, _e299.g2_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e310.g1_.z) * vec3<f32>(_e314.g2_.y, _e317.g2_.x, _e320.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), ((((vec3(_e331.g1_.x) * vec3<f32>(_e335.g0_.x, _e338.g3_.z, _e341.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e351.g1_.y) * vec3<f32>(_e355.g3_.z, _e358.g0_.x, _e361.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e372.g1_.z) * vec3<f32>(_e376.g3_.y, _e379.g3_.x, _e382.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))), (((((((vec4(_e393.g0_.y) * vec4<f32>(_e397.g1_.z, _e400.g4_.w, _e403.g1_.x, _e406.g1_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e417.g0_.z) * vec4<f32>(_e421.g1_.y, _e424.g1_.x, _e427.g4_.w, _e430.g1_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e442.g1_.x) * vec4<f32>(_e446.g1_.w, _e449.g4_.z, _e452.g4_.y, _e455.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e467.g1_.y) * vec4<f32>(_e471.g4_.z, _e474.g1_.w, _e477.g4_.x, _e480.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e492.g1_.z) * vec4<f32>(_e496.g4_.y, _e499.g4_.x, _e502.g1_.w, _e505.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e517.g0_.x) * vec4<f32>(_e521.g4_.w, _e524.g1_.z, _e527.g1_.y, _e530.g4_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn line_multi_vector_geometric_anti_product(self_1650: Line, other_1498: MultiVector) -> MultiVector {
    var self_1651: Line;
    var other_1499: MultiVector;

    self_1651 = self_1650;
    other_1499 = other_1498;
    let _e6: Line = self_1651;
    let _e10: MultiVector = other_1499;
    let _e13: MultiVector = other_1499;
    let _e19: Line = self_1651;
    let _e23: MultiVector = other_1499;
    let _e26: MultiVector = other_1499;
    let _e32: Line = self_1651;
    let _e36: MultiVector = other_1499;
    let _e39: MultiVector = other_1499;
    let _e45: Line = self_1651;
    let _e49: MultiVector = other_1499;
    let _e59: Line = self_1651;
    let _e63: MultiVector = other_1499;
    let _e73: Line = self_1651;
    let _e77: MultiVector = other_1499;
    let _e87: Line = self_1651;
    let _e91: MultiVector = other_1499;
    let _e94: MultiVector = other_1499;
    let _e97: MultiVector = other_1499;
    let _e100: MultiVector = other_1499;
    let _e111: Line = self_1651;
    let _e115: MultiVector = other_1499;
    let _e118: MultiVector = other_1499;
    let _e121: MultiVector = other_1499;
    let _e124: MultiVector = other_1499;
    let _e136: Line = self_1651;
    let _e140: MultiVector = other_1499;
    let _e143: MultiVector = other_1499;
    let _e146: MultiVector = other_1499;
    let _e149: MultiVector = other_1499;
    let _e161: Line = self_1651;
    let _e165: MultiVector = other_1499;
    let _e168: MultiVector = other_1499;
    let _e171: MultiVector = other_1499;
    let _e174: MultiVector = other_1499;
    let _e186: Line = self_1651;
    let _e190: MultiVector = other_1499;
    let _e193: MultiVector = other_1499;
    let _e196: MultiVector = other_1499;
    let _e199: MultiVector = other_1499;
    let _e211: Line = self_1651;
    let _e215: MultiVector = other_1499;
    let _e218: MultiVector = other_1499;
    let _e221: MultiVector = other_1499;
    let _e224: MultiVector = other_1499;
    let _e236: Line = self_1651;
    let _e240: MultiVector = other_1499;
    let _e243: MultiVector = other_1499;
    let _e246: MultiVector = other_1499;
    let _e256: Line = self_1651;
    let _e260: MultiVector = other_1499;
    let _e263: MultiVector = other_1499;
    let _e266: MultiVector = other_1499;
    let _e277: Line = self_1651;
    let _e281: MultiVector = other_1499;
    let _e284: MultiVector = other_1499;
    let _e287: MultiVector = other_1499;
    let _e298: Line = self_1651;
    let _e302: MultiVector = other_1499;
    let _e305: MultiVector = other_1499;
    let _e308: MultiVector = other_1499;
    let _e318: Line = self_1651;
    let _e322: MultiVector = other_1499;
    let _e325: MultiVector = other_1499;
    let _e328: MultiVector = other_1499;
    let _e339: Line = self_1651;
    let _e343: MultiVector = other_1499;
    let _e346: MultiVector = other_1499;
    let _e349: MultiVector = other_1499;
    let _e360: Line = self_1651;
    let _e364: MultiVector = other_1499;
    let _e367: MultiVector = other_1499;
    let _e370: MultiVector = other_1499;
    let _e381: Line = self_1651;
    let _e385: MultiVector = other_1499;
    let _e388: MultiVector = other_1499;
    let _e391: MultiVector = other_1499;
    let _e402: Line = self_1651;
    let _e406: MultiVector = other_1499;
    let _e409: MultiVector = other_1499;
    let _e412: MultiVector = other_1499;
    let _e423: Line = self_1651;
    let _e427: MultiVector = other_1499;
    let _e430: MultiVector = other_1499;
    let _e433: MultiVector = other_1499;
    let _e436: MultiVector = other_1499;
    let _e447: Line = self_1651;
    let _e451: MultiVector = other_1499;
    let _e454: MultiVector = other_1499;
    let _e457: MultiVector = other_1499;
    let _e460: MultiVector = other_1499;
    let _e472: Line = self_1651;
    let _e476: MultiVector = other_1499;
    let _e479: MultiVector = other_1499;
    let _e482: MultiVector = other_1499;
    let _e485: MultiVector = other_1499;
    let _e497: Line = self_1651;
    let _e501: MultiVector = other_1499;
    let _e513: Line = self_1651;
    let _e517: MultiVector = other_1499;
    let _e529: Line = self_1651;
    let _e533: MultiVector = other_1499;
    return MultiVector(((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.x) * vec2(_e77.g2_.x)) * vec2<f32>(-1.0, 0.0))), (((((((vec4(_e87.g0_.x) * vec4<f32>(_e91.g4_.w, _e94.g1_.z, _e97.g1_.y, _e100.g4_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e111.g0_.y) * vec4<f32>(_e115.g1_.z, _e118.g4_.w, _e121.g1_.x, _e124.g4_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e136.g0_.z) * vec4<f32>(_e140.g1_.y, _e143.g1_.x, _e146.g4_.w, _e149.g4_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e161.g1_.y) * vec4<f32>(_e165.g4_.z, _e168.g1_.w, _e171.g4_.x, _e174.g4_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e186.g1_.z) * vec4<f32>(_e190.g4_.y, _e193.g4_.x, _e196.g1_.w, _e199.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e211.g1_.x) * vec4<f32>(_e215.g1_.w, _e218.g4_.z, _e221.g4_.y, _e224.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((vec3(_e236.g0_.x) * vec3<f32>(_e240.g0_.y, _e243.g2_.z, _e246.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e256.g0_.y) * vec3<f32>(_e260.g2_.z, _e263.g0_.y, _e266.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e277.g0_.z) * vec3<f32>(_e281.g2_.y, _e284.g2_.x, _e287.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))), (((((((vec3(_e298.g0_.x) * vec3<f32>(_e302.g0_.x, _e305.g3_.z, _e308.g3_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e318.g0_.y) * vec3<f32>(_e322.g3_.z, _e325.g0_.x, _e328.g3_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e339.g0_.z) * vec3<f32>(_e343.g3_.y, _e346.g3_.x, _e349.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e360.g1_.x) * vec3<f32>(_e364.g0_.y, _e367.g2_.z, _e370.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e381.g1_.y) * vec3<f32>(_e385.g2_.z, _e388.g0_.y, _e391.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e402.g1_.z) * vec3<f32>(_e406.g2_.y, _e409.g2_.x, _e412.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))), (((((((vec4(_e423.g0_.x) * vec4<f32>(_e427.g1_.w, _e430.g4_.z, _e433.g4_.y, _e436.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e447.g0_.y) * vec4<f32>(_e451.g4_.z, _e454.g1_.w, _e457.g4_.x, _e460.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e472.g0_.z) * vec4<f32>(_e476.g4_.y, _e479.g4_.x, _e482.g1_.w, _e485.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e497.g1_.y) * vec4(_e501.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e513.g1_.z) * vec4(_e517.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e529.g1_.x) * vec4(_e533.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn line_multi_vector_regressive_product(self_1652: Line, other_1500: MultiVector) -> MultiVector {
    var self_1653: Line;
    var other_1501: MultiVector;

    self_1653 = self_1652;
    other_1501 = other_1500;
    let _e4: Line = self_1653;
    let _e8: MultiVector = other_1501;
    let _e17: Line = self_1653;
    let _e21: MultiVector = other_1501;
    let _e31: Line = self_1653;
    let _e35: MultiVector = other_1501;
    let _e45: Line = self_1653;
    let _e49: MultiVector = other_1501;
    let _e59: Line = self_1653;
    let _e63: MultiVector = other_1501;
    let _e73: Line = self_1653;
    let _e77: MultiVector = other_1501;
    let _e87: Line = self_1653;
    let _e91: MultiVector = other_1501;
    let _e101: Line = self_1653;
    let _e105: MultiVector = other_1501;
    let _e116: Line = self_1653;
    let _e120: MultiVector = other_1501;
    let _e131: Line = self_1653;
    let _e135: MultiVector = other_1501;
    let _e146: Line = self_1653;
    let _e149: Line = self_1653;
    let _e152: Line = self_1653;
    let _e155: Line = self_1653;
    let _e159: MultiVector = other_1501;
    let _e170: Line = self_1653;
    let _e172: MultiVector = other_1501;
    let _e177: Line = self_1653;
    let _e179: MultiVector = other_1501;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((vec4(_e87.g0_.y) * _e91.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e101.g0_.z) * _e105.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e116.g1_.y) * _e120.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e131.g1_.z) * _e135.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e146.g0_.x, _e149.g1_.x, _e152.g1_.x, _e155.g0_.x) * _e159.g4_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), (_e170.g0_ * vec3(_e172.g0_.y)), (_e177.g1_ * vec3(_e179.g0_.y)), vec4(0.0));
}

fn line_multi_vector_anti_wedge(self_1654: Line, other_1502: MultiVector) -> MultiVector {
    var self_1655: Line;
    var other_1503: MultiVector;

    self_1655 = self_1654;
    other_1503 = other_1502;
    let _e4: Line = self_1655;
    let _e8: MultiVector = other_1503;
    let _e17: Line = self_1655;
    let _e21: MultiVector = other_1503;
    let _e31: Line = self_1655;
    let _e35: MultiVector = other_1503;
    let _e45: Line = self_1655;
    let _e49: MultiVector = other_1503;
    let _e59: Line = self_1655;
    let _e63: MultiVector = other_1503;
    let _e73: Line = self_1655;
    let _e77: MultiVector = other_1503;
    let _e87: Line = self_1655;
    let _e91: MultiVector = other_1503;
    let _e101: Line = self_1655;
    let _e105: MultiVector = other_1503;
    let _e116: Line = self_1655;
    let _e120: MultiVector = other_1503;
    let _e131: Line = self_1655;
    let _e135: MultiVector = other_1503;
    let _e146: Line = self_1655;
    let _e149: Line = self_1655;
    let _e152: Line = self_1655;
    let _e155: Line = self_1655;
    let _e159: MultiVector = other_1503;
    let _e170: Line = self_1655;
    let _e172: MultiVector = other_1503;
    let _e177: Line = self_1655;
    let _e179: MultiVector = other_1503;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((vec4(_e87.g0_.y) * _e91.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e101.g0_.z) * _e105.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e116.g1_.y) * _e120.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e131.g1_.z) * _e135.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e146.g0_.x, _e149.g1_.x, _e152.g1_.x, _e155.g0_.x) * _e159.g4_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), (_e170.g0_ * vec3(_e172.g0_.y)), (_e177.g1_ * vec3(_e179.g0_.y)), vec4(0.0));
}

fn line_multi_vector_meet(self_1656: Line, other_1504: MultiVector) -> MultiVector {
    var self_1657: Line;
    var other_1505: MultiVector;

    self_1657 = self_1656;
    other_1505 = other_1504;
    let _e4: Line = self_1657;
    let _e8: MultiVector = other_1505;
    let _e17: Line = self_1657;
    let _e21: MultiVector = other_1505;
    let _e31: Line = self_1657;
    let _e35: MultiVector = other_1505;
    let _e45: Line = self_1657;
    let _e49: MultiVector = other_1505;
    let _e59: Line = self_1657;
    let _e63: MultiVector = other_1505;
    let _e73: Line = self_1657;
    let _e77: MultiVector = other_1505;
    let _e87: Line = self_1657;
    let _e91: MultiVector = other_1505;
    let _e101: Line = self_1657;
    let _e105: MultiVector = other_1505;
    let _e116: Line = self_1657;
    let _e120: MultiVector = other_1505;
    let _e131: Line = self_1657;
    let _e135: MultiVector = other_1505;
    let _e146: Line = self_1657;
    let _e149: Line = self_1657;
    let _e152: Line = self_1657;
    let _e155: Line = self_1657;
    let _e159: MultiVector = other_1505;
    let _e170: Line = self_1657;
    let _e172: MultiVector = other_1505;
    let _e177: Line = self_1657;
    let _e179: MultiVector = other_1505;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((vec4(_e87.g0_.y) * _e91.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e101.g0_.z) * _e105.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e116.g1_.y) * _e120.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e131.g1_.z) * _e135.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e146.g0_.x, _e149.g1_.x, _e152.g1_.x, _e155.g0_.x) * _e159.g4_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), (_e170.g0_ * vec3(_e172.g0_.y)), (_e177.g1_ * vec3(_e179.g0_.y)), vec4(0.0));
}

fn line_multi_vector_outer_product(self_1658: Line, other_1506: MultiVector) -> MultiVector {
    var self_1659: Line;
    var other_1507: MultiVector;

    self_1659 = self_1658;
    other_1507 = other_1506;
    let _e4: Line = self_1659;
    let _e8: MultiVector = other_1507;
    let _e17: Line = self_1659;
    let _e21: MultiVector = other_1507;
    let _e31: Line = self_1659;
    let _e35: MultiVector = other_1507;
    let _e45: Line = self_1659;
    let _e49: MultiVector = other_1507;
    let _e59: Line = self_1659;
    let _e63: MultiVector = other_1507;
    let _e73: Line = self_1659;
    let _e77: MultiVector = other_1507;
    let _e89: Line = self_1659;
    let _e91: MultiVector = other_1507;
    let _e96: Line = self_1659;
    let _e98: MultiVector = other_1507;
    let _e103: Line = self_1659;
    let _e107: MultiVector = other_1507;
    let _e117: Line = self_1659;
    let _e121: MultiVector = other_1507;
    let _e132: Line = self_1659;
    let _e136: MultiVector = other_1507;
    let _e147: Line = self_1659;
    let _e151: MultiVector = other_1507;
    let _e162: Line = self_1659;
    let _e165: Line = self_1659;
    let _e168: Line = self_1659;
    let _e171: Line = self_1659;
    let _e175: MultiVector = other_1507;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.x)), (_e96.g1_ * vec3(_e98.g0_.x)), ((((((vec4(_e103.g0_.y) * _e107.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e117.g0_.z) * _e121.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e132.g1_.y) * _e136.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e147.g1_.z) * _e151.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e162.g1_.x, _e165.g0_.x, _e168.g0_.x, _e171.g1_.x) * _e175.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_multi_vector_wedge(self_1660: Line, other_1508: MultiVector) -> MultiVector {
    var self_1661: Line;
    var other_1509: MultiVector;

    self_1661 = self_1660;
    other_1509 = other_1508;
    let _e4: Line = self_1661;
    let _e8: MultiVector = other_1509;
    let _e17: Line = self_1661;
    let _e21: MultiVector = other_1509;
    let _e31: Line = self_1661;
    let _e35: MultiVector = other_1509;
    let _e45: Line = self_1661;
    let _e49: MultiVector = other_1509;
    let _e59: Line = self_1661;
    let _e63: MultiVector = other_1509;
    let _e73: Line = self_1661;
    let _e77: MultiVector = other_1509;
    let _e89: Line = self_1661;
    let _e91: MultiVector = other_1509;
    let _e96: Line = self_1661;
    let _e98: MultiVector = other_1509;
    let _e103: Line = self_1661;
    let _e107: MultiVector = other_1509;
    let _e117: Line = self_1661;
    let _e121: MultiVector = other_1509;
    let _e132: Line = self_1661;
    let _e136: MultiVector = other_1509;
    let _e147: Line = self_1661;
    let _e151: MultiVector = other_1509;
    let _e162: Line = self_1661;
    let _e165: Line = self_1661;
    let _e168: Line = self_1661;
    let _e171: Line = self_1661;
    let _e175: MultiVector = other_1509;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.x)), (_e96.g1_ * vec3(_e98.g0_.x)), ((((((vec4(_e103.g0_.y) * _e107.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e117.g0_.z) * _e121.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e132.g1_.y) * _e136.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e147.g1_.z) * _e151.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e162.g1_.x, _e165.g0_.x, _e168.g0_.x, _e171.g1_.x) * _e175.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_multi_vector_join(self_1662: Line, other_1510: MultiVector) -> MultiVector {
    var self_1663: Line;
    var other_1511: MultiVector;

    self_1663 = self_1662;
    other_1511 = other_1510;
    let _e4: Line = self_1663;
    let _e8: MultiVector = other_1511;
    let _e17: Line = self_1663;
    let _e21: MultiVector = other_1511;
    let _e31: Line = self_1663;
    let _e35: MultiVector = other_1511;
    let _e45: Line = self_1663;
    let _e49: MultiVector = other_1511;
    let _e59: Line = self_1663;
    let _e63: MultiVector = other_1511;
    let _e73: Line = self_1663;
    let _e77: MultiVector = other_1511;
    let _e89: Line = self_1663;
    let _e91: MultiVector = other_1511;
    let _e96: Line = self_1663;
    let _e98: MultiVector = other_1511;
    let _e103: Line = self_1663;
    let _e107: MultiVector = other_1511;
    let _e117: Line = self_1663;
    let _e121: MultiVector = other_1511;
    let _e132: Line = self_1663;
    let _e136: MultiVector = other_1511;
    let _e147: Line = self_1663;
    let _e151: MultiVector = other_1511;
    let _e162: Line = self_1663;
    let _e165: Line = self_1663;
    let _e168: Line = self_1663;
    let _e171: Line = self_1663;
    let _e175: MultiVector = other_1511;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (_e89.g0_ * vec3(_e91.g0_.x)), (_e96.g1_ * vec3(_e98.g0_.x)), ((((((vec4(_e103.g0_.y) * _e107.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e117.g0_.z) * _e121.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e132.g1_.y) * _e136.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e147.g1_.z) * _e151.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e162.g1_.x, _e165.g0_.x, _e168.g0_.x, _e171.g1_.x) * _e175.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn line_multi_vector_inner_product(self_1664: Line, other_1512: MultiVector) -> MultiVector {
    var self_1665: Line;
    var other_1513: MultiVector;

    self_1665 = self_1664;
    other_1513 = other_1512;
    let _e4: Line = self_1665;
    let _e8: MultiVector = other_1513;
    let _e17: Line = self_1665;
    let _e21: MultiVector = other_1513;
    let _e31: Line = self_1665;
    let _e35: MultiVector = other_1513;
    let _e45: Line = self_1665;
    let _e49: MultiVector = other_1513;
    let _e60: Line = self_1665;
    let _e64: MultiVector = other_1513;
    let _e76: Line = self_1665;
    let _e80: MultiVector = other_1513;
    let _e83: MultiVector = other_1513;
    let _e86: MultiVector = other_1513;
    let _e89: MultiVector = other_1513;
    let _e101: Line = self_1665;
    let _e105: MultiVector = other_1513;
    let _e108: MultiVector = other_1513;
    let _e111: MultiVector = other_1513;
    let _e114: MultiVector = other_1513;
    let _e126: Line = self_1665;
    let _e130: MultiVector = other_1513;
    let _e133: MultiVector = other_1513;
    let _e136: MultiVector = other_1513;
    let _e139: MultiVector = other_1513;
    let _e151: Line = self_1665;
    let _e155: MultiVector = other_1513;
    let _e167: Line = self_1665;
    let _e171: MultiVector = other_1513;
    let _e181: Line = self_1665;
    let _e185: MultiVector = other_1513;
    let _e196: Line = self_1665;
    let _e200: MultiVector = other_1513;
    let _e211: Line = self_1665;
    let _e213: MultiVector = other_1513;
    let _e219: Line = self_1665;
    let _e221: MultiVector = other_1513;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g3_.x)) * vec2<f32>(-1.0, 0.0))), (((((((vec4(_e45.g0_.y) * vec4(_e49.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e60.g0_.z) * vec4(_e64.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e76.g1_.x) * vec4<f32>(_e80.g4_.w, _e83.g1_.z, _e86.g1_.y, _e89.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e101.g1_.y) * vec4<f32>(_e105.g1_.z, _e108.g4_.w, _e111.g1_.x, _e114.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e126.g1_.z) * vec4<f32>(_e130.g1_.y, _e133.g1_.x, _e136.g4_.w, _e139.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e151.g0_.x) * vec4(_e155.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3(_e167.g1_.x) * vec3(_e171.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e181.g1_.y) * vec3(_e185.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e196.g1_.z) * vec3(_e200.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e211.g0_ * vec3(_e213.g0_.x))), (_e219.g1_ * vec3(_e221.g0_.x)), vec4(0.0));
}

fn line_multi_vector_inner_anti_product(self_1666: Line, other_1514: MultiVector) -> MultiVector {
    var self_1667: Line;
    var other_1515: MultiVector;

    self_1667 = self_1666;
    other_1515 = other_1514;
    let _e4: Line = self_1667;
    let _e8: MultiVector = other_1515;
    let _e17: Line = self_1667;
    let _e21: MultiVector = other_1515;
    let _e31: Line = self_1667;
    let _e35: MultiVector = other_1515;
    let _e47: Line = self_1667;
    let _e49: MultiVector = other_1515;
    let _e54: Line = self_1667;
    let _e58: MultiVector = other_1515;
    let _e68: Line = self_1667;
    let _e72: MultiVector = other_1515;
    let _e83: Line = self_1667;
    let _e87: MultiVector = other_1515;
    let _e98: Line = self_1667;
    let _e100: MultiVector = other_1515;
    let _e106: Line = self_1667;
    let _e110: MultiVector = other_1515;
    let _e113: MultiVector = other_1515;
    let _e116: MultiVector = other_1515;
    let _e119: MultiVector = other_1515;
    let _e130: Line = self_1667;
    let _e134: MultiVector = other_1515;
    let _e137: MultiVector = other_1515;
    let _e140: MultiVector = other_1515;
    let _e143: MultiVector = other_1515;
    let _e155: Line = self_1667;
    let _e159: MultiVector = other_1515;
    let _e162: MultiVector = other_1515;
    let _e165: MultiVector = other_1515;
    let _e168: MultiVector = other_1515;
    let _e180: Line = self_1667;
    let _e184: MultiVector = other_1515;
    let _e196: Line = self_1667;
    let _e200: MultiVector = other_1515;
    let _e212: Line = self_1667;
    let _e216: MultiVector = other_1515;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.y)), (((((vec3(_e54.g1_.x) * vec3(_e58.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e68.g1_.y) * vec3(_e72.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e83.g1_.z) * vec3(_e87.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e98.g0_ * vec3(_e100.g0_.x))), (((((((vec4(_e106.g0_.x) * vec4<f32>(_e110.g1_.w, _e113.g4_.z, _e116.g4_.y, _e119.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e130.g0_.y) * vec4<f32>(_e134.g4_.z, _e137.g1_.w, _e140.g4_.x, _e143.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e155.g0_.z) * vec4<f32>(_e159.g4_.y, _e162.g4_.x, _e165.g1_.w, _e168.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e180.g1_.y) * vec4(_e184.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e196.g1_.z) * vec4(_e200.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e212.g1_.x) * vec4(_e216.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn line_multi_vector_left_contraction(self_1668: Line, other_1516: MultiVector) -> MultiVector {
    var self_1669: Line;
    var other_1517: MultiVector;

    self_1669 = self_1668;
    other_1517 = other_1516;
    let _e4: Line = self_1669;
    let _e8: MultiVector = other_1517;
    let _e17: Line = self_1669;
    let _e21: MultiVector = other_1517;
    let _e31: Line = self_1669;
    let _e35: MultiVector = other_1517;
    let _e45: Line = self_1669;
    let _e49: MultiVector = other_1517;
    let _e59: Line = self_1669;
    let _e63: MultiVector = other_1517;
    let _e74: Line = self_1669;
    let _e78: MultiVector = other_1517;
    let _e89: Line = self_1669;
    let _e91: MultiVector = other_1517;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g1_.y) * _e49.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e59.g1_.z) * _e63.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e74.g1_.x) * _e78.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e89.g1_ * vec3(_e91.g0_.y)), vec3(0.0), vec4(0.0));
}

fn line_multi_vector_right_contraction(self_1670: Line, other_1518: MultiVector) -> MultiVector {
    var self_1671: Line;
    var other_1519: MultiVector;

    self_1671 = self_1670;
    other_1519 = other_1518;
    let _e4: Line = self_1671;
    let _e8: MultiVector = other_1519;
    let _e17: Line = self_1671;
    let _e21: MultiVector = other_1519;
    let _e31: Line = self_1671;
    let _e35: MultiVector = other_1519;
    let _e45: Line = self_1671;
    let _e49: MultiVector = other_1519;
    let _e60: Line = self_1671;
    let _e64: MultiVector = other_1519;
    let _e76: Line = self_1671;
    let _e80: MultiVector = other_1519;
    let _e91: Line = self_1671;
    let _e95: MultiVector = other_1519;
    let _e106: Line = self_1671;
    let _e109: Line = self_1671;
    let _e112: Line = self_1671;
    let _e115: Line = self_1671;
    let _e119: MultiVector = other_1519;
    let _e130: Line = self_1671;
    let _e132: MultiVector = other_1519;
    let _e137: Line = self_1671;
    let _e139: MultiVector = other_1519;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((vec4(_e45.g0_.y) * vec4(_e49.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e60.g0_.z) * vec4(_e64.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e76.g1_.y) * _e80.g1_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e91.g1_.z) * _e95.g1_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e106.g0_.x, _e109.g1_.x, _e112.g1_.x, _e115.g0_.x) * _e119.g1_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), (_e130.g0_ * vec3(_e132.g0_.x)), (_e137.g1_ * vec3(_e139.g0_.x)), vec4(0.0));
}

fn line_multi_vector_left_anti_contraction(self_1672: Line, other_1520: MultiVector) -> MultiVector {
    var self_1673: Line;
    var other_1521: MultiVector;

    self_1673 = self_1672;
    other_1521 = other_1520;
    let _e4: Line = self_1673;
    let _e8: MultiVector = other_1521;
    let _e17: Line = self_1673;
    let _e21: MultiVector = other_1521;
    let _e31: Line = self_1673;
    let _e35: MultiVector = other_1521;
    let _e49: Line = self_1673;
    let _e51: MultiVector = other_1521;
    let _e56: Line = self_1673;
    let _e60: MultiVector = other_1521;
    let _e70: Line = self_1673;
    let _e74: MultiVector = other_1521;
    let _e85: Line = self_1673;
    let _e89: MultiVector = other_1521;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), (_e49.g0_ * vec3(_e51.g0_.x)), ((((vec4(_e56.g0_.y) * _e60.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e70.g0_.z) * _e74.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e85.g0_.x) * _e89.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn line_multi_vector_right_anti_contraction(self_1674: Line, other_1522: MultiVector) -> MultiVector {
    var self_1675: Line;
    var other_1523: MultiVector;

    self_1675 = self_1674;
    other_1523 = other_1522;
    let _e4: Line = self_1675;
    let _e8: MultiVector = other_1523;
    let _e17: Line = self_1675;
    let _e21: MultiVector = other_1523;
    let _e31: Line = self_1675;
    let _e35: MultiVector = other_1523;
    let _e47: Line = self_1675;
    let _e49: MultiVector = other_1523;
    let _e54: Line = self_1675;
    let _e56: MultiVector = other_1523;
    let _e61: Line = self_1675;
    let _e65: MultiVector = other_1523;
    let _e75: Line = self_1675;
    let _e79: MultiVector = other_1523;
    let _e90: Line = self_1675;
    let _e94: MultiVector = other_1523;
    let _e106: Line = self_1675;
    let _e110: MultiVector = other_1523;
    let _e122: Line = self_1675;
    let _e125: Line = self_1675;
    let _e128: Line = self_1675;
    let _e131: Line = self_1675;
    let _e135: MultiVector = other_1523;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (_e47.g0_ * vec3(_e49.g0_.y)), (_e54.g1_ * vec3(_e56.g0_.y)), ((((((vec4(_e61.g0_.y) * _e65.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e75.g0_.z) * _e79.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e90.g1_.y) * vec4(_e94.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e106.g1_.z) * vec4(_e110.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e122.g0_.x, _e125.g0_.x, _e128.g0_.x, _e131.g1_.x) * _e135.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn line_multi_vector_scalar_product(self_1676: Line, other_1524: MultiVector) -> Scalar {
    var self_1677: Line;
    var other_1525: MultiVector;

    self_1677 = self_1676;
    other_1525 = other_1524;
    let _e5: Line = self_1677;
    let _e8: MultiVector = other_1525;
    let _e13: Line = self_1677;
    let _e16: MultiVector = other_1525;
    let _e21: Line = self_1677;
    let _e24: MultiVector = other_1525;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn line_multi_vector_dot(self_1678: Line, other_1526: MultiVector) -> Scalar {
    var self_1679: Line;
    var other_1527: MultiVector;

    self_1679 = self_1678;
    other_1527 = other_1526;
    let _e5: Line = self_1679;
    let _e8: MultiVector = other_1527;
    let _e13: Line = self_1679;
    let _e16: MultiVector = other_1527;
    let _e21: Line = self_1679;
    let _e24: MultiVector = other_1527;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn line_multi_vector_anti_scalar_product(self_1680: Line, other_1528: MultiVector) -> AntiScalar {
    var self_1681: Line;
    var other_1529: MultiVector;

    self_1681 = self_1680;
    other_1529 = other_1528;
    let _e5: Line = self_1681;
    let _e8: MultiVector = other_1529;
    let _e13: Line = self_1681;
    let _e16: MultiVector = other_1529;
    let _e21: Line = self_1681;
    let _e24: MultiVector = other_1529;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)));
}

fn line_multi_vector_anti_dot(self_1682: Line, other_1530: MultiVector) -> AntiScalar {
    var self_1683: Line;
    var other_1531: MultiVector;

    self_1683 = self_1682;
    other_1531 = other_1530;
    let _e5: Line = self_1683;
    let _e8: MultiVector = other_1531;
    let _e13: Line = self_1683;
    let _e16: MultiVector = other_1531;
    let _e21: Line = self_1683;
    let _e24: MultiVector = other_1531;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)));
}

fn line_squared_magnitude(self_1684: Line) -> Scalar {
    var self_1685: Line;

    self_1685 = self_1684;
    let _e2: Line = self_1685;
    let _e3: Line = self_1685;
    let _e4: Line = line_reversal(_e3);
    let _e5: Scalar = line_line_scalar_product(_e2, _e4);
    return _e5;
}

fn line_magnitude(self_1686: Line) -> Scalar {
    var self_1687: Line;

    self_1687 = self_1686;
    let _e2: Line = self_1687;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_bulk_norm(self_1688: Line) -> Scalar {
    var self_1689: Line;

    self_1689 = self_1688;
    let _e2: Line = self_1689;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_squared_anti_magnitude(self_1690: Line) -> AntiScalar {
    var self_1691: Line;

    self_1691 = self_1690;
    let _e2: Line = self_1691;
    let _e3: Line = self_1691;
    let _e4: Line = line_anti_reversal(_e3);
    let _e5: AntiScalar = line_line_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn line_weight_norm(self_1692: Line) -> AntiScalar {
    var self_1693: Line;

    self_1693 = self_1692;
    let _e2: Line = self_1693;
    let _e3: AntiScalar = line_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn line_geometric_norm(self_1694: Line) -> HomogeneousMagnitude {
    var self_1695: Line;

    self_1695 = self_1694;
    let _e2: Line = self_1695;
    let _e3: Scalar = line_bulk_norm(_e2);
    let _e4: Line = self_1695;
    let _e5: AntiScalar = line_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn line_scale(self_1696: Line, other_1532: f32) -> Line {
    var self_1697: Line;
    var other_1533: f32;

    self_1697 = self_1696;
    other_1533 = other_1532;
    let _e4: Line = self_1697;
    let _e5: f32 = other_1533;
    let _e7: Line = line_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn line_signum(self_1698: Line) -> Line {
    var self_1699: Line;

    self_1699 = self_1698;
    let _e2: Line = self_1699;
    let _e3: Line = self_1699;
    let _e4: Scalar = line_magnitude(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_inverse(self_1700: Line) -> Line {
    var self_1701: Line;

    self_1701 = self_1700;
    let _e2: Line = self_1701;
    let _e3: Line = line_reversal(_e2);
    let _e4: Line = self_1701;
    let _e5: Scalar = line_squared_magnitude(_e4);
    let _e10: Line = line_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn line_unitize(self_1702: Line) -> Line {
    var self_1703: Line;

    self_1703 = self_1702;
    let _e2: Line = self_1703;
    let _e3: Line = self_1703;
    let _e4: AntiScalar = line_weight_norm(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_attitude(self_1704: Line) -> Point {
    var self_1705: Line;

    self_1705 = self_1704;
    let _e2: Line = self_1705;
    let _e9: Point = line_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn plane_zero() -> Plane {
    return Plane(vec4(0.0));
}

fn plane_one() -> Plane {
    return Plane(vec4(0.0));
}

fn plane_grade(self_1706: Plane) -> i32 {
    return 3;
}

fn plane_anti_grade(self_1707: Plane) -> i32 {
    return 1;
}

fn plane_neg(self_1708: Plane) -> Plane {
    var self_1709: Plane;

    self_1709 = self_1708;
    let _e2: Plane = self_1709;
    return Plane((_e2.g0_ * vec4(-1.0)));
}

fn plane_automorphism(self_1710: Plane) -> Plane {
    var self_1711: Plane;

    self_1711 = self_1710;
    let _e2: Plane = self_1711;
    return Plane((_e2.g0_ * vec4(-1.0)));
}

fn plane_reversal(self_1712: Plane) -> Plane {
    var self_1713: Plane;

    self_1713 = self_1712;
    let _e2: Plane = self_1713;
    return Plane((_e2.g0_ * vec4(-1.0)));
}

fn plane_conjugation(self_1714: Plane) -> Plane {
    var self_1715: Plane;

    self_1715 = self_1714;
    let _e2: Plane = self_1715;
    return Plane(_e2.g0_);
}

fn plane_dual(self_1716: Plane) -> Point {
    var self_1717: Plane;

    self_1717 = self_1716;
    let _e2: Plane = self_1717;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn plane_anti_reversal(self_1718: Plane) -> Plane {
    var self_1719: Plane;

    self_1719 = self_1718;
    let _e2: Plane = self_1719;
    return Plane(_e2.g0_);
}

fn plane_right_complement(self_1720: Plane) -> Point {
    var self_1721: Plane;

    self_1721 = self_1720;
    let _e2: Plane = self_1721;
    return Point((_e2.g0_ * vec4(-1.0)));
}

fn plane_left_complement(self_1722: Plane) -> Point {
    var self_1723: Plane;

    self_1723 = self_1722;
    let _e2: Plane = self_1723;
    return Point(_e2.g0_);
}

fn plane_double_complement(self_1724: Plane) -> Plane {
    var self_1725: Plane;

    self_1725 = self_1724;
    let _e2: Plane = self_1725;
    return Plane((_e2.g0_ * vec4(-1.0)));
}

fn plane_scalar_geometric_product(self_1726: Plane, other_1534: Scalar) -> Plane {
    var self_1727: Plane;
    var other_1535: Scalar;

    self_1727 = self_1726;
    other_1535 = other_1534;
    let _e4: Plane = self_1727;
    let _e6: Scalar = other_1535;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_geometric_anti_product(self_1728: Plane, other_1536: Scalar) -> Point {
    var self_1729: Plane;
    var other_1537: Scalar;

    self_1729 = self_1728;
    other_1537 = other_1536;
    let _e4: Plane = self_1729;
    let _e7: Scalar = other_1537;
    return Point(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn plane_scalar_outer_product(self_1730: Plane, other_1538: Scalar) -> Plane {
    var self_1731: Plane;
    var other_1539: Scalar;

    self_1731 = self_1730;
    other_1539 = other_1538;
    let _e4: Plane = self_1731;
    let _e6: Scalar = other_1539;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_wedge(self_1732: Plane, other_1540: Scalar) -> Plane {
    var self_1733: Plane;
    var other_1541: Scalar;

    self_1733 = self_1732;
    other_1541 = other_1540;
    let _e4: Plane = self_1733;
    let _e6: Scalar = other_1541;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_join(self_1734: Plane, other_1542: Scalar) -> Plane {
    var self_1735: Plane;
    var other_1543: Scalar;

    self_1735 = self_1734;
    other_1543 = other_1542;
    let _e4: Plane = self_1735;
    let _e6: Scalar = other_1543;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_inner_product(self_1736: Plane, other_1544: Scalar) -> Plane {
    var self_1737: Plane;
    var other_1545: Scalar;

    self_1737 = self_1736;
    other_1545 = other_1544;
    let _e4: Plane = self_1737;
    let _e6: Scalar = other_1545;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_inner_anti_product(self_1738: Plane, other_1546: Scalar) -> Point {
    var self_1739: Plane;
    var other_1547: Scalar;

    self_1739 = self_1738;
    other_1547 = other_1546;
    let _e4: Plane = self_1739;
    let _e7: Scalar = other_1547;
    return Point(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn plane_scalar_right_contraction(self_1740: Plane, other_1548: Scalar) -> Plane {
    var self_1741: Plane;
    var other_1549: Scalar;

    self_1741 = self_1740;
    other_1549 = other_1548;
    let _e4: Plane = self_1741;
    let _e6: Scalar = other_1549;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_scalar_left_anti_contraction(self_1742: Plane, other_1550: Scalar) -> Point {
    var self_1743: Plane;
    var other_1551: Scalar;

    self_1743 = self_1742;
    other_1551 = other_1550;
    let _e4: Plane = self_1743;
    let _e7: Scalar = other_1551;
    return Point(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn plane_anti_scalar_geometric_product(self_1744: Plane, other_1552: AntiScalar) -> Point {
    var self_1745: Plane;
    var other_1553: AntiScalar;

    self_1745 = self_1744;
    other_1553 = other_1552;
    let _e4: Plane = self_1745;
    let _e7: AntiScalar = other_1553;
    return Point(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_anti_scalar_geometric_anti_product(self_1746: Plane, other_1554: AntiScalar) -> Plane {
    var self_1747: Plane;
    var other_1555: AntiScalar;

    self_1747 = self_1746;
    other_1555 = other_1554;
    let _e4: Plane = self_1747;
    let _e6: AntiScalar = other_1555;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_anti_scalar_regressive_product(self_1748: Plane, other_1556: AntiScalar) -> Plane {
    var self_1749: Plane;
    var other_1557: AntiScalar;

    self_1749 = self_1748;
    other_1557 = other_1556;
    let _e4: Plane = self_1749;
    let _e6: AntiScalar = other_1557;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_anti_scalar_anti_wedge(self_1750: Plane, other_1558: AntiScalar) -> Plane {
    var self_1751: Plane;
    var other_1559: AntiScalar;

    self_1751 = self_1750;
    other_1559 = other_1558;
    let _e4: Plane = self_1751;
    let _e6: AntiScalar = other_1559;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_anti_scalar_meet(self_1752: Plane, other_1560: AntiScalar) -> Plane {
    var self_1753: Plane;
    var other_1561: AntiScalar;

    self_1753 = self_1752;
    other_1561 = other_1560;
    let _e4: Plane = self_1753;
    let _e6: AntiScalar = other_1561;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_anti_scalar_inner_product(self_1754: Plane, other_1562: AntiScalar) -> Point {
    var self_1755: Plane;
    var other_1563: AntiScalar;

    self_1755 = self_1754;
    other_1563 = other_1562;
    let _e4: Plane = self_1755;
    let _e7: AntiScalar = other_1563;
    return Point(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_anti_scalar_inner_anti_product(self_1756: Plane, other_1564: AntiScalar) -> Plane {
    var self_1757: Plane;
    var other_1565: AntiScalar;

    self_1757 = self_1756;
    other_1565 = other_1564;
    let _e4: Plane = self_1757;
    let _e6: AntiScalar = other_1565;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_anti_scalar_left_contraction(self_1758: Plane, other_1566: AntiScalar) -> Point {
    var self_1759: Plane;
    var other_1567: AntiScalar;

    self_1759 = self_1758;
    other_1567 = other_1566;
    let _e4: Plane = self_1759;
    let _e7: AntiScalar = other_1567;
    return Point(((_e4.g0_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_anti_scalar_right_anti_contraction(self_1760: Plane, other_1568: AntiScalar) -> Plane {
    var self_1761: Plane;
    var other_1569: AntiScalar;

    self_1761 = self_1760;
    other_1569 = other_1568;
    let _e4: Plane = self_1761;
    let _e6: AntiScalar = other_1569;
    return Plane((_e4.g0_ * vec4(_e6.g0_)));
}

fn plane_homogeneous_magnitude_geometric_product(self_1762: Plane, other_1570: HomogeneousMagnitude) -> Flector {
    var self_1763: Plane;
    var other_1571: HomogeneousMagnitude;

    self_1763 = self_1762;
    other_1571 = other_1570;
    let _e4: Plane = self_1763;
    let _e7: HomogeneousMagnitude = other_1571;
    let _e10: HomogeneousMagnitude = other_1571;
    let _e13: HomogeneousMagnitude = other_1571;
    let _e16: HomogeneousMagnitude = other_1571;
    let _e27: Plane = self_1763;
    let _e29: HomogeneousMagnitude = other_1571;
    return Flector(((_e4.g0_.xxxw * vec4<f32>(_e7.g0_.x, _e10.g0_.x, _e13.g0_.x, _e16.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e27.g0_ * vec4(_e29.g0_.x)));
}

fn plane_homogeneous_magnitude_geometric_anti_product(self_1764: Plane, other_1572: HomogeneousMagnitude) -> Flector {
    var self_1765: Plane;
    var other_1573: HomogeneousMagnitude;

    self_1765 = self_1764;
    other_1573 = other_1572;
    let _e4: Plane = self_1765;
    let _e7: HomogeneousMagnitude = other_1573;
    let _e18: Plane = self_1765;
    let _e20: HomogeneousMagnitude = other_1573;
    return Flector(((_e4.g0_.xyzx * vec4(_e7.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), (_e18.g0_ * vec4(_e20.g0_.y)));
}

fn plane_homogeneous_magnitude_regressive_product(self_1766: Plane, other_1574: HomogeneousMagnitude) -> Plane {
    var self_1767: Plane;
    var other_1575: HomogeneousMagnitude;

    self_1767 = self_1766;
    other_1575 = other_1574;
    let _e4: Plane = self_1767;
    let _e6: HomogeneousMagnitude = other_1575;
    return Plane((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_anti_wedge(self_1768: Plane, other_1576: HomogeneousMagnitude) -> Plane {
    var self_1769: Plane;
    var other_1577: HomogeneousMagnitude;

    self_1769 = self_1768;
    other_1577 = other_1576;
    let _e4: Plane = self_1769;
    let _e6: HomogeneousMagnitude = other_1577;
    return Plane((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_meet(self_1770: Plane, other_1578: HomogeneousMagnitude) -> Plane {
    var self_1771: Plane;
    var other_1579: HomogeneousMagnitude;

    self_1771 = self_1770;
    other_1579 = other_1578;
    let _e4: Plane = self_1771;
    let _e6: HomogeneousMagnitude = other_1579;
    return Plane((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_outer_product(self_1772: Plane, other_1580: HomogeneousMagnitude) -> Plane {
    var self_1773: Plane;
    var other_1581: HomogeneousMagnitude;

    self_1773 = self_1772;
    other_1581 = other_1580;
    let _e4: Plane = self_1773;
    let _e6: HomogeneousMagnitude = other_1581;
    return Plane((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_wedge(self_1774: Plane, other_1582: HomogeneousMagnitude) -> Plane {
    var self_1775: Plane;
    var other_1583: HomogeneousMagnitude;

    self_1775 = self_1774;
    other_1583 = other_1582;
    let _e4: Plane = self_1775;
    let _e6: HomogeneousMagnitude = other_1583;
    return Plane((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_join(self_1776: Plane, other_1584: HomogeneousMagnitude) -> Plane {
    var self_1777: Plane;
    var other_1585: HomogeneousMagnitude;

    self_1777 = self_1776;
    other_1585 = other_1584;
    let _e4: Plane = self_1777;
    let _e6: HomogeneousMagnitude = other_1585;
    return Plane((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_inner_product(self_1778: Plane, other_1586: HomogeneousMagnitude) -> Flector {
    var self_1779: Plane;
    var other_1587: HomogeneousMagnitude;

    self_1779 = self_1778;
    other_1587 = other_1586;
    let _e4: Plane = self_1779;
    let _e7: HomogeneousMagnitude = other_1587;
    let _e10: HomogeneousMagnitude = other_1587;
    let _e13: HomogeneousMagnitude = other_1587;
    let _e16: HomogeneousMagnitude = other_1587;
    let _e27: Plane = self_1779;
    let _e29: HomogeneousMagnitude = other_1587;
    return Flector(((_e4.g0_.xxxw * vec4<f32>(_e7.g0_.x, _e10.g0_.x, _e13.g0_.x, _e16.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e27.g0_ * vec4(_e29.g0_.x)));
}

fn plane_homogeneous_magnitude_inner_anti_product(self_1780: Plane, other_1588: HomogeneousMagnitude) -> Flector {
    var self_1781: Plane;
    var other_1589: HomogeneousMagnitude;

    self_1781 = self_1780;
    other_1589 = other_1588;
    let _e4: Plane = self_1781;
    let _e7: HomogeneousMagnitude = other_1589;
    let _e18: Plane = self_1781;
    let _e20: HomogeneousMagnitude = other_1589;
    return Flector(((_e4.g0_.xyzx * vec4(_e7.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), (_e18.g0_ * vec4(_e20.g0_.y)));
}

fn plane_homogeneous_magnitude_left_contraction(self_1782: Plane, other_1590: HomogeneousMagnitude) -> Point {
    var self_1783: Plane;
    var other_1591: HomogeneousMagnitude;

    self_1783 = self_1782;
    other_1591 = other_1590;
    let _e4: Plane = self_1783;
    let _e7: HomogeneousMagnitude = other_1591;
    let _e10: HomogeneousMagnitude = other_1591;
    let _e13: HomogeneousMagnitude = other_1591;
    let _e16: HomogeneousMagnitude = other_1591;
    return Point(((_e4.g0_.xxxw * vec4<f32>(_e7.g0_.x, _e10.g0_.x, _e13.g0_.x, _e16.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_homogeneous_magnitude_right_contraction(self_1784: Plane, other_1592: HomogeneousMagnitude) -> Plane {
    var self_1785: Plane;
    var other_1593: HomogeneousMagnitude;

    self_1785 = self_1784;
    other_1593 = other_1592;
    let _e4: Plane = self_1785;
    let _e6: HomogeneousMagnitude = other_1593;
    return Plane((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_left_anti_contraction(self_1786: Plane, other_1594: HomogeneousMagnitude) -> Point {
    var self_1787: Plane;
    var other_1595: HomogeneousMagnitude;

    self_1787 = self_1786;
    other_1595 = other_1594;
    let _e4: Plane = self_1787;
    let _e7: HomogeneousMagnitude = other_1595;
    return Point(((_e4.g0_.xyzx * vec4(_e7.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn plane_homogeneous_magnitude_right_anti_contraction(self_1788: Plane, other_1596: HomogeneousMagnitude) -> Plane {
    var self_1789: Plane;
    var other_1597: HomogeneousMagnitude;

    self_1789 = self_1788;
    other_1597 = other_1596;
    let _e4: Plane = self_1789;
    let _e6: HomogeneousMagnitude = other_1597;
    return Plane((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn plane_point_add(self_1790: Plane, other_1598: Point) -> Flector {
    var self_1791: Plane;
    var other_1599: Point;

    self_1791 = self_1790;
    other_1599 = other_1598;
    let _e4: Point = other_1599;
    let _e6: Plane = self_1791;
    return Flector(_e4.g0_, _e6.g0_);
}

fn plane_point_sub(self_1792: Plane, other_1600: Point) -> Flector {
    var self_1793: Plane;
    var other_1601: Point;

    self_1793 = self_1792;
    other_1601 = other_1600;
    let _e6: Point = other_1601;
    let _e9: Plane = self_1793;
    return Flector((vec4(0.0) - _e6.g0_), _e9.g0_);
}

fn plane_point_geometric_product(self_1794: Plane, other_1602: Point) -> Motor {
    var self_1795: Plane;
    var other_1603: Point;

    self_1795 = self_1794;
    other_1603 = other_1602;
    let _e4: Plane = self_1795;
    let _e8: Point = other_1603;
    let _e18: Plane = self_1795;
    let _e22: Point = other_1603;
    let _e33: Plane = self_1795;
    let _e37: Point = other_1603;
    let _e49: Plane = self_1795;
    let _e53: Point = other_1603;
    let _e66: Plane = self_1795;
    let _e70: Point = other_1603;
    let _e73: Point = other_1603;
    let _e76: Point = other_1603;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyz) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(0.0) - (vec3(_e66.g0_.w) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z))));
}

fn plane_point_geometric_anti_product(self_1796: Plane, other_1604: Point) -> MultiVector {
    var self_1797: Plane;
    var other_1605: Point;

    self_1797 = self_1796;
    other_1605 = other_1604;
    let _e4: Plane = self_1797;
    let _e8: Point = other_1605;
    let _e17: Plane = self_1797;
    let _e21: Point = other_1605;
    let _e31: Plane = self_1797;
    let _e35: Point = other_1605;
    let _e45: Plane = self_1797;
    let _e49: Point = other_1605;
    let _e61: Plane = self_1797;
    let _e64: Plane = self_1797;
    let _e67: Plane = self_1797;
    let _e71: Point = other_1605;
    let _e79: Plane = self_1797;
    let _e83: Point = other_1605;
    let _e86: Point = other_1605;
    let _e89: Point = other_1605;
    let _e99: Plane = self_1797;
    let _e103: Point = other_1605;
    let _e106: Point = other_1605;
    let _e109: Point = other_1605;
    let _e120: Plane = self_1797;
    let _e124: Point = other_1605;
    let _e127: Point = other_1605;
    let _e130: Point = other_1605;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.w)) * vec3(-1.0)), ((((vec3(_e79.g0_.y) * vec3<f32>(_e83.g0_.z, _e86.g0_.z, _e89.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e99.g0_.z) * vec3<f32>(_e103.g0_.y, _e106.g0_.x, _e109.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e120.g0_.x) * vec3<f32>(_e124.g0_.x, _e127.g0_.z, _e130.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn plane_point_regressive_product(self_1798: Plane, other_1606: Point) -> Scalar {
    var self_1799: Plane;
    var other_1607: Point;

    self_1799 = self_1798;
    other_1607 = other_1606;
    let _e5: Plane = self_1799;
    let _e8: Point = other_1607;
    let _e13: Plane = self_1799;
    let _e16: Point = other_1607;
    let _e21: Plane = self_1799;
    let _e24: Point = other_1607;
    let _e29: Plane = self_1799;
    let _e32: Point = other_1607;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_anti_wedge(self_1800: Plane, other_1608: Point) -> Scalar {
    var self_1801: Plane;
    var other_1609: Point;

    self_1801 = self_1800;
    other_1609 = other_1608;
    let _e5: Plane = self_1801;
    let _e8: Point = other_1609;
    let _e13: Plane = self_1801;
    let _e16: Point = other_1609;
    let _e21: Plane = self_1801;
    let _e24: Point = other_1609;
    let _e29: Plane = self_1801;
    let _e32: Point = other_1609;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_meet(self_1802: Plane, other_1610: Point) -> Scalar {
    var self_1803: Plane;
    var other_1611: Point;

    self_1803 = self_1802;
    other_1611 = other_1610;
    let _e5: Plane = self_1803;
    let _e8: Point = other_1611;
    let _e13: Plane = self_1803;
    let _e16: Point = other_1611;
    let _e21: Plane = self_1803;
    let _e24: Point = other_1611;
    let _e29: Plane = self_1803;
    let _e32: Point = other_1611;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_outer_product(self_1804: Plane, other_1612: Point) -> AntiScalar {
    var self_1805: Plane;
    var other_1613: Point;

    self_1805 = self_1804;
    other_1613 = other_1612;
    let _e5: Plane = self_1805;
    let _e8: Point = other_1613;
    let _e13: Plane = self_1805;
    let _e16: Point = other_1613;
    let _e21: Plane = self_1805;
    let _e24: Point = other_1613;
    let _e29: Plane = self_1805;
    let _e32: Point = other_1613;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_wedge(self_1806: Plane, other_1614: Point) -> AntiScalar {
    var self_1807: Plane;
    var other_1615: Point;

    self_1807 = self_1806;
    other_1615 = other_1614;
    let _e5: Plane = self_1807;
    let _e8: Point = other_1615;
    let _e13: Plane = self_1807;
    let _e16: Point = other_1615;
    let _e21: Plane = self_1807;
    let _e24: Point = other_1615;
    let _e29: Plane = self_1807;
    let _e32: Point = other_1615;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_join(self_1808: Plane, other_1616: Point) -> AntiScalar {
    var self_1809: Plane;
    var other_1617: Point;

    self_1809 = self_1808;
    other_1617 = other_1616;
    let _e5: Plane = self_1809;
    let _e8: Point = other_1617;
    let _e13: Plane = self_1809;
    let _e16: Point = other_1617;
    let _e21: Plane = self_1809;
    let _e24: Point = other_1617;
    let _e29: Plane = self_1809;
    let _e32: Point = other_1617;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_inner_product(self_1810: Plane, other_1618: Point) -> Line {
    var self_1811: Plane;
    var other_1619: Point;

    self_1811 = self_1810;
    other_1619 = other_1618;
    let _e4: Plane = self_1811;
    let _e8: Point = other_1619;
    let _e11: Point = other_1619;
    let _e14: Point = other_1619;
    let _e24: Plane = self_1811;
    let _e28: Point = other_1619;
    let _e31: Point = other_1619;
    let _e34: Point = other_1619;
    let _e45: Plane = self_1811;
    let _e49: Point = other_1619;
    let _e52: Point = other_1619;
    let _e55: Point = other_1619;
    let _e68: Plane = self_1811;
    let _e72: Point = other_1619;
    let _e75: Point = other_1619;
    let _e78: Point = other_1619;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z))));
}

fn plane_point_inner_anti_product(self_1812: Plane, other_1620: Point) -> Line {
    var self_1813: Plane;
    var other_1621: Point;

    self_1813 = self_1812;
    other_1621 = other_1620;
    let _e4: Plane = self_1813;
    let _e7: Plane = self_1813;
    let _e10: Plane = self_1813;
    let _e14: Point = other_1621;
    let _e22: Plane = self_1813;
    let _e26: Point = other_1621;
    let _e29: Point = other_1621;
    let _e32: Point = other_1621;
    let _e42: Plane = self_1813;
    let _e46: Point = other_1621;
    let _e49: Point = other_1621;
    let _e52: Point = other_1621;
    let _e63: Plane = self_1813;
    let _e67: Point = other_1621;
    let _e70: Point = other_1621;
    let _e73: Point = other_1621;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3(_e14.g0_.w)) * vec3(-1.0)), ((((vec3(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e42.g0_.z) * vec3<f32>(_e46.g0_.y, _e49.g0_.x, _e52.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e63.g0_.x) * vec3<f32>(_e67.g0_.x, _e70.g0_.z, _e73.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn plane_point_right_contraction(self_1814: Plane, other_1622: Point) -> Line {
    var self_1815: Plane;
    var other_1623: Point;

    self_1815 = self_1814;
    other_1623 = other_1622;
    let _e4: Plane = self_1815;
    let _e8: Point = other_1623;
    let _e11: Point = other_1623;
    let _e14: Point = other_1623;
    let _e24: Plane = self_1815;
    let _e28: Point = other_1623;
    let _e31: Point = other_1623;
    let _e34: Point = other_1623;
    let _e45: Plane = self_1815;
    let _e49: Point = other_1623;
    let _e52: Point = other_1623;
    let _e55: Point = other_1623;
    let _e68: Plane = self_1815;
    let _e72: Point = other_1623;
    let _e75: Point = other_1623;
    let _e78: Point = other_1623;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z))));
}

fn plane_point_left_anti_contraction(self_1816: Plane, other_1624: Point) -> Line {
    var self_1817: Plane;
    var other_1625: Point;

    self_1817 = self_1816;
    other_1625 = other_1624;
    let _e4: Plane = self_1817;
    let _e7: Plane = self_1817;
    let _e10: Plane = self_1817;
    let _e14: Point = other_1625;
    let _e22: Plane = self_1817;
    let _e26: Point = other_1625;
    let _e29: Point = other_1625;
    let _e32: Point = other_1625;
    let _e42: Plane = self_1817;
    let _e46: Point = other_1625;
    let _e49: Point = other_1625;
    let _e52: Point = other_1625;
    let _e63: Plane = self_1817;
    let _e67: Point = other_1625;
    let _e70: Point = other_1625;
    let _e73: Point = other_1625;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3(_e14.g0_.w)) * vec3(-1.0)), ((((vec3(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e42.g0_.z) * vec3<f32>(_e46.g0_.y, _e49.g0_.x, _e52.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e63.g0_.x) * vec3<f32>(_e67.g0_.x, _e70.g0_.z, _e73.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn plane_line_geometric_product(self_1818: Plane, other_1626: Line) -> Flector {
    var self_1819: Plane;
    var other_1627: Line;

    self_1819 = self_1818;
    other_1627 = other_1626;
    let _e4: Plane = self_1819;
    let _e8: Line = other_1627;
    let _e19: Plane = self_1819;
    let _e23: Line = other_1627;
    let _e35: Plane = self_1819;
    let _e38: Line = other_1627;
    let _e41: Line = other_1627;
    let _e44: Line = other_1627;
    let _e47: Line = other_1627;
    let _e59: Plane = self_1819;
    let _e63: Line = other_1627;
    let _e66: Line = other_1627;
    let _e69: Line = other_1627;
    let _e72: Line = other_1627;
    let _e83: Plane = self_1819;
    let _e87: Line = other_1627;
    let _e90: Line = other_1627;
    let _e93: Line = other_1627;
    let _e96: Line = other_1627;
    let _e108: Plane = self_1819;
    let _e112: Line = other_1627;
    let _e115: Line = other_1627;
    let _e118: Line = other_1627;
    let _e121: Line = other_1627;
    let _e133: Plane = self_1819;
    let _e137: Line = other_1627;
    let _e140: Line = other_1627;
    let _e143: Line = other_1627;
    let _e146: Line = other_1627;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (((((vec4(_e59.g0_.y) * vec4<f32>(_e63.g1_.z, _e66.g1_.z, _e69.g1_.x, _e72.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e83.g0_.z) * vec4<f32>(_e87.g1_.y, _e90.g1_.x, _e93.g1_.y, _e96.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e108.g0_.w) * vec4<f32>(_e112.g0_.x, _e115.g0_.y, _e118.g0_.z, _e121.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e133.g0_.x) * vec4<f32>(_e137.g1_.x, _e140.g1_.z, _e143.g1_.y, _e146.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn plane_line_geometric_anti_product(self_1820: Plane, other_1628: Line) -> Flector {
    var self_1821: Plane;
    var other_1629: Line;

    self_1821 = self_1820;
    other_1629 = other_1628;
    let _e4: Plane = self_1821;
    let _e8: Line = other_1629;
    let _e11: Line = other_1629;
    let _e14: Line = other_1629;
    let _e17: Line = other_1629;
    let _e28: Plane = self_1821;
    let _e32: Line = other_1629;
    let _e35: Line = other_1629;
    let _e38: Line = other_1629;
    let _e41: Line = other_1629;
    let _e53: Plane = self_1821;
    let _e57: Line = other_1629;
    let _e60: Line = other_1629;
    let _e63: Line = other_1629;
    let _e66: Line = other_1629;
    let _e78: Plane = self_1821;
    let _e82: Line = other_1629;
    let _e85: Line = other_1629;
    let _e88: Line = other_1629;
    let _e91: Line = other_1629;
    let _e103: Plane = self_1821;
    let _e107: Line = other_1629;
    let _e110: Line = other_1629;
    let _e113: Line = other_1629;
    let _e116: Line = other_1629;
    let _e127: Plane = self_1821;
    let _e131: Line = other_1629;
    let _e134: Line = other_1629;
    let _e137: Line = other_1629;
    let _e140: Line = other_1629;
    let _e152: Plane = self_1821;
    let _e156: Line = other_1629;
    let _e159: Line = other_1629;
    let _e162: Line = other_1629;
    let _e165: Line = other_1629;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec4(_e103.g0_.y) * vec4<f32>(_e107.g0_.z, _e110.g0_.z, _e113.g0_.x, _e116.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e127.g0_.z) * vec4<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.y, _e140.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e152.g0_.x) * vec4<f32>(_e156.g0_.x, _e159.g0_.z, _e162.g0_.y, _e165.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn plane_line_regressive_product(self_1822: Plane, other_1630: Line) -> Point {
    var self_1823: Plane;
    var other_1631: Line;

    self_1823 = self_1822;
    other_1631 = other_1630;
    let _e4: Plane = self_1823;
    let _e8: Line = other_1631;
    let _e11: Line = other_1631;
    let _e14: Line = other_1631;
    let _e17: Line = other_1631;
    let _e28: Plane = self_1823;
    let _e32: Line = other_1631;
    let _e35: Line = other_1631;
    let _e38: Line = other_1631;
    let _e41: Line = other_1631;
    let _e53: Plane = self_1823;
    let _e57: Line = other_1631;
    let _e60: Line = other_1631;
    let _e63: Line = other_1631;
    let _e66: Line = other_1631;
    let _e78: Plane = self_1823;
    let _e82: Line = other_1631;
    let _e85: Line = other_1631;
    let _e88: Line = other_1631;
    let _e91: Line = other_1631;
    return Point((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn plane_line_anti_wedge(self_1824: Plane, other_1632: Line) -> Point {
    var self_1825: Plane;
    var other_1633: Line;

    self_1825 = self_1824;
    other_1633 = other_1632;
    let _e4: Plane = self_1825;
    let _e8: Line = other_1633;
    let _e11: Line = other_1633;
    let _e14: Line = other_1633;
    let _e17: Line = other_1633;
    let _e28: Plane = self_1825;
    let _e32: Line = other_1633;
    let _e35: Line = other_1633;
    let _e38: Line = other_1633;
    let _e41: Line = other_1633;
    let _e53: Plane = self_1825;
    let _e57: Line = other_1633;
    let _e60: Line = other_1633;
    let _e63: Line = other_1633;
    let _e66: Line = other_1633;
    let _e78: Plane = self_1825;
    let _e82: Line = other_1633;
    let _e85: Line = other_1633;
    let _e88: Line = other_1633;
    let _e91: Line = other_1633;
    return Point((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn plane_line_meet(self_1826: Plane, other_1634: Line) -> Point {
    var self_1827: Plane;
    var other_1635: Line;

    self_1827 = self_1826;
    other_1635 = other_1634;
    let _e4: Plane = self_1827;
    let _e8: Line = other_1635;
    let _e11: Line = other_1635;
    let _e14: Line = other_1635;
    let _e17: Line = other_1635;
    let _e28: Plane = self_1827;
    let _e32: Line = other_1635;
    let _e35: Line = other_1635;
    let _e38: Line = other_1635;
    let _e41: Line = other_1635;
    let _e53: Plane = self_1827;
    let _e57: Line = other_1635;
    let _e60: Line = other_1635;
    let _e63: Line = other_1635;
    let _e66: Line = other_1635;
    let _e78: Plane = self_1827;
    let _e82: Line = other_1635;
    let _e85: Line = other_1635;
    let _e88: Line = other_1635;
    let _e91: Line = other_1635;
    return Point((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn plane_line_inner_product(self_1828: Plane, other_1636: Line) -> Point {
    var self_1829: Plane;
    var other_1637: Line;

    self_1829 = self_1828;
    other_1637 = other_1636;
    let _e4: Plane = self_1829;
    let _e8: Line = other_1637;
    let _e19: Plane = self_1829;
    let _e23: Line = other_1637;
    let _e35: Plane = self_1829;
    let _e38: Line = other_1637;
    let _e41: Line = other_1637;
    let _e44: Line = other_1637;
    let _e47: Line = other_1637;
    return Point(((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn plane_line_inner_anti_product(self_1830: Plane, other_1638: Line) -> Plane {
    var self_1831: Plane;
    var other_1639: Line;

    self_1831 = self_1830;
    other_1639 = other_1638;
    let _e4: Plane = self_1831;
    let _e8: Line = other_1639;
    let _e11: Line = other_1639;
    let _e14: Line = other_1639;
    let _e17: Line = other_1639;
    let _e28: Plane = self_1831;
    let _e32: Line = other_1639;
    let _e35: Line = other_1639;
    let _e38: Line = other_1639;
    let _e41: Line = other_1639;
    let _e53: Plane = self_1831;
    let _e57: Line = other_1639;
    let _e60: Line = other_1639;
    let _e63: Line = other_1639;
    let _e66: Line = other_1639;
    return Plane(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g0_.x, _e60.g0_.z, _e63.g0_.y, _e66.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn plane_line_right_contraction(self_1832: Plane, other_1640: Line) -> Point {
    var self_1833: Plane;
    var other_1641: Line;

    self_1833 = self_1832;
    other_1641 = other_1640;
    let _e4: Plane = self_1833;
    let _e8: Line = other_1641;
    let _e19: Plane = self_1833;
    let _e23: Line = other_1641;
    let _e35: Plane = self_1833;
    let _e38: Line = other_1641;
    let _e41: Line = other_1641;
    let _e44: Line = other_1641;
    let _e47: Line = other_1641;
    return Point(((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn plane_line_left_anti_contraction(self_1834: Plane, other_1642: Line) -> Plane {
    var self_1835: Plane;
    var other_1643: Line;

    self_1835 = self_1834;
    other_1643 = other_1642;
    let _e4: Plane = self_1835;
    let _e8: Line = other_1643;
    let _e11: Line = other_1643;
    let _e14: Line = other_1643;
    let _e17: Line = other_1643;
    let _e28: Plane = self_1835;
    let _e32: Line = other_1643;
    let _e35: Line = other_1643;
    let _e38: Line = other_1643;
    let _e41: Line = other_1643;
    let _e53: Plane = self_1835;
    let _e57: Line = other_1643;
    let _e60: Line = other_1643;
    let _e63: Line = other_1643;
    let _e66: Line = other_1643;
    return Plane(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g0_.x, _e60.g0_.z, _e63.g0_.y, _e66.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn plane_plane_add(self_1836: Plane, other_1644: Plane) -> Plane {
    var self_1837: Plane;
    var other_1645: Plane;

    self_1837 = self_1836;
    other_1645 = other_1644;
    let _e4: Plane = self_1837;
    let _e6: Plane = other_1645;
    return Plane((_e4.g0_ + _e6.g0_));
}

fn plane_plane_sub(self_1838: Plane, other_1646: Plane) -> Plane {
    var self_1839: Plane;
    var other_1647: Plane;

    self_1839 = self_1838;
    other_1647 = other_1646;
    let _e4: Plane = self_1839;
    let _e6: Plane = other_1647;
    return Plane((_e4.g0_ - _e6.g0_));
}

fn plane_plane_mul(self_1840: Plane, other_1648: Plane) -> Plane {
    var self_1841: Plane;
    var other_1649: Plane;

    self_1841 = self_1840;
    other_1649 = other_1648;
    let _e4: Plane = self_1841;
    let _e6: Plane = other_1649;
    return Plane((_e4.g0_ * _e6.g0_));
}

fn plane_plane_div(self_1842: Plane, other_1650: Plane) -> Plane {
    var self_1843: Plane;
    var other_1651: Plane;

    self_1843 = self_1842;
    other_1651 = other_1650;
    let _e4: Plane = self_1843;
    let _e7: Plane = self_1843;
    let _e10: Plane = self_1843;
    let _e13: Plane = self_1843;
    let _e23: Plane = other_1651;
    let _e26: Plane = other_1651;
    let _e29: Plane = other_1651;
    let _e32: Plane = other_1651;
    return Plane((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn plane_plane_geometric_product(self_1844: Plane, other_1652: Plane) -> MultiVector {
    var self_1845: Plane;
    var other_1653: Plane;

    self_1845 = self_1844;
    other_1653 = other_1652;
    let _e4: Plane = self_1845;
    let _e7: Plane = self_1845;
    let _e11: Plane = other_1653;
    let _e14: Plane = other_1653;
    let _e27: Plane = self_1845;
    let _e31: Plane = other_1653;
    let _e34: Plane = other_1653;
    let _e37: Plane = other_1653;
    let _e43: Plane = self_1845;
    let _e46: Plane = self_1845;
    let _e49: Plane = self_1845;
    let _e53: Plane = other_1653;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), vec4(0.0), ((vec3(0.0) - (vec3(_e27.g0_.w) * vec3<f32>(_e31.g0_.x, _e34.g0_.y, _e37.g0_.z))) + (vec3<f32>(_e43.g0_.x, _e46.g0_.y, _e49.g0_.z) * vec3(_e53.g0_.w))), vec3(0.0), vec4(0.0));
}

fn plane_plane_geometric_anti_product(self_1846: Plane, other_1654: Plane) -> Motor {
    var self_1847: Plane;
    var other_1655: Plane;

    self_1847 = self_1846;
    other_1655 = other_1654;
    let _e4: Plane = self_1847;
    let _e8: Plane = other_1655;
    let _e18: Plane = self_1847;
    let _e22: Plane = other_1655;
    let _e33: Plane = self_1847;
    let _e37: Plane = other_1655;
    let _e50: Plane = self_1847;
    let _e54: Plane = other_1655;
    let _e57: Plane = other_1655;
    let _e60: Plane = other_1655;
    let _e66: Plane = self_1847;
    let _e69: Plane = self_1847;
    let _e72: Plane = self_1847;
    let _e76: Plane = other_1655;
    return Motor(((((vec4(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-1.0, 0.0, 1.0, 1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyz) * vec4<f32>(1.0, -1.0, 0.0, 1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), ((vec3(0.0) - (vec3(_e50.g0_.w) * vec3<f32>(_e54.g0_.x, _e57.g0_.y, _e60.g0_.z))) + (vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z) * vec3(_e76.g0_.w))));
}

fn plane_plane_regressive_product(self_1848: Plane, other_1656: Plane) -> Line {
    var self_1849: Plane;
    var other_1657: Plane;

    self_1849 = self_1848;
    other_1657 = other_1656;
    let _e4: Plane = self_1849;
    let _e8: Plane = other_1657;
    let _e11: Plane = other_1657;
    let _e14: Plane = other_1657;
    let _e24: Plane = self_1849;
    let _e28: Plane = other_1657;
    let _e31: Plane = other_1657;
    let _e34: Plane = other_1657;
    let _e45: Plane = self_1849;
    let _e49: Plane = other_1657;
    let _e52: Plane = other_1657;
    let _e55: Plane = other_1657;
    let _e68: Plane = self_1849;
    let _e72: Plane = other_1657;
    let _e75: Plane = other_1657;
    let _e78: Plane = other_1657;
    let _e84: Plane = self_1849;
    let _e87: Plane = self_1849;
    let _e90: Plane = self_1849;
    let _e94: Plane = other_1657;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z))) + (vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3(_e94.g0_.w))));
}

fn plane_plane_anti_wedge(self_1850: Plane, other_1658: Plane) -> Line {
    var self_1851: Plane;
    var other_1659: Plane;

    self_1851 = self_1850;
    other_1659 = other_1658;
    let _e4: Plane = self_1851;
    let _e8: Plane = other_1659;
    let _e11: Plane = other_1659;
    let _e14: Plane = other_1659;
    let _e24: Plane = self_1851;
    let _e28: Plane = other_1659;
    let _e31: Plane = other_1659;
    let _e34: Plane = other_1659;
    let _e45: Plane = self_1851;
    let _e49: Plane = other_1659;
    let _e52: Plane = other_1659;
    let _e55: Plane = other_1659;
    let _e68: Plane = self_1851;
    let _e72: Plane = other_1659;
    let _e75: Plane = other_1659;
    let _e78: Plane = other_1659;
    let _e84: Plane = self_1851;
    let _e87: Plane = self_1851;
    let _e90: Plane = self_1851;
    let _e94: Plane = other_1659;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z))) + (vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3(_e94.g0_.w))));
}

fn plane_plane_meet(self_1852: Plane, other_1660: Plane) -> Line {
    var self_1853: Plane;
    var other_1661: Plane;

    self_1853 = self_1852;
    other_1661 = other_1660;
    let _e4: Plane = self_1853;
    let _e8: Plane = other_1661;
    let _e11: Plane = other_1661;
    let _e14: Plane = other_1661;
    let _e24: Plane = self_1853;
    let _e28: Plane = other_1661;
    let _e31: Plane = other_1661;
    let _e34: Plane = other_1661;
    let _e45: Plane = self_1853;
    let _e49: Plane = other_1661;
    let _e52: Plane = other_1661;
    let _e55: Plane = other_1661;
    let _e68: Plane = self_1853;
    let _e72: Plane = other_1661;
    let _e75: Plane = other_1661;
    let _e78: Plane = other_1661;
    let _e84: Plane = self_1853;
    let _e87: Plane = self_1853;
    let _e90: Plane = self_1853;
    let _e94: Plane = other_1661;
    return Line(((((vec3(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e24.g0_.z) * vec3<f32>(_e28.g0_.y, _e31.g0_.x, _e34.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e45.g0_.x) * vec3<f32>(_e49.g0_.x, _e52.g0_.z, _e55.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z))) + (vec3<f32>(_e84.g0_.x, _e87.g0_.y, _e90.g0_.z) * vec3(_e94.g0_.w))));
}

fn plane_plane_inner_product(self_1854: Plane, other_1662: Plane) -> Scalar {
    var self_1855: Plane;
    var other_1663: Plane;

    self_1855 = self_1854;
    other_1663 = other_1662;
    let _e5: Plane = self_1855;
    let _e8: Plane = other_1663;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_inner_anti_product(self_1856: Plane, other_1664: Plane) -> AntiScalar {
    var self_1857: Plane;
    var other_1665: Plane;

    self_1857 = self_1856;
    other_1665 = other_1664;
    let _e4: Plane = self_1857;
    let _e7: Plane = other_1665;
    let _e11: Plane = self_1857;
    let _e14: Plane = other_1665;
    let _e19: Plane = self_1857;
    let _e22: Plane = other_1665;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_left_contraction(self_1858: Plane, other_1666: Plane) -> Scalar {
    var self_1859: Plane;
    var other_1667: Plane;

    self_1859 = self_1858;
    other_1667 = other_1666;
    let _e5: Plane = self_1859;
    let _e8: Plane = other_1667;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_right_contraction(self_1860: Plane, other_1668: Plane) -> Scalar {
    var self_1861: Plane;
    var other_1669: Plane;

    self_1861 = self_1860;
    other_1669 = other_1668;
    let _e5: Plane = self_1861;
    let _e8: Plane = other_1669;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_left_anti_contraction(self_1862: Plane, other_1670: Plane) -> AntiScalar {
    var self_1863: Plane;
    var other_1671: Plane;

    self_1863 = self_1862;
    other_1671 = other_1670;
    let _e4: Plane = self_1863;
    let _e7: Plane = other_1671;
    let _e11: Plane = self_1863;
    let _e14: Plane = other_1671;
    let _e19: Plane = self_1863;
    let _e22: Plane = other_1671;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_right_anti_contraction(self_1864: Plane, other_1672: Plane) -> AntiScalar {
    var self_1865: Plane;
    var other_1673: Plane;

    self_1865 = self_1864;
    other_1673 = other_1672;
    let _e4: Plane = self_1865;
    let _e7: Plane = other_1673;
    let _e11: Plane = self_1865;
    let _e14: Plane = other_1673;
    let _e19: Plane = self_1865;
    let _e22: Plane = other_1673;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_scalar_product(self_1866: Plane, other_1674: Plane) -> Scalar {
    var self_1867: Plane;
    var other_1675: Plane;

    self_1867 = self_1866;
    other_1675 = other_1674;
    let _e5: Plane = self_1867;
    let _e8: Plane = other_1675;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_dot(self_1868: Plane, other_1676: Plane) -> Scalar {
    var self_1869: Plane;
    var other_1677: Plane;

    self_1869 = self_1868;
    other_1677 = other_1676;
    let _e5: Plane = self_1869;
    let _e8: Plane = other_1677;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_anti_scalar_product(self_1870: Plane, other_1678: Plane) -> AntiScalar {
    var self_1871: Plane;
    var other_1679: Plane;

    self_1871 = self_1870;
    other_1679 = other_1678;
    let _e4: Plane = self_1871;
    let _e7: Plane = other_1679;
    let _e11: Plane = self_1871;
    let _e14: Plane = other_1679;
    let _e19: Plane = self_1871;
    let _e22: Plane = other_1679;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_anti_dot(self_1872: Plane, other_1680: Plane) -> AntiScalar {
    var self_1873: Plane;
    var other_1681: Plane;

    self_1873 = self_1872;
    other_1681 = other_1680;
    let _e4: Plane = self_1873;
    let _e7: Plane = other_1681;
    let _e11: Plane = self_1873;
    let _e14: Plane = other_1681;
    let _e19: Plane = self_1873;
    let _e22: Plane = other_1681;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_motor_geometric_product(self_1874: Plane, other_1682: Motor) -> Flector {
    var self_1875: Plane;
    var other_1683: Motor;

    self_1875 = self_1874;
    other_1683 = other_1682;
    let _e4: Plane = self_1875;
    let _e8: Motor = other_1683;
    let _e19: Plane = self_1875;
    let _e23: Motor = other_1683;
    let _e35: Plane = self_1875;
    let _e39: Motor = other_1683;
    let _e42: Motor = other_1683;
    let _e45: Motor = other_1683;
    let _e48: Motor = other_1683;
    let _e54: Plane = self_1875;
    let _e58: Motor = other_1683;
    let _e70: Plane = self_1875;
    let _e74: Motor = other_1683;
    let _e77: Motor = other_1683;
    let _e80: Motor = other_1683;
    let _e83: Motor = other_1683;
    let _e94: Plane = self_1875;
    let _e98: Motor = other_1683;
    let _e101: Motor = other_1683;
    let _e104: Motor = other_1683;
    let _e107: Motor = other_1683;
    let _e119: Plane = self_1875;
    let _e123: Motor = other_1683;
    let _e134: Plane = self_1875;
    let _e138: Motor = other_1683;
    let _e141: Motor = other_1683;
    let _e144: Motor = other_1683;
    let _e147: Motor = other_1683;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w))) + ((vec4(_e54.g0_.x) * vec4(_e58.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec4(_e70.g0_.y) * vec4<f32>(_e74.g1_.z, _e77.g1_.z, _e80.g1_.x, _e83.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e94.g0_.z) * vec4<f32>(_e98.g1_.y, _e101.g1_.x, _e104.g1_.y, _e107.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e119.g0_.w) * _e123.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e134.g0_.x) * vec4<f32>(_e138.g1_.x, _e141.g1_.z, _e144.g1_.y, _e147.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn plane_motor_geometric_anti_product(self_1876: Plane, other_1684: Motor) -> Flector {
    var self_1877: Plane;
    var other_1685: Motor;

    self_1877 = self_1876;
    other_1685 = other_1684;
    let _e4: Plane = self_1877;
    let _e8: Motor = other_1685;
    let _e11: Motor = other_1685;
    let _e14: Motor = other_1685;
    let _e17: Motor = other_1685;
    let _e28: Plane = self_1877;
    let _e32: Motor = other_1685;
    let _e35: Motor = other_1685;
    let _e38: Motor = other_1685;
    let _e41: Motor = other_1685;
    let _e53: Plane = self_1877;
    let _e57: Motor = other_1685;
    let _e68: Plane = self_1877;
    let _e72: Motor = other_1685;
    let _e75: Motor = other_1685;
    let _e78: Motor = other_1685;
    let _e81: Motor = other_1685;
    let _e93: Plane = self_1877;
    let _e97: Motor = other_1685;
    let _e100: Motor = other_1685;
    let _e103: Motor = other_1685;
    let _e106: Motor = other_1685;
    let _e117: Plane = self_1877;
    let _e121: Motor = other_1685;
    let _e124: Motor = other_1685;
    let _e127: Motor = other_1685;
    let _e130: Motor = other_1685;
    let _e142: Plane = self_1877;
    let _e146: Motor = other_1685;
    let _e149: Motor = other_1685;
    let _e152: Motor = other_1685;
    let _e155: Motor = other_1685;
    let _e167: Plane = self_1877;
    let _e170: Motor = other_1685;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * _e57.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e68.g0_.x) * vec4<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y, _e81.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((vec4(_e93.g0_.x) * vec4<f32>(_e97.g0_.w, _e100.g0_.z, _e103.g0_.y, _e106.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0)) + ((vec4(_e117.g0_.y) * vec4<f32>(_e121.g0_.z, _e124.g0_.w, _e127.g0_.x, _e130.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e142.g0_.z) * vec4<f32>(_e146.g0_.y, _e149.g0_.x, _e152.g0_.w, _e155.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((_e167.g0_.xxxw * _e170.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_motor_regressive_product(self_1878: Plane, other_1686: Motor) -> Flector {
    var self_1879: Plane;
    var other_1687: Motor;

    self_1879 = self_1878;
    other_1687 = other_1686;
    let _e4: Plane = self_1879;
    let _e8: Motor = other_1687;
    let _e11: Motor = other_1687;
    let _e14: Motor = other_1687;
    let _e17: Motor = other_1687;
    let _e28: Plane = self_1879;
    let _e32: Motor = other_1687;
    let _e35: Motor = other_1687;
    let _e38: Motor = other_1687;
    let _e41: Motor = other_1687;
    let _e53: Plane = self_1879;
    let _e57: Motor = other_1687;
    let _e68: Plane = self_1879;
    let _e72: Motor = other_1687;
    let _e75: Motor = other_1687;
    let _e78: Motor = other_1687;
    let _e81: Motor = other_1687;
    let _e93: Plane = self_1879;
    let _e95: Motor = other_1687;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * _e57.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e68.g0_.x) * vec4<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y, _e81.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (_e93.g0_ * vec4(_e95.g0_.w)));
}

fn plane_motor_anti_wedge(self_1880: Plane, other_1688: Motor) -> Flector {
    var self_1881: Plane;
    var other_1689: Motor;

    self_1881 = self_1880;
    other_1689 = other_1688;
    let _e4: Plane = self_1881;
    let _e8: Motor = other_1689;
    let _e11: Motor = other_1689;
    let _e14: Motor = other_1689;
    let _e17: Motor = other_1689;
    let _e28: Plane = self_1881;
    let _e32: Motor = other_1689;
    let _e35: Motor = other_1689;
    let _e38: Motor = other_1689;
    let _e41: Motor = other_1689;
    let _e53: Plane = self_1881;
    let _e57: Motor = other_1689;
    let _e68: Plane = self_1881;
    let _e72: Motor = other_1689;
    let _e75: Motor = other_1689;
    let _e78: Motor = other_1689;
    let _e81: Motor = other_1689;
    let _e93: Plane = self_1881;
    let _e95: Motor = other_1689;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * _e57.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e68.g0_.x) * vec4<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y, _e81.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (_e93.g0_ * vec4(_e95.g0_.w)));
}

fn plane_motor_meet(self_1882: Plane, other_1690: Motor) -> Flector {
    var self_1883: Plane;
    var other_1691: Motor;

    self_1883 = self_1882;
    other_1691 = other_1690;
    let _e4: Plane = self_1883;
    let _e8: Motor = other_1691;
    let _e11: Motor = other_1691;
    let _e14: Motor = other_1691;
    let _e17: Motor = other_1691;
    let _e28: Plane = self_1883;
    let _e32: Motor = other_1691;
    let _e35: Motor = other_1691;
    let _e38: Motor = other_1691;
    let _e41: Motor = other_1691;
    let _e53: Plane = self_1883;
    let _e57: Motor = other_1691;
    let _e68: Plane = self_1883;
    let _e72: Motor = other_1691;
    let _e75: Motor = other_1691;
    let _e78: Motor = other_1691;
    let _e81: Motor = other_1691;
    let _e93: Plane = self_1883;
    let _e95: Motor = other_1691;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * _e57.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e68.g0_.x) * vec4<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y, _e81.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (_e93.g0_ * vec4(_e95.g0_.w)));
}

fn plane_motor_inner_product(self_1884: Plane, other_1692: Motor) -> Point {
    var self_1885: Plane;
    var other_1693: Motor;

    self_1885 = self_1884;
    other_1693 = other_1692;
    let _e4: Plane = self_1885;
    let _e8: Motor = other_1693;
    let _e19: Plane = self_1885;
    let _e23: Motor = other_1693;
    let _e35: Plane = self_1885;
    let _e39: Motor = other_1693;
    let _e42: Motor = other_1693;
    let _e45: Motor = other_1693;
    let _e48: Motor = other_1693;
    let _e54: Plane = self_1885;
    let _e58: Motor = other_1693;
    return Point((((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w))) + ((vec4(_e54.g0_.x) * vec4(_e58.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn plane_motor_inner_anti_product(self_1886: Plane, other_1694: Motor) -> Plane {
    var self_1887: Plane;
    var other_1695: Motor;

    self_1887 = self_1886;
    other_1695 = other_1694;
    let _e4: Plane = self_1887;
    let _e8: Motor = other_1695;
    let _e11: Motor = other_1695;
    let _e14: Motor = other_1695;
    let _e17: Motor = other_1695;
    let _e28: Plane = self_1887;
    let _e32: Motor = other_1695;
    let _e35: Motor = other_1695;
    let _e38: Motor = other_1695;
    let _e41: Motor = other_1695;
    let _e53: Plane = self_1887;
    let _e57: Motor = other_1695;
    let _e60: Motor = other_1695;
    let _e63: Motor = other_1695;
    let _e66: Motor = other_1695;
    let _e78: Plane = self_1887;
    let _e81: Motor = other_1695;
    return Plane((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g0_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g0_.w, _e66.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((_e78.g0_.xxxw * _e81.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_motor_left_contraction(self_1888: Plane, other_1696: Motor) -> Point {
    var self_1889: Plane;
    var other_1697: Motor;

    self_1889 = self_1888;
    other_1697 = other_1696;
    let _e4: Plane = self_1889;
    let _e7: Motor = other_1697;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_motor_right_contraction(self_1890: Plane, other_1698: Motor) -> Point {
    var self_1891: Plane;
    var other_1699: Motor;

    self_1891 = self_1890;
    other_1699 = other_1698;
    let _e4: Plane = self_1891;
    let _e8: Motor = other_1699;
    let _e19: Plane = self_1891;
    let _e23: Motor = other_1699;
    let _e35: Plane = self_1891;
    let _e38: Motor = other_1699;
    let _e41: Motor = other_1699;
    let _e44: Motor = other_1699;
    let _e47: Motor = other_1699;
    return Point(((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn plane_motor_left_anti_contraction(self_1892: Plane, other_1700: Motor) -> Plane {
    var self_1893: Plane;
    var other_1701: Motor;

    self_1893 = self_1892;
    other_1701 = other_1700;
    let _e4: Plane = self_1893;
    let _e8: Motor = other_1701;
    let _e11: Motor = other_1701;
    let _e14: Motor = other_1701;
    let _e17: Motor = other_1701;
    let _e28: Plane = self_1893;
    let _e32: Motor = other_1701;
    let _e35: Motor = other_1701;
    let _e38: Motor = other_1701;
    let _e41: Motor = other_1701;
    let _e53: Plane = self_1893;
    let _e57: Motor = other_1701;
    let _e60: Motor = other_1701;
    let _e63: Motor = other_1701;
    let _e66: Motor = other_1701;
    return Plane(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g0_.x, _e60.g0_.z, _e63.g0_.y, _e66.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn plane_motor_right_anti_contraction(self_1894: Plane, other_1702: Motor) -> Plane {
    var self_1895: Plane;
    var other_1703: Motor;

    self_1895 = self_1894;
    other_1703 = other_1702;
    let _e4: Plane = self_1895;
    let _e6: Motor = other_1703;
    return Plane((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn plane_rotor_geometric_product(self_1896: Plane, other_1704: Rotor) -> Flector {
    var self_1897: Plane;
    var other_1705: Rotor;

    self_1897 = self_1896;
    other_1705 = other_1704;
    let _e4: Plane = self_1897;
    let _e7: Rotor = other_1705;
    let _e17: Plane = self_1897;
    let _e20: Rotor = other_1705;
    return Flector(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), ((_e17.g0_.wwwx * _e20.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn plane_rotor_geometric_anti_product(self_1898: Plane, other_1706: Rotor) -> Flector {
    var self_1899: Plane;
    var other_1707: Rotor;

    self_1899 = self_1898;
    other_1707 = other_1706;
    let _e4: Plane = self_1899;
    let _e8: Rotor = other_1707;
    let _e19: Plane = self_1899;
    let _e23: Rotor = other_1707;
    let _e35: Plane = self_1899;
    let _e38: Rotor = other_1707;
    let _e49: Plane = self_1899;
    let _e53: Rotor = other_1707;
    let _e63: Plane = self_1899;
    let _e67: Rotor = other_1707;
    let _e78: Plane = self_1899;
    let _e81: Rotor = other_1707;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), ((((vec4(_e49.g0_.y) * _e53.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e63.g0_.z) * _e67.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((_e78.g0_.xxxw * _e81.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 1.0))));
}

fn plane_rotor_regressive_product(self_1900: Plane, other_1708: Rotor) -> Flector {
    var self_1901: Plane;
    var other_1709: Rotor;

    self_1901 = self_1900;
    other_1709 = other_1708;
    let _e4: Plane = self_1901;
    let _e8: Rotor = other_1709;
    let _e19: Plane = self_1901;
    let _e23: Rotor = other_1709;
    let _e35: Plane = self_1901;
    let _e38: Rotor = other_1709;
    let _e49: Plane = self_1901;
    let _e51: Rotor = other_1709;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (_e49.g0_ * vec4(_e51.g0_.w)));
}

fn plane_rotor_anti_wedge(self_1902: Plane, other_1710: Rotor) -> Flector {
    var self_1903: Plane;
    var other_1711: Rotor;

    self_1903 = self_1902;
    other_1711 = other_1710;
    let _e4: Plane = self_1903;
    let _e8: Rotor = other_1711;
    let _e19: Plane = self_1903;
    let _e23: Rotor = other_1711;
    let _e35: Plane = self_1903;
    let _e38: Rotor = other_1711;
    let _e49: Plane = self_1903;
    let _e51: Rotor = other_1711;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (_e49.g0_ * vec4(_e51.g0_.w)));
}

fn plane_rotor_meet(self_1904: Plane, other_1712: Rotor) -> Flector {
    var self_1905: Plane;
    var other_1713: Rotor;

    self_1905 = self_1904;
    other_1713 = other_1712;
    let _e4: Plane = self_1905;
    let _e8: Rotor = other_1713;
    let _e19: Plane = self_1905;
    let _e23: Rotor = other_1713;
    let _e35: Plane = self_1905;
    let _e38: Rotor = other_1713;
    let _e49: Plane = self_1905;
    let _e51: Rotor = other_1713;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (_e49.g0_ * vec4(_e51.g0_.w)));
}

fn plane_rotor_inner_product(self_1906: Plane, other_1714: Rotor) -> Point {
    var self_1907: Plane;
    var other_1715: Rotor;

    self_1907 = self_1906;
    other_1715 = other_1714;
    let _e4: Plane = self_1907;
    let _e7: Rotor = other_1715;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_rotor_inner_anti_product(self_1908: Plane, other_1716: Rotor) -> Plane {
    var self_1909: Plane;
    var other_1717: Rotor;

    self_1909 = self_1908;
    other_1717 = other_1716;
    let _e4: Plane = self_1909;
    let _e8: Rotor = other_1717;
    let _e18: Plane = self_1909;
    let _e22: Rotor = other_1717;
    let _e33: Plane = self_1909;
    let _e36: Rotor = other_1717;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((_e33.g0_.xxxw * _e36.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 1.0))));
}

fn plane_rotor_left_contraction(self_1910: Plane, other_1718: Rotor) -> Point {
    var self_1911: Plane;
    var other_1719: Rotor;

    self_1911 = self_1910;
    other_1719 = other_1718;
    let _e4: Plane = self_1911;
    let _e7: Rotor = other_1719;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_rotor_left_anti_contraction(self_1912: Plane, other_1720: Rotor) -> Plane {
    var self_1913: Plane;
    var other_1721: Rotor;

    self_1913 = self_1912;
    other_1721 = other_1720;
    let _e4: Plane = self_1913;
    let _e8: Rotor = other_1721;
    let _e18: Plane = self_1913;
    let _e22: Rotor = other_1721;
    let _e33: Plane = self_1913;
    let _e37: Rotor = other_1721;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn plane_rotor_right_anti_contraction(self_1914: Plane, other_1722: Rotor) -> Plane {
    var self_1915: Plane;
    var other_1723: Rotor;

    self_1915 = self_1914;
    other_1723 = other_1722;
    let _e4: Plane = self_1915;
    let _e6: Rotor = other_1723;
    return Plane((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn plane_translator_geometric_product(self_1916: Plane, other_1724: Translator) -> Flector {
    var self_1917: Plane;
    var other_1725: Translator;

    self_1917 = self_1916;
    other_1725 = other_1724;
    let _e4: Plane = self_1917;
    let _e8: Translator = other_1725;
    let _e19: Plane = self_1917;
    let _e23: Translator = other_1725;
    let _e35: Plane = self_1917;
    let _e39: Translator = other_1725;
    let _e43: Plane = self_1917;
    let _e47: Translator = other_1725;
    let _e59: Plane = self_1917;
    let _e63: Translator = other_1725;
    let _e73: Plane = self_1917;
    let _e77: Translator = other_1725;
    let _e88: Plane = self_1917;
    let _e92: Translator = other_1725;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec4(_e59.g0_.y) * _e63.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e73.g0_.z) * _e77.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e88.g0_.x) * _e92.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn plane_translator_geometric_anti_product(self_1918: Plane, other_1726: Translator) -> Flector {
    var self_1919: Plane;
    var other_1727: Translator;

    self_1919 = self_1918;
    other_1727 = other_1726;
    let _e4: Plane = self_1919;
    let _e8: Translator = other_1727;
    let _e18: Plane = self_1919;
    let _e22: Translator = other_1727;
    let _e33: Plane = self_1919;
    let _e37: Translator = other_1727;
    let _e48: Plane = self_1919;
    let _e52: Translator = other_1727;
    let _e62: Plane = self_1919;
    let _e66: Translator = other_1727;
    let _e77: Plane = self_1919;
    let _e81: Translator = other_1727;
    let _e93: Plane = self_1919;
    let _e97: Translator = other_1727;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (((((vec4(_e48.g0_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e62.g0_.z) * _e66.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e77.g0_.w) * vec4(_e81.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e93.g0_.x) * _e97.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn plane_translator_regressive_product(self_1920: Plane, other_1728: Translator) -> Flector {
    var self_1921: Plane;
    var other_1729: Translator;

    self_1921 = self_1920;
    other_1729 = other_1728;
    let _e4: Plane = self_1921;
    let _e8: Translator = other_1729;
    let _e18: Plane = self_1921;
    let _e22: Translator = other_1729;
    let _e33: Plane = self_1921;
    let _e37: Translator = other_1729;
    let _e48: Plane = self_1921;
    let _e50: Translator = other_1729;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (_e48.g0_ * vec4(_e50.g0_.w)));
}

fn plane_translator_anti_wedge(self_1922: Plane, other_1730: Translator) -> Flector {
    var self_1923: Plane;
    var other_1731: Translator;

    self_1923 = self_1922;
    other_1731 = other_1730;
    let _e4: Plane = self_1923;
    let _e8: Translator = other_1731;
    let _e18: Plane = self_1923;
    let _e22: Translator = other_1731;
    let _e33: Plane = self_1923;
    let _e37: Translator = other_1731;
    let _e48: Plane = self_1923;
    let _e50: Translator = other_1731;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (_e48.g0_ * vec4(_e50.g0_.w)));
}

fn plane_translator_meet(self_1924: Plane, other_1732: Translator) -> Flector {
    var self_1925: Plane;
    var other_1733: Translator;

    self_1925 = self_1924;
    other_1733 = other_1732;
    let _e4: Plane = self_1925;
    let _e8: Translator = other_1733;
    let _e18: Plane = self_1925;
    let _e22: Translator = other_1733;
    let _e33: Plane = self_1925;
    let _e37: Translator = other_1733;
    let _e48: Plane = self_1925;
    let _e50: Translator = other_1733;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (_e48.g0_ * vec4(_e50.g0_.w)));
}

fn plane_translator_inner_product(self_1926: Plane, other_1734: Translator) -> Point {
    var self_1927: Plane;
    var other_1735: Translator;

    self_1927 = self_1926;
    other_1735 = other_1734;
    let _e4: Plane = self_1927;
    let _e8: Translator = other_1735;
    let _e19: Plane = self_1927;
    let _e23: Translator = other_1735;
    let _e35: Plane = self_1927;
    let _e39: Translator = other_1735;
    let _e43: Plane = self_1927;
    let _e47: Translator = other_1735;
    return Point((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn plane_translator_inner_anti_product(self_1928: Plane, other_1736: Translator) -> Plane {
    var self_1929: Plane;
    var other_1737: Translator;

    self_1929 = self_1928;
    other_1737 = other_1736;
    let _e4: Plane = self_1929;
    let _e8: Translator = other_1737;
    let _e18: Plane = self_1929;
    let _e22: Translator = other_1737;
    let _e33: Plane = self_1929;
    let _e37: Translator = other_1737;
    let _e49: Plane = self_1929;
    let _e53: Translator = other_1737;
    return Plane((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn plane_translator_left_contraction(self_1930: Plane, other_1738: Translator) -> Point {
    var self_1931: Plane;
    var other_1739: Translator;

    self_1931 = self_1930;
    other_1739 = other_1738;
    let _e4: Plane = self_1931;
    let _e7: Translator = other_1739;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_translator_right_contraction(self_1932: Plane, other_1740: Translator) -> Point {
    var self_1933: Plane;
    var other_1741: Translator;

    self_1933 = self_1932;
    other_1741 = other_1740;
    let _e4: Plane = self_1933;
    let _e8: Translator = other_1741;
    let _e19: Plane = self_1933;
    let _e23: Translator = other_1741;
    let _e35: Plane = self_1933;
    let _e38: Translator = other_1741;
    return Point(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn plane_translator_left_anti_contraction(self_1934: Plane, other_1742: Translator) -> Plane {
    var self_1935: Plane;
    var other_1743: Translator;

    self_1935 = self_1934;
    other_1743 = other_1742;
    let _e4: Plane = self_1935;
    let _e8: Translator = other_1743;
    let _e19: Plane = self_1935;
    let _e23: Translator = other_1743;
    let _e35: Plane = self_1935;
    let _e39: Translator = other_1743;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_translator_right_anti_contraction(self_1936: Plane, other_1744: Translator) -> Plane {
    var self_1937: Plane;
    var other_1745: Translator;

    self_1937 = self_1936;
    other_1745 = other_1744;
    let _e4: Plane = self_1937;
    let _e6: Translator = other_1745;
    return Plane((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn plane_flector_add(self_1938: Plane, other_1746: Flector) -> Flector {
    var self_1939: Plane;
    var other_1747: Flector;

    self_1939 = self_1938;
    other_1747 = other_1746;
    let _e4: Flector = other_1747;
    let _e6: Plane = self_1939;
    let _e8: Flector = other_1747;
    return Flector(_e4.g0_, (_e6.g0_ + _e8.g1_));
}

fn plane_flector_sub(self_1940: Plane, other_1748: Flector) -> Flector {
    var self_1941: Plane;
    var other_1749: Flector;

    self_1941 = self_1940;
    other_1749 = other_1748;
    let _e6: Flector = other_1749;
    let _e9: Plane = self_1941;
    let _e11: Flector = other_1749;
    return Flector((vec4(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_));
}

fn plane_flector_geometric_product(self_1942: Plane, other_1750: Flector) -> MultiVector {
    var self_1943: Plane;
    var other_1751: Flector;

    self_1943 = self_1942;
    other_1751 = other_1750;
    let _e4: Plane = self_1943;
    let _e8: Flector = other_1751;
    let _e17: Plane = self_1943;
    let _e21: Flector = other_1751;
    let _e31: Plane = self_1943;
    let _e35: Flector = other_1751;
    let _e38: Flector = other_1751;
    let _e44: Plane = self_1943;
    let _e48: Flector = other_1751;
    let _e60: Plane = self_1943;
    let _e64: Flector = other_1751;
    let _e67: Flector = other_1751;
    let _e70: Flector = other_1751;
    let _e80: Plane = self_1943;
    let _e84: Flector = other_1751;
    let _e87: Flector = other_1751;
    let _e90: Flector = other_1751;
    let _e101: Plane = self_1943;
    let _e105: Flector = other_1751;
    let _e108: Flector = other_1751;
    let _e111: Flector = other_1751;
    let _e122: Plane = self_1943;
    let _e126: Flector = other_1751;
    let _e129: Flector = other_1751;
    let _e132: Flector = other_1751;
    let _e140: Plane = self_1943;
    let _e144: Flector = other_1751;
    let _e147: Flector = other_1751;
    let _e150: Flector = other_1751;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g0_.w) * vec2<f32>(_e35.g1_.w, _e38.g0_.w))) + ((vec2(_e44.g0_.x) * vec2(_e48.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (((((vec3(_e60.g0_.x) * vec3<f32>(_e64.g1_.w, _e67.g0_.z, _e70.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e80.g0_.y) * vec3<f32>(_e84.g0_.z, _e87.g1_.w, _e90.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e101.g0_.z) * vec3<f32>(_e105.g0_.y, _e108.g0_.x, _e111.g1_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e122.g0_.w) * vec3<f32>(_e126.g1_.x, _e129.g1_.y, _e132.g1_.z))), (vec3(0.0) - (vec3(_e140.g0_.w) * vec3<f32>(_e144.g0_.x, _e147.g0_.y, _e150.g0_.z))), vec4(0.0));
}

fn plane_flector_geometric_anti_product(self_1944: Plane, other_1752: Flector) -> MultiVector {
    var self_1945: Plane;
    var other_1753: Flector;

    self_1945 = self_1944;
    other_1753 = other_1752;
    let _e4: Plane = self_1945;
    let _e8: Flector = other_1753;
    let _e11: Flector = other_1753;
    let _e20: Plane = self_1945;
    let _e24: Flector = other_1753;
    let _e27: Flector = other_1753;
    let _e37: Plane = self_1945;
    let _e41: Flector = other_1753;
    let _e44: Flector = other_1753;
    let _e54: Plane = self_1945;
    let _e57: Plane = self_1945;
    let _e61: Flector = other_1753;
    let _e64: Flector = other_1753;
    let _e76: Plane = self_1945;
    let _e80: Flector = other_1753;
    let _e83: Flector = other_1753;
    let _e86: Flector = other_1753;
    let _e96: Plane = self_1945;
    let _e100: Flector = other_1753;
    let _e103: Flector = other_1753;
    let _e106: Flector = other_1753;
    let _e117: Plane = self_1945;
    let _e121: Flector = other_1753;
    let _e124: Flector = other_1753;
    let _e127: Flector = other_1753;
    let _e138: Plane = self_1945;
    let _e142: Flector = other_1753;
    let _e145: Flector = other_1753;
    let _e148: Flector = other_1753;
    let _e158: Plane = self_1945;
    let _e162: Flector = other_1753;
    let _e165: Flector = other_1753;
    let _e168: Flector = other_1753;
    let _e179: Plane = self_1945;
    let _e183: Flector = other_1753;
    let _e186: Flector = other_1753;
    let _e189: Flector = other_1753;
    let _e200: Plane = self_1945;
    let _e204: Flector = other_1753;
    let _e207: Flector = other_1753;
    let _e210: Flector = other_1753;
    return MultiVector((((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g1_.x)) * vec2<f32>(-1.0, 1.0)) + ((vec2(_e20.g0_.y) * vec2<f32>(_e24.g0_.y, _e27.g1_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e37.g0_.z) * vec2<f32>(_e41.g0_.z, _e44.g1_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2<f32>(_e54.g0_.w, _e57.g0_.x) * vec2<f32>(_e61.g0_.w, _e64.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e76.g0_.x) * vec3<f32>(_e80.g0_.w, _e83.g1_.z, _e86.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e96.g0_.y) * vec3<f32>(_e100.g1_.z, _e103.g0_.w, _e106.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e117.g0_.z) * vec3<f32>(_e121.g1_.y, _e124.g1_.x, _e127.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))), (((((vec3(_e138.g0_.x) * vec3<f32>(_e142.g1_.w, _e145.g0_.z, _e148.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e158.g0_.y) * vec3<f32>(_e162.g0_.z, _e165.g1_.w, _e168.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e179.g0_.z) * vec3<f32>(_e183.g0_.y, _e186.g0_.x, _e189.g1_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e200.g0_.w) * vec3<f32>(_e204.g1_.x, _e207.g1_.y, _e210.g1_.z))), vec4(0.0));
}

fn plane_flector_regressive_product(self_1946: Plane, other_1754: Flector) -> MultiVector {
    var self_1947: Plane;
    var other_1755: Flector;

    self_1947 = self_1946;
    other_1755 = other_1754;
    let _e4: Plane = self_1947;
    let _e8: Flector = other_1755;
    let _e17: Plane = self_1947;
    let _e21: Flector = other_1755;
    let _e31: Plane = self_1947;
    let _e35: Flector = other_1755;
    let _e45: Plane = self_1947;
    let _e49: Flector = other_1755;
    let _e61: Plane = self_1947;
    let _e65: Flector = other_1755;
    let _e68: Flector = other_1755;
    let _e71: Flector = other_1755;
    let _e81: Plane = self_1947;
    let _e85: Flector = other_1755;
    let _e88: Flector = other_1755;
    let _e91: Flector = other_1755;
    let _e102: Plane = self_1947;
    let _e106: Flector = other_1755;
    let _e109: Flector = other_1755;
    let _e112: Flector = other_1755;
    let _e125: Plane = self_1947;
    let _e129: Flector = other_1755;
    let _e132: Flector = other_1755;
    let _e135: Flector = other_1755;
    let _e141: Plane = self_1947;
    let _e144: Plane = self_1947;
    let _e147: Plane = self_1947;
    let _e151: Flector = other_1755;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g0_.y) * vec3<f32>(_e65.g1_.z, _e68.g1_.z, _e71.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g0_.z) * vec3<f32>(_e85.g1_.y, _e88.g1_.x, _e91.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g0_.x) * vec3<f32>(_e106.g1_.x, _e109.g1_.z, _e112.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g0_.w) * vec3<f32>(_e129.g1_.x, _e132.g1_.y, _e135.g1_.z))) + (vec3<f32>(_e141.g0_.x, _e144.g0_.y, _e147.g0_.z) * vec3(_e151.g1_.w))), vec4(0.0));
}

fn plane_flector_anti_wedge(self_1948: Plane, other_1756: Flector) -> MultiVector {
    var self_1949: Plane;
    var other_1757: Flector;

    self_1949 = self_1948;
    other_1757 = other_1756;
    let _e4: Plane = self_1949;
    let _e8: Flector = other_1757;
    let _e17: Plane = self_1949;
    let _e21: Flector = other_1757;
    let _e31: Plane = self_1949;
    let _e35: Flector = other_1757;
    let _e45: Plane = self_1949;
    let _e49: Flector = other_1757;
    let _e61: Plane = self_1949;
    let _e65: Flector = other_1757;
    let _e68: Flector = other_1757;
    let _e71: Flector = other_1757;
    let _e81: Plane = self_1949;
    let _e85: Flector = other_1757;
    let _e88: Flector = other_1757;
    let _e91: Flector = other_1757;
    let _e102: Plane = self_1949;
    let _e106: Flector = other_1757;
    let _e109: Flector = other_1757;
    let _e112: Flector = other_1757;
    let _e125: Plane = self_1949;
    let _e129: Flector = other_1757;
    let _e132: Flector = other_1757;
    let _e135: Flector = other_1757;
    let _e141: Plane = self_1949;
    let _e144: Plane = self_1949;
    let _e147: Plane = self_1949;
    let _e151: Flector = other_1757;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g0_.y) * vec3<f32>(_e65.g1_.z, _e68.g1_.z, _e71.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g0_.z) * vec3<f32>(_e85.g1_.y, _e88.g1_.x, _e91.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g0_.x) * vec3<f32>(_e106.g1_.x, _e109.g1_.z, _e112.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g0_.w) * vec3<f32>(_e129.g1_.x, _e132.g1_.y, _e135.g1_.z))) + (vec3<f32>(_e141.g0_.x, _e144.g0_.y, _e147.g0_.z) * vec3(_e151.g1_.w))), vec4(0.0));
}

fn plane_flector_meet(self_1950: Plane, other_1758: Flector) -> MultiVector {
    var self_1951: Plane;
    var other_1759: Flector;

    self_1951 = self_1950;
    other_1759 = other_1758;
    let _e4: Plane = self_1951;
    let _e8: Flector = other_1759;
    let _e17: Plane = self_1951;
    let _e21: Flector = other_1759;
    let _e31: Plane = self_1951;
    let _e35: Flector = other_1759;
    let _e45: Plane = self_1951;
    let _e49: Flector = other_1759;
    let _e61: Plane = self_1951;
    let _e65: Flector = other_1759;
    let _e68: Flector = other_1759;
    let _e71: Flector = other_1759;
    let _e81: Plane = self_1951;
    let _e85: Flector = other_1759;
    let _e88: Flector = other_1759;
    let _e91: Flector = other_1759;
    let _e102: Plane = self_1951;
    let _e106: Flector = other_1759;
    let _e109: Flector = other_1759;
    let _e112: Flector = other_1759;
    let _e125: Plane = self_1951;
    let _e129: Flector = other_1759;
    let _e132: Flector = other_1759;
    let _e135: Flector = other_1759;
    let _e141: Plane = self_1951;
    let _e144: Plane = self_1951;
    let _e147: Plane = self_1951;
    let _e151: Flector = other_1759;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g0_.y) * vec3<f32>(_e65.g1_.z, _e68.g1_.z, _e71.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g0_.z) * vec3<f32>(_e85.g1_.y, _e88.g1_.x, _e91.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g0_.x) * vec3<f32>(_e106.g1_.x, _e109.g1_.z, _e112.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g0_.w) * vec3<f32>(_e129.g1_.x, _e132.g1_.y, _e135.g1_.z))) + (vec3<f32>(_e141.g0_.x, _e144.g0_.y, _e147.g0_.z) * vec3(_e151.g1_.w))), vec4(0.0));
}

fn plane_flector_outer_product(self_1952: Plane, other_1760: Flector) -> AntiScalar {
    var self_1953: Plane;
    var other_1761: Flector;

    self_1953 = self_1952;
    other_1761 = other_1760;
    let _e5: Plane = self_1953;
    let _e8: Flector = other_1761;
    let _e13: Plane = self_1953;
    let _e16: Flector = other_1761;
    let _e21: Plane = self_1953;
    let _e24: Flector = other_1761;
    let _e29: Plane = self_1953;
    let _e32: Flector = other_1761;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_wedge(self_1954: Plane, other_1762: Flector) -> AntiScalar {
    var self_1955: Plane;
    var other_1763: Flector;

    self_1955 = self_1954;
    other_1763 = other_1762;
    let _e5: Plane = self_1955;
    let _e8: Flector = other_1763;
    let _e13: Plane = self_1955;
    let _e16: Flector = other_1763;
    let _e21: Plane = self_1955;
    let _e24: Flector = other_1763;
    let _e29: Plane = self_1955;
    let _e32: Flector = other_1763;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_join(self_1956: Plane, other_1764: Flector) -> AntiScalar {
    var self_1957: Plane;
    var other_1765: Flector;

    self_1957 = self_1956;
    other_1765 = other_1764;
    let _e5: Plane = self_1957;
    let _e8: Flector = other_1765;
    let _e13: Plane = self_1957;
    let _e16: Flector = other_1765;
    let _e21: Plane = self_1957;
    let _e24: Flector = other_1765;
    let _e29: Plane = self_1957;
    let _e32: Flector = other_1765;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_inner_product(self_1958: Plane, other_1766: Flector) -> MultiVector {
    var self_1959: Plane;
    var other_1767: Flector;

    self_1959 = self_1958;
    other_1767 = other_1766;
    let _e4: Plane = self_1959;
    let _e7: Plane = self_1959;
    let _e11: Flector = other_1767;
    let _e14: Flector = other_1767;
    let _e25: Plane = self_1959;
    let _e29: Flector = other_1767;
    let _e32: Flector = other_1767;
    let _e35: Flector = other_1767;
    let _e45: Plane = self_1959;
    let _e49: Flector = other_1767;
    let _e52: Flector = other_1767;
    let _e55: Flector = other_1767;
    let _e66: Plane = self_1959;
    let _e70: Flector = other_1767;
    let _e73: Flector = other_1767;
    let _e76: Flector = other_1767;
    let _e89: Plane = self_1959;
    let _e93: Flector = other_1767;
    let _e96: Flector = other_1767;
    let _e99: Flector = other_1767;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g1_.w, _e14.g1_.x)) * vec2<f32>(-1.0, 0.0)), vec4(0.0), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e89.g0_.w) * vec3<f32>(_e93.g0_.x, _e96.g0_.y, _e99.g0_.z))), vec4(0.0));
}

fn plane_flector_inner_anti_product(self_1960: Plane, other_1768: Flector) -> Motor {
    var self_1961: Plane;
    var other_1769: Flector;

    self_1961 = self_1960;
    other_1769 = other_1768;
    let _e4: Plane = self_1961;
    let _e8: Flector = other_1769;
    let _e11: Flector = other_1769;
    let _e14: Flector = other_1769;
    let _e17: Flector = other_1769;
    let _e28: Plane = self_1961;
    let _e32: Flector = other_1769;
    let _e35: Flector = other_1769;
    let _e38: Flector = other_1769;
    let _e41: Flector = other_1769;
    let _e53: Plane = self_1961;
    let _e57: Flector = other_1769;
    let _e60: Flector = other_1769;
    let _e63: Flector = other_1769;
    let _e66: Flector = other_1769;
    let _e78: Plane = self_1961;
    let _e82: Flector = other_1769;
    let _e85: Flector = other_1769;
    let _e88: Flector = other_1769;
    let _e98: Plane = self_1961;
    let _e102: Flector = other_1769;
    let _e105: Flector = other_1769;
    let _e108: Flector = other_1769;
    let _e119: Plane = self_1961;
    let _e123: Flector = other_1769;
    let _e126: Flector = other_1769;
    let _e129: Flector = other_1769;
    return Motor(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g0_.w, _e60.g0_.x, _e63.g0_.x, _e66.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e78.g0_.y) * vec3<f32>(_e82.g0_.z, _e85.g0_.z, _e88.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e98.g0_.z) * vec3<f32>(_e102.g0_.y, _e105.g0_.x, _e108.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e119.g0_.x) * vec3<f32>(_e123.g0_.x, _e126.g0_.z, _e129.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn plane_flector_left_contraction(self_1962: Plane, other_1770: Flector) -> Scalar {
    var self_1963: Plane;
    var other_1771: Flector;

    self_1963 = self_1962;
    other_1771 = other_1770;
    let _e5: Plane = self_1963;
    let _e8: Flector = other_1771;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_right_contraction(self_1964: Plane, other_1772: Flector) -> MultiVector {
    var self_1965: Plane;
    var other_1773: Flector;

    self_1965 = self_1964;
    other_1773 = other_1772;
    let _e4: Plane = self_1965;
    let _e7: Plane = self_1965;
    let _e11: Flector = other_1773;
    let _e14: Flector = other_1773;
    let _e25: Plane = self_1965;
    let _e29: Flector = other_1773;
    let _e32: Flector = other_1773;
    let _e35: Flector = other_1773;
    let _e45: Plane = self_1965;
    let _e49: Flector = other_1773;
    let _e52: Flector = other_1773;
    let _e55: Flector = other_1773;
    let _e66: Plane = self_1965;
    let _e70: Flector = other_1773;
    let _e73: Flector = other_1773;
    let _e76: Flector = other_1773;
    let _e89: Plane = self_1965;
    let _e93: Flector = other_1773;
    let _e96: Flector = other_1773;
    let _e99: Flector = other_1773;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g1_.w, _e14.g1_.x)) * vec2<f32>(-1.0, 0.0)), vec4(0.0), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e89.g0_.w) * vec3<f32>(_e93.g0_.x, _e96.g0_.y, _e99.g0_.z))), vec4(0.0));
}

fn plane_flector_left_anti_contraction(self_1966: Plane, other_1774: Flector) -> Motor {
    var self_1967: Plane;
    var other_1775: Flector;

    self_1967 = self_1966;
    other_1775 = other_1774;
    let _e4: Plane = self_1967;
    let _e8: Flector = other_1775;
    let _e11: Flector = other_1775;
    let _e14: Flector = other_1775;
    let _e17: Flector = other_1775;
    let _e28: Plane = self_1967;
    let _e32: Flector = other_1775;
    let _e35: Flector = other_1775;
    let _e38: Flector = other_1775;
    let _e41: Flector = other_1775;
    let _e53: Plane = self_1967;
    let _e57: Flector = other_1775;
    let _e60: Flector = other_1775;
    let _e63: Flector = other_1775;
    let _e66: Flector = other_1775;
    let _e78: Plane = self_1967;
    let _e82: Flector = other_1775;
    let _e85: Flector = other_1775;
    let _e88: Flector = other_1775;
    let _e98: Plane = self_1967;
    let _e102: Flector = other_1775;
    let _e105: Flector = other_1775;
    let _e108: Flector = other_1775;
    let _e119: Plane = self_1967;
    let _e123: Flector = other_1775;
    let _e126: Flector = other_1775;
    let _e129: Flector = other_1775;
    return Motor(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g0_.w, _e60.g0_.x, _e63.g0_.x, _e66.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e78.g0_.y) * vec3<f32>(_e82.g0_.z, _e85.g0_.z, _e88.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e98.g0_.z) * vec3<f32>(_e102.g0_.y, _e105.g0_.x, _e108.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e119.g0_.x) * vec3<f32>(_e123.g0_.x, _e126.g0_.z, _e129.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn plane_flector_right_anti_contraction(self_1968: Plane, other_1776: Flector) -> AntiScalar {
    var self_1969: Plane;
    var other_1777: Flector;

    self_1969 = self_1968;
    other_1777 = other_1776;
    let _e4: Plane = self_1969;
    let _e7: Flector = other_1777;
    let _e11: Plane = self_1969;
    let _e14: Flector = other_1777;
    let _e19: Plane = self_1969;
    let _e22: Flector = other_1777;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_flector_scalar_product(self_1970: Plane, other_1778: Flector) -> Scalar {
    var self_1971: Plane;
    var other_1779: Flector;

    self_1971 = self_1970;
    other_1779 = other_1778;
    let _e5: Plane = self_1971;
    let _e8: Flector = other_1779;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_dot(self_1972: Plane, other_1780: Flector) -> Scalar {
    var self_1973: Plane;
    var other_1781: Flector;

    self_1973 = self_1972;
    other_1781 = other_1780;
    let _e5: Plane = self_1973;
    let _e8: Flector = other_1781;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_anti_scalar_product(self_1974: Plane, other_1782: Flector) -> AntiScalar {
    var self_1975: Plane;
    var other_1783: Flector;

    self_1975 = self_1974;
    other_1783 = other_1782;
    let _e4: Plane = self_1975;
    let _e7: Flector = other_1783;
    let _e11: Plane = self_1975;
    let _e14: Flector = other_1783;
    let _e19: Plane = self_1975;
    let _e22: Flector = other_1783;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_flector_anti_dot(self_1976: Plane, other_1784: Flector) -> AntiScalar {
    var self_1977: Plane;
    var other_1785: Flector;

    self_1977 = self_1976;
    other_1785 = other_1784;
    let _e4: Plane = self_1977;
    let _e7: Flector = other_1785;
    let _e11: Plane = self_1977;
    let _e14: Flector = other_1785;
    let _e19: Plane = self_1977;
    let _e22: Flector = other_1785;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_multi_vector_add(self_1978: Plane, other_1786: MultiVector) -> MultiVector {
    var self_1979: Plane;
    var other_1787: MultiVector;

    self_1979 = self_1978;
    other_1787 = other_1786;
    let _e4: MultiVector = other_1787;
    let _e6: MultiVector = other_1787;
    let _e8: MultiVector = other_1787;
    let _e10: MultiVector = other_1787;
    let _e12: Plane = self_1979;
    let _e14: MultiVector = other_1787;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g0_ + _e14.g4_));
}

fn plane_multi_vector_sub(self_1980: Plane, other_1788: MultiVector) -> MultiVector {
    var self_1981: Plane;
    var other_1789: MultiVector;

    self_1981 = self_1980;
    other_1789 = other_1788;
    let _e6: MultiVector = other_1789;
    let _e11: MultiVector = other_1789;
    let _e16: MultiVector = other_1789;
    let _e21: MultiVector = other_1789;
    let _e24: Plane = self_1981;
    let _e26: MultiVector = other_1789;
    return MultiVector((vec2(0.0) - _e6.g0_), (vec4(0.0) - _e11.g1_), (vec3(0.0) - _e16.g2_), (vec3(0.0) - _e21.g3_), (_e24.g0_ - _e26.g4_));
}

fn plane_multi_vector_geometric_product(self_1982: Plane, other_1790: MultiVector) -> MultiVector {
    var self_1983: Plane;
    var other_1791: MultiVector;

    self_1983 = self_1982;
    other_1791 = other_1790;
    let _e4: Plane = self_1983;
    let _e8: MultiVector = other_1791;
    let _e17: Plane = self_1983;
    let _e21: MultiVector = other_1791;
    let _e31: Plane = self_1983;
    let _e35: MultiVector = other_1791;
    let _e38: MultiVector = other_1791;
    let _e44: Plane = self_1983;
    let _e48: MultiVector = other_1791;
    let _e58: Plane = self_1983;
    let _e62: MultiVector = other_1791;
    let _e73: Plane = self_1983;
    let _e77: MultiVector = other_1791;
    let _e89: Plane = self_1983;
    let _e93: MultiVector = other_1791;
    let _e96: MultiVector = other_1791;
    let _e99: MultiVector = other_1791;
    let _e102: MultiVector = other_1791;
    let _e108: Plane = self_1983;
    let _e112: MultiVector = other_1791;
    let _e124: Plane = self_1983;
    let _e128: MultiVector = other_1791;
    let _e131: MultiVector = other_1791;
    let _e134: MultiVector = other_1791;
    let _e144: Plane = self_1983;
    let _e148: MultiVector = other_1791;
    let _e151: MultiVector = other_1791;
    let _e154: MultiVector = other_1791;
    let _e165: Plane = self_1983;
    let _e169: MultiVector = other_1791;
    let _e172: MultiVector = other_1791;
    let _e175: MultiVector = other_1791;
    let _e186: Plane = self_1983;
    let _e190: MultiVector = other_1791;
    let _e193: MultiVector = other_1791;
    let _e196: MultiVector = other_1791;
    let _e204: Plane = self_1983;
    let _e208: MultiVector = other_1791;
    let _e211: MultiVector = other_1791;
    let _e214: MultiVector = other_1791;
    let _e220: Plane = self_1983;
    let _e224: MultiVector = other_1791;
    let _e227: MultiVector = other_1791;
    let _e230: MultiVector = other_1791;
    let _e233: MultiVector = other_1791;
    let _e244: Plane = self_1983;
    let _e248: MultiVector = other_1791;
    let _e251: MultiVector = other_1791;
    let _e254: MultiVector = other_1791;
    let _e257: MultiVector = other_1791;
    let _e269: Plane = self_1983;
    let _e273: MultiVector = other_1791;
    let _e276: MultiVector = other_1791;
    let _e279: MultiVector = other_1791;
    let _e282: MultiVector = other_1791;
    let _e288: Plane = self_1983;
    let _e292: MultiVector = other_1791;
    let _e295: MultiVector = other_1791;
    let _e298: MultiVector = other_1791;
    let _e301: MultiVector = other_1791;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g0_.w) * vec2<f32>(_e35.g4_.w, _e38.g1_.w))) + ((vec2(_e44.g0_.x) * vec2(_e48.g1_.x)) * vec2<f32>(0.0, -1.0))), (((((vec4(_e58.g0_.y) * vec4(_e62.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e73.g0_.z) * vec4(_e77.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e89.g0_.w) * vec4<f32>(_e93.g3_.x, _e96.g3_.y, _e99.g3_.z, _e102.g0_.y))) + ((vec4(_e108.g0_.x) * vec4(_e112.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec3(_e124.g0_.x) * vec3<f32>(_e128.g4_.w, _e131.g1_.z, _e134.g1_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e144.g0_.y) * vec3<f32>(_e148.g1_.z, _e151.g4_.w, _e154.g1_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e165.g0_.z) * vec3<f32>(_e169.g1_.y, _e172.g1_.x, _e175.g4_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e186.g0_.w) * vec3<f32>(_e190.g4_.x, _e193.g4_.y, _e196.g4_.z))), (vec3(0.0) - (vec3(_e204.g0_.w) * vec3<f32>(_e208.g1_.x, _e211.g1_.y, _e214.g1_.z))), (((((vec4(_e220.g0_.y) * vec4<f32>(_e224.g3_.z, _e227.g0_.x, _e230.g3_.x, _e233.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0)) + ((vec4(_e244.g0_.z) * vec4<f32>(_e248.g3_.y, _e251.g3_.x, _e254.g0_.x, _e257.g3_.y)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + (vec4(_e269.g0_.w) * vec4<f32>(_e273.g2_.x, _e276.g2_.y, _e279.g2_.z, _e282.g0_.x))) + ((vec4(_e288.g0_.x) * vec4<f32>(_e292.g0_.x, _e295.g3_.z, _e298.g3_.y, _e301.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))));
}

fn plane_multi_vector_geometric_anti_product(self_1984: Plane, other_1792: MultiVector) -> MultiVector {
    var self_1985: Plane;
    var other_1793: MultiVector;

    self_1985 = self_1984;
    other_1793 = other_1792;
    let _e4: Plane = self_1985;
    let _e8: MultiVector = other_1793;
    let _e11: MultiVector = other_1793;
    let _e20: Plane = self_1985;
    let _e24: MultiVector = other_1793;
    let _e27: MultiVector = other_1793;
    let _e37: Plane = self_1985;
    let _e41: MultiVector = other_1793;
    let _e44: MultiVector = other_1793;
    let _e54: Plane = self_1985;
    let _e57: Plane = self_1985;
    let _e61: MultiVector = other_1793;
    let _e64: MultiVector = other_1793;
    let _e74: Plane = self_1985;
    let _e78: MultiVector = other_1793;
    let _e81: MultiVector = other_1793;
    let _e84: MultiVector = other_1793;
    let _e87: MultiVector = other_1793;
    let _e98: Plane = self_1985;
    let _e102: MultiVector = other_1793;
    let _e105: MultiVector = other_1793;
    let _e108: MultiVector = other_1793;
    let _e111: MultiVector = other_1793;
    let _e123: Plane = self_1985;
    let _e127: MultiVector = other_1793;
    let _e130: MultiVector = other_1793;
    let _e133: MultiVector = other_1793;
    let _e136: MultiVector = other_1793;
    let _e148: Plane = self_1985;
    let _e151: MultiVector = other_1793;
    let _e154: MultiVector = other_1793;
    let _e157: MultiVector = other_1793;
    let _e160: MultiVector = other_1793;
    let _e172: Plane = self_1985;
    let _e176: MultiVector = other_1793;
    let _e179: MultiVector = other_1793;
    let _e182: MultiVector = other_1793;
    let _e192: Plane = self_1985;
    let _e196: MultiVector = other_1793;
    let _e199: MultiVector = other_1793;
    let _e202: MultiVector = other_1793;
    let _e213: Plane = self_1985;
    let _e217: MultiVector = other_1793;
    let _e220: MultiVector = other_1793;
    let _e223: MultiVector = other_1793;
    let _e234: Plane = self_1985;
    let _e238: MultiVector = other_1793;
    let _e241: MultiVector = other_1793;
    let _e244: MultiVector = other_1793;
    let _e254: Plane = self_1985;
    let _e258: MultiVector = other_1793;
    let _e261: MultiVector = other_1793;
    let _e264: MultiVector = other_1793;
    let _e275: Plane = self_1985;
    let _e279: MultiVector = other_1793;
    let _e282: MultiVector = other_1793;
    let _e285: MultiVector = other_1793;
    let _e296: Plane = self_1985;
    let _e300: MultiVector = other_1793;
    let _e303: MultiVector = other_1793;
    let _e306: MultiVector = other_1793;
    let _e312: Plane = self_1985;
    let _e316: MultiVector = other_1793;
    let _e319: MultiVector = other_1793;
    let _e322: MultiVector = other_1793;
    let _e325: MultiVector = other_1793;
    let _e336: Plane = self_1985;
    let _e340: MultiVector = other_1793;
    let _e343: MultiVector = other_1793;
    let _e346: MultiVector = other_1793;
    let _e349: MultiVector = other_1793;
    let _e361: Plane = self_1985;
    let _e365: MultiVector = other_1793;
    let _e368: MultiVector = other_1793;
    let _e371: MultiVector = other_1793;
    let _e374: MultiVector = other_1793;
    let _e386: Plane = self_1985;
    let _e389: MultiVector = other_1793;
    let _e392: MultiVector = other_1793;
    let _e395: MultiVector = other_1793;
    let _e398: MultiVector = other_1793;
    return MultiVector((((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) * vec2<f32>(-1.0, 1.0)) + ((vec2(_e20.g0_.y) * vec2<f32>(_e24.g1_.y, _e27.g4_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e37.g0_.z) * vec2<f32>(_e41.g1_.z, _e44.g4_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2<f32>(_e54.g0_.w, _e57.g0_.x) * vec2<f32>(_e61.g1_.w, _e64.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e74.g0_.x) * vec4<f32>(_e78.g0_.x, _e81.g3_.z, _e84.g3_.y, _e87.g2_.x)) * vec4<f32>(-1.0, 1.0, -1.0, -1.0)) + ((vec4(_e98.g0_.y) * vec4<f32>(_e102.g3_.z, _e105.g0_.x, _e108.g3_.x, _e111.g2_.y)) * vec4<f32>(-1.0, -1.0, 1.0, -1.0))) + ((vec4(_e123.g0_.z) * vec4<f32>(_e127.g3_.y, _e130.g3_.x, _e133.g0_.x, _e136.g2_.z)) * vec4<f32>(1.0, -1.0, -1.0, -1.0))) + ((_e148.g0_.wwwx * vec4<f32>(_e151.g2_.x, _e154.g2_.y, _e157.g2_.z, _e160.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3(_e172.g0_.x) * vec3<f32>(_e176.g1_.w, _e179.g4_.z, _e182.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e192.g0_.y) * vec3<f32>(_e196.g4_.z, _e199.g1_.w, _e202.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e213.g0_.z) * vec3<f32>(_e217.g4_.y, _e220.g4_.x, _e223.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))), (((((vec3(_e234.g0_.x) * vec3<f32>(_e238.g4_.w, _e241.g1_.z, _e244.g1_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e254.g0_.y) * vec3<f32>(_e258.g1_.z, _e261.g4_.w, _e264.g1_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e275.g0_.z) * vec3<f32>(_e279.g1_.y, _e282.g1_.x, _e285.g4_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e296.g0_.w) * vec3<f32>(_e300.g4_.x, _e303.g4_.y, _e306.g4_.z))), (((((vec4(_e312.g0_.x) * vec4<f32>(_e316.g0_.y, _e319.g2_.z, _e322.g2_.y, _e325.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0)) + ((vec4(_e336.g0_.y) * vec4<f32>(_e340.g2_.z, _e343.g0_.y, _e346.g2_.x, _e349.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e361.g0_.z) * vec4<f32>(_e365.g2_.y, _e368.g2_.x, _e371.g0_.y, _e374.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((_e386.g0_.xxxw * vec4<f32>(_e389.g0_.x, _e392.g0_.x, _e395.g0_.x, _e398.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_multi_vector_regressive_product(self_1986: Plane, other_1794: MultiVector) -> MultiVector {
    var self_1987: Plane;
    var other_1795: MultiVector;

    self_1987 = self_1986;
    other_1795 = other_1794;
    let _e4: Plane = self_1987;
    let _e8: MultiVector = other_1795;
    let _e17: Plane = self_1987;
    let _e21: MultiVector = other_1795;
    let _e31: Plane = self_1987;
    let _e35: MultiVector = other_1795;
    let _e45: Plane = self_1987;
    let _e49: MultiVector = other_1795;
    let _e59: Plane = self_1987;
    let _e63: MultiVector = other_1795;
    let _e66: MultiVector = other_1795;
    let _e69: MultiVector = other_1795;
    let _e72: MultiVector = other_1795;
    let _e83: Plane = self_1987;
    let _e87: MultiVector = other_1795;
    let _e90: MultiVector = other_1795;
    let _e93: MultiVector = other_1795;
    let _e96: MultiVector = other_1795;
    let _e108: Plane = self_1987;
    let _e112: MultiVector = other_1795;
    let _e115: MultiVector = other_1795;
    let _e118: MultiVector = other_1795;
    let _e121: MultiVector = other_1795;
    let _e133: Plane = self_1987;
    let _e137: MultiVector = other_1795;
    let _e140: MultiVector = other_1795;
    let _e143: MultiVector = other_1795;
    let _e146: MultiVector = other_1795;
    let _e158: Plane = self_1987;
    let _e162: MultiVector = other_1795;
    let _e165: MultiVector = other_1795;
    let _e168: MultiVector = other_1795;
    let _e178: Plane = self_1987;
    let _e182: MultiVector = other_1795;
    let _e185: MultiVector = other_1795;
    let _e188: MultiVector = other_1795;
    let _e199: Plane = self_1987;
    let _e203: MultiVector = other_1795;
    let _e206: MultiVector = other_1795;
    let _e209: MultiVector = other_1795;
    let _e222: Plane = self_1987;
    let _e226: MultiVector = other_1795;
    let _e229: MultiVector = other_1795;
    let _e232: MultiVector = other_1795;
    let _e238: Plane = self_1987;
    let _e241: Plane = self_1987;
    let _e244: Plane = self_1987;
    let _e248: MultiVector = other_1795;
    let _e254: Plane = self_1987;
    let _e256: MultiVector = other_1795;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e59.g0_.y) * vec4<f32>(_e63.g3_.z, _e66.g3_.z, _e69.g3_.x, _e72.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e83.g0_.z) * vec4<f32>(_e87.g3_.y, _e90.g3_.x, _e93.g3_.y, _e96.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e108.g0_.w) * vec4<f32>(_e112.g2_.x, _e115.g2_.y, _e118.g2_.z, _e121.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e133.g0_.x) * vec4<f32>(_e137.g3_.x, _e140.g3_.z, _e143.g3_.y, _e146.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec3(_e158.g0_.y) * vec3<f32>(_e162.g4_.z, _e165.g4_.z, _e168.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e178.g0_.z) * vec3<f32>(_e182.g4_.y, _e185.g4_.x, _e188.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e199.g0_.x) * vec3<f32>(_e203.g4_.x, _e206.g4_.z, _e209.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e222.g0_.w) * vec3<f32>(_e226.g4_.x, _e229.g4_.y, _e232.g4_.z))) + (vec3<f32>(_e238.g0_.x, _e241.g0_.y, _e244.g0_.z) * vec3(_e248.g4_.w))), (_e254.g0_ * vec4(_e256.g0_.y)));
}

fn plane_multi_vector_anti_wedge(self_1988: Plane, other_1796: MultiVector) -> MultiVector {
    var self_1989: Plane;
    var other_1797: MultiVector;

    self_1989 = self_1988;
    other_1797 = other_1796;
    let _e4: Plane = self_1989;
    let _e8: MultiVector = other_1797;
    let _e17: Plane = self_1989;
    let _e21: MultiVector = other_1797;
    let _e31: Plane = self_1989;
    let _e35: MultiVector = other_1797;
    let _e45: Plane = self_1989;
    let _e49: MultiVector = other_1797;
    let _e59: Plane = self_1989;
    let _e63: MultiVector = other_1797;
    let _e66: MultiVector = other_1797;
    let _e69: MultiVector = other_1797;
    let _e72: MultiVector = other_1797;
    let _e83: Plane = self_1989;
    let _e87: MultiVector = other_1797;
    let _e90: MultiVector = other_1797;
    let _e93: MultiVector = other_1797;
    let _e96: MultiVector = other_1797;
    let _e108: Plane = self_1989;
    let _e112: MultiVector = other_1797;
    let _e115: MultiVector = other_1797;
    let _e118: MultiVector = other_1797;
    let _e121: MultiVector = other_1797;
    let _e133: Plane = self_1989;
    let _e137: MultiVector = other_1797;
    let _e140: MultiVector = other_1797;
    let _e143: MultiVector = other_1797;
    let _e146: MultiVector = other_1797;
    let _e158: Plane = self_1989;
    let _e162: MultiVector = other_1797;
    let _e165: MultiVector = other_1797;
    let _e168: MultiVector = other_1797;
    let _e178: Plane = self_1989;
    let _e182: MultiVector = other_1797;
    let _e185: MultiVector = other_1797;
    let _e188: MultiVector = other_1797;
    let _e199: Plane = self_1989;
    let _e203: MultiVector = other_1797;
    let _e206: MultiVector = other_1797;
    let _e209: MultiVector = other_1797;
    let _e222: Plane = self_1989;
    let _e226: MultiVector = other_1797;
    let _e229: MultiVector = other_1797;
    let _e232: MultiVector = other_1797;
    let _e238: Plane = self_1989;
    let _e241: Plane = self_1989;
    let _e244: Plane = self_1989;
    let _e248: MultiVector = other_1797;
    let _e254: Plane = self_1989;
    let _e256: MultiVector = other_1797;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e59.g0_.y) * vec4<f32>(_e63.g3_.z, _e66.g3_.z, _e69.g3_.x, _e72.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e83.g0_.z) * vec4<f32>(_e87.g3_.y, _e90.g3_.x, _e93.g3_.y, _e96.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e108.g0_.w) * vec4<f32>(_e112.g2_.x, _e115.g2_.y, _e118.g2_.z, _e121.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e133.g0_.x) * vec4<f32>(_e137.g3_.x, _e140.g3_.z, _e143.g3_.y, _e146.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec3(_e158.g0_.y) * vec3<f32>(_e162.g4_.z, _e165.g4_.z, _e168.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e178.g0_.z) * vec3<f32>(_e182.g4_.y, _e185.g4_.x, _e188.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e199.g0_.x) * vec3<f32>(_e203.g4_.x, _e206.g4_.z, _e209.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e222.g0_.w) * vec3<f32>(_e226.g4_.x, _e229.g4_.y, _e232.g4_.z))) + (vec3<f32>(_e238.g0_.x, _e241.g0_.y, _e244.g0_.z) * vec3(_e248.g4_.w))), (_e254.g0_ * vec4(_e256.g0_.y)));
}

fn plane_multi_vector_meet(self_1990: Plane, other_1798: MultiVector) -> MultiVector {
    var self_1991: Plane;
    var other_1799: MultiVector;

    self_1991 = self_1990;
    other_1799 = other_1798;
    let _e4: Plane = self_1991;
    let _e8: MultiVector = other_1799;
    let _e17: Plane = self_1991;
    let _e21: MultiVector = other_1799;
    let _e31: Plane = self_1991;
    let _e35: MultiVector = other_1799;
    let _e45: Plane = self_1991;
    let _e49: MultiVector = other_1799;
    let _e59: Plane = self_1991;
    let _e63: MultiVector = other_1799;
    let _e66: MultiVector = other_1799;
    let _e69: MultiVector = other_1799;
    let _e72: MultiVector = other_1799;
    let _e83: Plane = self_1991;
    let _e87: MultiVector = other_1799;
    let _e90: MultiVector = other_1799;
    let _e93: MultiVector = other_1799;
    let _e96: MultiVector = other_1799;
    let _e108: Plane = self_1991;
    let _e112: MultiVector = other_1799;
    let _e115: MultiVector = other_1799;
    let _e118: MultiVector = other_1799;
    let _e121: MultiVector = other_1799;
    let _e133: Plane = self_1991;
    let _e137: MultiVector = other_1799;
    let _e140: MultiVector = other_1799;
    let _e143: MultiVector = other_1799;
    let _e146: MultiVector = other_1799;
    let _e158: Plane = self_1991;
    let _e162: MultiVector = other_1799;
    let _e165: MultiVector = other_1799;
    let _e168: MultiVector = other_1799;
    let _e178: Plane = self_1991;
    let _e182: MultiVector = other_1799;
    let _e185: MultiVector = other_1799;
    let _e188: MultiVector = other_1799;
    let _e199: Plane = self_1991;
    let _e203: MultiVector = other_1799;
    let _e206: MultiVector = other_1799;
    let _e209: MultiVector = other_1799;
    let _e222: Plane = self_1991;
    let _e226: MultiVector = other_1799;
    let _e229: MultiVector = other_1799;
    let _e232: MultiVector = other_1799;
    let _e238: Plane = self_1991;
    let _e241: Plane = self_1991;
    let _e244: Plane = self_1991;
    let _e248: MultiVector = other_1799;
    let _e254: Plane = self_1991;
    let _e256: MultiVector = other_1799;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e59.g0_.y) * vec4<f32>(_e63.g3_.z, _e66.g3_.z, _e69.g3_.x, _e72.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e83.g0_.z) * vec4<f32>(_e87.g3_.y, _e90.g3_.x, _e93.g3_.y, _e96.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e108.g0_.w) * vec4<f32>(_e112.g2_.x, _e115.g2_.y, _e118.g2_.z, _e121.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e133.g0_.x) * vec4<f32>(_e137.g3_.x, _e140.g3_.z, _e143.g3_.y, _e146.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec3(_e158.g0_.y) * vec3<f32>(_e162.g4_.z, _e165.g4_.z, _e168.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e178.g0_.z) * vec3<f32>(_e182.g4_.y, _e185.g4_.x, _e188.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e199.g0_.x) * vec3<f32>(_e203.g4_.x, _e206.g4_.z, _e209.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e222.g0_.w) * vec3<f32>(_e226.g4_.x, _e229.g4_.y, _e232.g4_.z))) + (vec3<f32>(_e238.g0_.x, _e241.g0_.y, _e244.g0_.z) * vec3(_e248.g4_.w))), (_e254.g0_ * vec4(_e256.g0_.y)));
}

fn plane_multi_vector_outer_product(self_1992: Plane, other_1800: MultiVector) -> MultiVector {
    var self_1993: Plane;
    var other_1801: MultiVector;

    self_1993 = self_1992;
    other_1801 = other_1800;
    let _e4: Plane = self_1993;
    let _e8: MultiVector = other_1801;
    let _e17: Plane = self_1993;
    let _e21: MultiVector = other_1801;
    let _e31: Plane = self_1993;
    let _e35: MultiVector = other_1801;
    let _e45: Plane = self_1993;
    let _e49: MultiVector = other_1801;
    let _e65: Plane = self_1993;
    let _e67: MultiVector = other_1801;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (_e65.g0_ * vec4(_e67.g0_.x)));
}

fn plane_multi_vector_wedge(self_1994: Plane, other_1802: MultiVector) -> MultiVector {
    var self_1995: Plane;
    var other_1803: MultiVector;

    self_1995 = self_1994;
    other_1803 = other_1802;
    let _e4: Plane = self_1995;
    let _e8: MultiVector = other_1803;
    let _e17: Plane = self_1995;
    let _e21: MultiVector = other_1803;
    let _e31: Plane = self_1995;
    let _e35: MultiVector = other_1803;
    let _e45: Plane = self_1995;
    let _e49: MultiVector = other_1803;
    let _e65: Plane = self_1995;
    let _e67: MultiVector = other_1803;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (_e65.g0_ * vec4(_e67.g0_.x)));
}

fn plane_multi_vector_join(self_1996: Plane, other_1804: MultiVector) -> MultiVector {
    var self_1997: Plane;
    var other_1805: MultiVector;

    self_1997 = self_1996;
    other_1805 = other_1804;
    let _e4: Plane = self_1997;
    let _e8: MultiVector = other_1805;
    let _e17: Plane = self_1997;
    let _e21: MultiVector = other_1805;
    let _e31: Plane = self_1997;
    let _e35: MultiVector = other_1805;
    let _e45: Plane = self_1997;
    let _e49: MultiVector = other_1805;
    let _e65: Plane = self_1997;
    let _e67: MultiVector = other_1805;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (_e65.g0_ * vec4(_e67.g0_.x)));
}

fn plane_multi_vector_inner_product(self_1998: Plane, other_1806: MultiVector) -> MultiVector {
    var self_1999: Plane;
    var other_1807: MultiVector;

    self_1999 = self_1998;
    other_1807 = other_1806;
    let _e4: Plane = self_1999;
    let _e7: Plane = self_1999;
    let _e11: MultiVector = other_1807;
    let _e14: MultiVector = other_1807;
    let _e23: Plane = self_1999;
    let _e27: MultiVector = other_1807;
    let _e38: Plane = self_1999;
    let _e42: MultiVector = other_1807;
    let _e54: Plane = self_1999;
    let _e58: MultiVector = other_1807;
    let _e61: MultiVector = other_1807;
    let _e64: MultiVector = other_1807;
    let _e67: MultiVector = other_1807;
    let _e73: Plane = self_1999;
    let _e77: MultiVector = other_1807;
    let _e89: Plane = self_1999;
    let _e93: MultiVector = other_1807;
    let _e96: MultiVector = other_1807;
    let _e99: MultiVector = other_1807;
    let _e109: Plane = self_1999;
    let _e113: MultiVector = other_1807;
    let _e116: MultiVector = other_1807;
    let _e119: MultiVector = other_1807;
    let _e130: Plane = self_1999;
    let _e134: MultiVector = other_1807;
    let _e137: MultiVector = other_1807;
    let _e140: MultiVector = other_1807;
    let _e153: Plane = self_1999;
    let _e157: MultiVector = other_1807;
    let _e160: MultiVector = other_1807;
    let _e163: MultiVector = other_1807;
    let _e169: Plane = self_1999;
    let _e171: MultiVector = other_1807;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g4_.w, _e14.g4_.x)) * vec2<f32>(-1.0, 0.0)), (((((vec4(_e23.g0_.y) * vec4(_e27.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e38.g0_.z) * vec4(_e42.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e54.g0_.w) * vec4<f32>(_e58.g3_.x, _e61.g3_.y, _e64.g3_.z, _e67.g0_.y))) + ((vec4(_e73.g0_.x) * vec4(_e77.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec3(_e89.g0_.y) * vec3<f32>(_e93.g1_.z, _e96.g1_.z, _e99.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e109.g0_.z) * vec3<f32>(_e113.g1_.y, _e116.g1_.x, _e119.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e130.g0_.x) * vec3<f32>(_e134.g1_.x, _e137.g1_.z, _e140.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e153.g0_.w) * vec3<f32>(_e157.g1_.x, _e160.g1_.y, _e163.g1_.z))), (_e169.g0_ * vec4(_e171.g0_.x)));
}

fn plane_multi_vector_inner_anti_product(self_2000: Plane, other_1808: MultiVector) -> MultiVector {
    var self_2001: Plane;
    var other_1809: MultiVector;

    self_2001 = self_2000;
    other_1809 = other_1808;
    let _e4: Plane = self_2001;
    let _e8: MultiVector = other_1809;
    let _e17: Plane = self_2001;
    let _e21: MultiVector = other_1809;
    let _e31: Plane = self_2001;
    let _e35: MultiVector = other_1809;
    let _e45: Plane = self_2001;
    let _e48: MultiVector = other_1809;
    let _e59: Plane = self_2001;
    let _e62: Plane = self_2001;
    let _e65: Plane = self_2001;
    let _e69: MultiVector = other_1809;
    let _e77: Plane = self_2001;
    let _e81: MultiVector = other_1809;
    let _e84: MultiVector = other_1809;
    let _e87: MultiVector = other_1809;
    let _e97: Plane = self_2001;
    let _e101: MultiVector = other_1809;
    let _e104: MultiVector = other_1809;
    let _e107: MultiVector = other_1809;
    let _e118: Plane = self_2001;
    let _e122: MultiVector = other_1809;
    let _e125: MultiVector = other_1809;
    let _e128: MultiVector = other_1809;
    let _e139: Plane = self_2001;
    let _e143: MultiVector = other_1809;
    let _e146: MultiVector = other_1809;
    let _e149: MultiVector = other_1809;
    let _e152: MultiVector = other_1809;
    let _e163: Plane = self_2001;
    let _e167: MultiVector = other_1809;
    let _e170: MultiVector = other_1809;
    let _e173: MultiVector = other_1809;
    let _e176: MultiVector = other_1809;
    let _e188: Plane = self_2001;
    let _e192: MultiVector = other_1809;
    let _e195: MultiVector = other_1809;
    let _e198: MultiVector = other_1809;
    let _e201: MultiVector = other_1809;
    let _e213: Plane = self_2001;
    let _e216: MultiVector = other_1809;
    let _e219: MultiVector = other_1809;
    let _e222: MultiVector = other_1809;
    let _e225: MultiVector = other_1809;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g4_.x)) * vec2<f32>(0.0, 1.0))), ((_e45.g0_.xyzx * vec4(_e48.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((vec3<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z) * vec3(_e69.g1_.w)) * vec3(-1.0)), ((((vec3(_e77.g0_.y) * vec3<f32>(_e81.g1_.z, _e84.g1_.z, _e87.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e97.g0_.z) * vec3<f32>(_e101.g1_.y, _e104.g1_.x, _e107.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e118.g0_.x) * vec3<f32>(_e122.g1_.x, _e125.g1_.z, _e128.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e139.g0_.x) * vec4<f32>(_e143.g0_.y, _e146.g2_.z, _e149.g2_.y, _e152.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0)) + ((vec4(_e163.g0_.y) * vec4<f32>(_e167.g2_.z, _e170.g0_.y, _e173.g2_.x, _e176.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e188.g0_.z) * vec4<f32>(_e192.g2_.y, _e195.g2_.x, _e198.g0_.y, _e201.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((_e213.g0_.xxxw * vec4<f32>(_e216.g0_.x, _e219.g0_.x, _e222.g0_.x, _e225.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_multi_vector_left_contraction(self_2002: Plane, other_1810: MultiVector) -> MultiVector {
    var self_2003: Plane;
    var other_1811: MultiVector;

    self_2003 = self_2002;
    other_1811 = other_1810;
    let _e4: Plane = self_2003;
    let _e7: Plane = self_2003;
    let _e11: MultiVector = other_1811;
    let _e14: MultiVector = other_1811;
    let _e23: Plane = self_2003;
    let _e26: MultiVector = other_1811;
    let _e29: MultiVector = other_1811;
    let _e32: MultiVector = other_1811;
    let _e35: MultiVector = other_1811;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g4_.w, _e14.g4_.x)) * vec2<f32>(-1.0, 0.0)), ((_e23.g0_.xxxw * vec4<f32>(_e26.g0_.x, _e29.g0_.x, _e32.g0_.x, _e35.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn plane_multi_vector_right_contraction(self_2004: Plane, other_1812: MultiVector) -> MultiVector {
    var self_2005: Plane;
    var other_1813: MultiVector;

    self_2005 = self_2004;
    other_1813 = other_1812;
    let _e4: Plane = self_2005;
    let _e7: Plane = self_2005;
    let _e11: MultiVector = other_1813;
    let _e14: MultiVector = other_1813;
    let _e23: Plane = self_2005;
    let _e27: MultiVector = other_1813;
    let _e38: Plane = self_2005;
    let _e42: MultiVector = other_1813;
    let _e54: Plane = self_2005;
    let _e57: MultiVector = other_1813;
    let _e60: MultiVector = other_1813;
    let _e63: MultiVector = other_1813;
    let _e66: MultiVector = other_1813;
    let _e78: Plane = self_2005;
    let _e82: MultiVector = other_1813;
    let _e85: MultiVector = other_1813;
    let _e88: MultiVector = other_1813;
    let _e98: Plane = self_2005;
    let _e102: MultiVector = other_1813;
    let _e105: MultiVector = other_1813;
    let _e108: MultiVector = other_1813;
    let _e119: Plane = self_2005;
    let _e123: MultiVector = other_1813;
    let _e126: MultiVector = other_1813;
    let _e129: MultiVector = other_1813;
    let _e142: Plane = self_2005;
    let _e146: MultiVector = other_1813;
    let _e149: MultiVector = other_1813;
    let _e152: MultiVector = other_1813;
    let _e158: Plane = self_2005;
    let _e160: MultiVector = other_1813;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2<f32>(_e11.g4_.w, _e14.g4_.x)) * vec2<f32>(-1.0, 0.0)), ((((vec4(_e23.g0_.y) * vec4(_e27.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e38.g0_.z) * vec4(_e42.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e54.g0_.wwwx * vec4<f32>(_e57.g3_.x, _e60.g3_.y, _e63.g3_.z, _e66.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), ((((vec3(_e78.g0_.y) * vec3<f32>(_e82.g1_.z, _e85.g1_.z, _e88.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e98.g0_.z) * vec3<f32>(_e102.g1_.y, _e105.g1_.x, _e108.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e119.g0_.x) * vec3<f32>(_e123.g1_.x, _e126.g1_.z, _e129.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e142.g0_.w) * vec3<f32>(_e146.g1_.x, _e149.g1_.y, _e152.g1_.z))), (_e158.g0_ * vec4(_e160.g0_.x)));
}

fn plane_multi_vector_left_anti_contraction(self_2006: Plane, other_1814: MultiVector) -> MultiVector {
    var self_2007: Plane;
    var other_1815: MultiVector;

    self_2007 = self_2006;
    other_1815 = other_1814;
    let _e4: Plane = self_2007;
    let _e8: MultiVector = other_1815;
    let _e17: Plane = self_2007;
    let _e21: MultiVector = other_1815;
    let _e31: Plane = self_2007;
    let _e35: MultiVector = other_1815;
    let _e45: Plane = self_2007;
    let _e48: MultiVector = other_1815;
    let _e59: Plane = self_2007;
    let _e62: Plane = self_2007;
    let _e65: Plane = self_2007;
    let _e69: MultiVector = other_1815;
    let _e77: Plane = self_2007;
    let _e81: MultiVector = other_1815;
    let _e84: MultiVector = other_1815;
    let _e87: MultiVector = other_1815;
    let _e97: Plane = self_2007;
    let _e101: MultiVector = other_1815;
    let _e104: MultiVector = other_1815;
    let _e107: MultiVector = other_1815;
    let _e118: Plane = self_2007;
    let _e122: MultiVector = other_1815;
    let _e125: MultiVector = other_1815;
    let _e128: MultiVector = other_1815;
    let _e139: Plane = self_2007;
    let _e143: MultiVector = other_1815;
    let _e146: MultiVector = other_1815;
    let _e149: MultiVector = other_1815;
    let _e152: MultiVector = other_1815;
    let _e163: Plane = self_2007;
    let _e167: MultiVector = other_1815;
    let _e170: MultiVector = other_1815;
    let _e173: MultiVector = other_1815;
    let _e176: MultiVector = other_1815;
    let _e188: Plane = self_2007;
    let _e192: MultiVector = other_1815;
    let _e195: MultiVector = other_1815;
    let _e198: MultiVector = other_1815;
    let _e201: MultiVector = other_1815;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g4_.x)) * vec2<f32>(0.0, 1.0))), ((_e45.g0_.xyzx * vec4(_e48.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((vec3<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z) * vec3(_e69.g1_.w)) * vec3(-1.0)), ((((vec3(_e77.g0_.y) * vec3<f32>(_e81.g1_.z, _e84.g1_.z, _e87.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e97.g0_.z) * vec3<f32>(_e101.g1_.y, _e104.g1_.x, _e107.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e118.g0_.x) * vec3<f32>(_e122.g1_.x, _e125.g1_.z, _e128.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((vec4(_e139.g0_.y) * vec4<f32>(_e143.g2_.z, _e146.g2_.z, _e149.g2_.x, _e152.g3_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e163.g0_.z) * vec4<f32>(_e167.g2_.y, _e170.g2_.x, _e173.g2_.y, _e176.g3_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e188.g0_.x) * vec4<f32>(_e192.g2_.x, _e195.g2_.z, _e198.g2_.y, _e201.g3_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn plane_multi_vector_right_anti_contraction(self_2008: Plane, other_1816: MultiVector) -> MultiVector {
    var self_2009: Plane;
    var other_1817: MultiVector;

    self_2009 = self_2008;
    other_1817 = other_1816;
    let _e4: Plane = self_2009;
    let _e8: MultiVector = other_1817;
    let _e17: Plane = self_2009;
    let _e21: MultiVector = other_1817;
    let _e31: Plane = self_2009;
    let _e35: MultiVector = other_1817;
    let _e51: Plane = self_2009;
    let _e53: MultiVector = other_1817;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g4_.x)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (_e51.g0_ * vec4(_e53.g0_.y)));
}

fn plane_multi_vector_scalar_product(self_2010: Plane, other_1818: MultiVector) -> Scalar {
    var self_2011: Plane;
    var other_1819: MultiVector;

    self_2011 = self_2010;
    other_1819 = other_1818;
    let _e5: Plane = self_2011;
    let _e8: MultiVector = other_1819;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g4_.w)));
}

fn plane_multi_vector_dot(self_2012: Plane, other_1820: MultiVector) -> Scalar {
    var self_2013: Plane;
    var other_1821: MultiVector;

    self_2013 = self_2012;
    other_1821 = other_1820;
    let _e5: Plane = self_2013;
    let _e8: MultiVector = other_1821;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g4_.w)));
}

fn plane_multi_vector_anti_scalar_product(self_2014: Plane, other_1822: MultiVector) -> AntiScalar {
    var self_2015: Plane;
    var other_1823: MultiVector;

    self_2015 = self_2014;
    other_1823 = other_1822;
    let _e4: Plane = self_2015;
    let _e7: MultiVector = other_1823;
    let _e11: Plane = self_2015;
    let _e14: MultiVector = other_1823;
    let _e19: Plane = self_2015;
    let _e22: MultiVector = other_1823;
    return AntiScalar((((_e4.g0_.x * _e7.g4_.x) + (_e11.g0_.y * _e14.g4_.y)) + (_e19.g0_.z * _e22.g4_.z)));
}

fn plane_multi_vector_anti_dot(self_2016: Plane, other_1824: MultiVector) -> AntiScalar {
    var self_2017: Plane;
    var other_1825: MultiVector;

    self_2017 = self_2016;
    other_1825 = other_1824;
    let _e4: Plane = self_2017;
    let _e7: MultiVector = other_1825;
    let _e11: Plane = self_2017;
    let _e14: MultiVector = other_1825;
    let _e19: Plane = self_2017;
    let _e22: MultiVector = other_1825;
    return AntiScalar((((_e4.g0_.x * _e7.g4_.x) + (_e11.g0_.y * _e14.g4_.y)) + (_e19.g0_.z * _e22.g4_.z)));
}

fn plane_squared_magnitude(self_2018: Plane) -> Scalar {
    var self_2019: Plane;

    self_2019 = self_2018;
    let _e2: Plane = self_2019;
    let _e3: Plane = self_2019;
    let _e4: Plane = plane_reversal(_e3);
    let _e5: Scalar = plane_plane_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_magnitude(self_2020: Plane) -> Scalar {
    var self_2021: Plane;

    self_2021 = self_2020;
    let _e2: Plane = self_2021;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_bulk_norm(self_2022: Plane) -> Scalar {
    var self_2023: Plane;

    self_2023 = self_2022;
    let _e2: Plane = self_2023;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_squared_anti_magnitude(self_2024: Plane) -> AntiScalar {
    var self_2025: Plane;

    self_2025 = self_2024;
    let _e2: Plane = self_2025;
    let _e3: Plane = self_2025;
    let _e4: Plane = plane_anti_reversal(_e3);
    let _e5: AntiScalar = plane_plane_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_weight_norm(self_2026: Plane) -> AntiScalar {
    var self_2027: Plane;

    self_2027 = self_2026;
    let _e2: Plane = self_2027;
    let _e3: AntiScalar = plane_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn plane_geometric_norm(self_2028: Plane) -> HomogeneousMagnitude {
    var self_2029: Plane;

    self_2029 = self_2028;
    let _e2: Plane = self_2029;
    let _e3: Scalar = plane_bulk_norm(_e2);
    let _e4: Plane = self_2029;
    let _e5: AntiScalar = plane_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn plane_scale(self_2030: Plane, other_1826: f32) -> Plane {
    var self_2031: Plane;
    var other_1827: f32;

    self_2031 = self_2030;
    other_1827 = other_1826;
    let _e4: Plane = self_2031;
    let _e5: f32 = other_1827;
    let _e7: Plane = plane_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn plane_signum(self_2032: Plane) -> Plane {
    var self_2033: Plane;

    self_2033 = self_2032;
    let _e2: Plane = self_2033;
    let _e3: Plane = self_2033;
    let _e4: Scalar = plane_magnitude(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_inverse(self_2034: Plane) -> Plane {
    var self_2035: Plane;

    self_2035 = self_2034;
    let _e2: Plane = self_2035;
    let _e3: Plane = plane_reversal(_e2);
    let _e4: Plane = self_2035;
    let _e5: Scalar = plane_squared_magnitude(_e4);
    let _e10: Plane = plane_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn plane_unitize(self_2036: Plane) -> Plane {
    var self_2037: Plane;

    self_2037 = self_2036;
    let _e2: Plane = self_2037;
    let _e3: Plane = self_2037;
    let _e4: AntiScalar = plane_weight_norm(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_attitude(self_2038: Plane) -> Line {
    var self_2039: Plane;

    self_2039 = self_2038;
    let _e2: Plane = self_2039;
    let _e9: Line = plane_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn motor_zero() -> Motor {
    return Motor(vec4(0.0), vec3(0.0));
}

fn motor_one() -> Motor {
    return Motor(vec4(0.0), vec3(0.0));
}

fn motor_neg(self_2040: Motor) -> Motor {
    var self_2041: Motor;

    self_2041 = self_2040;
    let _e2: Motor = self_2041;
    let _e7: Motor = self_2041;
    return Motor((_e2.g0_ * vec4(-1.0)), (_e7.g1_ * vec3(-1.0)));
}

fn motor_automorphism(self_2042: Motor) -> Motor {
    var self_2043: Motor;

    self_2043 = self_2042;
    let _e2: Motor = self_2043;
    let _e4: Motor = self_2043;
    return Motor(_e2.g0_, _e4.g1_);
}

fn motor_reversal(self_2044: Motor) -> Motor {
    var self_2045: Motor;

    self_2045 = self_2044;
    let _e2: Motor = self_2045;
    let _e10: Motor = self_2045;
    return Motor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)), (_e10.g1_ * vec3(-1.0)));
}

fn motor_conjugation(self_2046: Motor) -> Motor {
    var self_2047: Motor;

    self_2047 = self_2046;
    let _e2: Motor = self_2047;
    let _e10: Motor = self_2047;
    return Motor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)), (_e10.g1_ * vec3(-1.0)));
}

fn motor_anti_reversal(self_2048: Motor) -> Motor {
    var self_2049: Motor;

    self_2049 = self_2048;
    let _e2: Motor = self_2049;
    let _e10: Motor = self_2049;
    return Motor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)), (_e10.g1_ * vec3(-1.0)));
}

fn motor_double_complement(self_2050: Motor) -> Motor {
    var self_2051: Motor;

    self_2051 = self_2050;
    let _e2: Motor = self_2051;
    let _e4: Motor = self_2051;
    return Motor(_e2.g0_, _e4.g1_);
}

fn motor_scalar_geometric_product(self_2052: Motor, other_1828: Scalar) -> Motor {
    var self_2053: Motor;
    var other_1829: Scalar;

    self_2053 = self_2052;
    other_1829 = other_1828;
    let _e4: Motor = self_2053;
    let _e6: Scalar = other_1829;
    let _e10: Motor = self_2053;
    let _e12: Scalar = other_1829;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_geometric_anti_product(self_2054: Motor, other_1830: Scalar) -> MultiVector {
    var self_2055: Motor;
    var other_1831: Scalar;

    self_2055 = self_2054;
    other_1831 = other_1830;
    let _e4: Motor = self_2055;
    let _e7: Motor = self_2055;
    let _e11: Scalar = other_1831;
    let _e23: Motor = self_2055;
    let _e26: Motor = self_2055;
    let _e29: Motor = self_2055;
    let _e33: Scalar = other_1831;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn motor_scalar_regressive_product(self_2056: Motor, other_1832: Scalar) -> Scalar {
    var self_2057: Motor;
    var other_1833: Scalar;

    self_2057 = self_2056;
    other_1833 = other_1832;
    let _e4: Motor = self_2057;
    let _e7: Scalar = other_1833;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_anti_wedge(self_2058: Motor, other_1834: Scalar) -> Scalar {
    var self_2059: Motor;
    var other_1835: Scalar;

    self_2059 = self_2058;
    other_1835 = other_1834;
    let _e4: Motor = self_2059;
    let _e7: Scalar = other_1835;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_meet(self_2060: Motor, other_1836: Scalar) -> Scalar {
    var self_2061: Motor;
    var other_1837: Scalar;

    self_2061 = self_2060;
    other_1837 = other_1836;
    let _e4: Motor = self_2061;
    let _e7: Scalar = other_1837;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_outer_product(self_2062: Motor, other_1838: Scalar) -> Motor {
    var self_2063: Motor;
    var other_1839: Scalar;

    self_2063 = self_2062;
    other_1839 = other_1838;
    let _e4: Motor = self_2063;
    let _e6: Scalar = other_1839;
    let _e10: Motor = self_2063;
    let _e12: Scalar = other_1839;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_wedge(self_2064: Motor, other_1840: Scalar) -> Motor {
    var self_2065: Motor;
    var other_1841: Scalar;

    self_2065 = self_2064;
    other_1841 = other_1840;
    let _e4: Motor = self_2065;
    let _e6: Scalar = other_1841;
    let _e10: Motor = self_2065;
    let _e12: Scalar = other_1841;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_join(self_2066: Motor, other_1842: Scalar) -> Motor {
    var self_2067: Motor;
    var other_1843: Scalar;

    self_2067 = self_2066;
    other_1843 = other_1842;
    let _e4: Motor = self_2067;
    let _e6: Scalar = other_1843;
    let _e10: Motor = self_2067;
    let _e12: Scalar = other_1843;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_inner_product(self_2068: Motor, other_1844: Scalar) -> Motor {
    var self_2069: Motor;
    var other_1845: Scalar;

    self_2069 = self_2068;
    other_1845 = other_1844;
    let _e4: Motor = self_2069;
    let _e6: Scalar = other_1845;
    let _e10: Motor = self_2069;
    let _e12: Scalar = other_1845;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_inner_anti_product(self_2070: Motor, other_1846: Scalar) -> MultiVector {
    var self_2071: Motor;
    var other_1847: Scalar;

    self_2071 = self_2070;
    other_1847 = other_1846;
    let _e4: Motor = self_2071;
    let _e7: Motor = self_2071;
    let _e11: Scalar = other_1847;
    let _e23: Motor = self_2071;
    let _e26: Motor = self_2071;
    let _e29: Motor = self_2071;
    let _e33: Scalar = other_1847;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn motor_scalar_right_contraction(self_2072: Motor, other_1848: Scalar) -> Motor {
    var self_2073: Motor;
    var other_1849: Scalar;

    self_2073 = self_2072;
    other_1849 = other_1848;
    let _e4: Motor = self_2073;
    let _e6: Scalar = other_1849;
    let _e10: Motor = self_2073;
    let _e12: Scalar = other_1849;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_scalar_left_anti_contraction(self_2074: Motor, other_1850: Scalar) -> MultiVector {
    var self_2075: Motor;
    var other_1851: Scalar;

    self_2075 = self_2074;
    other_1851 = other_1850;
    let _e4: Motor = self_2075;
    let _e7: Motor = self_2075;
    let _e11: Scalar = other_1851;
    let _e23: Motor = self_2075;
    let _e26: Motor = self_2075;
    let _e29: Motor = self_2075;
    let _e33: Scalar = other_1851;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn motor_anti_scalar_into(self_2076: Motor) -> AntiScalar {
    var self_2077: Motor;

    self_2077 = self_2076;
    let _e2: Motor = self_2077;
    return AntiScalar(_e2.g0_.w);
}

fn motor_anti_scalar_add(self_2078: Motor, other_1852: AntiScalar) -> Motor {
    var self_2079: Motor;
    var other_1853: AntiScalar;

    self_2079 = self_2078;
    other_1853 = other_1852;
    let _e4: Motor = self_2079;
    let _e6: AntiScalar = other_1853;
    let _e16: Motor = self_2079;
    return Motor((_e4.g0_ + (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_sub(self_2080: Motor, other_1854: AntiScalar) -> Motor {
    var self_2081: Motor;
    var other_1855: AntiScalar;

    self_2081 = self_2080;
    other_1855 = other_1854;
    let _e4: Motor = self_2081;
    let _e6: AntiScalar = other_1855;
    let _e16: Motor = self_2081;
    return Motor((_e4.g0_ - (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_geometric_product(self_2082: Motor, other_1856: AntiScalar) -> Rotor {
    var self_2083: Motor;
    var other_1857: AntiScalar;

    self_2083 = self_2082;
    other_1857 = other_1856;
    let _e4: Motor = self_2083;
    let _e7: Motor = self_2083;
    let _e10: Motor = self_2083;
    let _e13: Motor = self_2083;
    let _e17: AntiScalar = other_1857;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_anti_scalar_geometric_anti_product(self_2084: Motor, other_1858: AntiScalar) -> Motor {
    var self_2085: Motor;
    var other_1859: AntiScalar;

    self_2085 = self_2084;
    other_1859 = other_1858;
    let _e4: Motor = self_2085;
    let _e6: AntiScalar = other_1859;
    let _e10: Motor = self_2085;
    let _e12: AntiScalar = other_1859;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_regressive_product(self_2086: Motor, other_1860: AntiScalar) -> Motor {
    var self_2087: Motor;
    var other_1861: AntiScalar;

    self_2087 = self_2086;
    other_1861 = other_1860;
    let _e4: Motor = self_2087;
    let _e6: AntiScalar = other_1861;
    let _e10: Motor = self_2087;
    let _e12: AntiScalar = other_1861;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_anti_wedge(self_2088: Motor, other_1862: AntiScalar) -> Motor {
    var self_2089: Motor;
    var other_1863: AntiScalar;

    self_2089 = self_2088;
    other_1863 = other_1862;
    let _e4: Motor = self_2089;
    let _e6: AntiScalar = other_1863;
    let _e10: Motor = self_2089;
    let _e12: AntiScalar = other_1863;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_meet(self_2090: Motor, other_1864: AntiScalar) -> Motor {
    var self_2091: Motor;
    var other_1865: AntiScalar;

    self_2091 = self_2090;
    other_1865 = other_1864;
    let _e4: Motor = self_2091;
    let _e6: AntiScalar = other_1865;
    let _e10: Motor = self_2091;
    let _e12: AntiScalar = other_1865;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_inner_product(self_2092: Motor, other_1866: AntiScalar) -> Rotor {
    var self_2093: Motor;
    var other_1867: AntiScalar;

    self_2093 = self_2092;
    other_1867 = other_1866;
    let _e4: Motor = self_2093;
    let _e7: Motor = self_2093;
    let _e10: Motor = self_2093;
    let _e13: Motor = self_2093;
    let _e17: AntiScalar = other_1867;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_anti_scalar_inner_anti_product(self_2094: Motor, other_1868: AntiScalar) -> Motor {
    var self_2095: Motor;
    var other_1869: AntiScalar;

    self_2095 = self_2094;
    other_1869 = other_1868;
    let _e4: Motor = self_2095;
    let _e6: AntiScalar = other_1869;
    let _e10: Motor = self_2095;
    let _e12: AntiScalar = other_1869;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_left_contraction(self_2096: Motor, other_1870: AntiScalar) -> Rotor {
    var self_2097: Motor;
    var other_1871: AntiScalar;

    self_2097 = self_2096;
    other_1871 = other_1870;
    let _e4: Motor = self_2097;
    let _e7: Motor = self_2097;
    let _e10: Motor = self_2097;
    let _e13: Motor = self_2097;
    let _e17: AntiScalar = other_1871;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4(_e17.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_anti_scalar_left_anti_contraction(self_2098: Motor, other_1872: AntiScalar) -> AntiScalar {
    var self_2099: Motor;
    var other_1873: AntiScalar;

    self_2099 = self_2098;
    other_1873 = other_1872;
    let _e4: Motor = self_2099;
    let _e7: AntiScalar = other_1873;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_anti_scalar_right_anti_contraction(self_2100: Motor, other_1874: AntiScalar) -> Motor {
    var self_2101: Motor;
    var other_1875: AntiScalar;

    self_2101 = self_2100;
    other_1875 = other_1874;
    let _e4: Motor = self_2101;
    let _e6: AntiScalar = other_1875;
    let _e10: Motor = self_2101;
    let _e12: AntiScalar = other_1875;
    return Motor((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec3(_e12.g0_)));
}

fn motor_anti_scalar_anti_scalar_product(self_2102: Motor, other_1876: AntiScalar) -> AntiScalar {
    var self_2103: Motor;
    var other_1877: AntiScalar;

    self_2103 = self_2102;
    other_1877 = other_1876;
    let _e4: Motor = self_2103;
    let _e7: AntiScalar = other_1877;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_anti_scalar_anti_dot(self_2104: Motor, other_1878: AntiScalar) -> AntiScalar {
    var self_2105: Motor;
    var other_1879: AntiScalar;

    self_2105 = self_2104;
    other_1879 = other_1878;
    let _e4: Motor = self_2105;
    let _e7: AntiScalar = other_1879;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_homogeneous_magnitude_geometric_product(self_2106: Motor, other_1880: HomogeneousMagnitude) -> Motor {
    var self_2107: Motor;
    var other_1881: HomogeneousMagnitude;

    self_2107 = self_2106;
    other_1881 = other_1880;
    let _e4: Motor = self_2107;
    let _e8: HomogeneousMagnitude = other_1881;
    let _e19: Motor = self_2107;
    let _e23: HomogeneousMagnitude = other_1881;
    let _e35: Motor = self_2107;
    let _e39: HomogeneousMagnitude = other_1881;
    let _e51: Motor = self_2107;
    let _e53: HomogeneousMagnitude = other_1881;
    let _e59: Motor = self_2107;
    let _e61: HomogeneousMagnitude = other_1881;
    return Motor((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (_e51.g0_ * vec4(_e53.g0_.x))), (_e59.g1_ * vec3(_e61.g0_.x)));
}

fn motor_homogeneous_magnitude_geometric_anti_product(self_2108: Motor, other_1882: HomogeneousMagnitude) -> MultiVector {
    var self_2109: Motor;
    var other_1883: HomogeneousMagnitude;

    self_2109 = self_2108;
    other_1883 = other_1882;
    let _e4: Motor = self_2109;
    let _e8: HomogeneousMagnitude = other_1883;
    let _e13: Motor = self_2109;
    let _e16: Motor = self_2109;
    let _e19: Motor = self_2109;
    let _e23: HomogeneousMagnitude = other_1883;
    let _e28: Motor = self_2109;
    let _e32: HomogeneousMagnitude = other_1883;
    let _e42: Motor = self_2109;
    let _e46: HomogeneousMagnitude = other_1883;
    let _e57: Motor = self_2109;
    let _e61: HomogeneousMagnitude = other_1883;
    let _e72: Motor = self_2109;
    let _e75: Motor = self_2109;
    let _e78: Motor = self_2109;
    let _e82: HomogeneousMagnitude = other_1883;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (((((vec3(_e28.g1_.x) * vec3(_e32.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e42.g1_.y) * vec3(_e46.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e57.g1_.z) * vec3(_e61.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z) * vec3(_e82.g0_.x))), vec4(0.0));
}

fn motor_homogeneous_magnitude_regressive_product(self_2110: Motor, other_1884: HomogeneousMagnitude) -> MultiVector {
    var self_2111: Motor;
    var other_1885: HomogeneousMagnitude;

    self_2111 = self_2110;
    other_1885 = other_1884;
    let _e4: Motor = self_2111;
    let _e8: HomogeneousMagnitude = other_1885;
    let _e13: Motor = self_2111;
    let _e16: Motor = self_2111;
    let _e19: Motor = self_2111;
    let _e23: HomogeneousMagnitude = other_1885;
    let _e28: Motor = self_2111;
    let _e30: HomogeneousMagnitude = other_1885;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (_e28.g1_ * vec3(_e30.g0_.y)), vec4(0.0));
}

fn motor_homogeneous_magnitude_anti_wedge(self_2112: Motor, other_1886: HomogeneousMagnitude) -> MultiVector {
    var self_2113: Motor;
    var other_1887: HomogeneousMagnitude;

    self_2113 = self_2112;
    other_1887 = other_1886;
    let _e4: Motor = self_2113;
    let _e8: HomogeneousMagnitude = other_1887;
    let _e13: Motor = self_2113;
    let _e16: Motor = self_2113;
    let _e19: Motor = self_2113;
    let _e23: HomogeneousMagnitude = other_1887;
    let _e28: Motor = self_2113;
    let _e30: HomogeneousMagnitude = other_1887;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (_e28.g1_ * vec3(_e30.g0_.y)), vec4(0.0));
}

fn motor_homogeneous_magnitude_meet(self_2114: Motor, other_1888: HomogeneousMagnitude) -> MultiVector {
    var self_2115: Motor;
    var other_1889: HomogeneousMagnitude;

    self_2115 = self_2114;
    other_1889 = other_1888;
    let _e4: Motor = self_2115;
    let _e8: HomogeneousMagnitude = other_1889;
    let _e13: Motor = self_2115;
    let _e16: Motor = self_2115;
    let _e19: Motor = self_2115;
    let _e23: HomogeneousMagnitude = other_1889;
    let _e28: Motor = self_2115;
    let _e30: HomogeneousMagnitude = other_1889;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (_e28.g1_ * vec3(_e30.g0_.y)), vec4(0.0));
}

fn motor_homogeneous_magnitude_outer_product(self_2116: Motor, other_1890: HomogeneousMagnitude) -> Motor {
    var self_2117: Motor;
    var other_1891: HomogeneousMagnitude;

    self_2117 = self_2116;
    other_1891 = other_1890;
    let _e4: Motor = self_2117;
    let _e6: HomogeneousMagnitude = other_1891;
    let _e11: Motor = self_2117;
    let _e13: HomogeneousMagnitude = other_1891;
    return Motor((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_wedge(self_2118: Motor, other_1892: HomogeneousMagnitude) -> Motor {
    var self_2119: Motor;
    var other_1893: HomogeneousMagnitude;

    self_2119 = self_2118;
    other_1893 = other_1892;
    let _e4: Motor = self_2119;
    let _e6: HomogeneousMagnitude = other_1893;
    let _e11: Motor = self_2119;
    let _e13: HomogeneousMagnitude = other_1893;
    return Motor((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_join(self_2120: Motor, other_1894: HomogeneousMagnitude) -> Motor {
    var self_2121: Motor;
    var other_1895: HomogeneousMagnitude;

    self_2121 = self_2120;
    other_1895 = other_1894;
    let _e4: Motor = self_2121;
    let _e6: HomogeneousMagnitude = other_1895;
    let _e11: Motor = self_2121;
    let _e13: HomogeneousMagnitude = other_1895;
    return Motor((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_inner_product(self_2122: Motor, other_1896: HomogeneousMagnitude) -> Motor {
    var self_2123: Motor;
    var other_1897: HomogeneousMagnitude;

    self_2123 = self_2122;
    other_1897 = other_1896;
    let _e4: Motor = self_2123;
    let _e8: HomogeneousMagnitude = other_1897;
    let _e19: Motor = self_2123;
    let _e23: HomogeneousMagnitude = other_1897;
    let _e35: Motor = self_2123;
    let _e39: HomogeneousMagnitude = other_1897;
    let _e51: Motor = self_2123;
    let _e53: HomogeneousMagnitude = other_1897;
    let _e59: Motor = self_2123;
    let _e61: HomogeneousMagnitude = other_1897;
    return Motor((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (_e51.g0_ * vec4(_e53.g0_.x))), (_e59.g1_ * vec3(_e61.g0_.x)));
}

fn motor_homogeneous_magnitude_inner_anti_product(self_2124: Motor, other_1898: HomogeneousMagnitude) -> MultiVector {
    var self_2125: Motor;
    var other_1899: HomogeneousMagnitude;

    self_2125 = self_2124;
    other_1899 = other_1898;
    let _e4: Motor = self_2125;
    let _e8: HomogeneousMagnitude = other_1899;
    let _e13: Motor = self_2125;
    let _e16: Motor = self_2125;
    let _e19: Motor = self_2125;
    let _e23: HomogeneousMagnitude = other_1899;
    let _e28: Motor = self_2125;
    let _e32: HomogeneousMagnitude = other_1899;
    let _e42: Motor = self_2125;
    let _e46: HomogeneousMagnitude = other_1899;
    let _e57: Motor = self_2125;
    let _e61: HomogeneousMagnitude = other_1899;
    let _e72: Motor = self_2125;
    let _e75: Motor = self_2125;
    let _e78: Motor = self_2125;
    let _e82: HomogeneousMagnitude = other_1899;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (((((vec3(_e28.g1_.x) * vec3(_e32.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e42.g1_.y) * vec3(_e46.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e57.g1_.z) * vec3(_e61.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z) * vec3(_e82.g0_.x))), vec4(0.0));
}

fn motor_homogeneous_magnitude_left_contraction(self_2126: Motor, other_1900: HomogeneousMagnitude) -> Rotor {
    var self_2127: Motor;
    var other_1901: HomogeneousMagnitude;

    self_2127 = self_2126;
    other_1901 = other_1900;
    let _e4: Motor = self_2127;
    let _e7: Motor = self_2127;
    let _e10: Motor = self_2127;
    let _e13: Motor = self_2127;
    let _e17: HomogeneousMagnitude = other_1901;
    let _e20: HomogeneousMagnitude = other_1901;
    let _e23: HomogeneousMagnitude = other_1901;
    let _e26: HomogeneousMagnitude = other_1901;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * vec4<f32>(_e17.g0_.y, _e20.g0_.y, _e23.g0_.y, _e26.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_homogeneous_magnitude_right_contraction(self_2128: Motor, other_1902: HomogeneousMagnitude) -> Motor {
    var self_2129: Motor;
    var other_1903: HomogeneousMagnitude;

    self_2129 = self_2128;
    other_1903 = other_1902;
    let _e4: Motor = self_2129;
    let _e6: HomogeneousMagnitude = other_1903;
    let _e11: Motor = self_2129;
    let _e13: HomogeneousMagnitude = other_1903;
    return Motor((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec3(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_left_anti_contraction(self_2130: Motor, other_1904: HomogeneousMagnitude) -> MultiVector {
    var self_2131: Motor;
    var other_1905: HomogeneousMagnitude;

    self_2131 = self_2130;
    other_1905 = other_1904;
    let _e4: Motor = self_2131;
    let _e8: HomogeneousMagnitude = other_1905;
    let _e15: Motor = self_2131;
    let _e18: Motor = self_2131;
    let _e21: Motor = self_2131;
    let _e25: HomogeneousMagnitude = other_1905;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.x)), vec4(0.0));
}

fn motor_homogeneous_magnitude_right_anti_contraction(self_2132: Motor, other_1906: HomogeneousMagnitude) -> Motor {
    var self_2133: Motor;
    var other_1907: HomogeneousMagnitude;

    self_2133 = self_2132;
    other_1907 = other_1906;
    let _e4: Motor = self_2133;
    let _e6: HomogeneousMagnitude = other_1907;
    let _e11: Motor = self_2133;
    let _e13: HomogeneousMagnitude = other_1907;
    return Motor((_e4.g0_ * vec4(_e6.g0_.y)), (_e11.g1_ * vec3(_e13.g0_.y)));
}

fn motor_homogeneous_magnitude_anti_scalar_product(self_2134: Motor, other_1908: HomogeneousMagnitude) -> AntiScalar {
    var self_2135: Motor;
    var other_1909: HomogeneousMagnitude;

    self_2135 = self_2134;
    other_1909 = other_1908;
    let _e4: Motor = self_2135;
    let _e7: HomogeneousMagnitude = other_1909;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn motor_homogeneous_magnitude_anti_dot(self_2136: Motor, other_1910: HomogeneousMagnitude) -> AntiScalar {
    var self_2137: Motor;
    var other_1911: HomogeneousMagnitude;

    self_2137 = self_2136;
    other_1911 = other_1910;
    let _e4: Motor = self_2137;
    let _e7: HomogeneousMagnitude = other_1911;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn motor_point_geometric_product(self_2138: Motor, other_1912: Point) -> Flector {
    var self_2139: Motor;
    var other_1913: Point;

    self_2139 = self_2138;
    other_1913 = other_1912;
    let _e4: Motor = self_2139;
    let _e8: Point = other_1913;
    let _e19: Motor = self_2139;
    let _e23: Point = other_1913;
    let _e35: Motor = self_2139;
    let _e39: Point = other_1913;
    let _e50: Motor = self_2139;
    let _e54: Point = other_1913;
    let _e65: Motor = self_2139;
    let _e69: Point = other_1913;
    let _e80: Motor = self_2139;
    let _e84: Point = other_1913;
    let _e96: Motor = self_2139;
    let _e100: Point = other_1913;
    let _e110: Motor = self_2139;
    let _e114: Point = other_1913;
    let _e125: Motor = self_2139;
    let _e129: Point = other_1913;
    let _e140: Motor = self_2139;
    let _e144: Point = other_1913;
    let _e155: Motor = self_2139;
    let _e159: Point = other_1913;
    let _e170: Motor = self_2139;
    let _e174: Point = other_1913;
    let _e185: Motor = self_2139;
    let _e189: Point = other_1913;
    return Flector((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e50.g1_.y) * _e54.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e65.g1_.z) * _e69.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e80.g0_.x) * vec4(_e84.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4(_e96.g0_.y) * _e100.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e110.g0_.z) * _e114.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e125.g0_.w) * _e129.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e140.g1_.x) * _e144.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e155.g1_.y) * _e159.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e170.g1_.z) * _e174.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e185.g0_.x) * _e189.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_point_geometric_anti_product(self_2140: Motor, other_1914: Point) -> Flector {
    var self_2141: Motor;
    var other_1915: Point;

    self_2141 = self_2140;
    other_1915 = other_1914;
    let _e4: Motor = self_2141;
    let _e8: Point = other_1915;
    let _e18: Motor = self_2141;
    let _e22: Point = other_1915;
    let _e33: Motor = self_2141;
    let _e37: Point = other_1915;
    let _e41: Motor = self_2141;
    let _e45: Point = other_1915;
    let _e57: Motor = self_2141;
    let _e61: Point = other_1915;
    let _e73: Motor = self_2141;
    let _e77: Point = other_1915;
    let _e89: Motor = self_2141;
    let _e93: Point = other_1915;
    let _e104: Motor = self_2141;
    let _e108: Point = other_1915;
    let _e118: Motor = self_2141;
    let _e122: Point = other_1915;
    let _e133: Motor = self_2141;
    let _e137: Point = other_1915;
    return Flector(((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g1_.x) * vec4(_e45.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e57.g1_.y) * vec4(_e61.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e73.g1_.z) * vec4(_e77.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e89.g0_.x) * _e93.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), ((((vec4(_e104.g0_.y) * _e108.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e118.g0_.z) * _e122.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e133.g0_.x) * _e137.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_point_regressive_product(self_2142: Motor, other_1916: Point) -> Point {
    var self_2143: Motor;
    var other_1917: Point;

    self_2143 = self_2142;
    other_1917 = other_1916;
    let _e4: Motor = self_2143;
    let _e8: Point = other_1917;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_anti_wedge(self_2144: Motor, other_1918: Point) -> Point {
    var self_2145: Motor;
    var other_1919: Point;

    self_2145 = self_2144;
    other_1919 = other_1918;
    let _e4: Motor = self_2145;
    let _e8: Point = other_1919;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_meet(self_2146: Motor, other_1920: Point) -> Point {
    var self_2147: Motor;
    var other_1921: Point;

    self_2147 = self_2146;
    other_1921 = other_1920;
    let _e4: Motor = self_2147;
    let _e8: Point = other_1921;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_outer_product(self_2148: Motor, other_1922: Point) -> Plane {
    var self_2149: Motor;
    var other_1923: Point;

    self_2149 = self_2148;
    other_1923 = other_1922;
    let _e4: Motor = self_2149;
    let _e8: Point = other_1923;
    let _e18: Motor = self_2149;
    let _e22: Point = other_1923;
    let _e33: Motor = self_2149;
    let _e37: Point = other_1923;
    let _e48: Motor = self_2149;
    let _e52: Point = other_1923;
    let _e63: Motor = self_2149;
    let _e67: Point = other_1923;
    let _e78: Motor = self_2149;
    let _e82: Point = other_1923;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_point_wedge(self_2150: Motor, other_1924: Point) -> Plane {
    var self_2151: Motor;
    var other_1925: Point;

    self_2151 = self_2150;
    other_1925 = other_1924;
    let _e4: Motor = self_2151;
    let _e8: Point = other_1925;
    let _e18: Motor = self_2151;
    let _e22: Point = other_1925;
    let _e33: Motor = self_2151;
    let _e37: Point = other_1925;
    let _e48: Motor = self_2151;
    let _e52: Point = other_1925;
    let _e63: Motor = self_2151;
    let _e67: Point = other_1925;
    let _e78: Motor = self_2151;
    let _e82: Point = other_1925;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_point_join(self_2152: Motor, other_1926: Point) -> Plane {
    var self_2153: Motor;
    var other_1927: Point;

    self_2153 = self_2152;
    other_1927 = other_1926;
    let _e4: Motor = self_2153;
    let _e8: Point = other_1927;
    let _e18: Motor = self_2153;
    let _e22: Point = other_1927;
    let _e33: Motor = self_2153;
    let _e37: Point = other_1927;
    let _e48: Motor = self_2153;
    let _e52: Point = other_1927;
    let _e63: Motor = self_2153;
    let _e67: Point = other_1927;
    let _e78: Motor = self_2153;
    let _e82: Point = other_1927;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_point_inner_product(self_2154: Motor, other_1928: Point) -> Flector {
    var self_2155: Motor;
    var other_1929: Point;

    self_2155 = self_2154;
    other_1929 = other_1928;
    let _e4: Motor = self_2155;
    let _e8: Point = other_1929;
    let _e19: Motor = self_2155;
    let _e23: Point = other_1929;
    let _e35: Motor = self_2155;
    let _e39: Point = other_1929;
    let _e50: Motor = self_2155;
    let _e54: Point = other_1929;
    let _e65: Motor = self_2155;
    let _e69: Point = other_1929;
    let _e80: Motor = self_2155;
    let _e84: Point = other_1929;
    let _e96: Motor = self_2155;
    let _e99: Point = other_1929;
    return Flector((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e50.g1_.y) * _e54.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e65.g1_.z) * _e69.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e80.g0_.x) * vec4(_e84.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e96.g0_.wwwx * _e99.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_point_inner_anti_product(self_2156: Motor, other_1930: Point) -> Flector {
    var self_2157: Motor;
    var other_1931: Point;

    self_2157 = self_2156;
    other_1931 = other_1930;
    let _e4: Motor = self_2157;
    let _e8: Point = other_1931;
    let _e11: Motor = self_2157;
    let _e15: Point = other_1931;
    let _e25: Motor = self_2157;
    let _e29: Point = other_1931;
    let _e40: Motor = self_2157;
    let _e44: Point = other_1931;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), ((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e40.g0_.x) * _e44.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_point_right_contraction(self_2158: Motor, other_1932: Point) -> Flector {
    var self_2159: Motor;
    var other_1933: Point;

    self_2159 = self_2158;
    other_1933 = other_1932;
    let _e4: Motor = self_2159;
    let _e8: Point = other_1933;
    let _e19: Motor = self_2159;
    let _e23: Point = other_1933;
    let _e35: Motor = self_2159;
    let _e39: Point = other_1933;
    let _e50: Motor = self_2159;
    let _e54: Point = other_1933;
    let _e65: Motor = self_2159;
    let _e69: Point = other_1933;
    let _e80: Motor = self_2159;
    let _e84: Point = other_1933;
    let _e96: Motor = self_2159;
    let _e99: Point = other_1933;
    return Flector((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e50.g1_.y) * _e54.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e65.g1_.z) * _e69.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e80.g0_.x) * vec4(_e84.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e96.g0_.wwwx * _e99.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_point_left_anti_contraction(self_2160: Motor, other_1934: Point) -> Flector {
    var self_2161: Motor;
    var other_1935: Point;

    self_2161 = self_2160;
    other_1935 = other_1934;
    let _e4: Motor = self_2161;
    let _e8: Point = other_1935;
    let _e11: Motor = self_2161;
    let _e15: Point = other_1935;
    let _e25: Motor = self_2161;
    let _e29: Point = other_1935;
    let _e40: Motor = self_2161;
    let _e44: Point = other_1935;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), ((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e40.g0_.x) * _e44.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_line_into(self_2162: Motor) -> Line {
    var self_2163: Motor;

    self_2163 = self_2162;
    let _e2: Motor = self_2163;
    let _e5: Motor = self_2163;
    let _e8: Motor = self_2163;
    let _e12: Motor = self_2163;
    return Line(vec3<f32>(_e2.g0_.x, _e5.g0_.y, _e8.g0_.z), _e12.g1_);
}

fn motor_line_add(self_2164: Motor, other_1936: Line) -> Motor {
    var self_2165: Motor;
    var other_1937: Line;

    self_2165 = self_2164;
    other_1937 = other_1936;
    let _e4: Motor = self_2165;
    let _e6: Line = other_1937;
    let _e9: Line = other_1937;
    let _e12: Line = other_1937;
    let _e15: Line = other_1937;
    let _e26: Motor = self_2165;
    let _e28: Line = other_1937;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ + _e28.g1_));
}

fn motor_line_sub(self_2166: Motor, other_1938: Line) -> Motor {
    var self_2167: Motor;
    var other_1939: Line;

    self_2167 = self_2166;
    other_1939 = other_1938;
    let _e4: Motor = self_2167;
    let _e6: Line = other_1939;
    let _e9: Line = other_1939;
    let _e12: Line = other_1939;
    let _e15: Line = other_1939;
    let _e26: Motor = self_2167;
    let _e28: Line = other_1939;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ - _e28.g1_));
}

fn motor_line_geometric_product(self_2168: Motor, other_1940: Line) -> MultiVector {
    var self_2169: Motor;
    var other_1941: Line;

    self_2169 = self_2168;
    other_1941 = other_1940;
    let _e4: Motor = self_2169;
    let _e8: Line = other_1941;
    let _e17: Motor = self_2169;
    let _e21: Line = other_1941;
    let _e31: Motor = self_2169;
    let _e35: Line = other_1941;
    let _e38: Line = other_1941;
    let _e44: Motor = self_2169;
    let _e48: Line = other_1941;
    let _e51: Line = other_1941;
    let _e57: Motor = self_2169;
    let _e61: Line = other_1941;
    let _e64: Line = other_1941;
    let _e70: Motor = self_2169;
    let _e74: Line = other_1941;
    let _e86: Motor = self_2169;
    let _e90: Line = other_1941;
    let _e99: Motor = self_2169;
    let _e103: Line = other_1941;
    let _e113: Motor = self_2169;
    let _e117: Line = other_1941;
    let _e121: Motor = self_2169;
    let _e125: Line = other_1941;
    let _e135: Motor = self_2169;
    let _e139: Line = other_1941;
    let _e149: Motor = self_2169;
    let _e153: Line = other_1941;
    let _e163: Motor = self_2169;
    let _e167: Line = other_1941;
    let _e177: Motor = self_2169;
    let _e181: Line = other_1941;
    let _e190: Motor = self_2169;
    let _e194: Line = other_1941;
    let _e204: Motor = self_2169;
    let _e208: Line = other_1941;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g1_.x) * vec2<f32>(_e35.g1_.x, _e38.g0_.x))) - (vec2(_e44.g1_.y) * vec2<f32>(_e48.g1_.y, _e51.g0_.y))) - (vec2(_e57.g1_.z) * vec2<f32>(_e61.g1_.z, _e64.g0_.z))) + ((vec2(_e70.g0_.x) * vec2(_e74.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), ((((((((vec3(_e86.g0_.y) * _e90.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e99.g0_.z) * _e103.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + (vec3(_e113.g0_.w) * _e117.g1_)) + ((vec3(_e121.g1_.x) * _e125.g0_.zzy) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e135.g1_.y) * _e139.g0_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e149.g1_.z) * _e153.g0_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e163.g0_.x) * _e167.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e177.g1_.y) * _e181.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e190.g1_.z) * _e194.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e204.g1_.x) * _e208.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn motor_line_geometric_anti_product(self_2170: Motor, other_1942: Line) -> MultiVector {
    var self_2171: Motor;
    var other_1943: Line;

    self_2171 = self_2170;
    other_1943 = other_1942;
    let _e6: Motor = self_2171;
    let _e10: Line = other_1943;
    let _e13: Line = other_1943;
    let _e19: Motor = self_2171;
    let _e23: Line = other_1943;
    let _e26: Line = other_1943;
    let _e32: Motor = self_2171;
    let _e36: Line = other_1943;
    let _e39: Line = other_1943;
    let _e45: Motor = self_2171;
    let _e49: Line = other_1943;
    let _e59: Motor = self_2171;
    let _e63: Line = other_1943;
    let _e73: Motor = self_2171;
    let _e77: Line = other_1943;
    let _e89: Motor = self_2171;
    let _e93: Line = other_1943;
    let _e102: Motor = self_2171;
    let _e106: Line = other_1943;
    let _e116: Motor = self_2171;
    let _e120: Line = other_1943;
    let _e124: Motor = self_2171;
    let _e128: Line = other_1943;
    let _e138: Motor = self_2171;
    let _e142: Line = other_1943;
    let _e151: Motor = self_2171;
    let _e155: Line = other_1943;
    let _e165: Motor = self_2171;
    let _e169: Line = other_1943;
    let _e173: Motor = self_2171;
    let _e177: Line = other_1943;
    let _e187: Motor = self_2171;
    let _e191: Line = other_1943;
    let _e201: Motor = self_2171;
    let _e205: Line = other_1943;
    let _e215: Motor = self_2171;
    let _e219: Line = other_1943;
    return MultiVector(((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.x) * vec2(_e77.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (((((vec3(_e89.g0_.y) * _e93.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e102.g0_.z) * _e106.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e116.g0_.w) * _e120.g0_)) + ((vec3(_e124.g0_.x) * _e128.g0_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), ((((((((vec3(_e138.g0_.y) * _e142.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e151.g0_.z) * _e155.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e165.g0_.w) * _e169.g1_)) + ((vec3(_e173.g1_.x) * _e177.g0_.zzy) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e187.g1_.y) * _e191.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e201.g1_.z) * _e205.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e215.g0_.x) * _e219.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn motor_line_regressive_product(self_2172: Motor, other_1944: Line) -> MultiVector {
    var self_2173: Motor;
    var other_1945: Line;

    self_2173 = self_2172;
    other_1945 = other_1944;
    let _e4: Motor = self_2173;
    let _e8: Line = other_1945;
    let _e17: Motor = self_2173;
    let _e21: Line = other_1945;
    let _e31: Motor = self_2173;
    let _e35: Line = other_1945;
    let _e45: Motor = self_2173;
    let _e49: Line = other_1945;
    let _e59: Motor = self_2173;
    let _e63: Line = other_1945;
    let _e73: Motor = self_2173;
    let _e77: Line = other_1945;
    let _e89: Motor = self_2173;
    let _e93: Line = other_1945;
    let _e96: Motor = self_2173;
    let _e100: Line = other_1945;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e89.g0_.w) * _e93.g0_), (vec3(_e96.g0_.w) * _e100.g1_), vec4(0.0));
}

fn motor_line_anti_wedge(self_2174: Motor, other_1946: Line) -> MultiVector {
    var self_2175: Motor;
    var other_1947: Line;

    self_2175 = self_2174;
    other_1947 = other_1946;
    let _e4: Motor = self_2175;
    let _e8: Line = other_1947;
    let _e17: Motor = self_2175;
    let _e21: Line = other_1947;
    let _e31: Motor = self_2175;
    let _e35: Line = other_1947;
    let _e45: Motor = self_2175;
    let _e49: Line = other_1947;
    let _e59: Motor = self_2175;
    let _e63: Line = other_1947;
    let _e73: Motor = self_2175;
    let _e77: Line = other_1947;
    let _e89: Motor = self_2175;
    let _e93: Line = other_1947;
    let _e96: Motor = self_2175;
    let _e100: Line = other_1947;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e89.g0_.w) * _e93.g0_), (vec3(_e96.g0_.w) * _e100.g1_), vec4(0.0));
}

fn motor_line_meet(self_2176: Motor, other_1948: Line) -> MultiVector {
    var self_2177: Motor;
    var other_1949: Line;

    self_2177 = self_2176;
    other_1949 = other_1948;
    let _e4: Motor = self_2177;
    let _e8: Line = other_1949;
    let _e17: Motor = self_2177;
    let _e21: Line = other_1949;
    let _e31: Motor = self_2177;
    let _e35: Line = other_1949;
    let _e45: Motor = self_2177;
    let _e49: Line = other_1949;
    let _e59: Motor = self_2177;
    let _e63: Line = other_1949;
    let _e73: Motor = self_2177;
    let _e77: Line = other_1949;
    let _e89: Motor = self_2177;
    let _e93: Line = other_1949;
    let _e96: Motor = self_2177;
    let _e100: Line = other_1949;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e89.g0_.w) * _e93.g0_), (vec3(_e96.g0_.w) * _e100.g1_), vec4(0.0));
}

fn motor_line_outer_product(self_2178: Motor, other_1950: Line) -> AntiScalar {
    var self_2179: Motor;
    var other_1951: Line;

    self_2179 = self_2178;
    other_1951 = other_1950;
    let _e5: Motor = self_2179;
    let _e8: Line = other_1951;
    let _e13: Motor = self_2179;
    let _e16: Line = other_1951;
    let _e21: Motor = self_2179;
    let _e24: Line = other_1951;
    let _e29: Motor = self_2179;
    let _e32: Line = other_1951;
    let _e37: Motor = self_2179;
    let _e40: Line = other_1951;
    let _e45: Motor = self_2179;
    let _e48: Line = other_1951;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_wedge(self_2180: Motor, other_1952: Line) -> AntiScalar {
    var self_2181: Motor;
    var other_1953: Line;

    self_2181 = self_2180;
    other_1953 = other_1952;
    let _e5: Motor = self_2181;
    let _e8: Line = other_1953;
    let _e13: Motor = self_2181;
    let _e16: Line = other_1953;
    let _e21: Motor = self_2181;
    let _e24: Line = other_1953;
    let _e29: Motor = self_2181;
    let _e32: Line = other_1953;
    let _e37: Motor = self_2181;
    let _e40: Line = other_1953;
    let _e45: Motor = self_2181;
    let _e48: Line = other_1953;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_join(self_2182: Motor, other_1954: Line) -> AntiScalar {
    var self_2183: Motor;
    var other_1955: Line;

    self_2183 = self_2182;
    other_1955 = other_1954;
    let _e5: Motor = self_2183;
    let _e8: Line = other_1955;
    let _e13: Motor = self_2183;
    let _e16: Line = other_1955;
    let _e21: Motor = self_2183;
    let _e24: Line = other_1955;
    let _e29: Motor = self_2183;
    let _e32: Line = other_1955;
    let _e37: Motor = self_2183;
    let _e40: Line = other_1955;
    let _e45: Motor = self_2183;
    let _e48: Line = other_1955;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_inner_product(self_2184: Motor, other_1956: Line) -> MultiVector {
    var self_2185: Motor;
    var other_1957: Line;

    self_2185 = self_2184;
    other_1957 = other_1956;
    let _e4: Motor = self_2185;
    let _e8: Line = other_1957;
    let _e17: Motor = self_2185;
    let _e21: Line = other_1957;
    let _e31: Motor = self_2185;
    let _e35: Line = other_1957;
    let _e47: Motor = self_2185;
    let _e51: Line = other_1957;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn motor_line_inner_anti_product(self_2186: Motor, other_1958: Line) -> Motor {
    var self_2187: Motor;
    var other_1959: Line;

    self_2187 = self_2186;
    other_1959 = other_1958;
    let _e4: Motor = self_2187;
    let _e8: Line = other_1959;
    let _e19: Motor = self_2187;
    let _e23: Line = other_1959;
    let _e35: Motor = self_2187;
    let _e38: Line = other_1959;
    let _e41: Line = other_1959;
    let _e44: Line = other_1959;
    let _e47: Line = other_1959;
    let _e59: Motor = self_2187;
    let _e63: Line = other_1959;
    return Motor(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn motor_line_left_contraction(self_2188: Motor, other_1960: Line) -> Scalar {
    var self_2189: Motor;
    var other_1961: Line;

    self_2189 = self_2188;
    other_1961 = other_1960;
    let _e5: Motor = self_2189;
    let _e8: Line = other_1961;
    let _e13: Motor = self_2189;
    let _e16: Line = other_1961;
    let _e21: Motor = self_2189;
    let _e24: Line = other_1961;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_right_contraction(self_2190: Motor, other_1962: Line) -> MultiVector {
    var self_2191: Motor;
    var other_1963: Line;

    self_2191 = self_2190;
    other_1963 = other_1962;
    let _e4: Motor = self_2191;
    let _e8: Line = other_1963;
    let _e17: Motor = self_2191;
    let _e21: Line = other_1963;
    let _e31: Motor = self_2191;
    let _e35: Line = other_1963;
    let _e47: Motor = self_2191;
    let _e51: Line = other_1963;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn motor_line_left_anti_contraction(self_2192: Motor, other_1964: Line) -> Motor {
    var self_2193: Motor;
    var other_1965: Line;

    self_2193 = self_2192;
    other_1965 = other_1964;
    let _e4: Motor = self_2193;
    let _e8: Line = other_1965;
    let _e19: Motor = self_2193;
    let _e23: Line = other_1965;
    let _e35: Motor = self_2193;
    let _e38: Line = other_1965;
    let _e41: Line = other_1965;
    let _e44: Line = other_1965;
    let _e47: Line = other_1965;
    let _e59: Motor = self_2193;
    let _e63: Line = other_1965;
    return Motor(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn motor_line_right_anti_contraction(self_2194: Motor, other_1966: Line) -> AntiScalar {
    var self_2195: Motor;
    var other_1967: Line;

    self_2195 = self_2194;
    other_1967 = other_1966;
    let _e5: Motor = self_2195;
    let _e8: Line = other_1967;
    let _e13: Motor = self_2195;
    let _e16: Line = other_1967;
    let _e21: Motor = self_2195;
    let _e24: Line = other_1967;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_line_scalar_product(self_2196: Motor, other_1968: Line) -> Scalar {
    var self_2197: Motor;
    var other_1969: Line;

    self_2197 = self_2196;
    other_1969 = other_1968;
    let _e5: Motor = self_2197;
    let _e8: Line = other_1969;
    let _e13: Motor = self_2197;
    let _e16: Line = other_1969;
    let _e21: Motor = self_2197;
    let _e24: Line = other_1969;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_dot(self_2198: Motor, other_1970: Line) -> Scalar {
    var self_2199: Motor;
    var other_1971: Line;

    self_2199 = self_2198;
    other_1971 = other_1970;
    let _e5: Motor = self_2199;
    let _e8: Line = other_1971;
    let _e13: Motor = self_2199;
    let _e16: Line = other_1971;
    let _e21: Motor = self_2199;
    let _e24: Line = other_1971;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_anti_scalar_product(self_2200: Motor, other_1972: Line) -> AntiScalar {
    var self_2201: Motor;
    var other_1973: Line;

    self_2201 = self_2200;
    other_1973 = other_1972;
    let _e5: Motor = self_2201;
    let _e8: Line = other_1973;
    let _e13: Motor = self_2201;
    let _e16: Line = other_1973;
    let _e21: Motor = self_2201;
    let _e24: Line = other_1973;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_line_anti_dot(self_2202: Motor, other_1974: Line) -> AntiScalar {
    var self_2203: Motor;
    var other_1975: Line;

    self_2203 = self_2202;
    other_1975 = other_1974;
    let _e5: Motor = self_2203;
    let _e8: Line = other_1975;
    let _e13: Motor = self_2203;
    let _e16: Line = other_1975;
    let _e21: Motor = self_2203;
    let _e24: Line = other_1975;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_plane_geometric_product(self_2204: Motor, other_1976: Plane) -> Flector {
    var self_2205: Motor;
    var other_1977: Plane;

    self_2205 = self_2204;
    other_1977 = other_1976;
    let _e4: Motor = self_2205;
    let _e8: Plane = other_1977;
    let _e18: Motor = self_2205;
    let _e22: Plane = other_1977;
    let _e33: Motor = self_2205;
    let _e37: Plane = other_1977;
    let _e48: Motor = self_2205;
    let _e51: Plane = other_1977;
    let _e62: Motor = self_2205;
    let _e66: Plane = other_1977;
    let _e76: Motor = self_2205;
    let _e80: Plane = other_1977;
    let _e91: Motor = self_2205;
    let _e95: Plane = other_1977;
    let _e106: Motor = self_2205;
    let _e109: Plane = other_1977;
    return Flector((((((vec4(_e4.g1_.x) * _e8.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((_e48.g0_.xxxw * _e51.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec4(_e62.g1_.x) * _e66.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e76.g1_.y) * _e80.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e91.g1_.z) * _e95.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((_e106.g0_.xyzx * _e109.g0_.wwwx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn motor_plane_geometric_anti_product(self_2206: Motor, other_1978: Plane) -> Flector {
    var self_2207: Motor;
    var other_1979: Plane;

    self_2207 = self_2206;
    other_1979 = other_1978;
    let _e4: Motor = self_2207;
    let _e8: Plane = other_1979;
    let _e18: Motor = self_2207;
    let _e22: Plane = other_1979;
    let _e33: Motor = self_2207;
    let _e37: Plane = other_1979;
    let _e48: Motor = self_2207;
    let _e52: Plane = other_1979;
    let _e63: Motor = self_2207;
    let _e67: Plane = other_1979;
    let _e78: Motor = self_2207;
    let _e82: Plane = other_1979;
    let _e93: Motor = self_2207;
    let _e97: Plane = other_1979;
    let _e107: Motor = self_2207;
    let _e111: Plane = other_1979;
    let _e122: Motor = self_2207;
    let _e126: Plane = other_1979;
    let _e130: Motor = self_2207;
    let _e134: Plane = other_1979;
    let _e146: Motor = self_2207;
    let _e150: Plane = other_1979;
    let _e162: Motor = self_2207;
    let _e166: Plane = other_1979;
    let _e178: Motor = self_2207;
    let _e182: Plane = other_1979;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((((((((vec4(_e93.g0_.y) * _e97.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e107.g0_.z) * _e111.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e122.g0_.w) * _e126.g0_)) + ((vec4(_e130.g1_.x) * vec4(_e134.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e146.g1_.y) * vec4(_e150.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e162.g1_.z) * vec4(_e166.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e178.g0_.x) * _e182.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_plane_regressive_product(self_2208: Motor, other_1980: Plane) -> Flector {
    var self_2209: Motor;
    var other_1981: Plane;

    self_2209 = self_2208;
    other_1981 = other_1980;
    let _e4: Motor = self_2209;
    let _e8: Plane = other_1981;
    let _e18: Motor = self_2209;
    let _e22: Plane = other_1981;
    let _e33: Motor = self_2209;
    let _e37: Plane = other_1981;
    let _e48: Motor = self_2209;
    let _e52: Plane = other_1981;
    let _e63: Motor = self_2209;
    let _e67: Plane = other_1981;
    let _e78: Motor = self_2209;
    let _e82: Plane = other_1981;
    let _e93: Motor = self_2209;
    let _e97: Plane = other_1981;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e93.g0_.w) * _e97.g0_));
}

fn motor_plane_anti_wedge(self_2210: Motor, other_1982: Plane) -> Flector {
    var self_2211: Motor;
    var other_1983: Plane;

    self_2211 = self_2210;
    other_1983 = other_1982;
    let _e4: Motor = self_2211;
    let _e8: Plane = other_1983;
    let _e18: Motor = self_2211;
    let _e22: Plane = other_1983;
    let _e33: Motor = self_2211;
    let _e37: Plane = other_1983;
    let _e48: Motor = self_2211;
    let _e52: Plane = other_1983;
    let _e63: Motor = self_2211;
    let _e67: Plane = other_1983;
    let _e78: Motor = self_2211;
    let _e82: Plane = other_1983;
    let _e93: Motor = self_2211;
    let _e97: Plane = other_1983;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e93.g0_.w) * _e97.g0_));
}

fn motor_plane_meet(self_2212: Motor, other_1984: Plane) -> Flector {
    var self_2213: Motor;
    var other_1985: Plane;

    self_2213 = self_2212;
    other_1985 = other_1984;
    let _e4: Motor = self_2213;
    let _e8: Plane = other_1985;
    let _e18: Motor = self_2213;
    let _e22: Plane = other_1985;
    let _e33: Motor = self_2213;
    let _e37: Plane = other_1985;
    let _e48: Motor = self_2213;
    let _e52: Plane = other_1985;
    let _e63: Motor = self_2213;
    let _e67: Plane = other_1985;
    let _e78: Motor = self_2213;
    let _e82: Plane = other_1985;
    let _e93: Motor = self_2213;
    let _e97: Plane = other_1985;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e93.g0_.w) * _e97.g0_));
}

fn motor_plane_inner_product(self_2214: Motor, other_1986: Plane) -> Point {
    var self_2215: Motor;
    var other_1987: Plane;

    self_2215 = self_2214;
    other_1987 = other_1986;
    let _e4: Motor = self_2215;
    let _e8: Plane = other_1987;
    let _e18: Motor = self_2215;
    let _e22: Plane = other_1987;
    let _e33: Motor = self_2215;
    let _e37: Plane = other_1987;
    let _e48: Motor = self_2215;
    let _e51: Plane = other_1987;
    return Point((((((vec4(_e4.g1_.x) * _e8.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((_e48.g0_.xxxw * _e51.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_plane_inner_anti_product(self_2216: Motor, other_1988: Plane) -> Plane {
    var self_2217: Motor;
    var other_1989: Plane;

    self_2217 = self_2216;
    other_1989 = other_1988;
    let _e4: Motor = self_2217;
    let _e8: Plane = other_1989;
    let _e18: Motor = self_2217;
    let _e22: Plane = other_1989;
    let _e33: Motor = self_2217;
    let _e37: Plane = other_1989;
    let _e41: Motor = self_2217;
    let _e45: Plane = other_1989;
    let _e57: Motor = self_2217;
    let _e61: Plane = other_1989;
    let _e73: Motor = self_2217;
    let _e77: Plane = other_1989;
    let _e89: Motor = self_2217;
    let _e93: Plane = other_1989;
    return Plane(((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g1_.x) * vec4(_e45.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e57.g1_.y) * vec4(_e61.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e73.g1_.z) * vec4(_e77.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e89.g0_.x) * _e93.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_plane_left_contraction(self_2218: Motor, other_1990: Plane) -> Point {
    var self_2219: Motor;
    var other_1991: Plane;

    self_2219 = self_2218;
    other_1991 = other_1990;
    let _e4: Motor = self_2219;
    let _e8: Plane = other_1991;
    let _e18: Motor = self_2219;
    let _e22: Plane = other_1991;
    let _e33: Motor = self_2219;
    let _e37: Plane = other_1991;
    return Point(((((vec4(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_plane_right_contraction(self_2220: Motor, other_1992: Plane) -> Point {
    var self_2221: Motor;
    var other_1993: Plane;

    self_2221 = self_2220;
    other_1993 = other_1992;
    let _e4: Motor = self_2221;
    let _e7: Plane = other_1993;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn motor_plane_left_anti_contraction(self_2222: Motor, other_1994: Plane) -> Plane {
    var self_2223: Motor;
    var other_1995: Plane;

    self_2223 = self_2222;
    other_1995 = other_1994;
    let _e4: Motor = self_2223;
    let _e8: Plane = other_1995;
    return Plane((vec4(_e4.g0_.w) * _e8.g0_));
}

fn motor_plane_right_anti_contraction(self_2224: Motor, other_1996: Plane) -> Plane {
    var self_2225: Motor;
    var other_1997: Plane;

    self_2225 = self_2224;
    other_1997 = other_1996;
    let _e4: Motor = self_2225;
    let _e8: Plane = other_1997;
    let _e18: Motor = self_2225;
    let _e22: Plane = other_1997;
    let _e33: Motor = self_2225;
    let _e37: Plane = other_1997;
    let _e49: Motor = self_2225;
    let _e53: Plane = other_1997;
    let _e65: Motor = self_2225;
    let _e69: Plane = other_1997;
    let _e81: Motor = self_2225;
    let _e85: Plane = other_1997;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * vec4(_e37.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.y) * vec4(_e53.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e65.g1_.z) * vec4(_e69.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e81.g0_.x) * _e85.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_motor_add(self_2226: Motor, other_1998: Motor) -> Motor {
    var self_2227: Motor;
    var other_1999: Motor;

    self_2227 = self_2226;
    other_1999 = other_1998;
    let _e4: Motor = self_2227;
    let _e6: Motor = other_1999;
    let _e9: Motor = self_2227;
    let _e11: Motor = other_1999;
    return Motor((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn motor_motor_sub(self_2228: Motor, other_2000: Motor) -> Motor {
    var self_2229: Motor;
    var other_2001: Motor;

    self_2229 = self_2228;
    other_2001 = other_2000;
    let _e4: Motor = self_2229;
    let _e6: Motor = other_2001;
    let _e9: Motor = self_2229;
    let _e11: Motor = other_2001;
    return Motor((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn motor_motor_mul(self_2230: Motor, other_2002: Motor) -> Motor {
    var self_2231: Motor;
    var other_2003: Motor;

    self_2231 = self_2230;
    other_2003 = other_2002;
    let _e4: Motor = self_2231;
    let _e6: Motor = other_2003;
    let _e9: Motor = self_2231;
    let _e11: Motor = other_2003;
    return Motor((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn motor_motor_div(self_2232: Motor, other_2004: Motor) -> Motor {
    var self_2233: Motor;
    var other_2005: Motor;

    self_2233 = self_2232;
    other_2005 = other_2004;
    let _e4: Motor = self_2233;
    let _e7: Motor = self_2233;
    let _e10: Motor = self_2233;
    let _e13: Motor = self_2233;
    let _e23: Motor = other_2005;
    let _e26: Motor = other_2005;
    let _e29: Motor = other_2005;
    let _e32: Motor = other_2005;
    let _e43: Motor = self_2233;
    let _e46: Motor = self_2233;
    let _e49: Motor = self_2233;
    let _e58: Motor = other_2005;
    let _e61: Motor = other_2005;
    let _e64: Motor = other_2005;
    return Motor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e58.g1_.x, _e61.g1_.y, _e64.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn motor_motor_geometric_product(self_2234: Motor, other_2006: Motor) -> MultiVector {
    var self_2235: Motor;
    var other_2007: Motor;

    self_2235 = self_2234;
    other_2007 = other_2006;
    let _e4: Motor = self_2235;
    let _e8: Motor = other_2007;
    let _e17: Motor = self_2235;
    let _e21: Motor = other_2007;
    let _e31: Motor = self_2235;
    let _e35: Motor = other_2007;
    let _e38: Motor = other_2007;
    let _e44: Motor = self_2235;
    let _e48: Motor = other_2007;
    let _e51: Motor = other_2007;
    let _e57: Motor = self_2235;
    let _e61: Motor = other_2007;
    let _e64: Motor = other_2007;
    let _e70: Motor = self_2235;
    let _e74: Motor = other_2007;
    let _e86: Motor = self_2235;
    let _e90: Motor = other_2007;
    let _e99: Motor = self_2235;
    let _e103: Motor = other_2007;
    let _e113: Motor = self_2235;
    let _e117: Motor = other_2007;
    let _e121: Motor = self_2235;
    let _e125: Motor = other_2007;
    let _e128: Motor = other_2007;
    let _e131: Motor = other_2007;
    let _e142: Motor = self_2235;
    let _e146: Motor = other_2007;
    let _e149: Motor = other_2007;
    let _e152: Motor = other_2007;
    let _e163: Motor = self_2235;
    let _e167: Motor = other_2007;
    let _e170: Motor = other_2007;
    let _e173: Motor = other_2007;
    let _e184: Motor = self_2235;
    let _e188: Motor = other_2007;
    let _e198: Motor = self_2235;
    let _e202: Motor = other_2007;
    let _e211: Motor = self_2235;
    let _e215: Motor = other_2007;
    let _e225: Motor = self_2235;
    let _e229: Motor = other_2007;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g1_.x) * vec2<f32>(_e35.g1_.x, _e38.g0_.x))) - (vec2(_e44.g1_.y) * vec2<f32>(_e48.g1_.y, _e51.g0_.y))) - (vec2(_e57.g1_.z) * vec2<f32>(_e61.g1_.z, _e64.g0_.z))) + ((vec2(_e70.g0_.x) * vec2(_e74.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), ((((((((vec3(_e86.g0_.y) * _e90.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e99.g0_.z) * _e103.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + (vec3(_e113.g0_.w) * _e117.g1_)) + ((vec3(_e121.g1_.x) * vec3<f32>(_e125.g0_.w, _e128.g0_.z, _e131.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e142.g1_.y) * vec3<f32>(_e146.g0_.z, _e149.g0_.w, _e152.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e163.g1_.z) * vec3<f32>(_e167.g0_.y, _e170.g0_.x, _e173.g0_.w)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e184.g0_.x) * _e188.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e198.g1_.y) * _e202.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e211.g1_.z) * _e215.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e225.g1_.x) * _e229.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn motor_motor_geometric_anti_product(self_2236: Motor, other_2008: Motor) -> MultiVector {
    var self_2237: Motor;
    var other_2009: Motor;

    self_2237 = self_2236;
    other_2009 = other_2008;
    let _e6: Motor = self_2237;
    let _e10: Motor = other_2009;
    let _e13: Motor = other_2009;
    let _e19: Motor = self_2237;
    let _e23: Motor = other_2009;
    let _e26: Motor = other_2009;
    let _e32: Motor = self_2237;
    let _e36: Motor = other_2009;
    let _e39: Motor = other_2009;
    let _e45: Motor = self_2237;
    let _e49: Motor = other_2009;
    let _e59: Motor = self_2237;
    let _e63: Motor = other_2009;
    let _e73: Motor = self_2237;
    let _e77: Motor = other_2009;
    let _e87: Motor = self_2237;
    let _e90: Motor = self_2237;
    let _e94: Motor = other_2009;
    let _e97: Motor = other_2009;
    let _e109: Motor = self_2237;
    let _e113: Motor = other_2009;
    let _e116: Motor = other_2009;
    let _e119: Motor = other_2009;
    let _e129: Motor = self_2237;
    let _e133: Motor = other_2009;
    let _e136: Motor = other_2009;
    let _e139: Motor = other_2009;
    let _e150: Motor = self_2237;
    let _e154: Motor = other_2009;
    let _e157: Motor = other_2009;
    let _e160: Motor = other_2009;
    let _e171: Motor = self_2237;
    let _e175: Motor = other_2009;
    let _e178: Motor = other_2009;
    let _e181: Motor = other_2009;
    let _e187: Motor = self_2237;
    let _e191: Motor = other_2009;
    let _e200: Motor = self_2237;
    let _e204: Motor = other_2009;
    let _e214: Motor = self_2237;
    let _e218: Motor = other_2009;
    let _e222: Motor = self_2237;
    let _e226: Motor = other_2009;
    let _e229: Motor = other_2009;
    let _e232: Motor = other_2009;
    let _e243: Motor = self_2237;
    let _e247: Motor = other_2009;
    let _e250: Motor = other_2009;
    let _e253: Motor = other_2009;
    let _e264: Motor = self_2237;
    let _e268: Motor = other_2009;
    let _e271: Motor = other_2009;
    let _e274: Motor = other_2009;
    let _e285: Motor = self_2237;
    let _e289: Motor = other_2009;
    return MultiVector((((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e87.g0_.x, _e90.g0_.w) * vec2<f32>(_e94.g0_.x, _e97.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (((((vec3(_e109.g0_.x) * vec3<f32>(_e113.g0_.w, _e116.g0_.z, _e119.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e129.g0_.y) * vec3<f32>(_e133.g0_.z, _e136.g0_.w, _e139.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e150.g0_.z) * vec3<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e171.g0_.w) * vec3<f32>(_e175.g0_.x, _e178.g0_.y, _e181.g0_.z))), ((((((((vec3(_e187.g0_.y) * _e191.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e200.g0_.z) * _e204.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e214.g0_.w) * _e218.g1_)) + ((vec3(_e222.g1_.x) * vec3<f32>(_e226.g0_.w, _e229.g0_.z, _e232.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e243.g1_.y) * vec3<f32>(_e247.g0_.z, _e250.g0_.w, _e253.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e264.g1_.z) * vec3<f32>(_e268.g0_.y, _e271.g0_.x, _e274.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e285.g0_.x) * _e289.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn motor_motor_regressive_product(self_2238: Motor, other_2010: Motor) -> MultiVector {
    var self_2239: Motor;
    var other_2011: Motor;

    self_2239 = self_2238;
    other_2011 = other_2010;
    let _e4: Motor = self_2239;
    let _e8: Motor = other_2011;
    let _e17: Motor = self_2239;
    let _e21: Motor = other_2011;
    let _e31: Motor = self_2239;
    let _e35: Motor = other_2011;
    let _e45: Motor = self_2239;
    let _e49: Motor = other_2011;
    let _e59: Motor = self_2239;
    let _e63: Motor = other_2011;
    let _e73: Motor = self_2239;
    let _e77: Motor = other_2011;
    let _e87: Motor = self_2239;
    let _e91: Motor = other_2011;
    let _e103: Motor = self_2239;
    let _e107: Motor = other_2011;
    let _e110: Motor = other_2011;
    let _e113: Motor = other_2011;
    let _e118: Motor = self_2239;
    let _e121: Motor = self_2239;
    let _e124: Motor = self_2239;
    let _e128: Motor = other_2011;
    let _e134: Motor = self_2239;
    let _e138: Motor = other_2011;
    let _e141: Motor = self_2239;
    let _e143: Motor = other_2011;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e103.g0_.w) * vec3<f32>(_e107.g0_.x, _e110.g0_.y, _e113.g0_.z)) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3(_e128.g0_.w))), ((vec3(_e134.g0_.w) * _e138.g1_) + (_e141.g1_ * vec3(_e143.g0_.w))), vec4(0.0));
}

fn motor_motor_anti_wedge(self_2240: Motor, other_2012: Motor) -> MultiVector {
    var self_2241: Motor;
    var other_2013: Motor;

    self_2241 = self_2240;
    other_2013 = other_2012;
    let _e4: Motor = self_2241;
    let _e8: Motor = other_2013;
    let _e17: Motor = self_2241;
    let _e21: Motor = other_2013;
    let _e31: Motor = self_2241;
    let _e35: Motor = other_2013;
    let _e45: Motor = self_2241;
    let _e49: Motor = other_2013;
    let _e59: Motor = self_2241;
    let _e63: Motor = other_2013;
    let _e73: Motor = self_2241;
    let _e77: Motor = other_2013;
    let _e87: Motor = self_2241;
    let _e91: Motor = other_2013;
    let _e103: Motor = self_2241;
    let _e107: Motor = other_2013;
    let _e110: Motor = other_2013;
    let _e113: Motor = other_2013;
    let _e118: Motor = self_2241;
    let _e121: Motor = self_2241;
    let _e124: Motor = self_2241;
    let _e128: Motor = other_2013;
    let _e134: Motor = self_2241;
    let _e138: Motor = other_2013;
    let _e141: Motor = self_2241;
    let _e143: Motor = other_2013;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e103.g0_.w) * vec3<f32>(_e107.g0_.x, _e110.g0_.y, _e113.g0_.z)) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3(_e128.g0_.w))), ((vec3(_e134.g0_.w) * _e138.g1_) + (_e141.g1_ * vec3(_e143.g0_.w))), vec4(0.0));
}

fn motor_motor_meet(self_2242: Motor, other_2014: Motor) -> MultiVector {
    var self_2243: Motor;
    var other_2015: Motor;

    self_2243 = self_2242;
    other_2015 = other_2014;
    let _e4: Motor = self_2243;
    let _e8: Motor = other_2015;
    let _e17: Motor = self_2243;
    let _e21: Motor = other_2015;
    let _e31: Motor = self_2243;
    let _e35: Motor = other_2015;
    let _e45: Motor = self_2243;
    let _e49: Motor = other_2015;
    let _e59: Motor = self_2243;
    let _e63: Motor = other_2015;
    let _e73: Motor = self_2243;
    let _e77: Motor = other_2015;
    let _e87: Motor = self_2243;
    let _e91: Motor = other_2015;
    let _e103: Motor = self_2243;
    let _e107: Motor = other_2015;
    let _e110: Motor = other_2015;
    let _e113: Motor = other_2015;
    let _e118: Motor = self_2243;
    let _e121: Motor = self_2243;
    let _e124: Motor = self_2243;
    let _e128: Motor = other_2015;
    let _e134: Motor = self_2243;
    let _e138: Motor = other_2015;
    let _e141: Motor = self_2243;
    let _e143: Motor = other_2015;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e103.g0_.w) * vec3<f32>(_e107.g0_.x, _e110.g0_.y, _e113.g0_.z)) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3(_e128.g0_.w))), ((vec3(_e134.g0_.w) * _e138.g1_) + (_e141.g1_ * vec3(_e143.g0_.w))), vec4(0.0));
}

fn motor_motor_outer_product(self_2244: Motor, other_2016: Motor) -> AntiScalar {
    var self_2245: Motor;
    var other_2017: Motor;

    self_2245 = self_2244;
    other_2017 = other_2016;
    let _e5: Motor = self_2245;
    let _e8: Motor = other_2017;
    let _e13: Motor = self_2245;
    let _e16: Motor = other_2017;
    let _e21: Motor = self_2245;
    let _e24: Motor = other_2017;
    let _e29: Motor = self_2245;
    let _e32: Motor = other_2017;
    let _e37: Motor = self_2245;
    let _e40: Motor = other_2017;
    let _e45: Motor = self_2245;
    let _e48: Motor = other_2017;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_wedge(self_2246: Motor, other_2018: Motor) -> AntiScalar {
    var self_2247: Motor;
    var other_2019: Motor;

    self_2247 = self_2246;
    other_2019 = other_2018;
    let _e5: Motor = self_2247;
    let _e8: Motor = other_2019;
    let _e13: Motor = self_2247;
    let _e16: Motor = other_2019;
    let _e21: Motor = self_2247;
    let _e24: Motor = other_2019;
    let _e29: Motor = self_2247;
    let _e32: Motor = other_2019;
    let _e37: Motor = self_2247;
    let _e40: Motor = other_2019;
    let _e45: Motor = self_2247;
    let _e48: Motor = other_2019;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_join(self_2248: Motor, other_2020: Motor) -> AntiScalar {
    var self_2249: Motor;
    var other_2021: Motor;

    self_2249 = self_2248;
    other_2021 = other_2020;
    let _e5: Motor = self_2249;
    let _e8: Motor = other_2021;
    let _e13: Motor = self_2249;
    let _e16: Motor = other_2021;
    let _e21: Motor = self_2249;
    let _e24: Motor = other_2021;
    let _e29: Motor = self_2249;
    let _e32: Motor = other_2021;
    let _e37: Motor = self_2249;
    let _e40: Motor = other_2021;
    let _e45: Motor = self_2249;
    let _e48: Motor = other_2021;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_inner_product(self_2250: Motor, other_2022: Motor) -> MultiVector {
    var self_2251: Motor;
    var other_2023: Motor;

    self_2251 = self_2250;
    other_2023 = other_2022;
    let _e4: Motor = self_2251;
    let _e8: Motor = other_2023;
    let _e17: Motor = self_2251;
    let _e21: Motor = other_2023;
    let _e31: Motor = self_2251;
    let _e35: Motor = other_2023;
    let _e47: Motor = self_2251;
    let _e51: Motor = other_2023;
    let _e54: Motor = self_2251;
    let _e56: Motor = other_2023;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * _e51.g1_) + (_e54.g1_ * vec3(_e56.g0_.w))), vec3(0.0), vec4(0.0));
}

fn motor_motor_inner_anti_product(self_2252: Motor, other_2024: Motor) -> Motor {
    var self_2253: Motor;
    var other_2025: Motor;

    self_2253 = self_2252;
    other_2025 = other_2024;
    let _e4: Motor = self_2253;
    let _e8: Motor = other_2025;
    let _e18: Motor = self_2253;
    let _e22: Motor = other_2025;
    let _e33: Motor = self_2253;
    let _e37: Motor = other_2025;
    let _e41: Motor = self_2253;
    let _e45: Motor = other_2025;
    let _e56: Motor = self_2253;
    let _e60: Motor = other_2025;
    let _e63: Motor = self_2253;
    let _e65: Motor = other_2025;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e56.g0_.w) * _e60.g1_) + (_e63.g1_ * vec3(_e65.g0_.w))));
}

fn motor_motor_left_contraction(self_2254: Motor, other_2026: Motor) -> MultiVector {
    var self_2255: Motor;
    var other_2027: Motor;

    self_2255 = self_2254;
    other_2027 = other_2026;
    let _e4: Motor = self_2255;
    let _e8: Motor = other_2027;
    let _e17: Motor = self_2255;
    let _e21: Motor = other_2027;
    let _e31: Motor = self_2255;
    let _e35: Motor = other_2027;
    let _e47: Motor = self_2255;
    let _e49: Motor = other_2027;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn motor_motor_right_contraction(self_2256: Motor, other_2028: Motor) -> MultiVector {
    var self_2257: Motor;
    var other_2029: Motor;

    self_2257 = self_2256;
    other_2029 = other_2028;
    let _e4: Motor = self_2257;
    let _e8: Motor = other_2029;
    let _e17: Motor = self_2257;
    let _e21: Motor = other_2029;
    let _e31: Motor = self_2257;
    let _e35: Motor = other_2029;
    let _e47: Motor = self_2257;
    let _e51: Motor = other_2029;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn motor_motor_left_anti_contraction(self_2258: Motor, other_2030: Motor) -> Motor {
    var self_2259: Motor;
    var other_2031: Motor;

    self_2259 = self_2258;
    other_2031 = other_2030;
    let _e4: Motor = self_2259;
    let _e8: Motor = other_2031;
    let _e19: Motor = self_2259;
    let _e23: Motor = other_2031;
    let _e35: Motor = self_2259;
    let _e39: Motor = other_2031;
    let _e43: Motor = self_2259;
    let _e47: Motor = other_2031;
    let _e59: Motor = self_2259;
    let _e63: Motor = other_2031;
    return Motor((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn motor_motor_right_anti_contraction(self_2260: Motor, other_2032: Motor) -> Motor {
    var self_2261: Motor;
    var other_2033: Motor;

    self_2261 = self_2260;
    other_2033 = other_2032;
    let _e4: Motor = self_2261;
    let _e8: Motor = other_2033;
    let _e18: Motor = self_2261;
    let _e22: Motor = other_2033;
    let _e33: Motor = self_2261;
    let _e37: Motor = other_2033;
    let _e49: Motor = self_2261;
    let _e53: Motor = other_2033;
    let _e64: Motor = self_2261;
    let _e66: Motor = other_2033;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e64.g1_ * vec3(_e66.g0_.w)));
}

fn motor_motor_scalar_product(self_2262: Motor, other_2034: Motor) -> Scalar {
    var self_2263: Motor;
    var other_2035: Motor;

    self_2263 = self_2262;
    other_2035 = other_2034;
    let _e5: Motor = self_2263;
    let _e8: Motor = other_2035;
    let _e13: Motor = self_2263;
    let _e16: Motor = other_2035;
    let _e21: Motor = self_2263;
    let _e24: Motor = other_2035;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_motor_dot(self_2264: Motor, other_2036: Motor) -> Scalar {
    var self_2265: Motor;
    var other_2037: Motor;

    self_2265 = self_2264;
    other_2037 = other_2036;
    let _e5: Motor = self_2265;
    let _e8: Motor = other_2037;
    let _e13: Motor = self_2265;
    let _e16: Motor = other_2037;
    let _e21: Motor = self_2265;
    let _e24: Motor = other_2037;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_motor_anti_scalar_product(self_2266: Motor, other_2038: Motor) -> AntiScalar {
    var self_2267: Motor;
    var other_2039: Motor;

    self_2267 = self_2266;
    other_2039 = other_2038;
    let _e5: Motor = self_2267;
    let _e8: Motor = other_2039;
    let _e13: Motor = self_2267;
    let _e16: Motor = other_2039;
    let _e21: Motor = self_2267;
    let _e24: Motor = other_2039;
    let _e29: Motor = self_2267;
    let _e32: Motor = other_2039;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_motor_anti_dot(self_2268: Motor, other_2040: Motor) -> AntiScalar {
    var self_2269: Motor;
    var other_2041: Motor;

    self_2269 = self_2268;
    other_2041 = other_2040;
    let _e5: Motor = self_2269;
    let _e8: Motor = other_2041;
    let _e13: Motor = self_2269;
    let _e16: Motor = other_2041;
    let _e21: Motor = self_2269;
    let _e24: Motor = other_2041;
    let _e29: Motor = self_2269;
    let _e32: Motor = other_2041;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_rotor_into(self_2270: Motor) -> Rotor {
    var self_2271: Motor;

    self_2271 = self_2270;
    let _e2: Motor = self_2271;
    return Rotor(_e2.g0_);
}

fn motor_rotor_add(self_2272: Motor, other_2042: Rotor) -> Motor {
    var self_2273: Motor;
    var other_2043: Rotor;

    self_2273 = self_2272;
    other_2043 = other_2042;
    let _e4: Motor = self_2273;
    let _e6: Rotor = other_2043;
    let _e9: Motor = self_2273;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn motor_rotor_sub(self_2274: Motor, other_2044: Rotor) -> Motor {
    var self_2275: Motor;
    var other_2045: Rotor;

    self_2275 = self_2274;
    other_2045 = other_2044;
    let _e4: Motor = self_2275;
    let _e6: Rotor = other_2045;
    let _e9: Motor = self_2275;
    return Motor((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn motor_rotor_geometric_product(self_2276: Motor, other_2046: Rotor) -> Rotor {
    var self_2277: Motor;
    var other_2047: Rotor;

    self_2277 = self_2276;
    other_2047 = other_2046;
    let _e4: Motor = self_2277;
    let _e8: Rotor = other_2047;
    let _e18: Motor = self_2277;
    let _e22: Rotor = other_2047;
    let _e33: Motor = self_2277;
    let _e37: Rotor = other_2047;
    return Rotor(((((vec4(_e4.g1_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.zwxy) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.yxwz) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn motor_rotor_geometric_anti_product(self_2278: Motor, other_2048: Rotor) -> MultiVector {
    var self_2279: Motor;
    var other_2049: Rotor;

    self_2279 = self_2278;
    other_2049 = other_2048;
    let _e4: Motor = self_2279;
    let _e8: Rotor = other_2049;
    let _e17: Motor = self_2279;
    let _e21: Rotor = other_2049;
    let _e31: Motor = self_2279;
    let _e35: Rotor = other_2049;
    let _e45: Motor = self_2279;
    let _e49: Rotor = other_2049;
    let _e59: Motor = self_2279;
    let _e63: Rotor = other_2049;
    let _e73: Motor = self_2279;
    let _e77: Rotor = other_2049;
    let _e87: Motor = self_2279;
    let _e91: Rotor = other_2049;
    let _e103: Motor = self_2279;
    let _e107: Rotor = other_2049;
    let _e110: Rotor = other_2049;
    let _e113: Rotor = other_2049;
    let _e123: Motor = self_2279;
    let _e127: Rotor = other_2049;
    let _e130: Rotor = other_2049;
    let _e133: Rotor = other_2049;
    let _e144: Motor = self_2279;
    let _e148: Rotor = other_2049;
    let _e151: Rotor = other_2049;
    let _e154: Rotor = other_2049;
    let _e165: Motor = self_2279;
    let _e169: Rotor = other_2049;
    let _e172: Rotor = other_2049;
    let _e175: Rotor = other_2049;
    let _e181: Motor = self_2279;
    let _e185: Rotor = other_2049;
    let _e188: Rotor = other_2049;
    let _e191: Rotor = other_2049;
    let _e201: Motor = self_2279;
    let _e205: Rotor = other_2049;
    let _e208: Rotor = other_2049;
    let _e211: Rotor = other_2049;
    let _e222: Motor = self_2279;
    let _e226: Rotor = other_2049;
    let _e229: Rotor = other_2049;
    let _e232: Rotor = other_2049;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (((((vec3(_e103.g0_.x) * vec3<f32>(_e107.g0_.w, _e110.g0_.z, _e113.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e123.g0_.y) * vec3<f32>(_e127.g0_.z, _e130.g0_.w, _e133.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e144.g0_.z) * vec3<f32>(_e148.g0_.y, _e151.g0_.x, _e154.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e165.g0_.w) * vec3<f32>(_e169.g0_.x, _e172.g0_.y, _e175.g0_.z))), ((((vec3(_e181.g1_.x) * vec3<f32>(_e185.g0_.w, _e188.g0_.z, _e191.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e201.g1_.y) * vec3<f32>(_e205.g0_.z, _e208.g0_.w, _e211.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e222.g1_.z) * vec3<f32>(_e226.g0_.y, _e229.g0_.x, _e232.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), vec4(0.0));
}

fn motor_rotor_regressive_product(self_2280: Motor, other_2050: Rotor) -> MultiVector {
    var self_2281: Motor;
    var other_2051: Rotor;

    self_2281 = self_2280;
    other_2051 = other_2050;
    let _e4: Motor = self_2281;
    let _e8: Rotor = other_2051;
    let _e17: Motor = self_2281;
    let _e21: Rotor = other_2051;
    let _e31: Motor = self_2281;
    let _e35: Rotor = other_2051;
    let _e45: Motor = self_2281;
    let _e48: Motor = self_2281;
    let _e52: Rotor = other_2051;
    let _e55: Rotor = other_2051;
    let _e67: Motor = self_2281;
    let _e71: Rotor = other_2051;
    let _e74: Rotor = other_2051;
    let _e77: Rotor = other_2051;
    let _e82: Motor = self_2281;
    let _e85: Motor = self_2281;
    let _e88: Motor = self_2281;
    let _e92: Rotor = other_2051;
    let _e98: Motor = self_2281;
    let _e100: Rotor = other_2051;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), ((vec3(_e67.g0_.w) * vec3<f32>(_e71.g0_.x, _e74.g0_.y, _e77.g0_.z)) + (vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.z) * vec3(_e92.g0_.w))), (_e98.g1_ * vec3(_e100.g0_.w)), vec4(0.0));
}

fn motor_rotor_anti_wedge(self_2282: Motor, other_2052: Rotor) -> MultiVector {
    var self_2283: Motor;
    var other_2053: Rotor;

    self_2283 = self_2282;
    other_2053 = other_2052;
    let _e4: Motor = self_2283;
    let _e8: Rotor = other_2053;
    let _e17: Motor = self_2283;
    let _e21: Rotor = other_2053;
    let _e31: Motor = self_2283;
    let _e35: Rotor = other_2053;
    let _e45: Motor = self_2283;
    let _e48: Motor = self_2283;
    let _e52: Rotor = other_2053;
    let _e55: Rotor = other_2053;
    let _e67: Motor = self_2283;
    let _e71: Rotor = other_2053;
    let _e74: Rotor = other_2053;
    let _e77: Rotor = other_2053;
    let _e82: Motor = self_2283;
    let _e85: Motor = self_2283;
    let _e88: Motor = self_2283;
    let _e92: Rotor = other_2053;
    let _e98: Motor = self_2283;
    let _e100: Rotor = other_2053;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), ((vec3(_e67.g0_.w) * vec3<f32>(_e71.g0_.x, _e74.g0_.y, _e77.g0_.z)) + (vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.z) * vec3(_e92.g0_.w))), (_e98.g1_ * vec3(_e100.g0_.w)), vec4(0.0));
}

fn motor_rotor_meet(self_2284: Motor, other_2054: Rotor) -> MultiVector {
    var self_2285: Motor;
    var other_2055: Rotor;

    self_2285 = self_2284;
    other_2055 = other_2054;
    let _e4: Motor = self_2285;
    let _e8: Rotor = other_2055;
    let _e17: Motor = self_2285;
    let _e21: Rotor = other_2055;
    let _e31: Motor = self_2285;
    let _e35: Rotor = other_2055;
    let _e45: Motor = self_2285;
    let _e48: Motor = self_2285;
    let _e52: Rotor = other_2055;
    let _e55: Rotor = other_2055;
    let _e67: Motor = self_2285;
    let _e71: Rotor = other_2055;
    let _e74: Rotor = other_2055;
    let _e77: Rotor = other_2055;
    let _e82: Motor = self_2285;
    let _e85: Motor = self_2285;
    let _e88: Motor = self_2285;
    let _e92: Rotor = other_2055;
    let _e98: Motor = self_2285;
    let _e100: Rotor = other_2055;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), ((vec3(_e67.g0_.w) * vec3<f32>(_e71.g0_.x, _e74.g0_.y, _e77.g0_.z)) + (vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.z) * vec3(_e92.g0_.w))), (_e98.g1_ * vec3(_e100.g0_.w)), vec4(0.0));
}

fn motor_rotor_outer_product(self_2286: Motor, other_2056: Rotor) -> AntiScalar {
    var self_2287: Motor;
    var other_2057: Rotor;

    self_2287 = self_2286;
    other_2057 = other_2056;
    let _e5: Motor = self_2287;
    let _e8: Rotor = other_2057;
    let _e13: Motor = self_2287;
    let _e16: Rotor = other_2057;
    let _e21: Motor = self_2287;
    let _e24: Rotor = other_2057;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_wedge(self_2288: Motor, other_2058: Rotor) -> AntiScalar {
    var self_2289: Motor;
    var other_2059: Rotor;

    self_2289 = self_2288;
    other_2059 = other_2058;
    let _e5: Motor = self_2289;
    let _e8: Rotor = other_2059;
    let _e13: Motor = self_2289;
    let _e16: Rotor = other_2059;
    let _e21: Motor = self_2289;
    let _e24: Rotor = other_2059;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_join(self_2290: Motor, other_2060: Rotor) -> AntiScalar {
    var self_2291: Motor;
    var other_2061: Rotor;

    self_2291 = self_2290;
    other_2061 = other_2060;
    let _e5: Motor = self_2291;
    let _e8: Rotor = other_2061;
    let _e13: Motor = self_2291;
    let _e16: Rotor = other_2061;
    let _e21: Motor = self_2291;
    let _e24: Rotor = other_2061;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_inner_product(self_2292: Motor, other_2062: Rotor) -> Rotor {
    var self_2293: Motor;
    var other_2063: Rotor;

    self_2293 = self_2292;
    other_2063 = other_2062;
    let _e4: Motor = self_2293;
    let _e7: Motor = self_2293;
    let _e10: Motor = self_2293;
    let _e13: Motor = self_2293;
    let _e17: Rotor = other_2063;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * _e17.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_rotor_inner_anti_product(self_2294: Motor, other_2064: Rotor) -> Motor {
    var self_2295: Motor;
    var other_2065: Rotor;

    self_2295 = self_2294;
    other_2065 = other_2064;
    let _e4: Motor = self_2295;
    let _e8: Rotor = other_2065;
    let _e18: Motor = self_2295;
    let _e22: Rotor = other_2065;
    let _e33: Motor = self_2295;
    let _e37: Rotor = other_2065;
    let _e41: Motor = self_2295;
    let _e45: Rotor = other_2065;
    let _e56: Motor = self_2295;
    let _e58: Rotor = other_2065;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e56.g1_ * vec3(_e58.g0_.w)));
}

fn motor_rotor_left_contraction(self_2296: Motor, other_2066: Rotor) -> Rotor {
    var self_2297: Motor;
    var other_2067: Rotor;

    self_2297 = self_2296;
    other_2067 = other_2066;
    let _e4: Motor = self_2297;
    let _e7: Motor = self_2297;
    let _e10: Motor = self_2297;
    let _e13: Motor = self_2297;
    let _e17: Rotor = other_2067;
    return Rotor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g1_.x) * _e17.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn motor_rotor_left_anti_contraction(self_2298: Motor, other_2068: Rotor) -> Rotor {
    var self_2299: Motor;
    var other_2069: Rotor;

    self_2299 = self_2298;
    other_2069 = other_2068;
    let _e4: Motor = self_2299;
    let _e8: Rotor = other_2069;
    let _e19: Motor = self_2299;
    let _e23: Rotor = other_2069;
    let _e35: Motor = self_2299;
    let _e39: Rotor = other_2069;
    let _e43: Motor = self_2299;
    let _e47: Rotor = other_2069;
    return Rotor((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_rotor_right_anti_contraction(self_2300: Motor, other_2070: Rotor) -> Motor {
    var self_2301: Motor;
    var other_2071: Rotor;

    self_2301 = self_2300;
    other_2071 = other_2070;
    let _e4: Motor = self_2301;
    let _e8: Rotor = other_2071;
    let _e18: Motor = self_2301;
    let _e22: Rotor = other_2071;
    let _e33: Motor = self_2301;
    let _e37: Rotor = other_2071;
    let _e49: Motor = self_2301;
    let _e53: Rotor = other_2071;
    let _e64: Motor = self_2301;
    let _e66: Rotor = other_2071;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e64.g1_ * vec3(_e66.g0_.w)));
}

fn motor_rotor_anti_scalar_product(self_2302: Motor, other_2072: Rotor) -> AntiScalar {
    var self_2303: Motor;
    var other_2073: Rotor;

    self_2303 = self_2302;
    other_2073 = other_2072;
    let _e5: Motor = self_2303;
    let _e8: Rotor = other_2073;
    let _e13: Motor = self_2303;
    let _e16: Rotor = other_2073;
    let _e21: Motor = self_2303;
    let _e24: Rotor = other_2073;
    let _e29: Motor = self_2303;
    let _e32: Rotor = other_2073;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_rotor_anti_dot(self_2304: Motor, other_2074: Rotor) -> AntiScalar {
    var self_2305: Motor;
    var other_2075: Rotor;

    self_2305 = self_2304;
    other_2075 = other_2074;
    let _e5: Motor = self_2305;
    let _e8: Rotor = other_2075;
    let _e13: Motor = self_2305;
    let _e16: Rotor = other_2075;
    let _e21: Motor = self_2305;
    let _e24: Rotor = other_2075;
    let _e29: Motor = self_2305;
    let _e32: Rotor = other_2075;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_translator_into(self_2306: Motor) -> Translator {
    var self_2307: Motor;

    self_2307 = self_2306;
    let _e2: Motor = self_2307;
    let _e5: Motor = self_2307;
    let _e8: Motor = self_2307;
    let _e11: Motor = self_2307;
    return Translator(vec4<f32>(_e2.g1_.x, _e5.g1_.y, _e8.g1_.z, _e11.g0_.w));
}

fn motor_translator_add(self_2308: Motor, other_2076: Translator) -> Motor {
    var self_2309: Motor;
    var other_2077: Translator;

    self_2309 = self_2308;
    other_2077 = other_2076;
    let _e4: Motor = self_2309;
    let _e6: Translator = other_2077;
    let _e16: Motor = self_2309;
    let _e18: Translator = other_2077;
    let _e21: Translator = other_2077;
    let _e24: Translator = other_2077;
    return Motor((_e4.g0_ + (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ + vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn motor_translator_sub(self_2310: Motor, other_2078: Translator) -> Motor {
    var self_2311: Motor;
    var other_2079: Translator;

    self_2311 = self_2310;
    other_2079 = other_2078;
    let _e4: Motor = self_2311;
    let _e6: Translator = other_2079;
    let _e16: Motor = self_2311;
    let _e18: Translator = other_2079;
    let _e21: Translator = other_2079;
    let _e24: Translator = other_2079;
    return Motor((_e4.g0_ - (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ - vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn motor_translator_geometric_product(self_2312: Motor, other_2080: Translator) -> MultiVector {
    var self_2313: Motor;
    var other_2081: Translator;

    self_2313 = self_2312;
    other_2081 = other_2080;
    let _e4: Motor = self_2313;
    let _e8: Translator = other_2081;
    let _e17: Motor = self_2313;
    let _e21: Translator = other_2081;
    let _e31: Motor = self_2313;
    let _e35: Translator = other_2081;
    let _e45: Motor = self_2313;
    let _e49: Translator = other_2081;
    let _e59: Motor = self_2313;
    let _e63: Translator = other_2081;
    let _e73: Motor = self_2313;
    let _e77: Translator = other_2081;
    let _e89: Motor = self_2313;
    let _e93: Translator = other_2081;
    let _e96: Translator = other_2081;
    let _e99: Translator = other_2081;
    let _e109: Motor = self_2313;
    let _e113: Translator = other_2081;
    let _e116: Translator = other_2081;
    let _e119: Translator = other_2081;
    let _e130: Motor = self_2313;
    let _e134: Translator = other_2081;
    let _e137: Translator = other_2081;
    let _e140: Translator = other_2081;
    let _e146: Motor = self_2313;
    let _e150: Translator = other_2081;
    let _e161: Motor = self_2313;
    let _e165: Translator = other_2081;
    let _e176: Motor = self_2313;
    let _e180: Translator = other_2081;
    let _e191: Motor = self_2313;
    let _e195: Translator = other_2081;
    let _e198: Translator = other_2081;
    let _e201: Translator = other_2081;
    let _e212: Motor = self_2313;
    let _e216: Translator = other_2081;
    let _e219: Translator = other_2081;
    let _e222: Translator = other_2081;
    let _e232: Motor = self_2313;
    let _e236: Translator = other_2081;
    let _e239: Translator = other_2081;
    let _e242: Translator = other_2081;
    let _e253: Motor = self_2313;
    let _e257: Translator = other_2081;
    let _e260: Translator = other_2081;
    let _e263: Translator = other_2081;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g0_.x) * vec2(_e77.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), ((((((((vec3(_e89.g0_.y) * vec3<f32>(_e93.g0_.z, _e96.g0_.z, _e99.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e109.g0_.z) * vec3<f32>(_e113.g0_.y, _e116.g0_.x, _e119.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + (vec3(_e130.g0_.w) * vec3<f32>(_e134.g0_.x, _e137.g0_.y, _e140.g0_.z))) + ((vec3(_e146.g1_.x) * vec3(_e150.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e161.g1_.y) * vec3(_e165.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e176.g1_.z) * vec3(_e180.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e191.g0_.x) * vec3<f32>(_e195.g0_.x, _e198.g0_.z, _e201.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e212.g1_.y) * vec3<f32>(_e216.g0_.z, _e219.g0_.z, _e222.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e232.g1_.z) * vec3<f32>(_e236.g0_.y, _e239.g0_.x, _e242.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e253.g1_.x) * vec3<f32>(_e257.g0_.x, _e260.g0_.z, _e263.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn motor_translator_geometric_anti_product(self_2314: Motor, other_2082: Translator) -> MultiVector {
    var self_2315: Motor;
    var other_2083: Translator;

    self_2315 = self_2314;
    other_2083 = other_2082;
    let _e4: Motor = self_2315;
    let _e8: Translator = other_2083;
    let _e17: Motor = self_2315;
    let _e21: Translator = other_2083;
    let _e31: Motor = self_2315;
    let _e34: Motor = self_2315;
    let _e38: Translator = other_2083;
    let _e41: Translator = other_2083;
    let _e53: Motor = self_2315;
    let _e56: Motor = self_2315;
    let _e59: Motor = self_2315;
    let _e63: Translator = other_2083;
    let _e68: Motor = self_2315;
    let _e72: Translator = other_2083;
    let _e75: Translator = other_2083;
    let _e78: Translator = other_2083;
    let _e88: Motor = self_2315;
    let _e92: Translator = other_2083;
    let _e95: Translator = other_2083;
    let _e98: Translator = other_2083;
    let _e109: Motor = self_2315;
    let _e113: Translator = other_2083;
    let _e116: Translator = other_2083;
    let _e119: Translator = other_2083;
    let _e125: Motor = self_2315;
    let _e129: Translator = other_2083;
    let _e140: Motor = self_2315;
    let _e144: Translator = other_2083;
    let _e155: Motor = self_2315;
    let _e159: Translator = other_2083;
    let _e170: Motor = self_2315;
    let _e174: Translator = other_2083;
    let _e177: Translator = other_2083;
    let _e180: Translator = other_2083;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), ((((((((vec3(_e68.g0_.y) * vec3<f32>(_e72.g0_.z, _e75.g0_.z, _e78.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e88.g0_.z) * vec3<f32>(_e92.g0_.y, _e95.g0_.x, _e98.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e109.g0_.w) * vec3<f32>(_e113.g0_.x, _e116.g0_.y, _e119.g0_.z))) + ((vec3(_e125.g1_.x) * vec3(_e129.g0_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e140.g1_.y) * vec3(_e144.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e155.g1_.z) * vec3(_e159.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e170.g0_.x) * vec3<f32>(_e174.g0_.x, _e177.g0_.z, _e180.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn motor_translator_regressive_product(self_2316: Motor, other_2084: Translator) -> MultiVector {
    var self_2317: Motor;
    var other_2085: Translator;

    self_2317 = self_2316;
    other_2085 = other_2084;
    let _e4: Motor = self_2317;
    let _e8: Translator = other_2085;
    let _e17: Motor = self_2317;
    let _e21: Translator = other_2085;
    let _e31: Motor = self_2317;
    let _e34: Motor = self_2317;
    let _e38: Translator = other_2085;
    let _e41: Translator = other_2085;
    let _e53: Motor = self_2317;
    let _e56: Motor = self_2317;
    let _e59: Motor = self_2317;
    let _e63: Translator = other_2085;
    let _e68: Motor = self_2317;
    let _e72: Translator = other_2085;
    let _e75: Translator = other_2085;
    let _e78: Translator = other_2085;
    let _e83: Motor = self_2317;
    let _e85: Translator = other_2085;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), ((vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)) + (_e83.g1_ * vec3(_e85.g0_.w))), vec4(0.0));
}

fn motor_translator_anti_wedge(self_2318: Motor, other_2086: Translator) -> MultiVector {
    var self_2319: Motor;
    var other_2087: Translator;

    self_2319 = self_2318;
    other_2087 = other_2086;
    let _e4: Motor = self_2319;
    let _e8: Translator = other_2087;
    let _e17: Motor = self_2319;
    let _e21: Translator = other_2087;
    let _e31: Motor = self_2319;
    let _e34: Motor = self_2319;
    let _e38: Translator = other_2087;
    let _e41: Translator = other_2087;
    let _e53: Motor = self_2319;
    let _e56: Motor = self_2319;
    let _e59: Motor = self_2319;
    let _e63: Translator = other_2087;
    let _e68: Motor = self_2319;
    let _e72: Translator = other_2087;
    let _e75: Translator = other_2087;
    let _e78: Translator = other_2087;
    let _e83: Motor = self_2319;
    let _e85: Translator = other_2087;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), ((vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)) + (_e83.g1_ * vec3(_e85.g0_.w))), vec4(0.0));
}

fn motor_translator_meet(self_2320: Motor, other_2088: Translator) -> MultiVector {
    var self_2321: Motor;
    var other_2089: Translator;

    self_2321 = self_2320;
    other_2089 = other_2088;
    let _e4: Motor = self_2321;
    let _e8: Translator = other_2089;
    let _e17: Motor = self_2321;
    let _e21: Translator = other_2089;
    let _e31: Motor = self_2321;
    let _e34: Motor = self_2321;
    let _e38: Translator = other_2089;
    let _e41: Translator = other_2089;
    let _e53: Motor = self_2321;
    let _e56: Motor = self_2321;
    let _e59: Motor = self_2321;
    let _e63: Translator = other_2089;
    let _e68: Motor = self_2321;
    let _e72: Translator = other_2089;
    let _e75: Translator = other_2089;
    let _e78: Translator = other_2089;
    let _e83: Motor = self_2321;
    let _e85: Translator = other_2089;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), ((vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)) + (_e83.g1_ * vec3(_e85.g0_.w))), vec4(0.0));
}

fn motor_translator_outer_product(self_2322: Motor, other_2090: Translator) -> AntiScalar {
    var self_2323: Motor;
    var other_2091: Translator;

    self_2323 = self_2322;
    other_2091 = other_2090;
    let _e5: Motor = self_2323;
    let _e8: Translator = other_2091;
    let _e13: Motor = self_2323;
    let _e16: Translator = other_2091;
    let _e21: Motor = self_2323;
    let _e24: Translator = other_2091;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_wedge(self_2324: Motor, other_2092: Translator) -> AntiScalar {
    var self_2325: Motor;
    var other_2093: Translator;

    self_2325 = self_2324;
    other_2093 = other_2092;
    let _e5: Motor = self_2325;
    let _e8: Translator = other_2093;
    let _e13: Motor = self_2325;
    let _e16: Translator = other_2093;
    let _e21: Motor = self_2325;
    let _e24: Translator = other_2093;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_join(self_2326: Motor, other_2094: Translator) -> AntiScalar {
    var self_2327: Motor;
    var other_2095: Translator;

    self_2327 = self_2326;
    other_2095 = other_2094;
    let _e5: Motor = self_2327;
    let _e8: Translator = other_2095;
    let _e13: Motor = self_2327;
    let _e16: Translator = other_2095;
    let _e21: Motor = self_2327;
    let _e24: Translator = other_2095;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_inner_product(self_2328: Motor, other_2096: Translator) -> MultiVector {
    var self_2329: Motor;
    var other_2097: Translator;

    self_2329 = self_2328;
    other_2097 = other_2096;
    let _e4: Motor = self_2329;
    let _e8: Translator = other_2097;
    let _e17: Motor = self_2329;
    let _e21: Translator = other_2097;
    let _e31: Motor = self_2329;
    let _e35: Translator = other_2097;
    let _e47: Motor = self_2329;
    let _e51: Translator = other_2097;
    let _e54: Translator = other_2097;
    let _e57: Translator = other_2097;
    let _e62: Motor = self_2329;
    let _e64: Translator = other_2097;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)) + (_e62.g1_ * vec3(_e64.g0_.w))), vec3(0.0), vec4(0.0));
}

fn motor_translator_inner_anti_product(self_2330: Motor, other_2098: Translator) -> Motor {
    var self_2331: Motor;
    var other_2099: Translator;

    self_2331 = self_2330;
    other_2099 = other_2098;
    let _e4: Motor = self_2331;
    let _e6: Translator = other_2099;
    let _e11: Motor = self_2331;
    let _e15: Translator = other_2099;
    let _e18: Translator = other_2099;
    let _e21: Translator = other_2099;
    let _e26: Motor = self_2331;
    let _e28: Translator = other_2099;
    return Motor((_e4.g0_ * vec4(_e6.g0_.w)), ((vec3(_e11.g0_.w) * vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z)) + (_e26.g1_ * vec3(_e28.g0_.w))));
}

fn motor_translator_left_contraction(self_2332: Motor, other_2100: Translator) -> MultiVector {
    var self_2333: Motor;
    var other_2101: Translator;

    self_2333 = self_2332;
    other_2101 = other_2100;
    let _e4: Motor = self_2333;
    let _e8: Translator = other_2101;
    let _e17: Motor = self_2333;
    let _e21: Translator = other_2101;
    let _e31: Motor = self_2333;
    let _e35: Translator = other_2101;
    let _e47: Motor = self_2333;
    let _e49: Translator = other_2101;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (_e47.g1_ * vec3(_e49.g0_.w)), vec3(0.0), vec4(0.0));
}

fn motor_translator_right_contraction(self_2334: Motor, other_2102: Translator) -> MultiVector {
    var self_2335: Motor;
    var other_2103: Translator;

    self_2335 = self_2334;
    other_2103 = other_2102;
    let _e4: Motor = self_2335;
    let _e8: Translator = other_2103;
    let _e17: Motor = self_2335;
    let _e21: Translator = other_2103;
    let _e31: Motor = self_2335;
    let _e35: Translator = other_2103;
    let _e47: Motor = self_2335;
    let _e51: Translator = other_2103;
    let _e54: Translator = other_2103;
    let _e57: Translator = other_2103;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)), vec3(0.0), vec4(0.0));
}

fn motor_translator_left_anti_contraction(self_2336: Motor, other_2104: Translator) -> Translator {
    var self_2337: Motor;
    var other_2105: Translator;

    self_2337 = self_2336;
    other_2105 = other_2104;
    let _e4: Motor = self_2337;
    let _e8: Translator = other_2105;
    return Translator((vec4(_e4.g0_.w) * _e8.g0_));
}

fn motor_translator_right_anti_contraction(self_2338: Motor, other_2106: Translator) -> Motor {
    var self_2339: Motor;
    var other_2107: Translator;

    self_2339 = self_2338;
    other_2107 = other_2106;
    let _e4: Motor = self_2339;
    let _e6: Translator = other_2107;
    let _e11: Motor = self_2339;
    let _e13: Translator = other_2107;
    return Motor((_e4.g0_ * vec4(_e6.g0_.w)), (_e11.g1_ * vec3(_e13.g0_.w)));
}

fn motor_translator_scalar_product(self_2340: Motor, other_2108: Translator) -> Scalar {
    var self_2341: Motor;
    var other_2109: Translator;

    self_2341 = self_2340;
    other_2109 = other_2108;
    let _e5: Motor = self_2341;
    let _e8: Translator = other_2109;
    let _e13: Motor = self_2341;
    let _e16: Translator = other_2109;
    let _e21: Motor = self_2341;
    let _e24: Translator = other_2109;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_translator_dot(self_2342: Motor, other_2110: Translator) -> Scalar {
    var self_2343: Motor;
    var other_2111: Translator;

    self_2343 = self_2342;
    other_2111 = other_2110;
    let _e5: Motor = self_2343;
    let _e8: Translator = other_2111;
    let _e13: Motor = self_2343;
    let _e16: Translator = other_2111;
    let _e21: Motor = self_2343;
    let _e24: Translator = other_2111;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_translator_anti_scalar_product(self_2344: Motor, other_2112: Translator) -> AntiScalar {
    var self_2345: Motor;
    var other_2113: Translator;

    self_2345 = self_2344;
    other_2113 = other_2112;
    let _e4: Motor = self_2345;
    let _e7: Translator = other_2113;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn motor_translator_anti_dot(self_2346: Motor, other_2114: Translator) -> AntiScalar {
    var self_2347: Motor;
    var other_2115: Translator;

    self_2347 = self_2346;
    other_2115 = other_2114;
    let _e4: Motor = self_2347;
    let _e7: Translator = other_2115;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn motor_flector_geometric_product(self_2348: Motor, other_2116: Flector) -> Flector {
    var self_2349: Motor;
    var other_2117: Flector;

    self_2349 = self_2348;
    other_2117 = other_2116;
    let _e4: Motor = self_2349;
    let _e8: Flector = other_2117;
    let _e19: Motor = self_2349;
    let _e23: Flector = other_2117;
    let _e35: Motor = self_2349;
    let _e39: Flector = other_2117;
    let _e51: Motor = self_2349;
    let _e55: Flector = other_2117;
    let _e58: Flector = other_2117;
    let _e61: Flector = other_2117;
    let _e64: Flector = other_2117;
    let _e76: Motor = self_2349;
    let _e80: Flector = other_2117;
    let _e83: Flector = other_2117;
    let _e86: Flector = other_2117;
    let _e89: Flector = other_2117;
    let _e101: Motor = self_2349;
    let _e105: Flector = other_2117;
    let _e108: Flector = other_2117;
    let _e111: Flector = other_2117;
    let _e114: Flector = other_2117;
    let _e126: Motor = self_2349;
    let _e130: Flector = other_2117;
    let _e142: Motor = self_2349;
    let _e146: Flector = other_2117;
    let _e149: Flector = other_2117;
    let _e152: Flector = other_2117;
    let _e155: Flector = other_2117;
    let _e166: Motor = self_2349;
    let _e170: Flector = other_2117;
    let _e173: Flector = other_2117;
    let _e176: Flector = other_2117;
    let _e179: Flector = other_2117;
    let _e191: Motor = self_2349;
    let _e195: Flector = other_2117;
    let _e206: Motor = self_2349;
    let _e210: Flector = other_2117;
    let _e213: Flector = other_2117;
    let _e216: Flector = other_2117;
    let _e219: Flector = other_2117;
    let _e231: Motor = self_2349;
    let _e235: Flector = other_2117;
    let _e238: Flector = other_2117;
    let _e241: Flector = other_2117;
    let _e244: Flector = other_2117;
    let _e256: Motor = self_2349;
    let _e260: Flector = other_2117;
    let _e263: Flector = other_2117;
    let _e266: Flector = other_2117;
    let _e269: Flector = other_2117;
    let _e281: Motor = self_2349;
    let _e285: Flector = other_2117;
    let _e288: Flector = other_2117;
    let _e291: Flector = other_2117;
    let _e294: Flector = other_2117;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.x) * vec4<f32>(_e55.g1_.w, _e58.g0_.z, _e61.g0_.y, _e64.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e76.g1_.y) * vec4<f32>(_e80.g0_.z, _e83.g1_.w, _e86.g0_.x, _e89.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e101.g1_.z) * vec4<f32>(_e105.g0_.y, _e108.g0_.x, _e111.g1_.w, _e114.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e126.g0_.x) * vec4(_e130.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4(_e142.g0_.y) * vec4<f32>(_e146.g0_.z, _e149.g1_.w, _e152.g0_.x, _e155.g0_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e166.g0_.z) * vec4<f32>(_e170.g0_.y, _e173.g0_.x, _e176.g1_.w, _e179.g0_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e191.g0_.w) * _e195.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e206.g1_.x) * vec4<f32>(_e210.g0_.w, _e213.g1_.z, _e216.g1_.y, _e219.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e231.g1_.y) * vec4<f32>(_e235.g1_.z, _e238.g0_.w, _e241.g1_.x, _e244.g0_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e256.g1_.z) * vec4<f32>(_e260.g1_.y, _e263.g1_.x, _e266.g0_.w, _e269.g0_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e281.g0_.x) * vec4<f32>(_e285.g1_.w, _e288.g0_.z, _e291.g0_.y, _e294.g1_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn motor_flector_geometric_anti_product(self_2350: Motor, other_2118: Flector) -> Flector {
    var self_2351: Motor;
    var other_2119: Flector;

    self_2351 = self_2350;
    other_2119 = other_2118;
    let _e4: Motor = self_2351;
    let _e8: Flector = other_2119;
    let _e11: Flector = other_2119;
    let _e14: Flector = other_2119;
    let _e17: Flector = other_2119;
    let _e28: Motor = self_2351;
    let _e32: Flector = other_2119;
    let _e35: Flector = other_2119;
    let _e38: Flector = other_2119;
    let _e41: Flector = other_2119;
    let _e53: Motor = self_2351;
    let _e57: Flector = other_2119;
    let _e60: Flector = other_2119;
    let _e63: Flector = other_2119;
    let _e66: Flector = other_2119;
    let _e78: Motor = self_2351;
    let _e82: Flector = other_2119;
    let _e86: Motor = self_2351;
    let _e90: Flector = other_2119;
    let _e93: Flector = other_2119;
    let _e96: Flector = other_2119;
    let _e99: Flector = other_2119;
    let _e111: Motor = self_2351;
    let _e115: Flector = other_2119;
    let _e118: Flector = other_2119;
    let _e121: Flector = other_2119;
    let _e124: Flector = other_2119;
    let _e136: Motor = self_2351;
    let _e140: Flector = other_2119;
    let _e143: Flector = other_2119;
    let _e146: Flector = other_2119;
    let _e149: Flector = other_2119;
    let _e161: Motor = self_2351;
    let _e165: Flector = other_2119;
    let _e168: Flector = other_2119;
    let _e171: Flector = other_2119;
    let _e174: Flector = other_2119;
    let _e185: Motor = self_2351;
    let _e189: Flector = other_2119;
    let _e192: Flector = other_2119;
    let _e195: Flector = other_2119;
    let _e198: Flector = other_2119;
    let _e210: Motor = self_2351;
    let _e214: Flector = other_2119;
    let _e217: Flector = other_2119;
    let _e220: Flector = other_2119;
    let _e223: Flector = other_2119;
    let _e235: Motor = self_2351;
    let _e239: Flector = other_2119;
    let _e243: Motor = self_2351;
    let _e247: Flector = other_2119;
    let _e259: Motor = self_2351;
    let _e263: Flector = other_2119;
    let _e275: Motor = self_2351;
    let _e279: Flector = other_2119;
    return Flector(((((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g1_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g1_.w, _e66.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e78.g0_.w) * _e82.g0_)) + ((vec4(_e86.g1_.y) * vec4<f32>(_e90.g1_.z, _e93.g0_.w, _e96.g1_.x, _e99.g1_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e111.g1_.z) * vec4<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g0_.w, _e124.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e136.g1_.x) * vec4<f32>(_e140.g0_.w, _e143.g1_.z, _e146.g1_.y, _e149.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((((((vec4(_e161.g0_.x) * vec4<f32>(_e165.g0_.w, _e168.g1_.z, _e171.g1_.y, _e174.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e185.g0_.y) * vec4<f32>(_e189.g1_.z, _e192.g0_.w, _e195.g1_.x, _e198.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e210.g0_.z) * vec4<f32>(_e214.g1_.y, _e217.g1_.x, _e220.g0_.w, _e223.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e235.g0_.w) * _e239.g1_)) + ((vec4(_e243.g1_.y) * vec4(_e247.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e259.g1_.z) * vec4(_e263.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e275.g1_.x) * vec4(_e279.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_flector_regressive_product(self_2352: Motor, other_2120: Flector) -> Flector {
    var self_2353: Motor;
    var other_2121: Flector;

    self_2353 = self_2352;
    other_2121 = other_2120;
    let _e4: Motor = self_2353;
    let _e8: Flector = other_2121;
    let _e18: Motor = self_2353;
    let _e22: Flector = other_2121;
    let _e33: Motor = self_2353;
    let _e37: Flector = other_2121;
    let _e41: Motor = self_2353;
    let _e45: Flector = other_2121;
    let _e56: Motor = self_2353;
    let _e60: Flector = other_2121;
    let _e71: Motor = self_2353;
    let _e75: Flector = other_2121;
    let _e86: Motor = self_2353;
    let _e90: Flector = other_2121;
    let _e101: Motor = self_2353;
    let _e105: Flector = other_2121;
    return Flector(((((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g1_.x) * _e45.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e56.g1_.y) * _e60.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e71.g1_.z) * _e75.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e86.g0_.x) * _e90.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e101.g0_.w) * _e105.g1_));
}

fn motor_flector_anti_wedge(self_2354: Motor, other_2122: Flector) -> Flector {
    var self_2355: Motor;
    var other_2123: Flector;

    self_2355 = self_2354;
    other_2123 = other_2122;
    let _e4: Motor = self_2355;
    let _e8: Flector = other_2123;
    let _e18: Motor = self_2355;
    let _e22: Flector = other_2123;
    let _e33: Motor = self_2355;
    let _e37: Flector = other_2123;
    let _e41: Motor = self_2355;
    let _e45: Flector = other_2123;
    let _e56: Motor = self_2355;
    let _e60: Flector = other_2123;
    let _e71: Motor = self_2355;
    let _e75: Flector = other_2123;
    let _e86: Motor = self_2355;
    let _e90: Flector = other_2123;
    let _e101: Motor = self_2355;
    let _e105: Flector = other_2123;
    return Flector(((((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g1_.x) * _e45.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e56.g1_.y) * _e60.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e71.g1_.z) * _e75.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e86.g0_.x) * _e90.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e101.g0_.w) * _e105.g1_));
}

fn motor_flector_meet(self_2356: Motor, other_2124: Flector) -> Flector {
    var self_2357: Motor;
    var other_2125: Flector;

    self_2357 = self_2356;
    other_2125 = other_2124;
    let _e4: Motor = self_2357;
    let _e8: Flector = other_2125;
    let _e18: Motor = self_2357;
    let _e22: Flector = other_2125;
    let _e33: Motor = self_2357;
    let _e37: Flector = other_2125;
    let _e41: Motor = self_2357;
    let _e45: Flector = other_2125;
    let _e56: Motor = self_2357;
    let _e60: Flector = other_2125;
    let _e71: Motor = self_2357;
    let _e75: Flector = other_2125;
    let _e86: Motor = self_2357;
    let _e90: Flector = other_2125;
    let _e101: Motor = self_2357;
    let _e105: Flector = other_2125;
    return Flector(((((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g1_.x) * _e45.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e56.g1_.y) * _e60.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e71.g1_.z) * _e75.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e86.g0_.x) * _e90.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e101.g0_.w) * _e105.g1_));
}

fn motor_flector_outer_product(self_2358: Motor, other_2126: Flector) -> Plane {
    var self_2359: Motor;
    var other_2127: Flector;

    self_2359 = self_2358;
    other_2127 = other_2126;
    let _e4: Motor = self_2359;
    let _e8: Flector = other_2127;
    let _e18: Motor = self_2359;
    let _e22: Flector = other_2127;
    let _e33: Motor = self_2359;
    let _e37: Flector = other_2127;
    let _e48: Motor = self_2359;
    let _e52: Flector = other_2127;
    let _e63: Motor = self_2359;
    let _e67: Flector = other_2127;
    let _e78: Motor = self_2359;
    let _e82: Flector = other_2127;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_flector_wedge(self_2360: Motor, other_2128: Flector) -> Plane {
    var self_2361: Motor;
    var other_2129: Flector;

    self_2361 = self_2360;
    other_2129 = other_2128;
    let _e4: Motor = self_2361;
    let _e8: Flector = other_2129;
    let _e18: Motor = self_2361;
    let _e22: Flector = other_2129;
    let _e33: Motor = self_2361;
    let _e37: Flector = other_2129;
    let _e48: Motor = self_2361;
    let _e52: Flector = other_2129;
    let _e63: Motor = self_2361;
    let _e67: Flector = other_2129;
    let _e78: Motor = self_2361;
    let _e82: Flector = other_2129;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_flector_join(self_2362: Motor, other_2130: Flector) -> Plane {
    var self_2363: Motor;
    var other_2131: Flector;

    self_2363 = self_2362;
    other_2131 = other_2130;
    let _e4: Motor = self_2363;
    let _e8: Flector = other_2131;
    let _e18: Motor = self_2363;
    let _e22: Flector = other_2131;
    let _e33: Motor = self_2363;
    let _e37: Flector = other_2131;
    let _e48: Motor = self_2363;
    let _e52: Flector = other_2131;
    let _e63: Motor = self_2363;
    let _e67: Flector = other_2131;
    let _e78: Motor = self_2363;
    let _e82: Flector = other_2131;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e48.g1_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e63.g1_.z) * _e67.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e78.g0_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_flector_inner_product(self_2364: Motor, other_2132: Flector) -> Flector {
    var self_2365: Motor;
    var other_2133: Flector;

    self_2365 = self_2364;
    other_2133 = other_2132;
    let _e4: Motor = self_2365;
    let _e8: Flector = other_2133;
    let _e19: Motor = self_2365;
    let _e23: Flector = other_2133;
    let _e35: Motor = self_2365;
    let _e39: Flector = other_2133;
    let _e51: Motor = self_2365;
    let _e55: Flector = other_2133;
    let _e58: Flector = other_2133;
    let _e61: Flector = other_2133;
    let _e64: Flector = other_2133;
    let _e76: Motor = self_2365;
    let _e80: Flector = other_2133;
    let _e83: Flector = other_2133;
    let _e86: Flector = other_2133;
    let _e89: Flector = other_2133;
    let _e101: Motor = self_2365;
    let _e105: Flector = other_2133;
    let _e108: Flector = other_2133;
    let _e111: Flector = other_2133;
    let _e114: Flector = other_2133;
    let _e126: Motor = self_2365;
    let _e130: Flector = other_2133;
    let _e142: Motor = self_2365;
    let _e145: Flector = other_2133;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.x) * vec4<f32>(_e55.g1_.w, _e58.g0_.z, _e61.g0_.y, _e64.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e76.g1_.y) * vec4<f32>(_e80.g0_.z, _e83.g1_.w, _e86.g0_.x, _e89.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e101.g1_.z) * vec4<f32>(_e105.g0_.y, _e108.g0_.x, _e111.g1_.w, _e114.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e126.g0_.x) * vec4(_e130.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e142.g0_.wwwx * _e145.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_flector_inner_anti_product(self_2366: Motor, other_2134: Flector) -> Flector {
    var self_2367: Motor;
    var other_2135: Flector;

    self_2367 = self_2366;
    other_2135 = other_2134;
    let _e4: Motor = self_2367;
    let _e8: Flector = other_2135;
    let _e11: Motor = self_2367;
    let _e15: Flector = other_2135;
    let _e18: Flector = other_2135;
    let _e21: Flector = other_2135;
    let _e24: Flector = other_2135;
    let _e35: Motor = self_2367;
    let _e39: Flector = other_2135;
    let _e42: Flector = other_2135;
    let _e45: Flector = other_2135;
    let _e48: Flector = other_2135;
    let _e60: Motor = self_2367;
    let _e64: Flector = other_2135;
    let _e67: Flector = other_2135;
    let _e70: Flector = other_2135;
    let _e73: Flector = other_2135;
    let _e85: Motor = self_2367;
    let _e89: Flector = other_2135;
    let _e93: Motor = self_2367;
    let _e97: Flector = other_2135;
    let _e109: Motor = self_2367;
    let _e113: Flector = other_2135;
    let _e125: Motor = self_2367;
    let _e129: Flector = other_2135;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), ((((((((vec4(_e11.g0_.x) * vec4<f32>(_e15.g0_.w, _e18.g1_.z, _e21.g1_.y, _e24.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e35.g0_.y) * vec4<f32>(_e39.g1_.z, _e42.g0_.w, _e45.g1_.x, _e48.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e60.g0_.z) * vec4<f32>(_e64.g1_.y, _e67.g1_.x, _e70.g0_.w, _e73.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e85.g0_.w) * _e89.g1_)) + ((vec4(_e93.g1_.y) * vec4(_e97.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e109.g1_.z) * vec4(_e113.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e125.g1_.x) * vec4(_e129.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_flector_left_contraction(self_2368: Motor, other_2136: Flector) -> Point {
    var self_2369: Motor;
    var other_2137: Flector;

    self_2369 = self_2368;
    other_2137 = other_2136;
    let _e4: Motor = self_2369;
    let _e8: Flector = other_2137;
    let _e18: Motor = self_2369;
    let _e22: Flector = other_2137;
    let _e33: Motor = self_2369;
    let _e37: Flector = other_2137;
    return Point(((((vec4(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g1_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g1_.x) * _e37.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_flector_right_contraction(self_2370: Motor, other_2138: Flector) -> Flector {
    var self_2371: Motor;
    var other_2139: Flector;

    self_2371 = self_2370;
    other_2139 = other_2138;
    let _e4: Motor = self_2371;
    let _e8: Flector = other_2139;
    let _e19: Motor = self_2371;
    let _e23: Flector = other_2139;
    let _e35: Motor = self_2371;
    let _e39: Flector = other_2139;
    let _e51: Motor = self_2371;
    let _e55: Flector = other_2139;
    let _e66: Motor = self_2371;
    let _e70: Flector = other_2139;
    let _e81: Motor = self_2371;
    let _e85: Flector = other_2139;
    let _e96: Motor = self_2371;
    let _e100: Flector = other_2139;
    let _e112: Motor = self_2371;
    let _e115: Flector = other_2139;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.x) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e66.g1_.y) * _e70.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e81.g1_.z) * _e85.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e96.g0_.x) * vec4(_e100.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e112.g0_.wwwx * _e115.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_flector_left_anti_contraction(self_2372: Motor, other_2140: Flector) -> Flector {
    var self_2373: Motor;
    var other_2141: Flector;

    self_2373 = self_2372;
    other_2141 = other_2140;
    let _e4: Motor = self_2373;
    let _e8: Flector = other_2141;
    let _e11: Motor = self_2373;
    let _e15: Flector = other_2141;
    let _e25: Motor = self_2373;
    let _e29: Flector = other_2141;
    let _e40: Motor = self_2373;
    let _e44: Flector = other_2141;
    let _e48: Motor = self_2373;
    let _e52: Flector = other_2141;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), (((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e40.g0_.w) * _e44.g1_)) + ((vec4(_e48.g0_.x) * _e52.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_flector_right_anti_contraction(self_2374: Motor, other_2142: Flector) -> Plane {
    var self_2375: Motor;
    var other_2143: Flector;

    self_2375 = self_2374;
    other_2143 = other_2142;
    let _e4: Motor = self_2375;
    let _e8: Flector = other_2143;
    let _e18: Motor = self_2375;
    let _e22: Flector = other_2143;
    let _e33: Motor = self_2375;
    let _e37: Flector = other_2143;
    let _e49: Motor = self_2375;
    let _e53: Flector = other_2143;
    let _e65: Motor = self_2375;
    let _e69: Flector = other_2143;
    let _e81: Motor = self_2375;
    let _e85: Flector = other_2143;
    return Plane((((((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * vec4(_e37.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.y) * vec4(_e53.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e65.g1_.z) * vec4(_e69.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e81.g0_.x) * _e85.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_add(self_2376: Motor, other_2144: MultiVector) -> MultiVector {
    var self_2377: Motor;
    var other_2145: MultiVector;

    self_2377 = self_2376;
    other_2145 = other_2144;
    let _e4: Motor = self_2377;
    let _e7: Motor = self_2377;
    let _e15: MultiVector = other_2145;
    let _e18: MultiVector = other_2145;
    let _e20: Motor = self_2377;
    let _e23: Motor = self_2377;
    let _e26: Motor = self_2377;
    let _e30: MultiVector = other_2145;
    let _e33: Motor = self_2377;
    let _e35: MultiVector = other_2145;
    let _e38: MultiVector = other_2145;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) + _e30.g2_), (_e33.g1_ + _e35.g3_), _e38.g4_);
}

fn motor_multi_vector_sub(self_2378: Motor, other_2146: MultiVector) -> MultiVector {
    var self_2379: Motor;
    var other_2147: MultiVector;

    self_2379 = self_2378;
    other_2147 = other_2146;
    let _e4: Motor = self_2379;
    let _e7: Motor = self_2379;
    let _e15: MultiVector = other_2147;
    let _e20: MultiVector = other_2147;
    let _e23: Motor = self_2379;
    let _e26: Motor = self_2379;
    let _e29: Motor = self_2379;
    let _e33: MultiVector = other_2147;
    let _e36: Motor = self_2379;
    let _e38: MultiVector = other_2147;
    let _e43: MultiVector = other_2147;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4(0.0) - _e20.g1_), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) - _e33.g2_), (_e36.g1_ - _e38.g3_), (vec4(0.0) - _e43.g4_));
}

fn motor_multi_vector_geometric_product(self_2380: Motor, other_2148: MultiVector) -> MultiVector {
    var self_2381: Motor;
    var other_2149: MultiVector;

    self_2381 = self_2380;
    other_2149 = other_2148;
    let _e4: Motor = self_2381;
    let _e8: MultiVector = other_2149;
    let _e17: Motor = self_2381;
    let _e21: MultiVector = other_2149;
    let _e31: Motor = self_2381;
    let _e35: MultiVector = other_2149;
    let _e45: Motor = self_2381;
    let _e49: MultiVector = other_2149;
    let _e52: MultiVector = other_2149;
    let _e58: Motor = self_2381;
    let _e62: MultiVector = other_2149;
    let _e65: MultiVector = other_2149;
    let _e71: Motor = self_2381;
    let _e75: MultiVector = other_2149;
    let _e78: MultiVector = other_2149;
    let _e84: Motor = self_2381;
    let _e88: MultiVector = other_2149;
    let _e98: Motor = self_2381;
    let _e102: MultiVector = other_2149;
    let _e113: Motor = self_2381;
    let _e117: MultiVector = other_2149;
    let _e129: Motor = self_2381;
    let _e133: MultiVector = other_2149;
    let _e145: Motor = self_2381;
    let _e149: MultiVector = other_2149;
    let _e152: MultiVector = other_2149;
    let _e155: MultiVector = other_2149;
    let _e158: MultiVector = other_2149;
    let _e170: Motor = self_2381;
    let _e174: MultiVector = other_2149;
    let _e177: MultiVector = other_2149;
    let _e180: MultiVector = other_2149;
    let _e183: MultiVector = other_2149;
    let _e195: Motor = self_2381;
    let _e199: MultiVector = other_2149;
    let _e202: MultiVector = other_2149;
    let _e205: MultiVector = other_2149;
    let _e208: MultiVector = other_2149;
    let _e220: Motor = self_2381;
    let _e224: MultiVector = other_2149;
    let _e236: Motor = self_2381;
    let _e240: MultiVector = other_2149;
    let _e243: MultiVector = other_2149;
    let _e246: MultiVector = other_2149;
    let _e256: Motor = self_2381;
    let _e260: MultiVector = other_2149;
    let _e263: MultiVector = other_2149;
    let _e266: MultiVector = other_2149;
    let _e277: Motor = self_2381;
    let _e281: MultiVector = other_2149;
    let _e284: MultiVector = other_2149;
    let _e287: MultiVector = other_2149;
    let _e298: Motor = self_2381;
    let _e302: MultiVector = other_2149;
    let _e306: Motor = self_2381;
    let _e310: MultiVector = other_2149;
    let _e313: MultiVector = other_2149;
    let _e316: MultiVector = other_2149;
    let _e327: Motor = self_2381;
    let _e331: MultiVector = other_2149;
    let _e334: MultiVector = other_2149;
    let _e337: MultiVector = other_2149;
    let _e348: Motor = self_2381;
    let _e352: MultiVector = other_2149;
    let _e355: MultiVector = other_2149;
    let _e358: MultiVector = other_2149;
    let _e369: Motor = self_2381;
    let _e373: MultiVector = other_2149;
    let _e376: MultiVector = other_2149;
    let _e379: MultiVector = other_2149;
    let _e389: Motor = self_2381;
    let _e393: MultiVector = other_2149;
    let _e396: MultiVector = other_2149;
    let _e399: MultiVector = other_2149;
    let _e410: Motor = self_2381;
    let _e414: MultiVector = other_2149;
    let _e417: MultiVector = other_2149;
    let _e420: MultiVector = other_2149;
    let _e431: Motor = self_2381;
    let _e435: MultiVector = other_2149;
    let _e438: MultiVector = other_2149;
    let _e441: MultiVector = other_2149;
    let _e444: MultiVector = other_2149;
    let _e455: Motor = self_2381;
    let _e459: MultiVector = other_2149;
    let _e462: MultiVector = other_2149;
    let _e465: MultiVector = other_2149;
    let _e468: MultiVector = other_2149;
    let _e480: Motor = self_2381;
    let _e484: MultiVector = other_2149;
    let _e495: Motor = self_2381;
    let _e499: MultiVector = other_2149;
    let _e502: MultiVector = other_2149;
    let _e505: MultiVector = other_2149;
    let _e508: MultiVector = other_2149;
    let _e520: Motor = self_2381;
    let _e524: MultiVector = other_2149;
    let _e527: MultiVector = other_2149;
    let _e530: MultiVector = other_2149;
    let _e533: MultiVector = other_2149;
    let _e545: Motor = self_2381;
    let _e549: MultiVector = other_2149;
    let _e552: MultiVector = other_2149;
    let _e555: MultiVector = other_2149;
    let _e558: MultiVector = other_2149;
    let _e570: Motor = self_2381;
    let _e574: MultiVector = other_2149;
    let _e577: MultiVector = other_2149;
    let _e580: MultiVector = other_2149;
    let _e583: MultiVector = other_2149;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) - (vec2(_e45.g1_.x) * vec2<f32>(_e49.g3_.x, _e52.g2_.x))) - (vec2(_e58.g1_.y) * vec2<f32>(_e62.g3_.y, _e65.g2_.y))) - (vec2(_e71.g1_.z) * vec2<f32>(_e75.g3_.z, _e78.g2_.z))) + ((vec2(_e84.g0_.x) * vec2(_e88.g3_.x)) * vec2<f32>(0.0, -1.0))), ((((((((vec4(_e98.g0_.y) * vec4(_e102.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e113.g0_.z) * vec4(_e117.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e129.g0_.w) * vec4(_e133.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e145.g1_.x) * vec4<f32>(_e149.g4_.w, _e152.g1_.z, _e155.g1_.y, _e158.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e170.g1_.y) * vec4<f32>(_e174.g1_.z, _e177.g4_.w, _e180.g1_.x, _e183.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e195.g1_.z) * vec4<f32>(_e199.g1_.y, _e202.g1_.x, _e205.g4_.w, _e208.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e220.g0_.x) * vec4(_e224.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec3(_e236.g0_.x) * vec3<f32>(_e240.g0_.x, _e243.g3_.z, _e246.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e256.g0_.y) * vec3<f32>(_e260.g3_.z, _e263.g0_.x, _e266.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e277.g0_.z) * vec3<f32>(_e281.g3_.y, _e284.g3_.x, _e287.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))) + (vec3(_e298.g0_.w) * _e302.g3_)) + ((vec3(_e306.g1_.x) * vec3<f32>(_e310.g0_.y, _e313.g2_.z, _e316.g2_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e327.g1_.y) * vec3<f32>(_e331.g2_.z, _e334.g0_.y, _e337.g2_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e348.g1_.z) * vec3<f32>(_e352.g2_.y, _e355.g2_.x, _e358.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), ((((vec3(_e369.g1_.x) * vec3<f32>(_e373.g0_.x, _e376.g3_.z, _e379.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e389.g1_.y) * vec3<f32>(_e393.g3_.z, _e396.g0_.x, _e399.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e410.g1_.z) * vec3<f32>(_e414.g3_.y, _e417.g3_.x, _e420.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))), ((((((((vec4(_e431.g0_.y) * vec4<f32>(_e435.g1_.z, _e438.g4_.w, _e441.g1_.x, _e444.g1_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e455.g0_.z) * vec4<f32>(_e459.g1_.y, _e462.g1_.x, _e465.g4_.w, _e468.g1_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e480.g0_.w) * _e484.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e495.g1_.x) * vec4<f32>(_e499.g1_.w, _e502.g4_.z, _e505.g4_.y, _e508.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e520.g1_.y) * vec4<f32>(_e524.g4_.z, _e527.g1_.w, _e530.g4_.x, _e533.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e545.g1_.z) * vec4<f32>(_e549.g4_.y, _e552.g4_.x, _e555.g1_.w, _e558.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e570.g0_.x) * vec4<f32>(_e574.g4_.w, _e577.g1_.z, _e580.g1_.y, _e583.g4_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_geometric_anti_product(self_2382: Motor, other_2150: MultiVector) -> MultiVector {
    var self_2383: Motor;
    var other_2151: MultiVector;

    self_2383 = self_2382;
    other_2151 = other_2150;
    let _e6: Motor = self_2383;
    let _e10: MultiVector = other_2151;
    let _e13: MultiVector = other_2151;
    let _e19: Motor = self_2383;
    let _e23: MultiVector = other_2151;
    let _e26: MultiVector = other_2151;
    let _e32: Motor = self_2383;
    let _e36: MultiVector = other_2151;
    let _e39: MultiVector = other_2151;
    let _e45: Motor = self_2383;
    let _e49: MultiVector = other_2151;
    let _e53: Motor = self_2383;
    let _e57: MultiVector = other_2151;
    let _e67: Motor = self_2383;
    let _e71: MultiVector = other_2151;
    let _e81: Motor = self_2383;
    let _e85: MultiVector = other_2151;
    let _e95: Motor = self_2383;
    let _e99: MultiVector = other_2151;
    let _e102: MultiVector = other_2151;
    let _e105: MultiVector = other_2151;
    let _e108: MultiVector = other_2151;
    let _e119: Motor = self_2383;
    let _e123: MultiVector = other_2151;
    let _e126: MultiVector = other_2151;
    let _e129: MultiVector = other_2151;
    let _e132: MultiVector = other_2151;
    let _e144: Motor = self_2383;
    let _e148: MultiVector = other_2151;
    let _e151: MultiVector = other_2151;
    let _e154: MultiVector = other_2151;
    let _e157: MultiVector = other_2151;
    let _e169: Motor = self_2383;
    let _e173: MultiVector = other_2151;
    let _e177: Motor = self_2383;
    let _e181: MultiVector = other_2151;
    let _e184: MultiVector = other_2151;
    let _e187: MultiVector = other_2151;
    let _e190: MultiVector = other_2151;
    let _e202: Motor = self_2383;
    let _e206: MultiVector = other_2151;
    let _e209: MultiVector = other_2151;
    let _e212: MultiVector = other_2151;
    let _e215: MultiVector = other_2151;
    let _e227: Motor = self_2383;
    let _e231: MultiVector = other_2151;
    let _e234: MultiVector = other_2151;
    let _e237: MultiVector = other_2151;
    let _e240: MultiVector = other_2151;
    let _e252: Motor = self_2383;
    let _e256: MultiVector = other_2151;
    let _e259: MultiVector = other_2151;
    let _e262: MultiVector = other_2151;
    let _e272: Motor = self_2383;
    let _e276: MultiVector = other_2151;
    let _e279: MultiVector = other_2151;
    let _e282: MultiVector = other_2151;
    let _e293: Motor = self_2383;
    let _e297: MultiVector = other_2151;
    let _e300: MultiVector = other_2151;
    let _e303: MultiVector = other_2151;
    let _e314: Motor = self_2383;
    let _e318: MultiVector = other_2151;
    let _e322: Motor = self_2383;
    let _e326: MultiVector = other_2151;
    let _e329: MultiVector = other_2151;
    let _e332: MultiVector = other_2151;
    let _e342: Motor = self_2383;
    let _e346: MultiVector = other_2151;
    let _e349: MultiVector = other_2151;
    let _e352: MultiVector = other_2151;
    let _e363: Motor = self_2383;
    let _e367: MultiVector = other_2151;
    let _e370: MultiVector = other_2151;
    let _e373: MultiVector = other_2151;
    let _e384: Motor = self_2383;
    let _e388: MultiVector = other_2151;
    let _e392: Motor = self_2383;
    let _e396: MultiVector = other_2151;
    let _e399: MultiVector = other_2151;
    let _e402: MultiVector = other_2151;
    let _e413: Motor = self_2383;
    let _e417: MultiVector = other_2151;
    let _e420: MultiVector = other_2151;
    let _e423: MultiVector = other_2151;
    let _e434: Motor = self_2383;
    let _e438: MultiVector = other_2151;
    let _e441: MultiVector = other_2151;
    let _e444: MultiVector = other_2151;
    let _e455: Motor = self_2383;
    let _e459: MultiVector = other_2151;
    let _e462: MultiVector = other_2151;
    let _e465: MultiVector = other_2151;
    let _e468: MultiVector = other_2151;
    let _e479: Motor = self_2383;
    let _e483: MultiVector = other_2151;
    let _e486: MultiVector = other_2151;
    let _e489: MultiVector = other_2151;
    let _e492: MultiVector = other_2151;
    let _e504: Motor = self_2383;
    let _e508: MultiVector = other_2151;
    let _e511: MultiVector = other_2151;
    let _e514: MultiVector = other_2151;
    let _e517: MultiVector = other_2151;
    let _e529: Motor = self_2383;
    let _e533: MultiVector = other_2151;
    let _e537: Motor = self_2383;
    let _e541: MultiVector = other_2151;
    let _e553: Motor = self_2383;
    let _e557: MultiVector = other_2151;
    let _e569: Motor = self_2383;
    let _e573: MultiVector = other_2151;
    return MultiVector((((((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + (vec2(_e45.g0_.w) * _e49.g0_)) + ((vec2(_e53.g1_.y) * vec2(_e57.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g1_.z) * vec2(_e71.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g1_.x) * vec2(_e85.g2_.x)) * vec2<f32>(-1.0, 0.0))), ((((((((vec4(_e95.g0_.x) * vec4<f32>(_e99.g4_.w, _e102.g1_.z, _e105.g1_.y, _e108.g4_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e119.g0_.y) * vec4<f32>(_e123.g1_.z, _e126.g4_.w, _e129.g1_.x, _e132.g4_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e144.g0_.z) * vec4<f32>(_e148.g1_.y, _e151.g1_.x, _e154.g4_.w, _e157.g4_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e169.g0_.w) * _e173.g1_)) + ((vec4(_e177.g1_.y) * vec4<f32>(_e181.g4_.z, _e184.g1_.w, _e187.g4_.x, _e190.g4_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e202.g1_.z) * vec4<f32>(_e206.g4_.y, _e209.g4_.x, _e212.g1_.w, _e215.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e227.g1_.x) * vec4<f32>(_e231.g1_.w, _e234.g4_.z, _e237.g4_.y, _e240.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), (((((vec3(_e252.g0_.x) * vec3<f32>(_e256.g0_.y, _e259.g2_.z, _e262.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e272.g0_.y) * vec3<f32>(_e276.g2_.z, _e279.g0_.y, _e282.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e293.g0_.z) * vec3<f32>(_e297.g2_.y, _e300.g2_.x, _e303.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e314.g0_.w) * _e318.g2_)), ((((((((vec3(_e322.g0_.x) * vec3<f32>(_e326.g0_.x, _e329.g3_.z, _e332.g3_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e342.g0_.y) * vec3<f32>(_e346.g3_.z, _e349.g0_.x, _e352.g3_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e363.g0_.z) * vec3<f32>(_e367.g3_.y, _e370.g3_.x, _e373.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e384.g0_.w) * _e388.g3_)) + ((vec3(_e392.g1_.x) * vec3<f32>(_e396.g0_.y, _e399.g2_.z, _e402.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e413.g1_.y) * vec3<f32>(_e417.g2_.z, _e420.g0_.y, _e423.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e434.g1_.z) * vec3<f32>(_e438.g2_.y, _e441.g2_.x, _e444.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))), ((((((((vec4(_e455.g0_.x) * vec4<f32>(_e459.g1_.w, _e462.g4_.z, _e465.g4_.y, _e468.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e479.g0_.y) * vec4<f32>(_e483.g4_.z, _e486.g1_.w, _e489.g4_.x, _e492.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e504.g0_.z) * vec4<f32>(_e508.g4_.y, _e511.g4_.x, _e514.g1_.w, _e517.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e529.g0_.w) * _e533.g4_)) + ((vec4(_e537.g1_.y) * vec4(_e541.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e553.g1_.z) * vec4(_e557.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e569.g1_.x) * vec4(_e573.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_multi_vector_regressive_product(self_2384: Motor, other_2152: MultiVector) -> MultiVector {
    var self_2385: Motor;
    var other_2153: MultiVector;

    self_2385 = self_2384;
    other_2153 = other_2152;
    let _e4: Motor = self_2385;
    let _e8: MultiVector = other_2153;
    let _e17: Motor = self_2385;
    let _e21: MultiVector = other_2153;
    let _e31: Motor = self_2385;
    let _e35: MultiVector = other_2153;
    let _e39: Motor = self_2385;
    let _e43: MultiVector = other_2153;
    let _e53: Motor = self_2385;
    let _e57: MultiVector = other_2153;
    let _e67: Motor = self_2385;
    let _e71: MultiVector = other_2153;
    let _e81: Motor = self_2385;
    let _e85: MultiVector = other_2153;
    let _e95: Motor = self_2385;
    let _e99: MultiVector = other_2153;
    let _e109: Motor = self_2385;
    let _e113: MultiVector = other_2153;
    let _e124: Motor = self_2385;
    let _e128: MultiVector = other_2153;
    let _e132: Motor = self_2385;
    let _e136: MultiVector = other_2153;
    let _e147: Motor = self_2385;
    let _e151: MultiVector = other_2153;
    let _e162: Motor = self_2385;
    let _e166: MultiVector = other_2153;
    let _e177: Motor = self_2385;
    let _e181: MultiVector = other_2153;
    let _e192: Motor = self_2385;
    let _e196: MultiVector = other_2153;
    let _e199: Motor = self_2385;
    let _e202: Motor = self_2385;
    let _e205: Motor = self_2385;
    let _e209: MultiVector = other_2153;
    let _e215: Motor = self_2385;
    let _e219: MultiVector = other_2153;
    let _e222: Motor = self_2385;
    let _e224: MultiVector = other_2153;
    let _e230: Motor = self_2385;
    let _e234: MultiVector = other_2153;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g1_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e53.g1_.y) * vec2(_e57.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g1_.z) * vec2(_e71.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g0_.x) * vec2(_e85.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((((vec4(_e95.g0_.y) * _e99.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e109.g0_.z) * _e113.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e124.g0_.w) * _e128.g1_)) + ((vec4(_e132.g1_.x) * _e136.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e147.g1_.y) * _e151.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e162.g1_.z) * _e166.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e177.g0_.x) * _e181.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e192.g0_.w) * _e196.g2_) + (vec3<f32>(_e199.g0_.x, _e202.g0_.y, _e205.g0_.z) * vec3(_e209.g0_.y))), ((vec3(_e215.g0_.w) * _e219.g3_) + (_e222.g1_ * vec3(_e224.g0_.y))), (vec4(_e230.g0_.w) * _e234.g4_));
}

fn motor_multi_vector_anti_wedge(self_2386: Motor, other_2154: MultiVector) -> MultiVector {
    var self_2387: Motor;
    var other_2155: MultiVector;

    self_2387 = self_2386;
    other_2155 = other_2154;
    let _e4: Motor = self_2387;
    let _e8: MultiVector = other_2155;
    let _e17: Motor = self_2387;
    let _e21: MultiVector = other_2155;
    let _e31: Motor = self_2387;
    let _e35: MultiVector = other_2155;
    let _e39: Motor = self_2387;
    let _e43: MultiVector = other_2155;
    let _e53: Motor = self_2387;
    let _e57: MultiVector = other_2155;
    let _e67: Motor = self_2387;
    let _e71: MultiVector = other_2155;
    let _e81: Motor = self_2387;
    let _e85: MultiVector = other_2155;
    let _e95: Motor = self_2387;
    let _e99: MultiVector = other_2155;
    let _e109: Motor = self_2387;
    let _e113: MultiVector = other_2155;
    let _e124: Motor = self_2387;
    let _e128: MultiVector = other_2155;
    let _e132: Motor = self_2387;
    let _e136: MultiVector = other_2155;
    let _e147: Motor = self_2387;
    let _e151: MultiVector = other_2155;
    let _e162: Motor = self_2387;
    let _e166: MultiVector = other_2155;
    let _e177: Motor = self_2387;
    let _e181: MultiVector = other_2155;
    let _e192: Motor = self_2387;
    let _e196: MultiVector = other_2155;
    let _e199: Motor = self_2387;
    let _e202: Motor = self_2387;
    let _e205: Motor = self_2387;
    let _e209: MultiVector = other_2155;
    let _e215: Motor = self_2387;
    let _e219: MultiVector = other_2155;
    let _e222: Motor = self_2387;
    let _e224: MultiVector = other_2155;
    let _e230: Motor = self_2387;
    let _e234: MultiVector = other_2155;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g1_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e53.g1_.y) * vec2(_e57.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g1_.z) * vec2(_e71.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g0_.x) * vec2(_e85.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((((vec4(_e95.g0_.y) * _e99.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e109.g0_.z) * _e113.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e124.g0_.w) * _e128.g1_)) + ((vec4(_e132.g1_.x) * _e136.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e147.g1_.y) * _e151.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e162.g1_.z) * _e166.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e177.g0_.x) * _e181.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e192.g0_.w) * _e196.g2_) + (vec3<f32>(_e199.g0_.x, _e202.g0_.y, _e205.g0_.z) * vec3(_e209.g0_.y))), ((vec3(_e215.g0_.w) * _e219.g3_) + (_e222.g1_ * vec3(_e224.g0_.y))), (vec4(_e230.g0_.w) * _e234.g4_));
}

fn motor_multi_vector_meet(self_2388: Motor, other_2156: MultiVector) -> MultiVector {
    var self_2389: Motor;
    var other_2157: MultiVector;

    self_2389 = self_2388;
    other_2157 = other_2156;
    let _e4: Motor = self_2389;
    let _e8: MultiVector = other_2157;
    let _e17: Motor = self_2389;
    let _e21: MultiVector = other_2157;
    let _e31: Motor = self_2389;
    let _e35: MultiVector = other_2157;
    let _e39: Motor = self_2389;
    let _e43: MultiVector = other_2157;
    let _e53: Motor = self_2389;
    let _e57: MultiVector = other_2157;
    let _e67: Motor = self_2389;
    let _e71: MultiVector = other_2157;
    let _e81: Motor = self_2389;
    let _e85: MultiVector = other_2157;
    let _e95: Motor = self_2389;
    let _e99: MultiVector = other_2157;
    let _e109: Motor = self_2389;
    let _e113: MultiVector = other_2157;
    let _e124: Motor = self_2389;
    let _e128: MultiVector = other_2157;
    let _e132: Motor = self_2389;
    let _e136: MultiVector = other_2157;
    let _e147: Motor = self_2389;
    let _e151: MultiVector = other_2157;
    let _e162: Motor = self_2389;
    let _e166: MultiVector = other_2157;
    let _e177: Motor = self_2389;
    let _e181: MultiVector = other_2157;
    let _e192: Motor = self_2389;
    let _e196: MultiVector = other_2157;
    let _e199: Motor = self_2389;
    let _e202: Motor = self_2389;
    let _e205: Motor = self_2389;
    let _e209: MultiVector = other_2157;
    let _e215: Motor = self_2389;
    let _e219: MultiVector = other_2157;
    let _e222: Motor = self_2389;
    let _e224: MultiVector = other_2157;
    let _e230: Motor = self_2389;
    let _e234: MultiVector = other_2157;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g1_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e53.g1_.y) * vec2(_e57.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g1_.z) * vec2(_e71.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g0_.x) * vec2(_e85.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((((((vec4(_e95.g0_.y) * _e99.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e109.g0_.z) * _e113.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e124.g0_.w) * _e128.g1_)) + ((vec4(_e132.g1_.x) * _e136.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e147.g1_.y) * _e151.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e162.g1_.z) * _e166.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e177.g0_.x) * _e181.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e192.g0_.w) * _e196.g2_) + (vec3<f32>(_e199.g0_.x, _e202.g0_.y, _e205.g0_.z) * vec3(_e209.g0_.y))), ((vec3(_e215.g0_.w) * _e219.g3_) + (_e222.g1_ * vec3(_e224.g0_.y))), (vec4(_e230.g0_.w) * _e234.g4_));
}

fn motor_multi_vector_outer_product(self_2390: Motor, other_2158: MultiVector) -> MultiVector {
    var self_2391: Motor;
    var other_2159: MultiVector;

    self_2391 = self_2390;
    other_2159 = other_2158;
    let _e4: Motor = self_2391;
    let _e8: MultiVector = other_2159;
    let _e17: Motor = self_2391;
    let _e21: MultiVector = other_2159;
    let _e31: Motor = self_2391;
    let _e35: MultiVector = other_2159;
    let _e45: Motor = self_2391;
    let _e49: MultiVector = other_2159;
    let _e59: Motor = self_2391;
    let _e63: MultiVector = other_2159;
    let _e73: Motor = self_2391;
    let _e77: MultiVector = other_2159;
    let _e87: Motor = self_2391;
    let _e91: MultiVector = other_2159;
    let _e103: Motor = self_2391;
    let _e106: Motor = self_2391;
    let _e109: Motor = self_2391;
    let _e113: MultiVector = other_2159;
    let _e118: Motor = self_2391;
    let _e120: MultiVector = other_2159;
    let _e125: Motor = self_2391;
    let _e129: MultiVector = other_2159;
    let _e139: Motor = self_2391;
    let _e143: MultiVector = other_2159;
    let _e154: Motor = self_2391;
    let _e158: MultiVector = other_2159;
    let _e169: Motor = self_2391;
    let _e173: MultiVector = other_2159;
    let _e184: Motor = self_2391;
    let _e188: MultiVector = other_2159;
    let _e199: Motor = self_2391;
    let _e203: MultiVector = other_2159;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e103.g0_.x, _e106.g0_.y, _e109.g0_.z) * vec3(_e113.g0_.x)), (_e118.g1_ * vec3(_e120.g0_.x)), (((((((vec4(_e125.g0_.y) * _e129.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e139.g0_.z) * _e143.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e154.g1_.x) * _e158.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e169.g1_.y) * _e173.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e184.g1_.z) * _e188.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e199.g0_.x) * _e203.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_wedge(self_2392: Motor, other_2160: MultiVector) -> MultiVector {
    var self_2393: Motor;
    var other_2161: MultiVector;

    self_2393 = self_2392;
    other_2161 = other_2160;
    let _e4: Motor = self_2393;
    let _e8: MultiVector = other_2161;
    let _e17: Motor = self_2393;
    let _e21: MultiVector = other_2161;
    let _e31: Motor = self_2393;
    let _e35: MultiVector = other_2161;
    let _e45: Motor = self_2393;
    let _e49: MultiVector = other_2161;
    let _e59: Motor = self_2393;
    let _e63: MultiVector = other_2161;
    let _e73: Motor = self_2393;
    let _e77: MultiVector = other_2161;
    let _e87: Motor = self_2393;
    let _e91: MultiVector = other_2161;
    let _e103: Motor = self_2393;
    let _e106: Motor = self_2393;
    let _e109: Motor = self_2393;
    let _e113: MultiVector = other_2161;
    let _e118: Motor = self_2393;
    let _e120: MultiVector = other_2161;
    let _e125: Motor = self_2393;
    let _e129: MultiVector = other_2161;
    let _e139: Motor = self_2393;
    let _e143: MultiVector = other_2161;
    let _e154: Motor = self_2393;
    let _e158: MultiVector = other_2161;
    let _e169: Motor = self_2393;
    let _e173: MultiVector = other_2161;
    let _e184: Motor = self_2393;
    let _e188: MultiVector = other_2161;
    let _e199: Motor = self_2393;
    let _e203: MultiVector = other_2161;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e103.g0_.x, _e106.g0_.y, _e109.g0_.z) * vec3(_e113.g0_.x)), (_e118.g1_ * vec3(_e120.g0_.x)), (((((((vec4(_e125.g0_.y) * _e129.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e139.g0_.z) * _e143.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e154.g1_.x) * _e158.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e169.g1_.y) * _e173.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e184.g1_.z) * _e188.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e199.g0_.x) * _e203.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_join(self_2394: Motor, other_2162: MultiVector) -> MultiVector {
    var self_2395: Motor;
    var other_2163: MultiVector;

    self_2395 = self_2394;
    other_2163 = other_2162;
    let _e4: Motor = self_2395;
    let _e8: MultiVector = other_2163;
    let _e17: Motor = self_2395;
    let _e21: MultiVector = other_2163;
    let _e31: Motor = self_2395;
    let _e35: MultiVector = other_2163;
    let _e45: Motor = self_2395;
    let _e49: MultiVector = other_2163;
    let _e59: Motor = self_2395;
    let _e63: MultiVector = other_2163;
    let _e73: Motor = self_2395;
    let _e77: MultiVector = other_2163;
    let _e87: Motor = self_2395;
    let _e91: MultiVector = other_2163;
    let _e103: Motor = self_2395;
    let _e106: Motor = self_2395;
    let _e109: Motor = self_2395;
    let _e113: MultiVector = other_2163;
    let _e118: Motor = self_2395;
    let _e120: MultiVector = other_2163;
    let _e125: Motor = self_2395;
    let _e129: MultiVector = other_2163;
    let _e139: Motor = self_2395;
    let _e143: MultiVector = other_2163;
    let _e154: Motor = self_2395;
    let _e158: MultiVector = other_2163;
    let _e169: Motor = self_2395;
    let _e173: MultiVector = other_2163;
    let _e184: Motor = self_2395;
    let _e188: MultiVector = other_2163;
    let _e199: Motor = self_2395;
    let _e203: MultiVector = other_2163;
    return MultiVector(((((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2(_e91.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e103.g0_.x, _e106.g0_.y, _e109.g0_.z) * vec3(_e113.g0_.x)), (_e118.g1_ * vec3(_e120.g0_.x)), (((((((vec4(_e125.g0_.y) * _e129.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e139.g0_.z) * _e143.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e154.g1_.x) * _e158.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e169.g1_.y) * _e173.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e184.g1_.z) * _e188.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e199.g0_.x) * _e203.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_inner_product(self_2396: Motor, other_2164: MultiVector) -> MultiVector {
    var self_2397: Motor;
    var other_2165: MultiVector;

    self_2397 = self_2396;
    other_2165 = other_2164;
    let _e4: Motor = self_2397;
    let _e8: MultiVector = other_2165;
    let _e17: Motor = self_2397;
    let _e21: MultiVector = other_2165;
    let _e31: Motor = self_2397;
    let _e35: MultiVector = other_2165;
    let _e45: Motor = self_2397;
    let _e48: Motor = self_2397;
    let _e52: MultiVector = other_2165;
    let _e62: Motor = self_2397;
    let _e66: MultiVector = other_2165;
    let _e77: Motor = self_2397;
    let _e81: MultiVector = other_2165;
    let _e93: Motor = self_2397;
    let _e97: MultiVector = other_2165;
    let _e109: Motor = self_2397;
    let _e113: MultiVector = other_2165;
    let _e116: MultiVector = other_2165;
    let _e119: MultiVector = other_2165;
    let _e122: MultiVector = other_2165;
    let _e134: Motor = self_2397;
    let _e138: MultiVector = other_2165;
    let _e141: MultiVector = other_2165;
    let _e144: MultiVector = other_2165;
    let _e147: MultiVector = other_2165;
    let _e159: Motor = self_2397;
    let _e163: MultiVector = other_2165;
    let _e166: MultiVector = other_2165;
    let _e169: MultiVector = other_2165;
    let _e172: MultiVector = other_2165;
    let _e184: Motor = self_2397;
    let _e188: MultiVector = other_2165;
    let _e200: Motor = self_2397;
    let _e204: MultiVector = other_2165;
    let _e207: Motor = self_2397;
    let _e211: MultiVector = other_2165;
    let _e222: Motor = self_2397;
    let _e226: MultiVector = other_2165;
    let _e237: Motor = self_2397;
    let _e241: MultiVector = other_2165;
    let _e252: Motor = self_2397;
    let _e255: Motor = self_2397;
    let _e258: Motor = self_2397;
    let _e262: MultiVector = other_2165;
    let _e268: Motor = self_2397;
    let _e270: MultiVector = other_2165;
    let _e275: Motor = self_2397;
    let _e278: MultiVector = other_2165;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g3_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2(_e52.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((vec4(_e62.g0_.y) * vec4(_e66.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e77.g0_.z) * vec4(_e81.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e93.g0_.w) * vec4(_e97.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e109.g1_.x) * vec4<f32>(_e113.g4_.w, _e116.g1_.z, _e119.g1_.y, _e122.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e134.g1_.y) * vec4<f32>(_e138.g1_.z, _e141.g4_.w, _e144.g1_.x, _e147.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e159.g1_.z) * vec4<f32>(_e163.g1_.y, _e166.g1_.x, _e169.g4_.w, _e172.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e184.g0_.x) * vec4(_e188.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3(_e200.g0_.w) * _e204.g3_) + ((vec3(_e207.g1_.x) * vec3(_e211.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e222.g1_.y) * vec3(_e226.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e237.g1_.z) * vec3(_e241.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e252.g0_.x, _e255.g0_.y, _e258.g0_.z) * vec3(_e262.g0_.x))), (_e268.g1_ * vec3(_e270.g0_.x)), ((_e275.g0_.wwwx * _e278.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_multi_vector_inner_anti_product(self_2398: Motor, other_2166: MultiVector) -> MultiVector {
    var self_2399: Motor;
    var other_2167: MultiVector;

    self_2399 = self_2398;
    other_2167 = other_2166;
    let _e4: Motor = self_2399;
    let _e8: MultiVector = other_2167;
    let _e17: Motor = self_2399;
    let _e21: MultiVector = other_2167;
    let _e31: Motor = self_2399;
    let _e35: MultiVector = other_2167;
    let _e39: Motor = self_2399;
    let _e43: MultiVector = other_2167;
    let _e53: Motor = self_2399;
    let _e57: MultiVector = other_2167;
    let _e60: Motor = self_2399;
    let _e64: MultiVector = other_2167;
    let _e67: Motor = self_2399;
    let _e70: Motor = self_2399;
    let _e73: Motor = self_2399;
    let _e77: MultiVector = other_2167;
    let _e83: Motor = self_2399;
    let _e87: MultiVector = other_2167;
    let _e90: Motor = self_2399;
    let _e94: MultiVector = other_2167;
    let _e105: Motor = self_2399;
    let _e109: MultiVector = other_2167;
    let _e120: Motor = self_2399;
    let _e124: MultiVector = other_2167;
    let _e135: Motor = self_2399;
    let _e138: Motor = self_2399;
    let _e141: Motor = self_2399;
    let _e145: MultiVector = other_2167;
    let _e151: Motor = self_2399;
    let _e155: MultiVector = other_2167;
    let _e158: MultiVector = other_2167;
    let _e161: MultiVector = other_2167;
    let _e164: MultiVector = other_2167;
    let _e175: Motor = self_2399;
    let _e179: MultiVector = other_2167;
    let _e182: MultiVector = other_2167;
    let _e185: MultiVector = other_2167;
    let _e188: MultiVector = other_2167;
    let _e200: Motor = self_2399;
    let _e204: MultiVector = other_2167;
    let _e207: MultiVector = other_2167;
    let _e210: MultiVector = other_2167;
    let _e213: MultiVector = other_2167;
    let _e225: Motor = self_2399;
    let _e229: MultiVector = other_2167;
    let _e233: Motor = self_2399;
    let _e237: MultiVector = other_2167;
    let _e249: Motor = self_2399;
    let _e253: MultiVector = other_2167;
    let _e265: Motor = self_2399;
    let _e269: MultiVector = other_2167;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e53.g0_.w) * _e57.g1_), ((vec3(_e60.g0_.w) * _e64.g2_) + (vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z) * vec3(_e77.g0_.y))), (((((vec3(_e83.g0_.w) * _e87.g3_) + ((vec3(_e90.g1_.x) * vec3(_e94.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e105.g1_.y) * vec3(_e109.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e120.g1_.z) * vec3(_e124.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e135.g0_.x, _e138.g0_.y, _e141.g0_.z) * vec3(_e145.g0_.x))), ((((((((vec4(_e151.g0_.x) * vec4<f32>(_e155.g1_.w, _e158.g4_.z, _e161.g4_.y, _e164.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e175.g0_.y) * vec4<f32>(_e179.g4_.z, _e182.g1_.w, _e185.g4_.x, _e188.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e200.g0_.z) * vec4<f32>(_e204.g4_.y, _e207.g4_.x, _e210.g1_.w, _e213.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e225.g0_.w) * _e229.g4_)) + ((vec4(_e233.g1_.y) * vec4(_e237.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e249.g1_.z) * vec4(_e253.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e265.g1_.x) * vec4(_e269.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn motor_multi_vector_left_contraction(self_2400: Motor, other_2168: MultiVector) -> MultiVector {
    var self_2401: Motor;
    var other_2169: MultiVector;

    self_2401 = self_2400;
    other_2169 = other_2168;
    let _e4: Motor = self_2401;
    let _e8: MultiVector = other_2169;
    let _e17: Motor = self_2401;
    let _e21: MultiVector = other_2169;
    let _e31: Motor = self_2401;
    let _e35: MultiVector = other_2169;
    let _e45: Motor = self_2401;
    let _e49: MultiVector = other_2169;
    let _e59: Motor = self_2401;
    let _e63: MultiVector = other_2169;
    let _e74: Motor = self_2401;
    let _e78: MultiVector = other_2169;
    let _e89: Motor = self_2401;
    let _e91: MultiVector = other_2169;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g1_.y) * _e49.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e59.g1_.z) * _e63.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e74.g1_.x) * _e78.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (_e89.g1_ * vec3(_e91.g0_.y)), vec3(0.0), vec4(0.0));
}

fn motor_multi_vector_right_contraction(self_2402: Motor, other_2170: MultiVector) -> MultiVector {
    var self_2403: Motor;
    var other_2171: MultiVector;

    self_2403 = self_2402;
    other_2171 = other_2170;
    let _e4: Motor = self_2403;
    let _e8: MultiVector = other_2171;
    let _e17: Motor = self_2403;
    let _e21: MultiVector = other_2171;
    let _e31: Motor = self_2403;
    let _e35: MultiVector = other_2171;
    let _e45: Motor = self_2403;
    let _e48: Motor = self_2403;
    let _e52: MultiVector = other_2171;
    let _e62: Motor = self_2403;
    let _e66: MultiVector = other_2171;
    let _e77: Motor = self_2403;
    let _e81: MultiVector = other_2171;
    let _e93: Motor = self_2403;
    let _e97: MultiVector = other_2171;
    let _e109: Motor = self_2403;
    let _e113: MultiVector = other_2171;
    let _e124: Motor = self_2403;
    let _e128: MultiVector = other_2171;
    let _e139: Motor = self_2403;
    let _e143: MultiVector = other_2171;
    let _e154: Motor = self_2403;
    let _e158: MultiVector = other_2171;
    let _e170: Motor = self_2403;
    let _e174: MultiVector = other_2171;
    let _e177: Motor = self_2403;
    let _e180: Motor = self_2403;
    let _e183: Motor = self_2403;
    let _e187: MultiVector = other_2171;
    let _e193: Motor = self_2403;
    let _e195: MultiVector = other_2171;
    let _e200: Motor = self_2403;
    let _e203: MultiVector = other_2171;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g3_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2(_e52.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((vec4(_e62.g0_.y) * vec4(_e66.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e77.g0_.z) * vec4(_e81.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e93.g0_.w) * vec4(_e97.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e109.g1_.x) * _e113.g1_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e124.g1_.y) * _e128.g1_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e139.g1_.z) * _e143.g1_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e154.g0_.x) * vec4(_e158.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((vec3(_e170.g0_.w) * _e174.g3_) + (vec3<f32>(_e177.g0_.x, _e180.g0_.y, _e183.g0_.z) * vec3(_e187.g0_.x))), (_e193.g1_ * vec3(_e195.g0_.x)), ((_e200.g0_.wwwx * _e203.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn motor_multi_vector_left_anti_contraction(self_2404: Motor, other_2172: MultiVector) -> MultiVector {
    var self_2405: Motor;
    var other_2173: MultiVector;

    self_2405 = self_2404;
    other_2173 = other_2172;
    let _e4: Motor = self_2405;
    let _e8: MultiVector = other_2173;
    let _e17: Motor = self_2405;
    let _e21: MultiVector = other_2173;
    let _e31: Motor = self_2405;
    let _e35: MultiVector = other_2173;
    let _e39: Motor = self_2405;
    let _e43: MultiVector = other_2173;
    let _e53: Motor = self_2405;
    let _e57: MultiVector = other_2173;
    let _e60: Motor = self_2405;
    let _e64: MultiVector = other_2173;
    let _e67: Motor = self_2405;
    let _e71: MultiVector = other_2173;
    let _e74: Motor = self_2405;
    let _e77: Motor = self_2405;
    let _e80: Motor = self_2405;
    let _e84: MultiVector = other_2173;
    let _e90: Motor = self_2405;
    let _e94: MultiVector = other_2173;
    let _e104: Motor = self_2405;
    let _e108: MultiVector = other_2173;
    let _e119: Motor = self_2405;
    let _e123: MultiVector = other_2173;
    let _e127: Motor = self_2405;
    let _e131: MultiVector = other_2173;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e53.g0_.w) * _e57.g1_), (vec3(_e60.g0_.w) * _e64.g2_), ((vec3(_e67.g0_.w) * _e71.g3_) + (vec3<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z) * vec3(_e84.g0_.x))), (((((vec4(_e90.g0_.y) * _e94.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e104.g0_.z) * _e108.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e119.g0_.w) * _e123.g4_)) + ((vec4(_e127.g0_.x) * _e131.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn motor_multi_vector_right_anti_contraction(self_2406: Motor, other_2174: MultiVector) -> MultiVector {
    var self_2407: Motor;
    var other_2175: MultiVector;

    self_2407 = self_2406;
    other_2175 = other_2174;
    let _e4: Motor = self_2407;
    let _e8: MultiVector = other_2175;
    let _e17: Motor = self_2407;
    let _e21: MultiVector = other_2175;
    let _e31: Motor = self_2407;
    let _e35: MultiVector = other_2175;
    let _e45: Motor = self_2407;
    let _e49: MultiVector = other_2175;
    let _e61: Motor = self_2407;
    let _e64: Motor = self_2407;
    let _e67: Motor = self_2407;
    let _e71: MultiVector = other_2175;
    let _e76: Motor = self_2407;
    let _e78: MultiVector = other_2175;
    let _e83: Motor = self_2407;
    let _e87: MultiVector = other_2175;
    let _e97: Motor = self_2407;
    let _e101: MultiVector = other_2175;
    let _e112: Motor = self_2407;
    let _e116: MultiVector = other_2175;
    let _e128: Motor = self_2407;
    let _e132: MultiVector = other_2175;
    let _e144: Motor = self_2407;
    let _e148: MultiVector = other_2175;
    let _e160: Motor = self_2407;
    let _e164: MultiVector = other_2175;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.y)), (_e76.g1_ * vec3(_e78.g0_.y)), (((((((vec4(_e83.g0_.y) * _e87.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e97.g0_.z) * _e101.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e112.g1_.x) * vec4(_e116.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e128.g1_.y) * vec4(_e132.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e144.g1_.z) * vec4(_e148.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e160.g0_.x) * _e164.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn motor_multi_vector_scalar_product(self_2408: Motor, other_2176: MultiVector) -> Scalar {
    var self_2409: Motor;
    var other_2177: MultiVector;

    self_2409 = self_2408;
    other_2177 = other_2176;
    let _e5: Motor = self_2409;
    let _e8: MultiVector = other_2177;
    let _e13: Motor = self_2409;
    let _e16: MultiVector = other_2177;
    let _e21: Motor = self_2409;
    let _e24: MultiVector = other_2177;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn motor_multi_vector_dot(self_2410: Motor, other_2178: MultiVector) -> Scalar {
    var self_2411: Motor;
    var other_2179: MultiVector;

    self_2411 = self_2410;
    other_2179 = other_2178;
    let _e5: Motor = self_2411;
    let _e8: MultiVector = other_2179;
    let _e13: Motor = self_2411;
    let _e16: MultiVector = other_2179;
    let _e21: Motor = self_2411;
    let _e24: MultiVector = other_2179;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn motor_multi_vector_anti_scalar_product(self_2412: Motor, other_2180: MultiVector) -> AntiScalar {
    var self_2413: Motor;
    var other_2181: MultiVector;

    self_2413 = self_2412;
    other_2181 = other_2180;
    let _e5: Motor = self_2413;
    let _e8: MultiVector = other_2181;
    let _e13: Motor = self_2413;
    let _e16: MultiVector = other_2181;
    let _e21: Motor = self_2413;
    let _e24: MultiVector = other_2181;
    let _e29: Motor = self_2413;
    let _e32: MultiVector = other_2181;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn motor_multi_vector_anti_dot(self_2414: Motor, other_2182: MultiVector) -> AntiScalar {
    var self_2415: Motor;
    var other_2183: MultiVector;

    self_2415 = self_2414;
    other_2183 = other_2182;
    let _e5: Motor = self_2415;
    let _e8: MultiVector = other_2183;
    let _e13: Motor = self_2415;
    let _e16: MultiVector = other_2183;
    let _e21: Motor = self_2415;
    let _e24: MultiVector = other_2183;
    let _e29: Motor = self_2415;
    let _e32: MultiVector = other_2183;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn motor_squared_magnitude(self_2416: Motor) -> Scalar {
    var self_2417: Motor;

    self_2417 = self_2416;
    let _e2: Motor = self_2417;
    let _e3: Motor = self_2417;
    let _e4: Motor = motor_reversal(_e3);
    let _e5: Scalar = motor_motor_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_magnitude(self_2418: Motor) -> Scalar {
    var self_2419: Motor;

    self_2419 = self_2418;
    let _e2: Motor = self_2419;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_bulk_norm(self_2420: Motor) -> Scalar {
    var self_2421: Motor;

    self_2421 = self_2420;
    let _e2: Motor = self_2421;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_squared_anti_magnitude(self_2422: Motor) -> AntiScalar {
    var self_2423: Motor;

    self_2423 = self_2422;
    let _e2: Motor = self_2423;
    let _e3: Motor = self_2423;
    let _e4: Motor = motor_anti_reversal(_e3);
    let _e5: AntiScalar = motor_motor_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_weight_norm(self_2424: Motor) -> AntiScalar {
    var self_2425: Motor;

    self_2425 = self_2424;
    let _e2: Motor = self_2425;
    let _e3: AntiScalar = motor_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn motor_geometric_norm(self_2426: Motor) -> HomogeneousMagnitude {
    var self_2427: Motor;

    self_2427 = self_2426;
    let _e2: Motor = self_2427;
    let _e3: Scalar = motor_bulk_norm(_e2);
    let _e4: Motor = self_2427;
    let _e5: AntiScalar = motor_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn motor_scale(self_2428: Motor, other_2184: f32) -> Motor {
    var self_2429: Motor;
    var other_2185: f32;

    self_2429 = self_2428;
    other_2185 = other_2184;
    let _e4: Motor = self_2429;
    let _e5: f32 = other_2185;
    let _e7: Motor = motor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn motor_signum(self_2430: Motor) -> Motor {
    var self_2431: Motor;

    self_2431 = self_2430;
    let _e2: Motor = self_2431;
    let _e3: Motor = self_2431;
    let _e4: Scalar = motor_magnitude(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_inverse(self_2432: Motor) -> Motor {
    var self_2433: Motor;

    self_2433 = self_2432;
    let _e2: Motor = self_2433;
    let _e3: Motor = motor_reversal(_e2);
    let _e4: Motor = self_2433;
    let _e5: Scalar = motor_squared_magnitude(_e4);
    let _e10: Motor = motor_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn motor_unitize(self_2434: Motor) -> Motor {
    var self_2435: Motor;

    self_2435 = self_2434;
    let _e2: Motor = self_2435;
    let _e3: Motor = self_2435;
    let _e4: AntiScalar = motor_weight_norm(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_attitude(self_2436: Motor) -> Flector {
    var self_2437: Motor;

    self_2437 = self_2436;
    let _e2: Motor = self_2437;
    let _e9: Flector = motor_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn rotor_zero() -> Rotor {
    return Rotor(vec4(0.0));
}

fn rotor_one() -> Rotor {
    return Rotor(vec4(0.0));
}

fn rotor_neg(self_2438: Rotor) -> Rotor {
    var self_2439: Rotor;

    self_2439 = self_2438;
    let _e2: Rotor = self_2439;
    return Rotor((_e2.g0_ * vec4(-1.0)));
}

fn rotor_automorphism(self_2440: Rotor) -> Rotor {
    var self_2441: Rotor;

    self_2441 = self_2440;
    let _e2: Rotor = self_2441;
    return Rotor(_e2.g0_);
}

fn rotor_reversal(self_2442: Rotor) -> Rotor {
    var self_2443: Rotor;

    self_2443 = self_2442;
    let _e2: Rotor = self_2443;
    return Rotor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn rotor_conjugation(self_2444: Rotor) -> Rotor {
    var self_2445: Rotor;

    self_2445 = self_2444;
    let _e2: Rotor = self_2445;
    return Rotor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn rotor_anti_reversal(self_2446: Rotor) -> Rotor {
    var self_2447: Rotor;

    self_2447 = self_2446;
    let _e2: Rotor = self_2447;
    return Rotor((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn rotor_double_complement(self_2448: Rotor) -> Rotor {
    var self_2449: Rotor;

    self_2449 = self_2448;
    let _e2: Rotor = self_2449;
    return Rotor(_e2.g0_);
}

fn rotor_scalar_geometric_product(self_2450: Rotor, other_2186: Scalar) -> Rotor {
    var self_2451: Rotor;
    var other_2187: Scalar;

    self_2451 = self_2450;
    other_2187 = other_2186;
    let _e4: Rotor = self_2451;
    let _e6: Scalar = other_2187;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_geometric_anti_product(self_2452: Rotor, other_2188: Scalar) -> MultiVector {
    var self_2453: Rotor;
    var other_2189: Scalar;

    self_2453 = self_2452;
    other_2189 = other_2188;
    let _e4: Rotor = self_2453;
    let _e7: Rotor = self_2453;
    let _e11: Scalar = other_2189;
    let _e23: Rotor = self_2453;
    let _e26: Rotor = self_2453;
    let _e29: Rotor = self_2453;
    let _e33: Scalar = other_2189;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn rotor_scalar_regressive_product(self_2454: Rotor, other_2190: Scalar) -> Scalar {
    var self_2455: Rotor;
    var other_2191: Scalar;

    self_2455 = self_2454;
    other_2191 = other_2190;
    let _e4: Rotor = self_2455;
    let _e7: Scalar = other_2191;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_anti_wedge(self_2456: Rotor, other_2192: Scalar) -> Scalar {
    var self_2457: Rotor;
    var other_2193: Scalar;

    self_2457 = self_2456;
    other_2193 = other_2192;
    let _e4: Rotor = self_2457;
    let _e7: Scalar = other_2193;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_meet(self_2458: Rotor, other_2194: Scalar) -> Scalar {
    var self_2459: Rotor;
    var other_2195: Scalar;

    self_2459 = self_2458;
    other_2195 = other_2194;
    let _e4: Rotor = self_2459;
    let _e7: Scalar = other_2195;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_outer_product(self_2460: Rotor, other_2196: Scalar) -> Rotor {
    var self_2461: Rotor;
    var other_2197: Scalar;

    self_2461 = self_2460;
    other_2197 = other_2196;
    let _e4: Rotor = self_2461;
    let _e6: Scalar = other_2197;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_wedge(self_2462: Rotor, other_2198: Scalar) -> Rotor {
    var self_2463: Rotor;
    var other_2199: Scalar;

    self_2463 = self_2462;
    other_2199 = other_2198;
    let _e4: Rotor = self_2463;
    let _e6: Scalar = other_2199;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_join(self_2464: Rotor, other_2200: Scalar) -> Rotor {
    var self_2465: Rotor;
    var other_2201: Scalar;

    self_2465 = self_2464;
    other_2201 = other_2200;
    let _e4: Rotor = self_2465;
    let _e6: Scalar = other_2201;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_inner_product(self_2466: Rotor, other_2202: Scalar) -> Rotor {
    var self_2467: Rotor;
    var other_2203: Scalar;

    self_2467 = self_2466;
    other_2203 = other_2202;
    let _e4: Rotor = self_2467;
    let _e6: Scalar = other_2203;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_inner_anti_product(self_2468: Rotor, other_2204: Scalar) -> MultiVector {
    var self_2469: Rotor;
    var other_2205: Scalar;

    self_2469 = self_2468;
    other_2205 = other_2204;
    let _e4: Rotor = self_2469;
    let _e7: Rotor = self_2469;
    let _e11: Scalar = other_2205;
    let _e23: Rotor = self_2469;
    let _e26: Rotor = self_2469;
    let _e29: Rotor = self_2469;
    let _e33: Scalar = other_2205;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn rotor_scalar_right_contraction(self_2470: Rotor, other_2206: Scalar) -> Rotor {
    var self_2471: Rotor;
    var other_2207: Scalar;

    self_2471 = self_2470;
    other_2207 = other_2206;
    let _e4: Rotor = self_2471;
    let _e6: Scalar = other_2207;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_scalar_left_anti_contraction(self_2472: Rotor, other_2208: Scalar) -> MultiVector {
    var self_2473: Rotor;
    var other_2209: Scalar;

    self_2473 = self_2472;
    other_2209 = other_2208;
    let _e4: Rotor = self_2473;
    let _e7: Rotor = self_2473;
    let _e11: Scalar = other_2209;
    let _e23: Rotor = self_2473;
    let _e26: Rotor = self_2473;
    let _e29: Rotor = self_2473;
    let _e33: Scalar = other_2209;
    return MultiVector(((vec2<f32>(_e4.g0_.w, _e7.g0_.x) * vec2(_e11.g0_)) * vec2<f32>(1.0, 0.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) * vec3(_e33.g0_)), vec4(0.0));
}

fn rotor_anti_scalar_into(self_2474: Rotor) -> AntiScalar {
    var self_2475: Rotor;

    self_2475 = self_2474;
    let _e2: Rotor = self_2475;
    return AntiScalar(_e2.g0_.w);
}

fn rotor_anti_scalar_add(self_2476: Rotor, other_2210: AntiScalar) -> Rotor {
    var self_2477: Rotor;
    var other_2211: AntiScalar;

    self_2477 = self_2476;
    other_2211 = other_2210;
    let _e4: Rotor = self_2477;
    let _e6: AntiScalar = other_2211;
    return Rotor((_e4.g0_ + (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_sub(self_2478: Rotor, other_2212: AntiScalar) -> Rotor {
    var self_2479: Rotor;
    var other_2213: AntiScalar;

    self_2479 = self_2478;
    other_2213 = other_2212;
    let _e4: Rotor = self_2479;
    let _e6: AntiScalar = other_2213;
    return Rotor((_e4.g0_ - (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_geometric_anti_product(self_2480: Rotor, other_2214: AntiScalar) -> Rotor {
    var self_2481: Rotor;
    var other_2215: AntiScalar;

    self_2481 = self_2480;
    other_2215 = other_2214;
    let _e4: Rotor = self_2481;
    let _e6: AntiScalar = other_2215;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_regressive_product(self_2482: Rotor, other_2216: AntiScalar) -> Rotor {
    var self_2483: Rotor;
    var other_2217: AntiScalar;

    self_2483 = self_2482;
    other_2217 = other_2216;
    let _e4: Rotor = self_2483;
    let _e6: AntiScalar = other_2217;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_anti_wedge(self_2484: Rotor, other_2218: AntiScalar) -> Rotor {
    var self_2485: Rotor;
    var other_2219: AntiScalar;

    self_2485 = self_2484;
    other_2219 = other_2218;
    let _e4: Rotor = self_2485;
    let _e6: AntiScalar = other_2219;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_meet(self_2486: Rotor, other_2220: AntiScalar) -> Rotor {
    var self_2487: Rotor;
    var other_2221: AntiScalar;

    self_2487 = self_2486;
    other_2221 = other_2220;
    let _e4: Rotor = self_2487;
    let _e6: AntiScalar = other_2221;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_inner_anti_product(self_2488: Rotor, other_2222: AntiScalar) -> Rotor {
    var self_2489: Rotor;
    var other_2223: AntiScalar;

    self_2489 = self_2488;
    other_2223 = other_2222;
    let _e4: Rotor = self_2489;
    let _e6: AntiScalar = other_2223;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_left_anti_contraction(self_2490: Rotor, other_2224: AntiScalar) -> AntiScalar {
    var self_2491: Rotor;
    var other_2225: AntiScalar;

    self_2491 = self_2490;
    other_2225 = other_2224;
    let _e4: Rotor = self_2491;
    let _e7: AntiScalar = other_2225;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_anti_scalar_right_anti_contraction(self_2492: Rotor, other_2226: AntiScalar) -> Rotor {
    var self_2493: Rotor;
    var other_2227: AntiScalar;

    self_2493 = self_2492;
    other_2227 = other_2226;
    let _e4: Rotor = self_2493;
    let _e6: AntiScalar = other_2227;
    return Rotor((_e4.g0_ * vec4(_e6.g0_)));
}

fn rotor_anti_scalar_anti_scalar_product(self_2494: Rotor, other_2228: AntiScalar) -> AntiScalar {
    var self_2495: Rotor;
    var other_2229: AntiScalar;

    self_2495 = self_2494;
    other_2229 = other_2228;
    let _e4: Rotor = self_2495;
    let _e7: AntiScalar = other_2229;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_anti_scalar_anti_dot(self_2496: Rotor, other_2230: AntiScalar) -> AntiScalar {
    var self_2497: Rotor;
    var other_2231: AntiScalar;

    self_2497 = self_2496;
    other_2231 = other_2230;
    let _e4: Rotor = self_2497;
    let _e7: AntiScalar = other_2231;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_homogeneous_magnitude_geometric_product(self_2498: Rotor, other_2232: HomogeneousMagnitude) -> Rotor {
    var self_2499: Rotor;
    var other_2233: HomogeneousMagnitude;

    self_2499 = self_2498;
    other_2233 = other_2232;
    let _e4: Rotor = self_2499;
    let _e6: HomogeneousMagnitude = other_2233;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_geometric_anti_product(self_2500: Rotor, other_2234: HomogeneousMagnitude) -> MultiVector {
    var self_2501: Rotor;
    var other_2235: HomogeneousMagnitude;

    self_2501 = self_2500;
    other_2235 = other_2234;
    let _e4: Rotor = self_2501;
    let _e8: HomogeneousMagnitude = other_2235;
    let _e13: Rotor = self_2501;
    let _e16: Rotor = self_2501;
    let _e19: Rotor = self_2501;
    let _e23: HomogeneousMagnitude = other_2235;
    let _e28: Rotor = self_2501;
    let _e31: Rotor = self_2501;
    let _e34: Rotor = self_2501;
    let _e38: HomogeneousMagnitude = other_2235;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (vec3<f32>(_e28.g0_.x, _e31.g0_.y, _e34.g0_.z) * vec3(_e38.g0_.x)), vec4(0.0));
}

fn rotor_homogeneous_magnitude_regressive_product(self_2502: Rotor, other_2236: HomogeneousMagnitude) -> MultiVector {
    var self_2503: Rotor;
    var other_2237: HomogeneousMagnitude;

    self_2503 = self_2502;
    other_2237 = other_2236;
    let _e4: Rotor = self_2503;
    let _e8: HomogeneousMagnitude = other_2237;
    let _e13: Rotor = self_2503;
    let _e16: Rotor = self_2503;
    let _e19: Rotor = self_2503;
    let _e23: HomogeneousMagnitude = other_2237;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), vec3(0.0), vec4(0.0));
}

fn rotor_homogeneous_magnitude_anti_wedge(self_2504: Rotor, other_2238: HomogeneousMagnitude) -> MultiVector {
    var self_2505: Rotor;
    var other_2239: HomogeneousMagnitude;

    self_2505 = self_2504;
    other_2239 = other_2238;
    let _e4: Rotor = self_2505;
    let _e8: HomogeneousMagnitude = other_2239;
    let _e13: Rotor = self_2505;
    let _e16: Rotor = self_2505;
    let _e19: Rotor = self_2505;
    let _e23: HomogeneousMagnitude = other_2239;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), vec3(0.0), vec4(0.0));
}

fn rotor_homogeneous_magnitude_meet(self_2506: Rotor, other_2240: HomogeneousMagnitude) -> MultiVector {
    var self_2507: Rotor;
    var other_2241: HomogeneousMagnitude;

    self_2507 = self_2506;
    other_2241 = other_2240;
    let _e4: Rotor = self_2507;
    let _e8: HomogeneousMagnitude = other_2241;
    let _e13: Rotor = self_2507;
    let _e16: Rotor = self_2507;
    let _e19: Rotor = self_2507;
    let _e23: HomogeneousMagnitude = other_2241;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), vec3(0.0), vec4(0.0));
}

fn rotor_homogeneous_magnitude_outer_product(self_2508: Rotor, other_2242: HomogeneousMagnitude) -> Rotor {
    var self_2509: Rotor;
    var other_2243: HomogeneousMagnitude;

    self_2509 = self_2508;
    other_2243 = other_2242;
    let _e4: Rotor = self_2509;
    let _e6: HomogeneousMagnitude = other_2243;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_wedge(self_2510: Rotor, other_2244: HomogeneousMagnitude) -> Rotor {
    var self_2511: Rotor;
    var other_2245: HomogeneousMagnitude;

    self_2511 = self_2510;
    other_2245 = other_2244;
    let _e4: Rotor = self_2511;
    let _e6: HomogeneousMagnitude = other_2245;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_join(self_2512: Rotor, other_2246: HomogeneousMagnitude) -> Rotor {
    var self_2513: Rotor;
    var other_2247: HomogeneousMagnitude;

    self_2513 = self_2512;
    other_2247 = other_2246;
    let _e4: Rotor = self_2513;
    let _e6: HomogeneousMagnitude = other_2247;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_inner_product(self_2514: Rotor, other_2248: HomogeneousMagnitude) -> Rotor {
    var self_2515: Rotor;
    var other_2249: HomogeneousMagnitude;

    self_2515 = self_2514;
    other_2249 = other_2248;
    let _e4: Rotor = self_2515;
    let _e6: HomogeneousMagnitude = other_2249;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_inner_anti_product(self_2516: Rotor, other_2250: HomogeneousMagnitude) -> MultiVector {
    var self_2517: Rotor;
    var other_2251: HomogeneousMagnitude;

    self_2517 = self_2516;
    other_2251 = other_2250;
    let _e4: Rotor = self_2517;
    let _e8: HomogeneousMagnitude = other_2251;
    let _e13: Rotor = self_2517;
    let _e16: Rotor = self_2517;
    let _e19: Rotor = self_2517;
    let _e23: HomogeneousMagnitude = other_2251;
    let _e28: Rotor = self_2517;
    let _e31: Rotor = self_2517;
    let _e34: Rotor = self_2517;
    let _e38: HomogeneousMagnitude = other_2251;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), (vec3<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec3(_e23.g0_.y)), (vec3<f32>(_e28.g0_.x, _e31.g0_.y, _e34.g0_.z) * vec3(_e38.g0_.x)), vec4(0.0));
}

fn rotor_homogeneous_magnitude_right_contraction(self_2518: Rotor, other_2252: HomogeneousMagnitude) -> Rotor {
    var self_2519: Rotor;
    var other_2253: HomogeneousMagnitude;

    self_2519 = self_2518;
    other_2253 = other_2252;
    let _e4: Rotor = self_2519;
    let _e6: HomogeneousMagnitude = other_2253;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_left_anti_contraction(self_2520: Rotor, other_2254: HomogeneousMagnitude) -> MultiVector {
    var self_2521: Rotor;
    var other_2255: HomogeneousMagnitude;

    self_2521 = self_2520;
    other_2255 = other_2254;
    let _e4: Rotor = self_2521;
    let _e8: HomogeneousMagnitude = other_2255;
    let _e15: Rotor = self_2521;
    let _e18: Rotor = self_2521;
    let _e21: Rotor = self_2521;
    let _e25: HomogeneousMagnitude = other_2255;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.x)), vec4(0.0));
}

fn rotor_homogeneous_magnitude_right_anti_contraction(self_2522: Rotor, other_2256: HomogeneousMagnitude) -> Rotor {
    var self_2523: Rotor;
    var other_2257: HomogeneousMagnitude;

    self_2523 = self_2522;
    other_2257 = other_2256;
    let _e4: Rotor = self_2523;
    let _e6: HomogeneousMagnitude = other_2257;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn rotor_homogeneous_magnitude_anti_scalar_product(self_2524: Rotor, other_2258: HomogeneousMagnitude) -> AntiScalar {
    var self_2525: Rotor;
    var other_2259: HomogeneousMagnitude;

    self_2525 = self_2524;
    other_2259 = other_2258;
    let _e4: Rotor = self_2525;
    let _e7: HomogeneousMagnitude = other_2259;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn rotor_homogeneous_magnitude_anti_dot(self_2526: Rotor, other_2260: HomogeneousMagnitude) -> AntiScalar {
    var self_2527: Rotor;
    var other_2261: HomogeneousMagnitude;

    self_2527 = self_2526;
    other_2261 = other_2260;
    let _e4: Rotor = self_2527;
    let _e7: HomogeneousMagnitude = other_2261;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn rotor_point_geometric_product(self_2528: Rotor, other_2262: Point) -> Flector {
    var self_2529: Rotor;
    var other_2263: Point;

    self_2529 = self_2528;
    other_2263 = other_2262;
    let _e4: Rotor = self_2529;
    let _e8: Point = other_2263;
    let _e19: Rotor = self_2529;
    let _e23: Point = other_2263;
    let _e35: Rotor = self_2529;
    let _e39: Point = other_2263;
    let _e51: Rotor = self_2529;
    let _e55: Point = other_2263;
    let _e65: Rotor = self_2529;
    let _e69: Point = other_2263;
    let _e80: Rotor = self_2529;
    let _e84: Point = other_2263;
    let _e95: Rotor = self_2529;
    let _e99: Point = other_2263;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4(_e51.g0_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e65.g0_.z) * _e69.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e80.g0_.w) * _e84.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e95.g0_.x) * _e99.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_point_geometric_anti_product(self_2530: Rotor, other_2264: Point) -> Flector {
    var self_2531: Rotor;
    var other_2265: Point;

    self_2531 = self_2530;
    other_2265 = other_2264;
    let _e4: Rotor = self_2531;
    let _e8: Point = other_2265;
    let _e18: Rotor = self_2531;
    let _e22: Point = other_2265;
    let _e33: Rotor = self_2531;
    let _e37: Point = other_2265;
    let _e41: Rotor = self_2531;
    let _e45: Point = other_2265;
    let _e56: Rotor = self_2531;
    let _e60: Point = other_2265;
    let _e70: Rotor = self_2531;
    let _e74: Point = other_2265;
    let _e85: Rotor = self_2531;
    let _e89: Point = other_2265;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), ((((vec4(_e56.g0_.y) * _e60.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e70.g0_.z) * _e74.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e85.g0_.x) * _e89.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_point_regressive_product(self_2532: Rotor, other_2266: Point) -> Point {
    var self_2533: Rotor;
    var other_2267: Point;

    self_2533 = self_2532;
    other_2267 = other_2266;
    let _e4: Rotor = self_2533;
    let _e8: Point = other_2267;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_anti_wedge(self_2534: Rotor, other_2268: Point) -> Point {
    var self_2535: Rotor;
    var other_2269: Point;

    self_2535 = self_2534;
    other_2269 = other_2268;
    let _e4: Rotor = self_2535;
    let _e8: Point = other_2269;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_meet(self_2536: Rotor, other_2270: Point) -> Point {
    var self_2537: Rotor;
    var other_2271: Point;

    self_2537 = self_2536;
    other_2271 = other_2270;
    let _e4: Rotor = self_2537;
    let _e8: Point = other_2271;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_outer_product(self_2538: Rotor, other_2272: Point) -> Plane {
    var self_2539: Rotor;
    var other_2273: Point;

    self_2539 = self_2538;
    other_2273 = other_2272;
    let _e4: Rotor = self_2539;
    let _e8: Point = other_2273;
    let _e18: Rotor = self_2539;
    let _e22: Point = other_2273;
    let _e33: Rotor = self_2539;
    let _e37: Point = other_2273;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_point_wedge(self_2540: Rotor, other_2274: Point) -> Plane {
    var self_2541: Rotor;
    var other_2275: Point;

    self_2541 = self_2540;
    other_2275 = other_2274;
    let _e4: Rotor = self_2541;
    let _e8: Point = other_2275;
    let _e18: Rotor = self_2541;
    let _e22: Point = other_2275;
    let _e33: Rotor = self_2541;
    let _e37: Point = other_2275;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_point_join(self_2542: Rotor, other_2276: Point) -> Plane {
    var self_2543: Rotor;
    var other_2277: Point;

    self_2543 = self_2542;
    other_2277 = other_2276;
    let _e4: Rotor = self_2543;
    let _e8: Point = other_2277;
    let _e18: Rotor = self_2543;
    let _e22: Point = other_2277;
    let _e33: Rotor = self_2543;
    let _e37: Point = other_2277;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_point_inner_product(self_2544: Rotor, other_2278: Point) -> Flector {
    var self_2545: Rotor;
    var other_2279: Point;

    self_2545 = self_2544;
    other_2279 = other_2278;
    let _e4: Rotor = self_2545;
    let _e8: Point = other_2279;
    let _e19: Rotor = self_2545;
    let _e23: Point = other_2279;
    let _e35: Rotor = self_2545;
    let _e39: Point = other_2279;
    let _e51: Rotor = self_2545;
    let _e54: Point = other_2279;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e51.g0_.wwwx * _e54.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_point_inner_anti_product(self_2546: Rotor, other_2280: Point) -> Flector {
    var self_2547: Rotor;
    var other_2281: Point;

    self_2547 = self_2546;
    other_2281 = other_2280;
    let _e4: Rotor = self_2547;
    let _e8: Point = other_2281;
    let _e11: Rotor = self_2547;
    let _e15: Point = other_2281;
    let _e25: Rotor = self_2547;
    let _e29: Point = other_2281;
    let _e40: Rotor = self_2547;
    let _e44: Point = other_2281;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), ((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e40.g0_.x) * _e44.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_point_right_contraction(self_2548: Rotor, other_2282: Point) -> Flector {
    var self_2549: Rotor;
    var other_2283: Point;

    self_2549 = self_2548;
    other_2283 = other_2282;
    let _e4: Rotor = self_2549;
    let _e8: Point = other_2283;
    let _e19: Rotor = self_2549;
    let _e23: Point = other_2283;
    let _e35: Rotor = self_2549;
    let _e39: Point = other_2283;
    let _e51: Rotor = self_2549;
    let _e54: Point = other_2283;
    return Flector(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e51.g0_.wwwx * _e54.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_point_left_anti_contraction(self_2550: Rotor, other_2284: Point) -> Flector {
    var self_2551: Rotor;
    var other_2285: Point;

    self_2551 = self_2550;
    other_2285 = other_2284;
    let _e4: Rotor = self_2551;
    let _e8: Point = other_2285;
    let _e11: Rotor = self_2551;
    let _e15: Point = other_2285;
    let _e25: Rotor = self_2551;
    let _e29: Point = other_2285;
    let _e40: Rotor = self_2551;
    let _e44: Point = other_2285;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), ((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e40.g0_.x) * _e44.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_line_add(self_2552: Rotor, other_2286: Line) -> Motor {
    var self_2553: Rotor;
    var other_2287: Line;

    self_2553 = self_2552;
    other_2287 = other_2286;
    let _e4: Rotor = self_2553;
    let _e6: Line = other_2287;
    let _e9: Line = other_2287;
    let _e12: Line = other_2287;
    let _e15: Line = other_2287;
    let _e26: Line = other_2287;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), _e26.g1_);
}

fn rotor_line_sub(self_2554: Rotor, other_2288: Line) -> Motor {
    var self_2555: Rotor;
    var other_2289: Line;

    self_2555 = self_2554;
    other_2289 = other_2288;
    let _e4: Rotor = self_2555;
    let _e6: Line = other_2289;
    let _e9: Line = other_2289;
    let _e12: Line = other_2289;
    let _e15: Line = other_2289;
    let _e28: Line = other_2289;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3(0.0) - _e28.g1_));
}

fn rotor_line_geometric_product(self_2556: Rotor, other_2290: Line) -> Rotor {
    var self_2557: Rotor;
    var other_2291: Line;

    self_2557 = self_2556;
    other_2291 = other_2290;
    let _e4: Rotor = self_2557;
    let _e8: Line = other_2291;
    let _e11: Line = other_2291;
    let _e14: Line = other_2291;
    let _e17: Line = other_2291;
    let _e28: Rotor = self_2557;
    let _e32: Line = other_2291;
    let _e35: Line = other_2291;
    let _e38: Line = other_2291;
    let _e41: Line = other_2291;
    let _e53: Rotor = self_2557;
    let _e57: Line = other_2291;
    let _e60: Line = other_2291;
    let _e63: Line = other_2291;
    let _e66: Line = other_2291;
    let _e78: Rotor = self_2557;
    let _e82: Line = other_2291;
    let _e85: Line = other_2291;
    let _e88: Line = other_2291;
    let _e91: Line = other_2291;
    return Rotor((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn rotor_line_geometric_anti_product(self_2558: Rotor, other_2292: Line) -> MultiVector {
    var self_2559: Rotor;
    var other_2293: Line;

    self_2559 = self_2558;
    other_2293 = other_2292;
    let _e6: Rotor = self_2559;
    let _e10: Line = other_2293;
    let _e13: Line = other_2293;
    let _e19: Rotor = self_2559;
    let _e23: Line = other_2293;
    let _e26: Line = other_2293;
    let _e32: Rotor = self_2559;
    let _e36: Line = other_2293;
    let _e39: Line = other_2293;
    let _e47: Rotor = self_2559;
    let _e51: Line = other_2293;
    let _e60: Rotor = self_2559;
    let _e64: Line = other_2293;
    let _e74: Rotor = self_2559;
    let _e78: Line = other_2293;
    let _e82: Rotor = self_2559;
    let _e86: Line = other_2293;
    let _e96: Rotor = self_2559;
    let _e100: Line = other_2293;
    let _e109: Rotor = self_2559;
    let _e113: Line = other_2293;
    let _e123: Rotor = self_2559;
    let _e127: Line = other_2293;
    let _e131: Rotor = self_2559;
    let _e135: Line = other_2293;
    return MultiVector((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))), vec4(0.0), (((((vec3(_e47.g0_.y) * _e51.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e60.g0_.z) * _e64.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e74.g0_.w) * _e78.g0_)) + ((vec3(_e82.g0_.x) * _e86.g0_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec3(_e96.g0_.y) * _e100.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e109.g0_.z) * _e113.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e123.g0_.w) * _e127.g1_)) + ((vec3(_e131.g0_.x) * _e135.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn rotor_line_regressive_product(self_2560: Rotor, other_2294: Line) -> MultiVector {
    var self_2561: Rotor;
    var other_2295: Line;

    self_2561 = self_2560;
    other_2295 = other_2294;
    let _e4: Rotor = self_2561;
    let _e8: Line = other_2295;
    let _e17: Rotor = self_2561;
    let _e21: Line = other_2295;
    let _e31: Rotor = self_2561;
    let _e35: Line = other_2295;
    let _e47: Rotor = self_2561;
    let _e51: Line = other_2295;
    let _e54: Rotor = self_2561;
    let _e58: Line = other_2295;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn rotor_line_anti_wedge(self_2562: Rotor, other_2296: Line) -> MultiVector {
    var self_2563: Rotor;
    var other_2297: Line;

    self_2563 = self_2562;
    other_2297 = other_2296;
    let _e4: Rotor = self_2563;
    let _e8: Line = other_2297;
    let _e17: Rotor = self_2563;
    let _e21: Line = other_2297;
    let _e31: Rotor = self_2563;
    let _e35: Line = other_2297;
    let _e47: Rotor = self_2563;
    let _e51: Line = other_2297;
    let _e54: Rotor = self_2563;
    let _e58: Line = other_2297;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn rotor_line_meet(self_2564: Rotor, other_2298: Line) -> MultiVector {
    var self_2565: Rotor;
    var other_2299: Line;

    self_2565 = self_2564;
    other_2299 = other_2298;
    let _e4: Rotor = self_2565;
    let _e8: Line = other_2299;
    let _e17: Rotor = self_2565;
    let _e21: Line = other_2299;
    let _e31: Rotor = self_2565;
    let _e35: Line = other_2299;
    let _e47: Rotor = self_2565;
    let _e51: Line = other_2299;
    let _e54: Rotor = self_2565;
    let _e58: Line = other_2299;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn rotor_line_outer_product(self_2566: Rotor, other_2300: Line) -> AntiScalar {
    var self_2567: Rotor;
    var other_2301: Line;

    self_2567 = self_2566;
    other_2301 = other_2300;
    let _e5: Rotor = self_2567;
    let _e8: Line = other_2301;
    let _e13: Rotor = self_2567;
    let _e16: Line = other_2301;
    let _e21: Rotor = self_2567;
    let _e24: Line = other_2301;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_wedge(self_2568: Rotor, other_2302: Line) -> AntiScalar {
    var self_2569: Rotor;
    var other_2303: Line;

    self_2569 = self_2568;
    other_2303 = other_2302;
    let _e5: Rotor = self_2569;
    let _e8: Line = other_2303;
    let _e13: Rotor = self_2569;
    let _e16: Line = other_2303;
    let _e21: Rotor = self_2569;
    let _e24: Line = other_2303;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_join(self_2570: Rotor, other_2304: Line) -> AntiScalar {
    var self_2571: Rotor;
    var other_2305: Line;

    self_2571 = self_2570;
    other_2305 = other_2304;
    let _e5: Rotor = self_2571;
    let _e8: Line = other_2305;
    let _e13: Rotor = self_2571;
    let _e16: Line = other_2305;
    let _e21: Rotor = self_2571;
    let _e24: Line = other_2305;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_inner_product(self_2572: Rotor, other_2306: Line) -> Rotor {
    var self_2573: Rotor;
    var other_2307: Line;

    self_2573 = self_2572;
    other_2307 = other_2306;
    let _e4: Rotor = self_2573;
    let _e7: Line = other_2307;
    let _e10: Line = other_2307;
    let _e13: Line = other_2307;
    let _e16: Line = other_2307;
    return Rotor(((_e4.g0_.wwwx * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_line_inner_anti_product(self_2574: Rotor, other_2308: Line) -> Motor {
    var self_2575: Rotor;
    var other_2309: Line;

    self_2575 = self_2574;
    other_2309 = other_2308;
    let _e4: Rotor = self_2575;
    let _e8: Line = other_2309;
    let _e19: Rotor = self_2575;
    let _e23: Line = other_2309;
    let _e35: Rotor = self_2575;
    let _e38: Line = other_2309;
    let _e41: Line = other_2309;
    let _e44: Line = other_2309;
    let _e47: Line = other_2309;
    let _e59: Rotor = self_2575;
    let _e63: Line = other_2309;
    return Motor(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn rotor_line_right_contraction(self_2576: Rotor, other_2310: Line) -> Rotor {
    var self_2577: Rotor;
    var other_2311: Line;

    self_2577 = self_2576;
    other_2311 = other_2310;
    let _e4: Rotor = self_2577;
    let _e7: Line = other_2311;
    let _e10: Line = other_2311;
    let _e13: Line = other_2311;
    let _e16: Line = other_2311;
    return Rotor(((_e4.g0_.wwwx * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_line_left_anti_contraction(self_2578: Rotor, other_2312: Line) -> Motor {
    var self_2579: Rotor;
    var other_2313: Line;

    self_2579 = self_2578;
    other_2313 = other_2312;
    let _e4: Rotor = self_2579;
    let _e8: Line = other_2313;
    let _e19: Rotor = self_2579;
    let _e23: Line = other_2313;
    let _e35: Rotor = self_2579;
    let _e38: Line = other_2313;
    let _e41: Line = other_2313;
    let _e44: Line = other_2313;
    let _e47: Line = other_2313;
    let _e59: Rotor = self_2579;
    let _e63: Line = other_2313;
    return Motor(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn rotor_line_right_anti_contraction(self_2580: Rotor, other_2314: Line) -> AntiScalar {
    var self_2581: Rotor;
    var other_2315: Line;

    self_2581 = self_2580;
    other_2315 = other_2314;
    let _e5: Rotor = self_2581;
    let _e8: Line = other_2315;
    let _e13: Rotor = self_2581;
    let _e16: Line = other_2315;
    let _e21: Rotor = self_2581;
    let _e24: Line = other_2315;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_line_anti_scalar_product(self_2582: Rotor, other_2316: Line) -> AntiScalar {
    var self_2583: Rotor;
    var other_2317: Line;

    self_2583 = self_2582;
    other_2317 = other_2316;
    let _e5: Rotor = self_2583;
    let _e8: Line = other_2317;
    let _e13: Rotor = self_2583;
    let _e16: Line = other_2317;
    let _e21: Rotor = self_2583;
    let _e24: Line = other_2317;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_line_anti_dot(self_2584: Rotor, other_2318: Line) -> AntiScalar {
    var self_2585: Rotor;
    var other_2319: Line;

    self_2585 = self_2584;
    other_2319 = other_2318;
    let _e5: Rotor = self_2585;
    let _e8: Line = other_2319;
    let _e13: Rotor = self_2585;
    let _e16: Line = other_2319;
    let _e21: Rotor = self_2585;
    let _e24: Line = other_2319;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_plane_geometric_product(self_2586: Rotor, other_2320: Plane) -> Flector {
    var self_2587: Rotor;
    var other_2321: Plane;

    self_2587 = self_2586;
    other_2321 = other_2320;
    let _e4: Rotor = self_2587;
    let _e7: Plane = other_2321;
    let _e17: Rotor = self_2587;
    let _e20: Plane = other_2321;
    return Flector(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), ((_e17.g0_.xyzx * _e20.g0_.wwwx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_plane_geometric_anti_product(self_2588: Rotor, other_2322: Plane) -> Flector {
    var self_2589: Rotor;
    var other_2323: Plane;

    self_2589 = self_2588;
    other_2323 = other_2322;
    let _e4: Rotor = self_2589;
    let _e8: Plane = other_2323;
    let _e18: Rotor = self_2589;
    let _e22: Plane = other_2323;
    let _e33: Rotor = self_2589;
    let _e37: Plane = other_2323;
    let _e48: Rotor = self_2589;
    let _e52: Plane = other_2323;
    let _e62: Rotor = self_2589;
    let _e66: Plane = other_2323;
    let _e77: Rotor = self_2589;
    let _e81: Plane = other_2323;
    let _e85: Rotor = self_2589;
    let _e89: Plane = other_2323;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (((((vec4(_e48.g0_.y) * _e52.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e62.g0_.z) * _e66.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e77.g0_.w) * _e81.g0_)) + ((vec4(_e85.g0_.x) * _e89.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_plane_regressive_product(self_2590: Rotor, other_2324: Plane) -> Flector {
    var self_2591: Rotor;
    var other_2325: Plane;

    self_2591 = self_2590;
    other_2325 = other_2324;
    let _e4: Rotor = self_2591;
    let _e8: Plane = other_2325;
    let _e18: Rotor = self_2591;
    let _e22: Plane = other_2325;
    let _e33: Rotor = self_2591;
    let _e37: Plane = other_2325;
    let _e48: Rotor = self_2591;
    let _e52: Plane = other_2325;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn rotor_plane_anti_wedge(self_2592: Rotor, other_2326: Plane) -> Flector {
    var self_2593: Rotor;
    var other_2327: Plane;

    self_2593 = self_2592;
    other_2327 = other_2326;
    let _e4: Rotor = self_2593;
    let _e8: Plane = other_2327;
    let _e18: Rotor = self_2593;
    let _e22: Plane = other_2327;
    let _e33: Rotor = self_2593;
    let _e37: Plane = other_2327;
    let _e48: Rotor = self_2593;
    let _e52: Plane = other_2327;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn rotor_plane_meet(self_2594: Rotor, other_2328: Plane) -> Flector {
    var self_2595: Rotor;
    var other_2329: Plane;

    self_2595 = self_2594;
    other_2329 = other_2328;
    let _e4: Rotor = self_2595;
    let _e8: Plane = other_2329;
    let _e18: Rotor = self_2595;
    let _e22: Plane = other_2329;
    let _e33: Rotor = self_2595;
    let _e37: Plane = other_2329;
    let _e48: Rotor = self_2595;
    let _e52: Plane = other_2329;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn rotor_plane_inner_product(self_2596: Rotor, other_2330: Plane) -> Point {
    var self_2597: Rotor;
    var other_2331: Plane;

    self_2597 = self_2596;
    other_2331 = other_2330;
    let _e4: Rotor = self_2597;
    let _e7: Plane = other_2331;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn rotor_plane_inner_anti_product(self_2598: Rotor, other_2332: Plane) -> Plane {
    var self_2599: Rotor;
    var other_2333: Plane;

    self_2599 = self_2598;
    other_2333 = other_2332;
    let _e4: Rotor = self_2599;
    let _e8: Plane = other_2333;
    let _e18: Rotor = self_2599;
    let _e22: Plane = other_2333;
    let _e33: Rotor = self_2599;
    let _e37: Plane = other_2333;
    let _e41: Rotor = self_2599;
    let _e45: Plane = other_2333;
    return Plane((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_plane_right_contraction(self_2600: Rotor, other_2334: Plane) -> Point {
    var self_2601: Rotor;
    var other_2335: Plane;

    self_2601 = self_2600;
    other_2335 = other_2334;
    let _e4: Rotor = self_2601;
    let _e7: Plane = other_2335;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn rotor_plane_left_anti_contraction(self_2602: Rotor, other_2336: Plane) -> Plane {
    var self_2603: Rotor;
    var other_2337: Plane;

    self_2603 = self_2602;
    other_2337 = other_2336;
    let _e4: Rotor = self_2603;
    let _e8: Plane = other_2337;
    return Plane((vec4(_e4.g0_.w) * _e8.g0_));
}

fn rotor_plane_right_anti_contraction(self_2604: Rotor, other_2338: Plane) -> Plane {
    var self_2605: Rotor;
    var other_2339: Plane;

    self_2605 = self_2604;
    other_2339 = other_2338;
    let _e4: Rotor = self_2605;
    let _e8: Plane = other_2339;
    let _e18: Rotor = self_2605;
    let _e22: Plane = other_2339;
    let _e33: Rotor = self_2605;
    let _e37: Plane = other_2339;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_motor_add(self_2606: Rotor, other_2340: Motor) -> Motor {
    var self_2607: Rotor;
    var other_2341: Motor;

    self_2607 = self_2606;
    other_2341 = other_2340;
    let _e4: Rotor = self_2607;
    let _e6: Motor = other_2341;
    let _e9: Motor = other_2341;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn rotor_motor_sub(self_2608: Rotor, other_2342: Motor) -> Motor {
    var self_2609: Rotor;
    var other_2343: Motor;

    self_2609 = self_2608;
    other_2343 = other_2342;
    let _e4: Rotor = self_2609;
    let _e6: Motor = other_2343;
    let _e11: Motor = other_2343;
    return Motor((_e4.g0_ - _e6.g0_), (vec3(0.0) - _e11.g1_));
}

fn rotor_motor_geometric_product(self_2610: Rotor, other_2344: Motor) -> Rotor {
    var self_2611: Rotor;
    var other_2345: Motor;

    self_2611 = self_2610;
    other_2345 = other_2344;
    let _e4: Rotor = self_2611;
    let _e8: Motor = other_2345;
    let _e11: Motor = other_2345;
    let _e14: Motor = other_2345;
    let _e17: Motor = other_2345;
    let _e28: Rotor = self_2611;
    let _e32: Motor = other_2345;
    let _e35: Motor = other_2345;
    let _e38: Motor = other_2345;
    let _e41: Motor = other_2345;
    let _e53: Rotor = self_2611;
    let _e57: Motor = other_2345;
    let _e60: Motor = other_2345;
    let _e63: Motor = other_2345;
    let _e66: Motor = other_2345;
    let _e78: Rotor = self_2611;
    let _e82: Motor = other_2345;
    let _e85: Motor = other_2345;
    let _e88: Motor = other_2345;
    let _e91: Motor = other_2345;
    return Rotor((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn rotor_motor_geometric_anti_product(self_2612: Rotor, other_2346: Motor) -> MultiVector {
    var self_2613: Rotor;
    var other_2347: Motor;

    self_2613 = self_2612;
    other_2347 = other_2346;
    let _e6: Rotor = self_2613;
    let _e10: Motor = other_2347;
    let _e13: Motor = other_2347;
    let _e19: Rotor = self_2613;
    let _e23: Motor = other_2347;
    let _e26: Motor = other_2347;
    let _e32: Rotor = self_2613;
    let _e36: Motor = other_2347;
    let _e39: Motor = other_2347;
    let _e45: Rotor = self_2613;
    let _e48: Rotor = self_2613;
    let _e52: Motor = other_2347;
    let _e55: Motor = other_2347;
    let _e67: Rotor = self_2613;
    let _e71: Motor = other_2347;
    let _e74: Motor = other_2347;
    let _e77: Motor = other_2347;
    let _e87: Rotor = self_2613;
    let _e91: Motor = other_2347;
    let _e94: Motor = other_2347;
    let _e97: Motor = other_2347;
    let _e108: Rotor = self_2613;
    let _e112: Motor = other_2347;
    let _e115: Motor = other_2347;
    let _e118: Motor = other_2347;
    let _e129: Rotor = self_2613;
    let _e133: Motor = other_2347;
    let _e136: Motor = other_2347;
    let _e139: Motor = other_2347;
    let _e145: Rotor = self_2613;
    let _e149: Motor = other_2347;
    let _e158: Rotor = self_2613;
    let _e162: Motor = other_2347;
    let _e172: Rotor = self_2613;
    let _e176: Motor = other_2347;
    let _e180: Rotor = self_2613;
    let _e184: Motor = other_2347;
    return MultiVector(((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (((((vec3(_e67.g0_.x) * vec3<f32>(_e71.g0_.w, _e74.g0_.z, _e77.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e87.g0_.y) * vec3<f32>(_e91.g0_.z, _e94.g0_.w, _e97.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e108.g0_.z) * vec3<f32>(_e112.g0_.y, _e115.g0_.x, _e118.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e129.g0_.w) * vec3<f32>(_e133.g0_.x, _e136.g0_.y, _e139.g0_.z))), (((((vec3(_e145.g0_.y) * _e149.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e158.g0_.z) * _e162.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e172.g0_.w) * _e176.g1_)) + ((vec3(_e180.g0_.x) * _e184.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn rotor_motor_regressive_product(self_2614: Rotor, other_2348: Motor) -> MultiVector {
    var self_2615: Rotor;
    var other_2349: Motor;

    self_2615 = self_2614;
    other_2349 = other_2348;
    let _e4: Rotor = self_2615;
    let _e8: Motor = other_2349;
    let _e17: Rotor = self_2615;
    let _e21: Motor = other_2349;
    let _e31: Rotor = self_2615;
    let _e35: Motor = other_2349;
    let _e45: Rotor = self_2615;
    let _e49: Motor = other_2349;
    let _e61: Rotor = self_2615;
    let _e65: Motor = other_2349;
    let _e68: Motor = other_2349;
    let _e71: Motor = other_2349;
    let _e76: Rotor = self_2615;
    let _e79: Rotor = self_2615;
    let _e82: Rotor = self_2615;
    let _e86: Motor = other_2349;
    let _e92: Rotor = self_2615;
    let _e96: Motor = other_2349;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e61.g0_.w) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z)) + (vec3<f32>(_e76.g0_.x, _e79.g0_.y, _e82.g0_.z) * vec3(_e86.g0_.w))), (vec3(_e92.g0_.w) * _e96.g1_), vec4(0.0));
}

fn rotor_motor_anti_wedge(self_2616: Rotor, other_2350: Motor) -> MultiVector {
    var self_2617: Rotor;
    var other_2351: Motor;

    self_2617 = self_2616;
    other_2351 = other_2350;
    let _e4: Rotor = self_2617;
    let _e8: Motor = other_2351;
    let _e17: Rotor = self_2617;
    let _e21: Motor = other_2351;
    let _e31: Rotor = self_2617;
    let _e35: Motor = other_2351;
    let _e45: Rotor = self_2617;
    let _e49: Motor = other_2351;
    let _e61: Rotor = self_2617;
    let _e65: Motor = other_2351;
    let _e68: Motor = other_2351;
    let _e71: Motor = other_2351;
    let _e76: Rotor = self_2617;
    let _e79: Rotor = self_2617;
    let _e82: Rotor = self_2617;
    let _e86: Motor = other_2351;
    let _e92: Rotor = self_2617;
    let _e96: Motor = other_2351;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e61.g0_.w) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z)) + (vec3<f32>(_e76.g0_.x, _e79.g0_.y, _e82.g0_.z) * vec3(_e86.g0_.w))), (vec3(_e92.g0_.w) * _e96.g1_), vec4(0.0));
}

fn rotor_motor_meet(self_2618: Rotor, other_2352: Motor) -> MultiVector {
    var self_2619: Rotor;
    var other_2353: Motor;

    self_2619 = self_2618;
    other_2353 = other_2352;
    let _e4: Rotor = self_2619;
    let _e8: Motor = other_2353;
    let _e17: Rotor = self_2619;
    let _e21: Motor = other_2353;
    let _e31: Rotor = self_2619;
    let _e35: Motor = other_2353;
    let _e45: Rotor = self_2619;
    let _e49: Motor = other_2353;
    let _e61: Rotor = self_2619;
    let _e65: Motor = other_2353;
    let _e68: Motor = other_2353;
    let _e71: Motor = other_2353;
    let _e76: Rotor = self_2619;
    let _e79: Rotor = self_2619;
    let _e82: Rotor = self_2619;
    let _e86: Motor = other_2353;
    let _e92: Rotor = self_2619;
    let _e96: Motor = other_2353;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e61.g0_.w) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z)) + (vec3<f32>(_e76.g0_.x, _e79.g0_.y, _e82.g0_.z) * vec3(_e86.g0_.w))), (vec3(_e92.g0_.w) * _e96.g1_), vec4(0.0));
}

fn rotor_motor_outer_product(self_2620: Rotor, other_2354: Motor) -> AntiScalar {
    var self_2621: Rotor;
    var other_2355: Motor;

    self_2621 = self_2620;
    other_2355 = other_2354;
    let _e5: Rotor = self_2621;
    let _e8: Motor = other_2355;
    let _e13: Rotor = self_2621;
    let _e16: Motor = other_2355;
    let _e21: Rotor = self_2621;
    let _e24: Motor = other_2355;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_wedge(self_2622: Rotor, other_2356: Motor) -> AntiScalar {
    var self_2623: Rotor;
    var other_2357: Motor;

    self_2623 = self_2622;
    other_2357 = other_2356;
    let _e5: Rotor = self_2623;
    let _e8: Motor = other_2357;
    let _e13: Rotor = self_2623;
    let _e16: Motor = other_2357;
    let _e21: Rotor = self_2623;
    let _e24: Motor = other_2357;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_join(self_2624: Rotor, other_2358: Motor) -> AntiScalar {
    var self_2625: Rotor;
    var other_2359: Motor;

    self_2625 = self_2624;
    other_2359 = other_2358;
    let _e5: Rotor = self_2625;
    let _e8: Motor = other_2359;
    let _e13: Rotor = self_2625;
    let _e16: Motor = other_2359;
    let _e21: Rotor = self_2625;
    let _e24: Motor = other_2359;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_inner_product(self_2626: Rotor, other_2360: Motor) -> Rotor {
    var self_2627: Rotor;
    var other_2361: Motor;

    self_2627 = self_2626;
    other_2361 = other_2360;
    let _e4: Rotor = self_2627;
    let _e7: Motor = other_2361;
    let _e10: Motor = other_2361;
    let _e13: Motor = other_2361;
    let _e16: Motor = other_2361;
    return Rotor(((_e4.g0_.wwwx * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_motor_inner_anti_product(self_2628: Rotor, other_2362: Motor) -> Motor {
    var self_2629: Rotor;
    var other_2363: Motor;

    self_2629 = self_2628;
    other_2363 = other_2362;
    let _e4: Rotor = self_2629;
    let _e8: Motor = other_2363;
    let _e18: Rotor = self_2629;
    let _e22: Motor = other_2363;
    let _e33: Rotor = self_2629;
    let _e37: Motor = other_2363;
    let _e41: Rotor = self_2629;
    let _e45: Motor = other_2363;
    let _e56: Rotor = self_2629;
    let _e60: Motor = other_2363;
    return Motor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec3(_e56.g0_.w) * _e60.g1_));
}

fn rotor_motor_right_contraction(self_2630: Rotor, other_2364: Motor) -> Rotor {
    var self_2631: Rotor;
    var other_2365: Motor;

    self_2631 = self_2630;
    other_2365 = other_2364;
    let _e4: Rotor = self_2631;
    let _e7: Motor = other_2365;
    let _e10: Motor = other_2365;
    let _e13: Motor = other_2365;
    let _e16: Motor = other_2365;
    return Rotor(((_e4.g0_.wwwx * vec4<f32>(_e7.g1_.x, _e10.g1_.y, _e13.g1_.z, _e16.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_motor_left_anti_contraction(self_2632: Rotor, other_2366: Motor) -> Motor {
    var self_2633: Rotor;
    var other_2367: Motor;

    self_2633 = self_2632;
    other_2367 = other_2366;
    let _e4: Rotor = self_2633;
    let _e8: Motor = other_2367;
    let _e19: Rotor = self_2633;
    let _e23: Motor = other_2367;
    let _e35: Rotor = self_2633;
    let _e39: Motor = other_2367;
    let _e43: Rotor = self_2633;
    let _e47: Motor = other_2367;
    let _e59: Rotor = self_2633;
    let _e63: Motor = other_2367;
    return Motor((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (vec3(_e59.g0_.w) * _e63.g1_));
}

fn rotor_motor_right_anti_contraction(self_2634: Rotor, other_2368: Motor) -> Rotor {
    var self_2635: Rotor;
    var other_2369: Motor;

    self_2635 = self_2634;
    other_2369 = other_2368;
    let _e4: Rotor = self_2635;
    let _e8: Motor = other_2369;
    let _e18: Rotor = self_2635;
    let _e22: Motor = other_2369;
    let _e33: Rotor = self_2635;
    let _e37: Motor = other_2369;
    let _e49: Rotor = self_2635;
    let _e53: Motor = other_2369;
    return Rotor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_motor_anti_scalar_product(self_2636: Rotor, other_2370: Motor) -> AntiScalar {
    var self_2637: Rotor;
    var other_2371: Motor;

    self_2637 = self_2636;
    other_2371 = other_2370;
    let _e5: Rotor = self_2637;
    let _e8: Motor = other_2371;
    let _e13: Rotor = self_2637;
    let _e16: Motor = other_2371;
    let _e21: Rotor = self_2637;
    let _e24: Motor = other_2371;
    let _e29: Rotor = self_2637;
    let _e32: Motor = other_2371;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_motor_anti_dot(self_2638: Rotor, other_2372: Motor) -> AntiScalar {
    var self_2639: Rotor;
    var other_2373: Motor;

    self_2639 = self_2638;
    other_2373 = other_2372;
    let _e5: Rotor = self_2639;
    let _e8: Motor = other_2373;
    let _e13: Rotor = self_2639;
    let _e16: Motor = other_2373;
    let _e21: Rotor = self_2639;
    let _e24: Motor = other_2373;
    let _e29: Rotor = self_2639;
    let _e32: Motor = other_2373;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_rotor_add(self_2640: Rotor, other_2374: Rotor) -> Rotor {
    var self_2641: Rotor;
    var other_2375: Rotor;

    self_2641 = self_2640;
    other_2375 = other_2374;
    let _e4: Rotor = self_2641;
    let _e6: Rotor = other_2375;
    return Rotor((_e4.g0_ + _e6.g0_));
}

fn rotor_rotor_sub(self_2642: Rotor, other_2376: Rotor) -> Rotor {
    var self_2643: Rotor;
    var other_2377: Rotor;

    self_2643 = self_2642;
    other_2377 = other_2376;
    let _e4: Rotor = self_2643;
    let _e6: Rotor = other_2377;
    return Rotor((_e4.g0_ - _e6.g0_));
}

fn rotor_rotor_mul(self_2644: Rotor, other_2378: Rotor) -> Rotor {
    var self_2645: Rotor;
    var other_2379: Rotor;

    self_2645 = self_2644;
    other_2379 = other_2378;
    let _e4: Rotor = self_2645;
    let _e6: Rotor = other_2379;
    return Rotor((_e4.g0_ * _e6.g0_));
}

fn rotor_rotor_div(self_2646: Rotor, other_2380: Rotor) -> Rotor {
    var self_2647: Rotor;
    var other_2381: Rotor;

    self_2647 = self_2646;
    other_2381 = other_2380;
    let _e4: Rotor = self_2647;
    let _e7: Rotor = self_2647;
    let _e10: Rotor = self_2647;
    let _e13: Rotor = self_2647;
    let _e23: Rotor = other_2381;
    let _e26: Rotor = other_2381;
    let _e29: Rotor = other_2381;
    let _e32: Rotor = other_2381;
    return Rotor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn rotor_rotor_geometric_anti_product(self_2648: Rotor, other_2382: Rotor) -> Rotor {
    var self_2649: Rotor;
    var other_2383: Rotor;

    self_2649 = self_2648;
    other_2383 = other_2382;
    let _e4: Rotor = self_2649;
    let _e8: Rotor = other_2383;
    let _e18: Rotor = self_2649;
    let _e22: Rotor = other_2383;
    let _e33: Rotor = self_2649;
    let _e37: Rotor = other_2383;
    let _e48: Rotor = self_2649;
    let _e52: Rotor = other_2383;
    return Rotor((((((vec4(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e18.g0_.y) * _e22.g0_.zwxy) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e33.g0_.z) * _e37.g0_.yxwz) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e48.g0_.w) * _e52.g0_)));
}

fn rotor_rotor_regressive_product(self_2650: Rotor, other_2384: Rotor) -> Rotor {
    var self_2651: Rotor;
    var other_2385: Rotor;

    self_2651 = self_2650;
    other_2385 = other_2384;
    let _e4: Rotor = self_2651;
    let _e8: Rotor = other_2385;
    let _e11: Rotor = self_2651;
    let _e14: Rotor = other_2385;
    return Rotor(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_anti_wedge(self_2652: Rotor, other_2386: Rotor) -> Rotor {
    var self_2653: Rotor;
    var other_2387: Rotor;

    self_2653 = self_2652;
    other_2387 = other_2386;
    let _e4: Rotor = self_2653;
    let _e8: Rotor = other_2387;
    let _e11: Rotor = self_2653;
    let _e14: Rotor = other_2387;
    return Rotor(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_meet(self_2654: Rotor, other_2388: Rotor) -> Rotor {
    var self_2655: Rotor;
    var other_2389: Rotor;

    self_2655 = self_2654;
    other_2389 = other_2388;
    let _e4: Rotor = self_2655;
    let _e8: Rotor = other_2389;
    let _e11: Rotor = self_2655;
    let _e14: Rotor = other_2389;
    return Rotor(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_inner_anti_product(self_2656: Rotor, other_2390: Rotor) -> Rotor {
    var self_2657: Rotor;
    var other_2391: Rotor;

    self_2657 = self_2656;
    other_2391 = other_2390;
    let _e4: Rotor = self_2657;
    let _e8: Rotor = other_2391;
    let _e18: Rotor = self_2657;
    let _e22: Rotor = other_2391;
    let _e33: Rotor = self_2657;
    let _e37: Rotor = other_2391;
    let _e41: Rotor = self_2657;
    let _e45: Rotor = other_2391;
    return Rotor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_rotor_left_anti_contraction(self_2658: Rotor, other_2392: Rotor) -> Rotor {
    var self_2659: Rotor;
    var other_2393: Rotor;

    self_2659 = self_2658;
    other_2393 = other_2392;
    let _e4: Rotor = self_2659;
    let _e8: Rotor = other_2393;
    let _e19: Rotor = self_2659;
    let _e23: Rotor = other_2393;
    let _e35: Rotor = self_2659;
    let _e39: Rotor = other_2393;
    let _e43: Rotor = self_2659;
    let _e47: Rotor = other_2393;
    return Rotor((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn rotor_rotor_right_anti_contraction(self_2660: Rotor, other_2394: Rotor) -> Rotor {
    var self_2661: Rotor;
    var other_2395: Rotor;

    self_2661 = self_2660;
    other_2395 = other_2394;
    let _e4: Rotor = self_2661;
    let _e8: Rotor = other_2395;
    let _e18: Rotor = self_2661;
    let _e22: Rotor = other_2395;
    let _e33: Rotor = self_2661;
    let _e37: Rotor = other_2395;
    let _e49: Rotor = self_2661;
    let _e53: Rotor = other_2395;
    return Rotor((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_rotor_anti_scalar_product(self_2662: Rotor, other_2396: Rotor) -> AntiScalar {
    var self_2663: Rotor;
    var other_2397: Rotor;

    self_2663 = self_2662;
    other_2397 = other_2396;
    let _e5: Rotor = self_2663;
    let _e8: Rotor = other_2397;
    let _e13: Rotor = self_2663;
    let _e16: Rotor = other_2397;
    let _e21: Rotor = self_2663;
    let _e24: Rotor = other_2397;
    let _e29: Rotor = self_2663;
    let _e32: Rotor = other_2397;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_rotor_anti_dot(self_2664: Rotor, other_2398: Rotor) -> AntiScalar {
    var self_2665: Rotor;
    var other_2399: Rotor;

    self_2665 = self_2664;
    other_2399 = other_2398;
    let _e5: Rotor = self_2665;
    let _e8: Rotor = other_2399;
    let _e13: Rotor = self_2665;
    let _e16: Rotor = other_2399;
    let _e21: Rotor = self_2665;
    let _e24: Rotor = other_2399;
    let _e29: Rotor = self_2665;
    let _e32: Rotor = other_2399;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_translator_add(self_2666: Rotor, other_2400: Translator) -> Motor {
    var self_2667: Rotor;
    var other_2401: Translator;

    self_2667 = self_2666;
    other_2401 = other_2400;
    let _e4: Rotor = self_2667;
    let _e6: Translator = other_2401;
    let _e16: Translator = other_2401;
    let _e19: Translator = other_2401;
    let _e22: Translator = other_2401;
    return Motor((_e4.g0_ + (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn rotor_translator_sub(self_2668: Rotor, other_2402: Translator) -> Motor {
    var self_2669: Rotor;
    var other_2403: Translator;

    self_2669 = self_2668;
    other_2403 = other_2402;
    let _e4: Rotor = self_2669;
    let _e6: Translator = other_2403;
    let _e18: Translator = other_2403;
    let _e21: Translator = other_2403;
    let _e24: Translator = other_2403;
    return Motor((_e4.g0_ - (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (vec3(0.0) - vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn rotor_translator_geometric_product(self_2670: Rotor, other_2404: Translator) -> Rotor {
    var self_2671: Rotor;
    var other_2405: Translator;

    self_2671 = self_2670;
    other_2405 = other_2404;
    let _e4: Rotor = self_2671;
    let _e8: Translator = other_2405;
    let _e18: Rotor = self_2671;
    let _e22: Translator = other_2405;
    let _e33: Rotor = self_2671;
    let _e37: Translator = other_2405;
    let _e48: Rotor = self_2671;
    let _e52: Translator = other_2405;
    return Rotor((((((vec4(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyz) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e33.g0_.w) * _e37.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e48.g0_.x) * _e52.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn rotor_translator_geometric_anti_product(self_2672: Rotor, other_2406: Translator) -> MultiVector {
    var self_2673: Rotor;
    var other_2407: Translator;

    self_2673 = self_2672;
    other_2407 = other_2406;
    let _e4: Rotor = self_2673;
    let _e8: Translator = other_2407;
    let _e17: Rotor = self_2673;
    let _e21: Translator = other_2407;
    let _e31: Rotor = self_2673;
    let _e34: Rotor = self_2673;
    let _e38: Translator = other_2407;
    let _e41: Translator = other_2407;
    let _e53: Rotor = self_2673;
    let _e56: Rotor = self_2673;
    let _e59: Rotor = self_2673;
    let _e63: Translator = other_2407;
    let _e68: Rotor = self_2673;
    let _e72: Translator = other_2407;
    let _e75: Translator = other_2407;
    let _e78: Translator = other_2407;
    let _e88: Rotor = self_2673;
    let _e92: Translator = other_2407;
    let _e95: Translator = other_2407;
    let _e98: Translator = other_2407;
    let _e109: Rotor = self_2673;
    let _e113: Translator = other_2407;
    let _e116: Translator = other_2407;
    let _e119: Translator = other_2407;
    let _e125: Rotor = self_2673;
    let _e129: Translator = other_2407;
    let _e132: Translator = other_2407;
    let _e135: Translator = other_2407;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), (((((vec3(_e68.g0_.y) * vec3<f32>(_e72.g0_.z, _e75.g0_.z, _e78.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e88.g0_.z) * vec3<f32>(_e92.g0_.y, _e95.g0_.x, _e98.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e109.g0_.w) * vec3<f32>(_e113.g0_.x, _e116.g0_.y, _e119.g0_.z))) + ((vec3(_e125.g0_.x) * vec3<f32>(_e129.g0_.x, _e132.g0_.z, _e135.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn rotor_translator_regressive_product(self_2674: Rotor, other_2408: Translator) -> MultiVector {
    var self_2675: Rotor;
    var other_2409: Translator;

    self_2675 = self_2674;
    other_2409 = other_2408;
    let _e4: Rotor = self_2675;
    let _e8: Translator = other_2409;
    let _e17: Rotor = self_2675;
    let _e21: Translator = other_2409;
    let _e31: Rotor = self_2675;
    let _e34: Rotor = self_2675;
    let _e38: Translator = other_2409;
    let _e41: Translator = other_2409;
    let _e53: Rotor = self_2675;
    let _e56: Rotor = self_2675;
    let _e59: Rotor = self_2675;
    let _e63: Translator = other_2409;
    let _e68: Rotor = self_2675;
    let _e72: Translator = other_2409;
    let _e75: Translator = other_2409;
    let _e78: Translator = other_2409;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)), vec4(0.0));
}

fn rotor_translator_anti_wedge(self_2676: Rotor, other_2410: Translator) -> MultiVector {
    var self_2677: Rotor;
    var other_2411: Translator;

    self_2677 = self_2676;
    other_2411 = other_2410;
    let _e4: Rotor = self_2677;
    let _e8: Translator = other_2411;
    let _e17: Rotor = self_2677;
    let _e21: Translator = other_2411;
    let _e31: Rotor = self_2677;
    let _e34: Rotor = self_2677;
    let _e38: Translator = other_2411;
    let _e41: Translator = other_2411;
    let _e53: Rotor = self_2677;
    let _e56: Rotor = self_2677;
    let _e59: Rotor = self_2677;
    let _e63: Translator = other_2411;
    let _e68: Rotor = self_2677;
    let _e72: Translator = other_2411;
    let _e75: Translator = other_2411;
    let _e78: Translator = other_2411;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)), vec4(0.0));
}

fn rotor_translator_meet(self_2678: Rotor, other_2412: Translator) -> MultiVector {
    var self_2679: Rotor;
    var other_2413: Translator;

    self_2679 = self_2678;
    other_2413 = other_2412;
    let _e4: Rotor = self_2679;
    let _e8: Translator = other_2413;
    let _e17: Rotor = self_2679;
    let _e21: Translator = other_2413;
    let _e31: Rotor = self_2679;
    let _e34: Rotor = self_2679;
    let _e38: Translator = other_2413;
    let _e41: Translator = other_2413;
    let _e53: Rotor = self_2679;
    let _e56: Rotor = self_2679;
    let _e59: Rotor = self_2679;
    let _e63: Translator = other_2413;
    let _e68: Rotor = self_2679;
    let _e72: Translator = other_2413;
    let _e75: Translator = other_2413;
    let _e78: Translator = other_2413;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3<f32>(_e53.g0_.x, _e56.g0_.y, _e59.g0_.z) * vec3(_e63.g0_.w)), (vec3(_e68.g0_.w) * vec3<f32>(_e72.g0_.x, _e75.g0_.y, _e78.g0_.z)), vec4(0.0));
}

fn rotor_translator_outer_product(self_2680: Rotor, other_2414: Translator) -> AntiScalar {
    var self_2681: Rotor;
    var other_2415: Translator;

    self_2681 = self_2680;
    other_2415 = other_2414;
    let _e5: Rotor = self_2681;
    let _e8: Translator = other_2415;
    let _e13: Rotor = self_2681;
    let _e16: Translator = other_2415;
    let _e21: Rotor = self_2681;
    let _e24: Translator = other_2415;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_wedge(self_2682: Rotor, other_2416: Translator) -> AntiScalar {
    var self_2683: Rotor;
    var other_2417: Translator;

    self_2683 = self_2682;
    other_2417 = other_2416;
    let _e5: Rotor = self_2683;
    let _e8: Translator = other_2417;
    let _e13: Rotor = self_2683;
    let _e16: Translator = other_2417;
    let _e21: Rotor = self_2683;
    let _e24: Translator = other_2417;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_join(self_2684: Rotor, other_2418: Translator) -> AntiScalar {
    var self_2685: Rotor;
    var other_2419: Translator;

    self_2685 = self_2684;
    other_2419 = other_2418;
    let _e5: Rotor = self_2685;
    let _e8: Translator = other_2419;
    let _e13: Rotor = self_2685;
    let _e16: Translator = other_2419;
    let _e21: Rotor = self_2685;
    let _e24: Translator = other_2419;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_inner_product(self_2686: Rotor, other_2420: Translator) -> Rotor {
    var self_2687: Rotor;
    var other_2421: Translator;

    self_2687 = self_2686;
    other_2421 = other_2420;
    let _e4: Rotor = self_2687;
    let _e7: Translator = other_2421;
    return Rotor(((_e4.g0_.wwwx * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_translator_inner_anti_product(self_2688: Rotor, other_2422: Translator) -> Motor {
    var self_2689: Rotor;
    var other_2423: Translator;

    self_2689 = self_2688;
    other_2423 = other_2422;
    let _e4: Rotor = self_2689;
    let _e6: Translator = other_2423;
    let _e11: Rotor = self_2689;
    let _e15: Translator = other_2423;
    let _e18: Translator = other_2423;
    let _e21: Translator = other_2423;
    return Motor((_e4.g0_ * vec4(_e6.g0_.w)), (vec3(_e11.g0_.w) * vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z)));
}

fn rotor_translator_right_contraction(self_2690: Rotor, other_2424: Translator) -> Rotor {
    var self_2691: Rotor;
    var other_2425: Translator;

    self_2691 = self_2690;
    other_2425 = other_2424;
    let _e4: Rotor = self_2691;
    let _e7: Translator = other_2425;
    return Rotor(((_e4.g0_.wwwx * _e7.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn rotor_translator_left_anti_contraction(self_2692: Rotor, other_2426: Translator) -> Translator {
    var self_2693: Rotor;
    var other_2427: Translator;

    self_2693 = self_2692;
    other_2427 = other_2426;
    let _e4: Rotor = self_2693;
    let _e8: Translator = other_2427;
    return Translator((vec4(_e4.g0_.w) * _e8.g0_));
}

fn rotor_translator_right_anti_contraction(self_2694: Rotor, other_2428: Translator) -> Rotor {
    var self_2695: Rotor;
    var other_2429: Translator;

    self_2695 = self_2694;
    other_2429 = other_2428;
    let _e4: Rotor = self_2695;
    let _e6: Translator = other_2429;
    return Rotor((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn rotor_translator_anti_scalar_product(self_2696: Rotor, other_2430: Translator) -> AntiScalar {
    var self_2697: Rotor;
    var other_2431: Translator;

    self_2697 = self_2696;
    other_2431 = other_2430;
    let _e4: Rotor = self_2697;
    let _e7: Translator = other_2431;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn rotor_translator_anti_dot(self_2698: Rotor, other_2432: Translator) -> AntiScalar {
    var self_2699: Rotor;
    var other_2433: Translator;

    self_2699 = self_2698;
    other_2433 = other_2432;
    let _e4: Rotor = self_2699;
    let _e7: Translator = other_2433;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn rotor_flector_geometric_product(self_2700: Rotor, other_2434: Flector) -> Flector {
    var self_2701: Rotor;
    var other_2435: Flector;

    self_2701 = self_2700;
    other_2435 = other_2434;
    let _e4: Rotor = self_2701;
    let _e8: Flector = other_2435;
    let _e19: Rotor = self_2701;
    let _e23: Flector = other_2435;
    let _e35: Rotor = self_2701;
    let _e39: Flector = other_2435;
    let _e51: Rotor = self_2701;
    let _e55: Flector = other_2435;
    let _e67: Rotor = self_2701;
    let _e71: Flector = other_2435;
    let _e74: Flector = other_2435;
    let _e77: Flector = other_2435;
    let _e80: Flector = other_2435;
    let _e91: Rotor = self_2701;
    let _e95: Flector = other_2435;
    let _e98: Flector = other_2435;
    let _e101: Flector = other_2435;
    let _e104: Flector = other_2435;
    let _e116: Rotor = self_2701;
    let _e120: Flector = other_2435;
    let _e131: Rotor = self_2701;
    let _e135: Flector = other_2435;
    let _e138: Flector = other_2435;
    let _e141: Flector = other_2435;
    let _e144: Flector = other_2435;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec4(_e67.g0_.y) * vec4<f32>(_e71.g0_.z, _e74.g1_.w, _e77.g0_.x, _e80.g0_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e91.g0_.z) * vec4<f32>(_e95.g0_.y, _e98.g0_.x, _e101.g1_.w, _e104.g0_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e116.g0_.w) * _e120.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e131.g0_.x) * vec4<f32>(_e135.g1_.w, _e138.g0_.z, _e141.g0_.y, _e144.g1_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn rotor_flector_geometric_anti_product(self_2702: Rotor, other_2436: Flector) -> Flector {
    var self_2703: Rotor;
    var other_2437: Flector;

    self_2703 = self_2702;
    other_2437 = other_2436;
    let _e4: Rotor = self_2703;
    let _e8: Flector = other_2437;
    let _e11: Flector = other_2437;
    let _e14: Flector = other_2437;
    let _e17: Flector = other_2437;
    let _e28: Rotor = self_2703;
    let _e32: Flector = other_2437;
    let _e35: Flector = other_2437;
    let _e38: Flector = other_2437;
    let _e41: Flector = other_2437;
    let _e53: Rotor = self_2703;
    let _e57: Flector = other_2437;
    let _e60: Flector = other_2437;
    let _e63: Flector = other_2437;
    let _e66: Flector = other_2437;
    let _e78: Rotor = self_2703;
    let _e82: Flector = other_2437;
    let _e86: Rotor = self_2703;
    let _e90: Flector = other_2437;
    let _e93: Flector = other_2437;
    let _e96: Flector = other_2437;
    let _e99: Flector = other_2437;
    let _e110: Rotor = self_2703;
    let _e114: Flector = other_2437;
    let _e117: Flector = other_2437;
    let _e120: Flector = other_2437;
    let _e123: Flector = other_2437;
    let _e135: Rotor = self_2703;
    let _e139: Flector = other_2437;
    let _e142: Flector = other_2437;
    let _e145: Flector = other_2437;
    let _e148: Flector = other_2437;
    let _e160: Rotor = self_2703;
    let _e164: Flector = other_2437;
    return Flector((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g1_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g1_.w, _e66.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e78.g0_.w) * _e82.g0_)), (((((vec4(_e86.g0_.x) * vec4<f32>(_e90.g0_.w, _e93.g1_.z, _e96.g1_.y, _e99.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e110.g0_.y) * vec4<f32>(_e114.g1_.z, _e117.g0_.w, _e120.g1_.x, _e123.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g1_.x, _e145.g0_.w, _e148.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e160.g0_.w) * _e164.g1_)));
}

fn rotor_flector_regressive_product(self_2704: Rotor, other_2438: Flector) -> Flector {
    var self_2705: Rotor;
    var other_2439: Flector;

    self_2705 = self_2704;
    other_2439 = other_2438;
    let _e4: Rotor = self_2705;
    let _e8: Flector = other_2439;
    let _e18: Rotor = self_2705;
    let _e22: Flector = other_2439;
    let _e33: Rotor = self_2705;
    let _e37: Flector = other_2439;
    let _e41: Rotor = self_2705;
    let _e45: Flector = other_2439;
    let _e56: Rotor = self_2705;
    let _e60: Flector = other_2439;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn rotor_flector_anti_wedge(self_2706: Rotor, other_2440: Flector) -> Flector {
    var self_2707: Rotor;
    var other_2441: Flector;

    self_2707 = self_2706;
    other_2441 = other_2440;
    let _e4: Rotor = self_2707;
    let _e8: Flector = other_2441;
    let _e18: Rotor = self_2707;
    let _e22: Flector = other_2441;
    let _e33: Rotor = self_2707;
    let _e37: Flector = other_2441;
    let _e41: Rotor = self_2707;
    let _e45: Flector = other_2441;
    let _e56: Rotor = self_2707;
    let _e60: Flector = other_2441;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn rotor_flector_meet(self_2708: Rotor, other_2442: Flector) -> Flector {
    var self_2709: Rotor;
    var other_2443: Flector;

    self_2709 = self_2708;
    other_2443 = other_2442;
    let _e4: Rotor = self_2709;
    let _e8: Flector = other_2443;
    let _e18: Rotor = self_2709;
    let _e22: Flector = other_2443;
    let _e33: Rotor = self_2709;
    let _e37: Flector = other_2443;
    let _e41: Rotor = self_2709;
    let _e45: Flector = other_2443;
    let _e56: Rotor = self_2709;
    let _e60: Flector = other_2443;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn rotor_flector_outer_product(self_2710: Rotor, other_2444: Flector) -> Plane {
    var self_2711: Rotor;
    var other_2445: Flector;

    self_2711 = self_2710;
    other_2445 = other_2444;
    let _e4: Rotor = self_2711;
    let _e8: Flector = other_2445;
    let _e18: Rotor = self_2711;
    let _e22: Flector = other_2445;
    let _e33: Rotor = self_2711;
    let _e37: Flector = other_2445;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_flector_wedge(self_2712: Rotor, other_2446: Flector) -> Plane {
    var self_2713: Rotor;
    var other_2447: Flector;

    self_2713 = self_2712;
    other_2447 = other_2446;
    let _e4: Rotor = self_2713;
    let _e8: Flector = other_2447;
    let _e18: Rotor = self_2713;
    let _e22: Flector = other_2447;
    let _e33: Rotor = self_2713;
    let _e37: Flector = other_2447;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_flector_join(self_2714: Rotor, other_2448: Flector) -> Plane {
    var self_2715: Rotor;
    var other_2449: Flector;

    self_2715 = self_2714;
    other_2449 = other_2448;
    let _e4: Rotor = self_2715;
    let _e8: Flector = other_2449;
    let _e18: Rotor = self_2715;
    let _e22: Flector = other_2449;
    let _e33: Rotor = self_2715;
    let _e37: Flector = other_2449;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_flector_inner_product(self_2716: Rotor, other_2450: Flector) -> Flector {
    var self_2717: Rotor;
    var other_2451: Flector;

    self_2717 = self_2716;
    other_2451 = other_2450;
    let _e4: Rotor = self_2717;
    let _e8: Flector = other_2451;
    let _e19: Rotor = self_2717;
    let _e23: Flector = other_2451;
    let _e35: Rotor = self_2717;
    let _e39: Flector = other_2451;
    let _e51: Rotor = self_2717;
    let _e55: Flector = other_2451;
    let _e67: Rotor = self_2717;
    let _e70: Flector = other_2451;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e67.g0_.wwwx * _e70.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_flector_inner_anti_product(self_2718: Rotor, other_2452: Flector) -> Flector {
    var self_2719: Rotor;
    var other_2453: Flector;

    self_2719 = self_2718;
    other_2453 = other_2452;
    let _e4: Rotor = self_2719;
    let _e8: Flector = other_2453;
    let _e11: Rotor = self_2719;
    let _e15: Flector = other_2453;
    let _e18: Flector = other_2453;
    let _e21: Flector = other_2453;
    let _e24: Flector = other_2453;
    let _e35: Rotor = self_2719;
    let _e39: Flector = other_2453;
    let _e42: Flector = other_2453;
    let _e45: Flector = other_2453;
    let _e48: Flector = other_2453;
    let _e60: Rotor = self_2719;
    let _e64: Flector = other_2453;
    let _e67: Flector = other_2453;
    let _e70: Flector = other_2453;
    let _e73: Flector = other_2453;
    let _e85: Rotor = self_2719;
    let _e89: Flector = other_2453;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), (((((vec4(_e11.g0_.x) * vec4<f32>(_e15.g0_.w, _e18.g1_.z, _e21.g1_.y, _e24.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e35.g0_.y) * vec4<f32>(_e39.g1_.z, _e42.g0_.w, _e45.g1_.x, _e48.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e60.g0_.z) * vec4<f32>(_e64.g1_.y, _e67.g1_.x, _e70.g0_.w, _e73.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e85.g0_.w) * _e89.g1_)));
}

fn rotor_flector_right_contraction(self_2720: Rotor, other_2454: Flector) -> Flector {
    var self_2721: Rotor;
    var other_2455: Flector;

    self_2721 = self_2720;
    other_2455 = other_2454;
    let _e4: Rotor = self_2721;
    let _e8: Flector = other_2455;
    let _e19: Rotor = self_2721;
    let _e23: Flector = other_2455;
    let _e35: Rotor = self_2721;
    let _e39: Flector = other_2455;
    let _e51: Rotor = self_2721;
    let _e55: Flector = other_2455;
    let _e67: Rotor = self_2721;
    let _e70: Flector = other_2455;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g0_.w) * vec4(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((_e67.g0_.wwwx * _e70.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_flector_left_anti_contraction(self_2722: Rotor, other_2456: Flector) -> Flector {
    var self_2723: Rotor;
    var other_2457: Flector;

    self_2723 = self_2722;
    other_2457 = other_2456;
    let _e4: Rotor = self_2723;
    let _e8: Flector = other_2457;
    let _e11: Rotor = self_2723;
    let _e15: Flector = other_2457;
    let _e25: Rotor = self_2723;
    let _e29: Flector = other_2457;
    let _e40: Rotor = self_2723;
    let _e44: Flector = other_2457;
    let _e48: Rotor = self_2723;
    let _e52: Flector = other_2457;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), (((((vec4(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e25.g0_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e40.g0_.w) * _e44.g1_)) + ((vec4(_e48.g0_.x) * _e52.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_flector_right_anti_contraction(self_2724: Rotor, other_2458: Flector) -> Plane {
    var self_2725: Rotor;
    var other_2459: Flector;

    self_2725 = self_2724;
    other_2459 = other_2458;
    let _e4: Rotor = self_2725;
    let _e8: Flector = other_2459;
    let _e18: Rotor = self_2725;
    let _e22: Flector = other_2459;
    let _e33: Rotor = self_2725;
    let _e37: Flector = other_2459;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_add(self_2726: Rotor, other_2460: MultiVector) -> MultiVector {
    var self_2727: Rotor;
    var other_2461: MultiVector;

    self_2727 = self_2726;
    other_2461 = other_2460;
    let _e4: Rotor = self_2727;
    let _e7: Rotor = self_2727;
    let _e15: MultiVector = other_2461;
    let _e18: MultiVector = other_2461;
    let _e20: Rotor = self_2727;
    let _e23: Rotor = self_2727;
    let _e26: Rotor = self_2727;
    let _e30: MultiVector = other_2461;
    let _e33: MultiVector = other_2461;
    let _e35: MultiVector = other_2461;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) + _e30.g2_), _e33.g3_, _e35.g4_);
}

fn rotor_multi_vector_sub(self_2728: Rotor, other_2462: MultiVector) -> MultiVector {
    var self_2729: Rotor;
    var other_2463: MultiVector;

    self_2729 = self_2728;
    other_2463 = other_2462;
    let _e4: Rotor = self_2729;
    let _e7: Rotor = self_2729;
    let _e15: MultiVector = other_2463;
    let _e20: MultiVector = other_2463;
    let _e23: Rotor = self_2729;
    let _e26: Rotor = self_2729;
    let _e29: Rotor = self_2729;
    let _e33: MultiVector = other_2463;
    let _e38: MultiVector = other_2463;
    let _e43: MultiVector = other_2463;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4(0.0) - _e20.g1_), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) - _e33.g2_), (vec3(0.0) - _e38.g3_), (vec4(0.0) - _e43.g4_));
}

fn rotor_multi_vector_geometric_product(self_2730: Rotor, other_2464: MultiVector) -> MultiVector {
    var self_2731: Rotor;
    var other_2465: MultiVector;

    self_2731 = self_2730;
    other_2465 = other_2464;
    let _e4: Rotor = self_2731;
    let _e8: MultiVector = other_2465;
    let _e17: Rotor = self_2731;
    let _e21: MultiVector = other_2465;
    let _e31: Rotor = self_2731;
    let _e35: MultiVector = other_2465;
    let _e45: Rotor = self_2731;
    let _e49: MultiVector = other_2465;
    let _e59: Rotor = self_2731;
    let _e63: MultiVector = other_2465;
    let _e74: Rotor = self_2731;
    let _e78: MultiVector = other_2465;
    let _e90: Rotor = self_2731;
    let _e94: MultiVector = other_2465;
    let _e106: Rotor = self_2731;
    let _e110: MultiVector = other_2465;
    let _e122: Rotor = self_2731;
    let _e126: MultiVector = other_2465;
    let _e129: MultiVector = other_2465;
    let _e132: MultiVector = other_2465;
    let _e142: Rotor = self_2731;
    let _e146: MultiVector = other_2465;
    let _e149: MultiVector = other_2465;
    let _e152: MultiVector = other_2465;
    let _e163: Rotor = self_2731;
    let _e167: MultiVector = other_2465;
    let _e170: MultiVector = other_2465;
    let _e173: MultiVector = other_2465;
    let _e184: Rotor = self_2731;
    let _e188: MultiVector = other_2465;
    let _e194: Rotor = self_2731;
    let _e198: MultiVector = other_2465;
    let _e201: MultiVector = other_2465;
    let _e204: MultiVector = other_2465;
    let _e207: MultiVector = other_2465;
    let _e218: Rotor = self_2731;
    let _e222: MultiVector = other_2465;
    let _e225: MultiVector = other_2465;
    let _e228: MultiVector = other_2465;
    let _e231: MultiVector = other_2465;
    let _e243: Rotor = self_2731;
    let _e247: MultiVector = other_2465;
    let _e258: Rotor = self_2731;
    let _e262: MultiVector = other_2465;
    let _e265: MultiVector = other_2465;
    let _e268: MultiVector = other_2465;
    let _e271: MultiVector = other_2465;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(0.0, -1.0))), (((((vec4(_e59.g0_.y) * vec4(_e63.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e74.g0_.z) * vec4(_e78.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e90.g0_.w) * vec4(_e94.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e106.g0_.x) * vec4(_e110.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3(_e122.g0_.x) * vec3<f32>(_e126.g0_.x, _e129.g3_.z, _e132.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e142.g0_.y) * vec3<f32>(_e146.g3_.z, _e149.g0_.x, _e152.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e163.g0_.z) * vec3<f32>(_e167.g3_.y, _e170.g3_.x, _e173.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))) + (vec3(_e184.g0_.w) * _e188.g3_)), vec3(0.0), (((((vec4(_e194.g0_.y) * vec4<f32>(_e198.g1_.z, _e201.g4_.w, _e204.g1_.x, _e207.g1_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0)) + ((vec4(_e218.g0_.z) * vec4<f32>(_e222.g1_.y, _e225.g1_.x, _e228.g4_.w, _e231.g1_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e243.g0_.w) * _e247.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e258.g0_.x) * vec4<f32>(_e262.g4_.w, _e265.g1_.z, _e268.g1_.y, _e271.g4_.x)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_geometric_anti_product(self_2732: Rotor, other_2466: MultiVector) -> MultiVector {
    var self_2733: Rotor;
    var other_2467: MultiVector;

    self_2733 = self_2732;
    other_2467 = other_2466;
    let _e6: Rotor = self_2733;
    let _e10: MultiVector = other_2467;
    let _e13: MultiVector = other_2467;
    let _e19: Rotor = self_2733;
    let _e23: MultiVector = other_2467;
    let _e26: MultiVector = other_2467;
    let _e32: Rotor = self_2733;
    let _e36: MultiVector = other_2467;
    let _e39: MultiVector = other_2467;
    let _e45: Rotor = self_2733;
    let _e49: MultiVector = other_2467;
    let _e53: Rotor = self_2733;
    let _e57: MultiVector = other_2467;
    let _e60: MultiVector = other_2467;
    let _e63: MultiVector = other_2467;
    let _e66: MultiVector = other_2467;
    let _e77: Rotor = self_2733;
    let _e81: MultiVector = other_2467;
    let _e84: MultiVector = other_2467;
    let _e87: MultiVector = other_2467;
    let _e90: MultiVector = other_2467;
    let _e102: Rotor = self_2733;
    let _e106: MultiVector = other_2467;
    let _e109: MultiVector = other_2467;
    let _e112: MultiVector = other_2467;
    let _e115: MultiVector = other_2467;
    let _e127: Rotor = self_2733;
    let _e131: MultiVector = other_2467;
    let _e135: Rotor = self_2733;
    let _e139: MultiVector = other_2467;
    let _e142: MultiVector = other_2467;
    let _e145: MultiVector = other_2467;
    let _e155: Rotor = self_2733;
    let _e159: MultiVector = other_2467;
    let _e162: MultiVector = other_2467;
    let _e165: MultiVector = other_2467;
    let _e176: Rotor = self_2733;
    let _e180: MultiVector = other_2467;
    let _e183: MultiVector = other_2467;
    let _e186: MultiVector = other_2467;
    let _e197: Rotor = self_2733;
    let _e201: MultiVector = other_2467;
    let _e205: Rotor = self_2733;
    let _e209: MultiVector = other_2467;
    let _e212: MultiVector = other_2467;
    let _e215: MultiVector = other_2467;
    let _e225: Rotor = self_2733;
    let _e229: MultiVector = other_2467;
    let _e232: MultiVector = other_2467;
    let _e235: MultiVector = other_2467;
    let _e246: Rotor = self_2733;
    let _e250: MultiVector = other_2467;
    let _e253: MultiVector = other_2467;
    let _e256: MultiVector = other_2467;
    let _e267: Rotor = self_2733;
    let _e271: MultiVector = other_2467;
    let _e275: Rotor = self_2733;
    let _e279: MultiVector = other_2467;
    let _e282: MultiVector = other_2467;
    let _e285: MultiVector = other_2467;
    let _e288: MultiVector = other_2467;
    let _e299: Rotor = self_2733;
    let _e303: MultiVector = other_2467;
    let _e306: MultiVector = other_2467;
    let _e309: MultiVector = other_2467;
    let _e312: MultiVector = other_2467;
    let _e324: Rotor = self_2733;
    let _e328: MultiVector = other_2467;
    let _e331: MultiVector = other_2467;
    let _e334: MultiVector = other_2467;
    let _e337: MultiVector = other_2467;
    let _e349: Rotor = self_2733;
    let _e353: MultiVector = other_2467;
    return MultiVector(((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + (vec2(_e45.g0_.w) * _e49.g0_)), (((((vec4(_e53.g0_.x) * vec4<f32>(_e57.g4_.w, _e60.g1_.z, _e63.g1_.y, _e66.g4_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e77.g0_.y) * vec4<f32>(_e81.g1_.z, _e84.g4_.w, _e87.g1_.x, _e90.g4_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e102.g0_.z) * vec4<f32>(_e106.g1_.y, _e109.g1_.x, _e112.g4_.w, _e115.g4_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e127.g0_.w) * _e131.g1_)), (((((vec3(_e135.g0_.x) * vec3<f32>(_e139.g0_.y, _e142.g2_.z, _e145.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e155.g0_.y) * vec3<f32>(_e159.g2_.z, _e162.g0_.y, _e165.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e176.g0_.z) * vec3<f32>(_e180.g2_.y, _e183.g2_.x, _e186.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e197.g0_.w) * _e201.g2_)), (((((vec3(_e205.g0_.x) * vec3<f32>(_e209.g0_.x, _e212.g3_.z, _e215.g3_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e225.g0_.y) * vec3<f32>(_e229.g3_.z, _e232.g0_.x, _e235.g3_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e246.g0_.z) * vec3<f32>(_e250.g3_.y, _e253.g3_.x, _e256.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e267.g0_.w) * _e271.g3_)), (((((vec4(_e275.g0_.x) * vec4<f32>(_e279.g1_.w, _e282.g4_.z, _e285.g4_.y, _e288.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e299.g0_.y) * vec4<f32>(_e303.g4_.z, _e306.g1_.w, _e309.g4_.x, _e312.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e324.g0_.z) * vec4<f32>(_e328.g4_.y, _e331.g4_.x, _e334.g1_.w, _e337.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e349.g0_.w) * _e353.g4_)));
}

fn rotor_multi_vector_regressive_product(self_2734: Rotor, other_2468: MultiVector) -> MultiVector {
    var self_2735: Rotor;
    var other_2469: MultiVector;

    self_2735 = self_2734;
    other_2469 = other_2468;
    let _e4: Rotor = self_2735;
    let _e8: MultiVector = other_2469;
    let _e17: Rotor = self_2735;
    let _e21: MultiVector = other_2469;
    let _e31: Rotor = self_2735;
    let _e35: MultiVector = other_2469;
    let _e39: Rotor = self_2735;
    let _e43: MultiVector = other_2469;
    let _e53: Rotor = self_2735;
    let _e57: MultiVector = other_2469;
    let _e67: Rotor = self_2735;
    let _e71: MultiVector = other_2469;
    let _e82: Rotor = self_2735;
    let _e86: MultiVector = other_2469;
    let _e90: Rotor = self_2735;
    let _e94: MultiVector = other_2469;
    let _e105: Rotor = self_2735;
    let _e109: MultiVector = other_2469;
    let _e112: Rotor = self_2735;
    let _e115: Rotor = self_2735;
    let _e118: Rotor = self_2735;
    let _e122: MultiVector = other_2469;
    let _e128: Rotor = self_2735;
    let _e132: MultiVector = other_2469;
    let _e135: Rotor = self_2735;
    let _e139: MultiVector = other_2469;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g3_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e105.g0_.w) * _e109.g2_) + (vec3<f32>(_e112.g0_.x, _e115.g0_.y, _e118.g0_.z) * vec3(_e122.g0_.y))), (vec3(_e128.g0_.w) * _e132.g3_), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn rotor_multi_vector_anti_wedge(self_2736: Rotor, other_2470: MultiVector) -> MultiVector {
    var self_2737: Rotor;
    var other_2471: MultiVector;

    self_2737 = self_2736;
    other_2471 = other_2470;
    let _e4: Rotor = self_2737;
    let _e8: MultiVector = other_2471;
    let _e17: Rotor = self_2737;
    let _e21: MultiVector = other_2471;
    let _e31: Rotor = self_2737;
    let _e35: MultiVector = other_2471;
    let _e39: Rotor = self_2737;
    let _e43: MultiVector = other_2471;
    let _e53: Rotor = self_2737;
    let _e57: MultiVector = other_2471;
    let _e67: Rotor = self_2737;
    let _e71: MultiVector = other_2471;
    let _e82: Rotor = self_2737;
    let _e86: MultiVector = other_2471;
    let _e90: Rotor = self_2737;
    let _e94: MultiVector = other_2471;
    let _e105: Rotor = self_2737;
    let _e109: MultiVector = other_2471;
    let _e112: Rotor = self_2737;
    let _e115: Rotor = self_2737;
    let _e118: Rotor = self_2737;
    let _e122: MultiVector = other_2471;
    let _e128: Rotor = self_2737;
    let _e132: MultiVector = other_2471;
    let _e135: Rotor = self_2737;
    let _e139: MultiVector = other_2471;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g3_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e105.g0_.w) * _e109.g2_) + (vec3<f32>(_e112.g0_.x, _e115.g0_.y, _e118.g0_.z) * vec3(_e122.g0_.y))), (vec3(_e128.g0_.w) * _e132.g3_), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn rotor_multi_vector_meet(self_2738: Rotor, other_2472: MultiVector) -> MultiVector {
    var self_2739: Rotor;
    var other_2473: MultiVector;

    self_2739 = self_2738;
    other_2473 = other_2472;
    let _e4: Rotor = self_2739;
    let _e8: MultiVector = other_2473;
    let _e17: Rotor = self_2739;
    let _e21: MultiVector = other_2473;
    let _e31: Rotor = self_2739;
    let _e35: MultiVector = other_2473;
    let _e39: Rotor = self_2739;
    let _e43: MultiVector = other_2473;
    let _e53: Rotor = self_2739;
    let _e57: MultiVector = other_2473;
    let _e67: Rotor = self_2739;
    let _e71: MultiVector = other_2473;
    let _e82: Rotor = self_2739;
    let _e86: MultiVector = other_2473;
    let _e90: Rotor = self_2739;
    let _e94: MultiVector = other_2473;
    let _e105: Rotor = self_2739;
    let _e109: MultiVector = other_2473;
    let _e112: Rotor = self_2739;
    let _e115: Rotor = self_2739;
    let _e118: Rotor = self_2739;
    let _e122: MultiVector = other_2473;
    let _e128: Rotor = self_2739;
    let _e132: MultiVector = other_2473;
    let _e135: Rotor = self_2739;
    let _e139: MultiVector = other_2473;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g3_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((vec3(_e105.g0_.w) * _e109.g2_) + (vec3<f32>(_e112.g0_.x, _e115.g0_.y, _e118.g0_.z) * vec3(_e122.g0_.y))), (vec3(_e128.g0_.w) * _e132.g3_), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn rotor_multi_vector_outer_product(self_2740: Rotor, other_2474: MultiVector) -> MultiVector {
    var self_2741: Rotor;
    var other_2475: MultiVector;

    self_2741 = self_2740;
    other_2475 = other_2474;
    let _e4: Rotor = self_2741;
    let _e8: MultiVector = other_2475;
    let _e17: Rotor = self_2741;
    let _e21: MultiVector = other_2475;
    let _e31: Rotor = self_2741;
    let _e35: MultiVector = other_2475;
    let _e45: Rotor = self_2741;
    let _e49: MultiVector = other_2475;
    let _e61: Rotor = self_2741;
    let _e64: Rotor = self_2741;
    let _e67: Rotor = self_2741;
    let _e71: MultiVector = other_2475;
    let _e78: Rotor = self_2741;
    let _e82: MultiVector = other_2475;
    let _e92: Rotor = self_2741;
    let _e96: MultiVector = other_2475;
    let _e107: Rotor = self_2741;
    let _e111: MultiVector = other_2475;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.x)), vec3(0.0), ((((vec4(_e78.g0_.y) * _e82.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_wedge(self_2742: Rotor, other_2476: MultiVector) -> MultiVector {
    var self_2743: Rotor;
    var other_2477: MultiVector;

    self_2743 = self_2742;
    other_2477 = other_2476;
    let _e4: Rotor = self_2743;
    let _e8: MultiVector = other_2477;
    let _e17: Rotor = self_2743;
    let _e21: MultiVector = other_2477;
    let _e31: Rotor = self_2743;
    let _e35: MultiVector = other_2477;
    let _e45: Rotor = self_2743;
    let _e49: MultiVector = other_2477;
    let _e61: Rotor = self_2743;
    let _e64: Rotor = self_2743;
    let _e67: Rotor = self_2743;
    let _e71: MultiVector = other_2477;
    let _e78: Rotor = self_2743;
    let _e82: MultiVector = other_2477;
    let _e92: Rotor = self_2743;
    let _e96: MultiVector = other_2477;
    let _e107: Rotor = self_2743;
    let _e111: MultiVector = other_2477;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.x)), vec3(0.0), ((((vec4(_e78.g0_.y) * _e82.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_join(self_2744: Rotor, other_2478: MultiVector) -> MultiVector {
    var self_2745: Rotor;
    var other_2479: MultiVector;

    self_2745 = self_2744;
    other_2479 = other_2478;
    let _e4: Rotor = self_2745;
    let _e8: MultiVector = other_2479;
    let _e17: Rotor = self_2745;
    let _e21: MultiVector = other_2479;
    let _e31: Rotor = self_2745;
    let _e35: MultiVector = other_2479;
    let _e45: Rotor = self_2745;
    let _e49: MultiVector = other_2479;
    let _e61: Rotor = self_2745;
    let _e64: Rotor = self_2745;
    let _e67: Rotor = self_2745;
    let _e71: MultiVector = other_2479;
    let _e78: Rotor = self_2745;
    let _e82: MultiVector = other_2479;
    let _e92: Rotor = self_2745;
    let _e96: MultiVector = other_2479;
    let _e107: Rotor = self_2745;
    let _e111: MultiVector = other_2479;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.x)), vec3(0.0), ((((vec4(_e78.g0_.y) * _e82.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_inner_product(self_2746: Rotor, other_2480: MultiVector) -> MultiVector {
    var self_2747: Rotor;
    var other_2481: MultiVector;

    self_2747 = self_2746;
    other_2481 = other_2480;
    let _e4: Rotor = self_2747;
    let _e7: Rotor = self_2747;
    let _e11: MultiVector = other_2481;
    let _e20: Rotor = self_2747;
    let _e24: MultiVector = other_2481;
    let _e35: Rotor = self_2747;
    let _e39: MultiVector = other_2481;
    let _e51: Rotor = self_2747;
    let _e55: MultiVector = other_2481;
    let _e67: Rotor = self_2747;
    let _e71: MultiVector = other_2481;
    let _e83: Rotor = self_2747;
    let _e87: MultiVector = other_2481;
    let _e90: Rotor = self_2747;
    let _e93: Rotor = self_2747;
    let _e96: Rotor = self_2747;
    let _e100: MultiVector = other_2481;
    let _e108: Rotor = self_2747;
    let _e111: MultiVector = other_2481;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2(_e11.g0_.x)) * vec2<f32>(0.0, 1.0)), (((((vec4(_e20.g0_.y) * vec4(_e24.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e35.g0_.z) * vec4(_e39.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e51.g0_.w) * vec4(_e55.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e67.g0_.x) * vec4(_e71.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((vec3(_e83.g0_.w) * _e87.g3_) + (vec3<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z) * vec3(_e100.g0_.x))), vec3(0.0), ((_e108.g0_.wwwx * _e111.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_multi_vector_inner_anti_product(self_2748: Rotor, other_2482: MultiVector) -> MultiVector {
    var self_2749: Rotor;
    var other_2483: MultiVector;

    self_2749 = self_2748;
    other_2483 = other_2482;
    let _e4: Rotor = self_2749;
    let _e8: MultiVector = other_2483;
    let _e17: Rotor = self_2749;
    let _e21: MultiVector = other_2483;
    let _e31: Rotor = self_2749;
    let _e35: MultiVector = other_2483;
    let _e39: Rotor = self_2749;
    let _e43: MultiVector = other_2483;
    let _e53: Rotor = self_2749;
    let _e57: MultiVector = other_2483;
    let _e60: Rotor = self_2749;
    let _e64: MultiVector = other_2483;
    let _e67: Rotor = self_2749;
    let _e70: Rotor = self_2749;
    let _e73: Rotor = self_2749;
    let _e77: MultiVector = other_2483;
    let _e83: Rotor = self_2749;
    let _e87: MultiVector = other_2483;
    let _e90: Rotor = self_2749;
    let _e93: Rotor = self_2749;
    let _e96: Rotor = self_2749;
    let _e100: MultiVector = other_2483;
    let _e106: Rotor = self_2749;
    let _e110: MultiVector = other_2483;
    let _e113: MultiVector = other_2483;
    let _e116: MultiVector = other_2483;
    let _e119: MultiVector = other_2483;
    let _e130: Rotor = self_2749;
    let _e134: MultiVector = other_2483;
    let _e137: MultiVector = other_2483;
    let _e140: MultiVector = other_2483;
    let _e143: MultiVector = other_2483;
    let _e155: Rotor = self_2749;
    let _e159: MultiVector = other_2483;
    let _e162: MultiVector = other_2483;
    let _e165: MultiVector = other_2483;
    let _e168: MultiVector = other_2483;
    let _e180: Rotor = self_2749;
    let _e184: MultiVector = other_2483;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e53.g0_.w) * _e57.g1_), ((vec3(_e60.g0_.w) * _e64.g2_) + (vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z) * vec3(_e77.g0_.y))), ((vec3(_e83.g0_.w) * _e87.g3_) + (vec3<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z) * vec3(_e100.g0_.x))), (((((vec4(_e106.g0_.x) * vec4<f32>(_e110.g1_.w, _e113.g4_.z, _e116.g4_.y, _e119.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0)) + ((vec4(_e130.g0_.y) * vec4<f32>(_e134.g4_.z, _e137.g1_.w, _e140.g4_.x, _e143.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e155.g0_.z) * vec4<f32>(_e159.g4_.y, _e162.g4_.x, _e165.g1_.w, _e168.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + (vec4(_e180.g0_.w) * _e184.g4_)));
}

fn rotor_multi_vector_right_contraction(self_2750: Rotor, other_2484: MultiVector) -> MultiVector {
    var self_2751: Rotor;
    var other_2485: MultiVector;

    self_2751 = self_2750;
    other_2485 = other_2484;
    let _e4: Rotor = self_2751;
    let _e7: Rotor = self_2751;
    let _e11: MultiVector = other_2485;
    let _e20: Rotor = self_2751;
    let _e24: MultiVector = other_2485;
    let _e35: Rotor = self_2751;
    let _e39: MultiVector = other_2485;
    let _e51: Rotor = self_2751;
    let _e55: MultiVector = other_2485;
    let _e67: Rotor = self_2751;
    let _e71: MultiVector = other_2485;
    let _e83: Rotor = self_2751;
    let _e87: MultiVector = other_2485;
    let _e90: Rotor = self_2751;
    let _e93: Rotor = self_2751;
    let _e96: Rotor = self_2751;
    let _e100: MultiVector = other_2485;
    let _e108: Rotor = self_2751;
    let _e111: MultiVector = other_2485;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2(_e11.g0_.x)) * vec2<f32>(0.0, 1.0)), (((((vec4(_e20.g0_.y) * vec4(_e24.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e35.g0_.z) * vec4(_e39.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e51.g0_.w) * vec4(_e55.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e67.g0_.x) * vec4(_e71.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((vec3(_e83.g0_.w) * _e87.g3_) + (vec3<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z) * vec3(_e100.g0_.x))), vec3(0.0), ((_e108.g0_.wwwx * _e111.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn rotor_multi_vector_left_anti_contraction(self_2752: Rotor, other_2486: MultiVector) -> MultiVector {
    var self_2753: Rotor;
    var other_2487: MultiVector;

    self_2753 = self_2752;
    other_2487 = other_2486;
    let _e4: Rotor = self_2753;
    let _e8: MultiVector = other_2487;
    let _e17: Rotor = self_2753;
    let _e21: MultiVector = other_2487;
    let _e31: Rotor = self_2753;
    let _e35: MultiVector = other_2487;
    let _e39: Rotor = self_2753;
    let _e43: MultiVector = other_2487;
    let _e53: Rotor = self_2753;
    let _e57: MultiVector = other_2487;
    let _e60: Rotor = self_2753;
    let _e64: MultiVector = other_2487;
    let _e67: Rotor = self_2753;
    let _e71: MultiVector = other_2487;
    let _e74: Rotor = self_2753;
    let _e77: Rotor = self_2753;
    let _e80: Rotor = self_2753;
    let _e84: MultiVector = other_2487;
    let _e90: Rotor = self_2753;
    let _e94: MultiVector = other_2487;
    let _e104: Rotor = self_2753;
    let _e108: MultiVector = other_2487;
    let _e119: Rotor = self_2753;
    let _e123: MultiVector = other_2487;
    let _e127: Rotor = self_2753;
    let _e131: MultiVector = other_2487;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e53.g0_.w) * _e57.g1_), (vec3(_e60.g0_.w) * _e64.g2_), ((vec3(_e67.g0_.w) * _e71.g3_) + (vec3<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z) * vec3(_e84.g0_.x))), (((((vec4(_e90.g0_.y) * _e94.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e104.g0_.z) * _e108.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + (vec4(_e119.g0_.w) * _e123.g4_)) + ((vec4(_e127.g0_.x) * _e131.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn rotor_multi_vector_right_anti_contraction(self_2754: Rotor, other_2488: MultiVector) -> MultiVector {
    var self_2755: Rotor;
    var other_2489: MultiVector;

    self_2755 = self_2754;
    other_2489 = other_2488;
    let _e4: Rotor = self_2755;
    let _e8: MultiVector = other_2489;
    let _e17: Rotor = self_2755;
    let _e21: MultiVector = other_2489;
    let _e31: Rotor = self_2755;
    let _e35: MultiVector = other_2489;
    let _e45: Rotor = self_2755;
    let _e49: MultiVector = other_2489;
    let _e61: Rotor = self_2755;
    let _e64: Rotor = self_2755;
    let _e67: Rotor = self_2755;
    let _e71: MultiVector = other_2489;
    let _e78: Rotor = self_2755;
    let _e82: MultiVector = other_2489;
    let _e92: Rotor = self_2755;
    let _e96: MultiVector = other_2489;
    let _e107: Rotor = self_2755;
    let _e111: MultiVector = other_2489;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z) * vec3(_e71.g0_.y)), vec3(0.0), ((((vec4(_e78.g0_.y) * _e82.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e92.g0_.z) * _e96.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e107.g0_.x) * _e111.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn rotor_multi_vector_anti_scalar_product(self_2756: Rotor, other_2490: MultiVector) -> AntiScalar {
    var self_2757: Rotor;
    var other_2491: MultiVector;

    self_2757 = self_2756;
    other_2491 = other_2490;
    let _e5: Rotor = self_2757;
    let _e8: MultiVector = other_2491;
    let _e13: Rotor = self_2757;
    let _e16: MultiVector = other_2491;
    let _e21: Rotor = self_2757;
    let _e24: MultiVector = other_2491;
    let _e29: Rotor = self_2757;
    let _e32: MultiVector = other_2491;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn rotor_multi_vector_anti_dot(self_2758: Rotor, other_2492: MultiVector) -> AntiScalar {
    var self_2759: Rotor;
    var other_2493: MultiVector;

    self_2759 = self_2758;
    other_2493 = other_2492;
    let _e5: Rotor = self_2759;
    let _e8: MultiVector = other_2493;
    let _e13: Rotor = self_2759;
    let _e16: MultiVector = other_2493;
    let _e21: Rotor = self_2759;
    let _e24: MultiVector = other_2493;
    let _e29: Rotor = self_2759;
    let _e32: MultiVector = other_2493;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn rotor_scale(self_2760: Rotor, other_2494: f32) -> Rotor {
    var self_2761: Rotor;
    var other_2495: f32;

    self_2761 = self_2760;
    other_2495 = other_2494;
    let _e4: Rotor = self_2761;
    let _e5: f32 = other_2495;
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn rotor_attitude(self_2762: Rotor) -> Flector {
    var self_2763: Rotor;

    self_2763 = self_2762;
    let _e2: Rotor = self_2763;
    let _e9: Flector = rotor_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn translator_zero() -> Translator {
    return Translator(vec4(0.0));
}

fn translator_one() -> Translator {
    return Translator(vec4(0.0));
}

fn translator_neg(self_2764: Translator) -> Translator {
    var self_2765: Translator;

    self_2765 = self_2764;
    let _e2: Translator = self_2765;
    return Translator((_e2.g0_ * vec4(-1.0)));
}

fn translator_automorphism(self_2766: Translator) -> Translator {
    var self_2767: Translator;

    self_2767 = self_2766;
    let _e2: Translator = self_2767;
    return Translator(_e2.g0_);
}

fn translator_reversal(self_2768: Translator) -> Translator {
    var self_2769: Translator;

    self_2769 = self_2768;
    let _e2: Translator = self_2769;
    return Translator((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn translator_conjugation(self_2770: Translator) -> Translator {
    var self_2771: Translator;

    self_2771 = self_2770;
    let _e2: Translator = self_2771;
    return Translator((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn translator_anti_reversal(self_2772: Translator) -> Translator {
    var self_2773: Translator;

    self_2773 = self_2772;
    let _e2: Translator = self_2773;
    return Translator((_e2.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0)));
}

fn translator_double_complement(self_2774: Translator) -> Translator {
    var self_2775: Translator;

    self_2775 = self_2774;
    let _e2: Translator = self_2775;
    return Translator(_e2.g0_);
}

fn translator_scalar_geometric_product(self_2776: Translator, other_2496: Scalar) -> Translator {
    var self_2777: Translator;
    var other_2497: Scalar;

    self_2777 = self_2776;
    other_2497 = other_2496;
    let _e4: Translator = self_2777;
    let _e6: Scalar = other_2497;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_geometric_anti_product(self_2778: Translator, other_2498: Scalar) -> Scalar {
    var self_2779: Translator;
    var other_2499: Scalar;

    self_2779 = self_2778;
    other_2499 = other_2498;
    let _e4: Translator = self_2779;
    let _e7: Scalar = other_2499;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_regressive_product(self_2780: Translator, other_2500: Scalar) -> Scalar {
    var self_2781: Translator;
    var other_2501: Scalar;

    self_2781 = self_2780;
    other_2501 = other_2500;
    let _e4: Translator = self_2781;
    let _e7: Scalar = other_2501;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_anti_wedge(self_2782: Translator, other_2502: Scalar) -> Scalar {
    var self_2783: Translator;
    var other_2503: Scalar;

    self_2783 = self_2782;
    other_2503 = other_2502;
    let _e4: Translator = self_2783;
    let _e7: Scalar = other_2503;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_meet(self_2784: Translator, other_2504: Scalar) -> Scalar {
    var self_2785: Translator;
    var other_2505: Scalar;

    self_2785 = self_2784;
    other_2505 = other_2504;
    let _e4: Translator = self_2785;
    let _e7: Scalar = other_2505;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_outer_product(self_2786: Translator, other_2506: Scalar) -> Translator {
    var self_2787: Translator;
    var other_2507: Scalar;

    self_2787 = self_2786;
    other_2507 = other_2506;
    let _e4: Translator = self_2787;
    let _e6: Scalar = other_2507;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_wedge(self_2788: Translator, other_2508: Scalar) -> Translator {
    var self_2789: Translator;
    var other_2509: Scalar;

    self_2789 = self_2788;
    other_2509 = other_2508;
    let _e4: Translator = self_2789;
    let _e6: Scalar = other_2509;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_join(self_2790: Translator, other_2510: Scalar) -> Translator {
    var self_2791: Translator;
    var other_2511: Scalar;

    self_2791 = self_2790;
    other_2511 = other_2510;
    let _e4: Translator = self_2791;
    let _e6: Scalar = other_2511;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_inner_product(self_2792: Translator, other_2512: Scalar) -> Translator {
    var self_2793: Translator;
    var other_2513: Scalar;

    self_2793 = self_2792;
    other_2513 = other_2512;
    let _e4: Translator = self_2793;
    let _e6: Scalar = other_2513;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_inner_anti_product(self_2794: Translator, other_2514: Scalar) -> Scalar {
    var self_2795: Translator;
    var other_2515: Scalar;

    self_2795 = self_2794;
    other_2515 = other_2514;
    let _e4: Translator = self_2795;
    let _e7: Scalar = other_2515;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_right_contraction(self_2796: Translator, other_2516: Scalar) -> Translator {
    var self_2797: Translator;
    var other_2517: Scalar;

    self_2797 = self_2796;
    other_2517 = other_2516;
    let _e4: Translator = self_2797;
    let _e6: Scalar = other_2517;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_scalar_left_anti_contraction(self_2798: Translator, other_2518: Scalar) -> Scalar {
    var self_2799: Translator;
    var other_2519: Scalar;

    self_2799 = self_2798;
    other_2519 = other_2518;
    let _e4: Translator = self_2799;
    let _e7: Scalar = other_2519;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_into(self_2800: Translator) -> AntiScalar {
    var self_2801: Translator;

    self_2801 = self_2800;
    let _e2: Translator = self_2801;
    return AntiScalar(_e2.g0_.w);
}

fn translator_anti_scalar_add(self_2802: Translator, other_2520: AntiScalar) -> Translator {
    var self_2803: Translator;
    var other_2521: AntiScalar;

    self_2803 = self_2802;
    other_2521 = other_2520;
    let _e4: Translator = self_2803;
    let _e6: AntiScalar = other_2521;
    return Translator((_e4.g0_ + (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_sub(self_2804: Translator, other_2522: AntiScalar) -> Translator {
    var self_2805: Translator;
    var other_2523: AntiScalar;

    self_2805 = self_2804;
    other_2523 = other_2522;
    let _e4: Translator = self_2805;
    let _e6: AntiScalar = other_2523;
    return Translator((_e4.g0_ - (vec4(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_geometric_product(self_2806: Translator, other_2524: AntiScalar) -> Rotor {
    var self_2807: Translator;
    var other_2525: AntiScalar;

    self_2807 = self_2806;
    other_2525 = other_2524;
    let _e4: Translator = self_2807;
    let _e7: AntiScalar = other_2525;
    return Rotor(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_anti_scalar_geometric_anti_product(self_2808: Translator, other_2526: AntiScalar) -> Translator {
    var self_2809: Translator;
    var other_2527: AntiScalar;

    self_2809 = self_2808;
    other_2527 = other_2526;
    let _e4: Translator = self_2809;
    let _e6: AntiScalar = other_2527;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_regressive_product(self_2810: Translator, other_2528: AntiScalar) -> Translator {
    var self_2811: Translator;
    var other_2529: AntiScalar;

    self_2811 = self_2810;
    other_2529 = other_2528;
    let _e4: Translator = self_2811;
    let _e6: AntiScalar = other_2529;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_anti_wedge(self_2812: Translator, other_2530: AntiScalar) -> Translator {
    var self_2813: Translator;
    var other_2531: AntiScalar;

    self_2813 = self_2812;
    other_2531 = other_2530;
    let _e4: Translator = self_2813;
    let _e6: AntiScalar = other_2531;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_meet(self_2814: Translator, other_2532: AntiScalar) -> Translator {
    var self_2815: Translator;
    var other_2533: AntiScalar;

    self_2815 = self_2814;
    other_2533 = other_2532;
    let _e4: Translator = self_2815;
    let _e6: AntiScalar = other_2533;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_inner_product(self_2816: Translator, other_2534: AntiScalar) -> Rotor {
    var self_2817: Translator;
    var other_2535: AntiScalar;

    self_2817 = self_2816;
    other_2535 = other_2534;
    let _e4: Translator = self_2817;
    let _e7: AntiScalar = other_2535;
    return Rotor(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_anti_scalar_inner_anti_product(self_2818: Translator, other_2536: AntiScalar) -> Translator {
    var self_2819: Translator;
    var other_2537: AntiScalar;

    self_2819 = self_2818;
    other_2537 = other_2536;
    let _e4: Translator = self_2819;
    let _e6: AntiScalar = other_2537;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_left_contraction(self_2820: Translator, other_2538: AntiScalar) -> Rotor {
    var self_2821: Translator;
    var other_2539: AntiScalar;

    self_2821 = self_2820;
    other_2539 = other_2538;
    let _e4: Translator = self_2821;
    let _e7: AntiScalar = other_2539;
    return Rotor(((_e4.g0_.xyzx * vec4(_e7.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_anti_scalar_left_anti_contraction(self_2822: Translator, other_2540: AntiScalar) -> AntiScalar {
    var self_2823: Translator;
    var other_2541: AntiScalar;

    self_2823 = self_2822;
    other_2541 = other_2540;
    let _e4: Translator = self_2823;
    let _e7: AntiScalar = other_2541;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_right_anti_contraction(self_2824: Translator, other_2542: AntiScalar) -> Translator {
    var self_2825: Translator;
    var other_2543: AntiScalar;

    self_2825 = self_2824;
    other_2543 = other_2542;
    let _e4: Translator = self_2825;
    let _e6: AntiScalar = other_2543;
    return Translator((_e4.g0_ * vec4(_e6.g0_)));
}

fn translator_anti_scalar_anti_scalar_product(self_2826: Translator, other_2544: AntiScalar) -> AntiScalar {
    var self_2827: Translator;
    var other_2545: AntiScalar;

    self_2827 = self_2826;
    other_2545 = other_2544;
    let _e4: Translator = self_2827;
    let _e7: AntiScalar = other_2545;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_anti_dot(self_2828: Translator, other_2546: AntiScalar) -> AntiScalar {
    var self_2829: Translator;
    var other_2547: AntiScalar;

    self_2829 = self_2828;
    other_2547 = other_2546;
    let _e4: Translator = self_2829;
    let _e7: AntiScalar = other_2547;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_homogeneous_magnitude_geometric_product(self_2830: Translator, other_2548: HomogeneousMagnitude) -> Motor {
    var self_2831: Translator;
    var other_2549: HomogeneousMagnitude;

    self_2831 = self_2830;
    other_2549 = other_2548;
    let _e4: Translator = self_2831;
    let _e6: HomogeneousMagnitude = other_2549;
    let _e9: HomogeneousMagnitude = other_2549;
    let _e12: HomogeneousMagnitude = other_2549;
    let _e15: HomogeneousMagnitude = other_2549;
    let _e20: Translator = self_2831;
    let _e23: Translator = self_2831;
    let _e26: Translator = self_2831;
    let _e30: HomogeneousMagnitude = other_2549;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.y, _e9.g0_.y, _e12.g0_.y, _e15.g0_.x)), (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) * vec3(_e30.g0_.x)));
}

fn translator_homogeneous_magnitude_geometric_anti_product(self_2832: Translator, other_2550: HomogeneousMagnitude) -> MultiVector {
    var self_2833: Translator;
    var other_2551: HomogeneousMagnitude;

    self_2833 = self_2832;
    other_2551 = other_2550;
    let _e4: Translator = self_2833;
    let _e8: HomogeneousMagnitude = other_2551;
    let _e15: Translator = self_2833;
    let _e18: Translator = self_2833;
    let _e21: Translator = self_2833;
    let _e25: HomogeneousMagnitude = other_2551;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.y)), vec4(0.0));
}

fn translator_homogeneous_magnitude_regressive_product(self_2834: Translator, other_2552: HomogeneousMagnitude) -> MultiVector {
    var self_2835: Translator;
    var other_2553: HomogeneousMagnitude;

    self_2835 = self_2834;
    other_2553 = other_2552;
    let _e4: Translator = self_2835;
    let _e8: HomogeneousMagnitude = other_2553;
    let _e15: Translator = self_2835;
    let _e18: Translator = self_2835;
    let _e21: Translator = self_2835;
    let _e25: HomogeneousMagnitude = other_2553;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.y)), vec4(0.0));
}

fn translator_homogeneous_magnitude_anti_wedge(self_2836: Translator, other_2554: HomogeneousMagnitude) -> MultiVector {
    var self_2837: Translator;
    var other_2555: HomogeneousMagnitude;

    self_2837 = self_2836;
    other_2555 = other_2554;
    let _e4: Translator = self_2837;
    let _e8: HomogeneousMagnitude = other_2555;
    let _e15: Translator = self_2837;
    let _e18: Translator = self_2837;
    let _e21: Translator = self_2837;
    let _e25: HomogeneousMagnitude = other_2555;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.y)), vec4(0.0));
}

fn translator_homogeneous_magnitude_meet(self_2838: Translator, other_2556: HomogeneousMagnitude) -> MultiVector {
    var self_2839: Translator;
    var other_2557: HomogeneousMagnitude;

    self_2839 = self_2838;
    other_2557 = other_2556;
    let _e4: Translator = self_2839;
    let _e8: HomogeneousMagnitude = other_2557;
    let _e15: Translator = self_2839;
    let _e18: Translator = self_2839;
    let _e21: Translator = self_2839;
    let _e25: HomogeneousMagnitude = other_2557;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.y)), vec4(0.0));
}

fn translator_homogeneous_magnitude_outer_product(self_2840: Translator, other_2558: HomogeneousMagnitude) -> Translator {
    var self_2841: Translator;
    var other_2559: HomogeneousMagnitude;

    self_2841 = self_2840;
    other_2559 = other_2558;
    let _e4: Translator = self_2841;
    let _e6: HomogeneousMagnitude = other_2559;
    return Translator((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_wedge(self_2842: Translator, other_2560: HomogeneousMagnitude) -> Translator {
    var self_2843: Translator;
    var other_2561: HomogeneousMagnitude;

    self_2843 = self_2842;
    other_2561 = other_2560;
    let _e4: Translator = self_2843;
    let _e6: HomogeneousMagnitude = other_2561;
    return Translator((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_join(self_2844: Translator, other_2562: HomogeneousMagnitude) -> Translator {
    var self_2845: Translator;
    var other_2563: HomogeneousMagnitude;

    self_2845 = self_2844;
    other_2563 = other_2562;
    let _e4: Translator = self_2845;
    let _e6: HomogeneousMagnitude = other_2563;
    return Translator((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_inner_product(self_2846: Translator, other_2564: HomogeneousMagnitude) -> Motor {
    var self_2847: Translator;
    var other_2565: HomogeneousMagnitude;

    self_2847 = self_2846;
    other_2565 = other_2564;
    let _e4: Translator = self_2847;
    let _e6: HomogeneousMagnitude = other_2565;
    let _e9: HomogeneousMagnitude = other_2565;
    let _e12: HomogeneousMagnitude = other_2565;
    let _e15: HomogeneousMagnitude = other_2565;
    let _e20: Translator = self_2847;
    let _e23: Translator = self_2847;
    let _e26: Translator = self_2847;
    let _e30: HomogeneousMagnitude = other_2565;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.y, _e9.g0_.y, _e12.g0_.y, _e15.g0_.x)), (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) * vec3(_e30.g0_.x)));
}

fn translator_homogeneous_magnitude_inner_anti_product(self_2848: Translator, other_2566: HomogeneousMagnitude) -> MultiVector {
    var self_2849: Translator;
    var other_2567: HomogeneousMagnitude;

    self_2849 = self_2848;
    other_2567 = other_2566;
    let _e4: Translator = self_2849;
    let _e8: HomogeneousMagnitude = other_2567;
    let _e15: Translator = self_2849;
    let _e18: Translator = self_2849;
    let _e21: Translator = self_2849;
    let _e25: HomogeneousMagnitude = other_2567;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), vec4(0.0), vec3(0.0), (vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec3(_e25.g0_.y)), vec4(0.0));
}

fn translator_homogeneous_magnitude_left_contraction(self_2850: Translator, other_2568: HomogeneousMagnitude) -> Rotor {
    var self_2851: Translator;
    var other_2569: HomogeneousMagnitude;

    self_2851 = self_2850;
    other_2569 = other_2568;
    let _e4: Translator = self_2851;
    let _e7: HomogeneousMagnitude = other_2569;
    let _e10: HomogeneousMagnitude = other_2569;
    let _e13: HomogeneousMagnitude = other_2569;
    let _e16: HomogeneousMagnitude = other_2569;
    return Rotor(((_e4.g0_.xyzx * vec4<f32>(_e7.g0_.y, _e10.g0_.y, _e13.g0_.y, _e16.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_homogeneous_magnitude_right_contraction(self_2852: Translator, other_2570: HomogeneousMagnitude) -> Translator {
    var self_2853: Translator;
    var other_2571: HomogeneousMagnitude;

    self_2853 = self_2852;
    other_2571 = other_2570;
    let _e4: Translator = self_2853;
    let _e6: HomogeneousMagnitude = other_2571;
    return Translator((_e4.g0_ * vec4(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_left_anti_contraction(self_2854: Translator, other_2572: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_2855: Translator;
    var other_2573: HomogeneousMagnitude;

    self_2855 = self_2854;
    other_2573 = other_2572;
    let _e4: Translator = self_2855;
    let _e8: HomogeneousMagnitude = other_2573;
    return HomogeneousMagnitude((vec2(_e4.g0_.w) * _e8.g0_));
}

fn translator_homogeneous_magnitude_right_anti_contraction(self_2856: Translator, other_2574: HomogeneousMagnitude) -> Translator {
    var self_2857: Translator;
    var other_2575: HomogeneousMagnitude;

    self_2857 = self_2856;
    other_2575 = other_2574;
    let _e4: Translator = self_2857;
    let _e6: HomogeneousMagnitude = other_2575;
    return Translator((_e4.g0_ * vec4(_e6.g0_.y)));
}

fn translator_homogeneous_magnitude_anti_scalar_product(self_2858: Translator, other_2576: HomogeneousMagnitude) -> AntiScalar {
    var self_2859: Translator;
    var other_2577: HomogeneousMagnitude;

    self_2859 = self_2858;
    other_2577 = other_2576;
    let _e4: Translator = self_2859;
    let _e7: HomogeneousMagnitude = other_2577;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_homogeneous_magnitude_anti_dot(self_2860: Translator, other_2578: HomogeneousMagnitude) -> AntiScalar {
    var self_2861: Translator;
    var other_2579: HomogeneousMagnitude;

    self_2861 = self_2860;
    other_2579 = other_2578;
    let _e4: Translator = self_2861;
    let _e7: HomogeneousMagnitude = other_2579;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_point_geometric_product(self_2862: Translator, other_2580: Point) -> Flector {
    var self_2863: Translator;
    var other_2581: Point;

    self_2863 = self_2862;
    other_2581 = other_2580;
    let _e4: Translator = self_2863;
    let _e8: Point = other_2581;
    let _e18: Translator = self_2863;
    let _e22: Point = other_2581;
    let _e33: Translator = self_2863;
    let _e37: Point = other_2581;
    let _e48: Translator = self_2863;
    let _e52: Point = other_2581;
    let _e62: Translator = self_2863;
    let _e66: Point = other_2581;
    let _e77: Translator = self_2863;
    let _e81: Point = other_2581;
    let _e92: Translator = self_2863;
    let _e96: Point = other_2581;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), (((((vec4(_e48.g0_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e62.g0_.z) * _e66.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e77.g0_.w) * _e81.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e92.g0_.x) * _e96.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_point_geometric_anti_product(self_2864: Translator, other_2582: Point) -> Point {
    var self_2865: Translator;
    var other_2583: Point;

    self_2865 = self_2864;
    other_2583 = other_2582;
    let _e4: Translator = self_2865;
    let _e8: Point = other_2583;
    let _e11: Translator = self_2865;
    let _e14: Point = other_2583;
    return Point(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_point_regressive_product(self_2866: Translator, other_2584: Point) -> Point {
    var self_2867: Translator;
    var other_2585: Point;

    self_2867 = self_2866;
    other_2585 = other_2584;
    let _e4: Translator = self_2867;
    let _e8: Point = other_2585;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_anti_wedge(self_2868: Translator, other_2586: Point) -> Point {
    var self_2869: Translator;
    var other_2587: Point;

    self_2869 = self_2868;
    other_2587 = other_2586;
    let _e4: Translator = self_2869;
    let _e8: Point = other_2587;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_meet(self_2870: Translator, other_2588: Point) -> Point {
    var self_2871: Translator;
    var other_2589: Point;

    self_2871 = self_2870;
    other_2589 = other_2588;
    let _e4: Translator = self_2871;
    let _e8: Point = other_2589;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_outer_product(self_2872: Translator, other_2590: Point) -> Plane {
    var self_2873: Translator;
    var other_2591: Point;

    self_2873 = self_2872;
    other_2591 = other_2590;
    let _e4: Translator = self_2873;
    let _e8: Point = other_2591;
    let _e18: Translator = self_2873;
    let _e22: Point = other_2591;
    let _e33: Translator = self_2873;
    let _e37: Point = other_2591;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_point_wedge(self_2874: Translator, other_2592: Point) -> Plane {
    var self_2875: Translator;
    var other_2593: Point;

    self_2875 = self_2874;
    other_2593 = other_2592;
    let _e4: Translator = self_2875;
    let _e8: Point = other_2593;
    let _e18: Translator = self_2875;
    let _e22: Point = other_2593;
    let _e33: Translator = self_2875;
    let _e37: Point = other_2593;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_point_join(self_2876: Translator, other_2594: Point) -> Plane {
    var self_2877: Translator;
    var other_2595: Point;

    self_2877 = self_2876;
    other_2595 = other_2594;
    let _e4: Translator = self_2877;
    let _e8: Point = other_2595;
    let _e18: Translator = self_2877;
    let _e22: Point = other_2595;
    let _e33: Translator = self_2877;
    let _e37: Point = other_2595;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_point_inner_product(self_2878: Translator, other_2596: Point) -> Flector {
    var self_2879: Translator;
    var other_2597: Point;

    self_2879 = self_2878;
    other_2597 = other_2596;
    let _e4: Translator = self_2879;
    let _e8: Point = other_2597;
    let _e18: Translator = self_2879;
    let _e22: Point = other_2597;
    let _e33: Translator = self_2879;
    let _e37: Point = other_2597;
    let _e48: Translator = self_2879;
    let _e51: Point = other_2597;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), ((_e48.g0_.wwwx * _e51.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_point_inner_anti_product(self_2880: Translator, other_2598: Point) -> Point {
    var self_2881: Translator;
    var other_2599: Point;

    self_2881 = self_2880;
    other_2599 = other_2598;
    let _e4: Translator = self_2881;
    let _e8: Point = other_2599;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_right_contraction(self_2882: Translator, other_2600: Point) -> Flector {
    var self_2883: Translator;
    var other_2601: Point;

    self_2883 = self_2882;
    other_2601 = other_2600;
    let _e4: Translator = self_2883;
    let _e8: Point = other_2601;
    let _e18: Translator = self_2883;
    let _e22: Point = other_2601;
    let _e33: Translator = self_2883;
    let _e37: Point = other_2601;
    let _e48: Translator = self_2883;
    let _e51: Point = other_2601;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))), ((_e48.g0_.wwwx * _e51.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_point_left_anti_contraction(self_2884: Translator, other_2602: Point) -> Point {
    var self_2885: Translator;
    var other_2603: Point;

    self_2885 = self_2884;
    other_2603 = other_2602;
    let _e4: Translator = self_2885;
    let _e8: Point = other_2603;
    return Point((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_line_add(self_2886: Translator, other_2604: Line) -> Motor {
    var self_2887: Translator;
    var other_2605: Line;

    self_2887 = self_2886;
    other_2605 = other_2604;
    let _e4: Translator = self_2887;
    let _e13: Line = other_2605;
    let _e16: Line = other_2605;
    let _e19: Line = other_2605;
    let _e22: Line = other_2605;
    let _e33: Translator = self_2887;
    let _e36: Translator = self_2887;
    let _e39: Translator = self_2887;
    let _e43: Line = other_2605;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e33.g0_.x, _e36.g0_.y, _e39.g0_.z) + _e43.g1_));
}

fn translator_line_sub(self_2888: Translator, other_2606: Line) -> Motor {
    var self_2889: Translator;
    var other_2607: Line;

    self_2889 = self_2888;
    other_2607 = other_2606;
    let _e4: Translator = self_2889;
    let _e13: Line = other_2607;
    let _e16: Line = other_2607;
    let _e19: Line = other_2607;
    let _e22: Line = other_2607;
    let _e33: Translator = self_2889;
    let _e36: Translator = self_2889;
    let _e39: Translator = self_2889;
    let _e43: Line = other_2607;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e33.g0_.x, _e36.g0_.y, _e39.g0_.z) - _e43.g1_));
}

fn translator_line_geometric_product(self_2890: Translator, other_2608: Line) -> MultiVector {
    var self_2891: Translator;
    var other_2609: Line;

    self_2891 = self_2890;
    other_2609 = other_2608;
    let _e6: Translator = self_2891;
    let _e10: Line = other_2609;
    let _e13: Line = other_2609;
    let _e19: Translator = self_2891;
    let _e23: Line = other_2609;
    let _e26: Line = other_2609;
    let _e32: Translator = self_2891;
    let _e36: Line = other_2609;
    let _e39: Line = other_2609;
    let _e47: Translator = self_2891;
    let _e51: Line = other_2609;
    let _e60: Translator = self_2891;
    let _e64: Line = other_2609;
    let _e74: Translator = self_2891;
    let _e78: Line = other_2609;
    let _e82: Translator = self_2891;
    let _e86: Line = other_2609;
    let _e96: Translator = self_2891;
    let _e100: Line = other_2609;
    let _e109: Translator = self_2891;
    let _e113: Line = other_2609;
    let _e123: Translator = self_2891;
    let _e127: Line = other_2609;
    return MultiVector((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))), vec4(0.0), (((((vec3(_e47.g0_.y) * _e51.g0_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e60.g0_.z) * _e64.g0_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + (vec3(_e74.g0_.w) * _e78.g1_)) + ((vec3(_e82.g0_.x) * _e86.g0_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e96.g0_.y) * _e100.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e109.g0_.z) * _e113.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e123.g0_.x) * _e127.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn translator_line_geometric_anti_product(self_2892: Translator, other_2610: Line) -> MultiVector {
    var self_2893: Translator;
    var other_2611: Line;

    self_2893 = self_2892;
    other_2611 = other_2610;
    let _e4: Translator = self_2893;
    let _e8: Line = other_2611;
    let _e17: Translator = self_2893;
    let _e21: Line = other_2611;
    let _e31: Translator = self_2893;
    let _e35: Line = other_2611;
    let _e47: Translator = self_2893;
    let _e51: Line = other_2611;
    let _e54: Translator = self_2893;
    let _e58: Line = other_2611;
    let _e67: Translator = self_2893;
    let _e71: Line = other_2611;
    let _e81: Translator = self_2893;
    let _e85: Line = other_2611;
    let _e89: Translator = self_2893;
    let _e93: Line = other_2611;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (((((vec3(_e54.g0_.y) * _e58.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e67.g0_.z) * _e71.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + (vec3(_e81.g0_.w) * _e85.g1_)) + ((vec3(_e89.g0_.x) * _e93.g0_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn translator_line_regressive_product(self_2894: Translator, other_2612: Line) -> MultiVector {
    var self_2895: Translator;
    var other_2613: Line;

    self_2895 = self_2894;
    other_2613 = other_2612;
    let _e4: Translator = self_2895;
    let _e8: Line = other_2613;
    let _e17: Translator = self_2895;
    let _e21: Line = other_2613;
    let _e31: Translator = self_2895;
    let _e35: Line = other_2613;
    let _e47: Translator = self_2895;
    let _e51: Line = other_2613;
    let _e54: Translator = self_2895;
    let _e58: Line = other_2613;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn translator_line_anti_wedge(self_2896: Translator, other_2614: Line) -> MultiVector {
    var self_2897: Translator;
    var other_2615: Line;

    self_2897 = self_2896;
    other_2615 = other_2614;
    let _e4: Translator = self_2897;
    let _e8: Line = other_2615;
    let _e17: Translator = self_2897;
    let _e21: Line = other_2615;
    let _e31: Translator = self_2897;
    let _e35: Line = other_2615;
    let _e47: Translator = self_2897;
    let _e51: Line = other_2615;
    let _e54: Translator = self_2897;
    let _e58: Line = other_2615;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn translator_line_meet(self_2898: Translator, other_2616: Line) -> MultiVector {
    var self_2899: Translator;
    var other_2617: Line;

    self_2899 = self_2898;
    other_2617 = other_2616;
    let _e4: Translator = self_2899;
    let _e8: Line = other_2617;
    let _e17: Translator = self_2899;
    let _e21: Line = other_2617;
    let _e31: Translator = self_2899;
    let _e35: Line = other_2617;
    let _e47: Translator = self_2899;
    let _e51: Line = other_2617;
    let _e54: Translator = self_2899;
    let _e58: Line = other_2617;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g0_), (vec3(_e54.g0_.w) * _e58.g1_), vec4(0.0));
}

fn translator_line_outer_product(self_2900: Translator, other_2618: Line) -> AntiScalar {
    var self_2901: Translator;
    var other_2619: Line;

    self_2901 = self_2900;
    other_2619 = other_2618;
    let _e5: Translator = self_2901;
    let _e8: Line = other_2619;
    let _e13: Translator = self_2901;
    let _e16: Line = other_2619;
    let _e21: Translator = self_2901;
    let _e24: Line = other_2619;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_wedge(self_2902: Translator, other_2620: Line) -> AntiScalar {
    var self_2903: Translator;
    var other_2621: Line;

    self_2903 = self_2902;
    other_2621 = other_2620;
    let _e5: Translator = self_2903;
    let _e8: Line = other_2621;
    let _e13: Translator = self_2903;
    let _e16: Line = other_2621;
    let _e21: Translator = self_2903;
    let _e24: Line = other_2621;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_join(self_2904: Translator, other_2622: Line) -> AntiScalar {
    var self_2905: Translator;
    var other_2623: Line;

    self_2905 = self_2904;
    other_2623 = other_2622;
    let _e5: Translator = self_2905;
    let _e8: Line = other_2623;
    let _e13: Translator = self_2905;
    let _e16: Line = other_2623;
    let _e21: Translator = self_2905;
    let _e24: Line = other_2623;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_inner_product(self_2906: Translator, other_2624: Line) -> MultiVector {
    var self_2907: Translator;
    var other_2625: Line;

    self_2907 = self_2906;
    other_2625 = other_2624;
    let _e4: Translator = self_2907;
    let _e8: Line = other_2625;
    let _e17: Translator = self_2907;
    let _e21: Line = other_2625;
    let _e31: Translator = self_2907;
    let _e35: Line = other_2625;
    let _e47: Translator = self_2907;
    let _e51: Line = other_2625;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn translator_line_inner_anti_product(self_2908: Translator, other_2626: Line) -> Line {
    var self_2909: Translator;
    var other_2627: Line;

    self_2909 = self_2908;
    other_2627 = other_2626;
    let _e4: Translator = self_2909;
    let _e8: Line = other_2627;
    let _e11: Translator = self_2909;
    let _e15: Line = other_2627;
    return Line((vec3(_e4.g0_.w) * _e8.g0_), (vec3(_e11.g0_.w) * _e15.g1_));
}

fn translator_line_left_contraction(self_2910: Translator, other_2628: Line) -> Scalar {
    var self_2911: Translator;
    var other_2629: Line;

    self_2911 = self_2910;
    other_2629 = other_2628;
    let _e5: Translator = self_2911;
    let _e8: Line = other_2629;
    let _e13: Translator = self_2911;
    let _e16: Line = other_2629;
    let _e21: Translator = self_2911;
    let _e24: Line = other_2629;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_line_right_contraction(self_2912: Translator, other_2630: Line) -> MultiVector {
    var self_2913: Translator;
    var other_2631: Line;

    self_2913 = self_2912;
    other_2631 = other_2630;
    let _e4: Translator = self_2913;
    let _e8: Line = other_2631;
    let _e17: Translator = self_2913;
    let _e21: Line = other_2631;
    let _e31: Translator = self_2913;
    let _e35: Line = other_2631;
    let _e47: Translator = self_2913;
    let _e51: Line = other_2631;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn translator_line_left_anti_contraction(self_2914: Translator, other_2632: Line) -> Line {
    var self_2915: Translator;
    var other_2633: Line;

    self_2915 = self_2914;
    other_2633 = other_2632;
    let _e4: Translator = self_2915;
    let _e8: Line = other_2633;
    let _e11: Translator = self_2915;
    let _e15: Line = other_2633;
    return Line((vec3(_e4.g0_.w) * _e8.g0_), (vec3(_e11.g0_.w) * _e15.g1_));
}

fn translator_line_scalar_product(self_2916: Translator, other_2634: Line) -> Scalar {
    var self_2917: Translator;
    var other_2635: Line;

    self_2917 = self_2916;
    other_2635 = other_2634;
    let _e5: Translator = self_2917;
    let _e8: Line = other_2635;
    let _e13: Translator = self_2917;
    let _e16: Line = other_2635;
    let _e21: Translator = self_2917;
    let _e24: Line = other_2635;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_line_dot(self_2918: Translator, other_2636: Line) -> Scalar {
    var self_2919: Translator;
    var other_2637: Line;

    self_2919 = self_2918;
    other_2637 = other_2636;
    let _e5: Translator = self_2919;
    let _e8: Line = other_2637;
    let _e13: Translator = self_2919;
    let _e16: Line = other_2637;
    let _e21: Translator = self_2919;
    let _e24: Line = other_2637;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_plane_geometric_product(self_2920: Translator, other_2638: Plane) -> Flector {
    var self_2921: Translator;
    var other_2639: Plane;

    self_2921 = self_2920;
    other_2639 = other_2638;
    let _e4: Translator = self_2921;
    let _e8: Plane = other_2639;
    let _e18: Translator = self_2921;
    let _e22: Plane = other_2639;
    let _e33: Translator = self_2921;
    let _e37: Plane = other_2639;
    let _e49: Translator = self_2921;
    let _e53: Plane = other_2639;
    let _e64: Translator = self_2921;
    let _e68: Plane = other_2639;
    let _e78: Translator = self_2921;
    let _e82: Plane = other_2639;
    let _e93: Translator = self_2921;
    let _e97: Plane = other_2639;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((((vec4(_e64.g0_.y) * _e68.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e78.g0_.z) * _e82.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e93.g0_.x) * _e97.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn translator_plane_geometric_anti_product(self_2922: Translator, other_2640: Plane) -> Flector {
    var self_2923: Translator;
    var other_2641: Plane;

    self_2923 = self_2922;
    other_2641 = other_2640;
    let _e4: Translator = self_2923;
    let _e8: Plane = other_2641;
    let _e18: Translator = self_2923;
    let _e22: Plane = other_2641;
    let _e33: Translator = self_2923;
    let _e37: Plane = other_2641;
    let _e48: Translator = self_2923;
    let _e52: Plane = other_2641;
    let _e63: Translator = self_2923;
    let _e67: Plane = other_2641;
    let _e79: Translator = self_2923;
    let _e83: Plane = other_2641;
    let _e87: Translator = self_2923;
    let _e91: Plane = other_2641;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (((((vec4(_e48.g0_.y) * vec4(_e52.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e63.g0_.z) * vec4(_e67.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e79.g0_.w) * _e83.g0_)) + ((vec4(_e87.g0_.x) * vec4(_e91.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_plane_regressive_product(self_2924: Translator, other_2642: Plane) -> Flector {
    var self_2925: Translator;
    var other_2643: Plane;

    self_2925 = self_2924;
    other_2643 = other_2642;
    let _e4: Translator = self_2925;
    let _e8: Plane = other_2643;
    let _e18: Translator = self_2925;
    let _e22: Plane = other_2643;
    let _e33: Translator = self_2925;
    let _e37: Plane = other_2643;
    let _e48: Translator = self_2925;
    let _e52: Plane = other_2643;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn translator_plane_anti_wedge(self_2926: Translator, other_2644: Plane) -> Flector {
    var self_2927: Translator;
    var other_2645: Plane;

    self_2927 = self_2926;
    other_2645 = other_2644;
    let _e4: Translator = self_2927;
    let _e8: Plane = other_2645;
    let _e18: Translator = self_2927;
    let _e22: Plane = other_2645;
    let _e33: Translator = self_2927;
    let _e37: Plane = other_2645;
    let _e48: Translator = self_2927;
    let _e52: Plane = other_2645;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn translator_plane_meet(self_2928: Translator, other_2646: Plane) -> Flector {
    var self_2929: Translator;
    var other_2647: Plane;

    self_2929 = self_2928;
    other_2647 = other_2646;
    let _e4: Translator = self_2929;
    let _e8: Plane = other_2647;
    let _e18: Translator = self_2929;
    let _e22: Plane = other_2647;
    let _e33: Translator = self_2929;
    let _e37: Plane = other_2647;
    let _e48: Translator = self_2929;
    let _e52: Plane = other_2647;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e48.g0_.w) * _e52.g0_));
}

fn translator_plane_inner_product(self_2930: Translator, other_2648: Plane) -> Point {
    var self_2931: Translator;
    var other_2649: Plane;

    self_2931 = self_2930;
    other_2649 = other_2648;
    let _e4: Translator = self_2931;
    let _e8: Plane = other_2649;
    let _e18: Translator = self_2931;
    let _e22: Plane = other_2649;
    let _e33: Translator = self_2931;
    let _e37: Plane = other_2649;
    let _e49: Translator = self_2931;
    let _e53: Plane = other_2649;
    return Point((((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.w) * vec4(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_plane_inner_anti_product(self_2932: Translator, other_2650: Plane) -> Plane {
    var self_2933: Translator;
    var other_2651: Plane;

    self_2933 = self_2932;
    other_2651 = other_2650;
    let _e4: Translator = self_2933;
    let _e8: Plane = other_2651;
    let _e19: Translator = self_2933;
    let _e23: Plane = other_2651;
    let _e35: Translator = self_2933;
    let _e39: Plane = other_2651;
    let _e43: Translator = self_2933;
    let _e47: Plane = other_2651;
    return Plane((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e35.g0_.w) * _e39.g0_)) + ((vec4(_e43.g0_.x) * vec4(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_plane_left_contraction(self_2934: Translator, other_2652: Plane) -> Point {
    var self_2935: Translator;
    var other_2653: Plane;

    self_2935 = self_2934;
    other_2653 = other_2652;
    let _e4: Translator = self_2935;
    let _e8: Plane = other_2653;
    let _e18: Translator = self_2935;
    let _e22: Plane = other_2653;
    let _e33: Translator = self_2935;
    let _e37: Plane = other_2653;
    return Point(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_plane_right_contraction(self_2936: Translator, other_2654: Plane) -> Point {
    var self_2937: Translator;
    var other_2655: Plane;

    self_2937 = self_2936;
    other_2655 = other_2654;
    let _e4: Translator = self_2937;
    let _e7: Plane = other_2655;
    return Point(((_e4.g0_.xxxw * _e7.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn translator_plane_left_anti_contraction(self_2938: Translator, other_2656: Plane) -> Plane {
    var self_2939: Translator;
    var other_2657: Plane;

    self_2939 = self_2938;
    other_2657 = other_2656;
    let _e4: Translator = self_2939;
    let _e8: Plane = other_2657;
    return Plane((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_plane_right_anti_contraction(self_2940: Translator, other_2658: Plane) -> Plane {
    var self_2941: Translator;
    var other_2659: Plane;

    self_2941 = self_2940;
    other_2659 = other_2658;
    let _e4: Translator = self_2941;
    let _e8: Plane = other_2659;
    let _e19: Translator = self_2941;
    let _e23: Plane = other_2659;
    let _e35: Translator = self_2941;
    let _e39: Plane = other_2659;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_motor_add(self_2942: Translator, other_2660: Motor) -> Motor {
    var self_2943: Translator;
    var other_2661: Motor;

    self_2943 = self_2942;
    other_2661 = other_2660;
    let _e4: Translator = self_2943;
    let _e13: Motor = other_2661;
    let _e16: Translator = self_2943;
    let _e19: Translator = self_2943;
    let _e22: Translator = self_2943;
    let _e26: Motor = other_2661;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), (vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z) + _e26.g1_));
}

fn translator_motor_sub(self_2944: Translator, other_2662: Motor) -> Motor {
    var self_2945: Translator;
    var other_2663: Motor;

    self_2945 = self_2944;
    other_2663 = other_2662;
    let _e4: Translator = self_2945;
    let _e13: Motor = other_2663;
    let _e16: Translator = self_2945;
    let _e19: Translator = self_2945;
    let _e22: Translator = self_2945;
    let _e26: Motor = other_2663;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), (vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z) - _e26.g1_));
}

fn translator_motor_geometric_product(self_2946: Translator, other_2664: Motor) -> MultiVector {
    var self_2947: Translator;
    var other_2665: Motor;

    self_2947 = self_2946;
    other_2665 = other_2664;
    let _e6: Translator = self_2947;
    let _e10: Motor = other_2665;
    let _e13: Motor = other_2665;
    let _e19: Translator = self_2947;
    let _e23: Motor = other_2665;
    let _e26: Motor = other_2665;
    let _e32: Translator = self_2947;
    let _e36: Motor = other_2665;
    let _e39: Motor = other_2665;
    let _e47: Translator = self_2947;
    let _e51: Motor = other_2665;
    let _e54: Motor = other_2665;
    let _e57: Motor = other_2665;
    let _e67: Translator = self_2947;
    let _e71: Motor = other_2665;
    let _e74: Motor = other_2665;
    let _e77: Motor = other_2665;
    let _e88: Translator = self_2947;
    let _e92: Motor = other_2665;
    let _e95: Motor = other_2665;
    let _e98: Motor = other_2665;
    let _e109: Translator = self_2947;
    let _e113: Motor = other_2665;
    let _e117: Translator = self_2947;
    let _e121: Motor = other_2665;
    let _e130: Translator = self_2947;
    let _e134: Motor = other_2665;
    let _e144: Translator = self_2947;
    let _e148: Motor = other_2665;
    return MultiVector((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))), vec4(0.0), (((((vec3(_e47.g0_.x) * vec3<f32>(_e51.g0_.w, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e67.g0_.y) * vec3<f32>(_e71.g0_.z, _e74.g0_.w, _e77.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e88.g0_.z) * vec3<f32>(_e92.g0_.y, _e95.g0_.x, _e98.g0_.w)) * vec3<f32>(1.0, -1.0, 1.0))) + (vec3(_e109.g0_.w) * _e113.g1_)), ((((vec3(_e117.g0_.y) * _e121.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e130.g0_.z) * _e134.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e144.g0_.x) * _e148.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn translator_motor_geometric_anti_product(self_2948: Translator, other_2666: Motor) -> MultiVector {
    var self_2949: Translator;
    var other_2667: Motor;

    self_2949 = self_2948;
    other_2667 = other_2666;
    let _e4: Translator = self_2949;
    let _e8: Motor = other_2667;
    let _e17: Translator = self_2949;
    let _e21: Motor = other_2667;
    let _e31: Translator = self_2949;
    let _e34: Translator = self_2949;
    let _e38: Motor = other_2667;
    let _e41: Motor = other_2667;
    let _e53: Translator = self_2949;
    let _e57: Motor = other_2667;
    let _e60: Motor = other_2667;
    let _e63: Motor = other_2667;
    let _e68: Translator = self_2949;
    let _e72: Motor = other_2667;
    let _e75: Motor = other_2667;
    let _e78: Motor = other_2667;
    let _e88: Translator = self_2949;
    let _e92: Motor = other_2667;
    let _e95: Motor = other_2667;
    let _e98: Motor = other_2667;
    let _e109: Translator = self_2949;
    let _e113: Motor = other_2667;
    let _e116: Motor = other_2667;
    let _e119: Motor = other_2667;
    let _e130: Translator = self_2949;
    let _e134: Motor = other_2667;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), (((((vec3(_e68.g0_.x) * vec3<f32>(_e72.g0_.w, _e75.g0_.z, _e78.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e88.g0_.y) * vec3<f32>(_e92.g0_.z, _e95.g0_.w, _e98.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e109.g0_.z) * vec3<f32>(_e113.g0_.y, _e116.g0_.x, _e119.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e130.g0_.w) * _e134.g1_)), vec4(0.0));
}

fn translator_motor_regressive_product(self_2950: Translator, other_2668: Motor) -> MultiVector {
    var self_2951: Translator;
    var other_2669: Motor;

    self_2951 = self_2950;
    other_2669 = other_2668;
    let _e4: Translator = self_2951;
    let _e8: Motor = other_2669;
    let _e17: Translator = self_2951;
    let _e21: Motor = other_2669;
    let _e31: Translator = self_2951;
    let _e34: Translator = self_2951;
    let _e38: Motor = other_2669;
    let _e41: Motor = other_2669;
    let _e53: Translator = self_2951;
    let _e57: Motor = other_2669;
    let _e60: Motor = other_2669;
    let _e63: Motor = other_2669;
    let _e68: Translator = self_2951;
    let _e72: Motor = other_2669;
    let _e75: Translator = self_2951;
    let _e78: Translator = self_2951;
    let _e81: Translator = self_2951;
    let _e85: Motor = other_2669;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), ((vec3(_e68.g0_.w) * _e72.g1_) + (vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z) * vec3(_e85.g0_.w))), vec4(0.0));
}

fn translator_motor_anti_wedge(self_2952: Translator, other_2670: Motor) -> MultiVector {
    var self_2953: Translator;
    var other_2671: Motor;

    self_2953 = self_2952;
    other_2671 = other_2670;
    let _e4: Translator = self_2953;
    let _e8: Motor = other_2671;
    let _e17: Translator = self_2953;
    let _e21: Motor = other_2671;
    let _e31: Translator = self_2953;
    let _e34: Translator = self_2953;
    let _e38: Motor = other_2671;
    let _e41: Motor = other_2671;
    let _e53: Translator = self_2953;
    let _e57: Motor = other_2671;
    let _e60: Motor = other_2671;
    let _e63: Motor = other_2671;
    let _e68: Translator = self_2953;
    let _e72: Motor = other_2671;
    let _e75: Translator = self_2953;
    let _e78: Translator = self_2953;
    let _e81: Translator = self_2953;
    let _e85: Motor = other_2671;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), ((vec3(_e68.g0_.w) * _e72.g1_) + (vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z) * vec3(_e85.g0_.w))), vec4(0.0));
}

fn translator_motor_meet(self_2954: Translator, other_2672: Motor) -> MultiVector {
    var self_2955: Translator;
    var other_2673: Motor;

    self_2955 = self_2954;
    other_2673 = other_2672;
    let _e4: Translator = self_2955;
    let _e8: Motor = other_2673;
    let _e17: Translator = self_2955;
    let _e21: Motor = other_2673;
    let _e31: Translator = self_2955;
    let _e34: Translator = self_2955;
    let _e38: Motor = other_2673;
    let _e41: Motor = other_2673;
    let _e53: Translator = self_2955;
    let _e57: Motor = other_2673;
    let _e60: Motor = other_2673;
    let _e63: Motor = other_2673;
    let _e68: Translator = self_2955;
    let _e72: Motor = other_2673;
    let _e75: Translator = self_2955;
    let _e78: Translator = self_2955;
    let _e81: Translator = self_2955;
    let _e85: Motor = other_2673;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), ((vec3(_e68.g0_.w) * _e72.g1_) + (vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z) * vec3(_e85.g0_.w))), vec4(0.0));
}

fn translator_motor_outer_product(self_2956: Translator, other_2674: Motor) -> AntiScalar {
    var self_2957: Translator;
    var other_2675: Motor;

    self_2957 = self_2956;
    other_2675 = other_2674;
    let _e5: Translator = self_2957;
    let _e8: Motor = other_2675;
    let _e13: Translator = self_2957;
    let _e16: Motor = other_2675;
    let _e21: Translator = self_2957;
    let _e24: Motor = other_2675;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_wedge(self_2958: Translator, other_2676: Motor) -> AntiScalar {
    var self_2959: Translator;
    var other_2677: Motor;

    self_2959 = self_2958;
    other_2677 = other_2676;
    let _e5: Translator = self_2959;
    let _e8: Motor = other_2677;
    let _e13: Translator = self_2959;
    let _e16: Motor = other_2677;
    let _e21: Translator = self_2959;
    let _e24: Motor = other_2677;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_join(self_2960: Translator, other_2678: Motor) -> AntiScalar {
    var self_2961: Translator;
    var other_2679: Motor;

    self_2961 = self_2960;
    other_2679 = other_2678;
    let _e5: Translator = self_2961;
    let _e8: Motor = other_2679;
    let _e13: Translator = self_2961;
    let _e16: Motor = other_2679;
    let _e21: Translator = self_2961;
    let _e24: Motor = other_2679;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_inner_product(self_2962: Translator, other_2680: Motor) -> MultiVector {
    var self_2963: Translator;
    var other_2681: Motor;

    self_2963 = self_2962;
    other_2681 = other_2680;
    let _e4: Translator = self_2963;
    let _e8: Motor = other_2681;
    let _e17: Translator = self_2963;
    let _e21: Motor = other_2681;
    let _e31: Translator = self_2963;
    let _e35: Motor = other_2681;
    let _e47: Translator = self_2963;
    let _e51: Motor = other_2681;
    let _e54: Translator = self_2963;
    let _e57: Translator = self_2963;
    let _e60: Translator = self_2963;
    let _e64: Motor = other_2681;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * _e51.g1_) + (vec3<f32>(_e54.g0_.x, _e57.g0_.y, _e60.g0_.z) * vec3(_e64.g0_.w))), vec3(0.0), vec4(0.0));
}

fn translator_motor_inner_anti_product(self_2964: Translator, other_2682: Motor) -> Motor {
    var self_2965: Translator;
    var other_2683: Motor;

    self_2965 = self_2964;
    other_2683 = other_2682;
    let _e4: Translator = self_2965;
    let _e8: Motor = other_2683;
    let _e11: Translator = self_2965;
    let _e15: Motor = other_2683;
    let _e18: Translator = self_2965;
    let _e21: Translator = self_2965;
    let _e24: Translator = self_2965;
    let _e28: Motor = other_2683;
    return Motor((vec4(_e4.g0_.w) * _e8.g0_), ((vec3(_e11.g0_.w) * _e15.g1_) + (vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z) * vec3(_e28.g0_.w))));
}

fn translator_motor_left_contraction(self_2966: Translator, other_2684: Motor) -> MultiVector {
    var self_2967: Translator;
    var other_2685: Motor;

    self_2967 = self_2966;
    other_2685 = other_2684;
    let _e4: Translator = self_2967;
    let _e8: Motor = other_2685;
    let _e17: Translator = self_2967;
    let _e21: Motor = other_2685;
    let _e31: Translator = self_2967;
    let _e35: Motor = other_2685;
    let _e47: Translator = self_2967;
    let _e50: Translator = self_2967;
    let _e53: Translator = self_2967;
    let _e57: Motor = other_2685;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.z) * vec3(_e57.g0_.w)), vec3(0.0), vec4(0.0));
}

fn translator_motor_right_contraction(self_2968: Translator, other_2686: Motor) -> MultiVector {
    var self_2969: Translator;
    var other_2687: Motor;

    self_2969 = self_2968;
    other_2687 = other_2686;
    let _e4: Translator = self_2969;
    let _e8: Motor = other_2687;
    let _e17: Translator = self_2969;
    let _e21: Motor = other_2687;
    let _e31: Translator = self_2969;
    let _e35: Motor = other_2687;
    let _e47: Translator = self_2969;
    let _e51: Motor = other_2687;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * _e51.g1_), vec3(0.0), vec4(0.0));
}

fn translator_motor_left_anti_contraction(self_2970: Translator, other_2688: Motor) -> Motor {
    var self_2971: Translator;
    var other_2689: Motor;

    self_2971 = self_2970;
    other_2689 = other_2688;
    let _e4: Translator = self_2971;
    let _e8: Motor = other_2689;
    let _e11: Translator = self_2971;
    let _e15: Motor = other_2689;
    return Motor((vec4(_e4.g0_.w) * _e8.g0_), (vec3(_e11.g0_.w) * _e15.g1_));
}

fn translator_motor_right_anti_contraction(self_2972: Translator, other_2690: Motor) -> Translator {
    var self_2973: Translator;
    var other_2691: Motor;

    self_2973 = self_2972;
    other_2691 = other_2690;
    let _e4: Translator = self_2973;
    let _e6: Motor = other_2691;
    return Translator((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn translator_motor_scalar_product(self_2974: Translator, other_2692: Motor) -> Scalar {
    var self_2975: Translator;
    var other_2693: Motor;

    self_2975 = self_2974;
    other_2693 = other_2692;
    let _e5: Translator = self_2975;
    let _e8: Motor = other_2693;
    let _e13: Translator = self_2975;
    let _e16: Motor = other_2693;
    let _e21: Translator = self_2975;
    let _e24: Motor = other_2693;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_motor_dot(self_2976: Translator, other_2694: Motor) -> Scalar {
    var self_2977: Translator;
    var other_2695: Motor;

    self_2977 = self_2976;
    other_2695 = other_2694;
    let _e5: Translator = self_2977;
    let _e8: Motor = other_2695;
    let _e13: Translator = self_2977;
    let _e16: Motor = other_2695;
    let _e21: Translator = self_2977;
    let _e24: Motor = other_2695;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_motor_anti_scalar_product(self_2978: Translator, other_2696: Motor) -> AntiScalar {
    var self_2979: Translator;
    var other_2697: Motor;

    self_2979 = self_2978;
    other_2697 = other_2696;
    let _e4: Translator = self_2979;
    let _e7: Motor = other_2697;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_motor_anti_dot(self_2980: Translator, other_2698: Motor) -> AntiScalar {
    var self_2981: Translator;
    var other_2699: Motor;

    self_2981 = self_2980;
    other_2699 = other_2698;
    let _e4: Translator = self_2981;
    let _e7: Motor = other_2699;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_rotor_add(self_2982: Translator, other_2700: Rotor) -> Motor {
    var self_2983: Translator;
    var other_2701: Rotor;

    self_2983 = self_2982;
    other_2701 = other_2700;
    let _e4: Translator = self_2983;
    let _e13: Rotor = other_2701;
    let _e16: Translator = self_2983;
    let _e19: Translator = self_2983;
    let _e22: Translator = self_2983;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn translator_rotor_sub(self_2984: Translator, other_2702: Rotor) -> Motor {
    var self_2985: Translator;
    var other_2703: Rotor;

    self_2985 = self_2984;
    other_2703 = other_2702;
    let _e4: Translator = self_2985;
    let _e13: Rotor = other_2703;
    let _e16: Translator = self_2985;
    let _e19: Translator = self_2985;
    let _e22: Translator = self_2985;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn translator_rotor_geometric_product(self_2986: Translator, other_2704: Rotor) -> Rotor {
    var self_2987: Translator;
    var other_2705: Rotor;

    self_2987 = self_2986;
    other_2705 = other_2704;
    let _e4: Translator = self_2987;
    let _e8: Rotor = other_2705;
    let _e18: Translator = self_2987;
    let _e22: Rotor = other_2705;
    let _e33: Translator = self_2987;
    let _e37: Rotor = other_2705;
    return Rotor(((((vec4(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e18.g0_.y) * _e22.g0_.zwxy) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e33.g0_.z) * _e37.g0_.yxwz) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn translator_rotor_geometric_anti_product(self_2988: Translator, other_2706: Rotor) -> MultiVector {
    var self_2989: Translator;
    var other_2707: Rotor;

    self_2989 = self_2988;
    other_2707 = other_2706;
    let _e4: Translator = self_2989;
    let _e8: Rotor = other_2707;
    let _e17: Translator = self_2989;
    let _e21: Rotor = other_2707;
    let _e31: Translator = self_2989;
    let _e34: Translator = self_2989;
    let _e38: Rotor = other_2707;
    let _e41: Rotor = other_2707;
    let _e53: Translator = self_2989;
    let _e57: Rotor = other_2707;
    let _e60: Rotor = other_2707;
    let _e63: Rotor = other_2707;
    let _e68: Translator = self_2989;
    let _e72: Rotor = other_2707;
    let _e75: Rotor = other_2707;
    let _e78: Rotor = other_2707;
    let _e88: Translator = self_2989;
    let _e92: Rotor = other_2707;
    let _e95: Rotor = other_2707;
    let _e98: Rotor = other_2707;
    let _e109: Translator = self_2989;
    let _e113: Rotor = other_2707;
    let _e116: Rotor = other_2707;
    let _e119: Rotor = other_2707;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), ((((vec3(_e68.g0_.x) * vec3<f32>(_e72.g0_.w, _e75.g0_.z, _e78.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e88.g0_.y) * vec3<f32>(_e92.g0_.z, _e95.g0_.w, _e98.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e109.g0_.z) * vec3<f32>(_e113.g0_.y, _e116.g0_.x, _e119.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), vec4(0.0));
}

fn translator_rotor_regressive_product(self_2990: Translator, other_2708: Rotor) -> MultiVector {
    var self_2991: Translator;
    var other_2709: Rotor;

    self_2991 = self_2990;
    other_2709 = other_2708;
    let _e4: Translator = self_2991;
    let _e8: Rotor = other_2709;
    let _e17: Translator = self_2991;
    let _e21: Rotor = other_2709;
    let _e31: Translator = self_2991;
    let _e34: Translator = self_2991;
    let _e38: Rotor = other_2709;
    let _e41: Rotor = other_2709;
    let _e53: Translator = self_2991;
    let _e57: Rotor = other_2709;
    let _e60: Rotor = other_2709;
    let _e63: Rotor = other_2709;
    let _e68: Translator = self_2991;
    let _e71: Translator = self_2991;
    let _e74: Translator = self_2991;
    let _e78: Rotor = other_2709;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), (vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z) * vec3(_e78.g0_.w)), vec4(0.0));
}

fn translator_rotor_anti_wedge(self_2992: Translator, other_2710: Rotor) -> MultiVector {
    var self_2993: Translator;
    var other_2711: Rotor;

    self_2993 = self_2992;
    other_2711 = other_2710;
    let _e4: Translator = self_2993;
    let _e8: Rotor = other_2711;
    let _e17: Translator = self_2993;
    let _e21: Rotor = other_2711;
    let _e31: Translator = self_2993;
    let _e34: Translator = self_2993;
    let _e38: Rotor = other_2711;
    let _e41: Rotor = other_2711;
    let _e53: Translator = self_2993;
    let _e57: Rotor = other_2711;
    let _e60: Rotor = other_2711;
    let _e63: Rotor = other_2711;
    let _e68: Translator = self_2993;
    let _e71: Translator = self_2993;
    let _e74: Translator = self_2993;
    let _e78: Rotor = other_2711;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), (vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z) * vec3(_e78.g0_.w)), vec4(0.0));
}

fn translator_rotor_meet(self_2994: Translator, other_2712: Rotor) -> MultiVector {
    var self_2995: Translator;
    var other_2713: Rotor;

    self_2995 = self_2994;
    other_2713 = other_2712;
    let _e4: Translator = self_2995;
    let _e8: Rotor = other_2713;
    let _e17: Translator = self_2995;
    let _e21: Rotor = other_2713;
    let _e31: Translator = self_2995;
    let _e34: Translator = self_2995;
    let _e38: Rotor = other_2713;
    let _e41: Rotor = other_2713;
    let _e53: Translator = self_2995;
    let _e57: Rotor = other_2713;
    let _e60: Rotor = other_2713;
    let _e63: Rotor = other_2713;
    let _e68: Translator = self_2995;
    let _e71: Translator = self_2995;
    let _e74: Translator = self_2995;
    let _e78: Rotor = other_2713;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e31.g0_.x, _e34.g0_.w) * vec2<f32>(_e38.g0_.x, _e41.g0_.w)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (vec3(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z)), (vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z) * vec3(_e78.g0_.w)), vec4(0.0));
}

fn translator_rotor_outer_product(self_2996: Translator, other_2714: Rotor) -> AntiScalar {
    var self_2997: Translator;
    var other_2715: Rotor;

    self_2997 = self_2996;
    other_2715 = other_2714;
    let _e5: Translator = self_2997;
    let _e8: Rotor = other_2715;
    let _e13: Translator = self_2997;
    let _e16: Rotor = other_2715;
    let _e21: Translator = self_2997;
    let _e24: Rotor = other_2715;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_wedge(self_2998: Translator, other_2716: Rotor) -> AntiScalar {
    var self_2999: Translator;
    var other_2717: Rotor;

    self_2999 = self_2998;
    other_2717 = other_2716;
    let _e5: Translator = self_2999;
    let _e8: Rotor = other_2717;
    let _e13: Translator = self_2999;
    let _e16: Rotor = other_2717;
    let _e21: Translator = self_2999;
    let _e24: Rotor = other_2717;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_join(self_3000: Translator, other_2718: Rotor) -> AntiScalar {
    var self_3001: Translator;
    var other_2719: Rotor;

    self_3001 = self_3000;
    other_2719 = other_2718;
    let _e5: Translator = self_3001;
    let _e8: Rotor = other_2719;
    let _e13: Translator = self_3001;
    let _e16: Rotor = other_2719;
    let _e21: Translator = self_3001;
    let _e24: Rotor = other_2719;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_inner_product(self_3002: Translator, other_2720: Rotor) -> Rotor {
    var self_3003: Translator;
    var other_2721: Rotor;

    self_3003 = self_3002;
    other_2721 = other_2720;
    let _e4: Translator = self_3003;
    let _e7: Rotor = other_2721;
    return Rotor(((_e4.g0_.xyzx * _e7.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_rotor_inner_anti_product(self_3004: Translator, other_2722: Rotor) -> Motor {
    var self_3005: Translator;
    var other_2723: Rotor;

    self_3005 = self_3004;
    other_2723 = other_2722;
    let _e4: Translator = self_3005;
    let _e8: Rotor = other_2723;
    let _e11: Translator = self_3005;
    let _e14: Translator = self_3005;
    let _e17: Translator = self_3005;
    let _e21: Rotor = other_2723;
    return Motor((vec4(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.x, _e14.g0_.y, _e17.g0_.z) * vec3(_e21.g0_.w)));
}

fn translator_rotor_left_contraction(self_3006: Translator, other_2724: Rotor) -> Rotor {
    var self_3007: Translator;
    var other_2725: Rotor;

    self_3007 = self_3006;
    other_2725 = other_2724;
    let _e4: Translator = self_3007;
    let _e7: Rotor = other_2725;
    return Rotor(((_e4.g0_.xyzx * _e7.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn translator_rotor_left_anti_contraction(self_3008: Translator, other_2726: Rotor) -> Rotor {
    var self_3009: Translator;
    var other_2727: Rotor;

    self_3009 = self_3008;
    other_2727 = other_2726;
    let _e4: Translator = self_3009;
    let _e8: Rotor = other_2727;
    return Rotor((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_rotor_right_anti_contraction(self_3010: Translator, other_2728: Rotor) -> Translator {
    var self_3011: Translator;
    var other_2729: Rotor;

    self_3011 = self_3010;
    other_2729 = other_2728;
    let _e4: Translator = self_3011;
    let _e6: Rotor = other_2729;
    return Translator((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn translator_rotor_anti_scalar_product(self_3012: Translator, other_2730: Rotor) -> AntiScalar {
    var self_3013: Translator;
    var other_2731: Rotor;

    self_3013 = self_3012;
    other_2731 = other_2730;
    let _e4: Translator = self_3013;
    let _e7: Rotor = other_2731;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_rotor_anti_dot(self_3014: Translator, other_2732: Rotor) -> AntiScalar {
    var self_3015: Translator;
    var other_2733: Rotor;

    self_3015 = self_3014;
    other_2733 = other_2732;
    let _e4: Translator = self_3015;
    let _e7: Rotor = other_2733;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_translator_add(self_3016: Translator, other_2734: Translator) -> Translator {
    var self_3017: Translator;
    var other_2735: Translator;

    self_3017 = self_3016;
    other_2735 = other_2734;
    let _e4: Translator = self_3017;
    let _e6: Translator = other_2735;
    return Translator((_e4.g0_ + _e6.g0_));
}

fn translator_translator_sub(self_3018: Translator, other_2736: Translator) -> Translator {
    var self_3019: Translator;
    var other_2737: Translator;

    self_3019 = self_3018;
    other_2737 = other_2736;
    let _e4: Translator = self_3019;
    let _e6: Translator = other_2737;
    return Translator((_e4.g0_ - _e6.g0_));
}

fn translator_translator_mul(self_3020: Translator, other_2738: Translator) -> Translator {
    var self_3021: Translator;
    var other_2739: Translator;

    self_3021 = self_3020;
    other_2739 = other_2738;
    let _e4: Translator = self_3021;
    let _e6: Translator = other_2739;
    return Translator((_e4.g0_ * _e6.g0_));
}

fn translator_translator_div(self_3022: Translator, other_2740: Translator) -> Translator {
    var self_3023: Translator;
    var other_2741: Translator;

    self_3023 = self_3022;
    other_2741 = other_2740;
    let _e4: Translator = self_3023;
    let _e7: Translator = self_3023;
    let _e10: Translator = self_3023;
    let _e13: Translator = self_3023;
    let _e23: Translator = other_2741;
    let _e26: Translator = other_2741;
    let _e29: Translator = other_2741;
    let _e32: Translator = other_2741;
    return Translator((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn translator_translator_geometric_product(self_3024: Translator, other_2742: Translator) -> MultiVector {
    var self_3025: Translator;
    var other_2743: Translator;

    self_3025 = self_3024;
    other_2743 = other_2742;
    let _e4: Translator = self_3025;
    let _e8: Translator = other_2743;
    let _e17: Translator = self_3025;
    let _e21: Translator = other_2743;
    let _e31: Translator = self_3025;
    let _e35: Translator = other_2743;
    let _e47: Translator = self_3025;
    let _e51: Translator = other_2743;
    let _e54: Translator = other_2743;
    let _e57: Translator = other_2743;
    let _e62: Translator = self_3025;
    let _e65: Translator = self_3025;
    let _e68: Translator = self_3025;
    let _e72: Translator = other_2743;
    let _e78: Translator = self_3025;
    let _e82: Translator = other_2743;
    let _e85: Translator = other_2743;
    let _e88: Translator = other_2743;
    let _e98: Translator = self_3025;
    let _e102: Translator = other_2743;
    let _e105: Translator = other_2743;
    let _e108: Translator = other_2743;
    let _e119: Translator = self_3025;
    let _e123: Translator = other_2743;
    let _e126: Translator = other_2743;
    let _e129: Translator = other_2743;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)) + (vec3<f32>(_e62.g0_.x, _e65.g0_.y, _e68.g0_.z) * vec3(_e72.g0_.w))), ((((vec3(_e78.g0_.y) * vec3<f32>(_e82.g0_.z, _e85.g0_.z, _e88.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e98.g0_.z) * vec3<f32>(_e102.g0_.y, _e105.g0_.x, _e108.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e119.g0_.x) * vec3<f32>(_e123.g0_.x, _e126.g0_.z, _e129.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), vec4(0.0));
}

fn translator_translator_geometric_anti_product(self_3026: Translator, other_2744: Translator) -> Translator {
    var self_3027: Translator;
    var other_2745: Translator;

    self_3027 = self_3026;
    other_2745 = other_2744;
    let _e4: Translator = self_3027;
    let _e8: Translator = other_2745;
    let _e11: Translator = self_3027;
    let _e14: Translator = other_2745;
    return Translator(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_regressive_product(self_3028: Translator, other_2746: Translator) -> Translator {
    var self_3029: Translator;
    var other_2747: Translator;

    self_3029 = self_3028;
    other_2747 = other_2746;
    let _e4: Translator = self_3029;
    let _e8: Translator = other_2747;
    let _e11: Translator = self_3029;
    let _e14: Translator = other_2747;
    return Translator(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_anti_wedge(self_3030: Translator, other_2748: Translator) -> Translator {
    var self_3031: Translator;
    var other_2749: Translator;

    self_3031 = self_3030;
    other_2749 = other_2748;
    let _e4: Translator = self_3031;
    let _e8: Translator = other_2749;
    let _e11: Translator = self_3031;
    let _e14: Translator = other_2749;
    return Translator(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_meet(self_3032: Translator, other_2750: Translator) -> Translator {
    var self_3033: Translator;
    var other_2751: Translator;

    self_3033 = self_3032;
    other_2751 = other_2750;
    let _e4: Translator = self_3033;
    let _e8: Translator = other_2751;
    let _e11: Translator = self_3033;
    let _e14: Translator = other_2751;
    return Translator(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_inner_product(self_3034: Translator, other_2752: Translator) -> MultiVector {
    var self_3035: Translator;
    var other_2753: Translator;

    self_3035 = self_3034;
    other_2753 = other_2752;
    let _e4: Translator = self_3035;
    let _e8: Translator = other_2753;
    let _e17: Translator = self_3035;
    let _e21: Translator = other_2753;
    let _e31: Translator = self_3035;
    let _e35: Translator = other_2753;
    let _e47: Translator = self_3035;
    let _e51: Translator = other_2753;
    let _e54: Translator = other_2753;
    let _e57: Translator = other_2753;
    let _e62: Translator = self_3035;
    let _e65: Translator = self_3035;
    let _e68: Translator = self_3035;
    let _e72: Translator = other_2753;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), ((vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)) + (vec3<f32>(_e62.g0_.x, _e65.g0_.y, _e68.g0_.z) * vec3(_e72.g0_.w))), vec3(0.0), vec4(0.0));
}

fn translator_translator_inner_anti_product(self_3036: Translator, other_2754: Translator) -> Translator {
    var self_3037: Translator;
    var other_2755: Translator;

    self_3037 = self_3036;
    other_2755 = other_2754;
    let _e4: Translator = self_3037;
    let _e8: Translator = other_2755;
    let _e11: Translator = self_3037;
    let _e14: Translator = other_2755;
    return Translator(((vec4(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_left_contraction(self_3038: Translator, other_2756: Translator) -> MultiVector {
    var self_3039: Translator;
    var other_2757: Translator;

    self_3039 = self_3038;
    other_2757 = other_2756;
    let _e4: Translator = self_3039;
    let _e8: Translator = other_2757;
    let _e17: Translator = self_3039;
    let _e21: Translator = other_2757;
    let _e31: Translator = self_3039;
    let _e35: Translator = other_2757;
    let _e47: Translator = self_3039;
    let _e50: Translator = self_3039;
    let _e53: Translator = self_3039;
    let _e57: Translator = other_2757;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.z) * vec3(_e57.g0_.w)), vec3(0.0), vec4(0.0));
}

fn translator_translator_right_contraction(self_3040: Translator, other_2758: Translator) -> MultiVector {
    var self_3041: Translator;
    var other_2759: Translator;

    self_3041 = self_3040;
    other_2759 = other_2758;
    let _e4: Translator = self_3041;
    let _e8: Translator = other_2759;
    let _e17: Translator = self_3041;
    let _e21: Translator = other_2759;
    let _e31: Translator = self_3041;
    let _e35: Translator = other_2759;
    let _e47: Translator = self_3041;
    let _e51: Translator = other_2759;
    let _e54: Translator = other_2759;
    let _e57: Translator = other_2759;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), vec4(0.0), (vec3(_e47.g0_.w) * vec3<f32>(_e51.g0_.x, _e54.g0_.y, _e57.g0_.z)), vec3(0.0), vec4(0.0));
}

fn translator_translator_left_anti_contraction(self_3042: Translator, other_2760: Translator) -> Translator {
    var self_3043: Translator;
    var other_2761: Translator;

    self_3043 = self_3042;
    other_2761 = other_2760;
    let _e4: Translator = self_3043;
    let _e8: Translator = other_2761;
    return Translator((vec4(_e4.g0_.w) * _e8.g0_));
}

fn translator_translator_right_anti_contraction(self_3044: Translator, other_2762: Translator) -> Translator {
    var self_3045: Translator;
    var other_2763: Translator;

    self_3045 = self_3044;
    other_2763 = other_2762;
    let _e4: Translator = self_3045;
    let _e6: Translator = other_2763;
    return Translator((_e4.g0_ * vec4(_e6.g0_.w)));
}

fn translator_translator_scalar_product(self_3046: Translator, other_2764: Translator) -> Scalar {
    var self_3047: Translator;
    var other_2765: Translator;

    self_3047 = self_3046;
    other_2765 = other_2764;
    let _e5: Translator = self_3047;
    let _e8: Translator = other_2765;
    let _e13: Translator = self_3047;
    let _e16: Translator = other_2765;
    let _e21: Translator = self_3047;
    let _e24: Translator = other_2765;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_translator_dot(self_3048: Translator, other_2766: Translator) -> Scalar {
    var self_3049: Translator;
    var other_2767: Translator;

    self_3049 = self_3048;
    other_2767 = other_2766;
    let _e5: Translator = self_3049;
    let _e8: Translator = other_2767;
    let _e13: Translator = self_3049;
    let _e16: Translator = other_2767;
    let _e21: Translator = self_3049;
    let _e24: Translator = other_2767;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_translator_anti_scalar_product(self_3050: Translator, other_2768: Translator) -> AntiScalar {
    var self_3051: Translator;
    var other_2769: Translator;

    self_3051 = self_3050;
    other_2769 = other_2768;
    let _e4: Translator = self_3051;
    let _e7: Translator = other_2769;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_translator_anti_dot(self_3052: Translator, other_2770: Translator) -> AntiScalar {
    var self_3053: Translator;
    var other_2771: Translator;

    self_3053 = self_3052;
    other_2771 = other_2770;
    let _e4: Translator = self_3053;
    let _e7: Translator = other_2771;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_flector_geometric_product(self_3054: Translator, other_2772: Flector) -> Flector {
    var self_3055: Translator;
    var other_2773: Flector;

    self_3055 = self_3054;
    other_2773 = other_2772;
    let _e4: Translator = self_3055;
    let _e8: Flector = other_2773;
    let _e11: Flector = other_2773;
    let _e14: Flector = other_2773;
    let _e17: Flector = other_2773;
    let _e28: Translator = self_3055;
    let _e32: Flector = other_2773;
    let _e35: Flector = other_2773;
    let _e38: Flector = other_2773;
    let _e41: Flector = other_2773;
    let _e53: Translator = self_3055;
    let _e57: Flector = other_2773;
    let _e60: Flector = other_2773;
    let _e63: Flector = other_2773;
    let _e66: Flector = other_2773;
    let _e78: Translator = self_3055;
    let _e81: Flector = other_2773;
    let _e92: Translator = self_3055;
    let _e96: Flector = other_2773;
    let _e99: Flector = other_2773;
    let _e102: Flector = other_2773;
    let _e105: Flector = other_2773;
    let _e116: Translator = self_3055;
    let _e120: Flector = other_2773;
    let _e123: Flector = other_2773;
    let _e126: Flector = other_2773;
    let _e129: Flector = other_2773;
    let _e141: Translator = self_3055;
    let _e145: Flector = other_2773;
    let _e148: Flector = other_2773;
    let _e151: Flector = other_2773;
    let _e154: Flector = other_2773;
    let _e166: Translator = self_3055;
    let _e169: Flector = other_2773;
    return Flector((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g1_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g1_.w, _e66.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e78.g0_.xxxw * _e81.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec4(_e92.g0_.x) * vec4<f32>(_e96.g0_.w, _e99.g1_.z, _e102.g1_.y, _e105.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e116.g0_.y) * vec4<f32>(_e120.g1_.z, _e123.g0_.w, _e126.g1_.x, _e129.g0_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e141.g0_.z) * vec4<f32>(_e145.g1_.y, _e148.g1_.x, _e151.g0_.w, _e154.g0_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e166.g0_.wwwx * _e169.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn translator_flector_geometric_anti_product(self_3056: Translator, other_2774: Flector) -> Flector {
    var self_3057: Translator;
    var other_2775: Flector;

    self_3057 = self_3056;
    other_2775 = other_2774;
    let _e4: Translator = self_3057;
    let _e8: Flector = other_2775;
    let _e11: Flector = other_2775;
    let _e14: Flector = other_2775;
    let _e17: Flector = other_2775;
    let _e28: Translator = self_3057;
    let _e32: Flector = other_2775;
    let _e35: Flector = other_2775;
    let _e38: Flector = other_2775;
    let _e41: Flector = other_2775;
    let _e53: Translator = self_3057;
    let _e57: Flector = other_2775;
    let _e61: Translator = self_3057;
    let _e65: Flector = other_2775;
    let _e68: Flector = other_2775;
    let _e71: Flector = other_2775;
    let _e74: Flector = other_2775;
    let _e86: Translator = self_3057;
    let _e90: Flector = other_2775;
    let _e101: Translator = self_3057;
    let _e105: Flector = other_2775;
    let _e117: Translator = self_3057;
    let _e121: Flector = other_2775;
    let _e125: Translator = self_3057;
    let _e129: Flector = other_2775;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g0_.w, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g0_.w, _e41.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + (vec4(_e53.g0_.w) * _e57.g0_)) + ((vec4(_e61.g0_.x) * vec4<f32>(_e65.g0_.w, _e68.g1_.z, _e71.g1_.y, _e74.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), (((((vec4(_e86.g0_.y) * vec4(_e90.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e101.g0_.z) * vec4(_e105.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e117.g0_.w) * _e121.g1_)) + ((vec4(_e125.g0_.x) * vec4(_e129.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_regressive_product(self_3058: Translator, other_2776: Flector) -> Flector {
    var self_3059: Translator;
    var other_2777: Flector;

    self_3059 = self_3058;
    other_2777 = other_2776;
    let _e4: Translator = self_3059;
    let _e8: Flector = other_2777;
    let _e18: Translator = self_3059;
    let _e22: Flector = other_2777;
    let _e33: Translator = self_3059;
    let _e37: Flector = other_2777;
    let _e41: Translator = self_3059;
    let _e45: Flector = other_2777;
    let _e56: Translator = self_3059;
    let _e60: Flector = other_2777;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn translator_flector_anti_wedge(self_3060: Translator, other_2778: Flector) -> Flector {
    var self_3061: Translator;
    var other_2779: Flector;

    self_3061 = self_3060;
    other_2779 = other_2778;
    let _e4: Translator = self_3061;
    let _e8: Flector = other_2779;
    let _e18: Translator = self_3061;
    let _e22: Flector = other_2779;
    let _e33: Translator = self_3061;
    let _e37: Flector = other_2779;
    let _e41: Translator = self_3061;
    let _e45: Flector = other_2779;
    let _e56: Translator = self_3061;
    let _e60: Flector = other_2779;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn translator_flector_meet(self_3062: Translator, other_2780: Flector) -> Flector {
    var self_3063: Translator;
    var other_2781: Flector;

    self_3063 = self_3062;
    other_2781 = other_2780;
    let _e4: Translator = self_3063;
    let _e8: Flector = other_2781;
    let _e18: Translator = self_3063;
    let _e22: Flector = other_2781;
    let _e33: Translator = self_3063;
    let _e37: Flector = other_2781;
    let _e41: Translator = self_3063;
    let _e45: Flector = other_2781;
    let _e56: Translator = self_3063;
    let _e60: Flector = other_2781;
    return Flector((((((vec4(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e33.g0_.w) * _e37.g0_)) + ((vec4(_e41.g0_.x) * _e45.g1_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec4(_e56.g0_.w) * _e60.g1_));
}

fn translator_flector_outer_product(self_3064: Translator, other_2782: Flector) -> Plane {
    var self_3065: Translator;
    var other_2783: Flector;

    self_3065 = self_3064;
    other_2783 = other_2782;
    let _e4: Translator = self_3065;
    let _e8: Flector = other_2783;
    let _e18: Translator = self_3065;
    let _e22: Flector = other_2783;
    let _e33: Translator = self_3065;
    let _e37: Flector = other_2783;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_wedge(self_3066: Translator, other_2784: Flector) -> Plane {
    var self_3067: Translator;
    var other_2785: Flector;

    self_3067 = self_3066;
    other_2785 = other_2784;
    let _e4: Translator = self_3067;
    let _e8: Flector = other_2785;
    let _e18: Translator = self_3067;
    let _e22: Flector = other_2785;
    let _e33: Translator = self_3067;
    let _e37: Flector = other_2785;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_join(self_3068: Translator, other_2786: Flector) -> Plane {
    var self_3069: Translator;
    var other_2787: Flector;

    self_3069 = self_3068;
    other_2787 = other_2786;
    let _e4: Translator = self_3069;
    let _e8: Flector = other_2787;
    let _e18: Translator = self_3069;
    let _e22: Flector = other_2787;
    let _e33: Translator = self_3069;
    let _e37: Flector = other_2787;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_inner_product(self_3070: Translator, other_2788: Flector) -> Flector {
    var self_3071: Translator;
    var other_2789: Flector;

    self_3071 = self_3070;
    other_2789 = other_2788;
    let _e4: Translator = self_3071;
    let _e8: Flector = other_2789;
    let _e11: Flector = other_2789;
    let _e14: Flector = other_2789;
    let _e17: Flector = other_2789;
    let _e28: Translator = self_3071;
    let _e32: Flector = other_2789;
    let _e35: Flector = other_2789;
    let _e38: Flector = other_2789;
    let _e41: Flector = other_2789;
    let _e53: Translator = self_3071;
    let _e57: Flector = other_2789;
    let _e60: Flector = other_2789;
    let _e63: Flector = other_2789;
    let _e66: Flector = other_2789;
    let _e78: Translator = self_3071;
    let _e81: Flector = other_2789;
    let _e92: Translator = self_3071;
    let _e95: Flector = other_2789;
    return Flector((((((vec4(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e28.g0_.y) * vec4<f32>(_e32.g0_.z, _e35.g1_.w, _e38.g0_.x, _e41.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e53.g0_.z) * vec4<f32>(_e57.g0_.y, _e60.g0_.x, _e63.g1_.w, _e66.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e78.g0_.xxxw * _e81.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((_e92.g0_.wwwx * _e95.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_flector_inner_anti_product(self_3072: Translator, other_2790: Flector) -> Flector {
    var self_3073: Translator;
    var other_2791: Flector;

    self_3073 = self_3072;
    other_2791 = other_2790;
    let _e4: Translator = self_3073;
    let _e8: Flector = other_2791;
    let _e11: Translator = self_3073;
    let _e15: Flector = other_2791;
    let _e26: Translator = self_3073;
    let _e30: Flector = other_2791;
    let _e42: Translator = self_3073;
    let _e46: Flector = other_2791;
    let _e50: Translator = self_3073;
    let _e54: Flector = other_2791;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), (((((vec4(_e11.g0_.y) * vec4(_e15.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e42.g0_.w) * _e46.g1_)) + ((vec4(_e50.g0_.x) * vec4(_e54.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_left_contraction(self_3074: Translator, other_2792: Flector) -> Point {
    var self_3075: Translator;
    var other_2793: Flector;

    self_3075 = self_3074;
    other_2793 = other_2792;
    let _e4: Translator = self_3075;
    let _e8: Flector = other_2793;
    let _e18: Translator = self_3075;
    let _e22: Flector = other_2793;
    let _e33: Translator = self_3075;
    let _e37: Flector = other_2793;
    return Point(((((vec4(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e18.g0_.z) * _e22.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e33.g0_.x) * _e37.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_flector_right_contraction(self_3076: Translator, other_2794: Flector) -> Flector {
    var self_3077: Translator;
    var other_2795: Flector;

    self_3077 = self_3076;
    other_2795 = other_2794;
    let _e4: Translator = self_3077;
    let _e8: Flector = other_2795;
    let _e18: Translator = self_3077;
    let _e22: Flector = other_2795;
    let _e33: Translator = self_3077;
    let _e36: Flector = other_2795;
    let _e39: Flector = other_2795;
    let _e42: Flector = other_2795;
    let _e45: Flector = other_2795;
    let _e57: Translator = self_3077;
    let _e60: Flector = other_2795;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((_e33.g0_.xxxw * vec4<f32>(_e36.g0_.x, _e39.g0_.z, _e42.g0_.y, _e45.g1_.w)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e57.g0_.wwwx * _e60.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_flector_left_anti_contraction(self_3078: Translator, other_2796: Flector) -> Flector {
    var self_3079: Translator;
    var other_2797: Flector;

    self_3079 = self_3078;
    other_2797 = other_2796;
    let _e4: Translator = self_3079;
    let _e8: Flector = other_2797;
    let _e11: Translator = self_3079;
    let _e15: Flector = other_2797;
    return Flector((vec4(_e4.g0_.w) * _e8.g0_), (vec4(_e11.g0_.w) * _e15.g1_));
}

fn translator_flector_right_anti_contraction(self_3080: Translator, other_2798: Flector) -> Plane {
    var self_3081: Translator;
    var other_2799: Flector;

    self_3081 = self_3080;
    other_2799 = other_2798;
    let _e4: Translator = self_3081;
    let _e8: Flector = other_2799;
    let _e19: Translator = self_3081;
    let _e23: Flector = other_2799;
    let _e35: Translator = self_3081;
    let _e39: Flector = other_2799;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g0_.x) * vec4(_e39.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_add(self_3082: Translator, other_2800: MultiVector) -> MultiVector {
    var self_3083: Translator;
    var other_2801: MultiVector;

    self_3083 = self_3082;
    other_2801 = other_2800;
    let _e4: Translator = self_3083;
    let _e7: Translator = self_3083;
    let _e15: MultiVector = other_2801;
    let _e18: MultiVector = other_2801;
    let _e20: MultiVector = other_2801;
    let _e22: Translator = self_3083;
    let _e25: Translator = self_3083;
    let _e28: Translator = self_3083;
    let _e32: MultiVector = other_2801;
    let _e35: MultiVector = other_2801;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, _e20.g2_, (vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z) + _e32.g3_), _e35.g4_);
}

fn translator_multi_vector_sub(self_3084: Translator, other_2802: MultiVector) -> MultiVector {
    var self_3085: Translator;
    var other_2803: MultiVector;

    self_3085 = self_3084;
    other_2803 = other_2802;
    let _e4: Translator = self_3085;
    let _e7: Translator = self_3085;
    let _e15: MultiVector = other_2803;
    let _e20: MultiVector = other_2803;
    let _e25: MultiVector = other_2803;
    let _e28: Translator = self_3085;
    let _e31: Translator = self_3085;
    let _e34: Translator = self_3085;
    let _e38: MultiVector = other_2803;
    let _e43: MultiVector = other_2803;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4(0.0) - _e20.g1_), (vec3(0.0) - _e25.g2_), (vec3<f32>(_e28.g0_.x, _e31.g0_.y, _e34.g0_.z) - _e38.g3_), (vec4(0.0) - _e43.g4_));
}

fn translator_multi_vector_geometric_product(self_3086: Translator, other_2804: MultiVector) -> MultiVector {
    var self_3087: Translator;
    var other_2805: MultiVector;

    self_3087 = self_3086;
    other_2805 = other_2804;
    let _e6: Translator = self_3087;
    let _e10: MultiVector = other_2805;
    let _e13: MultiVector = other_2805;
    let _e19: Translator = self_3087;
    let _e23: MultiVector = other_2805;
    let _e26: MultiVector = other_2805;
    let _e32: Translator = self_3087;
    let _e36: MultiVector = other_2805;
    let _e39: MultiVector = other_2805;
    let _e45: Translator = self_3087;
    let _e48: Translator = self_3087;
    let _e52: MultiVector = other_2805;
    let _e62: Translator = self_3087;
    let _e66: MultiVector = other_2805;
    let _e69: MultiVector = other_2805;
    let _e72: MultiVector = other_2805;
    let _e75: MultiVector = other_2805;
    let _e86: Translator = self_3087;
    let _e90: MultiVector = other_2805;
    let _e93: MultiVector = other_2805;
    let _e96: MultiVector = other_2805;
    let _e99: MultiVector = other_2805;
    let _e111: Translator = self_3087;
    let _e115: MultiVector = other_2805;
    let _e118: MultiVector = other_2805;
    let _e121: MultiVector = other_2805;
    let _e124: MultiVector = other_2805;
    let _e136: Translator = self_3087;
    let _e139: MultiVector = other_2805;
    let _e150: Translator = self_3087;
    let _e154: MultiVector = other_2805;
    let _e157: MultiVector = other_2805;
    let _e160: MultiVector = other_2805;
    let _e170: Translator = self_3087;
    let _e174: MultiVector = other_2805;
    let _e177: MultiVector = other_2805;
    let _e180: MultiVector = other_2805;
    let _e191: Translator = self_3087;
    let _e195: MultiVector = other_2805;
    let _e198: MultiVector = other_2805;
    let _e201: MultiVector = other_2805;
    let _e212: Translator = self_3087;
    let _e216: MultiVector = other_2805;
    let _e220: Translator = self_3087;
    let _e224: MultiVector = other_2805;
    let _e227: MultiVector = other_2805;
    let _e230: MultiVector = other_2805;
    let _e240: Translator = self_3087;
    let _e244: MultiVector = other_2805;
    let _e247: MultiVector = other_2805;
    let _e250: MultiVector = other_2805;
    let _e261: Translator = self_3087;
    let _e265: MultiVector = other_2805;
    let _e268: MultiVector = other_2805;
    let _e271: MultiVector = other_2805;
    let _e282: Translator = self_3087;
    let _e286: MultiVector = other_2805;
    let _e289: MultiVector = other_2805;
    let _e292: MultiVector = other_2805;
    let _e295: MultiVector = other_2805;
    let _e306: Translator = self_3087;
    let _e310: MultiVector = other_2805;
    let _e313: MultiVector = other_2805;
    let _e316: MultiVector = other_2805;
    let _e319: MultiVector = other_2805;
    let _e331: Translator = self_3087;
    let _e335: MultiVector = other_2805;
    let _e338: MultiVector = other_2805;
    let _e341: MultiVector = other_2805;
    let _e344: MultiVector = other_2805;
    let _e356: Translator = self_3087;
    let _e359: MultiVector = other_2805;
    return MultiVector(((((vec2(0.0) - (vec2(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2(_e52.g0_.x)) * vec2<f32>(0.0, 1.0))), (((((vec4(_e62.g0_.x) * vec4<f32>(_e66.g4_.w, _e69.g1_.z, _e72.g1_.y, _e75.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e86.g0_.y) * vec4<f32>(_e90.g1_.z, _e93.g4_.w, _e96.g1_.x, _e99.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e111.g0_.z) * vec4<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g4_.w, _e124.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e136.g0_.xxxw * _e139.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec3(_e150.g0_.x) * vec3<f32>(_e154.g0_.y, _e157.g2_.z, _e160.g2_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e170.g0_.y) * vec3<f32>(_e174.g2_.z, _e177.g0_.y, _e180.g2_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e191.g0_.z) * vec3<f32>(_e195.g2_.y, _e198.g2_.x, _e201.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + (vec3(_e212.g0_.w) * _e216.g3_)), ((((vec3(_e220.g0_.x) * vec3<f32>(_e224.g0_.x, _e227.g3_.z, _e230.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0)) + ((vec3(_e240.g0_.y) * vec3<f32>(_e244.g3_.z, _e247.g0_.x, _e250.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e261.g0_.z) * vec3<f32>(_e265.g3_.y, _e268.g3_.x, _e271.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))), (((((vec4(_e282.g0_.x) * vec4<f32>(_e286.g1_.w, _e289.g4_.z, _e292.g4_.y, _e295.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e306.g0_.y) * vec4<f32>(_e310.g4_.z, _e313.g1_.w, _e316.g4_.x, _e319.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e331.g0_.z) * vec4<f32>(_e335.g4_.y, _e338.g4_.x, _e341.g1_.w, _e344.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e356.g0_.wwwx * _e359.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn translator_multi_vector_geometric_anti_product(self_3088: Translator, other_2806: MultiVector) -> MultiVector {
    var self_3089: Translator;
    var other_2807: MultiVector;

    self_3089 = self_3088;
    other_2807 = other_2806;
    let _e4: Translator = self_3089;
    let _e8: MultiVector = other_2807;
    let _e17: Translator = self_3089;
    let _e21: MultiVector = other_2807;
    let _e31: Translator = self_3089;
    let _e35: MultiVector = other_2807;
    let _e39: Translator = self_3089;
    let _e43: MultiVector = other_2807;
    let _e53: Translator = self_3089;
    let _e57: MultiVector = other_2807;
    let _e60: MultiVector = other_2807;
    let _e63: MultiVector = other_2807;
    let _e66: MultiVector = other_2807;
    let _e77: Translator = self_3089;
    let _e81: MultiVector = other_2807;
    let _e84: MultiVector = other_2807;
    let _e87: MultiVector = other_2807;
    let _e90: MultiVector = other_2807;
    let _e102: Translator = self_3089;
    let _e106: MultiVector = other_2807;
    let _e110: Translator = self_3089;
    let _e114: MultiVector = other_2807;
    let _e117: MultiVector = other_2807;
    let _e120: MultiVector = other_2807;
    let _e123: MultiVector = other_2807;
    let _e135: Translator = self_3089;
    let _e139: MultiVector = other_2807;
    let _e142: Translator = self_3089;
    let _e146: MultiVector = other_2807;
    let _e149: MultiVector = other_2807;
    let _e152: MultiVector = other_2807;
    let _e162: Translator = self_3089;
    let _e166: MultiVector = other_2807;
    let _e169: MultiVector = other_2807;
    let _e172: MultiVector = other_2807;
    let _e183: Translator = self_3089;
    let _e187: MultiVector = other_2807;
    let _e190: MultiVector = other_2807;
    let _e193: MultiVector = other_2807;
    let _e204: Translator = self_3089;
    let _e208: MultiVector = other_2807;
    let _e212: Translator = self_3089;
    let _e216: MultiVector = other_2807;
    let _e227: Translator = self_3089;
    let _e231: MultiVector = other_2807;
    let _e243: Translator = self_3089;
    let _e247: MultiVector = other_2807;
    let _e251: Translator = self_3089;
    let _e255: MultiVector = other_2807;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * vec4<f32>(_e57.g4_.z, _e60.g1_.w, _e63.g4_.x, _e66.g4_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e77.g0_.z) * vec4<f32>(_e81.g4_.y, _e84.g4_.x, _e87.g1_.w, _e90.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + (vec4(_e102.g0_.w) * _e106.g1_)) + ((vec4(_e110.g0_.x) * vec4<f32>(_e114.g1_.w, _e117.g4_.z, _e120.g4_.y, _e123.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), (vec3(_e135.g0_.w) * _e139.g2_), (((((vec3(_e142.g0_.x) * vec3<f32>(_e146.g0_.y, _e149.g2_.z, _e152.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0)) + ((vec3(_e162.g0_.y) * vec3<f32>(_e166.g2_.z, _e169.g0_.y, _e172.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e183.g0_.z) * vec3<f32>(_e187.g2_.y, _e190.g2_.x, _e193.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))) + (vec3(_e204.g0_.w) * _e208.g3_)), (((((vec4(_e212.g0_.y) * vec4(_e216.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e227.g0_.z) * vec4(_e231.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e243.g0_.w) * _e247.g4_)) + ((vec4(_e251.g0_.x) * vec4(_e255.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_regressive_product(self_3090: Translator, other_2808: MultiVector) -> MultiVector {
    var self_3091: Translator;
    var other_2809: MultiVector;

    self_3091 = self_3090;
    other_2809 = other_2808;
    let _e4: Translator = self_3091;
    let _e8: MultiVector = other_2809;
    let _e17: Translator = self_3091;
    let _e21: MultiVector = other_2809;
    let _e31: Translator = self_3091;
    let _e35: MultiVector = other_2809;
    let _e39: Translator = self_3091;
    let _e43: MultiVector = other_2809;
    let _e53: Translator = self_3091;
    let _e57: MultiVector = other_2809;
    let _e67: Translator = self_3091;
    let _e71: MultiVector = other_2809;
    let _e82: Translator = self_3091;
    let _e86: MultiVector = other_2809;
    let _e90: Translator = self_3091;
    let _e94: MultiVector = other_2809;
    let _e105: Translator = self_3091;
    let _e109: MultiVector = other_2809;
    let _e112: Translator = self_3091;
    let _e116: MultiVector = other_2809;
    let _e119: Translator = self_3091;
    let _e122: Translator = self_3091;
    let _e125: Translator = self_3091;
    let _e129: MultiVector = other_2809;
    let _e135: Translator = self_3091;
    let _e139: MultiVector = other_2809;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec3(_e105.g0_.w) * _e109.g2_), ((vec3(_e112.g0_.w) * _e116.g3_) + (vec3<f32>(_e119.g0_.x, _e122.g0_.y, _e125.g0_.z) * vec3(_e129.g0_.y))), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn translator_multi_vector_anti_wedge(self_3092: Translator, other_2810: MultiVector) -> MultiVector {
    var self_3093: Translator;
    var other_2811: MultiVector;

    self_3093 = self_3092;
    other_2811 = other_2810;
    let _e4: Translator = self_3093;
    let _e8: MultiVector = other_2811;
    let _e17: Translator = self_3093;
    let _e21: MultiVector = other_2811;
    let _e31: Translator = self_3093;
    let _e35: MultiVector = other_2811;
    let _e39: Translator = self_3093;
    let _e43: MultiVector = other_2811;
    let _e53: Translator = self_3093;
    let _e57: MultiVector = other_2811;
    let _e67: Translator = self_3093;
    let _e71: MultiVector = other_2811;
    let _e82: Translator = self_3093;
    let _e86: MultiVector = other_2811;
    let _e90: Translator = self_3093;
    let _e94: MultiVector = other_2811;
    let _e105: Translator = self_3093;
    let _e109: MultiVector = other_2811;
    let _e112: Translator = self_3093;
    let _e116: MultiVector = other_2811;
    let _e119: Translator = self_3093;
    let _e122: Translator = self_3093;
    let _e125: Translator = self_3093;
    let _e129: MultiVector = other_2811;
    let _e135: Translator = self_3093;
    let _e139: MultiVector = other_2811;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec3(_e105.g0_.w) * _e109.g2_), ((vec3(_e112.g0_.w) * _e116.g3_) + (vec3<f32>(_e119.g0_.x, _e122.g0_.y, _e125.g0_.z) * vec3(_e129.g0_.y))), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn translator_multi_vector_meet(self_3094: Translator, other_2812: MultiVector) -> MultiVector {
    var self_3095: Translator;
    var other_2813: MultiVector;

    self_3095 = self_3094;
    other_2813 = other_2812;
    let _e4: Translator = self_3095;
    let _e8: MultiVector = other_2813;
    let _e17: Translator = self_3095;
    let _e21: MultiVector = other_2813;
    let _e31: Translator = self_3095;
    let _e35: MultiVector = other_2813;
    let _e39: Translator = self_3095;
    let _e43: MultiVector = other_2813;
    let _e53: Translator = self_3095;
    let _e57: MultiVector = other_2813;
    let _e67: Translator = self_3095;
    let _e71: MultiVector = other_2813;
    let _e82: Translator = self_3095;
    let _e86: MultiVector = other_2813;
    let _e90: Translator = self_3095;
    let _e94: MultiVector = other_2813;
    let _e105: Translator = self_3095;
    let _e109: MultiVector = other_2813;
    let _e112: Translator = self_3095;
    let _e116: MultiVector = other_2813;
    let _e119: Translator = self_3095;
    let _e122: Translator = self_3095;
    let _e125: Translator = self_3095;
    let _e129: MultiVector = other_2813;
    let _e135: Translator = self_3095;
    let _e139: MultiVector = other_2813;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(-1.0, 0.0))) + (vec2(_e31.g0_.w) * _e35.g0_)) + ((vec2(_e39.g0_.x) * vec2(_e43.g2_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e53.g0_.y) * _e57.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e67.g0_.z) * _e71.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + (vec4(_e82.g0_.w) * _e86.g1_)) + ((vec4(_e90.g0_.x) * _e94.g4_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (vec3(_e105.g0_.w) * _e109.g2_), ((vec3(_e112.g0_.w) * _e116.g3_) + (vec3<f32>(_e119.g0_.x, _e122.g0_.y, _e125.g0_.z) * vec3(_e129.g0_.y))), (vec4(_e135.g0_.w) * _e139.g4_));
}

fn translator_multi_vector_outer_product(self_3096: Translator, other_2814: MultiVector) -> MultiVector {
    var self_3097: Translator;
    var other_2815: MultiVector;

    self_3097 = self_3096;
    other_2815 = other_2814;
    let _e4: Translator = self_3097;
    let _e8: MultiVector = other_2815;
    let _e17: Translator = self_3097;
    let _e21: MultiVector = other_2815;
    let _e31: Translator = self_3097;
    let _e35: MultiVector = other_2815;
    let _e45: Translator = self_3097;
    let _e49: MultiVector = other_2815;
    let _e63: Translator = self_3097;
    let _e66: Translator = self_3097;
    let _e69: Translator = self_3097;
    let _e73: MultiVector = other_2815;
    let _e78: Translator = self_3097;
    let _e82: MultiVector = other_2815;
    let _e92: Translator = self_3097;
    let _e96: MultiVector = other_2815;
    let _e107: Translator = self_3097;
    let _e111: MultiVector = other_2815;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), (vec3<f32>(_e63.g0_.x, _e66.g0_.y, _e69.g0_.z) * vec3(_e73.g0_.x)), ((((vec4(_e78.g0_.y) * _e82.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_wedge(self_3098: Translator, other_2816: MultiVector) -> MultiVector {
    var self_3099: Translator;
    var other_2817: MultiVector;

    self_3099 = self_3098;
    other_2817 = other_2816;
    let _e4: Translator = self_3099;
    let _e8: MultiVector = other_2817;
    let _e17: Translator = self_3099;
    let _e21: MultiVector = other_2817;
    let _e31: Translator = self_3099;
    let _e35: MultiVector = other_2817;
    let _e45: Translator = self_3099;
    let _e49: MultiVector = other_2817;
    let _e63: Translator = self_3099;
    let _e66: Translator = self_3099;
    let _e69: Translator = self_3099;
    let _e73: MultiVector = other_2817;
    let _e78: Translator = self_3099;
    let _e82: MultiVector = other_2817;
    let _e92: Translator = self_3099;
    let _e96: MultiVector = other_2817;
    let _e107: Translator = self_3099;
    let _e111: MultiVector = other_2817;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), (vec3<f32>(_e63.g0_.x, _e66.g0_.y, _e69.g0_.z) * vec3(_e73.g0_.x)), ((((vec4(_e78.g0_.y) * _e82.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_join(self_3100: Translator, other_2818: MultiVector) -> MultiVector {
    var self_3101: Translator;
    var other_2819: MultiVector;

    self_3101 = self_3100;
    other_2819 = other_2818;
    let _e4: Translator = self_3101;
    let _e8: MultiVector = other_2819;
    let _e17: Translator = self_3101;
    let _e21: MultiVector = other_2819;
    let _e31: Translator = self_3101;
    let _e35: MultiVector = other_2819;
    let _e45: Translator = self_3101;
    let _e49: MultiVector = other_2819;
    let _e63: Translator = self_3101;
    let _e66: Translator = self_3101;
    let _e69: Translator = self_3101;
    let _e73: MultiVector = other_2819;
    let _e78: Translator = self_3101;
    let _e82: MultiVector = other_2819;
    let _e92: Translator = self_3101;
    let _e96: MultiVector = other_2819;
    let _e107: Translator = self_3101;
    let _e111: MultiVector = other_2819;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g2_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g2_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), (vec3<f32>(_e63.g0_.x, _e66.g0_.y, _e69.g0_.z) * vec3(_e73.g0_.x)), ((((vec4(_e78.g0_.y) * _e82.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e92.g0_.z) * _e96.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e107.g0_.x) * _e111.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_inner_product(self_3102: Translator, other_2820: MultiVector) -> MultiVector {
    var self_3103: Translator;
    var other_2821: MultiVector;

    self_3103 = self_3102;
    other_2821 = other_2820;
    let _e4: Translator = self_3103;
    let _e8: MultiVector = other_2821;
    let _e17: Translator = self_3103;
    let _e21: MultiVector = other_2821;
    let _e31: Translator = self_3103;
    let _e35: MultiVector = other_2821;
    let _e45: Translator = self_3103;
    let _e49: MultiVector = other_2821;
    let _e59: Translator = self_3103;
    let _e63: MultiVector = other_2821;
    let _e66: MultiVector = other_2821;
    let _e69: MultiVector = other_2821;
    let _e72: MultiVector = other_2821;
    let _e83: Translator = self_3103;
    let _e87: MultiVector = other_2821;
    let _e90: MultiVector = other_2821;
    let _e93: MultiVector = other_2821;
    let _e96: MultiVector = other_2821;
    let _e108: Translator = self_3103;
    let _e112: MultiVector = other_2821;
    let _e115: MultiVector = other_2821;
    let _e118: MultiVector = other_2821;
    let _e121: MultiVector = other_2821;
    let _e133: Translator = self_3103;
    let _e136: MultiVector = other_2821;
    let _e147: Translator = self_3103;
    let _e151: MultiVector = other_2821;
    let _e154: Translator = self_3103;
    let _e157: Translator = self_3103;
    let _e160: Translator = self_3103;
    let _e164: MultiVector = other_2821;
    let _e170: Translator = self_3103;
    let _e173: Translator = self_3103;
    let _e176: Translator = self_3103;
    let _e180: MultiVector = other_2821;
    let _e185: Translator = self_3103;
    let _e188: MultiVector = other_2821;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e59.g0_.x) * vec4<f32>(_e63.g4_.w, _e66.g1_.z, _e69.g1_.y, _e72.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e83.g0_.y) * vec4<f32>(_e87.g1_.z, _e90.g4_.w, _e93.g1_.x, _e96.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e108.g0_.z) * vec4<f32>(_e112.g1_.y, _e115.g1_.x, _e118.g4_.w, _e121.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((_e133.g0_.xxxw * _e136.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec3(_e147.g0_.w) * _e151.g3_) + (vec3<f32>(_e154.g0_.x, _e157.g0_.y, _e160.g0_.z) * vec3(_e164.g0_.y))), (vec3<f32>(_e170.g0_.x, _e173.g0_.y, _e176.g0_.z) * vec3(_e180.g0_.x)), ((_e185.g0_.wwwx * _e188.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_multi_vector_inner_anti_product(self_3104: Translator, other_2822: MultiVector) -> MultiVector {
    var self_3105: Translator;
    var other_2823: MultiVector;

    self_3105 = self_3104;
    other_2823 = other_2822;
    let _e4: Translator = self_3105;
    let _e8: MultiVector = other_2823;
    let _e11: Translator = self_3105;
    let _e15: MultiVector = other_2823;
    let _e18: Translator = self_3105;
    let _e22: MultiVector = other_2823;
    let _e25: Translator = self_3105;
    let _e29: MultiVector = other_2823;
    let _e32: Translator = self_3105;
    let _e35: Translator = self_3105;
    let _e38: Translator = self_3105;
    let _e42: MultiVector = other_2823;
    let _e48: Translator = self_3105;
    let _e52: MultiVector = other_2823;
    let _e63: Translator = self_3105;
    let _e67: MultiVector = other_2823;
    let _e79: Translator = self_3105;
    let _e83: MultiVector = other_2823;
    let _e87: Translator = self_3105;
    let _e91: MultiVector = other_2823;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), (vec4(_e11.g0_.w) * _e15.g1_), (vec3(_e18.g0_.w) * _e22.g2_), ((vec3(_e25.g0_.w) * _e29.g3_) + (vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z) * vec3(_e42.g0_.y))), (((((vec4(_e48.g0_.y) * vec4(_e52.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e63.g0_.z) * vec4(_e67.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e79.g0_.w) * _e83.g4_)) + ((vec4(_e87.g0_.x) * vec4(_e91.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_left_contraction(self_3106: Translator, other_2824: MultiVector) -> MultiVector {
    var self_3107: Translator;
    var other_2825: MultiVector;

    self_3107 = self_3106;
    other_2825 = other_2824;
    let _e4: Translator = self_3107;
    let _e8: MultiVector = other_2825;
    let _e17: Translator = self_3107;
    let _e21: MultiVector = other_2825;
    let _e31: Translator = self_3107;
    let _e35: MultiVector = other_2825;
    let _e45: Translator = self_3107;
    let _e49: MultiVector = other_2825;
    let _e59: Translator = self_3107;
    let _e63: MultiVector = other_2825;
    let _e74: Translator = self_3107;
    let _e78: MultiVector = other_2825;
    let _e89: Translator = self_3107;
    let _e92: Translator = self_3107;
    let _e95: Translator = self_3107;
    let _e99: MultiVector = other_2825;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g0_.y) * _e49.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e59.g0_.z) * _e63.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e74.g0_.x) * _e78.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), (vec3<f32>(_e89.g0_.x, _e92.g0_.y, _e95.g0_.z) * vec3(_e99.g0_.y)), vec3(0.0), vec4(0.0));
}

fn translator_multi_vector_right_contraction(self_3108: Translator, other_2826: MultiVector) -> MultiVector {
    var self_3109: Translator;
    var other_2827: MultiVector;

    self_3109 = self_3108;
    other_2827 = other_2826;
    let _e4: Translator = self_3109;
    let _e8: MultiVector = other_2827;
    let _e17: Translator = self_3109;
    let _e21: MultiVector = other_2827;
    let _e31: Translator = self_3109;
    let _e35: MultiVector = other_2827;
    let _e45: Translator = self_3109;
    let _e49: MultiVector = other_2827;
    let _e59: Translator = self_3109;
    let _e63: MultiVector = other_2827;
    let _e73: Translator = self_3109;
    let _e77: MultiVector = other_2827;
    let _e88: Translator = self_3109;
    let _e91: MultiVector = other_2827;
    let _e94: MultiVector = other_2827;
    let _e97: MultiVector = other_2827;
    let _e100: MultiVector = other_2827;
    let _e112: Translator = self_3109;
    let _e116: MultiVector = other_2827;
    let _e119: Translator = self_3109;
    let _e122: Translator = self_3109;
    let _e125: Translator = self_3109;
    let _e129: MultiVector = other_2827;
    let _e134: Translator = self_3109;
    let _e137: MultiVector = other_2827;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g3_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g3_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e59.g0_.y) * _e63.g1_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e73.g0_.z) * _e77.g1_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((_e88.g0_.xxxw * vec4<f32>(_e91.g1_.x, _e94.g1_.z, _e97.g1_.y, _e100.g4_.w)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(_e112.g0_.w) * _e116.g3_), (vec3<f32>(_e119.g0_.x, _e122.g0_.y, _e125.g0_.z) * vec3(_e129.g0_.x)), ((_e134.g0_.wwwx * _e137.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn translator_multi_vector_left_anti_contraction(self_3110: Translator, other_2828: MultiVector) -> MultiVector {
    var self_3111: Translator;
    var other_2829: MultiVector;

    self_3111 = self_3110;
    other_2829 = other_2828;
    let _e4: Translator = self_3111;
    let _e8: MultiVector = other_2829;
    let _e11: Translator = self_3111;
    let _e15: MultiVector = other_2829;
    let _e18: Translator = self_3111;
    let _e22: MultiVector = other_2829;
    let _e25: Translator = self_3111;
    let _e29: MultiVector = other_2829;
    let _e32: Translator = self_3111;
    let _e36: MultiVector = other_2829;
    return MultiVector((vec2(_e4.g0_.w) * _e8.g0_), (vec4(_e11.g0_.w) * _e15.g1_), (vec3(_e18.g0_.w) * _e22.g2_), (vec3(_e25.g0_.w) * _e29.g3_), (vec4(_e32.g0_.w) * _e36.g4_));
}

fn translator_multi_vector_right_anti_contraction(self_3112: Translator, other_2830: MultiVector) -> MultiVector {
    var self_3113: Translator;
    var other_2831: MultiVector;

    self_3113 = self_3112;
    other_2831 = other_2830;
    let _e4: Translator = self_3113;
    let _e7: Translator = self_3113;
    let _e11: MultiVector = other_2831;
    let _e22: Translator = self_3113;
    let _e25: Translator = self_3113;
    let _e28: Translator = self_3113;
    let _e32: MultiVector = other_2831;
    let _e37: Translator = self_3113;
    let _e41: MultiVector = other_2831;
    let _e52: Translator = self_3113;
    let _e56: MultiVector = other_2831;
    let _e68: Translator = self_3113;
    let _e72: MultiVector = other_2831;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * _e11.g0_) * vec2<f32>(0.0, 1.0)), vec4(0.0), vec3(0.0), (vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z) * vec3(_e32.g0_.y)), ((((vec4(_e37.g0_.y) * vec4(_e41.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e52.g0_.z) * vec4(_e56.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e68.g0_.x) * vec4(_e72.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn translator_multi_vector_scalar_product(self_3114: Translator, other_2832: MultiVector) -> Scalar {
    var self_3115: Translator;
    var other_2833: MultiVector;

    self_3115 = self_3114;
    other_2833 = other_2832;
    let _e5: Translator = self_3115;
    let _e8: MultiVector = other_2833;
    let _e13: Translator = self_3115;
    let _e16: MultiVector = other_2833;
    let _e21: Translator = self_3115;
    let _e24: MultiVector = other_2833;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g3_.x)) - (_e13.g0_.y * _e16.g3_.y)) - (_e21.g0_.z * _e24.g3_.z)));
}

fn translator_multi_vector_dot(self_3116: Translator, other_2834: MultiVector) -> Scalar {
    var self_3117: Translator;
    var other_2835: MultiVector;

    self_3117 = self_3116;
    other_2835 = other_2834;
    let _e5: Translator = self_3117;
    let _e8: MultiVector = other_2835;
    let _e13: Translator = self_3117;
    let _e16: MultiVector = other_2835;
    let _e21: Translator = self_3117;
    let _e24: MultiVector = other_2835;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g3_.x)) - (_e13.g0_.y * _e16.g3_.y)) - (_e21.g0_.z * _e24.g3_.z)));
}

fn translator_multi_vector_anti_scalar_product(self_3118: Translator, other_2836: MultiVector) -> AntiScalar {
    var self_3119: Translator;
    var other_2837: MultiVector;

    self_3119 = self_3118;
    other_2837 = other_2836;
    let _e4: Translator = self_3119;
    let _e7: MultiVector = other_2837;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_multi_vector_anti_dot(self_3120: Translator, other_2838: MultiVector) -> AntiScalar {
    var self_3121: Translator;
    var other_2839: MultiVector;

    self_3121 = self_3120;
    other_2839 = other_2838;
    let _e4: Translator = self_3121;
    let _e7: MultiVector = other_2839;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_squared_magnitude(self_3122: Translator) -> Scalar {
    var self_3123: Translator;

    self_3123 = self_3122;
    let _e2: Translator = self_3123;
    let _e3: Translator = self_3123;
    let _e4: Translator = translator_reversal(_e3);
    let _e5: Scalar = translator_translator_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_magnitude(self_3124: Translator) -> Scalar {
    var self_3125: Translator;

    self_3125 = self_3124;
    let _e2: Translator = self_3125;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_bulk_norm(self_3126: Translator) -> Scalar {
    var self_3127: Translator;

    self_3127 = self_3126;
    let _e2: Translator = self_3127;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_squared_anti_magnitude(self_3128: Translator) -> AntiScalar {
    var self_3129: Translator;

    self_3129 = self_3128;
    let _e2: Translator = self_3129;
    let _e3: Translator = self_3129;
    let _e4: Translator = translator_anti_reversal(_e3);
    let _e5: AntiScalar = translator_translator_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_weight_norm(self_3130: Translator) -> AntiScalar {
    var self_3131: Translator;

    self_3131 = self_3130;
    let _e2: Translator = self_3131;
    let _e3: AntiScalar = translator_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn translator_geometric_norm(self_3132: Translator) -> HomogeneousMagnitude {
    var self_3133: Translator;

    self_3133 = self_3132;
    let _e2: Translator = self_3133;
    let _e3: Scalar = translator_bulk_norm(_e2);
    let _e4: Translator = self_3133;
    let _e5: AntiScalar = translator_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn translator_scale(self_3134: Translator, other_2840: f32) -> Translator {
    var self_3135: Translator;
    var other_2841: f32;

    self_3135 = self_3134;
    other_2841 = other_2840;
    let _e4: Translator = self_3135;
    let _e5: f32 = other_2841;
    let _e7: Translator = translator_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn translator_signum(self_3136: Translator) -> Translator {
    var self_3137: Translator;

    self_3137 = self_3136;
    let _e2: Translator = self_3137;
    let _e3: Translator = self_3137;
    let _e4: Scalar = translator_magnitude(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn translator_inverse(self_3138: Translator) -> Translator {
    var self_3139: Translator;

    self_3139 = self_3138;
    let _e2: Translator = self_3139;
    let _e3: Translator = translator_reversal(_e2);
    let _e4: Translator = self_3139;
    let _e5: Scalar = translator_squared_magnitude(_e4);
    let _e10: Translator = translator_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn translator_unitize(self_3140: Translator) -> Translator {
    var self_3141: Translator;

    self_3141 = self_3140;
    let _e2: Translator = self_3141;
    let _e3: Translator = self_3141;
    let _e4: AntiScalar = translator_weight_norm(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn translator_attitude(self_3142: Translator) -> Flector {
    var self_3143: Translator;

    self_3143 = self_3142;
    let _e2: Translator = self_3143;
    let _e9: Flector = translator_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn flector_zero() -> Flector {
    return Flector(vec4(0.0), vec4(0.0));
}

fn flector_one() -> Flector {
    return Flector(vec4(0.0), vec4(0.0));
}

fn flector_neg(self_3144: Flector) -> Flector {
    var self_3145: Flector;

    self_3145 = self_3144;
    let _e2: Flector = self_3145;
    let _e7: Flector = self_3145;
    return Flector((_e2.g0_ * vec4(-1.0)), (_e7.g1_ * vec4(-1.0)));
}

fn flector_automorphism(self_3146: Flector) -> Flector {
    var self_3147: Flector;

    self_3147 = self_3146;
    let _e2: Flector = self_3147;
    let _e7: Flector = self_3147;
    return Flector((_e2.g0_ * vec4(-1.0)), (_e7.g1_ * vec4(-1.0)));
}

fn flector_reversal(self_3148: Flector) -> Flector {
    var self_3149: Flector;

    self_3149 = self_3148;
    let _e2: Flector = self_3149;
    let _e4: Flector = self_3149;
    return Flector(_e2.g0_, (_e4.g1_ * vec4(-1.0)));
}

fn flector_conjugation(self_3150: Flector) -> Flector {
    var self_3151: Flector;

    self_3151 = self_3150;
    let _e2: Flector = self_3151;
    let _e7: Flector = self_3151;
    return Flector((_e2.g0_ * vec4(-1.0)), _e7.g1_);
}

fn flector_dual(self_3152: Flector) -> Flector {
    var self_3153: Flector;

    self_3153 = self_3152;
    let _e2: Flector = self_3153;
    let _e7: Flector = self_3153;
    return Flector((_e2.g1_ * vec4(-1.0)), _e7.g0_);
}

fn flector_anti_reversal(self_3154: Flector) -> Flector {
    var self_3155: Flector;

    self_3155 = self_3154;
    let _e2: Flector = self_3155;
    let _e7: Flector = self_3155;
    return Flector((_e2.g0_ * vec4(-1.0)), _e7.g1_);
}

fn flector_right_complement(self_3156: Flector) -> Flector {
    var self_3157: Flector;

    self_3157 = self_3156;
    let _e2: Flector = self_3157;
    let _e7: Flector = self_3157;
    return Flector((_e2.g1_ * vec4(-1.0)), _e7.g0_);
}

fn flector_left_complement(self_3158: Flector) -> Flector {
    var self_3159: Flector;

    self_3159 = self_3158;
    let _e2: Flector = self_3159;
    let _e4: Flector = self_3159;
    return Flector(_e2.g1_, (_e4.g0_ * vec4(-1.0)));
}

fn flector_double_complement(self_3160: Flector) -> Flector {
    var self_3161: Flector;

    self_3161 = self_3160;
    let _e2: Flector = self_3161;
    let _e7: Flector = self_3161;
    return Flector((_e2.g0_ * vec4(-1.0)), (_e7.g1_ * vec4(-1.0)));
}

fn flector_scalar_geometric_product(self_3162: Flector, other_2842: Scalar) -> Flector {
    var self_3163: Flector;
    var other_2843: Scalar;

    self_3163 = self_3162;
    other_2843 = other_2842;
    let _e4: Flector = self_3163;
    let _e6: Scalar = other_2843;
    let _e10: Flector = self_3163;
    let _e12: Scalar = other_2843;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_geometric_anti_product(self_3164: Flector, other_2844: Scalar) -> Flector {
    var self_3165: Flector;
    var other_2845: Scalar;

    self_3165 = self_3164;
    other_2845 = other_2844;
    let _e4: Flector = self_3165;
    let _e7: Scalar = other_2845;
    let _e17: Flector = self_3165;
    let _e20: Scalar = other_2845;
    return Flector(((_e4.g1_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((_e17.g0_.xxxw * vec4(_e20.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn flector_scalar_outer_product(self_3166: Flector, other_2846: Scalar) -> Flector {
    var self_3167: Flector;
    var other_2847: Scalar;

    self_3167 = self_3166;
    other_2847 = other_2846;
    let _e4: Flector = self_3167;
    let _e6: Scalar = other_2847;
    let _e10: Flector = self_3167;
    let _e12: Scalar = other_2847;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_wedge(self_3168: Flector, other_2848: Scalar) -> Flector {
    var self_3169: Flector;
    var other_2849: Scalar;

    self_3169 = self_3168;
    other_2849 = other_2848;
    let _e4: Flector = self_3169;
    let _e6: Scalar = other_2849;
    let _e10: Flector = self_3169;
    let _e12: Scalar = other_2849;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_join(self_3170: Flector, other_2850: Scalar) -> Flector {
    var self_3171: Flector;
    var other_2851: Scalar;

    self_3171 = self_3170;
    other_2851 = other_2850;
    let _e4: Flector = self_3171;
    let _e6: Scalar = other_2851;
    let _e10: Flector = self_3171;
    let _e12: Scalar = other_2851;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_inner_product(self_3172: Flector, other_2852: Scalar) -> Flector {
    var self_3173: Flector;
    var other_2853: Scalar;

    self_3173 = self_3172;
    other_2853 = other_2852;
    let _e4: Flector = self_3173;
    let _e6: Scalar = other_2853;
    let _e10: Flector = self_3173;
    let _e12: Scalar = other_2853;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_inner_anti_product(self_3174: Flector, other_2854: Scalar) -> Flector {
    var self_3175: Flector;
    var other_2855: Scalar;

    self_3175 = self_3174;
    other_2855 = other_2854;
    let _e4: Flector = self_3175;
    let _e7: Scalar = other_2855;
    let _e17: Flector = self_3175;
    let _e20: Scalar = other_2855;
    return Flector(((_e4.g1_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((_e17.g0_.xxxw * vec4(_e20.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn flector_scalar_right_contraction(self_3176: Flector, other_2856: Scalar) -> Flector {
    var self_3177: Flector;
    var other_2857: Scalar;

    self_3177 = self_3176;
    other_2857 = other_2856;
    let _e4: Flector = self_3177;
    let _e6: Scalar = other_2857;
    let _e10: Flector = self_3177;
    let _e12: Scalar = other_2857;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_scalar_left_anti_contraction(self_3178: Flector, other_2858: Scalar) -> Flector {
    var self_3179: Flector;
    var other_2859: Scalar;

    self_3179 = self_3178;
    other_2859 = other_2858;
    let _e4: Flector = self_3179;
    let _e7: Scalar = other_2859;
    let _e17: Flector = self_3179;
    let _e20: Scalar = other_2859;
    return Flector(((_e4.g1_.xyzx * vec4(_e7.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((_e17.g0_.xxxw * vec4(_e20.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn flector_anti_scalar_geometric_product(self_3180: Flector, other_2860: AntiScalar) -> Flector {
    var self_3181: Flector;
    var other_2861: AntiScalar;

    self_3181 = self_3180;
    other_2861 = other_2860;
    let _e4: Flector = self_3181;
    let _e7: AntiScalar = other_2861;
    let _e17: Flector = self_3181;
    let _e20: AntiScalar = other_2861;
    return Flector(((_e4.g1_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), ((_e17.g0_.xyzx * vec4(_e20.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_anti_scalar_geometric_anti_product(self_3182: Flector, other_2862: AntiScalar) -> Flector {
    var self_3183: Flector;
    var other_2863: AntiScalar;

    self_3183 = self_3182;
    other_2863 = other_2862;
    let _e4: Flector = self_3183;
    let _e6: AntiScalar = other_2863;
    let _e10: Flector = self_3183;
    let _e12: AntiScalar = other_2863;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_anti_scalar_regressive_product(self_3184: Flector, other_2864: AntiScalar) -> Flector {
    var self_3185: Flector;
    var other_2865: AntiScalar;

    self_3185 = self_3184;
    other_2865 = other_2864;
    let _e4: Flector = self_3185;
    let _e6: AntiScalar = other_2865;
    let _e10: Flector = self_3185;
    let _e12: AntiScalar = other_2865;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_anti_scalar_anti_wedge(self_3186: Flector, other_2866: AntiScalar) -> Flector {
    var self_3187: Flector;
    var other_2867: AntiScalar;

    self_3187 = self_3186;
    other_2867 = other_2866;
    let _e4: Flector = self_3187;
    let _e6: AntiScalar = other_2867;
    let _e10: Flector = self_3187;
    let _e12: AntiScalar = other_2867;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_anti_scalar_meet(self_3188: Flector, other_2868: AntiScalar) -> Flector {
    var self_3189: Flector;
    var other_2869: AntiScalar;

    self_3189 = self_3188;
    other_2869 = other_2868;
    let _e4: Flector = self_3189;
    let _e6: AntiScalar = other_2869;
    let _e10: Flector = self_3189;
    let _e12: AntiScalar = other_2869;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_anti_scalar_inner_product(self_3190: Flector, other_2870: AntiScalar) -> Flector {
    var self_3191: Flector;
    var other_2871: AntiScalar;

    self_3191 = self_3190;
    other_2871 = other_2870;
    let _e4: Flector = self_3191;
    let _e7: AntiScalar = other_2871;
    let _e17: Flector = self_3191;
    let _e20: AntiScalar = other_2871;
    return Flector(((_e4.g1_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), ((_e17.g0_.xyzx * vec4(_e20.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_anti_scalar_inner_anti_product(self_3192: Flector, other_2872: AntiScalar) -> Flector {
    var self_3193: Flector;
    var other_2873: AntiScalar;

    self_3193 = self_3192;
    other_2873 = other_2872;
    let _e4: Flector = self_3193;
    let _e6: AntiScalar = other_2873;
    let _e10: Flector = self_3193;
    let _e12: AntiScalar = other_2873;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_anti_scalar_left_contraction(self_3194: Flector, other_2874: AntiScalar) -> Flector {
    var self_3195: Flector;
    var other_2875: AntiScalar;

    self_3195 = self_3194;
    other_2875 = other_2874;
    let _e4: Flector = self_3195;
    let _e7: AntiScalar = other_2875;
    let _e17: Flector = self_3195;
    let _e20: AntiScalar = other_2875;
    return Flector(((_e4.g1_.xxxw * vec4(_e7.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), ((_e17.g0_.xyzx * vec4(_e20.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_anti_scalar_right_anti_contraction(self_3196: Flector, other_2876: AntiScalar) -> Flector {
    var self_3197: Flector;
    var other_2877: AntiScalar;

    self_3197 = self_3196;
    other_2877 = other_2876;
    let _e4: Flector = self_3197;
    let _e6: AntiScalar = other_2877;
    let _e10: Flector = self_3197;
    let _e12: AntiScalar = other_2877;
    return Flector((_e4.g0_ * vec4(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)));
}

fn flector_homogeneous_magnitude_geometric_product(self_3198: Flector, other_2878: HomogeneousMagnitude) -> Flector {
    var self_3199: Flector;
    var other_2879: HomogeneousMagnitude;

    self_3199 = self_3198;
    other_2879 = other_2878;
    let _e4: Flector = self_3199;
    let _e8: HomogeneousMagnitude = other_2879;
    let _e19: Flector = self_3199;
    let _e21: HomogeneousMagnitude = other_2879;
    let _e27: Flector = self_3199;
    let _e31: HomogeneousMagnitude = other_2879;
    let _e42: Flector = self_3199;
    let _e46: HomogeneousMagnitude = other_2879;
    let _e58: Flector = self_3199;
    let _e62: HomogeneousMagnitude = other_2879;
    let _e74: Flector = self_3199;
    let _e77: Flector = self_3199;
    let _e80: Flector = self_3199;
    let _e83: Flector = self_3199;
    let _e87: HomogeneousMagnitude = other_2879;
    let _e90: HomogeneousMagnitude = other_2879;
    let _e93: HomogeneousMagnitude = other_2879;
    let _e96: HomogeneousMagnitude = other_2879;
    return Flector((((vec4(_e4.g1_.w) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e19.g0_ * vec4(_e21.g0_.x))), (((((vec4(_e27.g1_.x) * vec4(_e31.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e42.g1_.y) * vec4(_e46.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e58.g1_.z) * vec4(_e62.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z, _e83.g1_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x))));
}

fn flector_homogeneous_magnitude_geometric_anti_product(self_3200: Flector, other_2880: HomogeneousMagnitude) -> Flector {
    var self_3201: Flector;
    var other_2881: HomogeneousMagnitude;

    self_3201 = self_3200;
    other_2881 = other_2880;
    let _e4: Flector = self_3201;
    let _e8: HomogeneousMagnitude = other_2881;
    let _e19: Flector = self_3201;
    let _e23: HomogeneousMagnitude = other_2881;
    let _e35: Flector = self_3201;
    let _e39: HomogeneousMagnitude = other_2881;
    let _e51: Flector = self_3201;
    let _e53: HomogeneousMagnitude = other_2881;
    let _e59: Flector = self_3201;
    let _e63: HomogeneousMagnitude = other_2881;
    let _e74: Flector = self_3201;
    let _e77: Flector = self_3201;
    let _e80: Flector = self_3201;
    let _e83: Flector = self_3201;
    let _e87: HomogeneousMagnitude = other_2881;
    let _e90: HomogeneousMagnitude = other_2881;
    let _e93: HomogeneousMagnitude = other_2881;
    let _e96: HomogeneousMagnitude = other_2881;
    return Flector((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + (_e51.g0_ * vec4(_e53.g0_.y))), (((vec4(_e59.g1_.w) * vec4(_e63.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e74.g1_.x, _e77.g1_.y, _e80.g1_.z, _e83.g0_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_homogeneous_magnitude_regressive_product(self_3202: Flector, other_2882: HomogeneousMagnitude) -> Flector {
    var self_3203: Flector;
    var other_2883: HomogeneousMagnitude;

    self_3203 = self_3202;
    other_2883 = other_2882;
    let _e4: Flector = self_3203;
    let _e6: HomogeneousMagnitude = other_2883;
    let _e11: Flector = self_3203;
    let _e13: HomogeneousMagnitude = other_2883;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), (_e11.g1_ * vec4(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_anti_wedge(self_3204: Flector, other_2884: HomogeneousMagnitude) -> Flector {
    var self_3205: Flector;
    var other_2885: HomogeneousMagnitude;

    self_3205 = self_3204;
    other_2885 = other_2884;
    let _e4: Flector = self_3205;
    let _e6: HomogeneousMagnitude = other_2885;
    let _e11: Flector = self_3205;
    let _e13: HomogeneousMagnitude = other_2885;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), (_e11.g1_ * vec4(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_meet(self_3206: Flector, other_2886: HomogeneousMagnitude) -> Flector {
    var self_3207: Flector;
    var other_2887: HomogeneousMagnitude;

    self_3207 = self_3206;
    other_2887 = other_2886;
    let _e4: Flector = self_3207;
    let _e6: HomogeneousMagnitude = other_2887;
    let _e11: Flector = self_3207;
    let _e13: HomogeneousMagnitude = other_2887;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), (_e11.g1_ * vec4(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_outer_product(self_3208: Flector, other_2888: HomogeneousMagnitude) -> Flector {
    var self_3209: Flector;
    var other_2889: HomogeneousMagnitude;

    self_3209 = self_3208;
    other_2889 = other_2888;
    let _e4: Flector = self_3209;
    let _e6: HomogeneousMagnitude = other_2889;
    let _e11: Flector = self_3209;
    let _e13: HomogeneousMagnitude = other_2889;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec4(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_wedge(self_3210: Flector, other_2890: HomogeneousMagnitude) -> Flector {
    var self_3211: Flector;
    var other_2891: HomogeneousMagnitude;

    self_3211 = self_3210;
    other_2891 = other_2890;
    let _e4: Flector = self_3211;
    let _e6: HomogeneousMagnitude = other_2891;
    let _e11: Flector = self_3211;
    let _e13: HomogeneousMagnitude = other_2891;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec4(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_join(self_3212: Flector, other_2892: HomogeneousMagnitude) -> Flector {
    var self_3213: Flector;
    var other_2893: HomogeneousMagnitude;

    self_3213 = self_3212;
    other_2893 = other_2892;
    let _e4: Flector = self_3213;
    let _e6: HomogeneousMagnitude = other_2893;
    let _e11: Flector = self_3213;
    let _e13: HomogeneousMagnitude = other_2893;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec4(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_inner_product(self_3214: Flector, other_2894: HomogeneousMagnitude) -> Flector {
    var self_3215: Flector;
    var other_2895: HomogeneousMagnitude;

    self_3215 = self_3214;
    other_2895 = other_2894;
    let _e4: Flector = self_3215;
    let _e8: HomogeneousMagnitude = other_2895;
    let _e19: Flector = self_3215;
    let _e21: HomogeneousMagnitude = other_2895;
    let _e27: Flector = self_3215;
    let _e31: HomogeneousMagnitude = other_2895;
    let _e42: Flector = self_3215;
    let _e46: HomogeneousMagnitude = other_2895;
    let _e58: Flector = self_3215;
    let _e62: HomogeneousMagnitude = other_2895;
    let _e74: Flector = self_3215;
    let _e77: Flector = self_3215;
    let _e80: Flector = self_3215;
    let _e83: Flector = self_3215;
    let _e87: HomogeneousMagnitude = other_2895;
    let _e90: HomogeneousMagnitude = other_2895;
    let _e93: HomogeneousMagnitude = other_2895;
    let _e96: HomogeneousMagnitude = other_2895;
    return Flector((((vec4(_e4.g1_.w) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e19.g0_ * vec4(_e21.g0_.x))), (((((vec4(_e27.g1_.x) * vec4(_e31.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e42.g1_.y) * vec4(_e46.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e58.g1_.z) * vec4(_e62.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z, _e83.g1_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x))));
}

fn flector_homogeneous_magnitude_inner_anti_product(self_3216: Flector, other_2896: HomogeneousMagnitude) -> Flector {
    var self_3217: Flector;
    var other_2897: HomogeneousMagnitude;

    self_3217 = self_3216;
    other_2897 = other_2896;
    let _e4: Flector = self_3217;
    let _e8: HomogeneousMagnitude = other_2897;
    let _e19: Flector = self_3217;
    let _e23: HomogeneousMagnitude = other_2897;
    let _e35: Flector = self_3217;
    let _e39: HomogeneousMagnitude = other_2897;
    let _e51: Flector = self_3217;
    let _e53: HomogeneousMagnitude = other_2897;
    let _e59: Flector = self_3217;
    let _e63: HomogeneousMagnitude = other_2897;
    let _e74: Flector = self_3217;
    let _e77: Flector = self_3217;
    let _e80: Flector = self_3217;
    let _e83: Flector = self_3217;
    let _e87: HomogeneousMagnitude = other_2897;
    let _e90: HomogeneousMagnitude = other_2897;
    let _e93: HomogeneousMagnitude = other_2897;
    let _e96: HomogeneousMagnitude = other_2897;
    return Flector((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + (_e51.g0_ * vec4(_e53.g0_.y))), (((vec4(_e59.g1_.w) * vec4(_e63.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e74.g1_.x, _e77.g1_.y, _e80.g1_.z, _e83.g0_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_homogeneous_magnitude_left_contraction(self_3218: Flector, other_2898: HomogeneousMagnitude) -> Flector {
    var self_3219: Flector;
    var other_2899: HomogeneousMagnitude;

    self_3219 = self_3218;
    other_2899 = other_2898;
    let _e4: Flector = self_3219;
    let _e7: HomogeneousMagnitude = other_2899;
    let _e10: HomogeneousMagnitude = other_2899;
    let _e13: HomogeneousMagnitude = other_2899;
    let _e16: HomogeneousMagnitude = other_2899;
    let _e27: Flector = self_3219;
    let _e30: HomogeneousMagnitude = other_2899;
    let _e33: HomogeneousMagnitude = other_2899;
    let _e36: HomogeneousMagnitude = other_2899;
    let _e39: HomogeneousMagnitude = other_2899;
    return Flector(((_e4.g1_.xxxw * vec4<f32>(_e7.g0_.x, _e10.g0_.x, _e13.g0_.x, _e16.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), ((_e27.g0_.xyzx * vec4<f32>(_e30.g0_.y, _e33.g0_.y, _e36.g0_.y, _e39.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_homogeneous_magnitude_right_contraction(self_3220: Flector, other_2900: HomogeneousMagnitude) -> Flector {
    var self_3221: Flector;
    var other_2901: HomogeneousMagnitude;

    self_3221 = self_3220;
    other_2901 = other_2900;
    let _e4: Flector = self_3221;
    let _e6: HomogeneousMagnitude = other_2901;
    let _e11: Flector = self_3221;
    let _e13: HomogeneousMagnitude = other_2901;
    return Flector((_e4.g0_ * vec4(_e6.g0_.x)), (_e11.g1_ * vec4(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_left_anti_contraction(self_3222: Flector, other_2902: HomogeneousMagnitude) -> Flector {
    var self_3223: Flector;
    var other_2903: HomogeneousMagnitude;

    self_3223 = self_3222;
    other_2903 = other_2902;
    let _e4: Flector = self_3223;
    let _e7: HomogeneousMagnitude = other_2903;
    let _e18: Flector = self_3223;
    let _e21: HomogeneousMagnitude = other_2903;
    return Flector(((_e4.g1_.xyzx * vec4(_e7.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((_e18.g0_.xxxw * vec4(_e21.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn flector_homogeneous_magnitude_right_anti_contraction(self_3224: Flector, other_2904: HomogeneousMagnitude) -> Flector {
    var self_3225: Flector;
    var other_2905: HomogeneousMagnitude;

    self_3225 = self_3224;
    other_2905 = other_2904;
    let _e4: Flector = self_3225;
    let _e6: HomogeneousMagnitude = other_2905;
    let _e11: Flector = self_3225;
    let _e13: HomogeneousMagnitude = other_2905;
    return Flector((_e4.g0_ * vec4(_e6.g0_.y)), (_e11.g1_ * vec4(_e13.g0_.y)));
}

fn flector_point_into(self_3226: Flector) -> Point {
    var self_3227: Flector;

    self_3227 = self_3226;
    let _e2: Flector = self_3227;
    return Point(_e2.g0_);
}

fn flector_point_add(self_3228: Flector, other_2906: Point) -> Flector {
    var self_3229: Flector;
    var other_2907: Point;

    self_3229 = self_3228;
    other_2907 = other_2906;
    let _e4: Flector = self_3229;
    let _e6: Point = other_2907;
    let _e9: Flector = self_3229;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn flector_point_sub(self_3230: Flector, other_2908: Point) -> Flector {
    var self_3231: Flector;
    var other_2909: Point;

    self_3231 = self_3230;
    other_2909 = other_2908;
    let _e4: Flector = self_3231;
    let _e6: Point = other_2909;
    let _e9: Flector = self_3231;
    return Flector((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn flector_point_geometric_product(self_3232: Flector, other_2910: Point) -> MultiVector {
    var self_3233: Flector;
    var other_2911: Point;

    self_3233 = self_3232;
    other_2911 = other_2910;
    let _e4: Flector = self_3233;
    let _e8: Point = other_2911;
    let _e17: Flector = self_3233;
    let _e21: Point = other_2911;
    let _e31: Flector = self_3233;
    let _e35: Point = other_2911;
    let _e45: Flector = self_3233;
    let _e49: Point = other_2911;
    let _e59: Flector = self_3233;
    let _e63: Point = other_2911;
    let _e73: Flector = self_3233;
    let _e76: Flector = self_3233;
    let _e80: Point = other_2911;
    let _e92: Flector = self_3233;
    let _e96: Point = other_2911;
    let _e99: Point = other_2911;
    let _e102: Point = other_2911;
    let _e107: Flector = self_3233;
    let _e111: Point = other_2911;
    let _e114: Point = other_2911;
    let _e117: Point = other_2911;
    let _e128: Flector = self_3233;
    let _e132: Point = other_2911;
    let _e135: Point = other_2911;
    let _e138: Point = other_2911;
    let _e149: Flector = self_3233;
    let _e153: Point = other_2911;
    let _e156: Point = other_2911;
    let _e159: Point = other_2911;
    let _e170: Flector = self_3233;
    let _e173: Flector = self_3233;
    let _e176: Flector = self_3233;
    let _e180: Point = other_2911;
    let _e189: Flector = self_3233;
    let _e193: Point = other_2911;
    let _e196: Point = other_2911;
    let _e199: Point = other_2911;
    let _e209: Flector = self_3233;
    let _e213: Point = other_2911;
    let _e216: Point = other_2911;
    let _e219: Point = other_2911;
    let _e230: Flector = self_3233;
    let _e234: Point = other_2911;
    let _e237: Point = other_2911;
    let _e240: Point = other_2911;
    let _e246: Flector = self_3233;
    let _e250: Point = other_2911;
    let _e253: Point = other_2911;
    let _e256: Point = other_2911;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.y) * vec2(_e35.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g1_.z) * vec2(_e49.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.w) * vec2(_e63.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2<f32>(_e73.g0_.x, _e76.g1_.x) * vec2(_e80.g0_.x)) * vec2<f32>(1.0, -1.0))), vec4(0.0), (((((vec3(_e92.g0_.w) * vec3<f32>(_e96.g0_.x, _e99.g0_.y, _e102.g0_.z)) + ((vec3(_e107.g1_.x) * vec3<f32>(_e111.g0_.z, _e114.g0_.z, _e117.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e128.g1_.y) * vec3<f32>(_e132.g0_.z, _e135.g0_.z, _e138.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e149.g1_.z) * vec3<f32>(_e153.g0_.y, _e156.g0_.x, _e159.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3<f32>(_e170.g0_.x, _e173.g0_.y, _e176.g0_.z) * vec3(_e180.g0_.w)) * vec3(-1.0))), (((((vec3(_e189.g0_.y) * vec3<f32>(_e193.g0_.z, _e196.g0_.z, _e199.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e209.g0_.z) * vec3<f32>(_e213.g0_.y, _e216.g0_.x, _e219.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) - (vec3(_e230.g1_.w) * vec3<f32>(_e234.g0_.x, _e237.g0_.y, _e240.g0_.z))) + ((vec3(_e246.g0_.x) * vec3<f32>(_e250.g0_.x, _e253.g0_.z, _e256.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), vec4(0.0));
}

fn flector_point_geometric_anti_product(self_3234: Flector, other_2912: Point) -> MultiVector {
    var self_3235: Flector;
    var other_2913: Point;

    self_3235 = self_3234;
    other_2913 = other_2912;
    let _e4: Flector = self_3235;
    let _e8: Point = other_2913;
    let _e17: Flector = self_3235;
    let _e21: Point = other_2913;
    let _e31: Flector = self_3235;
    let _e35: Point = other_2913;
    let _e45: Flector = self_3235;
    let _e48: Flector = self_3235;
    let _e52: Point = other_2913;
    let _e55: Point = other_2913;
    let _e66: Flector = self_3235;
    let _e69: Flector = self_3235;
    let _e72: Flector = self_3235;
    let _e76: Point = other_2913;
    let _e84: Flector = self_3235;
    let _e88: Point = other_2913;
    let _e91: Point = other_2913;
    let _e94: Point = other_2913;
    let _e99: Flector = self_3235;
    let _e103: Point = other_2913;
    let _e106: Point = other_2913;
    let _e109: Point = other_2913;
    let _e120: Flector = self_3235;
    let _e124: Point = other_2913;
    let _e127: Point = other_2913;
    let _e130: Point = other_2913;
    let _e141: Flector = self_3235;
    let _e145: Point = other_2913;
    let _e148: Point = other_2913;
    let _e151: Point = other_2913;
    let _e162: Flector = self_3235;
    let _e165: Flector = self_3235;
    let _e168: Flector = self_3235;
    let _e172: Point = other_2913;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g1_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2(-1.0))), vec4(0.0), ((vec3<f32>(_e66.g1_.x, _e69.g1_.y, _e72.g1_.z) * vec3(_e76.g0_.w)) * vec3(-1.0)), (((((vec3(_e84.g0_.w) * vec3<f32>(_e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) + ((vec3(_e99.g1_.x) * vec3<f32>(_e103.g0_.z, _e106.g0_.z, _e109.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e120.g1_.y) * vec3<f32>(_e124.g0_.z, _e127.g0_.z, _e130.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e141.g1_.z) * vec3<f32>(_e145.g0_.y, _e148.g0_.x, _e151.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3<f32>(_e162.g0_.x, _e165.g0_.y, _e168.g0_.z) * vec3(_e172.g0_.w)) * vec3(-1.0))), vec4(0.0));
}

fn flector_point_regressive_product(self_3236: Flector, other_2914: Point) -> Scalar {
    var self_3237: Flector;
    var other_2915: Point;

    self_3237 = self_3236;
    other_2915 = other_2914;
    let _e5: Flector = self_3237;
    let _e8: Point = other_2915;
    let _e13: Flector = self_3237;
    let _e16: Point = other_2915;
    let _e21: Flector = self_3237;
    let _e24: Point = other_2915;
    let _e29: Flector = self_3237;
    let _e32: Point = other_2915;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_anti_wedge(self_3238: Flector, other_2916: Point) -> Scalar {
    var self_3239: Flector;
    var other_2917: Point;

    self_3239 = self_3238;
    other_2917 = other_2916;
    let _e5: Flector = self_3239;
    let _e8: Point = other_2917;
    let _e13: Flector = self_3239;
    let _e16: Point = other_2917;
    let _e21: Flector = self_3239;
    let _e24: Point = other_2917;
    let _e29: Flector = self_3239;
    let _e32: Point = other_2917;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_meet(self_3240: Flector, other_2918: Point) -> Scalar {
    var self_3241: Flector;
    var other_2919: Point;

    self_3241 = self_3240;
    other_2919 = other_2918;
    let _e5: Flector = self_3241;
    let _e8: Point = other_2919;
    let _e13: Flector = self_3241;
    let _e16: Point = other_2919;
    let _e21: Flector = self_3241;
    let _e24: Point = other_2919;
    let _e29: Flector = self_3241;
    let _e32: Point = other_2919;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_outer_product(self_3242: Flector, other_2920: Point) -> Motor {
    var self_3243: Flector;
    var other_2921: Point;

    self_3243 = self_3242;
    other_2921 = other_2920;
    let _e4: Flector = self_3243;
    let _e8: Point = other_2921;
    let _e18: Flector = self_3243;
    let _e22: Point = other_2921;
    let _e34: Flector = self_3243;
    let _e38: Point = other_2921;
    let _e50: Flector = self_3243;
    let _e54: Point = other_2921;
    let _e66: Flector = self_3243;
    let _e69: Flector = self_3243;
    let _e72: Flector = self_3243;
    let _e75: Flector = self_3243;
    let _e79: Point = other_2921;
    let _e87: Flector = self_3243;
    let _e91: Point = other_2921;
    let _e94: Point = other_2921;
    let _e97: Point = other_2921;
    let _e107: Flector = self_3243;
    let _e111: Point = other_2921;
    let _e114: Point = other_2921;
    let _e117: Point = other_2921;
    let _e128: Flector = self_3243;
    let _e132: Point = other_2921;
    let _e135: Point = other_2921;
    let _e138: Point = other_2921;
    return Motor(((((((vec4(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4(_e18.g1_.y) * vec4(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e34.g1_.z) * vec4(_e38.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e50.g1_.w) * vec4(_e54.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z, _e75.g1_.x) * _e79.g0_.wwwx) * vec4(-1.0))), ((((vec3(_e87.g0_.y) * vec3<f32>(_e91.g0_.z, _e94.g0_.z, _e97.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e107.g0_.z) * vec3<f32>(_e111.g0_.y, _e114.g0_.x, _e117.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e128.g0_.x) * vec3<f32>(_e132.g0_.x, _e135.g0_.z, _e138.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_point_wedge(self_3244: Flector, other_2922: Point) -> Motor {
    var self_3245: Flector;
    var other_2923: Point;

    self_3245 = self_3244;
    other_2923 = other_2922;
    let _e4: Flector = self_3245;
    let _e8: Point = other_2923;
    let _e18: Flector = self_3245;
    let _e22: Point = other_2923;
    let _e34: Flector = self_3245;
    let _e38: Point = other_2923;
    let _e50: Flector = self_3245;
    let _e54: Point = other_2923;
    let _e66: Flector = self_3245;
    let _e69: Flector = self_3245;
    let _e72: Flector = self_3245;
    let _e75: Flector = self_3245;
    let _e79: Point = other_2923;
    let _e87: Flector = self_3245;
    let _e91: Point = other_2923;
    let _e94: Point = other_2923;
    let _e97: Point = other_2923;
    let _e107: Flector = self_3245;
    let _e111: Point = other_2923;
    let _e114: Point = other_2923;
    let _e117: Point = other_2923;
    let _e128: Flector = self_3245;
    let _e132: Point = other_2923;
    let _e135: Point = other_2923;
    let _e138: Point = other_2923;
    return Motor(((((((vec4(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4(_e18.g1_.y) * vec4(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e34.g1_.z) * vec4(_e38.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e50.g1_.w) * vec4(_e54.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z, _e75.g1_.x) * _e79.g0_.wwwx) * vec4(-1.0))), ((((vec3(_e87.g0_.y) * vec3<f32>(_e91.g0_.z, _e94.g0_.z, _e97.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e107.g0_.z) * vec3<f32>(_e111.g0_.y, _e114.g0_.x, _e117.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e128.g0_.x) * vec3<f32>(_e132.g0_.x, _e135.g0_.z, _e138.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_point_join(self_3246: Flector, other_2924: Point) -> Motor {
    var self_3247: Flector;
    var other_2925: Point;

    self_3247 = self_3246;
    other_2925 = other_2924;
    let _e4: Flector = self_3247;
    let _e8: Point = other_2925;
    let _e18: Flector = self_3247;
    let _e22: Point = other_2925;
    let _e34: Flector = self_3247;
    let _e38: Point = other_2925;
    let _e50: Flector = self_3247;
    let _e54: Point = other_2925;
    let _e66: Flector = self_3247;
    let _e69: Flector = self_3247;
    let _e72: Flector = self_3247;
    let _e75: Flector = self_3247;
    let _e79: Point = other_2925;
    let _e87: Flector = self_3247;
    let _e91: Point = other_2925;
    let _e94: Point = other_2925;
    let _e97: Point = other_2925;
    let _e107: Flector = self_3247;
    let _e111: Point = other_2925;
    let _e114: Point = other_2925;
    let _e117: Point = other_2925;
    let _e128: Flector = self_3247;
    let _e132: Point = other_2925;
    let _e135: Point = other_2925;
    let _e138: Point = other_2925;
    return Motor(((((((vec4(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4(_e18.g1_.y) * vec4(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e34.g1_.z) * vec4(_e38.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e50.g1_.w) * vec4(_e54.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z, _e75.g1_.x) * _e79.g0_.wwwx) * vec4(-1.0))), ((((vec3(_e87.g0_.y) * vec3<f32>(_e91.g0_.z, _e94.g0_.z, _e97.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e107.g0_.z) * vec3<f32>(_e111.g0_.y, _e114.g0_.x, _e117.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e128.g0_.x) * vec3<f32>(_e132.g0_.x, _e135.g0_.z, _e138.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_point_inner_product(self_3248: Flector, other_2926: Point) -> MultiVector {
    var self_3249: Flector;
    var other_2927: Point;

    self_3249 = self_3248;
    other_2927 = other_2926;
    let _e4: Flector = self_3249;
    let _e8: Point = other_2927;
    let _e17: Flector = self_3249;
    let _e21: Point = other_2927;
    let _e31: Flector = self_3249;
    let _e35: Point = other_2927;
    let _e47: Flector = self_3249;
    let _e51: Point = other_2927;
    let _e54: Point = other_2927;
    let _e57: Point = other_2927;
    let _e67: Flector = self_3249;
    let _e71: Point = other_2927;
    let _e74: Point = other_2927;
    let _e77: Point = other_2927;
    let _e88: Flector = self_3249;
    let _e92: Point = other_2927;
    let _e95: Point = other_2927;
    let _e98: Point = other_2927;
    let _e111: Flector = self_3249;
    let _e115: Point = other_2927;
    let _e118: Point = other_2927;
    let _e121: Point = other_2927;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e47.g1_.y) * vec3<f32>(_e51.g0_.z, _e54.g0_.z, _e57.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e67.g1_.z) * vec3<f32>(_e71.g0_.y, _e74.g0_.x, _e77.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e88.g1_.x) * vec3<f32>(_e92.g0_.x, _e95.g0_.z, _e98.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e111.g1_.w) * vec3<f32>(_e115.g0_.x, _e118.g0_.y, _e121.g0_.z))), vec4(0.0));
}

fn flector_point_inner_anti_product(self_3250: Flector, other_2928: Point) -> Motor {
    var self_3251: Flector;
    var other_2929: Point;

    self_3251 = self_3250;
    other_2929 = other_2928;
    let _e4: Flector = self_3251;
    let _e7: Flector = self_3251;
    let _e10: Flector = self_3251;
    let _e13: Flector = self_3251;
    let _e17: Point = other_2929;
    let _e25: Flector = self_3251;
    let _e29: Point = other_2929;
    let _e32: Point = other_2929;
    let _e35: Point = other_2929;
    let _e45: Flector = self_3251;
    let _e49: Point = other_2929;
    let _e52: Point = other_2929;
    let _e55: Point = other_2929;
    let _e66: Flector = self_3251;
    let _e70: Point = other_2929;
    let _e73: Point = other_2929;
    let _e76: Point = other_2929;
    return Motor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g0_.w) * vec4(_e17.g0_.w)) * vec4(-1.0)), ((((vec3(_e25.g1_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e45.g1_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e66.g1_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_point_left_contraction(self_3252: Flector, other_2930: Point) -> Scalar {
    var self_3253: Flector;
    var other_2931: Point;

    self_3253 = self_3252;
    other_2931 = other_2930;
    let _e4: Flector = self_3253;
    let _e7: Point = other_2931;
    let _e11: Flector = self_3253;
    let _e14: Point = other_2931;
    let _e19: Flector = self_3253;
    let _e22: Point = other_2931;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_right_contraction(self_3254: Flector, other_2932: Point) -> MultiVector {
    var self_3255: Flector;
    var other_2933: Point;

    self_3255 = self_3254;
    other_2933 = other_2932;
    let _e4: Flector = self_3255;
    let _e8: Point = other_2933;
    let _e17: Flector = self_3255;
    let _e21: Point = other_2933;
    let _e31: Flector = self_3255;
    let _e35: Point = other_2933;
    let _e47: Flector = self_3255;
    let _e51: Point = other_2933;
    let _e54: Point = other_2933;
    let _e57: Point = other_2933;
    let _e67: Flector = self_3255;
    let _e71: Point = other_2933;
    let _e74: Point = other_2933;
    let _e77: Point = other_2933;
    let _e88: Flector = self_3255;
    let _e92: Point = other_2933;
    let _e95: Point = other_2933;
    let _e98: Point = other_2933;
    let _e111: Flector = self_3255;
    let _e115: Point = other_2933;
    let _e118: Point = other_2933;
    let _e121: Point = other_2933;
    return MultiVector(((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e47.g1_.y) * vec3<f32>(_e51.g0_.z, _e54.g0_.z, _e57.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e67.g1_.z) * vec3<f32>(_e71.g0_.y, _e74.g0_.x, _e77.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e88.g1_.x) * vec3<f32>(_e92.g0_.x, _e95.g0_.z, _e98.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e111.g1_.w) * vec3<f32>(_e115.g0_.x, _e118.g0_.y, _e121.g0_.z))), vec4(0.0));
}

fn flector_point_left_anti_contraction(self_3256: Flector, other_2934: Point) -> Motor {
    var self_3257: Flector;
    var other_2935: Point;

    self_3257 = self_3256;
    other_2935 = other_2934;
    let _e4: Flector = self_3257;
    let _e7: Flector = self_3257;
    let _e10: Flector = self_3257;
    let _e13: Flector = self_3257;
    let _e17: Point = other_2935;
    let _e25: Flector = self_3257;
    let _e29: Point = other_2935;
    let _e32: Point = other_2935;
    let _e35: Point = other_2935;
    let _e45: Flector = self_3257;
    let _e49: Point = other_2935;
    let _e52: Point = other_2935;
    let _e55: Point = other_2935;
    let _e66: Flector = self_3257;
    let _e70: Point = other_2935;
    let _e73: Point = other_2935;
    let _e76: Point = other_2935;
    return Motor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g0_.w) * vec4(_e17.g0_.w)) * vec4(-1.0)), ((((vec3(_e25.g1_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e45.g1_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e66.g1_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_point_right_anti_contraction(self_3258: Flector, other_2936: Point) -> AntiScalar {
    var self_3259: Flector;
    var other_2937: Point;

    self_3259 = self_3258;
    other_2937 = other_2936;
    let _e5: Flector = self_3259;
    let _e8: Point = other_2937;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_point_scalar_product(self_3260: Flector, other_2938: Point) -> Scalar {
    var self_3261: Flector;
    var other_2939: Point;

    self_3261 = self_3260;
    other_2939 = other_2938;
    let _e4: Flector = self_3261;
    let _e7: Point = other_2939;
    let _e11: Flector = self_3261;
    let _e14: Point = other_2939;
    let _e19: Flector = self_3261;
    let _e22: Point = other_2939;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_dot(self_3262: Flector, other_2940: Point) -> Scalar {
    var self_3263: Flector;
    var other_2941: Point;

    self_3263 = self_3262;
    other_2941 = other_2940;
    let _e4: Flector = self_3263;
    let _e7: Point = other_2941;
    let _e11: Flector = self_3263;
    let _e14: Point = other_2941;
    let _e19: Flector = self_3263;
    let _e22: Point = other_2941;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_anti_scalar_product(self_3264: Flector, other_2942: Point) -> AntiScalar {
    var self_3265: Flector;
    var other_2943: Point;

    self_3265 = self_3264;
    other_2943 = other_2942;
    let _e5: Flector = self_3265;
    let _e8: Point = other_2943;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_point_anti_dot(self_3266: Flector, other_2944: Point) -> AntiScalar {
    var self_3267: Flector;
    var other_2945: Point;

    self_3267 = self_3266;
    other_2945 = other_2944;
    let _e5: Flector = self_3267;
    let _e8: Point = other_2945;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_line_geometric_product(self_3268: Flector, other_2946: Line) -> Flector {
    var self_3269: Flector;
    var other_2947: Line;

    self_3269 = self_3268;
    other_2947 = other_2946;
    let _e4: Flector = self_3269;
    let _e8: Line = other_2947;
    let _e11: Line = other_2947;
    let _e14: Line = other_2947;
    let _e17: Line = other_2947;
    let _e28: Flector = self_3269;
    let _e32: Line = other_2947;
    let _e35: Line = other_2947;
    let _e38: Line = other_2947;
    let _e41: Line = other_2947;
    let _e53: Flector = self_3269;
    let _e57: Line = other_2947;
    let _e69: Flector = self_3269;
    let _e73: Line = other_2947;
    let _e85: Flector = self_3269;
    let _e89: Line = other_2947;
    let _e101: Flector = self_3269;
    let _e105: Line = other_2947;
    let _e108: Line = other_2947;
    let _e111: Line = other_2947;
    let _e114: Line = other_2947;
    let _e126: Flector = self_3269;
    let _e130: Line = other_2947;
    let _e133: Line = other_2947;
    let _e136: Line = other_2947;
    let _e139: Line = other_2947;
    let _e151: Flector = self_3269;
    let _e155: Line = other_2947;
    let _e158: Line = other_2947;
    let _e161: Line = other_2947;
    let _e164: Line = other_2947;
    let _e175: Flector = self_3269;
    let _e179: Line = other_2947;
    let _e182: Line = other_2947;
    let _e185: Line = other_2947;
    let _e188: Line = other_2947;
    let _e200: Flector = self_3269;
    let _e204: Line = other_2947;
    let _e207: Line = other_2947;
    let _e210: Line = other_2947;
    let _e213: Line = other_2947;
    let _e225: Flector = self_3269;
    let _e229: Line = other_2947;
    let _e232: Line = other_2947;
    let _e235: Line = other_2947;
    let _e238: Line = other_2947;
    let _e250: Flector = self_3269;
    let _e254: Line = other_2947;
    let _e257: Line = other_2947;
    let _e260: Line = other_2947;
    let _e263: Line = other_2947;
    let _e275: Flector = self_3269;
    let _e279: Line = other_2947;
    let _e282: Line = other_2947;
    let _e285: Line = other_2947;
    let _e288: Line = other_2947;
    let _e300: Flector = self_3269;
    let _e304: Line = other_2947;
    let _e307: Line = other_2947;
    let _e310: Line = other_2947;
    let _e313: Line = other_2947;
    let _e325: Flector = self_3269;
    let _e329: Line = other_2947;
    let _e332: Line = other_2947;
    let _e335: Line = other_2947;
    let _e338: Line = other_2947;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.x) * vec4(_e57.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e69.g1_.y) * vec4(_e73.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4(_e89.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e101.g1_.w) * vec4<f32>(_e105.g1_.x, _e108.g1_.y, _e111.g1_.z, _e114.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e126.g0_.x) * vec4<f32>(_e130.g1_.x, _e133.g1_.z, _e136.g1_.y, _e139.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((((((vec4(_e151.g0_.y) * vec4<f32>(_e155.g0_.z, _e158.g0_.z, _e161.g0_.x, _e164.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e175.g0_.z) * vec4<f32>(_e179.g0_.y, _e182.g0_.x, _e185.g0_.y, _e188.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e200.g0_.w) * vec4<f32>(_e204.g1_.x, _e207.g1_.y, _e210.g1_.z, _e213.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e225.g1_.x) * vec4<f32>(_e229.g1_.z, _e232.g1_.z, _e235.g1_.y, _e238.g1_.z)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e250.g1_.y) * vec4<f32>(_e254.g1_.z, _e257.g1_.z, _e260.g1_.x, _e263.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e275.g1_.z) * vec4<f32>(_e279.g1_.y, _e282.g1_.x, _e285.g1_.y, _e288.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e300.g1_.w) * vec4<f32>(_e304.g0_.x, _e307.g0_.y, _e310.g0_.z, _e313.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e325.g0_.x) * vec4<f32>(_e329.g0_.x, _e332.g0_.z, _e335.g0_.y, _e338.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_geometric_anti_product(self_3270: Flector, other_2948: Line) -> Flector {
    var self_3271: Flector;
    var other_2949: Line;

    self_3271 = self_3270;
    other_2949 = other_2948;
    let _e4: Flector = self_3271;
    let _e8: Line = other_2949;
    let _e11: Line = other_2949;
    let _e14: Line = other_2949;
    let _e17: Line = other_2949;
    let _e28: Flector = self_3271;
    let _e32: Line = other_2949;
    let _e35: Line = other_2949;
    let _e38: Line = other_2949;
    let _e41: Line = other_2949;
    let _e53: Flector = self_3271;
    let _e57: Line = other_2949;
    let _e60: Line = other_2949;
    let _e63: Line = other_2949;
    let _e66: Line = other_2949;
    let _e78: Flector = self_3271;
    let _e82: Line = other_2949;
    let _e85: Line = other_2949;
    let _e88: Line = other_2949;
    let _e91: Line = other_2949;
    let _e103: Flector = self_3271;
    let _e107: Line = other_2949;
    let _e110: Line = other_2949;
    let _e113: Line = other_2949;
    let _e116: Line = other_2949;
    let _e128: Flector = self_3271;
    let _e132: Line = other_2949;
    let _e135: Line = other_2949;
    let _e138: Line = other_2949;
    let _e141: Line = other_2949;
    let _e153: Flector = self_3271;
    let _e157: Line = other_2949;
    let _e160: Line = other_2949;
    let _e163: Line = other_2949;
    let _e166: Line = other_2949;
    let _e178: Flector = self_3271;
    let _e182: Line = other_2949;
    let _e185: Line = other_2949;
    let _e188: Line = other_2949;
    let _e191: Line = other_2949;
    let _e203: Flector = self_3271;
    let _e207: Line = other_2949;
    let _e218: Flector = self_3271;
    let _e222: Line = other_2949;
    let _e234: Flector = self_3271;
    let _e238: Line = other_2949;
    let _e241: Line = other_2949;
    let _e244: Line = other_2949;
    let _e247: Line = other_2949;
    let _e259: Flector = self_3271;
    let _e263: Line = other_2949;
    let _e266: Line = other_2949;
    let _e269: Line = other_2949;
    let _e272: Line = other_2949;
    let _e284: Flector = self_3271;
    let _e288: Line = other_2949;
    let _e291: Line = other_2949;
    let _e294: Line = other_2949;
    let _e297: Line = other_2949;
    let _e309: Flector = self_3271;
    let _e312: Line = other_2949;
    let _e315: Line = other_2949;
    let _e318: Line = other_2949;
    let _e321: Line = other_2949;
    return Flector((((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g0_.y)) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e78.g1_.x) * vec4<f32>(_e82.g1_.z, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e103.g1_.y) * vec4<f32>(_e107.g1_.z, _e110.g1_.z, _e113.g1_.x, _e116.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e128.g1_.z) * vec4<f32>(_e132.g1_.y, _e135.g1_.x, _e138.g1_.y, _e141.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e153.g1_.w) * vec4<f32>(_e157.g0_.x, _e160.g0_.y, _e163.g0_.z, _e166.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e178.g0_.x) * vec4<f32>(_e182.g0_.x, _e185.g0_.z, _e188.g0_.y, _e191.g0_.x)) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), (((((((vec4(_e203.g0_.y) * vec4(_e207.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e218.g0_.z) * vec4(_e222.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e234.g1_.x) * vec4<f32>(_e238.g0_.z, _e241.g0_.z, _e244.g0_.y, _e247.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))) + ((vec4(_e259.g1_.y) * vec4<f32>(_e263.g0_.z, _e266.g0_.z, _e269.g0_.x, _e272.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e284.g1_.z) * vec4<f32>(_e288.g0_.y, _e291.g0_.x, _e294.g0_.y, _e297.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e309.g0_.wwwx * vec4<f32>(_e312.g0_.x, _e315.g0_.y, _e318.g0_.z, _e321.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_line_regressive_product(self_3272: Flector, other_2950: Line) -> Point {
    var self_3273: Flector;
    var other_2951: Line;

    self_3273 = self_3272;
    other_2951 = other_2950;
    let _e4: Flector = self_3273;
    let _e8: Line = other_2951;
    let _e11: Line = other_2951;
    let _e14: Line = other_2951;
    let _e17: Line = other_2951;
    let _e28: Flector = self_3273;
    let _e32: Line = other_2951;
    let _e35: Line = other_2951;
    let _e38: Line = other_2951;
    let _e41: Line = other_2951;
    let _e53: Flector = self_3273;
    let _e57: Line = other_2951;
    let _e60: Line = other_2951;
    let _e63: Line = other_2951;
    let _e66: Line = other_2951;
    let _e78: Flector = self_3273;
    let _e82: Line = other_2951;
    let _e85: Line = other_2951;
    let _e88: Line = other_2951;
    let _e91: Line = other_2951;
    return Point((((((vec4(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g1_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g1_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_anti_wedge(self_3274: Flector, other_2952: Line) -> Point {
    var self_3275: Flector;
    var other_2953: Line;

    self_3275 = self_3274;
    other_2953 = other_2952;
    let _e4: Flector = self_3275;
    let _e8: Line = other_2953;
    let _e11: Line = other_2953;
    let _e14: Line = other_2953;
    let _e17: Line = other_2953;
    let _e28: Flector = self_3275;
    let _e32: Line = other_2953;
    let _e35: Line = other_2953;
    let _e38: Line = other_2953;
    let _e41: Line = other_2953;
    let _e53: Flector = self_3275;
    let _e57: Line = other_2953;
    let _e60: Line = other_2953;
    let _e63: Line = other_2953;
    let _e66: Line = other_2953;
    let _e78: Flector = self_3275;
    let _e82: Line = other_2953;
    let _e85: Line = other_2953;
    let _e88: Line = other_2953;
    let _e91: Line = other_2953;
    return Point((((((vec4(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g1_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g1_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_meet(self_3276: Flector, other_2954: Line) -> Point {
    var self_3277: Flector;
    var other_2955: Line;

    self_3277 = self_3276;
    other_2955 = other_2954;
    let _e4: Flector = self_3277;
    let _e8: Line = other_2955;
    let _e11: Line = other_2955;
    let _e14: Line = other_2955;
    let _e17: Line = other_2955;
    let _e28: Flector = self_3277;
    let _e32: Line = other_2955;
    let _e35: Line = other_2955;
    let _e38: Line = other_2955;
    let _e41: Line = other_2955;
    let _e53: Flector = self_3277;
    let _e57: Line = other_2955;
    let _e60: Line = other_2955;
    let _e63: Line = other_2955;
    let _e66: Line = other_2955;
    let _e78: Flector = self_3277;
    let _e82: Line = other_2955;
    let _e85: Line = other_2955;
    let _e88: Line = other_2955;
    let _e91: Line = other_2955;
    return Point((((((vec4(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g1_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g1_.x) * vec4<f32>(_e82.g1_.x, _e85.g1_.z, _e88.g1_.y, _e91.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_outer_product(self_3278: Flector, other_2956: Line) -> Plane {
    var self_3279: Flector;
    var other_2957: Line;

    self_3279 = self_3278;
    other_2957 = other_2956;
    let _e4: Flector = self_3279;
    let _e8: Line = other_2957;
    let _e11: Line = other_2957;
    let _e14: Line = other_2957;
    let _e17: Line = other_2957;
    let _e28: Flector = self_3279;
    let _e32: Line = other_2957;
    let _e35: Line = other_2957;
    let _e38: Line = other_2957;
    let _e41: Line = other_2957;
    let _e53: Flector = self_3279;
    let _e57: Line = other_2957;
    let _e60: Line = other_2957;
    let _e63: Line = other_2957;
    let _e66: Line = other_2957;
    let _e78: Flector = self_3279;
    let _e82: Line = other_2957;
    let _e85: Line = other_2957;
    let _e88: Line = other_2957;
    let _e91: Line = other_2957;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_wedge(self_3280: Flector, other_2958: Line) -> Plane {
    var self_3281: Flector;
    var other_2959: Line;

    self_3281 = self_3280;
    other_2959 = other_2958;
    let _e4: Flector = self_3281;
    let _e8: Line = other_2959;
    let _e11: Line = other_2959;
    let _e14: Line = other_2959;
    let _e17: Line = other_2959;
    let _e28: Flector = self_3281;
    let _e32: Line = other_2959;
    let _e35: Line = other_2959;
    let _e38: Line = other_2959;
    let _e41: Line = other_2959;
    let _e53: Flector = self_3281;
    let _e57: Line = other_2959;
    let _e60: Line = other_2959;
    let _e63: Line = other_2959;
    let _e66: Line = other_2959;
    let _e78: Flector = self_3281;
    let _e82: Line = other_2959;
    let _e85: Line = other_2959;
    let _e88: Line = other_2959;
    let _e91: Line = other_2959;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_join(self_3282: Flector, other_2960: Line) -> Plane {
    var self_3283: Flector;
    var other_2961: Line;

    self_3283 = self_3282;
    other_2961 = other_2960;
    let _e4: Flector = self_3283;
    let _e8: Line = other_2961;
    let _e11: Line = other_2961;
    let _e14: Line = other_2961;
    let _e17: Line = other_2961;
    let _e28: Flector = self_3283;
    let _e32: Line = other_2961;
    let _e35: Line = other_2961;
    let _e38: Line = other_2961;
    let _e41: Line = other_2961;
    let _e53: Flector = self_3283;
    let _e57: Line = other_2961;
    let _e60: Line = other_2961;
    let _e63: Line = other_2961;
    let _e66: Line = other_2961;
    let _e78: Flector = self_3283;
    let _e82: Line = other_2961;
    let _e85: Line = other_2961;
    let _e88: Line = other_2961;
    let _e91: Line = other_2961;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_inner_product(self_3284: Flector, other_2962: Line) -> Point {
    var self_3285: Flector;
    var other_2963: Line;

    self_3285 = self_3284;
    other_2963 = other_2962;
    let _e4: Flector = self_3285;
    let _e8: Line = other_2963;
    let _e11: Line = other_2963;
    let _e14: Line = other_2963;
    let _e17: Line = other_2963;
    let _e28: Flector = self_3285;
    let _e32: Line = other_2963;
    let _e35: Line = other_2963;
    let _e38: Line = other_2963;
    let _e41: Line = other_2963;
    let _e53: Flector = self_3285;
    let _e57: Line = other_2963;
    let _e69: Flector = self_3285;
    let _e73: Line = other_2963;
    let _e85: Flector = self_3285;
    let _e89: Line = other_2963;
    let _e101: Flector = self_3285;
    let _e105: Line = other_2963;
    let _e108: Line = other_2963;
    let _e111: Line = other_2963;
    let _e114: Line = other_2963;
    let _e126: Flector = self_3285;
    let _e130: Line = other_2963;
    let _e133: Line = other_2963;
    let _e136: Line = other_2963;
    let _e139: Line = other_2963;
    return Point(((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.x) * vec4(_e57.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e69.g1_.y) * vec4(_e73.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4(_e89.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e101.g1_.w) * vec4<f32>(_e105.g1_.x, _e108.g1_.y, _e111.g1_.z, _e114.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e126.g0_.x) * vec4<f32>(_e130.g1_.x, _e133.g1_.z, _e136.g1_.y, _e139.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_inner_anti_product(self_3286: Flector, other_2964: Line) -> Plane {
    var self_3287: Flector;
    var other_2965: Line;

    self_3287 = self_3286;
    other_2965 = other_2964;
    let _e4: Flector = self_3287;
    let _e8: Line = other_2965;
    let _e19: Flector = self_3287;
    let _e23: Line = other_2965;
    let _e35: Flector = self_3287;
    let _e39: Line = other_2965;
    let _e42: Line = other_2965;
    let _e45: Line = other_2965;
    let _e48: Line = other_2965;
    let _e60: Flector = self_3287;
    let _e64: Line = other_2965;
    let _e67: Line = other_2965;
    let _e70: Line = other_2965;
    let _e73: Line = other_2965;
    let _e85: Flector = self_3287;
    let _e89: Line = other_2965;
    let _e92: Line = other_2965;
    let _e95: Line = other_2965;
    let _e98: Line = other_2965;
    let _e110: Flector = self_3287;
    let _e113: Line = other_2965;
    let _e116: Line = other_2965;
    let _e119: Line = other_2965;
    let _e122: Line = other_2965;
    return Plane((((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.x) * vec4<f32>(_e39.g0_.z, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))) + ((vec4(_e60.g1_.y) * vec4<f32>(_e64.g0_.z, _e67.g0_.z, _e70.g0_.x, _e73.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e85.g1_.z) * vec4<f32>(_e89.g0_.y, _e92.g0_.x, _e95.g0_.y, _e98.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e110.g0_.wwwx * vec4<f32>(_e113.g0_.x, _e116.g0_.y, _e119.g0_.z, _e122.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_line_left_contraction(self_3288: Flector, other_2966: Line) -> Point {
    var self_3289: Flector;
    var other_2967: Line;

    self_3289 = self_3288;
    other_2967 = other_2966;
    let _e4: Flector = self_3289;
    let _e8: Line = other_2967;
    let _e11: Line = other_2967;
    let _e14: Line = other_2967;
    let _e17: Line = other_2967;
    let _e28: Flector = self_3289;
    let _e32: Line = other_2967;
    let _e35: Line = other_2967;
    let _e38: Line = other_2967;
    let _e41: Line = other_2967;
    let _e53: Flector = self_3289;
    let _e57: Line = other_2967;
    let _e60: Line = other_2967;
    let _e63: Line = other_2967;
    let _e66: Line = other_2967;
    return Point(((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.x) * vec4<f32>(_e57.g1_.x, _e60.g1_.z, _e63.g1_.y, _e66.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_line_right_contraction(self_3290: Flector, other_2968: Line) -> Point {
    var self_3291: Flector;
    var other_2969: Line;

    self_3291 = self_3290;
    other_2969 = other_2968;
    let _e4: Flector = self_3291;
    let _e8: Line = other_2969;
    let _e19: Flector = self_3291;
    let _e23: Line = other_2969;
    let _e35: Flector = self_3291;
    let _e38: Line = other_2969;
    let _e41: Line = other_2969;
    let _e44: Line = other_2969;
    let _e47: Line = other_2969;
    return Point(((((vec4(_e4.g1_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g1_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_line_left_anti_contraction(self_3292: Flector, other_2970: Line) -> Plane {
    var self_3293: Flector;
    var other_2971: Line;

    self_3293 = self_3292;
    other_2971 = other_2970;
    let _e4: Flector = self_3293;
    let _e8: Line = other_2971;
    let _e11: Line = other_2971;
    let _e14: Line = other_2971;
    let _e17: Line = other_2971;
    let _e28: Flector = self_3293;
    let _e32: Line = other_2971;
    let _e35: Line = other_2971;
    let _e38: Line = other_2971;
    let _e41: Line = other_2971;
    let _e53: Flector = self_3293;
    let _e57: Line = other_2971;
    let _e60: Line = other_2971;
    let _e63: Line = other_2971;
    let _e66: Line = other_2971;
    return Plane(((((vec4(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e28.g1_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e53.g1_.x) * vec4<f32>(_e57.g0_.x, _e60.g0_.z, _e63.g0_.y, _e66.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn flector_line_right_anti_contraction(self_3294: Flector, other_2972: Line) -> Plane {
    var self_3295: Flector;
    var other_2973: Line;

    self_3295 = self_3294;
    other_2973 = other_2972;
    let _e4: Flector = self_3295;
    let _e8: Line = other_2973;
    let _e19: Flector = self_3295;
    let _e23: Line = other_2973;
    let _e35: Flector = self_3295;
    let _e38: Line = other_2973;
    let _e41: Line = other_2973;
    let _e44: Line = other_2973;
    let _e47: Line = other_2973;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * vec4<f32>(_e38.g0_.x, _e41.g0_.y, _e44.g0_.z, _e47.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_plane_into(self_3296: Flector) -> Plane {
    var self_3297: Flector;

    self_3297 = self_3296;
    let _e2: Flector = self_3297;
    return Plane(_e2.g1_);
}

fn flector_plane_add(self_3298: Flector, other_2974: Plane) -> Flector {
    var self_3299: Flector;
    var other_2975: Plane;

    self_3299 = self_3298;
    other_2975 = other_2974;
    let _e4: Flector = self_3299;
    let _e6: Flector = self_3299;
    let _e8: Plane = other_2975;
    return Flector(_e4.g0_, (_e6.g1_ + _e8.g0_));
}

fn flector_plane_sub(self_3300: Flector, other_2976: Plane) -> Flector {
    var self_3301: Flector;
    var other_2977: Plane;

    self_3301 = self_3300;
    other_2977 = other_2976;
    let _e4: Flector = self_3301;
    let _e6: Flector = self_3301;
    let _e8: Plane = other_2977;
    return Flector(_e4.g0_, (_e6.g1_ - _e8.g0_));
}

fn flector_plane_geometric_product(self_3302: Flector, other_2978: Plane) -> MultiVector {
    var self_3303: Flector;
    var other_2979: Plane;

    self_3303 = self_3302;
    other_2979 = other_2978;
    let _e4: Flector = self_3303;
    let _e8: Plane = other_2979;
    let _e17: Flector = self_3303;
    let _e21: Plane = other_2979;
    let _e31: Flector = self_3303;
    let _e35: Plane = other_2979;
    let _e45: Flector = self_3303;
    let _e48: Flector = self_3303;
    let _e52: Plane = other_2979;
    let _e55: Plane = other_2979;
    let _e67: Flector = self_3303;
    let _e71: Plane = other_2979;
    let _e74: Plane = other_2979;
    let _e77: Plane = other_2979;
    let _e87: Flector = self_3303;
    let _e91: Plane = other_2979;
    let _e94: Plane = other_2979;
    let _e97: Plane = other_2979;
    let _e108: Flector = self_3303;
    let _e112: Plane = other_2979;
    let _e123: Flector = self_3303;
    let _e127: Plane = other_2979;
    let _e138: Flector = self_3303;
    let _e142: Plane = other_2979;
    let _e145: Plane = other_2979;
    let _e148: Plane = other_2979;
    let _e154: Flector = self_3303;
    let _e157: Flector = self_3303;
    let _e160: Flector = self_3303;
    let _e164: Plane = other_2979;
    let _e167: Plane = other_2979;
    let _e170: Plane = other_2979;
    let _e181: Flector = self_3303;
    let _e184: Flector = self_3303;
    let _e187: Flector = self_3303;
    let _e191: Plane = other_2979;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g1_.w, _e48.g0_.x) * vec2<f32>(_e52.g0_.w, _e55.g0_.x)) * vec2<f32>(-1.0, 1.0))), vec4(0.0), (((((((vec3(_e67.g0_.y) * vec3<f32>(_e71.g0_.z, _e74.g0_.z, _e77.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e87.g0_.z) * vec3<f32>(_e91.g0_.y, _e94.g0_.x, _e97.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e108.g1_.y) * vec3(_e112.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e123.g1_.z) * vec3(_e127.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e138.g1_.w) * vec3<f32>(_e142.g0_.x, _e145.g0_.y, _e148.g0_.z))) + ((vec3<f32>(_e154.g1_.x, _e157.g0_.x, _e160.g0_.x) * vec3<f32>(_e164.g0_.w, _e167.g0_.z, _e170.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), ((vec3<f32>(_e181.g0_.x, _e184.g0_.y, _e187.g0_.z) * vec3(_e191.g0_.w)) * vec3(-1.0)), vec4(0.0));
}

fn flector_plane_geometric_anti_product(self_3304: Flector, other_2980: Plane) -> MultiVector {
    var self_3305: Flector;
    var other_2981: Plane;

    self_3305 = self_3304;
    other_2981 = other_2980;
    let _e4: Flector = self_3305;
    let _e8: Plane = other_2981;
    let _e17: Flector = self_3305;
    let _e21: Plane = other_2981;
    let _e31: Flector = self_3305;
    let _e35: Plane = other_2981;
    let _e45: Flector = self_3305;
    let _e49: Plane = other_2981;
    let _e59: Flector = self_3305;
    let _e63: Plane = other_2981;
    let _e73: Flector = self_3305;
    let _e76: Flector = self_3305;
    let _e80: Plane = other_2981;
    let _e90: Flector = self_3305;
    let _e94: Plane = other_2981;
    let _e97: Plane = other_2981;
    let _e100: Plane = other_2981;
    let _e106: Flector = self_3305;
    let _e110: Plane = other_2981;
    let _e113: Plane = other_2981;
    let _e116: Plane = other_2981;
    let _e127: Flector = self_3305;
    let _e131: Plane = other_2981;
    let _e134: Plane = other_2981;
    let _e137: Plane = other_2981;
    let _e148: Flector = self_3305;
    let _e152: Plane = other_2981;
    let _e155: Plane = other_2981;
    let _e158: Plane = other_2981;
    let _e169: Flector = self_3305;
    let _e173: Plane = other_2981;
    let _e176: Plane = other_2981;
    let _e179: Plane = other_2981;
    let _e189: Flector = self_3305;
    let _e193: Plane = other_2981;
    let _e196: Plane = other_2981;
    let _e199: Plane = other_2981;
    let _e210: Flector = self_3305;
    let _e214: Plane = other_2981;
    let _e225: Flector = self_3305;
    let _e229: Plane = other_2981;
    let _e240: Flector = self_3305;
    let _e244: Plane = other_2981;
    let _e247: Plane = other_2981;
    let _e250: Plane = other_2981;
    let _e256: Flector = self_3305;
    let _e259: Flector = self_3305;
    let _e262: Flector = self_3305;
    let _e266: Plane = other_2981;
    let _e269: Plane = other_2981;
    let _e272: Plane = other_2981;
    return MultiVector((((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.y) * vec2(_e49.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e59.g1_.z) * vec2(_e63.g0_.z)) * vec2<f32>(0.0, 1.0))) + (vec2<f32>(_e73.g0_.x, _e76.g1_.x) * vec2(_e80.g0_.x))), vec4(0.0), ((((vec3(0.0) - (vec3(_e90.g0_.w) * vec3<f32>(_e94.g0_.x, _e97.g0_.y, _e100.g0_.z))) + ((vec3(_e106.g1_.y) * vec3<f32>(_e110.g0_.z, _e113.g0_.z, _e116.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e127.g1_.z) * vec3<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e148.g1_.x) * vec3<f32>(_e152.g0_.x, _e155.g0_.z, _e158.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (((((((vec3(_e169.g0_.y) * vec3<f32>(_e173.g0_.z, _e176.g0_.z, _e179.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e189.g0_.z) * vec3<f32>(_e193.g0_.y, _e196.g0_.x, _e199.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e210.g1_.y) * vec3(_e214.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e225.g1_.z) * vec3(_e229.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e240.g1_.w) * vec3<f32>(_e244.g0_.x, _e247.g0_.y, _e250.g0_.z))) + ((vec3<f32>(_e256.g1_.x, _e259.g0_.x, _e262.g0_.x) * vec3<f32>(_e266.g0_.w, _e269.g0_.z, _e272.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))), vec4(0.0));
}

fn flector_plane_regressive_product(self_3306: Flector, other_2982: Plane) -> MultiVector {
    var self_3307: Flector;
    var other_2983: Plane;

    self_3307 = self_3306;
    other_2983 = other_2982;
    let _e4: Flector = self_3307;
    let _e8: Plane = other_2983;
    let _e17: Flector = self_3307;
    let _e21: Plane = other_2983;
    let _e31: Flector = self_3307;
    let _e35: Plane = other_2983;
    let _e45: Flector = self_3307;
    let _e49: Plane = other_2983;
    let _e61: Flector = self_3307;
    let _e65: Plane = other_2983;
    let _e68: Plane = other_2983;
    let _e71: Plane = other_2983;
    let _e81: Flector = self_3307;
    let _e85: Plane = other_2983;
    let _e88: Plane = other_2983;
    let _e91: Plane = other_2983;
    let _e102: Flector = self_3307;
    let _e106: Plane = other_2983;
    let _e109: Plane = other_2983;
    let _e112: Plane = other_2983;
    let _e125: Flector = self_3307;
    let _e129: Plane = other_2983;
    let _e132: Plane = other_2983;
    let _e135: Plane = other_2983;
    let _e141: Flector = self_3307;
    let _e144: Flector = self_3307;
    let _e147: Flector = self_3307;
    let _e151: Plane = other_2983;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g1_.y) * vec3<f32>(_e65.g0_.z, _e68.g0_.z, _e71.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g1_.z) * vec3<f32>(_e85.g0_.y, _e88.g0_.x, _e91.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g1_.x) * vec3<f32>(_e106.g0_.x, _e109.g0_.z, _e112.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g1_.w) * vec3<f32>(_e129.g0_.x, _e132.g0_.y, _e135.g0_.z))) + (vec3<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z) * vec3(_e151.g0_.w))), vec4(0.0));
}

fn flector_plane_anti_wedge(self_3308: Flector, other_2984: Plane) -> MultiVector {
    var self_3309: Flector;
    var other_2985: Plane;

    self_3309 = self_3308;
    other_2985 = other_2984;
    let _e4: Flector = self_3309;
    let _e8: Plane = other_2985;
    let _e17: Flector = self_3309;
    let _e21: Plane = other_2985;
    let _e31: Flector = self_3309;
    let _e35: Plane = other_2985;
    let _e45: Flector = self_3309;
    let _e49: Plane = other_2985;
    let _e61: Flector = self_3309;
    let _e65: Plane = other_2985;
    let _e68: Plane = other_2985;
    let _e71: Plane = other_2985;
    let _e81: Flector = self_3309;
    let _e85: Plane = other_2985;
    let _e88: Plane = other_2985;
    let _e91: Plane = other_2985;
    let _e102: Flector = self_3309;
    let _e106: Plane = other_2985;
    let _e109: Plane = other_2985;
    let _e112: Plane = other_2985;
    let _e125: Flector = self_3309;
    let _e129: Plane = other_2985;
    let _e132: Plane = other_2985;
    let _e135: Plane = other_2985;
    let _e141: Flector = self_3309;
    let _e144: Flector = self_3309;
    let _e147: Flector = self_3309;
    let _e151: Plane = other_2985;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g1_.y) * vec3<f32>(_e65.g0_.z, _e68.g0_.z, _e71.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g1_.z) * vec3<f32>(_e85.g0_.y, _e88.g0_.x, _e91.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g1_.x) * vec3<f32>(_e106.g0_.x, _e109.g0_.z, _e112.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g1_.w) * vec3<f32>(_e129.g0_.x, _e132.g0_.y, _e135.g0_.z))) + (vec3<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z) * vec3(_e151.g0_.w))), vec4(0.0));
}

fn flector_plane_meet(self_3310: Flector, other_2986: Plane) -> MultiVector {
    var self_3311: Flector;
    var other_2987: Plane;

    self_3311 = self_3310;
    other_2987 = other_2986;
    let _e4: Flector = self_3311;
    let _e8: Plane = other_2987;
    let _e17: Flector = self_3311;
    let _e21: Plane = other_2987;
    let _e31: Flector = self_3311;
    let _e35: Plane = other_2987;
    let _e45: Flector = self_3311;
    let _e49: Plane = other_2987;
    let _e61: Flector = self_3311;
    let _e65: Plane = other_2987;
    let _e68: Plane = other_2987;
    let _e71: Plane = other_2987;
    let _e81: Flector = self_3311;
    let _e85: Plane = other_2987;
    let _e88: Plane = other_2987;
    let _e91: Plane = other_2987;
    let _e102: Flector = self_3311;
    let _e106: Plane = other_2987;
    let _e109: Plane = other_2987;
    let _e112: Plane = other_2987;
    let _e125: Flector = self_3311;
    let _e129: Plane = other_2987;
    let _e132: Plane = other_2987;
    let _e135: Plane = other_2987;
    let _e141: Flector = self_3311;
    let _e144: Flector = self_3311;
    let _e147: Flector = self_3311;
    let _e151: Plane = other_2987;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g1_.y) * vec3<f32>(_e65.g0_.z, _e68.g0_.z, _e71.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g1_.z) * vec3<f32>(_e85.g0_.y, _e88.g0_.x, _e91.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g1_.x) * vec3<f32>(_e106.g0_.x, _e109.g0_.z, _e112.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e125.g1_.w) * vec3<f32>(_e129.g0_.x, _e132.g0_.y, _e135.g0_.z))) + (vec3<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z) * vec3(_e151.g0_.w))), vec4(0.0));
}

fn flector_plane_outer_product(self_3312: Flector, other_2988: Plane) -> AntiScalar {
    var self_3313: Flector;
    var other_2989: Plane;

    self_3313 = self_3312;
    other_2989 = other_2988;
    let _e4: Flector = self_3313;
    let _e7: Plane = other_2989;
    let _e11: Flector = self_3313;
    let _e14: Plane = other_2989;
    let _e19: Flector = self_3313;
    let _e22: Plane = other_2989;
    let _e27: Flector = self_3313;
    let _e30: Plane = other_2989;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_wedge(self_3314: Flector, other_2990: Plane) -> AntiScalar {
    var self_3315: Flector;
    var other_2991: Plane;

    self_3315 = self_3314;
    other_2991 = other_2990;
    let _e4: Flector = self_3315;
    let _e7: Plane = other_2991;
    let _e11: Flector = self_3315;
    let _e14: Plane = other_2991;
    let _e19: Flector = self_3315;
    let _e22: Plane = other_2991;
    let _e27: Flector = self_3315;
    let _e30: Plane = other_2991;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_join(self_3316: Flector, other_2992: Plane) -> AntiScalar {
    var self_3317: Flector;
    var other_2993: Plane;

    self_3317 = self_3316;
    other_2993 = other_2992;
    let _e4: Flector = self_3317;
    let _e7: Plane = other_2993;
    let _e11: Flector = self_3317;
    let _e14: Plane = other_2993;
    let _e19: Flector = self_3317;
    let _e22: Plane = other_2993;
    let _e27: Flector = self_3317;
    let _e30: Plane = other_2993;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_inner_product(self_3318: Flector, other_2994: Plane) -> MultiVector {
    var self_3319: Flector;
    var other_2995: Plane;

    self_3319 = self_3318;
    other_2995 = other_2994;
    let _e4: Flector = self_3319;
    let _e7: Flector = self_3319;
    let _e11: Plane = other_2995;
    let _e14: Plane = other_2995;
    let _e25: Flector = self_3319;
    let _e29: Plane = other_2995;
    let _e32: Plane = other_2995;
    let _e35: Plane = other_2995;
    let _e45: Flector = self_3319;
    let _e49: Plane = other_2995;
    let _e52: Plane = other_2995;
    let _e55: Plane = other_2995;
    let _e66: Flector = self_3319;
    let _e70: Plane = other_2995;
    let _e73: Plane = other_2995;
    let _e76: Plane = other_2995;
    let _e87: Flector = self_3319;
    let _e90: Flector = self_3319;
    let _e93: Flector = self_3319;
    let _e97: Plane = other_2995;
    return MultiVector(((vec2<f32>(_e4.g1_.w, _e7.g1_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), vec4(0.0), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3(_e97.g0_.w)) * vec3(-1.0)), vec4(0.0));
}

fn flector_plane_inner_anti_product(self_3320: Flector, other_2996: Plane) -> Motor {
    var self_3321: Flector;
    var other_2997: Plane;

    self_3321 = self_3320;
    other_2997 = other_2996;
    let _e4: Flector = self_3321;
    let _e8: Plane = other_2997;
    let _e19: Flector = self_3321;
    let _e23: Plane = other_2997;
    let _e35: Flector = self_3321;
    let _e38: Flector = self_3321;
    let _e41: Flector = self_3321;
    let _e44: Flector = self_3321;
    let _e48: Plane = other_2997;
    let _e59: Flector = self_3321;
    let _e63: Plane = other_2997;
    let _e66: Plane = other_2997;
    let _e69: Plane = other_2997;
    let _e79: Flector = self_3321;
    let _e83: Plane = other_2997;
    let _e86: Plane = other_2997;
    let _e89: Plane = other_2997;
    let _e100: Flector = self_3321;
    let _e104: Plane = other_2997;
    let _e107: Plane = other_2997;
    let _e110: Plane = other_2997;
    return Motor(((((vec4(_e4.g1_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w, _e38.g0_.w, _e41.g0_.w, _e44.g1_.x) * _e48.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))), ((((vec3(_e59.g0_.y) * vec3<f32>(_e63.g0_.z, _e66.g0_.z, _e69.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e79.g0_.z) * vec3<f32>(_e83.g0_.y, _e86.g0_.x, _e89.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e100.g0_.x) * vec3<f32>(_e104.g0_.x, _e107.g0_.z, _e110.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn flector_plane_left_contraction(self_3322: Flector, other_2998: Plane) -> MultiVector {
    var self_3323: Flector;
    var other_2999: Plane;

    self_3323 = self_3322;
    other_2999 = other_2998;
    let _e4: Flector = self_3323;
    let _e7: Flector = self_3323;
    let _e11: Plane = other_2999;
    let _e14: Plane = other_2999;
    let _e25: Flector = self_3323;
    let _e29: Plane = other_2999;
    let _e32: Plane = other_2999;
    let _e35: Plane = other_2999;
    let _e45: Flector = self_3323;
    let _e49: Plane = other_2999;
    let _e52: Plane = other_2999;
    let _e55: Plane = other_2999;
    let _e66: Flector = self_3323;
    let _e70: Plane = other_2999;
    let _e73: Plane = other_2999;
    let _e76: Plane = other_2999;
    let _e87: Flector = self_3323;
    let _e90: Flector = self_3323;
    let _e93: Flector = self_3323;
    let _e97: Plane = other_2999;
    return MultiVector(((vec2<f32>(_e4.g1_.w, _e7.g1_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), vec4(0.0), ((((vec3(_e25.g0_.y) * vec3<f32>(_e29.g0_.z, _e32.g0_.z, _e35.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e45.g0_.z) * vec3<f32>(_e49.g0_.y, _e52.g0_.x, _e55.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3(_e97.g0_.w)) * vec3(-1.0)), vec4(0.0));
}

fn flector_plane_right_contraction(self_3324: Flector, other_3000: Plane) -> Scalar {
    var self_3325: Flector;
    var other_3001: Plane;

    self_3325 = self_3324;
    other_3001 = other_3000;
    let _e5: Flector = self_3325;
    let _e8: Plane = other_3001;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_left_anti_contraction(self_3326: Flector, other_3002: Plane) -> AntiScalar {
    var self_3327: Flector;
    var other_3003: Plane;

    self_3327 = self_3326;
    other_3003 = other_3002;
    let _e4: Flector = self_3327;
    let _e7: Plane = other_3003;
    let _e11: Flector = self_3327;
    let _e14: Plane = other_3003;
    let _e19: Flector = self_3327;
    let _e22: Plane = other_3003;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_plane_right_anti_contraction(self_3328: Flector, other_3004: Plane) -> Motor {
    var self_3329: Flector;
    var other_3005: Plane;

    self_3329 = self_3328;
    other_3005 = other_3004;
    let _e4: Flector = self_3329;
    let _e8: Plane = other_3005;
    let _e19: Flector = self_3329;
    let _e23: Plane = other_3005;
    let _e35: Flector = self_3329;
    let _e38: Flector = self_3329;
    let _e41: Flector = self_3329;
    let _e44: Flector = self_3329;
    let _e48: Plane = other_3005;
    let _e59: Flector = self_3329;
    let _e63: Plane = other_3005;
    let _e66: Plane = other_3005;
    let _e69: Plane = other_3005;
    let _e79: Flector = self_3329;
    let _e83: Plane = other_3005;
    let _e86: Plane = other_3005;
    let _e89: Plane = other_3005;
    let _e100: Flector = self_3329;
    let _e104: Plane = other_3005;
    let _e107: Plane = other_3005;
    let _e110: Plane = other_3005;
    return Motor(((((vec4(_e4.g1_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w, _e38.g0_.w, _e41.g0_.w, _e44.g1_.x) * _e48.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))), ((((vec3(_e59.g0_.y) * vec3<f32>(_e63.g0_.z, _e66.g0_.z, _e69.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e79.g0_.z) * vec3<f32>(_e83.g0_.y, _e86.g0_.x, _e89.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e100.g0_.x) * vec3<f32>(_e104.g0_.x, _e107.g0_.z, _e110.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn flector_plane_scalar_product(self_3330: Flector, other_3006: Plane) -> Scalar {
    var self_3331: Flector;
    var other_3007: Plane;

    self_3331 = self_3330;
    other_3007 = other_3006;
    let _e5: Flector = self_3331;
    let _e8: Plane = other_3007;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_dot(self_3332: Flector, other_3008: Plane) -> Scalar {
    var self_3333: Flector;
    var other_3009: Plane;

    self_3333 = self_3332;
    other_3009 = other_3008;
    let _e5: Flector = self_3333;
    let _e8: Plane = other_3009;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_anti_scalar_product(self_3334: Flector, other_3010: Plane) -> AntiScalar {
    var self_3335: Flector;
    var other_3011: Plane;

    self_3335 = self_3334;
    other_3011 = other_3010;
    let _e4: Flector = self_3335;
    let _e7: Plane = other_3011;
    let _e11: Flector = self_3335;
    let _e14: Plane = other_3011;
    let _e19: Flector = self_3335;
    let _e22: Plane = other_3011;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_plane_anti_dot(self_3336: Flector, other_3012: Plane) -> AntiScalar {
    var self_3337: Flector;
    var other_3013: Plane;

    self_3337 = self_3336;
    other_3013 = other_3012;
    let _e4: Flector = self_3337;
    let _e7: Plane = other_3013;
    let _e11: Flector = self_3337;
    let _e14: Plane = other_3013;
    let _e19: Flector = self_3337;
    let _e22: Plane = other_3013;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_motor_geometric_product(self_3338: Flector, other_3014: Motor) -> Flector {
    var self_3339: Flector;
    var other_3015: Motor;

    self_3339 = self_3338;
    other_3015 = other_3014;
    let _e4: Flector = self_3339;
    let _e8: Motor = other_3015;
    let _e11: Motor = other_3015;
    let _e14: Motor = other_3015;
    let _e17: Motor = other_3015;
    let _e28: Flector = self_3339;
    let _e32: Motor = other_3015;
    let _e35: Motor = other_3015;
    let _e38: Motor = other_3015;
    let _e41: Motor = other_3015;
    let _e53: Flector = self_3339;
    let _e57: Motor = other_3015;
    let _e69: Flector = self_3339;
    let _e73: Motor = other_3015;
    let _e85: Flector = self_3339;
    let _e89: Motor = other_3015;
    let _e101: Flector = self_3339;
    let _e105: Motor = other_3015;
    let _e108: Motor = other_3015;
    let _e111: Motor = other_3015;
    let _e114: Motor = other_3015;
    let _e120: Flector = self_3339;
    let _e124: Motor = other_3015;
    let _e127: Motor = other_3015;
    let _e130: Motor = other_3015;
    let _e133: Motor = other_3015;
    let _e145: Flector = self_3339;
    let _e149: Motor = other_3015;
    let _e152: Motor = other_3015;
    let _e155: Motor = other_3015;
    let _e158: Motor = other_3015;
    let _e169: Flector = self_3339;
    let _e173: Motor = other_3015;
    let _e176: Motor = other_3015;
    let _e179: Motor = other_3015;
    let _e182: Motor = other_3015;
    let _e194: Flector = self_3339;
    let _e198: Motor = other_3015;
    let _e201: Motor = other_3015;
    let _e204: Motor = other_3015;
    let _e207: Motor = other_3015;
    let _e219: Flector = self_3339;
    let _e223: Motor = other_3015;
    let _e226: Motor = other_3015;
    let _e229: Motor = other_3015;
    let _e232: Motor = other_3015;
    let _e244: Flector = self_3339;
    let _e248: Motor = other_3015;
    let _e251: Motor = other_3015;
    let _e254: Motor = other_3015;
    let _e257: Motor = other_3015;
    let _e269: Flector = self_3339;
    let _e273: Motor = other_3015;
    let _e276: Motor = other_3015;
    let _e279: Motor = other_3015;
    let _e282: Motor = other_3015;
    let _e294: Flector = self_3339;
    let _e298: Motor = other_3015;
    let _e309: Flector = self_3339;
    let _e312: Motor = other_3015;
    let _e315: Motor = other_3015;
    let _e318: Motor = other_3015;
    let _e321: Motor = other_3015;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.x) * vec4(_e57.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e69.g1_.y) * vec4(_e73.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4(_e89.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e101.g1_.w) * vec4<f32>(_e105.g1_.x, _e108.g1_.y, _e111.g1_.z, _e114.g0_.w))) + ((vec4(_e120.g0_.x) * vec4<f32>(_e124.g1_.x, _e127.g1_.z, _e130.g1_.y, _e133.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((((((vec4(_e145.g0_.x) * vec4<f32>(_e149.g0_.w, _e152.g0_.z, _e155.g0_.y, _e158.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e169.g0_.y) * vec4<f32>(_e173.g0_.z, _e176.g0_.w, _e179.g0_.x, _e182.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e194.g0_.z) * vec4<f32>(_e198.g0_.y, _e201.g0_.x, _e204.g0_.w, _e207.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e219.g1_.x) * vec4<f32>(_e223.g1_.z, _e226.g1_.z, _e229.g1_.y, _e232.g1_.z)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e244.g1_.y) * vec4<f32>(_e248.g1_.z, _e251.g1_.z, _e254.g1_.x, _e257.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e269.g1_.z) * vec4<f32>(_e273.g1_.y, _e276.g1_.x, _e279.g1_.y, _e282.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e294.g1_.w) * _e298.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e309.g0_.wwwx * vec4<f32>(_e312.g1_.x, _e315.g1_.y, _e318.g1_.z, _e321.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn flector_motor_geometric_anti_product(self_3340: Flector, other_3016: Motor) -> Flector {
    var self_3341: Flector;
    var other_3017: Motor;

    self_3341 = self_3340;
    other_3017 = other_3016;
    let _e4: Flector = self_3341;
    let _e8: Motor = other_3017;
    let _e18: Flector = self_3341;
    let _e22: Motor = other_3017;
    let _e33: Flector = self_3341;
    let _e37: Motor = other_3017;
    let _e40: Motor = other_3017;
    let _e43: Motor = other_3017;
    let _e46: Motor = other_3017;
    let _e58: Flector = self_3341;
    let _e62: Motor = other_3017;
    let _e65: Motor = other_3017;
    let _e68: Motor = other_3017;
    let _e71: Motor = other_3017;
    let _e83: Flector = self_3341;
    let _e87: Motor = other_3017;
    let _e90: Motor = other_3017;
    let _e93: Motor = other_3017;
    let _e96: Motor = other_3017;
    let _e108: Flector = self_3341;
    let _e112: Motor = other_3017;
    let _e115: Motor = other_3017;
    let _e118: Motor = other_3017;
    let _e121: Motor = other_3017;
    let _e133: Flector = self_3341;
    let _e137: Motor = other_3017;
    let _e148: Flector = self_3341;
    let _e152: Motor = other_3017;
    let _e163: Flector = self_3341;
    let _e167: Motor = other_3017;
    let _e178: Flector = self_3341;
    let _e182: Motor = other_3017;
    let _e194: Flector = self_3341;
    let _e198: Motor = other_3017;
    let _e201: Motor = other_3017;
    let _e204: Motor = other_3017;
    let _e207: Motor = other_3017;
    let _e219: Flector = self_3341;
    let _e223: Motor = other_3017;
    let _e226: Motor = other_3017;
    let _e229: Motor = other_3017;
    let _e232: Motor = other_3017;
    let _e244: Flector = self_3341;
    let _e248: Motor = other_3017;
    let _e251: Motor = other_3017;
    let _e254: Motor = other_3017;
    let _e257: Motor = other_3017;
    let _e269: Flector = self_3341;
    let _e273: Motor = other_3017;
    let _e285: Flector = self_3341;
    let _e288: Motor = other_3017;
    return Flector((((((((((vec4(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e33.g0_.w) * vec4<f32>(_e37.g1_.x, _e40.g1_.y, _e43.g1_.z, _e46.g0_.w)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e58.g1_.x) * vec4<f32>(_e62.g1_.z, _e65.g1_.z, _e68.g1_.y, _e71.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e83.g1_.y) * vec4<f32>(_e87.g1_.z, _e90.g1_.z, _e93.g1_.x, _e96.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e108.g1_.z) * vec4<f32>(_e112.g1_.y, _e115.g1_.x, _e118.g1_.y, _e121.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e133.g1_.w) * _e137.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e148.g0_.x) * _e152.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((((((vec4(_e163.g0_.y) * vec4(_e167.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e178.g0_.z) * vec4(_e182.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e194.g1_.x) * vec4<f32>(_e198.g0_.w, _e201.g0_.z, _e204.g0_.y, _e207.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e219.g1_.y) * vec4<f32>(_e223.g0_.z, _e226.g0_.w, _e229.g0_.x, _e232.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e244.g1_.z) * vec4<f32>(_e248.g0_.y, _e251.g0_.x, _e254.g0_.w, _e257.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e269.g1_.w) * vec4(_e273.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e285.g0_.wwwx * _e288.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_motor_regressive_product(self_3342: Flector, other_3018: Motor) -> Flector {
    var self_3343: Flector;
    var other_3019: Motor;

    self_3343 = self_3342;
    other_3019 = other_3018;
    let _e4: Flector = self_3343;
    let _e8: Motor = other_3019;
    let _e11: Motor = other_3019;
    let _e14: Motor = other_3019;
    let _e17: Motor = other_3019;
    let _e28: Flector = self_3343;
    let _e32: Motor = other_3019;
    let _e35: Motor = other_3019;
    let _e38: Motor = other_3019;
    let _e41: Motor = other_3019;
    let _e53: Flector = self_3343;
    let _e57: Motor = other_3019;
    let _e60: Motor = other_3019;
    let _e63: Motor = other_3019;
    let _e66: Motor = other_3019;
    let _e78: Flector = self_3343;
    let _e82: Motor = other_3019;
    let _e93: Flector = self_3343;
    let _e95: Motor = other_3019;
    let _e101: Flector = self_3343;
    let _e103: Motor = other_3019;
    return Flector(((((((vec4(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e28.g1_.y) * vec4<f32>(_e32.g1_.z, _e35.g1_.z, _e38.g1_.x, _e41.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e53.g1_.z) * vec4<f32>(_e57.g1_.y, _e60.g1_.x, _e63.g1_.y, _e66.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e78.g1_.w) * _e82.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e93.g0_ * vec4(_e95.g0_.w))), (_e101.g1_ * vec4(_e103.g0_.w)));
}

fn flector_motor_anti_wedge(self_3344: Flector, other_3020: Motor) -> Flector {
    var self_3345: Flector;
    var other_3021: Motor;

    self_3345 = self_3344;
    other_3021 = other_3020;
    let _e4: Flector = self_3345;
    let _e8: Motor = other_3021;
    let _e11: Motor = other_3021;
    let _e14: Motor = other_3021;
    let _e17: Motor = other_3021;
    let _e28: Flector = self_3345;
    let _e32: Motor = other_3021;
    let _e35: Motor = other_3021;
    let _e38: Motor = other_3021;
    let _e41: Motor = other_3021;
    let _e53: Flector = self_3345;
    let _e57: Motor = other_3021;
    let _e60: Motor = other_3021;
    let _e63: Motor = other_3021;
    let _e66: Motor = other_3021;
    let _e78: Flector = self_3345;
    let _e82: Motor = other_3021;
    let _e93: Flector = self_3345;
    let _e95: Motor = other_3021;
    let _e101: Flector = self_3345;
    let _e103: Motor = other_3021;
    return Flector(((((((vec4(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e28.g1_.y) * vec4<f32>(_e32.g1_.z, _e35.g1_.z, _e38.g1_.x, _e41.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e53.g1_.z) * vec4<f32>(_e57.g1_.y, _e60.g1_.x, _e63.g1_.y, _e66.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e78.g1_.w) * _e82.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e93.g0_ * vec4(_e95.g0_.w))), (_e101.g1_ * vec4(_e103.g0_.w)));
}

fn flector_motor_meet(self_3346: Flector, other_3022: Motor) -> Flector {
    var self_3347: Flector;
    var other_3023: Motor;

    self_3347 = self_3346;
    other_3023 = other_3022;
    let _e4: Flector = self_3347;
    let _e8: Motor = other_3023;
    let _e11: Motor = other_3023;
    let _e14: Motor = other_3023;
    let _e17: Motor = other_3023;
    let _e28: Flector = self_3347;
    let _e32: Motor = other_3023;
    let _e35: Motor = other_3023;
    let _e38: Motor = other_3023;
    let _e41: Motor = other_3023;
    let _e53: Flector = self_3347;
    let _e57: Motor = other_3023;
    let _e60: Motor = other_3023;
    let _e63: Motor = other_3023;
    let _e66: Motor = other_3023;
    let _e78: Flector = self_3347;
    let _e82: Motor = other_3023;
    let _e93: Flector = self_3347;
    let _e95: Motor = other_3023;
    let _e101: Flector = self_3347;
    let _e103: Motor = other_3023;
    return Flector(((((((vec4(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e28.g1_.y) * vec4<f32>(_e32.g1_.z, _e35.g1_.z, _e38.g1_.x, _e41.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e53.g1_.z) * vec4<f32>(_e57.g1_.y, _e60.g1_.x, _e63.g1_.y, _e66.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e78.g1_.w) * _e82.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e93.g0_ * vec4(_e95.g0_.w))), (_e101.g1_ * vec4(_e103.g0_.w)));
}

fn flector_motor_outer_product(self_3348: Flector, other_3024: Motor) -> Plane {
    var self_3349: Flector;
    var other_3025: Motor;

    self_3349 = self_3348;
    other_3025 = other_3024;
    let _e4: Flector = self_3349;
    let _e8: Motor = other_3025;
    let _e11: Motor = other_3025;
    let _e14: Motor = other_3025;
    let _e17: Motor = other_3025;
    let _e28: Flector = self_3349;
    let _e32: Motor = other_3025;
    let _e35: Motor = other_3025;
    let _e38: Motor = other_3025;
    let _e41: Motor = other_3025;
    let _e53: Flector = self_3349;
    let _e57: Motor = other_3025;
    let _e60: Motor = other_3025;
    let _e63: Motor = other_3025;
    let _e66: Motor = other_3025;
    let _e78: Flector = self_3349;
    let _e82: Motor = other_3025;
    let _e85: Motor = other_3025;
    let _e88: Motor = other_3025;
    let _e91: Motor = other_3025;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_motor_wedge(self_3350: Flector, other_3026: Motor) -> Plane {
    var self_3351: Flector;
    var other_3027: Motor;

    self_3351 = self_3350;
    other_3027 = other_3026;
    let _e4: Flector = self_3351;
    let _e8: Motor = other_3027;
    let _e11: Motor = other_3027;
    let _e14: Motor = other_3027;
    let _e17: Motor = other_3027;
    let _e28: Flector = self_3351;
    let _e32: Motor = other_3027;
    let _e35: Motor = other_3027;
    let _e38: Motor = other_3027;
    let _e41: Motor = other_3027;
    let _e53: Flector = self_3351;
    let _e57: Motor = other_3027;
    let _e60: Motor = other_3027;
    let _e63: Motor = other_3027;
    let _e66: Motor = other_3027;
    let _e78: Flector = self_3351;
    let _e82: Motor = other_3027;
    let _e85: Motor = other_3027;
    let _e88: Motor = other_3027;
    let _e91: Motor = other_3027;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_motor_join(self_3352: Flector, other_3028: Motor) -> Plane {
    var self_3353: Flector;
    var other_3029: Motor;

    self_3353 = self_3352;
    other_3029 = other_3028;
    let _e4: Flector = self_3353;
    let _e8: Motor = other_3029;
    let _e11: Motor = other_3029;
    let _e14: Motor = other_3029;
    let _e17: Motor = other_3029;
    let _e28: Flector = self_3353;
    let _e32: Motor = other_3029;
    let _e35: Motor = other_3029;
    let _e38: Motor = other_3029;
    let _e41: Motor = other_3029;
    let _e53: Flector = self_3353;
    let _e57: Motor = other_3029;
    let _e60: Motor = other_3029;
    let _e63: Motor = other_3029;
    let _e66: Motor = other_3029;
    let _e78: Flector = self_3353;
    let _e82: Motor = other_3029;
    let _e85: Motor = other_3029;
    let _e88: Motor = other_3029;
    let _e91: Motor = other_3029;
    return Plane((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g0_.w) * vec4<f32>(_e57.g1_.x, _e60.g1_.y, _e63.g1_.z, _e66.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g0_.z, _e88.g0_.y, _e91.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_motor_inner_product(self_3354: Flector, other_3030: Motor) -> Flector {
    var self_3355: Flector;
    var other_3031: Motor;

    self_3355 = self_3354;
    other_3031 = other_3030;
    let _e4: Flector = self_3355;
    let _e8: Motor = other_3031;
    let _e11: Motor = other_3031;
    let _e14: Motor = other_3031;
    let _e17: Motor = other_3031;
    let _e28: Flector = self_3355;
    let _e32: Motor = other_3031;
    let _e35: Motor = other_3031;
    let _e38: Motor = other_3031;
    let _e41: Motor = other_3031;
    let _e53: Flector = self_3355;
    let _e57: Motor = other_3031;
    let _e69: Flector = self_3355;
    let _e73: Motor = other_3031;
    let _e85: Flector = self_3355;
    let _e89: Motor = other_3031;
    let _e101: Flector = self_3355;
    let _e105: Motor = other_3031;
    let _e108: Motor = other_3031;
    let _e111: Motor = other_3031;
    let _e114: Motor = other_3031;
    let _e120: Flector = self_3355;
    let _e124: Motor = other_3031;
    let _e127: Motor = other_3031;
    let _e130: Motor = other_3031;
    let _e133: Motor = other_3031;
    let _e145: Flector = self_3355;
    let _e148: Motor = other_3031;
    return Flector(((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.x) * vec4(_e57.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e69.g1_.y) * vec4(_e73.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e85.g1_.z) * vec4(_e89.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e101.g1_.w) * vec4<f32>(_e105.g1_.x, _e108.g1_.y, _e111.g1_.z, _e114.g0_.w))) + ((vec4(_e120.g0_.x) * vec4<f32>(_e124.g1_.x, _e127.g1_.z, _e130.g1_.y, _e133.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e145.g0_.xyzx * _e148.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_motor_inner_anti_product(self_3356: Flector, other_3032: Motor) -> Flector {
    var self_3357: Flector;
    var other_3033: Motor;

    self_3357 = self_3356;
    other_3033 = other_3032;
    let _e4: Flector = self_3357;
    let _e6: Motor = other_3033;
    let _e11: Flector = self_3357;
    let _e15: Motor = other_3033;
    let _e26: Flector = self_3357;
    let _e30: Motor = other_3033;
    let _e42: Flector = self_3357;
    let _e46: Motor = other_3033;
    let _e49: Motor = other_3033;
    let _e52: Motor = other_3033;
    let _e55: Motor = other_3033;
    let _e67: Flector = self_3357;
    let _e71: Motor = other_3033;
    let _e74: Motor = other_3033;
    let _e77: Motor = other_3033;
    let _e80: Motor = other_3033;
    let _e92: Flector = self_3357;
    let _e96: Motor = other_3033;
    let _e99: Motor = other_3033;
    let _e102: Motor = other_3033;
    let _e105: Motor = other_3033;
    let _e117: Flector = self_3357;
    let _e121: Motor = other_3033;
    let _e133: Flector = self_3357;
    let _e136: Motor = other_3033;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e42.g1_.x) * vec4<f32>(_e46.g0_.w, _e49.g0_.z, _e52.g0_.y, _e55.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e67.g1_.y) * vec4<f32>(_e71.g0_.z, _e74.g0_.w, _e77.g0_.x, _e80.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e92.g1_.z) * vec4<f32>(_e96.g0_.y, _e99.g0_.x, _e102.g0_.w, _e105.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e117.g1_.w) * vec4(_e121.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e133.g0_.wwwx * _e136.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_motor_left_contraction(self_3358: Flector, other_3034: Motor) -> Flector {
    var self_3359: Flector;
    var other_3035: Motor;

    self_3359 = self_3358;
    other_3035 = other_3034;
    let _e4: Flector = self_3359;
    let _e8: Motor = other_3035;
    let _e11: Motor = other_3035;
    let _e14: Motor = other_3035;
    let _e17: Motor = other_3035;
    let _e28: Flector = self_3359;
    let _e32: Motor = other_3035;
    let _e35: Motor = other_3035;
    let _e38: Motor = other_3035;
    let _e41: Motor = other_3035;
    let _e53: Flector = self_3359;
    let _e57: Motor = other_3035;
    let _e69: Flector = self_3359;
    let _e73: Motor = other_3035;
    let _e76: Motor = other_3035;
    let _e79: Motor = other_3035;
    let _e82: Motor = other_3035;
    let _e94: Flector = self_3359;
    let _e97: Motor = other_3035;
    return Flector((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g1_.y, _e35.g1_.x, _e38.g1_.y, _e41.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e53.g1_.w) * vec4(_e57.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e69.g0_.x) * vec4<f32>(_e73.g1_.x, _e76.g1_.z, _e79.g1_.y, _e82.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e94.g0_.xyzx * _e97.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_motor_right_contraction(self_3360: Flector, other_3036: Motor) -> Point {
    var self_3361: Flector;
    var other_3037: Motor;

    self_3361 = self_3360;
    other_3037 = other_3036;
    let _e4: Flector = self_3361;
    let _e8: Motor = other_3037;
    let _e19: Flector = self_3361;
    let _e23: Motor = other_3037;
    let _e35: Flector = self_3361;
    let _e38: Motor = other_3037;
    let _e41: Motor = other_3037;
    let _e44: Motor = other_3037;
    let _e47: Motor = other_3037;
    return Point(((((vec4(_e4.g1_.y) * vec4(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g1_.wwwx * vec4<f32>(_e38.g1_.x, _e41.g1_.y, _e44.g1_.z, _e47.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_motor_left_anti_contraction(self_3362: Flector, other_3038: Motor) -> Plane {
    var self_3363: Flector;
    var other_3039: Motor;

    self_3363 = self_3362;
    other_3039 = other_3038;
    let _e4: Flector = self_3363;
    let _e8: Motor = other_3039;
    let _e11: Motor = other_3039;
    let _e14: Motor = other_3039;
    let _e17: Motor = other_3039;
    let _e28: Flector = self_3363;
    let _e32: Motor = other_3039;
    let _e35: Motor = other_3039;
    let _e38: Motor = other_3039;
    let _e41: Motor = other_3039;
    let _e53: Flector = self_3363;
    let _e57: Motor = other_3039;
    let _e60: Motor = other_3039;
    let _e63: Motor = other_3039;
    let _e66: Motor = other_3039;
    return Plane(((((vec4(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e28.g1_.z) * vec4<f32>(_e32.g0_.y, _e35.g0_.x, _e38.g0_.y, _e41.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e53.g1_.x) * vec4<f32>(_e57.g0_.x, _e60.g0_.z, _e63.g0_.y, _e66.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn flector_motor_right_anti_contraction(self_3364: Flector, other_3040: Motor) -> Flector {
    var self_3365: Flector;
    var other_3041: Motor;

    self_3365 = self_3364;
    other_3041 = other_3040;
    let _e4: Flector = self_3365;
    let _e6: Motor = other_3041;
    let _e11: Flector = self_3365;
    let _e15: Motor = other_3041;
    let _e26: Flector = self_3365;
    let _e30: Motor = other_3041;
    let _e42: Flector = self_3365;
    let _e46: Motor = other_3041;
    let _e58: Flector = self_3365;
    let _e62: Motor = other_3041;
    let _e74: Flector = self_3365;
    let _e78: Motor = other_3041;
    let _e90: Flector = self_3365;
    let _e94: Motor = other_3041;
    let _e106: Flector = self_3365;
    let _e109: Motor = other_3041;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e42.g1_.x) * vec4(_e46.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e58.g1_.y) * vec4(_e62.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e74.g1_.z) * vec4(_e78.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e90.g1_.w) * vec4(_e94.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e106.g0_.wwwx * _e109.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_rotor_geometric_product(self_3366: Flector, other_3042: Rotor) -> Flector {
    var self_3367: Flector;
    var other_3043: Rotor;

    self_3367 = self_3366;
    other_3043 = other_3042;
    let _e4: Flector = self_3367;
    let _e8: Rotor = other_3043;
    let _e19: Flector = self_3367;
    let _e23: Rotor = other_3043;
    let _e35: Flector = self_3367;
    let _e39: Rotor = other_3043;
    let _e51: Flector = self_3367;
    let _e55: Rotor = other_3043;
    let _e67: Flector = self_3367;
    let _e71: Rotor = other_3043;
    let _e81: Flector = self_3367;
    let _e85: Rotor = other_3043;
    let _e96: Flector = self_3367;
    let _e100: Rotor = other_3043;
    let _e111: Flector = self_3367;
    let _e115: Rotor = other_3043;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.w) * vec4(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec4(_e67.g0_.y) * _e71.g0_.zwxz) * vec4<f32>(-1.0, 1.0, 1.0, 0.0)) + ((vec4(_e81.g0_.z) * _e85.g0_.yxwy) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e96.g1_.w) * _e100.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e111.g0_.x) * _e115.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, 0.0))));
}

fn flector_rotor_geometric_anti_product(self_3368: Flector, other_3044: Rotor) -> Flector {
    var self_3369: Flector;
    var other_3045: Rotor;

    self_3369 = self_3368;
    other_3045 = other_3044;
    let _e4: Flector = self_3369;
    let _e8: Rotor = other_3045;
    let _e18: Flector = self_3369;
    let _e22: Rotor = other_3045;
    let _e33: Flector = self_3369;
    let _e37: Rotor = other_3045;
    let _e49: Flector = self_3369;
    let _e53: Rotor = other_3045;
    let _e65: Flector = self_3369;
    let _e69: Rotor = other_3045;
    let _e81: Flector = self_3369;
    let _e85: Rotor = other_3045;
    let _e96: Flector = self_3369;
    let _e99: Rotor = other_3045;
    let _e110: Flector = self_3369;
    let _e114: Rotor = other_3045;
    let _e125: Flector = self_3369;
    let _e129: Rotor = other_3045;
    let _e141: Flector = self_3369;
    let _e145: Rotor = other_3045;
    let _e156: Flector = self_3369;
    let _e160: Rotor = other_3045;
    let _e171: Flector = self_3369;
    let _e175: Rotor = other_3045;
    let _e186: Flector = self_3369;
    let _e190: Rotor = other_3045;
    let _e202: Flector = self_3369;
    let _e205: Rotor = other_3045;
    return Flector(((((((((vec4(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e33.g1_.x) * vec4(_e37.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.y) * vec4(_e53.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e65.g1_.z) * vec4(_e69.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e81.g1_.w) * _e85.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e96.g0_.xxxw * _e99.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 1.0))), ((((((((vec4(_e110.g0_.y) * vec4(_e114.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e125.g0_.z) * vec4(_e129.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e141.g1_.x) * _e145.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e156.g1_.y) * _e160.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e171.g1_.z) * _e175.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e186.g1_.w) * vec4(_e190.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e202.g0_.wwwx * _e205.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_rotor_regressive_product(self_3370: Flector, other_3046: Rotor) -> Flector {
    var self_3371: Flector;
    var other_3047: Rotor;

    self_3371 = self_3370;
    other_3047 = other_3046;
    let _e4: Flector = self_3371;
    let _e8: Rotor = other_3047;
    let _e19: Flector = self_3371;
    let _e23: Rotor = other_3047;
    let _e35: Flector = self_3371;
    let _e39: Rotor = other_3047;
    let _e51: Flector = self_3371;
    let _e55: Rotor = other_3047;
    let _e66: Flector = self_3371;
    let _e68: Rotor = other_3047;
    let _e74: Flector = self_3371;
    let _e76: Rotor = other_3047;
    return Flector(((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.w) * _e55.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e66.g0_ * vec4(_e68.g0_.w))), (_e74.g1_ * vec4(_e76.g0_.w)));
}

fn flector_rotor_anti_wedge(self_3372: Flector, other_3048: Rotor) -> Flector {
    var self_3373: Flector;
    var other_3049: Rotor;

    self_3373 = self_3372;
    other_3049 = other_3048;
    let _e4: Flector = self_3373;
    let _e8: Rotor = other_3049;
    let _e19: Flector = self_3373;
    let _e23: Rotor = other_3049;
    let _e35: Flector = self_3373;
    let _e39: Rotor = other_3049;
    let _e51: Flector = self_3373;
    let _e55: Rotor = other_3049;
    let _e66: Flector = self_3373;
    let _e68: Rotor = other_3049;
    let _e74: Flector = self_3373;
    let _e76: Rotor = other_3049;
    return Flector(((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.w) * _e55.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e66.g0_ * vec4(_e68.g0_.w))), (_e74.g1_ * vec4(_e76.g0_.w)));
}

fn flector_rotor_meet(self_3374: Flector, other_3050: Rotor) -> Flector {
    var self_3375: Flector;
    var other_3051: Rotor;

    self_3375 = self_3374;
    other_3051 = other_3050;
    let _e4: Flector = self_3375;
    let _e8: Rotor = other_3051;
    let _e19: Flector = self_3375;
    let _e23: Rotor = other_3051;
    let _e35: Flector = self_3375;
    let _e39: Rotor = other_3051;
    let _e51: Flector = self_3375;
    let _e55: Rotor = other_3051;
    let _e66: Flector = self_3375;
    let _e68: Rotor = other_3051;
    let _e74: Flector = self_3375;
    let _e76: Rotor = other_3051;
    return Flector(((((((vec4(_e4.g1_.x) * vec4(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.y) * vec4(_e23.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g1_.w) * _e55.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e66.g0_ * vec4(_e68.g0_.w))), (_e74.g1_ * vec4(_e76.g0_.w)));
}

fn flector_rotor_outer_product(self_3376: Flector, other_3052: Rotor) -> Plane {
    var self_3377: Flector;
    var other_3053: Rotor;

    self_3377 = self_3376;
    other_3053 = other_3052;
    let _e4: Flector = self_3377;
    let _e8: Rotor = other_3053;
    let _e18: Flector = self_3377;
    let _e22: Rotor = other_3053;
    let _e33: Flector = self_3377;
    let _e37: Rotor = other_3053;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn flector_rotor_wedge(self_3378: Flector, other_3054: Rotor) -> Plane {
    var self_3379: Flector;
    var other_3055: Rotor;

    self_3379 = self_3378;
    other_3055 = other_3054;
    let _e4: Flector = self_3379;
    let _e8: Rotor = other_3055;
    let _e18: Flector = self_3379;
    let _e22: Rotor = other_3055;
    let _e33: Flector = self_3379;
    let _e37: Rotor = other_3055;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn flector_rotor_join(self_3380: Flector, other_3056: Rotor) -> Plane {
    var self_3381: Flector;
    var other_3057: Rotor;

    self_3381 = self_3380;
    other_3057 = other_3056;
    let _e4: Flector = self_3381;
    let _e8: Rotor = other_3057;
    let _e18: Flector = self_3381;
    let _e22: Rotor = other_3057;
    let _e33: Flector = self_3381;
    let _e37: Rotor = other_3057;
    return Plane(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g0_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn flector_rotor_inner_product(self_3382: Flector, other_3058: Rotor) -> Flector {
    var self_3383: Flector;
    var other_3059: Rotor;

    self_3383 = self_3382;
    other_3059 = other_3058;
    let _e4: Flector = self_3383;
    let _e8: Rotor = other_3059;
    let _e19: Flector = self_3383;
    let _e23: Rotor = other_3059;
    let _e35: Flector = self_3383;
    let _e39: Rotor = other_3059;
    let _e51: Flector = self_3383;
    let _e55: Rotor = other_3059;
    let _e67: Flector = self_3383;
    let _e70: Rotor = other_3059;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.w) * vec4(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((_e67.g0_.xyzx * _e70.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_rotor_inner_anti_product(self_3384: Flector, other_3060: Rotor) -> Flector {
    var self_3385: Flector;
    var other_3061: Rotor;

    self_3385 = self_3384;
    other_3061 = other_3060;
    let _e4: Flector = self_3385;
    let _e6: Rotor = other_3061;
    let _e11: Flector = self_3385;
    let _e15: Rotor = other_3061;
    let _e26: Flector = self_3385;
    let _e30: Rotor = other_3061;
    let _e42: Flector = self_3385;
    let _e46: Rotor = other_3061;
    let _e57: Flector = self_3385;
    let _e61: Rotor = other_3061;
    let _e72: Flector = self_3385;
    let _e76: Rotor = other_3061;
    let _e87: Flector = self_3385;
    let _e91: Rotor = other_3061;
    let _e103: Flector = self_3385;
    let _e106: Rotor = other_3061;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e42.g1_.x) * _e46.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e57.g1_.y) * _e61.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e72.g1_.z) * _e76.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e87.g1_.w) * vec4(_e91.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e103.g0_.wwwx * _e106.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_rotor_left_contraction(self_3386: Flector, other_3062: Rotor) -> Flector {
    var self_3387: Flector;
    var other_3063: Rotor;

    self_3387 = self_3386;
    other_3063 = other_3062;
    let _e4: Flector = self_3387;
    let _e8: Rotor = other_3063;
    let _e19: Flector = self_3387;
    let _e23: Rotor = other_3063;
    let _e35: Flector = self_3387;
    let _e39: Rotor = other_3063;
    let _e51: Flector = self_3387;
    let _e55: Rotor = other_3063;
    let _e67: Flector = self_3387;
    let _e70: Rotor = other_3063;
    return Flector((((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e35.g1_.w) * vec4(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e51.g0_.x) * vec4(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((_e67.g0_.xyzx * _e70.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_rotor_left_anti_contraction(self_3388: Flector, other_3064: Rotor) -> Plane {
    var self_3389: Flector;
    var other_3065: Rotor;

    self_3389 = self_3388;
    other_3065 = other_3064;
    let _e4: Flector = self_3389;
    let _e8: Rotor = other_3065;
    let _e18: Flector = self_3389;
    let _e22: Rotor = other_3065;
    let _e33: Flector = self_3389;
    let _e37: Rotor = other_3065;
    return Plane(((((vec4(_e4.g1_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e18.g1_.z) * _e22.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.x) * _e37.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn flector_rotor_right_anti_contraction(self_3390: Flector, other_3066: Rotor) -> Flector {
    var self_3391: Flector;
    var other_3067: Rotor;

    self_3391 = self_3390;
    other_3067 = other_3066;
    let _e4: Flector = self_3391;
    let _e6: Rotor = other_3067;
    let _e11: Flector = self_3391;
    let _e15: Rotor = other_3067;
    let _e26: Flector = self_3391;
    let _e30: Rotor = other_3067;
    let _e42: Flector = self_3391;
    let _e46: Rotor = other_3067;
    let _e58: Flector = self_3391;
    let _e62: Rotor = other_3067;
    let _e74: Flector = self_3391;
    let _e78: Rotor = other_3067;
    let _e90: Flector = self_3391;
    let _e94: Rotor = other_3067;
    let _e106: Flector = self_3391;
    let _e109: Rotor = other_3067;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), ((((((((vec4(_e11.g0_.y) * vec4(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e26.g0_.z) * vec4(_e30.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e42.g1_.x) * vec4(_e46.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e58.g1_.y) * vec4(_e62.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e74.g1_.z) * vec4(_e78.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e90.g1_.w) * vec4(_e94.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e106.g0_.wwwx * _e109.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_translator_geometric_product(self_3392: Flector, other_3068: Translator) -> Flector {
    var self_3393: Flector;
    var other_3069: Translator;

    self_3393 = self_3392;
    other_3069 = other_3068;
    let _e4: Flector = self_3393;
    let _e8: Translator = other_3069;
    let _e18: Flector = self_3393;
    let _e22: Translator = other_3069;
    let _e33: Flector = self_3393;
    let _e37: Translator = other_3069;
    let _e49: Flector = self_3393;
    let _e53: Translator = other_3069;
    let _e65: Flector = self_3393;
    let _e69: Translator = other_3069;
    let _e73: Flector = self_3393;
    let _e76: Flector = self_3393;
    let _e79: Flector = self_3393;
    let _e82: Flector = self_3393;
    let _e86: Translator = other_3069;
    let _e97: Flector = self_3393;
    let _e101: Translator = other_3069;
    let _e111: Flector = self_3393;
    let _e115: Translator = other_3069;
    let _e126: Flector = self_3393;
    let _e130: Translator = other_3069;
    let _e141: Flector = self_3393;
    let _e145: Translator = other_3069;
    let _e156: Flector = self_3393;
    let _e160: Translator = other_3069;
    let _e171: Flector = self_3393;
    let _e174: Flector = self_3393;
    let _e177: Flector = self_3393;
    let _e180: Flector = self_3393;
    let _e184: Translator = other_3069;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e65.g1_.w) * _e69.g0_)) + ((vec4<f32>(_e73.g0_.x, _e76.g0_.x, _e79.g0_.x, _e82.g1_.x) * _e86.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((((vec4(_e97.g0_.y) * _e101.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e111.g0_.z) * _e115.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e126.g0_.w) * _e130.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e141.g1_.y) * _e145.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e156.g1_.z) * _e160.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e171.g0_.x, _e174.g1_.x, _e177.g1_.x, _e180.g0_.x) * _e184.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, -1.0))));
}

fn flector_translator_geometric_anti_product(self_3394: Flector, other_3070: Translator) -> Flector {
    var self_3395: Flector;
    var other_3071: Translator;

    self_3395 = self_3394;
    other_3071 = other_3070;
    let _e4: Flector = self_3395;
    let _e8: Translator = other_3071;
    let _e17: Flector = self_3395;
    let _e21: Translator = other_3071;
    let _e32: Flector = self_3395;
    let _e36: Translator = other_3071;
    let _e47: Flector = self_3395;
    let _e51: Translator = other_3071;
    let _e62: Flector = self_3395;
    let _e65: Translator = other_3071;
    let _e76: Flector = self_3395;
    let _e80: Translator = other_3071;
    let _e90: Flector = self_3395;
    let _e94: Translator = other_3071;
    let _e105: Flector = self_3395;
    let _e109: Translator = other_3071;
    let _e121: Flector = self_3395;
    let _e125: Translator = other_3071;
    return Flector(((((((vec4(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-1.0, -1.0, -1.0, 1.0)) + ((vec4(_e17.g1_.x) * _e21.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e32.g1_.y) * _e36.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e47.g1_.z) * _e51.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((_e62.g0_.xyzx * _e65.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4(_e76.g1_.y) * _e80.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e90.g1_.z) * _e94.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e105.g1_.w) * vec4(_e109.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e121.g1_.x) * _e125.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_regressive_product(self_3396: Flector, other_3072: Translator) -> Flector {
    var self_3397: Flector;
    var other_3073: Translator;

    self_3397 = self_3396;
    other_3073 = other_3072;
    let _e4: Flector = self_3397;
    let _e8: Translator = other_3073;
    let _e18: Flector = self_3397;
    let _e22: Translator = other_3073;
    let _e33: Flector = self_3397;
    let _e37: Translator = other_3073;
    let _e48: Flector = self_3397;
    let _e50: Translator = other_3073;
    let _e56: Flector = self_3397;
    let _e58: Translator = other_3073;
    return Flector((((((vec4(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e48.g0_ * vec4(_e50.g0_.w))), (_e56.g1_ * vec4(_e58.g0_.w)));
}

fn flector_translator_anti_wedge(self_3398: Flector, other_3074: Translator) -> Flector {
    var self_3399: Flector;
    var other_3075: Translator;

    self_3399 = self_3398;
    other_3075 = other_3074;
    let _e4: Flector = self_3399;
    let _e8: Translator = other_3075;
    let _e18: Flector = self_3399;
    let _e22: Translator = other_3075;
    let _e33: Flector = self_3399;
    let _e37: Translator = other_3075;
    let _e48: Flector = self_3399;
    let _e50: Translator = other_3075;
    let _e56: Flector = self_3399;
    let _e58: Translator = other_3075;
    return Flector((((((vec4(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e48.g0_ * vec4(_e50.g0_.w))), (_e56.g1_ * vec4(_e58.g0_.w)));
}

fn flector_translator_meet(self_3400: Flector, other_3076: Translator) -> Flector {
    var self_3401: Flector;
    var other_3077: Translator;

    self_3401 = self_3400;
    other_3077 = other_3076;
    let _e4: Flector = self_3401;
    let _e8: Translator = other_3077;
    let _e18: Flector = self_3401;
    let _e22: Translator = other_3077;
    let _e33: Flector = self_3401;
    let _e37: Translator = other_3077;
    let _e48: Flector = self_3401;
    let _e50: Translator = other_3077;
    let _e56: Flector = self_3401;
    let _e58: Translator = other_3077;
    return Flector((((((vec4(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e18.g1_.y) * _e22.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e33.g1_.z) * _e37.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e48.g0_ * vec4(_e50.g0_.w))), (_e56.g1_ * vec4(_e58.g0_.w)));
}

fn flector_translator_outer_product(self_3402: Flector, other_3078: Translator) -> Plane {
    var self_3403: Flector;
    var other_3079: Translator;

    self_3403 = self_3402;
    other_3079 = other_3078;
    let _e4: Flector = self_3403;
    let _e8: Translator = other_3079;
    let _e19: Flector = self_3403;
    let _e23: Translator = other_3079;
    let _e35: Flector = self_3403;
    let _e38: Translator = other_3079;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_translator_wedge(self_3404: Flector, other_3080: Translator) -> Plane {
    var self_3405: Flector;
    var other_3081: Translator;

    self_3405 = self_3404;
    other_3081 = other_3080;
    let _e4: Flector = self_3405;
    let _e8: Translator = other_3081;
    let _e19: Flector = self_3405;
    let _e23: Translator = other_3081;
    let _e35: Flector = self_3405;
    let _e38: Translator = other_3081;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_translator_join(self_3406: Flector, other_3082: Translator) -> Plane {
    var self_3407: Flector;
    var other_3083: Translator;

    self_3407 = self_3406;
    other_3083 = other_3082;
    let _e4: Flector = self_3407;
    let _e8: Translator = other_3083;
    let _e19: Flector = self_3407;
    let _e23: Translator = other_3083;
    let _e35: Flector = self_3407;
    let _e38: Translator = other_3083;
    return Plane(((((vec4(_e4.g0_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g0_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g0_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_translator_inner_product(self_3408: Flector, other_3084: Translator) -> Flector {
    var self_3409: Flector;
    var other_3085: Translator;

    self_3409 = self_3408;
    other_3085 = other_3084;
    let _e4: Flector = self_3409;
    let _e8: Translator = other_3085;
    let _e18: Flector = self_3409;
    let _e22: Translator = other_3085;
    let _e33: Flector = self_3409;
    let _e37: Translator = other_3085;
    let _e49: Flector = self_3409;
    let _e53: Translator = other_3085;
    let _e65: Flector = self_3409;
    let _e69: Translator = other_3085;
    let _e73: Flector = self_3409;
    let _e76: Flector = self_3409;
    let _e79: Flector = self_3409;
    let _e82: Flector = self_3409;
    let _e86: Translator = other_3085;
    let _e97: Flector = self_3409;
    let _e100: Translator = other_3085;
    return Flector((((((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e33.g1_.y) * vec4(_e37.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e49.g1_.z) * vec4(_e53.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e65.g1_.w) * _e69.g0_)) + ((vec4<f32>(_e73.g0_.x, _e76.g0_.x, _e79.g0_.x, _e82.g1_.x) * _e86.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((_e97.g0_.xyzx * _e100.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_translator_inner_anti_product(self_3410: Flector, other_3086: Translator) -> Flector {
    var self_3411: Flector;
    var other_3087: Translator;

    self_3411 = self_3410;
    other_3087 = other_3086;
    let _e4: Flector = self_3411;
    let _e6: Translator = other_3087;
    let _e11: Flector = self_3411;
    let _e15: Translator = other_3087;
    let _e25: Flector = self_3411;
    let _e29: Translator = other_3087;
    let _e40: Flector = self_3411;
    let _e44: Translator = other_3087;
    let _e56: Flector = self_3411;
    let _e60: Translator = other_3087;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), (((((vec4(_e11.g1_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e25.g1_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e40.g1_.w) * vec4(_e44.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e56.g1_.x) * _e60.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_left_contraction(self_3412: Flector, other_3088: Translator) -> Flector {
    var self_3413: Flector;
    var other_3089: Translator;

    self_3413 = self_3412;
    other_3089 = other_3088;
    let _e4: Flector = self_3413;
    let _e8: Translator = other_3089;
    let _e18: Flector = self_3413;
    let _e22: Translator = other_3089;
    let _e33: Flector = self_3413;
    let _e36: Flector = self_3413;
    let _e39: Flector = self_3413;
    let _e42: Flector = self_3413;
    let _e46: Translator = other_3089;
    let _e57: Flector = self_3413;
    let _e60: Translator = other_3089;
    return Flector(((((vec4(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e18.g0_.z) * _e22.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e33.g0_.x, _e36.g0_.x, _e39.g0_.x, _e42.g1_.w) * _e46.g0_.xzyw) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), ((_e57.g0_.xyzx * _e60.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_translator_right_contraction(self_3414: Flector, other_3090: Translator) -> Point {
    var self_3415: Flector;
    var other_3091: Translator;

    self_3415 = self_3414;
    other_3091 = other_3090;
    let _e4: Flector = self_3415;
    let _e8: Translator = other_3091;
    let _e19: Flector = self_3415;
    let _e23: Translator = other_3091;
    let _e35: Flector = self_3415;
    let _e38: Translator = other_3091;
    return Point(((((vec4(_e4.g1_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e35.g1_.wwwx * _e38.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_translator_left_anti_contraction(self_3416: Flector, other_3092: Translator) -> Plane {
    var self_3417: Flector;
    var other_3093: Translator;

    self_3417 = self_3416;
    other_3093 = other_3092;
    let _e4: Flector = self_3417;
    let _e8: Translator = other_3093;
    let _e19: Flector = self_3417;
    let _e23: Translator = other_3093;
    let _e35: Flector = self_3417;
    let _e39: Translator = other_3093;
    return Plane(((((vec4(_e4.g1_.y) * vec4(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e19.g1_.z) * vec4(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e35.g1_.x) * vec4(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_right_anti_contraction(self_3418: Flector, other_3094: Translator) -> Flector {
    var self_3419: Flector;
    var other_3095: Translator;

    self_3419 = self_3418;
    other_3095 = other_3094;
    let _e4: Flector = self_3419;
    let _e6: Translator = other_3095;
    let _e11: Flector = self_3419;
    let _e13: Translator = other_3095;
    return Flector((_e4.g0_ * vec4(_e6.g0_.w)), (_e11.g1_ * vec4(_e13.g0_.w)));
}

fn flector_flector_add(self_3420: Flector, other_3096: Flector) -> Flector {
    var self_3421: Flector;
    var other_3097: Flector;

    self_3421 = self_3420;
    other_3097 = other_3096;
    let _e4: Flector = self_3421;
    let _e6: Flector = other_3097;
    let _e9: Flector = self_3421;
    let _e11: Flector = other_3097;
    return Flector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn flector_flector_sub(self_3422: Flector, other_3098: Flector) -> Flector {
    var self_3423: Flector;
    var other_3099: Flector;

    self_3423 = self_3422;
    other_3099 = other_3098;
    let _e4: Flector = self_3423;
    let _e6: Flector = other_3099;
    let _e9: Flector = self_3423;
    let _e11: Flector = other_3099;
    return Flector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn flector_flector_mul(self_3424: Flector, other_3100: Flector) -> Flector {
    var self_3425: Flector;
    var other_3101: Flector;

    self_3425 = self_3424;
    other_3101 = other_3100;
    let _e4: Flector = self_3425;
    let _e6: Flector = other_3101;
    let _e9: Flector = self_3425;
    let _e11: Flector = other_3101;
    return Flector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn flector_flector_div(self_3426: Flector, other_3102: Flector) -> Flector {
    var self_3427: Flector;
    var other_3103: Flector;

    self_3427 = self_3426;
    other_3103 = other_3102;
    let _e4: Flector = self_3427;
    let _e7: Flector = self_3427;
    let _e10: Flector = self_3427;
    let _e13: Flector = self_3427;
    let _e23: Flector = other_3103;
    let _e26: Flector = other_3103;
    let _e29: Flector = other_3103;
    let _e32: Flector = other_3103;
    let _e43: Flector = self_3427;
    let _e46: Flector = self_3427;
    let _e49: Flector = self_3427;
    let _e52: Flector = self_3427;
    let _e62: Flector = other_3103;
    let _e65: Flector = other_3103;
    let _e68: Flector = other_3103;
    let _e71: Flector = other_3103;
    return Flector((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn flector_flector_geometric_product(self_3428: Flector, other_3104: Flector) -> MultiVector {
    var self_3429: Flector;
    var other_3105: Flector;

    self_3429 = self_3428;
    other_3105 = other_3104;
    let _e4: Flector = self_3429;
    let _e8: Flector = other_3105;
    let _e11: Flector = other_3105;
    let _e16: Flector = self_3429;
    let _e20: Flector = other_3105;
    let _e23: Flector = other_3105;
    let _e29: Flector = self_3429;
    let _e33: Flector = other_3105;
    let _e36: Flector = other_3105;
    let _e42: Flector = self_3429;
    let _e46: Flector = other_3105;
    let _e56: Flector = self_3429;
    let _e60: Flector = other_3105;
    let _e70: Flector = self_3429;
    let _e74: Flector = other_3105;
    let _e84: Flector = self_3429;
    let _e88: Flector = other_3105;
    let _e91: Flector = other_3105;
    let _e97: Flector = self_3429;
    let _e100: Flector = self_3429;
    let _e104: Flector = other_3105;
    let _e107: Flector = other_3105;
    let _e119: Flector = self_3429;
    let _e123: Flector = other_3105;
    let _e126: Flector = other_3105;
    let _e129: Flector = other_3105;
    let _e139: Flector = self_3429;
    let _e143: Flector = other_3105;
    let _e146: Flector = other_3105;
    let _e149: Flector = other_3105;
    let _e160: Flector = self_3429;
    let _e164: Flector = other_3105;
    let _e167: Flector = other_3105;
    let _e170: Flector = other_3105;
    let _e181: Flector = self_3429;
    let _e185: Flector = other_3105;
    let _e188: Flector = other_3105;
    let _e191: Flector = other_3105;
    let _e197: Flector = self_3429;
    let _e201: Flector = other_3105;
    let _e204: Flector = other_3105;
    let _e207: Flector = other_3105;
    let _e218: Flector = self_3429;
    let _e222: Flector = other_3105;
    let _e225: Flector = other_3105;
    let _e228: Flector = other_3105;
    let _e239: Flector = self_3429;
    let _e243: Flector = other_3105;
    let _e246: Flector = other_3105;
    let _e249: Flector = other_3105;
    let _e260: Flector = self_3429;
    let _e264: Flector = other_3105;
    let _e267: Flector = other_3105;
    let _e270: Flector = other_3105;
    let _e276: Flector = self_3429;
    let _e280: Flector = other_3105;
    let _e283: Flector = other_3105;
    let _e286: Flector = other_3105;
    let _e296: Flector = self_3429;
    let _e300: Flector = other_3105;
    let _e303: Flector = other_3105;
    let _e306: Flector = other_3105;
    let _e317: Flector = self_3429;
    let _e321: Flector = other_3105;
    let _e324: Flector = other_3105;
    let _e327: Flector = other_3105;
    let _e338: Flector = self_3429;
    let _e342: Flector = other_3105;
    let _e345: Flector = other_3105;
    let _e348: Flector = other_3105;
    return MultiVector(((((((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g1_.x)) + (vec2(_e16.g0_.y) * vec2<f32>(_e20.g0_.y, _e23.g1_.y))) + (vec2(_e29.g0_.z) * vec2<f32>(_e33.g0_.z, _e36.g1_.z))) + ((vec2(_e42.g1_.x) * vec2(_e46.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e56.g1_.y) * vec2(_e60.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e70.g1_.z) * vec2(_e74.g0_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e84.g1_.w) * vec2<f32>(_e88.g1_.w, _e91.g0_.w))) + ((vec2<f32>(_e97.g0_.x, _e100.g0_.w) * vec2<f32>(_e104.g1_.x, _e107.g1_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (((((((((vec3(_e119.g0_.x) * vec3<f32>(_e123.g0_.w, _e126.g1_.z, _e129.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e139.g0_.y) * vec3<f32>(_e143.g1_.z, _e146.g0_.w, _e149.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e160.g0_.z) * vec3<f32>(_e164.g1_.y, _e167.g1_.x, _e170.g0_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e181.g0_.w) * vec3<f32>(_e185.g0_.x, _e188.g0_.y, _e191.g0_.z))) + ((vec3(_e197.g1_.x) * vec3<f32>(_e201.g1_.w, _e204.g0_.z, _e207.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e218.g1_.y) * vec3<f32>(_e222.g0_.z, _e225.g1_.w, _e228.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e239.g1_.z) * vec3<f32>(_e243.g0_.y, _e246.g0_.x, _e249.g1_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e260.g1_.w) * vec3<f32>(_e264.g1_.x, _e267.g1_.y, _e270.g1_.z))), (((((vec3(_e276.g0_.x) * vec3<f32>(_e280.g1_.w, _e283.g0_.z, _e286.g0_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e296.g0_.y) * vec3<f32>(_e300.g0_.z, _e303.g1_.w, _e306.g0_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e317.g0_.z) * vec3<f32>(_e321.g0_.y, _e324.g0_.x, _e327.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) - (vec3(_e338.g1_.w) * vec3<f32>(_e342.g0_.x, _e345.g0_.y, _e348.g0_.z))), vec4(0.0));
}

fn flector_flector_geometric_anti_product(self_3430: Flector, other_3106: Flector) -> MultiVector {
    var self_3431: Flector;
    var other_3107: Flector;

    self_3431 = self_3430;
    other_3107 = other_3106;
    let _e4: Flector = self_3431;
    let _e8: Flector = other_3107;
    let _e17: Flector = self_3431;
    let _e21: Flector = other_3107;
    let _e31: Flector = self_3431;
    let _e35: Flector = other_3107;
    let _e38: Flector = other_3107;
    let _e48: Flector = self_3431;
    let _e52: Flector = other_3107;
    let _e55: Flector = other_3107;
    let _e65: Flector = self_3431;
    let _e69: Flector = other_3107;
    let _e72: Flector = other_3107;
    let _e82: Flector = self_3431;
    let _e86: Flector = other_3107;
    let _e89: Flector = other_3107;
    let _e99: Flector = self_3431;
    let _e103: Flector = other_3107;
    let _e113: Flector = self_3431;
    let _e117: Flector = other_3107;
    let _e131: Flector = self_3431;
    let _e135: Flector = other_3107;
    let _e138: Flector = other_3107;
    let _e141: Flector = other_3107;
    let _e147: Flector = self_3431;
    let _e151: Flector = other_3107;
    let _e154: Flector = other_3107;
    let _e157: Flector = other_3107;
    let _e168: Flector = self_3431;
    let _e172: Flector = other_3107;
    let _e175: Flector = other_3107;
    let _e178: Flector = other_3107;
    let _e189: Flector = self_3431;
    let _e193: Flector = other_3107;
    let _e196: Flector = other_3107;
    let _e199: Flector = other_3107;
    let _e210: Flector = self_3431;
    let _e214: Flector = other_3107;
    let _e217: Flector = other_3107;
    let _e220: Flector = other_3107;
    let _e230: Flector = self_3431;
    let _e234: Flector = other_3107;
    let _e237: Flector = other_3107;
    let _e240: Flector = other_3107;
    let _e251: Flector = self_3431;
    let _e255: Flector = other_3107;
    let _e258: Flector = other_3107;
    let _e261: Flector = other_3107;
    let _e272: Flector = self_3431;
    let _e276: Flector = other_3107;
    let _e279: Flector = other_3107;
    let _e282: Flector = other_3107;
    let _e288: Flector = self_3431;
    let _e292: Flector = other_3107;
    let _e295: Flector = other_3107;
    let _e298: Flector = other_3107;
    let _e309: Flector = self_3431;
    let _e313: Flector = other_3107;
    let _e316: Flector = other_3107;
    let _e319: Flector = other_3107;
    let _e330: Flector = self_3431;
    let _e334: Flector = other_3107;
    let _e337: Flector = other_3107;
    let _e340: Flector = other_3107;
    let _e351: Flector = self_3431;
    let _e355: Flector = other_3107;
    let _e358: Flector = other_3107;
    let _e361: Flector = other_3107;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2<f32>(_e35.g1_.w, _e38.g0_.w)) * vec2<f32>(1.0, -1.0))) + ((vec2(_e48.g1_.x) * vec2<f32>(_e52.g0_.x, _e55.g1_.x)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e65.g1_.y) * vec2<f32>(_e69.g0_.y, _e72.g1_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e82.g1_.z) * vec2<f32>(_e86.g0_.z, _e89.g1_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e99.g1_.w) * vec2(_e103.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e113.g0_.x) * vec2(_e117.g1_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(0.0) - (vec3(_e131.g0_.w) * vec3<f32>(_e135.g1_.x, _e138.g1_.y, _e141.g1_.z))) + ((vec3(_e147.g1_.x) * vec3<f32>(_e151.g0_.w, _e154.g1_.z, _e157.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e168.g1_.y) * vec3<f32>(_e172.g1_.z, _e175.g0_.w, _e178.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e189.g1_.z) * vec3<f32>(_e193.g1_.y, _e196.g1_.x, _e199.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))), (((((((((vec3(_e210.g0_.x) * vec3<f32>(_e214.g0_.w, _e217.g1_.z, _e220.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e230.g0_.y) * vec3<f32>(_e234.g1_.z, _e237.g0_.w, _e240.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e251.g0_.z) * vec3<f32>(_e255.g1_.y, _e258.g1_.x, _e261.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e272.g0_.w) * vec3<f32>(_e276.g0_.x, _e279.g0_.y, _e282.g0_.z))) + ((vec3(_e288.g1_.x) * vec3<f32>(_e292.g1_.w, _e295.g0_.z, _e298.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e309.g1_.y) * vec3<f32>(_e313.g0_.z, _e316.g1_.w, _e319.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e330.g1_.z) * vec3<f32>(_e334.g0_.y, _e337.g0_.x, _e340.g1_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e351.g1_.w) * vec3<f32>(_e355.g1_.x, _e358.g1_.y, _e361.g1_.z))), vec4(0.0));
}

fn flector_flector_regressive_product(self_3432: Flector, other_3108: Flector) -> MultiVector {
    var self_3433: Flector;
    var other_3109: Flector;

    self_3433 = self_3432;
    other_3109 = other_3108;
    let _e4: Flector = self_3433;
    let _e8: Flector = other_3109;
    let _e17: Flector = self_3433;
    let _e21: Flector = other_3109;
    let _e31: Flector = self_3433;
    let _e35: Flector = other_3109;
    let _e45: Flector = self_3433;
    let _e49: Flector = other_3109;
    let _e59: Flector = self_3433;
    let _e63: Flector = other_3109;
    let _e73: Flector = self_3433;
    let _e77: Flector = other_3109;
    let _e87: Flector = self_3433;
    let _e91: Flector = other_3109;
    let _e101: Flector = self_3433;
    let _e105: Flector = other_3109;
    let _e117: Flector = self_3433;
    let _e121: Flector = other_3109;
    let _e124: Flector = other_3109;
    let _e127: Flector = other_3109;
    let _e137: Flector = self_3433;
    let _e141: Flector = other_3109;
    let _e144: Flector = other_3109;
    let _e147: Flector = other_3109;
    let _e158: Flector = self_3433;
    let _e162: Flector = other_3109;
    let _e165: Flector = other_3109;
    let _e168: Flector = other_3109;
    let _e181: Flector = self_3433;
    let _e185: Flector = other_3109;
    let _e188: Flector = other_3109;
    let _e191: Flector = other_3109;
    let _e197: Flector = self_3433;
    let _e200: Flector = self_3433;
    let _e203: Flector = self_3433;
    let _e207: Flector = other_3109;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e117.g1_.y) * vec3<f32>(_e121.g1_.z, _e124.g1_.z, _e127.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e137.g1_.z) * vec3<f32>(_e141.g1_.y, _e144.g1_.x, _e147.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e158.g1_.x) * vec3<f32>(_e162.g1_.x, _e165.g1_.z, _e168.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e181.g1_.w) * vec3<f32>(_e185.g1_.x, _e188.g1_.y, _e191.g1_.z))) + (vec3<f32>(_e197.g1_.x, _e200.g1_.y, _e203.g1_.z) * vec3(_e207.g1_.w))), vec4(0.0));
}

fn flector_flector_anti_wedge(self_3434: Flector, other_3110: Flector) -> MultiVector {
    var self_3435: Flector;
    var other_3111: Flector;

    self_3435 = self_3434;
    other_3111 = other_3110;
    let _e4: Flector = self_3435;
    let _e8: Flector = other_3111;
    let _e17: Flector = self_3435;
    let _e21: Flector = other_3111;
    let _e31: Flector = self_3435;
    let _e35: Flector = other_3111;
    let _e45: Flector = self_3435;
    let _e49: Flector = other_3111;
    let _e59: Flector = self_3435;
    let _e63: Flector = other_3111;
    let _e73: Flector = self_3435;
    let _e77: Flector = other_3111;
    let _e87: Flector = self_3435;
    let _e91: Flector = other_3111;
    let _e101: Flector = self_3435;
    let _e105: Flector = other_3111;
    let _e117: Flector = self_3435;
    let _e121: Flector = other_3111;
    let _e124: Flector = other_3111;
    let _e127: Flector = other_3111;
    let _e137: Flector = self_3435;
    let _e141: Flector = other_3111;
    let _e144: Flector = other_3111;
    let _e147: Flector = other_3111;
    let _e158: Flector = self_3435;
    let _e162: Flector = other_3111;
    let _e165: Flector = other_3111;
    let _e168: Flector = other_3111;
    let _e181: Flector = self_3435;
    let _e185: Flector = other_3111;
    let _e188: Flector = other_3111;
    let _e191: Flector = other_3111;
    let _e197: Flector = self_3435;
    let _e200: Flector = self_3435;
    let _e203: Flector = self_3435;
    let _e207: Flector = other_3111;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e117.g1_.y) * vec3<f32>(_e121.g1_.z, _e124.g1_.z, _e127.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e137.g1_.z) * vec3<f32>(_e141.g1_.y, _e144.g1_.x, _e147.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e158.g1_.x) * vec3<f32>(_e162.g1_.x, _e165.g1_.z, _e168.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e181.g1_.w) * vec3<f32>(_e185.g1_.x, _e188.g1_.y, _e191.g1_.z))) + (vec3<f32>(_e197.g1_.x, _e200.g1_.y, _e203.g1_.z) * vec3(_e207.g1_.w))), vec4(0.0));
}

fn flector_flector_meet(self_3436: Flector, other_3112: Flector) -> MultiVector {
    var self_3437: Flector;
    var other_3113: Flector;

    self_3437 = self_3436;
    other_3113 = other_3112;
    let _e4: Flector = self_3437;
    let _e8: Flector = other_3113;
    let _e17: Flector = self_3437;
    let _e21: Flector = other_3113;
    let _e31: Flector = self_3437;
    let _e35: Flector = other_3113;
    let _e45: Flector = self_3437;
    let _e49: Flector = other_3113;
    let _e59: Flector = self_3437;
    let _e63: Flector = other_3113;
    let _e73: Flector = self_3437;
    let _e77: Flector = other_3113;
    let _e87: Flector = self_3437;
    let _e91: Flector = other_3113;
    let _e101: Flector = self_3437;
    let _e105: Flector = other_3113;
    let _e117: Flector = self_3437;
    let _e121: Flector = other_3113;
    let _e124: Flector = other_3113;
    let _e127: Flector = other_3113;
    let _e137: Flector = self_3437;
    let _e141: Flector = other_3113;
    let _e144: Flector = other_3113;
    let _e147: Flector = other_3113;
    let _e158: Flector = self_3437;
    let _e162: Flector = other_3113;
    let _e165: Flector = other_3113;
    let _e168: Flector = other_3113;
    let _e181: Flector = self_3437;
    let _e185: Flector = other_3113;
    let _e188: Flector = other_3113;
    let _e191: Flector = other_3113;
    let _e197: Flector = self_3437;
    let _e200: Flector = self_3437;
    let _e203: Flector = self_3437;
    let _e207: Flector = other_3113;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e117.g1_.y) * vec3<f32>(_e121.g1_.z, _e124.g1_.z, _e127.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e137.g1_.z) * vec3<f32>(_e141.g1_.y, _e144.g1_.x, _e147.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e158.g1_.x) * vec3<f32>(_e162.g1_.x, _e165.g1_.z, _e168.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e181.g1_.w) * vec3<f32>(_e185.g1_.x, _e188.g1_.y, _e191.g1_.z))) + (vec3<f32>(_e197.g1_.x, _e200.g1_.y, _e203.g1_.z) * vec3(_e207.g1_.w))), vec4(0.0));
}

fn flector_flector_outer_product(self_3438: Flector, other_3114: Flector) -> Motor {
    var self_3439: Flector;
    var other_3115: Flector;

    self_3439 = self_3438;
    other_3115 = other_3114;
    let _e4: Flector = self_3439;
    let _e8: Flector = other_3115;
    let _e11: Flector = other_3115;
    let _e14: Flector = other_3115;
    let _e17: Flector = other_3115;
    let _e28: Flector = self_3439;
    let _e32: Flector = other_3115;
    let _e35: Flector = other_3115;
    let _e38: Flector = other_3115;
    let _e41: Flector = other_3115;
    let _e53: Flector = self_3439;
    let _e57: Flector = other_3115;
    let _e60: Flector = other_3115;
    let _e63: Flector = other_3115;
    let _e66: Flector = other_3115;
    let _e72: Flector = self_3439;
    let _e76: Flector = other_3115;
    let _e88: Flector = self_3439;
    let _e92: Flector = other_3115;
    let _e104: Flector = self_3439;
    let _e108: Flector = other_3115;
    let _e120: Flector = self_3439;
    let _e124: Flector = other_3115;
    let _e136: Flector = self_3439;
    let _e140: Flector = other_3115;
    let _e143: Flector = other_3115;
    let _e146: Flector = other_3115;
    let _e149: Flector = other_3115;
    let _e161: Flector = self_3439;
    let _e165: Flector = other_3115;
    let _e168: Flector = other_3115;
    let _e171: Flector = other_3115;
    let _e181: Flector = self_3439;
    let _e185: Flector = other_3115;
    let _e188: Flector = other_3115;
    let _e191: Flector = other_3115;
    let _e202: Flector = self_3439;
    let _e206: Flector = other_3115;
    let _e209: Flector = other_3115;
    let _e212: Flector = other_3115;
    return Motor((((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g1_.x) * vec4(_e76.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e88.g1_.y) * vec4(_e92.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e104.g1_.z) * vec4(_e108.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e120.g1_.w) * vec4(_e124.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e136.g0_.x) * vec4<f32>(_e140.g0_.w, _e143.g0_.x, _e146.g0_.x, _e149.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e161.g0_.y) * vec3<f32>(_e165.g0_.z, _e168.g0_.z, _e171.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e181.g0_.z) * vec3<f32>(_e185.g0_.y, _e188.g0_.x, _e191.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e202.g0_.x) * vec3<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_flector_wedge(self_3440: Flector, other_3116: Flector) -> Motor {
    var self_3441: Flector;
    var other_3117: Flector;

    self_3441 = self_3440;
    other_3117 = other_3116;
    let _e4: Flector = self_3441;
    let _e8: Flector = other_3117;
    let _e11: Flector = other_3117;
    let _e14: Flector = other_3117;
    let _e17: Flector = other_3117;
    let _e28: Flector = self_3441;
    let _e32: Flector = other_3117;
    let _e35: Flector = other_3117;
    let _e38: Flector = other_3117;
    let _e41: Flector = other_3117;
    let _e53: Flector = self_3441;
    let _e57: Flector = other_3117;
    let _e60: Flector = other_3117;
    let _e63: Flector = other_3117;
    let _e66: Flector = other_3117;
    let _e72: Flector = self_3441;
    let _e76: Flector = other_3117;
    let _e88: Flector = self_3441;
    let _e92: Flector = other_3117;
    let _e104: Flector = self_3441;
    let _e108: Flector = other_3117;
    let _e120: Flector = self_3441;
    let _e124: Flector = other_3117;
    let _e136: Flector = self_3441;
    let _e140: Flector = other_3117;
    let _e143: Flector = other_3117;
    let _e146: Flector = other_3117;
    let _e149: Flector = other_3117;
    let _e161: Flector = self_3441;
    let _e165: Flector = other_3117;
    let _e168: Flector = other_3117;
    let _e171: Flector = other_3117;
    let _e181: Flector = self_3441;
    let _e185: Flector = other_3117;
    let _e188: Flector = other_3117;
    let _e191: Flector = other_3117;
    let _e202: Flector = self_3441;
    let _e206: Flector = other_3117;
    let _e209: Flector = other_3117;
    let _e212: Flector = other_3117;
    return Motor((((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g1_.x) * vec4(_e76.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e88.g1_.y) * vec4(_e92.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e104.g1_.z) * vec4(_e108.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e120.g1_.w) * vec4(_e124.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e136.g0_.x) * vec4<f32>(_e140.g0_.w, _e143.g0_.x, _e146.g0_.x, _e149.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e161.g0_.y) * vec3<f32>(_e165.g0_.z, _e168.g0_.z, _e171.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e181.g0_.z) * vec3<f32>(_e185.g0_.y, _e188.g0_.x, _e191.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e202.g0_.x) * vec3<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_flector_join(self_3442: Flector, other_3118: Flector) -> Motor {
    var self_3443: Flector;
    var other_3119: Flector;

    self_3443 = self_3442;
    other_3119 = other_3118;
    let _e4: Flector = self_3443;
    let _e8: Flector = other_3119;
    let _e11: Flector = other_3119;
    let _e14: Flector = other_3119;
    let _e17: Flector = other_3119;
    let _e28: Flector = self_3443;
    let _e32: Flector = other_3119;
    let _e35: Flector = other_3119;
    let _e38: Flector = other_3119;
    let _e41: Flector = other_3119;
    let _e53: Flector = self_3443;
    let _e57: Flector = other_3119;
    let _e60: Flector = other_3119;
    let _e63: Flector = other_3119;
    let _e66: Flector = other_3119;
    let _e72: Flector = self_3443;
    let _e76: Flector = other_3119;
    let _e88: Flector = self_3443;
    let _e92: Flector = other_3119;
    let _e104: Flector = self_3443;
    let _e108: Flector = other_3119;
    let _e120: Flector = self_3443;
    let _e124: Flector = other_3119;
    let _e136: Flector = self_3443;
    let _e140: Flector = other_3119;
    let _e143: Flector = other_3119;
    let _e146: Flector = other_3119;
    let _e149: Flector = other_3119;
    let _e161: Flector = self_3443;
    let _e165: Flector = other_3119;
    let _e168: Flector = other_3119;
    let _e171: Flector = other_3119;
    let _e181: Flector = self_3443;
    let _e185: Flector = other_3119;
    let _e188: Flector = other_3119;
    let _e191: Flector = other_3119;
    let _e202: Flector = self_3443;
    let _e206: Flector = other_3119;
    let _e209: Flector = other_3119;
    let _e212: Flector = other_3119;
    return Motor((((((((((vec4(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0)) + ((vec4(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + (vec4(_e53.g0_.w) * vec4<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z, _e66.g1_.w))) + ((vec4(_e72.g1_.x) * vec4(_e76.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e88.g1_.y) * vec4(_e92.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e104.g1_.z) * vec4(_e108.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e120.g1_.w) * vec4(_e124.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e136.g0_.x) * vec4<f32>(_e140.g0_.w, _e143.g0_.x, _e146.g0_.x, _e149.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), ((((vec3(_e161.g0_.y) * vec3<f32>(_e165.g0_.z, _e168.g0_.z, _e171.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e181.g0_.z) * vec3<f32>(_e185.g0_.y, _e188.g0_.x, _e191.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e202.g0_.x) * vec3<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_flector_inner_product(self_3444: Flector, other_3120: Flector) -> MultiVector {
    var self_3445: Flector;
    var other_3121: Flector;

    self_3445 = self_3444;
    other_3121 = other_3120;
    let _e4: Flector = self_3445;
    let _e8: Flector = other_3121;
    let _e17: Flector = self_3445;
    let _e21: Flector = other_3121;
    let _e31: Flector = self_3445;
    let _e35: Flector = other_3121;
    let _e45: Flector = self_3445;
    let _e49: Flector = other_3121;
    let _e61: Flector = self_3445;
    let _e65: Flector = other_3121;
    let _e68: Flector = other_3121;
    let _e71: Flector = other_3121;
    let _e81: Flector = self_3445;
    let _e85: Flector = other_3121;
    let _e88: Flector = other_3121;
    let _e91: Flector = other_3121;
    let _e102: Flector = self_3445;
    let _e106: Flector = other_3121;
    let _e109: Flector = other_3121;
    let _e112: Flector = other_3121;
    let _e123: Flector = self_3445;
    let _e127: Flector = other_3121;
    let _e130: Flector = other_3121;
    let _e133: Flector = other_3121;
    let _e144: Flector = self_3445;
    let _e148: Flector = other_3121;
    let _e151: Flector = other_3121;
    let _e154: Flector = other_3121;
    let _e165: Flector = self_3445;
    let _e169: Flector = other_3121;
    let _e172: Flector = other_3121;
    let _e175: Flector = other_3121;
    let _e188: Flector = self_3445;
    let _e192: Flector = other_3121;
    let _e195: Flector = other_3121;
    let _e198: Flector = other_3121;
    let _e204: Flector = self_3445;
    let _e207: Flector = self_3445;
    let _e210: Flector = self_3445;
    let _e214: Flector = other_3121;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), (((((((vec3(_e61.g0_.y) * vec3<f32>(_e65.g1_.z, _e68.g1_.z, _e71.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e81.g0_.z) * vec3<f32>(_e85.g1_.y, _e88.g1_.x, _e91.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e102.g1_.x) * vec3<f32>(_e106.g0_.z, _e109.g0_.z, _e112.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e123.g1_.y) * vec3<f32>(_e127.g0_.z, _e130.g0_.z, _e133.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e144.g1_.z) * vec3<f32>(_e148.g0_.y, _e151.g0_.x, _e154.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e165.g0_.x) * vec3<f32>(_e169.g1_.x, _e172.g1_.z, _e175.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3(0.0) - (vec3(_e188.g1_.w) * vec3<f32>(_e192.g0_.x, _e195.g0_.y, _e198.g0_.z))) + ((vec3<f32>(_e204.g0_.x, _e207.g0_.y, _e210.g0_.z) * vec3(_e214.g1_.w)) * vec3(-1.0))), vec4(0.0));
}

fn flector_flector_inner_anti_product(self_3446: Flector, other_3122: Flector) -> Motor {
    var self_3447: Flector;
    var other_3123: Flector;

    self_3447 = self_3446;
    other_3123 = other_3122;
    let _e6: Flector = self_3447;
    let _e10: Flector = other_3123;
    let _e13: Flector = other_3123;
    let _e16: Flector = other_3123;
    let _e19: Flector = other_3123;
    let _e25: Flector = self_3447;
    let _e29: Flector = other_3123;
    let _e32: Flector = other_3123;
    let _e35: Flector = other_3123;
    let _e38: Flector = other_3123;
    let _e50: Flector = self_3447;
    let _e54: Flector = other_3123;
    let _e57: Flector = other_3123;
    let _e60: Flector = other_3123;
    let _e63: Flector = other_3123;
    let _e75: Flector = self_3447;
    let _e79: Flector = other_3123;
    let _e82: Flector = other_3123;
    let _e85: Flector = other_3123;
    let _e88: Flector = other_3123;
    let _e100: Flector = self_3447;
    let _e104: Flector = other_3123;
    let _e107: Flector = other_3123;
    let _e110: Flector = other_3123;
    let _e120: Flector = self_3447;
    let _e124: Flector = other_3123;
    let _e127: Flector = other_3123;
    let _e130: Flector = other_3123;
    let _e141: Flector = self_3447;
    let _e145: Flector = other_3123;
    let _e148: Flector = other_3123;
    let _e151: Flector = other_3123;
    let _e162: Flector = self_3447;
    let _e166: Flector = other_3123;
    let _e169: Flector = other_3123;
    let _e172: Flector = other_3123;
    let _e183: Flector = self_3447;
    let _e187: Flector = other_3123;
    let _e190: Flector = other_3123;
    let _e193: Flector = other_3123;
    let _e204: Flector = self_3447;
    let _e208: Flector = other_3123;
    let _e211: Flector = other_3123;
    let _e214: Flector = other_3123;
    return Motor(((((vec4(0.0) - (vec4(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))) + ((vec4(_e25.g1_.y) * vec4<f32>(_e29.g0_.w, _e32.g0_.w, _e35.g0_.w, _e38.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0))) + ((vec4(_e50.g1_.z) * vec4<f32>(_e54.g0_.w, _e57.g0_.w, _e60.g0_.w, _e63.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + ((vec4(_e75.g1_.x) * vec4<f32>(_e79.g0_.w, _e82.g0_.x, _e85.g0_.x, _e88.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0))), (((((((vec3(_e100.g0_.y) * vec3<f32>(_e104.g1_.z, _e107.g1_.z, _e110.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e120.g0_.z) * vec3<f32>(_e124.g1_.y, _e127.g1_.x, _e130.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e141.g1_.x) * vec3<f32>(_e145.g0_.z, _e148.g0_.z, _e151.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e162.g1_.y) * vec3<f32>(_e166.g0_.z, _e169.g0_.z, _e172.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e183.g1_.z) * vec3<f32>(_e187.g0_.y, _e190.g0_.x, _e193.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e204.g0_.x) * vec3<f32>(_e208.g1_.x, _e211.g1_.z, _e214.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn flector_flector_left_contraction(self_3448: Flector, other_3124: Flector) -> MultiVector {
    var self_3449: Flector;
    var other_3125: Flector;

    self_3449 = self_3448;
    other_3125 = other_3124;
    let _e4: Flector = self_3449;
    let _e8: Flector = other_3125;
    let _e17: Flector = self_3449;
    let _e21: Flector = other_3125;
    let _e31: Flector = self_3449;
    let _e35: Flector = other_3125;
    let _e45: Flector = self_3449;
    let _e49: Flector = other_3125;
    let _e61: Flector = self_3449;
    let _e65: Flector = other_3125;
    let _e68: Flector = other_3125;
    let _e71: Flector = other_3125;
    let _e81: Flector = self_3449;
    let _e85: Flector = other_3125;
    let _e88: Flector = other_3125;
    let _e91: Flector = other_3125;
    let _e102: Flector = self_3449;
    let _e106: Flector = other_3125;
    let _e109: Flector = other_3125;
    let _e112: Flector = other_3125;
    let _e123: Flector = self_3449;
    let _e126: Flector = self_3449;
    let _e129: Flector = self_3449;
    let _e133: Flector = other_3125;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g0_.y) * vec3<f32>(_e65.g1_.z, _e68.g1_.z, _e71.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e81.g0_.z) * vec3<f32>(_e85.g1_.y, _e88.g1_.x, _e91.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e102.g0_.x) * vec3<f32>(_e106.g1_.x, _e109.g1_.z, _e112.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e123.g0_.x, _e126.g0_.y, _e129.g0_.z) * vec3(_e133.g1_.w)) * vec3(-1.0)), vec4(0.0));
}

fn flector_flector_right_contraction(self_3450: Flector, other_3126: Flector) -> MultiVector {
    var self_3451: Flector;
    var other_3127: Flector;

    self_3451 = self_3450;
    other_3127 = other_3126;
    let _e4: Flector = self_3451;
    let _e8: Flector = other_3127;
    let _e17: Flector = self_3451;
    let _e21: Flector = other_3127;
    let _e31: Flector = self_3451;
    let _e35: Flector = other_3127;
    let _e45: Flector = self_3451;
    let _e49: Flector = other_3127;
    let _e61: Flector = self_3451;
    let _e65: Flector = other_3127;
    let _e68: Flector = other_3127;
    let _e71: Flector = other_3127;
    let _e81: Flector = self_3451;
    let _e85: Flector = other_3127;
    let _e88: Flector = other_3127;
    let _e91: Flector = other_3127;
    let _e102: Flector = self_3451;
    let _e106: Flector = other_3127;
    let _e109: Flector = other_3127;
    let _e112: Flector = other_3127;
    let _e125: Flector = self_3451;
    let _e129: Flector = other_3127;
    let _e132: Flector = other_3127;
    let _e135: Flector = other_3127;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), vec4(0.0), ((((vec3(_e61.g1_.y) * vec3<f32>(_e65.g0_.z, _e68.g0_.z, _e71.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e81.g1_.z) * vec3<f32>(_e85.g0_.y, _e88.g0_.x, _e91.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e102.g1_.x) * vec3<f32>(_e106.g0_.x, _e109.g0_.z, _e112.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e125.g1_.w) * vec3<f32>(_e129.g0_.x, _e132.g0_.y, _e135.g0_.z))), vec4(0.0));
}

fn flector_flector_left_anti_contraction(self_3452: Flector, other_3128: Flector) -> Motor {
    var self_3453: Flector;
    var other_3129: Flector;

    self_3453 = self_3452;
    other_3129 = other_3128;
    let _e4: Flector = self_3453;
    let _e8: Flector = other_3129;
    let _e11: Flector = other_3129;
    let _e14: Flector = other_3129;
    let _e17: Flector = other_3129;
    let _e28: Flector = self_3453;
    let _e32: Flector = other_3129;
    let _e35: Flector = other_3129;
    let _e38: Flector = other_3129;
    let _e41: Flector = other_3129;
    let _e53: Flector = self_3453;
    let _e57: Flector = other_3129;
    let _e60: Flector = other_3129;
    let _e63: Flector = other_3129;
    let _e66: Flector = other_3129;
    let _e78: Flector = self_3453;
    let _e81: Flector = other_3129;
    let _e92: Flector = self_3453;
    let _e96: Flector = other_3129;
    let _e99: Flector = other_3129;
    let _e102: Flector = other_3129;
    let _e112: Flector = self_3453;
    let _e116: Flector = other_3129;
    let _e119: Flector = other_3129;
    let _e122: Flector = other_3129;
    let _e133: Flector = self_3453;
    let _e137: Flector = other_3129;
    let _e140: Flector = other_3129;
    let _e143: Flector = other_3129;
    return Motor((((((vec4(_e4.g1_.x) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 1.0)) + ((vec4(_e28.g1_.y) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.y)) * vec4<f32>(0.0, -1.0, 0.0, 1.0))) + ((vec4(_e53.g1_.z) * vec4<f32>(_e57.g0_.w, _e60.g0_.w, _e63.g0_.w, _e66.g1_.z)) * vec4<f32>(0.0, 0.0, -1.0, 1.0))) + ((_e78.g0_.xxxw * _e81.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec3(_e92.g1_.y) * vec3<f32>(_e96.g0_.z, _e99.g0_.z, _e102.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e112.g1_.z) * vec3<f32>(_e116.g0_.y, _e119.g0_.x, _e122.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e133.g1_.x) * vec3<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))));
}

fn flector_flector_right_anti_contraction(self_3454: Flector, other_3130: Flector) -> Motor {
    var self_3455: Flector;
    var other_3131: Flector;

    self_3455 = self_3454;
    other_3131 = other_3130;
    let _e6: Flector = self_3455;
    let _e10: Flector = other_3131;
    let _e13: Flector = other_3131;
    let _e16: Flector = other_3131;
    let _e19: Flector = other_3131;
    let _e25: Flector = self_3455;
    let _e29: Flector = other_3131;
    let _e41: Flector = self_3455;
    let _e45: Flector = other_3131;
    let _e57: Flector = self_3455;
    let _e61: Flector = other_3131;
    let _e73: Flector = self_3455;
    let _e77: Flector = other_3131;
    let _e80: Flector = other_3131;
    let _e83: Flector = other_3131;
    let _e93: Flector = self_3455;
    let _e97: Flector = other_3131;
    let _e100: Flector = other_3131;
    let _e103: Flector = other_3131;
    let _e114: Flector = self_3455;
    let _e118: Flector = other_3131;
    let _e121: Flector = other_3131;
    let _e124: Flector = other_3131;
    return Motor(((((vec4(0.0) - (vec4(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))) + ((vec4(_e25.g1_.y) * vec4(_e29.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e41.g1_.z) * vec4(_e45.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e57.g1_.x) * vec4(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((vec3(_e73.g0_.y) * vec3<f32>(_e77.g1_.z, _e80.g1_.z, _e83.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e93.g0_.z) * vec3<f32>(_e97.g1_.y, _e100.g1_.x, _e103.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e114.g0_.x) * vec3<f32>(_e118.g1_.x, _e121.g1_.z, _e124.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))));
}

fn flector_flector_scalar_product(self_3456: Flector, other_3132: Flector) -> Scalar {
    var self_3457: Flector;
    var other_3133: Flector;

    self_3457 = self_3456;
    other_3133 = other_3132;
    let _e4: Flector = self_3457;
    let _e7: Flector = other_3133;
    let _e11: Flector = self_3457;
    let _e14: Flector = other_3133;
    let _e19: Flector = self_3457;
    let _e22: Flector = other_3133;
    let _e27: Flector = self_3457;
    let _e30: Flector = other_3133;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g1_.w)));
}

fn flector_flector_dot(self_3458: Flector, other_3134: Flector) -> Scalar {
    var self_3459: Flector;
    var other_3135: Flector;

    self_3459 = self_3458;
    other_3135 = other_3134;
    let _e4: Flector = self_3459;
    let _e7: Flector = other_3135;
    let _e11: Flector = self_3459;
    let _e14: Flector = other_3135;
    let _e19: Flector = self_3459;
    let _e22: Flector = other_3135;
    let _e27: Flector = self_3459;
    let _e30: Flector = other_3135;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g1_.w)));
}

fn flector_flector_anti_scalar_product(self_3460: Flector, other_3136: Flector) -> AntiScalar {
    var self_3461: Flector;
    var other_3137: Flector;

    self_3461 = self_3460;
    other_3137 = other_3136;
    let _e5: Flector = self_3461;
    let _e8: Flector = other_3137;
    let _e13: Flector = self_3461;
    let _e16: Flector = other_3137;
    let _e21: Flector = self_3461;
    let _e24: Flector = other_3137;
    let _e29: Flector = self_3461;
    let _e32: Flector = other_3137;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g0_.w)) + (_e13.g1_.x * _e16.g1_.x)) + (_e21.g1_.y * _e24.g1_.y)) + (_e29.g1_.z * _e32.g1_.z)));
}

fn flector_flector_anti_dot(self_3462: Flector, other_3138: Flector) -> AntiScalar {
    var self_3463: Flector;
    var other_3139: Flector;

    self_3463 = self_3462;
    other_3139 = other_3138;
    let _e5: Flector = self_3463;
    let _e8: Flector = other_3139;
    let _e13: Flector = self_3463;
    let _e16: Flector = other_3139;
    let _e21: Flector = self_3463;
    let _e24: Flector = other_3139;
    let _e29: Flector = self_3463;
    let _e32: Flector = other_3139;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g0_.w)) + (_e13.g1_.x * _e16.g1_.x)) + (_e21.g1_.y * _e24.g1_.y)) + (_e29.g1_.z * _e32.g1_.z)));
}

fn flector_multi_vector_add(self_3464: Flector, other_3140: MultiVector) -> MultiVector {
    var self_3465: Flector;
    var other_3141: MultiVector;

    self_3465 = self_3464;
    other_3141 = other_3140;
    let _e4: MultiVector = other_3141;
    let _e6: Flector = self_3465;
    let _e8: MultiVector = other_3141;
    let _e11: MultiVector = other_3141;
    let _e13: MultiVector = other_3141;
    let _e15: Flector = self_3465;
    let _e17: MultiVector = other_3141;
    return MultiVector(_e4.g0_, (_e6.g0_ + _e8.g1_), _e11.g2_, _e13.g3_, (_e15.g1_ + _e17.g4_));
}

fn flector_multi_vector_sub(self_3466: Flector, other_3142: MultiVector) -> MultiVector {
    var self_3467: Flector;
    var other_3143: MultiVector;

    self_3467 = self_3466;
    other_3143 = other_3142;
    let _e6: MultiVector = other_3143;
    let _e9: Flector = self_3467;
    let _e11: MultiVector = other_3143;
    let _e16: MultiVector = other_3143;
    let _e21: MultiVector = other_3143;
    let _e24: Flector = self_3467;
    let _e26: MultiVector = other_3143;
    return MultiVector((vec2(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (vec3(0.0) - _e16.g2_), (vec3(0.0) - _e21.g3_), (_e24.g1_ - _e26.g4_));
}

fn flector_multi_vector_geometric_product(self_3468: Flector, other_3144: MultiVector) -> MultiVector {
    var self_3469: Flector;
    var other_3145: MultiVector;

    self_3469 = self_3468;
    other_3145 = other_3144;
    let _e4: Flector = self_3469;
    let _e8: MultiVector = other_3145;
    let _e11: MultiVector = other_3145;
    let _e16: Flector = self_3469;
    let _e20: MultiVector = other_3145;
    let _e23: MultiVector = other_3145;
    let _e29: Flector = self_3469;
    let _e33: MultiVector = other_3145;
    let _e36: MultiVector = other_3145;
    let _e42: Flector = self_3469;
    let _e46: MultiVector = other_3145;
    let _e56: Flector = self_3469;
    let _e60: MultiVector = other_3145;
    let _e70: Flector = self_3469;
    let _e74: MultiVector = other_3145;
    let _e84: Flector = self_3469;
    let _e88: MultiVector = other_3145;
    let _e91: MultiVector = other_3145;
    let _e97: Flector = self_3469;
    let _e100: Flector = self_3469;
    let _e104: MultiVector = other_3145;
    let _e107: MultiVector = other_3145;
    let _e117: Flector = self_3469;
    let _e121: MultiVector = other_3145;
    let _e124: MultiVector = other_3145;
    let _e127: MultiVector = other_3145;
    let _e130: MultiVector = other_3145;
    let _e141: Flector = self_3469;
    let _e145: MultiVector = other_3145;
    let _e148: MultiVector = other_3145;
    let _e151: MultiVector = other_3145;
    let _e154: MultiVector = other_3145;
    let _e166: Flector = self_3469;
    let _e170: MultiVector = other_3145;
    let _e173: MultiVector = other_3145;
    let _e176: MultiVector = other_3145;
    let _e179: MultiVector = other_3145;
    let _e191: Flector = self_3469;
    let _e195: MultiVector = other_3145;
    let _e207: Flector = self_3469;
    let _e211: MultiVector = other_3145;
    let _e223: Flector = self_3469;
    let _e227: MultiVector = other_3145;
    let _e239: Flector = self_3469;
    let _e243: MultiVector = other_3145;
    let _e246: MultiVector = other_3145;
    let _e249: MultiVector = other_3145;
    let _e252: MultiVector = other_3145;
    let _e258: Flector = self_3469;
    let _e261: MultiVector = other_3145;
    let _e273: Flector = self_3469;
    let _e277: MultiVector = other_3145;
    let _e280: MultiVector = other_3145;
    let _e283: MultiVector = other_3145;
    let _e293: Flector = self_3469;
    let _e297: MultiVector = other_3145;
    let _e300: MultiVector = other_3145;
    let _e303: MultiVector = other_3145;
    let _e314: Flector = self_3469;
    let _e318: MultiVector = other_3145;
    let _e321: MultiVector = other_3145;
    let _e324: MultiVector = other_3145;
    let _e335: Flector = self_3469;
    let _e339: MultiVector = other_3145;
    let _e342: MultiVector = other_3145;
    let _e345: MultiVector = other_3145;
    let _e351: Flector = self_3469;
    let _e355: MultiVector = other_3145;
    let _e358: MultiVector = other_3145;
    let _e361: MultiVector = other_3145;
    let _e372: Flector = self_3469;
    let _e376: MultiVector = other_3145;
    let _e379: MultiVector = other_3145;
    let _e382: MultiVector = other_3145;
    let _e393: Flector = self_3469;
    let _e397: MultiVector = other_3145;
    let _e400: MultiVector = other_3145;
    let _e403: MultiVector = other_3145;
    let _e414: Flector = self_3469;
    let _e418: MultiVector = other_3145;
    let _e421: MultiVector = other_3145;
    let _e424: MultiVector = other_3145;
    let _e430: Flector = self_3469;
    let _e434: MultiVector = other_3145;
    let _e437: MultiVector = other_3145;
    let _e440: MultiVector = other_3145;
    let _e450: Flector = self_3469;
    let _e454: MultiVector = other_3145;
    let _e457: MultiVector = other_3145;
    let _e460: MultiVector = other_3145;
    let _e471: Flector = self_3469;
    let _e475: MultiVector = other_3145;
    let _e478: MultiVector = other_3145;
    let _e481: MultiVector = other_3145;
    let _e492: Flector = self_3469;
    let _e496: MultiVector = other_3145;
    let _e499: MultiVector = other_3145;
    let _e502: MultiVector = other_3145;
    let _e508: Flector = self_3469;
    let _e512: MultiVector = other_3145;
    let _e515: MultiVector = other_3145;
    let _e518: MultiVector = other_3145;
    let _e521: MultiVector = other_3145;
    let _e532: Flector = self_3469;
    let _e536: MultiVector = other_3145;
    let _e539: MultiVector = other_3145;
    let _e542: MultiVector = other_3145;
    let _e545: MultiVector = other_3145;
    let _e557: Flector = self_3469;
    let _e561: MultiVector = other_3145;
    let _e564: MultiVector = other_3145;
    let _e567: MultiVector = other_3145;
    let _e570: MultiVector = other_3145;
    let _e582: Flector = self_3469;
    let _e586: MultiVector = other_3145;
    let _e589: MultiVector = other_3145;
    let _e592: MultiVector = other_3145;
    let _e595: MultiVector = other_3145;
    let _e607: Flector = self_3469;
    let _e611: MultiVector = other_3145;
    let _e614: MultiVector = other_3145;
    let _e617: MultiVector = other_3145;
    let _e620: MultiVector = other_3145;
    let _e632: Flector = self_3469;
    let _e636: MultiVector = other_3145;
    let _e639: MultiVector = other_3145;
    let _e642: MultiVector = other_3145;
    let _e645: MultiVector = other_3145;
    let _e657: Flector = self_3469;
    let _e661: MultiVector = other_3145;
    let _e664: MultiVector = other_3145;
    let _e667: MultiVector = other_3145;
    let _e670: MultiVector = other_3145;
    let _e676: Flector = self_3469;
    let _e679: MultiVector = other_3145;
    let _e682: MultiVector = other_3145;
    let _e685: MultiVector = other_3145;
    let _e688: MultiVector = other_3145;
    return MultiVector(((((((((vec2(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) + (vec2(_e16.g0_.y) * vec2<f32>(_e20.g1_.y, _e23.g4_.y))) + (vec2(_e29.g0_.z) * vec2<f32>(_e33.g1_.z, _e36.g4_.z))) + ((vec2(_e42.g1_.x) * vec2(_e46.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e56.g1_.y) * vec2(_e60.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e70.g1_.z) * vec2(_e74.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e84.g1_.w) * vec2<f32>(_e88.g4_.w, _e91.g1_.w))) + ((vec2<f32>(_e97.g0_.x, _e100.g0_.w) * vec2<f32>(_e104.g4_.x, _e107.g4_.w)) * vec2<f32>(0.0, 1.0))), (((((((((vec4(_e117.g0_.x) * vec4<f32>(_e121.g0_.x, _e124.g3_.z, _e127.g3_.y, _e130.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e141.g0_.y) * vec4<f32>(_e145.g3_.z, _e148.g0_.x, _e151.g3_.x, _e154.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e166.g0_.z) * vec4<f32>(_e170.g3_.y, _e173.g3_.x, _e176.g0_.x, _e179.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e191.g1_.x) * vec4(_e195.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e207.g1_.y) * vec4(_e211.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e223.g1_.z) * vec4(_e227.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e239.g1_.w) * vec4<f32>(_e243.g3_.x, _e246.g3_.y, _e249.g3_.z, _e252.g0_.y))) + ((_e258.g0_.xxxw * vec4(_e261.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((((vec3(_e273.g0_.x) * vec3<f32>(_e277.g1_.w, _e280.g4_.z, _e283.g4_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e293.g0_.y) * vec3<f32>(_e297.g4_.z, _e300.g1_.w, _e303.g4_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e314.g0_.z) * vec3<f32>(_e318.g4_.y, _e321.g4_.x, _e324.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e335.g0_.w) * vec3<f32>(_e339.g1_.x, _e342.g1_.y, _e345.g1_.z))) + ((vec3(_e351.g1_.x) * vec3<f32>(_e355.g4_.w, _e358.g1_.z, _e361.g1_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e372.g1_.y) * vec3<f32>(_e376.g1_.z, _e379.g4_.w, _e382.g1_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e393.g1_.z) * vec3<f32>(_e397.g1_.y, _e400.g1_.x, _e403.g4_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e414.g1_.w) * vec3<f32>(_e418.g4_.x, _e421.g4_.y, _e424.g4_.z))), (((((vec3(_e430.g0_.x) * vec3<f32>(_e434.g4_.w, _e437.g1_.z, _e440.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e450.g0_.y) * vec3<f32>(_e454.g1_.z, _e457.g4_.w, _e460.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e471.g0_.z) * vec3<f32>(_e475.g1_.y, _e478.g1_.x, _e481.g4_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) - (vec3(_e492.g1_.w) * vec3<f32>(_e496.g1_.x, _e499.g1_.y, _e502.g1_.z))), (((((((((vec4(_e508.g0_.x) * vec4<f32>(_e512.g0_.y, _e515.g2_.z, _e518.g2_.y, _e521.g3_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e532.g0_.y) * vec4<f32>(_e536.g2_.z, _e539.g0_.y, _e542.g2_.x, _e545.g3_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e557.g0_.z) * vec4<f32>(_e561.g2_.y, _e564.g2_.x, _e567.g0_.y, _e570.g3_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e582.g1_.x) * vec4<f32>(_e586.g0_.x, _e589.g3_.z, _e592.g3_.y, _e595.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e607.g1_.y) * vec4<f32>(_e611.g3_.z, _e614.g0_.x, _e617.g3_.x, _e620.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e632.g1_.z) * vec4<f32>(_e636.g3_.y, _e639.g3_.x, _e642.g0_.x, _e645.g3_.y)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + (vec4(_e657.g1_.w) * vec4<f32>(_e661.g2_.x, _e664.g2_.y, _e667.g2_.z, _e670.g0_.x))) + ((_e676.g0_.wwwx * vec4<f32>(_e679.g3_.x, _e682.g3_.y, _e685.g3_.z, _e688.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn flector_multi_vector_geometric_anti_product(self_3470: Flector, other_3146: MultiVector) -> MultiVector {
    var self_3471: Flector;
    var other_3147: MultiVector;

    self_3471 = self_3470;
    other_3147 = other_3146;
    let _e4: Flector = self_3471;
    let _e8: MultiVector = other_3147;
    let _e17: Flector = self_3471;
    let _e21: MultiVector = other_3147;
    let _e31: Flector = self_3471;
    let _e35: MultiVector = other_3147;
    let _e38: MultiVector = other_3147;
    let _e48: Flector = self_3471;
    let _e52: MultiVector = other_3147;
    let _e55: MultiVector = other_3147;
    let _e65: Flector = self_3471;
    let _e69: MultiVector = other_3147;
    let _e72: MultiVector = other_3147;
    let _e82: Flector = self_3471;
    let _e86: MultiVector = other_3147;
    let _e89: MultiVector = other_3147;
    let _e99: Flector = self_3471;
    let _e103: MultiVector = other_3147;
    let _e113: Flector = self_3471;
    let _e117: MultiVector = other_3147;
    let _e127: Flector = self_3471;
    let _e131: MultiVector = other_3147;
    let _e134: MultiVector = other_3147;
    let _e137: MultiVector = other_3147;
    let _e140: MultiVector = other_3147;
    let _e151: Flector = self_3471;
    let _e155: MultiVector = other_3147;
    let _e158: MultiVector = other_3147;
    let _e161: MultiVector = other_3147;
    let _e164: MultiVector = other_3147;
    let _e176: Flector = self_3471;
    let _e180: MultiVector = other_3147;
    let _e183: MultiVector = other_3147;
    let _e186: MultiVector = other_3147;
    let _e189: MultiVector = other_3147;
    let _e201: Flector = self_3471;
    let _e205: MultiVector = other_3147;
    let _e208: MultiVector = other_3147;
    let _e211: MultiVector = other_3147;
    let _e214: MultiVector = other_3147;
    let _e226: Flector = self_3471;
    let _e230: MultiVector = other_3147;
    let _e233: MultiVector = other_3147;
    let _e236: MultiVector = other_3147;
    let _e239: MultiVector = other_3147;
    let _e251: Flector = self_3471;
    let _e255: MultiVector = other_3147;
    let _e258: MultiVector = other_3147;
    let _e261: MultiVector = other_3147;
    let _e264: MultiVector = other_3147;
    let _e276: Flector = self_3471;
    let _e280: MultiVector = other_3147;
    let _e283: MultiVector = other_3147;
    let _e286: MultiVector = other_3147;
    let _e289: MultiVector = other_3147;
    let _e301: Flector = self_3471;
    let _e305: MultiVector = other_3147;
    let _e308: MultiVector = other_3147;
    let _e311: MultiVector = other_3147;
    let _e314: MultiVector = other_3147;
    let _e328: Flector = self_3471;
    let _e332: MultiVector = other_3147;
    let _e335: MultiVector = other_3147;
    let _e338: MultiVector = other_3147;
    let _e344: Flector = self_3471;
    let _e348: MultiVector = other_3147;
    let _e351: MultiVector = other_3147;
    let _e354: MultiVector = other_3147;
    let _e365: Flector = self_3471;
    let _e369: MultiVector = other_3147;
    let _e372: MultiVector = other_3147;
    let _e375: MultiVector = other_3147;
    let _e386: Flector = self_3471;
    let _e390: MultiVector = other_3147;
    let _e393: MultiVector = other_3147;
    let _e396: MultiVector = other_3147;
    let _e407: Flector = self_3471;
    let _e411: MultiVector = other_3147;
    let _e414: MultiVector = other_3147;
    let _e417: MultiVector = other_3147;
    let _e427: Flector = self_3471;
    let _e431: MultiVector = other_3147;
    let _e434: MultiVector = other_3147;
    let _e437: MultiVector = other_3147;
    let _e448: Flector = self_3471;
    let _e452: MultiVector = other_3147;
    let _e455: MultiVector = other_3147;
    let _e458: MultiVector = other_3147;
    let _e469: Flector = self_3471;
    let _e473: MultiVector = other_3147;
    let _e476: MultiVector = other_3147;
    let _e479: MultiVector = other_3147;
    let _e485: Flector = self_3471;
    let _e489: MultiVector = other_3147;
    let _e492: MultiVector = other_3147;
    let _e495: MultiVector = other_3147;
    let _e506: Flector = self_3471;
    let _e510: MultiVector = other_3147;
    let _e513: MultiVector = other_3147;
    let _e516: MultiVector = other_3147;
    let _e527: Flector = self_3471;
    let _e531: MultiVector = other_3147;
    let _e534: MultiVector = other_3147;
    let _e537: MultiVector = other_3147;
    let _e548: Flector = self_3471;
    let _e552: MultiVector = other_3147;
    let _e555: MultiVector = other_3147;
    let _e558: MultiVector = other_3147;
    let _e564: Flector = self_3471;
    let _e568: MultiVector = other_3147;
    let _e579: Flector = self_3471;
    let _e583: MultiVector = other_3147;
    let _e595: Flector = self_3471;
    let _e599: MultiVector = other_3147;
    let _e602: MultiVector = other_3147;
    let _e605: MultiVector = other_3147;
    let _e608: MultiVector = other_3147;
    let _e620: Flector = self_3471;
    let _e624: MultiVector = other_3147;
    let _e627: MultiVector = other_3147;
    let _e630: MultiVector = other_3147;
    let _e633: MultiVector = other_3147;
    let _e645: Flector = self_3471;
    let _e649: MultiVector = other_3147;
    let _e652: MultiVector = other_3147;
    let _e655: MultiVector = other_3147;
    let _e658: MultiVector = other_3147;
    let _e670: Flector = self_3471;
    let _e674: MultiVector = other_3147;
    let _e677: MultiVector = other_3147;
    let _e680: MultiVector = other_3147;
    let _e683: MultiVector = other_3147;
    let _e695: Flector = self_3471;
    let _e699: MultiVector = other_3147;
    let _e711: Flector = self_3471;
    let _e715: MultiVector = other_3147;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2<f32>(_e35.g4_.w, _e38.g1_.w)) * vec2<f32>(1.0, -1.0))) + ((vec2(_e48.g1_.x) * vec2<f32>(_e52.g1_.x, _e55.g4_.x)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e65.g1_.y) * vec2<f32>(_e69.g1_.y, _e72.g4_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e82.g1_.z) * vec2<f32>(_e86.g1_.z, _e89.g4_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e99.g1_.w) * vec2(_e103.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e113.g0_.x) * vec2(_e117.g4_.x)) * vec2<f32>(1.0, 0.0))), (((((((((vec4(_e127.g0_.y) * vec4<f32>(_e131.g2_.z, _e134.g0_.y, _e137.g2_.x, _e140.g2_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e151.g0_.z) * vec4<f32>(_e155.g2_.y, _e158.g2_.x, _e161.g0_.y, _e164.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e176.g0_.w) * vec4<f32>(_e180.g3_.x, _e183.g3_.y, _e186.g3_.z, _e189.g0_.y)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e201.g1_.x) * vec4<f32>(_e205.g0_.x, _e208.g3_.z, _e211.g3_.y, _e214.g2_.x)) * vec4<f32>(-1.0, 1.0, -1.0, -1.0))) + ((vec4(_e226.g1_.y) * vec4<f32>(_e230.g3_.z, _e233.g0_.x, _e236.g3_.x, _e239.g2_.y)) * vec4<f32>(-1.0, -1.0, 1.0, -1.0))) + ((vec4(_e251.g1_.z) * vec4<f32>(_e255.g3_.y, _e258.g3_.x, _e261.g0_.x, _e264.g2_.z)) * vec4<f32>(1.0, -1.0, -1.0, -1.0))) + ((vec4(_e276.g1_.w) * vec4<f32>(_e280.g2_.x, _e283.g2_.y, _e286.g2_.z, _e289.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e301.g0_.x) * vec4<f32>(_e305.g0_.y, _e308.g2_.z, _e311.g2_.y, _e314.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((vec3(0.0) - (vec3(_e328.g0_.w) * vec3<f32>(_e332.g4_.x, _e335.g4_.y, _e338.g4_.z))) + ((vec3(_e344.g1_.x) * vec3<f32>(_e348.g1_.w, _e351.g4_.z, _e354.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e365.g1_.y) * vec3<f32>(_e369.g4_.z, _e372.g1_.w, _e375.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e386.g1_.z) * vec3<f32>(_e390.g4_.y, _e393.g4_.x, _e396.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))), (((((((((vec3(_e407.g0_.x) * vec3<f32>(_e411.g1_.w, _e414.g4_.z, _e417.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e427.g0_.y) * vec3<f32>(_e431.g4_.z, _e434.g1_.w, _e437.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e448.g0_.z) * vec3<f32>(_e452.g4_.y, _e455.g4_.x, _e458.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e469.g0_.w) * vec3<f32>(_e473.g1_.x, _e476.g1_.y, _e479.g1_.z))) + ((vec3(_e485.g1_.x) * vec3<f32>(_e489.g4_.w, _e492.g1_.z, _e495.g1_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e506.g1_.y) * vec3<f32>(_e510.g1_.z, _e513.g4_.w, _e516.g1_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e527.g1_.z) * vec3<f32>(_e531.g1_.y, _e534.g1_.x, _e537.g4_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e548.g1_.w) * vec3<f32>(_e552.g4_.x, _e555.g4_.y, _e558.g4_.z))), (((((((((vec4(_e564.g0_.y) * vec4(_e568.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e579.g0_.z) * vec4(_e583.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e595.g0_.w) * vec4<f32>(_e599.g2_.x, _e602.g2_.y, _e605.g2_.z, _e608.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e620.g1_.x) * vec4<f32>(_e624.g0_.y, _e627.g2_.z, _e630.g2_.y, _e633.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e645.g1_.y) * vec4<f32>(_e649.g2_.z, _e652.g0_.y, _e655.g2_.x, _e658.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e670.g1_.z) * vec4<f32>(_e674.g2_.y, _e677.g2_.x, _e680.g0_.y, _e683.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e695.g1_.w) * vec4(_e699.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e711.g0_.x) * vec4(_e715.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn flector_multi_vector_regressive_product(self_3472: Flector, other_3148: MultiVector) -> MultiVector {
    var self_3473: Flector;
    var other_3149: MultiVector;

    self_3473 = self_3472;
    other_3149 = other_3148;
    let _e4: Flector = self_3473;
    let _e8: MultiVector = other_3149;
    let _e17: Flector = self_3473;
    let _e21: MultiVector = other_3149;
    let _e31: Flector = self_3473;
    let _e35: MultiVector = other_3149;
    let _e45: Flector = self_3473;
    let _e49: MultiVector = other_3149;
    let _e59: Flector = self_3473;
    let _e63: MultiVector = other_3149;
    let _e73: Flector = self_3473;
    let _e77: MultiVector = other_3149;
    let _e87: Flector = self_3473;
    let _e91: MultiVector = other_3149;
    let _e101: Flector = self_3473;
    let _e105: MultiVector = other_3149;
    let _e115: Flector = self_3473;
    let _e119: MultiVector = other_3149;
    let _e122: MultiVector = other_3149;
    let _e125: MultiVector = other_3149;
    let _e128: MultiVector = other_3149;
    let _e139: Flector = self_3473;
    let _e143: MultiVector = other_3149;
    let _e146: MultiVector = other_3149;
    let _e149: MultiVector = other_3149;
    let _e152: MultiVector = other_3149;
    let _e164: Flector = self_3473;
    let _e168: MultiVector = other_3149;
    let _e171: MultiVector = other_3149;
    let _e174: MultiVector = other_3149;
    let _e177: MultiVector = other_3149;
    let _e189: Flector = self_3473;
    let _e193: MultiVector = other_3149;
    let _e196: MultiVector = other_3149;
    let _e199: MultiVector = other_3149;
    let _e202: MultiVector = other_3149;
    let _e214: Flector = self_3473;
    let _e216: MultiVector = other_3149;
    let _e222: Flector = self_3473;
    let _e226: MultiVector = other_3149;
    let _e229: MultiVector = other_3149;
    let _e232: MultiVector = other_3149;
    let _e242: Flector = self_3473;
    let _e246: MultiVector = other_3149;
    let _e249: MultiVector = other_3149;
    let _e252: MultiVector = other_3149;
    let _e263: Flector = self_3473;
    let _e267: MultiVector = other_3149;
    let _e270: MultiVector = other_3149;
    let _e273: MultiVector = other_3149;
    let _e286: Flector = self_3473;
    let _e290: MultiVector = other_3149;
    let _e293: MultiVector = other_3149;
    let _e296: MultiVector = other_3149;
    let _e302: Flector = self_3473;
    let _e305: Flector = self_3473;
    let _e308: Flector = self_3473;
    let _e312: MultiVector = other_3149;
    let _e318: Flector = self_3473;
    let _e320: MultiVector = other_3149;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g1_.x) * vec4<f32>(_e119.g3_.z, _e122.g3_.z, _e125.g3_.y, _e128.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e139.g1_.y) * vec4<f32>(_e143.g3_.z, _e146.g3_.z, _e149.g3_.x, _e152.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e164.g1_.z) * vec4<f32>(_e168.g3_.y, _e171.g3_.x, _e174.g3_.y, _e177.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e189.g1_.w) * vec4<f32>(_e193.g2_.x, _e196.g2_.y, _e199.g2_.z, _e202.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e214.g0_ * vec4(_e216.g0_.y))), ((((vec3(_e222.g1_.y) * vec3<f32>(_e226.g4_.z, _e229.g4_.z, _e232.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e242.g1_.z) * vec3<f32>(_e246.g4_.y, _e249.g4_.x, _e252.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e263.g1_.x) * vec3<f32>(_e267.g4_.x, _e270.g4_.z, _e273.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e286.g1_.w) * vec3<f32>(_e290.g4_.x, _e293.g4_.y, _e296.g4_.z))) + (vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g4_.w))), (_e318.g1_ * vec4(_e320.g0_.y)));
}

fn flector_multi_vector_anti_wedge(self_3474: Flector, other_3150: MultiVector) -> MultiVector {
    var self_3475: Flector;
    var other_3151: MultiVector;

    self_3475 = self_3474;
    other_3151 = other_3150;
    let _e4: Flector = self_3475;
    let _e8: MultiVector = other_3151;
    let _e17: Flector = self_3475;
    let _e21: MultiVector = other_3151;
    let _e31: Flector = self_3475;
    let _e35: MultiVector = other_3151;
    let _e45: Flector = self_3475;
    let _e49: MultiVector = other_3151;
    let _e59: Flector = self_3475;
    let _e63: MultiVector = other_3151;
    let _e73: Flector = self_3475;
    let _e77: MultiVector = other_3151;
    let _e87: Flector = self_3475;
    let _e91: MultiVector = other_3151;
    let _e101: Flector = self_3475;
    let _e105: MultiVector = other_3151;
    let _e115: Flector = self_3475;
    let _e119: MultiVector = other_3151;
    let _e122: MultiVector = other_3151;
    let _e125: MultiVector = other_3151;
    let _e128: MultiVector = other_3151;
    let _e139: Flector = self_3475;
    let _e143: MultiVector = other_3151;
    let _e146: MultiVector = other_3151;
    let _e149: MultiVector = other_3151;
    let _e152: MultiVector = other_3151;
    let _e164: Flector = self_3475;
    let _e168: MultiVector = other_3151;
    let _e171: MultiVector = other_3151;
    let _e174: MultiVector = other_3151;
    let _e177: MultiVector = other_3151;
    let _e189: Flector = self_3475;
    let _e193: MultiVector = other_3151;
    let _e196: MultiVector = other_3151;
    let _e199: MultiVector = other_3151;
    let _e202: MultiVector = other_3151;
    let _e214: Flector = self_3475;
    let _e216: MultiVector = other_3151;
    let _e222: Flector = self_3475;
    let _e226: MultiVector = other_3151;
    let _e229: MultiVector = other_3151;
    let _e232: MultiVector = other_3151;
    let _e242: Flector = self_3475;
    let _e246: MultiVector = other_3151;
    let _e249: MultiVector = other_3151;
    let _e252: MultiVector = other_3151;
    let _e263: Flector = self_3475;
    let _e267: MultiVector = other_3151;
    let _e270: MultiVector = other_3151;
    let _e273: MultiVector = other_3151;
    let _e286: Flector = self_3475;
    let _e290: MultiVector = other_3151;
    let _e293: MultiVector = other_3151;
    let _e296: MultiVector = other_3151;
    let _e302: Flector = self_3475;
    let _e305: Flector = self_3475;
    let _e308: Flector = self_3475;
    let _e312: MultiVector = other_3151;
    let _e318: Flector = self_3475;
    let _e320: MultiVector = other_3151;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g1_.x) * vec4<f32>(_e119.g3_.z, _e122.g3_.z, _e125.g3_.y, _e128.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e139.g1_.y) * vec4<f32>(_e143.g3_.z, _e146.g3_.z, _e149.g3_.x, _e152.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e164.g1_.z) * vec4<f32>(_e168.g3_.y, _e171.g3_.x, _e174.g3_.y, _e177.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e189.g1_.w) * vec4<f32>(_e193.g2_.x, _e196.g2_.y, _e199.g2_.z, _e202.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e214.g0_ * vec4(_e216.g0_.y))), ((((vec3(_e222.g1_.y) * vec3<f32>(_e226.g4_.z, _e229.g4_.z, _e232.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e242.g1_.z) * vec3<f32>(_e246.g4_.y, _e249.g4_.x, _e252.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e263.g1_.x) * vec3<f32>(_e267.g4_.x, _e270.g4_.z, _e273.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e286.g1_.w) * vec3<f32>(_e290.g4_.x, _e293.g4_.y, _e296.g4_.z))) + (vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g4_.w))), (_e318.g1_ * vec4(_e320.g0_.y)));
}

fn flector_multi_vector_meet(self_3476: Flector, other_3152: MultiVector) -> MultiVector {
    var self_3477: Flector;
    var other_3153: MultiVector;

    self_3477 = self_3476;
    other_3153 = other_3152;
    let _e4: Flector = self_3477;
    let _e8: MultiVector = other_3153;
    let _e17: Flector = self_3477;
    let _e21: MultiVector = other_3153;
    let _e31: Flector = self_3477;
    let _e35: MultiVector = other_3153;
    let _e45: Flector = self_3477;
    let _e49: MultiVector = other_3153;
    let _e59: Flector = self_3477;
    let _e63: MultiVector = other_3153;
    let _e73: Flector = self_3477;
    let _e77: MultiVector = other_3153;
    let _e87: Flector = self_3477;
    let _e91: MultiVector = other_3153;
    let _e101: Flector = self_3477;
    let _e105: MultiVector = other_3153;
    let _e115: Flector = self_3477;
    let _e119: MultiVector = other_3153;
    let _e122: MultiVector = other_3153;
    let _e125: MultiVector = other_3153;
    let _e128: MultiVector = other_3153;
    let _e139: Flector = self_3477;
    let _e143: MultiVector = other_3153;
    let _e146: MultiVector = other_3153;
    let _e149: MultiVector = other_3153;
    let _e152: MultiVector = other_3153;
    let _e164: Flector = self_3477;
    let _e168: MultiVector = other_3153;
    let _e171: MultiVector = other_3153;
    let _e174: MultiVector = other_3153;
    let _e177: MultiVector = other_3153;
    let _e189: Flector = self_3477;
    let _e193: MultiVector = other_3153;
    let _e196: MultiVector = other_3153;
    let _e199: MultiVector = other_3153;
    let _e202: MultiVector = other_3153;
    let _e214: Flector = self_3477;
    let _e216: MultiVector = other_3153;
    let _e222: Flector = self_3477;
    let _e226: MultiVector = other_3153;
    let _e229: MultiVector = other_3153;
    let _e232: MultiVector = other_3153;
    let _e242: Flector = self_3477;
    let _e246: MultiVector = other_3153;
    let _e249: MultiVector = other_3153;
    let _e252: MultiVector = other_3153;
    let _e263: Flector = self_3477;
    let _e267: MultiVector = other_3153;
    let _e270: MultiVector = other_3153;
    let _e273: MultiVector = other_3153;
    let _e286: Flector = self_3477;
    let _e290: MultiVector = other_3153;
    let _e293: MultiVector = other_3153;
    let _e296: MultiVector = other_3153;
    let _e302: Flector = self_3477;
    let _e305: Flector = self_3477;
    let _e308: Flector = self_3477;
    let _e312: MultiVector = other_3153;
    let _e318: Flector = self_3477;
    let _e320: MultiVector = other_3153;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g1_.x) * vec4<f32>(_e119.g3_.z, _e122.g3_.z, _e125.g3_.y, _e128.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e139.g1_.y) * vec4<f32>(_e143.g3_.z, _e146.g3_.z, _e149.g3_.x, _e152.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e164.g1_.z) * vec4<f32>(_e168.g3_.y, _e171.g3_.x, _e174.g3_.y, _e177.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e189.g1_.w) * vec4<f32>(_e193.g2_.x, _e196.g2_.y, _e199.g2_.z, _e202.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e214.g0_ * vec4(_e216.g0_.y))), ((((vec3(_e222.g1_.y) * vec3<f32>(_e226.g4_.z, _e229.g4_.z, _e232.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e242.g1_.z) * vec3<f32>(_e246.g4_.y, _e249.g4_.x, _e252.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e263.g1_.x) * vec3<f32>(_e267.g4_.x, _e270.g4_.z, _e273.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e286.g1_.w) * vec3<f32>(_e290.g4_.x, _e293.g4_.y, _e296.g4_.z))) + (vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g4_.w))), (_e318.g1_ * vec4(_e320.g0_.y)));
}

fn flector_multi_vector_outer_product(self_3478: Flector, other_3154: MultiVector) -> MultiVector {
    var self_3479: Flector;
    var other_3155: MultiVector;

    self_3479 = self_3478;
    other_3155 = other_3154;
    let _e4: Flector = self_3479;
    let _e8: MultiVector = other_3155;
    let _e17: Flector = self_3479;
    let _e21: MultiVector = other_3155;
    let _e31: Flector = self_3479;
    let _e35: MultiVector = other_3155;
    let _e45: Flector = self_3479;
    let _e49: MultiVector = other_3155;
    let _e59: Flector = self_3479;
    let _e63: MultiVector = other_3155;
    let _e73: Flector = self_3479;
    let _e77: MultiVector = other_3155;
    let _e87: Flector = self_3479;
    let _e91: MultiVector = other_3155;
    let _e101: Flector = self_3479;
    let _e105: MultiVector = other_3155;
    let _e115: Flector = self_3479;
    let _e117: MultiVector = other_3155;
    let _e122: Flector = self_3479;
    let _e126: MultiVector = other_3155;
    let _e129: MultiVector = other_3155;
    let _e132: MultiVector = other_3155;
    let _e137: Flector = self_3479;
    let _e140: Flector = self_3479;
    let _e143: Flector = self_3479;
    let _e147: MultiVector = other_3155;
    let _e156: Flector = self_3479;
    let _e160: MultiVector = other_3155;
    let _e163: MultiVector = other_3155;
    let _e166: MultiVector = other_3155;
    let _e176: Flector = self_3479;
    let _e180: MultiVector = other_3155;
    let _e183: MultiVector = other_3155;
    let _e186: MultiVector = other_3155;
    let _e197: Flector = self_3479;
    let _e201: MultiVector = other_3155;
    let _e204: MultiVector = other_3155;
    let _e207: MultiVector = other_3155;
    let _e218: Flector = self_3479;
    let _e222: MultiVector = other_3155;
    let _e225: MultiVector = other_3155;
    let _e228: MultiVector = other_3155;
    let _e231: MultiVector = other_3155;
    let _e242: Flector = self_3479;
    let _e246: MultiVector = other_3155;
    let _e249: MultiVector = other_3155;
    let _e252: MultiVector = other_3155;
    let _e255: MultiVector = other_3155;
    let _e267: Flector = self_3479;
    let _e271: MultiVector = other_3155;
    let _e274: MultiVector = other_3155;
    let _e277: MultiVector = other_3155;
    let _e280: MultiVector = other_3155;
    let _e292: Flector = self_3479;
    let _e296: MultiVector = other_3155;
    let _e308: Flector = self_3479;
    let _e312: MultiVector = other_3155;
    let _e324: Flector = self_3479;
    let _e328: MultiVector = other_3155;
    let _e340: Flector = self_3479;
    let _e344: MultiVector = other_3155;
    let _e356: Flector = self_3479;
    let _e360: MultiVector = other_3155;
    let _e363: MultiVector = other_3155;
    let _e366: MultiVector = other_3155;
    let _e369: MultiVector = other_3155;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e115.g0_ * vec4(_e117.g0_.x)), ((vec3(_e122.g0_.w) * vec3<f32>(_e126.g1_.x, _e129.g1_.y, _e132.g1_.z)) + ((vec3<f32>(_e137.g0_.x, _e140.g0_.y, _e143.g0_.z) * vec3(_e147.g1_.w)) * vec3(-1.0))), ((((vec3(_e156.g0_.y) * vec3<f32>(_e160.g1_.z, _e163.g1_.z, _e166.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g0_.z) * vec3<f32>(_e180.g1_.y, _e183.g1_.x, _e186.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g0_.x) * vec3<f32>(_e201.g1_.x, _e204.g1_.z, _e207.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((vec4(_e218.g0_.y) * vec4<f32>(_e222.g2_.z, _e225.g2_.z, _e228.g2_.x, _e231.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e242.g0_.z) * vec4<f32>(_e246.g2_.y, _e249.g2_.x, _e252.g2_.y, _e255.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e267.g0_.w) * vec4<f32>(_e271.g3_.x, _e274.g3_.y, _e277.g3_.z, _e280.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e292.g1_.x) * vec4(_e296.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e308.g1_.y) * vec4(_e312.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e324.g1_.z) * vec4(_e328.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e340.g1_.w) * vec4(_e344.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e356.g0_.x) * vec4<f32>(_e360.g2_.x, _e363.g2_.z, _e366.g2_.y, _e369.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_multi_vector_wedge(self_3480: Flector, other_3156: MultiVector) -> MultiVector {
    var self_3481: Flector;
    var other_3157: MultiVector;

    self_3481 = self_3480;
    other_3157 = other_3156;
    let _e4: Flector = self_3481;
    let _e8: MultiVector = other_3157;
    let _e17: Flector = self_3481;
    let _e21: MultiVector = other_3157;
    let _e31: Flector = self_3481;
    let _e35: MultiVector = other_3157;
    let _e45: Flector = self_3481;
    let _e49: MultiVector = other_3157;
    let _e59: Flector = self_3481;
    let _e63: MultiVector = other_3157;
    let _e73: Flector = self_3481;
    let _e77: MultiVector = other_3157;
    let _e87: Flector = self_3481;
    let _e91: MultiVector = other_3157;
    let _e101: Flector = self_3481;
    let _e105: MultiVector = other_3157;
    let _e115: Flector = self_3481;
    let _e117: MultiVector = other_3157;
    let _e122: Flector = self_3481;
    let _e126: MultiVector = other_3157;
    let _e129: MultiVector = other_3157;
    let _e132: MultiVector = other_3157;
    let _e137: Flector = self_3481;
    let _e140: Flector = self_3481;
    let _e143: Flector = self_3481;
    let _e147: MultiVector = other_3157;
    let _e156: Flector = self_3481;
    let _e160: MultiVector = other_3157;
    let _e163: MultiVector = other_3157;
    let _e166: MultiVector = other_3157;
    let _e176: Flector = self_3481;
    let _e180: MultiVector = other_3157;
    let _e183: MultiVector = other_3157;
    let _e186: MultiVector = other_3157;
    let _e197: Flector = self_3481;
    let _e201: MultiVector = other_3157;
    let _e204: MultiVector = other_3157;
    let _e207: MultiVector = other_3157;
    let _e218: Flector = self_3481;
    let _e222: MultiVector = other_3157;
    let _e225: MultiVector = other_3157;
    let _e228: MultiVector = other_3157;
    let _e231: MultiVector = other_3157;
    let _e242: Flector = self_3481;
    let _e246: MultiVector = other_3157;
    let _e249: MultiVector = other_3157;
    let _e252: MultiVector = other_3157;
    let _e255: MultiVector = other_3157;
    let _e267: Flector = self_3481;
    let _e271: MultiVector = other_3157;
    let _e274: MultiVector = other_3157;
    let _e277: MultiVector = other_3157;
    let _e280: MultiVector = other_3157;
    let _e292: Flector = self_3481;
    let _e296: MultiVector = other_3157;
    let _e308: Flector = self_3481;
    let _e312: MultiVector = other_3157;
    let _e324: Flector = self_3481;
    let _e328: MultiVector = other_3157;
    let _e340: Flector = self_3481;
    let _e344: MultiVector = other_3157;
    let _e356: Flector = self_3481;
    let _e360: MultiVector = other_3157;
    let _e363: MultiVector = other_3157;
    let _e366: MultiVector = other_3157;
    let _e369: MultiVector = other_3157;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e115.g0_ * vec4(_e117.g0_.x)), ((vec3(_e122.g0_.w) * vec3<f32>(_e126.g1_.x, _e129.g1_.y, _e132.g1_.z)) + ((vec3<f32>(_e137.g0_.x, _e140.g0_.y, _e143.g0_.z) * vec3(_e147.g1_.w)) * vec3(-1.0))), ((((vec3(_e156.g0_.y) * vec3<f32>(_e160.g1_.z, _e163.g1_.z, _e166.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g0_.z) * vec3<f32>(_e180.g1_.y, _e183.g1_.x, _e186.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g0_.x) * vec3<f32>(_e201.g1_.x, _e204.g1_.z, _e207.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((vec4(_e218.g0_.y) * vec4<f32>(_e222.g2_.z, _e225.g2_.z, _e228.g2_.x, _e231.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e242.g0_.z) * vec4<f32>(_e246.g2_.y, _e249.g2_.x, _e252.g2_.y, _e255.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e267.g0_.w) * vec4<f32>(_e271.g3_.x, _e274.g3_.y, _e277.g3_.z, _e280.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e292.g1_.x) * vec4(_e296.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e308.g1_.y) * vec4(_e312.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e324.g1_.z) * vec4(_e328.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e340.g1_.w) * vec4(_e344.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e356.g0_.x) * vec4<f32>(_e360.g2_.x, _e363.g2_.z, _e366.g2_.y, _e369.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_multi_vector_join(self_3482: Flector, other_3158: MultiVector) -> MultiVector {
    var self_3483: Flector;
    var other_3159: MultiVector;

    self_3483 = self_3482;
    other_3159 = other_3158;
    let _e4: Flector = self_3483;
    let _e8: MultiVector = other_3159;
    let _e17: Flector = self_3483;
    let _e21: MultiVector = other_3159;
    let _e31: Flector = self_3483;
    let _e35: MultiVector = other_3159;
    let _e45: Flector = self_3483;
    let _e49: MultiVector = other_3159;
    let _e59: Flector = self_3483;
    let _e63: MultiVector = other_3159;
    let _e73: Flector = self_3483;
    let _e77: MultiVector = other_3159;
    let _e87: Flector = self_3483;
    let _e91: MultiVector = other_3159;
    let _e101: Flector = self_3483;
    let _e105: MultiVector = other_3159;
    let _e115: Flector = self_3483;
    let _e117: MultiVector = other_3159;
    let _e122: Flector = self_3483;
    let _e126: MultiVector = other_3159;
    let _e129: MultiVector = other_3159;
    let _e132: MultiVector = other_3159;
    let _e137: Flector = self_3483;
    let _e140: Flector = self_3483;
    let _e143: Flector = self_3483;
    let _e147: MultiVector = other_3159;
    let _e156: Flector = self_3483;
    let _e160: MultiVector = other_3159;
    let _e163: MultiVector = other_3159;
    let _e166: MultiVector = other_3159;
    let _e176: Flector = self_3483;
    let _e180: MultiVector = other_3159;
    let _e183: MultiVector = other_3159;
    let _e186: MultiVector = other_3159;
    let _e197: Flector = self_3483;
    let _e201: MultiVector = other_3159;
    let _e204: MultiVector = other_3159;
    let _e207: MultiVector = other_3159;
    let _e218: Flector = self_3483;
    let _e222: MultiVector = other_3159;
    let _e225: MultiVector = other_3159;
    let _e228: MultiVector = other_3159;
    let _e231: MultiVector = other_3159;
    let _e242: Flector = self_3483;
    let _e246: MultiVector = other_3159;
    let _e249: MultiVector = other_3159;
    let _e252: MultiVector = other_3159;
    let _e255: MultiVector = other_3159;
    let _e267: Flector = self_3483;
    let _e271: MultiVector = other_3159;
    let _e274: MultiVector = other_3159;
    let _e277: MultiVector = other_3159;
    let _e280: MultiVector = other_3159;
    let _e292: Flector = self_3483;
    let _e296: MultiVector = other_3159;
    let _e308: Flector = self_3483;
    let _e312: MultiVector = other_3159;
    let _e324: Flector = self_3483;
    let _e328: MultiVector = other_3159;
    let _e340: Flector = self_3483;
    let _e344: MultiVector = other_3159;
    let _e356: Flector = self_3483;
    let _e360: MultiVector = other_3159;
    let _e363: MultiVector = other_3159;
    let _e366: MultiVector = other_3159;
    let _e369: MultiVector = other_3159;
    return MultiVector((((((((((vec2(_e4.g0_.y) * vec2(_e8.g4_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g0_.w) * vec2(_e35.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g1_.y) * vec2(_e63.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g1_.z) * vec2(_e77.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g1_.w) * vec2(_e91.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g0_.x) * vec2(_e105.g4_.x)) * vec2<f32>(0.0, 1.0))), (_e115.g0_ * vec4(_e117.g0_.x)), ((vec3(_e122.g0_.w) * vec3<f32>(_e126.g1_.x, _e129.g1_.y, _e132.g1_.z)) + ((vec3<f32>(_e137.g0_.x, _e140.g0_.y, _e143.g0_.z) * vec3(_e147.g1_.w)) * vec3(-1.0))), ((((vec3(_e156.g0_.y) * vec3<f32>(_e160.g1_.z, _e163.g1_.z, _e166.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g0_.z) * vec3<f32>(_e180.g1_.y, _e183.g1_.x, _e186.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g0_.x) * vec3<f32>(_e201.g1_.x, _e204.g1_.z, _e207.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((vec4(_e218.g0_.y) * vec4<f32>(_e222.g2_.z, _e225.g2_.z, _e228.g2_.x, _e231.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e242.g0_.z) * vec4<f32>(_e246.g2_.y, _e249.g2_.x, _e252.g2_.y, _e255.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e267.g0_.w) * vec4<f32>(_e271.g3_.x, _e274.g3_.y, _e277.g3_.z, _e280.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e292.g1_.x) * vec4(_e296.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e308.g1_.y) * vec4(_e312.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e324.g1_.z) * vec4(_e328.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e340.g1_.w) * vec4(_e344.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e356.g0_.x) * vec4<f32>(_e360.g2_.x, _e363.g2_.z, _e366.g2_.y, _e369.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn flector_multi_vector_inner_product(self_3484: Flector, other_3160: MultiVector) -> MultiVector {
    var self_3485: Flector;
    var other_3161: MultiVector;

    self_3485 = self_3484;
    other_3161 = other_3160;
    let _e4: Flector = self_3485;
    let _e8: MultiVector = other_3161;
    let _e17: Flector = self_3485;
    let _e21: MultiVector = other_3161;
    let _e31: Flector = self_3485;
    let _e35: MultiVector = other_3161;
    let _e45: Flector = self_3485;
    let _e49: MultiVector = other_3161;
    let _e59: Flector = self_3485;
    let _e63: MultiVector = other_3161;
    let _e66: MultiVector = other_3161;
    let _e69: MultiVector = other_3161;
    let _e72: MultiVector = other_3161;
    let _e83: Flector = self_3485;
    let _e87: MultiVector = other_3161;
    let _e90: MultiVector = other_3161;
    let _e93: MultiVector = other_3161;
    let _e96: MultiVector = other_3161;
    let _e108: Flector = self_3485;
    let _e112: MultiVector = other_3161;
    let _e115: MultiVector = other_3161;
    let _e118: MultiVector = other_3161;
    let _e121: MultiVector = other_3161;
    let _e133: Flector = self_3485;
    let _e137: MultiVector = other_3161;
    let _e149: Flector = self_3485;
    let _e153: MultiVector = other_3161;
    let _e165: Flector = self_3485;
    let _e169: MultiVector = other_3161;
    let _e181: Flector = self_3485;
    let _e185: MultiVector = other_3161;
    let _e188: MultiVector = other_3161;
    let _e191: MultiVector = other_3161;
    let _e194: MultiVector = other_3161;
    let _e200: Flector = self_3485;
    let _e203: MultiVector = other_3161;
    let _e215: Flector = self_3485;
    let _e219: MultiVector = other_3161;
    let _e222: MultiVector = other_3161;
    let _e225: MultiVector = other_3161;
    let _e235: Flector = self_3485;
    let _e239: MultiVector = other_3161;
    let _e242: MultiVector = other_3161;
    let _e245: MultiVector = other_3161;
    let _e256: Flector = self_3485;
    let _e260: MultiVector = other_3161;
    let _e263: MultiVector = other_3161;
    let _e266: MultiVector = other_3161;
    let _e277: Flector = self_3485;
    let _e281: MultiVector = other_3161;
    let _e284: MultiVector = other_3161;
    let _e287: MultiVector = other_3161;
    let _e298: Flector = self_3485;
    let _e302: MultiVector = other_3161;
    let _e305: MultiVector = other_3161;
    let _e308: MultiVector = other_3161;
    let _e319: Flector = self_3485;
    let _e323: MultiVector = other_3161;
    let _e326: MultiVector = other_3161;
    let _e329: MultiVector = other_3161;
    let _e342: Flector = self_3485;
    let _e346: MultiVector = other_3161;
    let _e349: MultiVector = other_3161;
    let _e352: MultiVector = other_3161;
    let _e358: Flector = self_3485;
    let _e361: Flector = self_3485;
    let _e364: Flector = self_3485;
    let _e368: MultiVector = other_3161;
    let _e377: Flector = self_3485;
    let _e381: MultiVector = other_3161;
    let _e392: Flector = self_3485;
    let _e396: MultiVector = other_3161;
    let _e408: Flector = self_3485;
    let _e412: MultiVector = other_3161;
    let _e424: Flector = self_3485;
    let _e427: Flector = self_3485;
    let _e430: Flector = self_3485;
    let _e433: Flector = self_3485;
    let _e437: MultiVector = other_3161;
    let _e440: MultiVector = other_3161;
    let _e443: MultiVector = other_3161;
    let _e446: MultiVector = other_3161;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g4_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(1.0, 0.0))), (((((((((vec4(_e59.g0_.x) * vec4<f32>(_e63.g0_.x, _e66.g3_.z, _e69.g3_.y, _e72.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e83.g0_.y) * vec4<f32>(_e87.g3_.z, _e90.g0_.x, _e93.g3_.x, _e96.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e108.g0_.z) * vec4<f32>(_e112.g3_.y, _e115.g3_.x, _e118.g0_.x, _e121.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e133.g1_.x) * vec4(_e137.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e149.g1_.y) * vec4(_e153.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e165.g1_.z) * vec4(_e169.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e181.g1_.w) * vec4<f32>(_e185.g3_.x, _e188.g3_.y, _e191.g3_.z, _e194.g0_.y))) + ((_e200.g0_.xxxw * vec4(_e203.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec3(_e215.g0_.y) * vec3<f32>(_e219.g4_.z, _e222.g4_.z, _e225.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e235.g0_.z) * vec3<f32>(_e239.g4_.y, _e242.g4_.x, _e245.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e256.g1_.x) * vec3<f32>(_e260.g1_.z, _e263.g1_.z, _e266.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e277.g1_.y) * vec3<f32>(_e281.g1_.z, _e284.g1_.z, _e287.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e298.g1_.z) * vec3<f32>(_e302.g1_.y, _e305.g1_.x, _e308.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e319.g0_.x) * vec3<f32>(_e323.g4_.x, _e326.g4_.z, _e329.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3(0.0) - (vec3(_e342.g1_.w) * vec3<f32>(_e346.g1_.x, _e349.g1_.y, _e352.g1_.z))) + ((vec3<f32>(_e358.g0_.x, _e361.g0_.y, _e364.g0_.z) * vec3(_e368.g4_.w)) * vec3(-1.0))), (((((vec4(_e377.g1_.x) * vec4(_e381.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e392.g1_.y) * vec4(_e396.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e408.g1_.z) * vec4(_e412.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e424.g0_.x, _e427.g0_.y, _e430.g0_.z, _e433.g1_.w) * vec4<f32>(_e437.g0_.y, _e440.g0_.y, _e443.g0_.y, _e446.g0_.x))));
}

fn flector_multi_vector_inner_anti_product(self_3486: Flector, other_3162: MultiVector) -> MultiVector {
    var self_3487: Flector;
    var other_3163: MultiVector;

    self_3487 = self_3486;
    other_3163 = other_3162;
    let _e4: Flector = self_3487;
    let _e8: MultiVector = other_3163;
    let _e17: Flector = self_3487;
    let _e21: MultiVector = other_3163;
    let _e31: Flector = self_3487;
    let _e35: MultiVector = other_3163;
    let _e45: Flector = self_3487;
    let _e48: Flector = self_3487;
    let _e52: MultiVector = other_3163;
    let _e55: MultiVector = other_3163;
    let _e65: Flector = self_3487;
    let _e69: MultiVector = other_3163;
    let _e80: Flector = self_3487;
    let _e84: MultiVector = other_3163;
    let _e96: Flector = self_3487;
    let _e100: MultiVector = other_3163;
    let _e112: Flector = self_3487;
    let _e114: MultiVector = other_3163;
    let _e122: Flector = self_3487;
    let _e126: MultiVector = other_3163;
    let _e129: MultiVector = other_3163;
    let _e132: MultiVector = other_3163;
    let _e138: Flector = self_3487;
    let _e141: Flector = self_3487;
    let _e144: Flector = self_3487;
    let _e148: MultiVector = other_3163;
    let _e157: Flector = self_3487;
    let _e161: MultiVector = other_3163;
    let _e164: MultiVector = other_3163;
    let _e167: MultiVector = other_3163;
    let _e177: Flector = self_3487;
    let _e181: MultiVector = other_3163;
    let _e184: MultiVector = other_3163;
    let _e187: MultiVector = other_3163;
    let _e198: Flector = self_3487;
    let _e202: MultiVector = other_3163;
    let _e205: MultiVector = other_3163;
    let _e208: MultiVector = other_3163;
    let _e219: Flector = self_3487;
    let _e223: MultiVector = other_3163;
    let _e226: MultiVector = other_3163;
    let _e229: MultiVector = other_3163;
    let _e240: Flector = self_3487;
    let _e244: MultiVector = other_3163;
    let _e247: MultiVector = other_3163;
    let _e250: MultiVector = other_3163;
    let _e261: Flector = self_3487;
    let _e265: MultiVector = other_3163;
    let _e268: MultiVector = other_3163;
    let _e271: MultiVector = other_3163;
    let _e282: Flector = self_3487;
    let _e286: MultiVector = other_3163;
    let _e297: Flector = self_3487;
    let _e301: MultiVector = other_3163;
    let _e313: Flector = self_3487;
    let _e317: MultiVector = other_3163;
    let _e320: MultiVector = other_3163;
    let _e323: MultiVector = other_3163;
    let _e326: MultiVector = other_3163;
    let _e338: Flector = self_3487;
    let _e342: MultiVector = other_3163;
    let _e345: MultiVector = other_3163;
    let _e348: MultiVector = other_3163;
    let _e351: MultiVector = other_3163;
    let _e363: Flector = self_3487;
    let _e367: MultiVector = other_3163;
    let _e370: MultiVector = other_3163;
    let _e373: MultiVector = other_3163;
    let _e376: MultiVector = other_3163;
    let _e388: Flector = self_3487;
    let _e392: MultiVector = other_3163;
    let _e395: MultiVector = other_3163;
    let _e398: MultiVector = other_3163;
    let _e401: MultiVector = other_3163;
    let _e413: Flector = self_3487;
    let _e417: MultiVector = other_3163;
    let _e429: Flector = self_3487;
    let _e433: MultiVector = other_3163;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g4_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g1_.x, _e55.g1_.w)) * vec2<f32>(0.0, -1.0))), (((((vec4(_e65.g1_.x) * vec4(_e69.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0)) + ((vec4(_e80.g1_.y) * vec4(_e84.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e96.g1_.z) * vec4(_e100.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + (_e112.g0_ * vec4(_e114.g0_.y))), ((vec3(0.0) - (vec3(_e122.g0_.w) * vec3<f32>(_e126.g4_.x, _e129.g4_.y, _e132.g4_.z))) + ((vec3<f32>(_e138.g1_.x, _e141.g1_.y, _e144.g1_.z) * vec3(_e148.g1_.w)) * vec3(-1.0))), (((((((vec3(_e157.g0_.y) * vec3<f32>(_e161.g4_.z, _e164.g4_.z, _e167.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e177.g0_.z) * vec3<f32>(_e181.g4_.y, _e184.g4_.x, _e187.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e198.g1_.x) * vec3<f32>(_e202.g1_.z, _e205.g1_.z, _e208.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e219.g1_.y) * vec3<f32>(_e223.g1_.z, _e226.g1_.z, _e229.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e240.g1_.z) * vec3<f32>(_e244.g1_.y, _e247.g1_.x, _e250.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e261.g0_.x) * vec3<f32>(_e265.g4_.x, _e268.g4_.z, _e271.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (((((((((vec4(_e282.g0_.y) * vec4(_e286.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e297.g0_.z) * vec4(_e301.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e313.g0_.w) * vec4<f32>(_e317.g2_.x, _e320.g2_.y, _e323.g2_.z, _e326.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e338.g1_.x) * vec4<f32>(_e342.g0_.y, _e345.g2_.z, _e348.g2_.y, _e351.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e363.g1_.y) * vec4<f32>(_e367.g2_.z, _e370.g0_.y, _e373.g2_.x, _e376.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e388.g1_.z) * vec4<f32>(_e392.g2_.y, _e395.g2_.x, _e398.g0_.y, _e401.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e413.g1_.w) * vec4(_e417.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e429.g0_.x) * vec4(_e433.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn flector_multi_vector_left_contraction(self_3488: Flector, other_3164: MultiVector) -> MultiVector {
    var self_3489: Flector;
    var other_3165: MultiVector;

    self_3489 = self_3488;
    other_3165 = other_3164;
    let _e4: Flector = self_3489;
    let _e8: MultiVector = other_3165;
    let _e17: Flector = self_3489;
    let _e21: MultiVector = other_3165;
    let _e31: Flector = self_3489;
    let _e35: MultiVector = other_3165;
    let _e45: Flector = self_3489;
    let _e49: MultiVector = other_3165;
    let _e59: Flector = self_3489;
    let _e63: MultiVector = other_3165;
    let _e66: MultiVector = other_3165;
    let _e69: MultiVector = other_3165;
    let _e72: MultiVector = other_3165;
    let _e83: Flector = self_3489;
    let _e87: MultiVector = other_3165;
    let _e90: MultiVector = other_3165;
    let _e93: MultiVector = other_3165;
    let _e96: MultiVector = other_3165;
    let _e108: Flector = self_3489;
    let _e112: MultiVector = other_3165;
    let _e124: Flector = self_3489;
    let _e128: MultiVector = other_3165;
    let _e131: MultiVector = other_3165;
    let _e134: MultiVector = other_3165;
    let _e137: MultiVector = other_3165;
    let _e149: Flector = self_3489;
    let _e153: MultiVector = other_3165;
    let _e156: MultiVector = other_3165;
    let _e159: MultiVector = other_3165;
    let _e169: Flector = self_3489;
    let _e173: MultiVector = other_3165;
    let _e176: MultiVector = other_3165;
    let _e179: MultiVector = other_3165;
    let _e190: Flector = self_3489;
    let _e194: MultiVector = other_3165;
    let _e197: MultiVector = other_3165;
    let _e200: MultiVector = other_3165;
    let _e211: Flector = self_3489;
    let _e214: Flector = self_3489;
    let _e217: Flector = self_3489;
    let _e221: MultiVector = other_3165;
    let _e229: Flector = self_3489;
    let _e232: MultiVector = other_3165;
    let _e235: MultiVector = other_3165;
    let _e238: MultiVector = other_3165;
    let _e241: MultiVector = other_3165;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g4_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(1.0, 0.0))), (((((vec4(_e59.g0_.y) * vec4<f32>(_e63.g3_.z, _e66.g3_.z, _e69.g3_.x, _e72.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e83.g0_.z) * vec4<f32>(_e87.g3_.y, _e90.g3_.x, _e93.g3_.y, _e96.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e108.g1_.w) * vec4(_e112.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e124.g0_.x) * vec4<f32>(_e128.g3_.x, _e131.g3_.z, _e134.g3_.y, _e137.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((vec3(_e149.g0_.y) * vec3<f32>(_e153.g4_.z, _e156.g4_.z, _e159.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e169.g0_.z) * vec3<f32>(_e173.g4_.y, _e176.g4_.x, _e179.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e190.g0_.x) * vec3<f32>(_e194.g4_.x, _e197.g4_.z, _e200.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e211.g0_.x, _e214.g0_.y, _e217.g0_.z) * vec3(_e221.g4_.w)) * vec3(-1.0)), ((_e229.g0_.xyzx * vec4<f32>(_e232.g0_.y, _e235.g0_.y, _e238.g0_.y, _e241.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn flector_multi_vector_right_contraction(self_3490: Flector, other_3166: MultiVector) -> MultiVector {
    var self_3491: Flector;
    var other_3167: MultiVector;

    self_3491 = self_3490;
    other_3167 = other_3166;
    let _e4: Flector = self_3491;
    let _e8: MultiVector = other_3167;
    let _e17: Flector = self_3491;
    let _e21: MultiVector = other_3167;
    let _e31: Flector = self_3491;
    let _e35: MultiVector = other_3167;
    let _e45: Flector = self_3491;
    let _e49: MultiVector = other_3167;
    let _e59: Flector = self_3491;
    let _e63: MultiVector = other_3167;
    let _e74: Flector = self_3491;
    let _e78: MultiVector = other_3167;
    let _e90: Flector = self_3491;
    let _e94: MultiVector = other_3167;
    let _e106: Flector = self_3491;
    let _e110: MultiVector = other_3167;
    let _e113: MultiVector = other_3167;
    let _e116: MultiVector = other_3167;
    let _e119: MultiVector = other_3167;
    let _e131: Flector = self_3491;
    let _e133: MultiVector = other_3167;
    let _e139: Flector = self_3491;
    let _e143: MultiVector = other_3167;
    let _e146: MultiVector = other_3167;
    let _e149: MultiVector = other_3167;
    let _e159: Flector = self_3491;
    let _e163: MultiVector = other_3167;
    let _e166: MultiVector = other_3167;
    let _e169: MultiVector = other_3167;
    let _e180: Flector = self_3491;
    let _e184: MultiVector = other_3167;
    let _e187: MultiVector = other_3167;
    let _e190: MultiVector = other_3167;
    let _e203: Flector = self_3491;
    let _e207: MultiVector = other_3167;
    let _e210: MultiVector = other_3167;
    let _e213: MultiVector = other_3167;
    let _e219: Flector = self_3491;
    let _e221: MultiVector = other_3167;
    return MultiVector((((((vec2(_e4.g0_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g0_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g4_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2(_e49.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e59.g1_.x) * vec4(_e63.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e74.g1_.y) * vec4(_e78.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e90.g1_.z) * vec4(_e94.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e106.g1_.w) * vec4<f32>(_e110.g3_.x, _e113.g3_.y, _e116.g3_.z, _e119.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e131.g0_ * vec4(_e133.g0_.x))), ((((vec3(_e139.g1_.y) * vec3<f32>(_e143.g1_.z, _e146.g1_.z, _e149.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e159.g1_.z) * vec3<f32>(_e163.g1_.y, _e166.g1_.x, _e169.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e180.g1_.x) * vec3<f32>(_e184.g1_.x, _e187.g1_.z, _e190.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e203.g1_.w) * vec3<f32>(_e207.g1_.x, _e210.g1_.y, _e213.g1_.z))), (_e219.g1_ * vec4(_e221.g0_.x)));
}

fn flector_multi_vector_left_anti_contraction(self_3492: Flector, other_3168: MultiVector) -> MultiVector {
    var self_3493: Flector;
    var other_3169: MultiVector;

    self_3493 = self_3492;
    other_3169 = other_3168;
    let _e4: Flector = self_3493;
    let _e8: MultiVector = other_3169;
    let _e17: Flector = self_3493;
    let _e21: MultiVector = other_3169;
    let _e31: Flector = self_3493;
    let _e35: MultiVector = other_3169;
    let _e45: Flector = self_3493;
    let _e48: Flector = self_3493;
    let _e52: MultiVector = other_3169;
    let _e55: MultiVector = other_3169;
    let _e65: Flector = self_3493;
    let _e68: MultiVector = other_3169;
    let _e79: Flector = self_3493;
    let _e82: Flector = self_3493;
    let _e85: Flector = self_3493;
    let _e89: MultiVector = other_3169;
    let _e97: Flector = self_3493;
    let _e101: MultiVector = other_3169;
    let _e104: MultiVector = other_3169;
    let _e107: MultiVector = other_3169;
    let _e117: Flector = self_3493;
    let _e121: MultiVector = other_3169;
    let _e124: MultiVector = other_3169;
    let _e127: MultiVector = other_3169;
    let _e138: Flector = self_3493;
    let _e142: MultiVector = other_3169;
    let _e145: MultiVector = other_3169;
    let _e148: MultiVector = other_3169;
    let _e159: Flector = self_3493;
    let _e163: MultiVector = other_3169;
    let _e166: MultiVector = other_3169;
    let _e169: MultiVector = other_3169;
    let _e172: MultiVector = other_3169;
    let _e183: Flector = self_3493;
    let _e187: MultiVector = other_3169;
    let _e190: MultiVector = other_3169;
    let _e193: MultiVector = other_3169;
    let _e196: MultiVector = other_3169;
    let _e208: Flector = self_3493;
    let _e212: MultiVector = other_3169;
    let _e215: MultiVector = other_3169;
    let _e218: MultiVector = other_3169;
    let _e221: MultiVector = other_3169;
    let _e233: Flector = self_3493;
    let _e236: MultiVector = other_3169;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g4_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g1_.x, _e55.g1_.w)) * vec2<f32>(0.0, -1.0))), ((_e65.g1_.xyzx * vec4(_e68.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), ((vec3<f32>(_e79.g1_.x, _e82.g1_.y, _e85.g1_.z) * vec3(_e89.g1_.w)) * vec3(-1.0)), ((((vec3(_e97.g1_.y) * vec3<f32>(_e101.g1_.z, _e104.g1_.z, _e107.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e117.g1_.z) * vec3<f32>(_e121.g1_.y, _e124.g1_.x, _e127.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e138.g1_.x) * vec3<f32>(_e142.g1_.x, _e145.g1_.z, _e148.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e159.g1_.x) * vec4<f32>(_e163.g2_.z, _e166.g2_.z, _e169.g2_.y, _e172.g3_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0)) + ((vec4(_e183.g1_.y) * vec4<f32>(_e187.g2_.z, _e190.g2_.z, _e193.g2_.x, _e196.g3_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e208.g1_.z) * vec4<f32>(_e212.g2_.y, _e215.g2_.x, _e218.g2_.y, _e221.g3_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e233.g0_.xxxw * vec4(_e236.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn flector_multi_vector_right_anti_contraction(self_3494: Flector, other_3170: MultiVector) -> MultiVector {
    var self_3495: Flector;
    var other_3171: MultiVector;

    self_3495 = self_3494;
    other_3171 = other_3170;
    let _e4: Flector = self_3495;
    let _e8: MultiVector = other_3171;
    let _e17: Flector = self_3495;
    let _e21: MultiVector = other_3171;
    let _e31: Flector = self_3495;
    let _e35: MultiVector = other_3171;
    let _e45: Flector = self_3495;
    let _e48: Flector = self_3495;
    let _e52: MultiVector = other_3171;
    let _e55: MultiVector = other_3171;
    let _e65: Flector = self_3495;
    let _e67: MultiVector = other_3171;
    let _e74: Flector = self_3495;
    let _e78: MultiVector = other_3171;
    let _e81: MultiVector = other_3171;
    let _e84: MultiVector = other_3171;
    let _e90: Flector = self_3495;
    let _e94: MultiVector = other_3171;
    let _e97: MultiVector = other_3171;
    let _e100: MultiVector = other_3171;
    let _e110: Flector = self_3495;
    let _e114: MultiVector = other_3171;
    let _e117: MultiVector = other_3171;
    let _e120: MultiVector = other_3171;
    let _e131: Flector = self_3495;
    let _e135: MultiVector = other_3171;
    let _e138: MultiVector = other_3171;
    let _e141: MultiVector = other_3171;
    let _e152: Flector = self_3495;
    let _e156: MultiVector = other_3171;
    let _e167: Flector = self_3495;
    let _e171: MultiVector = other_3171;
    let _e183: Flector = self_3495;
    let _e187: MultiVector = other_3171;
    let _e199: Flector = self_3495;
    let _e203: MultiVector = other_3171;
    let _e215: Flector = self_3495;
    let _e219: MultiVector = other_3171;
    let _e231: Flector = self_3495;
    let _e235: MultiVector = other_3171;
    let _e247: Flector = self_3495;
    let _e250: MultiVector = other_3171;
    let _e253: MultiVector = other_3171;
    let _e256: MultiVector = other_3171;
    let _e259: MultiVector = other_3171;
    return MultiVector((((((vec2(_e4.g1_.x) * vec2(_e8.g4_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g1_.x, _e55.g1_.w)) * vec2<f32>(0.0, -1.0))), (_e65.g0_ * vec4(_e67.g0_.y)), (vec3(0.0) - (vec3(_e74.g0_.w) * vec3<f32>(_e78.g4_.x, _e81.g4_.y, _e84.g4_.z))), ((((vec3(_e90.g0_.y) * vec3<f32>(_e94.g4_.z, _e97.g4_.z, _e100.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e110.g0_.z) * vec3<f32>(_e114.g4_.y, _e117.g4_.x, _e120.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e131.g0_.x) * vec3<f32>(_e135.g4_.x, _e138.g4_.z, _e141.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((((vec4(_e152.g0_.y) * vec4(_e156.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e167.g0_.z) * vec4(_e171.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e183.g1_.x) * vec4(_e187.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e199.g1_.y) * vec4(_e203.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e215.g1_.z) * vec4(_e219.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e231.g1_.w) * vec4(_e235.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e247.g0_.wwwx * vec4<f32>(_e250.g2_.x, _e253.g2_.y, _e256.g2_.z, _e259.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn flector_multi_vector_scalar_product(self_3496: Flector, other_3172: MultiVector) -> Scalar {
    var self_3497: Flector;
    var other_3173: MultiVector;

    self_3497 = self_3496;
    other_3173 = other_3172;
    let _e4: Flector = self_3497;
    let _e7: MultiVector = other_3173;
    let _e11: Flector = self_3497;
    let _e14: MultiVector = other_3173;
    let _e19: Flector = self_3497;
    let _e22: MultiVector = other_3173;
    let _e27: Flector = self_3497;
    let _e30: MultiVector = other_3173;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) - (_e27.g1_.w * _e30.g4_.w)));
}

fn flector_multi_vector_dot(self_3498: Flector, other_3174: MultiVector) -> Scalar {
    var self_3499: Flector;
    var other_3175: MultiVector;

    self_3499 = self_3498;
    other_3175 = other_3174;
    let _e4: Flector = self_3499;
    let _e7: MultiVector = other_3175;
    let _e11: Flector = self_3499;
    let _e14: MultiVector = other_3175;
    let _e19: Flector = self_3499;
    let _e22: MultiVector = other_3175;
    let _e27: Flector = self_3499;
    let _e30: MultiVector = other_3175;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) - (_e27.g1_.w * _e30.g4_.w)));
}

fn flector_multi_vector_anti_scalar_product(self_3500: Flector, other_3176: MultiVector) -> AntiScalar {
    var self_3501: Flector;
    var other_3177: MultiVector;

    self_3501 = self_3500;
    other_3177 = other_3176;
    let _e5: Flector = self_3501;
    let _e8: MultiVector = other_3177;
    let _e13: Flector = self_3501;
    let _e16: MultiVector = other_3177;
    let _e21: Flector = self_3501;
    let _e24: MultiVector = other_3177;
    let _e29: Flector = self_3501;
    let _e32: MultiVector = other_3177;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g1_.w)) + (_e13.g1_.x * _e16.g4_.x)) + (_e21.g1_.y * _e24.g4_.y)) + (_e29.g1_.z * _e32.g4_.z)));
}

fn flector_multi_vector_anti_dot(self_3502: Flector, other_3178: MultiVector) -> AntiScalar {
    var self_3503: Flector;
    var other_3179: MultiVector;

    self_3503 = self_3502;
    other_3179 = other_3178;
    let _e5: Flector = self_3503;
    let _e8: MultiVector = other_3179;
    let _e13: Flector = self_3503;
    let _e16: MultiVector = other_3179;
    let _e21: Flector = self_3503;
    let _e24: MultiVector = other_3179;
    let _e29: Flector = self_3503;
    let _e32: MultiVector = other_3179;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g1_.w)) + (_e13.g1_.x * _e16.g4_.x)) + (_e21.g1_.y * _e24.g4_.y)) + (_e29.g1_.z * _e32.g4_.z)));
}

fn flector_squared_magnitude(self_3504: Flector) -> Scalar {
    var self_3505: Flector;

    self_3505 = self_3504;
    let _e2: Flector = self_3505;
    let _e3: Flector = self_3505;
    let _e4: Flector = flector_reversal(_e3);
    let _e5: Scalar = flector_flector_scalar_product(_e2, _e4);
    return _e5;
}

fn flector_magnitude(self_3506: Flector) -> Scalar {
    var self_3507: Flector;

    self_3507 = self_3506;
    let _e2: Flector = self_3507;
    let _e3: Scalar = flector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn flector_bulk_norm(self_3508: Flector) -> Scalar {
    var self_3509: Flector;

    self_3509 = self_3508;
    let _e2: Flector = self_3509;
    let _e3: Scalar = flector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn flector_squared_anti_magnitude(self_3510: Flector) -> AntiScalar {
    var self_3511: Flector;

    self_3511 = self_3510;
    let _e2: Flector = self_3511;
    let _e3: Flector = self_3511;
    let _e4: Flector = flector_anti_reversal(_e3);
    let _e5: AntiScalar = flector_flector_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn flector_weight_norm(self_3512: Flector) -> AntiScalar {
    var self_3513: Flector;

    self_3513 = self_3512;
    let _e2: Flector = self_3513;
    let _e3: AntiScalar = flector_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn flector_geometric_norm(self_3514: Flector) -> HomogeneousMagnitude {
    var self_3515: Flector;

    self_3515 = self_3514;
    let _e2: Flector = self_3515;
    let _e3: Scalar = flector_bulk_norm(_e2);
    let _e4: Flector = self_3515;
    let _e5: AntiScalar = flector_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn flector_scale(self_3516: Flector, other_3180: f32) -> Flector {
    var self_3517: Flector;
    var other_3181: f32;

    self_3517 = self_3516;
    other_3181 = other_3180;
    let _e4: Flector = self_3517;
    let _e5: f32 = other_3181;
    let _e7: Flector = flector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn flector_signum(self_3518: Flector) -> Flector {
    var self_3519: Flector;

    self_3519 = self_3518;
    let _e2: Flector = self_3519;
    let _e3: Flector = self_3519;
    let _e4: Scalar = flector_magnitude(_e3);
    let _e9: Flector = flector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn flector_inverse(self_3520: Flector) -> Flector {
    var self_3521: Flector;

    self_3521 = self_3520;
    let _e2: Flector = self_3521;
    let _e3: Flector = flector_reversal(_e2);
    let _e4: Flector = self_3521;
    let _e5: Scalar = flector_squared_magnitude(_e4);
    let _e10: Flector = flector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn flector_unitize(self_3522: Flector) -> Flector {
    var self_3523: Flector;

    self_3523 = self_3522;
    let _e2: Flector = self_3523;
    let _e3: Flector = self_3523;
    let _e4: AntiScalar = flector_weight_norm(_e3);
    let _e9: Flector = flector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn flector_attitude(self_3524: Flector) -> MultiVector {
    var self_3525: Flector;

    self_3525 = self_3524;
    let _e2: Flector = self_3525;
    let _e9: MultiVector = flector_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn multi_vector_zero() -> MultiVector {
    return MultiVector(vec2(0.0), vec4(0.0), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_one() -> MultiVector {
    return MultiVector(vec2<f32>(1.0, 0.0), vec4(0.0), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_neg(self_3526: MultiVector) -> MultiVector {
    var self_3527: MultiVector;

    self_3527 = self_3526;
    let _e2: MultiVector = self_3527;
    let _e7: MultiVector = self_3527;
    let _e12: MultiVector = self_3527;
    let _e17: MultiVector = self_3527;
    let _e22: MultiVector = self_3527;
    return MultiVector((_e2.g0_ * vec2(-1.0)), (_e7.g1_ * vec4(-1.0)), (_e12.g2_ * vec3(-1.0)), (_e17.g3_ * vec3(-1.0)), (_e22.g4_ * vec4(-1.0)));
}

fn multi_vector_automorphism(self_3528: MultiVector) -> MultiVector {
    var self_3529: MultiVector;

    self_3529 = self_3528;
    let _e2: MultiVector = self_3529;
    let _e4: MultiVector = self_3529;
    let _e9: MultiVector = self_3529;
    let _e11: MultiVector = self_3529;
    let _e13: MultiVector = self_3529;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4(-1.0)), _e9.g2_, _e11.g3_, (_e13.g4_ * vec4(-1.0)));
}

fn multi_vector_reversal(self_3530: MultiVector) -> MultiVector {
    var self_3531: MultiVector;

    self_3531 = self_3530;
    let _e2: MultiVector = self_3531;
    let _e4: MultiVector = self_3531;
    let _e6: MultiVector = self_3531;
    let _e11: MultiVector = self_3531;
    let _e16: MultiVector = self_3531;
    return MultiVector(_e2.g0_, _e4.g1_, (_e6.g2_ * vec3(-1.0)), (_e11.g3_ * vec3(-1.0)), (_e16.g4_ * vec4(-1.0)));
}

fn multi_vector_conjugation(self_3532: MultiVector) -> MultiVector {
    var self_3533: MultiVector;

    self_3533 = self_3532;
    let _e2: MultiVector = self_3533;
    let _e4: MultiVector = self_3533;
    let _e9: MultiVector = self_3533;
    let _e14: MultiVector = self_3533;
    let _e19: MultiVector = self_3533;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4(-1.0)), (_e9.g2_ * vec3(-1.0)), (_e14.g3_ * vec3(-1.0)), _e19.g4_);
}

fn multi_vector_dual(self_3534: MultiVector) -> MultiVector {
    var self_3535: MultiVector;

    self_3535 = self_3534;
    let _e2: MultiVector = self_3535;
    let _e5: MultiVector = self_3535;
    let _e10: MultiVector = self_3535;
    let _e15: MultiVector = self_3535;
    let _e20: MultiVector = self_3535;
    return MultiVector(_e2.g0_.yx, (_e5.g4_ * vec4(-1.0)), (_e10.g3_ * vec3(-1.0)), (_e15.g2_ * vec3(-1.0)), _e20.g1_);
}

fn multi_vector_anti_reversal(self_3536: MultiVector) -> MultiVector {
    var self_3537: MultiVector;

    self_3537 = self_3536;
    let _e2: MultiVector = self_3537;
    let _e4: MultiVector = self_3537;
    let _e9: MultiVector = self_3537;
    let _e14: MultiVector = self_3537;
    let _e19: MultiVector = self_3537;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4(-1.0)), (_e9.g2_ * vec3(-1.0)), (_e14.g3_ * vec3(-1.0)), _e19.g4_);
}

fn multi_vector_right_complement(self_3538: MultiVector) -> MultiVector {
    var self_3539: MultiVector;

    self_3539 = self_3538;
    let _e2: MultiVector = self_3539;
    let _e5: MultiVector = self_3539;
    let _e10: MultiVector = self_3539;
    let _e15: MultiVector = self_3539;
    let _e20: MultiVector = self_3539;
    return MultiVector(_e2.g0_.yx, (_e5.g4_ * vec4(-1.0)), (_e10.g3_ * vec3(-1.0)), (_e15.g2_ * vec3(-1.0)), _e20.g1_);
}

fn multi_vector_left_complement(self_3540: MultiVector) -> MultiVector {
    var self_3541: MultiVector;

    self_3541 = self_3540;
    let _e2: MultiVector = self_3541;
    let _e5: MultiVector = self_3541;
    let _e7: MultiVector = self_3541;
    let _e12: MultiVector = self_3541;
    let _e17: MultiVector = self_3541;
    return MultiVector(_e2.g0_.yx, _e5.g4_, (_e7.g3_ * vec3(-1.0)), (_e12.g2_ * vec3(-1.0)), (_e17.g1_ * vec4(-1.0)));
}

fn multi_vector_double_complement(self_3542: MultiVector) -> MultiVector {
    var self_3543: MultiVector;

    self_3543 = self_3542;
    let _e2: MultiVector = self_3543;
    let _e4: MultiVector = self_3543;
    let _e9: MultiVector = self_3543;
    let _e11: MultiVector = self_3543;
    let _e13: MultiVector = self_3543;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4(-1.0)), _e9.g2_, _e11.g3_, (_e13.g4_ * vec4(-1.0)));
}

fn multi_vector_scalar_into(self_3544: MultiVector) -> Scalar {
    var self_3545: MultiVector;

    self_3545 = self_3544;
    let _e2: MultiVector = self_3545;
    return Scalar(_e2.g0_.x);
}

fn multi_vector_scalar_add(self_3546: MultiVector, other_3182: Scalar) -> MultiVector {
    var self_3547: MultiVector;
    var other_3183: Scalar;

    self_3547 = self_3546;
    other_3183 = other_3182;
    let _e4: MultiVector = self_3547;
    let _e6: Scalar = other_3183;
    let _e14: MultiVector = self_3547;
    let _e16: MultiVector = self_3547;
    let _e18: MultiVector = self_3547;
    let _e20: MultiVector = self_3547;
    return MultiVector((_e4.g0_ + (vec2(_e6.g0_) * vec2<f32>(1.0, 0.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_scalar_sub(self_3548: MultiVector, other_3184: Scalar) -> MultiVector {
    var self_3549: MultiVector;
    var other_3185: Scalar;

    self_3549 = self_3548;
    other_3185 = other_3184;
    let _e4: MultiVector = self_3549;
    let _e6: Scalar = other_3185;
    let _e14: MultiVector = self_3549;
    let _e16: MultiVector = self_3549;
    let _e18: MultiVector = self_3549;
    let _e20: MultiVector = self_3549;
    return MultiVector((_e4.g0_ - (vec2(_e6.g0_) * vec2<f32>(1.0, 0.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_scalar_geometric_product(self_3550: MultiVector, other_3186: Scalar) -> MultiVector {
    var self_3551: MultiVector;
    var other_3187: Scalar;

    self_3551 = self_3550;
    other_3187 = other_3186;
    let _e4: MultiVector = self_3551;
    let _e6: Scalar = other_3187;
    let _e10: MultiVector = self_3551;
    let _e12: Scalar = other_3187;
    let _e16: MultiVector = self_3551;
    let _e18: Scalar = other_3187;
    let _e22: MultiVector = self_3551;
    let _e24: Scalar = other_3187;
    let _e28: MultiVector = self_3551;
    let _e30: Scalar = other_3187;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_geometric_anti_product(self_3552: MultiVector, other_3188: Scalar) -> MultiVector {
    var self_3553: MultiVector;
    var other_3189: Scalar;

    self_3553 = self_3552;
    other_3189 = other_3188;
    let _e4: MultiVector = self_3553;
    let _e7: Scalar = other_3189;
    let _e15: MultiVector = self_3553;
    let _e18: Scalar = other_3189;
    let _e30: MultiVector = self_3553;
    let _e32: Scalar = other_3189;
    let _e36: MultiVector = self_3553;
    let _e39: Scalar = other_3189;
    return MultiVector(((_e4.g0_.yx * vec2(_e7.g0_)) * vec2<f32>(1.0, 0.0)), ((_e15.g4_.xyzx * vec4(_e18.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), vec3(0.0), (_e30.g2_ * vec3(_e32.g0_)), ((_e36.g1_.xxxw * vec4(_e39.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn multi_vector_scalar_regressive_product(self_3554: MultiVector, other_3190: Scalar) -> Scalar {
    var self_3555: MultiVector;
    var other_3191: Scalar;

    self_3555 = self_3554;
    other_3191 = other_3190;
    let _e4: MultiVector = self_3555;
    let _e7: Scalar = other_3191;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_anti_wedge(self_3556: MultiVector, other_3192: Scalar) -> Scalar {
    var self_3557: MultiVector;
    var other_3193: Scalar;

    self_3557 = self_3556;
    other_3193 = other_3192;
    let _e4: MultiVector = self_3557;
    let _e7: Scalar = other_3193;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_meet(self_3558: MultiVector, other_3194: Scalar) -> Scalar {
    var self_3559: MultiVector;
    var other_3195: Scalar;

    self_3559 = self_3558;
    other_3195 = other_3194;
    let _e4: MultiVector = self_3559;
    let _e7: Scalar = other_3195;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_outer_product(self_3560: MultiVector, other_3196: Scalar) -> MultiVector {
    var self_3561: MultiVector;
    var other_3197: Scalar;

    self_3561 = self_3560;
    other_3197 = other_3196;
    let _e4: MultiVector = self_3561;
    let _e6: Scalar = other_3197;
    let _e10: MultiVector = self_3561;
    let _e12: Scalar = other_3197;
    let _e16: MultiVector = self_3561;
    let _e18: Scalar = other_3197;
    let _e22: MultiVector = self_3561;
    let _e24: Scalar = other_3197;
    let _e28: MultiVector = self_3561;
    let _e30: Scalar = other_3197;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_wedge(self_3562: MultiVector, other_3198: Scalar) -> MultiVector {
    var self_3563: MultiVector;
    var other_3199: Scalar;

    self_3563 = self_3562;
    other_3199 = other_3198;
    let _e4: MultiVector = self_3563;
    let _e6: Scalar = other_3199;
    let _e10: MultiVector = self_3563;
    let _e12: Scalar = other_3199;
    let _e16: MultiVector = self_3563;
    let _e18: Scalar = other_3199;
    let _e22: MultiVector = self_3563;
    let _e24: Scalar = other_3199;
    let _e28: MultiVector = self_3563;
    let _e30: Scalar = other_3199;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_join(self_3564: MultiVector, other_3200: Scalar) -> MultiVector {
    var self_3565: MultiVector;
    var other_3201: Scalar;

    self_3565 = self_3564;
    other_3201 = other_3200;
    let _e4: MultiVector = self_3565;
    let _e6: Scalar = other_3201;
    let _e10: MultiVector = self_3565;
    let _e12: Scalar = other_3201;
    let _e16: MultiVector = self_3565;
    let _e18: Scalar = other_3201;
    let _e22: MultiVector = self_3565;
    let _e24: Scalar = other_3201;
    let _e28: MultiVector = self_3565;
    let _e30: Scalar = other_3201;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_inner_product(self_3566: MultiVector, other_3202: Scalar) -> MultiVector {
    var self_3567: MultiVector;
    var other_3203: Scalar;

    self_3567 = self_3566;
    other_3203 = other_3202;
    let _e4: MultiVector = self_3567;
    let _e6: Scalar = other_3203;
    let _e10: MultiVector = self_3567;
    let _e12: Scalar = other_3203;
    let _e16: MultiVector = self_3567;
    let _e18: Scalar = other_3203;
    let _e22: MultiVector = self_3567;
    let _e24: Scalar = other_3203;
    let _e28: MultiVector = self_3567;
    let _e30: Scalar = other_3203;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_inner_anti_product(self_3568: MultiVector, other_3204: Scalar) -> MultiVector {
    var self_3569: MultiVector;
    var other_3205: Scalar;

    self_3569 = self_3568;
    other_3205 = other_3204;
    let _e4: MultiVector = self_3569;
    let _e7: Scalar = other_3205;
    let _e15: MultiVector = self_3569;
    let _e18: Scalar = other_3205;
    let _e30: MultiVector = self_3569;
    let _e32: Scalar = other_3205;
    let _e36: MultiVector = self_3569;
    let _e39: Scalar = other_3205;
    return MultiVector(((_e4.g0_.yx * vec2(_e7.g0_)) * vec2<f32>(1.0, 0.0)), ((_e15.g4_.xyzx * vec4(_e18.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), vec3(0.0), (_e30.g2_ * vec3(_e32.g0_)), ((_e36.g1_.xxxw * vec4(_e39.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn multi_vector_scalar_left_contraction(self_3570: MultiVector, other_3206: Scalar) -> Scalar {
    var self_3571: MultiVector;
    var other_3207: Scalar;

    self_3571 = self_3570;
    other_3207 = other_3206;
    let _e4: MultiVector = self_3571;
    let _e7: Scalar = other_3207;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_right_contraction(self_3572: MultiVector, other_3208: Scalar) -> MultiVector {
    var self_3573: MultiVector;
    var other_3209: Scalar;

    self_3573 = self_3572;
    other_3209 = other_3208;
    let _e4: MultiVector = self_3573;
    let _e6: Scalar = other_3209;
    let _e10: MultiVector = self_3573;
    let _e12: Scalar = other_3209;
    let _e16: MultiVector = self_3573;
    let _e18: Scalar = other_3209;
    let _e22: MultiVector = self_3573;
    let _e24: Scalar = other_3209;
    let _e28: MultiVector = self_3573;
    let _e30: Scalar = other_3209;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_scalar_left_anti_contraction(self_3574: MultiVector, other_3210: Scalar) -> MultiVector {
    var self_3575: MultiVector;
    var other_3211: Scalar;

    self_3575 = self_3574;
    other_3211 = other_3210;
    let _e4: MultiVector = self_3575;
    let _e7: Scalar = other_3211;
    let _e15: MultiVector = self_3575;
    let _e18: Scalar = other_3211;
    let _e30: MultiVector = self_3575;
    let _e32: Scalar = other_3211;
    let _e36: MultiVector = self_3575;
    let _e39: Scalar = other_3211;
    return MultiVector(((_e4.g0_.yx * vec2(_e7.g0_)) * vec2<f32>(1.0, 0.0)), ((_e15.g4_.xyzx * vec4(_e18.g0_)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), vec3(0.0), (_e30.g2_ * vec3(_e32.g0_)), ((_e36.g1_.xxxw * vec4(_e39.g0_)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn multi_vector_scalar_scalar_product(self_3576: MultiVector, other_3212: Scalar) -> Scalar {
    var self_3577: MultiVector;
    var other_3213: Scalar;

    self_3577 = self_3576;
    other_3213 = other_3212;
    let _e4: MultiVector = self_3577;
    let _e7: Scalar = other_3213;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_dot(self_3578: MultiVector, other_3214: Scalar) -> Scalar {
    var self_3579: MultiVector;
    var other_3215: Scalar;

    self_3579 = self_3578;
    other_3215 = other_3214;
    let _e4: MultiVector = self_3579;
    let _e7: Scalar = other_3215;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_into(self_3580: MultiVector) -> AntiScalar {
    var self_3581: MultiVector;

    self_3581 = self_3580;
    let _e2: MultiVector = self_3581;
    return AntiScalar(_e2.g0_.y);
}

fn multi_vector_anti_scalar_add(self_3582: MultiVector, other_3216: AntiScalar) -> MultiVector {
    var self_3583: MultiVector;
    var other_3217: AntiScalar;

    self_3583 = self_3582;
    other_3217 = other_3216;
    let _e4: MultiVector = self_3583;
    let _e6: AntiScalar = other_3217;
    let _e14: MultiVector = self_3583;
    let _e16: MultiVector = self_3583;
    let _e18: MultiVector = self_3583;
    let _e20: MultiVector = self_3583;
    return MultiVector((_e4.g0_ + (vec2(_e6.g0_) * vec2<f32>(0.0, 1.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_anti_scalar_sub(self_3584: MultiVector, other_3218: AntiScalar) -> MultiVector {
    var self_3585: MultiVector;
    var other_3219: AntiScalar;

    self_3585 = self_3584;
    other_3219 = other_3218;
    let _e4: MultiVector = self_3585;
    let _e6: AntiScalar = other_3219;
    let _e14: MultiVector = self_3585;
    let _e16: MultiVector = self_3585;
    let _e18: MultiVector = self_3585;
    let _e20: MultiVector = self_3585;
    return MultiVector((_e4.g0_ - (vec2(_e6.g0_) * vec2<f32>(0.0, 1.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_anti_scalar_geometric_product(self_3586: MultiVector, other_3220: AntiScalar) -> MultiVector {
    var self_3587: MultiVector;
    var other_3221: AntiScalar;

    self_3587 = self_3586;
    other_3221 = other_3220;
    let _e4: MultiVector = self_3587;
    let _e8: AntiScalar = other_3221;
    let _e16: MultiVector = self_3587;
    let _e19: AntiScalar = other_3221;
    let _e29: MultiVector = self_3587;
    let _e31: AntiScalar = other_3221;
    let _e37: MultiVector = self_3587;
    let _e40: AntiScalar = other_3221;
    return MultiVector(((vec2(_e4.g0_.x) * vec2(_e8.g0_)) * vec2<f32>(0.0, 1.0)), ((_e16.g4_.xxxw * vec4(_e19.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e29.g3_ * vec3(_e31.g0_)), vec3(0.0), ((_e37.g1_.xyzx * vec4(_e40.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_anti_scalar_geometric_anti_product(self_3588: MultiVector, other_3222: AntiScalar) -> MultiVector {
    var self_3589: MultiVector;
    var other_3223: AntiScalar;

    self_3589 = self_3588;
    other_3223 = other_3222;
    let _e4: MultiVector = self_3589;
    let _e6: AntiScalar = other_3223;
    let _e10: MultiVector = self_3589;
    let _e12: AntiScalar = other_3223;
    let _e16: MultiVector = self_3589;
    let _e18: AntiScalar = other_3223;
    let _e22: MultiVector = self_3589;
    let _e24: AntiScalar = other_3223;
    let _e28: MultiVector = self_3589;
    let _e30: AntiScalar = other_3223;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_regressive_product(self_3590: MultiVector, other_3224: AntiScalar) -> MultiVector {
    var self_3591: MultiVector;
    var other_3225: AntiScalar;

    self_3591 = self_3590;
    other_3225 = other_3224;
    let _e4: MultiVector = self_3591;
    let _e6: AntiScalar = other_3225;
    let _e10: MultiVector = self_3591;
    let _e12: AntiScalar = other_3225;
    let _e16: MultiVector = self_3591;
    let _e18: AntiScalar = other_3225;
    let _e22: MultiVector = self_3591;
    let _e24: AntiScalar = other_3225;
    let _e28: MultiVector = self_3591;
    let _e30: AntiScalar = other_3225;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_anti_wedge(self_3592: MultiVector, other_3226: AntiScalar) -> MultiVector {
    var self_3593: MultiVector;
    var other_3227: AntiScalar;

    self_3593 = self_3592;
    other_3227 = other_3226;
    let _e4: MultiVector = self_3593;
    let _e6: AntiScalar = other_3227;
    let _e10: MultiVector = self_3593;
    let _e12: AntiScalar = other_3227;
    let _e16: MultiVector = self_3593;
    let _e18: AntiScalar = other_3227;
    let _e22: MultiVector = self_3593;
    let _e24: AntiScalar = other_3227;
    let _e28: MultiVector = self_3593;
    let _e30: AntiScalar = other_3227;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_meet(self_3594: MultiVector, other_3228: AntiScalar) -> MultiVector {
    var self_3595: MultiVector;
    var other_3229: AntiScalar;

    self_3595 = self_3594;
    other_3229 = other_3228;
    let _e4: MultiVector = self_3595;
    let _e6: AntiScalar = other_3229;
    let _e10: MultiVector = self_3595;
    let _e12: AntiScalar = other_3229;
    let _e16: MultiVector = self_3595;
    let _e18: AntiScalar = other_3229;
    let _e22: MultiVector = self_3595;
    let _e24: AntiScalar = other_3229;
    let _e28: MultiVector = self_3595;
    let _e30: AntiScalar = other_3229;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_outer_product(self_3596: MultiVector, other_3230: AntiScalar) -> AntiScalar {
    var self_3597: MultiVector;
    var other_3231: AntiScalar;

    self_3597 = self_3596;
    other_3231 = other_3230;
    let _e4: MultiVector = self_3597;
    let _e7: AntiScalar = other_3231;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_wedge(self_3598: MultiVector, other_3232: AntiScalar) -> AntiScalar {
    var self_3599: MultiVector;
    var other_3233: AntiScalar;

    self_3599 = self_3598;
    other_3233 = other_3232;
    let _e4: MultiVector = self_3599;
    let _e7: AntiScalar = other_3233;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_join(self_3600: MultiVector, other_3234: AntiScalar) -> AntiScalar {
    var self_3601: MultiVector;
    var other_3235: AntiScalar;

    self_3601 = self_3600;
    other_3235 = other_3234;
    let _e4: MultiVector = self_3601;
    let _e7: AntiScalar = other_3235;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_inner_product(self_3602: MultiVector, other_3236: AntiScalar) -> MultiVector {
    var self_3603: MultiVector;
    var other_3237: AntiScalar;

    self_3603 = self_3602;
    other_3237 = other_3236;
    let _e4: MultiVector = self_3603;
    let _e8: AntiScalar = other_3237;
    let _e16: MultiVector = self_3603;
    let _e19: AntiScalar = other_3237;
    let _e29: MultiVector = self_3603;
    let _e31: AntiScalar = other_3237;
    let _e37: MultiVector = self_3603;
    let _e40: AntiScalar = other_3237;
    return MultiVector(((vec2(_e4.g0_.x) * vec2(_e8.g0_)) * vec2<f32>(0.0, 1.0)), ((_e16.g4_.xxxw * vec4(_e19.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e29.g3_ * vec3(_e31.g0_)), vec3(0.0), ((_e37.g1_.xyzx * vec4(_e40.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_anti_scalar_inner_anti_product(self_3604: MultiVector, other_3238: AntiScalar) -> MultiVector {
    var self_3605: MultiVector;
    var other_3239: AntiScalar;

    self_3605 = self_3604;
    other_3239 = other_3238;
    let _e4: MultiVector = self_3605;
    let _e6: AntiScalar = other_3239;
    let _e10: MultiVector = self_3605;
    let _e12: AntiScalar = other_3239;
    let _e16: MultiVector = self_3605;
    let _e18: AntiScalar = other_3239;
    let _e22: MultiVector = self_3605;
    let _e24: AntiScalar = other_3239;
    let _e28: MultiVector = self_3605;
    let _e30: AntiScalar = other_3239;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_left_contraction(self_3606: MultiVector, other_3240: AntiScalar) -> MultiVector {
    var self_3607: MultiVector;
    var other_3241: AntiScalar;

    self_3607 = self_3606;
    other_3241 = other_3240;
    let _e4: MultiVector = self_3607;
    let _e8: AntiScalar = other_3241;
    let _e16: MultiVector = self_3607;
    let _e19: AntiScalar = other_3241;
    let _e29: MultiVector = self_3607;
    let _e31: AntiScalar = other_3241;
    let _e37: MultiVector = self_3607;
    let _e40: AntiScalar = other_3241;
    return MultiVector(((vec2(_e4.g0_.x) * vec2(_e8.g0_)) * vec2<f32>(0.0, 1.0)), ((_e16.g4_.xxxw * vec4(_e19.g0_)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e29.g3_ * vec3(_e31.g0_)), vec3(0.0), ((_e37.g1_.xyzx * vec4(_e40.g0_)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_anti_scalar_left_anti_contraction(self_3608: MultiVector, other_3242: AntiScalar) -> AntiScalar {
    var self_3609: MultiVector;
    var other_3243: AntiScalar;

    self_3609 = self_3608;
    other_3243 = other_3242;
    let _e4: MultiVector = self_3609;
    let _e7: AntiScalar = other_3243;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_anti_scalar_right_anti_contraction(self_3610: MultiVector, other_3244: AntiScalar) -> MultiVector {
    var self_3611: MultiVector;
    var other_3245: AntiScalar;

    self_3611 = self_3610;
    other_3245 = other_3244;
    let _e4: MultiVector = self_3611;
    let _e6: AntiScalar = other_3245;
    let _e10: MultiVector = self_3611;
    let _e12: AntiScalar = other_3245;
    let _e16: MultiVector = self_3611;
    let _e18: AntiScalar = other_3245;
    let _e22: MultiVector = self_3611;
    let _e24: AntiScalar = other_3245;
    let _e28: MultiVector = self_3611;
    let _e30: AntiScalar = other_3245;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_)), (_e10.g1_ * vec4(_e12.g0_)), (_e16.g2_ * vec3(_e18.g0_)), (_e22.g3_ * vec3(_e24.g0_)), (_e28.g4_ * vec4(_e30.g0_)));
}

fn multi_vector_anti_scalar_anti_scalar_product(self_3612: MultiVector, other_3246: AntiScalar) -> AntiScalar {
    var self_3613: MultiVector;
    var other_3247: AntiScalar;

    self_3613 = self_3612;
    other_3247 = other_3246;
    let _e4: MultiVector = self_3613;
    let _e7: AntiScalar = other_3247;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_anti_scalar_anti_dot(self_3614: MultiVector, other_3248: AntiScalar) -> AntiScalar {
    var self_3615: MultiVector;
    var other_3249: AntiScalar;

    self_3615 = self_3614;
    other_3249 = other_3248;
    let _e4: MultiVector = self_3615;
    let _e7: AntiScalar = other_3249;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_homogeneous_magnitude_into(self_3616: MultiVector) -> HomogeneousMagnitude {
    var self_3617: MultiVector;

    self_3617 = self_3616;
    let _e2: MultiVector = self_3617;
    return HomogeneousMagnitude(_e2.g0_);
}

fn multi_vector_homogeneous_magnitude_add(self_3618: MultiVector, other_3250: HomogeneousMagnitude) -> MultiVector {
    var self_3619: MultiVector;
    var other_3251: HomogeneousMagnitude;

    self_3619 = self_3618;
    other_3251 = other_3250;
    let _e4: MultiVector = self_3619;
    let _e6: HomogeneousMagnitude = other_3251;
    let _e9: MultiVector = self_3619;
    let _e11: MultiVector = self_3619;
    let _e13: MultiVector = self_3619;
    let _e15: MultiVector = self_3619;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_homogeneous_magnitude_sub(self_3620: MultiVector, other_3252: HomogeneousMagnitude) -> MultiVector {
    var self_3621: MultiVector;
    var other_3253: HomogeneousMagnitude;

    self_3621 = self_3620;
    other_3253 = other_3252;
    let _e4: MultiVector = self_3621;
    let _e6: HomogeneousMagnitude = other_3253;
    let _e9: MultiVector = self_3621;
    let _e11: MultiVector = self_3621;
    let _e13: MultiVector = self_3621;
    let _e15: MultiVector = self_3621;
    return MultiVector((_e4.g0_ - _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_homogeneous_magnitude_geometric_product(self_3622: MultiVector, other_3254: HomogeneousMagnitude) -> MultiVector {
    var self_3623: MultiVector;
    var other_3255: HomogeneousMagnitude;

    self_3623 = self_3622;
    other_3255 = other_3254;
    let _e4: MultiVector = self_3623;
    let _e8: HomogeneousMagnitude = other_3255;
    let _e11: MultiVector = self_3623;
    let _e13: HomogeneousMagnitude = other_3255;
    let _e23: MultiVector = self_3623;
    let _e27: HomogeneousMagnitude = other_3255;
    let _e38: MultiVector = self_3623;
    let _e40: HomogeneousMagnitude = other_3255;
    let _e46: MultiVector = self_3623;
    let _e50: HomogeneousMagnitude = other_3255;
    let _e60: MultiVector = self_3623;
    let _e64: HomogeneousMagnitude = other_3255;
    let _e75: MultiVector = self_3623;
    let _e79: HomogeneousMagnitude = other_3255;
    let _e90: MultiVector = self_3623;
    let _e92: HomogeneousMagnitude = other_3255;
    let _e98: MultiVector = self_3623;
    let _e100: HomogeneousMagnitude = other_3255;
    let _e105: MultiVector = self_3623;
    let _e109: HomogeneousMagnitude = other_3255;
    let _e120: MultiVector = self_3623;
    let _e124: HomogeneousMagnitude = other_3255;
    let _e136: MultiVector = self_3623;
    let _e140: HomogeneousMagnitude = other_3255;
    let _e152: MultiVector = self_3623;
    let _e155: MultiVector = self_3623;
    let _e158: MultiVector = self_3623;
    let _e161: MultiVector = self_3623;
    let _e165: HomogeneousMagnitude = other_3255;
    let _e168: HomogeneousMagnitude = other_3255;
    let _e171: HomogeneousMagnitude = other_3255;
    let _e174: HomogeneousMagnitude = other_3255;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (((vec4(_e23.g4_.w) * vec4(_e27.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e38.g1_ * vec4(_e40.g0_.x))), (((((vec3(_e46.g3_.x) * vec3(_e50.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e60.g3_.y) * vec3(_e64.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e75.g3_.z) * vec3(_e79.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e90.g2_ * vec3(_e92.g0_.x))), (_e98.g3_ * vec3(_e100.g0_.x)), (((((vec4(_e105.g4_.x) * vec4(_e109.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e120.g4_.y) * vec4(_e124.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e136.g4_.z) * vec4(_e140.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e152.g1_.x, _e155.g1_.y, _e158.g1_.z, _e161.g4_.w) * vec4<f32>(_e165.g0_.y, _e168.g0_.y, _e171.g0_.y, _e174.g0_.x))));
}

fn multi_vector_homogeneous_magnitude_geometric_anti_product(self_3624: MultiVector, other_3256: HomogeneousMagnitude) -> MultiVector {
    var self_3625: MultiVector;
    var other_3257: HomogeneousMagnitude;

    self_3625 = self_3624;
    other_3257 = other_3256;
    let _e4: MultiVector = self_3625;
    let _e8: HomogeneousMagnitude = other_3257;
    let _e11: MultiVector = self_3625;
    let _e15: HomogeneousMagnitude = other_3257;
    let _e24: MultiVector = self_3625;
    let _e28: HomogeneousMagnitude = other_3257;
    let _e39: MultiVector = self_3625;
    let _e43: HomogeneousMagnitude = other_3257;
    let _e55: MultiVector = self_3625;
    let _e59: HomogeneousMagnitude = other_3257;
    let _e71: MultiVector = self_3625;
    let _e73: HomogeneousMagnitude = other_3257;
    let _e79: MultiVector = self_3625;
    let _e81: HomogeneousMagnitude = other_3257;
    let _e86: MultiVector = self_3625;
    let _e90: HomogeneousMagnitude = other_3257;
    let _e100: MultiVector = self_3625;
    let _e104: HomogeneousMagnitude = other_3257;
    let _e115: MultiVector = self_3625;
    let _e119: HomogeneousMagnitude = other_3257;
    let _e130: MultiVector = self_3625;
    let _e132: HomogeneousMagnitude = other_3257;
    let _e138: MultiVector = self_3625;
    let _e142: HomogeneousMagnitude = other_3257;
    let _e153: MultiVector = self_3625;
    let _e156: MultiVector = self_3625;
    let _e159: MultiVector = self_3625;
    let _e162: MultiVector = self_3625;
    let _e166: HomogeneousMagnitude = other_3257;
    let _e169: HomogeneousMagnitude = other_3257;
    let _e172: HomogeneousMagnitude = other_3257;
    let _e175: HomogeneousMagnitude = other_3257;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((vec4(_e24.g4_.x) * vec4(_e28.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0)) + ((vec4(_e39.g4_.y) * vec4(_e43.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e55.g4_.z) * vec4(_e59.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + (_e71.g1_ * vec4(_e73.g0_.y))), (_e79.g2_ * vec3(_e81.g0_.y)), (((((vec3(_e86.g3_.x) * vec3(_e90.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e100.g3_.y) * vec3(_e104.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e115.g3_.z) * vec3(_e119.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e130.g2_ * vec3(_e132.g0_.x))), (((vec4(_e138.g4_.w) * vec4(_e142.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e153.g4_.x, _e156.g4_.y, _e159.g4_.z, _e162.g1_.w) * vec4<f32>(_e166.g0_.y, _e169.g0_.y, _e172.g0_.y, _e175.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_homogeneous_magnitude_regressive_product(self_3626: MultiVector, other_3258: HomogeneousMagnitude) -> MultiVector {
    var self_3627: MultiVector;
    var other_3259: HomogeneousMagnitude;

    self_3627 = self_3626;
    other_3259 = other_3258;
    let _e4: MultiVector = self_3627;
    let _e8: HomogeneousMagnitude = other_3259;
    let _e11: MultiVector = self_3627;
    let _e15: HomogeneousMagnitude = other_3259;
    let _e24: MultiVector = self_3627;
    let _e26: HomogeneousMagnitude = other_3259;
    let _e31: MultiVector = self_3627;
    let _e33: HomogeneousMagnitude = other_3259;
    let _e38: MultiVector = self_3627;
    let _e40: HomogeneousMagnitude = other_3259;
    let _e45: MultiVector = self_3627;
    let _e47: HomogeneousMagnitude = other_3259;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4(_e26.g0_.y)), (_e31.g2_ * vec3(_e33.g0_.y)), (_e38.g3_ * vec3(_e40.g0_.y)), (_e45.g4_ * vec4(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_anti_wedge(self_3628: MultiVector, other_3260: HomogeneousMagnitude) -> MultiVector {
    var self_3629: MultiVector;
    var other_3261: HomogeneousMagnitude;

    self_3629 = self_3628;
    other_3261 = other_3260;
    let _e4: MultiVector = self_3629;
    let _e8: HomogeneousMagnitude = other_3261;
    let _e11: MultiVector = self_3629;
    let _e15: HomogeneousMagnitude = other_3261;
    let _e24: MultiVector = self_3629;
    let _e26: HomogeneousMagnitude = other_3261;
    let _e31: MultiVector = self_3629;
    let _e33: HomogeneousMagnitude = other_3261;
    let _e38: MultiVector = self_3629;
    let _e40: HomogeneousMagnitude = other_3261;
    let _e45: MultiVector = self_3629;
    let _e47: HomogeneousMagnitude = other_3261;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4(_e26.g0_.y)), (_e31.g2_ * vec3(_e33.g0_.y)), (_e38.g3_ * vec3(_e40.g0_.y)), (_e45.g4_ * vec4(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_meet(self_3630: MultiVector, other_3262: HomogeneousMagnitude) -> MultiVector {
    var self_3631: MultiVector;
    var other_3263: HomogeneousMagnitude;

    self_3631 = self_3630;
    other_3263 = other_3262;
    let _e4: MultiVector = self_3631;
    let _e8: HomogeneousMagnitude = other_3263;
    let _e11: MultiVector = self_3631;
    let _e15: HomogeneousMagnitude = other_3263;
    let _e24: MultiVector = self_3631;
    let _e26: HomogeneousMagnitude = other_3263;
    let _e31: MultiVector = self_3631;
    let _e33: HomogeneousMagnitude = other_3263;
    let _e38: MultiVector = self_3631;
    let _e40: HomogeneousMagnitude = other_3263;
    let _e45: MultiVector = self_3631;
    let _e47: HomogeneousMagnitude = other_3263;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4(_e26.g0_.y)), (_e31.g2_ * vec3(_e33.g0_.y)), (_e38.g3_ * vec3(_e40.g0_.y)), (_e45.g4_ * vec4(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_outer_product(self_3632: MultiVector, other_3264: HomogeneousMagnitude) -> MultiVector {
    var self_3633: MultiVector;
    var other_3265: HomogeneousMagnitude;

    self_3633 = self_3632;
    other_3265 = other_3264;
    let _e4: MultiVector = self_3633;
    let _e8: HomogeneousMagnitude = other_3265;
    let _e11: MultiVector = self_3633;
    let _e13: HomogeneousMagnitude = other_3265;
    let _e23: MultiVector = self_3633;
    let _e25: HomogeneousMagnitude = other_3265;
    let _e30: MultiVector = self_3633;
    let _e32: HomogeneousMagnitude = other_3265;
    let _e37: MultiVector = self_3633;
    let _e39: HomogeneousMagnitude = other_3265;
    let _e44: MultiVector = self_3633;
    let _e46: HomogeneousMagnitude = other_3265;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4(_e25.g0_.x)), (_e30.g2_ * vec3(_e32.g0_.x)), (_e37.g3_ * vec3(_e39.g0_.x)), (_e44.g4_ * vec4(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_wedge(self_3634: MultiVector, other_3266: HomogeneousMagnitude) -> MultiVector {
    var self_3635: MultiVector;
    var other_3267: HomogeneousMagnitude;

    self_3635 = self_3634;
    other_3267 = other_3266;
    let _e4: MultiVector = self_3635;
    let _e8: HomogeneousMagnitude = other_3267;
    let _e11: MultiVector = self_3635;
    let _e13: HomogeneousMagnitude = other_3267;
    let _e23: MultiVector = self_3635;
    let _e25: HomogeneousMagnitude = other_3267;
    let _e30: MultiVector = self_3635;
    let _e32: HomogeneousMagnitude = other_3267;
    let _e37: MultiVector = self_3635;
    let _e39: HomogeneousMagnitude = other_3267;
    let _e44: MultiVector = self_3635;
    let _e46: HomogeneousMagnitude = other_3267;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4(_e25.g0_.x)), (_e30.g2_ * vec3(_e32.g0_.x)), (_e37.g3_ * vec3(_e39.g0_.x)), (_e44.g4_ * vec4(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_join(self_3636: MultiVector, other_3268: HomogeneousMagnitude) -> MultiVector {
    var self_3637: MultiVector;
    var other_3269: HomogeneousMagnitude;

    self_3637 = self_3636;
    other_3269 = other_3268;
    let _e4: MultiVector = self_3637;
    let _e8: HomogeneousMagnitude = other_3269;
    let _e11: MultiVector = self_3637;
    let _e13: HomogeneousMagnitude = other_3269;
    let _e23: MultiVector = self_3637;
    let _e25: HomogeneousMagnitude = other_3269;
    let _e30: MultiVector = self_3637;
    let _e32: HomogeneousMagnitude = other_3269;
    let _e37: MultiVector = self_3637;
    let _e39: HomogeneousMagnitude = other_3269;
    let _e44: MultiVector = self_3637;
    let _e46: HomogeneousMagnitude = other_3269;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4(_e25.g0_.x)), (_e30.g2_ * vec3(_e32.g0_.x)), (_e37.g3_ * vec3(_e39.g0_.x)), (_e44.g4_ * vec4(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_inner_product(self_3638: MultiVector, other_3270: HomogeneousMagnitude) -> MultiVector {
    var self_3639: MultiVector;
    var other_3271: HomogeneousMagnitude;

    self_3639 = self_3638;
    other_3271 = other_3270;
    let _e4: MultiVector = self_3639;
    let _e8: HomogeneousMagnitude = other_3271;
    let _e11: MultiVector = self_3639;
    let _e13: HomogeneousMagnitude = other_3271;
    let _e23: MultiVector = self_3639;
    let _e27: HomogeneousMagnitude = other_3271;
    let _e38: MultiVector = self_3639;
    let _e40: HomogeneousMagnitude = other_3271;
    let _e46: MultiVector = self_3639;
    let _e50: HomogeneousMagnitude = other_3271;
    let _e60: MultiVector = self_3639;
    let _e64: HomogeneousMagnitude = other_3271;
    let _e75: MultiVector = self_3639;
    let _e79: HomogeneousMagnitude = other_3271;
    let _e90: MultiVector = self_3639;
    let _e92: HomogeneousMagnitude = other_3271;
    let _e98: MultiVector = self_3639;
    let _e100: HomogeneousMagnitude = other_3271;
    let _e105: MultiVector = self_3639;
    let _e109: HomogeneousMagnitude = other_3271;
    let _e120: MultiVector = self_3639;
    let _e124: HomogeneousMagnitude = other_3271;
    let _e136: MultiVector = self_3639;
    let _e140: HomogeneousMagnitude = other_3271;
    let _e152: MultiVector = self_3639;
    let _e155: MultiVector = self_3639;
    let _e158: MultiVector = self_3639;
    let _e161: MultiVector = self_3639;
    let _e165: HomogeneousMagnitude = other_3271;
    let _e168: HomogeneousMagnitude = other_3271;
    let _e171: HomogeneousMagnitude = other_3271;
    let _e174: HomogeneousMagnitude = other_3271;
    return MultiVector(((vec2(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (((vec4(_e23.g4_.w) * vec4(_e27.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e38.g1_ * vec4(_e40.g0_.x))), (((((vec3(_e46.g3_.x) * vec3(_e50.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e60.g3_.y) * vec3(_e64.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e75.g3_.z) * vec3(_e79.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e90.g2_ * vec3(_e92.g0_.x))), (_e98.g3_ * vec3(_e100.g0_.x)), (((((vec4(_e105.g4_.x) * vec4(_e109.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e120.g4_.y) * vec4(_e124.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e136.g4_.z) * vec4(_e140.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e152.g1_.x, _e155.g1_.y, _e158.g1_.z, _e161.g4_.w) * vec4<f32>(_e165.g0_.y, _e168.g0_.y, _e171.g0_.y, _e174.g0_.x))));
}

fn multi_vector_homogeneous_magnitude_inner_anti_product(self_3640: MultiVector, other_3272: HomogeneousMagnitude) -> MultiVector {
    var self_3641: MultiVector;
    var other_3273: HomogeneousMagnitude;

    self_3641 = self_3640;
    other_3273 = other_3272;
    let _e4: MultiVector = self_3641;
    let _e8: HomogeneousMagnitude = other_3273;
    let _e11: MultiVector = self_3641;
    let _e15: HomogeneousMagnitude = other_3273;
    let _e24: MultiVector = self_3641;
    let _e28: HomogeneousMagnitude = other_3273;
    let _e39: MultiVector = self_3641;
    let _e43: HomogeneousMagnitude = other_3273;
    let _e55: MultiVector = self_3641;
    let _e59: HomogeneousMagnitude = other_3273;
    let _e71: MultiVector = self_3641;
    let _e73: HomogeneousMagnitude = other_3273;
    let _e79: MultiVector = self_3641;
    let _e81: HomogeneousMagnitude = other_3273;
    let _e86: MultiVector = self_3641;
    let _e90: HomogeneousMagnitude = other_3273;
    let _e100: MultiVector = self_3641;
    let _e104: HomogeneousMagnitude = other_3273;
    let _e115: MultiVector = self_3641;
    let _e119: HomogeneousMagnitude = other_3273;
    let _e130: MultiVector = self_3641;
    let _e132: HomogeneousMagnitude = other_3273;
    let _e138: MultiVector = self_3641;
    let _e142: HomogeneousMagnitude = other_3273;
    let _e153: MultiVector = self_3641;
    let _e156: MultiVector = self_3641;
    let _e159: MultiVector = self_3641;
    let _e162: MultiVector = self_3641;
    let _e166: HomogeneousMagnitude = other_3273;
    let _e169: HomogeneousMagnitude = other_3273;
    let _e172: HomogeneousMagnitude = other_3273;
    let _e175: HomogeneousMagnitude = other_3273;
    return MultiVector(((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((vec4(_e24.g4_.x) * vec4(_e28.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0)) + ((vec4(_e39.g4_.y) * vec4(_e43.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e55.g4_.z) * vec4(_e59.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + (_e71.g1_ * vec4(_e73.g0_.y))), (_e79.g2_ * vec3(_e81.g0_.y)), (((((vec3(_e86.g3_.x) * vec3(_e90.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3(_e100.g3_.y) * vec3(_e104.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e115.g3_.z) * vec3(_e119.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e130.g2_ * vec3(_e132.g0_.x))), (((vec4(_e138.g4_.w) * vec4(_e142.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e153.g4_.x, _e156.g4_.y, _e159.g4_.z, _e162.g1_.w) * vec4<f32>(_e166.g0_.y, _e169.g0_.y, _e172.g0_.y, _e175.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_homogeneous_magnitude_left_contraction(self_3642: MultiVector, other_3274: HomogeneousMagnitude) -> MultiVector {
    var self_3643: MultiVector;
    var other_3275: HomogeneousMagnitude;

    self_3643 = self_3642;
    other_3275 = other_3274;
    let _e4: MultiVector = self_3643;
    let _e8: HomogeneousMagnitude = other_3275;
    let _e11: MultiVector = self_3643;
    let _e14: HomogeneousMagnitude = other_3275;
    let _e17: HomogeneousMagnitude = other_3275;
    let _e20: HomogeneousMagnitude = other_3275;
    let _e23: HomogeneousMagnitude = other_3275;
    let _e34: MultiVector = self_3643;
    let _e36: HomogeneousMagnitude = other_3275;
    let _e43: MultiVector = self_3643;
    let _e46: HomogeneousMagnitude = other_3275;
    let _e49: HomogeneousMagnitude = other_3275;
    let _e52: HomogeneousMagnitude = other_3275;
    let _e55: HomogeneousMagnitude = other_3275;
    return MultiVector((vec2(_e4.g0_.x) * _e8.g0_), ((_e11.g4_.xxxw * vec4<f32>(_e14.g0_.x, _e17.g0_.x, _e20.g0_.x, _e23.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)), (_e34.g3_ * vec3(_e36.g0_.y)), vec3(0.0), ((_e43.g1_.xyzx * vec4<f32>(_e46.g0_.y, _e49.g0_.y, _e52.g0_.y, _e55.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_homogeneous_magnitude_right_contraction(self_3644: MultiVector, other_3276: HomogeneousMagnitude) -> MultiVector {
    var self_3645: MultiVector;
    var other_3277: HomogeneousMagnitude;

    self_3645 = self_3644;
    other_3277 = other_3276;
    let _e4: MultiVector = self_3645;
    let _e6: HomogeneousMagnitude = other_3277;
    let _e11: MultiVector = self_3645;
    let _e13: HomogeneousMagnitude = other_3277;
    let _e18: MultiVector = self_3645;
    let _e20: HomogeneousMagnitude = other_3277;
    let _e25: MultiVector = self_3645;
    let _e27: HomogeneousMagnitude = other_3277;
    let _e32: MultiVector = self_3645;
    let _e34: HomogeneousMagnitude = other_3277;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.x)), (_e11.g1_ * vec4(_e13.g0_.x)), (_e18.g2_ * vec3(_e20.g0_.x)), (_e25.g3_ * vec3(_e27.g0_.x)), (_e32.g4_ * vec4(_e34.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_left_anti_contraction(self_3646: MultiVector, other_3278: HomogeneousMagnitude) -> MultiVector {
    var self_3647: MultiVector;
    var other_3279: HomogeneousMagnitude;

    self_3647 = self_3646;
    other_3279 = other_3278;
    let _e4: MultiVector = self_3647;
    let _e8: HomogeneousMagnitude = other_3279;
    let _e11: MultiVector = self_3647;
    let _e14: HomogeneousMagnitude = other_3279;
    let _e27: MultiVector = self_3647;
    let _e29: HomogeneousMagnitude = other_3279;
    let _e34: MultiVector = self_3647;
    let _e37: HomogeneousMagnitude = other_3279;
    return MultiVector((vec2(_e4.g0_.y) * _e8.g0_), ((_e11.g4_.xyzx * vec4(_e14.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)), vec3(0.0), (_e27.g2_ * vec3(_e29.g0_.x)), ((_e34.g1_.xxxw * vec4(_e37.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)));
}

fn multi_vector_homogeneous_magnitude_right_anti_contraction(self_3648: MultiVector, other_3280: HomogeneousMagnitude) -> MultiVector {
    var self_3649: MultiVector;
    var other_3281: HomogeneousMagnitude;

    self_3649 = self_3648;
    other_3281 = other_3280;
    let _e4: MultiVector = self_3649;
    let _e6: HomogeneousMagnitude = other_3281;
    let _e11: MultiVector = self_3649;
    let _e13: HomogeneousMagnitude = other_3281;
    let _e18: MultiVector = self_3649;
    let _e20: HomogeneousMagnitude = other_3281;
    let _e25: MultiVector = self_3649;
    let _e27: HomogeneousMagnitude = other_3281;
    let _e32: MultiVector = self_3649;
    let _e34: HomogeneousMagnitude = other_3281;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.y)), (_e11.g1_ * vec4(_e13.g0_.y)), (_e18.g2_ * vec3(_e20.g0_.y)), (_e25.g3_ * vec3(_e27.g0_.y)), (_e32.g4_ * vec4(_e34.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_scalar_product(self_3650: MultiVector, other_3282: HomogeneousMagnitude) -> Scalar {
    var self_3651: MultiVector;
    var other_3283: HomogeneousMagnitude;

    self_3651 = self_3650;
    other_3283 = other_3282;
    let _e4: MultiVector = self_3651;
    let _e7: HomogeneousMagnitude = other_3283;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn multi_vector_homogeneous_magnitude_dot(self_3652: MultiVector, other_3284: HomogeneousMagnitude) -> Scalar {
    var self_3653: MultiVector;
    var other_3285: HomogeneousMagnitude;

    self_3653 = self_3652;
    other_3285 = other_3284;
    let _e4: MultiVector = self_3653;
    let _e7: HomogeneousMagnitude = other_3285;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn multi_vector_homogeneous_magnitude_anti_scalar_product(self_3654: MultiVector, other_3286: HomogeneousMagnitude) -> AntiScalar {
    var self_3655: MultiVector;
    var other_3287: HomogeneousMagnitude;

    self_3655 = self_3654;
    other_3287 = other_3286;
    let _e4: MultiVector = self_3655;
    let _e7: HomogeneousMagnitude = other_3287;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn multi_vector_homogeneous_magnitude_anti_dot(self_3656: MultiVector, other_3288: HomogeneousMagnitude) -> AntiScalar {
    var self_3657: MultiVector;
    var other_3289: HomogeneousMagnitude;

    self_3657 = self_3656;
    other_3289 = other_3288;
    let _e4: MultiVector = self_3657;
    let _e7: HomogeneousMagnitude = other_3289;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn multi_vector_point_into(self_3658: MultiVector) -> Point {
    var self_3659: MultiVector;

    self_3659 = self_3658;
    let _e2: MultiVector = self_3659;
    return Point(_e2.g1_);
}

fn multi_vector_point_add(self_3660: MultiVector, other_3290: Point) -> MultiVector {
    var self_3661: MultiVector;
    var other_3291: Point;

    self_3661 = self_3660;
    other_3291 = other_3290;
    let _e4: MultiVector = self_3661;
    let _e6: MultiVector = self_3661;
    let _e8: Point = other_3291;
    let _e11: MultiVector = self_3661;
    let _e13: MultiVector = self_3661;
    let _e15: MultiVector = self_3661;
    return MultiVector(_e4.g0_, (_e6.g1_ + _e8.g0_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_point_sub(self_3662: MultiVector, other_3292: Point) -> MultiVector {
    var self_3663: MultiVector;
    var other_3293: Point;

    self_3663 = self_3662;
    other_3293 = other_3292;
    let _e4: MultiVector = self_3663;
    let _e6: MultiVector = self_3663;
    let _e8: Point = other_3293;
    let _e11: MultiVector = self_3663;
    let _e13: MultiVector = self_3663;
    let _e15: MultiVector = self_3663;
    return MultiVector(_e4.g0_, (_e6.g1_ - _e8.g0_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_point_geometric_product(self_3664: MultiVector, other_3294: Point) -> MultiVector {
    var self_3665: MultiVector;
    var other_3295: Point;

    self_3665 = self_3664;
    other_3295 = other_3294;
    let _e4: MultiVector = self_3665;
    let _e8: Point = other_3295;
    let _e17: MultiVector = self_3665;
    let _e21: Point = other_3295;
    let _e31: MultiVector = self_3665;
    let _e35: Point = other_3295;
    let _e45: MultiVector = self_3665;
    let _e49: Point = other_3295;
    let _e59: MultiVector = self_3665;
    let _e63: Point = other_3295;
    let _e73: MultiVector = self_3665;
    let _e76: MultiVector = self_3665;
    let _e80: Point = other_3295;
    let _e90: MultiVector = self_3665;
    let _e94: Point = other_3295;
    let _e97: MultiVector = self_3665;
    let _e101: Point = other_3295;
    let _e113: MultiVector = self_3665;
    let _e117: Point = other_3295;
    let _e129: MultiVector = self_3665;
    let _e133: Point = other_3295;
    let _e144: MultiVector = self_3665;
    let _e148: Point = other_3295;
    let _e159: MultiVector = self_3665;
    let _e162: MultiVector = self_3665;
    let _e165: MultiVector = self_3665;
    let _e168: MultiVector = self_3665;
    let _e172: Point = other_3295;
    let _e183: MultiVector = self_3665;
    let _e187: Point = other_3295;
    let _e190: Point = other_3295;
    let _e193: Point = other_3295;
    let _e198: MultiVector = self_3665;
    let _e202: Point = other_3295;
    let _e205: Point = other_3295;
    let _e208: Point = other_3295;
    let _e219: MultiVector = self_3665;
    let _e223: Point = other_3295;
    let _e226: Point = other_3295;
    let _e229: Point = other_3295;
    let _e240: MultiVector = self_3665;
    let _e244: Point = other_3295;
    let _e247: Point = other_3295;
    let _e250: Point = other_3295;
    let _e261: MultiVector = self_3665;
    let _e264: MultiVector = self_3665;
    let _e267: MultiVector = self_3665;
    let _e271: Point = other_3295;
    let _e280: MultiVector = self_3665;
    let _e284: Point = other_3295;
    let _e287: Point = other_3295;
    let _e290: Point = other_3295;
    let _e300: MultiVector = self_3665;
    let _e304: Point = other_3295;
    let _e307: Point = other_3295;
    let _e310: Point = other_3295;
    let _e321: MultiVector = self_3665;
    let _e325: Point = other_3295;
    let _e328: Point = other_3295;
    let _e331: Point = other_3295;
    let _e337: MultiVector = self_3665;
    let _e341: Point = other_3295;
    let _e344: Point = other_3295;
    let _e347: Point = other_3295;
    let _e358: MultiVector = self_3665;
    let _e362: Point = other_3295;
    let _e372: MultiVector = self_3665;
    let _e376: Point = other_3295;
    let _e387: MultiVector = self_3665;
    let _e391: Point = other_3295;
    let _e402: MultiVector = self_3665;
    let _e406: Point = other_3295;
    let _e417: MultiVector = self_3665;
    let _e421: Point = other_3295;
    let _e432: MultiVector = self_3665;
    let _e436: Point = other_3295;
    let _e447: MultiVector = self_3665;
    let _e450: MultiVector = self_3665;
    let _e453: MultiVector = self_3665;
    let _e456: MultiVector = self_3665;
    let _e460: Point = other_3295;
    return MultiVector((((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g4_.y) * vec2(_e35.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g4_.z) * vec2(_e49.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g4_.w) * vec2(_e63.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2<f32>(_e73.g1_.x, _e76.g4_.x) * vec2(_e80.g0_.x)) * vec2<f32>(1.0, -1.0))), ((((((vec4(_e90.g0_.x) * _e94.g0_) + ((vec4(_e97.g2_.y) * vec4(_e101.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e113.g2_.z) * vec4(_e117.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e129.g3_.y) * _e133.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e144.g3_.z) * _e148.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e159.g2_.x, _e162.g3_.x, _e165.g3_.x, _e168.g2_.x) * _e172.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), (((((vec3(_e183.g1_.w) * vec3<f32>(_e187.g0_.x, _e190.g0_.y, _e193.g0_.z)) + ((vec3(_e198.g4_.x) * vec3<f32>(_e202.g0_.z, _e205.g0_.z, _e208.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e219.g4_.y) * vec3<f32>(_e223.g0_.z, _e226.g0_.z, _e229.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e240.g4_.z) * vec3<f32>(_e244.g0_.y, _e247.g0_.x, _e250.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3<f32>(_e261.g1_.x, _e264.g1_.y, _e267.g1_.z) * vec3(_e271.g0_.w)) * vec3(-1.0))), (((((vec3(_e280.g1_.y) * vec3<f32>(_e284.g0_.z, _e287.g0_.z, _e290.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e300.g1_.z) * vec3<f32>(_e304.g0_.y, _e307.g0_.x, _e310.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) - (vec3(_e321.g4_.w) * vec3<f32>(_e325.g0_.x, _e328.g0_.y, _e331.g0_.z))) + ((vec3(_e337.g1_.x) * vec3<f32>(_e341.g0_.x, _e344.g0_.z, _e347.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((((vec4(_e358.g2_.x) * _e362.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0)) + ((vec4(_e372.g2_.y) * _e376.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e387.g2_.z) * _e391.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e402.g3_.x) * _e406.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e417.g3_.y) * _e421.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e432.g3_.z) * _e436.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e447.g0_.y, _e450.g0_.y, _e453.g0_.y, _e456.g0_.x) * _e460.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_point_geometric_anti_product(self_3666: MultiVector, other_3296: Point) -> MultiVector {
    var self_3667: MultiVector;
    var other_3297: Point;

    self_3667 = self_3666;
    other_3297 = other_3296;
    let _e4: MultiVector = self_3667;
    let _e8: Point = other_3297;
    let _e17: MultiVector = self_3667;
    let _e21: Point = other_3297;
    let _e31: MultiVector = self_3667;
    let _e35: Point = other_3297;
    let _e45: MultiVector = self_3667;
    let _e48: MultiVector = self_3667;
    let _e52: Point = other_3297;
    let _e55: Point = other_3297;
    let _e64: MultiVector = self_3667;
    let _e68: Point = other_3297;
    let _e71: MultiVector = self_3667;
    let _e75: Point = other_3297;
    let _e86: MultiVector = self_3667;
    let _e90: Point = other_3297;
    let _e101: MultiVector = self_3667;
    let _e105: Point = other_3297;
    let _e117: MultiVector = self_3667;
    let _e121: Point = other_3297;
    let _e133: MultiVector = self_3667;
    let _e136: MultiVector = self_3667;
    let _e139: MultiVector = self_3667;
    let _e142: MultiVector = self_3667;
    let _e146: Point = other_3297;
    let _e157: MultiVector = self_3667;
    let _e160: MultiVector = self_3667;
    let _e163: MultiVector = self_3667;
    let _e167: Point = other_3297;
    let _e175: MultiVector = self_3667;
    let _e179: Point = other_3297;
    let _e182: Point = other_3297;
    let _e185: Point = other_3297;
    let _e190: MultiVector = self_3667;
    let _e194: Point = other_3297;
    let _e197: Point = other_3297;
    let _e200: Point = other_3297;
    let _e211: MultiVector = self_3667;
    let _e215: Point = other_3297;
    let _e218: Point = other_3297;
    let _e221: Point = other_3297;
    let _e232: MultiVector = self_3667;
    let _e236: Point = other_3297;
    let _e239: Point = other_3297;
    let _e242: Point = other_3297;
    let _e253: MultiVector = self_3667;
    let _e256: MultiVector = self_3667;
    let _e259: MultiVector = self_3667;
    let _e263: Point = other_3297;
    let _e272: MultiVector = self_3667;
    let _e276: Point = other_3297;
    let _e286: MultiVector = self_3667;
    let _e290: Point = other_3297;
    let _e301: MultiVector = self_3667;
    let _e305: Point = other_3297;
    let _e316: MultiVector = self_3667;
    let _e320: Point = other_3297;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2<f32>(_e45.g4_.x, _e48.g1_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2(-1.0))), ((((((vec4(_e64.g0_.y) * _e68.g0_) + ((vec4(_e71.g2_.y) * _e75.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e86.g2_.z) * _e90.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e101.g3_.y) * vec4(_e105.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e117.g3_.z) * vec4(_e121.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e133.g3_.x, _e136.g2_.x, _e139.g2_.x, _e142.g2_.x) * _e146.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((vec3<f32>(_e157.g4_.x, _e160.g4_.y, _e163.g4_.z) * vec3(_e167.g0_.w)) * vec3(-1.0)), (((((vec3(_e175.g1_.w) * vec3<f32>(_e179.g0_.x, _e182.g0_.y, _e185.g0_.z)) + ((vec3(_e190.g4_.x) * vec3<f32>(_e194.g0_.z, _e197.g0_.z, _e200.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e211.g4_.y) * vec3<f32>(_e215.g0_.z, _e218.g0_.z, _e221.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e232.g4_.z) * vec3<f32>(_e236.g0_.y, _e239.g0_.x, _e242.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3<f32>(_e253.g1_.x, _e256.g1_.y, _e259.g1_.z) * vec3(_e263.g0_.w)) * vec3(-1.0))), (((((vec4(_e272.g2_.x) * _e276.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e286.g2_.y) * _e290.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e301.g2_.z) * _e305.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e316.g0_.x) * _e320.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_point_regressive_product(self_3668: MultiVector, other_3298: Point) -> MultiVector {
    var self_3669: MultiVector;
    var other_3299: Point;

    self_3669 = self_3668;
    other_3299 = other_3298;
    let _e4: MultiVector = self_3669;
    let _e8: Point = other_3299;
    let _e17: MultiVector = self_3669;
    let _e21: Point = other_3299;
    let _e31: MultiVector = self_3669;
    let _e35: Point = other_3299;
    let _e45: MultiVector = self_3669;
    let _e49: Point = other_3299;
    let _e59: MultiVector = self_3669;
    let _e63: Point = other_3299;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), (vec4(_e59.g0_.y) * _e63.g0_), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_point_anti_wedge(self_3670: MultiVector, other_3300: Point) -> MultiVector {
    var self_3671: MultiVector;
    var other_3301: Point;

    self_3671 = self_3670;
    other_3301 = other_3300;
    let _e4: MultiVector = self_3671;
    let _e8: Point = other_3301;
    let _e17: MultiVector = self_3671;
    let _e21: Point = other_3301;
    let _e31: MultiVector = self_3671;
    let _e35: Point = other_3301;
    let _e45: MultiVector = self_3671;
    let _e49: Point = other_3301;
    let _e59: MultiVector = self_3671;
    let _e63: Point = other_3301;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), (vec4(_e59.g0_.y) * _e63.g0_), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_point_meet(self_3672: MultiVector, other_3302: Point) -> MultiVector {
    var self_3673: MultiVector;
    var other_3303: Point;

    self_3673 = self_3672;
    other_3303 = other_3302;
    let _e4: MultiVector = self_3673;
    let _e8: Point = other_3303;
    let _e17: MultiVector = self_3673;
    let _e21: Point = other_3303;
    let _e31: MultiVector = self_3673;
    let _e35: Point = other_3303;
    let _e45: MultiVector = self_3673;
    let _e49: Point = other_3303;
    let _e59: MultiVector = self_3673;
    let _e63: Point = other_3303;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))), (vec4(_e59.g0_.y) * _e63.g0_), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_point_outer_product(self_3674: MultiVector, other_3304: Point) -> MultiVector {
    var self_3675: MultiVector;
    var other_3305: Point;

    self_3675 = self_3674;
    other_3305 = other_3304;
    let _e4: MultiVector = self_3675;
    let _e8: Point = other_3305;
    let _e17: MultiVector = self_3675;
    let _e21: Point = other_3305;
    let _e31: MultiVector = self_3675;
    let _e35: Point = other_3305;
    let _e45: MultiVector = self_3675;
    let _e49: Point = other_3305;
    let _e59: MultiVector = self_3675;
    let _e63: Point = other_3305;
    let _e66: MultiVector = self_3675;
    let _e70: Point = other_3305;
    let _e73: Point = other_3305;
    let _e76: Point = other_3305;
    let _e81: MultiVector = self_3675;
    let _e84: MultiVector = self_3675;
    let _e87: MultiVector = self_3675;
    let _e91: Point = other_3305;
    let _e100: MultiVector = self_3675;
    let _e104: Point = other_3305;
    let _e107: Point = other_3305;
    let _e110: Point = other_3305;
    let _e120: MultiVector = self_3675;
    let _e124: Point = other_3305;
    let _e127: Point = other_3305;
    let _e130: Point = other_3305;
    let _e141: MultiVector = self_3675;
    let _e145: Point = other_3305;
    let _e148: Point = other_3305;
    let _e151: Point = other_3305;
    let _e162: MultiVector = self_3675;
    let _e166: Point = other_3305;
    let _e176: MultiVector = self_3675;
    let _e180: Point = other_3305;
    let _e191: MultiVector = self_3675;
    let _e195: Point = other_3305;
    let _e206: MultiVector = self_3675;
    let _e210: Point = other_3305;
    let _e221: MultiVector = self_3675;
    let _e224: MultiVector = self_3675;
    let _e227: MultiVector = self_3675;
    let _e230: MultiVector = self_3675;
    let _e234: Point = other_3305;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e59.g0_.x) * _e63.g0_), ((vec3(_e66.g1_.w) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)) + ((vec3<f32>(_e81.g1_.x, _e84.g1_.y, _e87.g1_.z) * vec3(_e91.g0_.w)) * vec3(-1.0))), ((((vec3(_e100.g1_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g1_.z) * vec3<f32>(_e124.g0_.y, _e127.g0_.x, _e130.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g1_.x) * vec3<f32>(_e145.g0_.x, _e148.g0_.z, _e151.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e162.g2_.y) * _e166.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e176.g2_.z) * _e180.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e191.g3_.y) * _e195.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e206.g3_.z) * _e210.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e221.g3_.x, _e224.g2_.x, _e227.g2_.x, _e230.g3_.x) * _e234.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_point_wedge(self_3676: MultiVector, other_3306: Point) -> MultiVector {
    var self_3677: MultiVector;
    var other_3307: Point;

    self_3677 = self_3676;
    other_3307 = other_3306;
    let _e4: MultiVector = self_3677;
    let _e8: Point = other_3307;
    let _e17: MultiVector = self_3677;
    let _e21: Point = other_3307;
    let _e31: MultiVector = self_3677;
    let _e35: Point = other_3307;
    let _e45: MultiVector = self_3677;
    let _e49: Point = other_3307;
    let _e59: MultiVector = self_3677;
    let _e63: Point = other_3307;
    let _e66: MultiVector = self_3677;
    let _e70: Point = other_3307;
    let _e73: Point = other_3307;
    let _e76: Point = other_3307;
    let _e81: MultiVector = self_3677;
    let _e84: MultiVector = self_3677;
    let _e87: MultiVector = self_3677;
    let _e91: Point = other_3307;
    let _e100: MultiVector = self_3677;
    let _e104: Point = other_3307;
    let _e107: Point = other_3307;
    let _e110: Point = other_3307;
    let _e120: MultiVector = self_3677;
    let _e124: Point = other_3307;
    let _e127: Point = other_3307;
    let _e130: Point = other_3307;
    let _e141: MultiVector = self_3677;
    let _e145: Point = other_3307;
    let _e148: Point = other_3307;
    let _e151: Point = other_3307;
    let _e162: MultiVector = self_3677;
    let _e166: Point = other_3307;
    let _e176: MultiVector = self_3677;
    let _e180: Point = other_3307;
    let _e191: MultiVector = self_3677;
    let _e195: Point = other_3307;
    let _e206: MultiVector = self_3677;
    let _e210: Point = other_3307;
    let _e221: MultiVector = self_3677;
    let _e224: MultiVector = self_3677;
    let _e227: MultiVector = self_3677;
    let _e230: MultiVector = self_3677;
    let _e234: Point = other_3307;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e59.g0_.x) * _e63.g0_), ((vec3(_e66.g1_.w) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)) + ((vec3<f32>(_e81.g1_.x, _e84.g1_.y, _e87.g1_.z) * vec3(_e91.g0_.w)) * vec3(-1.0))), ((((vec3(_e100.g1_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g1_.z) * vec3<f32>(_e124.g0_.y, _e127.g0_.x, _e130.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g1_.x) * vec3<f32>(_e145.g0_.x, _e148.g0_.z, _e151.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e162.g2_.y) * _e166.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e176.g2_.z) * _e180.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e191.g3_.y) * _e195.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e206.g3_.z) * _e210.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e221.g3_.x, _e224.g2_.x, _e227.g2_.x, _e230.g3_.x) * _e234.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_point_join(self_3678: MultiVector, other_3308: Point) -> MultiVector {
    var self_3679: MultiVector;
    var other_3309: Point;

    self_3679 = self_3678;
    other_3309 = other_3308;
    let _e4: MultiVector = self_3679;
    let _e8: Point = other_3309;
    let _e17: MultiVector = self_3679;
    let _e21: Point = other_3309;
    let _e31: MultiVector = self_3679;
    let _e35: Point = other_3309;
    let _e45: MultiVector = self_3679;
    let _e49: Point = other_3309;
    let _e59: MultiVector = self_3679;
    let _e63: Point = other_3309;
    let _e66: MultiVector = self_3679;
    let _e70: Point = other_3309;
    let _e73: Point = other_3309;
    let _e76: Point = other_3309;
    let _e81: MultiVector = self_3679;
    let _e84: MultiVector = self_3679;
    let _e87: MultiVector = self_3679;
    let _e91: Point = other_3309;
    let _e100: MultiVector = self_3679;
    let _e104: Point = other_3309;
    let _e107: Point = other_3309;
    let _e110: Point = other_3309;
    let _e120: MultiVector = self_3679;
    let _e124: Point = other_3309;
    let _e127: Point = other_3309;
    let _e130: Point = other_3309;
    let _e141: MultiVector = self_3679;
    let _e145: Point = other_3309;
    let _e148: Point = other_3309;
    let _e151: Point = other_3309;
    let _e162: MultiVector = self_3679;
    let _e166: Point = other_3309;
    let _e176: MultiVector = self_3679;
    let _e180: Point = other_3309;
    let _e191: MultiVector = self_3679;
    let _e195: Point = other_3309;
    let _e206: MultiVector = self_3679;
    let _e210: Point = other_3309;
    let _e221: MultiVector = self_3679;
    let _e224: MultiVector = self_3679;
    let _e227: MultiVector = self_3679;
    let _e230: MultiVector = self_3679;
    let _e234: Point = other_3309;
    return MultiVector((((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))), (vec4(_e59.g0_.x) * _e63.g0_), ((vec3(_e66.g1_.w) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)) + ((vec3<f32>(_e81.g1_.x, _e84.g1_.y, _e87.g1_.z) * vec3(_e91.g0_.w)) * vec3(-1.0))), ((((vec3(_e100.g1_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e120.g1_.z) * vec3<f32>(_e124.g0_.y, _e127.g0_.x, _e130.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e141.g1_.x) * vec3<f32>(_e145.g0_.x, _e148.g0_.z, _e151.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e162.g2_.y) * _e166.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e176.g2_.z) * _e180.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e191.g3_.y) * _e195.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e206.g3_.z) * _e210.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e221.g3_.x, _e224.g2_.x, _e227.g2_.x, _e230.g3_.x) * _e234.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_point_inner_product(self_3680: MultiVector, other_3310: Point) -> MultiVector {
    var self_3681: MultiVector;
    var other_3311: Point;

    self_3681 = self_3680;
    other_3311 = other_3310;
    let _e4: MultiVector = self_3681;
    let _e8: Point = other_3311;
    let _e17: MultiVector = self_3681;
    let _e21: Point = other_3311;
    let _e31: MultiVector = self_3681;
    let _e35: Point = other_3311;
    let _e45: MultiVector = self_3681;
    let _e49: Point = other_3311;
    let _e52: MultiVector = self_3681;
    let _e56: Point = other_3311;
    let _e68: MultiVector = self_3681;
    let _e72: Point = other_3311;
    let _e84: MultiVector = self_3681;
    let _e88: Point = other_3311;
    let _e99: MultiVector = self_3681;
    let _e103: Point = other_3311;
    let _e114: MultiVector = self_3681;
    let _e117: MultiVector = self_3681;
    let _e120: MultiVector = self_3681;
    let _e123: MultiVector = self_3681;
    let _e127: Point = other_3311;
    let _e138: MultiVector = self_3681;
    let _e142: Point = other_3311;
    let _e145: Point = other_3311;
    let _e148: Point = other_3311;
    let _e158: MultiVector = self_3681;
    let _e162: Point = other_3311;
    let _e165: Point = other_3311;
    let _e168: Point = other_3311;
    let _e179: MultiVector = self_3681;
    let _e183: Point = other_3311;
    let _e186: Point = other_3311;
    let _e189: Point = other_3311;
    let _e202: MultiVector = self_3681;
    let _e206: Point = other_3311;
    let _e209: Point = other_3311;
    let _e212: Point = other_3311;
    let _e218: MultiVector = self_3681;
    let _e221: MultiVector = self_3681;
    let _e224: MultiVector = self_3681;
    let _e227: MultiVector = self_3681;
    let _e231: Point = other_3311;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e45.g0_.x) * _e49.g0_) + ((vec4(_e52.g2_.y) * vec4(_e56.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e68.g2_.z) * vec4(_e72.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e84.g3_.y) * _e88.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e99.g3_.z) * _e103.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e114.g2_.x, _e117.g3_.x, _e120.g3_.x, _e123.g2_.x) * _e127.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), ((((vec3(_e138.g4_.y) * vec3<f32>(_e142.g0_.z, _e145.g0_.z, _e148.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e158.g4_.z) * vec3<f32>(_e162.g0_.y, _e165.g0_.x, _e168.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e179.g4_.x) * vec3<f32>(_e183.g0_.x, _e186.g0_.z, _e189.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e202.g4_.w) * vec3<f32>(_e206.g0_.x, _e209.g0_.y, _e212.g0_.z))), ((vec4<f32>(_e218.g0_.y, _e221.g0_.y, _e224.g0_.y, _e227.g0_.x) * _e231.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn multi_vector_point_inner_anti_product(self_3682: MultiVector, other_3312: Point) -> MultiVector {
    var self_3683: MultiVector;
    var other_3313: Point;

    self_3683 = self_3682;
    other_3313 = other_3312;
    let _e4: MultiVector = self_3683;
    let _e7: MultiVector = self_3683;
    let _e11: Point = other_3313;
    let _e14: Point = other_3313;
    let _e23: MultiVector = self_3683;
    let _e27: Point = other_3313;
    let _e30: MultiVector = self_3683;
    let _e33: MultiVector = self_3683;
    let _e36: MultiVector = self_3683;
    let _e40: Point = other_3313;
    let _e48: MultiVector = self_3683;
    let _e52: Point = other_3313;
    let _e55: Point = other_3313;
    let _e58: Point = other_3313;
    let _e68: MultiVector = self_3683;
    let _e72: Point = other_3313;
    let _e75: Point = other_3313;
    let _e78: Point = other_3313;
    let _e89: MultiVector = self_3683;
    let _e93: Point = other_3313;
    let _e96: Point = other_3313;
    let _e99: Point = other_3313;
    let _e110: MultiVector = self_3683;
    let _e114: Point = other_3313;
    let _e124: MultiVector = self_3683;
    let _e128: Point = other_3313;
    let _e139: MultiVector = self_3683;
    let _e143: Point = other_3313;
    let _e154: MultiVector = self_3683;
    let _e158: Point = other_3313;
    return MultiVector(((vec2<f32>(_e4.g1_.x, _e7.g1_.w) * vec2<f32>(_e11.g0_.x, _e14.g0_.w)) * vec2<f32>(0.0, -1.0)), (vec4(_e23.g0_.y) * _e27.g0_), ((vec3<f32>(_e30.g4_.x, _e33.g4_.y, _e36.g4_.z) * vec3(_e40.g0_.w)) * vec3(-1.0)), ((((vec3(_e48.g4_.y) * vec3<f32>(_e52.g0_.z, _e55.g0_.z, _e58.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e68.g4_.z) * vec3<f32>(_e72.g0_.y, _e75.g0_.x, _e78.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e89.g4_.x) * vec3<f32>(_e93.g0_.x, _e96.g0_.z, _e99.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((vec4(_e110.g2_.x) * _e114.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e124.g2_.y) * _e128.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e139.g2_.z) * _e143.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e154.g0_.x) * _e158.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_point_left_contraction(self_3684: MultiVector, other_3314: Point) -> MultiVector {
    var self_3685: MultiVector;
    var other_3315: Point;

    self_3685 = self_3684;
    other_3315 = other_3314;
    let _e4: MultiVector = self_3685;
    let _e8: Point = other_3315;
    let _e17: MultiVector = self_3685;
    let _e21: Point = other_3315;
    let _e31: MultiVector = self_3685;
    let _e35: Point = other_3315;
    let _e45: MultiVector = self_3685;
    let _e49: Point = other_3315;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), (vec4(_e45.g0_.x) * _e49.g0_), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_point_right_contraction(self_3686: MultiVector, other_3316: Point) -> MultiVector {
    var self_3687: MultiVector;
    var other_3317: Point;

    self_3687 = self_3686;
    other_3317 = other_3316;
    let _e4: MultiVector = self_3687;
    let _e8: Point = other_3317;
    let _e17: MultiVector = self_3687;
    let _e21: Point = other_3317;
    let _e31: MultiVector = self_3687;
    let _e35: Point = other_3317;
    let _e45: MultiVector = self_3687;
    let _e49: Point = other_3317;
    let _e60: MultiVector = self_3687;
    let _e64: Point = other_3317;
    let _e76: MultiVector = self_3687;
    let _e80: Point = other_3317;
    let _e91: MultiVector = self_3687;
    let _e95: Point = other_3317;
    let _e106: MultiVector = self_3687;
    let _e109: MultiVector = self_3687;
    let _e112: MultiVector = self_3687;
    let _e115: MultiVector = self_3687;
    let _e119: Point = other_3317;
    let _e130: MultiVector = self_3687;
    let _e134: Point = other_3317;
    let _e137: Point = other_3317;
    let _e140: Point = other_3317;
    let _e150: MultiVector = self_3687;
    let _e154: Point = other_3317;
    let _e157: Point = other_3317;
    let _e160: Point = other_3317;
    let _e171: MultiVector = self_3687;
    let _e175: Point = other_3317;
    let _e178: Point = other_3317;
    let _e181: Point = other_3317;
    let _e194: MultiVector = self_3687;
    let _e198: Point = other_3317;
    let _e201: Point = other_3317;
    let _e204: Point = other_3317;
    let _e210: MultiVector = self_3687;
    let _e213: MultiVector = self_3687;
    let _e216: MultiVector = self_3687;
    let _e219: MultiVector = self_3687;
    let _e223: Point = other_3317;
    return MultiVector(((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.x) * vec2(_e35.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e45.g2_.y) * vec4(_e49.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e60.g2_.z) * vec4(_e64.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e76.g3_.y) * _e80.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e91.g3_.z) * _e95.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e106.g2_.x, _e109.g3_.x, _e112.g3_.x, _e115.g2_.x) * _e119.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), ((((vec3(_e130.g4_.y) * vec3<f32>(_e134.g0_.z, _e137.g0_.z, _e140.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e150.g4_.z) * vec3<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e171.g4_.x) * vec3<f32>(_e175.g0_.x, _e178.g0_.z, _e181.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e194.g4_.w) * vec3<f32>(_e198.g0_.x, _e201.g0_.y, _e204.g0_.z))), ((vec4<f32>(_e210.g0_.y, _e213.g0_.y, _e216.g0_.y, _e219.g0_.x) * _e223.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn multi_vector_point_left_anti_contraction(self_3688: MultiVector, other_3318: Point) -> MultiVector {
    var self_3689: MultiVector;
    var other_3319: Point;

    self_3689 = self_3688;
    other_3319 = other_3318;
    let _e4: MultiVector = self_3689;
    let _e7: MultiVector = self_3689;
    let _e11: Point = other_3319;
    let _e14: Point = other_3319;
    let _e23: MultiVector = self_3689;
    let _e27: Point = other_3319;
    let _e30: MultiVector = self_3689;
    let _e33: MultiVector = self_3689;
    let _e36: MultiVector = self_3689;
    let _e40: Point = other_3319;
    let _e48: MultiVector = self_3689;
    let _e52: Point = other_3319;
    let _e55: Point = other_3319;
    let _e58: Point = other_3319;
    let _e68: MultiVector = self_3689;
    let _e72: Point = other_3319;
    let _e75: Point = other_3319;
    let _e78: Point = other_3319;
    let _e89: MultiVector = self_3689;
    let _e93: Point = other_3319;
    let _e96: Point = other_3319;
    let _e99: Point = other_3319;
    let _e110: MultiVector = self_3689;
    let _e114: Point = other_3319;
    let _e124: MultiVector = self_3689;
    let _e128: Point = other_3319;
    let _e139: MultiVector = self_3689;
    let _e143: Point = other_3319;
    return MultiVector(((vec2<f32>(_e4.g1_.x, _e7.g1_.w) * vec2<f32>(_e11.g0_.x, _e14.g0_.w)) * vec2<f32>(0.0, -1.0)), (vec4(_e23.g0_.y) * _e27.g0_), ((vec3<f32>(_e30.g4_.x, _e33.g4_.y, _e36.g4_.z) * vec3(_e40.g0_.w)) * vec3(-1.0)), ((((vec3(_e48.g4_.y) * vec3<f32>(_e52.g0_.z, _e55.g0_.z, _e58.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e68.g4_.z) * vec3<f32>(_e72.g0_.y, _e75.g0_.x, _e78.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e89.g4_.x) * vec3<f32>(_e93.g0_.x, _e96.g0_.z, _e99.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((vec4(_e110.g2_.y) * _e114.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e124.g2_.z) * _e128.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e139.g2_.x) * _e143.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn multi_vector_point_right_anti_contraction(self_3690: MultiVector, other_3320: Point) -> MultiVector {
    var self_3691: MultiVector;
    var other_3321: Point;

    self_3691 = self_3690;
    other_3321 = other_3320;
    let _e4: MultiVector = self_3691;
    let _e7: MultiVector = self_3691;
    let _e11: Point = other_3321;
    let _e14: Point = other_3321;
    let _e29: MultiVector = self_3691;
    let _e33: Point = other_3321;
    return MultiVector(((vec2<f32>(_e4.g1_.x, _e7.g1_.w) * vec2<f32>(_e11.g0_.x, _e14.g0_.w)) * vec2<f32>(0.0, -1.0)), vec4(0.0), vec3(0.0), vec3(0.0), ((vec4(_e29.g0_.x) * _e33.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn multi_vector_point_scalar_product(self_3692: MultiVector, other_3322: Point) -> Scalar {
    var self_3693: MultiVector;
    var other_3323: Point;

    self_3693 = self_3692;
    other_3323 = other_3322;
    let _e4: MultiVector = self_3693;
    let _e7: Point = other_3323;
    let _e11: MultiVector = self_3693;
    let _e14: Point = other_3323;
    let _e19: MultiVector = self_3693;
    let _e22: Point = other_3323;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn multi_vector_point_dot(self_3694: MultiVector, other_3324: Point) -> Scalar {
    var self_3695: MultiVector;
    var other_3325: Point;

    self_3695 = self_3694;
    other_3325 = other_3324;
    let _e4: MultiVector = self_3695;
    let _e7: Point = other_3325;
    let _e11: MultiVector = self_3695;
    let _e14: Point = other_3325;
    let _e19: MultiVector = self_3695;
    let _e22: Point = other_3325;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn multi_vector_point_anti_scalar_product(self_3696: MultiVector, other_3326: Point) -> AntiScalar {
    var self_3697: MultiVector;
    var other_3327: Point;

    self_3697 = self_3696;
    other_3327 = other_3326;
    let _e5: MultiVector = self_3697;
    let _e8: Point = other_3327;
    return AntiScalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn multi_vector_point_anti_dot(self_3698: MultiVector, other_3328: Point) -> AntiScalar {
    var self_3699: MultiVector;
    var other_3329: Point;

    self_3699 = self_3698;
    other_3329 = other_3328;
    let _e5: MultiVector = self_3699;
    let _e8: Point = other_3329;
    return AntiScalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn multi_vector_line_into(self_3700: MultiVector) -> Line {
    var self_3701: MultiVector;

    self_3701 = self_3700;
    let _e2: MultiVector = self_3701;
    let _e4: MultiVector = self_3701;
    return Line(_e2.g2_, _e4.g3_);
}

fn multi_vector_line_add(self_3702: MultiVector, other_3330: Line) -> MultiVector {
    var self_3703: MultiVector;
    var other_3331: Line;

    self_3703 = self_3702;
    other_3331 = other_3330;
    let _e4: MultiVector = self_3703;
    let _e6: MultiVector = self_3703;
    let _e8: MultiVector = self_3703;
    let _e10: Line = other_3331;
    let _e13: MultiVector = self_3703;
    let _e15: Line = other_3331;
    let _e18: MultiVector = self_3703;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g2_ + _e10.g0_), (_e13.g3_ + _e15.g1_), _e18.g4_);
}

fn multi_vector_line_sub(self_3704: MultiVector, other_3332: Line) -> MultiVector {
    var self_3705: MultiVector;
    var other_3333: Line;

    self_3705 = self_3704;
    other_3333 = other_3332;
    let _e4: MultiVector = self_3705;
    let _e6: MultiVector = self_3705;
    let _e8: MultiVector = self_3705;
    let _e10: Line = other_3333;
    let _e13: MultiVector = self_3705;
    let _e15: Line = other_3333;
    let _e18: MultiVector = self_3705;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g2_ - _e10.g0_), (_e13.g3_ - _e15.g1_), _e18.g4_);
}

fn multi_vector_line_geometric_product(self_3706: MultiVector, other_3334: Line) -> MultiVector {
    var self_3707: MultiVector;
    var other_3335: Line;

    self_3707 = self_3706;
    other_3335 = other_3334;
    let _e4: MultiVector = self_3707;
    let _e8: Line = other_3335;
    let _e17: MultiVector = self_3707;
    let _e21: Line = other_3335;
    let _e31: MultiVector = self_3707;
    let _e35: Line = other_3335;
    let _e38: Line = other_3335;
    let _e44: MultiVector = self_3707;
    let _e48: Line = other_3335;
    let _e51: Line = other_3335;
    let _e57: MultiVector = self_3707;
    let _e61: Line = other_3335;
    let _e64: Line = other_3335;
    let _e70: MultiVector = self_3707;
    let _e74: Line = other_3335;
    let _e84: MultiVector = self_3707;
    let _e88: Line = other_3335;
    let _e91: Line = other_3335;
    let _e94: Line = other_3335;
    let _e97: Line = other_3335;
    let _e108: MultiVector = self_3707;
    let _e112: Line = other_3335;
    let _e115: Line = other_3335;
    let _e118: Line = other_3335;
    let _e121: Line = other_3335;
    let _e133: MultiVector = self_3707;
    let _e137: Line = other_3335;
    let _e149: MultiVector = self_3707;
    let _e153: Line = other_3335;
    let _e165: MultiVector = self_3707;
    let _e169: Line = other_3335;
    let _e181: MultiVector = self_3707;
    let _e185: Line = other_3335;
    let _e188: Line = other_3335;
    let _e191: Line = other_3335;
    let _e194: Line = other_3335;
    let _e206: MultiVector = self_3707;
    let _e210: Line = other_3335;
    let _e213: Line = other_3335;
    let _e216: Line = other_3335;
    let _e219: Line = other_3335;
    let _e231: MultiVector = self_3707;
    let _e235: Line = other_3335;
    let _e238: MultiVector = self_3707;
    let _e242: Line = other_3335;
    let _e246: MultiVector = self_3707;
    let _e250: Line = other_3335;
    let _e260: MultiVector = self_3707;
    let _e264: Line = other_3335;
    let _e274: MultiVector = self_3707;
    let _e278: Line = other_3335;
    let _e288: MultiVector = self_3707;
    let _e292: Line = other_3335;
    let _e302: MultiVector = self_3707;
    let _e306: Line = other_3335;
    let _e316: MultiVector = self_3707;
    let _e320: Line = other_3335;
    let _e330: MultiVector = self_3707;
    let _e334: Line = other_3335;
    let _e337: MultiVector = self_3707;
    let _e341: Line = other_3335;
    let _e351: MultiVector = self_3707;
    let _e355: Line = other_3335;
    let _e365: MultiVector = self_3707;
    let _e369: Line = other_3335;
    let _e379: MultiVector = self_3707;
    let _e383: Line = other_3335;
    let _e386: Line = other_3335;
    let _e389: Line = other_3335;
    let _e392: Line = other_3335;
    let _e403: MultiVector = self_3707;
    let _e407: Line = other_3335;
    let _e410: Line = other_3335;
    let _e413: Line = other_3335;
    let _e416: Line = other_3335;
    let _e428: MultiVector = self_3707;
    let _e432: Line = other_3335;
    let _e435: Line = other_3335;
    let _e438: Line = other_3335;
    let _e441: Line = other_3335;
    let _e453: MultiVector = self_3707;
    let _e457: Line = other_3335;
    let _e460: Line = other_3335;
    let _e463: Line = other_3335;
    let _e466: Line = other_3335;
    let _e478: MultiVector = self_3707;
    let _e482: Line = other_3335;
    let _e485: Line = other_3335;
    let _e488: Line = other_3335;
    let _e491: Line = other_3335;
    let _e503: MultiVector = self_3707;
    let _e507: Line = other_3335;
    let _e510: Line = other_3335;
    let _e513: Line = other_3335;
    let _e516: Line = other_3335;
    let _e528: MultiVector = self_3707;
    let _e532: Line = other_3335;
    let _e535: Line = other_3335;
    let _e538: Line = other_3335;
    let _e541: Line = other_3335;
    let _e553: MultiVector = self_3707;
    let _e557: Line = other_3335;
    let _e560: Line = other_3335;
    let _e563: Line = other_3335;
    let _e566: Line = other_3335;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e31.g3_.x) * vec2<f32>(_e35.g1_.x, _e38.g0_.x))) - (vec2(_e44.g3_.y) * vec2<f32>(_e48.g1_.y, _e51.g0_.y))) - (vec2(_e57.g3_.z) * vec2<f32>(_e61.g1_.z, _e64.g0_.z))) + ((vec2(_e70.g2_.x) * vec2(_e74.g1_.x)) * vec2<f32>(0.0, -1.0))), ((((((((vec4(_e84.g1_.y) * vec4<f32>(_e88.g1_.z, _e91.g1_.z, _e94.g1_.x, _e97.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e108.g1_.z) * vec4<f32>(_e112.g1_.y, _e115.g1_.x, _e118.g1_.y, _e121.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e133.g4_.x) * vec4(_e137.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e149.g4_.y) * vec4(_e153.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e165.g4_.z) * vec4(_e169.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e181.g4_.w) * vec4<f32>(_e185.g1_.x, _e188.g1_.y, _e191.g1_.z, _e194.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e206.g1_.x) * vec4<f32>(_e210.g1_.x, _e213.g1_.z, _e216.g1_.y, _e219.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((((((vec3(_e231.g0_.x) * _e235.g0_) + (vec3(_e238.g0_.y) * _e242.g1_)) + ((vec3(_e246.g2_.y) * _e250.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e260.g2_.z) * _e264.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e274.g3_.x) * _e278.g0_.zzy) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e288.g3_.y) * _e292.g0_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e302.g3_.z) * _e306.g0_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e316.g2_.x) * _e320.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e330.g0_.x) * _e334.g1_) + ((vec3(_e337.g3_.y) * _e341.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e351.g3_.z) * _e355.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e365.g3_.x) * _e369.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), (((((((((vec4(_e379.g1_.y) * vec4<f32>(_e383.g0_.z, _e386.g0_.z, _e389.g0_.x, _e392.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e403.g1_.z) * vec4<f32>(_e407.g0_.y, _e410.g0_.x, _e413.g0_.y, _e416.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e428.g1_.w) * vec4<f32>(_e432.g1_.x, _e435.g1_.y, _e438.g1_.z, _e441.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e453.g4_.x) * vec4<f32>(_e457.g1_.z, _e460.g1_.z, _e463.g1_.y, _e466.g1_.z)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e478.g4_.y) * vec4<f32>(_e482.g1_.z, _e485.g1_.z, _e488.g1_.x, _e491.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e503.g4_.z) * vec4<f32>(_e507.g1_.y, _e510.g1_.x, _e513.g1_.y, _e516.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e528.g4_.w) * vec4<f32>(_e532.g0_.x, _e535.g0_.y, _e538.g0_.z, _e541.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e553.g1_.x) * vec4<f32>(_e557.g0_.x, _e560.g0_.z, _e563.g0_.y, _e566.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_line_geometric_anti_product(self_3708: MultiVector, other_3336: Line) -> MultiVector {
    var self_3709: MultiVector;
    var other_3337: Line;

    self_3709 = self_3708;
    other_3337 = other_3336;
    let _e6: MultiVector = self_3709;
    let _e10: Line = other_3337;
    let _e13: Line = other_3337;
    let _e19: MultiVector = self_3709;
    let _e23: Line = other_3337;
    let _e26: Line = other_3337;
    let _e32: MultiVector = self_3709;
    let _e36: Line = other_3337;
    let _e39: Line = other_3337;
    let _e45: MultiVector = self_3709;
    let _e49: Line = other_3337;
    let _e59: MultiVector = self_3709;
    let _e63: Line = other_3337;
    let _e73: MultiVector = self_3709;
    let _e77: Line = other_3337;
    let _e87: MultiVector = self_3709;
    let _e91: Line = other_3337;
    let _e94: Line = other_3337;
    let _e97: Line = other_3337;
    let _e100: Line = other_3337;
    let _e111: MultiVector = self_3709;
    let _e115: Line = other_3337;
    let _e118: Line = other_3337;
    let _e121: Line = other_3337;
    let _e124: Line = other_3337;
    let _e136: MultiVector = self_3709;
    let _e140: Line = other_3337;
    let _e143: Line = other_3337;
    let _e146: Line = other_3337;
    let _e149: Line = other_3337;
    let _e161: MultiVector = self_3709;
    let _e165: Line = other_3337;
    let _e168: Line = other_3337;
    let _e171: Line = other_3337;
    let _e174: Line = other_3337;
    let _e186: MultiVector = self_3709;
    let _e190: Line = other_3337;
    let _e193: Line = other_3337;
    let _e196: Line = other_3337;
    let _e199: Line = other_3337;
    let _e211: MultiVector = self_3709;
    let _e215: Line = other_3337;
    let _e218: Line = other_3337;
    let _e221: Line = other_3337;
    let _e224: Line = other_3337;
    let _e236: MultiVector = self_3709;
    let _e240: Line = other_3337;
    let _e243: Line = other_3337;
    let _e246: Line = other_3337;
    let _e249: Line = other_3337;
    let _e261: MultiVector = self_3709;
    let _e265: Line = other_3337;
    let _e268: Line = other_3337;
    let _e271: Line = other_3337;
    let _e274: Line = other_3337;
    let _e286: MultiVector = self_3709;
    let _e290: Line = other_3337;
    let _e293: MultiVector = self_3709;
    let _e297: Line = other_3337;
    let _e307: MultiVector = self_3709;
    let _e311: Line = other_3337;
    let _e321: MultiVector = self_3709;
    let _e325: Line = other_3337;
    let _e335: MultiVector = self_3709;
    let _e339: Line = other_3337;
    let _e342: MultiVector = self_3709;
    let _e346: Line = other_3337;
    let _e350: MultiVector = self_3709;
    let _e354: Line = other_3337;
    let _e364: MultiVector = self_3709;
    let _e368: Line = other_3337;
    let _e378: MultiVector = self_3709;
    let _e382: Line = other_3337;
    let _e392: MultiVector = self_3709;
    let _e396: Line = other_3337;
    let _e406: MultiVector = self_3709;
    let _e410: Line = other_3337;
    let _e420: MultiVector = self_3709;
    let _e424: Line = other_3337;
    let _e434: MultiVector = self_3709;
    let _e438: Line = other_3337;
    let _e449: MultiVector = self_3709;
    let _e453: Line = other_3337;
    let _e465: MultiVector = self_3709;
    let _e469: Line = other_3337;
    let _e472: Line = other_3337;
    let _e475: Line = other_3337;
    let _e478: Line = other_3337;
    let _e490: MultiVector = self_3709;
    let _e494: Line = other_3337;
    let _e497: Line = other_3337;
    let _e500: Line = other_3337;
    let _e503: Line = other_3337;
    let _e515: MultiVector = self_3709;
    let _e519: Line = other_3337;
    let _e522: Line = other_3337;
    let _e525: Line = other_3337;
    let _e528: Line = other_3337;
    let _e540: MultiVector = self_3709;
    let _e543: Line = other_3337;
    let _e546: Line = other_3337;
    let _e549: Line = other_3337;
    let _e552: Line = other_3337;
    return MultiVector(((((((vec2(0.0) - (vec2(_e6.g2_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g2_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g2_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.x) * vec2(_e77.g0_.x)) * vec2<f32>(-1.0, 0.0))), (((((((((vec4(_e87.g1_.y) * vec4<f32>(_e91.g0_.z, _e94.g0_.z, _e97.g0_.x, _e100.g0_.z)) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e111.g1_.z) * vec4<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y, _e124.g0_.y)) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e136.g1_.w) * vec4<f32>(_e140.g1_.x, _e143.g1_.y, _e146.g1_.z, _e149.g1_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))) + ((vec4(_e161.g4_.x) * vec4<f32>(_e165.g1_.z, _e168.g1_.z, _e171.g1_.y, _e174.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e186.g4_.y) * vec4<f32>(_e190.g1_.z, _e193.g1_.z, _e196.g1_.x, _e199.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e211.g4_.z) * vec4<f32>(_e215.g1_.y, _e218.g1_.x, _e221.g1_.y, _e224.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e236.g4_.w) * vec4<f32>(_e240.g0_.x, _e243.g0_.y, _e246.g0_.z, _e249.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e261.g1_.x) * vec4<f32>(_e265.g0_.x, _e268.g0_.z, _e271.g0_.y, _e274.g0_.x)) * vec4<f32>(0.0, -1.0, 1.0, 0.0))), ((((vec3(_e286.g0_.y) * _e290.g0_) + ((vec3(_e293.g2_.y) * _e297.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e307.g2_.z) * _e311.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e321.g2_.x) * _e325.g0_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), ((((((((vec3(_e335.g0_.x) * _e339.g0_) + (vec3(_e342.g0_.y) * _e346.g1_)) + ((vec3(_e350.g2_.y) * _e354.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e364.g2_.z) * _e368.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e378.g3_.x) * _e382.g0_.zzy) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e392.g3_.y) * _e396.g0_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e406.g3_.z) * _e410.g0_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e420.g2_.x) * _e424.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), (((((((vec4(_e434.g1_.y) * vec4(_e438.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e449.g1_.z) * vec4(_e453.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e465.g4_.x) * vec4<f32>(_e469.g0_.z, _e472.g0_.z, _e475.g0_.y, _e478.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))) + ((vec4(_e490.g4_.y) * vec4<f32>(_e494.g0_.z, _e497.g0_.z, _e500.g0_.x, _e503.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e515.g4_.z) * vec4<f32>(_e519.g0_.y, _e522.g0_.x, _e525.g0_.y, _e528.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e540.g1_.wwwx * vec4<f32>(_e543.g0_.x, _e546.g0_.y, _e549.g0_.z, _e552.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_line_regressive_product(self_3710: MultiVector, other_3338: Line) -> MultiVector {
    var self_3711: MultiVector;
    var other_3339: Line;

    self_3711 = self_3710;
    other_3339 = other_3338;
    let _e4: MultiVector = self_3711;
    let _e8: Line = other_3339;
    let _e17: MultiVector = self_3711;
    let _e21: Line = other_3339;
    let _e31: MultiVector = self_3711;
    let _e35: Line = other_3339;
    let _e45: MultiVector = self_3711;
    let _e49: Line = other_3339;
    let _e59: MultiVector = self_3711;
    let _e63: Line = other_3339;
    let _e73: MultiVector = self_3711;
    let _e77: Line = other_3339;
    let _e87: MultiVector = self_3711;
    let _e91: Line = other_3339;
    let _e94: Line = other_3339;
    let _e97: Line = other_3339;
    let _e100: Line = other_3339;
    let _e111: MultiVector = self_3711;
    let _e115: Line = other_3339;
    let _e118: Line = other_3339;
    let _e121: Line = other_3339;
    let _e124: Line = other_3339;
    let _e136: MultiVector = self_3711;
    let _e140: Line = other_3339;
    let _e143: Line = other_3339;
    let _e146: Line = other_3339;
    let _e149: Line = other_3339;
    let _e161: MultiVector = self_3711;
    let _e165: Line = other_3339;
    let _e168: Line = other_3339;
    let _e171: Line = other_3339;
    let _e174: Line = other_3339;
    let _e186: MultiVector = self_3711;
    let _e190: Line = other_3339;
    let _e193: MultiVector = self_3711;
    let _e197: Line = other_3339;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e87.g4_.y) * vec4<f32>(_e91.g1_.z, _e94.g1_.z, _e97.g1_.x, _e100.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e111.g4_.z) * vec4<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g1_.y, _e124.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e136.g4_.w) * vec4<f32>(_e140.g0_.x, _e143.g0_.y, _e146.g0_.z, _e149.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e161.g4_.x) * vec4<f32>(_e165.g1_.x, _e168.g1_.z, _e171.g1_.y, _e174.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(_e186.g0_.y) * _e190.g0_), (vec3(_e193.g0_.y) * _e197.g1_), vec4(0.0));
}

fn multi_vector_line_anti_wedge(self_3712: MultiVector, other_3340: Line) -> MultiVector {
    var self_3713: MultiVector;
    var other_3341: Line;

    self_3713 = self_3712;
    other_3341 = other_3340;
    let _e4: MultiVector = self_3713;
    let _e8: Line = other_3341;
    let _e17: MultiVector = self_3713;
    let _e21: Line = other_3341;
    let _e31: MultiVector = self_3713;
    let _e35: Line = other_3341;
    let _e45: MultiVector = self_3713;
    let _e49: Line = other_3341;
    let _e59: MultiVector = self_3713;
    let _e63: Line = other_3341;
    let _e73: MultiVector = self_3713;
    let _e77: Line = other_3341;
    let _e87: MultiVector = self_3713;
    let _e91: Line = other_3341;
    let _e94: Line = other_3341;
    let _e97: Line = other_3341;
    let _e100: Line = other_3341;
    let _e111: MultiVector = self_3713;
    let _e115: Line = other_3341;
    let _e118: Line = other_3341;
    let _e121: Line = other_3341;
    let _e124: Line = other_3341;
    let _e136: MultiVector = self_3713;
    let _e140: Line = other_3341;
    let _e143: Line = other_3341;
    let _e146: Line = other_3341;
    let _e149: Line = other_3341;
    let _e161: MultiVector = self_3713;
    let _e165: Line = other_3341;
    let _e168: Line = other_3341;
    let _e171: Line = other_3341;
    let _e174: Line = other_3341;
    let _e186: MultiVector = self_3713;
    let _e190: Line = other_3341;
    let _e193: MultiVector = self_3713;
    let _e197: Line = other_3341;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e87.g4_.y) * vec4<f32>(_e91.g1_.z, _e94.g1_.z, _e97.g1_.x, _e100.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e111.g4_.z) * vec4<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g1_.y, _e124.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e136.g4_.w) * vec4<f32>(_e140.g0_.x, _e143.g0_.y, _e146.g0_.z, _e149.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e161.g4_.x) * vec4<f32>(_e165.g1_.x, _e168.g1_.z, _e171.g1_.y, _e174.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(_e186.g0_.y) * _e190.g0_), (vec3(_e193.g0_.y) * _e197.g1_), vec4(0.0));
}

fn multi_vector_line_meet(self_3714: MultiVector, other_3342: Line) -> MultiVector {
    var self_3715: MultiVector;
    var other_3343: Line;

    self_3715 = self_3714;
    other_3343 = other_3342;
    let _e4: MultiVector = self_3715;
    let _e8: Line = other_3343;
    let _e17: MultiVector = self_3715;
    let _e21: Line = other_3343;
    let _e31: MultiVector = self_3715;
    let _e35: Line = other_3343;
    let _e45: MultiVector = self_3715;
    let _e49: Line = other_3343;
    let _e59: MultiVector = self_3715;
    let _e63: Line = other_3343;
    let _e73: MultiVector = self_3715;
    let _e77: Line = other_3343;
    let _e87: MultiVector = self_3715;
    let _e91: Line = other_3343;
    let _e94: Line = other_3343;
    let _e97: Line = other_3343;
    let _e100: Line = other_3343;
    let _e111: MultiVector = self_3715;
    let _e115: Line = other_3343;
    let _e118: Line = other_3343;
    let _e121: Line = other_3343;
    let _e124: Line = other_3343;
    let _e136: MultiVector = self_3715;
    let _e140: Line = other_3343;
    let _e143: Line = other_3343;
    let _e146: Line = other_3343;
    let _e149: Line = other_3343;
    let _e161: MultiVector = self_3715;
    let _e165: Line = other_3343;
    let _e168: Line = other_3343;
    let _e171: Line = other_3343;
    let _e174: Line = other_3343;
    let _e186: MultiVector = self_3715;
    let _e190: Line = other_3343;
    let _e193: MultiVector = self_3715;
    let _e197: Line = other_3343;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(-1.0, 0.0))), (((((vec4(_e87.g4_.y) * vec4<f32>(_e91.g1_.z, _e94.g1_.z, _e97.g1_.x, _e100.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e111.g4_.z) * vec4<f32>(_e115.g1_.y, _e118.g1_.x, _e121.g1_.y, _e124.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e136.g4_.w) * vec4<f32>(_e140.g0_.x, _e143.g0_.y, _e146.g0_.z, _e149.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e161.g4_.x) * vec4<f32>(_e165.g1_.x, _e168.g1_.z, _e171.g1_.y, _e174.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(_e186.g0_.y) * _e190.g0_), (vec3(_e193.g0_.y) * _e197.g1_), vec4(0.0));
}

fn multi_vector_line_outer_product(self_3716: MultiVector, other_3344: Line) -> MultiVector {
    var self_3717: MultiVector;
    var other_3345: Line;

    self_3717 = self_3716;
    other_3345 = other_3344;
    let _e4: MultiVector = self_3717;
    let _e8: Line = other_3345;
    let _e17: MultiVector = self_3717;
    let _e21: Line = other_3345;
    let _e31: MultiVector = self_3717;
    let _e35: Line = other_3345;
    let _e45: MultiVector = self_3717;
    let _e49: Line = other_3345;
    let _e59: MultiVector = self_3717;
    let _e63: Line = other_3345;
    let _e73: MultiVector = self_3717;
    let _e77: Line = other_3345;
    let _e89: MultiVector = self_3717;
    let _e93: Line = other_3345;
    let _e96: MultiVector = self_3717;
    let _e100: Line = other_3345;
    let _e103: MultiVector = self_3717;
    let _e107: Line = other_3345;
    let _e110: Line = other_3345;
    let _e113: Line = other_3345;
    let _e116: Line = other_3345;
    let _e127: MultiVector = self_3717;
    let _e131: Line = other_3345;
    let _e134: Line = other_3345;
    let _e137: Line = other_3345;
    let _e140: Line = other_3345;
    let _e152: MultiVector = self_3717;
    let _e156: Line = other_3345;
    let _e159: Line = other_3345;
    let _e162: Line = other_3345;
    let _e165: Line = other_3345;
    let _e177: MultiVector = self_3717;
    let _e181: Line = other_3345;
    let _e184: Line = other_3345;
    let _e187: Line = other_3345;
    let _e190: Line = other_3345;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3(_e89.g0_.x) * _e93.g0_), (vec3(_e96.g0_.x) * _e100.g1_), (((((vec4(_e103.g1_.y) * vec4<f32>(_e107.g0_.z, _e110.g0_.z, _e113.g0_.x, _e116.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e127.g1_.z) * vec4<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.y, _e140.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e152.g1_.w) * vec4<f32>(_e156.g1_.x, _e159.g1_.y, _e162.g1_.z, _e165.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e177.g1_.x) * vec4<f32>(_e181.g0_.x, _e184.g0_.z, _e187.g0_.y, _e190.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_line_wedge(self_3718: MultiVector, other_3346: Line) -> MultiVector {
    var self_3719: MultiVector;
    var other_3347: Line;

    self_3719 = self_3718;
    other_3347 = other_3346;
    let _e4: MultiVector = self_3719;
    let _e8: Line = other_3347;
    let _e17: MultiVector = self_3719;
    let _e21: Line = other_3347;
    let _e31: MultiVector = self_3719;
    let _e35: Line = other_3347;
    let _e45: MultiVector = self_3719;
    let _e49: Line = other_3347;
    let _e59: MultiVector = self_3719;
    let _e63: Line = other_3347;
    let _e73: MultiVector = self_3719;
    let _e77: Line = other_3347;
    let _e89: MultiVector = self_3719;
    let _e93: Line = other_3347;
    let _e96: MultiVector = self_3719;
    let _e100: Line = other_3347;
    let _e103: MultiVector = self_3719;
    let _e107: Line = other_3347;
    let _e110: Line = other_3347;
    let _e113: Line = other_3347;
    let _e116: Line = other_3347;
    let _e127: MultiVector = self_3719;
    let _e131: Line = other_3347;
    let _e134: Line = other_3347;
    let _e137: Line = other_3347;
    let _e140: Line = other_3347;
    let _e152: MultiVector = self_3719;
    let _e156: Line = other_3347;
    let _e159: Line = other_3347;
    let _e162: Line = other_3347;
    let _e165: Line = other_3347;
    let _e177: MultiVector = self_3719;
    let _e181: Line = other_3347;
    let _e184: Line = other_3347;
    let _e187: Line = other_3347;
    let _e190: Line = other_3347;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3(_e89.g0_.x) * _e93.g0_), (vec3(_e96.g0_.x) * _e100.g1_), (((((vec4(_e103.g1_.y) * vec4<f32>(_e107.g0_.z, _e110.g0_.z, _e113.g0_.x, _e116.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e127.g1_.z) * vec4<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.y, _e140.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e152.g1_.w) * vec4<f32>(_e156.g1_.x, _e159.g1_.y, _e162.g1_.z, _e165.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e177.g1_.x) * vec4<f32>(_e181.g0_.x, _e184.g0_.z, _e187.g0_.y, _e190.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_line_join(self_3720: MultiVector, other_3348: Line) -> MultiVector {
    var self_3721: MultiVector;
    var other_3349: Line;

    self_3721 = self_3720;
    other_3349 = other_3348;
    let _e4: MultiVector = self_3721;
    let _e8: Line = other_3349;
    let _e17: MultiVector = self_3721;
    let _e21: Line = other_3349;
    let _e31: MultiVector = self_3721;
    let _e35: Line = other_3349;
    let _e45: MultiVector = self_3721;
    let _e49: Line = other_3349;
    let _e59: MultiVector = self_3721;
    let _e63: Line = other_3349;
    let _e73: MultiVector = self_3721;
    let _e77: Line = other_3349;
    let _e89: MultiVector = self_3721;
    let _e93: Line = other_3349;
    let _e96: MultiVector = self_3721;
    let _e100: Line = other_3349;
    let _e103: MultiVector = self_3721;
    let _e107: Line = other_3349;
    let _e110: Line = other_3349;
    let _e113: Line = other_3349;
    let _e116: Line = other_3349;
    let _e127: MultiVector = self_3721;
    let _e131: Line = other_3349;
    let _e134: Line = other_3349;
    let _e137: Line = other_3349;
    let _e140: Line = other_3349;
    let _e152: MultiVector = self_3721;
    let _e156: Line = other_3349;
    let _e159: Line = other_3349;
    let _e162: Line = other_3349;
    let _e165: Line = other_3349;
    let _e177: MultiVector = self_3721;
    let _e181: Line = other_3349;
    let _e184: Line = other_3349;
    let _e187: Line = other_3349;
    let _e190: Line = other_3349;
    return MultiVector((((((((vec2(_e4.g2_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.y) * vec2(_e49.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.z) * vec2(_e63.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g2_.x) * vec2(_e77.g1_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3(_e89.g0_.x) * _e93.g0_), (vec3(_e96.g0_.x) * _e100.g1_), (((((vec4(_e103.g1_.y) * vec4<f32>(_e107.g0_.z, _e110.g0_.z, _e113.g0_.x, _e116.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e127.g1_.z) * vec4<f32>(_e131.g0_.y, _e134.g0_.x, _e137.g0_.y, _e140.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e152.g1_.w) * vec4<f32>(_e156.g1_.x, _e159.g1_.y, _e162.g1_.z, _e165.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e177.g1_.x) * vec4<f32>(_e181.g0_.x, _e184.g0_.z, _e187.g0_.y, _e190.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_line_inner_product(self_3722: MultiVector, other_3350: Line) -> MultiVector {
    var self_3723: MultiVector;
    var other_3351: Line;

    self_3723 = self_3722;
    other_3351 = other_3350;
    let _e4: MultiVector = self_3723;
    let _e8: Line = other_3351;
    let _e17: MultiVector = self_3723;
    let _e21: Line = other_3351;
    let _e31: MultiVector = self_3723;
    let _e35: Line = other_3351;
    let _e45: MultiVector = self_3723;
    let _e49: Line = other_3351;
    let _e52: Line = other_3351;
    let _e55: Line = other_3351;
    let _e58: Line = other_3351;
    let _e69: MultiVector = self_3723;
    let _e73: Line = other_3351;
    let _e76: Line = other_3351;
    let _e79: Line = other_3351;
    let _e82: Line = other_3351;
    let _e94: MultiVector = self_3723;
    let _e98: Line = other_3351;
    let _e110: MultiVector = self_3723;
    let _e114: Line = other_3351;
    let _e126: MultiVector = self_3723;
    let _e130: Line = other_3351;
    let _e142: MultiVector = self_3723;
    let _e146: Line = other_3351;
    let _e149: Line = other_3351;
    let _e152: Line = other_3351;
    let _e155: Line = other_3351;
    let _e167: MultiVector = self_3723;
    let _e171: Line = other_3351;
    let _e174: Line = other_3351;
    let _e177: Line = other_3351;
    let _e180: Line = other_3351;
    let _e192: MultiVector = self_3723;
    let _e196: Line = other_3351;
    let _e199: MultiVector = self_3723;
    let _e203: Line = other_3351;
    let _e207: MultiVector = self_3723;
    let _e211: Line = other_3351;
    return MultiVector(((((vec2(_e4.g3_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), ((((((((vec4(_e45.g1_.y) * vec4<f32>(_e49.g1_.z, _e52.g1_.z, _e55.g1_.x, _e58.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e69.g1_.z) * vec4<f32>(_e73.g1_.y, _e76.g1_.x, _e79.g1_.y, _e82.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e94.g4_.x) * vec4(_e98.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e110.g4_.y) * vec4(_e114.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e126.g4_.z) * vec4(_e130.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e142.g4_.w) * vec4<f32>(_e146.g1_.x, _e149.g1_.y, _e152.g1_.z, _e155.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e167.g1_.x) * vec4<f32>(_e171.g1_.x, _e174.g1_.z, _e177.g1_.y, _e180.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((vec3(_e192.g0_.x) * _e196.g0_) + (vec3(_e199.g0_.y) * _e203.g1_)), (vec3(_e207.g0_.x) * _e211.g1_), vec4(0.0));
}

fn multi_vector_line_inner_anti_product(self_3724: MultiVector, other_3352: Line) -> MultiVector {
    var self_3725: MultiVector;
    var other_3353: Line;

    self_3725 = self_3724;
    other_3353 = other_3352;
    let _e4: MultiVector = self_3725;
    let _e8: Line = other_3353;
    let _e17: MultiVector = self_3725;
    let _e21: Line = other_3353;
    let _e31: MultiVector = self_3725;
    let _e35: Line = other_3353;
    let _e47: MultiVector = self_3725;
    let _e51: Line = other_3353;
    let _e54: MultiVector = self_3725;
    let _e58: Line = other_3353;
    let _e61: MultiVector = self_3725;
    let _e65: Line = other_3353;
    let _e69: MultiVector = self_3725;
    let _e73: Line = other_3353;
    let _e84: MultiVector = self_3725;
    let _e88: Line = other_3353;
    let _e100: MultiVector = self_3725;
    let _e104: Line = other_3353;
    let _e107: Line = other_3353;
    let _e110: Line = other_3353;
    let _e113: Line = other_3353;
    let _e125: MultiVector = self_3725;
    let _e129: Line = other_3353;
    let _e132: Line = other_3353;
    let _e135: Line = other_3353;
    let _e138: Line = other_3353;
    let _e150: MultiVector = self_3725;
    let _e154: Line = other_3353;
    let _e157: Line = other_3353;
    let _e160: Line = other_3353;
    let _e163: Line = other_3353;
    let _e175: MultiVector = self_3725;
    let _e178: Line = other_3353;
    let _e181: Line = other_3353;
    let _e184: Line = other_3353;
    let _e187: Line = other_3353;
    return MultiVector(((((vec2(_e4.g2_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3(_e47.g0_.y) * _e51.g0_), ((vec3(_e54.g0_.x) * _e58.g0_) + (vec3(_e61.g0_.y) * _e65.g1_)), (((((((vec4(_e69.g1_.y) * vec4(_e73.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e84.g1_.z) * vec4(_e88.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e100.g4_.x) * vec4<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.y, _e113.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))) + ((vec4(_e125.g4_.y) * vec4<f32>(_e129.g0_.z, _e132.g0_.z, _e135.g0_.x, _e138.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e150.g4_.z) * vec4<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g0_.y, _e163.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e175.g1_.wwwx * vec4<f32>(_e178.g0_.x, _e181.g0_.y, _e184.g0_.z, _e187.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_line_left_contraction(self_3726: MultiVector, other_3354: Line) -> MultiVector {
    var self_3727: MultiVector;
    var other_3355: Line;

    self_3727 = self_3726;
    other_3355 = other_3354;
    let _e4: MultiVector = self_3727;
    let _e8: Line = other_3355;
    let _e17: MultiVector = self_3727;
    let _e21: Line = other_3355;
    let _e31: MultiVector = self_3727;
    let _e35: Line = other_3355;
    let _e45: MultiVector = self_3727;
    let _e49: Line = other_3355;
    let _e52: Line = other_3355;
    let _e55: Line = other_3355;
    let _e58: Line = other_3355;
    let _e69: MultiVector = self_3727;
    let _e73: Line = other_3355;
    let _e76: Line = other_3355;
    let _e79: Line = other_3355;
    let _e82: Line = other_3355;
    let _e94: MultiVector = self_3727;
    let _e98: Line = other_3355;
    let _e101: Line = other_3355;
    let _e104: Line = other_3355;
    let _e107: Line = other_3355;
    let _e119: MultiVector = self_3727;
    let _e123: Line = other_3355;
    let _e126: MultiVector = self_3727;
    let _e130: Line = other_3355;
    return MultiVector(((((vec2(_e4.g3_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g1_.y) * vec4<f32>(_e49.g1_.z, _e52.g1_.z, _e55.g1_.x, _e58.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e69.g1_.z) * vec4<f32>(_e73.g1_.y, _e76.g1_.x, _e79.g1_.y, _e82.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e94.g1_.x) * vec4<f32>(_e98.g1_.x, _e101.g1_.z, _e104.g1_.y, _e107.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (vec3(_e119.g0_.x) * _e123.g0_), (vec3(_e126.g0_.x) * _e130.g1_), vec4(0.0));
}

fn multi_vector_line_right_contraction(self_3728: MultiVector, other_3356: Line) -> MultiVector {
    var self_3729: MultiVector;
    var other_3357: Line;

    self_3729 = self_3728;
    other_3357 = other_3356;
    let _e4: MultiVector = self_3729;
    let _e8: Line = other_3357;
    let _e17: MultiVector = self_3729;
    let _e21: Line = other_3357;
    let _e31: MultiVector = self_3729;
    let _e35: Line = other_3357;
    let _e45: MultiVector = self_3729;
    let _e49: Line = other_3357;
    let _e60: MultiVector = self_3729;
    let _e64: Line = other_3357;
    let _e76: MultiVector = self_3729;
    let _e79: Line = other_3357;
    let _e82: Line = other_3357;
    let _e85: Line = other_3357;
    let _e88: Line = other_3357;
    let _e100: MultiVector = self_3729;
    let _e104: Line = other_3357;
    return MultiVector(((((vec2(_e4.g3_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g4_.y) * vec4(_e49.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e60.g4_.z) * vec4(_e64.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e76.g4_.wwwx * vec4<f32>(_e79.g1_.x, _e82.g1_.y, _e85.g1_.z, _e88.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e100.g0_.y) * _e104.g1_), vec3(0.0), vec4(0.0));
}

fn multi_vector_line_left_anti_contraction(self_3730: MultiVector, other_3358: Line) -> MultiVector {
    var self_3731: MultiVector;
    var other_3359: Line;

    self_3731 = self_3730;
    other_3359 = other_3358;
    let _e4: MultiVector = self_3731;
    let _e8: Line = other_3359;
    let _e17: MultiVector = self_3731;
    let _e21: Line = other_3359;
    let _e31: MultiVector = self_3731;
    let _e35: Line = other_3359;
    let _e47: MultiVector = self_3731;
    let _e51: Line = other_3359;
    let _e54: MultiVector = self_3731;
    let _e58: Line = other_3359;
    let _e61: MultiVector = self_3731;
    let _e65: Line = other_3359;
    let _e68: Line = other_3359;
    let _e71: Line = other_3359;
    let _e74: Line = other_3359;
    let _e85: MultiVector = self_3731;
    let _e89: Line = other_3359;
    let _e92: Line = other_3359;
    let _e95: Line = other_3359;
    let _e98: Line = other_3359;
    let _e110: MultiVector = self_3731;
    let _e114: Line = other_3359;
    let _e117: Line = other_3359;
    let _e120: Line = other_3359;
    let _e123: Line = other_3359;
    return MultiVector(((((vec2(_e4.g2_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), (vec3(_e47.g0_.y) * _e51.g0_), (vec3(_e54.g0_.y) * _e58.g1_), ((((vec4(_e61.g4_.y) * vec4<f32>(_e65.g0_.z, _e68.g0_.z, _e71.g0_.x, _e74.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e85.g4_.z) * vec4<f32>(_e89.g0_.y, _e92.g0_.x, _e95.g0_.y, _e98.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e110.g4_.x) * vec4<f32>(_e114.g0_.x, _e117.g0_.z, _e120.g0_.y, _e123.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn multi_vector_line_right_anti_contraction(self_3732: MultiVector, other_3360: Line) -> MultiVector {
    var self_3733: MultiVector;
    var other_3361: Line;

    self_3733 = self_3732;
    other_3361 = other_3360;
    let _e4: MultiVector = self_3733;
    let _e8: Line = other_3361;
    let _e17: MultiVector = self_3733;
    let _e21: Line = other_3361;
    let _e31: MultiVector = self_3733;
    let _e35: Line = other_3361;
    let _e49: MultiVector = self_3733;
    let _e53: Line = other_3361;
    let _e56: MultiVector = self_3733;
    let _e60: Line = other_3361;
    let _e71: MultiVector = self_3733;
    let _e75: Line = other_3361;
    let _e87: MultiVector = self_3733;
    let _e90: Line = other_3361;
    let _e93: Line = other_3361;
    let _e96: Line = other_3361;
    let _e99: Line = other_3361;
    return MultiVector(((((vec2(_e4.g2_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, -1.0))), vec4(0.0), vec3(0.0), (vec3(_e49.g0_.x) * _e53.g0_), ((((vec4(_e56.g1_.y) * vec4(_e60.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e71.g1_.z) * vec4(_e75.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e87.g1_.wwwx * vec4<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z, _e99.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_line_scalar_product(self_3734: MultiVector, other_3362: Line) -> Scalar {
    var self_3735: MultiVector;
    var other_3363: Line;

    self_3735 = self_3734;
    other_3363 = other_3362;
    let _e5: MultiVector = self_3735;
    let _e8: Line = other_3363;
    let _e13: MultiVector = self_3735;
    let _e16: Line = other_3363;
    let _e21: MultiVector = self_3735;
    let _e24: Line = other_3363;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_line_dot(self_3736: MultiVector, other_3364: Line) -> Scalar {
    var self_3737: MultiVector;
    var other_3365: Line;

    self_3737 = self_3736;
    other_3365 = other_3364;
    let _e5: MultiVector = self_3737;
    let _e8: Line = other_3365;
    let _e13: MultiVector = self_3737;
    let _e16: Line = other_3365;
    let _e21: MultiVector = self_3737;
    let _e24: Line = other_3365;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_line_anti_scalar_product(self_3738: MultiVector, other_3366: Line) -> AntiScalar {
    var self_3739: MultiVector;
    var other_3367: Line;

    self_3739 = self_3738;
    other_3367 = other_3366;
    let _e5: MultiVector = self_3739;
    let _e8: Line = other_3367;
    let _e13: MultiVector = self_3739;
    let _e16: Line = other_3367;
    let _e21: MultiVector = self_3739;
    let _e24: Line = other_3367;
    return AntiScalar((((0.0 - (_e5.g2_.x * _e8.g0_.x)) - (_e13.g2_.y * _e16.g0_.y)) - (_e21.g2_.z * _e24.g0_.z)));
}

fn multi_vector_line_anti_dot(self_3740: MultiVector, other_3368: Line) -> AntiScalar {
    var self_3741: MultiVector;
    var other_3369: Line;

    self_3741 = self_3740;
    other_3369 = other_3368;
    let _e5: MultiVector = self_3741;
    let _e8: Line = other_3369;
    let _e13: MultiVector = self_3741;
    let _e16: Line = other_3369;
    let _e21: MultiVector = self_3741;
    let _e24: Line = other_3369;
    return AntiScalar((((0.0 - (_e5.g2_.x * _e8.g0_.x)) - (_e13.g2_.y * _e16.g0_.y)) - (_e21.g2_.z * _e24.g0_.z)));
}

fn multi_vector_plane_into(self_3742: MultiVector) -> Plane {
    var self_3743: MultiVector;

    self_3743 = self_3742;
    let _e2: MultiVector = self_3743;
    return Plane(_e2.g4_);
}

fn multi_vector_plane_add(self_3744: MultiVector, other_3370: Plane) -> MultiVector {
    var self_3745: MultiVector;
    var other_3371: Plane;

    self_3745 = self_3744;
    other_3371 = other_3370;
    let _e4: MultiVector = self_3745;
    let _e6: MultiVector = self_3745;
    let _e8: MultiVector = self_3745;
    let _e10: MultiVector = self_3745;
    let _e12: MultiVector = self_3745;
    let _e14: Plane = other_3371;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g4_ + _e14.g0_));
}

fn multi_vector_plane_sub(self_3746: MultiVector, other_3372: Plane) -> MultiVector {
    var self_3747: MultiVector;
    var other_3373: Plane;

    self_3747 = self_3746;
    other_3373 = other_3372;
    let _e4: MultiVector = self_3747;
    let _e6: MultiVector = self_3747;
    let _e8: MultiVector = self_3747;
    let _e10: MultiVector = self_3747;
    let _e12: MultiVector = self_3747;
    let _e14: Plane = other_3373;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g4_ - _e14.g0_));
}

fn multi_vector_plane_geometric_product(self_3748: MultiVector, other_3374: Plane) -> MultiVector {
    var self_3749: MultiVector;
    var other_3375: Plane;

    self_3749 = self_3748;
    other_3375 = other_3374;
    let _e4: MultiVector = self_3749;
    let _e8: Plane = other_3375;
    let _e17: MultiVector = self_3749;
    let _e21: Plane = other_3375;
    let _e31: MultiVector = self_3749;
    let _e35: Plane = other_3375;
    let _e45: MultiVector = self_3749;
    let _e48: MultiVector = self_3749;
    let _e52: Plane = other_3375;
    let _e55: Plane = other_3375;
    let _e65: MultiVector = self_3749;
    let _e69: Plane = other_3375;
    let _e79: MultiVector = self_3749;
    let _e83: Plane = other_3375;
    let _e94: MultiVector = self_3749;
    let _e98: Plane = other_3375;
    let _e109: MultiVector = self_3749;
    let _e112: MultiVector = self_3749;
    let _e115: MultiVector = self_3749;
    let _e118: MultiVector = self_3749;
    let _e122: Plane = other_3375;
    let _e133: MultiVector = self_3749;
    let _e137: Plane = other_3375;
    let _e140: Plane = other_3375;
    let _e143: Plane = other_3375;
    let _e153: MultiVector = self_3749;
    let _e157: Plane = other_3375;
    let _e160: Plane = other_3375;
    let _e163: Plane = other_3375;
    let _e174: MultiVector = self_3749;
    let _e178: Plane = other_3375;
    let _e189: MultiVector = self_3749;
    let _e193: Plane = other_3375;
    let _e204: MultiVector = self_3749;
    let _e208: Plane = other_3375;
    let _e211: Plane = other_3375;
    let _e214: Plane = other_3375;
    let _e220: MultiVector = self_3749;
    let _e223: MultiVector = self_3749;
    let _e226: MultiVector = self_3749;
    let _e230: Plane = other_3375;
    let _e233: Plane = other_3375;
    let _e236: Plane = other_3375;
    let _e247: MultiVector = self_3749;
    let _e250: MultiVector = self_3749;
    let _e253: MultiVector = self_3749;
    let _e257: Plane = other_3375;
    let _e265: MultiVector = self_3749;
    let _e269: Plane = other_3375;
    let _e272: MultiVector = self_3749;
    let _e276: Plane = other_3375;
    let _e287: MultiVector = self_3749;
    let _e291: Plane = other_3375;
    let _e302: MultiVector = self_3749;
    let _e306: Plane = other_3375;
    let _e317: MultiVector = self_3749;
    let _e320: MultiVector = self_3749;
    let _e323: MultiVector = self_3749;
    let _e326: MultiVector = self_3749;
    let _e330: Plane = other_3375;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g4_.w, _e48.g1_.x) * vec2<f32>(_e52.g0_.w, _e55.g0_.x)) * vec2<f32>(-1.0, 1.0))), (((((vec4(_e65.g3_.x) * _e69.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e79.g3_.y) * _e83.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e94.g3_.z) * _e98.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e109.g0_.x, _e112.g0_.x, _e115.g0_.x, _e118.g0_.y) * _e122.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((((vec3(_e133.g1_.y) * vec3<f32>(_e137.g0_.z, _e140.g0_.z, _e143.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e153.g1_.z) * vec3<f32>(_e157.g0_.y, _e160.g0_.x, _e163.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e174.g4_.y) * vec3(_e178.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e189.g4_.z) * vec3(_e193.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e204.g4_.w) * vec3<f32>(_e208.g0_.x, _e211.g0_.y, _e214.g0_.z))) + ((vec3<f32>(_e220.g4_.x, _e223.g1_.x, _e226.g1_.x) * vec3<f32>(_e230.g0_.w, _e233.g0_.z, _e236.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), ((vec3<f32>(_e247.g1_.x, _e250.g1_.y, _e253.g1_.z) * vec3(_e257.g0_.w)) * vec3(-1.0)), (((((vec4(_e265.g0_.x) * _e269.g0_) + ((vec4(_e272.g3_.x) * _e276.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e287.g3_.y) * _e291.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e302.g3_.z) * _e306.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e317.g2_.x, _e320.g2_.y, _e323.g2_.z, _e326.g2_.x) * _e330.g0_.wwwx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_plane_geometric_anti_product(self_3750: MultiVector, other_3376: Plane) -> MultiVector {
    var self_3751: MultiVector;
    var other_3377: Plane;

    self_3751 = self_3750;
    other_3377 = other_3376;
    let _e4: MultiVector = self_3751;
    let _e8: Plane = other_3377;
    let _e17: MultiVector = self_3751;
    let _e21: Plane = other_3377;
    let _e31: MultiVector = self_3751;
    let _e35: Plane = other_3377;
    let _e45: MultiVector = self_3751;
    let _e49: Plane = other_3377;
    let _e59: MultiVector = self_3751;
    let _e63: Plane = other_3377;
    let _e73: MultiVector = self_3751;
    let _e76: MultiVector = self_3751;
    let _e80: Plane = other_3377;
    let _e86: MultiVector = self_3751;
    let _e90: Plane = other_3377;
    let _e100: MultiVector = self_3751;
    let _e104: Plane = other_3377;
    let _e115: MultiVector = self_3751;
    let _e119: Plane = other_3377;
    let _e130: MultiVector = self_3751;
    let _e134: Plane = other_3377;
    let _e145: MultiVector = self_3751;
    let _e149: Plane = other_3377;
    let _e160: MultiVector = self_3751;
    let _e164: Plane = other_3377;
    let _e175: MultiVector = self_3751;
    let _e179: Plane = other_3377;
    let _e192: MultiVector = self_3751;
    let _e196: Plane = other_3377;
    let _e199: Plane = other_3377;
    let _e202: Plane = other_3377;
    let _e208: MultiVector = self_3751;
    let _e212: Plane = other_3377;
    let _e215: Plane = other_3377;
    let _e218: Plane = other_3377;
    let _e229: MultiVector = self_3751;
    let _e233: Plane = other_3377;
    let _e236: Plane = other_3377;
    let _e239: Plane = other_3377;
    let _e250: MultiVector = self_3751;
    let _e254: Plane = other_3377;
    let _e257: Plane = other_3377;
    let _e260: Plane = other_3377;
    let _e271: MultiVector = self_3751;
    let _e275: Plane = other_3377;
    let _e278: Plane = other_3377;
    let _e281: Plane = other_3377;
    let _e291: MultiVector = self_3751;
    let _e295: Plane = other_3377;
    let _e298: Plane = other_3377;
    let _e301: Plane = other_3377;
    let _e312: MultiVector = self_3751;
    let _e316: Plane = other_3377;
    let _e327: MultiVector = self_3751;
    let _e331: Plane = other_3377;
    let _e342: MultiVector = self_3751;
    let _e346: Plane = other_3377;
    let _e349: Plane = other_3377;
    let _e352: Plane = other_3377;
    let _e358: MultiVector = self_3751;
    let _e361: MultiVector = self_3751;
    let _e364: MultiVector = self_3751;
    let _e368: Plane = other_3377;
    let _e371: Plane = other_3377;
    let _e374: Plane = other_3377;
    let _e385: MultiVector = self_3751;
    let _e389: Plane = other_3377;
    let _e392: MultiVector = self_3751;
    let _e396: Plane = other_3377;
    let _e407: MultiVector = self_3751;
    let _e411: Plane = other_3377;
    let _e422: MultiVector = self_3751;
    let _e426: Plane = other_3377;
    let _e438: MultiVector = self_3751;
    let _e442: Plane = other_3377;
    let _e454: MultiVector = self_3751;
    let _e457: MultiVector = self_3751;
    let _e460: MultiVector = self_3751;
    let _e463: MultiVector = self_3751;
    let _e467: Plane = other_3377;
    return MultiVector((((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g4_.y) * vec2(_e49.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e59.g4_.z) * vec2(_e63.g0_.z)) * vec2<f32>(0.0, 1.0))) + (vec2<f32>(_e73.g1_.x, _e76.g4_.x) * vec2(_e80.g0_.x))), ((((((((vec4(_e86.g2_.x) * _e90.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e100.g2_.y) * _e104.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e115.g2_.z) * _e119.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e130.g3_.x) * _e134.g0_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e145.g3_.y) * _e149.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e160.g3_.z) * _e164.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e175.g0_.x) * _e179.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3(0.0) - (vec3(_e192.g1_.w) * vec3<f32>(_e196.g0_.x, _e199.g0_.y, _e202.g0_.z))) + ((vec3(_e208.g4_.y) * vec3<f32>(_e212.g0_.z, _e215.g0_.z, _e218.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e229.g4_.z) * vec3<f32>(_e233.g0_.y, _e236.g0_.x, _e239.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e250.g4_.x) * vec3<f32>(_e254.g0_.x, _e257.g0_.z, _e260.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (((((((vec3(_e271.g1_.y) * vec3<f32>(_e275.g0_.z, _e278.g0_.z, _e281.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e291.g1_.z) * vec3<f32>(_e295.g0_.y, _e298.g0_.x, _e301.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e312.g4_.y) * vec3(_e316.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e327.g4_.z) * vec3(_e331.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e342.g4_.w) * vec3<f32>(_e346.g0_.x, _e349.g0_.y, _e352.g0_.z))) + ((vec3<f32>(_e358.g4_.x, _e361.g1_.x, _e364.g1_.x) * vec3<f32>(_e368.g0_.w, _e371.g0_.z, _e374.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))), ((((((vec4(_e385.g0_.y) * _e389.g0_) + ((vec4(_e392.g2_.y) * _e396.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e407.g2_.z) * _e411.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e422.g3_.y) * vec4(_e426.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e438.g3_.z) * vec4(_e442.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e454.g2_.x, _e457.g2_.x, _e460.g2_.x, _e463.g3_.x) * _e467.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_plane_regressive_product(self_3752: MultiVector, other_3378: Plane) -> MultiVector {
    var self_3753: MultiVector;
    var other_3379: Plane;

    self_3753 = self_3752;
    other_3379 = other_3378;
    let _e4: MultiVector = self_3753;
    let _e8: Plane = other_3379;
    let _e17: MultiVector = self_3753;
    let _e21: Plane = other_3379;
    let _e31: MultiVector = self_3753;
    let _e35: Plane = other_3379;
    let _e45: MultiVector = self_3753;
    let _e49: Plane = other_3379;
    let _e59: MultiVector = self_3753;
    let _e63: Plane = other_3379;
    let _e73: MultiVector = self_3753;
    let _e77: Plane = other_3379;
    let _e88: MultiVector = self_3753;
    let _e92: Plane = other_3379;
    let _e103: MultiVector = self_3753;
    let _e107: Plane = other_3379;
    let _e118: MultiVector = self_3753;
    let _e121: MultiVector = self_3753;
    let _e124: MultiVector = self_3753;
    let _e127: MultiVector = self_3753;
    let _e131: Plane = other_3379;
    let _e142: MultiVector = self_3753;
    let _e146: Plane = other_3379;
    let _e149: Plane = other_3379;
    let _e152: Plane = other_3379;
    let _e162: MultiVector = self_3753;
    let _e166: Plane = other_3379;
    let _e169: Plane = other_3379;
    let _e172: Plane = other_3379;
    let _e183: MultiVector = self_3753;
    let _e187: Plane = other_3379;
    let _e190: Plane = other_3379;
    let _e193: Plane = other_3379;
    let _e206: MultiVector = self_3753;
    let _e210: Plane = other_3379;
    let _e213: Plane = other_3379;
    let _e216: Plane = other_3379;
    let _e222: MultiVector = self_3753;
    let _e225: MultiVector = self_3753;
    let _e228: MultiVector = self_3753;
    let _e232: Plane = other_3379;
    let _e238: MultiVector = self_3753;
    let _e242: Plane = other_3379;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e59.g2_.y) * _e63.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e73.g2_.z) * _e77.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e88.g3_.y) * _e92.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e103.g3_.z) * _e107.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e118.g2_.x, _e121.g3_.x, _e124.g3_.x, _e127.g2_.x) * _e131.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e142.g4_.y) * vec3<f32>(_e146.g0_.z, _e149.g0_.z, _e152.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e162.g4_.z) * vec3<f32>(_e166.g0_.y, _e169.g0_.x, _e172.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e183.g4_.x) * vec3<f32>(_e187.g0_.x, _e190.g0_.z, _e193.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e206.g4_.w) * vec3<f32>(_e210.g0_.x, _e213.g0_.y, _e216.g0_.z))) + (vec3<f32>(_e222.g4_.x, _e225.g4_.y, _e228.g4_.z) * vec3(_e232.g0_.w))), (vec4(_e238.g0_.y) * _e242.g0_));
}

fn multi_vector_plane_anti_wedge(self_3754: MultiVector, other_3380: Plane) -> MultiVector {
    var self_3755: MultiVector;
    var other_3381: Plane;

    self_3755 = self_3754;
    other_3381 = other_3380;
    let _e4: MultiVector = self_3755;
    let _e8: Plane = other_3381;
    let _e17: MultiVector = self_3755;
    let _e21: Plane = other_3381;
    let _e31: MultiVector = self_3755;
    let _e35: Plane = other_3381;
    let _e45: MultiVector = self_3755;
    let _e49: Plane = other_3381;
    let _e59: MultiVector = self_3755;
    let _e63: Plane = other_3381;
    let _e73: MultiVector = self_3755;
    let _e77: Plane = other_3381;
    let _e88: MultiVector = self_3755;
    let _e92: Plane = other_3381;
    let _e103: MultiVector = self_3755;
    let _e107: Plane = other_3381;
    let _e118: MultiVector = self_3755;
    let _e121: MultiVector = self_3755;
    let _e124: MultiVector = self_3755;
    let _e127: MultiVector = self_3755;
    let _e131: Plane = other_3381;
    let _e142: MultiVector = self_3755;
    let _e146: Plane = other_3381;
    let _e149: Plane = other_3381;
    let _e152: Plane = other_3381;
    let _e162: MultiVector = self_3755;
    let _e166: Plane = other_3381;
    let _e169: Plane = other_3381;
    let _e172: Plane = other_3381;
    let _e183: MultiVector = self_3755;
    let _e187: Plane = other_3381;
    let _e190: Plane = other_3381;
    let _e193: Plane = other_3381;
    let _e206: MultiVector = self_3755;
    let _e210: Plane = other_3381;
    let _e213: Plane = other_3381;
    let _e216: Plane = other_3381;
    let _e222: MultiVector = self_3755;
    let _e225: MultiVector = self_3755;
    let _e228: MultiVector = self_3755;
    let _e232: Plane = other_3381;
    let _e238: MultiVector = self_3755;
    let _e242: Plane = other_3381;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e59.g2_.y) * _e63.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e73.g2_.z) * _e77.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e88.g3_.y) * _e92.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e103.g3_.z) * _e107.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e118.g2_.x, _e121.g3_.x, _e124.g3_.x, _e127.g2_.x) * _e131.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e142.g4_.y) * vec3<f32>(_e146.g0_.z, _e149.g0_.z, _e152.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e162.g4_.z) * vec3<f32>(_e166.g0_.y, _e169.g0_.x, _e172.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e183.g4_.x) * vec3<f32>(_e187.g0_.x, _e190.g0_.z, _e193.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e206.g4_.w) * vec3<f32>(_e210.g0_.x, _e213.g0_.y, _e216.g0_.z))) + (vec3<f32>(_e222.g4_.x, _e225.g4_.y, _e228.g4_.z) * vec3(_e232.g0_.w))), (vec4(_e238.g0_.y) * _e242.g0_));
}

fn multi_vector_plane_meet(self_3756: MultiVector, other_3382: Plane) -> MultiVector {
    var self_3757: MultiVector;
    var other_3383: Plane;

    self_3757 = self_3756;
    other_3383 = other_3382;
    let _e4: MultiVector = self_3757;
    let _e8: Plane = other_3383;
    let _e17: MultiVector = self_3757;
    let _e21: Plane = other_3383;
    let _e31: MultiVector = self_3757;
    let _e35: Plane = other_3383;
    let _e45: MultiVector = self_3757;
    let _e49: Plane = other_3383;
    let _e59: MultiVector = self_3757;
    let _e63: Plane = other_3383;
    let _e73: MultiVector = self_3757;
    let _e77: Plane = other_3383;
    let _e88: MultiVector = self_3757;
    let _e92: Plane = other_3383;
    let _e103: MultiVector = self_3757;
    let _e107: Plane = other_3383;
    let _e118: MultiVector = self_3757;
    let _e121: MultiVector = self_3757;
    let _e124: MultiVector = self_3757;
    let _e127: MultiVector = self_3757;
    let _e131: Plane = other_3383;
    let _e142: MultiVector = self_3757;
    let _e146: Plane = other_3383;
    let _e149: Plane = other_3383;
    let _e152: Plane = other_3383;
    let _e162: MultiVector = self_3757;
    let _e166: Plane = other_3383;
    let _e169: Plane = other_3383;
    let _e172: Plane = other_3383;
    let _e183: MultiVector = self_3757;
    let _e187: Plane = other_3383;
    let _e190: Plane = other_3383;
    let _e193: Plane = other_3383;
    let _e206: MultiVector = self_3757;
    let _e210: Plane = other_3383;
    let _e213: Plane = other_3383;
    let _e216: Plane = other_3383;
    let _e222: MultiVector = self_3757;
    let _e225: MultiVector = self_3757;
    let _e228: MultiVector = self_3757;
    let _e232: Plane = other_3383;
    let _e238: MultiVector = self_3757;
    let _e242: Plane = other_3383;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e59.g2_.y) * _e63.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e73.g2_.z) * _e77.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e88.g3_.y) * _e92.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e103.g3_.z) * _e107.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e118.g2_.x, _e121.g3_.x, _e124.g3_.x, _e127.g2_.x) * _e131.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e142.g4_.y) * vec3<f32>(_e146.g0_.z, _e149.g0_.z, _e152.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e162.g4_.z) * vec3<f32>(_e166.g0_.y, _e169.g0_.x, _e172.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e183.g4_.x) * vec3<f32>(_e187.g0_.x, _e190.g0_.z, _e193.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e206.g4_.w) * vec3<f32>(_e210.g0_.x, _e213.g0_.y, _e216.g0_.z))) + (vec3<f32>(_e222.g4_.x, _e225.g4_.y, _e228.g4_.z) * vec3(_e232.g0_.w))), (vec4(_e238.g0_.y) * _e242.g0_));
}

fn multi_vector_plane_outer_product(self_3758: MultiVector, other_3384: Plane) -> MultiVector {
    var self_3759: MultiVector;
    var other_3385: Plane;

    self_3759 = self_3758;
    other_3385 = other_3384;
    let _e4: MultiVector = self_3759;
    let _e8: Plane = other_3385;
    let _e17: MultiVector = self_3759;
    let _e21: Plane = other_3385;
    let _e31: MultiVector = self_3759;
    let _e35: Plane = other_3385;
    let _e45: MultiVector = self_3759;
    let _e49: Plane = other_3385;
    let _e65: MultiVector = self_3759;
    let _e69: Plane = other_3385;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (vec4(_e65.g0_.x) * _e69.g0_));
}

fn multi_vector_plane_wedge(self_3760: MultiVector, other_3386: Plane) -> MultiVector {
    var self_3761: MultiVector;
    var other_3387: Plane;

    self_3761 = self_3760;
    other_3387 = other_3386;
    let _e4: MultiVector = self_3761;
    let _e8: Plane = other_3387;
    let _e17: MultiVector = self_3761;
    let _e21: Plane = other_3387;
    let _e31: MultiVector = self_3761;
    let _e35: Plane = other_3387;
    let _e45: MultiVector = self_3761;
    let _e49: Plane = other_3387;
    let _e65: MultiVector = self_3761;
    let _e69: Plane = other_3387;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (vec4(_e65.g0_.x) * _e69.g0_));
}

fn multi_vector_plane_join(self_3762: MultiVector, other_3388: Plane) -> MultiVector {
    var self_3763: MultiVector;
    var other_3389: Plane;

    self_3763 = self_3762;
    other_3389 = other_3388;
    let _e4: MultiVector = self_3763;
    let _e8: Plane = other_3389;
    let _e17: MultiVector = self_3763;
    let _e21: Plane = other_3389;
    let _e31: MultiVector = self_3763;
    let _e35: Plane = other_3389;
    let _e45: MultiVector = self_3763;
    let _e49: Plane = other_3389;
    let _e65: MultiVector = self_3763;
    let _e69: Plane = other_3389;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (vec4(_e65.g0_.x) * _e69.g0_));
}

fn multi_vector_plane_inner_product(self_3764: MultiVector, other_3390: Plane) -> MultiVector {
    var self_3765: MultiVector;
    var other_3391: Plane;

    self_3765 = self_3764;
    other_3391 = other_3390;
    let _e4: MultiVector = self_3765;
    let _e7: MultiVector = self_3765;
    let _e11: Plane = other_3391;
    let _e14: Plane = other_3391;
    let _e23: MultiVector = self_3765;
    let _e27: Plane = other_3391;
    let _e37: MultiVector = self_3765;
    let _e41: Plane = other_3391;
    let _e52: MultiVector = self_3765;
    let _e56: Plane = other_3391;
    let _e67: MultiVector = self_3765;
    let _e70: MultiVector = self_3765;
    let _e73: MultiVector = self_3765;
    let _e76: MultiVector = self_3765;
    let _e80: Plane = other_3391;
    let _e91: MultiVector = self_3765;
    let _e95: Plane = other_3391;
    let _e98: Plane = other_3391;
    let _e101: Plane = other_3391;
    let _e111: MultiVector = self_3765;
    let _e115: Plane = other_3391;
    let _e118: Plane = other_3391;
    let _e121: Plane = other_3391;
    let _e132: MultiVector = self_3765;
    let _e136: Plane = other_3391;
    let _e139: Plane = other_3391;
    let _e142: Plane = other_3391;
    let _e153: MultiVector = self_3765;
    let _e156: MultiVector = self_3765;
    let _e159: MultiVector = self_3765;
    let _e163: Plane = other_3391;
    let _e171: MultiVector = self_3765;
    let _e175: Plane = other_3391;
    return MultiVector(((vec2<f32>(_e4.g4_.w, _e7.g4_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), (((((vec4(_e23.g3_.x) * _e27.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0)) + ((vec4(_e37.g3_.y) * _e41.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e52.g3_.z) * _e56.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g0_.x, _e76.g0_.y) * _e80.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec3(_e91.g1_.y) * vec3<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e111.g1_.z) * vec3<f32>(_e115.g0_.y, _e118.g0_.x, _e121.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e132.g1_.x) * vec3<f32>(_e136.g0_.x, _e139.g0_.z, _e142.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e153.g1_.x, _e156.g1_.y, _e159.g1_.z) * vec3(_e163.g0_.w)) * vec3(-1.0)), (vec4(_e171.g0_.x) * _e175.g0_));
}

fn multi_vector_plane_inner_anti_product(self_3766: MultiVector, other_3392: Plane) -> MultiVector {
    var self_3767: MultiVector;
    var other_3393: Plane;

    self_3767 = self_3766;
    other_3393 = other_3392;
    let _e4: MultiVector = self_3767;
    let _e8: Plane = other_3393;
    let _e17: MultiVector = self_3767;
    let _e21: Plane = other_3393;
    let _e31: MultiVector = self_3767;
    let _e35: Plane = other_3393;
    let _e45: MultiVector = self_3767;
    let _e49: Plane = other_3393;
    let _e61: MultiVector = self_3767;
    let _e65: Plane = other_3393;
    let _e68: Plane = other_3393;
    let _e71: Plane = other_3393;
    let _e77: MultiVector = self_3767;
    let _e81: Plane = other_3393;
    let _e84: Plane = other_3393;
    let _e87: Plane = other_3393;
    let _e97: MultiVector = self_3767;
    let _e101: Plane = other_3393;
    let _e104: Plane = other_3393;
    let _e107: Plane = other_3393;
    let _e118: MultiVector = self_3767;
    let _e122: Plane = other_3393;
    let _e125: Plane = other_3393;
    let _e128: Plane = other_3393;
    let _e139: MultiVector = self_3767;
    let _e143: Plane = other_3393;
    let _e146: MultiVector = self_3767;
    let _e150: Plane = other_3393;
    let _e161: MultiVector = self_3767;
    let _e165: Plane = other_3393;
    let _e176: MultiVector = self_3767;
    let _e180: Plane = other_3393;
    let _e192: MultiVector = self_3767;
    let _e196: Plane = other_3393;
    let _e208: MultiVector = self_3767;
    let _e211: MultiVector = self_3767;
    let _e214: MultiVector = self_3767;
    let _e217: MultiVector = self_3767;
    let _e221: Plane = other_3393;
    return MultiVector(((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e45.g0_.x) * _e49.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), (vec3(0.0) - (vec3(_e61.g1_.w) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z))), ((((vec3(_e77.g1_.y) * vec3<f32>(_e81.g0_.z, _e84.g0_.z, _e87.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e97.g1_.z) * vec3<f32>(_e101.g0_.y, _e104.g0_.x, _e107.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e118.g1_.x) * vec3<f32>(_e122.g0_.x, _e125.g0_.z, _e128.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((vec4(_e139.g0_.y) * _e143.g0_) + ((vec4(_e146.g2_.y) * _e150.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e161.g2_.z) * _e165.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e176.g3_.y) * vec4(_e180.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e192.g3_.z) * vec4(_e196.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e208.g2_.x, _e211.g2_.x, _e214.g2_.x, _e217.g3_.x) * _e221.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_plane_left_contraction(self_3768: MultiVector, other_3394: Plane) -> MultiVector {
    var self_3769: MultiVector;
    var other_3395: Plane;

    self_3769 = self_3768;
    other_3395 = other_3394;
    let _e4: MultiVector = self_3769;
    let _e7: MultiVector = self_3769;
    let _e11: Plane = other_3395;
    let _e14: Plane = other_3395;
    let _e23: MultiVector = self_3769;
    let _e27: Plane = other_3395;
    let _e37: MultiVector = self_3769;
    let _e41: Plane = other_3395;
    let _e52: MultiVector = self_3769;
    let _e56: Plane = other_3395;
    let _e67: MultiVector = self_3769;
    let _e71: Plane = other_3395;
    let _e74: Plane = other_3395;
    let _e77: Plane = other_3395;
    let _e87: MultiVector = self_3769;
    let _e91: Plane = other_3395;
    let _e94: Plane = other_3395;
    let _e97: Plane = other_3395;
    let _e108: MultiVector = self_3769;
    let _e112: Plane = other_3395;
    let _e115: Plane = other_3395;
    let _e118: Plane = other_3395;
    let _e129: MultiVector = self_3769;
    let _e132: MultiVector = self_3769;
    let _e135: MultiVector = self_3769;
    let _e139: Plane = other_3395;
    let _e147: MultiVector = self_3769;
    let _e151: Plane = other_3395;
    return MultiVector(((vec2<f32>(_e4.g4_.w, _e7.g4_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), ((((vec4(_e23.g3_.y) * _e27.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e37.g3_.z) * _e41.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e52.g3_.x) * _e56.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((((vec3(_e67.g1_.y) * vec3<f32>(_e71.g0_.z, _e74.g0_.z, _e77.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e87.g1_.z) * vec3<f32>(_e91.g0_.y, _e94.g0_.x, _e97.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e108.g1_.x) * vec3<f32>(_e112.g0_.x, _e115.g0_.z, _e118.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e129.g1_.x, _e132.g1_.y, _e135.g1_.z) * vec3(_e139.g0_.w)) * vec3(-1.0)), (vec4(_e147.g0_.x) * _e151.g0_));
}

fn multi_vector_plane_right_contraction(self_3770: MultiVector, other_3396: Plane) -> MultiVector {
    var self_3771: MultiVector;
    var other_3397: Plane;

    self_3771 = self_3770;
    other_3397 = other_3396;
    let _e4: MultiVector = self_3771;
    let _e7: MultiVector = self_3771;
    let _e11: Plane = other_3397;
    let _e14: Plane = other_3397;
    let _e23: MultiVector = self_3771;
    let _e26: MultiVector = self_3771;
    let _e29: MultiVector = self_3771;
    let _e32: MultiVector = self_3771;
    let _e36: Plane = other_3397;
    return MultiVector(((vec2<f32>(_e4.g4_.w, _e7.g4_.x) * vec2<f32>(_e11.g0_.w, _e14.g0_.x)) * vec2<f32>(-1.0, 0.0)), ((vec4<f32>(_e23.g0_.x, _e26.g0_.x, _e29.g0_.x, _e32.g0_.y) * _e36.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0)), vec3(0.0), vec3(0.0), vec4(0.0));
}

fn multi_vector_plane_left_anti_contraction(self_3772: MultiVector, other_3398: Plane) -> MultiVector {
    var self_3773: MultiVector;
    var other_3399: Plane;

    self_3773 = self_3772;
    other_3399 = other_3398;
    let _e4: MultiVector = self_3773;
    let _e8: Plane = other_3399;
    let _e17: MultiVector = self_3773;
    let _e21: Plane = other_3399;
    let _e31: MultiVector = self_3773;
    let _e35: Plane = other_3399;
    let _e51: MultiVector = self_3773;
    let _e55: Plane = other_3399;
    return MultiVector(((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), vec3(0.0), (vec4(_e51.g0_.y) * _e55.g0_));
}

fn multi_vector_plane_right_anti_contraction(self_3774: MultiVector, other_3400: Plane) -> MultiVector {
    var self_3775: MultiVector;
    var other_3401: Plane;

    self_3775 = self_3774;
    other_3401 = other_3400;
    let _e4: MultiVector = self_3775;
    let _e8: Plane = other_3401;
    let _e17: MultiVector = self_3775;
    let _e21: Plane = other_3401;
    let _e31: MultiVector = self_3775;
    let _e35: Plane = other_3401;
    let _e45: MultiVector = self_3775;
    let _e49: Plane = other_3401;
    let _e61: MultiVector = self_3775;
    let _e65: Plane = other_3401;
    let _e68: Plane = other_3401;
    let _e71: Plane = other_3401;
    let _e77: MultiVector = self_3775;
    let _e81: Plane = other_3401;
    let _e84: Plane = other_3401;
    let _e87: Plane = other_3401;
    let _e97: MultiVector = self_3775;
    let _e101: Plane = other_3401;
    let _e104: Plane = other_3401;
    let _e107: Plane = other_3401;
    let _e118: MultiVector = self_3775;
    let _e122: Plane = other_3401;
    let _e125: Plane = other_3401;
    let _e128: Plane = other_3401;
    let _e139: MultiVector = self_3775;
    let _e143: Plane = other_3401;
    let _e153: MultiVector = self_3775;
    let _e157: Plane = other_3401;
    let _e168: MultiVector = self_3775;
    let _e172: Plane = other_3401;
    let _e184: MultiVector = self_3775;
    let _e188: Plane = other_3401;
    let _e200: MultiVector = self_3775;
    let _e203: MultiVector = self_3775;
    let _e206: MultiVector = self_3775;
    let _e209: MultiVector = self_3775;
    let _e213: Plane = other_3401;
    return MultiVector(((((vec2(_e4.g4_.y) * vec2(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.z) * vec2(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.x) * vec2(_e35.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e45.g0_.x) * _e49.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), (vec3(0.0) - (vec3(_e61.g1_.w) * vec3<f32>(_e65.g0_.x, _e68.g0_.y, _e71.g0_.z))), ((((vec3(_e77.g1_.y) * vec3<f32>(_e81.g0_.z, _e84.g0_.z, _e87.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e97.g1_.z) * vec3<f32>(_e101.g0_.y, _e104.g0_.x, _e107.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e118.g1_.x) * vec3<f32>(_e122.g0_.x, _e125.g0_.z, _e128.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((vec4(_e139.g2_.y) * _e143.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e153.g2_.z) * _e157.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e168.g3_.y) * vec4(_e172.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e184.g3_.z) * vec4(_e188.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4<f32>(_e200.g2_.x, _e203.g2_.x, _e206.g2_.x, _e209.g3_.x) * _e213.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_plane_scalar_product(self_3776: MultiVector, other_3402: Plane) -> Scalar {
    var self_3777: MultiVector;
    var other_3403: Plane;

    self_3777 = self_3776;
    other_3403 = other_3402;
    let _e5: MultiVector = self_3777;
    let _e8: Plane = other_3403;
    return Scalar((0.0 - (_e5.g4_.w * _e8.g0_.w)));
}

fn multi_vector_plane_dot(self_3778: MultiVector, other_3404: Plane) -> Scalar {
    var self_3779: MultiVector;
    var other_3405: Plane;

    self_3779 = self_3778;
    other_3405 = other_3404;
    let _e5: MultiVector = self_3779;
    let _e8: Plane = other_3405;
    return Scalar((0.0 - (_e5.g4_.w * _e8.g0_.w)));
}

fn multi_vector_plane_anti_scalar_product(self_3780: MultiVector, other_3406: Plane) -> AntiScalar {
    var self_3781: MultiVector;
    var other_3407: Plane;

    self_3781 = self_3780;
    other_3407 = other_3406;
    let _e4: MultiVector = self_3781;
    let _e7: Plane = other_3407;
    let _e11: MultiVector = self_3781;
    let _e14: Plane = other_3407;
    let _e19: MultiVector = self_3781;
    let _e22: Plane = other_3407;
    return AntiScalar((((_e4.g4_.x * _e7.g0_.x) + (_e11.g4_.y * _e14.g0_.y)) + (_e19.g4_.z * _e22.g0_.z)));
}

fn multi_vector_plane_anti_dot(self_3782: MultiVector, other_3408: Plane) -> AntiScalar {
    var self_3783: MultiVector;
    var other_3409: Plane;

    self_3783 = self_3782;
    other_3409 = other_3408;
    let _e4: MultiVector = self_3783;
    let _e7: Plane = other_3409;
    let _e11: MultiVector = self_3783;
    let _e14: Plane = other_3409;
    let _e19: MultiVector = self_3783;
    let _e22: Plane = other_3409;
    return AntiScalar((((_e4.g4_.x * _e7.g0_.x) + (_e11.g4_.y * _e14.g0_.y)) + (_e19.g4_.z * _e22.g0_.z)));
}

fn multi_vector_motor_into(self_3784: MultiVector) -> Motor {
    var self_3785: MultiVector;

    self_3785 = self_3784;
    let _e2: MultiVector = self_3785;
    let _e5: MultiVector = self_3785;
    let _e8: MultiVector = self_3785;
    let _e11: MultiVector = self_3785;
    let _e15: MultiVector = self_3785;
    return Motor(vec4<f32>(_e2.g2_.x, _e5.g2_.y, _e8.g2_.z, _e11.g0_.y), _e15.g3_);
}

fn multi_vector_motor_add(self_3786: MultiVector, other_3410: Motor) -> MultiVector {
    var self_3787: MultiVector;
    var other_3411: Motor;

    self_3787 = self_3786;
    other_3411 = other_3410;
    let _e4: MultiVector = self_3787;
    let _e6: Motor = other_3411;
    let _e9: Motor = other_3411;
    let _e18: MultiVector = self_3787;
    let _e20: MultiVector = self_3787;
    let _e22: Motor = other_3411;
    let _e25: Motor = other_3411;
    let _e28: Motor = other_3411;
    let _e33: MultiVector = self_3787;
    let _e35: Motor = other_3411;
    let _e38: MultiVector = self_3787;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ + vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), (_e33.g3_ + _e35.g1_), _e38.g4_);
}

fn multi_vector_motor_sub(self_3788: MultiVector, other_3412: Motor) -> MultiVector {
    var self_3789: MultiVector;
    var other_3413: Motor;

    self_3789 = self_3788;
    other_3413 = other_3412;
    let _e4: MultiVector = self_3789;
    let _e6: Motor = other_3413;
    let _e9: Motor = other_3413;
    let _e18: MultiVector = self_3789;
    let _e20: MultiVector = self_3789;
    let _e22: Motor = other_3413;
    let _e25: Motor = other_3413;
    let _e28: Motor = other_3413;
    let _e33: MultiVector = self_3789;
    let _e35: Motor = other_3413;
    let _e38: MultiVector = self_3789;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ - vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), (_e33.g3_ - _e35.g1_), _e38.g4_);
}

fn multi_vector_motor_geometric_product(self_3790: MultiVector, other_3414: Motor) -> MultiVector {
    var self_3791: MultiVector;
    var other_3415: Motor;

    self_3791 = self_3790;
    other_3415 = other_3414;
    let _e4: MultiVector = self_3791;
    let _e8: Motor = other_3415;
    let _e17: MultiVector = self_3791;
    let _e21: Motor = other_3415;
    let _e31: MultiVector = self_3791;
    let _e35: Motor = other_3415;
    let _e45: MultiVector = self_3791;
    let _e49: Motor = other_3415;
    let _e52: Motor = other_3415;
    let _e58: MultiVector = self_3791;
    let _e62: Motor = other_3415;
    let _e65: Motor = other_3415;
    let _e71: MultiVector = self_3791;
    let _e75: Motor = other_3415;
    let _e78: Motor = other_3415;
    let _e84: MultiVector = self_3791;
    let _e88: Motor = other_3415;
    let _e91: Motor = other_3415;
    let _e101: MultiVector = self_3791;
    let _e105: Motor = other_3415;
    let _e108: Motor = other_3415;
    let _e111: Motor = other_3415;
    let _e114: Motor = other_3415;
    let _e125: MultiVector = self_3791;
    let _e129: Motor = other_3415;
    let _e132: Motor = other_3415;
    let _e135: Motor = other_3415;
    let _e138: Motor = other_3415;
    let _e150: MultiVector = self_3791;
    let _e154: Motor = other_3415;
    let _e166: MultiVector = self_3791;
    let _e170: Motor = other_3415;
    let _e182: MultiVector = self_3791;
    let _e186: Motor = other_3415;
    let _e198: MultiVector = self_3791;
    let _e202: Motor = other_3415;
    let _e205: Motor = other_3415;
    let _e208: Motor = other_3415;
    let _e211: Motor = other_3415;
    let _e217: MultiVector = self_3791;
    let _e221: Motor = other_3415;
    let _e224: Motor = other_3415;
    let _e227: Motor = other_3415;
    let _e230: Motor = other_3415;
    let _e242: MultiVector = self_3791;
    let _e246: Motor = other_3415;
    let _e249: Motor = other_3415;
    let _e252: Motor = other_3415;
    let _e257: MultiVector = self_3791;
    let _e261: Motor = other_3415;
    let _e265: MultiVector = self_3791;
    let _e269: Motor = other_3415;
    let _e279: MultiVector = self_3791;
    let _e283: Motor = other_3415;
    let _e293: MultiVector = self_3791;
    let _e297: Motor = other_3415;
    let _e300: Motor = other_3415;
    let _e303: Motor = other_3415;
    let _e314: MultiVector = self_3791;
    let _e318: Motor = other_3415;
    let _e321: Motor = other_3415;
    let _e324: Motor = other_3415;
    let _e335: MultiVector = self_3791;
    let _e339: Motor = other_3415;
    let _e342: Motor = other_3415;
    let _e345: Motor = other_3415;
    let _e356: MultiVector = self_3791;
    let _e360: Motor = other_3415;
    let _e370: MultiVector = self_3791;
    let _e374: Motor = other_3415;
    let _e377: MultiVector = self_3791;
    let _e381: Motor = other_3415;
    let _e391: MultiVector = self_3791;
    let _e395: Motor = other_3415;
    let _e405: MultiVector = self_3791;
    let _e409: Motor = other_3415;
    let _e419: MultiVector = self_3791;
    let _e423: Motor = other_3415;
    let _e426: Motor = other_3415;
    let _e429: Motor = other_3415;
    let _e432: Motor = other_3415;
    let _e443: MultiVector = self_3791;
    let _e447: Motor = other_3415;
    let _e450: Motor = other_3415;
    let _e453: Motor = other_3415;
    let _e456: Motor = other_3415;
    let _e468: MultiVector = self_3791;
    let _e472: Motor = other_3415;
    let _e475: Motor = other_3415;
    let _e478: Motor = other_3415;
    let _e481: Motor = other_3415;
    let _e493: MultiVector = self_3791;
    let _e497: Motor = other_3415;
    let _e500: Motor = other_3415;
    let _e503: Motor = other_3415;
    let _e506: Motor = other_3415;
    let _e518: MultiVector = self_3791;
    let _e522: Motor = other_3415;
    let _e525: Motor = other_3415;
    let _e528: Motor = other_3415;
    let _e531: Motor = other_3415;
    let _e543: MultiVector = self_3791;
    let _e547: Motor = other_3415;
    let _e550: Motor = other_3415;
    let _e553: Motor = other_3415;
    let _e556: Motor = other_3415;
    let _e568: MultiVector = self_3791;
    let _e572: Motor = other_3415;
    let _e583: MultiVector = self_3791;
    let _e586: Motor = other_3415;
    let _e589: Motor = other_3415;
    let _e592: Motor = other_3415;
    let _e595: Motor = other_3415;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e45.g3_.x) * vec2<f32>(_e49.g1_.x, _e52.g0_.x))) - (vec2(_e58.g3_.y) * vec2<f32>(_e62.g1_.y, _e65.g0_.y))) - (vec2(_e71.g3_.z) * vec2<f32>(_e75.g1_.z, _e78.g0_.z))) + ((vec2(_e84.g0_.x) * vec2<f32>(_e88.g0_.x, _e91.g0_.w)) * vec2<f32>(0.0, 1.0))), ((((((((vec4(_e101.g1_.y) * vec4<f32>(_e105.g1_.z, _e108.g1_.z, _e111.g1_.x, _e114.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e125.g1_.z) * vec4<f32>(_e129.g1_.y, _e132.g1_.x, _e135.g1_.y, _e138.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e150.g4_.x) * vec4(_e154.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e166.g4_.y) * vec4(_e170.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e182.g4_.z) * vec4(_e186.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e198.g4_.w) * vec4<f32>(_e202.g1_.x, _e205.g1_.y, _e208.g1_.z, _e211.g0_.w))) + ((vec4(_e217.g1_.x) * vec4<f32>(_e221.g1_.x, _e224.g1_.z, _e227.g1_.y, _e230.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((((((vec3(_e242.g0_.x) * vec3<f32>(_e246.g0_.x, _e249.g0_.y, _e252.g0_.z)) + (vec3(_e257.g0_.y) * _e261.g1_)) + ((vec3(_e265.g2_.y) * _e269.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e279.g2_.z) * _e283.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e293.g3_.x) * vec3<f32>(_e297.g0_.w, _e300.g0_.z, _e303.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e314.g3_.y) * vec3<f32>(_e318.g0_.z, _e321.g0_.w, _e324.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e335.g3_.z) * vec3<f32>(_e339.g0_.y, _e342.g0_.x, _e345.g0_.w)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e356.g2_.x) * _e360.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), ((((vec3(_e370.g0_.x) * _e374.g1_) + ((vec3(_e377.g3_.y) * _e381.g1_.zzx) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e391.g3_.z) * _e395.g1_.yxy) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e405.g3_.x) * _e409.g1_.xzy) * vec3<f32>(0.0, 1.0, -1.0))), (((((((((vec4(_e419.g1_.x) * vec4<f32>(_e423.g0_.w, _e426.g0_.z, _e429.g0_.y, _e432.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0)) + ((vec4(_e443.g1_.y) * vec4<f32>(_e447.g0_.z, _e450.g0_.w, _e453.g0_.x, _e456.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e468.g1_.z) * vec4<f32>(_e472.g0_.y, _e475.g0_.x, _e478.g0_.w, _e481.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e493.g4_.x) * vec4<f32>(_e497.g1_.z, _e500.g1_.z, _e503.g1_.y, _e506.g1_.z)) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e518.g4_.y) * vec4<f32>(_e522.g1_.z, _e525.g1_.z, _e528.g1_.x, _e531.g1_.z)) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e543.g4_.z) * vec4<f32>(_e547.g1_.y, _e550.g1_.x, _e553.g1_.y, _e556.g1_.y)) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e568.g4_.w) * _e572.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e583.g1_.wwwx * vec4<f32>(_e586.g1_.x, _e589.g1_.y, _e592.g1_.z, _e595.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_motor_geometric_anti_product(self_3792: MultiVector, other_3416: Motor) -> MultiVector {
    var self_3793: MultiVector;
    var other_3417: Motor;

    self_3793 = self_3792;
    other_3417 = other_3416;
    let _e6: MultiVector = self_3793;
    let _e10: Motor = other_3417;
    let _e13: Motor = other_3417;
    let _e19: MultiVector = self_3793;
    let _e23: Motor = other_3417;
    let _e26: Motor = other_3417;
    let _e32: MultiVector = self_3793;
    let _e36: Motor = other_3417;
    let _e39: Motor = other_3417;
    let _e45: MultiVector = self_3793;
    let _e49: Motor = other_3417;
    let _e59: MultiVector = self_3793;
    let _e63: Motor = other_3417;
    let _e73: MultiVector = self_3793;
    let _e77: Motor = other_3417;
    let _e87: MultiVector = self_3793;
    let _e89: Motor = other_3417;
    let _e95: MultiVector = self_3793;
    let _e99: Motor = other_3417;
    let _e109: MultiVector = self_3793;
    let _e113: Motor = other_3417;
    let _e124: MultiVector = self_3793;
    let _e128: Motor = other_3417;
    let _e131: Motor = other_3417;
    let _e134: Motor = other_3417;
    let _e137: Motor = other_3417;
    let _e149: MultiVector = self_3793;
    let _e153: Motor = other_3417;
    let _e156: Motor = other_3417;
    let _e159: Motor = other_3417;
    let _e162: Motor = other_3417;
    let _e174: MultiVector = self_3793;
    let _e178: Motor = other_3417;
    let _e181: Motor = other_3417;
    let _e184: Motor = other_3417;
    let _e187: Motor = other_3417;
    let _e199: MultiVector = self_3793;
    let _e203: Motor = other_3417;
    let _e206: Motor = other_3417;
    let _e209: Motor = other_3417;
    let _e212: Motor = other_3417;
    let _e224: MultiVector = self_3793;
    let _e228: Motor = other_3417;
    let _e239: MultiVector = self_3793;
    let _e243: Motor = other_3417;
    let _e254: MultiVector = self_3793;
    let _e258: Motor = other_3417;
    let _e261: Motor = other_3417;
    let _e264: Motor = other_3417;
    let _e269: MultiVector = self_3793;
    let _e273: Motor = other_3417;
    let _e276: Motor = other_3417;
    let _e279: Motor = other_3417;
    let _e290: MultiVector = self_3793;
    let _e294: Motor = other_3417;
    let _e297: Motor = other_3417;
    let _e300: Motor = other_3417;
    let _e311: MultiVector = self_3793;
    let _e315: Motor = other_3417;
    let _e318: Motor = other_3417;
    let _e321: Motor = other_3417;
    let _e332: MultiVector = self_3793;
    let _e336: Motor = other_3417;
    let _e339: Motor = other_3417;
    let _e342: Motor = other_3417;
    let _e347: MultiVector = self_3793;
    let _e351: Motor = other_3417;
    let _e355: MultiVector = self_3793;
    let _e359: Motor = other_3417;
    let _e369: MultiVector = self_3793;
    let _e373: Motor = other_3417;
    let _e383: MultiVector = self_3793;
    let _e387: Motor = other_3417;
    let _e390: Motor = other_3417;
    let _e393: Motor = other_3417;
    let _e404: MultiVector = self_3793;
    let _e408: Motor = other_3417;
    let _e411: Motor = other_3417;
    let _e414: Motor = other_3417;
    let _e425: MultiVector = self_3793;
    let _e429: Motor = other_3417;
    let _e432: Motor = other_3417;
    let _e435: Motor = other_3417;
    let _e446: MultiVector = self_3793;
    let _e450: Motor = other_3417;
    let _e460: MultiVector = self_3793;
    let _e464: Motor = other_3417;
    let _e475: MultiVector = self_3793;
    let _e479: Motor = other_3417;
    let _e491: MultiVector = self_3793;
    let _e495: Motor = other_3417;
    let _e498: Motor = other_3417;
    let _e501: Motor = other_3417;
    let _e504: Motor = other_3417;
    let _e516: MultiVector = self_3793;
    let _e520: Motor = other_3417;
    let _e523: Motor = other_3417;
    let _e526: Motor = other_3417;
    let _e529: Motor = other_3417;
    let _e541: MultiVector = self_3793;
    let _e545: Motor = other_3417;
    let _e548: Motor = other_3417;
    let _e551: Motor = other_3417;
    let _e554: Motor = other_3417;
    let _e566: MultiVector = self_3793;
    let _e570: Motor = other_3417;
    let _e582: MultiVector = self_3793;
    let _e585: Motor = other_3417;
    return MultiVector((((((((vec2(0.0) - (vec2(_e6.g2_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2(_e19.g2_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2(_e32.g2_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e87.g0_ * vec2(_e89.g0_.w))), (((((((((vec4(_e95.g1_.y) * _e99.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e109.g1_.z) * _e113.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e124.g1_.w) * vec4<f32>(_e128.g1_.x, _e131.g1_.y, _e134.g1_.z, _e137.g0_.w)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e149.g4_.x) * vec4<f32>(_e153.g1_.z, _e156.g1_.z, _e159.g1_.y, _e162.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e174.g4_.y) * vec4<f32>(_e178.g1_.z, _e181.g1_.z, _e184.g1_.x, _e187.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e199.g4_.z) * vec4<f32>(_e203.g1_.y, _e206.g1_.x, _e209.g1_.y, _e212.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e224.g4_.w) * _e228.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e239.g1_.x) * _e243.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, 0.0))), ((((vec3(_e254.g0_.y) * vec3<f32>(_e258.g0_.x, _e261.g0_.y, _e264.g0_.z)) + ((vec3(_e269.g2_.x) * vec3<f32>(_e273.g0_.w, _e276.g0_.z, _e279.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e290.g2_.y) * vec3<f32>(_e294.g0_.z, _e297.g0_.w, _e300.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e311.g2_.z) * vec3<f32>(_e315.g0_.y, _e318.g0_.x, _e321.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), ((((((((vec3(_e332.g0_.x) * vec3<f32>(_e336.g0_.x, _e339.g0_.y, _e342.g0_.z)) + (vec3(_e347.g0_.y) * _e351.g1_)) + ((vec3(_e355.g2_.y) * _e359.g1_.zzx) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e369.g2_.z) * _e373.g1_.yxy) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e383.g3_.x) * vec3<f32>(_e387.g0_.w, _e390.g0_.z, _e393.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e404.g3_.y) * vec3<f32>(_e408.g0_.z, _e411.g0_.w, _e414.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e425.g3_.z) * vec3<f32>(_e429.g0_.y, _e432.g0_.x, _e435.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e446.g2_.x) * _e450.g1_.xzy) * vec3<f32>(0.0, -1.0, 1.0))), ((((((((vec4(_e460.g1_.y) * vec4(_e464.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e475.g1_.z) * vec4(_e479.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e491.g4_.x) * vec4<f32>(_e495.g0_.w, _e498.g0_.z, _e501.g0_.y, _e504.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e516.g4_.y) * vec4<f32>(_e520.g0_.z, _e523.g0_.w, _e526.g0_.x, _e529.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e541.g4_.z) * vec4<f32>(_e545.g0_.y, _e548.g0_.x, _e551.g0_.w, _e554.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e566.g4_.w) * vec4(_e570.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e582.g1_.wwwx * _e585.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_motor_regressive_product(self_3794: MultiVector, other_3418: Motor) -> MultiVector {
    var self_3795: MultiVector;
    var other_3419: Motor;

    self_3795 = self_3794;
    other_3419 = other_3418;
    let _e4: MultiVector = self_3795;
    let _e8: Motor = other_3419;
    let _e17: MultiVector = self_3795;
    let _e21: Motor = other_3419;
    let _e31: MultiVector = self_3795;
    let _e35: Motor = other_3419;
    let _e45: MultiVector = self_3795;
    let _e49: Motor = other_3419;
    let _e59: MultiVector = self_3795;
    let _e63: Motor = other_3419;
    let _e73: MultiVector = self_3795;
    let _e77: Motor = other_3419;
    let _e87: MultiVector = self_3795;
    let _e89: Motor = other_3419;
    let _e95: MultiVector = self_3795;
    let _e99: Motor = other_3419;
    let _e102: Motor = other_3419;
    let _e105: Motor = other_3419;
    let _e108: Motor = other_3419;
    let _e119: MultiVector = self_3795;
    let _e123: Motor = other_3419;
    let _e126: Motor = other_3419;
    let _e129: Motor = other_3419;
    let _e132: Motor = other_3419;
    let _e144: MultiVector = self_3795;
    let _e148: Motor = other_3419;
    let _e151: Motor = other_3419;
    let _e154: Motor = other_3419;
    let _e157: Motor = other_3419;
    let _e169: MultiVector = self_3795;
    let _e173: Motor = other_3419;
    let _e184: MultiVector = self_3795;
    let _e186: Motor = other_3419;
    let _e192: MultiVector = self_3795;
    let _e196: Motor = other_3419;
    let _e199: Motor = other_3419;
    let _e202: Motor = other_3419;
    let _e207: MultiVector = self_3795;
    let _e209: Motor = other_3419;
    let _e215: MultiVector = self_3795;
    let _e219: Motor = other_3419;
    let _e222: MultiVector = self_3795;
    let _e224: Motor = other_3419;
    let _e230: MultiVector = self_3795;
    let _e232: Motor = other_3419;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e87.g0_ * vec2(_e89.g0_.w))), ((((((vec4(_e95.g4_.x) * vec4<f32>(_e99.g1_.z, _e102.g1_.z, _e105.g1_.y, _e108.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e119.g4_.y) * vec4<f32>(_e123.g1_.z, _e126.g1_.z, _e129.g1_.x, _e132.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e144.g4_.z) * vec4<f32>(_e148.g1_.y, _e151.g1_.x, _e154.g1_.y, _e157.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e169.g4_.w) * _e173.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e184.g1_ * vec4(_e186.g0_.w))), ((vec3(_e192.g0_.y) * vec3<f32>(_e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) + (_e207.g2_ * vec3(_e209.g0_.w))), ((vec3(_e215.g0_.y) * _e219.g1_) + (_e222.g3_ * vec3(_e224.g0_.w))), (_e230.g4_ * vec4(_e232.g0_.w)));
}

fn multi_vector_motor_anti_wedge(self_3796: MultiVector, other_3420: Motor) -> MultiVector {
    var self_3797: MultiVector;
    var other_3421: Motor;

    self_3797 = self_3796;
    other_3421 = other_3420;
    let _e4: MultiVector = self_3797;
    let _e8: Motor = other_3421;
    let _e17: MultiVector = self_3797;
    let _e21: Motor = other_3421;
    let _e31: MultiVector = self_3797;
    let _e35: Motor = other_3421;
    let _e45: MultiVector = self_3797;
    let _e49: Motor = other_3421;
    let _e59: MultiVector = self_3797;
    let _e63: Motor = other_3421;
    let _e73: MultiVector = self_3797;
    let _e77: Motor = other_3421;
    let _e87: MultiVector = self_3797;
    let _e89: Motor = other_3421;
    let _e95: MultiVector = self_3797;
    let _e99: Motor = other_3421;
    let _e102: Motor = other_3421;
    let _e105: Motor = other_3421;
    let _e108: Motor = other_3421;
    let _e119: MultiVector = self_3797;
    let _e123: Motor = other_3421;
    let _e126: Motor = other_3421;
    let _e129: Motor = other_3421;
    let _e132: Motor = other_3421;
    let _e144: MultiVector = self_3797;
    let _e148: Motor = other_3421;
    let _e151: Motor = other_3421;
    let _e154: Motor = other_3421;
    let _e157: Motor = other_3421;
    let _e169: MultiVector = self_3797;
    let _e173: Motor = other_3421;
    let _e184: MultiVector = self_3797;
    let _e186: Motor = other_3421;
    let _e192: MultiVector = self_3797;
    let _e196: Motor = other_3421;
    let _e199: Motor = other_3421;
    let _e202: Motor = other_3421;
    let _e207: MultiVector = self_3797;
    let _e209: Motor = other_3421;
    let _e215: MultiVector = self_3797;
    let _e219: Motor = other_3421;
    let _e222: MultiVector = self_3797;
    let _e224: Motor = other_3421;
    let _e230: MultiVector = self_3797;
    let _e232: Motor = other_3421;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e87.g0_ * vec2(_e89.g0_.w))), ((((((vec4(_e95.g4_.x) * vec4<f32>(_e99.g1_.z, _e102.g1_.z, _e105.g1_.y, _e108.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e119.g4_.y) * vec4<f32>(_e123.g1_.z, _e126.g1_.z, _e129.g1_.x, _e132.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e144.g4_.z) * vec4<f32>(_e148.g1_.y, _e151.g1_.x, _e154.g1_.y, _e157.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e169.g4_.w) * _e173.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e184.g1_ * vec4(_e186.g0_.w))), ((vec3(_e192.g0_.y) * vec3<f32>(_e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) + (_e207.g2_ * vec3(_e209.g0_.w))), ((vec3(_e215.g0_.y) * _e219.g1_) + (_e222.g3_ * vec3(_e224.g0_.w))), (_e230.g4_ * vec4(_e232.g0_.w)));
}

fn multi_vector_motor_meet(self_3798: MultiVector, other_3422: Motor) -> MultiVector {
    var self_3799: MultiVector;
    var other_3423: Motor;

    self_3799 = self_3798;
    other_3423 = other_3422;
    let _e4: MultiVector = self_3799;
    let _e8: Motor = other_3423;
    let _e17: MultiVector = self_3799;
    let _e21: Motor = other_3423;
    let _e31: MultiVector = self_3799;
    let _e35: Motor = other_3423;
    let _e45: MultiVector = self_3799;
    let _e49: Motor = other_3423;
    let _e59: MultiVector = self_3799;
    let _e63: Motor = other_3423;
    let _e73: MultiVector = self_3799;
    let _e77: Motor = other_3423;
    let _e87: MultiVector = self_3799;
    let _e89: Motor = other_3423;
    let _e95: MultiVector = self_3799;
    let _e99: Motor = other_3423;
    let _e102: Motor = other_3423;
    let _e105: Motor = other_3423;
    let _e108: Motor = other_3423;
    let _e119: MultiVector = self_3799;
    let _e123: Motor = other_3423;
    let _e126: Motor = other_3423;
    let _e129: Motor = other_3423;
    let _e132: Motor = other_3423;
    let _e144: MultiVector = self_3799;
    let _e148: Motor = other_3423;
    let _e151: Motor = other_3423;
    let _e154: Motor = other_3423;
    let _e157: Motor = other_3423;
    let _e169: MultiVector = self_3799;
    let _e173: Motor = other_3423;
    let _e184: MultiVector = self_3799;
    let _e186: Motor = other_3423;
    let _e192: MultiVector = self_3799;
    let _e196: Motor = other_3423;
    let _e199: Motor = other_3423;
    let _e202: Motor = other_3423;
    let _e207: MultiVector = self_3799;
    let _e209: Motor = other_3423;
    let _e215: MultiVector = self_3799;
    let _e219: Motor = other_3423;
    let _e222: MultiVector = self_3799;
    let _e224: Motor = other_3423;
    let _e230: MultiVector = self_3799;
    let _e232: Motor = other_3423;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e87.g0_ * vec2(_e89.g0_.w))), ((((((vec4(_e95.g4_.x) * vec4<f32>(_e99.g1_.z, _e102.g1_.z, _e105.g1_.y, _e108.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0)) + ((vec4(_e119.g4_.y) * vec4<f32>(_e123.g1_.z, _e126.g1_.z, _e129.g1_.x, _e132.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e144.g4_.z) * vec4<f32>(_e148.g1_.y, _e151.g1_.x, _e154.g1_.y, _e157.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e169.g4_.w) * _e173.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e184.g1_ * vec4(_e186.g0_.w))), ((vec3(_e192.g0_.y) * vec3<f32>(_e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) + (_e207.g2_ * vec3(_e209.g0_.w))), ((vec3(_e215.g0_.y) * _e219.g1_) + (_e222.g3_ * vec3(_e224.g0_.w))), (_e230.g4_ * vec4(_e232.g0_.w)));
}

fn multi_vector_motor_outer_product(self_3800: MultiVector, other_3424: Motor) -> MultiVector {
    var self_3801: MultiVector;
    var other_3425: Motor;

    self_3801 = self_3800;
    other_3425 = other_3424;
    let _e4: MultiVector = self_3801;
    let _e8: Motor = other_3425;
    let _e17: MultiVector = self_3801;
    let _e21: Motor = other_3425;
    let _e31: MultiVector = self_3801;
    let _e35: Motor = other_3425;
    let _e45: MultiVector = self_3801;
    let _e49: Motor = other_3425;
    let _e59: MultiVector = self_3801;
    let _e63: Motor = other_3425;
    let _e73: MultiVector = self_3801;
    let _e77: Motor = other_3425;
    let _e87: MultiVector = self_3801;
    let _e91: Motor = other_3425;
    let _e94: Motor = other_3425;
    let _e106: MultiVector = self_3801;
    let _e110: Motor = other_3425;
    let _e113: Motor = other_3425;
    let _e116: Motor = other_3425;
    let _e121: MultiVector = self_3801;
    let _e125: Motor = other_3425;
    let _e128: MultiVector = self_3801;
    let _e132: Motor = other_3425;
    let _e135: Motor = other_3425;
    let _e138: Motor = other_3425;
    let _e141: Motor = other_3425;
    let _e152: MultiVector = self_3801;
    let _e156: Motor = other_3425;
    let _e159: Motor = other_3425;
    let _e162: Motor = other_3425;
    let _e165: Motor = other_3425;
    let _e177: MultiVector = self_3801;
    let _e181: Motor = other_3425;
    let _e184: Motor = other_3425;
    let _e187: Motor = other_3425;
    let _e190: Motor = other_3425;
    let _e202: MultiVector = self_3801;
    let _e206: Motor = other_3425;
    let _e209: Motor = other_3425;
    let _e212: Motor = other_3425;
    let _e215: Motor = other_3425;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2<f32>(_e91.g0_.x, _e94.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e106.g0_.x) * vec3<f32>(_e110.g0_.x, _e113.g0_.y, _e116.g0_.z)), (vec3(_e121.g0_.x) * _e125.g1_), (((((vec4(_e128.g1_.y) * vec4<f32>(_e132.g0_.z, _e135.g0_.z, _e138.g0_.x, _e141.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e152.g1_.z) * vec4<f32>(_e156.g0_.y, _e159.g0_.x, _e162.g0_.y, _e165.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e177.g1_.w) * vec4<f32>(_e181.g1_.x, _e184.g1_.y, _e187.g1_.z, _e190.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e202.g1_.x) * vec4<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y, _e215.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_motor_wedge(self_3802: MultiVector, other_3426: Motor) -> MultiVector {
    var self_3803: MultiVector;
    var other_3427: Motor;

    self_3803 = self_3802;
    other_3427 = other_3426;
    let _e4: MultiVector = self_3803;
    let _e8: Motor = other_3427;
    let _e17: MultiVector = self_3803;
    let _e21: Motor = other_3427;
    let _e31: MultiVector = self_3803;
    let _e35: Motor = other_3427;
    let _e45: MultiVector = self_3803;
    let _e49: Motor = other_3427;
    let _e59: MultiVector = self_3803;
    let _e63: Motor = other_3427;
    let _e73: MultiVector = self_3803;
    let _e77: Motor = other_3427;
    let _e87: MultiVector = self_3803;
    let _e91: Motor = other_3427;
    let _e94: Motor = other_3427;
    let _e106: MultiVector = self_3803;
    let _e110: Motor = other_3427;
    let _e113: Motor = other_3427;
    let _e116: Motor = other_3427;
    let _e121: MultiVector = self_3803;
    let _e125: Motor = other_3427;
    let _e128: MultiVector = self_3803;
    let _e132: Motor = other_3427;
    let _e135: Motor = other_3427;
    let _e138: Motor = other_3427;
    let _e141: Motor = other_3427;
    let _e152: MultiVector = self_3803;
    let _e156: Motor = other_3427;
    let _e159: Motor = other_3427;
    let _e162: Motor = other_3427;
    let _e165: Motor = other_3427;
    let _e177: MultiVector = self_3803;
    let _e181: Motor = other_3427;
    let _e184: Motor = other_3427;
    let _e187: Motor = other_3427;
    let _e190: Motor = other_3427;
    let _e202: MultiVector = self_3803;
    let _e206: Motor = other_3427;
    let _e209: Motor = other_3427;
    let _e212: Motor = other_3427;
    let _e215: Motor = other_3427;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2<f32>(_e91.g0_.x, _e94.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e106.g0_.x) * vec3<f32>(_e110.g0_.x, _e113.g0_.y, _e116.g0_.z)), (vec3(_e121.g0_.x) * _e125.g1_), (((((vec4(_e128.g1_.y) * vec4<f32>(_e132.g0_.z, _e135.g0_.z, _e138.g0_.x, _e141.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e152.g1_.z) * vec4<f32>(_e156.g0_.y, _e159.g0_.x, _e162.g0_.y, _e165.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e177.g1_.w) * vec4<f32>(_e181.g1_.x, _e184.g1_.y, _e187.g1_.z, _e190.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e202.g1_.x) * vec4<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y, _e215.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_motor_join(self_3804: MultiVector, other_3428: Motor) -> MultiVector {
    var self_3805: MultiVector;
    var other_3429: Motor;

    self_3805 = self_3804;
    other_3429 = other_3428;
    let _e4: MultiVector = self_3805;
    let _e8: Motor = other_3429;
    let _e17: MultiVector = self_3805;
    let _e21: Motor = other_3429;
    let _e31: MultiVector = self_3805;
    let _e35: Motor = other_3429;
    let _e45: MultiVector = self_3805;
    let _e49: Motor = other_3429;
    let _e59: MultiVector = self_3805;
    let _e63: Motor = other_3429;
    let _e73: MultiVector = self_3805;
    let _e77: Motor = other_3429;
    let _e87: MultiVector = self_3805;
    let _e91: Motor = other_3429;
    let _e94: Motor = other_3429;
    let _e106: MultiVector = self_3805;
    let _e110: Motor = other_3429;
    let _e113: Motor = other_3429;
    let _e116: Motor = other_3429;
    let _e121: MultiVector = self_3805;
    let _e125: Motor = other_3429;
    let _e128: MultiVector = self_3805;
    let _e132: Motor = other_3429;
    let _e135: Motor = other_3429;
    let _e138: Motor = other_3429;
    let _e141: Motor = other_3429;
    let _e152: MultiVector = self_3805;
    let _e156: Motor = other_3429;
    let _e159: Motor = other_3429;
    let _e162: Motor = other_3429;
    let _e165: Motor = other_3429;
    let _e177: MultiVector = self_3805;
    let _e181: Motor = other_3429;
    let _e184: Motor = other_3429;
    let _e187: Motor = other_3429;
    let _e190: Motor = other_3429;
    let _e202: MultiVector = self_3805;
    let _e206: Motor = other_3429;
    let _e209: Motor = other_3429;
    let _e212: Motor = other_3429;
    let _e215: Motor = other_3429;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g0_.x) * vec2<f32>(_e91.g0_.x, _e94.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e106.g0_.x) * vec3<f32>(_e110.g0_.x, _e113.g0_.y, _e116.g0_.z)), (vec3(_e121.g0_.x) * _e125.g1_), (((((vec4(_e128.g1_.y) * vec4<f32>(_e132.g0_.z, _e135.g0_.z, _e138.g0_.x, _e141.g1_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e152.g1_.z) * vec4<f32>(_e156.g0_.y, _e159.g0_.x, _e162.g0_.y, _e165.g1_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e177.g1_.w) * vec4<f32>(_e181.g1_.x, _e184.g1_.y, _e187.g1_.z, _e190.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e202.g1_.x) * vec4<f32>(_e206.g0_.x, _e209.g0_.z, _e212.g0_.y, _e215.g1_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_motor_inner_product(self_3806: MultiVector, other_3430: Motor) -> MultiVector {
    var self_3807: MultiVector;
    var other_3431: Motor;

    self_3807 = self_3806;
    other_3431 = other_3430;
    let _e4: MultiVector = self_3807;
    let _e8: Motor = other_3431;
    let _e17: MultiVector = self_3807;
    let _e21: Motor = other_3431;
    let _e31: MultiVector = self_3807;
    let _e35: Motor = other_3431;
    let _e45: MultiVector = self_3807;
    let _e49: Motor = other_3431;
    let _e52: Motor = other_3431;
    let _e62: MultiVector = self_3807;
    let _e66: Motor = other_3431;
    let _e69: Motor = other_3431;
    let _e72: Motor = other_3431;
    let _e75: Motor = other_3431;
    let _e86: MultiVector = self_3807;
    let _e90: Motor = other_3431;
    let _e93: Motor = other_3431;
    let _e96: Motor = other_3431;
    let _e99: Motor = other_3431;
    let _e111: MultiVector = self_3807;
    let _e115: Motor = other_3431;
    let _e127: MultiVector = self_3807;
    let _e131: Motor = other_3431;
    let _e143: MultiVector = self_3807;
    let _e147: Motor = other_3431;
    let _e159: MultiVector = self_3807;
    let _e163: Motor = other_3431;
    let _e166: Motor = other_3431;
    let _e169: Motor = other_3431;
    let _e172: Motor = other_3431;
    let _e178: MultiVector = self_3807;
    let _e182: Motor = other_3431;
    let _e185: Motor = other_3431;
    let _e188: Motor = other_3431;
    let _e191: Motor = other_3431;
    let _e203: MultiVector = self_3807;
    let _e207: Motor = other_3431;
    let _e210: Motor = other_3431;
    let _e213: Motor = other_3431;
    let _e218: MultiVector = self_3807;
    let _e222: Motor = other_3431;
    let _e226: MultiVector = self_3807;
    let _e228: Motor = other_3431;
    let _e234: MultiVector = self_3807;
    let _e238: Motor = other_3431;
    let _e241: MultiVector = self_3807;
    let _e244: Motor = other_3431;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g1_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), ((((((((vec4(_e62.g1_.y) * vec4<f32>(_e66.g1_.z, _e69.g1_.z, _e72.g1_.x, _e75.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e86.g1_.z) * vec4<f32>(_e90.g1_.y, _e93.g1_.x, _e96.g1_.y, _e99.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e111.g4_.x) * vec4(_e115.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e127.g4_.y) * vec4(_e131.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e143.g4_.z) * vec4(_e147.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e159.g4_.w) * vec4<f32>(_e163.g1_.x, _e166.g1_.y, _e169.g1_.z, _e172.g0_.w))) + ((vec4(_e178.g1_.x) * vec4<f32>(_e182.g1_.x, _e185.g1_.z, _e188.g1_.y, _e191.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((vec3(_e203.g0_.x) * vec3<f32>(_e207.g0_.x, _e210.g0_.y, _e213.g0_.z)) + (vec3(_e218.g0_.y) * _e222.g1_)) + (_e226.g3_ * vec3(_e228.g0_.w))), (vec3(_e234.g0_.x) * _e238.g1_), ((_e241.g1_.xyzx * _e244.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_motor_inner_anti_product(self_3808: MultiVector, other_3432: Motor) -> MultiVector {
    var self_3809: MultiVector;
    var other_3433: Motor;

    self_3809 = self_3808;
    other_3433 = other_3432;
    let _e4: MultiVector = self_3809;
    let _e8: Motor = other_3433;
    let _e17: MultiVector = self_3809;
    let _e21: Motor = other_3433;
    let _e31: MultiVector = self_3809;
    let _e35: Motor = other_3433;
    let _e45: MultiVector = self_3809;
    let _e47: Motor = other_3433;
    let _e53: MultiVector = self_3809;
    let _e55: Motor = other_3433;
    let _e60: MultiVector = self_3809;
    let _e64: Motor = other_3433;
    let _e67: Motor = other_3433;
    let _e70: Motor = other_3433;
    let _e75: MultiVector = self_3809;
    let _e77: Motor = other_3433;
    let _e83: MultiVector = self_3809;
    let _e87: Motor = other_3433;
    let _e90: Motor = other_3433;
    let _e93: Motor = other_3433;
    let _e98: MultiVector = self_3809;
    let _e102: Motor = other_3433;
    let _e106: MultiVector = self_3809;
    let _e108: Motor = other_3433;
    let _e114: MultiVector = self_3809;
    let _e118: Motor = other_3433;
    let _e129: MultiVector = self_3809;
    let _e133: Motor = other_3433;
    let _e145: MultiVector = self_3809;
    let _e149: Motor = other_3433;
    let _e152: Motor = other_3433;
    let _e155: Motor = other_3433;
    let _e158: Motor = other_3433;
    let _e170: MultiVector = self_3809;
    let _e174: Motor = other_3433;
    let _e177: Motor = other_3433;
    let _e180: Motor = other_3433;
    let _e183: Motor = other_3433;
    let _e195: MultiVector = self_3809;
    let _e199: Motor = other_3433;
    let _e202: Motor = other_3433;
    let _e205: Motor = other_3433;
    let _e208: Motor = other_3433;
    let _e220: MultiVector = self_3809;
    let _e224: Motor = other_3433;
    let _e236: MultiVector = self_3809;
    let _e239: Motor = other_3433;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (_e53.g1_ * vec4(_e55.g0_.w)), ((vec3(_e60.g0_.y) * vec3<f32>(_e64.g0_.x, _e67.g0_.y, _e70.g0_.z)) + (_e75.g2_ * vec3(_e77.g0_.w))), (((vec3(_e83.g0_.x) * vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z)) + (vec3(_e98.g0_.y) * _e102.g1_)) + (_e106.g3_ * vec3(_e108.g0_.w))), ((((((((vec4(_e114.g1_.y) * vec4(_e118.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e129.g1_.z) * vec4(_e133.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e145.g4_.x) * vec4<f32>(_e149.g0_.w, _e152.g0_.z, _e155.g0_.y, _e158.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e170.g4_.y) * vec4<f32>(_e174.g0_.z, _e177.g0_.w, _e180.g0_.x, _e183.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e195.g4_.z) * vec4<f32>(_e199.g0_.y, _e202.g0_.x, _e205.g0_.w, _e208.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e220.g4_.w) * vec4(_e224.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e236.g1_.wwwx * _e239.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_motor_left_contraction(self_3810: MultiVector, other_3434: Motor) -> MultiVector {
    var self_3811: MultiVector;
    var other_3435: Motor;

    self_3811 = self_3810;
    other_3435 = other_3434;
    let _e4: MultiVector = self_3811;
    let _e8: Motor = other_3435;
    let _e17: MultiVector = self_3811;
    let _e21: Motor = other_3435;
    let _e31: MultiVector = self_3811;
    let _e35: Motor = other_3435;
    let _e45: MultiVector = self_3811;
    let _e49: Motor = other_3435;
    let _e52: Motor = other_3435;
    let _e62: MultiVector = self_3811;
    let _e66: Motor = other_3435;
    let _e69: Motor = other_3435;
    let _e72: Motor = other_3435;
    let _e75: Motor = other_3435;
    let _e86: MultiVector = self_3811;
    let _e90: Motor = other_3435;
    let _e93: Motor = other_3435;
    let _e96: Motor = other_3435;
    let _e99: Motor = other_3435;
    let _e111: MultiVector = self_3811;
    let _e115: Motor = other_3435;
    let _e127: MultiVector = self_3811;
    let _e131: Motor = other_3435;
    let _e134: Motor = other_3435;
    let _e137: Motor = other_3435;
    let _e140: Motor = other_3435;
    let _e152: MultiVector = self_3811;
    let _e156: Motor = other_3435;
    let _e159: Motor = other_3435;
    let _e162: Motor = other_3435;
    let _e167: MultiVector = self_3811;
    let _e169: Motor = other_3435;
    let _e175: MultiVector = self_3811;
    let _e179: Motor = other_3435;
    let _e182: MultiVector = self_3811;
    let _e185: Motor = other_3435;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g1_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), (((((vec4(_e62.g1_.y) * vec4<f32>(_e66.g1_.z, _e69.g1_.z, _e72.g1_.x, _e75.g0_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0)) + ((vec4(_e86.g1_.z) * vec4<f32>(_e90.g1_.y, _e93.g1_.x, _e96.g1_.y, _e99.g0_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e111.g4_.w) * vec4(_e115.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e127.g1_.x) * vec4<f32>(_e131.g1_.x, _e134.g1_.z, _e137.g1_.y, _e140.g0_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((vec3(_e152.g0_.x) * vec3<f32>(_e156.g0_.x, _e159.g0_.y, _e162.g0_.z)) + (_e167.g3_ * vec3(_e169.g0_.w))), (vec3(_e175.g0_.x) * _e179.g1_), ((_e182.g1_.xyzx * _e185.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_motor_right_contraction(self_3812: MultiVector, other_3436: Motor) -> MultiVector {
    var self_3813: MultiVector;
    var other_3437: Motor;

    self_3813 = self_3812;
    other_3437 = other_3436;
    let _e4: MultiVector = self_3813;
    let _e8: Motor = other_3437;
    let _e17: MultiVector = self_3813;
    let _e21: Motor = other_3437;
    let _e31: MultiVector = self_3813;
    let _e35: Motor = other_3437;
    let _e45: MultiVector = self_3813;
    let _e49: Motor = other_3437;
    let _e60: MultiVector = self_3813;
    let _e64: Motor = other_3437;
    let _e76: MultiVector = self_3813;
    let _e79: Motor = other_3437;
    let _e82: Motor = other_3437;
    let _e85: Motor = other_3437;
    let _e88: Motor = other_3437;
    let _e100: MultiVector = self_3813;
    let _e104: Motor = other_3437;
    return MultiVector(((((vec2(_e4.g3_.y) * vec2(_e8.g1_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.z) * vec2(_e21.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g1_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g4_.y) * vec4(_e49.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e60.g4_.z) * vec4(_e64.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e76.g4_.wwwx * vec4<f32>(_e79.g1_.x, _e82.g1_.y, _e85.g1_.z, _e88.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e100.g0_.y) * _e104.g1_), vec3(0.0), vec4(0.0));
}

fn multi_vector_motor_left_anti_contraction(self_3814: MultiVector, other_3438: Motor) -> MultiVector {
    var self_3815: MultiVector;
    var other_3439: Motor;

    self_3815 = self_3814;
    other_3439 = other_3438;
    let _e4: MultiVector = self_3815;
    let _e8: Motor = other_3439;
    let _e17: MultiVector = self_3815;
    let _e21: Motor = other_3439;
    let _e31: MultiVector = self_3815;
    let _e35: Motor = other_3439;
    let _e45: MultiVector = self_3815;
    let _e47: Motor = other_3439;
    let _e50: Motor = other_3439;
    let _e62: MultiVector = self_3815;
    let _e66: Motor = other_3439;
    let _e69: Motor = other_3439;
    let _e72: Motor = other_3439;
    let _e77: MultiVector = self_3815;
    let _e81: Motor = other_3439;
    let _e84: MultiVector = self_3815;
    let _e88: Motor = other_3439;
    let _e91: Motor = other_3439;
    let _e94: Motor = other_3439;
    let _e97: Motor = other_3439;
    let _e108: MultiVector = self_3815;
    let _e112: Motor = other_3439;
    let _e115: Motor = other_3439;
    let _e118: Motor = other_3439;
    let _e121: Motor = other_3439;
    let _e133: MultiVector = self_3815;
    let _e137: Motor = other_3439;
    let _e140: Motor = other_3439;
    let _e143: Motor = other_3439;
    let _e146: Motor = other_3439;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((_e45.g0_ * vec2<f32>(_e47.g0_.x, _e50.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e62.g0_.y) * vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z)), (vec3(_e77.g0_.y) * _e81.g1_), ((((vec4(_e84.g4_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g1_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0)) + ((vec4(_e108.g4_.z) * vec4<f32>(_e112.g0_.y, _e115.g0_.x, _e118.g0_.y, _e121.g1_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((vec4(_e133.g4_.x) * vec4<f32>(_e137.g0_.x, _e140.g0_.z, _e143.g0_.y, _e146.g1_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))));
}

fn multi_vector_motor_right_anti_contraction(self_3816: MultiVector, other_3440: Motor) -> MultiVector {
    var self_3817: MultiVector;
    var other_3441: Motor;

    self_3817 = self_3816;
    other_3441 = other_3440;
    let _e4: MultiVector = self_3817;
    let _e8: Motor = other_3441;
    let _e17: MultiVector = self_3817;
    let _e21: Motor = other_3441;
    let _e31: MultiVector = self_3817;
    let _e35: Motor = other_3441;
    let _e45: MultiVector = self_3817;
    let _e47: Motor = other_3441;
    let _e53: MultiVector = self_3817;
    let _e55: Motor = other_3441;
    let _e60: MultiVector = self_3817;
    let _e62: Motor = other_3441;
    let _e67: MultiVector = self_3817;
    let _e71: Motor = other_3441;
    let _e74: Motor = other_3441;
    let _e77: Motor = other_3441;
    let _e82: MultiVector = self_3817;
    let _e84: Motor = other_3441;
    let _e90: MultiVector = self_3817;
    let _e94: Motor = other_3441;
    let _e105: MultiVector = self_3817;
    let _e109: Motor = other_3441;
    let _e121: MultiVector = self_3817;
    let _e125: Motor = other_3441;
    let _e137: MultiVector = self_3817;
    let _e141: Motor = other_3441;
    let _e153: MultiVector = self_3817;
    let _e157: Motor = other_3441;
    let _e169: MultiVector = self_3817;
    let _e173: Motor = other_3441;
    let _e185: MultiVector = self_3817;
    let _e188: Motor = other_3441;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (_e53.g1_ * vec4(_e55.g0_.w)), (_e60.g2_ * vec3(_e62.g0_.w)), ((vec3(_e67.g0_.x) * vec3<f32>(_e71.g0_.x, _e74.g0_.y, _e77.g0_.z)) + (_e82.g3_ * vec3(_e84.g0_.w))), ((((((((vec4(_e90.g1_.y) * vec4(_e94.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e105.g1_.z) * vec4(_e109.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e121.g4_.x) * vec4(_e125.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e137.g4_.y) * vec4(_e141.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e153.g4_.z) * vec4(_e157.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e169.g4_.w) * vec4(_e173.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e185.g1_.wwwx * _e188.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_motor_scalar_product(self_3818: MultiVector, other_3442: Motor) -> Scalar {
    var self_3819: MultiVector;
    var other_3443: Motor;

    self_3819 = self_3818;
    other_3443 = other_3442;
    let _e5: MultiVector = self_3819;
    let _e8: Motor = other_3443;
    let _e13: MultiVector = self_3819;
    let _e16: Motor = other_3443;
    let _e21: MultiVector = self_3819;
    let _e24: Motor = other_3443;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_motor_dot(self_3820: MultiVector, other_3444: Motor) -> Scalar {
    var self_3821: MultiVector;
    var other_3445: Motor;

    self_3821 = self_3820;
    other_3445 = other_3444;
    let _e5: MultiVector = self_3821;
    let _e8: Motor = other_3445;
    let _e13: MultiVector = self_3821;
    let _e16: Motor = other_3445;
    let _e21: MultiVector = self_3821;
    let _e24: Motor = other_3445;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_motor_anti_scalar_product(self_3822: MultiVector, other_3446: Motor) -> AntiScalar {
    var self_3823: MultiVector;
    var other_3447: Motor;

    self_3823 = self_3822;
    other_3447 = other_3446;
    let _e4: MultiVector = self_3823;
    let _e7: Motor = other_3447;
    let _e11: MultiVector = self_3823;
    let _e14: Motor = other_3447;
    let _e19: MultiVector = self_3823;
    let _e22: Motor = other_3447;
    let _e27: MultiVector = self_3823;
    let _e30: Motor = other_3447;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_motor_anti_dot(self_3824: MultiVector, other_3448: Motor) -> AntiScalar {
    var self_3825: MultiVector;
    var other_3449: Motor;

    self_3825 = self_3824;
    other_3449 = other_3448;
    let _e4: MultiVector = self_3825;
    let _e7: Motor = other_3449;
    let _e11: MultiVector = self_3825;
    let _e14: Motor = other_3449;
    let _e19: MultiVector = self_3825;
    let _e22: Motor = other_3449;
    let _e27: MultiVector = self_3825;
    let _e30: Motor = other_3449;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_rotor_into(self_3826: MultiVector) -> Rotor {
    var self_3827: MultiVector;

    self_3827 = self_3826;
    let _e2: MultiVector = self_3827;
    let _e5: MultiVector = self_3827;
    let _e8: MultiVector = self_3827;
    let _e11: MultiVector = self_3827;
    return Rotor(vec4<f32>(_e2.g2_.x, _e5.g2_.y, _e8.g2_.z, _e11.g0_.y));
}

fn multi_vector_rotor_add(self_3828: MultiVector, other_3450: Rotor) -> MultiVector {
    var self_3829: MultiVector;
    var other_3451: Rotor;

    self_3829 = self_3828;
    other_3451 = other_3450;
    let _e4: MultiVector = self_3829;
    let _e6: Rotor = other_3451;
    let _e9: Rotor = other_3451;
    let _e18: MultiVector = self_3829;
    let _e20: MultiVector = self_3829;
    let _e22: Rotor = other_3451;
    let _e25: Rotor = other_3451;
    let _e28: Rotor = other_3451;
    let _e33: MultiVector = self_3829;
    let _e35: MultiVector = self_3829;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ + vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), _e33.g3_, _e35.g4_);
}

fn multi_vector_rotor_sub(self_3830: MultiVector, other_3452: Rotor) -> MultiVector {
    var self_3831: MultiVector;
    var other_3453: Rotor;

    self_3831 = self_3830;
    other_3453 = other_3452;
    let _e4: MultiVector = self_3831;
    let _e6: Rotor = other_3453;
    let _e9: Rotor = other_3453;
    let _e18: MultiVector = self_3831;
    let _e20: MultiVector = self_3831;
    let _e22: Rotor = other_3453;
    let _e25: Rotor = other_3453;
    let _e28: Rotor = other_3453;
    let _e33: MultiVector = self_3831;
    let _e35: MultiVector = self_3831;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ - vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), _e33.g3_, _e35.g4_);
}

fn multi_vector_rotor_geometric_product(self_3832: MultiVector, other_3454: Rotor) -> MultiVector {
    var self_3833: MultiVector;
    var other_3455: Rotor;

    self_3833 = self_3832;
    other_3455 = other_3454;
    let _e4: MultiVector = self_3833;
    let _e8: Rotor = other_3455;
    let _e17: MultiVector = self_3833;
    let _e21: Rotor = other_3455;
    let _e31: MultiVector = self_3833;
    let _e35: Rotor = other_3455;
    let _e45: MultiVector = self_3833;
    let _e49: Rotor = other_3455;
    let _e52: Rotor = other_3455;
    let _e62: MultiVector = self_3833;
    let _e66: Rotor = other_3455;
    let _e77: MultiVector = self_3833;
    let _e81: Rotor = other_3455;
    let _e93: MultiVector = self_3833;
    let _e97: Rotor = other_3455;
    let _e109: MultiVector = self_3833;
    let _e113: Rotor = other_3455;
    let _e125: MultiVector = self_3833;
    let _e129: Rotor = other_3455;
    let _e132: Rotor = other_3455;
    let _e135: Rotor = other_3455;
    let _e140: MultiVector = self_3833;
    let _e144: Rotor = other_3455;
    let _e147: Rotor = other_3455;
    let _e150: Rotor = other_3455;
    let _e161: MultiVector = self_3833;
    let _e165: Rotor = other_3455;
    let _e168: Rotor = other_3455;
    let _e171: Rotor = other_3455;
    let _e182: MultiVector = self_3833;
    let _e186: Rotor = other_3455;
    let _e189: Rotor = other_3455;
    let _e192: Rotor = other_3455;
    let _e205: MultiVector = self_3833;
    let _e209: Rotor = other_3455;
    let _e219: MultiVector = self_3833;
    let _e223: Rotor = other_3455;
    let _e234: MultiVector = self_3833;
    let _e238: Rotor = other_3455;
    let _e249: MultiVector = self_3833;
    let _e253: Rotor = other_3455;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), (((((vec4(_e62.g1_.y) * vec4(_e66.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e77.g1_.z) * vec4(_e81.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e93.g4_.w) * vec4(_e97.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e109.g1_.x) * vec4(_e113.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec3(_e125.g0_.x) * vec3<f32>(_e129.g0_.x, _e132.g0_.y, _e135.g0_.z)) + ((vec3(_e140.g3_.x) * vec3<f32>(_e144.g0_.w, _e147.g0_.z, _e150.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e161.g3_.y) * vec3<f32>(_e165.g0_.z, _e168.g0_.w, _e171.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e182.g3_.z) * vec3<f32>(_e186.g0_.y, _e189.g0_.x, _e192.g0_.w)) * vec3<f32>(1.0, -1.0, 1.0))), vec3(0.0), (((((vec4(_e205.g1_.y) * _e209.g0_.zwxz) * vec4<f32>(-1.0, 1.0, 1.0, 0.0)) + ((vec4(_e219.g1_.z) * _e223.g0_.yxwy) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e234.g4_.w) * _e238.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e249.g1_.x) * _e253.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, 0.0))));
}

fn multi_vector_rotor_geometric_anti_product(self_3834: MultiVector, other_3456: Rotor) -> MultiVector {
    var self_3835: MultiVector;
    var other_3457: Rotor;

    self_3835 = self_3834;
    other_3457 = other_3456;
    let _e4: MultiVector = self_3835;
    let _e8: Rotor = other_3457;
    let _e17: MultiVector = self_3835;
    let _e21: Rotor = other_3457;
    let _e31: MultiVector = self_3835;
    let _e35: Rotor = other_3457;
    let _e45: MultiVector = self_3835;
    let _e49: Rotor = other_3457;
    let _e59: MultiVector = self_3835;
    let _e63: Rotor = other_3457;
    let _e73: MultiVector = self_3835;
    let _e77: Rotor = other_3457;
    let _e87: MultiVector = self_3835;
    let _e89: Rotor = other_3457;
    let _e95: MultiVector = self_3835;
    let _e99: Rotor = other_3457;
    let _e109: MultiVector = self_3835;
    let _e113: Rotor = other_3457;
    let _e124: MultiVector = self_3835;
    let _e128: Rotor = other_3457;
    let _e140: MultiVector = self_3835;
    let _e144: Rotor = other_3457;
    let _e156: MultiVector = self_3835;
    let _e160: Rotor = other_3457;
    let _e172: MultiVector = self_3835;
    let _e176: Rotor = other_3457;
    let _e187: MultiVector = self_3835;
    let _e190: Rotor = other_3457;
    let _e201: MultiVector = self_3835;
    let _e205: Rotor = other_3457;
    let _e208: Rotor = other_3457;
    let _e211: Rotor = other_3457;
    let _e216: MultiVector = self_3835;
    let _e220: Rotor = other_3457;
    let _e223: Rotor = other_3457;
    let _e226: Rotor = other_3457;
    let _e237: MultiVector = self_3835;
    let _e241: Rotor = other_3457;
    let _e244: Rotor = other_3457;
    let _e247: Rotor = other_3457;
    let _e258: MultiVector = self_3835;
    let _e262: Rotor = other_3457;
    let _e265: Rotor = other_3457;
    let _e268: Rotor = other_3457;
    let _e279: MultiVector = self_3835;
    let _e283: Rotor = other_3457;
    let _e286: Rotor = other_3457;
    let _e289: Rotor = other_3457;
    let _e294: MultiVector = self_3835;
    let _e298: Rotor = other_3457;
    let _e301: Rotor = other_3457;
    let _e304: Rotor = other_3457;
    let _e315: MultiVector = self_3835;
    let _e319: Rotor = other_3457;
    let _e322: Rotor = other_3457;
    let _e325: Rotor = other_3457;
    let _e336: MultiVector = self_3835;
    let _e340: Rotor = other_3457;
    let _e343: Rotor = other_3457;
    let _e346: Rotor = other_3457;
    let _e357: MultiVector = self_3835;
    let _e361: Rotor = other_3457;
    let _e372: MultiVector = self_3835;
    let _e376: Rotor = other_3457;
    let _e388: MultiVector = self_3835;
    let _e392: Rotor = other_3457;
    let _e403: MultiVector = self_3835;
    let _e407: Rotor = other_3457;
    let _e418: MultiVector = self_3835;
    let _e422: Rotor = other_3457;
    let _e433: MultiVector = self_3835;
    let _e437: Rotor = other_3457;
    let _e449: MultiVector = self_3835;
    let _e452: Rotor = other_3457;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e87.g0_ * vec2(_e89.g0_.w))), ((((((((vec4(_e95.g1_.y) * _e99.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0)) + ((vec4(_e109.g1_.z) * _e113.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e124.g4_.x) * vec4(_e128.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e140.g4_.y) * vec4(_e144.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e156.g4_.z) * vec4(_e160.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e172.g4_.w) * _e176.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e187.g1_.xxxw * _e190.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 1.0))), ((((vec3(_e201.g0_.y) * vec3<f32>(_e205.g0_.x, _e208.g0_.y, _e211.g0_.z)) + ((vec3(_e216.g2_.x) * vec3<f32>(_e220.g0_.w, _e223.g0_.z, _e226.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e237.g2_.y) * vec3<f32>(_e241.g0_.z, _e244.g0_.w, _e247.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e258.g2_.z) * vec3<f32>(_e262.g0_.y, _e265.g0_.x, _e268.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), ((((vec3(_e279.g0_.x) * vec3<f32>(_e283.g0_.x, _e286.g0_.y, _e289.g0_.z)) + ((vec3(_e294.g3_.x) * vec3<f32>(_e298.g0_.w, _e301.g0_.z, _e304.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e315.g3_.y) * vec3<f32>(_e319.g0_.z, _e322.g0_.w, _e325.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e336.g3_.z) * vec3<f32>(_e340.g0_.y, _e343.g0_.x, _e346.g0_.w)) * vec3<f32>(-1.0, 1.0, 1.0))), ((((((((vec4(_e357.g1_.y) * vec4(_e361.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e372.g1_.z) * vec4(_e376.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e388.g4_.x) * _e392.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e403.g4_.y) * _e407.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e418.g4_.z) * _e422.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e433.g4_.w) * vec4(_e437.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e449.g1_.wwwx * _e452.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_rotor_regressive_product(self_3836: MultiVector, other_3458: Rotor) -> MultiVector {
    var self_3837: MultiVector;
    var other_3459: Rotor;

    self_3837 = self_3836;
    other_3459 = other_3458;
    let _e4: MultiVector = self_3837;
    let _e8: Rotor = other_3459;
    let _e17: MultiVector = self_3837;
    let _e21: Rotor = other_3459;
    let _e31: MultiVector = self_3837;
    let _e35: Rotor = other_3459;
    let _e45: MultiVector = self_3837;
    let _e47: Rotor = other_3459;
    let _e53: MultiVector = self_3837;
    let _e57: Rotor = other_3459;
    let _e68: MultiVector = self_3837;
    let _e72: Rotor = other_3459;
    let _e84: MultiVector = self_3837;
    let _e88: Rotor = other_3459;
    let _e100: MultiVector = self_3837;
    let _e104: Rotor = other_3459;
    let _e115: MultiVector = self_3837;
    let _e117: Rotor = other_3459;
    let _e123: MultiVector = self_3837;
    let _e127: Rotor = other_3459;
    let _e130: Rotor = other_3459;
    let _e133: Rotor = other_3459;
    let _e138: MultiVector = self_3837;
    let _e140: Rotor = other_3459;
    let _e146: MultiVector = self_3837;
    let _e148: Rotor = other_3459;
    let _e153: MultiVector = self_3837;
    let _e155: Rotor = other_3459;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), ((((((vec4(_e53.g4_.x) * vec4(_e57.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e68.g4_.y) * vec4(_e72.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e84.g4_.z) * vec4(_e88.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e100.g4_.w) * _e104.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e115.g1_ * vec4(_e117.g0_.w))), ((vec3(_e123.g0_.y) * vec3<f32>(_e127.g0_.x, _e130.g0_.y, _e133.g0_.z)) + (_e138.g2_ * vec3(_e140.g0_.w))), (_e146.g3_ * vec3(_e148.g0_.w)), (_e153.g4_ * vec4(_e155.g0_.w)));
}

fn multi_vector_rotor_anti_wedge(self_3838: MultiVector, other_3460: Rotor) -> MultiVector {
    var self_3839: MultiVector;
    var other_3461: Rotor;

    self_3839 = self_3838;
    other_3461 = other_3460;
    let _e4: MultiVector = self_3839;
    let _e8: Rotor = other_3461;
    let _e17: MultiVector = self_3839;
    let _e21: Rotor = other_3461;
    let _e31: MultiVector = self_3839;
    let _e35: Rotor = other_3461;
    let _e45: MultiVector = self_3839;
    let _e47: Rotor = other_3461;
    let _e53: MultiVector = self_3839;
    let _e57: Rotor = other_3461;
    let _e68: MultiVector = self_3839;
    let _e72: Rotor = other_3461;
    let _e84: MultiVector = self_3839;
    let _e88: Rotor = other_3461;
    let _e100: MultiVector = self_3839;
    let _e104: Rotor = other_3461;
    let _e115: MultiVector = self_3839;
    let _e117: Rotor = other_3461;
    let _e123: MultiVector = self_3839;
    let _e127: Rotor = other_3461;
    let _e130: Rotor = other_3461;
    let _e133: Rotor = other_3461;
    let _e138: MultiVector = self_3839;
    let _e140: Rotor = other_3461;
    let _e146: MultiVector = self_3839;
    let _e148: Rotor = other_3461;
    let _e153: MultiVector = self_3839;
    let _e155: Rotor = other_3461;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), ((((((vec4(_e53.g4_.x) * vec4(_e57.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e68.g4_.y) * vec4(_e72.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e84.g4_.z) * vec4(_e88.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e100.g4_.w) * _e104.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e115.g1_ * vec4(_e117.g0_.w))), ((vec3(_e123.g0_.y) * vec3<f32>(_e127.g0_.x, _e130.g0_.y, _e133.g0_.z)) + (_e138.g2_ * vec3(_e140.g0_.w))), (_e146.g3_ * vec3(_e148.g0_.w)), (_e153.g4_ * vec4(_e155.g0_.w)));
}

fn multi_vector_rotor_meet(self_3840: MultiVector, other_3462: Rotor) -> MultiVector {
    var self_3841: MultiVector;
    var other_3463: Rotor;

    self_3841 = self_3840;
    other_3463 = other_3462;
    let _e4: MultiVector = self_3841;
    let _e8: Rotor = other_3463;
    let _e17: MultiVector = self_3841;
    let _e21: Rotor = other_3463;
    let _e31: MultiVector = self_3841;
    let _e35: Rotor = other_3463;
    let _e45: MultiVector = self_3841;
    let _e47: Rotor = other_3463;
    let _e53: MultiVector = self_3841;
    let _e57: Rotor = other_3463;
    let _e68: MultiVector = self_3841;
    let _e72: Rotor = other_3463;
    let _e84: MultiVector = self_3841;
    let _e88: Rotor = other_3463;
    let _e100: MultiVector = self_3841;
    let _e104: Rotor = other_3463;
    let _e115: MultiVector = self_3841;
    let _e117: Rotor = other_3463;
    let _e123: MultiVector = self_3841;
    let _e127: Rotor = other_3463;
    let _e130: Rotor = other_3463;
    let _e133: Rotor = other_3463;
    let _e138: MultiVector = self_3841;
    let _e140: Rotor = other_3463;
    let _e146: MultiVector = self_3841;
    let _e148: Rotor = other_3463;
    let _e153: MultiVector = self_3841;
    let _e155: Rotor = other_3463;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), ((((((vec4(_e53.g4_.x) * vec4(_e57.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e68.g4_.y) * vec4(_e72.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e84.g4_.z) * vec4(_e88.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e100.g4_.w) * _e104.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e115.g1_ * vec4(_e117.g0_.w))), ((vec3(_e123.g0_.y) * vec3<f32>(_e127.g0_.x, _e130.g0_.y, _e133.g0_.z)) + (_e138.g2_ * vec3(_e140.g0_.w))), (_e146.g3_ * vec3(_e148.g0_.w)), (_e153.g4_ * vec4(_e155.g0_.w)));
}

fn multi_vector_rotor_outer_product(self_3842: MultiVector, other_3464: Rotor) -> MultiVector {
    var self_3843: MultiVector;
    var other_3465: Rotor;

    self_3843 = self_3842;
    other_3465 = other_3464;
    let _e4: MultiVector = self_3843;
    let _e8: Rotor = other_3465;
    let _e17: MultiVector = self_3843;
    let _e21: Rotor = other_3465;
    let _e31: MultiVector = self_3843;
    let _e35: Rotor = other_3465;
    let _e45: MultiVector = self_3843;
    let _e49: Rotor = other_3465;
    let _e52: Rotor = other_3465;
    let _e64: MultiVector = self_3843;
    let _e68: Rotor = other_3465;
    let _e71: Rotor = other_3465;
    let _e74: Rotor = other_3465;
    let _e81: MultiVector = self_3843;
    let _e85: Rotor = other_3465;
    let _e95: MultiVector = self_3843;
    let _e99: Rotor = other_3465;
    let _e110: MultiVector = self_3843;
    let _e114: Rotor = other_3465;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e64.g0_.x) * vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z)), vec3(0.0), ((((vec4(_e81.g1_.y) * _e85.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e95.g1_.z) * _e99.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e110.g1_.x) * _e114.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn multi_vector_rotor_wedge(self_3844: MultiVector, other_3466: Rotor) -> MultiVector {
    var self_3845: MultiVector;
    var other_3467: Rotor;

    self_3845 = self_3844;
    other_3467 = other_3466;
    let _e4: MultiVector = self_3845;
    let _e8: Rotor = other_3467;
    let _e17: MultiVector = self_3845;
    let _e21: Rotor = other_3467;
    let _e31: MultiVector = self_3845;
    let _e35: Rotor = other_3467;
    let _e45: MultiVector = self_3845;
    let _e49: Rotor = other_3467;
    let _e52: Rotor = other_3467;
    let _e64: MultiVector = self_3845;
    let _e68: Rotor = other_3467;
    let _e71: Rotor = other_3467;
    let _e74: Rotor = other_3467;
    let _e81: MultiVector = self_3845;
    let _e85: Rotor = other_3467;
    let _e95: MultiVector = self_3845;
    let _e99: Rotor = other_3467;
    let _e110: MultiVector = self_3845;
    let _e114: Rotor = other_3467;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e64.g0_.x) * vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z)), vec3(0.0), ((((vec4(_e81.g1_.y) * _e85.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e95.g1_.z) * _e99.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e110.g1_.x) * _e114.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn multi_vector_rotor_join(self_3846: MultiVector, other_3468: Rotor) -> MultiVector {
    var self_3847: MultiVector;
    var other_3469: Rotor;

    self_3847 = self_3846;
    other_3469 = other_3468;
    let _e4: MultiVector = self_3847;
    let _e8: Rotor = other_3469;
    let _e17: MultiVector = self_3847;
    let _e21: Rotor = other_3469;
    let _e31: MultiVector = self_3847;
    let _e35: Rotor = other_3469;
    let _e45: MultiVector = self_3847;
    let _e49: Rotor = other_3469;
    let _e52: Rotor = other_3469;
    let _e64: MultiVector = self_3847;
    let _e68: Rotor = other_3469;
    let _e71: Rotor = other_3469;
    let _e74: Rotor = other_3469;
    let _e81: MultiVector = self_3847;
    let _e85: Rotor = other_3469;
    let _e95: MultiVector = self_3847;
    let _e99: Rotor = other_3469;
    let _e110: MultiVector = self_3847;
    let _e114: Rotor = other_3469;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e64.g0_.x) * vec3<f32>(_e68.g0_.x, _e71.g0_.y, _e74.g0_.z)), vec3(0.0), ((((vec4(_e81.g1_.y) * _e85.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e95.g1_.z) * _e99.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e110.g1_.x) * _e114.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, 0.0))));
}

fn multi_vector_rotor_inner_product(self_3848: MultiVector, other_3470: Rotor) -> MultiVector {
    var self_3849: MultiVector;
    var other_3471: Rotor;

    self_3849 = self_3848;
    other_3471 = other_3470;
    let _e4: MultiVector = self_3849;
    let _e8: Rotor = other_3471;
    let _e11: Rotor = other_3471;
    let _e20: MultiVector = self_3849;
    let _e24: Rotor = other_3471;
    let _e35: MultiVector = self_3849;
    let _e39: Rotor = other_3471;
    let _e51: MultiVector = self_3849;
    let _e55: Rotor = other_3471;
    let _e67: MultiVector = self_3849;
    let _e71: Rotor = other_3471;
    let _e83: MultiVector = self_3849;
    let _e87: Rotor = other_3471;
    let _e90: Rotor = other_3471;
    let _e93: Rotor = other_3471;
    let _e98: MultiVector = self_3849;
    let _e100: Rotor = other_3471;
    let _e108: MultiVector = self_3849;
    let _e111: Rotor = other_3471;
    return MultiVector(((vec2(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g0_.w)) * vec2<f32>(0.0, 1.0)), (((((vec4(_e20.g1_.y) * vec4(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g4_.w) * vec4(_e55.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e67.g1_.x) * vec4(_e71.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec3(_e83.g0_.x) * vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z)) + (_e98.g3_ * vec3(_e100.g0_.w))), vec3(0.0), ((_e108.g1_.xyzx * _e111.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_rotor_inner_anti_product(self_3850: MultiVector, other_3472: Rotor) -> MultiVector {
    var self_3851: MultiVector;
    var other_3473: Rotor;

    self_3851 = self_3850;
    other_3473 = other_3472;
    let _e4: MultiVector = self_3851;
    let _e8: Rotor = other_3473;
    let _e17: MultiVector = self_3851;
    let _e21: Rotor = other_3473;
    let _e31: MultiVector = self_3851;
    let _e35: Rotor = other_3473;
    let _e45: MultiVector = self_3851;
    let _e47: Rotor = other_3473;
    let _e53: MultiVector = self_3851;
    let _e55: Rotor = other_3473;
    let _e60: MultiVector = self_3851;
    let _e64: Rotor = other_3473;
    let _e67: Rotor = other_3473;
    let _e70: Rotor = other_3473;
    let _e75: MultiVector = self_3851;
    let _e77: Rotor = other_3473;
    let _e83: MultiVector = self_3851;
    let _e87: Rotor = other_3473;
    let _e90: Rotor = other_3473;
    let _e93: Rotor = other_3473;
    let _e98: MultiVector = self_3851;
    let _e100: Rotor = other_3473;
    let _e106: MultiVector = self_3851;
    let _e110: Rotor = other_3473;
    let _e121: MultiVector = self_3851;
    let _e125: Rotor = other_3473;
    let _e137: MultiVector = self_3851;
    let _e141: Rotor = other_3473;
    let _e152: MultiVector = self_3851;
    let _e156: Rotor = other_3473;
    let _e167: MultiVector = self_3851;
    let _e171: Rotor = other_3473;
    let _e182: MultiVector = self_3851;
    let _e186: Rotor = other_3473;
    let _e198: MultiVector = self_3851;
    let _e201: Rotor = other_3473;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (_e53.g1_ * vec4(_e55.g0_.w)), ((vec3(_e60.g0_.y) * vec3<f32>(_e64.g0_.x, _e67.g0_.y, _e70.g0_.z)) + (_e75.g2_ * vec3(_e77.g0_.w))), ((vec3(_e83.g0_.x) * vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z)) + (_e98.g3_ * vec3(_e100.g0_.w))), ((((((((vec4(_e106.g1_.y) * vec4(_e110.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e121.g1_.z) * vec4(_e125.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e137.g4_.x) * _e141.g0_.wzyw) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e152.g4_.y) * _e156.g0_.zwxz) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e167.g4_.z) * _e171.g0_.yxwy) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e182.g4_.w) * vec4(_e186.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e198.g1_.wwwx * _e201.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_rotor_left_contraction(self_3852: MultiVector, other_3474: Rotor) -> MultiVector {
    var self_3853: MultiVector;
    var other_3475: Rotor;

    self_3853 = self_3852;
    other_3475 = other_3474;
    let _e4: MultiVector = self_3853;
    let _e8: Rotor = other_3475;
    let _e11: Rotor = other_3475;
    let _e20: MultiVector = self_3853;
    let _e24: Rotor = other_3475;
    let _e35: MultiVector = self_3853;
    let _e39: Rotor = other_3475;
    let _e51: MultiVector = self_3853;
    let _e55: Rotor = other_3475;
    let _e67: MultiVector = self_3853;
    let _e71: Rotor = other_3475;
    let _e83: MultiVector = self_3853;
    let _e87: Rotor = other_3475;
    let _e90: Rotor = other_3475;
    let _e93: Rotor = other_3475;
    let _e98: MultiVector = self_3853;
    let _e100: Rotor = other_3475;
    let _e108: MultiVector = self_3853;
    let _e111: Rotor = other_3475;
    return MultiVector(((vec2(_e4.g0_.x) * vec2<f32>(_e8.g0_.x, _e11.g0_.w)) * vec2<f32>(0.0, 1.0)), (((((vec4(_e20.g1_.y) * vec4(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e35.g1_.z) * vec4(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e51.g4_.w) * vec4(_e55.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e67.g1_.x) * vec4(_e71.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((vec3(_e83.g0_.x) * vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z)) + (_e98.g3_ * vec3(_e100.g0_.w))), vec3(0.0), ((_e108.g1_.xyzx * _e111.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_rotor_left_anti_contraction(self_3854: MultiVector, other_3476: Rotor) -> MultiVector {
    var self_3855: MultiVector;
    var other_3477: Rotor;

    self_3855 = self_3854;
    other_3477 = other_3476;
    let _e4: MultiVector = self_3855;
    let _e8: Rotor = other_3477;
    let _e17: MultiVector = self_3855;
    let _e21: Rotor = other_3477;
    let _e31: MultiVector = self_3855;
    let _e35: Rotor = other_3477;
    let _e45: MultiVector = self_3855;
    let _e47: Rotor = other_3477;
    let _e50: Rotor = other_3477;
    let _e62: MultiVector = self_3855;
    let _e66: Rotor = other_3477;
    let _e69: Rotor = other_3477;
    let _e72: Rotor = other_3477;
    let _e79: MultiVector = self_3855;
    let _e83: Rotor = other_3477;
    let _e93: MultiVector = self_3855;
    let _e97: Rotor = other_3477;
    let _e108: MultiVector = self_3855;
    let _e112: Rotor = other_3477;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((_e45.g0_ * vec2<f32>(_e47.g0_.x, _e50.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), (vec3(_e62.g0_.y) * vec3<f32>(_e66.g0_.x, _e69.g0_.y, _e72.g0_.z)), vec3(0.0), ((((vec4(_e79.g4_.y) * _e83.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0)) + ((vec4(_e93.g4_.z) * _e97.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e108.g4_.x) * _e112.g0_.xzyx) * vec4<f32>(0.0, -1.0, 1.0, 0.0))));
}

fn multi_vector_rotor_right_anti_contraction(self_3856: MultiVector, other_3478: Rotor) -> MultiVector {
    var self_3857: MultiVector;
    var other_3479: Rotor;

    self_3857 = self_3856;
    other_3479 = other_3478;
    let _e4: MultiVector = self_3857;
    let _e8: Rotor = other_3479;
    let _e17: MultiVector = self_3857;
    let _e21: Rotor = other_3479;
    let _e31: MultiVector = self_3857;
    let _e35: Rotor = other_3479;
    let _e45: MultiVector = self_3857;
    let _e47: Rotor = other_3479;
    let _e53: MultiVector = self_3857;
    let _e55: Rotor = other_3479;
    let _e60: MultiVector = self_3857;
    let _e62: Rotor = other_3479;
    let _e67: MultiVector = self_3857;
    let _e71: Rotor = other_3479;
    let _e74: Rotor = other_3479;
    let _e77: Rotor = other_3479;
    let _e82: MultiVector = self_3857;
    let _e84: Rotor = other_3479;
    let _e90: MultiVector = self_3857;
    let _e94: Rotor = other_3479;
    let _e105: MultiVector = self_3857;
    let _e109: Rotor = other_3479;
    let _e121: MultiVector = self_3857;
    let _e125: Rotor = other_3479;
    let _e137: MultiVector = self_3857;
    let _e141: Rotor = other_3479;
    let _e153: MultiVector = self_3857;
    let _e157: Rotor = other_3479;
    let _e169: MultiVector = self_3857;
    let _e173: Rotor = other_3479;
    let _e185: MultiVector = self_3857;
    let _e188: Rotor = other_3479;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (_e53.g1_ * vec4(_e55.g0_.w)), (_e60.g2_ * vec3(_e62.g0_.w)), ((vec3(_e67.g0_.x) * vec3<f32>(_e71.g0_.x, _e74.g0_.y, _e77.g0_.z)) + (_e82.g3_ * vec3(_e84.g0_.w))), ((((((((vec4(_e90.g1_.y) * vec4(_e94.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e105.g1_.z) * vec4(_e109.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e121.g4_.x) * vec4(_e125.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e137.g4_.y) * vec4(_e141.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e153.g4_.z) * vec4(_e157.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e169.g4_.w) * vec4(_e173.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e185.g1_.wwwx * _e188.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_rotor_anti_scalar_product(self_3858: MultiVector, other_3480: Rotor) -> AntiScalar {
    var self_3859: MultiVector;
    var other_3481: Rotor;

    self_3859 = self_3858;
    other_3481 = other_3480;
    let _e4: MultiVector = self_3859;
    let _e7: Rotor = other_3481;
    let _e11: MultiVector = self_3859;
    let _e14: Rotor = other_3481;
    let _e19: MultiVector = self_3859;
    let _e22: Rotor = other_3481;
    let _e27: MultiVector = self_3859;
    let _e30: Rotor = other_3481;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_rotor_anti_dot(self_3860: MultiVector, other_3482: Rotor) -> AntiScalar {
    var self_3861: MultiVector;
    var other_3483: Rotor;

    self_3861 = self_3860;
    other_3483 = other_3482;
    let _e4: MultiVector = self_3861;
    let _e7: Rotor = other_3483;
    let _e11: MultiVector = self_3861;
    let _e14: Rotor = other_3483;
    let _e19: MultiVector = self_3861;
    let _e22: Rotor = other_3483;
    let _e27: MultiVector = self_3861;
    let _e30: Rotor = other_3483;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_translator_into(self_3862: MultiVector) -> Translator {
    var self_3863: MultiVector;

    self_3863 = self_3862;
    let _e2: MultiVector = self_3863;
    let _e5: MultiVector = self_3863;
    let _e8: MultiVector = self_3863;
    let _e11: MultiVector = self_3863;
    return Translator(vec4<f32>(_e2.g3_.x, _e5.g3_.y, _e8.g3_.z, _e11.g0_.y));
}

fn multi_vector_translator_add(self_3864: MultiVector, other_3484: Translator) -> MultiVector {
    var self_3865: MultiVector;
    var other_3485: Translator;

    self_3865 = self_3864;
    other_3485 = other_3484;
    let _e4: MultiVector = self_3865;
    let _e6: Translator = other_3485;
    let _e9: Translator = other_3485;
    let _e18: MultiVector = self_3865;
    let _e20: MultiVector = self_3865;
    let _e22: MultiVector = self_3865;
    let _e24: Translator = other_3485;
    let _e27: Translator = other_3485;
    let _e30: Translator = other_3485;
    let _e35: MultiVector = self_3865;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, _e20.g2_, (_e22.g3_ + vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)), _e35.g4_);
}

fn multi_vector_translator_sub(self_3866: MultiVector, other_3486: Translator) -> MultiVector {
    var self_3867: MultiVector;
    var other_3487: Translator;

    self_3867 = self_3866;
    other_3487 = other_3486;
    let _e4: MultiVector = self_3867;
    let _e6: Translator = other_3487;
    let _e9: Translator = other_3487;
    let _e18: MultiVector = self_3867;
    let _e20: MultiVector = self_3867;
    let _e22: MultiVector = self_3867;
    let _e24: Translator = other_3487;
    let _e27: Translator = other_3487;
    let _e30: Translator = other_3487;
    let _e35: MultiVector = self_3867;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, _e20.g2_, (_e22.g3_ - vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)), _e35.g4_);
}

fn multi_vector_translator_geometric_product(self_3868: MultiVector, other_3488: Translator) -> MultiVector {
    var self_3869: MultiVector;
    var other_3489: Translator;

    self_3869 = self_3868;
    other_3489 = other_3488;
    let _e4: MultiVector = self_3869;
    let _e8: Translator = other_3489;
    let _e17: MultiVector = self_3869;
    let _e21: Translator = other_3489;
    let _e31: MultiVector = self_3869;
    let _e35: Translator = other_3489;
    let _e45: MultiVector = self_3869;
    let _e49: Translator = other_3489;
    let _e59: MultiVector = self_3869;
    let _e63: Translator = other_3489;
    let _e73: MultiVector = self_3869;
    let _e77: Translator = other_3489;
    let _e87: MultiVector = self_3869;
    let _e91: Translator = other_3489;
    let _e94: Translator = other_3489;
    let _e104: MultiVector = self_3869;
    let _e108: Translator = other_3489;
    let _e118: MultiVector = self_3869;
    let _e122: Translator = other_3489;
    let _e133: MultiVector = self_3869;
    let _e137: Translator = other_3489;
    let _e149: MultiVector = self_3869;
    let _e153: Translator = other_3489;
    let _e165: MultiVector = self_3869;
    let _e169: Translator = other_3489;
    let _e173: MultiVector = self_3869;
    let _e176: MultiVector = self_3869;
    let _e179: MultiVector = self_3869;
    let _e182: MultiVector = self_3869;
    let _e186: Translator = other_3489;
    let _e197: MultiVector = self_3869;
    let _e201: Translator = other_3489;
    let _e204: Translator = other_3489;
    let _e207: Translator = other_3489;
    let _e212: MultiVector = self_3869;
    let _e216: Translator = other_3489;
    let _e219: Translator = other_3489;
    let _e222: Translator = other_3489;
    let _e233: MultiVector = self_3869;
    let _e237: Translator = other_3489;
    let _e240: Translator = other_3489;
    let _e243: Translator = other_3489;
    let _e254: MultiVector = self_3869;
    let _e258: Translator = other_3489;
    let _e269: MultiVector = self_3869;
    let _e273: Translator = other_3489;
    let _e284: MultiVector = self_3869;
    let _e287: MultiVector = self_3869;
    let _e290: MultiVector = self_3869;
    let _e294: Translator = other_3489;
    let _e297: Translator = other_3489;
    let _e300: Translator = other_3489;
    let _e311: MultiVector = self_3869;
    let _e315: Translator = other_3489;
    let _e318: Translator = other_3489;
    let _e321: Translator = other_3489;
    let _e326: MultiVector = self_3869;
    let _e330: Translator = other_3489;
    let _e333: Translator = other_3489;
    let _e336: Translator = other_3489;
    let _e347: MultiVector = self_3869;
    let _e351: Translator = other_3489;
    let _e354: Translator = other_3489;
    let _e357: Translator = other_3489;
    let _e368: MultiVector = self_3869;
    let _e372: Translator = other_3489;
    let _e375: Translator = other_3489;
    let _e378: Translator = other_3489;
    let _e389: MultiVector = self_3869;
    let _e393: Translator = other_3489;
    let _e403: MultiVector = self_3869;
    let _e407: Translator = other_3489;
    let _e418: MultiVector = self_3869;
    let _e422: Translator = other_3489;
    let _e433: MultiVector = self_3869;
    let _e437: Translator = other_3489;
    let _e448: MultiVector = self_3869;
    let _e452: Translator = other_3489;
    let _e463: MultiVector = self_3869;
    let _e466: MultiVector = self_3869;
    let _e469: MultiVector = self_3869;
    let _e472: MultiVector = self_3869;
    let _e476: Translator = other_3489;
    return MultiVector(((((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g0_.x) * vec2<f32>(_e91.g0_.x, _e94.g0_.w)) * vec2<f32>(0.0, 1.0))), (((((((vec4(_e104.g1_.y) * _e108.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e118.g1_.z) * _e122.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e133.g4_.y) * vec4(_e137.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e149.g4_.z) * vec4(_e153.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e165.g4_.w) * _e169.g0_)) + ((vec4<f32>(_e173.g1_.x, _e176.g1_.x, _e179.g1_.x, _e182.g4_.x) * _e186.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((((((vec3(_e197.g0_.y) * vec3<f32>(_e201.g0_.x, _e204.g0_.y, _e207.g0_.z)) + ((vec3(_e212.g2_.y) * vec3<f32>(_e216.g0_.z, _e219.g0_.z, _e222.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e233.g2_.z) * vec3<f32>(_e237.g0_.y, _e240.g0_.x, _e243.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e254.g3_.y) * vec3(_e258.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e269.g3_.z) * vec3(_e273.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e284.g3_.x, _e287.g2_.x, _e290.g2_.x) * vec3<f32>(_e294.g0_.w, _e297.g0_.z, _e300.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))), ((((vec3(_e311.g0_.x) * vec3<f32>(_e315.g0_.x, _e318.g0_.y, _e321.g0_.z)) + ((vec3(_e326.g3_.y) * vec3<f32>(_e330.g0_.z, _e333.g0_.z, _e336.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e347.g3_.z) * vec3<f32>(_e351.g0_.y, _e354.g0_.x, _e357.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e368.g3_.x) * vec3<f32>(_e372.g0_.x, _e375.g0_.z, _e378.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (((((((vec4(_e389.g1_.y) * _e393.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0)) + ((vec4(_e403.g1_.z) * _e407.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e418.g1_.w) * _e422.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e433.g4_.y) * _e437.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e448.g4_.z) * _e452.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e463.g1_.x, _e466.g4_.x, _e469.g4_.x, _e472.g1_.x) * _e476.g0_.wzyx) * vec4<f32>(1.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_translator_geometric_anti_product(self_3870: MultiVector, other_3490: Translator) -> MultiVector {
    var self_3871: MultiVector;
    var other_3491: Translator;

    self_3871 = self_3870;
    other_3491 = other_3490;
    let _e4: MultiVector = self_3871;
    let _e8: Translator = other_3491;
    let _e17: MultiVector = self_3871;
    let _e21: Translator = other_3491;
    let _e31: MultiVector = self_3871;
    let _e35: Translator = other_3491;
    let _e45: MultiVector = self_3871;
    let _e47: Translator = other_3491;
    let _e53: MultiVector = self_3871;
    let _e57: Translator = other_3491;
    let _e66: MultiVector = self_3871;
    let _e70: Translator = other_3491;
    let _e81: MultiVector = self_3871;
    let _e85: Translator = other_3491;
    let _e96: MultiVector = self_3871;
    let _e100: Translator = other_3491;
    let _e111: MultiVector = self_3871;
    let _e114: Translator = other_3491;
    let _e125: MultiVector = self_3871;
    let _e127: Translator = other_3491;
    let _e132: MultiVector = self_3871;
    let _e136: Translator = other_3491;
    let _e139: Translator = other_3491;
    let _e142: Translator = other_3491;
    let _e147: MultiVector = self_3871;
    let _e151: Translator = other_3491;
    let _e154: Translator = other_3491;
    let _e157: Translator = other_3491;
    let _e168: MultiVector = self_3871;
    let _e172: Translator = other_3491;
    let _e175: Translator = other_3491;
    let _e178: Translator = other_3491;
    let _e189: MultiVector = self_3871;
    let _e193: Translator = other_3491;
    let _e204: MultiVector = self_3871;
    let _e208: Translator = other_3491;
    let _e219: MultiVector = self_3871;
    let _e222: MultiVector = self_3871;
    let _e225: MultiVector = self_3871;
    let _e229: Translator = other_3491;
    let _e232: Translator = other_3491;
    let _e235: Translator = other_3491;
    let _e246: MultiVector = self_3871;
    let _e250: Translator = other_3491;
    let _e260: MultiVector = self_3871;
    let _e264: Translator = other_3491;
    let _e275: MultiVector = self_3871;
    let _e279: Translator = other_3491;
    let _e291: MultiVector = self_3871;
    let _e295: Translator = other_3491;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), ((((((vec4(_e53.g1_.w) * _e57.g0_) * vec4<f32>(-1.0, -1.0, -1.0, 1.0)) + ((vec4(_e66.g4_.x) * _e70.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e81.g4_.y) * _e85.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e96.g4_.z) * _e100.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((_e111.g1_.xyzx * _e114.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e125.g2_ * vec3(_e127.g0_.w)), ((((((vec3(_e132.g0_.y) * vec3<f32>(_e136.g0_.x, _e139.g0_.y, _e142.g0_.z)) + ((vec3(_e147.g2_.y) * vec3<f32>(_e151.g0_.z, _e154.g0_.z, _e157.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e168.g2_.z) * vec3<f32>(_e172.g0_.y, _e175.g0_.x, _e178.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e189.g3_.y) * vec3(_e193.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e204.g3_.z) * vec3(_e208.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e219.g3_.x, _e222.g2_.x, _e225.g2_.x) * vec3<f32>(_e229.g0_.w, _e232.g0_.z, _e235.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))), (((((vec4(_e246.g4_.y) * _e250.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e260.g4_.z) * _e264.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e275.g4_.w) * vec4(_e279.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e291.g4_.x) * _e295.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_regressive_product(self_3872: MultiVector, other_3492: Translator) -> MultiVector {
    var self_3873: MultiVector;
    var other_3493: Translator;

    self_3873 = self_3872;
    other_3493 = other_3492;
    let _e4: MultiVector = self_3873;
    let _e8: Translator = other_3493;
    let _e17: MultiVector = self_3873;
    let _e21: Translator = other_3493;
    let _e31: MultiVector = self_3873;
    let _e35: Translator = other_3493;
    let _e45: MultiVector = self_3873;
    let _e47: Translator = other_3493;
    let _e53: MultiVector = self_3873;
    let _e57: Translator = other_3493;
    let _e67: MultiVector = self_3873;
    let _e71: Translator = other_3493;
    let _e82: MultiVector = self_3873;
    let _e86: Translator = other_3493;
    let _e97: MultiVector = self_3873;
    let _e99: Translator = other_3493;
    let _e105: MultiVector = self_3873;
    let _e107: Translator = other_3493;
    let _e112: MultiVector = self_3873;
    let _e116: Translator = other_3493;
    let _e119: Translator = other_3493;
    let _e122: Translator = other_3493;
    let _e127: MultiVector = self_3873;
    let _e129: Translator = other_3493;
    let _e135: MultiVector = self_3873;
    let _e137: Translator = other_3493;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (((((vec4(_e53.g4_.x) * _e57.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e67.g4_.y) * _e71.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e82.g4_.z) * _e86.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e97.g1_ * vec4(_e99.g0_.w))), (_e105.g2_ * vec3(_e107.g0_.w)), ((vec3(_e112.g0_.y) * vec3<f32>(_e116.g0_.x, _e119.g0_.y, _e122.g0_.z)) + (_e127.g3_ * vec3(_e129.g0_.w))), (_e135.g4_ * vec4(_e137.g0_.w)));
}

fn multi_vector_translator_anti_wedge(self_3874: MultiVector, other_3494: Translator) -> MultiVector {
    var self_3875: MultiVector;
    var other_3495: Translator;

    self_3875 = self_3874;
    other_3495 = other_3494;
    let _e4: MultiVector = self_3875;
    let _e8: Translator = other_3495;
    let _e17: MultiVector = self_3875;
    let _e21: Translator = other_3495;
    let _e31: MultiVector = self_3875;
    let _e35: Translator = other_3495;
    let _e45: MultiVector = self_3875;
    let _e47: Translator = other_3495;
    let _e53: MultiVector = self_3875;
    let _e57: Translator = other_3495;
    let _e67: MultiVector = self_3875;
    let _e71: Translator = other_3495;
    let _e82: MultiVector = self_3875;
    let _e86: Translator = other_3495;
    let _e97: MultiVector = self_3875;
    let _e99: Translator = other_3495;
    let _e105: MultiVector = self_3875;
    let _e107: Translator = other_3495;
    let _e112: MultiVector = self_3875;
    let _e116: Translator = other_3495;
    let _e119: Translator = other_3495;
    let _e122: Translator = other_3495;
    let _e127: MultiVector = self_3875;
    let _e129: Translator = other_3495;
    let _e135: MultiVector = self_3875;
    let _e137: Translator = other_3495;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (((((vec4(_e53.g4_.x) * _e57.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e67.g4_.y) * _e71.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e82.g4_.z) * _e86.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e97.g1_ * vec4(_e99.g0_.w))), (_e105.g2_ * vec3(_e107.g0_.w)), ((vec3(_e112.g0_.y) * vec3<f32>(_e116.g0_.x, _e119.g0_.y, _e122.g0_.z)) + (_e127.g3_ * vec3(_e129.g0_.w))), (_e135.g4_ * vec4(_e137.g0_.w)));
}

fn multi_vector_translator_meet(self_3876: MultiVector, other_3496: Translator) -> MultiVector {
    var self_3877: MultiVector;
    var other_3497: Translator;

    self_3877 = self_3876;
    other_3497 = other_3496;
    let _e4: MultiVector = self_3877;
    let _e8: Translator = other_3497;
    let _e17: MultiVector = self_3877;
    let _e21: Translator = other_3497;
    let _e31: MultiVector = self_3877;
    let _e35: Translator = other_3497;
    let _e45: MultiVector = self_3877;
    let _e47: Translator = other_3497;
    let _e53: MultiVector = self_3877;
    let _e57: Translator = other_3497;
    let _e67: MultiVector = self_3877;
    let _e71: Translator = other_3497;
    let _e82: MultiVector = self_3877;
    let _e86: Translator = other_3497;
    let _e97: MultiVector = self_3877;
    let _e99: Translator = other_3497;
    let _e105: MultiVector = self_3877;
    let _e107: Translator = other_3497;
    let _e112: MultiVector = self_3877;
    let _e116: Translator = other_3497;
    let _e119: Translator = other_3497;
    let _e122: Translator = other_3497;
    let _e127: MultiVector = self_3877;
    let _e129: Translator = other_3497;
    let _e135: MultiVector = self_3877;
    let _e137: Translator = other_3497;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + (_e45.g0_ * vec2(_e47.g0_.w))), (((((vec4(_e53.g4_.x) * _e57.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0)) + ((vec4(_e67.g4_.y) * _e71.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e82.g4_.z) * _e86.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + (_e97.g1_ * vec4(_e99.g0_.w))), (_e105.g2_ * vec3(_e107.g0_.w)), ((vec3(_e112.g0_.y) * vec3<f32>(_e116.g0_.x, _e119.g0_.y, _e122.g0_.z)) + (_e127.g3_ * vec3(_e129.g0_.w))), (_e135.g4_ * vec4(_e137.g0_.w)));
}

fn multi_vector_translator_outer_product(self_3878: MultiVector, other_3498: Translator) -> MultiVector {
    var self_3879: MultiVector;
    var other_3499: Translator;

    self_3879 = self_3878;
    other_3499 = other_3498;
    let _e4: MultiVector = self_3879;
    let _e8: Translator = other_3499;
    let _e17: MultiVector = self_3879;
    let _e21: Translator = other_3499;
    let _e31: MultiVector = self_3879;
    let _e35: Translator = other_3499;
    let _e45: MultiVector = self_3879;
    let _e49: Translator = other_3499;
    let _e52: Translator = other_3499;
    let _e66: MultiVector = self_3879;
    let _e70: Translator = other_3499;
    let _e73: Translator = other_3499;
    let _e76: Translator = other_3499;
    let _e81: MultiVector = self_3879;
    let _e85: Translator = other_3499;
    let _e96: MultiVector = self_3879;
    let _e100: Translator = other_3499;
    let _e112: MultiVector = self_3879;
    let _e115: Translator = other_3499;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), (vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)), ((((vec4(_e81.g1_.y) * vec4(_e85.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e96.g1_.z) * vec4(_e100.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e112.g1_.wwwx * _e115.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_translator_wedge(self_3880: MultiVector, other_3500: Translator) -> MultiVector {
    var self_3881: MultiVector;
    var other_3501: Translator;

    self_3881 = self_3880;
    other_3501 = other_3500;
    let _e4: MultiVector = self_3881;
    let _e8: Translator = other_3501;
    let _e17: MultiVector = self_3881;
    let _e21: Translator = other_3501;
    let _e31: MultiVector = self_3881;
    let _e35: Translator = other_3501;
    let _e45: MultiVector = self_3881;
    let _e49: Translator = other_3501;
    let _e52: Translator = other_3501;
    let _e66: MultiVector = self_3881;
    let _e70: Translator = other_3501;
    let _e73: Translator = other_3501;
    let _e76: Translator = other_3501;
    let _e81: MultiVector = self_3881;
    let _e85: Translator = other_3501;
    let _e96: MultiVector = self_3881;
    let _e100: Translator = other_3501;
    let _e112: MultiVector = self_3881;
    let _e115: Translator = other_3501;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), (vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)), ((((vec4(_e81.g1_.y) * vec4(_e85.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e96.g1_.z) * vec4(_e100.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e112.g1_.wwwx * _e115.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_translator_join(self_3882: MultiVector, other_3502: Translator) -> MultiVector {
    var self_3883: MultiVector;
    var other_3503: Translator;

    self_3883 = self_3882;
    other_3503 = other_3502;
    let _e4: MultiVector = self_3883;
    let _e8: Translator = other_3503;
    let _e17: MultiVector = self_3883;
    let _e21: Translator = other_3503;
    let _e31: MultiVector = self_3883;
    let _e35: Translator = other_3503;
    let _e45: MultiVector = self_3883;
    let _e49: Translator = other_3503;
    let _e52: Translator = other_3503;
    let _e66: MultiVector = self_3883;
    let _e70: Translator = other_3503;
    let _e73: Translator = other_3503;
    let _e76: Translator = other_3503;
    let _e81: MultiVector = self_3883;
    let _e85: Translator = other_3503;
    let _e96: MultiVector = self_3883;
    let _e100: Translator = other_3503;
    let _e112: MultiVector = self_3883;
    let _e115: Translator = other_3503;
    return MultiVector((((((vec2(_e4.g2_.x) * vec2(_e8.g0_.x)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.y) * vec2(_e21.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.z) * vec2(_e35.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), vec4(0.0), vec3(0.0), (vec3(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z)), ((((vec4(_e81.g1_.y) * vec4(_e85.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e96.g1_.z) * vec4(_e100.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e112.g1_.wwwx * _e115.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))));
}

fn multi_vector_translator_inner_product(self_3884: MultiVector, other_3504: Translator) -> MultiVector {
    var self_3885: MultiVector;
    var other_3505: Translator;

    self_3885 = self_3884;
    other_3505 = other_3504;
    let _e4: MultiVector = self_3885;
    let _e8: Translator = other_3505;
    let _e17: MultiVector = self_3885;
    let _e21: Translator = other_3505;
    let _e31: MultiVector = self_3885;
    let _e35: Translator = other_3505;
    let _e45: MultiVector = self_3885;
    let _e49: Translator = other_3505;
    let _e52: Translator = other_3505;
    let _e62: MultiVector = self_3885;
    let _e66: Translator = other_3505;
    let _e76: MultiVector = self_3885;
    let _e80: Translator = other_3505;
    let _e91: MultiVector = self_3885;
    let _e95: Translator = other_3505;
    let _e107: MultiVector = self_3885;
    let _e111: Translator = other_3505;
    let _e123: MultiVector = self_3885;
    let _e127: Translator = other_3505;
    let _e131: MultiVector = self_3885;
    let _e134: MultiVector = self_3885;
    let _e137: MultiVector = self_3885;
    let _e140: MultiVector = self_3885;
    let _e144: Translator = other_3505;
    let _e155: MultiVector = self_3885;
    let _e159: Translator = other_3505;
    let _e162: Translator = other_3505;
    let _e165: Translator = other_3505;
    let _e170: MultiVector = self_3885;
    let _e172: Translator = other_3505;
    let _e178: MultiVector = self_3885;
    let _e182: Translator = other_3505;
    let _e185: Translator = other_3505;
    let _e188: Translator = other_3505;
    let _e193: MultiVector = self_3885;
    let _e196: Translator = other_3505;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), (((((((vec4(_e62.g1_.y) * _e66.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e76.g1_.z) * _e80.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e91.g4_.y) * vec4(_e95.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e107.g4_.z) * vec4(_e111.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e123.g4_.w) * _e127.g0_)) + ((vec4<f32>(_e131.g1_.x, _e134.g1_.x, _e137.g1_.x, _e140.g4_.x) * _e144.g0_.xzyx) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), ((vec3(_e155.g0_.y) * vec3<f32>(_e159.g0_.x, _e162.g0_.y, _e165.g0_.z)) + (_e170.g3_ * vec3(_e172.g0_.w))), (vec3(_e178.g0_.x) * vec3<f32>(_e182.g0_.x, _e185.g0_.y, _e188.g0_.z)), ((_e193.g1_.xyzx * _e196.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_translator_inner_anti_product(self_3886: MultiVector, other_3506: Translator) -> MultiVector {
    var self_3887: MultiVector;
    var other_3507: Translator;

    self_3887 = self_3886;
    other_3507 = other_3506;
    let _e4: MultiVector = self_3887;
    let _e6: Translator = other_3507;
    let _e11: MultiVector = self_3887;
    let _e13: Translator = other_3507;
    let _e18: MultiVector = self_3887;
    let _e20: Translator = other_3507;
    let _e25: MultiVector = self_3887;
    let _e29: Translator = other_3507;
    let _e32: Translator = other_3507;
    let _e35: Translator = other_3507;
    let _e40: MultiVector = self_3887;
    let _e42: Translator = other_3507;
    let _e48: MultiVector = self_3887;
    let _e52: Translator = other_3507;
    let _e62: MultiVector = self_3887;
    let _e66: Translator = other_3507;
    let _e77: MultiVector = self_3887;
    let _e81: Translator = other_3507;
    let _e93: MultiVector = self_3887;
    let _e97: Translator = other_3507;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), (_e11.g1_ * vec4(_e13.g0_.w)), (_e18.g2_ * vec3(_e20.g0_.w)), ((vec3(_e25.g0_.y) * vec3<f32>(_e29.g0_.x, _e32.g0_.y, _e35.g0_.z)) + (_e40.g3_ * vec3(_e42.g0_.w))), (((((vec4(_e48.g4_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4(_e62.g4_.z) * _e66.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4(_e77.g4_.w) * vec4(_e81.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e93.g4_.x) * _e97.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_left_contraction(self_3888: MultiVector, other_3508: Translator) -> MultiVector {
    var self_3889: MultiVector;
    var other_3509: Translator;

    self_3889 = self_3888;
    other_3509 = other_3508;
    let _e4: MultiVector = self_3889;
    let _e8: Translator = other_3509;
    let _e17: MultiVector = self_3889;
    let _e21: Translator = other_3509;
    let _e31: MultiVector = self_3889;
    let _e35: Translator = other_3509;
    let _e45: MultiVector = self_3889;
    let _e49: Translator = other_3509;
    let _e52: Translator = other_3509;
    let _e62: MultiVector = self_3889;
    let _e66: Translator = other_3509;
    let _e76: MultiVector = self_3889;
    let _e80: Translator = other_3509;
    let _e91: MultiVector = self_3889;
    let _e94: MultiVector = self_3889;
    let _e97: MultiVector = self_3889;
    let _e100: MultiVector = self_3889;
    let _e104: Translator = other_3509;
    let _e115: MultiVector = self_3889;
    let _e117: Translator = other_3509;
    let _e122: MultiVector = self_3889;
    let _e126: Translator = other_3509;
    let _e129: Translator = other_3509;
    let _e132: Translator = other_3509;
    let _e137: MultiVector = self_3889;
    let _e140: Translator = other_3509;
    return MultiVector((((((vec2(_e4.g3_.x) * vec2(_e8.g0_.x)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.y) * vec2(_e21.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.z) * vec2(_e35.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g0_.x) * vec2<f32>(_e49.g0_.x, _e52.g0_.w)) * vec2<f32>(0.0, 1.0))), ((((vec4(_e62.g1_.y) * _e66.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0)) + ((vec4(_e76.g1_.z) * _e80.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e91.g1_.x, _e94.g1_.x, _e97.g1_.x, _e100.g4_.w) * _e104.g0_.xzyw) * vec4<f32>(0.0, 1.0, -1.0, 1.0))), (_e115.g3_ * vec3(_e117.g0_.w)), (vec3(_e122.g0_.x) * vec3<f32>(_e126.g0_.x, _e129.g0_.y, _e132.g0_.z)), ((_e137.g1_.xyzx * _e140.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)));
}

fn multi_vector_translator_right_contraction(self_3890: MultiVector, other_3510: Translator) -> MultiVector {
    var self_3891: MultiVector;
    var other_3511: Translator;

    self_3891 = self_3890;
    other_3511 = other_3510;
    let _e4: MultiVector = self_3891;
    let _e8: Translator = other_3511;
    let _e17: MultiVector = self_3891;
    let _e21: Translator = other_3511;
    let _e31: MultiVector = self_3891;
    let _e35: Translator = other_3511;
    let _e45: MultiVector = self_3891;
    let _e49: Translator = other_3511;
    let _e60: MultiVector = self_3891;
    let _e64: Translator = other_3511;
    let _e76: MultiVector = self_3891;
    let _e79: Translator = other_3511;
    let _e90: MultiVector = self_3891;
    let _e94: Translator = other_3511;
    let _e97: Translator = other_3511;
    let _e100: Translator = other_3511;
    return MultiVector(((((vec2(_e4.g3_.y) * vec2(_e8.g0_.y)) * vec2<f32>(-1.0, 0.0)) + ((vec2(_e17.g3_.z) * vec2(_e21.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e31.g3_.x) * vec2(_e35.g0_.x)) * vec2<f32>(-1.0, 0.0))), ((((vec4(_e45.g4_.y) * vec4(_e49.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e60.g4_.z) * vec4(_e64.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((_e76.g4_.wwwx * _e79.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -1.0))), (vec3(_e90.g0_.y) * vec3<f32>(_e94.g0_.x, _e97.g0_.y, _e100.g0_.z)), vec3(0.0), vec4(0.0));
}

fn multi_vector_translator_left_anti_contraction(self_3892: MultiVector, other_3512: Translator) -> MultiVector {
    var self_3893: MultiVector;
    var other_3513: Translator;

    self_3893 = self_3892;
    other_3513 = other_3512;
    let _e4: MultiVector = self_3893;
    let _e6: Translator = other_3513;
    let _e9: Translator = other_3513;
    let _e22: MultiVector = self_3893;
    let _e26: Translator = other_3513;
    let _e29: Translator = other_3513;
    let _e32: Translator = other_3513;
    let _e37: MultiVector = self_3893;
    let _e41: Translator = other_3513;
    let _e52: MultiVector = self_3893;
    let _e56: Translator = other_3513;
    let _e68: MultiVector = self_3893;
    let _e72: Translator = other_3513;
    return MultiVector(((_e4.g0_ * vec2<f32>(_e6.g0_.x, _e9.g0_.w)) * vec2<f32>(0.0, 1.0)), vec4(0.0), vec3(0.0), (vec3(_e22.g0_.y) * vec3<f32>(_e26.g0_.x, _e29.g0_.y, _e32.g0_.z)), ((((vec4(_e37.g4_.y) * vec4(_e41.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e52.g4_.z) * vec4(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e68.g4_.x) * vec4(_e72.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_right_anti_contraction(self_3894: MultiVector, other_3514: Translator) -> MultiVector {
    var self_3895: MultiVector;
    var other_3515: Translator;

    self_3895 = self_3894;
    other_3515 = other_3514;
    let _e4: MultiVector = self_3895;
    let _e6: Translator = other_3515;
    let _e11: MultiVector = self_3895;
    let _e13: Translator = other_3515;
    let _e18: MultiVector = self_3895;
    let _e20: Translator = other_3515;
    let _e25: MultiVector = self_3895;
    let _e27: Translator = other_3515;
    let _e32: MultiVector = self_3895;
    let _e34: Translator = other_3515;
    return MultiVector((_e4.g0_ * vec2(_e6.g0_.w)), (_e11.g1_ * vec4(_e13.g0_.w)), (_e18.g2_ * vec3(_e20.g0_.w)), (_e25.g3_ * vec3(_e27.g0_.w)), (_e32.g4_ * vec4(_e34.g0_.w)));
}

fn multi_vector_translator_scalar_product(self_3896: MultiVector, other_3516: Translator) -> Scalar {
    var self_3897: MultiVector;
    var other_3517: Translator;

    self_3897 = self_3896;
    other_3517 = other_3516;
    let _e5: MultiVector = self_3897;
    let _e8: Translator = other_3517;
    let _e13: MultiVector = self_3897;
    let _e16: Translator = other_3517;
    let _e21: MultiVector = self_3897;
    let _e24: Translator = other_3517;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g0_.x)) - (_e13.g3_.y * _e16.g0_.y)) - (_e21.g3_.z * _e24.g0_.z)));
}

fn multi_vector_translator_dot(self_3898: MultiVector, other_3518: Translator) -> Scalar {
    var self_3899: MultiVector;
    var other_3519: Translator;

    self_3899 = self_3898;
    other_3519 = other_3518;
    let _e5: MultiVector = self_3899;
    let _e8: Translator = other_3519;
    let _e13: MultiVector = self_3899;
    let _e16: Translator = other_3519;
    let _e21: MultiVector = self_3899;
    let _e24: Translator = other_3519;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g0_.x)) - (_e13.g3_.y * _e16.g0_.y)) - (_e21.g3_.z * _e24.g0_.z)));
}

fn multi_vector_translator_anti_scalar_product(self_3900: MultiVector, other_3520: Translator) -> AntiScalar {
    var self_3901: MultiVector;
    var other_3521: Translator;

    self_3901 = self_3900;
    other_3521 = other_3520;
    let _e4: MultiVector = self_3901;
    let _e7: Translator = other_3521;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn multi_vector_translator_anti_dot(self_3902: MultiVector, other_3522: Translator) -> AntiScalar {
    var self_3903: MultiVector;
    var other_3523: Translator;

    self_3903 = self_3902;
    other_3523 = other_3522;
    let _e4: MultiVector = self_3903;
    let _e7: Translator = other_3523;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn multi_vector_flector_into(self_3904: MultiVector) -> Flector {
    var self_3905: MultiVector;

    self_3905 = self_3904;
    let _e2: MultiVector = self_3905;
    let _e4: MultiVector = self_3905;
    return Flector(_e2.g1_, _e4.g4_);
}

fn multi_vector_flector_add(self_3906: MultiVector, other_3524: Flector) -> MultiVector {
    var self_3907: MultiVector;
    var other_3525: Flector;

    self_3907 = self_3906;
    other_3525 = other_3524;
    let _e4: MultiVector = self_3907;
    let _e6: MultiVector = self_3907;
    let _e8: Flector = other_3525;
    let _e11: MultiVector = self_3907;
    let _e13: MultiVector = self_3907;
    let _e15: MultiVector = self_3907;
    let _e17: Flector = other_3525;
    return MultiVector(_e4.g0_, (_e6.g1_ + _e8.g0_), _e11.g2_, _e13.g3_, (_e15.g4_ + _e17.g1_));
}

fn multi_vector_flector_sub(self_3908: MultiVector, other_3526: Flector) -> MultiVector {
    var self_3909: MultiVector;
    var other_3527: Flector;

    self_3909 = self_3908;
    other_3527 = other_3526;
    let _e4: MultiVector = self_3909;
    let _e6: MultiVector = self_3909;
    let _e8: Flector = other_3527;
    let _e11: MultiVector = self_3909;
    let _e13: MultiVector = self_3909;
    let _e15: MultiVector = self_3909;
    let _e17: Flector = other_3527;
    return MultiVector(_e4.g0_, (_e6.g1_ - _e8.g0_), _e11.g2_, _e13.g3_, (_e15.g4_ - _e17.g1_));
}

fn multi_vector_flector_geometric_product(self_3910: MultiVector, other_3528: Flector) -> MultiVector {
    var self_3911: MultiVector;
    var other_3529: Flector;

    self_3911 = self_3910;
    other_3529 = other_3528;
    let _e4: MultiVector = self_3911;
    let _e8: Flector = other_3529;
    let _e11: Flector = other_3529;
    let _e16: MultiVector = self_3911;
    let _e20: Flector = other_3529;
    let _e23: Flector = other_3529;
    let _e29: MultiVector = self_3911;
    let _e33: Flector = other_3529;
    let _e36: Flector = other_3529;
    let _e42: MultiVector = self_3911;
    let _e46: Flector = other_3529;
    let _e56: MultiVector = self_3911;
    let _e60: Flector = other_3529;
    let _e70: MultiVector = self_3911;
    let _e74: Flector = other_3529;
    let _e84: MultiVector = self_3911;
    let _e88: Flector = other_3529;
    let _e91: Flector = other_3529;
    let _e97: MultiVector = self_3911;
    let _e100: MultiVector = self_3911;
    let _e104: Flector = other_3529;
    let _e107: Flector = other_3529;
    let _e117: MultiVector = self_3911;
    let _e121: Flector = other_3529;
    let _e124: MultiVector = self_3911;
    let _e128: Flector = other_3529;
    let _e140: MultiVector = self_3911;
    let _e144: Flector = other_3529;
    let _e156: MultiVector = self_3911;
    let _e160: Flector = other_3529;
    let _e172: MultiVector = self_3911;
    let _e176: Flector = other_3529;
    let _e179: Flector = other_3529;
    let _e182: Flector = other_3529;
    let _e185: Flector = other_3529;
    let _e197: MultiVector = self_3911;
    let _e201: Flector = other_3529;
    let _e204: Flector = other_3529;
    let _e207: Flector = other_3529;
    let _e210: Flector = other_3529;
    let _e222: MultiVector = self_3911;
    let _e226: Flector = other_3529;
    let _e229: Flector = other_3529;
    let _e232: Flector = other_3529;
    let _e235: Flector = other_3529;
    let _e247: MultiVector = self_3911;
    let _e250: MultiVector = self_3911;
    let _e253: MultiVector = self_3911;
    let _e256: MultiVector = self_3911;
    let _e260: Flector = other_3529;
    let _e271: MultiVector = self_3911;
    let _e275: Flector = other_3529;
    let _e278: Flector = other_3529;
    let _e281: Flector = other_3529;
    let _e291: MultiVector = self_3911;
    let _e295: Flector = other_3529;
    let _e298: Flector = other_3529;
    let _e301: Flector = other_3529;
    let _e312: MultiVector = self_3911;
    let _e316: Flector = other_3529;
    let _e319: Flector = other_3529;
    let _e322: Flector = other_3529;
    let _e333: MultiVector = self_3911;
    let _e337: Flector = other_3529;
    let _e340: Flector = other_3529;
    let _e343: Flector = other_3529;
    let _e349: MultiVector = self_3911;
    let _e353: Flector = other_3529;
    let _e356: Flector = other_3529;
    let _e359: Flector = other_3529;
    let _e370: MultiVector = self_3911;
    let _e374: Flector = other_3529;
    let _e377: Flector = other_3529;
    let _e380: Flector = other_3529;
    let _e391: MultiVector = self_3911;
    let _e395: Flector = other_3529;
    let _e398: Flector = other_3529;
    let _e401: Flector = other_3529;
    let _e412: MultiVector = self_3911;
    let _e416: Flector = other_3529;
    let _e419: Flector = other_3529;
    let _e422: Flector = other_3529;
    let _e428: MultiVector = self_3911;
    let _e432: Flector = other_3529;
    let _e435: Flector = other_3529;
    let _e438: Flector = other_3529;
    let _e448: MultiVector = self_3911;
    let _e452: Flector = other_3529;
    let _e455: Flector = other_3529;
    let _e458: Flector = other_3529;
    let _e469: MultiVector = self_3911;
    let _e473: Flector = other_3529;
    let _e476: Flector = other_3529;
    let _e479: Flector = other_3529;
    let _e490: MultiVector = self_3911;
    let _e494: Flector = other_3529;
    let _e497: Flector = other_3529;
    let _e500: Flector = other_3529;
    let _e506: MultiVector = self_3911;
    let _e510: Flector = other_3529;
    let _e513: MultiVector = self_3911;
    let _e517: Flector = other_3529;
    let _e520: Flector = other_3529;
    let _e523: Flector = other_3529;
    let _e526: Flector = other_3529;
    let _e538: MultiVector = self_3911;
    let _e542: Flector = other_3529;
    let _e545: Flector = other_3529;
    let _e548: Flector = other_3529;
    let _e551: Flector = other_3529;
    let _e563: MultiVector = self_3911;
    let _e567: Flector = other_3529;
    let _e570: Flector = other_3529;
    let _e573: Flector = other_3529;
    let _e576: Flector = other_3529;
    let _e588: MultiVector = self_3911;
    let _e592: Flector = other_3529;
    let _e595: Flector = other_3529;
    let _e598: Flector = other_3529;
    let _e601: Flector = other_3529;
    let _e613: MultiVector = self_3911;
    let _e617: Flector = other_3529;
    let _e620: Flector = other_3529;
    let _e623: Flector = other_3529;
    let _e626: Flector = other_3529;
    let _e638: MultiVector = self_3911;
    let _e642: Flector = other_3529;
    let _e645: Flector = other_3529;
    let _e648: Flector = other_3529;
    let _e651: Flector = other_3529;
    let _e663: MultiVector = self_3911;
    let _e666: MultiVector = self_3911;
    let _e669: MultiVector = self_3911;
    let _e672: MultiVector = self_3911;
    let _e676: Flector = other_3529;
    return MultiVector(((((((((vec2(_e4.g1_.x) * vec2<f32>(_e8.g0_.x, _e11.g1_.x)) + (vec2(_e16.g1_.y) * vec2<f32>(_e20.g0_.y, _e23.g1_.y))) + (vec2(_e29.g1_.z) * vec2<f32>(_e33.g0_.z, _e36.g1_.z))) + ((vec2(_e42.g4_.x) * vec2(_e46.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e56.g4_.y) * vec2(_e60.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e70.g4_.z) * vec2(_e74.g0_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e84.g4_.w) * vec2<f32>(_e88.g1_.w, _e91.g0_.w))) + ((vec2<f32>(_e97.g1_.x, _e100.g1_.w) * vec2<f32>(_e104.g1_.x, _e107.g1_.w)) * vec2<f32>(0.0, 1.0))), ((((((((vec4(_e117.g0_.x) * _e121.g0_) + ((vec4(_e124.g2_.x) * vec4(_e128.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e140.g2_.y) * vec4(_e144.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e156.g2_.z) * vec4(_e160.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e172.g3_.x) * vec4<f32>(_e176.g1_.w, _e179.g0_.z, _e182.g0_.y, _e185.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e197.g3_.y) * vec4<f32>(_e201.g0_.z, _e204.g1_.w, _e207.g0_.x, _e210.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e222.g3_.z) * vec4<f32>(_e226.g0_.y, _e229.g0_.x, _e232.g1_.w, _e235.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4<f32>(_e247.g0_.x, _e250.g0_.x, _e253.g0_.x, _e256.g0_.y) * _e260.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((((((vec3(_e271.g1_.x) * vec3<f32>(_e275.g0_.w, _e278.g1_.z, _e281.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e291.g1_.y) * vec3<f32>(_e295.g1_.z, _e298.g0_.w, _e301.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e312.g1_.z) * vec3<f32>(_e316.g1_.y, _e319.g1_.x, _e322.g0_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e333.g1_.w) * vec3<f32>(_e337.g0_.x, _e340.g0_.y, _e343.g0_.z))) + ((vec3(_e349.g4_.x) * vec3<f32>(_e353.g1_.w, _e356.g0_.z, _e359.g0_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e370.g4_.y) * vec3<f32>(_e374.g0_.z, _e377.g1_.w, _e380.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e391.g4_.z) * vec3<f32>(_e395.g0_.y, _e398.g0_.x, _e401.g1_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e412.g4_.w) * vec3<f32>(_e416.g1_.x, _e419.g1_.y, _e422.g1_.z))), (((((vec3(_e428.g1_.x) * vec3<f32>(_e432.g1_.w, _e435.g0_.z, _e438.g0_.y)) * vec3<f32>(-1.0, -1.0, 1.0)) + ((vec3(_e448.g1_.y) * vec3<f32>(_e452.g0_.z, _e455.g1_.w, _e458.g0_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e469.g1_.z) * vec3<f32>(_e473.g0_.y, _e476.g0_.x, _e479.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) - (vec3(_e490.g4_.w) * vec3<f32>(_e494.g0_.x, _e497.g0_.y, _e500.g0_.z))), ((((((((vec4(_e506.g0_.x) * _e510.g1_) + ((vec4(_e513.g2_.x) * vec4<f32>(_e517.g1_.w, _e520.g0_.z, _e523.g0_.y, _e526.g1_.w)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))) + ((vec4(_e538.g2_.y) * vec4<f32>(_e542.g0_.z, _e545.g1_.w, _e548.g0_.x, _e551.g0_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0))) + ((vec4(_e563.g2_.z) * vec4<f32>(_e567.g0_.y, _e570.g0_.x, _e573.g1_.w, _e576.g0_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e588.g3_.x) * vec4<f32>(_e592.g0_.w, _e595.g1_.z, _e598.g1_.y, _e601.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e613.g3_.y) * vec4<f32>(_e617.g1_.z, _e620.g0_.w, _e623.g1_.x, _e626.g0_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e638.g3_.z) * vec4<f32>(_e642.g1_.y, _e645.g1_.x, _e648.g0_.w, _e651.g0_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4<f32>(_e663.g0_.y, _e666.g0_.y, _e669.g0_.y, _e672.g0_.x) * _e676.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_flector_geometric_anti_product(self_3912: MultiVector, other_3530: Flector) -> MultiVector {
    var self_3913: MultiVector;
    var other_3531: Flector;

    self_3913 = self_3912;
    other_3531 = other_3530;
    let _e4: MultiVector = self_3913;
    let _e8: Flector = other_3531;
    let _e17: MultiVector = self_3913;
    let _e21: Flector = other_3531;
    let _e31: MultiVector = self_3913;
    let _e35: Flector = other_3531;
    let _e38: Flector = other_3531;
    let _e48: MultiVector = self_3913;
    let _e52: Flector = other_3531;
    let _e55: Flector = other_3531;
    let _e65: MultiVector = self_3913;
    let _e69: Flector = other_3531;
    let _e72: Flector = other_3531;
    let _e82: MultiVector = self_3913;
    let _e86: Flector = other_3531;
    let _e89: Flector = other_3531;
    let _e99: MultiVector = self_3913;
    let _e103: Flector = other_3531;
    let _e113: MultiVector = self_3913;
    let _e117: Flector = other_3531;
    let _e127: MultiVector = self_3913;
    let _e131: Flector = other_3531;
    let _e134: MultiVector = self_3913;
    let _e138: Flector = other_3531;
    let _e141: Flector = other_3531;
    let _e144: Flector = other_3531;
    let _e147: Flector = other_3531;
    let _e159: MultiVector = self_3913;
    let _e163: Flector = other_3531;
    let _e166: Flector = other_3531;
    let _e169: Flector = other_3531;
    let _e172: Flector = other_3531;
    let _e184: MultiVector = self_3913;
    let _e188: Flector = other_3531;
    let _e191: Flector = other_3531;
    let _e194: Flector = other_3531;
    let _e197: Flector = other_3531;
    let _e209: MultiVector = self_3913;
    let _e213: Flector = other_3531;
    let _e216: Flector = other_3531;
    let _e219: Flector = other_3531;
    let _e222: Flector = other_3531;
    let _e234: MultiVector = self_3913;
    let _e238: Flector = other_3531;
    let _e241: Flector = other_3531;
    let _e244: Flector = other_3531;
    let _e247: Flector = other_3531;
    let _e259: MultiVector = self_3913;
    let _e263: Flector = other_3531;
    let _e266: Flector = other_3531;
    let _e269: Flector = other_3531;
    let _e272: Flector = other_3531;
    let _e284: MultiVector = self_3913;
    let _e288: Flector = other_3531;
    let _e301: MultiVector = self_3913;
    let _e305: Flector = other_3531;
    let _e308: Flector = other_3531;
    let _e311: Flector = other_3531;
    let _e317: MultiVector = self_3913;
    let _e321: Flector = other_3531;
    let _e324: Flector = other_3531;
    let _e327: Flector = other_3531;
    let _e338: MultiVector = self_3913;
    let _e342: Flector = other_3531;
    let _e345: Flector = other_3531;
    let _e348: Flector = other_3531;
    let _e359: MultiVector = self_3913;
    let _e363: Flector = other_3531;
    let _e366: Flector = other_3531;
    let _e369: Flector = other_3531;
    let _e380: MultiVector = self_3913;
    let _e384: Flector = other_3531;
    let _e387: Flector = other_3531;
    let _e390: Flector = other_3531;
    let _e400: MultiVector = self_3913;
    let _e404: Flector = other_3531;
    let _e407: Flector = other_3531;
    let _e410: Flector = other_3531;
    let _e421: MultiVector = self_3913;
    let _e425: Flector = other_3531;
    let _e428: Flector = other_3531;
    let _e431: Flector = other_3531;
    let _e442: MultiVector = self_3913;
    let _e446: Flector = other_3531;
    let _e449: Flector = other_3531;
    let _e452: Flector = other_3531;
    let _e458: MultiVector = self_3913;
    let _e462: Flector = other_3531;
    let _e465: Flector = other_3531;
    let _e468: Flector = other_3531;
    let _e479: MultiVector = self_3913;
    let _e483: Flector = other_3531;
    let _e486: Flector = other_3531;
    let _e489: Flector = other_3531;
    let _e500: MultiVector = self_3913;
    let _e504: Flector = other_3531;
    let _e507: Flector = other_3531;
    let _e510: Flector = other_3531;
    let _e521: MultiVector = self_3913;
    let _e525: Flector = other_3531;
    let _e528: Flector = other_3531;
    let _e531: Flector = other_3531;
    let _e537: MultiVector = self_3913;
    let _e541: Flector = other_3531;
    let _e544: MultiVector = self_3913;
    let _e548: Flector = other_3531;
    let _e551: Flector = other_3531;
    let _e554: Flector = other_3531;
    let _e557: Flector = other_3531;
    let _e569: MultiVector = self_3913;
    let _e573: Flector = other_3531;
    let _e576: Flector = other_3531;
    let _e579: Flector = other_3531;
    let _e582: Flector = other_3531;
    let _e594: MultiVector = self_3913;
    let _e598: Flector = other_3531;
    let _e601: Flector = other_3531;
    let _e604: Flector = other_3531;
    let _e607: Flector = other_3531;
    let _e619: MultiVector = self_3913;
    let _e623: Flector = other_3531;
    let _e635: MultiVector = self_3913;
    let _e639: Flector = other_3531;
    let _e651: MultiVector = self_3913;
    let _e655: Flector = other_3531;
    let _e667: MultiVector = self_3913;
    let _e671: Flector = other_3531;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2<f32>(_e35.g1_.w, _e38.g0_.w)) * vec2<f32>(1.0, -1.0))) + ((vec2(_e48.g4_.x) * vec2<f32>(_e52.g0_.x, _e55.g1_.x)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e65.g4_.y) * vec2<f32>(_e69.g0_.y, _e72.g1_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e82.g4_.z) * vec2<f32>(_e86.g0_.z, _e89.g1_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e99.g4_.w) * vec2(_e103.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e113.g1_.x) * vec2(_e117.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4(_e127.g0_.y) * _e131.g0_) + ((vec4(_e134.g2_.x) * vec4<f32>(_e138.g1_.w, _e141.g0_.z, _e144.g0_.y, _e147.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e159.g2_.y) * vec4<f32>(_e163.g0_.z, _e166.g1_.w, _e169.g0_.x, _e172.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e184.g2_.z) * vec4<f32>(_e188.g0_.y, _e191.g0_.x, _e194.g1_.w, _e197.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e209.g3_.x) * vec4<f32>(_e213.g0_.w, _e216.g1_.z, _e219.g1_.y, _e222.g0_.w)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e234.g3_.y) * vec4<f32>(_e238.g1_.z, _e241.g0_.w, _e244.g1_.x, _e247.g1_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e259.g3_.z) * vec4<f32>(_e263.g1_.y, _e266.g1_.x, _e269.g0_.w, _e272.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e284.g0_.x) * _e288.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3(0.0) - (vec3(_e301.g1_.w) * vec3<f32>(_e305.g1_.x, _e308.g1_.y, _e311.g1_.z))) + ((vec3(_e317.g4_.x) * vec3<f32>(_e321.g0_.w, _e324.g1_.z, _e327.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e338.g4_.y) * vec3<f32>(_e342.g1_.z, _e345.g0_.w, _e348.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e359.g4_.z) * vec3<f32>(_e363.g1_.y, _e366.g1_.x, _e369.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))), (((((((((vec3(_e380.g1_.x) * vec3<f32>(_e384.g0_.w, _e387.g1_.z, _e390.g1_.y)) * vec3<f32>(-1.0, 1.0, -1.0)) + ((vec3(_e400.g1_.y) * vec3<f32>(_e404.g1_.z, _e407.g0_.w, _e410.g1_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e421.g1_.z) * vec3<f32>(_e425.g1_.y, _e428.g1_.x, _e431.g0_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e442.g1_.w) * vec3<f32>(_e446.g0_.x, _e449.g0_.y, _e452.g0_.z))) + ((vec3(_e458.g4_.x) * vec3<f32>(_e462.g1_.w, _e465.g0_.z, _e468.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e479.g4_.y) * vec3<f32>(_e483.g0_.z, _e486.g1_.w, _e489.g0_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e500.g4_.z) * vec3<f32>(_e504.g0_.y, _e507.g0_.x, _e510.g1_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e521.g4_.w) * vec3<f32>(_e525.g1_.x, _e528.g1_.y, _e531.g1_.z))), ((((((((vec4(_e537.g0_.y) * _e541.g1_) + ((vec4(_e544.g2_.x) * vec4<f32>(_e548.g0_.w, _e551.g1_.z, _e554.g1_.y, _e557.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e569.g2_.y) * vec4<f32>(_e573.g1_.z, _e576.g0_.w, _e579.g1_.x, _e582.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e594.g2_.z) * vec4<f32>(_e598.g1_.y, _e601.g1_.x, _e604.g0_.w, _e607.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e619.g3_.x) * vec4(_e623.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e635.g3_.y) * vec4(_e639.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e651.g3_.z) * vec4(_e655.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e667.g0_.x) * _e671.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flector_regressive_product(self_3914: MultiVector, other_3532: Flector) -> MultiVector {
    var self_3915: MultiVector;
    var other_3533: Flector;

    self_3915 = self_3914;
    other_3533 = other_3532;
    let _e4: MultiVector = self_3915;
    let _e8: Flector = other_3533;
    let _e17: MultiVector = self_3915;
    let _e21: Flector = other_3533;
    let _e31: MultiVector = self_3915;
    let _e35: Flector = other_3533;
    let _e45: MultiVector = self_3915;
    let _e49: Flector = other_3533;
    let _e59: MultiVector = self_3915;
    let _e63: Flector = other_3533;
    let _e73: MultiVector = self_3915;
    let _e77: Flector = other_3533;
    let _e87: MultiVector = self_3915;
    let _e91: Flector = other_3533;
    let _e101: MultiVector = self_3915;
    let _e105: Flector = other_3533;
    let _e115: MultiVector = self_3915;
    let _e119: Flector = other_3533;
    let _e122: MultiVector = self_3915;
    let _e126: Flector = other_3533;
    let _e137: MultiVector = self_3915;
    let _e141: Flector = other_3533;
    let _e152: MultiVector = self_3915;
    let _e156: Flector = other_3533;
    let _e167: MultiVector = self_3915;
    let _e171: Flector = other_3533;
    let _e182: MultiVector = self_3915;
    let _e185: MultiVector = self_3915;
    let _e188: MultiVector = self_3915;
    let _e191: MultiVector = self_3915;
    let _e195: Flector = other_3533;
    let _e206: MultiVector = self_3915;
    let _e210: Flector = other_3533;
    let _e213: Flector = other_3533;
    let _e216: Flector = other_3533;
    let _e226: MultiVector = self_3915;
    let _e230: Flector = other_3533;
    let _e233: Flector = other_3533;
    let _e236: Flector = other_3533;
    let _e247: MultiVector = self_3915;
    let _e251: Flector = other_3533;
    let _e254: Flector = other_3533;
    let _e257: Flector = other_3533;
    let _e270: MultiVector = self_3915;
    let _e274: Flector = other_3533;
    let _e277: Flector = other_3533;
    let _e280: Flector = other_3533;
    let _e286: MultiVector = self_3915;
    let _e289: MultiVector = self_3915;
    let _e292: MultiVector = self_3915;
    let _e296: Flector = other_3533;
    let _e302: MultiVector = self_3915;
    let _e306: Flector = other_3533;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g0_.y) * _e119.g0_) + ((vec4(_e122.g2_.y) * _e126.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e137.g2_.z) * _e141.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e152.g3_.y) * _e156.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e167.g3_.z) * _e171.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e182.g2_.x, _e185.g3_.x, _e188.g3_.x, _e191.g2_.x) * _e195.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e206.g4_.y) * vec3<f32>(_e210.g1_.z, _e213.g1_.z, _e216.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e226.g4_.z) * vec3<f32>(_e230.g1_.y, _e233.g1_.x, _e236.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e247.g4_.x) * vec3<f32>(_e251.g1_.x, _e254.g1_.z, _e257.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e270.g4_.w) * vec3<f32>(_e274.g1_.x, _e277.g1_.y, _e280.g1_.z))) + (vec3<f32>(_e286.g4_.x, _e289.g4_.y, _e292.g4_.z) * vec3(_e296.g1_.w))), (vec4(_e302.g0_.y) * _e306.g1_));
}

fn multi_vector_flector_anti_wedge(self_3916: MultiVector, other_3534: Flector) -> MultiVector {
    var self_3917: MultiVector;
    var other_3535: Flector;

    self_3917 = self_3916;
    other_3535 = other_3534;
    let _e4: MultiVector = self_3917;
    let _e8: Flector = other_3535;
    let _e17: MultiVector = self_3917;
    let _e21: Flector = other_3535;
    let _e31: MultiVector = self_3917;
    let _e35: Flector = other_3535;
    let _e45: MultiVector = self_3917;
    let _e49: Flector = other_3535;
    let _e59: MultiVector = self_3917;
    let _e63: Flector = other_3535;
    let _e73: MultiVector = self_3917;
    let _e77: Flector = other_3535;
    let _e87: MultiVector = self_3917;
    let _e91: Flector = other_3535;
    let _e101: MultiVector = self_3917;
    let _e105: Flector = other_3535;
    let _e115: MultiVector = self_3917;
    let _e119: Flector = other_3535;
    let _e122: MultiVector = self_3917;
    let _e126: Flector = other_3535;
    let _e137: MultiVector = self_3917;
    let _e141: Flector = other_3535;
    let _e152: MultiVector = self_3917;
    let _e156: Flector = other_3535;
    let _e167: MultiVector = self_3917;
    let _e171: Flector = other_3535;
    let _e182: MultiVector = self_3917;
    let _e185: MultiVector = self_3917;
    let _e188: MultiVector = self_3917;
    let _e191: MultiVector = self_3917;
    let _e195: Flector = other_3535;
    let _e206: MultiVector = self_3917;
    let _e210: Flector = other_3535;
    let _e213: Flector = other_3535;
    let _e216: Flector = other_3535;
    let _e226: MultiVector = self_3917;
    let _e230: Flector = other_3535;
    let _e233: Flector = other_3535;
    let _e236: Flector = other_3535;
    let _e247: MultiVector = self_3917;
    let _e251: Flector = other_3535;
    let _e254: Flector = other_3535;
    let _e257: Flector = other_3535;
    let _e270: MultiVector = self_3917;
    let _e274: Flector = other_3535;
    let _e277: Flector = other_3535;
    let _e280: Flector = other_3535;
    let _e286: MultiVector = self_3917;
    let _e289: MultiVector = self_3917;
    let _e292: MultiVector = self_3917;
    let _e296: Flector = other_3535;
    let _e302: MultiVector = self_3917;
    let _e306: Flector = other_3535;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g0_.y) * _e119.g0_) + ((vec4(_e122.g2_.y) * _e126.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e137.g2_.z) * _e141.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e152.g3_.y) * _e156.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e167.g3_.z) * _e171.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e182.g2_.x, _e185.g3_.x, _e188.g3_.x, _e191.g2_.x) * _e195.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e206.g4_.y) * vec3<f32>(_e210.g1_.z, _e213.g1_.z, _e216.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e226.g4_.z) * vec3<f32>(_e230.g1_.y, _e233.g1_.x, _e236.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e247.g4_.x) * vec3<f32>(_e251.g1_.x, _e254.g1_.z, _e257.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e270.g4_.w) * vec3<f32>(_e274.g1_.x, _e277.g1_.y, _e280.g1_.z))) + (vec3<f32>(_e286.g4_.x, _e289.g4_.y, _e292.g4_.z) * vec3(_e296.g1_.w))), (vec4(_e302.g0_.y) * _e306.g1_));
}

fn multi_vector_flector_meet(self_3918: MultiVector, other_3536: Flector) -> MultiVector {
    var self_3919: MultiVector;
    var other_3537: Flector;

    self_3919 = self_3918;
    other_3537 = other_3536;
    let _e4: MultiVector = self_3919;
    let _e8: Flector = other_3537;
    let _e17: MultiVector = self_3919;
    let _e21: Flector = other_3537;
    let _e31: MultiVector = self_3919;
    let _e35: Flector = other_3537;
    let _e45: MultiVector = self_3919;
    let _e49: Flector = other_3537;
    let _e59: MultiVector = self_3919;
    let _e63: Flector = other_3537;
    let _e73: MultiVector = self_3919;
    let _e77: Flector = other_3537;
    let _e87: MultiVector = self_3919;
    let _e91: Flector = other_3537;
    let _e101: MultiVector = self_3919;
    let _e105: Flector = other_3537;
    let _e115: MultiVector = self_3919;
    let _e119: Flector = other_3537;
    let _e122: MultiVector = self_3919;
    let _e126: Flector = other_3537;
    let _e137: MultiVector = self_3919;
    let _e141: Flector = other_3537;
    let _e152: MultiVector = self_3919;
    let _e156: Flector = other_3537;
    let _e167: MultiVector = self_3919;
    let _e171: Flector = other_3537;
    let _e182: MultiVector = self_3919;
    let _e185: MultiVector = self_3919;
    let _e188: MultiVector = self_3919;
    let _e191: MultiVector = self_3919;
    let _e195: Flector = other_3537;
    let _e206: MultiVector = self_3919;
    let _e210: Flector = other_3537;
    let _e213: Flector = other_3537;
    let _e216: Flector = other_3537;
    let _e226: MultiVector = self_3919;
    let _e230: Flector = other_3537;
    let _e233: Flector = other_3537;
    let _e236: Flector = other_3537;
    let _e247: MultiVector = self_3919;
    let _e251: Flector = other_3537;
    let _e254: Flector = other_3537;
    let _e257: Flector = other_3537;
    let _e270: MultiVector = self_3919;
    let _e274: Flector = other_3537;
    let _e277: Flector = other_3537;
    let _e280: Flector = other_3537;
    let _e286: MultiVector = self_3919;
    let _e289: MultiVector = self_3919;
    let _e292: MultiVector = self_3919;
    let _e296: Flector = other_3537;
    let _e302: MultiVector = self_3919;
    let _e306: Flector = other_3537;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((vec4(_e115.g0_.y) * _e119.g0_) + ((vec4(_e122.g2_.y) * _e126.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e137.g2_.z) * _e141.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e152.g3_.y) * _e156.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e167.g3_.z) * _e171.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e182.g2_.x, _e185.g3_.x, _e188.g3_.x, _e191.g2_.x) * _e195.g1_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))), ((((vec3(_e206.g4_.y) * vec3<f32>(_e210.g1_.z, _e213.g1_.z, _e216.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e226.g4_.z) * vec3<f32>(_e230.g1_.y, _e233.g1_.x, _e236.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e247.g4_.x) * vec3<f32>(_e251.g1_.x, _e254.g1_.z, _e257.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((vec3(0.0) - (vec3(_e270.g4_.w) * vec3<f32>(_e274.g1_.x, _e277.g1_.y, _e280.g1_.z))) + (vec3<f32>(_e286.g4_.x, _e289.g4_.y, _e292.g4_.z) * vec3(_e296.g1_.w))), (vec4(_e302.g0_.y) * _e306.g1_));
}

fn multi_vector_flector_outer_product(self_3920: MultiVector, other_3538: Flector) -> MultiVector {
    var self_3921: MultiVector;
    var other_3539: Flector;

    self_3921 = self_3920;
    other_3539 = other_3538;
    let _e4: MultiVector = self_3921;
    let _e8: Flector = other_3539;
    let _e17: MultiVector = self_3921;
    let _e21: Flector = other_3539;
    let _e31: MultiVector = self_3921;
    let _e35: Flector = other_3539;
    let _e45: MultiVector = self_3921;
    let _e49: Flector = other_3539;
    let _e59: MultiVector = self_3921;
    let _e63: Flector = other_3539;
    let _e73: MultiVector = self_3921;
    let _e77: Flector = other_3539;
    let _e87: MultiVector = self_3921;
    let _e91: Flector = other_3539;
    let _e101: MultiVector = self_3921;
    let _e105: Flector = other_3539;
    let _e115: MultiVector = self_3921;
    let _e119: Flector = other_3539;
    let _e122: MultiVector = self_3921;
    let _e126: Flector = other_3539;
    let _e129: Flector = other_3539;
    let _e132: Flector = other_3539;
    let _e137: MultiVector = self_3921;
    let _e140: MultiVector = self_3921;
    let _e143: MultiVector = self_3921;
    let _e147: Flector = other_3539;
    let _e156: MultiVector = self_3921;
    let _e160: Flector = other_3539;
    let _e163: Flector = other_3539;
    let _e166: Flector = other_3539;
    let _e176: MultiVector = self_3921;
    let _e180: Flector = other_3539;
    let _e183: Flector = other_3539;
    let _e186: Flector = other_3539;
    let _e197: MultiVector = self_3921;
    let _e201: Flector = other_3539;
    let _e204: Flector = other_3539;
    let _e207: Flector = other_3539;
    let _e218: MultiVector = self_3921;
    let _e222: Flector = other_3539;
    let _e225: MultiVector = self_3921;
    let _e229: Flector = other_3539;
    let _e240: MultiVector = self_3921;
    let _e244: Flector = other_3539;
    let _e255: MultiVector = self_3921;
    let _e259: Flector = other_3539;
    let _e270: MultiVector = self_3921;
    let _e274: Flector = other_3539;
    let _e285: MultiVector = self_3921;
    let _e288: MultiVector = self_3921;
    let _e291: MultiVector = self_3921;
    let _e294: MultiVector = self_3921;
    let _e298: Flector = other_3539;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e115.g0_.x) * _e119.g0_), ((vec3(_e122.g1_.w) * vec3<f32>(_e126.g0_.x, _e129.g0_.y, _e132.g0_.z)) + ((vec3<f32>(_e137.g1_.x, _e140.g1_.y, _e143.g1_.z) * vec3(_e147.g0_.w)) * vec3(-1.0))), ((((vec3(_e156.g1_.y) * vec3<f32>(_e160.g0_.z, _e163.g0_.z, _e166.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g1_.z) * vec3<f32>(_e180.g0_.y, _e183.g0_.x, _e186.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g1_.x) * vec3<f32>(_e201.g0_.x, _e204.g0_.z, _e207.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e218.g0_.x) * _e222.g1_) + ((vec4(_e225.g2_.y) * _e229.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e240.g2_.z) * _e244.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e255.g3_.y) * _e259.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e270.g3_.z) * _e274.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e285.g3_.x, _e288.g2_.x, _e291.g2_.x, _e294.g3_.x) * _e298.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_flector_wedge(self_3922: MultiVector, other_3540: Flector) -> MultiVector {
    var self_3923: MultiVector;
    var other_3541: Flector;

    self_3923 = self_3922;
    other_3541 = other_3540;
    let _e4: MultiVector = self_3923;
    let _e8: Flector = other_3541;
    let _e17: MultiVector = self_3923;
    let _e21: Flector = other_3541;
    let _e31: MultiVector = self_3923;
    let _e35: Flector = other_3541;
    let _e45: MultiVector = self_3923;
    let _e49: Flector = other_3541;
    let _e59: MultiVector = self_3923;
    let _e63: Flector = other_3541;
    let _e73: MultiVector = self_3923;
    let _e77: Flector = other_3541;
    let _e87: MultiVector = self_3923;
    let _e91: Flector = other_3541;
    let _e101: MultiVector = self_3923;
    let _e105: Flector = other_3541;
    let _e115: MultiVector = self_3923;
    let _e119: Flector = other_3541;
    let _e122: MultiVector = self_3923;
    let _e126: Flector = other_3541;
    let _e129: Flector = other_3541;
    let _e132: Flector = other_3541;
    let _e137: MultiVector = self_3923;
    let _e140: MultiVector = self_3923;
    let _e143: MultiVector = self_3923;
    let _e147: Flector = other_3541;
    let _e156: MultiVector = self_3923;
    let _e160: Flector = other_3541;
    let _e163: Flector = other_3541;
    let _e166: Flector = other_3541;
    let _e176: MultiVector = self_3923;
    let _e180: Flector = other_3541;
    let _e183: Flector = other_3541;
    let _e186: Flector = other_3541;
    let _e197: MultiVector = self_3923;
    let _e201: Flector = other_3541;
    let _e204: Flector = other_3541;
    let _e207: Flector = other_3541;
    let _e218: MultiVector = self_3923;
    let _e222: Flector = other_3541;
    let _e225: MultiVector = self_3923;
    let _e229: Flector = other_3541;
    let _e240: MultiVector = self_3923;
    let _e244: Flector = other_3541;
    let _e255: MultiVector = self_3923;
    let _e259: Flector = other_3541;
    let _e270: MultiVector = self_3923;
    let _e274: Flector = other_3541;
    let _e285: MultiVector = self_3923;
    let _e288: MultiVector = self_3923;
    let _e291: MultiVector = self_3923;
    let _e294: MultiVector = self_3923;
    let _e298: Flector = other_3541;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e115.g0_.x) * _e119.g0_), ((vec3(_e122.g1_.w) * vec3<f32>(_e126.g0_.x, _e129.g0_.y, _e132.g0_.z)) + ((vec3<f32>(_e137.g1_.x, _e140.g1_.y, _e143.g1_.z) * vec3(_e147.g0_.w)) * vec3(-1.0))), ((((vec3(_e156.g1_.y) * vec3<f32>(_e160.g0_.z, _e163.g0_.z, _e166.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g1_.z) * vec3<f32>(_e180.g0_.y, _e183.g0_.x, _e186.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g1_.x) * vec3<f32>(_e201.g0_.x, _e204.g0_.z, _e207.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e218.g0_.x) * _e222.g1_) + ((vec4(_e225.g2_.y) * _e229.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e240.g2_.z) * _e244.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e255.g3_.y) * _e259.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e270.g3_.z) * _e274.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e285.g3_.x, _e288.g2_.x, _e291.g2_.x, _e294.g3_.x) * _e298.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_flector_join(self_3924: MultiVector, other_3542: Flector) -> MultiVector {
    var self_3925: MultiVector;
    var other_3543: Flector;

    self_3925 = self_3924;
    other_3543 = other_3542;
    let _e4: MultiVector = self_3925;
    let _e8: Flector = other_3543;
    let _e17: MultiVector = self_3925;
    let _e21: Flector = other_3543;
    let _e31: MultiVector = self_3925;
    let _e35: Flector = other_3543;
    let _e45: MultiVector = self_3925;
    let _e49: Flector = other_3543;
    let _e59: MultiVector = self_3925;
    let _e63: Flector = other_3543;
    let _e73: MultiVector = self_3925;
    let _e77: Flector = other_3543;
    let _e87: MultiVector = self_3925;
    let _e91: Flector = other_3543;
    let _e101: MultiVector = self_3925;
    let _e105: Flector = other_3543;
    let _e115: MultiVector = self_3925;
    let _e119: Flector = other_3543;
    let _e122: MultiVector = self_3925;
    let _e126: Flector = other_3543;
    let _e129: Flector = other_3543;
    let _e132: Flector = other_3543;
    let _e137: MultiVector = self_3925;
    let _e140: MultiVector = self_3925;
    let _e143: MultiVector = self_3925;
    let _e147: Flector = other_3543;
    let _e156: MultiVector = self_3925;
    let _e160: Flector = other_3543;
    let _e163: Flector = other_3543;
    let _e166: Flector = other_3543;
    let _e176: MultiVector = self_3925;
    let _e180: Flector = other_3543;
    let _e183: Flector = other_3543;
    let _e186: Flector = other_3543;
    let _e197: MultiVector = self_3925;
    let _e201: Flector = other_3543;
    let _e204: Flector = other_3543;
    let _e207: Flector = other_3543;
    let _e218: MultiVector = self_3925;
    let _e222: Flector = other_3543;
    let _e225: MultiVector = self_3925;
    let _e229: Flector = other_3543;
    let _e240: MultiVector = self_3925;
    let _e244: Flector = other_3543;
    let _e255: MultiVector = self_3925;
    let _e259: Flector = other_3543;
    let _e270: MultiVector = self_3925;
    let _e274: Flector = other_3543;
    let _e285: MultiVector = self_3925;
    let _e288: MultiVector = self_3925;
    let _e291: MultiVector = self_3925;
    let _e294: MultiVector = self_3925;
    let _e298: Flector = other_3543;
    return MultiVector((((((((((vec2(_e4.g1_.y) * vec2(_e8.g1_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g1_.w) * vec2(_e35.g1_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e45.g4_.x) * vec2(_e49.g0_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g4_.y) * vec2(_e63.g0_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e73.g4_.z) * vec2(_e77.g0_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g0_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e101.g1_.x) * vec2(_e105.g1_.x)) * vec2<f32>(0.0, 1.0))), (vec4(_e115.g0_.x) * _e119.g0_), ((vec3(_e122.g1_.w) * vec3<f32>(_e126.g0_.x, _e129.g0_.y, _e132.g0_.z)) + ((vec3<f32>(_e137.g1_.x, _e140.g1_.y, _e143.g1_.z) * vec3(_e147.g0_.w)) * vec3(-1.0))), ((((vec3(_e156.g1_.y) * vec3<f32>(_e160.g0_.z, _e163.g0_.z, _e166.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e176.g1_.z) * vec3<f32>(_e180.g0_.y, _e183.g0_.x, _e186.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e197.g1_.x) * vec3<f32>(_e201.g0_.x, _e204.g0_.z, _e207.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec4(_e218.g0_.x) * _e222.g1_) + ((vec4(_e225.g2_.y) * _e229.g0_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e240.g2_.z) * _e244.g0_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e255.g3_.y) * _e259.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e270.g3_.z) * _e274.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4<f32>(_e285.g3_.x, _e288.g2_.x, _e291.g2_.x, _e294.g3_.x) * _e298.g0_.wzyx) * vec4<f32>(1.0, -1.0, 1.0, -1.0))));
}

fn multi_vector_flector_inner_product(self_3926: MultiVector, other_3544: Flector) -> MultiVector {
    var self_3927: MultiVector;
    var other_3545: Flector;

    self_3927 = self_3926;
    other_3545 = other_3544;
    let _e4: MultiVector = self_3927;
    let _e8: Flector = other_3545;
    let _e17: MultiVector = self_3927;
    let _e21: Flector = other_3545;
    let _e31: MultiVector = self_3927;
    let _e35: Flector = other_3545;
    let _e45: MultiVector = self_3927;
    let _e49: Flector = other_3545;
    let _e59: MultiVector = self_3927;
    let _e63: Flector = other_3545;
    let _e66: MultiVector = self_3927;
    let _e70: Flector = other_3545;
    let _e82: MultiVector = self_3927;
    let _e86: Flector = other_3545;
    let _e98: MultiVector = self_3927;
    let _e102: Flector = other_3545;
    let _e114: MultiVector = self_3927;
    let _e118: Flector = other_3545;
    let _e121: Flector = other_3545;
    let _e124: Flector = other_3545;
    let _e127: Flector = other_3545;
    let _e139: MultiVector = self_3927;
    let _e143: Flector = other_3545;
    let _e146: Flector = other_3545;
    let _e149: Flector = other_3545;
    let _e152: Flector = other_3545;
    let _e164: MultiVector = self_3927;
    let _e168: Flector = other_3545;
    let _e171: Flector = other_3545;
    let _e174: Flector = other_3545;
    let _e177: Flector = other_3545;
    let _e189: MultiVector = self_3927;
    let _e192: MultiVector = self_3927;
    let _e195: MultiVector = self_3927;
    let _e198: MultiVector = self_3927;
    let _e202: Flector = other_3545;
    let _e213: MultiVector = self_3927;
    let _e217: Flector = other_3545;
    let _e220: Flector = other_3545;
    let _e223: Flector = other_3545;
    let _e233: MultiVector = self_3927;
    let _e237: Flector = other_3545;
    let _e240: Flector = other_3545;
    let _e243: Flector = other_3545;
    let _e254: MultiVector = self_3927;
    let _e258: Flector = other_3545;
    let _e261: Flector = other_3545;
    let _e264: Flector = other_3545;
    let _e275: MultiVector = self_3927;
    let _e279: Flector = other_3545;
    let _e282: Flector = other_3545;
    let _e285: Flector = other_3545;
    let _e296: MultiVector = self_3927;
    let _e300: Flector = other_3545;
    let _e303: Flector = other_3545;
    let _e306: Flector = other_3545;
    let _e317: MultiVector = self_3927;
    let _e321: Flector = other_3545;
    let _e324: Flector = other_3545;
    let _e327: Flector = other_3545;
    let _e340: MultiVector = self_3927;
    let _e344: Flector = other_3545;
    let _e347: Flector = other_3545;
    let _e350: Flector = other_3545;
    let _e356: MultiVector = self_3927;
    let _e359: MultiVector = self_3927;
    let _e362: MultiVector = self_3927;
    let _e366: Flector = other_3545;
    let _e375: MultiVector = self_3927;
    let _e379: Flector = other_3545;
    let _e382: MultiVector = self_3927;
    let _e385: MultiVector = self_3927;
    let _e388: MultiVector = self_3927;
    let _e391: MultiVector = self_3927;
    let _e395: Flector = other_3545;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4(_e59.g0_.x) * _e63.g0_) + ((vec4(_e66.g2_.x) * vec4(_e70.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e82.g2_.y) * vec4(_e86.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e98.g2_.z) * vec4(_e102.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e114.g3_.x) * vec4<f32>(_e118.g1_.w, _e121.g0_.z, _e124.g0_.y, _e127.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e139.g3_.y) * vec4<f32>(_e143.g0_.z, _e146.g1_.w, _e149.g0_.x, _e152.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e164.g3_.z) * vec4<f32>(_e168.g0_.y, _e171.g0_.x, _e174.g1_.w, _e177.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4<f32>(_e189.g0_.x, _e192.g0_.x, _e195.g0_.x, _e198.g0_.y) * _e202.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((((vec3(_e213.g1_.y) * vec3<f32>(_e217.g1_.z, _e220.g1_.z, _e223.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e233.g1_.z) * vec3<f32>(_e237.g1_.y, _e240.g1_.x, _e243.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e254.g4_.x) * vec3<f32>(_e258.g0_.z, _e261.g0_.z, _e264.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e275.g4_.y) * vec3<f32>(_e279.g0_.z, _e282.g0_.z, _e285.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e296.g4_.z) * vec3<f32>(_e300.g0_.y, _e303.g0_.x, _e306.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e317.g1_.x) * vec3<f32>(_e321.g1_.x, _e324.g1_.z, _e327.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3(0.0) - (vec3(_e340.g4_.w) * vec3<f32>(_e344.g0_.x, _e347.g0_.y, _e350.g0_.z))) + ((vec3<f32>(_e356.g1_.x, _e359.g1_.y, _e362.g1_.z) * vec3(_e366.g1_.w)) * vec3(-1.0))), ((vec4(_e375.g0_.x) * _e379.g1_) + ((vec4<f32>(_e382.g0_.y, _e385.g0_.y, _e388.g0_.y, _e391.g0_.x) * _e395.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_flector_inner_anti_product(self_3928: MultiVector, other_3546: Flector) -> MultiVector {
    var self_3929: MultiVector;
    var other_3547: Flector;

    self_3929 = self_3928;
    other_3547 = other_3546;
    let _e4: MultiVector = self_3929;
    let _e8: Flector = other_3547;
    let _e17: MultiVector = self_3929;
    let _e21: Flector = other_3547;
    let _e31: MultiVector = self_3929;
    let _e35: Flector = other_3547;
    let _e45: MultiVector = self_3929;
    let _e48: MultiVector = self_3929;
    let _e52: Flector = other_3547;
    let _e55: Flector = other_3547;
    let _e65: MultiVector = self_3929;
    let _e69: Flector = other_3547;
    let _e72: MultiVector = self_3929;
    let _e76: Flector = other_3547;
    let _e89: MultiVector = self_3929;
    let _e93: Flector = other_3547;
    let _e96: Flector = other_3547;
    let _e99: Flector = other_3547;
    let _e105: MultiVector = self_3929;
    let _e108: MultiVector = self_3929;
    let _e111: MultiVector = self_3929;
    let _e115: Flector = other_3547;
    let _e124: MultiVector = self_3929;
    let _e128: Flector = other_3547;
    let _e131: Flector = other_3547;
    let _e134: Flector = other_3547;
    let _e144: MultiVector = self_3929;
    let _e148: Flector = other_3547;
    let _e151: Flector = other_3547;
    let _e154: Flector = other_3547;
    let _e165: MultiVector = self_3929;
    let _e169: Flector = other_3547;
    let _e172: Flector = other_3547;
    let _e175: Flector = other_3547;
    let _e186: MultiVector = self_3929;
    let _e190: Flector = other_3547;
    let _e193: Flector = other_3547;
    let _e196: Flector = other_3547;
    let _e207: MultiVector = self_3929;
    let _e211: Flector = other_3547;
    let _e214: Flector = other_3547;
    let _e217: Flector = other_3547;
    let _e228: MultiVector = self_3929;
    let _e232: Flector = other_3547;
    let _e235: Flector = other_3547;
    let _e238: Flector = other_3547;
    let _e249: MultiVector = self_3929;
    let _e253: Flector = other_3547;
    let _e256: MultiVector = self_3929;
    let _e260: Flector = other_3547;
    let _e263: Flector = other_3547;
    let _e266: Flector = other_3547;
    let _e269: Flector = other_3547;
    let _e281: MultiVector = self_3929;
    let _e285: Flector = other_3547;
    let _e288: Flector = other_3547;
    let _e291: Flector = other_3547;
    let _e294: Flector = other_3547;
    let _e306: MultiVector = self_3929;
    let _e310: Flector = other_3547;
    let _e313: Flector = other_3547;
    let _e316: Flector = other_3547;
    let _e319: Flector = other_3547;
    let _e331: MultiVector = self_3929;
    let _e335: Flector = other_3547;
    let _e347: MultiVector = self_3929;
    let _e351: Flector = other_3547;
    let _e363: MultiVector = self_3929;
    let _e367: Flector = other_3547;
    let _e379: MultiVector = self_3929;
    let _e383: Flector = other_3547;
    return MultiVector((((((vec2(_e4.g4_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g1_.x, _e48.g1_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, -1.0))), ((vec4(_e65.g0_.y) * _e69.g0_) + ((vec4(_e72.g0_.x) * _e76.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec3(0.0) - (vec3(_e89.g1_.w) * vec3<f32>(_e93.g1_.x, _e96.g1_.y, _e99.g1_.z))) + ((vec3<f32>(_e105.g4_.x, _e108.g4_.y, _e111.g4_.z) * vec3(_e115.g0_.w)) * vec3(-1.0))), (((((((vec3(_e124.g1_.y) * vec3<f32>(_e128.g1_.z, _e131.g1_.z, _e134.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e144.g1_.z) * vec3<f32>(_e148.g1_.y, _e151.g1_.x, _e154.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e165.g4_.x) * vec3<f32>(_e169.g0_.z, _e172.g0_.z, _e175.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e186.g4_.y) * vec3<f32>(_e190.g0_.z, _e193.g0_.z, _e196.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e207.g4_.z) * vec3<f32>(_e211.g0_.y, _e214.g0_.x, _e217.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e228.g1_.x) * vec3<f32>(_e232.g1_.x, _e235.g1_.z, _e238.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((((vec4(_e249.g0_.y) * _e253.g1_) + ((vec4(_e256.g2_.x) * vec4<f32>(_e260.g0_.w, _e263.g1_.z, _e266.g1_.y, _e269.g0_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e281.g2_.y) * vec4<f32>(_e285.g1_.z, _e288.g0_.w, _e291.g1_.x, _e294.g0_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e306.g2_.z) * vec4<f32>(_e310.g1_.y, _e313.g1_.x, _e316.g0_.w, _e319.g0_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e331.g3_.x) * vec4(_e335.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e347.g3_.y) * vec4(_e351.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e363.g3_.z) * vec4(_e367.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e379.g0_.x) * _e383.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flector_left_contraction(self_3930: MultiVector, other_3548: Flector) -> MultiVector {
    var self_3931: MultiVector;
    var other_3549: Flector;

    self_3931 = self_3930;
    other_3549 = other_3548;
    let _e4: MultiVector = self_3931;
    let _e8: Flector = other_3549;
    let _e17: MultiVector = self_3931;
    let _e21: Flector = other_3549;
    let _e31: MultiVector = self_3931;
    let _e35: Flector = other_3549;
    let _e45: MultiVector = self_3931;
    let _e49: Flector = other_3549;
    let _e59: MultiVector = self_3931;
    let _e63: Flector = other_3549;
    let _e66: MultiVector = self_3931;
    let _e70: Flector = other_3549;
    let _e81: MultiVector = self_3931;
    let _e85: Flector = other_3549;
    let _e96: MultiVector = self_3931;
    let _e100: Flector = other_3549;
    let _e111: MultiVector = self_3931;
    let _e115: Flector = other_3549;
    let _e118: Flector = other_3549;
    let _e121: Flector = other_3549;
    let _e131: MultiVector = self_3931;
    let _e135: Flector = other_3549;
    let _e138: Flector = other_3549;
    let _e141: Flector = other_3549;
    let _e152: MultiVector = self_3931;
    let _e156: Flector = other_3549;
    let _e159: Flector = other_3549;
    let _e162: Flector = other_3549;
    let _e173: MultiVector = self_3931;
    let _e176: MultiVector = self_3931;
    let _e179: MultiVector = self_3931;
    let _e183: Flector = other_3549;
    let _e191: MultiVector = self_3931;
    let _e195: Flector = other_3549;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((vec4(_e59.g0_.x) * _e63.g0_) + ((vec4(_e66.g3_.y) * _e70.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e81.g3_.z) * _e85.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e96.g3_.x) * _e100.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))), ((((vec3(_e111.g1_.y) * vec3<f32>(_e115.g1_.z, _e118.g1_.z, _e121.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e131.g1_.z) * vec3<f32>(_e135.g1_.y, _e138.g1_.x, _e141.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e152.g1_.x) * vec3<f32>(_e156.g1_.x, _e159.g1_.z, _e162.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3<f32>(_e173.g1_.x, _e176.g1_.y, _e179.g1_.z) * vec3(_e183.g1_.w)) * vec3(-1.0)), (vec4(_e191.g0_.x) * _e195.g1_));
}

fn multi_vector_flector_right_contraction(self_3932: MultiVector, other_3550: Flector) -> MultiVector {
    var self_3933: MultiVector;
    var other_3551: Flector;

    self_3933 = self_3932;
    other_3551 = other_3550;
    let _e4: MultiVector = self_3933;
    let _e8: Flector = other_3551;
    let _e17: MultiVector = self_3933;
    let _e21: Flector = other_3551;
    let _e31: MultiVector = self_3933;
    let _e35: Flector = other_3551;
    let _e45: MultiVector = self_3933;
    let _e49: Flector = other_3551;
    let _e59: MultiVector = self_3933;
    let _e63: Flector = other_3551;
    let _e74: MultiVector = self_3933;
    let _e78: Flector = other_3551;
    let _e90: MultiVector = self_3933;
    let _e94: Flector = other_3551;
    let _e106: MultiVector = self_3933;
    let _e110: Flector = other_3551;
    let _e121: MultiVector = self_3933;
    let _e125: Flector = other_3551;
    let _e136: MultiVector = self_3933;
    let _e140: Flector = other_3551;
    let _e151: MultiVector = self_3933;
    let _e154: MultiVector = self_3933;
    let _e157: MultiVector = self_3933;
    let _e160: MultiVector = self_3933;
    let _e164: Flector = other_3551;
    let _e175: MultiVector = self_3933;
    let _e179: Flector = other_3551;
    let _e182: Flector = other_3551;
    let _e185: Flector = other_3551;
    let _e195: MultiVector = self_3933;
    let _e199: Flector = other_3551;
    let _e202: Flector = other_3551;
    let _e205: Flector = other_3551;
    let _e216: MultiVector = self_3933;
    let _e220: Flector = other_3551;
    let _e223: Flector = other_3551;
    let _e226: Flector = other_3551;
    let _e239: MultiVector = self_3933;
    let _e243: Flector = other_3551;
    let _e246: Flector = other_3551;
    let _e249: Flector = other_3551;
    let _e255: MultiVector = self_3933;
    let _e258: MultiVector = self_3933;
    let _e261: MultiVector = self_3933;
    let _e264: MultiVector = self_3933;
    let _e268: Flector = other_3551;
    return MultiVector((((((vec2(_e4.g1_.y) * vec2(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.z) * vec2(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g4_.w) * vec2(_e35.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e45.g1_.x) * vec2(_e49.g0_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4(_e59.g2_.x) * vec4(_e63.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4(_e74.g2_.y) * vec4(_e78.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e90.g2_.z) * vec4(_e94.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e106.g3_.x) * _e110.g0_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e121.g3_.y) * _e125.g0_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e136.g3_.z) * _e140.g0_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4<f32>(_e151.g0_.x, _e154.g0_.x, _e157.g0_.x, _e160.g0_.y) * _e164.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((vec3(_e175.g4_.y) * vec3<f32>(_e179.g0_.z, _e182.g0_.z, _e185.g0_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e195.g4_.z) * vec3<f32>(_e199.g0_.y, _e202.g0_.x, _e205.g0_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e216.g4_.x) * vec3<f32>(_e220.g0_.x, _e223.g0_.z, _e226.g0_.y)) * vec3<f32>(0.0, 1.0, -1.0))), (vec3(0.0) - (vec3(_e239.g4_.w) * vec3<f32>(_e243.g0_.x, _e246.g0_.y, _e249.g0_.z))), ((vec4<f32>(_e255.g0_.y, _e258.g0_.y, _e261.g0_.y, _e264.g0_.x) * _e268.g0_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0)));
}

fn multi_vector_flector_left_anti_contraction(self_3934: MultiVector, other_3552: Flector) -> MultiVector {
    var self_3935: MultiVector;
    var other_3553: Flector;

    self_3935 = self_3934;
    other_3553 = other_3552;
    let _e4: MultiVector = self_3935;
    let _e8: Flector = other_3553;
    let _e17: MultiVector = self_3935;
    let _e21: Flector = other_3553;
    let _e31: MultiVector = self_3935;
    let _e35: Flector = other_3553;
    let _e45: MultiVector = self_3935;
    let _e48: MultiVector = self_3935;
    let _e52: Flector = other_3553;
    let _e55: Flector = other_3553;
    let _e65: MultiVector = self_3935;
    let _e69: Flector = other_3553;
    let _e72: MultiVector = self_3935;
    let _e75: MultiVector = self_3935;
    let _e78: MultiVector = self_3935;
    let _e82: Flector = other_3553;
    let _e90: MultiVector = self_3935;
    let _e94: Flector = other_3553;
    let _e97: Flector = other_3553;
    let _e100: Flector = other_3553;
    let _e110: MultiVector = self_3935;
    let _e114: Flector = other_3553;
    let _e117: Flector = other_3553;
    let _e120: Flector = other_3553;
    let _e131: MultiVector = self_3935;
    let _e135: Flector = other_3553;
    let _e138: Flector = other_3553;
    let _e141: Flector = other_3553;
    let _e152: MultiVector = self_3935;
    let _e156: Flector = other_3553;
    let _e159: MultiVector = self_3935;
    let _e163: Flector = other_3553;
    let _e174: MultiVector = self_3935;
    let _e178: Flector = other_3553;
    let _e189: MultiVector = self_3935;
    let _e193: Flector = other_3553;
    return MultiVector((((((vec2(_e4.g4_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g1_.x, _e48.g1_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, -1.0))), (vec4(_e65.g0_.y) * _e69.g0_), ((vec3<f32>(_e72.g4_.x, _e75.g4_.y, _e78.g4_.z) * vec3(_e82.g0_.w)) * vec3(-1.0)), ((((vec3(_e90.g4_.y) * vec3<f32>(_e94.g0_.z, _e97.g0_.z, _e100.g0_.x)) * vec3<f32>(1.0, 0.0, -1.0)) + ((vec3(_e110.g4_.z) * vec3<f32>(_e114.g0_.y, _e117.g0_.x, _e120.g0_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e131.g4_.x) * vec3<f32>(_e135.g0_.x, _e138.g0_.z, _e141.g0_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((vec4(_e152.g0_.y) * _e156.g1_) + ((vec4(_e159.g2_.y) * _e163.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e174.g2_.z) * _e178.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e189.g2_.x) * _e193.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))));
}

fn multi_vector_flector_right_anti_contraction(self_3936: MultiVector, other_3554: Flector) -> MultiVector {
    var self_3937: MultiVector;
    var other_3555: Flector;

    self_3937 = self_3936;
    other_3555 = other_3554;
    let _e4: MultiVector = self_3937;
    let _e8: Flector = other_3555;
    let _e17: MultiVector = self_3937;
    let _e21: Flector = other_3555;
    let _e31: MultiVector = self_3937;
    let _e35: Flector = other_3555;
    let _e45: MultiVector = self_3937;
    let _e48: MultiVector = self_3937;
    let _e52: Flector = other_3555;
    let _e55: Flector = other_3555;
    let _e65: MultiVector = self_3937;
    let _e69: Flector = other_3555;
    let _e81: MultiVector = self_3937;
    let _e85: Flector = other_3555;
    let _e88: Flector = other_3555;
    let _e91: Flector = other_3555;
    let _e97: MultiVector = self_3937;
    let _e101: Flector = other_3555;
    let _e104: Flector = other_3555;
    let _e107: Flector = other_3555;
    let _e117: MultiVector = self_3937;
    let _e121: Flector = other_3555;
    let _e124: Flector = other_3555;
    let _e127: Flector = other_3555;
    let _e138: MultiVector = self_3937;
    let _e142: Flector = other_3555;
    let _e145: Flector = other_3555;
    let _e148: Flector = other_3555;
    let _e159: MultiVector = self_3937;
    let _e163: Flector = other_3555;
    let _e173: MultiVector = self_3937;
    let _e177: Flector = other_3555;
    let _e188: MultiVector = self_3937;
    let _e192: Flector = other_3555;
    let _e203: MultiVector = self_3937;
    let _e207: Flector = other_3555;
    let _e219: MultiVector = self_3937;
    let _e223: Flector = other_3555;
    let _e235: MultiVector = self_3937;
    let _e239: Flector = other_3555;
    let _e251: MultiVector = self_3937;
    let _e255: Flector = other_3555;
    return MultiVector((((((vec2(_e4.g4_.x) * vec2(_e8.g1_.x)) * vec2<f32>(0.0, 1.0)) + ((vec2(_e17.g4_.y) * vec2(_e21.g1_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e31.g4_.z) * vec2(_e35.g1_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g1_.x, _e48.g1_.w) * vec2<f32>(_e52.g0_.x, _e55.g0_.w)) * vec2<f32>(0.0, -1.0))), ((vec4(_e65.g0_.x) * _e69.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)), (vec3(0.0) - (vec3(_e81.g1_.w) * vec3<f32>(_e85.g1_.x, _e88.g1_.y, _e91.g1_.z))), ((((vec3(_e97.g1_.y) * vec3<f32>(_e101.g1_.z, _e104.g1_.z, _e107.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0)) + ((vec3(_e117.g1_.z) * vec3<f32>(_e121.g1_.y, _e124.g1_.x, _e127.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e138.g1_.x) * vec3<f32>(_e142.g1_.x, _e145.g1_.z, _e148.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((((vec4(_e159.g2_.x) * _e163.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0)) + ((vec4(_e173.g2_.y) * _e177.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e188.g2_.z) * _e192.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e203.g3_.x) * vec4(_e207.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e219.g3_.y) * vec4(_e223.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e235.g3_.z) * vec4(_e239.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e251.g0_.x) * _e255.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flector_scalar_product(self_3938: MultiVector, other_3556: Flector) -> Scalar {
    var self_3939: MultiVector;
    var other_3557: Flector;

    self_3939 = self_3938;
    other_3557 = other_3556;
    let _e4: MultiVector = self_3939;
    let _e7: Flector = other_3557;
    let _e11: MultiVector = self_3939;
    let _e14: Flector = other_3557;
    let _e19: MultiVector = self_3939;
    let _e22: Flector = other_3557;
    let _e27: MultiVector = self_3939;
    let _e30: Flector = other_3557;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) - (_e27.g4_.w * _e30.g1_.w)));
}

fn multi_vector_flector_dot(self_3940: MultiVector, other_3558: Flector) -> Scalar {
    var self_3941: MultiVector;
    var other_3559: Flector;

    self_3941 = self_3940;
    other_3559 = other_3558;
    let _e4: MultiVector = self_3941;
    let _e7: Flector = other_3559;
    let _e11: MultiVector = self_3941;
    let _e14: Flector = other_3559;
    let _e19: MultiVector = self_3941;
    let _e22: Flector = other_3559;
    let _e27: MultiVector = self_3941;
    let _e30: Flector = other_3559;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) - (_e27.g4_.w * _e30.g1_.w)));
}

fn multi_vector_flector_anti_scalar_product(self_3942: MultiVector, other_3560: Flector) -> AntiScalar {
    var self_3943: MultiVector;
    var other_3561: Flector;

    self_3943 = self_3942;
    other_3561 = other_3560;
    let _e5: MultiVector = self_3943;
    let _e8: Flector = other_3561;
    let _e13: MultiVector = self_3943;
    let _e16: Flector = other_3561;
    let _e21: MultiVector = self_3943;
    let _e24: Flector = other_3561;
    let _e29: MultiVector = self_3943;
    let _e32: Flector = other_3561;
    return AntiScalar(((((0.0 - (_e5.g1_.w * _e8.g0_.w)) + (_e13.g4_.x * _e16.g1_.x)) + (_e21.g4_.y * _e24.g1_.y)) + (_e29.g4_.z * _e32.g1_.z)));
}

fn multi_vector_flector_anti_dot(self_3944: MultiVector, other_3562: Flector) -> AntiScalar {
    var self_3945: MultiVector;
    var other_3563: Flector;

    self_3945 = self_3944;
    other_3563 = other_3562;
    let _e5: MultiVector = self_3945;
    let _e8: Flector = other_3563;
    let _e13: MultiVector = self_3945;
    let _e16: Flector = other_3563;
    let _e21: MultiVector = self_3945;
    let _e24: Flector = other_3563;
    let _e29: MultiVector = self_3945;
    let _e32: Flector = other_3563;
    return AntiScalar(((((0.0 - (_e5.g1_.w * _e8.g0_.w)) + (_e13.g4_.x * _e16.g1_.x)) + (_e21.g4_.y * _e24.g1_.y)) + (_e29.g4_.z * _e32.g1_.z)));
}

fn multi_vector_multi_vector_add(self_3946: MultiVector, other_3564: MultiVector) -> MultiVector {
    var self_3947: MultiVector;
    var other_3565: MultiVector;

    self_3947 = self_3946;
    other_3565 = other_3564;
    let _e4: MultiVector = self_3947;
    let _e6: MultiVector = other_3565;
    let _e9: MultiVector = self_3947;
    let _e11: MultiVector = other_3565;
    let _e14: MultiVector = self_3947;
    let _e16: MultiVector = other_3565;
    let _e19: MultiVector = self_3947;
    let _e21: MultiVector = other_3565;
    let _e24: MultiVector = self_3947;
    let _e26: MultiVector = other_3565;
    return MultiVector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_), (_e19.g3_ + _e21.g3_), (_e24.g4_ + _e26.g4_));
}

fn multi_vector_multi_vector_sub(self_3948: MultiVector, other_3566: MultiVector) -> MultiVector {
    var self_3949: MultiVector;
    var other_3567: MultiVector;

    self_3949 = self_3948;
    other_3567 = other_3566;
    let _e4: MultiVector = self_3949;
    let _e6: MultiVector = other_3567;
    let _e9: MultiVector = self_3949;
    let _e11: MultiVector = other_3567;
    let _e14: MultiVector = self_3949;
    let _e16: MultiVector = other_3567;
    let _e19: MultiVector = self_3949;
    let _e21: MultiVector = other_3567;
    let _e24: MultiVector = self_3949;
    let _e26: MultiVector = other_3567;
    return MultiVector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_), (_e19.g3_ - _e21.g3_), (_e24.g4_ - _e26.g4_));
}

fn multi_vector_multi_vector_mul(self_3950: MultiVector, other_3568: MultiVector) -> MultiVector {
    var self_3951: MultiVector;
    var other_3569: MultiVector;

    self_3951 = self_3950;
    other_3569 = other_3568;
    let _e4: MultiVector = self_3951;
    let _e6: MultiVector = other_3569;
    let _e9: MultiVector = self_3951;
    let _e11: MultiVector = other_3569;
    let _e14: MultiVector = self_3951;
    let _e16: MultiVector = other_3569;
    let _e19: MultiVector = self_3951;
    let _e21: MultiVector = other_3569;
    let _e24: MultiVector = self_3951;
    let _e26: MultiVector = other_3569;
    return MultiVector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_), (_e19.g3_ * _e21.g3_), (_e24.g4_ * _e26.g4_));
}

fn multi_vector_multi_vector_div(self_3952: MultiVector, other_3570: MultiVector) -> MultiVector {
    var self_3953: MultiVector;
    var other_3571: MultiVector;

    self_3953 = self_3952;
    other_3571 = other_3570;
    let _e4: MultiVector = self_3953;
    let _e7: MultiVector = self_3953;
    let _e15: MultiVector = other_3571;
    let _e18: MultiVector = other_3571;
    let _e27: MultiVector = self_3953;
    let _e30: MultiVector = self_3953;
    let _e33: MultiVector = self_3953;
    let _e36: MultiVector = self_3953;
    let _e46: MultiVector = other_3571;
    let _e49: MultiVector = other_3571;
    let _e52: MultiVector = other_3571;
    let _e55: MultiVector = other_3571;
    let _e66: MultiVector = self_3953;
    let _e69: MultiVector = self_3953;
    let _e72: MultiVector = self_3953;
    let _e81: MultiVector = other_3571;
    let _e84: MultiVector = other_3571;
    let _e87: MultiVector = other_3571;
    let _e97: MultiVector = self_3953;
    let _e100: MultiVector = self_3953;
    let _e103: MultiVector = self_3953;
    let _e112: MultiVector = other_3571;
    let _e115: MultiVector = other_3571;
    let _e118: MultiVector = other_3571;
    let _e128: MultiVector = self_3953;
    let _e131: MultiVector = self_3953;
    let _e134: MultiVector = self_3953;
    let _e137: MultiVector = self_3953;
    let _e147: MultiVector = other_3571;
    let _e150: MultiVector = other_3571;
    let _e153: MultiVector = other_3571;
    let _e156: MultiVector = other_3571;
    return MultiVector((((vec2<f32>(_e4.g0_.x, _e7.g0_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e15.g0_.x, _e18.g0_.y)) * vec2<f32>(1.0, 1.0)), (((vec4<f32>(_e27.g1_.x, _e30.g1_.y, _e33.g1_.z, _e36.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e46.g1_.x, _e49.g1_.y, _e52.g1_.z, _e55.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e66.g2_.x, _e69.g2_.y, _e72.g2_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e81.g2_.x, _e84.g2_.y, _e87.g2_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e97.g3_.x, _e100.g3_.y, _e103.g3_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e112.g3_.x, _e115.g3_.y, _e118.g3_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec4<f32>(_e128.g4_.x, _e131.g4_.y, _e134.g4_.z, _e137.g4_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e147.g4_.x, _e150.g4_.y, _e153.g4_.z, _e156.g4_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn multi_vector_multi_vector_geometric_product(self_3954: MultiVector, other_3572: MultiVector) -> MultiVector {
    var self_3955: MultiVector;
    var other_3573: MultiVector;

    self_3955 = self_3954;
    other_3573 = other_3572;
    let _e4: MultiVector = self_3955;
    let _e8: MultiVector = other_3573;
    let _e11: MultiVector = self_3955;
    let _e15: MultiVector = other_3573;
    let _e18: MultiVector = other_3573;
    let _e24: MultiVector = self_3955;
    let _e28: MultiVector = other_3573;
    let _e31: MultiVector = other_3573;
    let _e37: MultiVector = self_3955;
    let _e41: MultiVector = other_3573;
    let _e44: MultiVector = other_3573;
    let _e50: MultiVector = self_3955;
    let _e54: MultiVector = other_3573;
    let _e64: MultiVector = self_3955;
    let _e68: MultiVector = other_3573;
    let _e78: MultiVector = self_3955;
    let _e82: MultiVector = other_3573;
    let _e92: MultiVector = self_3955;
    let _e96: MultiVector = other_3573;
    let _e106: MultiVector = self_3955;
    let _e110: MultiVector = other_3573;
    let _e113: MultiVector = other_3573;
    let _e119: MultiVector = self_3955;
    let _e123: MultiVector = other_3573;
    let _e126: MultiVector = other_3573;
    let _e132: MultiVector = self_3955;
    let _e136: MultiVector = other_3573;
    let _e139: MultiVector = other_3573;
    let _e145: MultiVector = self_3955;
    let _e149: MultiVector = other_3573;
    let _e159: MultiVector = self_3955;
    let _e163: MultiVector = other_3573;
    let _e173: MultiVector = self_3955;
    let _e177: MultiVector = other_3573;
    let _e187: MultiVector = self_3955;
    let _e191: MultiVector = other_3573;
    let _e194: MultiVector = other_3573;
    let _e200: MultiVector = self_3955;
    let _e202: MultiVector = other_3573;
    let _e212: MultiVector = self_3955;
    let _e216: MultiVector = other_3573;
    let _e219: MultiVector = self_3955;
    let _e223: MultiVector = other_3573;
    let _e226: MultiVector = other_3573;
    let _e229: MultiVector = other_3573;
    let _e232: MultiVector = other_3573;
    let _e244: MultiVector = self_3955;
    let _e248: MultiVector = other_3573;
    let _e251: MultiVector = other_3573;
    let _e254: MultiVector = other_3573;
    let _e257: MultiVector = other_3573;
    let _e269: MultiVector = self_3955;
    let _e273: MultiVector = other_3573;
    let _e276: MultiVector = other_3573;
    let _e279: MultiVector = other_3573;
    let _e282: MultiVector = other_3573;
    let _e294: MultiVector = self_3955;
    let _e298: MultiVector = other_3573;
    let _e310: MultiVector = self_3955;
    let _e314: MultiVector = other_3573;
    let _e326: MultiVector = self_3955;
    let _e330: MultiVector = other_3573;
    let _e342: MultiVector = self_3955;
    let _e346: MultiVector = other_3573;
    let _e358: MultiVector = self_3955;
    let _e362: MultiVector = other_3573;
    let _e365: MultiVector = other_3573;
    let _e368: MultiVector = other_3573;
    let _e371: MultiVector = other_3573;
    let _e383: MultiVector = self_3955;
    let _e387: MultiVector = other_3573;
    let _e390: MultiVector = other_3573;
    let _e393: MultiVector = other_3573;
    let _e396: MultiVector = other_3573;
    let _e408: MultiVector = self_3955;
    let _e412: MultiVector = other_3573;
    let _e415: MultiVector = other_3573;
    let _e418: MultiVector = other_3573;
    let _e421: MultiVector = other_3573;
    let _e433: MultiVector = self_3955;
    let _e437: MultiVector = other_3573;
    let _e449: MultiVector = self_3955;
    let _e453: MultiVector = other_3573;
    let _e465: MultiVector = self_3955;
    let _e469: MultiVector = other_3573;
    let _e481: MultiVector = self_3955;
    let _e485: MultiVector = other_3573;
    let _e488: MultiVector = other_3573;
    let _e491: MultiVector = other_3573;
    let _e494: MultiVector = other_3573;
    let _e500: MultiVector = self_3955;
    let _e503: MultiVector = self_3955;
    let _e506: MultiVector = self_3955;
    let _e509: MultiVector = self_3955;
    let _e513: MultiVector = other_3573;
    let _e524: MultiVector = self_3955;
    let _e528: MultiVector = other_3573;
    let _e531: MultiVector = self_3955;
    let _e535: MultiVector = other_3573;
    let _e539: MultiVector = self_3955;
    let _e543: MultiVector = other_3573;
    let _e546: MultiVector = other_3573;
    let _e549: MultiVector = other_3573;
    let _e560: MultiVector = self_3955;
    let _e564: MultiVector = other_3573;
    let _e567: MultiVector = other_3573;
    let _e570: MultiVector = other_3573;
    let _e581: MultiVector = self_3955;
    let _e585: MultiVector = other_3573;
    let _e588: MultiVector = other_3573;
    let _e591: MultiVector = other_3573;
    let _e602: MultiVector = self_3955;
    let _e606: MultiVector = other_3573;
    let _e609: MultiVector = other_3573;
    let _e612: MultiVector = other_3573;
    let _e618: MultiVector = self_3955;
    let _e622: MultiVector = other_3573;
    let _e625: MultiVector = other_3573;
    let _e628: MultiVector = other_3573;
    let _e639: MultiVector = self_3955;
    let _e643: MultiVector = other_3573;
    let _e646: MultiVector = other_3573;
    let _e649: MultiVector = other_3573;
    let _e660: MultiVector = self_3955;
    let _e664: MultiVector = other_3573;
    let _e667: MultiVector = other_3573;
    let _e670: MultiVector = other_3573;
    let _e681: MultiVector = self_3955;
    let _e685: MultiVector = other_3573;
    let _e688: MultiVector = other_3573;
    let _e691: MultiVector = other_3573;
    let _e702: MultiVector = self_3955;
    let _e706: MultiVector = other_3573;
    let _e709: MultiVector = other_3573;
    let _e712: MultiVector = other_3573;
    let _e723: MultiVector = self_3955;
    let _e727: MultiVector = other_3573;
    let _e730: MultiVector = other_3573;
    let _e733: MultiVector = other_3573;
    let _e744: MultiVector = self_3955;
    let _e748: MultiVector = other_3573;
    let _e751: MultiVector = other_3573;
    let _e754: MultiVector = other_3573;
    let _e765: MultiVector = self_3955;
    let _e769: MultiVector = other_3573;
    let _e772: MultiVector = other_3573;
    let _e775: MultiVector = other_3573;
    let _e786: MultiVector = self_3955;
    let _e790: MultiVector = other_3573;
    let _e793: MultiVector = other_3573;
    let _e796: MultiVector = other_3573;
    let _e807: MultiVector = self_3955;
    let _e811: MultiVector = other_3573;
    let _e814: MultiVector = other_3573;
    let _e817: MultiVector = other_3573;
    let _e823: MultiVector = self_3955;
    let _e827: MultiVector = other_3573;
    let _e830: MultiVector = self_3955;
    let _e834: MultiVector = other_3573;
    let _e837: MultiVector = other_3573;
    let _e840: MultiVector = other_3573;
    let _e851: MultiVector = self_3955;
    let _e855: MultiVector = other_3573;
    let _e858: MultiVector = other_3573;
    let _e861: MultiVector = other_3573;
    let _e872: MultiVector = self_3955;
    let _e876: MultiVector = other_3573;
    let _e879: MultiVector = other_3573;
    let _e882: MultiVector = other_3573;
    let _e893: MultiVector = self_3955;
    let _e897: MultiVector = other_3573;
    let _e900: MultiVector = other_3573;
    let _e903: MultiVector = other_3573;
    let _e914: MultiVector = self_3955;
    let _e918: MultiVector = other_3573;
    let _e921: MultiVector = other_3573;
    let _e924: MultiVector = other_3573;
    let _e935: MultiVector = self_3955;
    let _e939: MultiVector = other_3573;
    let _e942: MultiVector = other_3573;
    let _e945: MultiVector = other_3573;
    let _e956: MultiVector = self_3955;
    let _e960: MultiVector = other_3573;
    let _e963: MultiVector = other_3573;
    let _e966: MultiVector = other_3573;
    let _e972: MultiVector = self_3955;
    let _e976: MultiVector = other_3573;
    let _e979: MultiVector = self_3955;
    let _e983: MultiVector = other_3573;
    let _e986: MultiVector = other_3573;
    let _e989: MultiVector = other_3573;
    let _e992: MultiVector = other_3573;
    let _e1004: MultiVector = self_3955;
    let _e1008: MultiVector = other_3573;
    let _e1011: MultiVector = other_3573;
    let _e1014: MultiVector = other_3573;
    let _e1017: MultiVector = other_3573;
    let _e1029: MultiVector = self_3955;
    let _e1033: MultiVector = other_3573;
    let _e1036: MultiVector = other_3573;
    let _e1039: MultiVector = other_3573;
    let _e1042: MultiVector = other_3573;
    let _e1054: MultiVector = self_3955;
    let _e1058: MultiVector = other_3573;
    let _e1061: MultiVector = other_3573;
    let _e1064: MultiVector = other_3573;
    let _e1067: MultiVector = other_3573;
    let _e1079: MultiVector = self_3955;
    let _e1083: MultiVector = other_3573;
    let _e1086: MultiVector = other_3573;
    let _e1089: MultiVector = other_3573;
    let _e1092: MultiVector = other_3573;
    let _e1104: MultiVector = self_3955;
    let _e1108: MultiVector = other_3573;
    let _e1111: MultiVector = other_3573;
    let _e1114: MultiVector = other_3573;
    let _e1117: MultiVector = other_3573;
    let _e1129: MultiVector = self_3955;
    let _e1133: MultiVector = other_3573;
    let _e1136: MultiVector = other_3573;
    let _e1139: MultiVector = other_3573;
    let _e1142: MultiVector = other_3573;
    let _e1154: MultiVector = self_3955;
    let _e1158: MultiVector = other_3573;
    let _e1161: MultiVector = other_3573;
    let _e1164: MultiVector = other_3573;
    let _e1167: MultiVector = other_3573;
    let _e1179: MultiVector = self_3955;
    let _e1183: MultiVector = other_3573;
    let _e1186: MultiVector = other_3573;
    let _e1189: MultiVector = other_3573;
    let _e1192: MultiVector = other_3573;
    let _e1204: MultiVector = self_3955;
    let _e1208: MultiVector = other_3573;
    let _e1211: MultiVector = other_3573;
    let _e1214: MultiVector = other_3573;
    let _e1217: MultiVector = other_3573;
    let _e1229: MultiVector = self_3955;
    let _e1233: MultiVector = other_3573;
    let _e1236: MultiVector = other_3573;
    let _e1239: MultiVector = other_3573;
    let _e1242: MultiVector = other_3573;
    let _e1254: MultiVector = self_3955;
    let _e1258: MultiVector = other_3573;
    let _e1261: MultiVector = other_3573;
    let _e1264: MultiVector = other_3573;
    let _e1267: MultiVector = other_3573;
    let _e1279: MultiVector = self_3955;
    let _e1283: MultiVector = other_3573;
    let _e1286: MultiVector = other_3573;
    let _e1289: MultiVector = other_3573;
    let _e1292: MultiVector = other_3573;
    let _e1304: MultiVector = self_3955;
    let _e1308: MultiVector = other_3573;
    let _e1311: MultiVector = other_3573;
    let _e1314: MultiVector = other_3573;
    let _e1317: MultiVector = other_3573;
    let _e1323: MultiVector = self_3955;
    let _e1326: MultiVector = self_3955;
    let _e1329: MultiVector = self_3955;
    let _e1332: MultiVector = self_3955;
    let _e1336: MultiVector = other_3573;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.x) * _e8.g0_) + (vec2(_e11.g1_.x) * vec2<f32>(_e15.g1_.x, _e18.g4_.x))) + (vec2(_e24.g1_.y) * vec2<f32>(_e28.g1_.y, _e31.g4_.y))) + (vec2(_e37.g1_.z) * vec2<f32>(_e41.g1_.z, _e44.g4_.z))) + ((vec2(_e50.g1_.w) * vec2(_e54.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e64.g2_.x) * vec2(_e68.g3_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e78.g2_.y) * vec2(_e82.g3_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e92.g2_.z) * vec2(_e96.g3_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e106.g3_.x) * vec2<f32>(_e110.g3_.x, _e113.g2_.x))) - (vec2(_e119.g3_.y) * vec2<f32>(_e123.g3_.y, _e126.g2_.y))) - (vec2(_e132.g3_.z) * vec2<f32>(_e136.g3_.z, _e139.g2_.z))) + ((vec2(_e145.g4_.x) * vec2(_e149.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e159.g4_.y) * vec2(_e163.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e173.g4_.z) * vec2(_e177.g1_.z)) * vec2<f32>(0.0, -1.0))) - (vec2(_e187.g4_.w) * vec2<f32>(_e191.g4_.w, _e194.g1_.w))) + ((_e200.g0_ * vec2(_e202.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((((((((((vec4(_e212.g0_.x) * _e216.g1_) + ((vec4(_e219.g1_.x) * vec4<f32>(_e223.g0_.x, _e226.g3_.z, _e229.g3_.y, _e232.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e244.g1_.y) * vec4<f32>(_e248.g3_.z, _e251.g0_.x, _e254.g3_.x, _e257.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e269.g1_.z) * vec4<f32>(_e273.g3_.y, _e276.g3_.x, _e279.g0_.x, _e282.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e294.g1_.w) * vec4(_e298.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e310.g2_.x) * vec4(_e314.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e326.g2_.y) * vec4(_e330.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e342.g2_.z) * vec4(_e346.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e358.g3_.x) * vec4<f32>(_e362.g4_.w, _e365.g1_.z, _e368.g1_.y, _e371.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e383.g3_.y) * vec4<f32>(_e387.g1_.z, _e390.g4_.w, _e393.g1_.x, _e396.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e408.g3_.z) * vec4<f32>(_e412.g1_.y, _e415.g1_.x, _e418.g4_.w, _e421.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e433.g4_.x) * vec4(_e437.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e449.g4_.y) * vec4(_e453.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e465.g4_.z) * vec4(_e469.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e481.g4_.w) * vec4<f32>(_e485.g3_.x, _e488.g3_.y, _e491.g3_.z, _e494.g0_.y))) + ((vec4<f32>(_e500.g0_.x, _e503.g0_.x, _e506.g0_.x, _e509.g0_.y) * _e513.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((((((((((((((vec3(_e524.g0_.x) * _e528.g2_) + (vec3(_e531.g0_.y) * _e535.g3_)) + ((vec3(_e539.g1_.x) * vec3<f32>(_e543.g1_.w, _e546.g4_.z, _e549.g4_.y)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e560.g1_.y) * vec3<f32>(_e564.g4_.z, _e567.g1_.w, _e570.g4_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e581.g1_.z) * vec3<f32>(_e585.g4_.y, _e588.g4_.x, _e591.g1_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + (vec3(_e602.g1_.w) * vec3<f32>(_e606.g1_.x, _e609.g1_.y, _e612.g1_.z))) + ((vec3(_e618.g2_.x) * vec3<f32>(_e622.g0_.x, _e625.g3_.z, _e628.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e639.g2_.y) * vec3<f32>(_e643.g3_.z, _e646.g0_.x, _e649.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e660.g2_.z) * vec3<f32>(_e664.g3_.y, _e667.g3_.x, _e670.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e681.g3_.x) * vec3<f32>(_e685.g0_.y, _e688.g2_.z, _e691.g2_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e702.g3_.y) * vec3<f32>(_e706.g2_.z, _e709.g0_.y, _e712.g2_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e723.g3_.z) * vec3<f32>(_e727.g2_.y, _e730.g2_.x, _e733.g0_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e744.g4_.x) * vec3<f32>(_e748.g4_.w, _e751.g1_.z, _e754.g1_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e765.g4_.y) * vec3<f32>(_e769.g1_.z, _e772.g4_.w, _e775.g1_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e786.g4_.z) * vec3<f32>(_e790.g1_.y, _e793.g1_.x, _e796.g4_.w)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e807.g4_.w) * vec3<f32>(_e811.g4_.x, _e814.g4_.y, _e817.g4_.z))), ((((((((vec3(_e823.g0_.x) * _e827.g3_) + ((vec3(_e830.g1_.x) * vec3<f32>(_e834.g4_.w, _e837.g1_.z, _e840.g1_.y)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e851.g1_.y) * vec3<f32>(_e855.g1_.z, _e858.g4_.w, _e861.g1_.x)) * vec3<f32>(1.0, -1.0, -1.0))) + ((vec3(_e872.g1_.z) * vec3<f32>(_e876.g1_.y, _e879.g1_.x, _e882.g4_.w)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e893.g3_.x) * vec3<f32>(_e897.g0_.x, _e900.g3_.z, _e903.g3_.y)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e914.g3_.y) * vec3<f32>(_e918.g3_.z, _e921.g0_.x, _e924.g3_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e935.g3_.z) * vec3<f32>(_e939.g3_.y, _e942.g3_.x, _e945.g0_.x)) * vec3<f32>(1.0, -1.0, 1.0))) - (vec3(_e956.g4_.w) * vec3<f32>(_e960.g1_.x, _e963.g1_.y, _e966.g1_.z))), ((((((((((((((((vec4(_e972.g0_.x) * _e976.g4_) + ((vec4(_e979.g1_.x) * vec4<f32>(_e983.g0_.y, _e986.g2_.z, _e989.g2_.y, _e992.g3_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e1004.g1_.y) * vec4<f32>(_e1008.g2_.z, _e1011.g0_.y, _e1014.g2_.x, _e1017.g3_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e1029.g1_.z) * vec4<f32>(_e1033.g2_.y, _e1036.g2_.x, _e1039.g0_.y, _e1042.g3_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e1054.g1_.w) * vec4<f32>(_e1058.g3_.x, _e1061.g3_.y, _e1064.g3_.z, _e1067.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e1079.g2_.x) * vec4<f32>(_e1083.g4_.w, _e1086.g1_.z, _e1089.g1_.y, _e1092.g4_.w)) * vec4<f32>(-1.0, -1.0, 1.0, 0.0))) + ((vec4(_e1104.g2_.y) * vec4<f32>(_e1108.g1_.z, _e1111.g4_.w, _e1114.g1_.x, _e1117.g1_.z)) * vec4<f32>(1.0, -1.0, -1.0, 0.0))) + ((vec4(_e1129.g2_.z) * vec4<f32>(_e1133.g1_.y, _e1136.g1_.x, _e1139.g4_.w, _e1142.g1_.y)) * vec4<f32>(-1.0, 1.0, -1.0, 0.0))) + ((vec4(_e1154.g3_.x) * vec4<f32>(_e1158.g1_.w, _e1161.g4_.z, _e1164.g4_.y, _e1167.g1_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e1179.g3_.y) * vec4<f32>(_e1183.g4_.z, _e1186.g1_.w, _e1189.g4_.x, _e1192.g1_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e1204.g3_.z) * vec4<f32>(_e1208.g4_.y, _e1211.g4_.x, _e1214.g1_.w, _e1217.g1_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e1229.g4_.x) * vec4<f32>(_e1233.g0_.x, _e1236.g3_.z, _e1239.g3_.y, _e1242.g0_.x)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e1254.g4_.y) * vec4<f32>(_e1258.g3_.z, _e1261.g0_.x, _e1264.g3_.x, _e1267.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e1279.g4_.z) * vec4<f32>(_e1283.g3_.y, _e1286.g3_.x, _e1289.g0_.x, _e1292.g3_.y)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + (vec4(_e1304.g4_.w) * vec4<f32>(_e1308.g2_.x, _e1311.g2_.y, _e1314.g2_.z, _e1317.g0_.x))) + ((vec4<f32>(_e1323.g0_.y, _e1326.g0_.y, _e1329.g0_.y, _e1332.g0_.x) * _e1336.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_multi_vector_geometric_anti_product(self_3956: MultiVector, other_3574: MultiVector) -> MultiVector {
    var self_3957: MultiVector;
    var other_3575: MultiVector;

    self_3957 = self_3956;
    other_3575 = other_3574;
    let _e4: MultiVector = self_3957;
    let _e8: MultiVector = other_3575;
    let _e11: MultiVector = self_3957;
    let _e15: MultiVector = other_3575;
    let _e25: MultiVector = self_3957;
    let _e29: MultiVector = other_3575;
    let _e39: MultiVector = self_3957;
    let _e43: MultiVector = other_3575;
    let _e53: MultiVector = self_3957;
    let _e57: MultiVector = other_3575;
    let _e60: MultiVector = other_3575;
    let _e70: MultiVector = self_3957;
    let _e74: MultiVector = other_3575;
    let _e77: MultiVector = other_3575;
    let _e83: MultiVector = self_3957;
    let _e87: MultiVector = other_3575;
    let _e90: MultiVector = other_3575;
    let _e96: MultiVector = self_3957;
    let _e100: MultiVector = other_3575;
    let _e103: MultiVector = other_3575;
    let _e109: MultiVector = self_3957;
    let _e113: MultiVector = other_3575;
    let _e123: MultiVector = self_3957;
    let _e127: MultiVector = other_3575;
    let _e137: MultiVector = self_3957;
    let _e141: MultiVector = other_3575;
    let _e151: MultiVector = self_3957;
    let _e155: MultiVector = other_3575;
    let _e158: MultiVector = other_3575;
    let _e168: MultiVector = self_3957;
    let _e172: MultiVector = other_3575;
    let _e175: MultiVector = other_3575;
    let _e185: MultiVector = self_3957;
    let _e189: MultiVector = other_3575;
    let _e192: MultiVector = other_3575;
    let _e202: MultiVector = self_3957;
    let _e206: MultiVector = other_3575;
    let _e216: MultiVector = self_3957;
    let _e220: MultiVector = other_3575;
    let _e229: MultiVector = self_3957;
    let _e233: MultiVector = other_3575;
    let _e236: MultiVector = self_3957;
    let _e240: MultiVector = other_3575;
    let _e243: MultiVector = other_3575;
    let _e246: MultiVector = other_3575;
    let _e249: MultiVector = other_3575;
    let _e261: MultiVector = self_3957;
    let _e265: MultiVector = other_3575;
    let _e268: MultiVector = other_3575;
    let _e271: MultiVector = other_3575;
    let _e274: MultiVector = other_3575;
    let _e286: MultiVector = self_3957;
    let _e290: MultiVector = other_3575;
    let _e293: MultiVector = other_3575;
    let _e296: MultiVector = other_3575;
    let _e299: MultiVector = other_3575;
    let _e311: MultiVector = self_3957;
    let _e315: MultiVector = other_3575;
    let _e318: MultiVector = other_3575;
    let _e321: MultiVector = other_3575;
    let _e324: MultiVector = other_3575;
    let _e336: MultiVector = self_3957;
    let _e340: MultiVector = other_3575;
    let _e343: MultiVector = other_3575;
    let _e346: MultiVector = other_3575;
    let _e349: MultiVector = other_3575;
    let _e361: MultiVector = self_3957;
    let _e365: MultiVector = other_3575;
    let _e368: MultiVector = other_3575;
    let _e371: MultiVector = other_3575;
    let _e374: MultiVector = other_3575;
    let _e386: MultiVector = self_3957;
    let _e390: MultiVector = other_3575;
    let _e393: MultiVector = other_3575;
    let _e396: MultiVector = other_3575;
    let _e399: MultiVector = other_3575;
    let _e411: MultiVector = self_3957;
    let _e415: MultiVector = other_3575;
    let _e418: MultiVector = other_3575;
    let _e421: MultiVector = other_3575;
    let _e424: MultiVector = other_3575;
    let _e436: MultiVector = self_3957;
    let _e440: MultiVector = other_3575;
    let _e443: MultiVector = other_3575;
    let _e446: MultiVector = other_3575;
    let _e449: MultiVector = other_3575;
    let _e461: MultiVector = self_3957;
    let _e465: MultiVector = other_3575;
    let _e468: MultiVector = other_3575;
    let _e471: MultiVector = other_3575;
    let _e474: MultiVector = other_3575;
    let _e486: MultiVector = self_3957;
    let _e490: MultiVector = other_3575;
    let _e493: MultiVector = other_3575;
    let _e496: MultiVector = other_3575;
    let _e499: MultiVector = other_3575;
    let _e511: MultiVector = self_3957;
    let _e515: MultiVector = other_3575;
    let _e518: MultiVector = other_3575;
    let _e521: MultiVector = other_3575;
    let _e524: MultiVector = other_3575;
    let _e536: MultiVector = self_3957;
    let _e540: MultiVector = other_3575;
    let _e543: MultiVector = other_3575;
    let _e546: MultiVector = other_3575;
    let _e549: MultiVector = other_3575;
    let _e561: MultiVector = self_3957;
    let _e565: MultiVector = other_3575;
    let _e568: MultiVector = other_3575;
    let _e571: MultiVector = other_3575;
    let _e574: MultiVector = other_3575;
    let _e586: MultiVector = self_3957;
    let _e590: MultiVector = other_3575;
    let _e601: MultiVector = self_3957;
    let _e605: MultiVector = other_3575;
    let _e608: MultiVector = self_3957;
    let _e612: MultiVector = other_3575;
    let _e615: MultiVector = other_3575;
    let _e618: MultiVector = other_3575;
    let _e624: MultiVector = self_3957;
    let _e628: MultiVector = other_3575;
    let _e631: MultiVector = other_3575;
    let _e634: MultiVector = other_3575;
    let _e645: MultiVector = self_3957;
    let _e649: MultiVector = other_3575;
    let _e652: MultiVector = other_3575;
    let _e655: MultiVector = other_3575;
    let _e666: MultiVector = self_3957;
    let _e670: MultiVector = other_3575;
    let _e673: MultiVector = other_3575;
    let _e676: MultiVector = other_3575;
    let _e687: MultiVector = self_3957;
    let _e691: MultiVector = other_3575;
    let _e694: MultiVector = other_3575;
    let _e697: MultiVector = other_3575;
    let _e708: MultiVector = self_3957;
    let _e712: MultiVector = other_3575;
    let _e715: MultiVector = other_3575;
    let _e718: MultiVector = other_3575;
    let _e729: MultiVector = self_3957;
    let _e733: MultiVector = other_3575;
    let _e736: MultiVector = other_3575;
    let _e739: MultiVector = other_3575;
    let _e750: MultiVector = self_3957;
    let _e754: MultiVector = other_3575;
    let _e757: MultiVector = self_3957;
    let _e761: MultiVector = other_3575;
    let _e765: MultiVector = self_3957;
    let _e769: MultiVector = other_3575;
    let _e772: MultiVector = other_3575;
    let _e775: MultiVector = other_3575;
    let _e786: MultiVector = self_3957;
    let _e790: MultiVector = other_3575;
    let _e793: MultiVector = other_3575;
    let _e796: MultiVector = other_3575;
    let _e807: MultiVector = self_3957;
    let _e811: MultiVector = other_3575;
    let _e814: MultiVector = other_3575;
    let _e817: MultiVector = other_3575;
    let _e828: MultiVector = self_3957;
    let _e832: MultiVector = other_3575;
    let _e835: MultiVector = other_3575;
    let _e838: MultiVector = other_3575;
    let _e844: MultiVector = self_3957;
    let _e848: MultiVector = other_3575;
    let _e851: MultiVector = other_3575;
    let _e854: MultiVector = other_3575;
    let _e865: MultiVector = self_3957;
    let _e869: MultiVector = other_3575;
    let _e872: MultiVector = other_3575;
    let _e875: MultiVector = other_3575;
    let _e886: MultiVector = self_3957;
    let _e890: MultiVector = other_3575;
    let _e893: MultiVector = other_3575;
    let _e896: MultiVector = other_3575;
    let _e907: MultiVector = self_3957;
    let _e911: MultiVector = other_3575;
    let _e914: MultiVector = other_3575;
    let _e917: MultiVector = other_3575;
    let _e928: MultiVector = self_3957;
    let _e932: MultiVector = other_3575;
    let _e935: MultiVector = other_3575;
    let _e938: MultiVector = other_3575;
    let _e949: MultiVector = self_3957;
    let _e953: MultiVector = other_3575;
    let _e956: MultiVector = other_3575;
    let _e959: MultiVector = other_3575;
    let _e970: MultiVector = self_3957;
    let _e974: MultiVector = other_3575;
    let _e977: MultiVector = other_3575;
    let _e980: MultiVector = other_3575;
    let _e991: MultiVector = self_3957;
    let _e995: MultiVector = other_3575;
    let _e998: MultiVector = other_3575;
    let _e1001: MultiVector = other_3575;
    let _e1012: MultiVector = self_3957;
    let _e1016: MultiVector = other_3575;
    let _e1019: MultiVector = other_3575;
    let _e1022: MultiVector = other_3575;
    let _e1033: MultiVector = self_3957;
    let _e1037: MultiVector = other_3575;
    let _e1040: MultiVector = other_3575;
    let _e1043: MultiVector = other_3575;
    let _e1049: MultiVector = self_3957;
    let _e1053: MultiVector = other_3575;
    let _e1056: MultiVector = self_3957;
    let _e1060: MultiVector = other_3575;
    let _e1072: MultiVector = self_3957;
    let _e1076: MultiVector = other_3575;
    let _e1088: MultiVector = self_3957;
    let _e1092: MultiVector = other_3575;
    let _e1104: MultiVector = self_3957;
    let _e1108: MultiVector = other_3575;
    let _e1111: MultiVector = other_3575;
    let _e1114: MultiVector = other_3575;
    let _e1117: MultiVector = other_3575;
    let _e1129: MultiVector = self_3957;
    let _e1133: MultiVector = other_3575;
    let _e1136: MultiVector = other_3575;
    let _e1139: MultiVector = other_3575;
    let _e1142: MultiVector = other_3575;
    let _e1154: MultiVector = self_3957;
    let _e1158: MultiVector = other_3575;
    let _e1161: MultiVector = other_3575;
    let _e1164: MultiVector = other_3575;
    let _e1167: MultiVector = other_3575;
    let _e1179: MultiVector = self_3957;
    let _e1183: MultiVector = other_3575;
    let _e1186: MultiVector = other_3575;
    let _e1189: MultiVector = other_3575;
    let _e1192: MultiVector = other_3575;
    let _e1204: MultiVector = self_3957;
    let _e1208: MultiVector = other_3575;
    let _e1220: MultiVector = self_3957;
    let _e1224: MultiVector = other_3575;
    let _e1236: MultiVector = self_3957;
    let _e1240: MultiVector = other_3575;
    let _e1252: MultiVector = self_3957;
    let _e1256: MultiVector = other_3575;
    let _e1259: MultiVector = other_3575;
    let _e1262: MultiVector = other_3575;
    let _e1265: MultiVector = other_3575;
    let _e1277: MultiVector = self_3957;
    let _e1281: MultiVector = other_3575;
    let _e1284: MultiVector = other_3575;
    let _e1287: MultiVector = other_3575;
    let _e1290: MultiVector = other_3575;
    let _e1302: MultiVector = self_3957;
    let _e1306: MultiVector = other_3575;
    let _e1309: MultiVector = other_3575;
    let _e1312: MultiVector = other_3575;
    let _e1315: MultiVector = other_3575;
    let _e1327: MultiVector = self_3957;
    let _e1331: MultiVector = other_3575;
    let _e1343: MultiVector = self_3957;
    let _e1347: MultiVector = other_3575;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e53.g1_.w) * vec2<f32>(_e57.g4_.w, _e60.g1_.w)) * vec2<f32>(1.0, -1.0))) - (vec2(_e70.g2_.x) * vec2<f32>(_e74.g3_.x, _e77.g2_.x))) - (vec2(_e83.g2_.y) * vec2<f32>(_e87.g3_.y, _e90.g2_.y))) - (vec2(_e96.g2_.z) * vec2<f32>(_e100.g3_.z, _e103.g2_.z))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e151.g4_.x) * vec2<f32>(_e155.g1_.x, _e158.g4_.x)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e168.g4_.y) * vec2<f32>(_e172.g1_.y, _e175.g4_.y)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e185.g4_.z) * vec2<f32>(_e189.g1_.z, _e192.g4_.z)) * vec2<f32>(-1.0, 1.0))) + ((vec2(_e202.g4_.w) * vec2(_e206.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e216.g0_.x) * _e220.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((((((vec4(_e229.g0_.y) * _e233.g1_) + ((vec4(_e236.g1_.x) * vec4<f32>(_e240.g0_.y, _e243.g2_.z, _e246.g2_.y, _e249.g0_.y)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e261.g1_.y) * vec4<f32>(_e265.g2_.z, _e268.g0_.y, _e271.g2_.x, _e274.g2_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e286.g1_.z) * vec4<f32>(_e290.g2_.y, _e293.g2_.x, _e296.g0_.y, _e299.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e311.g1_.w) * vec4<f32>(_e315.g3_.x, _e318.g3_.y, _e321.g3_.z, _e324.g0_.y)) * vec4<f32>(-1.0, -1.0, -1.0, 1.0))) + ((vec4(_e336.g2_.x) * vec4<f32>(_e340.g4_.w, _e343.g1_.z, _e346.g1_.y, _e349.g4_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e361.g2_.y) * vec4<f32>(_e365.g1_.z, _e368.g4_.w, _e371.g1_.x, _e374.g4_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e386.g2_.z) * vec4<f32>(_e390.g1_.y, _e393.g1_.x, _e396.g4_.w, _e399.g4_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e411.g3_.x) * vec4<f32>(_e415.g1_.w, _e418.g4_.z, _e421.g4_.y, _e424.g1_.w)) * vec4<f32>(1.0, -1.0, 1.0, 0.0))) + ((vec4(_e436.g3_.y) * vec4<f32>(_e440.g4_.z, _e443.g1_.w, _e446.g4_.x, _e449.g4_.z)) * vec4<f32>(1.0, 1.0, -1.0, 0.0))) + ((vec4(_e461.g3_.z) * vec4<f32>(_e465.g4_.y, _e468.g4_.x, _e471.g1_.w, _e474.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, 0.0))) + ((vec4(_e486.g4_.x) * vec4<f32>(_e490.g0_.x, _e493.g3_.z, _e496.g3_.y, _e499.g2_.x)) * vec4<f32>(-1.0, 1.0, -1.0, -1.0))) + ((vec4(_e511.g4_.y) * vec4<f32>(_e515.g3_.z, _e518.g0_.x, _e521.g3_.x, _e524.g2_.y)) * vec4<f32>(-1.0, -1.0, 1.0, -1.0))) + ((vec4(_e536.g4_.z) * vec4<f32>(_e540.g3_.y, _e543.g3_.x, _e546.g0_.x, _e549.g2_.z)) * vec4<f32>(1.0, -1.0, -1.0, -1.0))) + ((vec4(_e561.g4_.w) * vec4<f32>(_e565.g2_.x, _e568.g2_.y, _e571.g2_.z, _e574.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e586.g0_.x) * _e590.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((((vec3(_e601.g0_.y) * _e605.g2_) - (vec3(_e608.g1_.w) * vec3<f32>(_e612.g4_.x, _e615.g4_.y, _e618.g4_.z))) + ((vec3(_e624.g2_.x) * vec3<f32>(_e628.g0_.y, _e631.g2_.z, _e634.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e645.g2_.y) * vec3<f32>(_e649.g2_.z, _e652.g0_.y, _e655.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e666.g2_.z) * vec3<f32>(_e670.g2_.y, _e673.g2_.x, _e676.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e687.g4_.x) * vec3<f32>(_e691.g1_.w, _e694.g4_.z, _e697.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e708.g4_.y) * vec3<f32>(_e712.g4_.z, _e715.g1_.w, _e718.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e729.g4_.z) * vec3<f32>(_e733.g4_.y, _e736.g4_.x, _e739.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))), ((((((((((((((((vec3(_e750.g0_.x) * _e754.g2_) + (vec3(_e757.g0_.y) * _e761.g3_)) + ((vec3(_e765.g1_.x) * vec3<f32>(_e769.g1_.w, _e772.g4_.z, _e775.g4_.y)) * vec3<f32>(-1.0, 1.0, -1.0))) + ((vec3(_e786.g1_.y) * vec3<f32>(_e790.g4_.z, _e793.g1_.w, _e796.g4_.x)) * vec3<f32>(-1.0, -1.0, 1.0))) + ((vec3(_e807.g1_.z) * vec3<f32>(_e811.g4_.y, _e814.g4_.x, _e817.g1_.w)) * vec3<f32>(1.0, -1.0, -1.0))) + (vec3(_e828.g1_.w) * vec3<f32>(_e832.g1_.x, _e835.g1_.y, _e838.g1_.z))) + ((vec3(_e844.g2_.x) * vec3<f32>(_e848.g0_.x, _e851.g3_.z, _e854.g3_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e865.g2_.y) * vec3<f32>(_e869.g3_.z, _e872.g0_.x, _e875.g3_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e886.g2_.z) * vec3<f32>(_e890.g3_.y, _e893.g3_.x, _e896.g0_.x)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e907.g3_.x) * vec3<f32>(_e911.g0_.y, _e914.g2_.z, _e917.g2_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e928.g3_.y) * vec3<f32>(_e932.g2_.z, _e935.g0_.y, _e938.g2_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e949.g3_.z) * vec3<f32>(_e953.g2_.y, _e956.g2_.x, _e959.g0_.y)) * vec3<f32>(-1.0, 1.0, 1.0))) + ((vec3(_e970.g4_.x) * vec3<f32>(_e974.g4_.w, _e977.g1_.z, _e980.g1_.y)) * vec3<f32>(1.0, -1.0, 1.0))) + ((vec3(_e991.g4_.y) * vec3<f32>(_e995.g1_.z, _e998.g4_.w, _e1001.g1_.x)) * vec3<f32>(1.0, 1.0, -1.0))) + ((vec3(_e1012.g4_.z) * vec3<f32>(_e1016.g1_.y, _e1019.g1_.x, _e1022.g4_.w)) * vec3<f32>(-1.0, 1.0, 1.0))) - (vec3(_e1033.g4_.w) * vec3<f32>(_e1037.g4_.x, _e1040.g4_.y, _e1043.g4_.z))), ((((((((((((((((vec4(_e1049.g0_.y) * _e1053.g4_) + ((vec4(_e1056.g1_.x) * vec4(_e1060.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1072.g1_.y) * vec4(_e1076.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1088.g1_.z) * vec4(_e1092.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1104.g1_.w) * vec4<f32>(_e1108.g2_.x, _e1111.g2_.y, _e1114.g2_.z, _e1117.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e1129.g2_.x) * vec4<f32>(_e1133.g1_.w, _e1136.g4_.z, _e1139.g4_.y, _e1142.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e1154.g2_.y) * vec4<f32>(_e1158.g4_.z, _e1161.g1_.w, _e1164.g4_.x, _e1167.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e1179.g2_.z) * vec4<f32>(_e1183.g4_.y, _e1186.g4_.x, _e1189.g1_.w, _e1192.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e1204.g3_.x) * vec4(_e1208.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1220.g3_.y) * vec4(_e1224.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1236.g3_.z) * vec4(_e1240.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e1252.g4_.x) * vec4<f32>(_e1256.g0_.y, _e1259.g2_.z, _e1262.g2_.y, _e1265.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e1277.g4_.y) * vec4<f32>(_e1281.g2_.z, _e1284.g0_.y, _e1287.g2_.x, _e1290.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e1302.g4_.z) * vec4<f32>(_e1306.g2_.y, _e1309.g2_.x, _e1312.g0_.y, _e1315.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e1327.g4_.w) * vec4(_e1331.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e1343.g0_.x) * _e1347.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_regressive_product(self_3958: MultiVector, other_3576: MultiVector) -> MultiVector {
    var self_3959: MultiVector;
    var other_3577: MultiVector;

    self_3959 = self_3958;
    other_3577 = other_3576;
    let _e4: MultiVector = self_3959;
    let _e8: MultiVector = other_3577;
    let _e11: MultiVector = self_3959;
    let _e15: MultiVector = other_3577;
    let _e25: MultiVector = self_3959;
    let _e29: MultiVector = other_3577;
    let _e39: MultiVector = self_3959;
    let _e43: MultiVector = other_3577;
    let _e53: MultiVector = self_3959;
    let _e57: MultiVector = other_3577;
    let _e67: MultiVector = self_3959;
    let _e71: MultiVector = other_3577;
    let _e81: MultiVector = self_3959;
    let _e85: MultiVector = other_3577;
    let _e95: MultiVector = self_3959;
    let _e99: MultiVector = other_3577;
    let _e109: MultiVector = self_3959;
    let _e113: MultiVector = other_3577;
    let _e123: MultiVector = self_3959;
    let _e127: MultiVector = other_3577;
    let _e137: MultiVector = self_3959;
    let _e141: MultiVector = other_3577;
    let _e151: MultiVector = self_3959;
    let _e155: MultiVector = other_3577;
    let _e165: MultiVector = self_3959;
    let _e169: MultiVector = other_3577;
    let _e179: MultiVector = self_3959;
    let _e183: MultiVector = other_3577;
    let _e193: MultiVector = self_3959;
    let _e197: MultiVector = other_3577;
    let _e207: MultiVector = self_3959;
    let _e211: MultiVector = other_3577;
    let _e220: MultiVector = self_3959;
    let _e224: MultiVector = other_3577;
    let _e227: MultiVector = self_3959;
    let _e231: MultiVector = other_3577;
    let _e242: MultiVector = self_3959;
    let _e246: MultiVector = other_3577;
    let _e257: MultiVector = self_3959;
    let _e261: MultiVector = other_3577;
    let _e272: MultiVector = self_3959;
    let _e276: MultiVector = other_3577;
    let _e287: MultiVector = self_3959;
    let _e291: MultiVector = other_3577;
    let _e302: MultiVector = self_3959;
    let _e306: MultiVector = other_3577;
    let _e317: MultiVector = self_3959;
    let _e321: MultiVector = other_3577;
    let _e324: MultiVector = other_3577;
    let _e327: MultiVector = other_3577;
    let _e330: MultiVector = other_3577;
    let _e342: MultiVector = self_3959;
    let _e346: MultiVector = other_3577;
    let _e349: MultiVector = other_3577;
    let _e352: MultiVector = other_3577;
    let _e355: MultiVector = other_3577;
    let _e367: MultiVector = self_3959;
    let _e371: MultiVector = other_3577;
    let _e374: MultiVector = other_3577;
    let _e377: MultiVector = other_3577;
    let _e380: MultiVector = other_3577;
    let _e392: MultiVector = self_3959;
    let _e396: MultiVector = other_3577;
    let _e399: MultiVector = other_3577;
    let _e402: MultiVector = other_3577;
    let _e405: MultiVector = other_3577;
    let _e417: MultiVector = self_3959;
    let _e419: MultiVector = other_3577;
    let _e425: MultiVector = self_3959;
    let _e429: MultiVector = other_3577;
    let _e432: MultiVector = self_3959;
    let _e436: MultiVector = other_3577;
    let _e439: MultiVector = other_3577;
    let _e442: MultiVector = other_3577;
    let _e453: MultiVector = self_3959;
    let _e457: MultiVector = other_3577;
    let _e460: MultiVector = other_3577;
    let _e463: MultiVector = other_3577;
    let _e474: MultiVector = self_3959;
    let _e478: MultiVector = other_3577;
    let _e481: MultiVector = other_3577;
    let _e484: MultiVector = other_3577;
    let _e495: MultiVector = self_3959;
    let _e497: MultiVector = other_3577;
    let _e503: MultiVector = self_3959;
    let _e507: MultiVector = other_3577;
    let _e510: MultiVector = self_3959;
    let _e514: MultiVector = other_3577;
    let _e525: MultiVector = self_3959;
    let _e529: MultiVector = other_3577;
    let _e540: MultiVector = self_3959;
    let _e544: MultiVector = other_3577;
    let _e555: MultiVector = self_3959;
    let _e559: MultiVector = other_3577;
    let _e562: MultiVector = other_3577;
    let _e565: MultiVector = other_3577;
    let _e571: MultiVector = self_3959;
    let _e573: MultiVector = other_3577;
    let _e579: MultiVector = self_3959;
    let _e583: MultiVector = other_3577;
    let _e586: MultiVector = self_3959;
    let _e588: MultiVector = other_3577;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e207.g0_.x) * _e211.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4(_e220.g0_.y) * _e224.g1_) + ((vec4(_e227.g2_.x) * _e231.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e242.g2_.y) * _e246.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e257.g2_.z) * _e261.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e272.g3_.x) * _e276.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e287.g3_.y) * _e291.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e302.g3_.z) * _e306.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e317.g4_.x) * vec4<f32>(_e321.g3_.z, _e324.g3_.z, _e327.g3_.y, _e330.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e342.g4_.y) * vec4<f32>(_e346.g3_.z, _e349.g3_.z, _e352.g3_.x, _e355.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e367.g4_.z) * vec4<f32>(_e371.g3_.y, _e374.g3_.x, _e377.g3_.y, _e380.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e392.g4_.w) * vec4<f32>(_e396.g2_.x, _e399.g2_.y, _e402.g2_.z, _e405.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e417.g1_ * vec4(_e419.g0_.y))), (((((vec3(_e425.g0_.y) * _e429.g2_) + ((vec3(_e432.g4_.x) * vec3<f32>(_e436.g4_.z, _e439.g4_.z, _e442.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e453.g4_.y) * vec3<f32>(_e457.g4_.z, _e460.g4_.z, _e463.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e474.g4_.z) * vec3<f32>(_e478.g4_.y, _e481.g4_.x, _e484.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + (_e495.g2_ * vec3(_e497.g0_.y))), ((((((vec3(_e503.g0_.y) * _e507.g3_) + ((vec3(_e510.g4_.x) * vec3(_e514.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e525.g4_.y) * vec3(_e529.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e540.g4_.z) * vec3(_e544.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e555.g4_.w) * vec3<f32>(_e559.g4_.x, _e562.g4_.y, _e565.g4_.z))) + (_e571.g3_ * vec3(_e573.g0_.y))), ((vec4(_e579.g0_.y) * _e583.g4_) + (_e586.g4_ * vec4(_e588.g0_.y))));
}

fn multi_vector_multi_vector_anti_wedge(self_3960: MultiVector, other_3578: MultiVector) -> MultiVector {
    var self_3961: MultiVector;
    var other_3579: MultiVector;

    self_3961 = self_3960;
    other_3579 = other_3578;
    let _e4: MultiVector = self_3961;
    let _e8: MultiVector = other_3579;
    let _e11: MultiVector = self_3961;
    let _e15: MultiVector = other_3579;
    let _e25: MultiVector = self_3961;
    let _e29: MultiVector = other_3579;
    let _e39: MultiVector = self_3961;
    let _e43: MultiVector = other_3579;
    let _e53: MultiVector = self_3961;
    let _e57: MultiVector = other_3579;
    let _e67: MultiVector = self_3961;
    let _e71: MultiVector = other_3579;
    let _e81: MultiVector = self_3961;
    let _e85: MultiVector = other_3579;
    let _e95: MultiVector = self_3961;
    let _e99: MultiVector = other_3579;
    let _e109: MultiVector = self_3961;
    let _e113: MultiVector = other_3579;
    let _e123: MultiVector = self_3961;
    let _e127: MultiVector = other_3579;
    let _e137: MultiVector = self_3961;
    let _e141: MultiVector = other_3579;
    let _e151: MultiVector = self_3961;
    let _e155: MultiVector = other_3579;
    let _e165: MultiVector = self_3961;
    let _e169: MultiVector = other_3579;
    let _e179: MultiVector = self_3961;
    let _e183: MultiVector = other_3579;
    let _e193: MultiVector = self_3961;
    let _e197: MultiVector = other_3579;
    let _e207: MultiVector = self_3961;
    let _e211: MultiVector = other_3579;
    let _e220: MultiVector = self_3961;
    let _e224: MultiVector = other_3579;
    let _e227: MultiVector = self_3961;
    let _e231: MultiVector = other_3579;
    let _e242: MultiVector = self_3961;
    let _e246: MultiVector = other_3579;
    let _e257: MultiVector = self_3961;
    let _e261: MultiVector = other_3579;
    let _e272: MultiVector = self_3961;
    let _e276: MultiVector = other_3579;
    let _e287: MultiVector = self_3961;
    let _e291: MultiVector = other_3579;
    let _e302: MultiVector = self_3961;
    let _e306: MultiVector = other_3579;
    let _e317: MultiVector = self_3961;
    let _e321: MultiVector = other_3579;
    let _e324: MultiVector = other_3579;
    let _e327: MultiVector = other_3579;
    let _e330: MultiVector = other_3579;
    let _e342: MultiVector = self_3961;
    let _e346: MultiVector = other_3579;
    let _e349: MultiVector = other_3579;
    let _e352: MultiVector = other_3579;
    let _e355: MultiVector = other_3579;
    let _e367: MultiVector = self_3961;
    let _e371: MultiVector = other_3579;
    let _e374: MultiVector = other_3579;
    let _e377: MultiVector = other_3579;
    let _e380: MultiVector = other_3579;
    let _e392: MultiVector = self_3961;
    let _e396: MultiVector = other_3579;
    let _e399: MultiVector = other_3579;
    let _e402: MultiVector = other_3579;
    let _e405: MultiVector = other_3579;
    let _e417: MultiVector = self_3961;
    let _e419: MultiVector = other_3579;
    let _e425: MultiVector = self_3961;
    let _e429: MultiVector = other_3579;
    let _e432: MultiVector = self_3961;
    let _e436: MultiVector = other_3579;
    let _e439: MultiVector = other_3579;
    let _e442: MultiVector = other_3579;
    let _e453: MultiVector = self_3961;
    let _e457: MultiVector = other_3579;
    let _e460: MultiVector = other_3579;
    let _e463: MultiVector = other_3579;
    let _e474: MultiVector = self_3961;
    let _e478: MultiVector = other_3579;
    let _e481: MultiVector = other_3579;
    let _e484: MultiVector = other_3579;
    let _e495: MultiVector = self_3961;
    let _e497: MultiVector = other_3579;
    let _e503: MultiVector = self_3961;
    let _e507: MultiVector = other_3579;
    let _e510: MultiVector = self_3961;
    let _e514: MultiVector = other_3579;
    let _e525: MultiVector = self_3961;
    let _e529: MultiVector = other_3579;
    let _e540: MultiVector = self_3961;
    let _e544: MultiVector = other_3579;
    let _e555: MultiVector = self_3961;
    let _e559: MultiVector = other_3579;
    let _e562: MultiVector = other_3579;
    let _e565: MultiVector = other_3579;
    let _e571: MultiVector = self_3961;
    let _e573: MultiVector = other_3579;
    let _e579: MultiVector = self_3961;
    let _e583: MultiVector = other_3579;
    let _e586: MultiVector = self_3961;
    let _e588: MultiVector = other_3579;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e207.g0_.x) * _e211.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4(_e220.g0_.y) * _e224.g1_) + ((vec4(_e227.g2_.x) * _e231.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e242.g2_.y) * _e246.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e257.g2_.z) * _e261.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e272.g3_.x) * _e276.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e287.g3_.y) * _e291.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e302.g3_.z) * _e306.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e317.g4_.x) * vec4<f32>(_e321.g3_.z, _e324.g3_.z, _e327.g3_.y, _e330.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e342.g4_.y) * vec4<f32>(_e346.g3_.z, _e349.g3_.z, _e352.g3_.x, _e355.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e367.g4_.z) * vec4<f32>(_e371.g3_.y, _e374.g3_.x, _e377.g3_.y, _e380.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e392.g4_.w) * vec4<f32>(_e396.g2_.x, _e399.g2_.y, _e402.g2_.z, _e405.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e417.g1_ * vec4(_e419.g0_.y))), (((((vec3(_e425.g0_.y) * _e429.g2_) + ((vec3(_e432.g4_.x) * vec3<f32>(_e436.g4_.z, _e439.g4_.z, _e442.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e453.g4_.y) * vec3<f32>(_e457.g4_.z, _e460.g4_.z, _e463.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e474.g4_.z) * vec3<f32>(_e478.g4_.y, _e481.g4_.x, _e484.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + (_e495.g2_ * vec3(_e497.g0_.y))), ((((((vec3(_e503.g0_.y) * _e507.g3_) + ((vec3(_e510.g4_.x) * vec3(_e514.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e525.g4_.y) * vec3(_e529.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e540.g4_.z) * vec3(_e544.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e555.g4_.w) * vec3<f32>(_e559.g4_.x, _e562.g4_.y, _e565.g4_.z))) + (_e571.g3_ * vec3(_e573.g0_.y))), ((vec4(_e579.g0_.y) * _e583.g4_) + (_e586.g4_ * vec4(_e588.g0_.y))));
}

fn multi_vector_multi_vector_meet(self_3962: MultiVector, other_3580: MultiVector) -> MultiVector {
    var self_3963: MultiVector;
    var other_3581: MultiVector;

    self_3963 = self_3962;
    other_3581 = other_3580;
    let _e4: MultiVector = self_3963;
    let _e8: MultiVector = other_3581;
    let _e11: MultiVector = self_3963;
    let _e15: MultiVector = other_3581;
    let _e25: MultiVector = self_3963;
    let _e29: MultiVector = other_3581;
    let _e39: MultiVector = self_3963;
    let _e43: MultiVector = other_3581;
    let _e53: MultiVector = self_3963;
    let _e57: MultiVector = other_3581;
    let _e67: MultiVector = self_3963;
    let _e71: MultiVector = other_3581;
    let _e81: MultiVector = self_3963;
    let _e85: MultiVector = other_3581;
    let _e95: MultiVector = self_3963;
    let _e99: MultiVector = other_3581;
    let _e109: MultiVector = self_3963;
    let _e113: MultiVector = other_3581;
    let _e123: MultiVector = self_3963;
    let _e127: MultiVector = other_3581;
    let _e137: MultiVector = self_3963;
    let _e141: MultiVector = other_3581;
    let _e151: MultiVector = self_3963;
    let _e155: MultiVector = other_3581;
    let _e165: MultiVector = self_3963;
    let _e169: MultiVector = other_3581;
    let _e179: MultiVector = self_3963;
    let _e183: MultiVector = other_3581;
    let _e193: MultiVector = self_3963;
    let _e197: MultiVector = other_3581;
    let _e207: MultiVector = self_3963;
    let _e211: MultiVector = other_3581;
    let _e220: MultiVector = self_3963;
    let _e224: MultiVector = other_3581;
    let _e227: MultiVector = self_3963;
    let _e231: MultiVector = other_3581;
    let _e242: MultiVector = self_3963;
    let _e246: MultiVector = other_3581;
    let _e257: MultiVector = self_3963;
    let _e261: MultiVector = other_3581;
    let _e272: MultiVector = self_3963;
    let _e276: MultiVector = other_3581;
    let _e287: MultiVector = self_3963;
    let _e291: MultiVector = other_3581;
    let _e302: MultiVector = self_3963;
    let _e306: MultiVector = other_3581;
    let _e317: MultiVector = self_3963;
    let _e321: MultiVector = other_3581;
    let _e324: MultiVector = other_3581;
    let _e327: MultiVector = other_3581;
    let _e330: MultiVector = other_3581;
    let _e342: MultiVector = self_3963;
    let _e346: MultiVector = other_3581;
    let _e349: MultiVector = other_3581;
    let _e352: MultiVector = other_3581;
    let _e355: MultiVector = other_3581;
    let _e367: MultiVector = self_3963;
    let _e371: MultiVector = other_3581;
    let _e374: MultiVector = other_3581;
    let _e377: MultiVector = other_3581;
    let _e380: MultiVector = other_3581;
    let _e392: MultiVector = self_3963;
    let _e396: MultiVector = other_3581;
    let _e399: MultiVector = other_3581;
    let _e402: MultiVector = other_3581;
    let _e405: MultiVector = other_3581;
    let _e417: MultiVector = self_3963;
    let _e419: MultiVector = other_3581;
    let _e425: MultiVector = self_3963;
    let _e429: MultiVector = other_3581;
    let _e432: MultiVector = self_3963;
    let _e436: MultiVector = other_3581;
    let _e439: MultiVector = other_3581;
    let _e442: MultiVector = other_3581;
    let _e453: MultiVector = self_3963;
    let _e457: MultiVector = other_3581;
    let _e460: MultiVector = other_3581;
    let _e463: MultiVector = other_3581;
    let _e474: MultiVector = self_3963;
    let _e478: MultiVector = other_3581;
    let _e481: MultiVector = other_3581;
    let _e484: MultiVector = other_3581;
    let _e495: MultiVector = self_3963;
    let _e497: MultiVector = other_3581;
    let _e503: MultiVector = self_3963;
    let _e507: MultiVector = other_3581;
    let _e510: MultiVector = self_3963;
    let _e514: MultiVector = other_3581;
    let _e525: MultiVector = self_3963;
    let _e529: MultiVector = other_3581;
    let _e540: MultiVector = self_3963;
    let _e544: MultiVector = other_3581;
    let _e555: MultiVector = self_3963;
    let _e559: MultiVector = other_3581;
    let _e562: MultiVector = other_3581;
    let _e565: MultiVector = other_3581;
    let _e571: MultiVector = self_3963;
    let _e573: MultiVector = other_3581;
    let _e579: MultiVector = self_3963;
    let _e583: MultiVector = other_3581;
    let _e586: MultiVector = self_3963;
    let _e588: MultiVector = other_3581;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e207.g0_.x) * _e211.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4(_e220.g0_.y) * _e224.g1_) + ((vec4(_e227.g2_.x) * _e231.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e242.g2_.y) * _e246.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e257.g2_.z) * _e261.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e272.g3_.x) * _e276.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e287.g3_.y) * _e291.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e302.g3_.z) * _e306.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e317.g4_.x) * vec4<f32>(_e321.g3_.z, _e324.g3_.z, _e327.g3_.y, _e330.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))) + ((vec4(_e342.g4_.y) * vec4<f32>(_e346.g3_.z, _e349.g3_.z, _e352.g3_.x, _e355.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e367.g4_.z) * vec4<f32>(_e371.g3_.y, _e374.g3_.x, _e377.g3_.y, _e380.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e392.g4_.w) * vec4<f32>(_e396.g2_.x, _e399.g2_.y, _e402.g2_.z, _e405.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e417.g1_ * vec4(_e419.g0_.y))), (((((vec3(_e425.g0_.y) * _e429.g2_) + ((vec3(_e432.g4_.x) * vec3<f32>(_e436.g4_.z, _e439.g4_.z, _e442.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e453.g4_.y) * vec3<f32>(_e457.g4_.z, _e460.g4_.z, _e463.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e474.g4_.z) * vec3<f32>(_e478.g4_.y, _e481.g4_.x, _e484.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + (_e495.g2_ * vec3(_e497.g0_.y))), ((((((vec3(_e503.g0_.y) * _e507.g3_) + ((vec3(_e510.g4_.x) * vec3(_e514.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e525.g4_.y) * vec3(_e529.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e540.g4_.z) * vec3(_e544.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e555.g4_.w) * vec3<f32>(_e559.g4_.x, _e562.g4_.y, _e565.g4_.z))) + (_e571.g3_ * vec3(_e573.g0_.y))), ((vec4(_e579.g0_.y) * _e583.g4_) + (_e586.g4_ * vec4(_e588.g0_.y))));
}

fn multi_vector_multi_vector_outer_product(self_3964: MultiVector, other_3582: MultiVector) -> MultiVector {
    var self_3965: MultiVector;
    var other_3583: MultiVector;

    self_3965 = self_3964;
    other_3583 = other_3582;
    let _e4: MultiVector = self_3965;
    let _e8: MultiVector = other_3583;
    let _e11: MultiVector = self_3965;
    let _e15: MultiVector = other_3583;
    let _e25: MultiVector = self_3965;
    let _e29: MultiVector = other_3583;
    let _e39: MultiVector = self_3965;
    let _e43: MultiVector = other_3583;
    let _e53: MultiVector = self_3965;
    let _e57: MultiVector = other_3583;
    let _e67: MultiVector = self_3965;
    let _e71: MultiVector = other_3583;
    let _e81: MultiVector = self_3965;
    let _e85: MultiVector = other_3583;
    let _e95: MultiVector = self_3965;
    let _e99: MultiVector = other_3583;
    let _e109: MultiVector = self_3965;
    let _e113: MultiVector = other_3583;
    let _e123: MultiVector = self_3965;
    let _e127: MultiVector = other_3583;
    let _e137: MultiVector = self_3965;
    let _e141: MultiVector = other_3583;
    let _e151: MultiVector = self_3965;
    let _e155: MultiVector = other_3583;
    let _e165: MultiVector = self_3965;
    let _e169: MultiVector = other_3583;
    let _e179: MultiVector = self_3965;
    let _e183: MultiVector = other_3583;
    let _e193: MultiVector = self_3965;
    let _e197: MultiVector = other_3583;
    let _e207: MultiVector = self_3965;
    let _e209: MultiVector = other_3583;
    let _e219: MultiVector = self_3965;
    let _e223: MultiVector = other_3583;
    let _e226: MultiVector = self_3965;
    let _e228: MultiVector = other_3583;
    let _e234: MultiVector = self_3965;
    let _e238: MultiVector = other_3583;
    let _e241: MultiVector = self_3965;
    let _e245: MultiVector = other_3583;
    let _e248: MultiVector = other_3583;
    let _e251: MultiVector = other_3583;
    let _e257: MultiVector = self_3965;
    let _e261: MultiVector = other_3583;
    let _e272: MultiVector = self_3965;
    let _e276: MultiVector = other_3583;
    let _e287: MultiVector = self_3965;
    let _e291: MultiVector = other_3583;
    let _e302: MultiVector = self_3965;
    let _e305: MultiVector = self_3965;
    let _e308: MultiVector = self_3965;
    let _e312: MultiVector = other_3583;
    let _e321: MultiVector = self_3965;
    let _e325: MultiVector = other_3583;
    let _e328: MultiVector = self_3965;
    let _e332: MultiVector = other_3583;
    let _e335: MultiVector = other_3583;
    let _e338: MultiVector = other_3583;
    let _e349: MultiVector = self_3965;
    let _e353: MultiVector = other_3583;
    let _e356: MultiVector = other_3583;
    let _e359: MultiVector = other_3583;
    let _e370: MultiVector = self_3965;
    let _e374: MultiVector = other_3583;
    let _e385: MultiVector = self_3965;
    let _e389: MultiVector = other_3583;
    let _e400: MultiVector = self_3965;
    let _e404: MultiVector = other_3583;
    let _e415: MultiVector = self_3965;
    let _e419: MultiVector = other_3583;
    let _e422: MultiVector = other_3583;
    let _e425: MultiVector = other_3583;
    let _e436: MultiVector = self_3965;
    let _e440: MultiVector = other_3583;
    let _e443: MultiVector = self_3965;
    let _e447: MultiVector = other_3583;
    let _e450: MultiVector = other_3583;
    let _e453: MultiVector = other_3583;
    let _e456: MultiVector = other_3583;
    let _e468: MultiVector = self_3965;
    let _e472: MultiVector = other_3583;
    let _e475: MultiVector = other_3583;
    let _e478: MultiVector = other_3583;
    let _e481: MultiVector = other_3583;
    let _e493: MultiVector = self_3965;
    let _e497: MultiVector = other_3583;
    let _e500: MultiVector = other_3583;
    let _e503: MultiVector = other_3583;
    let _e506: MultiVector = other_3583;
    let _e518: MultiVector = self_3965;
    let _e522: MultiVector = other_3583;
    let _e533: MultiVector = self_3965;
    let _e537: MultiVector = other_3583;
    let _e548: MultiVector = self_3965;
    let _e552: MultiVector = other_3583;
    let _e563: MultiVector = self_3965;
    let _e567: MultiVector = other_3583;
    let _e578: MultiVector = self_3965;
    let _e582: MultiVector = other_3583;
    let _e593: MultiVector = self_3965;
    let _e597: MultiVector = other_3583;
    let _e608: MultiVector = self_3965;
    let _e612: MultiVector = other_3583;
    let _e624: MultiVector = self_3965;
    let _e628: MultiVector = other_3583;
    let _e640: MultiVector = self_3965;
    let _e644: MultiVector = other_3583;
    let _e656: MultiVector = self_3965;
    let _e660: MultiVector = other_3583;
    let _e672: MultiVector = self_3965;
    let _e676: MultiVector = other_3583;
    let _e679: MultiVector = other_3583;
    let _e682: MultiVector = other_3583;
    let _e685: MultiVector = other_3583;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.x) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((_e207.g0_ * vec2(_e209.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e219.g0_.x) * _e223.g1_) + (_e226.g1_ * vec4(_e228.g0_.x))), ((((((vec3(_e234.g0_.x) * _e238.g2_) + (vec3(_e241.g1_.w) * vec3<f32>(_e245.g1_.x, _e248.g1_.y, _e251.g1_.z))) + ((vec3(_e257.g2_.x) * vec3(_e261.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e272.g2_.y) * vec3(_e276.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e287.g2_.z) * vec3(_e291.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g1_.w)) * vec3(-1.0))), (((((((vec3(_e321.g0_.x) * _e325.g3_) + ((vec3(_e328.g1_.y) * vec3<f32>(_e332.g1_.z, _e335.g1_.z, _e338.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e349.g1_.z) * vec3<f32>(_e353.g1_.y, _e356.g1_.x, _e359.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e370.g3_.x) * vec3(_e374.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e385.g3_.y) * vec3(_e389.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e400.g3_.z) * vec3(_e404.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e415.g1_.x) * vec3<f32>(_e419.g1_.x, _e422.g1_.z, _e425.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((((((((vec4(_e436.g0_.x) * _e440.g4_) + ((vec4(_e443.g1_.y) * vec4<f32>(_e447.g2_.z, _e450.g2_.z, _e453.g2_.x, _e456.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e468.g1_.z) * vec4<f32>(_e472.g2_.y, _e475.g2_.x, _e478.g2_.y, _e481.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e493.g1_.w) * vec4<f32>(_e497.g3_.x, _e500.g3_.y, _e503.g3_.z, _e506.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e518.g2_.x) * _e522.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e533.g2_.y) * _e537.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e548.g2_.z) * _e552.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e563.g3_.x) * _e567.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e578.g3_.y) * _e582.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e593.g3_.z) * _e597.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e608.g4_.x) * vec4(_e612.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e624.g4_.y) * vec4(_e628.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e640.g4_.z) * vec4(_e644.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e656.g4_.w) * vec4(_e660.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e672.g1_.x) * vec4<f32>(_e676.g2_.x, _e679.g2_.z, _e682.g2_.y, _e685.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_multi_vector_wedge(self_3966: MultiVector, other_3584: MultiVector) -> MultiVector {
    var self_3967: MultiVector;
    var other_3585: MultiVector;

    self_3967 = self_3966;
    other_3585 = other_3584;
    let _e4: MultiVector = self_3967;
    let _e8: MultiVector = other_3585;
    let _e11: MultiVector = self_3967;
    let _e15: MultiVector = other_3585;
    let _e25: MultiVector = self_3967;
    let _e29: MultiVector = other_3585;
    let _e39: MultiVector = self_3967;
    let _e43: MultiVector = other_3585;
    let _e53: MultiVector = self_3967;
    let _e57: MultiVector = other_3585;
    let _e67: MultiVector = self_3967;
    let _e71: MultiVector = other_3585;
    let _e81: MultiVector = self_3967;
    let _e85: MultiVector = other_3585;
    let _e95: MultiVector = self_3967;
    let _e99: MultiVector = other_3585;
    let _e109: MultiVector = self_3967;
    let _e113: MultiVector = other_3585;
    let _e123: MultiVector = self_3967;
    let _e127: MultiVector = other_3585;
    let _e137: MultiVector = self_3967;
    let _e141: MultiVector = other_3585;
    let _e151: MultiVector = self_3967;
    let _e155: MultiVector = other_3585;
    let _e165: MultiVector = self_3967;
    let _e169: MultiVector = other_3585;
    let _e179: MultiVector = self_3967;
    let _e183: MultiVector = other_3585;
    let _e193: MultiVector = self_3967;
    let _e197: MultiVector = other_3585;
    let _e207: MultiVector = self_3967;
    let _e209: MultiVector = other_3585;
    let _e219: MultiVector = self_3967;
    let _e223: MultiVector = other_3585;
    let _e226: MultiVector = self_3967;
    let _e228: MultiVector = other_3585;
    let _e234: MultiVector = self_3967;
    let _e238: MultiVector = other_3585;
    let _e241: MultiVector = self_3967;
    let _e245: MultiVector = other_3585;
    let _e248: MultiVector = other_3585;
    let _e251: MultiVector = other_3585;
    let _e257: MultiVector = self_3967;
    let _e261: MultiVector = other_3585;
    let _e272: MultiVector = self_3967;
    let _e276: MultiVector = other_3585;
    let _e287: MultiVector = self_3967;
    let _e291: MultiVector = other_3585;
    let _e302: MultiVector = self_3967;
    let _e305: MultiVector = self_3967;
    let _e308: MultiVector = self_3967;
    let _e312: MultiVector = other_3585;
    let _e321: MultiVector = self_3967;
    let _e325: MultiVector = other_3585;
    let _e328: MultiVector = self_3967;
    let _e332: MultiVector = other_3585;
    let _e335: MultiVector = other_3585;
    let _e338: MultiVector = other_3585;
    let _e349: MultiVector = self_3967;
    let _e353: MultiVector = other_3585;
    let _e356: MultiVector = other_3585;
    let _e359: MultiVector = other_3585;
    let _e370: MultiVector = self_3967;
    let _e374: MultiVector = other_3585;
    let _e385: MultiVector = self_3967;
    let _e389: MultiVector = other_3585;
    let _e400: MultiVector = self_3967;
    let _e404: MultiVector = other_3585;
    let _e415: MultiVector = self_3967;
    let _e419: MultiVector = other_3585;
    let _e422: MultiVector = other_3585;
    let _e425: MultiVector = other_3585;
    let _e436: MultiVector = self_3967;
    let _e440: MultiVector = other_3585;
    let _e443: MultiVector = self_3967;
    let _e447: MultiVector = other_3585;
    let _e450: MultiVector = other_3585;
    let _e453: MultiVector = other_3585;
    let _e456: MultiVector = other_3585;
    let _e468: MultiVector = self_3967;
    let _e472: MultiVector = other_3585;
    let _e475: MultiVector = other_3585;
    let _e478: MultiVector = other_3585;
    let _e481: MultiVector = other_3585;
    let _e493: MultiVector = self_3967;
    let _e497: MultiVector = other_3585;
    let _e500: MultiVector = other_3585;
    let _e503: MultiVector = other_3585;
    let _e506: MultiVector = other_3585;
    let _e518: MultiVector = self_3967;
    let _e522: MultiVector = other_3585;
    let _e533: MultiVector = self_3967;
    let _e537: MultiVector = other_3585;
    let _e548: MultiVector = self_3967;
    let _e552: MultiVector = other_3585;
    let _e563: MultiVector = self_3967;
    let _e567: MultiVector = other_3585;
    let _e578: MultiVector = self_3967;
    let _e582: MultiVector = other_3585;
    let _e593: MultiVector = self_3967;
    let _e597: MultiVector = other_3585;
    let _e608: MultiVector = self_3967;
    let _e612: MultiVector = other_3585;
    let _e624: MultiVector = self_3967;
    let _e628: MultiVector = other_3585;
    let _e640: MultiVector = self_3967;
    let _e644: MultiVector = other_3585;
    let _e656: MultiVector = self_3967;
    let _e660: MultiVector = other_3585;
    let _e672: MultiVector = self_3967;
    let _e676: MultiVector = other_3585;
    let _e679: MultiVector = other_3585;
    let _e682: MultiVector = other_3585;
    let _e685: MultiVector = other_3585;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.x) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((_e207.g0_ * vec2(_e209.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e219.g0_.x) * _e223.g1_) + (_e226.g1_ * vec4(_e228.g0_.x))), ((((((vec3(_e234.g0_.x) * _e238.g2_) + (vec3(_e241.g1_.w) * vec3<f32>(_e245.g1_.x, _e248.g1_.y, _e251.g1_.z))) + ((vec3(_e257.g2_.x) * vec3(_e261.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e272.g2_.y) * vec3(_e276.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e287.g2_.z) * vec3(_e291.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g1_.w)) * vec3(-1.0))), (((((((vec3(_e321.g0_.x) * _e325.g3_) + ((vec3(_e328.g1_.y) * vec3<f32>(_e332.g1_.z, _e335.g1_.z, _e338.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e349.g1_.z) * vec3<f32>(_e353.g1_.y, _e356.g1_.x, _e359.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e370.g3_.x) * vec3(_e374.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e385.g3_.y) * vec3(_e389.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e400.g3_.z) * vec3(_e404.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e415.g1_.x) * vec3<f32>(_e419.g1_.x, _e422.g1_.z, _e425.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((((((((vec4(_e436.g0_.x) * _e440.g4_) + ((vec4(_e443.g1_.y) * vec4<f32>(_e447.g2_.z, _e450.g2_.z, _e453.g2_.x, _e456.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e468.g1_.z) * vec4<f32>(_e472.g2_.y, _e475.g2_.x, _e478.g2_.y, _e481.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e493.g1_.w) * vec4<f32>(_e497.g3_.x, _e500.g3_.y, _e503.g3_.z, _e506.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e518.g2_.x) * _e522.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e533.g2_.y) * _e537.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e548.g2_.z) * _e552.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e563.g3_.x) * _e567.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e578.g3_.y) * _e582.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e593.g3_.z) * _e597.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e608.g4_.x) * vec4(_e612.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e624.g4_.y) * vec4(_e628.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e640.g4_.z) * vec4(_e644.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e656.g4_.w) * vec4(_e660.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e672.g1_.x) * vec4<f32>(_e676.g2_.x, _e679.g2_.z, _e682.g2_.y, _e685.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_multi_vector_join(self_3968: MultiVector, other_3586: MultiVector) -> MultiVector {
    var self_3969: MultiVector;
    var other_3587: MultiVector;

    self_3969 = self_3968;
    other_3587 = other_3586;
    let _e4: MultiVector = self_3969;
    let _e8: MultiVector = other_3587;
    let _e11: MultiVector = self_3969;
    let _e15: MultiVector = other_3587;
    let _e25: MultiVector = self_3969;
    let _e29: MultiVector = other_3587;
    let _e39: MultiVector = self_3969;
    let _e43: MultiVector = other_3587;
    let _e53: MultiVector = self_3969;
    let _e57: MultiVector = other_3587;
    let _e67: MultiVector = self_3969;
    let _e71: MultiVector = other_3587;
    let _e81: MultiVector = self_3969;
    let _e85: MultiVector = other_3587;
    let _e95: MultiVector = self_3969;
    let _e99: MultiVector = other_3587;
    let _e109: MultiVector = self_3969;
    let _e113: MultiVector = other_3587;
    let _e123: MultiVector = self_3969;
    let _e127: MultiVector = other_3587;
    let _e137: MultiVector = self_3969;
    let _e141: MultiVector = other_3587;
    let _e151: MultiVector = self_3969;
    let _e155: MultiVector = other_3587;
    let _e165: MultiVector = self_3969;
    let _e169: MultiVector = other_3587;
    let _e179: MultiVector = self_3969;
    let _e183: MultiVector = other_3587;
    let _e193: MultiVector = self_3969;
    let _e197: MultiVector = other_3587;
    let _e207: MultiVector = self_3969;
    let _e209: MultiVector = other_3587;
    let _e219: MultiVector = self_3969;
    let _e223: MultiVector = other_3587;
    let _e226: MultiVector = self_3969;
    let _e228: MultiVector = other_3587;
    let _e234: MultiVector = self_3969;
    let _e238: MultiVector = other_3587;
    let _e241: MultiVector = self_3969;
    let _e245: MultiVector = other_3587;
    let _e248: MultiVector = other_3587;
    let _e251: MultiVector = other_3587;
    let _e257: MultiVector = self_3969;
    let _e261: MultiVector = other_3587;
    let _e272: MultiVector = self_3969;
    let _e276: MultiVector = other_3587;
    let _e287: MultiVector = self_3969;
    let _e291: MultiVector = other_3587;
    let _e302: MultiVector = self_3969;
    let _e305: MultiVector = self_3969;
    let _e308: MultiVector = self_3969;
    let _e312: MultiVector = other_3587;
    let _e321: MultiVector = self_3969;
    let _e325: MultiVector = other_3587;
    let _e328: MultiVector = self_3969;
    let _e332: MultiVector = other_3587;
    let _e335: MultiVector = other_3587;
    let _e338: MultiVector = other_3587;
    let _e349: MultiVector = self_3969;
    let _e353: MultiVector = other_3587;
    let _e356: MultiVector = other_3587;
    let _e359: MultiVector = other_3587;
    let _e370: MultiVector = self_3969;
    let _e374: MultiVector = other_3587;
    let _e385: MultiVector = self_3969;
    let _e389: MultiVector = other_3587;
    let _e400: MultiVector = self_3969;
    let _e404: MultiVector = other_3587;
    let _e415: MultiVector = self_3969;
    let _e419: MultiVector = other_3587;
    let _e422: MultiVector = other_3587;
    let _e425: MultiVector = other_3587;
    let _e436: MultiVector = self_3969;
    let _e440: MultiVector = other_3587;
    let _e443: MultiVector = self_3969;
    let _e447: MultiVector = other_3587;
    let _e450: MultiVector = other_3587;
    let _e453: MultiVector = other_3587;
    let _e456: MultiVector = other_3587;
    let _e468: MultiVector = self_3969;
    let _e472: MultiVector = other_3587;
    let _e475: MultiVector = other_3587;
    let _e478: MultiVector = other_3587;
    let _e481: MultiVector = other_3587;
    let _e493: MultiVector = self_3969;
    let _e497: MultiVector = other_3587;
    let _e500: MultiVector = other_3587;
    let _e503: MultiVector = other_3587;
    let _e506: MultiVector = other_3587;
    let _e518: MultiVector = self_3969;
    let _e522: MultiVector = other_3587;
    let _e533: MultiVector = self_3969;
    let _e537: MultiVector = other_3587;
    let _e548: MultiVector = self_3969;
    let _e552: MultiVector = other_3587;
    let _e563: MultiVector = self_3969;
    let _e567: MultiVector = other_3587;
    let _e578: MultiVector = self_3969;
    let _e582: MultiVector = other_3587;
    let _e593: MultiVector = self_3969;
    let _e597: MultiVector = other_3587;
    let _e608: MultiVector = self_3969;
    let _e612: MultiVector = other_3587;
    let _e624: MultiVector = self_3969;
    let _e628: MultiVector = other_3587;
    let _e640: MultiVector = self_3969;
    let _e644: MultiVector = other_3587;
    let _e656: MultiVector = self_3969;
    let _e660: MultiVector = other_3587;
    let _e672: MultiVector = self_3969;
    let _e676: MultiVector = other_3587;
    let _e679: MultiVector = other_3587;
    let _e682: MultiVector = other_3587;
    let _e685: MultiVector = other_3587;
    return MultiVector(((((((((((((((((vec2(_e4.g0_.x) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e53.g1_.w) * vec2(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e67.g2_.x) * vec2(_e71.g3_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e81.g2_.y) * vec2(_e85.g3_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e95.g2_.z) * vec2(_e99.g3_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e109.g3_.x) * vec2(_e113.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e123.g3_.y) * vec2(_e127.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e137.g3_.z) * vec2(_e141.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e151.g4_.x) * vec2(_e155.g1_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e165.g4_.y) * vec2(_e169.g1_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e179.g4_.z) * vec2(_e183.g1_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e193.g4_.w) * vec2(_e197.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((_e207.g0_ * vec2(_e209.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4(_e219.g0_.x) * _e223.g1_) + (_e226.g1_ * vec4(_e228.g0_.x))), ((((((vec3(_e234.g0_.x) * _e238.g2_) + (vec3(_e241.g1_.w) * vec3<f32>(_e245.g1_.x, _e248.g1_.y, _e251.g1_.z))) + ((vec3(_e257.g2_.x) * vec3(_e261.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e272.g2_.y) * vec3(_e276.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e287.g2_.z) * vec3(_e291.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e302.g1_.x, _e305.g1_.y, _e308.g1_.z) * vec3(_e312.g1_.w)) * vec3(-1.0))), (((((((vec3(_e321.g0_.x) * _e325.g3_) + ((vec3(_e328.g1_.y) * vec3<f32>(_e332.g1_.z, _e335.g1_.z, _e338.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e349.g1_.z) * vec3<f32>(_e353.g1_.y, _e356.g1_.x, _e359.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e370.g3_.x) * vec3(_e374.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e385.g3_.y) * vec3(_e389.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e400.g3_.z) * vec3(_e404.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e415.g1_.x) * vec3<f32>(_e419.g1_.x, _e422.g1_.z, _e425.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))), (((((((((((((((vec4(_e436.g0_.x) * _e440.g4_) + ((vec4(_e443.g1_.y) * vec4<f32>(_e447.g2_.z, _e450.g2_.z, _e453.g2_.x, _e456.g3_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e468.g1_.z) * vec4<f32>(_e472.g2_.y, _e475.g2_.x, _e478.g2_.y, _e481.g3_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e493.g1_.w) * vec4<f32>(_e497.g3_.x, _e500.g3_.y, _e503.g3_.z, _e506.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e518.g2_.x) * _e522.g1_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e533.g2_.y) * _e537.g1_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e548.g2_.z) * _e552.g1_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e563.g3_.x) * _e567.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e578.g3_.y) * _e582.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e593.g3_.z) * _e597.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e608.g4_.x) * vec4(_e612.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e624.g4_.y) * vec4(_e628.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e640.g4_.z) * vec4(_e644.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e656.g4_.w) * vec4(_e660.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e672.g1_.x) * vec4<f32>(_e676.g2_.x, _e679.g2_.z, _e682.g2_.y, _e685.g3_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))));
}

fn multi_vector_multi_vector_inner_product(self_3970: MultiVector, other_3588: MultiVector) -> MultiVector {
    var self_3971: MultiVector;
    var other_3589: MultiVector;

    self_3971 = self_3970;
    other_3589 = other_3588;
    let _e4: MultiVector = self_3971;
    let _e8: MultiVector = other_3589;
    let _e11: MultiVector = self_3971;
    let _e15: MultiVector = other_3589;
    let _e25: MultiVector = self_3971;
    let _e29: MultiVector = other_3589;
    let _e39: MultiVector = self_3971;
    let _e43: MultiVector = other_3589;
    let _e53: MultiVector = self_3971;
    let _e57: MultiVector = other_3589;
    let _e67: MultiVector = self_3971;
    let _e71: MultiVector = other_3589;
    let _e81: MultiVector = self_3971;
    let _e85: MultiVector = other_3589;
    let _e95: MultiVector = self_3971;
    let _e99: MultiVector = other_3589;
    let _e109: MultiVector = self_3971;
    let _e111: MultiVector = other_3589;
    let _e121: MultiVector = self_3971;
    let _e125: MultiVector = other_3589;
    let _e128: MultiVector = self_3971;
    let _e132: MultiVector = other_3589;
    let _e135: MultiVector = other_3589;
    let _e138: MultiVector = other_3589;
    let _e141: MultiVector = other_3589;
    let _e153: MultiVector = self_3971;
    let _e157: MultiVector = other_3589;
    let _e160: MultiVector = other_3589;
    let _e163: MultiVector = other_3589;
    let _e166: MultiVector = other_3589;
    let _e178: MultiVector = self_3971;
    let _e182: MultiVector = other_3589;
    let _e185: MultiVector = other_3589;
    let _e188: MultiVector = other_3589;
    let _e191: MultiVector = other_3589;
    let _e203: MultiVector = self_3971;
    let _e207: MultiVector = other_3589;
    let _e219: MultiVector = self_3971;
    let _e223: MultiVector = other_3589;
    let _e235: MultiVector = self_3971;
    let _e239: MultiVector = other_3589;
    let _e251: MultiVector = self_3971;
    let _e255: MultiVector = other_3589;
    let _e267: MultiVector = self_3971;
    let _e271: MultiVector = other_3589;
    let _e274: MultiVector = other_3589;
    let _e277: MultiVector = other_3589;
    let _e280: MultiVector = other_3589;
    let _e292: MultiVector = self_3971;
    let _e296: MultiVector = other_3589;
    let _e299: MultiVector = other_3589;
    let _e302: MultiVector = other_3589;
    let _e305: MultiVector = other_3589;
    let _e317: MultiVector = self_3971;
    let _e321: MultiVector = other_3589;
    let _e324: MultiVector = other_3589;
    let _e327: MultiVector = other_3589;
    let _e330: MultiVector = other_3589;
    let _e342: MultiVector = self_3971;
    let _e346: MultiVector = other_3589;
    let _e358: MultiVector = self_3971;
    let _e362: MultiVector = other_3589;
    let _e374: MultiVector = self_3971;
    let _e378: MultiVector = other_3589;
    let _e390: MultiVector = self_3971;
    let _e394: MultiVector = other_3589;
    let _e397: MultiVector = other_3589;
    let _e400: MultiVector = other_3589;
    let _e403: MultiVector = other_3589;
    let _e409: MultiVector = self_3971;
    let _e412: MultiVector = self_3971;
    let _e415: MultiVector = self_3971;
    let _e418: MultiVector = self_3971;
    let _e422: MultiVector = other_3589;
    let _e433: MultiVector = self_3971;
    let _e437: MultiVector = other_3589;
    let _e440: MultiVector = self_3971;
    let _e444: MultiVector = other_3589;
    let _e448: MultiVector = self_3971;
    let _e452: MultiVector = other_3589;
    let _e455: MultiVector = other_3589;
    let _e458: MultiVector = other_3589;
    let _e469: MultiVector = self_3971;
    let _e473: MultiVector = other_3589;
    let _e476: MultiVector = other_3589;
    let _e479: MultiVector = other_3589;
    let _e490: MultiVector = self_3971;
    let _e494: MultiVector = other_3589;
    let _e505: MultiVector = self_3971;
    let _e509: MultiVector = other_3589;
    let _e520: MultiVector = self_3971;
    let _e524: MultiVector = other_3589;
    let _e535: MultiVector = self_3971;
    let _e539: MultiVector = other_3589;
    let _e550: MultiVector = self_3971;
    let _e554: MultiVector = other_3589;
    let _e565: MultiVector = self_3971;
    let _e569: MultiVector = other_3589;
    let _e580: MultiVector = self_3971;
    let _e584: MultiVector = other_3589;
    let _e587: MultiVector = other_3589;
    let _e590: MultiVector = other_3589;
    let _e601: MultiVector = self_3971;
    let _e605: MultiVector = other_3589;
    let _e608: MultiVector = other_3589;
    let _e611: MultiVector = other_3589;
    let _e622: MultiVector = self_3971;
    let _e626: MultiVector = other_3589;
    let _e629: MultiVector = other_3589;
    let _e632: MultiVector = other_3589;
    let _e643: MultiVector = self_3971;
    let _e647: MultiVector = other_3589;
    let _e650: MultiVector = other_3589;
    let _e653: MultiVector = other_3589;
    let _e664: MultiVector = self_3971;
    let _e668: MultiVector = other_3589;
    let _e671: MultiVector = self_3971;
    let _e675: MultiVector = other_3589;
    let _e686: MultiVector = self_3971;
    let _e690: MultiVector = other_3589;
    let _e701: MultiVector = self_3971;
    let _e705: MultiVector = other_3589;
    let _e716: MultiVector = self_3971;
    let _e720: MultiVector = other_3589;
    let _e723: MultiVector = other_3589;
    let _e726: MultiVector = other_3589;
    let _e732: MultiVector = self_3971;
    let _e735: MultiVector = self_3971;
    let _e738: MultiVector = self_3971;
    let _e742: MultiVector = other_3589;
    let _e751: MultiVector = self_3971;
    let _e755: MultiVector = other_3589;
    let _e758: MultiVector = self_3971;
    let _e762: MultiVector = other_3589;
    let _e774: MultiVector = self_3971;
    let _e778: MultiVector = other_3589;
    let _e790: MultiVector = self_3971;
    let _e794: MultiVector = other_3589;
    let _e806: MultiVector = self_3971;
    let _e810: MultiVector = other_3589;
    let _e822: MultiVector = self_3971;
    let _e826: MultiVector = other_3589;
    let _e838: MultiVector = self_3971;
    let _e842: MultiVector = other_3589;
    let _e854: MultiVector = self_3971;
    let _e858: MultiVector = other_3589;
    let _e870: MultiVector = self_3971;
    let _e873: MultiVector = self_3971;
    let _e876: MultiVector = self_3971;
    let _e879: MultiVector = self_3971;
    let _e883: MultiVector = other_3589;
    return MultiVector((((((((((vec2(_e4.g0_.x) * _e8.g0_) + ((vec2(_e11.g1_.x) * vec2(_e15.g1_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.y) * vec2(_e29.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g1_.z) * vec2(_e43.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e53.g3_.x) * vec2(_e57.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g3_.y) * vec2(_e71.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g3_.z) * vec2(_e85.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e95.g4_.w) * vec2(_e99.g4_.w)) * vec2<f32>(-1.0, 0.0))) + ((_e109.g0_ * vec2(_e111.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((((((((((vec4(_e121.g0_.x) * _e125.g1_) + ((vec4(_e128.g1_.x) * vec4<f32>(_e132.g0_.x, _e135.g3_.z, _e138.g3_.y, _e141.g2_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e153.g1_.y) * vec4<f32>(_e157.g3_.z, _e160.g0_.x, _e163.g3_.x, _e166.g2_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e178.g1_.z) * vec4<f32>(_e182.g3_.y, _e185.g3_.x, _e188.g0_.x, _e191.g2_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e203.g1_.w) * vec4(_e207.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e219.g2_.x) * vec4(_e223.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e235.g2_.y) * vec4(_e239.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e251.g2_.z) * vec4(_e255.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e267.g3_.x) * vec4<f32>(_e271.g4_.w, _e274.g1_.z, _e277.g1_.y, _e280.g4_.x)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e292.g3_.y) * vec4<f32>(_e296.g1_.z, _e299.g4_.w, _e302.g1_.x, _e305.g4_.y)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e317.g3_.z) * vec4<f32>(_e321.g1_.y, _e324.g1_.x, _e327.g4_.w, _e330.g4_.z)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e342.g4_.x) * vec4(_e346.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e358.g4_.y) * vec4(_e362.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e374.g4_.z) * vec4(_e378.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + (vec4(_e390.g4_.w) * vec4<f32>(_e394.g3_.x, _e397.g3_.y, _e400.g3_.z, _e403.g0_.y))) + ((vec4<f32>(_e409.g0_.x, _e412.g0_.x, _e415.g0_.x, _e418.g0_.y) * _e422.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), ((((((((((((((vec3(_e433.g0_.x) * _e437.g2_) + (vec3(_e440.g0_.y) * _e444.g3_)) + ((vec3(_e448.g1_.y) * vec3<f32>(_e452.g4_.z, _e455.g4_.z, _e458.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e469.g1_.z) * vec3<f32>(_e473.g4_.y, _e476.g4_.x, _e479.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e490.g2_.x) * vec3(_e494.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e505.g2_.y) * vec3(_e509.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e520.g2_.z) * vec3(_e524.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e535.g3_.x) * vec3(_e539.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e550.g3_.y) * vec3(_e554.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e565.g3_.z) * vec3(_e569.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e580.g4_.x) * vec3<f32>(_e584.g1_.z, _e587.g1_.z, _e590.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e601.g4_.y) * vec3<f32>(_e605.g1_.z, _e608.g1_.z, _e611.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e622.g4_.z) * vec3<f32>(_e626.g1_.y, _e629.g1_.x, _e632.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e643.g1_.x) * vec3<f32>(_e647.g4_.x, _e650.g4_.z, _e653.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((((((vec3(_e664.g0_.x) * _e668.g3_) + ((vec3(_e671.g3_.x) * vec3(_e675.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e686.g3_.y) * vec3(_e690.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e701.g3_.z) * vec3(_e705.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3(_e716.g4_.w) * vec3<f32>(_e720.g1_.x, _e723.g1_.y, _e726.g1_.z))) + ((vec3<f32>(_e732.g1_.x, _e735.g1_.y, _e738.g1_.z) * vec3(_e742.g4_.w)) * vec3(-1.0))), (((((((((vec4(_e751.g0_.x) * _e755.g4_) + ((vec4(_e758.g1_.x) * vec4(_e762.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e774.g1_.y) * vec4(_e778.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e790.g1_.z) * vec4(_e794.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e806.g4_.x) * vec4(_e810.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e822.g4_.y) * vec4(_e826.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e838.g4_.z) * vec4(_e842.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e854.g4_.w) * vec4(_e858.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e870.g0_.y, _e873.g0_.y, _e876.g0_.y, _e879.g0_.x) * _e883.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_multi_vector_inner_anti_product(self_3972: MultiVector, other_3590: MultiVector) -> MultiVector {
    var self_3973: MultiVector;
    var other_3591: MultiVector;

    self_3973 = self_3972;
    other_3591 = other_3590;
    let _e4: MultiVector = self_3973;
    let _e8: MultiVector = other_3591;
    let _e11: MultiVector = self_3973;
    let _e15: MultiVector = other_3591;
    let _e25: MultiVector = self_3973;
    let _e29: MultiVector = other_3591;
    let _e39: MultiVector = self_3973;
    let _e43: MultiVector = other_3591;
    let _e53: MultiVector = self_3973;
    let _e57: MultiVector = other_3591;
    let _e67: MultiVector = self_3973;
    let _e71: MultiVector = other_3591;
    let _e81: MultiVector = self_3973;
    let _e85: MultiVector = other_3591;
    let _e95: MultiVector = self_3973;
    let _e99: MultiVector = other_3591;
    let _e109: MultiVector = self_3973;
    let _e113: MultiVector = other_3591;
    let _e122: MultiVector = self_3973;
    let _e126: MultiVector = other_3591;
    let _e129: MultiVector = self_3973;
    let _e133: MultiVector = other_3591;
    let _e145: MultiVector = self_3973;
    let _e149: MultiVector = other_3591;
    let _e161: MultiVector = self_3973;
    let _e165: MultiVector = other_3591;
    let _e177: MultiVector = self_3973;
    let _e181: MultiVector = other_3591;
    let _e193: MultiVector = self_3973;
    let _e197: MultiVector = other_3591;
    let _e209: MultiVector = self_3973;
    let _e213: MultiVector = other_3591;
    let _e225: MultiVector = self_3973;
    let _e229: MultiVector = other_3591;
    let _e241: MultiVector = self_3973;
    let _e245: MultiVector = other_3591;
    let _e256: MultiVector = self_3973;
    let _e260: MultiVector = other_3591;
    let _e263: MultiVector = self_3973;
    let _e267: MultiVector = other_3591;
    let _e270: MultiVector = other_3591;
    let _e273: MultiVector = other_3591;
    let _e279: MultiVector = self_3973;
    let _e283: MultiVector = other_3591;
    let _e294: MultiVector = self_3973;
    let _e298: MultiVector = other_3591;
    let _e309: MultiVector = self_3973;
    let _e313: MultiVector = other_3591;
    let _e324: MultiVector = self_3973;
    let _e326: MultiVector = other_3591;
    let _e332: MultiVector = self_3973;
    let _e336: MultiVector = other_3591;
    let _e339: MultiVector = self_3973;
    let _e343: MultiVector = other_3591;
    let _e347: MultiVector = self_3973;
    let _e351: MultiVector = other_3591;
    let _e354: MultiVector = other_3591;
    let _e357: MultiVector = other_3591;
    let _e368: MultiVector = self_3973;
    let _e372: MultiVector = other_3591;
    let _e375: MultiVector = other_3591;
    let _e378: MultiVector = other_3591;
    let _e389: MultiVector = self_3973;
    let _e393: MultiVector = other_3591;
    let _e404: MultiVector = self_3973;
    let _e408: MultiVector = other_3591;
    let _e419: MultiVector = self_3973;
    let _e423: MultiVector = other_3591;
    let _e434: MultiVector = self_3973;
    let _e438: MultiVector = other_3591;
    let _e449: MultiVector = self_3973;
    let _e453: MultiVector = other_3591;
    let _e464: MultiVector = self_3973;
    let _e468: MultiVector = other_3591;
    let _e479: MultiVector = self_3973;
    let _e483: MultiVector = other_3591;
    let _e486: MultiVector = other_3591;
    let _e489: MultiVector = other_3591;
    let _e500: MultiVector = self_3973;
    let _e504: MultiVector = other_3591;
    let _e507: MultiVector = other_3591;
    let _e510: MultiVector = other_3591;
    let _e521: MultiVector = self_3973;
    let _e525: MultiVector = other_3591;
    let _e528: MultiVector = other_3591;
    let _e531: MultiVector = other_3591;
    let _e542: MultiVector = self_3973;
    let _e546: MultiVector = other_3591;
    let _e549: MultiVector = other_3591;
    let _e552: MultiVector = other_3591;
    let _e563: MultiVector = self_3973;
    let _e567: MultiVector = other_3591;
    let _e570: MultiVector = self_3973;
    let _e574: MultiVector = other_3591;
    let _e586: MultiVector = self_3973;
    let _e590: MultiVector = other_3591;
    let _e602: MultiVector = self_3973;
    let _e606: MultiVector = other_3591;
    let _e618: MultiVector = self_3973;
    let _e622: MultiVector = other_3591;
    let _e625: MultiVector = other_3591;
    let _e628: MultiVector = other_3591;
    let _e631: MultiVector = other_3591;
    let _e643: MultiVector = self_3973;
    let _e647: MultiVector = other_3591;
    let _e650: MultiVector = other_3591;
    let _e653: MultiVector = other_3591;
    let _e656: MultiVector = other_3591;
    let _e668: MultiVector = self_3973;
    let _e672: MultiVector = other_3591;
    let _e675: MultiVector = other_3591;
    let _e678: MultiVector = other_3591;
    let _e681: MultiVector = other_3591;
    let _e693: MultiVector = self_3973;
    let _e697: MultiVector = other_3591;
    let _e700: MultiVector = other_3591;
    let _e703: MultiVector = other_3591;
    let _e706: MultiVector = other_3591;
    let _e718: MultiVector = self_3973;
    let _e722: MultiVector = other_3591;
    let _e734: MultiVector = self_3973;
    let _e738: MultiVector = other_3591;
    let _e750: MultiVector = self_3973;
    let _e754: MultiVector = other_3591;
    let _e766: MultiVector = self_3973;
    let _e770: MultiVector = other_3591;
    let _e773: MultiVector = other_3591;
    let _e776: MultiVector = other_3591;
    let _e779: MultiVector = other_3591;
    let _e791: MultiVector = self_3973;
    let _e795: MultiVector = other_3591;
    let _e798: MultiVector = other_3591;
    let _e801: MultiVector = other_3591;
    let _e804: MultiVector = other_3591;
    let _e816: MultiVector = self_3973;
    let _e820: MultiVector = other_3591;
    let _e823: MultiVector = other_3591;
    let _e826: MultiVector = other_3591;
    let _e829: MultiVector = other_3591;
    let _e841: MultiVector = self_3973;
    let _e845: MultiVector = other_3591;
    let _e857: MultiVector = self_3973;
    let _e861: MultiVector = other_3591;
    return MultiVector((((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g1_.w) * vec2(_e15.g1_.w)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e25.g2_.x) * vec2(_e29.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e39.g2_.y) * vec2(_e43.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e53.g2_.z) * vec2(_e57.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e67.g4_.x) * vec2(_e71.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e81.g4_.y) * vec2(_e85.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e95.g4_.z) * vec2(_e99.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e109.g0_.x) * _e113.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((((((vec4(_e122.g0_.y) * _e126.g1_) + ((vec4(_e129.g1_.x) * vec4(_e133.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e145.g1_.y) * vec4(_e149.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e161.g1_.z) * vec4(_e165.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e177.g1_.w) * vec4(_e181.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e193.g4_.x) * vec4(_e197.g0_.x)) * vec4<f32>(-1.0, 0.0, 0.0, 0.0))) + ((vec4(_e209.g4_.y) * vec4(_e213.g0_.x)) * vec4<f32>(0.0, -1.0, 0.0, 0.0))) + ((vec4(_e225.g4_.z) * vec4(_e229.g0_.x)) * vec4<f32>(0.0, 0.0, -1.0, 0.0))) + ((vec4(_e241.g0_.x) * _e245.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((vec3(_e256.g0_.y) * _e260.g2_) - (vec3(_e263.g1_.w) * vec3<f32>(_e267.g4_.x, _e270.g4_.y, _e273.g4_.z))) + ((vec3(_e279.g4_.x) * vec3(_e283.g1_.w)) * vec3<f32>(-1.0, 0.0, 0.0))) + ((vec3(_e294.g4_.y) * vec3(_e298.g1_.w)) * vec3<f32>(0.0, -1.0, 0.0))) + ((vec3(_e309.g4_.z) * vec3(_e313.g1_.w)) * vec3<f32>(0.0, 0.0, -1.0))) + (_e324.g2_ * vec3(_e326.g0_.y))), ((((((((((((((vec3(_e332.g0_.x) * _e336.g2_) + (vec3(_e339.g0_.y) * _e343.g3_)) + ((vec3(_e347.g1_.y) * vec3<f32>(_e351.g4_.z, _e354.g4_.z, _e357.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e368.g1_.z) * vec3<f32>(_e372.g4_.y, _e375.g4_.x, _e378.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e389.g2_.x) * vec3(_e393.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e404.g2_.y) * vec3(_e408.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e419.g2_.z) * vec3(_e423.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e434.g3_.x) * vec3(_e438.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e449.g3_.y) * vec3(_e453.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e464.g3_.z) * vec3(_e468.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e479.g4_.x) * vec3<f32>(_e483.g1_.z, _e486.g1_.z, _e489.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e500.g4_.y) * vec3<f32>(_e504.g1_.z, _e507.g1_.z, _e510.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e521.g4_.z) * vec3<f32>(_e525.g1_.y, _e528.g1_.x, _e531.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e542.g1_.x) * vec3<f32>(_e546.g4_.x, _e549.g4_.z, _e552.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((((((((((((vec4(_e563.g0_.y) * _e567.g4_) + ((vec4(_e570.g1_.x) * vec4(_e574.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e586.g1_.y) * vec4(_e590.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e602.g1_.z) * vec4(_e606.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e618.g1_.w) * vec4<f32>(_e622.g2_.x, _e625.g2_.y, _e628.g2_.z, _e631.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -1.0))) + ((vec4(_e643.g2_.x) * vec4<f32>(_e647.g1_.w, _e650.g4_.z, _e653.g4_.y, _e656.g1_.x)) * vec4<f32>(1.0, -1.0, 1.0, -1.0))) + ((vec4(_e668.g2_.y) * vec4<f32>(_e672.g4_.z, _e675.g1_.w, _e678.g4_.x, _e681.g1_.y)) * vec4<f32>(1.0, 1.0, -1.0, -1.0))) + ((vec4(_e693.g2_.z) * vec4<f32>(_e697.g4_.y, _e700.g4_.x, _e703.g1_.w, _e706.g1_.z)) * vec4<f32>(-1.0, 1.0, 1.0, -1.0))) + ((vec4(_e718.g3_.x) * vec4(_e722.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e734.g3_.y) * vec4(_e738.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e750.g3_.z) * vec4(_e754.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e766.g4_.x) * vec4<f32>(_e770.g0_.y, _e773.g2_.z, _e776.g2_.y, _e779.g3_.x)) * vec4<f32>(1.0, -1.0, 1.0, 1.0))) + ((vec4(_e791.g4_.y) * vec4<f32>(_e795.g2_.z, _e798.g0_.y, _e801.g2_.x, _e804.g3_.y)) * vec4<f32>(1.0, 1.0, -1.0, 1.0))) + ((vec4(_e816.g4_.z) * vec4<f32>(_e820.g2_.y, _e823.g2_.x, _e826.g0_.y, _e829.g3_.z)) * vec4<f32>(-1.0, 1.0, 1.0, 1.0))) + ((vec4(_e841.g4_.w) * vec4(_e845.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e857.g0_.x) * _e861.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_left_contraction(self_3974: MultiVector, other_3592: MultiVector) -> MultiVector {
    var self_3975: MultiVector;
    var other_3593: MultiVector;

    self_3975 = self_3974;
    other_3593 = other_3592;
    let _e4: MultiVector = self_3975;
    let _e8: MultiVector = other_3593;
    let _e11: MultiVector = self_3975;
    let _e15: MultiVector = other_3593;
    let _e25: MultiVector = self_3975;
    let _e29: MultiVector = other_3593;
    let _e39: MultiVector = self_3975;
    let _e43: MultiVector = other_3593;
    let _e53: MultiVector = self_3975;
    let _e57: MultiVector = other_3593;
    let _e67: MultiVector = self_3975;
    let _e71: MultiVector = other_3593;
    let _e81: MultiVector = self_3975;
    let _e85: MultiVector = other_3593;
    let _e95: MultiVector = self_3975;
    let _e99: MultiVector = other_3593;
    let _e109: MultiVector = self_3975;
    let _e113: MultiVector = other_3593;
    let _e116: MultiVector = self_3975;
    let _e120: MultiVector = other_3593;
    let _e123: MultiVector = other_3593;
    let _e126: MultiVector = other_3593;
    let _e129: MultiVector = other_3593;
    let _e141: MultiVector = self_3975;
    let _e145: MultiVector = other_3593;
    let _e148: MultiVector = other_3593;
    let _e151: MultiVector = other_3593;
    let _e154: MultiVector = other_3593;
    let _e166: MultiVector = self_3975;
    let _e170: MultiVector = other_3593;
    let _e181: MultiVector = self_3975;
    let _e185: MultiVector = other_3593;
    let _e196: MultiVector = self_3975;
    let _e200: MultiVector = other_3593;
    let _e211: MultiVector = self_3975;
    let _e215: MultiVector = other_3593;
    let _e227: MultiVector = self_3975;
    let _e231: MultiVector = other_3593;
    let _e234: MultiVector = other_3593;
    let _e237: MultiVector = other_3593;
    let _e240: MultiVector = other_3593;
    let _e252: MultiVector = self_3975;
    let _e256: MultiVector = other_3593;
    let _e259: MultiVector = self_3975;
    let _e263: MultiVector = other_3593;
    let _e266: MultiVector = other_3593;
    let _e269: MultiVector = other_3593;
    let _e280: MultiVector = self_3975;
    let _e284: MultiVector = other_3593;
    let _e287: MultiVector = other_3593;
    let _e290: MultiVector = other_3593;
    let _e301: MultiVector = self_3975;
    let _e305: MultiVector = other_3593;
    let _e316: MultiVector = self_3975;
    let _e320: MultiVector = other_3593;
    let _e331: MultiVector = self_3975;
    let _e335: MultiVector = other_3593;
    let _e346: MultiVector = self_3975;
    let _e350: MultiVector = other_3593;
    let _e353: MultiVector = other_3593;
    let _e356: MultiVector = other_3593;
    let _e367: MultiVector = self_3975;
    let _e371: MultiVector = other_3593;
    let _e374: MultiVector = self_3975;
    let _e377: MultiVector = self_3975;
    let _e380: MultiVector = self_3975;
    let _e384: MultiVector = other_3593;
    let _e393: MultiVector = self_3975;
    let _e397: MultiVector = other_3593;
    let _e400: MultiVector = self_3975;
    let _e403: MultiVector = other_3593;
    let _e406: MultiVector = other_3593;
    let _e409: MultiVector = other_3593;
    let _e412: MultiVector = other_3593;
    return MultiVector(((((((((vec2(_e4.g0_.x) * _e8.g0_) + ((vec2(_e11.g1_.y) * vec2(_e15.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e25.g1_.z) * vec2(_e29.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e39.g3_.x) * vec2(_e43.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e53.g3_.y) * vec2(_e57.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e67.g3_.z) * vec2(_e71.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e81.g4_.w) * vec2(_e85.g4_.w)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e95.g1_.x) * vec2(_e99.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4(_e109.g0_.x) * _e113.g1_) + ((vec4(_e116.g1_.y) * vec4<f32>(_e120.g3_.z, _e123.g3_.z, _e126.g3_.x, _e129.g2_.y)) * vec4<f32>(-1.0, 0.0, 1.0, -1.0))) + ((vec4(_e141.g1_.z) * vec4<f32>(_e145.g3_.y, _e148.g3_.x, _e151.g3_.y, _e154.g2_.z)) * vec4<f32>(1.0, -1.0, 0.0, -1.0))) + ((vec4(_e166.g3_.x) * _e170.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e181.g3_.y) * _e185.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e196.g3_.z) * _e200.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e211.g4_.w) * vec4(_e215.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e227.g1_.x) * vec4<f32>(_e231.g3_.x, _e234.g3_.z, _e237.g3_.y, _e240.g2_.x)) * vec4<f32>(0.0, 1.0, -1.0, -1.0))), (((((((vec3(_e252.g0_.x) * _e256.g2_) + ((vec3(_e259.g1_.y) * vec3<f32>(_e263.g4_.z, _e266.g4_.z, _e269.g4_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e280.g1_.z) * vec3<f32>(_e284.g4_.y, _e287.g4_.x, _e290.g4_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + ((vec3(_e301.g3_.x) * vec3(_e305.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e316.g3_.y) * vec3(_e320.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e331.g3_.z) * vec3(_e335.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e346.g1_.x) * vec3<f32>(_e350.g4_.x, _e353.g4_.z, _e356.g4_.y)) * vec3<f32>(0.0, -1.0, 1.0))), ((vec3(_e367.g0_.x) * _e371.g3_) + ((vec3<f32>(_e374.g1_.x, _e377.g1_.y, _e380.g1_.z) * vec3(_e384.g4_.w)) * vec3(-1.0))), ((vec4(_e393.g0_.x) * _e397.g4_) + ((_e400.g1_.xyzx * vec4<f32>(_e403.g0_.y, _e406.g0_.y, _e409.g0_.y, _e412.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_multi_vector_right_contraction(self_3976: MultiVector, other_3594: MultiVector) -> MultiVector {
    var self_3977: MultiVector;
    var other_3595: MultiVector;

    self_3977 = self_3976;
    other_3595 = other_3594;
    let _e4: MultiVector = self_3977;
    let _e8: MultiVector = other_3595;
    let _e17: MultiVector = self_3977;
    let _e21: MultiVector = other_3595;
    let _e31: MultiVector = self_3977;
    let _e35: MultiVector = other_3595;
    let _e45: MultiVector = self_3977;
    let _e49: MultiVector = other_3595;
    let _e59: MultiVector = self_3977;
    let _e63: MultiVector = other_3595;
    let _e73: MultiVector = self_3977;
    let _e77: MultiVector = other_3595;
    let _e87: MultiVector = self_3977;
    let _e91: MultiVector = other_3595;
    let _e101: MultiVector = self_3977;
    let _e103: MultiVector = other_3595;
    let _e109: MultiVector = self_3977;
    let _e113: MultiVector = other_3595;
    let _e124: MultiVector = self_3977;
    let _e128: MultiVector = other_3595;
    let _e140: MultiVector = self_3977;
    let _e144: MultiVector = other_3595;
    let _e156: MultiVector = self_3977;
    let _e160: MultiVector = other_3595;
    let _e172: MultiVector = self_3977;
    let _e176: MultiVector = other_3595;
    let _e188: MultiVector = self_3977;
    let _e192: MultiVector = other_3595;
    let _e204: MultiVector = self_3977;
    let _e208: MultiVector = other_3595;
    let _e220: MultiVector = self_3977;
    let _e224: MultiVector = other_3595;
    let _e235: MultiVector = self_3977;
    let _e239: MultiVector = other_3595;
    let _e250: MultiVector = self_3977;
    let _e254: MultiVector = other_3595;
    let _e265: MultiVector = self_3977;
    let _e269: MultiVector = other_3595;
    let _e281: MultiVector = self_3977;
    let _e285: MultiVector = other_3595;
    let _e297: MultiVector = self_3977;
    let _e301: MultiVector = other_3595;
    let _e313: MultiVector = self_3977;
    let _e317: MultiVector = other_3595;
    let _e320: MultiVector = other_3595;
    let _e323: MultiVector = other_3595;
    let _e326: MultiVector = other_3595;
    let _e338: MultiVector = self_3977;
    let _e341: MultiVector = self_3977;
    let _e344: MultiVector = self_3977;
    let _e347: MultiVector = self_3977;
    let _e351: MultiVector = other_3595;
    let _e362: MultiVector = self_3977;
    let _e366: MultiVector = other_3595;
    let _e369: MultiVector = self_3977;
    let _e373: MultiVector = other_3595;
    let _e376: MultiVector = other_3595;
    let _e379: MultiVector = other_3595;
    let _e390: MultiVector = self_3977;
    let _e394: MultiVector = other_3595;
    let _e397: MultiVector = other_3595;
    let _e400: MultiVector = other_3595;
    let _e411: MultiVector = self_3977;
    let _e415: MultiVector = other_3595;
    let _e418: MultiVector = other_3595;
    let _e421: MultiVector = other_3595;
    let _e432: MultiVector = self_3977;
    let _e434: MultiVector = other_3595;
    let _e442: MultiVector = self_3977;
    let _e446: MultiVector = other_3595;
    let _e449: MultiVector = other_3595;
    let _e452: MultiVector = other_3595;
    let _e458: MultiVector = self_3977;
    let _e460: MultiVector = other_3595;
    let _e466: MultiVector = self_3977;
    let _e470: MultiVector = other_3595;
    let _e481: MultiVector = self_3977;
    let _e485: MultiVector = other_3595;
    let _e497: MultiVector = self_3977;
    let _e501: MultiVector = other_3595;
    let _e513: MultiVector = self_3977;
    let _e517: MultiVector = other_3595;
    let _e529: MultiVector = self_3977;
    let _e532: MultiVector = self_3977;
    let _e535: MultiVector = self_3977;
    let _e538: MultiVector = self_3977;
    let _e542: MultiVector = other_3595;
    return MultiVector((((((((((vec2(_e4.g1_.x) * vec2(_e8.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2(_e17.g1_.y) * vec2(_e21.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e31.g1_.z) * vec2(_e35.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2(_e45.g3_.x) * vec2(_e49.g3_.x)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e59.g3_.y) * vec2(_e63.g3_.y)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e73.g3_.z) * vec2(_e77.g3_.z)) * vec2<f32>(-1.0, 0.0))) + ((vec2(_e87.g4_.w) * vec2(_e91.g4_.w)) * vec2<f32>(-1.0, 0.0))) + (_e101.g0_ * vec2(_e103.g0_.x))), ((((((((((((((((vec4(_e109.g1_.x) * vec4(_e113.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e124.g1_.y) * vec4(_e128.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e140.g1_.z) * vec4(_e144.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e156.g1_.w) * vec4(_e160.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e172.g2_.x) * vec4(_e176.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e188.g2_.y) * vec4(_e192.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e204.g2_.z) * vec4(_e208.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e220.g3_.x) * _e224.g1_.zzyz) * vec4<f32>(0.0, 1.0, -1.0, 0.0))) + ((vec4(_e235.g3_.y) * _e239.g1_.zzxz) * vec4<f32>(-1.0, 0.0, 1.0, 0.0))) + ((vec4(_e250.g3_.z) * _e254.g1_.yxyy) * vec4<f32>(1.0, -1.0, 0.0, 0.0))) + ((vec4(_e265.g4_.x) * vec4(_e269.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e281.g4_.y) * vec4(_e285.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e297.g4_.z) * vec4(_e301.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e313.g4_.w) * vec4<f32>(_e317.g3_.x, _e320.g3_.y, _e323.g3_.z, _e326.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e338.g0_.x, _e341.g0_.x, _e344.g0_.x, _e347.g0_.y) * _e351.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -1.0))), (((((vec3(_e362.g0_.y) * _e366.g3_) + ((vec3(_e369.g4_.x) * vec3<f32>(_e373.g1_.z, _e376.g1_.z, _e379.g1_.y)) * vec3<f32>(0.0, 1.0, -1.0))) + ((vec3(_e390.g4_.y) * vec3<f32>(_e394.g1_.z, _e397.g1_.z, _e400.g1_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e411.g4_.z) * vec3<f32>(_e415.g1_.y, _e418.g1_.x, _e421.g1_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + (_e432.g2_ * vec3(_e434.g0_.x))), ((vec3(0.0) - (vec3(_e442.g4_.w) * vec3<f32>(_e446.g1_.x, _e449.g1_.y, _e452.g1_.z))) + (_e458.g3_ * vec3(_e460.g0_.x))), ((((((vec4(_e466.g4_.x) * vec4(_e470.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e481.g4_.y) * vec4(_e485.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e497.g4_.z) * vec4(_e501.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e513.g4_.w) * vec4(_e517.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e529.g0_.y, _e532.g0_.y, _e535.g0_.y, _e538.g0_.x) * _e542.g1_.xyzx) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))));
}

fn multi_vector_multi_vector_left_anti_contraction(self_3978: MultiVector, other_3596: MultiVector) -> MultiVector {
    var self_3979: MultiVector;
    var other_3597: MultiVector;

    self_3979 = self_3978;
    other_3597 = other_3596;
    let _e4: MultiVector = self_3979;
    let _e8: MultiVector = other_3597;
    let _e11: MultiVector = self_3979;
    let _e15: MultiVector = other_3597;
    let _e25: MultiVector = self_3979;
    let _e29: MultiVector = other_3597;
    let _e39: MultiVector = self_3979;
    let _e43: MultiVector = other_3597;
    let _e53: MultiVector = self_3979;
    let _e57: MultiVector = other_3597;
    let _e67: MultiVector = self_3979;
    let _e71: MultiVector = other_3597;
    let _e81: MultiVector = self_3979;
    let _e85: MultiVector = other_3597;
    let _e95: MultiVector = self_3979;
    let _e98: MultiVector = self_3979;
    let _e102: MultiVector = other_3597;
    let _e105: MultiVector = other_3597;
    let _e115: MultiVector = self_3979;
    let _e119: MultiVector = other_3597;
    let _e122: MultiVector = self_3979;
    let _e125: MultiVector = other_3597;
    let _e137: MultiVector = self_3979;
    let _e141: MultiVector = other_3597;
    let _e144: MultiVector = self_3979;
    let _e147: MultiVector = self_3979;
    let _e150: MultiVector = self_3979;
    let _e154: MultiVector = other_3597;
    let _e163: MultiVector = self_3979;
    let _e167: MultiVector = other_3597;
    let _e170: MultiVector = self_3979;
    let _e174: MultiVector = other_3597;
    let _e177: MultiVector = other_3597;
    let _e180: MultiVector = other_3597;
    let _e191: MultiVector = self_3979;
    let _e195: MultiVector = other_3597;
    let _e198: MultiVector = other_3597;
    let _e201: MultiVector = other_3597;
    let _e212: MultiVector = self_3979;
    let _e216: MultiVector = other_3597;
    let _e219: MultiVector = other_3597;
    let _e222: MultiVector = other_3597;
    let _e233: MultiVector = self_3979;
    let _e235: MultiVector = other_3597;
    let _e241: MultiVector = self_3979;
    let _e245: MultiVector = other_3597;
    let _e248: MultiVector = self_3979;
    let _e252: MultiVector = other_3597;
    let _e263: MultiVector = self_3979;
    let _e267: MultiVector = other_3597;
    let _e278: MultiVector = self_3979;
    let _e282: MultiVector = other_3597;
    let _e293: MultiVector = self_3979;
    let _e297: MultiVector = other_3597;
    let _e300: MultiVector = other_3597;
    let _e303: MultiVector = other_3597;
    let _e306: MultiVector = other_3597;
    let _e318: MultiVector = self_3979;
    let _e322: MultiVector = other_3597;
    let _e325: MultiVector = other_3597;
    let _e328: MultiVector = other_3597;
    let _e331: MultiVector = other_3597;
    let _e343: MultiVector = self_3979;
    let _e347: MultiVector = other_3597;
    let _e350: MultiVector = other_3597;
    let _e353: MultiVector = other_3597;
    let _e356: MultiVector = other_3597;
    let _e368: MultiVector = self_3979;
    let _e371: MultiVector = other_3597;
    return MultiVector(((((((((vec2(_e4.g0_.y) * _e8.g0_) + ((vec2(_e11.g2_.x) * vec2(_e15.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e25.g2_.y) * vec2(_e29.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e39.g2_.z) * vec2(_e43.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e53.g4_.x) * vec2(_e57.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e67.g4_.y) * vec2(_e71.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e81.g4_.z) * vec2(_e85.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e95.g1_.x, _e98.g1_.w) * vec2<f32>(_e102.g1_.x, _e105.g1_.w)) * vec2<f32>(0.0, -1.0))), ((vec4(_e115.g0_.y) * _e119.g1_) + ((_e122.g4_.xyzx * vec4(_e125.g0_.x)) * vec4<f32>(-1.0, -1.0, -1.0, 0.0))), ((vec3(_e137.g0_.y) * _e141.g2_) + ((vec3<f32>(_e144.g4_.x, _e147.g4_.y, _e150.g4_.z) * vec3(_e154.g1_.w)) * vec3(-1.0))), (((((vec3(_e163.g0_.y) * _e167.g3_) + ((vec3(_e170.g4_.x) * vec3<f32>(_e174.g1_.z, _e177.g1_.z, _e180.g1_.y)) * vec3<f32>(0.0, -1.0, 1.0))) + ((vec3(_e191.g4_.y) * vec3<f32>(_e195.g1_.z, _e198.g1_.z, _e201.g1_.x)) * vec3<f32>(1.0, 0.0, -1.0))) + ((vec3(_e212.g4_.z) * vec3<f32>(_e216.g1_.y, _e219.g1_.x, _e222.g1_.y)) * vec3<f32>(-1.0, 1.0, 0.0))) + (_e233.g2_ * vec3(_e235.g0_.x))), ((((((((vec4(_e241.g0_.y) * _e245.g4_) + ((vec4(_e248.g2_.x) * _e252.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -1.0))) + ((vec4(_e263.g2_.y) * _e267.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -1.0))) + ((vec4(_e278.g2_.z) * _e282.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -1.0))) + ((vec4(_e293.g4_.x) * vec4<f32>(_e297.g2_.z, _e300.g2_.z, _e303.g2_.y, _e306.g3_.x)) * vec4<f32>(0.0, -1.0, 1.0, 1.0))) + ((vec4(_e318.g4_.y) * vec4<f32>(_e322.g2_.z, _e325.g2_.z, _e328.g2_.x, _e331.g3_.y)) * vec4<f32>(1.0, 0.0, -1.0, 1.0))) + ((vec4(_e343.g4_.z) * vec4<f32>(_e347.g2_.y, _e350.g2_.x, _e353.g2_.y, _e356.g3_.z)) * vec4<f32>(-1.0, 1.0, 0.0, 1.0))) + ((_e368.g1_.xxxw * vec4(_e371.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))));
}

fn multi_vector_multi_vector_right_anti_contraction(self_3980: MultiVector, other_3598: MultiVector) -> MultiVector {
    var self_3981: MultiVector;
    var other_3599: MultiVector;

    self_3981 = self_3980;
    other_3599 = other_3598;
    let _e4: MultiVector = self_3981;
    let _e8: MultiVector = other_3599;
    let _e17: MultiVector = self_3981;
    let _e21: MultiVector = other_3599;
    let _e31: MultiVector = self_3981;
    let _e35: MultiVector = other_3599;
    let _e45: MultiVector = self_3981;
    let _e49: MultiVector = other_3599;
    let _e59: MultiVector = self_3981;
    let _e63: MultiVector = other_3599;
    let _e73: MultiVector = self_3981;
    let _e77: MultiVector = other_3599;
    let _e87: MultiVector = self_3981;
    let _e91: MultiVector = other_3599;
    let _e101: MultiVector = self_3981;
    let _e103: MultiVector = other_3599;
    let _e109: MultiVector = self_3981;
    let _e113: MultiVector = other_3599;
    let _e124: MultiVector = self_3981;
    let _e128: MultiVector = other_3599;
    let _e140: MultiVector = self_3981;
    let _e144: MultiVector = other_3599;
    let _e156: MultiVector = self_3981;
    let _e160: MultiVector = other_3599;
    let _e172: MultiVector = self_3981;
    let _e176: MultiVector = other_3599;
    let _e189: MultiVector = self_3981;
    let _e193: MultiVector = other_3599;
    let _e196: MultiVector = other_3599;
    let _e199: MultiVector = other_3599;
    let _e205: MultiVector = self_3981;
    let _e207: MultiVector = other_3599;
    let _e213: MultiVector = self_3981;
    let _e217: MultiVector = other_3599;
    let _e220: MultiVector = self_3981;
    let _e224: MultiVector = other_3599;
    let _e227: MultiVector = other_3599;
    let _e230: MultiVector = other_3599;
    let _e241: MultiVector = self_3981;
    let _e245: MultiVector = other_3599;
    let _e248: MultiVector = other_3599;
    let _e251: MultiVector = other_3599;
    let _e262: MultiVector = self_3981;
    let _e266: MultiVector = other_3599;
    let _e277: MultiVector = self_3981;
    let _e281: MultiVector = other_3599;
    let _e292: MultiVector = self_3981;
    let _e296: MultiVector = other_3599;
    let _e307: MultiVector = self_3981;
    let _e311: MultiVector = other_3599;
    let _e314: MultiVector = other_3599;
    let _e317: MultiVector = other_3599;
    let _e328: MultiVector = self_3981;
    let _e332: MultiVector = other_3599;
    let _e343: MultiVector = self_3981;
    let _e347: MultiVector = other_3599;
    let _e359: MultiVector = self_3981;
    let _e363: MultiVector = other_3599;
    let _e375: MultiVector = self_3981;
    let _e379: MultiVector = other_3599;
    let _e382: MultiVector = other_3599;
    let _e385: MultiVector = other_3599;
    let _e388: MultiVector = other_3599;
    let _e400: MultiVector = self_3981;
    let _e404: MultiVector = other_3599;
    let _e415: MultiVector = self_3981;
    let _e419: MultiVector = other_3599;
    let _e430: MultiVector = self_3981;
    let _e434: MultiVector = other_3599;
    let _e445: MultiVector = self_3981;
    let _e449: MultiVector = other_3599;
    let _e461: MultiVector = self_3981;
    let _e465: MultiVector = other_3599;
    let _e477: MultiVector = self_3981;
    let _e481: MultiVector = other_3599;
    let _e493: MultiVector = self_3981;
    let _e497: MultiVector = other_3599;
    let _e509: MultiVector = self_3981;
    let _e513: MultiVector = other_3599;
    let _e525: MultiVector = self_3981;
    let _e529: MultiVector = other_3599;
    let _e541: MultiVector = self_3981;
    let _e545: MultiVector = other_3599;
    let _e557: MultiVector = self_3981;
    let _e561: MultiVector = other_3599;
    return MultiVector((((((((((vec2(_e4.g1_.w) * vec2(_e8.g1_.w)) * vec2<f32>(0.0, -1.0)) + ((vec2(_e17.g2_.x) * vec2(_e21.g2_.x)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e31.g2_.y) * vec2(_e35.g2_.y)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e45.g2_.z) * vec2(_e49.g2_.z)) * vec2<f32>(0.0, -1.0))) + ((vec2(_e59.g4_.x) * vec2(_e63.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e73.g4_.y) * vec2(_e77.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2(_e87.g4_.z) * vec2(_e91.g4_.z)) * vec2<f32>(0.0, 1.0))) + (_e101.g0_ * vec2(_e103.g0_.y))), ((((((vec4(_e109.g1_.x) * vec4(_e113.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4(_e124.g1_.y) * vec4(_e128.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e140.g1_.z) * vec4(_e144.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e156.g1_.w) * vec4(_e160.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e172.g0_.x) * _e176.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec3(0.0) - (vec3(_e189.g1_.w) * vec3<f32>(_e193.g4_.x, _e196.g4_.y, _e199.g4_.z))) + (_e205.g2_ * vec3(_e207.g0_.y))), (((((((vec3(_e213.g0_.x) * _e217.g2_) + ((vec3(_e220.g1_.y) * vec3<f32>(_e224.g4_.z, _e227.g4_.z, _e230.g4_.x)) * vec3<f32>(-1.0, 0.0, 1.0))) + ((vec3(_e241.g1_.z) * vec3<f32>(_e245.g4_.y, _e248.g4_.x, _e251.g4_.y)) * vec3<f32>(1.0, -1.0, 0.0))) + ((vec3(_e262.g3_.x) * vec3(_e266.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3(_e277.g3_.y) * vec3(_e281.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3(_e292.g3_.z) * vec3(_e296.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3(_e307.g1_.x) * vec3<f32>(_e311.g4_.x, _e314.g4_.z, _e317.g4_.y)) * vec3<f32>(0.0, 1.0, -1.0))), ((((((((((((((((vec4(_e328.g1_.x) * vec4(_e332.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0)) + ((vec4(_e343.g1_.y) * vec4(_e347.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e359.g1_.z) * vec4(_e363.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e375.g1_.w) * vec4<f32>(_e379.g2_.x, _e382.g2_.y, _e385.g2_.z, _e388.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4(_e400.g2_.x) * _e404.g4_.zzyz) * vec4<f32>(0.0, -1.0, 1.0, 0.0))) + ((vec4(_e415.g2_.y) * _e419.g4_.zzxz) * vec4<f32>(1.0, 0.0, -1.0, 0.0))) + ((vec4(_e430.g2_.z) * _e434.g4_.yxyy) * vec4<f32>(-1.0, 1.0, 0.0, 0.0))) + ((vec4(_e445.g3_.x) * vec4(_e449.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e461.g3_.y) * vec4(_e465.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e477.g3_.z) * vec4(_e481.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -1.0))) + ((vec4(_e493.g4_.x) * vec4(_e497.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4(_e509.g4_.y) * vec4(_e513.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4(_e525.g4_.z) * vec4(_e529.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4(_e541.g4_.w) * vec4(_e545.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4(_e557.g0_.x) * _e561.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_scalar_product(self_3982: MultiVector, other_3600: MultiVector) -> Scalar {
    var self_3983: MultiVector;
    var other_3601: MultiVector;

    self_3983 = self_3982;
    other_3601 = other_3600;
    let _e4: MultiVector = self_3983;
    let _e7: MultiVector = other_3601;
    let _e11: MultiVector = self_3983;
    let _e14: MultiVector = other_3601;
    let _e19: MultiVector = self_3983;
    let _e22: MultiVector = other_3601;
    let _e27: MultiVector = self_3983;
    let _e30: MultiVector = other_3601;
    let _e35: MultiVector = self_3983;
    let _e38: MultiVector = other_3601;
    let _e43: MultiVector = self_3983;
    let _e46: MultiVector = other_3601;
    let _e51: MultiVector = self_3983;
    let _e54: MultiVector = other_3601;
    let _e59: MultiVector = self_3983;
    let _e62: MultiVector = other_3601;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g1_.x * _e14.g1_.x)) + (_e19.g1_.y * _e22.g1_.y)) + (_e27.g1_.z * _e30.g1_.z)) - (_e35.g3_.x * _e38.g3_.x)) - (_e43.g3_.y * _e46.g3_.y)) - (_e51.g3_.z * _e54.g3_.z)) - (_e59.g4_.w * _e62.g4_.w)));
}

fn multi_vector_multi_vector_dot(self_3984: MultiVector, other_3602: MultiVector) -> Scalar {
    var self_3985: MultiVector;
    var other_3603: MultiVector;

    self_3985 = self_3984;
    other_3603 = other_3602;
    let _e4: MultiVector = self_3985;
    let _e7: MultiVector = other_3603;
    let _e11: MultiVector = self_3985;
    let _e14: MultiVector = other_3603;
    let _e19: MultiVector = self_3985;
    let _e22: MultiVector = other_3603;
    let _e27: MultiVector = self_3985;
    let _e30: MultiVector = other_3603;
    let _e35: MultiVector = self_3985;
    let _e38: MultiVector = other_3603;
    let _e43: MultiVector = self_3985;
    let _e46: MultiVector = other_3603;
    let _e51: MultiVector = self_3985;
    let _e54: MultiVector = other_3603;
    let _e59: MultiVector = self_3985;
    let _e62: MultiVector = other_3603;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g1_.x * _e14.g1_.x)) + (_e19.g1_.y * _e22.g1_.y)) + (_e27.g1_.z * _e30.g1_.z)) - (_e35.g3_.x * _e38.g3_.x)) - (_e43.g3_.y * _e46.g3_.y)) - (_e51.g3_.z * _e54.g3_.z)) - (_e59.g4_.w * _e62.g4_.w)));
}

fn multi_vector_multi_vector_anti_scalar_product(self_3986: MultiVector, other_3604: MultiVector) -> AntiScalar {
    var self_3987: MultiVector;
    var other_3605: MultiVector;

    self_3987 = self_3986;
    other_3605 = other_3604;
    let _e4: MultiVector = self_3987;
    let _e7: MultiVector = other_3605;
    let _e11: MultiVector = self_3987;
    let _e14: MultiVector = other_3605;
    let _e19: MultiVector = self_3987;
    let _e22: MultiVector = other_3605;
    let _e27: MultiVector = self_3987;
    let _e30: MultiVector = other_3605;
    let _e35: MultiVector = self_3987;
    let _e38: MultiVector = other_3605;
    let _e43: MultiVector = self_3987;
    let _e46: MultiVector = other_3605;
    let _e51: MultiVector = self_3987;
    let _e54: MultiVector = other_3605;
    let _e59: MultiVector = self_3987;
    let _e62: MultiVector = other_3605;
    return AntiScalar(((((((((_e4.g0_.y * _e7.g0_.y) - (_e11.g1_.w * _e14.g1_.w)) - (_e19.g2_.x * _e22.g2_.x)) - (_e27.g2_.y * _e30.g2_.y)) - (_e35.g2_.z * _e38.g2_.z)) + (_e43.g4_.x * _e46.g4_.x)) + (_e51.g4_.y * _e54.g4_.y)) + (_e59.g4_.z * _e62.g4_.z)));
}

fn multi_vector_multi_vector_anti_dot(self_3988: MultiVector, other_3606: MultiVector) -> AntiScalar {
    var self_3989: MultiVector;
    var other_3607: MultiVector;

    self_3989 = self_3988;
    other_3607 = other_3606;
    let _e4: MultiVector = self_3989;
    let _e7: MultiVector = other_3607;
    let _e11: MultiVector = self_3989;
    let _e14: MultiVector = other_3607;
    let _e19: MultiVector = self_3989;
    let _e22: MultiVector = other_3607;
    let _e27: MultiVector = self_3989;
    let _e30: MultiVector = other_3607;
    let _e35: MultiVector = self_3989;
    let _e38: MultiVector = other_3607;
    let _e43: MultiVector = self_3989;
    let _e46: MultiVector = other_3607;
    let _e51: MultiVector = self_3989;
    let _e54: MultiVector = other_3607;
    let _e59: MultiVector = self_3989;
    let _e62: MultiVector = other_3607;
    return AntiScalar(((((((((_e4.g0_.y * _e7.g0_.y) - (_e11.g1_.w * _e14.g1_.w)) - (_e19.g2_.x * _e22.g2_.x)) - (_e27.g2_.y * _e30.g2_.y)) - (_e35.g2_.z * _e38.g2_.z)) + (_e43.g4_.x * _e46.g4_.x)) + (_e51.g4_.y * _e54.g4_.y)) + (_e59.g4_.z * _e62.g4_.z)));
}

fn multi_vector_squared_magnitude(self_3990: MultiVector) -> Scalar {
    var self_3991: MultiVector;

    self_3991 = self_3990;
    let _e2: MultiVector = self_3991;
    let _e3: MultiVector = self_3991;
    let _e4: MultiVector = multi_vector_reversal(_e3);
    let _e5: Scalar = multi_vector_multi_vector_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_magnitude(self_3992: MultiVector) -> Scalar {
    var self_3993: MultiVector;

    self_3993 = self_3992;
    let _e2: MultiVector = self_3993;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_bulk_norm(self_3994: MultiVector) -> Scalar {
    var self_3995: MultiVector;

    self_3995 = self_3994;
    let _e2: MultiVector = self_3995;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_squared_anti_magnitude(self_3996: MultiVector) -> AntiScalar {
    var self_3997: MultiVector;

    self_3997 = self_3996;
    let _e2: MultiVector = self_3997;
    let _e3: MultiVector = self_3997;
    let _e4: MultiVector = multi_vector_anti_reversal(_e3);
    let _e5: AntiScalar = multi_vector_multi_vector_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_weight_norm(self_3998: MultiVector) -> AntiScalar {
    var self_3999: MultiVector;

    self_3999 = self_3998;
    let _e2: MultiVector = self_3999;
    let _e3: AntiScalar = multi_vector_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn multi_vector_geometric_norm(self_4000: MultiVector) -> HomogeneousMagnitude {
    var self_4001: MultiVector;

    self_4001 = self_4000;
    let _e2: MultiVector = self_4001;
    let _e3: Scalar = multi_vector_bulk_norm(_e2);
    let _e4: MultiVector = self_4001;
    let _e5: AntiScalar = multi_vector_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn multi_vector_scale(self_4002: MultiVector, other_3608: f32) -> MultiVector {
    var self_4003: MultiVector;
    var other_3609: f32;

    self_4003 = self_4002;
    other_3609 = other_3608;
    let _e4: MultiVector = self_4003;
    let _e5: f32 = other_3609;
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn multi_vector_signum(self_4004: MultiVector) -> MultiVector {
    var self_4005: MultiVector;

    self_4005 = self_4004;
    let _e2: MultiVector = self_4005;
    let _e3: MultiVector = self_4005;
    let _e4: Scalar = multi_vector_magnitude(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_inverse(self_4006: MultiVector) -> MultiVector {
    var self_4007: MultiVector;

    self_4007 = self_4006;
    let _e2: MultiVector = self_4007;
    let _e3: MultiVector = multi_vector_reversal(_e2);
    let _e4: MultiVector = self_4007;
    let _e5: Scalar = multi_vector_squared_magnitude(_e4);
    let _e10: MultiVector = multi_vector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn multi_vector_unitize(self_4008: MultiVector) -> MultiVector {
    var self_4009: MultiVector;

    self_4009 = self_4008;
    let _e2: MultiVector = self_4009;
    let _e3: MultiVector = self_4009;
    let _e4: AntiScalar = multi_vector_weight_norm(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_attitude(self_4010: MultiVector) -> MultiVector {
    var self_4011: MultiVector;

    self_4011 = self_4010;
    let _e2: MultiVector = self_4011;
    let _e9: MultiVector = multi_vector_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn anti_scalar_flector_geometric_quotient(self_4012: AntiScalar, other_3610: Flector) -> Flector {
    var self_4013: AntiScalar;
    var other_3611: Flector;

    self_4013 = self_4012;
    other_3611 = other_3610;
    let _e4: AntiScalar = self_4013;
    let _e5: Flector = other_3611;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = anti_scalar_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_flector_transformation(self_4014: AntiScalar, other_3612: Flector) -> Flector {
    var self_4015: AntiScalar;
    var other_3613: Flector;

    self_4015 = self_4014;
    other_3613 = other_3612;
    let _e4: AntiScalar = self_4015;
    let _e5: Flector = other_3613;
    let _e6: Flector = anti_scalar_flector_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_4015;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Flector = flector_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_homogeneous_magnitude_geometric_quotient(self_4016: AntiScalar, other_3614: HomogeneousMagnitude) -> AntiScalar {
    var self_4017: AntiScalar;
    var other_3615: HomogeneousMagnitude;

    self_4017 = self_4016;
    other_3615 = other_3614;
    let _e4: AntiScalar = self_4017;
    let _e5: HomogeneousMagnitude = other_3615;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_line_geometric_quotient(self_4018: AntiScalar, other_3616: Line) -> Rotor {
    var self_4019: AntiScalar;
    var other_3617: Line;

    self_4019 = self_4018;
    other_3617 = other_3616;
    let _e4: AntiScalar = self_4019;
    let _e5: Line = other_3617;
    let _e6: Line = line_inverse(_e5);
    let _e7: Rotor = anti_scalar_line_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_motor_geometric_quotient(self_4020: AntiScalar, other_3618: Motor) -> Rotor {
    var self_4021: AntiScalar;
    var other_3619: Motor;

    self_4021 = self_4020;
    other_3619 = other_3618;
    let _e4: AntiScalar = self_4021;
    let _e5: Motor = other_3619;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Rotor = anti_scalar_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_multi_vector_geometric_quotient(self_4022: AntiScalar, other_3620: MultiVector) -> MultiVector {
    var self_4023: AntiScalar;
    var other_3621: MultiVector;

    self_4023 = self_4022;
    other_3621 = other_3620;
    let _e4: AntiScalar = self_4023;
    let _e5: MultiVector = other_3621;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = anti_scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_multi_vector_transformation(self_4024: AntiScalar, other_3622: MultiVector) -> MultiVector {
    var self_4025: AntiScalar;
    var other_3623: MultiVector;

    self_4025 = self_4024;
    other_3623 = other_3622;
    let _e4: AntiScalar = self_4025;
    let _e5: MultiVector = other_3623;
    let _e6: MultiVector = anti_scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_4025;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_plane_geometric_quotient(self_4026: AntiScalar, other_3624: Plane) -> Point {
    var self_4027: AntiScalar;
    var other_3625: Plane;

    self_4027 = self_4026;
    other_3625 = other_3624;
    let _e4: AntiScalar = self_4027;
    let _e5: Plane = other_3625;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Point = anti_scalar_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_plane_transformation(self_4028: AntiScalar, other_3626: Plane) -> Plane {
    var self_4029: AntiScalar;
    var other_3627: Plane;

    self_4029 = self_4028;
    other_3627 = other_3626;
    let _e4: AntiScalar = self_4029;
    let _e5: Plane = other_3627;
    let _e6: Point = anti_scalar_plane_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_4029;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Plane = point_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_point_geometric_quotient(self_4030: AntiScalar, other_3628: Point) -> Plane {
    var self_4031: AntiScalar;
    var other_3629: Point;

    self_4031 = self_4030;
    other_3629 = other_3628;
    let _e4: AntiScalar = self_4031;
    let _e5: Point = other_3629;
    let _e6: Point = point_inverse(_e5);
    let _e7: Plane = anti_scalar_point_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_point_transformation(self_4032: AntiScalar, other_3630: Point) -> Point {
    var self_4033: AntiScalar;
    var other_3631: Point;

    self_4033 = self_4032;
    other_3631 = other_3630;
    let _e4: AntiScalar = self_4033;
    let _e5: Point = other_3631;
    let _e6: Plane = anti_scalar_point_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_4033;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Point = plane_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_scalar_geometric_quotient(self_4034: AntiScalar, other_3632: Scalar) -> AntiScalar {
    var self_4035: AntiScalar;
    var other_3633: Scalar;

    self_4035 = self_4034;
    other_3633 = other_3632;
    let _e4: AntiScalar = self_4035;
    let _e5: Scalar = other_3633;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_translator_geometric_quotient(self_4036: AntiScalar, other_3634: Translator) -> Rotor {
    var self_4037: AntiScalar;
    var other_3635: Translator;

    self_4037 = self_4036;
    other_3635 = other_3634;
    let _e4: AntiScalar = self_4037;
    let _e5: Translator = other_3635;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Rotor = anti_scalar_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_anti_scalar_transformation(self_4038: Flector, other_3636: AntiScalar) -> AntiScalar {
    var self_4039: Flector;
    var other_3637: AntiScalar;

    self_4039 = self_4038;
    other_3637 = other_3636;
    let _e4: Flector = self_4039;
    let _e5: AntiScalar = other_3637;
    let _e6: Flector = flector_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Flector = self_4039;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn flector_flector_geometric_quotient(self_4040: Flector, other_3638: Flector) -> MultiVector {
    var self_4041: Flector;
    var other_3639: Flector;

    self_4041 = self_4040;
    other_3639 = other_3638;
    let _e4: Flector = self_4041;
    let _e5: Flector = other_3639;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: MultiVector = flector_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_flector_transformation(self_4042: Flector, other_3640: Flector) -> Flector {
    var self_4043: Flector;
    var other_3641: Flector;

    self_4043 = self_4042;
    other_3641 = other_3640;
    let _e4: Flector = self_4043;
    let _e5: Flector = other_3641;
    let _e6: MultiVector = flector_flector_geometric_product(_e4, _e5);
    let _e7: Flector = self_4043;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn flector_homogeneous_magnitude_geometric_quotient(self_4044: Flector, other_3642: HomogeneousMagnitude) -> Flector {
    var self_4045: Flector;
    var other_3643: HomogeneousMagnitude;

    self_4045 = self_4044;
    other_3643 = other_3642;
    let _e4: Flector = self_4045;
    let _e5: HomogeneousMagnitude = other_3643;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Flector = flector_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_homogeneous_magnitude_transformation(self_4046: Flector, other_3644: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4047: Flector;
    var other_3645: HomogeneousMagnitude;

    self_4047 = self_4046;
    other_3645 = other_3644;
    let _e4: Flector = self_4047;
    let _e5: HomogeneousMagnitude = other_3645;
    let _e6: Flector = flector_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Flector = self_4047;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn flector_line_geometric_quotient(self_4048: Flector, other_3646: Line) -> Flector {
    var self_4049: Flector;
    var other_3647: Line;

    self_4049 = self_4048;
    other_3647 = other_3646;
    let _e4: Flector = self_4049;
    let _e5: Line = other_3647;
    let _e6: Line = line_inverse(_e5);
    let _e7: Flector = flector_line_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_line_transformation(self_4050: Flector, other_3648: Line) -> Line {
    var self_4051: Flector;
    var other_3649: Line;

    self_4051 = self_4050;
    other_3649 = other_3648;
    let _e4: Flector = self_4051;
    let _e5: Line = other_3649;
    let _e6: Flector = flector_line_geometric_product(_e4, _e5);
    let _e7: Flector = self_4051;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn flector_motor_geometric_quotient(self_4052: Flector, other_3650: Motor) -> Flector {
    var self_4053: Flector;
    var other_3651: Motor;

    self_4053 = self_4052;
    other_3651 = other_3650;
    let _e4: Flector = self_4053;
    let _e5: Motor = other_3651;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Flector = flector_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_motor_transformation(self_4054: Flector, other_3652: Motor) -> Motor {
    var self_4055: Flector;
    var other_3653: Motor;

    self_4055 = self_4054;
    other_3653 = other_3652;
    let _e4: Flector = self_4055;
    let _e5: Motor = other_3653;
    let _e6: Flector = flector_motor_geometric_product(_e4, _e5);
    let _e7: Flector = self_4055;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn flector_multi_vector_geometric_quotient(self_4056: Flector, other_3654: MultiVector) -> MultiVector {
    var self_4057: Flector;
    var other_3655: MultiVector;

    self_4057 = self_4056;
    other_3655 = other_3654;
    let _e4: Flector = self_4057;
    let _e5: MultiVector = other_3655;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = flector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_multi_vector_transformation(self_4058: Flector, other_3656: MultiVector) -> MultiVector {
    var self_4059: Flector;
    var other_3657: MultiVector;

    self_4059 = self_4058;
    other_3657 = other_3656;
    let _e4: Flector = self_4059;
    let _e5: MultiVector = other_3657;
    let _e6: MultiVector = flector_multi_vector_geometric_product(_e4, _e5);
    let _e7: Flector = self_4059;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_product(_e6, _e8);
    return _e9;
}

fn flector_plane_geometric_quotient(self_4060: Flector, other_3658: Plane) -> MultiVector {
    var self_4061: Flector;
    var other_3659: Plane;

    self_4061 = self_4060;
    other_3659 = other_3658;
    let _e4: Flector = self_4061;
    let _e5: Plane = other_3659;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: MultiVector = flector_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_plane_transformation(self_4062: Flector, other_3660: Plane) -> Plane {
    var self_4063: Flector;
    var other_3661: Plane;

    self_4063 = self_4062;
    other_3661 = other_3660;
    let _e4: Flector = self_4063;
    let _e5: Plane = other_3661;
    let _e6: MultiVector = flector_plane_geometric_product(_e4, _e5);
    let _e7: Flector = self_4063;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn flector_point_geometric_quotient(self_4064: Flector, other_3662: Point) -> MultiVector {
    var self_4065: Flector;
    var other_3663: Point;

    self_4065 = self_4064;
    other_3663 = other_3662;
    let _e4: Flector = self_4065;
    let _e5: Point = other_3663;
    let _e6: Point = point_inverse(_e5);
    let _e7: MultiVector = flector_point_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_point_transformation(self_4066: Flector, other_3664: Point) -> Point {
    var self_4067: Flector;
    var other_3665: Point;

    self_4067 = self_4066;
    other_3665 = other_3664;
    let _e4: Flector = self_4067;
    let _e5: Point = other_3665;
    let _e6: MultiVector = flector_point_geometric_product(_e4, _e5);
    let _e7: Flector = self_4067;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn flector_rotor_transformation(self_4068: Flector, other_3666: Rotor) -> Rotor {
    var self_4069: Flector;
    var other_3667: Rotor;

    self_4069 = self_4068;
    other_3667 = other_3666;
    let _e4: Flector = self_4069;
    let _e5: Rotor = other_3667;
    let _e6: Flector = flector_rotor_geometric_product(_e4, _e5);
    let _e7: Flector = self_4069;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn flector_scalar_geometric_quotient(self_4070: Flector, other_3668: Scalar) -> Flector {
    var self_4071: Flector;
    var other_3669: Scalar;

    self_4071 = self_4070;
    other_3669 = other_3668;
    let _e4: Flector = self_4071;
    let _e5: Scalar = other_3669;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Flector = flector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_scalar_transformation(self_4072: Flector, other_3670: Scalar) -> Scalar {
    var self_4073: Flector;
    var other_3671: Scalar;

    self_4073 = self_4072;
    other_3671 = other_3670;
    let _e4: Flector = self_4073;
    let _e5: Scalar = other_3671;
    let _e6: Flector = flector_scalar_geometric_product(_e4, _e5);
    let _e7: Flector = self_4073;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn flector_translator_geometric_quotient(self_4074: Flector, other_3672: Translator) -> Flector {
    var self_4075: Flector;
    var other_3673: Translator;

    self_4075 = self_4074;
    other_3673 = other_3672;
    let _e4: Flector = self_4075;
    let _e5: Translator = other_3673;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Flector = flector_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_translator_transformation(self_4076: Flector, other_3674: Translator) -> Translator {
    var self_4077: Flector;
    var other_3675: Translator;

    self_4077 = self_4076;
    other_3675 = other_3674;
    let _e4: Flector = self_4077;
    let _e5: Translator = other_3675;
    let _e6: Flector = flector_translator_geometric_product(_e4, _e5);
    let _e7: Flector = self_4077;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_anti_scalar_transformation(self_4078: HomogeneousMagnitude, other_3676: AntiScalar) -> AntiScalar {
    var self_4079: HomogeneousMagnitude;
    var other_3677: AntiScalar;

    self_4079 = self_4078;
    other_3677 = other_3676;
    let _e4: HomogeneousMagnitude = self_4079;
    let _e5: AntiScalar = other_3677;
    let _e6: AntiScalar = homogeneous_magnitude_anti_scalar_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4079;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_flector_geometric_quotient(self_4080: HomogeneousMagnitude, other_3678: Flector) -> Flector {
    var self_4081: HomogeneousMagnitude;
    var other_3679: Flector;

    self_4081 = self_4080;
    other_3679 = other_3678;
    let _e4: HomogeneousMagnitude = self_4081;
    let _e5: Flector = other_3679;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = homogeneous_magnitude_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_flector_transformation(self_4082: HomogeneousMagnitude, other_3680: Flector) -> Flector {
    var self_4083: HomogeneousMagnitude;
    var other_3681: Flector;

    self_4083 = self_4082;
    other_3681 = other_3680;
    let _e4: HomogeneousMagnitude = self_4083;
    let _e5: Flector = other_3681;
    let _e6: Flector = homogeneous_magnitude_flector_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4083;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_powi(self_4084: HomogeneousMagnitude, exponent: i32) -> HomogeneousMagnitude {
    var self_4085: HomogeneousMagnitude;
    var exponent_1: i32;
    var local: HomogeneousMagnitude;
    var x: HomogeneousMagnitude;
    var y: HomogeneousMagnitude;
    var n: i32;

    self_4085 = self_4084;
    exponent_1 = exponent;
    let _e4: i32 = exponent_1;
    if (_e4 == 0) {
        {
            let _e7: HomogeneousMagnitude = homogeneous_magnitude_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_1;
    if (_e8 < 0) {
        let _e11: HomogeneousMagnitude = self_4085;
        let _e12: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e11);
        local = _e12;
    } else {
        let _e14: HomogeneousMagnitude = self_4085;
        local = _e14;
    }
    let _e15: HomogeneousMagnitude = local;
    x = _e15;
    let _e17: HomogeneousMagnitude = homogeneous_magnitude_one();
    y = _e17;
    let _e19: i32 = exponent_1;
    n = abs(_e19);
    loop {
        let _e23: i32 = n;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: HomogeneousMagnitude = x;
                    let _e32: HomogeneousMagnitude = y;
                    let _e33: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e31, _e32);
                    y = _e33;
                }
            }
            let _e34: HomogeneousMagnitude = x;
            let _e35: HomogeneousMagnitude = x;
            let _e36: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e34, _e35);
            x = _e36;
            let _e37: i32 = n;
            n = (_e37 >> 1u);
        }
    }
    let _e40: HomogeneousMagnitude = x;
    let _e41: HomogeneousMagnitude = y;
    let _e42: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e40, _e41);
    return _e42;
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_quotient(self_4086: HomogeneousMagnitude, other_3682: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4087: HomogeneousMagnitude;
    var other_3683: HomogeneousMagnitude;

    self_4087 = self_4086;
    other_3683 = other_3682;
    let _e4: HomogeneousMagnitude = self_4087;
    let _e5: HomogeneousMagnitude = other_3683;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_homogeneous_magnitude_transformation(self_4088: HomogeneousMagnitude, other_3684: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4089: HomogeneousMagnitude;
    var other_3685: HomogeneousMagnitude;

    self_4089 = self_4088;
    other_3685 = other_3684;
    let _e4: HomogeneousMagnitude = self_4089;
    let _e5: HomogeneousMagnitude = other_3685;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4089;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_line_geometric_quotient(self_4090: HomogeneousMagnitude, other_3686: Line) -> Line {
    var self_4091: HomogeneousMagnitude;
    var other_3687: Line;

    self_4091 = self_4090;
    other_3687 = other_3686;
    let _e4: HomogeneousMagnitude = self_4091;
    let _e5: Line = other_3687;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = homogeneous_magnitude_line_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_line_transformation(self_4092: HomogeneousMagnitude, other_3688: Line) -> Line {
    var self_4093: HomogeneousMagnitude;
    var other_3689: Line;

    self_4093 = self_4092;
    other_3689 = other_3688;
    let _e4: HomogeneousMagnitude = self_4093;
    let _e5: Line = other_3689;
    let _e6: Line = homogeneous_magnitude_line_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4093;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Line = line_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_motor_geometric_quotient(self_4094: HomogeneousMagnitude, other_3690: Motor) -> Motor {
    var self_4095: HomogeneousMagnitude;
    var other_3691: Motor;

    self_4095 = self_4094;
    other_3691 = other_3690;
    let _e4: HomogeneousMagnitude = self_4095;
    let _e5: Motor = other_3691;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = homogeneous_magnitude_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_motor_transformation(self_4096: HomogeneousMagnitude, other_3692: Motor) -> Motor {
    var self_4097: HomogeneousMagnitude;
    var other_3693: Motor;

    self_4097 = self_4096;
    other_3693 = other_3692;
    let _e4: HomogeneousMagnitude = self_4097;
    let _e5: Motor = other_3693;
    let _e6: Motor = homogeneous_magnitude_motor_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4097;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Motor = motor_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_multi_vector_geometric_quotient(self_4098: HomogeneousMagnitude, other_3694: MultiVector) -> MultiVector {
    var self_4099: HomogeneousMagnitude;
    var other_3695: MultiVector;

    self_4099 = self_4098;
    other_3695 = other_3694;
    let _e4: HomogeneousMagnitude = self_4099;
    let _e5: MultiVector = other_3695;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = homogeneous_magnitude_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_multi_vector_transformation(self_4100: HomogeneousMagnitude, other_3696: MultiVector) -> MultiVector {
    var self_4101: HomogeneousMagnitude;
    var other_3697: MultiVector;

    self_4101 = self_4100;
    other_3697 = other_3696;
    let _e4: HomogeneousMagnitude = self_4101;
    let _e5: MultiVector = other_3697;
    let _e6: MultiVector = homogeneous_magnitude_multi_vector_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4101;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_plane_geometric_quotient(self_4102: HomogeneousMagnitude, other_3698: Plane) -> Flector {
    var self_4103: HomogeneousMagnitude;
    var other_3699: Plane;

    self_4103 = self_4102;
    other_3699 = other_3698;
    let _e4: HomogeneousMagnitude = self_4103;
    let _e5: Plane = other_3699;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Flector = homogeneous_magnitude_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_plane_transformation(self_4104: HomogeneousMagnitude, other_3700: Plane) -> Plane {
    var self_4105: HomogeneousMagnitude;
    var other_3701: Plane;

    self_4105 = self_4104;
    other_3701 = other_3700;
    let _e4: HomogeneousMagnitude = self_4105;
    let _e5: Plane = other_3701;
    let _e6: Flector = homogeneous_magnitude_plane_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4105;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_point_geometric_quotient(self_4106: HomogeneousMagnitude, other_3702: Point) -> Flector {
    var self_4107: HomogeneousMagnitude;
    var other_3703: Point;

    self_4107 = self_4106;
    other_3703 = other_3702;
    let _e4: HomogeneousMagnitude = self_4107;
    let _e5: Point = other_3703;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = homogeneous_magnitude_point_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_point_transformation(self_4108: HomogeneousMagnitude, other_3704: Point) -> Point {
    var self_4109: HomogeneousMagnitude;
    var other_3705: Point;

    self_4109 = self_4108;
    other_3705 = other_3704;
    let _e4: HomogeneousMagnitude = self_4109;
    let _e5: Point = other_3705;
    let _e6: Flector = homogeneous_magnitude_point_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4109;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_rotor_transformation(self_4110: HomogeneousMagnitude, other_3706: Rotor) -> Rotor {
    var self_4111: HomogeneousMagnitude;
    var other_3707: Rotor;

    self_4111 = self_4110;
    other_3707 = other_3706;
    let _e4: HomogeneousMagnitude = self_4111;
    let _e5: Rotor = other_3707;
    let _e6: Rotor = homogeneous_magnitude_rotor_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4111;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Rotor = rotor_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_scalar_geometric_quotient(self_4112: HomogeneousMagnitude, other_3708: Scalar) -> HomogeneousMagnitude {
    var self_4113: HomogeneousMagnitude;
    var other_3709: Scalar;

    self_4113 = self_4112;
    other_3709 = other_3708;
    let _e4: HomogeneousMagnitude = self_4113;
    let _e5: Scalar = other_3709;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_scalar_transformation(self_4114: HomogeneousMagnitude, other_3710: Scalar) -> Scalar {
    var self_4115: HomogeneousMagnitude;
    var other_3711: Scalar;

    self_4115 = self_4114;
    other_3711 = other_3710;
    let _e4: HomogeneousMagnitude = self_4115;
    let _e5: Scalar = other_3711;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4115;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Scalar = homogeneous_magnitude_scalar_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_translator_geometric_quotient(self_4116: HomogeneousMagnitude, other_3712: Translator) -> Motor {
    var self_4117: HomogeneousMagnitude;
    var other_3713: Translator;

    self_4117 = self_4116;
    other_3713 = other_3712;
    let _e4: HomogeneousMagnitude = self_4117;
    let _e5: Translator = other_3713;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Motor = homogeneous_magnitude_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_translator_transformation(self_4118: HomogeneousMagnitude, other_3714: Translator) -> Translator {
    var self_4119: HomogeneousMagnitude;
    var other_3715: Translator;

    self_4119 = self_4118;
    other_3715 = other_3714;
    let _e4: HomogeneousMagnitude = self_4119;
    let _e5: Translator = other_3715;
    let _e6: Motor = homogeneous_magnitude_translator_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4119;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Motor = motor_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn line_anti_scalar_transformation(self_4120: Line, other_3716: AntiScalar) -> AntiScalar {
    var self_4121: Line;
    var other_3717: AntiScalar;

    self_4121 = self_4120;
    other_3717 = other_3716;
    let _e4: Line = self_4121;
    let _e5: AntiScalar = other_3717;
    let _e6: Rotor = line_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Line = self_4121;
    let _e8: Line = line_reversal(_e7);
    let _e9: Rotor = rotor_line_geometric_product(_e6, _e8);
    let _e10: AntiScalar = rotor_anti_scalar_into(_e9);
    return _e10;
}

fn line_flector_geometric_quotient(self_4122: Line, other_3718: Flector) -> Flector {
    var self_4123: Line;
    var other_3719: Flector;

    self_4123 = self_4122;
    other_3719 = other_3718;
    let _e4: Line = self_4123;
    let _e5: Flector = other_3719;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = line_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn line_flector_transformation(self_4124: Line, other_3720: Flector) -> Flector {
    var self_4125: Line;
    var other_3721: Flector;

    self_4125 = self_4124;
    other_3721 = other_3720;
    let _e4: Line = self_4125;
    let _e5: Flector = other_3721;
    let _e6: Flector = line_flector_geometric_product(_e4, _e5);
    let _e7: Line = self_4125;
    let _e8: Line = line_reversal(_e7);
    let _e9: Flector = flector_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_homogeneous_magnitude_geometric_quotient(self_4126: Line, other_3722: HomogeneousMagnitude) -> Line {
    var self_4127: Line;
    var other_3723: HomogeneousMagnitude;

    self_4127 = self_4126;
    other_3723 = other_3722;
    let _e4: Line = self_4127;
    let _e5: HomogeneousMagnitude = other_3723;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Line = line_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn line_homogeneous_magnitude_transformation(self_4128: Line, other_3724: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4129: Line;
    var other_3725: HomogeneousMagnitude;

    self_4129 = self_4128;
    other_3725 = other_3724;
    let _e4: Line = self_4129;
    let _e5: HomogeneousMagnitude = other_3725;
    let _e6: Line = line_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Line = self_4129;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = line_line_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn line_line_geometric_quotient(self_4130: Line, other_3726: Line) -> MultiVector {
    var self_4131: Line;
    var other_3727: Line;

    self_4131 = self_4130;
    other_3727 = other_3726;
    let _e4: Line = self_4131;
    let _e5: Line = other_3727;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = line_line_geometric_product(_e4, _e6);
    return _e7;
}

fn line_line_transformation(self_4132: Line, other_3728: Line) -> Line {
    var self_4133: Line;
    var other_3729: Line;

    self_4133 = self_4132;
    other_3729 = other_3728;
    let _e4: Line = self_4133;
    let _e5: Line = other_3729;
    let _e6: MultiVector = line_line_geometric_product(_e4, _e5);
    let _e7: Line = self_4133;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn line_motor_geometric_quotient(self_4134: Line, other_3730: Motor) -> MultiVector {
    var self_4135: Line;
    var other_3731: Motor;

    self_4135 = self_4134;
    other_3731 = other_3730;
    let _e4: Line = self_4135;
    let _e5: Motor = other_3731;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = line_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn line_motor_transformation(self_4136: Line, other_3732: Motor) -> Motor {
    var self_4137: Line;
    var other_3733: Motor;

    self_4137 = self_4136;
    other_3733 = other_3732;
    let _e4: Line = self_4137;
    let _e5: Motor = other_3733;
    let _e6: MultiVector = line_motor_geometric_product(_e4, _e5);
    let _e7: Line = self_4137;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn line_multi_vector_geometric_quotient(self_4138: Line, other_3734: MultiVector) -> MultiVector {
    var self_4139: Line;
    var other_3735: MultiVector;

    self_4139 = self_4138;
    other_3735 = other_3734;
    let _e4: Line = self_4139;
    let _e5: MultiVector = other_3735;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = line_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn line_multi_vector_transformation(self_4140: Line, other_3736: MultiVector) -> MultiVector {
    var self_4141: Line;
    var other_3737: MultiVector;

    self_4141 = self_4140;
    other_3737 = other_3736;
    let _e4: Line = self_4141;
    let _e5: MultiVector = other_3737;
    let _e6: MultiVector = line_multi_vector_geometric_product(_e4, _e5);
    let _e7: Line = self_4141;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_plane_geometric_quotient(self_4142: Line, other_3738: Plane) -> Flector {
    var self_4143: Line;
    var other_3739: Plane;

    self_4143 = self_4142;
    other_3739 = other_3738;
    let _e4: Line = self_4143;
    let _e5: Plane = other_3739;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Flector = line_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn line_plane_transformation(self_4144: Line, other_3740: Plane) -> Plane {
    var self_4145: Line;
    var other_3741: Plane;

    self_4145 = self_4144;
    other_3741 = other_3740;
    let _e4: Line = self_4145;
    let _e5: Plane = other_3741;
    let _e6: Flector = line_plane_geometric_product(_e4, _e5);
    let _e7: Line = self_4145;
    let _e8: Line = line_reversal(_e7);
    let _e9: Flector = flector_line_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn line_point_geometric_quotient(self_4146: Line, other_3742: Point) -> Flector {
    var self_4147: Line;
    var other_3743: Point;

    self_4147 = self_4146;
    other_3743 = other_3742;
    let _e4: Line = self_4147;
    let _e5: Point = other_3743;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = line_point_geometric_product(_e4, _e6);
    return _e7;
}

fn line_point_transformation(self_4148: Line, other_3744: Point) -> Point {
    var self_4149: Line;
    var other_3745: Point;

    self_4149 = self_4148;
    other_3745 = other_3744;
    let _e4: Line = self_4149;
    let _e5: Point = other_3745;
    let _e6: Flector = line_point_geometric_product(_e4, _e5);
    let _e7: Line = self_4149;
    let _e8: Line = line_reversal(_e7);
    let _e9: Flector = flector_line_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn line_rotor_transformation(self_4150: Line, other_3746: Rotor) -> Rotor {
    var self_4151: Line;
    var other_3747: Rotor;

    self_4151 = self_4150;
    other_3747 = other_3746;
    let _e4: Line = self_4151;
    let _e5: Rotor = other_3747;
    let _e6: Rotor = line_rotor_geometric_product(_e4, _e5);
    let _e7: Line = self_4151;
    let _e8: Line = line_reversal(_e7);
    let _e9: Rotor = rotor_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_scalar_geometric_quotient(self_4152: Line, other_3748: Scalar) -> Line {
    var self_4153: Line;
    var other_3749: Scalar;

    self_4153 = self_4152;
    other_3749 = other_3748;
    let _e4: Line = self_4153;
    let _e5: Scalar = other_3749;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Line = line_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn line_scalar_transformation(self_4154: Line, other_3750: Scalar) -> Scalar {
    var self_4155: Line;
    var other_3751: Scalar;

    self_4155 = self_4154;
    other_3751 = other_3750;
    let _e4: Line = self_4155;
    let _e5: Scalar = other_3751;
    let _e6: Line = line_scalar_geometric_product(_e4, _e5);
    let _e7: Line = self_4155;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = line_line_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn line_translator_geometric_quotient(self_4156: Line, other_3752: Translator) -> MultiVector {
    var self_4157: Line;
    var other_3753: Translator;

    self_4157 = self_4156;
    other_3753 = other_3752;
    let _e4: Line = self_4157;
    let _e5: Translator = other_3753;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = line_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn line_translator_transformation(self_4158: Line, other_3754: Translator) -> Translator {
    var self_4159: Line;
    var other_3755: Translator;

    self_4159 = self_4158;
    other_3755 = other_3754;
    let _e4: Line = self_4159;
    let _e5: Translator = other_3755;
    let _e6: MultiVector = line_translator_geometric_product(_e4, _e5);
    let _e7: Line = self_4159;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn motor_anti_scalar_transformation(self_4160: Motor, other_3756: AntiScalar) -> AntiScalar {
    var self_4161: Motor;
    var other_3757: AntiScalar;

    self_4161 = self_4160;
    other_3757 = other_3756;
    let _e4: Motor = self_4161;
    let _e5: AntiScalar = other_3757;
    let _e6: Rotor = motor_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Motor = self_4161;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Rotor = rotor_motor_geometric_product(_e6, _e8);
    let _e10: AntiScalar = rotor_anti_scalar_into(_e9);
    return _e10;
}

fn motor_flector_geometric_quotient(self_4162: Motor, other_3758: Flector) -> Flector {
    var self_4163: Motor;
    var other_3759: Flector;

    self_4163 = self_4162;
    other_3759 = other_3758;
    let _e4: Motor = self_4163;
    let _e5: Flector = other_3759;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = motor_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_flector_transformation(self_4164: Motor, other_3760: Flector) -> Flector {
    var self_4165: Motor;
    var other_3761: Flector;

    self_4165 = self_4164;
    other_3761 = other_3760;
    let _e4: Motor = self_4165;
    let _e5: Flector = other_3761;
    let _e6: Flector = motor_flector_geometric_product(_e4, _e5);
    let _e7: Motor = self_4165;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_homogeneous_magnitude_geometric_quotient(self_4166: Motor, other_3762: HomogeneousMagnitude) -> Motor {
    var self_4167: Motor;
    var other_3763: HomogeneousMagnitude;

    self_4167 = self_4166;
    other_3763 = other_3762;
    let _e4: Motor = self_4167;
    let _e5: HomogeneousMagnitude = other_3763;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Motor = motor_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_homogeneous_magnitude_transformation(self_4168: Motor, other_3764: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4169: Motor;
    var other_3765: HomogeneousMagnitude;

    self_4169 = self_4168;
    other_3765 = other_3764;
    let _e4: Motor = self_4169;
    let _e5: HomogeneousMagnitude = other_3765;
    let _e6: Motor = motor_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Motor = self_4169;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = motor_motor_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn motor_line_geometric_quotient(self_4170: Motor, other_3766: Line) -> MultiVector {
    var self_4171: Motor;
    var other_3767: Line;

    self_4171 = self_4170;
    other_3767 = other_3766;
    let _e4: Motor = self_4171;
    let _e5: Line = other_3767;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = motor_line_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_line_transformation(self_4172: Motor, other_3768: Line) -> Line {
    var self_4173: Motor;
    var other_3769: Line;

    self_4173 = self_4172;
    other_3769 = other_3768;
    let _e4: Motor = self_4173;
    let _e5: Line = other_3769;
    let _e6: MultiVector = motor_line_geometric_product(_e4, _e5);
    let _e7: Motor = self_4173;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn motor_motor_geometric_quotient(self_4174: Motor, other_3770: Motor) -> MultiVector {
    var self_4175: Motor;
    var other_3771: Motor;

    self_4175 = self_4174;
    other_3771 = other_3770;
    let _e4: Motor = self_4175;
    let _e5: Motor = other_3771;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = motor_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_motor_transformation(self_4176: Motor, other_3772: Motor) -> Motor {
    var self_4177: Motor;
    var other_3773: Motor;

    self_4177 = self_4176;
    other_3773 = other_3772;
    let _e4: Motor = self_4177;
    let _e5: Motor = other_3773;
    let _e6: MultiVector = motor_motor_geometric_product(_e4, _e5);
    let _e7: Motor = self_4177;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn motor_multi_vector_geometric_quotient(self_4178: Motor, other_3774: MultiVector) -> MultiVector {
    var self_4179: Motor;
    var other_3775: MultiVector;

    self_4179 = self_4178;
    other_3775 = other_3774;
    let _e4: Motor = self_4179;
    let _e5: MultiVector = other_3775;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = motor_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_multi_vector_transformation(self_4180: Motor, other_3776: MultiVector) -> MultiVector {
    var self_4181: Motor;
    var other_3777: MultiVector;

    self_4181 = self_4180;
    other_3777 = other_3776;
    let _e4: Motor = self_4181;
    let _e5: MultiVector = other_3777;
    let _e6: MultiVector = motor_multi_vector_geometric_product(_e4, _e5);
    let _e7: Motor = self_4181;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_plane_geometric_quotient(self_4182: Motor, other_3778: Plane) -> Flector {
    var self_4183: Motor;
    var other_3779: Plane;

    self_4183 = self_4182;
    other_3779 = other_3778;
    let _e4: Motor = self_4183;
    let _e5: Plane = other_3779;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Flector = motor_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_plane_transformation(self_4184: Motor, other_3780: Plane) -> Plane {
    var self_4185: Motor;
    var other_3781: Plane;

    self_4185 = self_4184;
    other_3781 = other_3780;
    let _e4: Motor = self_4185;
    let _e5: Plane = other_3781;
    let _e6: Flector = motor_plane_geometric_product(_e4, _e5);
    let _e7: Motor = self_4185;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn motor_point_geometric_quotient(self_4186: Motor, other_3782: Point) -> Flector {
    var self_4187: Motor;
    var other_3783: Point;

    self_4187 = self_4186;
    other_3783 = other_3782;
    let _e4: Motor = self_4187;
    let _e5: Point = other_3783;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = motor_point_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_point_transformation(self_4188: Motor, other_3784: Point) -> Point {
    var self_4189: Motor;
    var other_3785: Point;

    self_4189 = self_4188;
    other_3785 = other_3784;
    let _e4: Motor = self_4189;
    let _e5: Point = other_3785;
    let _e6: Flector = motor_point_geometric_product(_e4, _e5);
    let _e7: Motor = self_4189;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn motor_rotor_transformation(self_4190: Motor, other_3786: Rotor) -> Rotor {
    var self_4191: Motor;
    var other_3787: Rotor;

    self_4191 = self_4190;
    other_3787 = other_3786;
    let _e4: Motor = self_4191;
    let _e5: Rotor = other_3787;
    let _e6: Rotor = motor_rotor_geometric_product(_e4, _e5);
    let _e7: Motor = self_4191;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Rotor = rotor_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_scalar_geometric_quotient(self_4192: Motor, other_3788: Scalar) -> Motor {
    var self_4193: Motor;
    var other_3789: Scalar;

    self_4193 = self_4192;
    other_3789 = other_3788;
    let _e4: Motor = self_4193;
    let _e5: Scalar = other_3789;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Motor = motor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_scalar_transformation(self_4194: Motor, other_3790: Scalar) -> Scalar {
    var self_4195: Motor;
    var other_3791: Scalar;

    self_4195 = self_4194;
    other_3791 = other_3790;
    let _e4: Motor = self_4195;
    let _e5: Scalar = other_3791;
    let _e6: Motor = motor_scalar_geometric_product(_e4, _e5);
    let _e7: Motor = self_4195;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = motor_motor_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn motor_translator_geometric_quotient(self_4196: Motor, other_3792: Translator) -> MultiVector {
    var self_4197: Motor;
    var other_3793: Translator;

    self_4197 = self_4196;
    other_3793 = other_3792;
    let _e4: Motor = self_4197;
    let _e5: Translator = other_3793;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = motor_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_translator_transformation(self_4198: Motor, other_3794: Translator) -> Translator {
    var self_4199: Motor;
    var other_3795: Translator;

    self_4199 = self_4198;
    other_3795 = other_3794;
    let _e4: Motor = self_4199;
    let _e5: Translator = other_3795;
    let _e6: MultiVector = motor_translator_geometric_product(_e4, _e5);
    let _e7: Motor = self_4199;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn multi_vector_anti_scalar_transformation(self_4200: MultiVector, other_3796: AntiScalar) -> AntiScalar {
    var self_4201: MultiVector;
    var other_3797: AntiScalar;

    self_4201 = self_4200;
    other_3797 = other_3796;
    let _e4: MultiVector = self_4201;
    let _e5: AntiScalar = other_3797;
    let _e6: MultiVector = multi_vector_anti_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4201;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn multi_vector_flector_geometric_quotient(self_4202: MultiVector, other_3798: Flector) -> MultiVector {
    var self_4203: MultiVector;
    var other_3799: Flector;

    self_4203 = self_4202;
    other_3799 = other_3798;
    let _e4: MultiVector = self_4203;
    let _e5: Flector = other_3799;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: MultiVector = multi_vector_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_flector_transformation(self_4204: MultiVector, other_3800: Flector) -> Flector {
    var self_4205: MultiVector;
    var other_3801: Flector;

    self_4205 = self_4204;
    other_3801 = other_3800;
    let _e4: MultiVector = self_4205;
    let _e5: Flector = other_3801;
    let _e6: MultiVector = multi_vector_flector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4205;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn multi_vector_homogeneous_magnitude_geometric_quotient(self_4206: MultiVector, other_3802: HomogeneousMagnitude) -> MultiVector {
    var self_4207: MultiVector;
    var other_3803: HomogeneousMagnitude;

    self_4207 = self_4206;
    other_3803 = other_3802;
    let _e4: MultiVector = self_4207;
    let _e5: HomogeneousMagnitude = other_3803;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_homogeneous_magnitude_transformation(self_4208: MultiVector, other_3804: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4209: MultiVector;
    var other_3805: HomogeneousMagnitude;

    self_4209 = self_4208;
    other_3805 = other_3804;
    let _e4: MultiVector = self_4209;
    let _e5: HomogeneousMagnitude = other_3805;
    let _e6: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4209;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn multi_vector_line_geometric_quotient(self_4210: MultiVector, other_3806: Line) -> MultiVector {
    var self_4211: MultiVector;
    var other_3807: Line;

    self_4211 = self_4210;
    other_3807 = other_3806;
    let _e4: MultiVector = self_4211;
    let _e5: Line = other_3807;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = multi_vector_line_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_line_transformation(self_4212: MultiVector, other_3808: Line) -> Line {
    var self_4213: MultiVector;
    var other_3809: Line;

    self_4213 = self_4212;
    other_3809 = other_3808;
    let _e4: MultiVector = self_4213;
    let _e5: Line = other_3809;
    let _e6: MultiVector = multi_vector_line_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4213;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn multi_vector_motor_geometric_quotient(self_4214: MultiVector, other_3810: Motor) -> MultiVector {
    var self_4215: MultiVector;
    var other_3811: Motor;

    self_4215 = self_4214;
    other_3811 = other_3810;
    let _e4: MultiVector = self_4215;
    let _e5: Motor = other_3811;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = multi_vector_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_motor_transformation(self_4216: MultiVector, other_3812: Motor) -> Motor {
    var self_4217: MultiVector;
    var other_3813: Motor;

    self_4217 = self_4216;
    other_3813 = other_3812;
    let _e4: MultiVector = self_4217;
    let _e5: Motor = other_3813;
    let _e6: MultiVector = multi_vector_motor_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4217;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn multi_vector_powi(self_4218: MultiVector, exponent_2: i32) -> MultiVector {
    var self_4219: MultiVector;
    var exponent_3: i32;
    var local_1: MultiVector;
    var x_1: MultiVector;
    var y_1: MultiVector;
    var n_1: i32;

    self_4219 = self_4218;
    exponent_3 = exponent_2;
    let _e4: i32 = exponent_3;
    if (_e4 == 0) {
        {
            let _e7: MultiVector = multi_vector_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_3;
    if (_e8 < 0) {
        let _e11: MultiVector = self_4219;
        let _e12: MultiVector = multi_vector_inverse(_e11);
        local_1 = _e12;
    } else {
        let _e14: MultiVector = self_4219;
        local_1 = _e14;
    }
    let _e15: MultiVector = local_1;
    x_1 = _e15;
    let _e17: MultiVector = multi_vector_one();
    y_1 = _e17;
    let _e19: i32 = exponent_3;
    n_1 = abs(_e19);
    loop {
        let _e23: i32 = n_1;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_1;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: MultiVector = x_1;
                    let _e32: MultiVector = y_1;
                    let _e33: MultiVector = multi_vector_multi_vector_geometric_product(_e31, _e32);
                    y_1 = _e33;
                }
            }
            let _e34: MultiVector = x_1;
            let _e35: MultiVector = x_1;
            let _e36: MultiVector = multi_vector_multi_vector_geometric_product(_e34, _e35);
            x_1 = _e36;
            let _e37: i32 = n_1;
            n_1 = (_e37 >> 1u);
        }
    }
    let _e40: MultiVector = x_1;
    let _e41: MultiVector = y_1;
    let _e42: MultiVector = multi_vector_multi_vector_geometric_product(_e40, _e41);
    return _e42;
}

fn multi_vector_multi_vector_geometric_quotient(self_4220: MultiVector, other_3814: MultiVector) -> MultiVector {
    var self_4221: MultiVector;
    var other_3815: MultiVector;

    self_4221 = self_4220;
    other_3815 = other_3814;
    let _e4: MultiVector = self_4221;
    let _e5: MultiVector = other_3815;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_multi_vector_transformation(self_4222: MultiVector, other_3816: MultiVector) -> MultiVector {
    var self_4223: MultiVector;
    var other_3817: MultiVector;

    self_4223 = self_4222;
    other_3817 = other_3816;
    let _e4: MultiVector = self_4223;
    let _e5: MultiVector = other_3817;
    let _e6: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4223;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    return _e9;
}

fn multi_vector_plane_geometric_quotient(self_4224: MultiVector, other_3818: Plane) -> MultiVector {
    var self_4225: MultiVector;
    var other_3819: Plane;

    self_4225 = self_4224;
    other_3819 = other_3818;
    let _e4: MultiVector = self_4225;
    let _e5: Plane = other_3819;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: MultiVector = multi_vector_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_plane_transformation(self_4226: MultiVector, other_3820: Plane) -> Plane {
    var self_4227: MultiVector;
    var other_3821: Plane;

    self_4227 = self_4226;
    other_3821 = other_3820;
    let _e4: MultiVector = self_4227;
    let _e5: Plane = other_3821;
    let _e6: MultiVector = multi_vector_plane_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4227;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn multi_vector_point_geometric_quotient(self_4228: MultiVector, other_3822: Point) -> MultiVector {
    var self_4229: MultiVector;
    var other_3823: Point;

    self_4229 = self_4228;
    other_3823 = other_3822;
    let _e4: MultiVector = self_4229;
    let _e5: Point = other_3823;
    let _e6: Point = point_inverse(_e5);
    let _e7: MultiVector = multi_vector_point_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_point_transformation(self_4230: MultiVector, other_3824: Point) -> Point {
    var self_4231: MultiVector;
    var other_3825: Point;

    self_4231 = self_4230;
    other_3825 = other_3824;
    let _e4: MultiVector = self_4231;
    let _e5: Point = other_3825;
    let _e6: MultiVector = multi_vector_point_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4231;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn multi_vector_rotor_transformation(self_4232: MultiVector, other_3826: Rotor) -> Rotor {
    var self_4233: MultiVector;
    var other_3827: Rotor;

    self_4233 = self_4232;
    other_3827 = other_3826;
    let _e4: MultiVector = self_4233;
    let _e5: Rotor = other_3827;
    let _e6: MultiVector = multi_vector_rotor_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4233;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn multi_vector_scalar_geometric_quotient(self_4234: MultiVector, other_3828: Scalar) -> MultiVector {
    var self_4235: MultiVector;
    var other_3829: Scalar;

    self_4235 = self_4234;
    other_3829 = other_3828;
    let _e4: MultiVector = self_4235;
    let _e5: Scalar = other_3829;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_scalar_transformation(self_4236: MultiVector, other_3830: Scalar) -> Scalar {
    var self_4237: MultiVector;
    var other_3831: Scalar;

    self_4237 = self_4236;
    other_3831 = other_3830;
    let _e4: MultiVector = self_4237;
    let _e5: Scalar = other_3831;
    let _e6: MultiVector = multi_vector_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4237;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn multi_vector_translator_geometric_quotient(self_4238: MultiVector, other_3832: Translator) -> MultiVector {
    var self_4239: MultiVector;
    var other_3833: Translator;

    self_4239 = self_4238;
    other_3833 = other_3832;
    let _e4: MultiVector = self_4239;
    let _e5: Translator = other_3833;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = multi_vector_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_translator_transformation(self_4240: MultiVector, other_3834: Translator) -> Translator {
    var self_4241: MultiVector;
    var other_3835: Translator;

    self_4241 = self_4240;
    other_3835 = other_3834;
    let _e4: MultiVector = self_4241;
    let _e5: Translator = other_3835;
    let _e6: MultiVector = multi_vector_translator_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_4241;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn plane_anti_scalar_transformation(self_4242: Plane, other_3836: AntiScalar) -> AntiScalar {
    var self_4243: Plane;
    var other_3837: AntiScalar;

    self_4243 = self_4242;
    other_3837 = other_3836;
    let _e4: Plane = self_4243;
    let _e5: AntiScalar = other_3837;
    let _e6: Point = plane_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Plane = self_4243;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: Motor = point_plane_geometric_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn plane_flector_geometric_quotient(self_4244: Plane, other_3838: Flector) -> MultiVector {
    var self_4245: Plane;
    var other_3839: Flector;

    self_4245 = self_4244;
    other_3839 = other_3838;
    let _e4: Plane = self_4245;
    let _e5: Flector = other_3839;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: MultiVector = plane_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_flector_transformation(self_4246: Plane, other_3840: Flector) -> Flector {
    var self_4247: Plane;
    var other_3841: Flector;

    self_4247 = self_4246;
    other_3841 = other_3840;
    let _e4: Plane = self_4247;
    let _e5: Flector = other_3841;
    let _e6: MultiVector = plane_flector_geometric_product(_e4, _e5);
    let _e7: Plane = self_4247;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn plane_homogeneous_magnitude_geometric_quotient(self_4248: Plane, other_3842: HomogeneousMagnitude) -> Flector {
    var self_4249: Plane;
    var other_3843: HomogeneousMagnitude;

    self_4249 = self_4248;
    other_3843 = other_3842;
    let _e4: Plane = self_4249;
    let _e5: HomogeneousMagnitude = other_3843;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Flector = plane_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_homogeneous_magnitude_transformation(self_4250: Plane, other_3844: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4251: Plane;
    var other_3845: HomogeneousMagnitude;

    self_4251 = self_4250;
    other_3845 = other_3844;
    let _e4: Plane = self_4251;
    let _e5: HomogeneousMagnitude = other_3845;
    let _e6: Flector = plane_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Plane = self_4251;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn plane_line_geometric_quotient(self_4252: Plane, other_3846: Line) -> Flector {
    var self_4253: Plane;
    var other_3847: Line;

    self_4253 = self_4252;
    other_3847 = other_3846;
    let _e4: Plane = self_4253;
    let _e5: Line = other_3847;
    let _e6: Line = line_inverse(_e5);
    let _e7: Flector = plane_line_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_line_transformation(self_4254: Plane, other_3848: Line) -> Line {
    var self_4255: Plane;
    var other_3849: Line;

    self_4255 = self_4254;
    other_3849 = other_3848;
    let _e4: Plane = self_4255;
    let _e5: Line = other_3849;
    let _e6: Flector = plane_line_geometric_product(_e4, _e5);
    let _e7: Plane = self_4255;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn plane_motor_geometric_quotient(self_4256: Plane, other_3850: Motor) -> Flector {
    var self_4257: Plane;
    var other_3851: Motor;

    self_4257 = self_4256;
    other_3851 = other_3850;
    let _e4: Plane = self_4257;
    let _e5: Motor = other_3851;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Flector = plane_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_motor_transformation(self_4258: Plane, other_3852: Motor) -> Motor {
    var self_4259: Plane;
    var other_3853: Motor;

    self_4259 = self_4258;
    other_3853 = other_3852;
    let _e4: Plane = self_4259;
    let _e5: Motor = other_3853;
    let _e6: Flector = plane_motor_geometric_product(_e4, _e5);
    let _e7: Plane = self_4259;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn plane_multi_vector_geometric_quotient(self_4260: Plane, other_3854: MultiVector) -> MultiVector {
    var self_4261: Plane;
    var other_3855: MultiVector;

    self_4261 = self_4260;
    other_3855 = other_3854;
    let _e4: Plane = self_4261;
    let _e5: MultiVector = other_3855;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = plane_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_multi_vector_transformation(self_4262: Plane, other_3856: MultiVector) -> MultiVector {
    var self_4263: Plane;
    var other_3857: MultiVector;

    self_4263 = self_4262;
    other_3857 = other_3856;
    let _e4: Plane = self_4263;
    let _e5: MultiVector = other_3857;
    let _e6: MultiVector = plane_multi_vector_geometric_product(_e4, _e5);
    let _e7: Plane = self_4263;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn plane_plane_geometric_quotient(self_4264: Plane, other_3858: Plane) -> MultiVector {
    var self_4265: Plane;
    var other_3859: Plane;

    self_4265 = self_4264;
    other_3859 = other_3858;
    let _e4: Plane = self_4265;
    let _e5: Plane = other_3859;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: MultiVector = plane_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_plane_transformation(self_4266: Plane, other_3860: Plane) -> Plane {
    var self_4267: Plane;
    var other_3861: Plane;

    self_4267 = self_4266;
    other_3861 = other_3860;
    let _e4: Plane = self_4267;
    let _e5: Plane = other_3861;
    let _e6: MultiVector = plane_plane_geometric_product(_e4, _e5);
    let _e7: Plane = self_4267;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn plane_point_geometric_quotient(self_4268: Plane, other_3862: Point) -> Motor {
    var self_4269: Plane;
    var other_3863: Point;

    self_4269 = self_4268;
    other_3863 = other_3862;
    let _e4: Plane = self_4269;
    let _e5: Point = other_3863;
    let _e6: Point = point_inverse(_e5);
    let _e7: Motor = plane_point_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_point_transformation(self_4270: Plane, other_3864: Point) -> Point {
    var self_4271: Plane;
    var other_3865: Point;

    self_4271 = self_4270;
    other_3865 = other_3864;
    let _e4: Plane = self_4271;
    let _e5: Point = other_3865;
    let _e6: Motor = plane_point_geometric_product(_e4, _e5);
    let _e7: Plane = self_4271;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: Flector = motor_plane_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn plane_rotor_transformation(self_4272: Plane, other_3866: Rotor) -> Rotor {
    var self_4273: Plane;
    var other_3867: Rotor;

    self_4273 = self_4272;
    other_3867 = other_3866;
    let _e4: Plane = self_4273;
    let _e5: Rotor = other_3867;
    let _e6: Flector = plane_rotor_geometric_product(_e4, _e5);
    let _e7: Plane = self_4273;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn plane_scalar_geometric_quotient(self_4274: Plane, other_3868: Scalar) -> Plane {
    var self_4275: Plane;
    var other_3869: Scalar;

    self_4275 = self_4274;
    other_3869 = other_3868;
    let _e4: Plane = self_4275;
    let _e5: Scalar = other_3869;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Plane = plane_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_scalar_transformation(self_4276: Plane, other_3870: Scalar) -> Scalar {
    var self_4277: Plane;
    var other_3871: Scalar;

    self_4277 = self_4276;
    other_3871 = other_3870;
    let _e4: Plane = self_4277;
    let _e5: Scalar = other_3871;
    let _e6: Plane = plane_scalar_geometric_product(_e4, _e5);
    let _e7: Plane = self_4277;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = plane_plane_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn plane_translator_geometric_quotient(self_4278: Plane, other_3872: Translator) -> Flector {
    var self_4279: Plane;
    var other_3873: Translator;

    self_4279 = self_4278;
    other_3873 = other_3872;
    let _e4: Plane = self_4279;
    let _e5: Translator = other_3873;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Flector = plane_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_translator_transformation(self_4280: Plane, other_3874: Translator) -> Translator {
    var self_4281: Plane;
    var other_3875: Translator;

    self_4281 = self_4280;
    other_3875 = other_3874;
    let _e4: Plane = self_4281;
    let _e5: Translator = other_3875;
    let _e6: Flector = plane_translator_geometric_product(_e4, _e5);
    let _e7: Plane = self_4281;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn point_anti_scalar_transformation(self_4282: Point, other_3876: AntiScalar) -> AntiScalar {
    var self_4283: Point;
    var other_3877: AntiScalar;

    self_4283 = self_4282;
    other_3877 = other_3876;
    let _e4: Point = self_4283;
    let _e5: AntiScalar = other_3877;
    let _e6: Plane = point_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Point = self_4283;
    let _e8: Point = point_reversal(_e7);
    let _e9: Motor = plane_point_geometric_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn point_flector_geometric_quotient(self_4284: Point, other_3878: Flector) -> MultiVector {
    var self_4285: Point;
    var other_3879: Flector;

    self_4285 = self_4284;
    other_3879 = other_3878;
    let _e4: Point = self_4285;
    let _e5: Flector = other_3879;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: MultiVector = point_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn point_flector_transformation(self_4286: Point, other_3880: Flector) -> Flector {
    var self_4287: Point;
    var other_3881: Flector;

    self_4287 = self_4286;
    other_3881 = other_3880;
    let _e4: Point = self_4287;
    let _e5: Flector = other_3881;
    let _e6: MultiVector = point_flector_geometric_product(_e4, _e5);
    let _e7: Point = self_4287;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn point_homogeneous_magnitude_geometric_quotient(self_4288: Point, other_3882: HomogeneousMagnitude) -> Flector {
    var self_4289: Point;
    var other_3883: HomogeneousMagnitude;

    self_4289 = self_4288;
    other_3883 = other_3882;
    let _e4: Point = self_4289;
    let _e5: HomogeneousMagnitude = other_3883;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Flector = point_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn point_homogeneous_magnitude_transformation(self_4290: Point, other_3884: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4291: Point;
    var other_3885: HomogeneousMagnitude;

    self_4291 = self_4290;
    other_3885 = other_3884;
    let _e4: Point = self_4291;
    let _e5: HomogeneousMagnitude = other_3885;
    let _e6: Flector = point_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Point = self_4291;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn point_line_geometric_quotient(self_4292: Point, other_3886: Line) -> Flector {
    var self_4293: Point;
    var other_3887: Line;

    self_4293 = self_4292;
    other_3887 = other_3886;
    let _e4: Point = self_4293;
    let _e5: Line = other_3887;
    let _e6: Line = line_inverse(_e5);
    let _e7: Flector = point_line_geometric_product(_e4, _e6);
    return _e7;
}

fn point_line_transformation(self_4294: Point, other_3888: Line) -> Line {
    var self_4295: Point;
    var other_3889: Line;

    self_4295 = self_4294;
    other_3889 = other_3888;
    let _e4: Point = self_4295;
    let _e5: Line = other_3889;
    let _e6: Flector = point_line_geometric_product(_e4, _e5);
    let _e7: Point = self_4295;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn point_motor_geometric_quotient(self_4296: Point, other_3890: Motor) -> Flector {
    var self_4297: Point;
    var other_3891: Motor;

    self_4297 = self_4296;
    other_3891 = other_3890;
    let _e4: Point = self_4297;
    let _e5: Motor = other_3891;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Flector = point_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_motor_transformation(self_4298: Point, other_3892: Motor) -> Motor {
    var self_4299: Point;
    var other_3893: Motor;

    self_4299 = self_4298;
    other_3893 = other_3892;
    let _e4: Point = self_4299;
    let _e5: Motor = other_3893;
    let _e6: Flector = point_motor_geometric_product(_e4, _e5);
    let _e7: Point = self_4299;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn point_multi_vector_geometric_quotient(self_4300: Point, other_3894: MultiVector) -> MultiVector {
    var self_4301: Point;
    var other_3895: MultiVector;

    self_4301 = self_4300;
    other_3895 = other_3894;
    let _e4: Point = self_4301;
    let _e5: MultiVector = other_3895;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = point_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn point_multi_vector_transformation(self_4302: Point, other_3896: MultiVector) -> MultiVector {
    var self_4303: Point;
    var other_3897: MultiVector;

    self_4303 = self_4302;
    other_3897 = other_3896;
    let _e4: Point = self_4303;
    let _e5: MultiVector = other_3897;
    let _e6: MultiVector = point_multi_vector_geometric_product(_e4, _e5);
    let _e7: Point = self_4303;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_product(_e6, _e8);
    return _e9;
}

fn point_plane_geometric_quotient(self_4304: Point, other_3898: Plane) -> Motor {
    var self_4305: Point;
    var other_3899: Plane;

    self_4305 = self_4304;
    other_3899 = other_3898;
    let _e4: Point = self_4305;
    let _e5: Plane = other_3899;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Motor = point_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn point_plane_transformation(self_4306: Point, other_3900: Plane) -> Plane {
    var self_4307: Point;
    var other_3901: Plane;

    self_4307 = self_4306;
    other_3901 = other_3900;
    let _e4: Point = self_4307;
    let _e5: Plane = other_3901;
    let _e6: Motor = point_plane_geometric_product(_e4, _e5);
    let _e7: Point = self_4307;
    let _e8: Point = point_reversal(_e7);
    let _e9: Flector = motor_point_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn point_point_geometric_quotient(self_4308: Point, other_3902: Point) -> MultiVector {
    var self_4309: Point;
    var other_3903: Point;

    self_4309 = self_4308;
    other_3903 = other_3902;
    let _e4: Point = self_4309;
    let _e5: Point = other_3903;
    let _e6: Point = point_inverse(_e5);
    let _e7: MultiVector = point_point_geometric_product(_e4, _e6);
    return _e7;
}

fn point_point_transformation(self_4310: Point, other_3904: Point) -> Point {
    var self_4311: Point;
    var other_3905: Point;

    self_4311 = self_4310;
    other_3905 = other_3904;
    let _e4: Point = self_4311;
    let _e5: Point = other_3905;
    let _e6: MultiVector = point_point_geometric_product(_e4, _e5);
    let _e7: Point = self_4311;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn point_rotor_transformation(self_4312: Point, other_3906: Rotor) -> Rotor {
    var self_4313: Point;
    var other_3907: Rotor;

    self_4313 = self_4312;
    other_3907 = other_3906;
    let _e4: Point = self_4313;
    let _e5: Rotor = other_3907;
    let _e6: Flector = point_rotor_geometric_product(_e4, _e5);
    let _e7: Point = self_4313;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn point_scalar_geometric_quotient(self_4314: Point, other_3908: Scalar) -> Point {
    var self_4315: Point;
    var other_3909: Scalar;

    self_4315 = self_4314;
    other_3909 = other_3908;
    let _e4: Point = self_4315;
    let _e5: Scalar = other_3909;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Point = point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_scalar_transformation(self_4316: Point, other_3910: Scalar) -> Scalar {
    var self_4317: Point;
    var other_3911: Scalar;

    self_4317 = self_4316;
    other_3911 = other_3910;
    let _e4: Point = self_4317;
    let _e5: Scalar = other_3911;
    let _e6: Point = point_scalar_geometric_product(_e4, _e5);
    let _e7: Point = self_4317;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = point_point_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn point_translator_geometric_quotient(self_4318: Point, other_3912: Translator) -> Flector {
    var self_4319: Point;
    var other_3913: Translator;

    self_4319 = self_4318;
    other_3913 = other_3912;
    let _e4: Point = self_4319;
    let _e5: Translator = other_3913;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Flector = point_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn point_translator_transformation(self_4320: Point, other_3914: Translator) -> Translator {
    var self_4321: Point;
    var other_3915: Translator;

    self_4321 = self_4320;
    other_3915 = other_3914;
    let _e4: Point = self_4321;
    let _e5: Translator = other_3915;
    let _e6: Flector = point_translator_geometric_product(_e4, _e5);
    let _e7: Point = self_4321;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn rotor_flector_geometric_quotient(self_4322: Rotor, other_3916: Flector) -> Flector {
    var self_4323: Rotor;
    var other_3917: Flector;

    self_4323 = self_4322;
    other_3917 = other_3916;
    let _e4: Rotor = self_4323;
    let _e5: Flector = other_3917;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = rotor_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_flector_transformation(self_4324: Rotor, other_3918: Flector) -> Flector {
    var self_4325: Rotor;
    var other_3919: Flector;

    self_4325 = self_4324;
    other_3919 = other_3918;
    let _e4: Rotor = self_4325;
    let _e5: Flector = other_3919;
    let _e6: Flector = rotor_flector_geometric_product(_e4, _e5);
    let _e7: Rotor = self_4325;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_homogeneous_magnitude_geometric_quotient(self_4326: Rotor, other_3920: HomogeneousMagnitude) -> Rotor {
    var self_4327: Rotor;
    var other_3921: HomogeneousMagnitude;

    self_4327 = self_4326;
    other_3921 = other_3920;
    let _e4: Rotor = self_4327;
    let _e5: HomogeneousMagnitude = other_3921;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Rotor = rotor_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_line_geometric_quotient(self_4328: Rotor, other_3922: Line) -> Rotor {
    var self_4329: Rotor;
    var other_3923: Line;

    self_4329 = self_4328;
    other_3923 = other_3922;
    let _e4: Rotor = self_4329;
    let _e5: Line = other_3923;
    let _e6: Line = line_inverse(_e5);
    let _e7: Rotor = rotor_line_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_motor_geometric_quotient(self_4330: Rotor, other_3924: Motor) -> Rotor {
    var self_4331: Rotor;
    var other_3925: Motor;

    self_4331 = self_4330;
    other_3925 = other_3924;
    let _e4: Rotor = self_4331;
    let _e5: Motor = other_3925;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Rotor = rotor_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_multi_vector_geometric_quotient(self_4332: Rotor, other_3926: MultiVector) -> MultiVector {
    var self_4333: Rotor;
    var other_3927: MultiVector;

    self_4333 = self_4332;
    other_3927 = other_3926;
    let _e4: Rotor = self_4333;
    let _e5: MultiVector = other_3927;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = rotor_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_multi_vector_transformation(self_4334: Rotor, other_3928: MultiVector) -> MultiVector {
    var self_4335: Rotor;
    var other_3929: MultiVector;

    self_4335 = self_4334;
    other_3929 = other_3928;
    let _e4: Rotor = self_4335;
    let _e5: MultiVector = other_3929;
    let _e6: MultiVector = rotor_multi_vector_geometric_product(_e4, _e5);
    let _e7: Rotor = self_4335;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_plane_geometric_quotient(self_4336: Rotor, other_3930: Plane) -> Flector {
    var self_4337: Rotor;
    var other_3931: Plane;

    self_4337 = self_4336;
    other_3931 = other_3930;
    let _e4: Rotor = self_4337;
    let _e5: Plane = other_3931;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Flector = rotor_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_plane_transformation(self_4338: Rotor, other_3932: Plane) -> Plane {
    var self_4339: Rotor;
    var other_3933: Plane;

    self_4339 = self_4338;
    other_3933 = other_3932;
    let _e4: Rotor = self_4339;
    let _e5: Plane = other_3933;
    let _e6: Flector = rotor_plane_geometric_product(_e4, _e5);
    let _e7: Rotor = self_4339;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn rotor_point_geometric_quotient(self_4340: Rotor, other_3934: Point) -> Flector {
    var self_4341: Rotor;
    var other_3935: Point;

    self_4341 = self_4340;
    other_3935 = other_3934;
    let _e4: Rotor = self_4341;
    let _e5: Point = other_3935;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = rotor_point_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_point_transformation(self_4342: Rotor, other_3936: Point) -> Point {
    var self_4343: Rotor;
    var other_3937: Point;

    self_4343 = self_4342;
    other_3937 = other_3936;
    let _e4: Rotor = self_4343;
    let _e5: Point = other_3937;
    let _e6: Flector = rotor_point_geometric_product(_e4, _e5);
    let _e7: Rotor = self_4343;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn rotor_scalar_geometric_quotient(self_4344: Rotor, other_3938: Scalar) -> Rotor {
    var self_4345: Rotor;
    var other_3939: Scalar;

    self_4345 = self_4344;
    other_3939 = other_3938;
    let _e4: Rotor = self_4345;
    let _e5: Scalar = other_3939;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_translator_geometric_quotient(self_4346: Rotor, other_3940: Translator) -> Rotor {
    var self_4347: Rotor;
    var other_3941: Translator;

    self_4347 = self_4346;
    other_3941 = other_3940;
    let _e4: Rotor = self_4347;
    let _e5: Translator = other_3941;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Rotor = rotor_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_anti_scalar_transformation(self_4348: Scalar, other_3942: AntiScalar) -> AntiScalar {
    var self_4349: Scalar;
    var other_3943: AntiScalar;

    self_4349 = self_4348;
    other_3943 = other_3942;
    let _e4: Scalar = self_4349;
    let _e5: AntiScalar = other_3943;
    let _e6: AntiScalar = scalar_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4349;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_flector_geometric_quotient(self_4350: Scalar, other_3944: Flector) -> Flector {
    var self_4351: Scalar;
    var other_3945: Flector;

    self_4351 = self_4350;
    other_3945 = other_3944;
    let _e4: Scalar = self_4351;
    let _e5: Flector = other_3945;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = scalar_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_flector_transformation(self_4352: Scalar, other_3946: Flector) -> Flector {
    var self_4353: Scalar;
    var other_3947: Flector;

    self_4353 = self_4352;
    other_3947 = other_3946;
    let _e4: Scalar = self_4353;
    let _e5: Flector = other_3947;
    let _e6: Flector = scalar_flector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4353;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Flector = flector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_homogeneous_magnitude_geometric_quotient(self_4354: Scalar, other_3948: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4355: Scalar;
    var other_3949: HomogeneousMagnitude;

    self_4355 = self_4354;
    other_3949 = other_3948;
    let _e4: Scalar = self_4355;
    let _e5: HomogeneousMagnitude = other_3949;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: HomogeneousMagnitude = scalar_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_homogeneous_magnitude_transformation(self_4356: Scalar, other_3950: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4357: Scalar;
    var other_3951: HomogeneousMagnitude;

    self_4357 = self_4356;
    other_3951 = other_3950;
    let _e4: Scalar = self_4357;
    let _e5: HomogeneousMagnitude = other_3951;
    let _e6: HomogeneousMagnitude = scalar_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4357;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_line_geometric_quotient(self_4358: Scalar, other_3952: Line) -> Line {
    var self_4359: Scalar;
    var other_3953: Line;

    self_4359 = self_4358;
    other_3953 = other_3952;
    let _e4: Scalar = self_4359;
    let _e5: Line = other_3953;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = scalar_line_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_line_transformation(self_4360: Scalar, other_3954: Line) -> Line {
    var self_4361: Scalar;
    var other_3955: Line;

    self_4361 = self_4360;
    other_3955 = other_3954;
    let _e4: Scalar = self_4361;
    let _e5: Line = other_3955;
    let _e6: Line = scalar_line_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4361;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Line = line_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_motor_geometric_quotient(self_4362: Scalar, other_3956: Motor) -> Motor {
    var self_4363: Scalar;
    var other_3957: Motor;

    self_4363 = self_4362;
    other_3957 = other_3956;
    let _e4: Scalar = self_4363;
    let _e5: Motor = other_3957;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = scalar_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_motor_transformation(self_4364: Scalar, other_3958: Motor) -> Motor {
    var self_4365: Scalar;
    var other_3959: Motor;

    self_4365 = self_4364;
    other_3959 = other_3958;
    let _e4: Scalar = self_4365;
    let _e5: Motor = other_3959;
    let _e6: Motor = scalar_motor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4365;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Motor = motor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_multi_vector_geometric_quotient(self_4366: Scalar, other_3960: MultiVector) -> MultiVector {
    var self_4367: Scalar;
    var other_3961: MultiVector;

    self_4367 = self_4366;
    other_3961 = other_3960;
    let _e4: Scalar = self_4367;
    let _e5: MultiVector = other_3961;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_multi_vector_transformation(self_4368: Scalar, other_3962: MultiVector) -> MultiVector {
    var self_4369: Scalar;
    var other_3963: MultiVector;

    self_4369 = self_4368;
    other_3963 = other_3962;
    let _e4: Scalar = self_4369;
    let _e5: MultiVector = other_3963;
    let _e6: MultiVector = scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4369;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_plane_geometric_quotient(self_4370: Scalar, other_3964: Plane) -> Plane {
    var self_4371: Scalar;
    var other_3965: Plane;

    self_4371 = self_4370;
    other_3965 = other_3964;
    let _e4: Scalar = self_4371;
    let _e5: Plane = other_3965;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Plane = scalar_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_plane_transformation(self_4372: Scalar, other_3966: Plane) -> Plane {
    var self_4373: Scalar;
    var other_3967: Plane;

    self_4373 = self_4372;
    other_3967 = other_3966;
    let _e4: Scalar = self_4373;
    let _e5: Plane = other_3967;
    let _e6: Plane = scalar_plane_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4373;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Plane = plane_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_point_geometric_quotient(self_4374: Scalar, other_3968: Point) -> Point {
    var self_4375: Scalar;
    var other_3969: Point;

    self_4375 = self_4374;
    other_3969 = other_3968;
    let _e4: Scalar = self_4375;
    let _e5: Point = other_3969;
    let _e6: Point = point_inverse(_e5);
    let _e7: Point = scalar_point_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_point_transformation(self_4376: Scalar, other_3970: Point) -> Point {
    var self_4377: Scalar;
    var other_3971: Point;

    self_4377 = self_4376;
    other_3971 = other_3970;
    let _e4: Scalar = self_4377;
    let _e5: Point = other_3971;
    let _e6: Point = scalar_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4377;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Point = point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_rotor_transformation(self_4378: Scalar, other_3972: Rotor) -> Rotor {
    var self_4379: Scalar;
    var other_3973: Rotor;

    self_4379 = self_4378;
    other_3973 = other_3972;
    let _e4: Scalar = self_4379;
    let _e5: Rotor = other_3973;
    let _e6: Rotor = scalar_rotor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4379;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Rotor = rotor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_powi(self_4380: Scalar, exponent_4: i32) -> Scalar {
    var self_4381: Scalar;
    var exponent_5: i32;
    var local_2: Scalar;
    var x_2: Scalar;
    var y_2: Scalar;
    var n_2: i32;

    self_4381 = self_4380;
    exponent_5 = exponent_4;
    let _e4: i32 = exponent_5;
    if (_e4 == 0) {
        {
            let _e7: Scalar = scalar_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_5;
    if (_e8 < 0) {
        let _e11: Scalar = self_4381;
        let _e12: Scalar = scalar_inverse(_e11);
        local_2 = _e12;
    } else {
        let _e14: Scalar = self_4381;
        local_2 = _e14;
    }
    let _e15: Scalar = local_2;
    x_2 = _e15;
    let _e17: Scalar = scalar_one();
    y_2 = _e17;
    let _e19: i32 = exponent_5;
    n_2 = abs(_e19);
    loop {
        let _e23: i32 = n_2;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_2;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Scalar = x_2;
                    let _e32: Scalar = y_2;
                    let _e33: Scalar = scalar_scalar_geometric_product(_e31, _e32);
                    y_2 = _e33;
                }
            }
            let _e34: Scalar = x_2;
            let _e35: Scalar = x_2;
            let _e36: Scalar = scalar_scalar_geometric_product(_e34, _e35);
            x_2 = _e36;
            let _e37: i32 = n_2;
            n_2 = (_e37 >> 1u);
        }
    }
    let _e40: Scalar = x_2;
    let _e41: Scalar = y_2;
    let _e42: Scalar = scalar_scalar_geometric_product(_e40, _e41);
    return _e42;
}

fn scalar_scalar_geometric_quotient(self_4382: Scalar, other_3974: Scalar) -> Scalar {
    var self_4383: Scalar;
    var other_3975: Scalar;

    self_4383 = self_4382;
    other_3975 = other_3974;
    let _e4: Scalar = self_4383;
    let _e5: Scalar = other_3975;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_scalar_transformation(self_4384: Scalar, other_3976: Scalar) -> Scalar {
    var self_4385: Scalar;
    var other_3977: Scalar;

    self_4385 = self_4384;
    other_3977 = other_3976;
    let _e4: Scalar = self_4385;
    let _e5: Scalar = other_3977;
    let _e6: Scalar = scalar_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4385;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Scalar = scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_translator_geometric_quotient(self_4386: Scalar, other_3978: Translator) -> Translator {
    var self_4387: Scalar;
    var other_3979: Translator;

    self_4387 = self_4386;
    other_3979 = other_3978;
    let _e4: Scalar = self_4387;
    let _e5: Translator = other_3979;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Translator = scalar_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_translator_transformation(self_4388: Scalar, other_3980: Translator) -> Translator {
    var self_4389: Scalar;
    var other_3981: Translator;

    self_4389 = self_4388;
    other_3981 = other_3980;
    let _e4: Scalar = self_4389;
    let _e5: Translator = other_3981;
    let _e6: Translator = scalar_translator_geometric_product(_e4, _e5);
    let _e7: Scalar = self_4389;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Translator = translator_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_anti_scalar_transformation(self_4390: Translator, other_3982: AntiScalar) -> AntiScalar {
    var self_4391: Translator;
    var other_3983: AntiScalar;

    self_4391 = self_4390;
    other_3983 = other_3982;
    let _e4: Translator = self_4391;
    let _e5: AntiScalar = other_3983;
    let _e6: Rotor = translator_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Translator = self_4391;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Rotor = rotor_translator_geometric_product(_e6, _e8);
    let _e10: AntiScalar = rotor_anti_scalar_into(_e9);
    return _e10;
}

fn translator_flector_geometric_quotient(self_4392: Translator, other_3984: Flector) -> Flector {
    var self_4393: Translator;
    var other_3985: Flector;

    self_4393 = self_4392;
    other_3985 = other_3984;
    let _e4: Translator = self_4393;
    let _e5: Flector = other_3985;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = translator_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_flector_transformation(self_4394: Translator, other_3986: Flector) -> Flector {
    var self_4395: Translator;
    var other_3987: Flector;

    self_4395 = self_4394;
    other_3987 = other_3986;
    let _e4: Translator = self_4395;
    let _e5: Flector = other_3987;
    let _e6: Flector = translator_flector_geometric_product(_e4, _e5);
    let _e7: Translator = self_4395;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_homogeneous_magnitude_geometric_quotient(self_4396: Translator, other_3988: HomogeneousMagnitude) -> Motor {
    var self_4397: Translator;
    var other_3989: HomogeneousMagnitude;

    self_4397 = self_4396;
    other_3989 = other_3988;
    let _e4: Translator = self_4397;
    let _e5: HomogeneousMagnitude = other_3989;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Motor = translator_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_homogeneous_magnitude_transformation(self_4398: Translator, other_3990: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4399: Translator;
    var other_3991: HomogeneousMagnitude;

    self_4399 = self_4398;
    other_3991 = other_3990;
    let _e4: Translator = self_4399;
    let _e5: HomogeneousMagnitude = other_3991;
    let _e6: Motor = translator_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Translator = self_4399;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = motor_translator_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn translator_line_geometric_quotient(self_4400: Translator, other_3992: Line) -> MultiVector {
    var self_4401: Translator;
    var other_3993: Line;

    self_4401 = self_4400;
    other_3993 = other_3992;
    let _e4: Translator = self_4401;
    let _e5: Line = other_3993;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = translator_line_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_line_transformation(self_4402: Translator, other_3994: Line) -> Line {
    var self_4403: Translator;
    var other_3995: Line;

    self_4403 = self_4402;
    other_3995 = other_3994;
    let _e4: Translator = self_4403;
    let _e5: Line = other_3995;
    let _e6: MultiVector = translator_line_geometric_product(_e4, _e5);
    let _e7: Translator = self_4403;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn translator_motor_geometric_quotient(self_4404: Translator, other_3996: Motor) -> MultiVector {
    var self_4405: Translator;
    var other_3997: Motor;

    self_4405 = self_4404;
    other_3997 = other_3996;
    let _e4: Translator = self_4405;
    let _e5: Motor = other_3997;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = translator_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_motor_transformation(self_4406: Translator, other_3998: Motor) -> Motor {
    var self_4407: Translator;
    var other_3999: Motor;

    self_4407 = self_4406;
    other_3999 = other_3998;
    let _e4: Translator = self_4407;
    let _e5: Motor = other_3999;
    let _e6: MultiVector = translator_motor_geometric_product(_e4, _e5);
    let _e7: Translator = self_4407;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn translator_multi_vector_geometric_quotient(self_4408: Translator, other_4000: MultiVector) -> MultiVector {
    var self_4409: Translator;
    var other_4001: MultiVector;

    self_4409 = self_4408;
    other_4001 = other_4000;
    let _e4: Translator = self_4409;
    let _e5: MultiVector = other_4001;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = translator_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_multi_vector_transformation(self_4410: Translator, other_4002: MultiVector) -> MultiVector {
    var self_4411: Translator;
    var other_4003: MultiVector;

    self_4411 = self_4410;
    other_4003 = other_4002;
    let _e4: Translator = self_4411;
    let _e5: MultiVector = other_4003;
    let _e6: MultiVector = translator_multi_vector_geometric_product(_e4, _e5);
    let _e7: Translator = self_4411;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_plane_geometric_quotient(self_4412: Translator, other_4004: Plane) -> Flector {
    var self_4413: Translator;
    var other_4005: Plane;

    self_4413 = self_4412;
    other_4005 = other_4004;
    let _e4: Translator = self_4413;
    let _e5: Plane = other_4005;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Flector = translator_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_plane_transformation(self_4414: Translator, other_4006: Plane) -> Plane {
    var self_4415: Translator;
    var other_4007: Plane;

    self_4415 = self_4414;
    other_4007 = other_4006;
    let _e4: Translator = self_4415;
    let _e5: Plane = other_4007;
    let _e6: Flector = translator_plane_geometric_product(_e4, _e5);
    let _e7: Translator = self_4415;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn translator_point_geometric_quotient(self_4416: Translator, other_4008: Point) -> Flector {
    var self_4417: Translator;
    var other_4009: Point;

    self_4417 = self_4416;
    other_4009 = other_4008;
    let _e4: Translator = self_4417;
    let _e5: Point = other_4009;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = translator_point_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_point_transformation(self_4418: Translator, other_4010: Point) -> Point {
    var self_4419: Translator;
    var other_4011: Point;

    self_4419 = self_4418;
    other_4011 = other_4010;
    let _e4: Translator = self_4419;
    let _e5: Point = other_4011;
    let _e6: Flector = translator_point_geometric_product(_e4, _e5);
    let _e7: Translator = self_4419;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn translator_rotor_transformation(self_4420: Translator, other_4012: Rotor) -> Rotor {
    var self_4421: Translator;
    var other_4013: Rotor;

    self_4421 = self_4420;
    other_4013 = other_4012;
    let _e4: Translator = self_4421;
    let _e5: Rotor = other_4013;
    let _e6: Rotor = translator_rotor_geometric_product(_e4, _e5);
    let _e7: Translator = self_4421;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Rotor = rotor_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_scalar_geometric_quotient(self_4422: Translator, other_4014: Scalar) -> Translator {
    var self_4423: Translator;
    var other_4015: Scalar;

    self_4423 = self_4422;
    other_4015 = other_4014;
    let _e4: Translator = self_4423;
    let _e5: Scalar = other_4015;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Translator = translator_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_scalar_transformation(self_4424: Translator, other_4016: Scalar) -> Scalar {
    var self_4425: Translator;
    var other_4017: Scalar;

    self_4425 = self_4424;
    other_4017 = other_4016;
    let _e4: Translator = self_4425;
    let _e5: Scalar = other_4017;
    let _e6: Translator = translator_scalar_geometric_product(_e4, _e5);
    let _e7: Translator = self_4425;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = translator_translator_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn translator_translator_geometric_quotient(self_4426: Translator, other_4018: Translator) -> MultiVector {
    var self_4427: Translator;
    var other_4019: Translator;

    self_4427 = self_4426;
    other_4019 = other_4018;
    let _e4: Translator = self_4427;
    let _e5: Translator = other_4019;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = translator_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_translator_transformation(self_4428: Translator, other_4020: Translator) -> Translator {
    var self_4429: Translator;
    var other_4021: Translator;

    self_4429 = self_4428;
    other_4021 = other_4020;
    let _e4: Translator = self_4429;
    let _e5: Translator = other_4021;
    let _e6: MultiVector = translator_translator_geometric_product(_e4, _e5);
    let _e7: Translator = self_4429;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn flector_anti_scalar_sandwich(self_4430: Flector, other_4022: AntiScalar) -> AntiScalar {
    var self_4431: Flector;
    var other_4023: AntiScalar;

    self_4431 = self_4430;
    other_4023 = other_4022;
    let _e4: Flector = self_4431;
    let _e5: AntiScalar = other_4023;
    let _e6: Flector = flector_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4431;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn flector_flector_sandwich(self_4432: Flector, other_4024: Flector) -> Flector {
    var self_4433: Flector;
    var other_4025: Flector;

    self_4433 = self_4432;
    other_4025 = other_4024;
    let _e4: Flector = self_4433;
    let _e5: Flector = other_4025;
    let _e6: MultiVector = flector_flector_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4433;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn flector_homogeneous_magnitude_sandwich(self_4434: Flector, other_4026: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4435: Flector;
    var other_4027: HomogeneousMagnitude;

    self_4435 = self_4434;
    other_4027 = other_4026;
    let _e4: Flector = self_4435;
    let _e5: HomogeneousMagnitude = other_4027;
    let _e6: Flector = flector_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4435;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn flector_line_sandwich(self_4436: Flector, other_4028: Line) -> Line {
    var self_4437: Flector;
    var other_4029: Line;

    self_4437 = self_4436;
    other_4029 = other_4028;
    let _e4: Flector = self_4437;
    let _e5: Line = other_4029;
    let _e6: Flector = flector_line_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4437;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn flector_motor_sandwich(self_4438: Flector, other_4030: Motor) -> Motor {
    var self_4439: Flector;
    var other_4031: Motor;

    self_4439 = self_4438;
    other_4031 = other_4030;
    let _e4: Flector = self_4439;
    let _e5: Motor = other_4031;
    let _e6: Flector = flector_motor_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4439;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn flector_plane_sandwich(self_4440: Flector, other_4032: Plane) -> Plane {
    var self_4441: Flector;
    var other_4033: Plane;

    self_4441 = self_4440;
    other_4033 = other_4032;
    let _e4: Flector = self_4441;
    let _e5: Plane = other_4033;
    let _e6: MultiVector = flector_plane_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4441;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn flector_point_sandwich(self_4442: Flector, other_4034: Point) -> Point {
    var self_4443: Flector;
    var other_4035: Point;

    self_4443 = self_4442;
    other_4035 = other_4034;
    let _e4: Flector = self_4443;
    let _e5: Point = other_4035;
    let _e6: MultiVector = flector_point_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4443;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn flector_rotor_sandwich(self_4444: Flector, other_4036: Rotor) -> Rotor {
    var self_4445: Flector;
    var other_4037: Rotor;

    self_4445 = self_4444;
    other_4037 = other_4036;
    let _e4: Flector = self_4445;
    let _e5: Rotor = other_4037;
    let _e6: Flector = flector_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4445;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn flector_scalar_sandwich(self_4446: Flector, other_4038: Scalar) -> Scalar {
    var self_4447: Flector;
    var other_4039: Scalar;

    self_4447 = self_4446;
    other_4039 = other_4038;
    let _e4: Flector = self_4447;
    let _e5: Scalar = other_4039;
    let _e6: Flector = flector_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4447;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn flector_translator_sandwich(self_4448: Flector, other_4040: Translator) -> Translator {
    var self_4449: Flector;
    var other_4041: Translator;

    self_4449 = self_4448;
    other_4041 = other_4040;
    let _e4: Flector = self_4449;
    let _e5: Translator = other_4041;
    let _e6: Flector = flector_translator_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_4449;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = flector_flector_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_anti_scalar_sandwich(self_4450: HomogeneousMagnitude, other_4042: AntiScalar) -> AntiScalar {
    var self_4451: HomogeneousMagnitude;
    var other_4043: AntiScalar;

    self_4451 = self_4450;
    other_4043 = other_4042;
    let _e4: HomogeneousMagnitude = self_4451;
    let _e5: AntiScalar = other_4043;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4451;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = homogeneous_magnitude_anti_scalar_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_motor_sandwich(self_4452: HomogeneousMagnitude, other_4044: Motor) -> Motor {
    var self_4453: HomogeneousMagnitude;
    var other_4045: Motor;

    self_4453 = self_4452;
    other_4045 = other_4044;
    let _e4: HomogeneousMagnitude = self_4453;
    let _e5: Motor = other_4045;
    let _e6: MultiVector = homogeneous_magnitude_motor_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4453;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_plane_sandwich(self_4454: HomogeneousMagnitude, other_4046: Plane) -> Plane {
    var self_4455: HomogeneousMagnitude;
    var other_4047: Plane;

    self_4455 = self_4454;
    other_4047 = other_4046;
    let _e4: HomogeneousMagnitude = self_4455;
    let _e5: Plane = other_4047;
    let _e6: Flector = homogeneous_magnitude_plane_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4455;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_point_sandwich(self_4456: HomogeneousMagnitude, other_4048: Point) -> Point {
    var self_4457: HomogeneousMagnitude;
    var other_4049: Point;

    self_4457 = self_4456;
    other_4049 = other_4048;
    let _e4: HomogeneousMagnitude = self_4457;
    let _e5: Point = other_4049;
    let _e6: Flector = homogeneous_magnitude_point_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4457;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_rotor_sandwich(self_4458: HomogeneousMagnitude, other_4050: Rotor) -> Rotor {
    var self_4459: HomogeneousMagnitude;
    var other_4051: Rotor;

    self_4459 = self_4458;
    other_4051 = other_4050;
    let _e4: HomogeneousMagnitude = self_4459;
    let _e5: Rotor = other_4051;
    let _e6: MultiVector = homogeneous_magnitude_rotor_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4459;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_translator_sandwich(self_4460: HomogeneousMagnitude, other_4052: Translator) -> Translator {
    var self_4461: HomogeneousMagnitude;
    var other_4053: Translator;

    self_4461 = self_4460;
    other_4053 = other_4052;
    let _e4: HomogeneousMagnitude = self_4461;
    let _e5: Translator = other_4053;
    let _e6: MultiVector = homogeneous_magnitude_translator_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_4461;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn line_anti_scalar_sandwich(self_4462: Line, other_4054: AntiScalar) -> AntiScalar {
    var self_4463: Line;
    var other_4055: AntiScalar;

    self_4463 = self_4462;
    other_4055 = other_4054;
    let _e4: Line = self_4463;
    let _e5: AntiScalar = other_4055;
    let _e6: Line = line_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4463;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = line_line_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn line_homogeneous_magnitude_sandwich(self_4464: Line, other_4056: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4465: Line;
    var other_4057: HomogeneousMagnitude;

    self_4465 = self_4464;
    other_4057 = other_4056;
    let _e4: Line = self_4465;
    let _e5: HomogeneousMagnitude = other_4057;
    let _e6: Line = line_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4465;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = line_line_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn line_line_sandwich(self_4466: Line, other_4058: Line) -> Line {
    var self_4467: Line;
    var other_4059: Line;

    self_4467 = self_4466;
    other_4059 = other_4058;
    let _e4: Line = self_4467;
    let _e5: Line = other_4059;
    let _e6: MultiVector = line_line_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4467;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn line_motor_sandwich(self_4468: Line, other_4060: Motor) -> Motor {
    var self_4469: Line;
    var other_4061: Motor;

    self_4469 = self_4468;
    other_4061 = other_4060;
    let _e4: Line = self_4469;
    let _e5: Motor = other_4061;
    let _e6: MultiVector = line_motor_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4469;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn line_plane_sandwich(self_4470: Line, other_4062: Plane) -> Plane {
    var self_4471: Line;
    var other_4063: Plane;

    self_4471 = self_4470;
    other_4063 = other_4062;
    let _e4: Line = self_4471;
    let _e5: Plane = other_4063;
    let _e6: Flector = line_plane_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4471;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: Flector = flector_line_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn line_point_sandwich(self_4472: Line, other_4064: Point) -> Point {
    var self_4473: Line;
    var other_4065: Point;

    self_4473 = self_4472;
    other_4065 = other_4064;
    let _e4: Line = self_4473;
    let _e5: Point = other_4065;
    let _e6: Flector = line_point_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4473;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: Flector = flector_line_geometric_anti_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn line_rotor_sandwich(self_4474: Line, other_4066: Rotor) -> Rotor {
    var self_4475: Line;
    var other_4067: Rotor;

    self_4475 = self_4474;
    other_4067 = other_4066;
    let _e4: Line = self_4475;
    let _e5: Rotor = other_4067;
    let _e6: MultiVector = line_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4475;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn line_scalar_sandwich(self_4476: Line, other_4068: Scalar) -> Scalar {
    var self_4477: Line;
    var other_4069: Scalar;

    self_4477 = self_4476;
    other_4069 = other_4068;
    let _e4: Line = self_4477;
    let _e5: Scalar = other_4069;
    let _e6: Translator = line_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4477;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = translator_line_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn line_translator_sandwich(self_4478: Line, other_4070: Translator) -> Translator {
    var self_4479: Line;
    var other_4071: Translator;

    self_4479 = self_4478;
    other_4071 = other_4070;
    let _e4: Line = self_4479;
    let _e5: Translator = other_4071;
    let _e6: MultiVector = line_translator_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_4479;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn motor_anti_scalar_sandwich(self_4480: Motor, other_4072: AntiScalar) -> AntiScalar {
    var self_4481: Motor;
    var other_4073: AntiScalar;

    self_4481 = self_4480;
    other_4073 = other_4072;
    let _e4: Motor = self_4481;
    let _e5: AntiScalar = other_4073;
    let _e6: Motor = motor_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4481;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = motor_motor_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn motor_homogeneous_magnitude_sandwich(self_4482: Motor, other_4074: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4483: Motor;
    var other_4075: HomogeneousMagnitude;

    self_4483 = self_4482;
    other_4075 = other_4074;
    let _e4: Motor = self_4483;
    let _e5: HomogeneousMagnitude = other_4075;
    let _e6: MultiVector = motor_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4483;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn motor_line_sandwich(self_4484: Motor, other_4076: Line) -> Line {
    var self_4485: Motor;
    var other_4077: Line;

    self_4485 = self_4484;
    other_4077 = other_4076;
    let _e4: Motor = self_4485;
    let _e5: Line = other_4077;
    let _e6: MultiVector = motor_line_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4485;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn motor_motor_sandwich(self_4486: Motor, other_4078: Motor) -> Motor {
    var self_4487: Motor;
    var other_4079: Motor;

    self_4487 = self_4486;
    other_4079 = other_4078;
    let _e4: Motor = self_4487;
    let _e5: Motor = other_4079;
    let _e6: MultiVector = motor_motor_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4487;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn motor_plane_sandwich(self_4488: Motor, other_4080: Plane) -> Plane {
    var self_4489: Motor;
    var other_4081: Plane;

    self_4489 = self_4488;
    other_4081 = other_4080;
    let _e4: Motor = self_4489;
    let _e5: Plane = other_4081;
    let _e6: Flector = motor_plane_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4489;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn motor_point_sandwich(self_4490: Motor, other_4082: Point) -> Point {
    var self_4491: Motor;
    var other_4083: Point;

    self_4491 = self_4490;
    other_4083 = other_4082;
    let _e4: Motor = self_4491;
    let _e5: Point = other_4083;
    let _e6: Flector = motor_point_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4491;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn motor_rotor_sandwich(self_4492: Motor, other_4084: Rotor) -> Rotor {
    var self_4493: Motor;
    var other_4085: Rotor;

    self_4493 = self_4492;
    other_4085 = other_4084;
    let _e4: Motor = self_4493;
    let _e5: Rotor = other_4085;
    let _e6: MultiVector = motor_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4493;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn motor_scalar_sandwich(self_4494: Motor, other_4086: Scalar) -> Scalar {
    var self_4495: Motor;
    var other_4087: Scalar;

    self_4495 = self_4494;
    other_4087 = other_4086;
    let _e4: Motor = self_4495;
    let _e5: Scalar = other_4087;
    let _e6: MultiVector = motor_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4495;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn motor_translator_sandwich(self_4496: Motor, other_4088: Translator) -> Translator {
    var self_4497: Motor;
    var other_4089: Translator;

    self_4497 = self_4496;
    other_4089 = other_4088;
    let _e4: Motor = self_4497;
    let _e5: Translator = other_4089;
    let _e6: MultiVector = motor_translator_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_4497;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn multi_vector_anti_scalar_sandwich(self_4498: MultiVector, other_4090: AntiScalar) -> AntiScalar {
    var self_4499: MultiVector;
    var other_4091: AntiScalar;

    self_4499 = self_4498;
    other_4091 = other_4090;
    let _e4: MultiVector = self_4499;
    let _e5: AntiScalar = other_4091;
    let _e6: MultiVector = multi_vector_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4499;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn multi_vector_flector_sandwich(self_4500: MultiVector, other_4092: Flector) -> Flector {
    var self_4501: MultiVector;
    var other_4093: Flector;

    self_4501 = self_4500;
    other_4093 = other_4092;
    let _e4: MultiVector = self_4501;
    let _e5: Flector = other_4093;
    let _e6: MultiVector = multi_vector_flector_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4501;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn multi_vector_homogeneous_magnitude_sandwich(self_4502: MultiVector, other_4094: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4503: MultiVector;
    var other_4095: HomogeneousMagnitude;

    self_4503 = self_4502;
    other_4095 = other_4094;
    let _e4: MultiVector = self_4503;
    let _e5: HomogeneousMagnitude = other_4095;
    let _e6: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4503;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn multi_vector_line_sandwich(self_4504: MultiVector, other_4096: Line) -> Line {
    var self_4505: MultiVector;
    var other_4097: Line;

    self_4505 = self_4504;
    other_4097 = other_4096;
    let _e4: MultiVector = self_4505;
    let _e5: Line = other_4097;
    let _e6: MultiVector = multi_vector_line_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4505;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn multi_vector_motor_sandwich(self_4506: MultiVector, other_4098: Motor) -> Motor {
    var self_4507: MultiVector;
    var other_4099: Motor;

    self_4507 = self_4506;
    other_4099 = other_4098;
    let _e4: MultiVector = self_4507;
    let _e5: Motor = other_4099;
    let _e6: MultiVector = multi_vector_motor_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4507;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn multi_vector_plane_sandwich(self_4508: MultiVector, other_4100: Plane) -> Plane {
    var self_4509: MultiVector;
    var other_4101: Plane;

    self_4509 = self_4508;
    other_4101 = other_4100;
    let _e4: MultiVector = self_4509;
    let _e5: Plane = other_4101;
    let _e6: MultiVector = multi_vector_plane_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4509;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn multi_vector_point_sandwich(self_4510: MultiVector, other_4102: Point) -> Point {
    var self_4511: MultiVector;
    var other_4103: Point;

    self_4511 = self_4510;
    other_4103 = other_4102;
    let _e4: MultiVector = self_4511;
    let _e5: Point = other_4103;
    let _e6: MultiVector = multi_vector_point_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4511;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn multi_vector_rotor_sandwich(self_4512: MultiVector, other_4104: Rotor) -> Rotor {
    var self_4513: MultiVector;
    var other_4105: Rotor;

    self_4513 = self_4512;
    other_4105 = other_4104;
    let _e4: MultiVector = self_4513;
    let _e5: Rotor = other_4105;
    let _e6: MultiVector = multi_vector_rotor_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4513;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn multi_vector_scalar_sandwich(self_4514: MultiVector, other_4106: Scalar) -> Scalar {
    var self_4515: MultiVector;
    var other_4107: Scalar;

    self_4515 = self_4514;
    other_4107 = other_4106;
    let _e4: MultiVector = self_4515;
    let _e5: Scalar = other_4107;
    let _e6: MultiVector = multi_vector_scalar_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4515;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn multi_vector_translator_sandwich(self_4516: MultiVector, other_4108: Translator) -> Translator {
    var self_4517: MultiVector;
    var other_4109: Translator;

    self_4517 = self_4516;
    other_4109 = other_4108;
    let _e4: MultiVector = self_4517;
    let _e5: Translator = other_4109;
    let _e6: MultiVector = multi_vector_translator_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_4517;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn plane_anti_scalar_sandwich(self_4518: Plane, other_4110: AntiScalar) -> AntiScalar {
    var self_4519: Plane;
    var other_4111: AntiScalar;

    self_4519 = self_4518;
    other_4111 = other_4110;
    let _e4: Plane = self_4519;
    let _e5: AntiScalar = other_4111;
    let _e6: Plane = plane_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4519;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: Motor = plane_plane_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn plane_flector_sandwich(self_4520: Plane, other_4112: Flector) -> Flector {
    var self_4521: Plane;
    var other_4113: Flector;

    self_4521 = self_4520;
    other_4113 = other_4112;
    let _e4: Plane = self_4521;
    let _e5: Flector = other_4113;
    let _e6: MultiVector = plane_flector_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4521;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn plane_homogeneous_magnitude_sandwich(self_4522: Plane, other_4114: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4523: Plane;
    var other_4115: HomogeneousMagnitude;

    self_4523 = self_4522;
    other_4115 = other_4114;
    let _e4: Plane = self_4523;
    let _e5: HomogeneousMagnitude = other_4115;
    let _e6: Flector = plane_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4523;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn plane_line_sandwich(self_4524: Plane, other_4116: Line) -> Line {
    var self_4525: Plane;
    var other_4117: Line;

    self_4525 = self_4524;
    other_4117 = other_4116;
    let _e4: Plane = self_4525;
    let _e5: Line = other_4117;
    let _e6: Flector = plane_line_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4525;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn plane_motor_sandwich(self_4526: Plane, other_4118: Motor) -> Motor {
    var self_4527: Plane;
    var other_4119: Motor;

    self_4527 = self_4526;
    other_4119 = other_4118;
    let _e4: Plane = self_4527;
    let _e5: Motor = other_4119;
    let _e6: Flector = plane_motor_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4527;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn plane_plane_sandwich(self_4528: Plane, other_4120: Plane) -> Plane {
    var self_4529: Plane;
    var other_4121: Plane;

    self_4529 = self_4528;
    other_4121 = other_4120;
    let _e4: Plane = self_4529;
    let _e5: Plane = other_4121;
    let _e6: Motor = plane_plane_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4529;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: Flector = motor_plane_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn plane_point_sandwich(self_4530: Plane, other_4122: Point) -> Point {
    var self_4531: Plane;
    var other_4123: Point;

    self_4531 = self_4530;
    other_4123 = other_4122;
    let _e4: Plane = self_4531;
    let _e5: Point = other_4123;
    let _e6: MultiVector = plane_point_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4531;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn plane_rotor_sandwich(self_4532: Plane, other_4124: Rotor) -> Rotor {
    var self_4533: Plane;
    var other_4125: Rotor;

    self_4533 = self_4532;
    other_4125 = other_4124;
    let _e4: Plane = self_4533;
    let _e5: Rotor = other_4125;
    let _e6: Flector = plane_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4533;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn plane_scalar_sandwich(self_4534: Plane, other_4126: Scalar) -> Scalar {
    var self_4535: Plane;
    var other_4127: Scalar;

    self_4535 = self_4534;
    other_4127 = other_4126;
    let _e4: Plane = self_4535;
    let _e5: Scalar = other_4127;
    let _e6: Point = plane_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4535;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = point_plane_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn plane_translator_sandwich(self_4536: Plane, other_4128: Translator) -> Translator {
    var self_4537: Plane;
    var other_4129: Translator;

    self_4537 = self_4536;
    other_4129 = other_4128;
    let _e4: Plane = self_4537;
    let _e5: Translator = other_4129;
    let _e6: Flector = plane_translator_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_4537;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = flector_plane_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn point_anti_scalar_sandwich(self_4538: Point, other_4130: AntiScalar) -> AntiScalar {
    var self_4539: Point;
    var other_4131: AntiScalar;

    self_4539 = self_4538;
    other_4131 = other_4130;
    let _e4: Point = self_4539;
    let _e5: AntiScalar = other_4131;
    let _e6: Point = point_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4539;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: Translator = point_point_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = translator_anti_scalar_into(_e9);
    return _e10;
}

fn point_flector_sandwich(self_4540: Point, other_4132: Flector) -> Flector {
    var self_4541: Point;
    var other_4133: Flector;

    self_4541 = self_4540;
    other_4133 = other_4132;
    let _e4: Point = self_4541;
    let _e5: Flector = other_4133;
    let _e6: MultiVector = point_flector_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4541;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_anti_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn point_homogeneous_magnitude_sandwich(self_4542: Point, other_4134: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4543: Point;
    var other_4135: HomogeneousMagnitude;

    self_4543 = self_4542;
    other_4135 = other_4134;
    let _e4: Point = self_4543;
    let _e5: HomogeneousMagnitude = other_4135;
    let _e6: Flector = point_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4543;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn point_line_sandwich(self_4544: Point, other_4136: Line) -> Line {
    var self_4545: Point;
    var other_4137: Line;

    self_4545 = self_4544;
    other_4137 = other_4136;
    let _e4: Point = self_4545;
    let _e5: Line = other_4137;
    let _e6: Flector = point_line_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4545;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn point_motor_sandwich(self_4546: Point, other_4138: Motor) -> Motor {
    var self_4547: Point;
    var other_4139: Motor;

    self_4547 = self_4546;
    other_4139 = other_4138;
    let _e4: Point = self_4547;
    let _e5: Motor = other_4139;
    let _e6: Flector = point_motor_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4547;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn point_plane_sandwich(self_4548: Point, other_4140: Plane) -> Plane {
    var self_4549: Point;
    var other_4141: Plane;

    self_4549 = self_4548;
    other_4141 = other_4140;
    let _e4: Point = self_4549;
    let _e5: Plane = other_4141;
    let _e6: MultiVector = point_plane_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4549;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_anti_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn point_rotor_sandwich(self_4550: Point, other_4142: Rotor) -> Rotor {
    var self_4551: Point;
    var other_4143: Rotor;

    self_4551 = self_4550;
    other_4143 = other_4142;
    let _e4: Point = self_4551;
    let _e5: Rotor = other_4143;
    let _e6: Flector = point_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4551;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = flector_point_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn point_scalar_sandwich(self_4552: Point, other_4144: Scalar) -> Scalar {
    var self_4553: Point;
    var other_4145: Scalar;

    self_4553 = self_4552;
    other_4145 = other_4144;
    let _e4: Point = self_4553;
    let _e5: Scalar = other_4145;
    let _e6: Plane = point_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_4553;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = plane_point_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn rotor_anti_scalar_sandwich(self_4554: Rotor, other_4146: AntiScalar) -> AntiScalar {
    var self_4555: Rotor;
    var other_4147: AntiScalar;

    self_4555 = self_4554;
    other_4147 = other_4146;
    let _e4: Rotor = self_4555;
    let _e5: AntiScalar = other_4147;
    let _e6: Rotor = rotor_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4555;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Rotor = rotor_rotor_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = rotor_anti_scalar_into(_e9);
    return _e10;
}

fn rotor_homogeneous_magnitude_sandwich(self_4556: Rotor, other_4148: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4557: Rotor;
    var other_4149: HomogeneousMagnitude;

    self_4557 = self_4556;
    other_4149 = other_4148;
    let _e4: Rotor = self_4557;
    let _e5: HomogeneousMagnitude = other_4149;
    let _e6: MultiVector = rotor_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4557;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn rotor_line_sandwich(self_4558: Rotor, other_4150: Line) -> Line {
    var self_4559: Rotor;
    var other_4151: Line;

    self_4559 = self_4558;
    other_4151 = other_4150;
    let _e4: Rotor = self_4559;
    let _e5: Line = other_4151;
    let _e6: MultiVector = rotor_line_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4559;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn rotor_motor_sandwich(self_4560: Rotor, other_4152: Motor) -> Motor {
    var self_4561: Rotor;
    var other_4153: Motor;

    self_4561 = self_4560;
    other_4153 = other_4152;
    let _e4: Rotor = self_4561;
    let _e5: Motor = other_4153;
    let _e6: MultiVector = rotor_motor_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4561;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn rotor_plane_sandwich(self_4562: Rotor, other_4154: Plane) -> Plane {
    var self_4563: Rotor;
    var other_4155: Plane;

    self_4563 = self_4562;
    other_4155 = other_4154;
    let _e4: Rotor = self_4563;
    let _e5: Plane = other_4155;
    let _e6: Flector = rotor_plane_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4563;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn rotor_point_sandwich(self_4564: Rotor, other_4156: Point) -> Point {
    var self_4565: Rotor;
    var other_4157: Point;

    self_4565 = self_4564;
    other_4157 = other_4156;
    let _e4: Rotor = self_4565;
    let _e5: Point = other_4157;
    let _e6: Flector = rotor_point_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4565;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn rotor_scalar_sandwich(self_4566: Rotor, other_4158: Scalar) -> Scalar {
    var self_4567: Rotor;
    var other_4159: Scalar;

    self_4567 = self_4566;
    other_4159 = other_4158;
    let _e4: Rotor = self_4567;
    let _e5: Scalar = other_4159;
    let _e6: MultiVector = rotor_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4567;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn rotor_translator_sandwich(self_4568: Rotor, other_4160: Translator) -> Translator {
    var self_4569: Rotor;
    var other_4161: Translator;

    self_4569 = self_4568;
    other_4161 = other_4160;
    let _e4: Rotor = self_4569;
    let _e5: Translator = other_4161;
    let _e6: MultiVector = rotor_translator_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_4569;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn scalar_motor_sandwich(self_4570: Scalar, other_4162: Motor) -> Motor {
    var self_4571: Scalar;
    var other_4163: Motor;

    self_4571 = self_4570;
    other_4163 = other_4162;
    let _e4: Scalar = self_4571;
    let _e5: Motor = other_4163;
    let _e6: MultiVector = scalar_motor_geometric_anti_product(_e4, _e5);
    let _e7: Scalar = self_4571;
    let _e8: Scalar = scalar_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn scalar_rotor_sandwich(self_4572: Scalar, other_4164: Rotor) -> Rotor {
    var self_4573: Scalar;
    var other_4165: Rotor;

    self_4573 = self_4572;
    other_4165 = other_4164;
    let _e4: Scalar = self_4573;
    let _e5: Rotor = other_4165;
    let _e6: MultiVector = scalar_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Scalar = self_4573;
    let _e8: Scalar = scalar_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn translator_anti_scalar_sandwich(self_4574: Translator, other_4166: AntiScalar) -> AntiScalar {
    var self_4575: Translator;
    var other_4167: AntiScalar;

    self_4575 = self_4574;
    other_4167 = other_4166;
    let _e4: Translator = self_4575;
    let _e5: AntiScalar = other_4167;
    let _e6: Translator = translator_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4575;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Translator = translator_translator_geometric_anti_product(_e6, _e8);
    let _e10: AntiScalar = translator_anti_scalar_into(_e9);
    return _e10;
}

fn translator_homogeneous_magnitude_sandwich(self_4576: Translator, other_4168: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4577: Translator;
    var other_4169: HomogeneousMagnitude;

    self_4577 = self_4576;
    other_4169 = other_4168;
    let _e4: Translator = self_4577;
    let _e5: HomogeneousMagnitude = other_4169;
    let _e6: MultiVector = translator_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4577;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_anti_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn translator_line_sandwich(self_4578: Translator, other_4170: Line) -> Line {
    var self_4579: Translator;
    var other_4171: Line;

    self_4579 = self_4578;
    other_4171 = other_4170;
    let _e4: Translator = self_4579;
    let _e5: Line = other_4171;
    let _e6: MultiVector = translator_line_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4579;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_anti_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn translator_motor_sandwich(self_4580: Translator, other_4172: Motor) -> Motor {
    var self_4581: Translator;
    var other_4173: Motor;

    self_4581 = self_4580;
    other_4173 = other_4172;
    let _e4: Translator = self_4581;
    let _e5: Motor = other_4173;
    let _e6: MultiVector = translator_motor_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4581;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_anti_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn translator_plane_sandwich(self_4582: Translator, other_4174: Plane) -> Plane {
    var self_4583: Translator;
    var other_4175: Plane;

    self_4583 = self_4582;
    other_4175 = other_4174;
    let _e4: Translator = self_4583;
    let _e5: Plane = other_4175;
    let _e6: Flector = translator_plane_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4583;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_anti_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn translator_rotor_sandwich(self_4584: Translator, other_4176: Rotor) -> Rotor {
    var self_4585: Translator;
    var other_4177: Rotor;

    self_4585 = self_4584;
    other_4177 = other_4176;
    let _e4: Translator = self_4585;
    let _e5: Rotor = other_4177;
    let _e6: MultiVector = translator_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_4585;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_anti_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn flector_flector_distance(self_4586: Flector, other_4178: Flector) -> HomogeneousMagnitude {
    var self_4587: Flector;
    var other_4179: Flector;

    self_4587 = self_4586;
    other_4179 = other_4178;
    let _e4: Flector = self_4587;
    let _e5: Flector = other_4179;
    let _e6: Motor = flector_flector_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Flector = self_4587;
    let _e10: Flector = other_4179;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = flector_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_line_distance(self_4588: Flector, other_4180: Line) -> HomogeneousMagnitude {
    var self_4589: Flector;
    var other_4181: Line;

    self_4589 = self_4588;
    other_4181 = other_4180;
    let _e4: Flector = self_4589;
    let _e5: Line = other_4181;
    let _e6: Plane = flector_line_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_4589;
    let _e10: Line = other_4181;
    let _e11: Point = line_attitude(_e10);
    let _e12: Motor = flector_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_motor_distance(self_4590: Flector, other_4182: Motor) -> HomogeneousMagnitude {
    var self_4591: Flector;
    var other_4183: Motor;

    self_4591 = self_4590;
    other_4183 = other_4182;
    let _e4: Flector = self_4591;
    let _e5: Motor = other_4183;
    let _e6: Plane = flector_motor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_4591;
    let _e10: Motor = other_4183;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Motor = flector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_multi_vector_distance(self_4592: Flector, other_4184: MultiVector) -> HomogeneousMagnitude {
    var self_4593: Flector;
    var other_4185: MultiVector;

    self_4593 = self_4592;
    other_4185 = other_4184;
    let _e4: Flector = self_4593;
    let _e5: MultiVector = other_4185;
    let _e6: MultiVector = flector_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Flector = self_4593;
    let _e10: MultiVector = other_4185;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = flector_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_plane_distance(self_4594: Flector, other_4186: Plane) -> HomogeneousMagnitude {
    var self_4595: Flector;
    var other_4187: Plane;

    self_4595 = self_4594;
    other_4187 = other_4186;
    let _e4: Flector = self_4595;
    let _e5: Plane = other_4187;
    let _e6: AntiScalar = flector_plane_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Flector = self_4595;
    let _e10: Plane = other_4187;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Plane = flector_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_point_distance(self_4596: Flector, other_4188: Point) -> HomogeneousMagnitude {
    var self_4597: Flector;
    var other_4189: Point;

    self_4597 = self_4596;
    other_4189 = other_4188;
    let _e4: Flector = self_4597;
    let _e5: Point = other_4189;
    let _e6: Motor = flector_point_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Flector = self_4597;
    let _e10: Point = other_4189;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Flector = flector_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_rotor_distance(self_4598: Flector, other_4190: Rotor) -> HomogeneousMagnitude {
    var self_4599: Flector;
    var other_4191: Rotor;

    self_4599 = self_4598;
    other_4191 = other_4190;
    let _e4: Flector = self_4599;
    let _e5: Rotor = other_4191;
    let _e6: Plane = flector_rotor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_4599;
    let _e10: Rotor = other_4191;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Motor = flector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_translator_distance(self_4600: Flector, other_4192: Translator) -> HomogeneousMagnitude {
    var self_4601: Flector;
    var other_4193: Translator;

    self_4601 = self_4600;
    other_4193 = other_4192;
    let _e4: Flector = self_4601;
    let _e5: Translator = other_4193;
    let _e6: Plane = flector_translator_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_4601;
    let _e10: Translator = other_4193;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Motor = flector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_anti_scalar_distance(self_4602: HomogeneousMagnitude, other_4194: AntiScalar) -> HomogeneousMagnitude {
    var self_4603: HomogeneousMagnitude;
    var other_4195: AntiScalar;

    self_4603 = self_4602;
    other_4195 = other_4194;
    let _e4: HomogeneousMagnitude = self_4603;
    let _e5: AntiScalar = other_4195;
    let _e6: AntiScalar = homogeneous_magnitude_anti_scalar_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4603;
    let _e10: AntiScalar = other_4195;
    let _e11: Plane = anti_scalar_attitude(_e10);
    let _e12: Plane = homogeneous_magnitude_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_flector_distance(self_4604: HomogeneousMagnitude, other_4196: Flector) -> HomogeneousMagnitude {
    var self_4605: HomogeneousMagnitude;
    var other_4197: Flector;

    self_4605 = self_4604;
    other_4197 = other_4196;
    let _e4: HomogeneousMagnitude = self_4605;
    let _e5: Flector = other_4197;
    let _e6: Flector = homogeneous_magnitude_flector_outer_product(_e4, _e5);
    let _e7: MultiVector = flector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4605;
    let _e10: Flector = other_4197;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = homogeneous_magnitude_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_homogeneous_magnitude_distance(self_4606: HomogeneousMagnitude, other_4198: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4607: HomogeneousMagnitude;
    var other_4199: HomogeneousMagnitude;

    self_4607 = self_4606;
    other_4199 = other_4198;
    let _e4: HomogeneousMagnitude = self_4607;
    let _e5: HomogeneousMagnitude = other_4199;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_outer_product(_e4, _e5);
    let _e7: Plane = homogeneous_magnitude_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4607;
    let _e10: HomogeneousMagnitude = other_4199;
    let _e11: Plane = homogeneous_magnitude_attitude(_e10);
    let _e12: Plane = homogeneous_magnitude_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_line_distance(self_4608: HomogeneousMagnitude, other_4200: Line) -> HomogeneousMagnitude {
    var self_4609: HomogeneousMagnitude;
    var other_4201: Line;

    self_4609 = self_4608;
    other_4201 = other_4200;
    let _e4: HomogeneousMagnitude = self_4609;
    let _e5: Line = other_4201;
    let _e6: Line = homogeneous_magnitude_line_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4609;
    let _e10: Line = other_4201;
    let _e11: Point = line_attitude(_e10);
    let _e12: Point = homogeneous_magnitude_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_motor_distance(self_4610: HomogeneousMagnitude, other_4202: Motor) -> HomogeneousMagnitude {
    var self_4611: HomogeneousMagnitude;
    var other_4203: Motor;

    self_4611 = self_4610;
    other_4203 = other_4202;
    let _e4: HomogeneousMagnitude = self_4611;
    let _e5: Motor = other_4203;
    let _e6: Motor = homogeneous_magnitude_motor_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4611;
    let _e10: Motor = other_4203;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Flector = homogeneous_magnitude_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_multi_vector_distance(self_4612: HomogeneousMagnitude, other_4204: MultiVector) -> HomogeneousMagnitude {
    var self_4613: HomogeneousMagnitude;
    var other_4205: MultiVector;

    self_4613 = self_4612;
    other_4205 = other_4204;
    let _e4: HomogeneousMagnitude = self_4613;
    let _e5: MultiVector = other_4205;
    let _e6: MultiVector = homogeneous_magnitude_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4613;
    let _e10: MultiVector = other_4205;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = homogeneous_magnitude_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_plane_distance(self_4614: HomogeneousMagnitude, other_4206: Plane) -> HomogeneousMagnitude {
    var self_4615: HomogeneousMagnitude;
    var other_4207: Plane;

    self_4615 = self_4614;
    other_4207 = other_4206;
    let _e4: HomogeneousMagnitude = self_4615;
    let _e5: Plane = other_4207;
    let _e6: Plane = homogeneous_magnitude_plane_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4615;
    let _e10: Plane = other_4207;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Line = homogeneous_magnitude_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_rotor_distance(self_4616: HomogeneousMagnitude, other_4208: Rotor) -> HomogeneousMagnitude {
    var self_4617: HomogeneousMagnitude;
    var other_4209: Rotor;

    self_4617 = self_4616;
    other_4209 = other_4208;
    let _e4: HomogeneousMagnitude = self_4617;
    let _e5: Rotor = other_4209;
    let _e6: Rotor = homogeneous_magnitude_rotor_outer_product(_e4, _e5);
    let _e7: Flector = rotor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4617;
    let _e10: Rotor = other_4209;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Flector = homogeneous_magnitude_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_translator_distance(self_4618: HomogeneousMagnitude, other_4210: Translator) -> HomogeneousMagnitude {
    var self_4619: HomogeneousMagnitude;
    var other_4211: Translator;

    self_4619 = self_4618;
    other_4211 = other_4210;
    let _e4: HomogeneousMagnitude = self_4619;
    let _e5: Translator = other_4211;
    let _e6: Translator = homogeneous_magnitude_translator_outer_product(_e4, _e5);
    let _e7: Flector = translator_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_4619;
    let _e10: Translator = other_4211;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Flector = homogeneous_magnitude_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_flector_distance(self_4620: Line, other_4212: Flector) -> HomogeneousMagnitude {
    var self_4621: Line;
    var other_4213: Flector;

    self_4621 = self_4620;
    other_4213 = other_4212;
    let _e4: Line = self_4621;
    let _e5: Flector = other_4213;
    let _e6: Plane = line_flector_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Line = self_4621;
    let _e10: Flector = other_4213;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = line_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_line_distance(self_4622: Line, other_4214: Line) -> HomogeneousMagnitude {
    var self_4623: Line;
    var other_4215: Line;

    self_4623 = self_4622;
    other_4215 = other_4214;
    let _e4: Line = self_4623;
    let _e5: Line = other_4215;
    let _e6: AntiScalar = line_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_4623;
    let _e10: Line = other_4215;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = line_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_motor_distance(self_4624: Line, other_4216: Motor) -> HomogeneousMagnitude {
    var self_4625: Line;
    var other_4217: Motor;

    self_4625 = self_4624;
    other_4217 = other_4216;
    let _e4: Line = self_4625;
    let _e5: Motor = other_4217;
    let _e6: AntiScalar = line_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_4625;
    let _e10: Motor = other_4217;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = line_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_multi_vector_distance(self_4626: Line, other_4218: MultiVector) -> HomogeneousMagnitude {
    var self_4627: Line;
    var other_4219: MultiVector;

    self_4627 = self_4626;
    other_4219 = other_4218;
    let _e4: Line = self_4627;
    let _e5: MultiVector = other_4219;
    let _e6: MultiVector = line_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Line = self_4627;
    let _e10: MultiVector = other_4219;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = line_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_point_distance(self_4628: Line, other_4220: Point) -> HomogeneousMagnitude {
    var self_4629: Line;
    var other_4221: Point;

    self_4629 = self_4628;
    other_4221 = other_4220;
    let _e4: Line = self_4629;
    let _e5: Point = other_4221;
    let _e6: Plane = line_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Line = self_4629;
    let _e10: Point = other_4221;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Line = line_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_rotor_distance(self_4630: Line, other_4222: Rotor) -> HomogeneousMagnitude {
    var self_4631: Line;
    var other_4223: Rotor;

    self_4631 = self_4630;
    other_4223 = other_4222;
    let _e4: Line = self_4631;
    let _e5: Rotor = other_4223;
    let _e6: AntiScalar = line_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_4631;
    let _e10: Rotor = other_4223;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = line_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_translator_distance(self_4632: Line, other_4224: Translator) -> HomogeneousMagnitude {
    var self_4633: Line;
    var other_4225: Translator;

    self_4633 = self_4632;
    other_4225 = other_4224;
    let _e4: Line = self_4633;
    let _e5: Translator = other_4225;
    let _e6: AntiScalar = line_translator_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_4633;
    let _e10: Translator = other_4225;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Plane = line_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_flector_distance(self_4634: Motor, other_4226: Flector) -> HomogeneousMagnitude {
    var self_4635: Motor;
    var other_4227: Flector;

    self_4635 = self_4634;
    other_4227 = other_4226;
    let _e4: Motor = self_4635;
    let _e5: Flector = other_4227;
    let _e6: Plane = motor_flector_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Motor = self_4635;
    let _e10: Flector = other_4227;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = motor_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_line_distance(self_4636: Motor, other_4228: Line) -> HomogeneousMagnitude {
    var self_4637: Motor;
    var other_4229: Line;

    self_4637 = self_4636;
    other_4229 = other_4228;
    let _e4: Motor = self_4637;
    let _e5: Line = other_4229;
    let _e6: AntiScalar = motor_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_4637;
    let _e10: Line = other_4229;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = motor_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_motor_distance(self_4638: Motor, other_4230: Motor) -> HomogeneousMagnitude {
    var self_4639: Motor;
    var other_4231: Motor;

    self_4639 = self_4638;
    other_4231 = other_4230;
    let _e4: Motor = self_4639;
    let _e5: Motor = other_4231;
    let _e6: AntiScalar = motor_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_4639;
    let _e10: Motor = other_4231;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = motor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_multi_vector_distance(self_4640: Motor, other_4232: MultiVector) -> HomogeneousMagnitude {
    var self_4641: Motor;
    var other_4233: MultiVector;

    self_4641 = self_4640;
    other_4233 = other_4232;
    let _e4: Motor = self_4641;
    let _e5: MultiVector = other_4233;
    let _e6: MultiVector = motor_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Motor = self_4641;
    let _e10: MultiVector = other_4233;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = motor_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_point_distance(self_4642: Motor, other_4234: Point) -> HomogeneousMagnitude {
    var self_4643: Motor;
    var other_4235: Point;

    self_4643 = self_4642;
    other_4235 = other_4234;
    let _e4: Motor = self_4643;
    let _e5: Point = other_4235;
    let _e6: Plane = motor_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Motor = self_4643;
    let _e10: Point = other_4235;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Motor = motor_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_rotor_distance(self_4644: Motor, other_4236: Rotor) -> HomogeneousMagnitude {
    var self_4645: Motor;
    var other_4237: Rotor;

    self_4645 = self_4644;
    other_4237 = other_4236;
    let _e4: Motor = self_4645;
    let _e5: Rotor = other_4237;
    let _e6: AntiScalar = motor_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_4645;
    let _e10: Rotor = other_4237;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = motor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_translator_distance(self_4646: Motor, other_4238: Translator) -> HomogeneousMagnitude {
    var self_4647: Motor;
    var other_4239: Translator;

    self_4647 = self_4646;
    other_4239 = other_4238;
    let _e4: Motor = self_4647;
    let _e5: Translator = other_4239;
    let _e6: AntiScalar = motor_translator_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_4647;
    let _e10: Translator = other_4239;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Plane = motor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_anti_scalar_distance(self_4648: MultiVector, other_4240: AntiScalar) -> HomogeneousMagnitude {
    var self_4649: MultiVector;
    var other_4241: AntiScalar;

    self_4649 = self_4648;
    other_4241 = other_4240;
    let _e4: MultiVector = self_4649;
    let _e5: AntiScalar = other_4241;
    let _e6: AntiScalar = multi_vector_anti_scalar_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: MultiVector = self_4649;
    let _e10: AntiScalar = other_4241;
    let _e11: Plane = anti_scalar_attitude(_e10);
    let _e12: MultiVector = multi_vector_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_flector_distance(self_4650: MultiVector, other_4242: Flector) -> HomogeneousMagnitude {
    var self_4651: MultiVector;
    var other_4243: Flector;

    self_4651 = self_4650;
    other_4243 = other_4242;
    let _e4: MultiVector = self_4651;
    let _e5: Flector = other_4243;
    let _e6: MultiVector = multi_vector_flector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4651;
    let _e10: Flector = other_4243;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = multi_vector_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_homogeneous_magnitude_distance(self_4652: MultiVector, other_4244: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4653: MultiVector;
    var other_4245: HomogeneousMagnitude;

    self_4653 = self_4652;
    other_4245 = other_4244;
    let _e4: MultiVector = self_4653;
    let _e5: HomogeneousMagnitude = other_4245;
    let _e6: MultiVector = multi_vector_homogeneous_magnitude_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4653;
    let _e10: HomogeneousMagnitude = other_4245;
    let _e11: Plane = homogeneous_magnitude_attitude(_e10);
    let _e12: MultiVector = multi_vector_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_line_distance(self_4654: MultiVector, other_4246: Line) -> HomogeneousMagnitude {
    var self_4655: MultiVector;
    var other_4247: Line;

    self_4655 = self_4654;
    other_4247 = other_4246;
    let _e4: MultiVector = self_4655;
    let _e5: Line = other_4247;
    let _e6: MultiVector = multi_vector_line_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4655;
    let _e10: Line = other_4247;
    let _e11: Point = line_attitude(_e10);
    let _e12: MultiVector = multi_vector_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_motor_distance(self_4656: MultiVector, other_4248: Motor) -> HomogeneousMagnitude {
    var self_4657: MultiVector;
    var other_4249: Motor;

    self_4657 = self_4656;
    other_4249 = other_4248;
    let _e4: MultiVector = self_4657;
    let _e5: Motor = other_4249;
    let _e6: MultiVector = multi_vector_motor_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4657;
    let _e10: Motor = other_4249;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: MultiVector = multi_vector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_multi_vector_distance(self_4658: MultiVector, other_4250: MultiVector) -> HomogeneousMagnitude {
    var self_4659: MultiVector;
    var other_4251: MultiVector;

    self_4659 = self_4658;
    other_4251 = other_4250;
    let _e4: MultiVector = self_4659;
    let _e5: MultiVector = other_4251;
    let _e6: MultiVector = multi_vector_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4659;
    let _e10: MultiVector = other_4251;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = multi_vector_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_plane_distance(self_4660: MultiVector, other_4252: Plane) -> HomogeneousMagnitude {
    var self_4661: MultiVector;
    var other_4253: Plane;

    self_4661 = self_4660;
    other_4253 = other_4252;
    let _e4: MultiVector = self_4661;
    let _e5: Plane = other_4253;
    let _e6: MultiVector = multi_vector_plane_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4661;
    let _e10: Plane = other_4253;
    let _e11: Line = plane_attitude(_e10);
    let _e12: MultiVector = multi_vector_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_point_distance(self_4662: MultiVector, other_4254: Point) -> HomogeneousMagnitude {
    var self_4663: MultiVector;
    var other_4255: Point;

    self_4663 = self_4662;
    other_4255 = other_4254;
    let _e4: MultiVector = self_4663;
    let _e5: Point = other_4255;
    let _e6: MultiVector = multi_vector_point_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4663;
    let _e10: Point = other_4255;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: MultiVector = multi_vector_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_rotor_distance(self_4664: MultiVector, other_4256: Rotor) -> HomogeneousMagnitude {
    var self_4665: MultiVector;
    var other_4257: Rotor;

    self_4665 = self_4664;
    other_4257 = other_4256;
    let _e4: MultiVector = self_4665;
    let _e5: Rotor = other_4257;
    let _e6: MultiVector = multi_vector_rotor_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4665;
    let _e10: Rotor = other_4257;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: MultiVector = multi_vector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn multi_vector_translator_distance(self_4666: MultiVector, other_4258: Translator) -> HomogeneousMagnitude {
    var self_4667: MultiVector;
    var other_4259: Translator;

    self_4667 = self_4666;
    other_4259 = other_4258;
    let _e4: MultiVector = self_4667;
    let _e5: Translator = other_4259;
    let _e6: MultiVector = multi_vector_translator_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: MultiVector = self_4667;
    let _e10: Translator = other_4259;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: MultiVector = multi_vector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn plane_flector_distance(self_4668: Plane, other_4260: Flector) -> HomogeneousMagnitude {
    var self_4669: Plane;
    var other_4261: Flector;

    self_4669 = self_4668;
    other_4261 = other_4260;
    let _e4: Plane = self_4669;
    let _e5: Flector = other_4261;
    let _e6: AntiScalar = plane_flector_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Plane = self_4669;
    let _e10: Flector = other_4261;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = plane_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn plane_multi_vector_distance(self_4670: Plane, other_4262: MultiVector) -> HomogeneousMagnitude {
    var self_4671: Plane;
    var other_4263: MultiVector;

    self_4671 = self_4670;
    other_4263 = other_4262;
    let _e4: Plane = self_4671;
    let _e5: MultiVector = other_4263;
    let _e6: MultiVector = plane_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Plane = self_4671;
    let _e10: MultiVector = other_4263;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = plane_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn plane_point_distance(self_4672: Plane, other_4264: Point) -> HomogeneousMagnitude {
    var self_4673: Plane;
    var other_4265: Point;

    self_4673 = self_4672;
    other_4265 = other_4264;
    let _e4: Plane = self_4673;
    let _e5: Point = other_4265;
    let _e6: AntiScalar = plane_point_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Plane = self_4673;
    let _e10: Point = other_4265;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Plane = plane_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_flector_distance(self_4674: Point, other_4266: Flector) -> HomogeneousMagnitude {
    var self_4675: Point;
    var other_4267: Flector;

    self_4675 = self_4674;
    other_4267 = other_4266;
    let _e4: Point = self_4675;
    let _e5: Flector = other_4267;
    let _e6: Motor = point_flector_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Point = self_4675;
    let _e10: Flector = other_4267;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = point_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_line_distance(self_4676: Point, other_4268: Line) -> HomogeneousMagnitude {
    var self_4677: Point;
    var other_4269: Line;

    self_4677 = self_4676;
    other_4269 = other_4268;
    let _e4: Point = self_4677;
    let _e5: Line = other_4269;
    let _e6: Plane = point_line_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_4677;
    let _e10: Line = other_4269;
    let _e11: Point = line_attitude(_e10);
    let _e12: Line = point_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_motor_distance(self_4678: Point, other_4270: Motor) -> HomogeneousMagnitude {
    var self_4679: Point;
    var other_4271: Motor;

    self_4679 = self_4678;
    other_4271 = other_4270;
    let _e4: Point = self_4679;
    let _e5: Motor = other_4271;
    let _e6: Plane = point_motor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_4679;
    let _e10: Motor = other_4271;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Motor = point_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_multi_vector_distance(self_4680: Point, other_4272: MultiVector) -> HomogeneousMagnitude {
    var self_4681: Point;
    var other_4273: MultiVector;

    self_4681 = self_4680;
    other_4273 = other_4272;
    let _e4: Point = self_4681;
    let _e5: MultiVector = other_4273;
    let _e6: MultiVector = point_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Point = self_4681;
    let _e10: MultiVector = other_4273;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = point_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_plane_distance(self_4682: Point, other_4274: Plane) -> HomogeneousMagnitude {
    var self_4683: Point;
    var other_4275: Plane;

    self_4683 = self_4682;
    other_4275 = other_4274;
    let _e4: Point = self_4683;
    let _e5: Plane = other_4275;
    let _e6: AntiScalar = point_plane_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Point = self_4683;
    let _e10: Plane = other_4275;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Plane = point_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_point_distance(self_4684: Point, other_4276: Point) -> HomogeneousMagnitude {
    var self_4685: Point;
    var other_4277: Point;

    self_4685 = self_4684;
    other_4277 = other_4276;
    let _e4: Point = self_4685;
    let _e5: Point = other_4277;
    let _e6: Line = point_point_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: Point = self_4685;
    let _e10: Point = other_4277;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Point = point_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_rotor_distance(self_4686: Point, other_4278: Rotor) -> HomogeneousMagnitude {
    var self_4687: Point;
    var other_4279: Rotor;

    self_4687 = self_4686;
    other_4279 = other_4278;
    let _e4: Point = self_4687;
    let _e5: Rotor = other_4279;
    let _e6: Plane = point_rotor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_4687;
    let _e10: Rotor = other_4279;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Motor = point_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_translator_distance(self_4688: Point, other_4280: Translator) -> HomogeneousMagnitude {
    var self_4689: Point;
    var other_4281: Translator;

    self_4689 = self_4688;
    other_4281 = other_4280;
    let _e4: Point = self_4689;
    let _e5: Translator = other_4281;
    let _e6: Plane = point_translator_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_4689;
    let _e10: Translator = other_4281;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Motor = point_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn rotor_flector_distance(self_4690: Rotor, other_4282: Flector) -> HomogeneousMagnitude {
    var self_4691: Rotor;
    var other_4283: Flector;

    self_4691 = self_4690;
    other_4283 = other_4282;
    let _e4: Rotor = self_4691;
    let _e5: Flector = other_4283;
    let _e6: Plane = rotor_flector_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Rotor = self_4691;
    let _e10: Flector = other_4283;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = rotor_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn rotor_line_distance(self_4692: Rotor, other_4284: Line) -> HomogeneousMagnitude {
    var self_4693: Rotor;
    var other_4285: Line;

    self_4693 = self_4692;
    other_4285 = other_4284;
    let _e4: Rotor = self_4693;
    let _e5: Line = other_4285;
    let _e6: AntiScalar = rotor_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Rotor = self_4693;
    let _e10: Line = other_4285;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = rotor_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn rotor_motor_distance(self_4694: Rotor, other_4286: Motor) -> HomogeneousMagnitude {
    var self_4695: Rotor;
    var other_4287: Motor;

    self_4695 = self_4694;
    other_4287 = other_4286;
    let _e4: Rotor = self_4695;
    let _e5: Motor = other_4287;
    let _e6: AntiScalar = rotor_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Rotor = self_4695;
    let _e10: Motor = other_4287;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = rotor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn rotor_multi_vector_distance(self_4696: Rotor, other_4288: MultiVector) -> HomogeneousMagnitude {
    var self_4697: Rotor;
    var other_4289: MultiVector;

    self_4697 = self_4696;
    other_4289 = other_4288;
    let _e4: Rotor = self_4697;
    let _e5: MultiVector = other_4289;
    let _e6: MultiVector = rotor_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Rotor = self_4697;
    let _e10: MultiVector = other_4289;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = rotor_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn rotor_translator_distance(self_4698: Rotor, other_4290: Translator) -> HomogeneousMagnitude {
    var self_4699: Rotor;
    var other_4291: Translator;

    self_4699 = self_4698;
    other_4291 = other_4290;
    let _e4: Rotor = self_4699;
    let _e5: Translator = other_4291;
    let _e6: AntiScalar = rotor_translator_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Rotor = self_4699;
    let _e10: Translator = other_4291;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Plane = rotor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_anti_scalar_distance(self_4700: Scalar, other_4292: AntiScalar) -> HomogeneousMagnitude {
    var self_4701: Scalar;
    var other_4293: AntiScalar;

    self_4701 = self_4700;
    other_4293 = other_4292;
    let _e4: Scalar = self_4701;
    let _e5: AntiScalar = other_4293;
    let _e6: AntiScalar = scalar_anti_scalar_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Scalar = self_4701;
    let _e10: AntiScalar = other_4293;
    let _e11: Plane = anti_scalar_attitude(_e10);
    let _e12: Plane = scalar_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_flector_distance(self_4702: Scalar, other_4294: Flector) -> HomogeneousMagnitude {
    var self_4703: Scalar;
    var other_4295: Flector;

    self_4703 = self_4702;
    other_4295 = other_4294;
    let _e4: Scalar = self_4703;
    let _e5: Flector = other_4295;
    let _e6: Flector = scalar_flector_outer_product(_e4, _e5);
    let _e7: MultiVector = flector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Scalar = self_4703;
    let _e10: Flector = other_4295;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = scalar_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_homogeneous_magnitude_distance(self_4704: Scalar, other_4296: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_4705: Scalar;
    var other_4297: HomogeneousMagnitude;

    self_4705 = self_4704;
    other_4297 = other_4296;
    let _e4: Scalar = self_4705;
    let _e5: HomogeneousMagnitude = other_4297;
    let _e6: HomogeneousMagnitude = scalar_homogeneous_magnitude_outer_product(_e4, _e5);
    let _e7: Plane = homogeneous_magnitude_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Scalar = self_4705;
    let _e10: HomogeneousMagnitude = other_4297;
    let _e11: Plane = homogeneous_magnitude_attitude(_e10);
    let _e12: Plane = scalar_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_line_distance(self_4706: Scalar, other_4298: Line) -> HomogeneousMagnitude {
    var self_4707: Scalar;
    var other_4299: Line;

    self_4707 = self_4706;
    other_4299 = other_4298;
    let _e4: Scalar = self_4707;
    let _e5: Line = other_4299;
    let _e6: Line = scalar_line_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: Scalar = self_4707;
    let _e10: Line = other_4299;
    let _e11: Point = line_attitude(_e10);
    let _e12: Point = scalar_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_motor_distance(self_4708: Scalar, other_4300: Motor) -> HomogeneousMagnitude {
    var self_4709: Scalar;
    var other_4301: Motor;

    self_4709 = self_4708;
    other_4301 = other_4300;
    let _e4: Scalar = self_4709;
    let _e5: Motor = other_4301;
    let _e6: Motor = scalar_motor_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Scalar = self_4709;
    let _e10: Motor = other_4301;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Flector = scalar_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_multi_vector_distance(self_4710: Scalar, other_4302: MultiVector) -> HomogeneousMagnitude {
    var self_4711: Scalar;
    var other_4303: MultiVector;

    self_4711 = self_4710;
    other_4303 = other_4302;
    let _e4: Scalar = self_4711;
    let _e5: MultiVector = other_4303;
    let _e6: MultiVector = scalar_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Scalar = self_4711;
    let _e10: MultiVector = other_4303;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = scalar_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_plane_distance(self_4712: Scalar, other_4304: Plane) -> HomogeneousMagnitude {
    var self_4713: Scalar;
    var other_4305: Plane;

    self_4713 = self_4712;
    other_4305 = other_4304;
    let _e4: Scalar = self_4713;
    let _e5: Plane = other_4305;
    let _e6: Plane = scalar_plane_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Scalar = self_4713;
    let _e10: Plane = other_4305;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Line = scalar_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_rotor_distance(self_4714: Scalar, other_4306: Rotor) -> HomogeneousMagnitude {
    var self_4715: Scalar;
    var other_4307: Rotor;

    self_4715 = self_4714;
    other_4307 = other_4306;
    let _e4: Scalar = self_4715;
    let _e5: Rotor = other_4307;
    let _e6: Rotor = scalar_rotor_outer_product(_e4, _e5);
    let _e7: Flector = rotor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Scalar = self_4715;
    let _e10: Rotor = other_4307;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Flector = scalar_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_translator_distance(self_4716: Scalar, other_4308: Translator) -> HomogeneousMagnitude {
    var self_4717: Scalar;
    var other_4309: Translator;

    self_4717 = self_4716;
    other_4309 = other_4308;
    let _e4: Scalar = self_4717;
    let _e5: Translator = other_4309;
    let _e6: Translator = scalar_translator_outer_product(_e4, _e5);
    let _e7: Flector = translator_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Scalar = self_4717;
    let _e10: Translator = other_4309;
    let _e11: Flector = translator_attitude(_e10);
    let _e12: Flector = scalar_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_flector_distance(self_4718: Translator, other_4310: Flector) -> HomogeneousMagnitude {
    var self_4719: Translator;
    var other_4311: Flector;

    self_4719 = self_4718;
    other_4311 = other_4310;
    let _e4: Translator = self_4719;
    let _e5: Flector = other_4311;
    let _e6: Plane = translator_flector_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Translator = self_4719;
    let _e10: Flector = other_4311;
    let _e11: MultiVector = flector_attitude(_e10);
    let _e12: MultiVector = translator_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_line_distance(self_4720: Translator, other_4312: Line) -> HomogeneousMagnitude {
    var self_4721: Translator;
    var other_4313: Line;

    self_4721 = self_4720;
    other_4313 = other_4312;
    let _e4: Translator = self_4721;
    let _e5: Line = other_4313;
    let _e6: AntiScalar = translator_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_4721;
    let _e10: Line = other_4313;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = translator_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_motor_distance(self_4722: Translator, other_4314: Motor) -> HomogeneousMagnitude {
    var self_4723: Translator;
    var other_4315: Motor;

    self_4723 = self_4722;
    other_4315 = other_4314;
    let _e4: Translator = self_4723;
    let _e5: Motor = other_4315;
    let _e6: AntiScalar = translator_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_4723;
    let _e10: Motor = other_4315;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = translator_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_multi_vector_distance(self_4724: Translator, other_4316: MultiVector) -> HomogeneousMagnitude {
    var self_4725: Translator;
    var other_4317: MultiVector;

    self_4725 = self_4724;
    other_4317 = other_4316;
    let _e4: Translator = self_4725;
    let _e5: MultiVector = other_4317;
    let _e6: MultiVector = translator_multi_vector_outer_product(_e4, _e5);
    let _e7: MultiVector = multi_vector_attitude(_e6);
    let _e8: Scalar = multi_vector_bulk_norm(_e7);
    let _e9: Translator = self_4725;
    let _e10: MultiVector = other_4317;
    let _e11: MultiVector = multi_vector_attitude(_e10);
    let _e12: MultiVector = translator_multi_vector_outer_product(_e9, _e11);
    let _e13: AntiScalar = multi_vector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_point_distance(self_4726: Translator, other_4318: Point) -> HomogeneousMagnitude {
    var self_4727: Translator;
    var other_4319: Point;

    self_4727 = self_4726;
    other_4319 = other_4318;
    let _e4: Translator = self_4727;
    let _e5: Point = other_4319;
    let _e6: Plane = translator_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Translator = self_4727;
    let _e10: Point = other_4319;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Translator = translator_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = translator_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_rotor_distance(self_4728: Translator, other_4320: Rotor) -> HomogeneousMagnitude {
    var self_4729: Translator;
    var other_4321: Rotor;

    self_4729 = self_4728;
    other_4321 = other_4320;
    let _e4: Translator = self_4729;
    let _e5: Rotor = other_4321;
    let _e6: AntiScalar = translator_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_4729;
    let _e10: Rotor = other_4321;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = translator_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

