struct Scalar {
    g0_: f32,
}

struct AntiScalar {
    g0_: f32,
}

struct HomogeneousMagnitude {
    g0_: vec2<f32>,
}

struct Point {
    g0_: vec4<f32>,
}

struct Line {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
}

struct Plane {
    g0_: vec4<f32>,
}

struct Motor {
    g0_: vec4<f32>,
    g1_: vec3<f32>,
}

struct Rotor {
    g0_: vec4<f32>,
}

struct Translator {
    g0_: vec4<f32>,
}

struct Flector {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

struct MultiVector {
    g0_: vec2<f32>,
    g1_: vec4<f32>,
    g2_: vec3<f32>,
    g3_: vec3<f32>,
    g4_: vec4<f32>,
}

fn scalar_zero() -> Scalar {
    return Scalar(0.0);
}

fn scalar_one() -> Scalar {
    return Scalar(1.0);
}

fn scalar_grade(self_: Scalar) -> i32 {
    return 0;
}

fn scalar_anti_grade(self_1: Scalar) -> i32 {
    return 4;
}

fn scalar_neg(self_2: Scalar) -> Scalar {
    var self_3: Scalar;

    self_3 = self_2;
    let _e2: Scalar = self_3;
    return Scalar((_e2.g0_ * -(1.0)));
}

fn scalar_automorphism(self_4: Scalar) -> Scalar {
    var self_5: Scalar;

    self_5 = self_4;
    let _e2: Scalar = self_5;
    return Scalar(_e2.g0_);
}

fn scalar_reversal(self_6: Scalar) -> Scalar {
    var self_7: Scalar;

    self_7 = self_6;
    let _e2: Scalar = self_7;
    return Scalar(_e2.g0_);
}

fn scalar_conjugation(self_8: Scalar) -> Scalar {
    var self_9: Scalar;

    self_9 = self_8;
    let _e2: Scalar = self_9;
    return Scalar(_e2.g0_);
}

fn scalar_dual(self_10: Scalar) -> AntiScalar {
    var self_11: Scalar;

    self_11 = self_10;
    let _e2: Scalar = self_11;
    return AntiScalar(_e2.g0_);
}

fn scalar_anti_reversal(self_12: Scalar) -> Scalar {
    var self_13: Scalar;

    self_13 = self_12;
    let _e2: Scalar = self_13;
    return Scalar(_e2.g0_);
}

fn scalar_right_complement(self_14: Scalar) -> AntiScalar {
    var self_15: Scalar;

    self_15 = self_14;
    let _e2: Scalar = self_15;
    return AntiScalar(_e2.g0_);
}

fn scalar_left_complement(self_16: Scalar) -> AntiScalar {
    var self_17: Scalar;

    self_17 = self_16;
    let _e2: Scalar = self_17;
    return AntiScalar(_e2.g0_);
}

fn scalar_double_complement(self_18: Scalar) -> Scalar {
    var self_19: Scalar;

    self_19 = self_18;
    let _e2: Scalar = self_19;
    return Scalar(_e2.g0_);
}

fn scalar_scalar_add(self_20: Scalar, other: Scalar) -> Scalar {
    var self_21: Scalar;
    var other_1: Scalar;

    self_21 = self_20;
    other_1 = other;
    let _e4: Scalar = self_21;
    let _e6: Scalar = other_1;
    return Scalar((_e4.g0_ + _e6.g0_));
}

fn scalar_scalar_sub(self_22: Scalar, other_2: Scalar) -> Scalar {
    var self_23: Scalar;
    var other_3: Scalar;

    self_23 = self_22;
    other_3 = other_2;
    let _e4: Scalar = self_23;
    let _e6: Scalar = other_3;
    return Scalar((_e4.g0_ - _e6.g0_));
}

fn scalar_scalar_mul(self_24: Scalar, other_4: Scalar) -> Scalar {
    var self_25: Scalar;
    var other_5: Scalar;

    self_25 = self_24;
    other_5 = other_4;
    let _e4: Scalar = self_25;
    let _e6: Scalar = other_5;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_div(self_26: Scalar, other_6: Scalar) -> Scalar {
    var self_27: Scalar;
    var other_7: Scalar;

    self_27 = self_26;
    other_7 = other_6;
    let _e4: Scalar = self_27;
    let _e8: Scalar = other_7;
    return Scalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn scalar_scalar_geometric_product(self_28: Scalar, other_8: Scalar) -> Scalar {
    var self_29: Scalar;
    var other_9: Scalar;

    self_29 = self_28;
    other_9 = other_8;
    let _e4: Scalar = self_29;
    let _e6: Scalar = other_9;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_outer_product(self_30: Scalar, other_10: Scalar) -> Scalar {
    var self_31: Scalar;
    var other_11: Scalar;

    self_31 = self_30;
    other_11 = other_10;
    let _e4: Scalar = self_31;
    let _e6: Scalar = other_11;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_wedge(self_32: Scalar, other_12: Scalar) -> Scalar {
    var self_33: Scalar;
    var other_13: Scalar;

    self_33 = self_32;
    other_13 = other_12;
    let _e4: Scalar = self_33;
    let _e6: Scalar = other_13;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_join(self_34: Scalar, other_14: Scalar) -> Scalar {
    var self_35: Scalar;
    var other_15: Scalar;

    self_35 = self_34;
    other_15 = other_14;
    let _e4: Scalar = self_35;
    let _e6: Scalar = other_15;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_inner_product(self_36: Scalar, other_16: Scalar) -> Scalar {
    var self_37: Scalar;
    var other_17: Scalar;

    self_37 = self_36;
    other_17 = other_16;
    let _e4: Scalar = self_37;
    let _e6: Scalar = other_17;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_left_contraction(self_38: Scalar, other_18: Scalar) -> Scalar {
    var self_39: Scalar;
    var other_19: Scalar;

    self_39 = self_38;
    other_19 = other_18;
    let _e4: Scalar = self_39;
    let _e6: Scalar = other_19;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_right_contraction(self_40: Scalar, other_20: Scalar) -> Scalar {
    var self_41: Scalar;
    var other_21: Scalar;

    self_41 = self_40;
    other_21 = other_20;
    let _e4: Scalar = self_41;
    let _e6: Scalar = other_21;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_scalar_product(self_42: Scalar, other_22: Scalar) -> Scalar {
    var self_43: Scalar;
    var other_23: Scalar;

    self_43 = self_42;
    other_23 = other_22;
    let _e4: Scalar = self_43;
    let _e6: Scalar = other_23;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_dot(self_44: Scalar, other_24: Scalar) -> Scalar {
    var self_45: Scalar;
    var other_25: Scalar;

    self_45 = self_44;
    other_25 = other_24;
    let _e4: Scalar = self_45;
    let _e6: Scalar = other_25;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_add(self_46: Scalar, other_26: AntiScalar) -> HomogeneousMagnitude {
    var self_47: Scalar;
    var other_27: AntiScalar;

    self_47 = self_46;
    other_27 = other_26;
    let _e4: Scalar = self_47;
    let _e11: AntiScalar = other_27;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) + (vec2<f32>(_e11.g0_) * vec2<f32>(0.0, 1.0))));
}

fn scalar_anti_scalar_sub(self_48: Scalar, other_28: AntiScalar) -> HomogeneousMagnitude {
    var self_49: Scalar;
    var other_29: AntiScalar;

    self_49 = self_48;
    other_29 = other_28;
    let _e4: Scalar = self_49;
    let _e11: AntiScalar = other_29;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) - (vec2<f32>(_e11.g0_) * vec2<f32>(0.0, 1.0))));
}

fn scalar_anti_scalar_geometric_product(self_50: Scalar, other_30: AntiScalar) -> AntiScalar {
    var self_51: Scalar;
    var other_31: AntiScalar;

    self_51 = self_50;
    other_31 = other_30;
    let _e4: Scalar = self_51;
    let _e6: AntiScalar = other_31;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_anti_product(self_52: Scalar, other_32: AntiScalar) -> Scalar {
    var self_53: Scalar;
    var other_33: AntiScalar;

    self_53 = self_52;
    other_33 = other_32;
    let _e4: Scalar = self_53;
    let _e6: AntiScalar = other_33;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_regressive_product(self_54: Scalar, other_34: AntiScalar) -> Scalar {
    var self_55: Scalar;
    var other_35: AntiScalar;

    self_55 = self_54;
    other_35 = other_34;
    let _e4: Scalar = self_55;
    let _e6: AntiScalar = other_35;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_anti_wedge(self_56: Scalar, other_36: AntiScalar) -> Scalar {
    var self_57: Scalar;
    var other_37: AntiScalar;

    self_57 = self_56;
    other_37 = other_36;
    let _e4: Scalar = self_57;
    let _e6: AntiScalar = other_37;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_meet(self_58: Scalar, other_38: AntiScalar) -> Scalar {
    var self_59: Scalar;
    var other_39: AntiScalar;

    self_59 = self_58;
    other_39 = other_38;
    let _e4: Scalar = self_59;
    let _e6: AntiScalar = other_39;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_outer_product(self_60: Scalar, other_40: AntiScalar) -> AntiScalar {
    var self_61: Scalar;
    var other_41: AntiScalar;

    self_61 = self_60;
    other_41 = other_40;
    let _e4: Scalar = self_61;
    let _e6: AntiScalar = other_41;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_wedge(self_62: Scalar, other_42: AntiScalar) -> AntiScalar {
    var self_63: Scalar;
    var other_43: AntiScalar;

    self_63 = self_62;
    other_43 = other_42;
    let _e4: Scalar = self_63;
    let _e6: AntiScalar = other_43;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_join(self_64: Scalar, other_44: AntiScalar) -> AntiScalar {
    var self_65: Scalar;
    var other_45: AntiScalar;

    self_65 = self_64;
    other_45 = other_44;
    let _e4: Scalar = self_65;
    let _e6: AntiScalar = other_45;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_product(self_66: Scalar, other_46: AntiScalar) -> AntiScalar {
    var self_67: Scalar;
    var other_47: AntiScalar;

    self_67 = self_66;
    other_47 = other_46;
    let _e4: Scalar = self_67;
    let _e6: AntiScalar = other_47;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_anti_product(self_68: Scalar, other_48: AntiScalar) -> Scalar {
    var self_69: Scalar;
    var other_49: AntiScalar;

    self_69 = self_68;
    other_49 = other_48;
    let _e4: Scalar = self_69;
    let _e6: AntiScalar = other_49;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_left_contraction(self_70: Scalar, other_50: AntiScalar) -> AntiScalar {
    var self_71: Scalar;
    var other_51: AntiScalar;

    self_71 = self_70;
    other_51 = other_50;
    let _e4: Scalar = self_71;
    let _e6: AntiScalar = other_51;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_right_anti_contraction(self_72: Scalar, other_52: AntiScalar) -> Scalar {
    var self_73: Scalar;
    var other_53: AntiScalar;

    self_73 = self_72;
    other_53 = other_52;
    let _e4: Scalar = self_73;
    let _e6: AntiScalar = other_53;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_homogeneous_magnitude_add(self_74: Scalar, other_54: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_75: Scalar;
    var other_55: HomogeneousMagnitude;

    self_75 = self_74;
    other_55 = other_54;
    let _e4: Scalar = self_75;
    let _e11: HomogeneousMagnitude = other_55;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) + _e11.g0_));
}

fn scalar_homogeneous_magnitude_sub(self_76: Scalar, other_56: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_77: Scalar;
    var other_57: HomogeneousMagnitude;

    self_77 = self_76;
    other_57 = other_56;
    let _e4: Scalar = self_77;
    let _e11: HomogeneousMagnitude = other_57;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) - _e11.g0_));
}

fn scalar_homogeneous_magnitude_geometric_product(self_78: Scalar, other_58: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_79: Scalar;
    var other_59: HomogeneousMagnitude;

    self_79 = self_78;
    other_59 = other_58;
    let _e4: Scalar = self_79;
    let _e7: HomogeneousMagnitude = other_59;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_geometric_anti_product(self_80: Scalar, other_60: HomogeneousMagnitude) -> Scalar {
    var self_81: Scalar;
    var other_61: HomogeneousMagnitude;

    self_81 = self_80;
    other_61 = other_60;
    let _e4: Scalar = self_81;
    let _e6: HomogeneousMagnitude = other_61;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_regressive_product(self_82: Scalar, other_62: HomogeneousMagnitude) -> Scalar {
    var self_83: Scalar;
    var other_63: HomogeneousMagnitude;

    self_83 = self_82;
    other_63 = other_62;
    let _e4: Scalar = self_83;
    let _e6: HomogeneousMagnitude = other_63;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_anti_wedge(self_84: Scalar, other_64: HomogeneousMagnitude) -> Scalar {
    var self_85: Scalar;
    var other_65: HomogeneousMagnitude;

    self_85 = self_84;
    other_65 = other_64;
    let _e4: Scalar = self_85;
    let _e6: HomogeneousMagnitude = other_65;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_meet(self_86: Scalar, other_66: HomogeneousMagnitude) -> Scalar {
    var self_87: Scalar;
    var other_67: HomogeneousMagnitude;

    self_87 = self_86;
    other_67 = other_66;
    let _e4: Scalar = self_87;
    let _e6: HomogeneousMagnitude = other_67;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_outer_product(self_88: Scalar, other_68: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_89: Scalar;
    var other_69: HomogeneousMagnitude;

    self_89 = self_88;
    other_69 = other_68;
    let _e4: Scalar = self_89;
    let _e7: HomogeneousMagnitude = other_69;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_wedge(self_90: Scalar, other_70: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_91: Scalar;
    var other_71: HomogeneousMagnitude;

    self_91 = self_90;
    other_71 = other_70;
    let _e4: Scalar = self_91;
    let _e7: HomogeneousMagnitude = other_71;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_join(self_92: Scalar, other_72: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_93: Scalar;
    var other_73: HomogeneousMagnitude;

    self_93 = self_92;
    other_73 = other_72;
    let _e4: Scalar = self_93;
    let _e7: HomogeneousMagnitude = other_73;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_inner_product(self_94: Scalar, other_74: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_95: Scalar;
    var other_75: HomogeneousMagnitude;

    self_95 = self_94;
    other_75 = other_74;
    let _e4: Scalar = self_95;
    let _e7: HomogeneousMagnitude = other_75;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_inner_anti_product(self_96: Scalar, other_76: HomogeneousMagnitude) -> Scalar {
    var self_97: Scalar;
    var other_77: HomogeneousMagnitude;

    self_97 = self_96;
    other_77 = other_76;
    let _e4: Scalar = self_97;
    let _e6: HomogeneousMagnitude = other_77;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_left_contraction(self_98: Scalar, other_78: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_99: Scalar;
    var other_79: HomogeneousMagnitude;

    self_99 = self_98;
    other_79 = other_78;
    let _e4: Scalar = self_99;
    let _e7: HomogeneousMagnitude = other_79;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_homogeneous_magnitude_right_contraction(self_100: Scalar, other_80: HomogeneousMagnitude) -> Scalar {
    var self_101: Scalar;
    var other_81: HomogeneousMagnitude;

    self_101 = self_100;
    other_81 = other_80;
    let _e4: Scalar = self_101;
    let _e6: HomogeneousMagnitude = other_81;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_homogeneous_magnitude_right_anti_contraction(self_102: Scalar, other_82: HomogeneousMagnitude) -> Scalar {
    var self_103: Scalar;
    var other_83: HomogeneousMagnitude;

    self_103 = self_102;
    other_83 = other_82;
    let _e4: Scalar = self_103;
    let _e6: HomogeneousMagnitude = other_83;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_homogeneous_magnitude_scalar_product(self_104: Scalar, other_84: HomogeneousMagnitude) -> Scalar {
    var self_105: Scalar;
    var other_85: HomogeneousMagnitude;

    self_105 = self_104;
    other_85 = other_84;
    let _e4: Scalar = self_105;
    let _e6: HomogeneousMagnitude = other_85;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_homogeneous_magnitude_dot(self_106: Scalar, other_86: HomogeneousMagnitude) -> Scalar {
    var self_107: Scalar;
    var other_87: HomogeneousMagnitude;

    self_107 = self_106;
    other_87 = other_86;
    let _e4: Scalar = self_107;
    let _e6: HomogeneousMagnitude = other_87;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_point_geometric_product(self_108: Scalar, other_88: Point) -> Point {
    var self_109: Scalar;
    var other_89: Point;

    self_109 = self_108;
    other_89 = other_88;
    let _e4: Scalar = self_109;
    let _e7: Point = other_89;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_outer_product(self_110: Scalar, other_90: Point) -> Point {
    var self_111: Scalar;
    var other_91: Point;

    self_111 = self_110;
    other_91 = other_90;
    let _e4: Scalar = self_111;
    let _e7: Point = other_91;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_wedge(self_112: Scalar, other_92: Point) -> Point {
    var self_113: Scalar;
    var other_93: Point;

    self_113 = self_112;
    other_93 = other_92;
    let _e4: Scalar = self_113;
    let _e7: Point = other_93;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_join(self_114: Scalar, other_94: Point) -> Point {
    var self_115: Scalar;
    var other_95: Point;

    self_115 = self_114;
    other_95 = other_94;
    let _e4: Scalar = self_115;
    let _e7: Point = other_95;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_inner_product(self_116: Scalar, other_96: Point) -> Point {
    var self_117: Scalar;
    var other_97: Point;

    self_117 = self_116;
    other_97 = other_96;
    let _e4: Scalar = self_117;
    let _e7: Point = other_97;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_left_contraction(self_118: Scalar, other_98: Point) -> Point {
    var self_119: Scalar;
    var other_99: Point;

    self_119 = self_118;
    other_99 = other_98;
    let _e4: Scalar = self_119;
    let _e7: Point = other_99;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_line_geometric_product(self_120: Scalar, other_100: Line) -> Line {
    var self_121: Scalar;
    var other_101: Line;

    self_121 = self_120;
    other_101 = other_100;
    let _e4: Scalar = self_121;
    let _e7: Line = other_101;
    let _e10: Scalar = self_121;
    let _e13: Line = other_101;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_outer_product(self_122: Scalar, other_102: Line) -> Line {
    var self_123: Scalar;
    var other_103: Line;

    self_123 = self_122;
    other_103 = other_102;
    let _e4: Scalar = self_123;
    let _e7: Line = other_103;
    let _e10: Scalar = self_123;
    let _e13: Line = other_103;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_wedge(self_124: Scalar, other_104: Line) -> Line {
    var self_125: Scalar;
    var other_105: Line;

    self_125 = self_124;
    other_105 = other_104;
    let _e4: Scalar = self_125;
    let _e7: Line = other_105;
    let _e10: Scalar = self_125;
    let _e13: Line = other_105;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_join(self_126: Scalar, other_106: Line) -> Line {
    var self_127: Scalar;
    var other_107: Line;

    self_127 = self_126;
    other_107 = other_106;
    let _e4: Scalar = self_127;
    let _e7: Line = other_107;
    let _e10: Scalar = self_127;
    let _e13: Line = other_107;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_inner_product(self_128: Scalar, other_108: Line) -> Line {
    var self_129: Scalar;
    var other_109: Line;

    self_129 = self_128;
    other_109 = other_108;
    let _e4: Scalar = self_129;
    let _e7: Line = other_109;
    let _e10: Scalar = self_129;
    let _e13: Line = other_109;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_left_contraction(self_130: Scalar, other_110: Line) -> Line {
    var self_131: Scalar;
    var other_111: Line;

    self_131 = self_130;
    other_111 = other_110;
    let _e4: Scalar = self_131;
    let _e7: Line = other_111;
    let _e10: Scalar = self_131;
    let _e13: Line = other_111;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_plane_geometric_product(self_132: Scalar, other_112: Plane) -> Plane {
    var self_133: Scalar;
    var other_113: Plane;

    self_133 = self_132;
    other_113 = other_112;
    let _e4: Scalar = self_133;
    let _e7: Plane = other_113;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_outer_product(self_134: Scalar, other_114: Plane) -> Plane {
    var self_135: Scalar;
    var other_115: Plane;

    self_135 = self_134;
    other_115 = other_114;
    let _e4: Scalar = self_135;
    let _e7: Plane = other_115;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_wedge(self_136: Scalar, other_116: Plane) -> Plane {
    var self_137: Scalar;
    var other_117: Plane;

    self_137 = self_136;
    other_117 = other_116;
    let _e4: Scalar = self_137;
    let _e7: Plane = other_117;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_join(self_138: Scalar, other_118: Plane) -> Plane {
    var self_139: Scalar;
    var other_119: Plane;

    self_139 = self_138;
    other_119 = other_118;
    let _e4: Scalar = self_139;
    let _e7: Plane = other_119;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_product(self_140: Scalar, other_120: Plane) -> Plane {
    var self_141: Scalar;
    var other_121: Plane;

    self_141 = self_140;
    other_121 = other_120;
    let _e4: Scalar = self_141;
    let _e7: Plane = other_121;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_left_contraction(self_142: Scalar, other_122: Plane) -> Plane {
    var self_143: Scalar;
    var other_123: Plane;

    self_143 = self_142;
    other_123 = other_122;
    let _e4: Scalar = self_143;
    let _e7: Plane = other_123;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_motor_geometric_product(self_144: Scalar, other_124: Motor) -> Motor {
    var self_145: Scalar;
    var other_125: Motor;

    self_145 = self_144;
    other_125 = other_124;
    let _e4: Scalar = self_145;
    let _e7: Motor = other_125;
    let _e10: Scalar = self_145;
    let _e13: Motor = other_125;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_regressive_product(self_146: Scalar, other_126: Motor) -> Scalar {
    var self_147: Scalar;
    var other_127: Motor;

    self_147 = self_146;
    other_127 = other_126;
    let _e4: Scalar = self_147;
    let _e6: Motor = other_127;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_anti_wedge(self_148: Scalar, other_128: Motor) -> Scalar {
    var self_149: Scalar;
    var other_129: Motor;

    self_149 = self_148;
    other_129 = other_128;
    let _e4: Scalar = self_149;
    let _e6: Motor = other_129;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_meet(self_150: Scalar, other_130: Motor) -> Scalar {
    var self_151: Scalar;
    var other_131: Motor;

    self_151 = self_150;
    other_131 = other_130;
    let _e4: Scalar = self_151;
    let _e6: Motor = other_131;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_motor_outer_product(self_152: Scalar, other_132: Motor) -> Motor {
    var self_153: Scalar;
    var other_133: Motor;

    self_153 = self_152;
    other_133 = other_132;
    let _e4: Scalar = self_153;
    let _e7: Motor = other_133;
    let _e10: Scalar = self_153;
    let _e13: Motor = other_133;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_wedge(self_154: Scalar, other_134: Motor) -> Motor {
    var self_155: Scalar;
    var other_135: Motor;

    self_155 = self_154;
    other_135 = other_134;
    let _e4: Scalar = self_155;
    let _e7: Motor = other_135;
    let _e10: Scalar = self_155;
    let _e13: Motor = other_135;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_join(self_156: Scalar, other_136: Motor) -> Motor {
    var self_157: Scalar;
    var other_137: Motor;

    self_157 = self_156;
    other_137 = other_136;
    let _e4: Scalar = self_157;
    let _e7: Motor = other_137;
    let _e10: Scalar = self_157;
    let _e13: Motor = other_137;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_inner_product(self_158: Scalar, other_138: Motor) -> Motor {
    var self_159: Scalar;
    var other_139: Motor;

    self_159 = self_158;
    other_139 = other_138;
    let _e4: Scalar = self_159;
    let _e7: Motor = other_139;
    let _e10: Scalar = self_159;
    let _e13: Motor = other_139;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_left_contraction(self_160: Scalar, other_140: Motor) -> Motor {
    var self_161: Scalar;
    var other_141: Motor;

    self_161 = self_160;
    other_141 = other_140;
    let _e4: Scalar = self_161;
    let _e7: Motor = other_141;
    let _e10: Scalar = self_161;
    let _e13: Motor = other_141;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_rotor_geometric_product(self_162: Scalar, other_142: Rotor) -> Rotor {
    var self_163: Scalar;
    var other_143: Rotor;

    self_163 = self_162;
    other_143 = other_142;
    let _e4: Scalar = self_163;
    let _e7: Rotor = other_143;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_regressive_product(self_164: Scalar, other_144: Rotor) -> Scalar {
    var self_165: Scalar;
    var other_145: Rotor;

    self_165 = self_164;
    other_145 = other_144;
    let _e4: Scalar = self_165;
    let _e6: Rotor = other_145;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_anti_wedge(self_166: Scalar, other_146: Rotor) -> Scalar {
    var self_167: Scalar;
    var other_147: Rotor;

    self_167 = self_166;
    other_147 = other_146;
    let _e4: Scalar = self_167;
    let _e6: Rotor = other_147;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_meet(self_168: Scalar, other_148: Rotor) -> Scalar {
    var self_169: Scalar;
    var other_149: Rotor;

    self_169 = self_168;
    other_149 = other_148;
    let _e4: Scalar = self_169;
    let _e6: Rotor = other_149;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_rotor_outer_product(self_170: Scalar, other_150: Rotor) -> Rotor {
    var self_171: Scalar;
    var other_151: Rotor;

    self_171 = self_170;
    other_151 = other_150;
    let _e4: Scalar = self_171;
    let _e7: Rotor = other_151;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_wedge(self_172: Scalar, other_152: Rotor) -> Rotor {
    var self_173: Scalar;
    var other_153: Rotor;

    self_173 = self_172;
    other_153 = other_152;
    let _e4: Scalar = self_173;
    let _e7: Rotor = other_153;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_join(self_174: Scalar, other_154: Rotor) -> Rotor {
    var self_175: Scalar;
    var other_155: Rotor;

    self_175 = self_174;
    other_155 = other_154;
    let _e4: Scalar = self_175;
    let _e7: Rotor = other_155;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_inner_product(self_176: Scalar, other_156: Rotor) -> Rotor {
    var self_177: Scalar;
    var other_157: Rotor;

    self_177 = self_176;
    other_157 = other_156;
    let _e4: Scalar = self_177;
    let _e7: Rotor = other_157;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_left_contraction(self_178: Scalar, other_158: Rotor) -> Rotor {
    var self_179: Scalar;
    var other_159: Rotor;

    self_179 = self_178;
    other_159 = other_158;
    let _e4: Scalar = self_179;
    let _e7: Rotor = other_159;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_geometric_product(self_180: Scalar, other_160: Translator) -> Translator {
    var self_181: Scalar;
    var other_161: Translator;

    self_181 = self_180;
    other_161 = other_160;
    let _e4: Scalar = self_181;
    let _e7: Translator = other_161;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_geometric_anti_product(self_182: Scalar, other_162: Translator) -> Scalar {
    var self_183: Scalar;
    var other_163: Translator;

    self_183 = self_182;
    other_163 = other_162;
    let _e4: Scalar = self_183;
    let _e6: Translator = other_163;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_regressive_product(self_184: Scalar, other_164: Translator) -> Scalar {
    var self_185: Scalar;
    var other_165: Translator;

    self_185 = self_184;
    other_165 = other_164;
    let _e4: Scalar = self_185;
    let _e6: Translator = other_165;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_anti_wedge(self_186: Scalar, other_166: Translator) -> Scalar {
    var self_187: Scalar;
    var other_167: Translator;

    self_187 = self_186;
    other_167 = other_166;
    let _e4: Scalar = self_187;
    let _e6: Translator = other_167;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_meet(self_188: Scalar, other_168: Translator) -> Scalar {
    var self_189: Scalar;
    var other_169: Translator;

    self_189 = self_188;
    other_169 = other_168;
    let _e4: Scalar = self_189;
    let _e6: Translator = other_169;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_outer_product(self_190: Scalar, other_170: Translator) -> Translator {
    var self_191: Scalar;
    var other_171: Translator;

    self_191 = self_190;
    other_171 = other_170;
    let _e4: Scalar = self_191;
    let _e7: Translator = other_171;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_wedge(self_192: Scalar, other_172: Translator) -> Translator {
    var self_193: Scalar;
    var other_173: Translator;

    self_193 = self_192;
    other_173 = other_172;
    let _e4: Scalar = self_193;
    let _e7: Translator = other_173;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_join(self_194: Scalar, other_174: Translator) -> Translator {
    var self_195: Scalar;
    var other_175: Translator;

    self_195 = self_194;
    other_175 = other_174;
    let _e4: Scalar = self_195;
    let _e7: Translator = other_175;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_product(self_196: Scalar, other_176: Translator) -> Translator {
    var self_197: Scalar;
    var other_177: Translator;

    self_197 = self_196;
    other_177 = other_176;
    let _e4: Scalar = self_197;
    let _e7: Translator = other_177;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_anti_product(self_198: Scalar, other_178: Translator) -> Scalar {
    var self_199: Scalar;
    var other_179: Translator;

    self_199 = self_198;
    other_179 = other_178;
    let _e4: Scalar = self_199;
    let _e6: Translator = other_179;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_translator_left_contraction(self_200: Scalar, other_180: Translator) -> Translator {
    var self_201: Scalar;
    var other_181: Translator;

    self_201 = self_200;
    other_181 = other_180;
    let _e4: Scalar = self_201;
    let _e7: Translator = other_181;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_right_anti_contraction(self_202: Scalar, other_182: Translator) -> Scalar {
    var self_203: Scalar;
    var other_183: Translator;

    self_203 = self_202;
    other_183 = other_182;
    let _e4: Scalar = self_203;
    let _e6: Translator = other_183;
    return Scalar((_e4.g0_ * _e6.g0_.w));
}

fn scalar_flector_geometric_product(self_204: Scalar, other_184: Flector) -> Flector {
    var self_205: Scalar;
    var other_185: Flector;

    self_205 = self_204;
    other_185 = other_184;
    let _e4: Scalar = self_205;
    let _e7: Flector = other_185;
    let _e10: Scalar = self_205;
    let _e13: Flector = other_185;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_outer_product(self_206: Scalar, other_186: Flector) -> Flector {
    var self_207: Scalar;
    var other_187: Flector;

    self_207 = self_206;
    other_187 = other_186;
    let _e4: Scalar = self_207;
    let _e7: Flector = other_187;
    let _e10: Scalar = self_207;
    let _e13: Flector = other_187;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_wedge(self_208: Scalar, other_188: Flector) -> Flector {
    var self_209: Scalar;
    var other_189: Flector;

    self_209 = self_208;
    other_189 = other_188;
    let _e4: Scalar = self_209;
    let _e7: Flector = other_189;
    let _e10: Scalar = self_209;
    let _e13: Flector = other_189;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_join(self_210: Scalar, other_190: Flector) -> Flector {
    var self_211: Scalar;
    var other_191: Flector;

    self_211 = self_210;
    other_191 = other_190;
    let _e4: Scalar = self_211;
    let _e7: Flector = other_191;
    let _e10: Scalar = self_211;
    let _e13: Flector = other_191;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_inner_product(self_212: Scalar, other_192: Flector) -> Flector {
    var self_213: Scalar;
    var other_193: Flector;

    self_213 = self_212;
    other_193 = other_192;
    let _e4: Scalar = self_213;
    let _e7: Flector = other_193;
    let _e10: Scalar = self_213;
    let _e13: Flector = other_193;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_flector_left_contraction(self_214: Scalar, other_194: Flector) -> Flector {
    var self_215: Scalar;
    var other_195: Flector;

    self_215 = self_214;
    other_195 = other_194;
    let _e4: Scalar = self_215;
    let _e7: Flector = other_195;
    let _e10: Scalar = self_215;
    let _e13: Flector = other_195;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_multi_vector_add(self_216: Scalar, other_196: MultiVector) -> MultiVector {
    var self_217: Scalar;
    var other_197: MultiVector;

    self_217 = self_216;
    other_197 = other_196;
    let _e4: Scalar = self_217;
    let _e11: MultiVector = other_197;
    let _e14: MultiVector = other_197;
    let _e16: MultiVector = other_197;
    let _e18: MultiVector = other_197;
    let _e20: MultiVector = other_197;
    return MultiVector(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) + _e11.g0_), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn scalar_multi_vector_sub(self_218: Scalar, other_198: MultiVector) -> MultiVector {
    var self_219: Scalar;
    var other_199: MultiVector;

    self_219 = self_218;
    other_199 = other_198;
    let _e4: Scalar = self_219;
    let _e11: MultiVector = other_199;
    let _e16: MultiVector = other_199;
    let _e21: MultiVector = other_199;
    let _e26: MultiVector = other_199;
    let _e31: MultiVector = other_199;
    return MultiVector(((vec2<f32>(_e4.g0_) * vec2<f32>(1.0, 0.0)) - _e11.g0_), (vec4<f32>(0.0) - _e16.g1_), (vec3<f32>(0.0) - _e21.g2_), (vec3<f32>(0.0) - _e26.g3_), (vec4<f32>(0.0) - _e31.g4_));
}

fn scalar_multi_vector_geometric_product(self_220: Scalar, other_200: MultiVector) -> MultiVector {
    var self_221: Scalar;
    var other_201: MultiVector;

    self_221 = self_220;
    other_201 = other_200;
    let _e4: Scalar = self_221;
    let _e7: MultiVector = other_201;
    let _e10: Scalar = self_221;
    let _e13: MultiVector = other_201;
    let _e16: Scalar = self_221;
    let _e19: MultiVector = other_201;
    let _e22: Scalar = self_221;
    let _e25: MultiVector = other_201;
    let _e28: Scalar = self_221;
    let _e31: MultiVector = other_201;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_regressive_product(self_222: Scalar, other_202: MultiVector) -> Scalar {
    var self_223: Scalar;
    var other_203: MultiVector;

    self_223 = self_222;
    other_203 = other_202;
    let _e4: Scalar = self_223;
    let _e6: MultiVector = other_203;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_anti_wedge(self_224: Scalar, other_204: MultiVector) -> Scalar {
    var self_225: Scalar;
    var other_205: MultiVector;

    self_225 = self_224;
    other_205 = other_204;
    let _e4: Scalar = self_225;
    let _e6: MultiVector = other_205;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_meet(self_226: Scalar, other_206: MultiVector) -> Scalar {
    var self_227: Scalar;
    var other_207: MultiVector;

    self_227 = self_226;
    other_207 = other_206;
    let _e4: Scalar = self_227;
    let _e6: MultiVector = other_207;
    return Scalar((_e4.g0_ * _e6.g0_.y));
}

fn scalar_multi_vector_outer_product(self_228: Scalar, other_208: MultiVector) -> MultiVector {
    var self_229: Scalar;
    var other_209: MultiVector;

    self_229 = self_228;
    other_209 = other_208;
    let _e4: Scalar = self_229;
    let _e7: MultiVector = other_209;
    let _e10: Scalar = self_229;
    let _e13: MultiVector = other_209;
    let _e16: Scalar = self_229;
    let _e19: MultiVector = other_209;
    let _e22: Scalar = self_229;
    let _e25: MultiVector = other_209;
    let _e28: Scalar = self_229;
    let _e31: MultiVector = other_209;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_wedge(self_230: Scalar, other_210: MultiVector) -> MultiVector {
    var self_231: Scalar;
    var other_211: MultiVector;

    self_231 = self_230;
    other_211 = other_210;
    let _e4: Scalar = self_231;
    let _e7: MultiVector = other_211;
    let _e10: Scalar = self_231;
    let _e13: MultiVector = other_211;
    let _e16: Scalar = self_231;
    let _e19: MultiVector = other_211;
    let _e22: Scalar = self_231;
    let _e25: MultiVector = other_211;
    let _e28: Scalar = self_231;
    let _e31: MultiVector = other_211;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_join(self_232: Scalar, other_212: MultiVector) -> MultiVector {
    var self_233: Scalar;
    var other_213: MultiVector;

    self_233 = self_232;
    other_213 = other_212;
    let _e4: Scalar = self_233;
    let _e7: MultiVector = other_213;
    let _e10: Scalar = self_233;
    let _e13: MultiVector = other_213;
    let _e16: Scalar = self_233;
    let _e19: MultiVector = other_213;
    let _e22: Scalar = self_233;
    let _e25: MultiVector = other_213;
    let _e28: Scalar = self_233;
    let _e31: MultiVector = other_213;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_inner_product(self_234: Scalar, other_214: MultiVector) -> MultiVector {
    var self_235: Scalar;
    var other_215: MultiVector;

    self_235 = self_234;
    other_215 = other_214;
    let _e4: Scalar = self_235;
    let _e7: MultiVector = other_215;
    let _e10: Scalar = self_235;
    let _e13: MultiVector = other_215;
    let _e16: Scalar = self_235;
    let _e19: MultiVector = other_215;
    let _e22: Scalar = self_235;
    let _e25: MultiVector = other_215;
    let _e28: Scalar = self_235;
    let _e31: MultiVector = other_215;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_left_contraction(self_236: Scalar, other_216: MultiVector) -> MultiVector {
    var self_237: Scalar;
    var other_217: MultiVector;

    self_237 = self_236;
    other_217 = other_216;
    let _e4: Scalar = self_237;
    let _e7: MultiVector = other_217;
    let _e10: Scalar = self_237;
    let _e13: MultiVector = other_217;
    let _e16: Scalar = self_237;
    let _e19: MultiVector = other_217;
    let _e22: Scalar = self_237;
    let _e25: MultiVector = other_217;
    let _e28: Scalar = self_237;
    let _e31: MultiVector = other_217;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn scalar_multi_vector_right_contraction(self_238: Scalar, other_218: MultiVector) -> Scalar {
    var self_239: Scalar;
    var other_219: MultiVector;

    self_239 = self_238;
    other_219 = other_218;
    let _e4: Scalar = self_239;
    let _e6: MultiVector = other_219;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_scalar_product(self_240: Scalar, other_220: MultiVector) -> Scalar {
    var self_241: Scalar;
    var other_221: MultiVector;

    self_241 = self_240;
    other_221 = other_220;
    let _e4: Scalar = self_241;
    let _e6: MultiVector = other_221;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_dot(self_242: Scalar, other_222: MultiVector) -> Scalar {
    var self_243: Scalar;
    var other_223: MultiVector;

    self_243 = self_242;
    other_223 = other_222;
    let _e4: Scalar = self_243;
    let _e6: MultiVector = other_223;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_squared_magnitude(self_244: Scalar) -> Scalar {
    var self_245: Scalar;

    self_245 = self_244;
    let _e2: Scalar = self_245;
    let _e3: Scalar = self_245;
    let _e4: Scalar = scalar_reversal(_e3);
    let _e5: Scalar = scalar_scalar_scalar_product(_e2, _e4);
    return _e5;
}

fn scalar_magnitude(self_246: Scalar) -> Scalar {
    var self_247: Scalar;

    self_247 = self_246;
    let _e2: Scalar = self_247;
    let _e3: Scalar = scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn scalar_scale(self_248: Scalar, other_224: f32) -> Scalar {
    var self_249: Scalar;
    var other_225: f32;

    self_249 = self_248;
    other_225 = other_224;
    let _e4: Scalar = self_249;
    let _e5: f32 = other_225;
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn scalar_signum(self_250: Scalar) -> Scalar {
    var self_251: Scalar;

    self_251 = self_250;
    let _e2: Scalar = self_251;
    let _e3: Scalar = self_251;
    let _e4: Scalar = scalar_magnitude(_e3);
    let _e9: Scalar = scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn scalar_inverse(self_252: Scalar) -> Scalar {
    var self_253: Scalar;

    self_253 = self_252;
    let _e2: Scalar = self_253;
    let _e3: Scalar = scalar_reversal(_e2);
    let _e4: Scalar = self_253;
    let _e5: Scalar = scalar_squared_magnitude(_e4);
    let _e10: Scalar = scalar_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn anti_scalar_zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_grade(self_254: AntiScalar) -> i32 {
    return 4;
}

fn anti_scalar_anti_grade(self_255: AntiScalar) -> i32 {
    return 0;
}

fn anti_scalar_neg(self_256: AntiScalar) -> AntiScalar {
    var self_257: AntiScalar;

    self_257 = self_256;
    let _e2: AntiScalar = self_257;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_automorphism(self_258: AntiScalar) -> AntiScalar {
    var self_259: AntiScalar;

    self_259 = self_258;
    let _e2: AntiScalar = self_259;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_reversal(self_260: AntiScalar) -> AntiScalar {
    var self_261: AntiScalar;

    self_261 = self_260;
    let _e2: AntiScalar = self_261;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_conjugation(self_262: AntiScalar) -> AntiScalar {
    var self_263: AntiScalar;

    self_263 = self_262;
    let _e2: AntiScalar = self_263;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_dual(self_264: AntiScalar) -> Scalar {
    var self_265: AntiScalar;

    self_265 = self_264;
    let _e2: AntiScalar = self_265;
    return Scalar(_e2.g0_);
}

fn anti_scalar_anti_reversal(self_266: AntiScalar) -> AntiScalar {
    var self_267: AntiScalar;

    self_267 = self_266;
    let _e2: AntiScalar = self_267;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_right_complement(self_268: AntiScalar) -> Scalar {
    var self_269: AntiScalar;

    self_269 = self_268;
    let _e2: AntiScalar = self_269;
    return Scalar(_e2.g0_);
}

fn anti_scalar_left_complement(self_270: AntiScalar) -> Scalar {
    var self_271: AntiScalar;

    self_271 = self_270;
    let _e2: AntiScalar = self_271;
    return Scalar(_e2.g0_);
}

fn anti_scalar_double_complement(self_272: AntiScalar) -> AntiScalar {
    var self_273: AntiScalar;

    self_273 = self_272;
    let _e2: AntiScalar = self_273;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_scalar_add(self_274: AntiScalar, other_226: Scalar) -> HomogeneousMagnitude {
    var self_275: AntiScalar;
    var other_227: Scalar;

    self_275 = self_274;
    other_227 = other_226;
    let _e4: AntiScalar = self_275;
    let _e11: Scalar = other_227;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) + (vec2<f32>(_e11.g0_) * vec2<f32>(1.0, 0.0))));
}

fn anti_scalar_scalar_sub(self_276: AntiScalar, other_228: Scalar) -> HomogeneousMagnitude {
    var self_277: AntiScalar;
    var other_229: Scalar;

    self_277 = self_276;
    other_229 = other_228;
    let _e4: AntiScalar = self_277;
    let _e11: Scalar = other_229;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) - (vec2<f32>(_e11.g0_) * vec2<f32>(1.0, 0.0))));
}

fn anti_scalar_scalar_geometric_product(self_278: AntiScalar, other_230: Scalar) -> AntiScalar {
    var self_279: AntiScalar;
    var other_231: Scalar;

    self_279 = self_278;
    other_231 = other_230;
    let _e4: AntiScalar = self_279;
    let _e6: Scalar = other_231;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_geometric_anti_product(self_280: AntiScalar, other_232: Scalar) -> Scalar {
    var self_281: AntiScalar;
    var other_233: Scalar;

    self_281 = self_280;
    other_233 = other_232;
    let _e4: AntiScalar = self_281;
    let _e6: Scalar = other_233;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_regressive_product(self_282: AntiScalar, other_234: Scalar) -> Scalar {
    var self_283: AntiScalar;
    var other_235: Scalar;

    self_283 = self_282;
    other_235 = other_234;
    let _e4: AntiScalar = self_283;
    let _e6: Scalar = other_235;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_anti_wedge(self_284: AntiScalar, other_236: Scalar) -> Scalar {
    var self_285: AntiScalar;
    var other_237: Scalar;

    self_285 = self_284;
    other_237 = other_236;
    let _e4: AntiScalar = self_285;
    let _e6: Scalar = other_237;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_meet(self_286: AntiScalar, other_238: Scalar) -> Scalar {
    var self_287: AntiScalar;
    var other_239: Scalar;

    self_287 = self_286;
    other_239 = other_238;
    let _e4: AntiScalar = self_287;
    let _e6: Scalar = other_239;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_outer_product(self_288: AntiScalar, other_240: Scalar) -> AntiScalar {
    var self_289: AntiScalar;
    var other_241: Scalar;

    self_289 = self_288;
    other_241 = other_240;
    let _e4: AntiScalar = self_289;
    let _e6: Scalar = other_241;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_wedge(self_290: AntiScalar, other_242: Scalar) -> AntiScalar {
    var self_291: AntiScalar;
    var other_243: Scalar;

    self_291 = self_290;
    other_243 = other_242;
    let _e4: AntiScalar = self_291;
    let _e6: Scalar = other_243;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_join(self_292: AntiScalar, other_244: Scalar) -> AntiScalar {
    var self_293: AntiScalar;
    var other_245: Scalar;

    self_293 = self_292;
    other_245 = other_244;
    let _e4: AntiScalar = self_293;
    let _e6: Scalar = other_245;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_product(self_294: AntiScalar, other_246: Scalar) -> AntiScalar {
    var self_295: AntiScalar;
    var other_247: Scalar;

    self_295 = self_294;
    other_247 = other_246;
    let _e4: AntiScalar = self_295;
    let _e6: Scalar = other_247;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_anti_product(self_296: AntiScalar, other_248: Scalar) -> Scalar {
    var self_297: AntiScalar;
    var other_249: Scalar;

    self_297 = self_296;
    other_249 = other_248;
    let _e4: AntiScalar = self_297;
    let _e6: Scalar = other_249;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_right_contraction(self_298: AntiScalar, other_250: Scalar) -> AntiScalar {
    var self_299: AntiScalar;
    var other_251: Scalar;

    self_299 = self_298;
    other_251 = other_250;
    let _e4: AntiScalar = self_299;
    let _e6: Scalar = other_251;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_left_anti_contraction(self_300: AntiScalar, other_252: Scalar) -> Scalar {
    var self_301: AntiScalar;
    var other_253: Scalar;

    self_301 = self_300;
    other_253 = other_252;
    let _e4: AntiScalar = self_301;
    let _e6: Scalar = other_253;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_add(self_302: AntiScalar, other_254: AntiScalar) -> AntiScalar {
    var self_303: AntiScalar;
    var other_255: AntiScalar;

    self_303 = self_302;
    other_255 = other_254;
    let _e4: AntiScalar = self_303;
    let _e6: AntiScalar = other_255;
    return AntiScalar((_e4.g0_ + _e6.g0_));
}

fn anti_scalar_anti_scalar_sub(self_304: AntiScalar, other_256: AntiScalar) -> AntiScalar {
    var self_305: AntiScalar;
    var other_257: AntiScalar;

    self_305 = self_304;
    other_257 = other_256;
    let _e4: AntiScalar = self_305;
    let _e6: AntiScalar = other_257;
    return AntiScalar((_e4.g0_ - _e6.g0_));
}

fn anti_scalar_anti_scalar_mul(self_306: AntiScalar, other_258: AntiScalar) -> AntiScalar {
    var self_307: AntiScalar;
    var other_259: AntiScalar;

    self_307 = self_306;
    other_259 = other_258;
    let _e4: AntiScalar = self_307;
    let _e6: AntiScalar = other_259;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_div(self_308: AntiScalar, other_260: AntiScalar) -> AntiScalar {
    var self_309: AntiScalar;
    var other_261: AntiScalar;

    self_309 = self_308;
    other_261 = other_260;
    let _e4: AntiScalar = self_309;
    let _e8: AntiScalar = other_261;
    return AntiScalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn anti_scalar_anti_scalar_geometric_anti_product(self_310: AntiScalar, other_262: AntiScalar) -> AntiScalar {
    var self_311: AntiScalar;
    var other_263: AntiScalar;

    self_311 = self_310;
    other_263 = other_262;
    let _e4: AntiScalar = self_311;
    let _e6: AntiScalar = other_263;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_regressive_product(self_312: AntiScalar, other_264: AntiScalar) -> AntiScalar {
    var self_313: AntiScalar;
    var other_265: AntiScalar;

    self_313 = self_312;
    other_265 = other_264;
    let _e4: AntiScalar = self_313;
    let _e6: AntiScalar = other_265;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_wedge(self_314: AntiScalar, other_266: AntiScalar) -> AntiScalar {
    var self_315: AntiScalar;
    var other_267: AntiScalar;

    self_315 = self_314;
    other_267 = other_266;
    let _e4: AntiScalar = self_315;
    let _e6: AntiScalar = other_267;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_meet(self_316: AntiScalar, other_268: AntiScalar) -> AntiScalar {
    var self_317: AntiScalar;
    var other_269: AntiScalar;

    self_317 = self_316;
    other_269 = other_268;
    let _e4: AntiScalar = self_317;
    let _e6: AntiScalar = other_269;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_inner_anti_product(self_318: AntiScalar, other_270: AntiScalar) -> AntiScalar {
    var self_319: AntiScalar;
    var other_271: AntiScalar;

    self_319 = self_318;
    other_271 = other_270;
    let _e4: AntiScalar = self_319;
    let _e6: AntiScalar = other_271;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_left_anti_contraction(self_320: AntiScalar, other_272: AntiScalar) -> AntiScalar {
    var self_321: AntiScalar;
    var other_273: AntiScalar;

    self_321 = self_320;
    other_273 = other_272;
    let _e4: AntiScalar = self_321;
    let _e6: AntiScalar = other_273;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_right_anti_contraction(self_322: AntiScalar, other_274: AntiScalar) -> AntiScalar {
    var self_323: AntiScalar;
    var other_275: AntiScalar;

    self_323 = self_322;
    other_275 = other_274;
    let _e4: AntiScalar = self_323;
    let _e6: AntiScalar = other_275;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_scalar_product(self_324: AntiScalar, other_276: AntiScalar) -> AntiScalar {
    var self_325: AntiScalar;
    var other_277: AntiScalar;

    self_325 = self_324;
    other_277 = other_276;
    let _e4: AntiScalar = self_325;
    let _e6: AntiScalar = other_277;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_dot(self_326: AntiScalar, other_278: AntiScalar) -> AntiScalar {
    var self_327: AntiScalar;
    var other_279: AntiScalar;

    self_327 = self_326;
    other_279 = other_278;
    let _e4: AntiScalar = self_327;
    let _e6: AntiScalar = other_279;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_homogeneous_magnitude_add(self_328: AntiScalar, other_280: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_329: AntiScalar;
    var other_281: HomogeneousMagnitude;

    self_329 = self_328;
    other_281 = other_280;
    let _e4: AntiScalar = self_329;
    let _e11: HomogeneousMagnitude = other_281;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) + _e11.g0_));
}

fn anti_scalar_homogeneous_magnitude_sub(self_330: AntiScalar, other_282: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_331: AntiScalar;
    var other_283: HomogeneousMagnitude;

    self_331 = self_330;
    other_283 = other_282;
    let _e4: AntiScalar = self_331;
    let _e11: HomogeneousMagnitude = other_283;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) - _e11.g0_));
}

fn anti_scalar_homogeneous_magnitude_geometric_product(self_332: AntiScalar, other_284: HomogeneousMagnitude) -> AntiScalar {
    var self_333: AntiScalar;
    var other_285: HomogeneousMagnitude;

    self_333 = self_332;
    other_285 = other_284;
    let _e4: AntiScalar = self_333;
    let _e6: HomogeneousMagnitude = other_285;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_geometric_anti_product(self_334: AntiScalar, other_286: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_335: AntiScalar;
    var other_287: HomogeneousMagnitude;

    self_335 = self_334;
    other_287 = other_286;
    let _e4: AntiScalar = self_335;
    let _e7: HomogeneousMagnitude = other_287;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_regressive_product(self_336: AntiScalar, other_288: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_337: AntiScalar;
    var other_289: HomogeneousMagnitude;

    self_337 = self_336;
    other_289 = other_288;
    let _e4: AntiScalar = self_337;
    let _e7: HomogeneousMagnitude = other_289;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_anti_wedge(self_338: AntiScalar, other_290: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_339: AntiScalar;
    var other_291: HomogeneousMagnitude;

    self_339 = self_338;
    other_291 = other_290;
    let _e4: AntiScalar = self_339;
    let _e7: HomogeneousMagnitude = other_291;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_meet(self_340: AntiScalar, other_292: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_341: AntiScalar;
    var other_293: HomogeneousMagnitude;

    self_341 = self_340;
    other_293 = other_292;
    let _e4: AntiScalar = self_341;
    let _e7: HomogeneousMagnitude = other_293;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_outer_product(self_342: AntiScalar, other_294: HomogeneousMagnitude) -> AntiScalar {
    var self_343: AntiScalar;
    var other_295: HomogeneousMagnitude;

    self_343 = self_342;
    other_295 = other_294;
    let _e4: AntiScalar = self_343;
    let _e6: HomogeneousMagnitude = other_295;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_wedge(self_344: AntiScalar, other_296: HomogeneousMagnitude) -> AntiScalar {
    var self_345: AntiScalar;
    var other_297: HomogeneousMagnitude;

    self_345 = self_344;
    other_297 = other_296;
    let _e4: AntiScalar = self_345;
    let _e6: HomogeneousMagnitude = other_297;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_join(self_346: AntiScalar, other_298: HomogeneousMagnitude) -> AntiScalar {
    var self_347: AntiScalar;
    var other_299: HomogeneousMagnitude;

    self_347 = self_346;
    other_299 = other_298;
    let _e4: AntiScalar = self_347;
    let _e6: HomogeneousMagnitude = other_299;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_inner_product(self_348: AntiScalar, other_300: HomogeneousMagnitude) -> AntiScalar {
    var self_349: AntiScalar;
    var other_301: HomogeneousMagnitude;

    self_349 = self_348;
    other_301 = other_300;
    let _e4: AntiScalar = self_349;
    let _e6: HomogeneousMagnitude = other_301;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_inner_anti_product(self_350: AntiScalar, other_302: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_351: AntiScalar;
    var other_303: HomogeneousMagnitude;

    self_351 = self_350;
    other_303 = other_302;
    let _e4: AntiScalar = self_351;
    let _e7: HomogeneousMagnitude = other_303;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_right_contraction(self_352: AntiScalar, other_304: HomogeneousMagnitude) -> AntiScalar {
    var self_353: AntiScalar;
    var other_305: HomogeneousMagnitude;

    self_353 = self_352;
    other_305 = other_304;
    let _e4: AntiScalar = self_353;
    let _e6: HomogeneousMagnitude = other_305;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_homogeneous_magnitude_left_anti_contraction(self_354: AntiScalar, other_306: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_355: AntiScalar;
    var other_307: HomogeneousMagnitude;

    self_355 = self_354;
    other_307 = other_306;
    let _e4: AntiScalar = self_355;
    let _e7: HomogeneousMagnitude = other_307;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_homogeneous_magnitude_right_anti_contraction(self_356: AntiScalar, other_308: HomogeneousMagnitude) -> AntiScalar {
    var self_357: AntiScalar;
    var other_309: HomogeneousMagnitude;

    self_357 = self_356;
    other_309 = other_308;
    let _e4: AntiScalar = self_357;
    let _e6: HomogeneousMagnitude = other_309;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_homogeneous_magnitude_anti_scalar_product(self_358: AntiScalar, other_310: HomogeneousMagnitude) -> AntiScalar {
    var self_359: AntiScalar;
    var other_311: HomogeneousMagnitude;

    self_359 = self_358;
    other_311 = other_310;
    let _e4: AntiScalar = self_359;
    let _e6: HomogeneousMagnitude = other_311;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_homogeneous_magnitude_anti_dot(self_360: AntiScalar, other_312: HomogeneousMagnitude) -> AntiScalar {
    var self_361: AntiScalar;
    var other_313: HomogeneousMagnitude;

    self_361 = self_360;
    other_313 = other_312;
    let _e4: AntiScalar = self_361;
    let _e6: HomogeneousMagnitude = other_313;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_point_geometric_anti_product(self_362: AntiScalar, other_314: Point) -> Point {
    var self_363: AntiScalar;
    var other_315: Point;

    self_363 = self_362;
    other_315 = other_314;
    let _e4: AntiScalar = self_363;
    let _e7: Point = other_315;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_regressive_product(self_364: AntiScalar, other_316: Point) -> Point {
    var self_365: AntiScalar;
    var other_317: Point;

    self_365 = self_364;
    other_317 = other_316;
    let _e4: AntiScalar = self_365;
    let _e7: Point = other_317;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_anti_wedge(self_366: AntiScalar, other_318: Point) -> Point {
    var self_367: AntiScalar;
    var other_319: Point;

    self_367 = self_366;
    other_319 = other_318;
    let _e4: AntiScalar = self_367;
    let _e7: Point = other_319;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_meet(self_368: AntiScalar, other_320: Point) -> Point {
    var self_369: AntiScalar;
    var other_321: Point;

    self_369 = self_368;
    other_321 = other_320;
    let _e4: AntiScalar = self_369;
    let _e7: Point = other_321;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_inner_anti_product(self_370: AntiScalar, other_322: Point) -> Point {
    var self_371: AntiScalar;
    var other_323: Point;

    self_371 = self_370;
    other_323 = other_322;
    let _e4: AntiScalar = self_371;
    let _e7: Point = other_323;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_left_anti_contraction(self_372: AntiScalar, other_324: Point) -> Point {
    var self_373: AntiScalar;
    var other_325: Point;

    self_373 = self_372;
    other_325 = other_324;
    let _e4: AntiScalar = self_373;
    let _e7: Point = other_325;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_line_add(self_374: AntiScalar, other_326: Line) -> Motor {
    var self_375: AntiScalar;
    var other_327: Line;

    self_375 = self_374;
    other_327 = other_326;
    let _e4: AntiScalar = self_375;
    let _e13: Line = other_327;
    let _e16: Line = other_327;
    let _e19: Line = other_327;
    let _e22: Line = other_327;
    let _e33: Line = other_327;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), _e33.g1_);
}

fn anti_scalar_line_sub(self_376: AntiScalar, other_328: Line) -> Motor {
    var self_377: AntiScalar;
    var other_329: Line;

    self_377 = self_376;
    other_329 = other_328;
    let _e4: AntiScalar = self_377;
    let _e13: Line = other_329;
    let _e16: Line = other_329;
    let _e19: Line = other_329;
    let _e22: Line = other_329;
    let _e35: Line = other_329;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(0.0) - _e35.g1_));
}

fn anti_scalar_line_geometric_anti_product(self_378: AntiScalar, other_330: Line) -> Line {
    var self_379: AntiScalar;
    var other_331: Line;

    self_379 = self_378;
    other_331 = other_330;
    let _e4: AntiScalar = self_379;
    let _e7: Line = other_331;
    let _e10: AntiScalar = self_379;
    let _e13: Line = other_331;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_regressive_product(self_380: AntiScalar, other_332: Line) -> Line {
    var self_381: AntiScalar;
    var other_333: Line;

    self_381 = self_380;
    other_333 = other_332;
    let _e4: AntiScalar = self_381;
    let _e7: Line = other_333;
    let _e10: AntiScalar = self_381;
    let _e13: Line = other_333;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_anti_wedge(self_382: AntiScalar, other_334: Line) -> Line {
    var self_383: AntiScalar;
    var other_335: Line;

    self_383 = self_382;
    other_335 = other_334;
    let _e4: AntiScalar = self_383;
    let _e7: Line = other_335;
    let _e10: AntiScalar = self_383;
    let _e13: Line = other_335;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_meet(self_384: AntiScalar, other_336: Line) -> Line {
    var self_385: AntiScalar;
    var other_337: Line;

    self_385 = self_384;
    other_337 = other_336;
    let _e4: AntiScalar = self_385;
    let _e7: Line = other_337;
    let _e10: AntiScalar = self_385;
    let _e13: Line = other_337;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_inner_anti_product(self_386: AntiScalar, other_338: Line) -> Line {
    var self_387: AntiScalar;
    var other_339: Line;

    self_387 = self_386;
    other_339 = other_338;
    let _e4: AntiScalar = self_387;
    let _e7: Line = other_339;
    let _e10: AntiScalar = self_387;
    let _e13: Line = other_339;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_left_anti_contraction(self_388: AntiScalar, other_340: Line) -> Line {
    var self_389: AntiScalar;
    var other_341: Line;

    self_389 = self_388;
    other_341 = other_340;
    let _e4: AntiScalar = self_389;
    let _e7: Line = other_341;
    let _e10: AntiScalar = self_389;
    let _e13: Line = other_341;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_plane_geometric_anti_product(self_390: AntiScalar, other_342: Plane) -> Plane {
    var self_391: AntiScalar;
    var other_343: Plane;

    self_391 = self_390;
    other_343 = other_342;
    let _e4: AntiScalar = self_391;
    let _e7: Plane = other_343;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_regressive_product(self_392: AntiScalar, other_344: Plane) -> Plane {
    var self_393: AntiScalar;
    var other_345: Plane;

    self_393 = self_392;
    other_345 = other_344;
    let _e4: AntiScalar = self_393;
    let _e7: Plane = other_345;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_anti_wedge(self_394: AntiScalar, other_346: Plane) -> Plane {
    var self_395: AntiScalar;
    var other_347: Plane;

    self_395 = self_394;
    other_347 = other_346;
    let _e4: AntiScalar = self_395;
    let _e7: Plane = other_347;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_meet(self_396: AntiScalar, other_348: Plane) -> Plane {
    var self_397: AntiScalar;
    var other_349: Plane;

    self_397 = self_396;
    other_349 = other_348;
    let _e4: AntiScalar = self_397;
    let _e7: Plane = other_349;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_inner_anti_product(self_398: AntiScalar, other_350: Plane) -> Plane {
    var self_399: AntiScalar;
    var other_351: Plane;

    self_399 = self_398;
    other_351 = other_350;
    let _e4: AntiScalar = self_399;
    let _e7: Plane = other_351;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_left_anti_contraction(self_400: AntiScalar, other_352: Plane) -> Plane {
    var self_401: AntiScalar;
    var other_353: Plane;

    self_401 = self_400;
    other_353 = other_352;
    let _e4: AntiScalar = self_401;
    let _e7: Plane = other_353;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_motor_add(self_402: AntiScalar, other_354: Motor) -> Motor {
    var self_403: AntiScalar;
    var other_355: Motor;

    self_403 = self_402;
    other_355 = other_354;
    let _e4: AntiScalar = self_403;
    let _e13: Motor = other_355;
    let _e16: Motor = other_355;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), _e16.g1_);
}

fn anti_scalar_motor_sub(self_404: AntiScalar, other_356: Motor) -> Motor {
    var self_405: AntiScalar;
    var other_357: Motor;

    self_405 = self_404;
    other_357 = other_356;
    let _e4: AntiScalar = self_405;
    let _e13: Motor = other_357;
    let _e18: Motor = other_357;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), (vec3<f32>(0.0) - _e18.g1_));
}

fn anti_scalar_motor_geometric_anti_product(self_406: AntiScalar, other_358: Motor) -> Motor {
    var self_407: AntiScalar;
    var other_359: Motor;

    self_407 = self_406;
    other_359 = other_358;
    let _e4: AntiScalar = self_407;
    let _e7: Motor = other_359;
    let _e10: AntiScalar = self_407;
    let _e13: Motor = other_359;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_regressive_product(self_408: AntiScalar, other_360: Motor) -> Motor {
    var self_409: AntiScalar;
    var other_361: Motor;

    self_409 = self_408;
    other_361 = other_360;
    let _e4: AntiScalar = self_409;
    let _e7: Motor = other_361;
    let _e10: AntiScalar = self_409;
    let _e13: Motor = other_361;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_anti_wedge(self_410: AntiScalar, other_362: Motor) -> Motor {
    var self_411: AntiScalar;
    var other_363: Motor;

    self_411 = self_410;
    other_363 = other_362;
    let _e4: AntiScalar = self_411;
    let _e7: Motor = other_363;
    let _e10: AntiScalar = self_411;
    let _e13: Motor = other_363;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_meet(self_412: AntiScalar, other_364: Motor) -> Motor {
    var self_413: AntiScalar;
    var other_365: Motor;

    self_413 = self_412;
    other_365 = other_364;
    let _e4: AntiScalar = self_413;
    let _e7: Motor = other_365;
    let _e10: AntiScalar = self_413;
    let _e13: Motor = other_365;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_inner_anti_product(self_414: AntiScalar, other_366: Motor) -> Motor {
    var self_415: AntiScalar;
    var other_367: Motor;

    self_415 = self_414;
    other_367 = other_366;
    let _e4: AntiScalar = self_415;
    let _e7: Motor = other_367;
    let _e10: AntiScalar = self_415;
    let _e13: Motor = other_367;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_left_anti_contraction(self_416: AntiScalar, other_368: Motor) -> Motor {
    var self_417: AntiScalar;
    var other_369: Motor;

    self_417 = self_416;
    other_369 = other_368;
    let _e4: AntiScalar = self_417;
    let _e7: Motor = other_369;
    let _e10: AntiScalar = self_417;
    let _e13: Motor = other_369;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_right_anti_contraction(self_418: AntiScalar, other_370: Motor) -> AntiScalar {
    var self_419: AntiScalar;
    var other_371: Motor;

    self_419 = self_418;
    other_371 = other_370;
    let _e4: AntiScalar = self_419;
    let _e6: Motor = other_371;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_motor_anti_scalar_product(self_420: AntiScalar, other_372: Motor) -> AntiScalar {
    var self_421: AntiScalar;
    var other_373: Motor;

    self_421 = self_420;
    other_373 = other_372;
    let _e4: AntiScalar = self_421;
    let _e6: Motor = other_373;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_motor_anti_dot(self_422: AntiScalar, other_374: Motor) -> AntiScalar {
    var self_423: AntiScalar;
    var other_375: Motor;

    self_423 = self_422;
    other_375 = other_374;
    let _e4: AntiScalar = self_423;
    let _e6: Motor = other_375;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_add(self_424: AntiScalar, other_376: Rotor) -> Rotor {
    var self_425: AntiScalar;
    var other_377: Rotor;

    self_425 = self_424;
    other_377 = other_376;
    let _e4: AntiScalar = self_425;
    let _e13: Rotor = other_377;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_rotor_sub(self_426: AntiScalar, other_378: Rotor) -> Rotor {
    var self_427: AntiScalar;
    var other_379: Rotor;

    self_427 = self_426;
    other_379 = other_378;
    let _e4: AntiScalar = self_427;
    let _e13: Rotor = other_379;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_rotor_geometric_anti_product(self_428: AntiScalar, other_380: Rotor) -> Rotor {
    var self_429: AntiScalar;
    var other_381: Rotor;

    self_429 = self_428;
    other_381 = other_380;
    let _e4: AntiScalar = self_429;
    let _e7: Rotor = other_381;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_regressive_product(self_430: AntiScalar, other_382: Rotor) -> Rotor {
    var self_431: AntiScalar;
    var other_383: Rotor;

    self_431 = self_430;
    other_383 = other_382;
    let _e4: AntiScalar = self_431;
    let _e7: Rotor = other_383;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_anti_wedge(self_432: AntiScalar, other_384: Rotor) -> Rotor {
    var self_433: AntiScalar;
    var other_385: Rotor;

    self_433 = self_432;
    other_385 = other_384;
    let _e4: AntiScalar = self_433;
    let _e7: Rotor = other_385;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_meet(self_434: AntiScalar, other_386: Rotor) -> Rotor {
    var self_435: AntiScalar;
    var other_387: Rotor;

    self_435 = self_434;
    other_387 = other_386;
    let _e4: AntiScalar = self_435;
    let _e7: Rotor = other_387;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_inner_anti_product(self_436: AntiScalar, other_388: Rotor) -> Rotor {
    var self_437: AntiScalar;
    var other_389: Rotor;

    self_437 = self_436;
    other_389 = other_388;
    let _e4: AntiScalar = self_437;
    let _e7: Rotor = other_389;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_left_anti_contraction(self_438: AntiScalar, other_390: Rotor) -> Rotor {
    var self_439: AntiScalar;
    var other_391: Rotor;

    self_439 = self_438;
    other_391 = other_390;
    let _e4: AntiScalar = self_439;
    let _e7: Rotor = other_391;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_right_anti_contraction(self_440: AntiScalar, other_392: Rotor) -> AntiScalar {
    var self_441: AntiScalar;
    var other_393: Rotor;

    self_441 = self_440;
    other_393 = other_392;
    let _e4: AntiScalar = self_441;
    let _e6: Rotor = other_393;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_anti_scalar_product(self_442: AntiScalar, other_394: Rotor) -> AntiScalar {
    var self_443: AntiScalar;
    var other_395: Rotor;

    self_443 = self_442;
    other_395 = other_394;
    let _e4: AntiScalar = self_443;
    let _e6: Rotor = other_395;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_rotor_anti_dot(self_444: AntiScalar, other_396: Rotor) -> AntiScalar {
    var self_445: AntiScalar;
    var other_397: Rotor;

    self_445 = self_444;
    other_397 = other_396;
    let _e4: AntiScalar = self_445;
    let _e6: Rotor = other_397;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_add(self_446: AntiScalar, other_398: Translator) -> Translator {
    var self_447: AntiScalar;
    var other_399: Translator;

    self_447 = self_446;
    other_399 = other_398;
    let _e4: AntiScalar = self_447;
    let _e13: Translator = other_399;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_));
}

fn anti_scalar_translator_sub(self_448: AntiScalar, other_400: Translator) -> Translator {
    var self_449: AntiScalar;
    var other_401: Translator;

    self_449 = self_448;
    other_401 = other_400;
    let _e4: AntiScalar = self_449;
    let _e13: Translator = other_401;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_));
}

fn anti_scalar_translator_geometric_anti_product(self_450: AntiScalar, other_402: Translator) -> Translator {
    var self_451: AntiScalar;
    var other_403: Translator;

    self_451 = self_450;
    other_403 = other_402;
    let _e4: AntiScalar = self_451;
    let _e7: Translator = other_403;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_regressive_product(self_452: AntiScalar, other_404: Translator) -> Translator {
    var self_453: AntiScalar;
    var other_405: Translator;

    self_453 = self_452;
    other_405 = other_404;
    let _e4: AntiScalar = self_453;
    let _e7: Translator = other_405;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_anti_wedge(self_454: AntiScalar, other_406: Translator) -> Translator {
    var self_455: AntiScalar;
    var other_407: Translator;

    self_455 = self_454;
    other_407 = other_406;
    let _e4: AntiScalar = self_455;
    let _e7: Translator = other_407;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_meet(self_456: AntiScalar, other_408: Translator) -> Translator {
    var self_457: AntiScalar;
    var other_409: Translator;

    self_457 = self_456;
    other_409 = other_408;
    let _e4: AntiScalar = self_457;
    let _e7: Translator = other_409;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_inner_anti_product(self_458: AntiScalar, other_410: Translator) -> Translator {
    var self_459: AntiScalar;
    var other_411: Translator;

    self_459 = self_458;
    other_411 = other_410;
    let _e4: AntiScalar = self_459;
    let _e7: Translator = other_411;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_left_anti_contraction(self_460: AntiScalar, other_412: Translator) -> Translator {
    var self_461: AntiScalar;
    var other_413: Translator;

    self_461 = self_460;
    other_413 = other_412;
    let _e4: AntiScalar = self_461;
    let _e7: Translator = other_413;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_right_anti_contraction(self_462: AntiScalar, other_414: Translator) -> AntiScalar {
    var self_463: AntiScalar;
    var other_415: Translator;

    self_463 = self_462;
    other_415 = other_414;
    let _e4: AntiScalar = self_463;
    let _e6: Translator = other_415;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_anti_scalar_product(self_464: AntiScalar, other_416: Translator) -> AntiScalar {
    var self_465: AntiScalar;
    var other_417: Translator;

    self_465 = self_464;
    other_417 = other_416;
    let _e4: AntiScalar = self_465;
    let _e6: Translator = other_417;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_translator_anti_dot(self_466: AntiScalar, other_418: Translator) -> AntiScalar {
    var self_467: AntiScalar;
    var other_419: Translator;

    self_467 = self_466;
    other_419 = other_418;
    let _e4: AntiScalar = self_467;
    let _e6: Translator = other_419;
    return AntiScalar((_e4.g0_ * _e6.g0_.w));
}

fn anti_scalar_flector_geometric_anti_product(self_468: AntiScalar, other_420: Flector) -> Flector {
    var self_469: AntiScalar;
    var other_421: Flector;

    self_469 = self_468;
    other_421 = other_420;
    let _e4: AntiScalar = self_469;
    let _e7: Flector = other_421;
    let _e10: AntiScalar = self_469;
    let _e13: Flector = other_421;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_regressive_product(self_470: AntiScalar, other_422: Flector) -> Flector {
    var self_471: AntiScalar;
    var other_423: Flector;

    self_471 = self_470;
    other_423 = other_422;
    let _e4: AntiScalar = self_471;
    let _e7: Flector = other_423;
    let _e10: AntiScalar = self_471;
    let _e13: Flector = other_423;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_anti_wedge(self_472: AntiScalar, other_424: Flector) -> Flector {
    var self_473: AntiScalar;
    var other_425: Flector;

    self_473 = self_472;
    other_425 = other_424;
    let _e4: AntiScalar = self_473;
    let _e7: Flector = other_425;
    let _e10: AntiScalar = self_473;
    let _e13: Flector = other_425;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_meet(self_474: AntiScalar, other_426: Flector) -> Flector {
    var self_475: AntiScalar;
    var other_427: Flector;

    self_475 = self_474;
    other_427 = other_426;
    let _e4: AntiScalar = self_475;
    let _e7: Flector = other_427;
    let _e10: AntiScalar = self_475;
    let _e13: Flector = other_427;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_inner_anti_product(self_476: AntiScalar, other_428: Flector) -> Flector {
    var self_477: AntiScalar;
    var other_429: Flector;

    self_477 = self_476;
    other_429 = other_428;
    let _e4: AntiScalar = self_477;
    let _e7: Flector = other_429;
    let _e10: AntiScalar = self_477;
    let _e13: Flector = other_429;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_flector_left_anti_contraction(self_478: AntiScalar, other_430: Flector) -> Flector {
    var self_479: AntiScalar;
    var other_431: Flector;

    self_479 = self_478;
    other_431 = other_430;
    let _e4: AntiScalar = self_479;
    let _e7: Flector = other_431;
    let _e10: AntiScalar = self_479;
    let _e13: Flector = other_431;
    return Flector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_multi_vector_add(self_480: AntiScalar, other_432: MultiVector) -> MultiVector {
    var self_481: AntiScalar;
    var other_433: MultiVector;

    self_481 = self_480;
    other_433 = other_432;
    let _e4: AntiScalar = self_481;
    let _e11: MultiVector = other_433;
    let _e14: MultiVector = other_433;
    let _e16: MultiVector = other_433;
    let _e18: MultiVector = other_433;
    let _e20: MultiVector = other_433;
    return MultiVector(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) + _e11.g0_), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn anti_scalar_multi_vector_sub(self_482: AntiScalar, other_434: MultiVector) -> MultiVector {
    var self_483: AntiScalar;
    var other_435: MultiVector;

    self_483 = self_482;
    other_435 = other_434;
    let _e4: AntiScalar = self_483;
    let _e11: MultiVector = other_435;
    let _e16: MultiVector = other_435;
    let _e21: MultiVector = other_435;
    let _e26: MultiVector = other_435;
    let _e31: MultiVector = other_435;
    return MultiVector(((vec2<f32>(_e4.g0_) * vec2<f32>(0.0, 1.0)) - _e11.g0_), (vec4<f32>(0.0) - _e16.g1_), (vec3<f32>(0.0) - _e21.g2_), (vec3<f32>(0.0) - _e26.g3_), (vec4<f32>(0.0) - _e31.g4_));
}

fn anti_scalar_multi_vector_geometric_anti_product(self_484: AntiScalar, other_436: MultiVector) -> MultiVector {
    var self_485: AntiScalar;
    var other_437: MultiVector;

    self_485 = self_484;
    other_437 = other_436;
    let _e4: AntiScalar = self_485;
    let _e7: MultiVector = other_437;
    let _e10: AntiScalar = self_485;
    let _e13: MultiVector = other_437;
    let _e16: AntiScalar = self_485;
    let _e19: MultiVector = other_437;
    let _e22: AntiScalar = self_485;
    let _e25: MultiVector = other_437;
    let _e28: AntiScalar = self_485;
    let _e31: MultiVector = other_437;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_regressive_product(self_486: AntiScalar, other_438: MultiVector) -> MultiVector {
    var self_487: AntiScalar;
    var other_439: MultiVector;

    self_487 = self_486;
    other_439 = other_438;
    let _e4: AntiScalar = self_487;
    let _e7: MultiVector = other_439;
    let _e10: AntiScalar = self_487;
    let _e13: MultiVector = other_439;
    let _e16: AntiScalar = self_487;
    let _e19: MultiVector = other_439;
    let _e22: AntiScalar = self_487;
    let _e25: MultiVector = other_439;
    let _e28: AntiScalar = self_487;
    let _e31: MultiVector = other_439;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_anti_wedge(self_488: AntiScalar, other_440: MultiVector) -> MultiVector {
    var self_489: AntiScalar;
    var other_441: MultiVector;

    self_489 = self_488;
    other_441 = other_440;
    let _e4: AntiScalar = self_489;
    let _e7: MultiVector = other_441;
    let _e10: AntiScalar = self_489;
    let _e13: MultiVector = other_441;
    let _e16: AntiScalar = self_489;
    let _e19: MultiVector = other_441;
    let _e22: AntiScalar = self_489;
    let _e25: MultiVector = other_441;
    let _e28: AntiScalar = self_489;
    let _e31: MultiVector = other_441;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_meet(self_490: AntiScalar, other_442: MultiVector) -> MultiVector {
    var self_491: AntiScalar;
    var other_443: MultiVector;

    self_491 = self_490;
    other_443 = other_442;
    let _e4: AntiScalar = self_491;
    let _e7: MultiVector = other_443;
    let _e10: AntiScalar = self_491;
    let _e13: MultiVector = other_443;
    let _e16: AntiScalar = self_491;
    let _e19: MultiVector = other_443;
    let _e22: AntiScalar = self_491;
    let _e25: MultiVector = other_443;
    let _e28: AntiScalar = self_491;
    let _e31: MultiVector = other_443;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_outer_product(self_492: AntiScalar, other_444: MultiVector) -> AntiScalar {
    var self_493: AntiScalar;
    var other_445: MultiVector;

    self_493 = self_492;
    other_445 = other_444;
    let _e4: AntiScalar = self_493;
    let _e6: MultiVector = other_445;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_wedge(self_494: AntiScalar, other_446: MultiVector) -> AntiScalar {
    var self_495: AntiScalar;
    var other_447: MultiVector;

    self_495 = self_494;
    other_447 = other_446;
    let _e4: AntiScalar = self_495;
    let _e6: MultiVector = other_447;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_join(self_496: AntiScalar, other_448: MultiVector) -> AntiScalar {
    var self_497: AntiScalar;
    var other_449: MultiVector;

    self_497 = self_496;
    other_449 = other_448;
    let _e4: AntiScalar = self_497;
    let _e6: MultiVector = other_449;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_inner_anti_product(self_498: AntiScalar, other_450: MultiVector) -> MultiVector {
    var self_499: AntiScalar;
    var other_451: MultiVector;

    self_499 = self_498;
    other_451 = other_450;
    let _e4: AntiScalar = self_499;
    let _e7: MultiVector = other_451;
    let _e10: AntiScalar = self_499;
    let _e13: MultiVector = other_451;
    let _e16: AntiScalar = self_499;
    let _e19: MultiVector = other_451;
    let _e22: AntiScalar = self_499;
    let _e25: MultiVector = other_451;
    let _e28: AntiScalar = self_499;
    let _e31: MultiVector = other_451;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_left_anti_contraction(self_500: AntiScalar, other_452: MultiVector) -> MultiVector {
    var self_501: AntiScalar;
    var other_453: MultiVector;

    self_501 = self_500;
    other_453 = other_452;
    let _e4: AntiScalar = self_501;
    let _e7: MultiVector = other_453;
    let _e10: AntiScalar = self_501;
    let _e13: MultiVector = other_453;
    let _e16: AntiScalar = self_501;
    let _e19: MultiVector = other_453;
    let _e22: AntiScalar = self_501;
    let _e25: MultiVector = other_453;
    let _e28: AntiScalar = self_501;
    let _e31: MultiVector = other_453;
    return MultiVector((vec2<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec3<f32>(_e16.g0_) * _e19.g2_), (vec3<f32>(_e22.g0_) * _e25.g3_), (vec4<f32>(_e28.g0_) * _e31.g4_));
}

fn anti_scalar_multi_vector_right_anti_contraction(self_502: AntiScalar, other_454: MultiVector) -> AntiScalar {
    var self_503: AntiScalar;
    var other_455: MultiVector;

    self_503 = self_502;
    other_455 = other_454;
    let _e4: AntiScalar = self_503;
    let _e6: MultiVector = other_455;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_multi_vector_anti_scalar_product(self_504: AntiScalar, other_456: MultiVector) -> AntiScalar {
    var self_505: AntiScalar;
    var other_457: MultiVector;

    self_505 = self_504;
    other_457 = other_456;
    let _e4: AntiScalar = self_505;
    let _e6: MultiVector = other_457;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_multi_vector_anti_dot(self_506: AntiScalar, other_458: MultiVector) -> AntiScalar {
    var self_507: AntiScalar;
    var other_459: MultiVector;

    self_507 = self_506;
    other_459 = other_458;
    let _e4: AntiScalar = self_507;
    let _e6: MultiVector = other_459;
    return AntiScalar((_e4.g0_ * _e6.g0_.y));
}

fn anti_scalar_scale(self_508: AntiScalar, other_460: f32) -> AntiScalar {
    var self_509: AntiScalar;
    var other_461: f32;

    self_509 = self_508;
    other_461 = other_460;
    let _e4: AntiScalar = self_509;
    let _e5: f32 = other_461;
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn anti_scalar_attitude(self_510: AntiScalar) -> Plane {
    var self_511: AntiScalar;

    self_511 = self_510;
    let _e2: AntiScalar = self_511;
    let _e9: Plane = anti_scalar_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn homogeneous_magnitude_zero() -> HomogeneousMagnitude {
    return HomogeneousMagnitude(vec2<f32>(0.0));
}

fn homogeneous_magnitude_one() -> HomogeneousMagnitude {
    return HomogeneousMagnitude(vec2<f32>(1.0, 0.0));
}

fn homogeneous_magnitude_neg(self_512: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_513: HomogeneousMagnitude;

    self_513 = self_512;
    let _e2: HomogeneousMagnitude = self_513;
    return HomogeneousMagnitude((_e2.g0_ * vec2<f32>(-(1.0))));
}

fn homogeneous_magnitude_automorphism(self_514: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_515: HomogeneousMagnitude;

    self_515 = self_514;
    let _e2: HomogeneousMagnitude = self_515;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_reversal(self_516: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_517: HomogeneousMagnitude;

    self_517 = self_516;
    let _e2: HomogeneousMagnitude = self_517;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_conjugation(self_518: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_519: HomogeneousMagnitude;

    self_519 = self_518;
    let _e2: HomogeneousMagnitude = self_519;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_dual(self_520: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_521: HomogeneousMagnitude;

    self_521 = self_520;
    let _e2: HomogeneousMagnitude = self_521;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_anti_reversal(self_522: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_523: HomogeneousMagnitude;

    self_523 = self_522;
    let _e2: HomogeneousMagnitude = self_523;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_right_complement(self_524: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_525: HomogeneousMagnitude;

    self_525 = self_524;
    let _e2: HomogeneousMagnitude = self_525;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_left_complement(self_526: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_527: HomogeneousMagnitude;

    self_527 = self_526;
    let _e2: HomogeneousMagnitude = self_527;
    return HomogeneousMagnitude(_e2.g0_.yx);
}

fn homogeneous_magnitude_double_complement(self_528: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_529: HomogeneousMagnitude;

    self_529 = self_528;
    let _e2: HomogeneousMagnitude = self_529;
    return HomogeneousMagnitude(_e2.g0_);
}

fn homogeneous_magnitude_scalar_into(self_530: HomogeneousMagnitude) -> Scalar {
    var self_531: HomogeneousMagnitude;

    self_531 = self_530;
    let _e2: HomogeneousMagnitude = self_531;
    return Scalar(_e2.g0_.x);
}

fn homogeneous_magnitude_scalar_add(self_532: HomogeneousMagnitude, other_462: Scalar) -> HomogeneousMagnitude {
    var self_533: HomogeneousMagnitude;
    var other_463: Scalar;

    self_533 = self_532;
    other_463 = other_462;
    let _e4: HomogeneousMagnitude = self_533;
    let _e6: Scalar = other_463;
    return HomogeneousMagnitude((_e4.g0_ + (vec2<f32>(_e6.g0_) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_scalar_sub(self_534: HomogeneousMagnitude, other_464: Scalar) -> HomogeneousMagnitude {
    var self_535: HomogeneousMagnitude;
    var other_465: Scalar;

    self_535 = self_534;
    other_465 = other_464;
    let _e4: HomogeneousMagnitude = self_535;
    let _e6: Scalar = other_465;
    return HomogeneousMagnitude((_e4.g0_ - (vec2<f32>(_e6.g0_) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_scalar_geometric_product(self_536: HomogeneousMagnitude, other_466: Scalar) -> HomogeneousMagnitude {
    var self_537: HomogeneousMagnitude;
    var other_467: Scalar;

    self_537 = self_536;
    other_467 = other_466;
    let _e4: HomogeneousMagnitude = self_537;
    let _e6: Scalar = other_467;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_geometric_anti_product(self_538: HomogeneousMagnitude, other_468: Scalar) -> Scalar {
    var self_539: HomogeneousMagnitude;
    var other_469: Scalar;

    self_539 = self_538;
    other_469 = other_468;
    let _e4: HomogeneousMagnitude = self_539;
    let _e7: Scalar = other_469;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_regressive_product(self_540: HomogeneousMagnitude, other_470: Scalar) -> Scalar {
    var self_541: HomogeneousMagnitude;
    var other_471: Scalar;

    self_541 = self_540;
    other_471 = other_470;
    let _e4: HomogeneousMagnitude = self_541;
    let _e7: Scalar = other_471;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_anti_wedge(self_542: HomogeneousMagnitude, other_472: Scalar) -> Scalar {
    var self_543: HomogeneousMagnitude;
    var other_473: Scalar;

    self_543 = self_542;
    other_473 = other_472;
    let _e4: HomogeneousMagnitude = self_543;
    let _e7: Scalar = other_473;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_meet(self_544: HomogeneousMagnitude, other_474: Scalar) -> Scalar {
    var self_545: HomogeneousMagnitude;
    var other_475: Scalar;

    self_545 = self_544;
    other_475 = other_474;
    let _e4: HomogeneousMagnitude = self_545;
    let _e7: Scalar = other_475;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_outer_product(self_546: HomogeneousMagnitude, other_476: Scalar) -> HomogeneousMagnitude {
    var self_547: HomogeneousMagnitude;
    var other_477: Scalar;

    self_547 = self_546;
    other_477 = other_476;
    let _e4: HomogeneousMagnitude = self_547;
    let _e6: Scalar = other_477;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_wedge(self_548: HomogeneousMagnitude, other_478: Scalar) -> HomogeneousMagnitude {
    var self_549: HomogeneousMagnitude;
    var other_479: Scalar;

    self_549 = self_548;
    other_479 = other_478;
    let _e4: HomogeneousMagnitude = self_549;
    let _e6: Scalar = other_479;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_join(self_550: HomogeneousMagnitude, other_480: Scalar) -> HomogeneousMagnitude {
    var self_551: HomogeneousMagnitude;
    var other_481: Scalar;

    self_551 = self_550;
    other_481 = other_480;
    let _e4: HomogeneousMagnitude = self_551;
    let _e6: Scalar = other_481;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_inner_product(self_552: HomogeneousMagnitude, other_482: Scalar) -> HomogeneousMagnitude {
    var self_553: HomogeneousMagnitude;
    var other_483: Scalar;

    self_553 = self_552;
    other_483 = other_482;
    let _e4: HomogeneousMagnitude = self_553;
    let _e6: Scalar = other_483;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_inner_anti_product(self_554: HomogeneousMagnitude, other_484: Scalar) -> Scalar {
    var self_555: HomogeneousMagnitude;
    var other_485: Scalar;

    self_555 = self_554;
    other_485 = other_484;
    let _e4: HomogeneousMagnitude = self_555;
    let _e7: Scalar = other_485;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_left_contraction(self_556: HomogeneousMagnitude, other_486: Scalar) -> Scalar {
    var self_557: HomogeneousMagnitude;
    var other_487: Scalar;

    self_557 = self_556;
    other_487 = other_486;
    let _e4: HomogeneousMagnitude = self_557;
    let _e7: Scalar = other_487;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_scalar_right_contraction(self_558: HomogeneousMagnitude, other_488: Scalar) -> HomogeneousMagnitude {
    var self_559: HomogeneousMagnitude;
    var other_489: Scalar;

    self_559 = self_558;
    other_489 = other_488;
    let _e4: HomogeneousMagnitude = self_559;
    let _e6: Scalar = other_489;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_scalar_left_anti_contraction(self_560: HomogeneousMagnitude, other_490: Scalar) -> Scalar {
    var self_561: HomogeneousMagnitude;
    var other_491: Scalar;

    self_561 = self_560;
    other_491 = other_490;
    let _e4: HomogeneousMagnitude = self_561;
    let _e7: Scalar = other_491;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_scalar_scalar_product(self_562: HomogeneousMagnitude, other_492: Scalar) -> Scalar {
    var self_563: HomogeneousMagnitude;
    var other_493: Scalar;

    self_563 = self_562;
    other_493 = other_492;
    let _e4: HomogeneousMagnitude = self_563;
    let _e7: Scalar = other_493;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_scalar_dot(self_564: HomogeneousMagnitude, other_494: Scalar) -> Scalar {
    var self_565: HomogeneousMagnitude;
    var other_495: Scalar;

    self_565 = self_564;
    other_495 = other_494;
    let _e4: HomogeneousMagnitude = self_565;
    let _e7: Scalar = other_495;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_into(self_566: HomogeneousMagnitude) -> AntiScalar {
    var self_567: HomogeneousMagnitude;

    self_567 = self_566;
    let _e2: HomogeneousMagnitude = self_567;
    return AntiScalar(_e2.g0_.y);
}

fn homogeneous_magnitude_anti_scalar_add(self_568: HomogeneousMagnitude, other_496: AntiScalar) -> HomogeneousMagnitude {
    var self_569: HomogeneousMagnitude;
    var other_497: AntiScalar;

    self_569 = self_568;
    other_497 = other_496;
    let _e4: HomogeneousMagnitude = self_569;
    let _e6: AntiScalar = other_497;
    return HomogeneousMagnitude((_e4.g0_ + (vec2<f32>(_e6.g0_) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_anti_scalar_sub(self_570: HomogeneousMagnitude, other_498: AntiScalar) -> HomogeneousMagnitude {
    var self_571: HomogeneousMagnitude;
    var other_499: AntiScalar;

    self_571 = self_570;
    other_499 = other_498;
    let _e4: HomogeneousMagnitude = self_571;
    let _e6: AntiScalar = other_499;
    return HomogeneousMagnitude((_e4.g0_ - (vec2<f32>(_e6.g0_) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_anti_scalar_geometric_product(self_572: HomogeneousMagnitude, other_500: AntiScalar) -> AntiScalar {
    var self_573: HomogeneousMagnitude;
    var other_501: AntiScalar;

    self_573 = self_572;
    other_501 = other_500;
    let _e4: HomogeneousMagnitude = self_573;
    let _e7: AntiScalar = other_501;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_geometric_anti_product(self_574: HomogeneousMagnitude, other_502: AntiScalar) -> HomogeneousMagnitude {
    var self_575: HomogeneousMagnitude;
    var other_503: AntiScalar;

    self_575 = self_574;
    other_503 = other_502;
    let _e4: HomogeneousMagnitude = self_575;
    let _e6: AntiScalar = other_503;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_regressive_product(self_576: HomogeneousMagnitude, other_504: AntiScalar) -> HomogeneousMagnitude {
    var self_577: HomogeneousMagnitude;
    var other_505: AntiScalar;

    self_577 = self_576;
    other_505 = other_504;
    let _e4: HomogeneousMagnitude = self_577;
    let _e6: AntiScalar = other_505;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_anti_wedge(self_578: HomogeneousMagnitude, other_506: AntiScalar) -> HomogeneousMagnitude {
    var self_579: HomogeneousMagnitude;
    var other_507: AntiScalar;

    self_579 = self_578;
    other_507 = other_506;
    let _e4: HomogeneousMagnitude = self_579;
    let _e6: AntiScalar = other_507;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_meet(self_580: HomogeneousMagnitude, other_508: AntiScalar) -> HomogeneousMagnitude {
    var self_581: HomogeneousMagnitude;
    var other_509: AntiScalar;

    self_581 = self_580;
    other_509 = other_508;
    let _e4: HomogeneousMagnitude = self_581;
    let _e6: AntiScalar = other_509;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_outer_product(self_582: HomogeneousMagnitude, other_510: AntiScalar) -> AntiScalar {
    var self_583: HomogeneousMagnitude;
    var other_511: AntiScalar;

    self_583 = self_582;
    other_511 = other_510;
    let _e4: HomogeneousMagnitude = self_583;
    let _e7: AntiScalar = other_511;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_wedge(self_584: HomogeneousMagnitude, other_512: AntiScalar) -> AntiScalar {
    var self_585: HomogeneousMagnitude;
    var other_513: AntiScalar;

    self_585 = self_584;
    other_513 = other_512;
    let _e4: HomogeneousMagnitude = self_585;
    let _e7: AntiScalar = other_513;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_join(self_586: HomogeneousMagnitude, other_514: AntiScalar) -> AntiScalar {
    var self_587: HomogeneousMagnitude;
    var other_515: AntiScalar;

    self_587 = self_586;
    other_515 = other_514;
    let _e4: HomogeneousMagnitude = self_587;
    let _e7: AntiScalar = other_515;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_inner_product(self_588: HomogeneousMagnitude, other_516: AntiScalar) -> AntiScalar {
    var self_589: HomogeneousMagnitude;
    var other_517: AntiScalar;

    self_589 = self_588;
    other_517 = other_516;
    let _e4: HomogeneousMagnitude = self_589;
    let _e7: AntiScalar = other_517;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_inner_anti_product(self_590: HomogeneousMagnitude, other_518: AntiScalar) -> HomogeneousMagnitude {
    var self_591: HomogeneousMagnitude;
    var other_519: AntiScalar;

    self_591 = self_590;
    other_519 = other_518;
    let _e4: HomogeneousMagnitude = self_591;
    let _e6: AntiScalar = other_519;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_left_contraction(self_592: HomogeneousMagnitude, other_520: AntiScalar) -> AntiScalar {
    var self_593: HomogeneousMagnitude;
    var other_521: AntiScalar;

    self_593 = self_592;
    other_521 = other_520;
    let _e4: HomogeneousMagnitude = self_593;
    let _e7: AntiScalar = other_521;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_left_anti_contraction(self_594: HomogeneousMagnitude, other_522: AntiScalar) -> AntiScalar {
    var self_595: HomogeneousMagnitude;
    var other_523: AntiScalar;

    self_595 = self_594;
    other_523 = other_522;
    let _e4: HomogeneousMagnitude = self_595;
    let _e7: AntiScalar = other_523;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_right_anti_contraction(self_596: HomogeneousMagnitude, other_524: AntiScalar) -> HomogeneousMagnitude {
    var self_597: HomogeneousMagnitude;
    var other_525: AntiScalar;

    self_597 = self_596;
    other_525 = other_524;
    let _e4: HomogeneousMagnitude = self_597;
    let _e6: AntiScalar = other_525;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_)));
}

fn homogeneous_magnitude_anti_scalar_anti_scalar_product(self_598: HomogeneousMagnitude, other_526: AntiScalar) -> AntiScalar {
    var self_599: HomogeneousMagnitude;
    var other_527: AntiScalar;

    self_599 = self_598;
    other_527 = other_526;
    let _e4: HomogeneousMagnitude = self_599;
    let _e7: AntiScalar = other_527;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_anti_scalar_anti_dot(self_600: HomogeneousMagnitude, other_528: AntiScalar) -> AntiScalar {
    var self_601: HomogeneousMagnitude;
    var other_529: AntiScalar;

    self_601 = self_600;
    other_529 = other_528;
    let _e4: HomogeneousMagnitude = self_601;
    let _e7: AntiScalar = other_529;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_add(self_602: HomogeneousMagnitude, other_530: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_603: HomogeneousMagnitude;
    var other_531: HomogeneousMagnitude;

    self_603 = self_602;
    other_531 = other_530;
    let _e4: HomogeneousMagnitude = self_603;
    let _e6: HomogeneousMagnitude = other_531;
    return HomogeneousMagnitude((_e4.g0_ + _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_sub(self_604: HomogeneousMagnitude, other_532: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_605: HomogeneousMagnitude;
    var other_533: HomogeneousMagnitude;

    self_605 = self_604;
    other_533 = other_532;
    let _e4: HomogeneousMagnitude = self_605;
    let _e6: HomogeneousMagnitude = other_533;
    return HomogeneousMagnitude((_e4.g0_ - _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_mul(self_606: HomogeneousMagnitude, other_534: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_607: HomogeneousMagnitude;
    var other_535: HomogeneousMagnitude;

    self_607 = self_606;
    other_535 = other_534;
    let _e4: HomogeneousMagnitude = self_607;
    let _e6: HomogeneousMagnitude = other_535;
    return HomogeneousMagnitude((_e4.g0_ * _e6.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_div(self_608: HomogeneousMagnitude, other_536: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_609: HomogeneousMagnitude;
    var other_537: HomogeneousMagnitude;

    self_609 = self_608;
    other_537 = other_536;
    let _e4: HomogeneousMagnitude = self_609;
    let _e7: HomogeneousMagnitude = self_609;
    let _e15: HomogeneousMagnitude = other_537;
    let _e18: HomogeneousMagnitude = other_537;
    return HomogeneousMagnitude((((vec2<f32>(_e4.g0_.x, _e7.g0_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e15.g0_.x, _e18.g0_.y)) * vec2<f32>(1.0, 1.0)));
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_product(self_610: HomogeneousMagnitude, other_538: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_611: HomogeneousMagnitude;
    var other_539: HomogeneousMagnitude;

    self_611 = self_610;
    other_539 = other_538;
    let _e4: HomogeneousMagnitude = self_611;
    let _e8: HomogeneousMagnitude = other_539;
    let _e11: HomogeneousMagnitude = self_611;
    let _e13: HomogeneousMagnitude = other_539;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(self_612: HomogeneousMagnitude, other_540: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_613: HomogeneousMagnitude;
    var other_541: HomogeneousMagnitude;

    self_613 = self_612;
    other_541 = other_540;
    let _e4: HomogeneousMagnitude = self_613;
    let _e8: HomogeneousMagnitude = other_541;
    let _e11: HomogeneousMagnitude = self_613;
    let _e15: HomogeneousMagnitude = other_541;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_regressive_product(self_614: HomogeneousMagnitude, other_542: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_615: HomogeneousMagnitude;
    var other_543: HomogeneousMagnitude;

    self_615 = self_614;
    other_543 = other_542;
    let _e4: HomogeneousMagnitude = self_615;
    let _e8: HomogeneousMagnitude = other_543;
    let _e11: HomogeneousMagnitude = self_615;
    let _e15: HomogeneousMagnitude = other_543;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_wedge(self_616: HomogeneousMagnitude, other_544: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_617: HomogeneousMagnitude;
    var other_545: HomogeneousMagnitude;

    self_617 = self_616;
    other_545 = other_544;
    let _e4: HomogeneousMagnitude = self_617;
    let _e8: HomogeneousMagnitude = other_545;
    let _e11: HomogeneousMagnitude = self_617;
    let _e15: HomogeneousMagnitude = other_545;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_meet(self_618: HomogeneousMagnitude, other_546: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_619: HomogeneousMagnitude;
    var other_547: HomogeneousMagnitude;

    self_619 = self_618;
    other_547 = other_546;
    let _e4: HomogeneousMagnitude = self_619;
    let _e8: HomogeneousMagnitude = other_547;
    let _e11: HomogeneousMagnitude = self_619;
    let _e15: HomogeneousMagnitude = other_547;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_outer_product(self_620: HomogeneousMagnitude, other_548: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_621: HomogeneousMagnitude;
    var other_549: HomogeneousMagnitude;

    self_621 = self_620;
    other_549 = other_548;
    let _e4: HomogeneousMagnitude = self_621;
    let _e8: HomogeneousMagnitude = other_549;
    let _e11: HomogeneousMagnitude = self_621;
    let _e13: HomogeneousMagnitude = other_549;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_wedge(self_622: HomogeneousMagnitude, other_550: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_623: HomogeneousMagnitude;
    var other_551: HomogeneousMagnitude;

    self_623 = self_622;
    other_551 = other_550;
    let _e4: HomogeneousMagnitude = self_623;
    let _e8: HomogeneousMagnitude = other_551;
    let _e11: HomogeneousMagnitude = self_623;
    let _e13: HomogeneousMagnitude = other_551;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_join(self_624: HomogeneousMagnitude, other_552: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_625: HomogeneousMagnitude;
    var other_553: HomogeneousMagnitude;

    self_625 = self_624;
    other_553 = other_552;
    let _e4: HomogeneousMagnitude = self_625;
    let _e8: HomogeneousMagnitude = other_553;
    let _e11: HomogeneousMagnitude = self_625;
    let _e13: HomogeneousMagnitude = other_553;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_inner_product(self_626: HomogeneousMagnitude, other_554: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_627: HomogeneousMagnitude;
    var other_555: HomogeneousMagnitude;

    self_627 = self_626;
    other_555 = other_554;
    let _e4: HomogeneousMagnitude = self_627;
    let _e8: HomogeneousMagnitude = other_555;
    let _e11: HomogeneousMagnitude = self_627;
    let _e13: HomogeneousMagnitude = other_555;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_inner_anti_product(self_628: HomogeneousMagnitude, other_556: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_629: HomogeneousMagnitude;
    var other_557: HomogeneousMagnitude;

    self_629 = self_628;
    other_557 = other_556;
    let _e4: HomogeneousMagnitude = self_629;
    let _e8: HomogeneousMagnitude = other_557;
    let _e11: HomogeneousMagnitude = self_629;
    let _e15: HomogeneousMagnitude = other_557;
    return HomogeneousMagnitude(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))));
}

fn homogeneous_magnitude_homogeneous_magnitude_left_contraction(self_630: HomogeneousMagnitude, other_558: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_631: HomogeneousMagnitude;
    var other_559: HomogeneousMagnitude;

    self_631 = self_630;
    other_559 = other_558;
    let _e4: HomogeneousMagnitude = self_631;
    let _e8: HomogeneousMagnitude = other_559;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_right_contraction(self_632: HomogeneousMagnitude, other_560: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_633: HomogeneousMagnitude;
    var other_561: HomogeneousMagnitude;

    self_633 = self_632;
    other_561 = other_560;
    let _e4: HomogeneousMagnitude = self_633;
    let _e6: HomogeneousMagnitude = other_561;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_.x)));
}

fn homogeneous_magnitude_homogeneous_magnitude_left_anti_contraction(self_634: HomogeneousMagnitude, other_562: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_635: HomogeneousMagnitude;
    var other_563: HomogeneousMagnitude;

    self_635 = self_634;
    other_563 = other_562;
    let _e4: HomogeneousMagnitude = self_635;
    let _e8: HomogeneousMagnitude = other_563;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_homogeneous_magnitude_right_anti_contraction(self_636: HomogeneousMagnitude, other_564: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_637: HomogeneousMagnitude;
    var other_565: HomogeneousMagnitude;

    self_637 = self_636;
    other_565 = other_564;
    let _e4: HomogeneousMagnitude = self_637;
    let _e6: HomogeneousMagnitude = other_565;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_.y)));
}

fn homogeneous_magnitude_homogeneous_magnitude_scalar_product(self_638: HomogeneousMagnitude, other_566: HomogeneousMagnitude) -> Scalar {
    var self_639: HomogeneousMagnitude;
    var other_567: HomogeneousMagnitude;

    self_639 = self_638;
    other_567 = other_566;
    let _e4: HomogeneousMagnitude = self_639;
    let _e7: HomogeneousMagnitude = other_567;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_homogeneous_magnitude_dot(self_640: HomogeneousMagnitude, other_568: HomogeneousMagnitude) -> Scalar {
    var self_641: HomogeneousMagnitude;
    var other_569: HomogeneousMagnitude;

    self_641 = self_640;
    other_569 = other_568;
    let _e4: HomogeneousMagnitude = self_641;
    let _e7: HomogeneousMagnitude = other_569;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_scalar_product(self_642: HomogeneousMagnitude, other_570: HomogeneousMagnitude) -> AntiScalar {
    var self_643: HomogeneousMagnitude;
    var other_571: HomogeneousMagnitude;

    self_643 = self_642;
    other_571 = other_570;
    let _e4: HomogeneousMagnitude = self_643;
    let _e7: HomogeneousMagnitude = other_571;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_homogeneous_magnitude_anti_dot(self_644: HomogeneousMagnitude, other_572: HomogeneousMagnitude) -> AntiScalar {
    var self_645: HomogeneousMagnitude;
    var other_573: HomogeneousMagnitude;

    self_645 = self_644;
    other_573 = other_572;
    let _e4: HomogeneousMagnitude = self_645;
    let _e7: HomogeneousMagnitude = other_573;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_point_regressive_product(self_646: HomogeneousMagnitude, other_574: Point) -> Point {
    var self_647: HomogeneousMagnitude;
    var other_575: Point;

    self_647 = self_646;
    other_575 = other_574;
    let _e4: HomogeneousMagnitude = self_647;
    let _e8: Point = other_575;
    return Point((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_anti_wedge(self_648: HomogeneousMagnitude, other_576: Point) -> Point {
    var self_649: HomogeneousMagnitude;
    var other_577: Point;

    self_649 = self_648;
    other_577 = other_576;
    let _e4: HomogeneousMagnitude = self_649;
    let _e8: Point = other_577;
    return Point((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_meet(self_650: HomogeneousMagnitude, other_578: Point) -> Point {
    var self_651: HomogeneousMagnitude;
    var other_579: Point;

    self_651 = self_650;
    other_579 = other_578;
    let _e4: HomogeneousMagnitude = self_651;
    let _e8: Point = other_579;
    return Point((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_point_outer_product(self_652: HomogeneousMagnitude, other_580: Point) -> Point {
    var self_653: HomogeneousMagnitude;
    var other_581: Point;

    self_653 = self_652;
    other_581 = other_580;
    let _e4: HomogeneousMagnitude = self_653;
    let _e8: Point = other_581;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_wedge(self_654: HomogeneousMagnitude, other_582: Point) -> Point {
    var self_655: HomogeneousMagnitude;
    var other_583: Point;

    self_655 = self_654;
    other_583 = other_582;
    let _e4: HomogeneousMagnitude = self_655;
    let _e8: Point = other_583;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_join(self_656: HomogeneousMagnitude, other_584: Point) -> Point {
    var self_657: HomogeneousMagnitude;
    var other_585: Point;

    self_657 = self_656;
    other_585 = other_584;
    let _e4: HomogeneousMagnitude = self_657;
    let _e8: Point = other_585;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_left_contraction(self_658: HomogeneousMagnitude, other_586: Point) -> Point {
    var self_659: HomogeneousMagnitude;
    var other_587: Point;

    self_659 = self_658;
    other_587 = other_586;
    let _e4: HomogeneousMagnitude = self_659;
    let _e8: Point = other_587;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_point_left_anti_contraction(self_660: HomogeneousMagnitude, other_588: Point) -> Point {
    var self_661: HomogeneousMagnitude;
    var other_589: Point;

    self_661 = self_660;
    other_589 = other_588;
    let _e4: HomogeneousMagnitude = self_661;
    let _e8: Point = other_589;
    return Point((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_line_geometric_product(self_662: HomogeneousMagnitude, other_590: Line) -> Line {
    var self_663: HomogeneousMagnitude;
    var other_591: Line;

    self_663 = self_662;
    other_591 = other_590;
    let _e4: HomogeneousMagnitude = self_663;
    let _e8: Line = other_591;
    let _e11: HomogeneousMagnitude = self_663;
    let _e15: Line = other_591;
    let _e19: HomogeneousMagnitude = self_663;
    let _e23: Line = other_591;
    return Line(((vec3<f32>(_e4.g0_.x) * _e8.g0_) + (vec3<f32>(_e11.g0_.y) * _e15.g1_)), (vec3<f32>(_e19.g0_.x) * _e23.g1_));
}

fn homogeneous_magnitude_line_geometric_anti_product(self_664: HomogeneousMagnitude, other_592: Line) -> Line {
    var self_665: HomogeneousMagnitude;
    var other_593: Line;

    self_665 = self_664;
    other_593 = other_592;
    let _e4: HomogeneousMagnitude = self_665;
    let _e8: Line = other_593;
    let _e11: HomogeneousMagnitude = self_665;
    let _e15: Line = other_593;
    let _e18: HomogeneousMagnitude = self_665;
    let _e22: Line = other_593;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), ((vec3<f32>(_e11.g0_.x) * _e15.g0_) + (vec3<f32>(_e18.g0_.y) * _e22.g1_)));
}

fn homogeneous_magnitude_line_regressive_product(self_666: HomogeneousMagnitude, other_594: Line) -> Line {
    var self_667: HomogeneousMagnitude;
    var other_595: Line;

    self_667 = self_666;
    other_595 = other_594;
    let _e4: HomogeneousMagnitude = self_667;
    let _e8: Line = other_595;
    let _e11: HomogeneousMagnitude = self_667;
    let _e15: Line = other_595;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), (vec3<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_anti_wedge(self_668: HomogeneousMagnitude, other_596: Line) -> Line {
    var self_669: HomogeneousMagnitude;
    var other_597: Line;

    self_669 = self_668;
    other_597 = other_596;
    let _e4: HomogeneousMagnitude = self_669;
    let _e8: Line = other_597;
    let _e11: HomogeneousMagnitude = self_669;
    let _e15: Line = other_597;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), (vec3<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_meet(self_670: HomogeneousMagnitude, other_598: Line) -> Line {
    var self_671: HomogeneousMagnitude;
    var other_599: Line;

    self_671 = self_670;
    other_599 = other_598;
    let _e4: HomogeneousMagnitude = self_671;
    let _e8: Line = other_599;
    let _e11: HomogeneousMagnitude = self_671;
    let _e15: Line = other_599;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), (vec3<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_line_outer_product(self_672: HomogeneousMagnitude, other_600: Line) -> Line {
    var self_673: HomogeneousMagnitude;
    var other_601: Line;

    self_673 = self_672;
    other_601 = other_600;
    let _e4: HomogeneousMagnitude = self_673;
    let _e8: Line = other_601;
    let _e11: HomogeneousMagnitude = self_673;
    let _e15: Line = other_601;
    return Line((vec3<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_wedge(self_674: HomogeneousMagnitude, other_602: Line) -> Line {
    var self_675: HomogeneousMagnitude;
    var other_603: Line;

    self_675 = self_674;
    other_603 = other_602;
    let _e4: HomogeneousMagnitude = self_675;
    let _e8: Line = other_603;
    let _e11: HomogeneousMagnitude = self_675;
    let _e15: Line = other_603;
    return Line((vec3<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_join(self_676: HomogeneousMagnitude, other_604: Line) -> Line {
    var self_677: HomogeneousMagnitude;
    var other_605: Line;

    self_677 = self_676;
    other_605 = other_604;
    let _e4: HomogeneousMagnitude = self_677;
    let _e8: Line = other_605;
    let _e11: HomogeneousMagnitude = self_677;
    let _e15: Line = other_605;
    return Line((vec3<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_inner_product(self_678: HomogeneousMagnitude, other_606: Line) -> Line {
    var self_679: HomogeneousMagnitude;
    var other_607: Line;

    self_679 = self_678;
    other_607 = other_606;
    let _e4: HomogeneousMagnitude = self_679;
    let _e8: Line = other_607;
    let _e11: HomogeneousMagnitude = self_679;
    let _e15: Line = other_607;
    let _e19: HomogeneousMagnitude = self_679;
    let _e23: Line = other_607;
    return Line(((vec3<f32>(_e4.g0_.x) * _e8.g0_) + (vec3<f32>(_e11.g0_.y) * _e15.g1_)), (vec3<f32>(_e19.g0_.x) * _e23.g1_));
}

fn homogeneous_magnitude_line_inner_anti_product(self_680: HomogeneousMagnitude, other_608: Line) -> Line {
    var self_681: HomogeneousMagnitude;
    var other_609: Line;

    self_681 = self_680;
    other_609 = other_608;
    let _e4: HomogeneousMagnitude = self_681;
    let _e8: Line = other_609;
    let _e11: HomogeneousMagnitude = self_681;
    let _e15: Line = other_609;
    let _e18: HomogeneousMagnitude = self_681;
    let _e22: Line = other_609;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), ((vec3<f32>(_e11.g0_.x) * _e15.g0_) + (vec3<f32>(_e18.g0_.y) * _e22.g1_)));
}

fn homogeneous_magnitude_line_left_contraction(self_682: HomogeneousMagnitude, other_610: Line) -> Line {
    var self_683: HomogeneousMagnitude;
    var other_611: Line;

    self_683 = self_682;
    other_611 = other_610;
    let _e4: HomogeneousMagnitude = self_683;
    let _e8: Line = other_611;
    let _e11: HomogeneousMagnitude = self_683;
    let _e15: Line = other_611;
    return Line((vec3<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_line_left_anti_contraction(self_684: HomogeneousMagnitude, other_612: Line) -> Line {
    var self_685: HomogeneousMagnitude;
    var other_613: Line;

    self_685 = self_684;
    other_613 = other_612;
    let _e4: HomogeneousMagnitude = self_685;
    let _e8: Line = other_613;
    let _e11: HomogeneousMagnitude = self_685;
    let _e15: Line = other_613;
    return Line((vec3<f32>(_e4.g0_.y) * _e8.g0_), (vec3<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_plane_regressive_product(self_686: HomogeneousMagnitude, other_614: Plane) -> Plane {
    var self_687: HomogeneousMagnitude;
    var other_615: Plane;

    self_687 = self_686;
    other_615 = other_614;
    let _e4: HomogeneousMagnitude = self_687;
    let _e8: Plane = other_615;
    return Plane((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_anti_wedge(self_688: HomogeneousMagnitude, other_616: Plane) -> Plane {
    var self_689: HomogeneousMagnitude;
    var other_617: Plane;

    self_689 = self_688;
    other_617 = other_616;
    let _e4: HomogeneousMagnitude = self_689;
    let _e8: Plane = other_617;
    return Plane((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_meet(self_690: HomogeneousMagnitude, other_618: Plane) -> Plane {
    var self_691: HomogeneousMagnitude;
    var other_619: Plane;

    self_691 = self_690;
    other_619 = other_618;
    let _e4: HomogeneousMagnitude = self_691;
    let _e8: Plane = other_619;
    return Plane((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_plane_outer_product(self_692: HomogeneousMagnitude, other_620: Plane) -> Plane {
    var self_693: HomogeneousMagnitude;
    var other_621: Plane;

    self_693 = self_692;
    other_621 = other_620;
    let _e4: HomogeneousMagnitude = self_693;
    let _e8: Plane = other_621;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_wedge(self_694: HomogeneousMagnitude, other_622: Plane) -> Plane {
    var self_695: HomogeneousMagnitude;
    var other_623: Plane;

    self_695 = self_694;
    other_623 = other_622;
    let _e4: HomogeneousMagnitude = self_695;
    let _e8: Plane = other_623;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_join(self_696: HomogeneousMagnitude, other_624: Plane) -> Plane {
    var self_697: HomogeneousMagnitude;
    var other_625: Plane;

    self_697 = self_696;
    other_625 = other_624;
    let _e4: HomogeneousMagnitude = self_697;
    let _e8: Plane = other_625;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_left_contraction(self_698: HomogeneousMagnitude, other_626: Plane) -> Plane {
    var self_699: HomogeneousMagnitude;
    var other_627: Plane;

    self_699 = self_698;
    other_627 = other_626;
    let _e4: HomogeneousMagnitude = self_699;
    let _e8: Plane = other_627;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_plane_left_anti_contraction(self_700: HomogeneousMagnitude, other_628: Plane) -> Plane {
    var self_701: HomogeneousMagnitude;
    var other_629: Plane;

    self_701 = self_700;
    other_629 = other_628;
    let _e4: HomogeneousMagnitude = self_701;
    let _e8: Plane = other_629;
    return Plane((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_motor_geometric_product(self_702: HomogeneousMagnitude, other_630: Motor) -> Motor {
    var self_703: HomogeneousMagnitude;
    var other_631: Motor;

    self_703 = self_702;
    other_631 = other_630;
    let _e4: HomogeneousMagnitude = self_703;
    let _e8: Motor = other_631;
    let _e11: HomogeneousMagnitude = self_703;
    let _e14: HomogeneousMagnitude = self_703;
    let _e17: HomogeneousMagnitude = self_703;
    let _e20: HomogeneousMagnitude = self_703;
    let _e24: Motor = other_631;
    let _e27: Motor = other_631;
    let _e30: Motor = other_631;
    let _e33: Motor = other_631;
    let _e45: HomogeneousMagnitude = self_703;
    let _e49: Motor = other_631;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * vec4<f32>(_e24.g1_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e45.g0_.x) * _e49.g1_));
}

fn homogeneous_magnitude_motor_outer_product(self_704: HomogeneousMagnitude, other_632: Motor) -> Motor {
    var self_705: HomogeneousMagnitude;
    var other_633: Motor;

    self_705 = self_704;
    other_633 = other_632;
    let _e4: HomogeneousMagnitude = self_705;
    let _e8: Motor = other_633;
    let _e11: HomogeneousMagnitude = self_705;
    let _e15: Motor = other_633;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_wedge(self_706: HomogeneousMagnitude, other_634: Motor) -> Motor {
    var self_707: HomogeneousMagnitude;
    var other_635: Motor;

    self_707 = self_706;
    other_635 = other_634;
    let _e4: HomogeneousMagnitude = self_707;
    let _e8: Motor = other_635;
    let _e11: HomogeneousMagnitude = self_707;
    let _e15: Motor = other_635;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_join(self_708: HomogeneousMagnitude, other_636: Motor) -> Motor {
    var self_709: HomogeneousMagnitude;
    var other_637: Motor;

    self_709 = self_708;
    other_637 = other_636;
    let _e4: HomogeneousMagnitude = self_709;
    let _e8: Motor = other_637;
    let _e11: HomogeneousMagnitude = self_709;
    let _e15: Motor = other_637;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_inner_product(self_710: HomogeneousMagnitude, other_638: Motor) -> Motor {
    var self_711: HomogeneousMagnitude;
    var other_639: Motor;

    self_711 = self_710;
    other_639 = other_638;
    let _e4: HomogeneousMagnitude = self_711;
    let _e8: Motor = other_639;
    let _e11: HomogeneousMagnitude = self_711;
    let _e14: HomogeneousMagnitude = self_711;
    let _e17: HomogeneousMagnitude = self_711;
    let _e20: HomogeneousMagnitude = self_711;
    let _e24: Motor = other_639;
    let _e27: Motor = other_639;
    let _e30: Motor = other_639;
    let _e33: Motor = other_639;
    let _e45: HomogeneousMagnitude = self_711;
    let _e49: Motor = other_639;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y, _e14.g0_.y, _e17.g0_.y, _e20.g0_.x) * vec4<f32>(_e24.g1_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e45.g0_.x) * _e49.g1_));
}

fn homogeneous_magnitude_motor_left_contraction(self_712: HomogeneousMagnitude, other_640: Motor) -> Motor {
    var self_713: HomogeneousMagnitude;
    var other_641: Motor;

    self_713 = self_712;
    other_641 = other_640;
    let _e4: HomogeneousMagnitude = self_713;
    let _e8: Motor = other_641;
    let _e11: HomogeneousMagnitude = self_713;
    let _e15: Motor = other_641;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec3<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_motor_left_anti_contraction(self_714: HomogeneousMagnitude, other_642: Motor) -> Motor {
    var self_715: HomogeneousMagnitude;
    var other_643: Motor;

    self_715 = self_714;
    other_643 = other_642;
    let _e4: HomogeneousMagnitude = self_715;
    let _e8: Motor = other_643;
    let _e11: HomogeneousMagnitude = self_715;
    let _e15: Motor = other_643;
    return Motor((vec4<f32>(_e4.g0_.y) * _e8.g0_), (vec3<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_motor_anti_scalar_product(self_716: HomogeneousMagnitude, other_644: Motor) -> AntiScalar {
    var self_717: HomogeneousMagnitude;
    var other_645: Motor;

    self_717 = self_716;
    other_645 = other_644;
    let _e4: HomogeneousMagnitude = self_717;
    let _e7: Motor = other_645;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_motor_anti_dot(self_718: HomogeneousMagnitude, other_646: Motor) -> AntiScalar {
    var self_719: HomogeneousMagnitude;
    var other_647: Motor;

    self_719 = self_718;
    other_647 = other_646;
    let _e4: HomogeneousMagnitude = self_719;
    let _e7: Motor = other_647;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_rotor_geometric_product(self_720: HomogeneousMagnitude, other_648: Rotor) -> Rotor {
    var self_721: HomogeneousMagnitude;
    var other_649: Rotor;

    self_721 = self_720;
    other_649 = other_648;
    let _e4: HomogeneousMagnitude = self_721;
    let _e8: Rotor = other_649;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_outer_product(self_722: HomogeneousMagnitude, other_650: Rotor) -> Rotor {
    var self_723: HomogeneousMagnitude;
    var other_651: Rotor;

    self_723 = self_722;
    other_651 = other_650;
    let _e4: HomogeneousMagnitude = self_723;
    let _e8: Rotor = other_651;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_wedge(self_724: HomogeneousMagnitude, other_652: Rotor) -> Rotor {
    var self_725: HomogeneousMagnitude;
    var other_653: Rotor;

    self_725 = self_724;
    other_653 = other_652;
    let _e4: HomogeneousMagnitude = self_725;
    let _e8: Rotor = other_653;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_join(self_726: HomogeneousMagnitude, other_654: Rotor) -> Rotor {
    var self_727: HomogeneousMagnitude;
    var other_655: Rotor;

    self_727 = self_726;
    other_655 = other_654;
    let _e4: HomogeneousMagnitude = self_727;
    let _e8: Rotor = other_655;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_inner_product(self_728: HomogeneousMagnitude, other_656: Rotor) -> Rotor {
    var self_729: HomogeneousMagnitude;
    var other_657: Rotor;

    self_729 = self_728;
    other_657 = other_656;
    let _e4: HomogeneousMagnitude = self_729;
    let _e8: Rotor = other_657;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_left_contraction(self_730: HomogeneousMagnitude, other_658: Rotor) -> Rotor {
    var self_731: HomogeneousMagnitude;
    var other_659: Rotor;

    self_731 = self_730;
    other_659 = other_658;
    let _e4: HomogeneousMagnitude = self_731;
    let _e8: Rotor = other_659;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_left_anti_contraction(self_732: HomogeneousMagnitude, other_660: Rotor) -> Rotor {
    var self_733: HomogeneousMagnitude;
    var other_661: Rotor;

    self_733 = self_732;
    other_661 = other_660;
    let _e4: HomogeneousMagnitude = self_733;
    let _e8: Rotor = other_661;
    return Rotor((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_rotor_anti_scalar_product(self_734: HomogeneousMagnitude, other_662: Rotor) -> AntiScalar {
    var self_735: HomogeneousMagnitude;
    var other_663: Rotor;

    self_735 = self_734;
    other_663 = other_662;
    let _e4: HomogeneousMagnitude = self_735;
    let _e7: Rotor = other_663;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_rotor_anti_dot(self_736: HomogeneousMagnitude, other_664: Rotor) -> AntiScalar {
    var self_737: HomogeneousMagnitude;
    var other_665: Rotor;

    self_737 = self_736;
    other_665 = other_664;
    let _e4: HomogeneousMagnitude = self_737;
    let _e7: Rotor = other_665;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_translator_geometric_product(self_738: HomogeneousMagnitude, other_666: Translator) -> Motor {
    var self_739: HomogeneousMagnitude;
    var other_667: Translator;

    self_739 = self_738;
    other_667 = other_666;
    let _e4: HomogeneousMagnitude = self_739;
    let _e7: HomogeneousMagnitude = self_739;
    let _e10: HomogeneousMagnitude = self_739;
    let _e13: HomogeneousMagnitude = self_739;
    let _e17: Translator = other_667;
    let _e20: HomogeneousMagnitude = self_739;
    let _e24: Translator = other_667;
    let _e27: Translator = other_667;
    let _e30: Translator = other_667;
    return Motor((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_), (vec3<f32>(_e20.g0_.x) * vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)));
}

fn homogeneous_magnitude_translator_outer_product(self_740: HomogeneousMagnitude, other_668: Translator) -> Translator {
    var self_741: HomogeneousMagnitude;
    var other_669: Translator;

    self_741 = self_740;
    other_669 = other_668;
    let _e4: HomogeneousMagnitude = self_741;
    let _e8: Translator = other_669;
    return Translator((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_wedge(self_742: HomogeneousMagnitude, other_670: Translator) -> Translator {
    var self_743: HomogeneousMagnitude;
    var other_671: Translator;

    self_743 = self_742;
    other_671 = other_670;
    let _e4: HomogeneousMagnitude = self_743;
    let _e8: Translator = other_671;
    return Translator((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_join(self_744: HomogeneousMagnitude, other_672: Translator) -> Translator {
    var self_745: HomogeneousMagnitude;
    var other_673: Translator;

    self_745 = self_744;
    other_673 = other_672;
    let _e4: HomogeneousMagnitude = self_745;
    let _e8: Translator = other_673;
    return Translator((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_inner_product(self_746: HomogeneousMagnitude, other_674: Translator) -> Motor {
    var self_747: HomogeneousMagnitude;
    var other_675: Translator;

    self_747 = self_746;
    other_675 = other_674;
    let _e4: HomogeneousMagnitude = self_747;
    let _e7: HomogeneousMagnitude = self_747;
    let _e10: HomogeneousMagnitude = self_747;
    let _e13: HomogeneousMagnitude = self_747;
    let _e17: Translator = other_675;
    let _e20: HomogeneousMagnitude = self_747;
    let _e24: Translator = other_675;
    let _e27: Translator = other_675;
    let _e30: Translator = other_675;
    return Motor((vec4<f32>(_e4.g0_.y, _e7.g0_.y, _e10.g0_.y, _e13.g0_.x) * _e17.g0_), (vec3<f32>(_e20.g0_.x) * vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)));
}

fn homogeneous_magnitude_translator_left_contraction(self_748: HomogeneousMagnitude, other_676: Translator) -> Translator {
    var self_749: HomogeneousMagnitude;
    var other_677: Translator;

    self_749 = self_748;
    other_677 = other_676;
    let _e4: HomogeneousMagnitude = self_749;
    let _e8: Translator = other_677;
    return Translator((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn homogeneous_magnitude_translator_left_anti_contraction(self_750: HomogeneousMagnitude, other_678: Translator) -> Translator {
    var self_751: HomogeneousMagnitude;
    var other_679: Translator;

    self_751 = self_750;
    other_679 = other_678;
    let _e4: HomogeneousMagnitude = self_751;
    let _e8: Translator = other_679;
    return Translator((vec4<f32>(_e4.g0_.y) * _e8.g0_));
}

fn homogeneous_magnitude_translator_right_anti_contraction(self_752: HomogeneousMagnitude, other_680: Translator) -> HomogeneousMagnitude {
    var self_753: HomogeneousMagnitude;
    var other_681: Translator;

    self_753 = self_752;
    other_681 = other_680;
    let _e4: HomogeneousMagnitude = self_753;
    let _e6: Translator = other_681;
    return HomogeneousMagnitude((_e4.g0_ * vec2<f32>(_e6.g0_.w)));
}

fn homogeneous_magnitude_translator_anti_scalar_product(self_754: HomogeneousMagnitude, other_682: Translator) -> AntiScalar {
    var self_755: HomogeneousMagnitude;
    var other_683: Translator;

    self_755 = self_754;
    other_683 = other_682;
    let _e4: HomogeneousMagnitude = self_755;
    let _e7: Translator = other_683;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_translator_anti_dot(self_756: HomogeneousMagnitude, other_684: Translator) -> AntiScalar {
    var self_757: HomogeneousMagnitude;
    var other_685: Translator;

    self_757 = self_756;
    other_685 = other_684;
    let _e4: HomogeneousMagnitude = self_757;
    let _e7: Translator = other_685;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn homogeneous_magnitude_flector_geometric_product(self_758: HomogeneousMagnitude, other_686: Flector) -> Flector {
    var self_759: HomogeneousMagnitude;
    var other_687: Flector;

    self_759 = self_758;
    other_687 = other_686;
    let _e4: HomogeneousMagnitude = self_759;
    let _e8: Flector = other_687;
    let _e11: HomogeneousMagnitude = self_759;
    let _e14: HomogeneousMagnitude = self_759;
    let _e17: HomogeneousMagnitude = self_759;
    let _e20: HomogeneousMagnitude = self_759;
    let _e24: Flector = other_687;
    let _e36: HomogeneousMagnitude = self_759;
    let _e40: Flector = other_687;
    let _e43: HomogeneousMagnitude = self_759;
    let _e46: HomogeneousMagnitude = self_759;
    let _e49: HomogeneousMagnitude = self_759;
    let _e52: HomogeneousMagnitude = self_759;
    let _e56: Flector = other_687;
    return Flector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x, _e14.g0_.x, _e17.g0_.x, _e20.g0_.y) * _e24.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e36.g0_.x) * _e40.g1_) + ((vec4<f32>(_e43.g0_.y, _e46.g0_.y, _e49.g0_.y, _e52.g0_.x) * _e56.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn homogeneous_magnitude_flector_geometric_anti_product(self_760: HomogeneousMagnitude, other_688: Flector) -> Flector {
    var self_761: HomogeneousMagnitude;
    var other_689: Flector;

    self_761 = self_760;
    other_689 = other_688;
    let _e4: HomogeneousMagnitude = self_761;
    let _e8: Flector = other_689;
    let _e11: HomogeneousMagnitude = self_761;
    let _e15: Flector = other_689;
    let _e26: HomogeneousMagnitude = self_761;
    let _e30: Flector = other_689;
    let _e33: HomogeneousMagnitude = self_761;
    let _e37: Flector = other_689;
    return Flector(((vec4<f32>(_e4.g0_.y) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x) * _e15.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec4<f32>(_e26.g0_.y) * _e30.g1_) + ((vec4<f32>(_e33.g0_.x) * _e37.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_flector_regressive_product(self_762: HomogeneousMagnitude, other_690: Flector) -> Flector {
    var self_763: HomogeneousMagnitude;
    var other_691: Flector;

    self_763 = self_762;
    other_691 = other_690;
    let _e4: HomogeneousMagnitude = self_763;
    let _e8: Flector = other_691;
    let _e11: HomogeneousMagnitude = self_763;
    let _e15: Flector = other_691;
    return Flector((vec4<f32>(_e4.g0_.y) * _e8.g0_), (vec4<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_anti_wedge(self_764: HomogeneousMagnitude, other_692: Flector) -> Flector {
    var self_765: HomogeneousMagnitude;
    var other_693: Flector;

    self_765 = self_764;
    other_693 = other_692;
    let _e4: HomogeneousMagnitude = self_765;
    let _e8: Flector = other_693;
    let _e11: HomogeneousMagnitude = self_765;
    let _e15: Flector = other_693;
    return Flector((vec4<f32>(_e4.g0_.y) * _e8.g0_), (vec4<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_meet(self_766: HomogeneousMagnitude, other_694: Flector) -> Flector {
    var self_767: HomogeneousMagnitude;
    var other_695: Flector;

    self_767 = self_766;
    other_695 = other_694;
    let _e4: HomogeneousMagnitude = self_767;
    let _e8: Flector = other_695;
    let _e11: HomogeneousMagnitude = self_767;
    let _e15: Flector = other_695;
    return Flector((vec4<f32>(_e4.g0_.y) * _e8.g0_), (vec4<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_flector_outer_product(self_768: HomogeneousMagnitude, other_696: Flector) -> Flector {
    var self_769: HomogeneousMagnitude;
    var other_697: Flector;

    self_769 = self_768;
    other_697 = other_696;
    let _e4: HomogeneousMagnitude = self_769;
    let _e8: Flector = other_697;
    let _e11: HomogeneousMagnitude = self_769;
    let _e15: Flector = other_697;
    return Flector((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec4<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_wedge(self_770: HomogeneousMagnitude, other_698: Flector) -> Flector {
    var self_771: HomogeneousMagnitude;
    var other_699: Flector;

    self_771 = self_770;
    other_699 = other_698;
    let _e4: HomogeneousMagnitude = self_771;
    let _e8: Flector = other_699;
    let _e11: HomogeneousMagnitude = self_771;
    let _e15: Flector = other_699;
    return Flector((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec4<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_join(self_772: HomogeneousMagnitude, other_700: Flector) -> Flector {
    var self_773: HomogeneousMagnitude;
    var other_701: Flector;

    self_773 = self_772;
    other_701 = other_700;
    let _e4: HomogeneousMagnitude = self_773;
    let _e8: Flector = other_701;
    let _e11: HomogeneousMagnitude = self_773;
    let _e15: Flector = other_701;
    return Flector((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec4<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_inner_product(self_774: HomogeneousMagnitude, other_702: Flector) -> Flector {
    var self_775: HomogeneousMagnitude;
    var other_703: Flector;

    self_775 = self_774;
    other_703 = other_702;
    let _e4: HomogeneousMagnitude = self_775;
    let _e8: Flector = other_703;
    let _e11: HomogeneousMagnitude = self_775;
    let _e14: HomogeneousMagnitude = self_775;
    let _e17: HomogeneousMagnitude = self_775;
    let _e20: HomogeneousMagnitude = self_775;
    let _e24: Flector = other_703;
    let _e36: HomogeneousMagnitude = self_775;
    let _e40: Flector = other_703;
    let _e43: HomogeneousMagnitude = self_775;
    let _e46: HomogeneousMagnitude = self_775;
    let _e49: HomogeneousMagnitude = self_775;
    let _e52: HomogeneousMagnitude = self_775;
    let _e56: Flector = other_703;
    return Flector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x, _e14.g0_.x, _e17.g0_.x, _e20.g0_.y) * _e24.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec4<f32>(_e36.g0_.x) * _e40.g1_) + ((vec4<f32>(_e43.g0_.y, _e46.g0_.y, _e49.g0_.y, _e52.g0_.x) * _e56.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn homogeneous_magnitude_flector_inner_anti_product(self_776: HomogeneousMagnitude, other_704: Flector) -> Flector {
    var self_777: HomogeneousMagnitude;
    var other_705: Flector;

    self_777 = self_776;
    other_705 = other_704;
    let _e4: HomogeneousMagnitude = self_777;
    let _e8: Flector = other_705;
    let _e11: HomogeneousMagnitude = self_777;
    let _e15: Flector = other_705;
    let _e26: HomogeneousMagnitude = self_777;
    let _e30: Flector = other_705;
    let _e33: HomogeneousMagnitude = self_777;
    let _e37: Flector = other_705;
    return Flector(((vec4<f32>(_e4.g0_.y) * _e8.g0_) + ((vec4<f32>(_e11.g0_.x) * _e15.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec4<f32>(_e26.g0_.y) * _e30.g1_) + ((vec4<f32>(_e33.g0_.x) * _e37.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_flector_left_contraction(self_778: HomogeneousMagnitude, other_706: Flector) -> Flector {
    var self_779: HomogeneousMagnitude;
    var other_707: Flector;

    self_779 = self_778;
    other_707 = other_706;
    let _e4: HomogeneousMagnitude = self_779;
    let _e8: Flector = other_707;
    let _e11: HomogeneousMagnitude = self_779;
    let _e15: Flector = other_707;
    return Flector((vec4<f32>(_e4.g0_.x) * _e8.g0_), (vec4<f32>(_e11.g0_.x) * _e15.g1_));
}

fn homogeneous_magnitude_flector_left_anti_contraction(self_780: HomogeneousMagnitude, other_708: Flector) -> Flector {
    var self_781: HomogeneousMagnitude;
    var other_709: Flector;

    self_781 = self_780;
    other_709 = other_708;
    let _e4: HomogeneousMagnitude = self_781;
    let _e8: Flector = other_709;
    let _e11: HomogeneousMagnitude = self_781;
    let _e15: Flector = other_709;
    return Flector((vec4<f32>(_e4.g0_.y) * _e8.g0_), (vec4<f32>(_e11.g0_.y) * _e15.g1_));
}

fn homogeneous_magnitude_multi_vector_add(self_782: HomogeneousMagnitude, other_710: MultiVector) -> MultiVector {
    var self_783: HomogeneousMagnitude;
    var other_711: MultiVector;

    self_783 = self_782;
    other_711 = other_710;
    let _e4: HomogeneousMagnitude = self_783;
    let _e6: MultiVector = other_711;
    let _e9: MultiVector = other_711;
    let _e11: MultiVector = other_711;
    let _e13: MultiVector = other_711;
    let _e15: MultiVector = other_711;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn homogeneous_magnitude_multi_vector_sub(self_784: HomogeneousMagnitude, other_712: MultiVector) -> MultiVector {
    var self_785: HomogeneousMagnitude;
    var other_713: MultiVector;

    self_785 = self_784;
    other_713 = other_712;
    let _e4: HomogeneousMagnitude = self_785;
    let _e6: MultiVector = other_713;
    let _e11: MultiVector = other_713;
    let _e16: MultiVector = other_713;
    let _e21: MultiVector = other_713;
    let _e26: MultiVector = other_713;
    return MultiVector((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec3<f32>(0.0) - _e16.g2_), (vec3<f32>(0.0) - _e21.g3_), (vec4<f32>(0.0) - _e26.g4_));
}

fn homogeneous_magnitude_multi_vector_geometric_product(self_786: HomogeneousMagnitude, other_714: MultiVector) -> MultiVector {
    var self_787: HomogeneousMagnitude;
    var other_715: MultiVector;

    self_787 = self_786;
    other_715 = other_714;
    let _e4: HomogeneousMagnitude = self_787;
    let _e8: MultiVector = other_715;
    let _e11: HomogeneousMagnitude = self_787;
    let _e13: MultiVector = other_715;
    let _e23: HomogeneousMagnitude = self_787;
    let _e27: MultiVector = other_715;
    let _e30: HomogeneousMagnitude = self_787;
    let _e33: HomogeneousMagnitude = self_787;
    let _e36: HomogeneousMagnitude = self_787;
    let _e39: HomogeneousMagnitude = self_787;
    let _e43: MultiVector = other_715;
    let _e55: HomogeneousMagnitude = self_787;
    let _e59: MultiVector = other_715;
    let _e62: HomogeneousMagnitude = self_787;
    let _e66: MultiVector = other_715;
    let _e70: HomogeneousMagnitude = self_787;
    let _e74: MultiVector = other_715;
    let _e77: HomogeneousMagnitude = self_787;
    let _e81: MultiVector = other_715;
    let _e84: HomogeneousMagnitude = self_787;
    let _e87: HomogeneousMagnitude = self_787;
    let _e90: HomogeneousMagnitude = self_787;
    let _e93: HomogeneousMagnitude = self_787;
    let _e97: MultiVector = other_715;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e23.g0_.x) * _e27.g1_) + ((vec4<f32>(_e30.g0_.x, _e33.g0_.x, _e36.g0_.x, _e39.g0_.y) * _e43.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e55.g0_.x) * _e59.g2_) + (vec3<f32>(_e62.g0_.y) * _e66.g3_)), (vec3<f32>(_e70.g0_.x) * _e74.g3_), ((vec4<f32>(_e77.g0_.x) * _e81.g4_) + ((vec4<f32>(_e84.g0_.y, _e87.g0_.y, _e90.g0_.y, _e93.g0_.x) * _e97.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn homogeneous_magnitude_multi_vector_geometric_anti_product(self_788: HomogeneousMagnitude, other_716: MultiVector) -> MultiVector {
    var self_789: HomogeneousMagnitude;
    var other_717: MultiVector;

    self_789 = self_788;
    other_717 = other_716;
    let _e4: HomogeneousMagnitude = self_789;
    let _e8: MultiVector = other_717;
    let _e11: HomogeneousMagnitude = self_789;
    let _e15: MultiVector = other_717;
    let _e24: HomogeneousMagnitude = self_789;
    let _e28: MultiVector = other_717;
    let _e31: HomogeneousMagnitude = self_789;
    let _e35: MultiVector = other_717;
    let _e46: HomogeneousMagnitude = self_789;
    let _e50: MultiVector = other_717;
    let _e53: HomogeneousMagnitude = self_789;
    let _e57: MultiVector = other_717;
    let _e60: HomogeneousMagnitude = self_789;
    let _e64: MultiVector = other_717;
    let _e68: HomogeneousMagnitude = self_789;
    let _e72: MultiVector = other_717;
    let _e75: HomogeneousMagnitude = self_789;
    let _e79: MultiVector = other_717;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), ((vec4<f32>(_e24.g0_.y) * _e28.g1_) + ((vec4<f32>(_e31.g0_.x) * _e35.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e46.g0_.y) * _e50.g2_), ((vec3<f32>(_e53.g0_.x) * _e57.g2_) + (vec3<f32>(_e60.g0_.y) * _e64.g3_)), ((vec4<f32>(_e68.g0_.y) * _e72.g4_) + ((vec4<f32>(_e75.g0_.x) * _e79.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_multi_vector_regressive_product(self_790: HomogeneousMagnitude, other_718: MultiVector) -> MultiVector {
    var self_791: HomogeneousMagnitude;
    var other_719: MultiVector;

    self_791 = self_790;
    other_719 = other_718;
    let _e4: HomogeneousMagnitude = self_791;
    let _e8: MultiVector = other_719;
    let _e11: HomogeneousMagnitude = self_791;
    let _e15: MultiVector = other_719;
    let _e24: HomogeneousMagnitude = self_791;
    let _e28: MultiVector = other_719;
    let _e31: HomogeneousMagnitude = self_791;
    let _e35: MultiVector = other_719;
    let _e38: HomogeneousMagnitude = self_791;
    let _e42: MultiVector = other_719;
    let _e45: HomogeneousMagnitude = self_791;
    let _e49: MultiVector = other_719;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4<f32>(_e24.g0_.y) * _e28.g1_), (vec3<f32>(_e31.g0_.y) * _e35.g2_), (vec3<f32>(_e38.g0_.y) * _e42.g3_), (vec4<f32>(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_anti_wedge(self_792: HomogeneousMagnitude, other_720: MultiVector) -> MultiVector {
    var self_793: HomogeneousMagnitude;
    var other_721: MultiVector;

    self_793 = self_792;
    other_721 = other_720;
    let _e4: HomogeneousMagnitude = self_793;
    let _e8: MultiVector = other_721;
    let _e11: HomogeneousMagnitude = self_793;
    let _e15: MultiVector = other_721;
    let _e24: HomogeneousMagnitude = self_793;
    let _e28: MultiVector = other_721;
    let _e31: HomogeneousMagnitude = self_793;
    let _e35: MultiVector = other_721;
    let _e38: HomogeneousMagnitude = self_793;
    let _e42: MultiVector = other_721;
    let _e45: HomogeneousMagnitude = self_793;
    let _e49: MultiVector = other_721;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4<f32>(_e24.g0_.y) * _e28.g1_), (vec3<f32>(_e31.g0_.y) * _e35.g2_), (vec3<f32>(_e38.g0_.y) * _e42.g3_), (vec4<f32>(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_meet(self_794: HomogeneousMagnitude, other_722: MultiVector) -> MultiVector {
    var self_795: HomogeneousMagnitude;
    var other_723: MultiVector;

    self_795 = self_794;
    other_723 = other_722;
    let _e4: HomogeneousMagnitude = self_795;
    let _e8: MultiVector = other_723;
    let _e11: HomogeneousMagnitude = self_795;
    let _e15: MultiVector = other_723;
    let _e24: HomogeneousMagnitude = self_795;
    let _e28: MultiVector = other_723;
    let _e31: HomogeneousMagnitude = self_795;
    let _e35: MultiVector = other_723;
    let _e38: HomogeneousMagnitude = self_795;
    let _e42: MultiVector = other_723;
    let _e45: HomogeneousMagnitude = self_795;
    let _e49: MultiVector = other_723;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (vec4<f32>(_e24.g0_.y) * _e28.g1_), (vec3<f32>(_e31.g0_.y) * _e35.g2_), (vec3<f32>(_e38.g0_.y) * _e42.g3_), (vec4<f32>(_e45.g0_.y) * _e49.g4_));
}

fn homogeneous_magnitude_multi_vector_outer_product(self_796: HomogeneousMagnitude, other_724: MultiVector) -> MultiVector {
    var self_797: HomogeneousMagnitude;
    var other_725: MultiVector;

    self_797 = self_796;
    other_725 = other_724;
    let _e4: HomogeneousMagnitude = self_797;
    let _e8: MultiVector = other_725;
    let _e11: HomogeneousMagnitude = self_797;
    let _e13: MultiVector = other_725;
    let _e23: HomogeneousMagnitude = self_797;
    let _e27: MultiVector = other_725;
    let _e30: HomogeneousMagnitude = self_797;
    let _e34: MultiVector = other_725;
    let _e37: HomogeneousMagnitude = self_797;
    let _e41: MultiVector = other_725;
    let _e44: HomogeneousMagnitude = self_797;
    let _e48: MultiVector = other_725;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4<f32>(_e23.g0_.x) * _e27.g1_), (vec3<f32>(_e30.g0_.x) * _e34.g2_), (vec3<f32>(_e37.g0_.x) * _e41.g3_), (vec4<f32>(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_wedge(self_798: HomogeneousMagnitude, other_726: MultiVector) -> MultiVector {
    var self_799: HomogeneousMagnitude;
    var other_727: MultiVector;

    self_799 = self_798;
    other_727 = other_726;
    let _e4: HomogeneousMagnitude = self_799;
    let _e8: MultiVector = other_727;
    let _e11: HomogeneousMagnitude = self_799;
    let _e13: MultiVector = other_727;
    let _e23: HomogeneousMagnitude = self_799;
    let _e27: MultiVector = other_727;
    let _e30: HomogeneousMagnitude = self_799;
    let _e34: MultiVector = other_727;
    let _e37: HomogeneousMagnitude = self_799;
    let _e41: MultiVector = other_727;
    let _e44: HomogeneousMagnitude = self_799;
    let _e48: MultiVector = other_727;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4<f32>(_e23.g0_.x) * _e27.g1_), (vec3<f32>(_e30.g0_.x) * _e34.g2_), (vec3<f32>(_e37.g0_.x) * _e41.g3_), (vec4<f32>(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_join(self_800: HomogeneousMagnitude, other_728: MultiVector) -> MultiVector {
    var self_801: HomogeneousMagnitude;
    var other_729: MultiVector;

    self_801 = self_800;
    other_729 = other_728;
    let _e4: HomogeneousMagnitude = self_801;
    let _e8: MultiVector = other_729;
    let _e11: HomogeneousMagnitude = self_801;
    let _e13: MultiVector = other_729;
    let _e23: HomogeneousMagnitude = self_801;
    let _e27: MultiVector = other_729;
    let _e30: HomogeneousMagnitude = self_801;
    let _e34: MultiVector = other_729;
    let _e37: HomogeneousMagnitude = self_801;
    let _e41: MultiVector = other_729;
    let _e44: HomogeneousMagnitude = self_801;
    let _e48: MultiVector = other_729;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (vec4<f32>(_e23.g0_.x) * _e27.g1_), (vec3<f32>(_e30.g0_.x) * _e34.g2_), (vec3<f32>(_e37.g0_.x) * _e41.g3_), (vec4<f32>(_e44.g0_.x) * _e48.g4_));
}

fn homogeneous_magnitude_multi_vector_inner_product(self_802: HomogeneousMagnitude, other_730: MultiVector) -> MultiVector {
    var self_803: HomogeneousMagnitude;
    var other_731: MultiVector;

    self_803 = self_802;
    other_731 = other_730;
    let _e4: HomogeneousMagnitude = self_803;
    let _e8: MultiVector = other_731;
    let _e11: HomogeneousMagnitude = self_803;
    let _e13: MultiVector = other_731;
    let _e23: HomogeneousMagnitude = self_803;
    let _e27: MultiVector = other_731;
    let _e30: HomogeneousMagnitude = self_803;
    let _e33: HomogeneousMagnitude = self_803;
    let _e36: HomogeneousMagnitude = self_803;
    let _e39: HomogeneousMagnitude = self_803;
    let _e43: MultiVector = other_731;
    let _e55: HomogeneousMagnitude = self_803;
    let _e59: MultiVector = other_731;
    let _e62: HomogeneousMagnitude = self_803;
    let _e66: MultiVector = other_731;
    let _e70: HomogeneousMagnitude = self_803;
    let _e74: MultiVector = other_731;
    let _e77: HomogeneousMagnitude = self_803;
    let _e81: MultiVector = other_731;
    let _e84: HomogeneousMagnitude = self_803;
    let _e87: HomogeneousMagnitude = self_803;
    let _e90: HomogeneousMagnitude = self_803;
    let _e93: HomogeneousMagnitude = self_803;
    let _e97: MultiVector = other_731;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e23.g0_.x) * _e27.g1_) + ((vec4<f32>(_e30.g0_.x, _e33.g0_.x, _e36.g0_.x, _e39.g0_.y) * _e43.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e55.g0_.x) * _e59.g2_) + (vec3<f32>(_e62.g0_.y) * _e66.g3_)), (vec3<f32>(_e70.g0_.x) * _e74.g3_), ((vec4<f32>(_e77.g0_.x) * _e81.g4_) + ((vec4<f32>(_e84.g0_.y, _e87.g0_.y, _e90.g0_.y, _e93.g0_.x) * _e97.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn homogeneous_magnitude_multi_vector_inner_anti_product(self_804: HomogeneousMagnitude, other_732: MultiVector) -> MultiVector {
    var self_805: HomogeneousMagnitude;
    var other_733: MultiVector;

    self_805 = self_804;
    other_733 = other_732;
    let _e4: HomogeneousMagnitude = self_805;
    let _e8: MultiVector = other_733;
    let _e11: HomogeneousMagnitude = self_805;
    let _e15: MultiVector = other_733;
    let _e24: HomogeneousMagnitude = self_805;
    let _e28: MultiVector = other_733;
    let _e31: HomogeneousMagnitude = self_805;
    let _e35: MultiVector = other_733;
    let _e46: HomogeneousMagnitude = self_805;
    let _e50: MultiVector = other_733;
    let _e53: HomogeneousMagnitude = self_805;
    let _e57: MultiVector = other_733;
    let _e60: HomogeneousMagnitude = self_805;
    let _e64: MultiVector = other_733;
    let _e68: HomogeneousMagnitude = self_805;
    let _e72: MultiVector = other_733;
    let _e75: HomogeneousMagnitude = self_805;
    let _e79: MultiVector = other_733;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), ((vec4<f32>(_e24.g0_.y) * _e28.g1_) + ((vec4<f32>(_e31.g0_.x) * _e35.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e46.g0_.y) * _e50.g2_), ((vec3<f32>(_e53.g0_.x) * _e57.g2_) + (vec3<f32>(_e60.g0_.y) * _e64.g3_)), ((vec4<f32>(_e68.g0_.y) * _e72.g4_) + ((vec4<f32>(_e75.g0_.x) * _e79.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn homogeneous_magnitude_multi_vector_left_contraction(self_806: HomogeneousMagnitude, other_734: MultiVector) -> MultiVector {
    var self_807: HomogeneousMagnitude;
    var other_735: MultiVector;

    self_807 = self_806;
    other_735 = other_734;
    let _e4: HomogeneousMagnitude = self_807;
    let _e8: MultiVector = other_735;
    let _e11: HomogeneousMagnitude = self_807;
    let _e15: MultiVector = other_735;
    let _e18: HomogeneousMagnitude = self_807;
    let _e22: MultiVector = other_735;
    let _e25: HomogeneousMagnitude = self_807;
    let _e29: MultiVector = other_735;
    let _e32: HomogeneousMagnitude = self_807;
    let _e36: MultiVector = other_735;
    return MultiVector((vec2<f32>(_e4.g0_.x) * _e8.g0_), (vec4<f32>(_e11.g0_.x) * _e15.g1_), (vec3<f32>(_e18.g0_.x) * _e22.g2_), (vec3<f32>(_e25.g0_.x) * _e29.g3_), (vec4<f32>(_e32.g0_.x) * _e36.g4_));
}

fn homogeneous_magnitude_multi_vector_left_anti_contraction(self_808: HomogeneousMagnitude, other_736: MultiVector) -> MultiVector {
    var self_809: HomogeneousMagnitude;
    var other_737: MultiVector;

    self_809 = self_808;
    other_737 = other_736;
    let _e4: HomogeneousMagnitude = self_809;
    let _e8: MultiVector = other_737;
    let _e11: HomogeneousMagnitude = self_809;
    let _e15: MultiVector = other_737;
    let _e18: HomogeneousMagnitude = self_809;
    let _e22: MultiVector = other_737;
    let _e25: HomogeneousMagnitude = self_809;
    let _e29: MultiVector = other_737;
    let _e32: HomogeneousMagnitude = self_809;
    let _e36: MultiVector = other_737;
    return MultiVector((vec2<f32>(_e4.g0_.y) * _e8.g0_), (vec4<f32>(_e11.g0_.y) * _e15.g1_), (vec3<f32>(_e18.g0_.y) * _e22.g2_), (vec3<f32>(_e25.g0_.y) * _e29.g3_), (vec4<f32>(_e32.g0_.y) * _e36.g4_));
}

fn homogeneous_magnitude_multi_vector_scalar_product(self_810: HomogeneousMagnitude, other_738: MultiVector) -> Scalar {
    var self_811: HomogeneousMagnitude;
    var other_739: MultiVector;

    self_811 = self_810;
    other_739 = other_738;
    let _e4: HomogeneousMagnitude = self_811;
    let _e7: MultiVector = other_739;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_multi_vector_dot(self_812: HomogeneousMagnitude, other_740: MultiVector) -> Scalar {
    var self_813: HomogeneousMagnitude;
    var other_741: MultiVector;

    self_813 = self_812;
    other_741 = other_740;
    let _e4: HomogeneousMagnitude = self_813;
    let _e7: MultiVector = other_741;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn homogeneous_magnitude_multi_vector_anti_scalar_product(self_814: HomogeneousMagnitude, other_742: MultiVector) -> AntiScalar {
    var self_815: HomogeneousMagnitude;
    var other_743: MultiVector;

    self_815 = self_814;
    other_743 = other_742;
    let _e4: HomogeneousMagnitude = self_815;
    let _e7: MultiVector = other_743;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_multi_vector_anti_dot(self_816: HomogeneousMagnitude, other_744: MultiVector) -> AntiScalar {
    var self_817: HomogeneousMagnitude;
    var other_745: MultiVector;

    self_817 = self_816;
    other_745 = other_744;
    let _e4: HomogeneousMagnitude = self_817;
    let _e7: MultiVector = other_745;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn homogeneous_magnitude_squared_magnitude(self_818: HomogeneousMagnitude) -> Scalar {
    var self_819: HomogeneousMagnitude;

    self_819 = self_818;
    let _e2: HomogeneousMagnitude = self_819;
    let _e3: HomogeneousMagnitude = self_819;
    let _e4: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e3);
    let _e5: Scalar = homogeneous_magnitude_homogeneous_magnitude_scalar_product(_e2, _e4);
    return _e5;
}

fn homogeneous_magnitude_magnitude(self_820: HomogeneousMagnitude) -> Scalar {
    var self_821: HomogeneousMagnitude;

    self_821 = self_820;
    let _e2: HomogeneousMagnitude = self_821;
    let _e3: Scalar = homogeneous_magnitude_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_bulk_norm(self_822: HomogeneousMagnitude) -> Scalar {
    var self_823: HomogeneousMagnitude;

    self_823 = self_822;
    let _e2: HomogeneousMagnitude = self_823;
    let _e3: Scalar = homogeneous_magnitude_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_squared_anti_magnitude(self_824: HomogeneousMagnitude) -> AntiScalar {
    var self_825: HomogeneousMagnitude;

    self_825 = self_824;
    let _e2: HomogeneousMagnitude = self_825;
    let _e3: HomogeneousMagnitude = self_825;
    let _e4: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e3);
    let _e5: AntiScalar = homogeneous_magnitude_homogeneous_magnitude_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn homogeneous_magnitude_weight_norm(self_826: HomogeneousMagnitude) -> AntiScalar {
    var self_827: HomogeneousMagnitude;

    self_827 = self_826;
    let _e2: HomogeneousMagnitude = self_827;
    let _e3: AntiScalar = homogeneous_magnitude_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn homogeneous_magnitude_geometric_norm(self_828: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_829: HomogeneousMagnitude;

    self_829 = self_828;
    let _e2: HomogeneousMagnitude = self_829;
    let _e3: Scalar = homogeneous_magnitude_bulk_norm(_e2);
    let _e4: HomogeneousMagnitude = self_829;
    let _e5: AntiScalar = homogeneous_magnitude_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn homogeneous_magnitude_scale(self_830: HomogeneousMagnitude, other_746: f32) -> HomogeneousMagnitude {
    var self_831: HomogeneousMagnitude;
    var other_747: f32;

    self_831 = self_830;
    other_747 = other_746;
    let _e4: HomogeneousMagnitude = self_831;
    let _e5: f32 = other_747;
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn homogeneous_magnitude_signum(self_832: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_833: HomogeneousMagnitude;

    self_833 = self_832;
    let _e2: HomogeneousMagnitude = self_833;
    let _e3: HomogeneousMagnitude = self_833;
    let _e4: Scalar = homogeneous_magnitude_magnitude(_e3);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn homogeneous_magnitude_inverse(self_834: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_835: HomogeneousMagnitude;

    self_835 = self_834;
    let _e2: HomogeneousMagnitude = self_835;
    let _e3: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e2);
    let _e4: HomogeneousMagnitude = self_835;
    let _e5: Scalar = homogeneous_magnitude_squared_magnitude(_e4);
    let _e10: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn homogeneous_magnitude_unitize(self_836: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_837: HomogeneousMagnitude;

    self_837 = self_836;
    let _e2: HomogeneousMagnitude = self_837;
    let _e3: HomogeneousMagnitude = self_837;
    let _e4: AntiScalar = homogeneous_magnitude_weight_norm(_e3);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn homogeneous_magnitude_attitude(self_838: HomogeneousMagnitude) -> Plane {
    var self_839: HomogeneousMagnitude;

    self_839 = self_838;
    let _e2: HomogeneousMagnitude = self_839;
    let _e9: Plane = homogeneous_magnitude_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn point_zero() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_one() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_grade(self_840: Point) -> i32 {
    return 1;
}

fn point_anti_grade(self_841: Point) -> i32 {
    return 3;
}

fn point_neg(self_842: Point) -> Point {
    var self_843: Point;

    self_843 = self_842;
    let _e2: Point = self_843;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_automorphism(self_844: Point) -> Point {
    var self_845: Point;

    self_845 = self_844;
    let _e2: Point = self_845;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_reversal(self_846: Point) -> Point {
    var self_847: Point;

    self_847 = self_846;
    let _e2: Point = self_847;
    return Point(_e2.g0_);
}

fn point_conjugation(self_848: Point) -> Point {
    var self_849: Point;

    self_849 = self_848;
    let _e2: Point = self_849;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_dual(self_850: Point) -> Plane {
    var self_851: Point;

    self_851 = self_850;
    let _e2: Point = self_851;
    return Plane(_e2.g0_);
}

fn point_anti_reversal(self_852: Point) -> Point {
    var self_853: Point;

    self_853 = self_852;
    let _e2: Point = self_853;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_right_complement(self_854: Point) -> Plane {
    var self_855: Point;

    self_855 = self_854;
    let _e2: Point = self_855;
    return Plane(_e2.g0_);
}

fn point_left_complement(self_856: Point) -> Plane {
    var self_857: Point;

    self_857 = self_856;
    let _e2: Point = self_857;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_double_complement(self_858: Point) -> Point {
    var self_859: Point;

    self_859 = self_858;
    let _e2: Point = self_859;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_scalar_geometric_product(self_860: Point, other_748: Scalar) -> Point {
    var self_861: Point;
    var other_749: Scalar;

    self_861 = self_860;
    other_749 = other_748;
    let _e4: Point = self_861;
    let _e6: Scalar = other_749;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_outer_product(self_862: Point, other_750: Scalar) -> Point {
    var self_863: Point;
    var other_751: Scalar;

    self_863 = self_862;
    other_751 = other_750;
    let _e4: Point = self_863;
    let _e6: Scalar = other_751;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_wedge(self_864: Point, other_752: Scalar) -> Point {
    var self_865: Point;
    var other_753: Scalar;

    self_865 = self_864;
    other_753 = other_752;
    let _e4: Point = self_865;
    let _e6: Scalar = other_753;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_join(self_866: Point, other_754: Scalar) -> Point {
    var self_867: Point;
    var other_755: Scalar;

    self_867 = self_866;
    other_755 = other_754;
    let _e4: Point = self_867;
    let _e6: Scalar = other_755;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_inner_product(self_868: Point, other_756: Scalar) -> Point {
    var self_869: Point;
    var other_757: Scalar;

    self_869 = self_868;
    other_757 = other_756;
    let _e4: Point = self_869;
    let _e6: Scalar = other_757;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_right_contraction(self_870: Point, other_758: Scalar) -> Point {
    var self_871: Point;
    var other_759: Scalar;

    self_871 = self_870;
    other_759 = other_758;
    let _e4: Point = self_871;
    let _e6: Scalar = other_759;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_geometric_anti_product(self_872: Point, other_760: AntiScalar) -> Point {
    var self_873: Point;
    var other_761: AntiScalar;

    self_873 = self_872;
    other_761 = other_760;
    let _e4: Point = self_873;
    let _e6: AntiScalar = other_761;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_regressive_product(self_874: Point, other_762: AntiScalar) -> Point {
    var self_875: Point;
    var other_763: AntiScalar;

    self_875 = self_874;
    other_763 = other_762;
    let _e4: Point = self_875;
    let _e6: AntiScalar = other_763;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_anti_wedge(self_876: Point, other_764: AntiScalar) -> Point {
    var self_877: Point;
    var other_765: AntiScalar;

    self_877 = self_876;
    other_765 = other_764;
    let _e4: Point = self_877;
    let _e6: AntiScalar = other_765;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_meet(self_878: Point, other_766: AntiScalar) -> Point {
    var self_879: Point;
    var other_767: AntiScalar;

    self_879 = self_878;
    other_767 = other_766;
    let _e4: Point = self_879;
    let _e6: AntiScalar = other_767;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_inner_anti_product(self_880: Point, other_768: AntiScalar) -> Point {
    var self_881: Point;
    var other_769: AntiScalar;

    self_881 = self_880;
    other_769 = other_768;
    let _e4: Point = self_881;
    let _e6: AntiScalar = other_769;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_right_anti_contraction(self_882: Point, other_770: AntiScalar) -> Point {
    var self_883: Point;
    var other_771: AntiScalar;

    self_883 = self_882;
    other_771 = other_770;
    let _e4: Point = self_883;
    let _e6: AntiScalar = other_771;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_homogeneous_magnitude_regressive_product(self_884: Point, other_772: HomogeneousMagnitude) -> Point {
    var self_885: Point;
    var other_773: HomogeneousMagnitude;

    self_885 = self_884;
    other_773 = other_772;
    let _e4: Point = self_885;
    let _e6: HomogeneousMagnitude = other_773;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_anti_wedge(self_886: Point, other_774: HomogeneousMagnitude) -> Point {
    var self_887: Point;
    var other_775: HomogeneousMagnitude;

    self_887 = self_886;
    other_775 = other_774;
    let _e4: Point = self_887;
    let _e6: HomogeneousMagnitude = other_775;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_meet(self_888: Point, other_776: HomogeneousMagnitude) -> Point {
    var self_889: Point;
    var other_777: HomogeneousMagnitude;

    self_889 = self_888;
    other_777 = other_776;
    let _e4: Point = self_889;
    let _e6: HomogeneousMagnitude = other_777;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn point_homogeneous_magnitude_outer_product(self_890: Point, other_778: HomogeneousMagnitude) -> Point {
    var self_891: Point;
    var other_779: HomogeneousMagnitude;

    self_891 = self_890;
    other_779 = other_778;
    let _e4: Point = self_891;
    let _e6: HomogeneousMagnitude = other_779;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_wedge(self_892: Point, other_780: HomogeneousMagnitude) -> Point {
    var self_893: Point;
    var other_781: HomogeneousMagnitude;

    self_893 = self_892;
    other_781 = other_780;
    let _e4: Point = self_893;
    let _e6: HomogeneousMagnitude = other_781;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_join(self_894: Point, other_782: HomogeneousMagnitude) -> Point {
    var self_895: Point;
    var other_783: HomogeneousMagnitude;

    self_895 = self_894;
    other_783 = other_782;
    let _e4: Point = self_895;
    let _e6: HomogeneousMagnitude = other_783;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_right_contraction(self_896: Point, other_784: HomogeneousMagnitude) -> Point {
    var self_897: Point;
    var other_785: HomogeneousMagnitude;

    self_897 = self_896;
    other_785 = other_784;
    let _e4: Point = self_897;
    let _e6: HomogeneousMagnitude = other_785;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_homogeneous_magnitude_right_anti_contraction(self_898: Point, other_786: HomogeneousMagnitude) -> Point {
    var self_899: Point;
    var other_787: HomogeneousMagnitude;

    self_899 = self_898;
    other_787 = other_786;
    let _e4: Point = self_899;
    let _e6: HomogeneousMagnitude = other_787;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn point_point_add(self_900: Point, other_788: Point) -> Point {
    var self_901: Point;
    var other_789: Point;

    self_901 = self_900;
    other_789 = other_788;
    let _e4: Point = self_901;
    let _e6: Point = other_789;
    return Point((_e4.g0_ + _e6.g0_));
}

fn point_point_sub(self_902: Point, other_790: Point) -> Point {
    var self_903: Point;
    var other_791: Point;

    self_903 = self_902;
    other_791 = other_790;
    let _e4: Point = self_903;
    let _e6: Point = other_791;
    return Point((_e4.g0_ - _e6.g0_));
}

fn point_point_mul(self_904: Point, other_792: Point) -> Point {
    var self_905: Point;
    var other_793: Point;

    self_905 = self_904;
    other_793 = other_792;
    let _e4: Point = self_905;
    let _e6: Point = other_793;
    return Point((_e4.g0_ * _e6.g0_));
}

fn point_point_div(self_906: Point, other_794: Point) -> Point {
    var self_907: Point;
    var other_795: Point;

    self_907 = self_906;
    other_795 = other_794;
    let _e4: Point = self_907;
    let _e7: Point = self_907;
    let _e10: Point = self_907;
    let _e13: Point = self_907;
    let _e23: Point = other_795;
    let _e26: Point = other_795;
    let _e29: Point = other_795;
    let _e32: Point = other_795;
    return Point((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn point_point_geometric_anti_product(self_908: Point, other_796: Point) -> Translator {
    var self_909: Point;
    var other_797: Point;

    self_909 = self_908;
    other_797 = other_796;
    let _e4: Point = self_909;
    let _e8: Point = other_797;
    let _e18: Point = self_909;
    let _e21: Point = other_797;
    return Translator((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((_e18.g0_.xyzx * _e21.g0_.wwwx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn point_point_outer_product(self_910: Point, other_798: Point) -> Line {
    var self_911: Point;
    var other_799: Point;

    self_911 = self_910;
    other_799 = other_798;
    let _e4: Point = self_911;
    let _e8: Point = other_799;
    let _e11: Point = other_799;
    let _e14: Point = other_799;
    let _e19: Point = self_911;
    let _e22: Point = self_911;
    let _e25: Point = self_911;
    let _e29: Point = other_799;
    let _e39: Point = self_911;
    let _e43: Point = other_799;
    let _e46: Point = other_799;
    let _e49: Point = other_799;
    let _e60: Point = self_911;
    let _e64: Point = other_799;
    let _e67: Point = other_799;
    let _e70: Point = other_799;
    let _e82: Point = self_911;
    let _e86: Point = other_799;
    let _e89: Point = other_799;
    let _e92: Point = other_799;
    return Line(((vec3<f32>(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3<f32>(_e29.g0_.w)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.y) * vec3<f32>(_e43.g0_.z, _e46.g0_.z, _e49.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.z) * vec3<f32>(_e64.g0_.y, _e67.g0_.x, _e70.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x) * vec3<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_point_wedge(self_912: Point, other_800: Point) -> Line {
    var self_913: Point;
    var other_801: Point;

    self_913 = self_912;
    other_801 = other_800;
    let _e4: Point = self_913;
    let _e8: Point = other_801;
    let _e11: Point = other_801;
    let _e14: Point = other_801;
    let _e19: Point = self_913;
    let _e22: Point = self_913;
    let _e25: Point = self_913;
    let _e29: Point = other_801;
    let _e39: Point = self_913;
    let _e43: Point = other_801;
    let _e46: Point = other_801;
    let _e49: Point = other_801;
    let _e60: Point = self_913;
    let _e64: Point = other_801;
    let _e67: Point = other_801;
    let _e70: Point = other_801;
    let _e82: Point = self_913;
    let _e86: Point = other_801;
    let _e89: Point = other_801;
    let _e92: Point = other_801;
    return Line(((vec3<f32>(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3<f32>(_e29.g0_.w)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.y) * vec3<f32>(_e43.g0_.z, _e46.g0_.z, _e49.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.z) * vec3<f32>(_e64.g0_.y, _e67.g0_.x, _e70.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x) * vec3<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_point_join(self_914: Point, other_802: Point) -> Line {
    var self_915: Point;
    var other_803: Point;

    self_915 = self_914;
    other_803 = other_802;
    let _e4: Point = self_915;
    let _e8: Point = other_803;
    let _e11: Point = other_803;
    let _e14: Point = other_803;
    let _e19: Point = self_915;
    let _e22: Point = self_915;
    let _e25: Point = self_915;
    let _e29: Point = other_803;
    let _e39: Point = self_915;
    let _e43: Point = other_803;
    let _e46: Point = other_803;
    let _e49: Point = other_803;
    let _e60: Point = self_915;
    let _e64: Point = other_803;
    let _e67: Point = other_803;
    let _e70: Point = other_803;
    let _e82: Point = self_915;
    let _e86: Point = other_803;
    let _e89: Point = other_803;
    let _e92: Point = other_803;
    return Line(((vec3<f32>(_e4.g0_.w) * vec3<f32>(_e8.g0_.x, _e11.g0_.y, _e14.g0_.z)) + ((vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z) * vec3<f32>(_e29.g0_.w)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.y) * vec3<f32>(_e43.g0_.z, _e46.g0_.z, _e49.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.z) * vec3<f32>(_e64.g0_.y, _e67.g0_.x, _e70.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x) * vec3<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_point_inner_product(self_916: Point, other_804: Point) -> Scalar {
    var self_917: Point;
    var other_805: Point;

    self_917 = self_916;
    other_805 = other_804;
    let _e4: Point = self_917;
    let _e7: Point = other_805;
    let _e11: Point = self_917;
    let _e14: Point = other_805;
    let _e19: Point = self_917;
    let _e22: Point = other_805;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_inner_anti_product(self_918: Point, other_806: Point) -> AntiScalar {
    var self_919: Point;
    var other_807: Point;

    self_919 = self_918;
    other_807 = other_806;
    let _e5: Point = self_919;
    let _e8: Point = other_807;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_left_contraction(self_920: Point, other_808: Point) -> Scalar {
    var self_921: Point;
    var other_809: Point;

    self_921 = self_920;
    other_809 = other_808;
    let _e4: Point = self_921;
    let _e7: Point = other_809;
    let _e11: Point = self_921;
    let _e14: Point = other_809;
    let _e19: Point = self_921;
    let _e22: Point = other_809;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_right_contraction(self_922: Point, other_810: Point) -> Scalar {
    var self_923: Point;
    var other_811: Point;

    self_923 = self_922;
    other_811 = other_810;
    let _e4: Point = self_923;
    let _e7: Point = other_811;
    let _e11: Point = self_923;
    let _e14: Point = other_811;
    let _e19: Point = self_923;
    let _e22: Point = other_811;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_left_anti_contraction(self_924: Point, other_812: Point) -> AntiScalar {
    var self_925: Point;
    var other_813: Point;

    self_925 = self_924;
    other_813 = other_812;
    let _e5: Point = self_925;
    let _e8: Point = other_813;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_right_anti_contraction(self_926: Point, other_814: Point) -> AntiScalar {
    var self_927: Point;
    var other_815: Point;

    self_927 = self_926;
    other_815 = other_814;
    let _e5: Point = self_927;
    let _e8: Point = other_815;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_scalar_product(self_928: Point, other_816: Point) -> Scalar {
    var self_929: Point;
    var other_817: Point;

    self_929 = self_928;
    other_817 = other_816;
    let _e4: Point = self_929;
    let _e7: Point = other_817;
    let _e11: Point = self_929;
    let _e14: Point = other_817;
    let _e19: Point = self_929;
    let _e22: Point = other_817;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_dot(self_930: Point, other_818: Point) -> Scalar {
    var self_931: Point;
    var other_819: Point;

    self_931 = self_930;
    other_819 = other_818;
    let _e4: Point = self_931;
    let _e7: Point = other_819;
    let _e11: Point = self_931;
    let _e14: Point = other_819;
    let _e19: Point = self_931;
    let _e22: Point = other_819;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_point_anti_scalar_product(self_932: Point, other_820: Point) -> AntiScalar {
    var self_933: Point;
    var other_821: Point;

    self_933 = self_932;
    other_821 = other_820;
    let _e5: Point = self_933;
    let _e8: Point = other_821;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_point_anti_dot(self_934: Point, other_822: Point) -> AntiScalar {
    var self_935: Point;
    var other_823: Point;

    self_935 = self_934;
    other_823 = other_822;
    let _e5: Point = self_935;
    let _e8: Point = other_823;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_line_geometric_product(self_936: Point, other_824: Line) -> Flector {
    var self_937: Point;
    var other_825: Line;

    self_937 = self_936;
    other_825 = other_824;
    let _e4: Point = self_937;
    let _e8: Line = other_825;
    let _e11: Line = other_825;
    let _e14: Line = other_825;
    let _e17: Line = other_825;
    let _e30: Point = self_937;
    let _e34: Line = other_825;
    let _e37: Line = other_825;
    let _e40: Line = other_825;
    let _e43: Line = other_825;
    let _e57: Point = self_937;
    let _e61: Line = other_825;
    let _e64: Line = other_825;
    let _e67: Line = other_825;
    let _e70: Line = other_825;
    let _e84: Point = self_937;
    let _e88: Line = other_825;
    let _e91: Line = other_825;
    let _e94: Line = other_825;
    let _e97: Line = other_825;
    let _e110: Point = self_937;
    let _e114: Line = other_825;
    let _e117: Line = other_825;
    let _e120: Line = other_825;
    let _e123: Line = other_825;
    let _e137: Point = self_937;
    let _e141: Line = other_825;
    let _e144: Line = other_825;
    let _e147: Line = other_825;
    let _e150: Line = other_825;
    let _e162: Point = self_937;
    let _e166: Line = other_825;
    let _e169: Line = other_825;
    let _e172: Line = other_825;
    let _e175: Line = other_825;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e84.g0_.y) * vec4<f32>(_e88.g0_.z, _e91.g0_.z, _e94.g0_.x, _e97.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.z) * vec4<f32>(_e114.g0_.y, _e117.g0_.x, _e120.g0_.y, _e123.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e137.g0_.w) * vec4<f32>(_e141.g1_.x, _e144.g1_.y, _e147.g1_.z, _e150.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g0_.x, _e169.g0_.z, _e172.g0_.y, _e175.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_outer_product(self_938: Point, other_826: Line) -> Plane {
    var self_939: Point;
    var other_827: Line;

    self_939 = self_938;
    other_827 = other_826;
    let _e4: Point = self_939;
    let _e8: Line = other_827;
    let _e11: Line = other_827;
    let _e14: Line = other_827;
    let _e17: Line = other_827;
    let _e30: Point = self_939;
    let _e34: Line = other_827;
    let _e37: Line = other_827;
    let _e40: Line = other_827;
    let _e43: Line = other_827;
    let _e57: Point = self_939;
    let _e61: Line = other_827;
    let _e64: Line = other_827;
    let _e67: Line = other_827;
    let _e70: Line = other_827;
    let _e82: Point = self_939;
    let _e86: Line = other_827;
    let _e89: Line = other_827;
    let _e92: Line = other_827;
    let _e95: Line = other_827;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_wedge(self_940: Point, other_828: Line) -> Plane {
    var self_941: Point;
    var other_829: Line;

    self_941 = self_940;
    other_829 = other_828;
    let _e4: Point = self_941;
    let _e8: Line = other_829;
    let _e11: Line = other_829;
    let _e14: Line = other_829;
    let _e17: Line = other_829;
    let _e30: Point = self_941;
    let _e34: Line = other_829;
    let _e37: Line = other_829;
    let _e40: Line = other_829;
    let _e43: Line = other_829;
    let _e57: Point = self_941;
    let _e61: Line = other_829;
    let _e64: Line = other_829;
    let _e67: Line = other_829;
    let _e70: Line = other_829;
    let _e82: Point = self_941;
    let _e86: Line = other_829;
    let _e89: Line = other_829;
    let _e92: Line = other_829;
    let _e95: Line = other_829;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_join(self_942: Point, other_830: Line) -> Plane {
    var self_943: Point;
    var other_831: Line;

    self_943 = self_942;
    other_831 = other_830;
    let _e4: Point = self_943;
    let _e8: Line = other_831;
    let _e11: Line = other_831;
    let _e14: Line = other_831;
    let _e17: Line = other_831;
    let _e30: Point = self_943;
    let _e34: Line = other_831;
    let _e37: Line = other_831;
    let _e40: Line = other_831;
    let _e43: Line = other_831;
    let _e57: Point = self_943;
    let _e61: Line = other_831;
    let _e64: Line = other_831;
    let _e67: Line = other_831;
    let _e70: Line = other_831;
    let _e82: Point = self_943;
    let _e86: Line = other_831;
    let _e89: Line = other_831;
    let _e92: Line = other_831;
    let _e95: Line = other_831;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_inner_product(self_944: Point, other_832: Line) -> Point {
    var self_945: Point;
    var other_833: Line;

    self_945 = self_944;
    other_833 = other_832;
    let _e4: Point = self_945;
    let _e8: Line = other_833;
    let _e11: Line = other_833;
    let _e14: Line = other_833;
    let _e17: Line = other_833;
    let _e30: Point = self_945;
    let _e34: Line = other_833;
    let _e37: Line = other_833;
    let _e40: Line = other_833;
    let _e43: Line = other_833;
    let _e57: Point = self_945;
    let _e61: Line = other_833;
    let _e64: Line = other_833;
    let _e67: Line = other_833;
    let _e70: Line = other_833;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_inner_anti_product(self_946: Point, other_834: Line) -> Plane {
    var self_947: Point;
    var other_835: Line;

    self_947 = self_946;
    other_835 = other_834;
    let _e4: Point = self_947;
    let _e8: Line = other_835;
    let _e20: Point = self_947;
    let _e24: Line = other_835;
    let _e37: Point = self_947;
    let _e40: Line = other_835;
    let _e43: Line = other_835;
    let _e46: Line = other_835;
    let _e49: Line = other_835;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_line_left_contraction(self_948: Point, other_836: Line) -> Point {
    var self_949: Point;
    var other_837: Line;

    self_949 = self_948;
    other_837 = other_836;
    let _e4: Point = self_949;
    let _e8: Line = other_837;
    let _e11: Line = other_837;
    let _e14: Line = other_837;
    let _e17: Line = other_837;
    let _e30: Point = self_949;
    let _e34: Line = other_837;
    let _e37: Line = other_837;
    let _e40: Line = other_837;
    let _e43: Line = other_837;
    let _e57: Point = self_949;
    let _e61: Line = other_837;
    let _e64: Line = other_837;
    let _e67: Line = other_837;
    let _e70: Line = other_837;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_line_right_anti_contraction(self_950: Point, other_838: Line) -> Plane {
    var self_951: Point;
    var other_839: Line;

    self_951 = self_950;
    other_839 = other_838;
    let _e4: Point = self_951;
    let _e8: Line = other_839;
    let _e20: Point = self_951;
    let _e24: Line = other_839;
    let _e37: Point = self_951;
    let _e40: Line = other_839;
    let _e43: Line = other_839;
    let _e46: Line = other_839;
    let _e49: Line = other_839;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_plane_add(self_952: Point, other_840: Plane) -> Flector {
    var self_953: Point;
    var other_841: Plane;

    self_953 = self_952;
    other_841 = other_840;
    let _e4: Point = self_953;
    let _e6: Plane = other_841;
    return Flector(_e4.g0_, _e6.g0_);
}

fn point_plane_sub(self_954: Point, other_842: Plane) -> Flector {
    var self_955: Point;
    var other_843: Plane;

    self_955 = self_954;
    other_843 = other_842;
    let _e4: Point = self_955;
    let _e8: Plane = other_843;
    return Flector(_e4.g0_, (vec4<f32>(0.0) - _e8.g0_));
}

fn point_plane_geometric_product(self_956: Point, other_844: Plane) -> Motor {
    var self_957: Point;
    var other_845: Plane;

    self_957 = self_956;
    other_845 = other_844;
    let _e4: Point = self_957;
    let _e8: Plane = other_845;
    let _e19: Point = self_957;
    let _e23: Plane = other_845;
    let _e35: Point = self_957;
    let _e39: Plane = other_845;
    let _e51: Point = self_957;
    let _e55: Plane = other_845;
    let _e67: Point = self_957;
    let _e70: Point = self_957;
    let _e73: Point = self_957;
    let _e77: Plane = other_845;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyz) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))), ((vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z) * vec3<f32>(_e77.g0_.w)) * vec3<f32>(-(1.0))));
}

fn point_plane_regressive_product(self_958: Point, other_846: Plane) -> Scalar {
    var self_959: Point;
    var other_847: Plane;

    self_959 = self_958;
    other_847 = other_846;
    let _e4: Point = self_959;
    let _e7: Plane = other_847;
    let _e11: Point = self_959;
    let _e14: Plane = other_847;
    let _e19: Point = self_959;
    let _e22: Plane = other_847;
    let _e27: Point = self_959;
    let _e30: Plane = other_847;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_anti_wedge(self_960: Point, other_848: Plane) -> Scalar {
    var self_961: Point;
    var other_849: Plane;

    self_961 = self_960;
    other_849 = other_848;
    let _e4: Point = self_961;
    let _e7: Plane = other_849;
    let _e11: Point = self_961;
    let _e14: Plane = other_849;
    let _e19: Point = self_961;
    let _e22: Plane = other_849;
    let _e27: Point = self_961;
    let _e30: Plane = other_849;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_meet(self_962: Point, other_850: Plane) -> Scalar {
    var self_963: Point;
    var other_851: Plane;

    self_963 = self_962;
    other_851 = other_850;
    let _e4: Point = self_963;
    let _e7: Plane = other_851;
    let _e11: Point = self_963;
    let _e14: Plane = other_851;
    let _e19: Point = self_963;
    let _e22: Plane = other_851;
    let _e27: Point = self_963;
    let _e30: Plane = other_851;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_outer_product(self_964: Point, other_852: Plane) -> AntiScalar {
    var self_965: Point;
    var other_853: Plane;

    self_965 = self_964;
    other_853 = other_852;
    let _e4: Point = self_965;
    let _e7: Plane = other_853;
    let _e11: Point = self_965;
    let _e14: Plane = other_853;
    let _e19: Point = self_965;
    let _e22: Plane = other_853;
    let _e27: Point = self_965;
    let _e30: Plane = other_853;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_wedge(self_966: Point, other_854: Plane) -> AntiScalar {
    var self_967: Point;
    var other_855: Plane;

    self_967 = self_966;
    other_855 = other_854;
    let _e4: Point = self_967;
    let _e7: Plane = other_855;
    let _e11: Point = self_967;
    let _e14: Plane = other_855;
    let _e19: Point = self_967;
    let _e22: Plane = other_855;
    let _e27: Point = self_967;
    let _e30: Plane = other_855;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_join(self_968: Point, other_856: Plane) -> AntiScalar {
    var self_969: Point;
    var other_857: Plane;

    self_969 = self_968;
    other_857 = other_856;
    let _e4: Point = self_969;
    let _e7: Plane = other_857;
    let _e11: Point = self_969;
    let _e14: Plane = other_857;
    let _e19: Point = self_969;
    let _e22: Plane = other_857;
    let _e27: Point = self_969;
    let _e30: Plane = other_857;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_plane_inner_product(self_970: Point, other_858: Plane) -> Line {
    var self_971: Point;
    var other_859: Plane;

    self_971 = self_970;
    other_859 = other_858;
    let _e4: Point = self_971;
    let _e8: Plane = other_859;
    let _e11: Plane = other_859;
    let _e14: Plane = other_859;
    let _e25: Point = self_971;
    let _e29: Plane = other_859;
    let _e32: Plane = other_859;
    let _e35: Plane = other_859;
    let _e47: Point = self_971;
    let _e51: Plane = other_859;
    let _e54: Plane = other_859;
    let _e57: Plane = other_859;
    let _e69: Point = self_971;
    let _e72: Point = self_971;
    let _e75: Point = self_971;
    let _e79: Plane = other_859;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z) * vec3<f32>(_e79.g0_.w)) * vec3<f32>(-(1.0))));
}

fn point_plane_inner_anti_product(self_972: Point, other_860: Plane) -> Line {
    var self_973: Point;
    var other_861: Plane;

    self_973 = self_972;
    other_861 = other_860;
    let _e6: Point = self_973;
    let _e10: Plane = other_861;
    let _e13: Plane = other_861;
    let _e16: Plane = other_861;
    let _e22: Point = self_973;
    let _e26: Plane = other_861;
    let _e29: Plane = other_861;
    let _e32: Plane = other_861;
    let _e43: Point = self_973;
    let _e47: Plane = other_861;
    let _e50: Plane = other_861;
    let _e53: Plane = other_861;
    let _e65: Point = self_973;
    let _e69: Plane = other_861;
    let _e72: Plane = other_861;
    let _e75: Plane = other_861;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e43.g0_.z) * vec3<f32>(_e47.g0_.y, _e50.g0_.x, _e53.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e65.g0_.x) * vec3<f32>(_e69.g0_.x, _e72.g0_.z, _e75.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn point_plane_left_contraction(self_974: Point, other_862: Plane) -> Line {
    var self_975: Point;
    var other_863: Plane;

    self_975 = self_974;
    other_863 = other_862;
    let _e4: Point = self_975;
    let _e8: Plane = other_863;
    let _e11: Plane = other_863;
    let _e14: Plane = other_863;
    let _e25: Point = self_975;
    let _e29: Plane = other_863;
    let _e32: Plane = other_863;
    let _e35: Plane = other_863;
    let _e47: Point = self_975;
    let _e51: Plane = other_863;
    let _e54: Plane = other_863;
    let _e57: Plane = other_863;
    let _e69: Point = self_975;
    let _e72: Point = self_975;
    let _e75: Point = self_975;
    let _e79: Plane = other_863;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z) * vec3<f32>(_e79.g0_.w)) * vec3<f32>(-(1.0))));
}

fn point_plane_right_anti_contraction(self_976: Point, other_864: Plane) -> Line {
    var self_977: Point;
    var other_865: Plane;

    self_977 = self_976;
    other_865 = other_864;
    let _e6: Point = self_977;
    let _e10: Plane = other_865;
    let _e13: Plane = other_865;
    let _e16: Plane = other_865;
    let _e22: Point = self_977;
    let _e26: Plane = other_865;
    let _e29: Plane = other_865;
    let _e32: Plane = other_865;
    let _e43: Point = self_977;
    let _e47: Plane = other_865;
    let _e50: Plane = other_865;
    let _e53: Plane = other_865;
    let _e65: Point = self_977;
    let _e69: Plane = other_865;
    let _e72: Plane = other_865;
    let _e75: Plane = other_865;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.w) * vec3<f32>(_e10.g0_.x, _e13.g0_.y, _e16.g0_.z))), ((((vec3<f32>(_e22.g0_.y) * vec3<f32>(_e26.g0_.z, _e29.g0_.z, _e32.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e43.g0_.z) * vec3<f32>(_e47.g0_.y, _e50.g0_.x, _e53.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e65.g0_.x) * vec3<f32>(_e69.g0_.x, _e72.g0_.z, _e75.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn point_motor_geometric_product(self_978: Point, other_866: Motor) -> Flector {
    var self_979: Point;
    var other_867: Motor;

    self_979 = self_978;
    other_867 = other_866;
    let _e4: Point = self_979;
    let _e8: Motor = other_867;
    let _e11: Motor = other_867;
    let _e14: Motor = other_867;
    let _e17: Motor = other_867;
    let _e30: Point = self_979;
    let _e34: Motor = other_867;
    let _e37: Motor = other_867;
    let _e40: Motor = other_867;
    let _e43: Motor = other_867;
    let _e57: Point = self_979;
    let _e61: Motor = other_867;
    let _e64: Motor = other_867;
    let _e67: Motor = other_867;
    let _e70: Motor = other_867;
    let _e84: Point = self_979;
    let _e88: Motor = other_867;
    let _e91: Motor = other_867;
    let _e94: Motor = other_867;
    let _e97: Motor = other_867;
    let _e110: Point = self_979;
    let _e114: Motor = other_867;
    let _e117: Motor = other_867;
    let _e120: Motor = other_867;
    let _e123: Motor = other_867;
    let _e137: Point = self_979;
    let _e141: Motor = other_867;
    let _e144: Motor = other_867;
    let _e147: Motor = other_867;
    let _e150: Motor = other_867;
    let _e164: Point = self_979;
    let _e167: Motor = other_867;
    let _e170: Motor = other_867;
    let _e173: Motor = other_867;
    let _e176: Motor = other_867;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.w, _e91.g0_.z, _e94.g0_.y, _e97.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e110.g0_.y) * vec4<f32>(_e114.g0_.z, _e117.g0_.w, _e120.g0_.x, _e123.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e137.g0_.z) * vec4<f32>(_e141.g0_.y, _e144.g0_.x, _e147.g0_.w, _e150.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e164.g0_.wwwx * vec4<f32>(_e167.g1_.x, _e170.g1_.y, _e173.g1_.z, _e176.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_motor_geometric_anti_product(self_980: Point, other_868: Motor) -> Flector {
    var self_981: Point;
    var other_869: Motor;

    self_981 = self_980;
    other_869 = other_868;
    let _e4: Point = self_981;
    let _e8: Motor = other_869;
    let _e19: Point = self_981;
    let _e23: Motor = other_869;
    let _e35: Point = self_981;
    let _e39: Motor = other_869;
    let _e42: Motor = other_869;
    let _e45: Motor = other_869;
    let _e48: Motor = other_869;
    let _e63: Point = self_981;
    let _e67: Motor = other_869;
    let _e79: Point = self_981;
    let _e83: Motor = other_869;
    let _e95: Point = self_981;
    let _e99: Motor = other_869;
    let _e112: Point = self_981;
    let _e115: Motor = other_869;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e63.g0_.x) * _e67.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec4<f32>(_e79.g0_.y) * vec4<f32>(_e83.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e95.g0_.z) * vec4<f32>(_e99.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e112.g0_.wwwx * _e115.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_motor_regressive_product(self_982: Point, other_870: Motor) -> Point {
    var self_983: Point;
    var other_871: Motor;

    self_983 = self_982;
    other_871 = other_870;
    let _e4: Point = self_983;
    let _e6: Motor = other_871;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_motor_anti_wedge(self_984: Point, other_872: Motor) -> Point {
    var self_985: Point;
    var other_873: Motor;

    self_985 = self_984;
    other_873 = other_872;
    let _e4: Point = self_985;
    let _e6: Motor = other_873;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_motor_meet(self_986: Point, other_874: Motor) -> Point {
    var self_987: Point;
    var other_875: Motor;

    self_987 = self_986;
    other_875 = other_874;
    let _e4: Point = self_987;
    let _e6: Motor = other_875;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_motor_outer_product(self_988: Point, other_876: Motor) -> Plane {
    var self_989: Point;
    var other_877: Motor;

    self_989 = self_988;
    other_877 = other_876;
    let _e4: Point = self_989;
    let _e8: Motor = other_877;
    let _e11: Motor = other_877;
    let _e14: Motor = other_877;
    let _e17: Motor = other_877;
    let _e30: Point = self_989;
    let _e34: Motor = other_877;
    let _e37: Motor = other_877;
    let _e40: Motor = other_877;
    let _e43: Motor = other_877;
    let _e57: Point = self_989;
    let _e61: Motor = other_877;
    let _e64: Motor = other_877;
    let _e67: Motor = other_877;
    let _e70: Motor = other_877;
    let _e82: Point = self_989;
    let _e86: Motor = other_877;
    let _e89: Motor = other_877;
    let _e92: Motor = other_877;
    let _e95: Motor = other_877;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_motor_wedge(self_990: Point, other_878: Motor) -> Plane {
    var self_991: Point;
    var other_879: Motor;

    self_991 = self_990;
    other_879 = other_878;
    let _e4: Point = self_991;
    let _e8: Motor = other_879;
    let _e11: Motor = other_879;
    let _e14: Motor = other_879;
    let _e17: Motor = other_879;
    let _e30: Point = self_991;
    let _e34: Motor = other_879;
    let _e37: Motor = other_879;
    let _e40: Motor = other_879;
    let _e43: Motor = other_879;
    let _e57: Point = self_991;
    let _e61: Motor = other_879;
    let _e64: Motor = other_879;
    let _e67: Motor = other_879;
    let _e70: Motor = other_879;
    let _e82: Point = self_991;
    let _e86: Motor = other_879;
    let _e89: Motor = other_879;
    let _e92: Motor = other_879;
    let _e95: Motor = other_879;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_motor_join(self_992: Point, other_880: Motor) -> Plane {
    var self_993: Point;
    var other_881: Motor;

    self_993 = self_992;
    other_881 = other_880;
    let _e4: Point = self_993;
    let _e8: Motor = other_881;
    let _e11: Motor = other_881;
    let _e14: Motor = other_881;
    let _e17: Motor = other_881;
    let _e30: Point = self_993;
    let _e34: Motor = other_881;
    let _e37: Motor = other_881;
    let _e40: Motor = other_881;
    let _e43: Motor = other_881;
    let _e57: Point = self_993;
    let _e61: Motor = other_881;
    let _e64: Motor = other_881;
    let _e67: Motor = other_881;
    let _e70: Motor = other_881;
    let _e82: Point = self_993;
    let _e86: Motor = other_881;
    let _e89: Motor = other_881;
    let _e92: Motor = other_881;
    let _e95: Motor = other_881;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn point_motor_inner_anti_product(self_994: Point, other_882: Motor) -> Flector {
    var self_995: Point;
    var other_883: Motor;

    self_995 = self_994;
    other_883 = other_882;
    let _e4: Point = self_995;
    let _e6: Motor = other_883;
    let _e11: Point = self_995;
    let _e15: Motor = other_883;
    let _e27: Point = self_995;
    let _e31: Motor = other_883;
    let _e44: Point = self_995;
    let _e47: Motor = other_883;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_motor_right_anti_contraction(self_996: Point, other_884: Motor) -> Flector {
    var self_997: Point;
    var other_885: Motor;

    self_997 = self_996;
    other_885 = other_884;
    let _e4: Point = self_997;
    let _e6: Motor = other_885;
    let _e11: Point = self_997;
    let _e15: Motor = other_885;
    let _e27: Point = self_997;
    let _e31: Motor = other_885;
    let _e44: Point = self_997;
    let _e47: Motor = other_885;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_rotor_geometric_anti_product(self_998: Point, other_886: Rotor) -> Flector {
    var self_999: Point;
    var other_887: Rotor;

    self_999 = self_998;
    other_887 = other_886;
    let _e4: Point = self_999;
    let _e8: Rotor = other_887;
    let _e19: Point = self_999;
    let _e23: Rotor = other_887;
    let _e35: Point = self_999;
    let _e38: Rotor = other_887;
    let _e50: Point = self_999;
    let _e54: Rotor = other_887;
    let _e66: Point = self_999;
    let _e70: Rotor = other_887;
    let _e83: Point = self_999;
    let _e86: Rotor = other_887;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e35.g0_.xxxw * _e38.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec4<f32>(_e50.g0_.y) * vec4<f32>(_e54.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e66.g0_.z) * vec4<f32>(_e70.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e83.g0_.wwwx * _e86.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_rotor_regressive_product(self_1000: Point, other_888: Rotor) -> Point {
    var self_1001: Point;
    var other_889: Rotor;

    self_1001 = self_1000;
    other_889 = other_888;
    let _e4: Point = self_1001;
    let _e6: Rotor = other_889;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_rotor_anti_wedge(self_1002: Point, other_890: Rotor) -> Point {
    var self_1003: Point;
    var other_891: Rotor;

    self_1003 = self_1002;
    other_891 = other_890;
    let _e4: Point = self_1003;
    let _e6: Rotor = other_891;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_rotor_meet(self_1004: Point, other_892: Rotor) -> Point {
    var self_1005: Point;
    var other_893: Rotor;

    self_1005 = self_1004;
    other_893 = other_892;
    let _e4: Point = self_1005;
    let _e6: Rotor = other_893;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_rotor_inner_anti_product(self_1006: Point, other_894: Rotor) -> Flector {
    var self_1007: Point;
    var other_895: Rotor;

    self_1007 = self_1006;
    other_895 = other_894;
    let _e4: Point = self_1007;
    let _e6: Rotor = other_895;
    let _e11: Point = self_1007;
    let _e15: Rotor = other_895;
    let _e27: Point = self_1007;
    let _e31: Rotor = other_895;
    let _e44: Point = self_1007;
    let _e47: Rotor = other_895;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_rotor_right_anti_contraction(self_1008: Point, other_896: Rotor) -> Flector {
    var self_1009: Point;
    var other_897: Rotor;

    self_1009 = self_1008;
    other_897 = other_896;
    let _e4: Point = self_1009;
    let _e6: Rotor = other_897;
    let _e11: Point = self_1009;
    let _e15: Rotor = other_897;
    let _e27: Point = self_1009;
    let _e31: Rotor = other_897;
    let _e44: Point = self_1009;
    let _e47: Rotor = other_897;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e44.g0_.wwwx * _e47.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_translator_geometric_anti_product(self_1010: Point, other_898: Translator) -> Point {
    var self_1011: Point;
    var other_899: Translator;

    self_1011 = self_1010;
    other_899 = other_898;
    let _e4: Point = self_1011;
    let _e8: Translator = other_899;
    let _e20: Point = self_1011;
    let _e23: Translator = other_899;
    return Point((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((_e20.g0_.xyzx * _e23.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_translator_regressive_product(self_1012: Point, other_900: Translator) -> Point {
    var self_1013: Point;
    var other_901: Translator;

    self_1013 = self_1012;
    other_901 = other_900;
    let _e4: Point = self_1013;
    let _e6: Translator = other_901;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_translator_anti_wedge(self_1014: Point, other_902: Translator) -> Point {
    var self_1015: Point;
    var other_903: Translator;

    self_1015 = self_1014;
    other_903 = other_902;
    let _e4: Point = self_1015;
    let _e6: Translator = other_903;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_translator_meet(self_1016: Point, other_904: Translator) -> Point {
    var self_1017: Point;
    var other_905: Translator;

    self_1017 = self_1016;
    other_905 = other_904;
    let _e4: Point = self_1017;
    let _e6: Translator = other_905;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_translator_outer_product(self_1018: Point, other_906: Translator) -> Plane {
    var self_1019: Point;
    var other_907: Translator;

    self_1019 = self_1018;
    other_907 = other_906;
    let _e4: Point = self_1019;
    let _e8: Translator = other_907;
    let _e20: Point = self_1019;
    let _e24: Translator = other_907;
    let _e37: Point = self_1019;
    let _e40: Translator = other_907;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_translator_wedge(self_1020: Point, other_908: Translator) -> Plane {
    var self_1021: Point;
    var other_909: Translator;

    self_1021 = self_1020;
    other_909 = other_908;
    let _e4: Point = self_1021;
    let _e8: Translator = other_909;
    let _e20: Point = self_1021;
    let _e24: Translator = other_909;
    let _e37: Point = self_1021;
    let _e40: Translator = other_909;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_translator_join(self_1022: Point, other_910: Translator) -> Plane {
    var self_1023: Point;
    var other_911: Translator;

    self_1023 = self_1022;
    other_911 = other_910;
    let _e4: Point = self_1023;
    let _e8: Translator = other_911;
    let _e20: Point = self_1023;
    let _e24: Translator = other_911;
    let _e37: Point = self_1023;
    let _e40: Translator = other_911;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn point_translator_inner_anti_product(self_1024: Point, other_912: Translator) -> Point {
    var self_1025: Point;
    var other_913: Translator;

    self_1025 = self_1024;
    other_913 = other_912;
    let _e4: Point = self_1025;
    let _e6: Translator = other_913;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_translator_right_anti_contraction(self_1026: Point, other_914: Translator) -> Point {
    var self_1027: Point;
    var other_915: Translator;

    self_1027 = self_1026;
    other_915 = other_914;
    let _e4: Point = self_1027;
    let _e6: Translator = other_915;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn point_flector_add(self_1028: Point, other_916: Flector) -> Flector {
    var self_1029: Point;
    var other_917: Flector;

    self_1029 = self_1028;
    other_917 = other_916;
    let _e4: Point = self_1029;
    let _e6: Flector = other_917;
    let _e9: Flector = other_917;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn point_flector_sub(self_1030: Point, other_918: Flector) -> Flector {
    var self_1031: Point;
    var other_919: Flector;

    self_1031 = self_1030;
    other_919 = other_918;
    let _e4: Point = self_1031;
    let _e6: Flector = other_919;
    let _e11: Flector = other_919;
    return Flector((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_));
}

fn point_flector_regressive_product(self_1032: Point, other_920: Flector) -> Scalar {
    var self_1033: Point;
    var other_921: Flector;

    self_1033 = self_1032;
    other_921 = other_920;
    let _e4: Point = self_1033;
    let _e7: Flector = other_921;
    let _e11: Point = self_1033;
    let _e14: Flector = other_921;
    let _e19: Point = self_1033;
    let _e22: Flector = other_921;
    let _e27: Point = self_1033;
    let _e30: Flector = other_921;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_anti_wedge(self_1034: Point, other_922: Flector) -> Scalar {
    var self_1035: Point;
    var other_923: Flector;

    self_1035 = self_1034;
    other_923 = other_922;
    let _e4: Point = self_1035;
    let _e7: Flector = other_923;
    let _e11: Point = self_1035;
    let _e14: Flector = other_923;
    let _e19: Point = self_1035;
    let _e22: Flector = other_923;
    let _e27: Point = self_1035;
    let _e30: Flector = other_923;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_meet(self_1036: Point, other_924: Flector) -> Scalar {
    var self_1037: Point;
    var other_925: Flector;

    self_1037 = self_1036;
    other_925 = other_924;
    let _e4: Point = self_1037;
    let _e7: Flector = other_925;
    let _e11: Point = self_1037;
    let _e14: Flector = other_925;
    let _e19: Point = self_1037;
    let _e22: Flector = other_925;
    let _e27: Point = self_1037;
    let _e30: Flector = other_925;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_flector_outer_product(self_1038: Point, other_926: Flector) -> Motor {
    var self_1039: Point;
    var other_927: Flector;

    self_1039 = self_1038;
    other_927 = other_926;
    let _e4: Point = self_1039;
    let _e8: Flector = other_927;
    let _e11: Flector = other_927;
    let _e14: Flector = other_927;
    let _e17: Flector = other_927;
    let _e29: Point = self_1039;
    let _e33: Flector = other_927;
    let _e36: Flector = other_927;
    let _e39: Flector = other_927;
    let _e42: Flector = other_927;
    let _e55: Point = self_1039;
    let _e59: Flector = other_927;
    let _e62: Flector = other_927;
    let _e65: Flector = other_927;
    let _e68: Flector = other_927;
    let _e74: Point = self_1039;
    let _e78: Flector = other_927;
    let _e81: Flector = other_927;
    let _e84: Flector = other_927;
    let _e87: Flector = other_927;
    let _e100: Point = self_1039;
    let _e104: Flector = other_927;
    let _e107: Flector = other_927;
    let _e110: Flector = other_927;
    let _e121: Point = self_1039;
    let _e125: Flector = other_927;
    let _e128: Flector = other_927;
    let _e131: Flector = other_927;
    let _e143: Point = self_1039;
    let _e147: Flector = other_927;
    let _e150: Flector = other_927;
    let _e153: Flector = other_927;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g0_.x) * vec4<f32>(_e78.g0_.w, _e81.g0_.x, _e84.g0_.x, _e87.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e100.g0_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e121.g0_.z) * vec3<f32>(_e125.g0_.y, _e128.g0_.x, _e131.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e143.g0_.x) * vec3<f32>(_e147.g0_.x, _e150.g0_.z, _e153.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_flector_wedge(self_1040: Point, other_928: Flector) -> Motor {
    var self_1041: Point;
    var other_929: Flector;

    self_1041 = self_1040;
    other_929 = other_928;
    let _e4: Point = self_1041;
    let _e8: Flector = other_929;
    let _e11: Flector = other_929;
    let _e14: Flector = other_929;
    let _e17: Flector = other_929;
    let _e29: Point = self_1041;
    let _e33: Flector = other_929;
    let _e36: Flector = other_929;
    let _e39: Flector = other_929;
    let _e42: Flector = other_929;
    let _e55: Point = self_1041;
    let _e59: Flector = other_929;
    let _e62: Flector = other_929;
    let _e65: Flector = other_929;
    let _e68: Flector = other_929;
    let _e74: Point = self_1041;
    let _e78: Flector = other_929;
    let _e81: Flector = other_929;
    let _e84: Flector = other_929;
    let _e87: Flector = other_929;
    let _e100: Point = self_1041;
    let _e104: Flector = other_929;
    let _e107: Flector = other_929;
    let _e110: Flector = other_929;
    let _e121: Point = self_1041;
    let _e125: Flector = other_929;
    let _e128: Flector = other_929;
    let _e131: Flector = other_929;
    let _e143: Point = self_1041;
    let _e147: Flector = other_929;
    let _e150: Flector = other_929;
    let _e153: Flector = other_929;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g0_.x) * vec4<f32>(_e78.g0_.w, _e81.g0_.x, _e84.g0_.x, _e87.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e100.g0_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e121.g0_.z) * vec3<f32>(_e125.g0_.y, _e128.g0_.x, _e131.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e143.g0_.x) * vec3<f32>(_e147.g0_.x, _e150.g0_.z, _e153.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_flector_join(self_1042: Point, other_930: Flector) -> Motor {
    var self_1043: Point;
    var other_931: Flector;

    self_1043 = self_1042;
    other_931 = other_930;
    let _e4: Point = self_1043;
    let _e8: Flector = other_931;
    let _e11: Flector = other_931;
    let _e14: Flector = other_931;
    let _e17: Flector = other_931;
    let _e29: Point = self_1043;
    let _e33: Flector = other_931;
    let _e36: Flector = other_931;
    let _e39: Flector = other_931;
    let _e42: Flector = other_931;
    let _e55: Point = self_1043;
    let _e59: Flector = other_931;
    let _e62: Flector = other_931;
    let _e65: Flector = other_931;
    let _e68: Flector = other_931;
    let _e74: Point = self_1043;
    let _e78: Flector = other_931;
    let _e81: Flector = other_931;
    let _e84: Flector = other_931;
    let _e87: Flector = other_931;
    let _e100: Point = self_1043;
    let _e104: Flector = other_931;
    let _e107: Flector = other_931;
    let _e110: Flector = other_931;
    let _e121: Point = self_1043;
    let _e125: Flector = other_931;
    let _e128: Flector = other_931;
    let _e131: Flector = other_931;
    let _e143: Point = self_1043;
    let _e147: Flector = other_931;
    let _e150: Flector = other_931;
    let _e153: Flector = other_931;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g0_.x) * vec4<f32>(_e78.g0_.w, _e81.g0_.x, _e84.g0_.x, _e87.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e100.g0_.y) * vec3<f32>(_e104.g0_.z, _e107.g0_.z, _e110.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e121.g0_.z) * vec3<f32>(_e125.g0_.y, _e128.g0_.x, _e131.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e143.g0_.x) * vec3<f32>(_e147.g0_.x, _e150.g0_.z, _e153.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_flector_inner_anti_product(self_1044: Point, other_932: Flector) -> Motor {
    var self_1045: Point;
    var other_933: Flector;

    self_1045 = self_1044;
    other_933 = other_932;
    let _e6: Point = self_1045;
    let _e10: Flector = other_933;
    let _e13: Flector = other_933;
    let _e16: Flector = other_933;
    let _e19: Flector = other_933;
    let _e25: Point = self_1045;
    let _e29: Flector = other_933;
    let _e32: Flector = other_933;
    let _e35: Flector = other_933;
    let _e46: Point = self_1045;
    let _e50: Flector = other_933;
    let _e53: Flector = other_933;
    let _e56: Flector = other_933;
    let _e68: Point = self_1045;
    let _e72: Flector = other_933;
    let _e75: Flector = other_933;
    let _e78: Flector = other_933;
    return Motor((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))), ((((vec3<f32>(_e25.g0_.y) * vec3<f32>(_e29.g1_.z, _e32.g1_.z, _e35.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e46.g0_.z) * vec3<f32>(_e50.g1_.y, _e53.g1_.x, _e56.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e68.g0_.x) * vec3<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn point_flector_right_contraction(self_1046: Point, other_934: Flector) -> Scalar {
    var self_1047: Point;
    var other_935: Flector;

    self_1047 = self_1046;
    other_935 = other_934;
    let _e4: Point = self_1047;
    let _e7: Flector = other_935;
    let _e11: Point = self_1047;
    let _e14: Flector = other_935;
    let _e19: Point = self_1047;
    let _e22: Flector = other_935;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_left_anti_contraction(self_1048: Point, other_936: Flector) -> AntiScalar {
    var self_1049: Point;
    var other_937: Flector;

    self_1049 = self_1048;
    other_937 = other_936;
    let _e5: Point = self_1049;
    let _e8: Flector = other_937;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_flector_right_anti_contraction(self_1050: Point, other_938: Flector) -> Motor {
    var self_1051: Point;
    var other_939: Flector;

    self_1051 = self_1050;
    other_939 = other_938;
    let _e6: Point = self_1051;
    let _e10: Flector = other_939;
    let _e13: Flector = other_939;
    let _e16: Flector = other_939;
    let _e19: Flector = other_939;
    let _e25: Point = self_1051;
    let _e29: Flector = other_939;
    let _e32: Flector = other_939;
    let _e35: Flector = other_939;
    let _e46: Point = self_1051;
    let _e50: Flector = other_939;
    let _e53: Flector = other_939;
    let _e56: Flector = other_939;
    let _e68: Point = self_1051;
    let _e72: Flector = other_939;
    let _e75: Flector = other_939;
    let _e78: Flector = other_939;
    return Motor((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))), ((((vec3<f32>(_e25.g0_.y) * vec3<f32>(_e29.g1_.z, _e32.g1_.z, _e35.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e46.g0_.z) * vec3<f32>(_e50.g1_.y, _e53.g1_.x, _e56.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e68.g0_.x) * vec3<f32>(_e72.g1_.x, _e75.g1_.z, _e78.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn point_flector_scalar_product(self_1052: Point, other_940: Flector) -> Scalar {
    var self_1053: Point;
    var other_941: Flector;

    self_1053 = self_1052;
    other_941 = other_940;
    let _e4: Point = self_1053;
    let _e7: Flector = other_941;
    let _e11: Point = self_1053;
    let _e14: Flector = other_941;
    let _e19: Point = self_1053;
    let _e22: Flector = other_941;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_dot(self_1054: Point, other_942: Flector) -> Scalar {
    var self_1055: Point;
    var other_943: Flector;

    self_1055 = self_1054;
    other_943 = other_942;
    let _e4: Point = self_1055;
    let _e7: Flector = other_943;
    let _e11: Point = self_1055;
    let _e14: Flector = other_943;
    let _e19: Point = self_1055;
    let _e22: Flector = other_943;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn point_flector_anti_scalar_product(self_1056: Point, other_944: Flector) -> AntiScalar {
    var self_1057: Point;
    var other_945: Flector;

    self_1057 = self_1056;
    other_945 = other_944;
    let _e5: Point = self_1057;
    let _e8: Flector = other_945;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_flector_anti_dot(self_1058: Point, other_946: Flector) -> AntiScalar {
    var self_1059: Point;
    var other_947: Flector;

    self_1059 = self_1058;
    other_947 = other_946;
    let _e5: Point = self_1059;
    let _e8: Flector = other_947;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn point_multi_vector_add(self_1060: Point, other_948: MultiVector) -> MultiVector {
    var self_1061: Point;
    var other_949: MultiVector;

    self_1061 = self_1060;
    other_949 = other_948;
    let _e4: MultiVector = other_949;
    let _e6: Point = self_1061;
    let _e8: MultiVector = other_949;
    let _e11: MultiVector = other_949;
    let _e13: MultiVector = other_949;
    let _e15: MultiVector = other_949;
    return MultiVector(_e4.g0_, (_e6.g0_ + _e8.g1_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn point_multi_vector_sub(self_1062: Point, other_950: MultiVector) -> MultiVector {
    var self_1063: Point;
    var other_951: MultiVector;

    self_1063 = self_1062;
    other_951 = other_950;
    let _e6: MultiVector = other_951;
    let _e9: Point = self_1063;
    let _e11: MultiVector = other_951;
    let _e16: MultiVector = other_951;
    let _e21: MultiVector = other_951;
    let _e26: MultiVector = other_951;
    return MultiVector((vec2<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (vec3<f32>(0.0) - _e16.g2_), (vec3<f32>(0.0) - _e21.g3_), (vec4<f32>(0.0) - _e26.g4_));
}

fn point_multi_vector_geometric_product(self_1064: Point, other_952: MultiVector) -> MultiVector {
    var self_1065: Point;
    var other_953: MultiVector;

    self_1065 = self_1064;
    other_953 = other_952;
    let _e4: Point = self_1065;
    let _e8: MultiVector = other_953;
    let _e11: MultiVector = other_953;
    let _e16: Point = self_1065;
    let _e20: MultiVector = other_953;
    let _e23: MultiVector = other_953;
    let _e29: Point = self_1065;
    let _e33: MultiVector = other_953;
    let _e36: MultiVector = other_953;
    let _e42: Point = self_1065;
    let _e45: Point = self_1065;
    let _e49: MultiVector = other_953;
    let _e52: MultiVector = other_953;
    let _e62: Point = self_1065;
    let _e66: MultiVector = other_953;
    let _e69: MultiVector = other_953;
    let _e72: MultiVector = other_953;
    let _e75: MultiVector = other_953;
    let _e88: Point = self_1065;
    let _e92: MultiVector = other_953;
    let _e95: MultiVector = other_953;
    let _e98: MultiVector = other_953;
    let _e101: MultiVector = other_953;
    let _e115: Point = self_1065;
    let _e119: MultiVector = other_953;
    let _e122: MultiVector = other_953;
    let _e125: MultiVector = other_953;
    let _e128: MultiVector = other_953;
    let _e142: Point = self_1065;
    let _e145: MultiVector = other_953;
    let _e157: Point = self_1065;
    let _e161: MultiVector = other_953;
    let _e164: MultiVector = other_953;
    let _e167: MultiVector = other_953;
    let _e179: Point = self_1065;
    let _e183: MultiVector = other_953;
    let _e186: MultiVector = other_953;
    let _e189: MultiVector = other_953;
    let _e202: Point = self_1065;
    let _e206: MultiVector = other_953;
    let _e209: MultiVector = other_953;
    let _e212: MultiVector = other_953;
    let _e225: Point = self_1065;
    let _e229: MultiVector = other_953;
    let _e232: MultiVector = other_953;
    let _e235: MultiVector = other_953;
    let _e241: Point = self_1065;
    let _e245: MultiVector = other_953;
    let _e248: MultiVector = other_953;
    let _e251: MultiVector = other_953;
    let _e263: Point = self_1065;
    let _e267: MultiVector = other_953;
    let _e270: MultiVector = other_953;
    let _e273: MultiVector = other_953;
    let _e286: Point = self_1065;
    let _e290: MultiVector = other_953;
    let _e293: MultiVector = other_953;
    let _e296: MultiVector = other_953;
    let _e309: Point = self_1065;
    let _e313: MultiVector = other_953;
    let _e316: MultiVector = other_953;
    let _e319: MultiVector = other_953;
    let _e322: MultiVector = other_953;
    let _e335: Point = self_1065;
    let _e339: MultiVector = other_953;
    let _e342: MultiVector = other_953;
    let _e345: MultiVector = other_953;
    let _e348: MultiVector = other_953;
    let _e362: Point = self_1065;
    let _e366: MultiVector = other_953;
    let _e369: MultiVector = other_953;
    let _e372: MultiVector = other_953;
    let _e375: MultiVector = other_953;
    let _e389: Point = self_1065;
    let _e392: MultiVector = other_953;
    let _e395: MultiVector = other_953;
    let _e398: MultiVector = other_953;
    let _e401: MultiVector = other_953;
    return MultiVector(((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) + (vec2<f32>(_e16.g0_.y) * vec2<f32>(_e20.g1_.y, _e23.g4_.y))) + (vec2<f32>(_e29.g0_.z) * vec2<f32>(_e33.g1_.z, _e36.g4_.z))) + ((vec2<f32>(_e42.g0_.x, _e45.g0_.w) * vec2<f32>(_e49.g4_.x, _e52.g4_.w)) * vec2<f32>(0.0, 1.0))), (((((vec4<f32>(_e62.g0_.x) * vec4<f32>(_e66.g0_.x, _e69.g3_.z, _e72.g3_.y, _e75.g2_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e88.g0_.y) * vec4<f32>(_e92.g3_.z, _e95.g0_.x, _e98.g3_.x, _e101.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e115.g0_.z) * vec4<f32>(_e119.g3_.y, _e122.g3_.x, _e125.g0_.x, _e128.g2_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e142.g0_.xxxw * vec4<f32>(_e145.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((vec3<f32>(_e157.g0_.x) * vec3<f32>(_e161.g1_.w, _e164.g4_.z, _e167.g4_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e179.g0_.y) * vec3<f32>(_e183.g4_.z, _e186.g1_.w, _e189.g4_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e202.g0_.z) * vec3<f32>(_e206.g4_.y, _e209.g4_.x, _e212.g1_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e225.g0_.w) * vec3<f32>(_e229.g1_.x, _e232.g1_.y, _e235.g1_.z))), ((((vec3<f32>(_e241.g0_.x) * vec3<f32>(_e245.g4_.w, _e248.g1_.z, _e251.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e263.g0_.y) * vec3<f32>(_e267.g1_.z, _e270.g4_.w, _e273.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e286.g0_.z) * vec3<f32>(_e290.g1_.y, _e293.g1_.x, _e296.g4_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e309.g0_.x) * vec4<f32>(_e313.g0_.y, _e316.g2_.z, _e319.g2_.y, _e322.g3_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e335.g0_.y) * vec4<f32>(_e339.g2_.z, _e342.g0_.y, _e345.g2_.x, _e348.g3_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e362.g0_.z) * vec4<f32>(_e366.g2_.y, _e369.g2_.x, _e372.g0_.y, _e375.g3_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e389.g0_.wwwx * vec4<f32>(_e392.g3_.x, _e395.g3_.y, _e398.g3_.z, _e401.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn point_multi_vector_geometric_anti_product(self_1066: Point, other_954: MultiVector) -> MultiVector {
    var self_1067: Point;
    var other_955: MultiVector;

    self_1067 = self_1066;
    other_955 = other_954;
    let _e4: Point = self_1067;
    let _e8: MultiVector = other_955;
    let _e17: Point = self_1067;
    let _e21: MultiVector = other_955;
    let _e31: Point = self_1067;
    let _e35: MultiVector = other_955;
    let _e38: MultiVector = other_955;
    let _e49: Point = self_1067;
    let _e53: MultiVector = other_955;
    let _e63: Point = self_1067;
    let _e67: MultiVector = other_955;
    let _e70: MultiVector = other_955;
    let _e73: MultiVector = other_955;
    let _e76: MultiVector = other_955;
    let _e88: Point = self_1067;
    let _e92: MultiVector = other_955;
    let _e95: MultiVector = other_955;
    let _e98: MultiVector = other_955;
    let _e101: MultiVector = other_955;
    let _e114: Point = self_1067;
    let _e118: MultiVector = other_955;
    let _e121: MultiVector = other_955;
    let _e124: MultiVector = other_955;
    let _e127: MultiVector = other_955;
    let _e142: Point = self_1067;
    let _e146: MultiVector = other_955;
    let _e149: MultiVector = other_955;
    let _e152: MultiVector = other_955;
    let _e155: MultiVector = other_955;
    let _e170: Point = self_1067;
    let _e174: MultiVector = other_955;
    let _e177: MultiVector = other_955;
    let _e180: MultiVector = other_955;
    let _e186: Point = self_1067;
    let _e190: MultiVector = other_955;
    let _e193: MultiVector = other_955;
    let _e196: MultiVector = other_955;
    let _e208: Point = self_1067;
    let _e212: MultiVector = other_955;
    let _e215: MultiVector = other_955;
    let _e218: MultiVector = other_955;
    let _e231: Point = self_1067;
    let _e235: MultiVector = other_955;
    let _e238: MultiVector = other_955;
    let _e241: MultiVector = other_955;
    let _e254: Point = self_1067;
    let _e258: MultiVector = other_955;
    let _e261: MultiVector = other_955;
    let _e264: MultiVector = other_955;
    let _e270: Point = self_1067;
    let _e274: MultiVector = other_955;
    let _e286: Point = self_1067;
    let _e290: MultiVector = other_955;
    let _e303: Point = self_1067;
    let _e307: MultiVector = other_955;
    let _e310: MultiVector = other_955;
    let _e313: MultiVector = other_955;
    let _e316: MultiVector = other_955;
    let _e329: Point = self_1067;
    let _e333: MultiVector = other_955;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g0_.w) * vec2<f32>(_e35.g4_.w, _e38.g1_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e49.g0_.x) * vec2<f32>(_e53.g4_.x)) * vec2<f32>(1.0, 0.0))), (((((vec4<f32>(_e63.g0_.y) * vec4<f32>(_e67.g2_.z, _e70.g0_.y, _e73.g2_.x, _e76.g2_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e88.g0_.z) * vec4<f32>(_e92.g2_.y, _e95.g2_.x, _e98.g0_.y, _e101.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e114.g0_.w) * vec4<f32>(_e118.g3_.x, _e121.g3_.y, _e124.g3_.z, _e127.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e142.g0_.x) * vec4<f32>(_e146.g0_.y, _e149.g2_.z, _e152.g2_.y, _e155.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (vec3<f32>(0.0) - (vec3<f32>(_e170.g0_.w) * vec3<f32>(_e174.g4_.x, _e177.g4_.y, _e180.g4_.z))), (((((vec3<f32>(_e186.g0_.x) * vec3<f32>(_e190.g1_.w, _e193.g4_.z, _e196.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e208.g0_.y) * vec3<f32>(_e212.g4_.z, _e215.g1_.w, _e218.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e231.g0_.z) * vec3<f32>(_e235.g4_.y, _e238.g4_.x, _e241.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e254.g0_.w) * vec3<f32>(_e258.g1_.x, _e261.g1_.y, _e264.g1_.z))), (((((vec4<f32>(_e270.g0_.y) * vec4<f32>(_e274.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e286.g0_.z) * vec4<f32>(_e290.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e303.g0_.w) * vec4<f32>(_e307.g2_.x, _e310.g2_.y, _e313.g2_.z, _e316.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e329.g0_.x) * vec4<f32>(_e333.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn point_multi_vector_scalar_product(self_1068: Point, other_956: MultiVector) -> Scalar {
    var self_1069: Point;
    var other_957: MultiVector;

    self_1069 = self_1068;
    other_957 = other_956;
    let _e4: Point = self_1069;
    let _e7: MultiVector = other_957;
    let _e11: Point = self_1069;
    let _e14: MultiVector = other_957;
    let _e19: Point = self_1069;
    let _e22: MultiVector = other_957;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn point_multi_vector_dot(self_1070: Point, other_958: MultiVector) -> Scalar {
    var self_1071: Point;
    var other_959: MultiVector;

    self_1071 = self_1070;
    other_959 = other_958;
    let _e4: Point = self_1071;
    let _e7: MultiVector = other_959;
    let _e11: Point = self_1071;
    let _e14: MultiVector = other_959;
    let _e19: Point = self_1071;
    let _e22: MultiVector = other_959;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn point_multi_vector_anti_scalar_product(self_1072: Point, other_960: MultiVector) -> AntiScalar {
    var self_1073: Point;
    var other_961: MultiVector;

    self_1073 = self_1072;
    other_961 = other_960;
    let _e5: Point = self_1073;
    let _e8: MultiVector = other_961;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn point_multi_vector_anti_dot(self_1074: Point, other_962: MultiVector) -> AntiScalar {
    var self_1075: Point;
    var other_963: MultiVector;

    self_1075 = self_1074;
    other_963 = other_962;
    let _e5: Point = self_1075;
    let _e8: MultiVector = other_963;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn point_squared_magnitude(self_1076: Point) -> Scalar {
    var self_1077: Point;

    self_1077 = self_1076;
    let _e2: Point = self_1077;
    let _e3: Point = self_1077;
    let _e4: Point = point_reversal(_e3);
    let _e5: Scalar = point_point_scalar_product(_e2, _e4);
    return _e5;
}

fn point_magnitude(self_1078: Point) -> Scalar {
    var self_1079: Point;

    self_1079 = self_1078;
    let _e2: Point = self_1079;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_bulk_norm(self_1080: Point) -> Scalar {
    var self_1081: Point;

    self_1081 = self_1080;
    let _e2: Point = self_1081;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_squared_anti_magnitude(self_1082: Point) -> AntiScalar {
    var self_1083: Point;

    self_1083 = self_1082;
    let _e2: Point = self_1083;
    let _e3: Point = self_1083;
    let _e4: Point = point_anti_reversal(_e3);
    let _e5: AntiScalar = point_point_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn point_weight_norm(self_1084: Point) -> AntiScalar {
    var self_1085: Point;

    self_1085 = self_1084;
    let _e2: Point = self_1085;
    let _e3: AntiScalar = point_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn point_geometric_norm(self_1086: Point) -> HomogeneousMagnitude {
    var self_1087: Point;

    self_1087 = self_1086;
    let _e2: Point = self_1087;
    let _e3: Scalar = point_bulk_norm(_e2);
    let _e4: Point = self_1087;
    let _e5: AntiScalar = point_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn point_scale(self_1088: Point, other_964: f32) -> Point {
    var self_1089: Point;
    var other_965: f32;

    self_1089 = self_1088;
    other_965 = other_964;
    let _e4: Point = self_1089;
    let _e5: f32 = other_965;
    let _e7: Point = point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn point_signum(self_1090: Point) -> Point {
    var self_1091: Point;

    self_1091 = self_1090;
    let _e2: Point = self_1091;
    let _e3: Point = self_1091;
    let _e4: Scalar = point_magnitude(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_inverse(self_1092: Point) -> Point {
    var self_1093: Point;

    self_1093 = self_1092;
    let _e2: Point = self_1093;
    let _e3: Point = point_reversal(_e2);
    let _e4: Point = self_1093;
    let _e5: Scalar = point_squared_magnitude(_e4);
    let _e10: Point = point_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn point_unitize(self_1094: Point) -> Point {
    var self_1095: Point;

    self_1095 = self_1094;
    let _e2: Point = self_1095;
    let _e3: Point = self_1095;
    let _e4: AntiScalar = point_weight_norm(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_attitude(self_1096: Point) -> Scalar {
    var self_1097: Point;

    self_1097 = self_1096;
    let _e2: Point = self_1097;
    let _e9: Scalar = point_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn line_zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_grade(self_1098: Line) -> i32 {
    return 2;
}

fn line_anti_grade(self_1099: Line) -> i32 {
    return 2;
}

fn line_neg(self_1100: Line) -> Line {
    var self_1101: Line;

    self_1101 = self_1100;
    let _e2: Line = self_1101;
    let _e8: Line = self_1101;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_automorphism(self_1102: Line) -> Line {
    var self_1103: Line;

    self_1103 = self_1102;
    let _e2: Line = self_1103;
    let _e4: Line = self_1103;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_reversal(self_1104: Line) -> Line {
    var self_1105: Line;

    self_1105 = self_1104;
    let _e2: Line = self_1105;
    let _e8: Line = self_1105;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_conjugation(self_1106: Line) -> Line {
    var self_1107: Line;

    self_1107 = self_1106;
    let _e2: Line = self_1107;
    let _e8: Line = self_1107;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_dual(self_1108: Line) -> Line {
    var self_1109: Line;

    self_1109 = self_1108;
    let _e2: Line = self_1109;
    let _e8: Line = self_1109;
    return Line((_e2.g1_ * vec3<f32>(-(1.0))), (_e8.g0_ * vec3<f32>(-(1.0))));
}

fn line_anti_reversal(self_1110: Line) -> Line {
    var self_1111: Line;

    self_1111 = self_1110;
    let _e2: Line = self_1111;
    let _e8: Line = self_1111;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_right_complement(self_1112: Line) -> Line {
    var self_1113: Line;

    self_1113 = self_1112;
    let _e2: Line = self_1113;
    let _e8: Line = self_1113;
    return Line((_e2.g1_ * vec3<f32>(-(1.0))), (_e8.g0_ * vec3<f32>(-(1.0))));
}

fn line_left_complement(self_1114: Line) -> Line {
    var self_1115: Line;

    self_1115 = self_1114;
    let _e2: Line = self_1115;
    let _e8: Line = self_1115;
    return Line((_e2.g1_ * vec3<f32>(-(1.0))), (_e8.g0_ * vec3<f32>(-(1.0))));
}

fn line_double_complement(self_1116: Line) -> Line {
    var self_1117: Line;

    self_1117 = self_1116;
    let _e2: Line = self_1117;
    let _e4: Line = self_1117;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_scalar_geometric_product(self_1118: Line, other_966: Scalar) -> Line {
    var self_1119: Line;
    var other_967: Scalar;

    self_1119 = self_1118;
    other_967 = other_966;
    let _e4: Line = self_1119;
    let _e6: Scalar = other_967;
    let _e10: Line = self_1119;
    let _e12: Scalar = other_967;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_outer_product(self_1120: Line, other_968: Scalar) -> Line {
    var self_1121: Line;
    var other_969: Scalar;

    self_1121 = self_1120;
    other_969 = other_968;
    let _e4: Line = self_1121;
    let _e6: Scalar = other_969;
    let _e10: Line = self_1121;
    let _e12: Scalar = other_969;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_wedge(self_1122: Line, other_970: Scalar) -> Line {
    var self_1123: Line;
    var other_971: Scalar;

    self_1123 = self_1122;
    other_971 = other_970;
    let _e4: Line = self_1123;
    let _e6: Scalar = other_971;
    let _e10: Line = self_1123;
    let _e12: Scalar = other_971;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_join(self_1124: Line, other_972: Scalar) -> Line {
    var self_1125: Line;
    var other_973: Scalar;

    self_1125 = self_1124;
    other_973 = other_972;
    let _e4: Line = self_1125;
    let _e6: Scalar = other_973;
    let _e10: Line = self_1125;
    let _e12: Scalar = other_973;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_inner_product(self_1126: Line, other_974: Scalar) -> Line {
    var self_1127: Line;
    var other_975: Scalar;

    self_1127 = self_1126;
    other_975 = other_974;
    let _e4: Line = self_1127;
    let _e6: Scalar = other_975;
    let _e10: Line = self_1127;
    let _e12: Scalar = other_975;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_right_contraction(self_1128: Line, other_976: Scalar) -> Line {
    var self_1129: Line;
    var other_977: Scalar;

    self_1129 = self_1128;
    other_977 = other_976;
    let _e4: Line = self_1129;
    let _e6: Scalar = other_977;
    let _e10: Line = self_1129;
    let _e12: Scalar = other_977;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_add(self_1130: Line, other_978: AntiScalar) -> Motor {
    var self_1131: Line;
    var other_979: AntiScalar;

    self_1131 = self_1130;
    other_979 = other_978;
    let _e4: Line = self_1131;
    let _e7: Line = self_1131;
    let _e10: Line = self_1131;
    let _e13: Line = self_1131;
    let _e23: AntiScalar = other_979;
    let _e33: Line = self_1131;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + (vec4<f32>(_e23.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e33.g1_);
}

fn line_anti_scalar_sub(self_1132: Line, other_980: AntiScalar) -> Motor {
    var self_1133: Line;
    var other_981: AntiScalar;

    self_1133 = self_1132;
    other_981 = other_980;
    let _e4: Line = self_1133;
    let _e7: Line = self_1133;
    let _e10: Line = self_1133;
    let _e13: Line = self_1133;
    let _e23: AntiScalar = other_981;
    let _e33: Line = self_1133;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - (vec4<f32>(_e23.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e33.g1_);
}

fn line_anti_scalar_geometric_anti_product(self_1134: Line, other_982: AntiScalar) -> Line {
    var self_1135: Line;
    var other_983: AntiScalar;

    self_1135 = self_1134;
    other_983 = other_982;
    let _e4: Line = self_1135;
    let _e6: AntiScalar = other_983;
    let _e10: Line = self_1135;
    let _e12: AntiScalar = other_983;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_regressive_product(self_1136: Line, other_984: AntiScalar) -> Line {
    var self_1137: Line;
    var other_985: AntiScalar;

    self_1137 = self_1136;
    other_985 = other_984;
    let _e4: Line = self_1137;
    let _e6: AntiScalar = other_985;
    let _e10: Line = self_1137;
    let _e12: AntiScalar = other_985;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_anti_wedge(self_1138: Line, other_986: AntiScalar) -> Line {
    var self_1139: Line;
    var other_987: AntiScalar;

    self_1139 = self_1138;
    other_987 = other_986;
    let _e4: Line = self_1139;
    let _e6: AntiScalar = other_987;
    let _e10: Line = self_1139;
    let _e12: AntiScalar = other_987;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_meet(self_1140: Line, other_988: AntiScalar) -> Line {
    var self_1141: Line;
    var other_989: AntiScalar;

    self_1141 = self_1140;
    other_989 = other_988;
    let _e4: Line = self_1141;
    let _e6: AntiScalar = other_989;
    let _e10: Line = self_1141;
    let _e12: AntiScalar = other_989;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_inner_anti_product(self_1142: Line, other_990: AntiScalar) -> Line {
    var self_1143: Line;
    var other_991: AntiScalar;

    self_1143 = self_1142;
    other_991 = other_990;
    let _e4: Line = self_1143;
    let _e6: AntiScalar = other_991;
    let _e10: Line = self_1143;
    let _e12: AntiScalar = other_991;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_right_anti_contraction(self_1144: Line, other_992: AntiScalar) -> Line {
    var self_1145: Line;
    var other_993: AntiScalar;

    self_1145 = self_1144;
    other_993 = other_992;
    let _e4: Line = self_1145;
    let _e6: AntiScalar = other_993;
    let _e10: Line = self_1145;
    let _e12: AntiScalar = other_993;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_homogeneous_magnitude_geometric_product(self_1146: Line, other_994: HomogeneousMagnitude) -> Line {
    var self_1147: Line;
    var other_995: HomogeneousMagnitude;

    self_1147 = self_1146;
    other_995 = other_994;
    let _e4: Line = self_1147;
    let _e8: HomogeneousMagnitude = other_995;
    let _e18: Line = self_1147;
    let _e22: HomogeneousMagnitude = other_995;
    let _e33: Line = self_1147;
    let _e37: HomogeneousMagnitude = other_995;
    let _e48: Line = self_1147;
    let _e50: HomogeneousMagnitude = other_995;
    let _e56: Line = self_1147;
    let _e58: HomogeneousMagnitude = other_995;
    return Line((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.y) * vec3<f32>(_e22.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e48.g0_ * vec3<f32>(_e50.g0_.x))), (_e56.g1_ * vec3<f32>(_e58.g0_.x)));
}

fn line_homogeneous_magnitude_geometric_anti_product(self_1148: Line, other_996: HomogeneousMagnitude) -> Line {
    var self_1149: Line;
    var other_997: HomogeneousMagnitude;

    self_1149 = self_1148;
    other_997 = other_996;
    let _e4: Line = self_1149;
    let _e6: HomogeneousMagnitude = other_997;
    let _e11: Line = self_1149;
    let _e15: HomogeneousMagnitude = other_997;
    let _e25: Line = self_1149;
    let _e29: HomogeneousMagnitude = other_997;
    let _e40: Line = self_1149;
    let _e44: HomogeneousMagnitude = other_997;
    let _e55: Line = self_1149;
    let _e57: HomogeneousMagnitude = other_997;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (((((vec3<f32>(_e11.g1_.x) * vec3<f32>(_e15.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e25.g1_.y) * vec3<f32>(_e29.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e40.g1_.z) * vec3<f32>(_e44.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e55.g0_ * vec3<f32>(_e57.g0_.x))));
}

fn line_homogeneous_magnitude_regressive_product(self_1150: Line, other_998: HomogeneousMagnitude) -> Line {
    var self_1151: Line;
    var other_999: HomogeneousMagnitude;

    self_1151 = self_1150;
    other_999 = other_998;
    let _e4: Line = self_1151;
    let _e6: HomogeneousMagnitude = other_999;
    let _e11: Line = self_1151;
    let _e13: HomogeneousMagnitude = other_999;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (_e11.g1_ * vec3<f32>(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_anti_wedge(self_1152: Line, other_1000: HomogeneousMagnitude) -> Line {
    var self_1153: Line;
    var other_1001: HomogeneousMagnitude;

    self_1153 = self_1152;
    other_1001 = other_1000;
    let _e4: Line = self_1153;
    let _e6: HomogeneousMagnitude = other_1001;
    let _e11: Line = self_1153;
    let _e13: HomogeneousMagnitude = other_1001;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (_e11.g1_ * vec3<f32>(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_meet(self_1154: Line, other_1002: HomogeneousMagnitude) -> Line {
    var self_1155: Line;
    var other_1003: HomogeneousMagnitude;

    self_1155 = self_1154;
    other_1003 = other_1002;
    let _e4: Line = self_1155;
    let _e6: HomogeneousMagnitude = other_1003;
    let _e11: Line = self_1155;
    let _e13: HomogeneousMagnitude = other_1003;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (_e11.g1_ * vec3<f32>(_e13.g0_.y)));
}

fn line_homogeneous_magnitude_outer_product(self_1156: Line, other_1004: HomogeneousMagnitude) -> Line {
    var self_1157: Line;
    var other_1005: HomogeneousMagnitude;

    self_1157 = self_1156;
    other_1005 = other_1004;
    let _e4: Line = self_1157;
    let _e6: HomogeneousMagnitude = other_1005;
    let _e11: Line = self_1157;
    let _e13: HomogeneousMagnitude = other_1005;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_wedge(self_1158: Line, other_1006: HomogeneousMagnitude) -> Line {
    var self_1159: Line;
    var other_1007: HomogeneousMagnitude;

    self_1159 = self_1158;
    other_1007 = other_1006;
    let _e4: Line = self_1159;
    let _e6: HomogeneousMagnitude = other_1007;
    let _e11: Line = self_1159;
    let _e13: HomogeneousMagnitude = other_1007;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_join(self_1160: Line, other_1008: HomogeneousMagnitude) -> Line {
    var self_1161: Line;
    var other_1009: HomogeneousMagnitude;

    self_1161 = self_1160;
    other_1009 = other_1008;
    let _e4: Line = self_1161;
    let _e6: HomogeneousMagnitude = other_1009;
    let _e11: Line = self_1161;
    let _e13: HomogeneousMagnitude = other_1009;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_inner_product(self_1162: Line, other_1010: HomogeneousMagnitude) -> Line {
    var self_1163: Line;
    var other_1011: HomogeneousMagnitude;

    self_1163 = self_1162;
    other_1011 = other_1010;
    let _e4: Line = self_1163;
    let _e8: HomogeneousMagnitude = other_1011;
    let _e18: Line = self_1163;
    let _e22: HomogeneousMagnitude = other_1011;
    let _e33: Line = self_1163;
    let _e37: HomogeneousMagnitude = other_1011;
    let _e48: Line = self_1163;
    let _e50: HomogeneousMagnitude = other_1011;
    let _e56: Line = self_1163;
    let _e58: HomogeneousMagnitude = other_1011;
    return Line((((((vec3<f32>(_e4.g1_.x) * vec3<f32>(_e8.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e18.g1_.y) * vec3<f32>(_e22.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e33.g1_.z) * vec3<f32>(_e37.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e48.g0_ * vec3<f32>(_e50.g0_.x))), (_e56.g1_ * vec3<f32>(_e58.g0_.x)));
}

fn line_homogeneous_magnitude_inner_anti_product(self_1164: Line, other_1012: HomogeneousMagnitude) -> Line {
    var self_1165: Line;
    var other_1013: HomogeneousMagnitude;

    self_1165 = self_1164;
    other_1013 = other_1012;
    let _e4: Line = self_1165;
    let _e6: HomogeneousMagnitude = other_1013;
    let _e11: Line = self_1165;
    let _e15: HomogeneousMagnitude = other_1013;
    let _e25: Line = self_1165;
    let _e29: HomogeneousMagnitude = other_1013;
    let _e40: Line = self_1165;
    let _e44: HomogeneousMagnitude = other_1013;
    let _e55: Line = self_1165;
    let _e57: HomogeneousMagnitude = other_1013;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (((((vec3<f32>(_e11.g1_.x) * vec3<f32>(_e15.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e25.g1_.y) * vec3<f32>(_e29.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e40.g1_.z) * vec3<f32>(_e44.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e55.g0_ * vec3<f32>(_e57.g0_.x))));
}

fn line_homogeneous_magnitude_right_contraction(self_1166: Line, other_1014: HomogeneousMagnitude) -> Line {
    var self_1167: Line;
    var other_1015: HomogeneousMagnitude;

    self_1167 = self_1166;
    other_1015 = other_1014;
    let _e4: Line = self_1167;
    let _e6: HomogeneousMagnitude = other_1015;
    let _e11: Line = self_1167;
    let _e13: HomogeneousMagnitude = other_1015;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn line_homogeneous_magnitude_right_anti_contraction(self_1168: Line, other_1016: HomogeneousMagnitude) -> Line {
    var self_1169: Line;
    var other_1017: HomogeneousMagnitude;

    self_1169 = self_1168;
    other_1017 = other_1016;
    let _e4: Line = self_1169;
    let _e6: HomogeneousMagnitude = other_1017;
    let _e11: Line = self_1169;
    let _e13: HomogeneousMagnitude = other_1017;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.y)), (_e11.g1_ * vec3<f32>(_e13.g0_.y)));
}

fn line_point_geometric_product(self_1170: Line, other_1018: Point) -> Flector {
    var self_1171: Line;
    var other_1019: Point;

    self_1171 = self_1170;
    other_1019 = other_1018;
    let _e4: Line = self_1171;
    let _e8: Point = other_1019;
    let _e19: Line = self_1171;
    let _e23: Point = other_1019;
    let _e35: Line = self_1171;
    let _e39: Point = other_1019;
    let _e51: Line = self_1171;
    let _e55: Point = other_1019;
    let _e67: Line = self_1171;
    let _e70: Line = self_1171;
    let _e73: Line = self_1171;
    let _e76: Line = self_1171;
    let _e80: Point = other_1019;
    let _e92: Line = self_1171;
    let _e96: Point = other_1019;
    let _e107: Line = self_1171;
    let _e111: Point = other_1019;
    let _e123: Line = self_1171;
    let _e127: Point = other_1019;
    let _e139: Line = self_1171;
    let _e143: Point = other_1019;
    let _e155: Line = self_1171;
    let _e158: Line = self_1171;
    let _e161: Line = self_1171;
    let _e164: Line = self_1171;
    let _e168: Point = other_1019;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((((((vec4<f32>(_e92.g0_.y) * _e96.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e107.g0_.z) * _e111.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e123.g1_.y) * _e127.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e139.g1_.z) * _e143.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e155.g1_.x, _e158.g0_.x, _e161.g0_.x, _e164.g1_.x) * _e168.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_outer_product(self_1172: Line, other_1020: Point) -> Plane {
    var self_1173: Line;
    var other_1021: Point;

    self_1173 = self_1172;
    other_1021 = other_1020;
    let _e4: Line = self_1173;
    let _e8: Point = other_1021;
    let _e19: Line = self_1173;
    let _e23: Point = other_1021;
    let _e35: Line = self_1173;
    let _e39: Point = other_1021;
    let _e51: Line = self_1173;
    let _e55: Point = other_1021;
    let _e67: Line = self_1173;
    let _e70: Line = self_1173;
    let _e73: Line = self_1173;
    let _e76: Line = self_1173;
    let _e80: Point = other_1021;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_wedge(self_1174: Line, other_1022: Point) -> Plane {
    var self_1175: Line;
    var other_1023: Point;

    self_1175 = self_1174;
    other_1023 = other_1022;
    let _e4: Line = self_1175;
    let _e8: Point = other_1023;
    let _e19: Line = self_1175;
    let _e23: Point = other_1023;
    let _e35: Line = self_1175;
    let _e39: Point = other_1023;
    let _e51: Line = self_1175;
    let _e55: Point = other_1023;
    let _e67: Line = self_1175;
    let _e70: Line = self_1175;
    let _e73: Line = self_1175;
    let _e76: Line = self_1175;
    let _e80: Point = other_1023;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_join(self_1176: Line, other_1024: Point) -> Plane {
    var self_1177: Line;
    var other_1025: Point;

    self_1177 = self_1176;
    other_1025 = other_1024;
    let _e4: Line = self_1177;
    let _e8: Point = other_1025;
    let _e19: Line = self_1177;
    let _e23: Point = other_1025;
    let _e35: Line = self_1177;
    let _e39: Point = other_1025;
    let _e51: Line = self_1177;
    let _e55: Point = other_1025;
    let _e67: Line = self_1177;
    let _e70: Line = self_1177;
    let _e73: Line = self_1177;
    let _e76: Line = self_1177;
    let _e80: Point = other_1025;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_inner_product(self_1178: Line, other_1026: Point) -> Point {
    var self_1179: Line;
    var other_1027: Point;

    self_1179 = self_1178;
    other_1027 = other_1026;
    let _e4: Line = self_1179;
    let _e8: Point = other_1027;
    let _e19: Line = self_1179;
    let _e23: Point = other_1027;
    let _e35: Line = self_1179;
    let _e39: Point = other_1027;
    let _e51: Line = self_1179;
    let _e55: Point = other_1027;
    let _e67: Line = self_1179;
    let _e70: Line = self_1179;
    let _e73: Line = self_1179;
    let _e76: Line = self_1179;
    let _e80: Point = other_1027;
    return Point(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))));
}

fn line_point_inner_anti_product(self_1180: Line, other_1028: Point) -> Plane {
    var self_1181: Line;
    var other_1029: Point;

    self_1181 = self_1180;
    other_1029 = other_1028;
    let _e4: Line = self_1181;
    let _e8: Point = other_1029;
    let _e19: Line = self_1181;
    let _e23: Point = other_1029;
    let _e35: Line = self_1181;
    let _e39: Point = other_1029;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_point_right_contraction(self_1182: Line, other_1030: Point) -> Point {
    var self_1183: Line;
    var other_1031: Point;

    self_1183 = self_1182;
    other_1031 = other_1030;
    let _e4: Line = self_1183;
    let _e8: Point = other_1031;
    let _e19: Line = self_1183;
    let _e23: Point = other_1031;
    let _e35: Line = self_1183;
    let _e39: Point = other_1031;
    let _e51: Line = self_1183;
    let _e55: Point = other_1031;
    let _e67: Line = self_1183;
    let _e70: Line = self_1183;
    let _e73: Line = self_1183;
    let _e76: Line = self_1183;
    let _e80: Point = other_1031;
    return Point(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))));
}

fn line_point_left_anti_contraction(self_1184: Line, other_1032: Point) -> Plane {
    var self_1185: Line;
    var other_1033: Point;

    self_1185 = self_1184;
    other_1033 = other_1032;
    let _e4: Line = self_1185;
    let _e8: Point = other_1033;
    let _e19: Line = self_1185;
    let _e23: Point = other_1033;
    let _e35: Line = self_1185;
    let _e39: Point = other_1033;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_line_add(self_1186: Line, other_1034: Line) -> Line {
    var self_1187: Line;
    var other_1035: Line;

    self_1187 = self_1186;
    other_1035 = other_1034;
    let _e4: Line = self_1187;
    let _e6: Line = other_1035;
    let _e9: Line = self_1187;
    let _e11: Line = other_1035;
    return Line((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn line_line_sub(self_1188: Line, other_1036: Line) -> Line {
    var self_1189: Line;
    var other_1037: Line;

    self_1189 = self_1188;
    other_1037 = other_1036;
    let _e4: Line = self_1189;
    let _e6: Line = other_1037;
    let _e9: Line = self_1189;
    let _e11: Line = other_1037;
    return Line((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn line_line_mul(self_1190: Line, other_1038: Line) -> Line {
    var self_1191: Line;
    var other_1039: Line;

    self_1191 = self_1190;
    other_1039 = other_1038;
    let _e4: Line = self_1191;
    let _e6: Line = other_1039;
    let _e9: Line = self_1191;
    let _e11: Line = other_1039;
    return Line((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn line_line_div(self_1192: Line, other_1040: Line) -> Line {
    var self_1193: Line;
    var other_1041: Line;

    self_1193 = self_1192;
    other_1041 = other_1040;
    let _e4: Line = self_1193;
    let _e7: Line = self_1193;
    let _e10: Line = self_1193;
    let _e19: Line = other_1041;
    let _e22: Line = other_1041;
    let _e25: Line = other_1041;
    let _e35: Line = self_1193;
    let _e38: Line = self_1193;
    let _e41: Line = self_1193;
    let _e50: Line = other_1041;
    let _e53: Line = other_1041;
    let _e56: Line = other_1041;
    return Line((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn line_line_regressive_product(self_1194: Line, other_1042: Line) -> Scalar {
    var self_1195: Line;
    var other_1043: Line;

    self_1195 = self_1194;
    other_1043 = other_1042;
    let _e5: Line = self_1195;
    let _e8: Line = other_1043;
    let _e13: Line = self_1195;
    let _e16: Line = other_1043;
    let _e21: Line = self_1195;
    let _e24: Line = other_1043;
    let _e29: Line = self_1195;
    let _e32: Line = other_1043;
    let _e37: Line = self_1195;
    let _e40: Line = other_1043;
    let _e45: Line = self_1195;
    let _e48: Line = other_1043;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_anti_wedge(self_1196: Line, other_1044: Line) -> Scalar {
    var self_1197: Line;
    var other_1045: Line;

    self_1197 = self_1196;
    other_1045 = other_1044;
    let _e5: Line = self_1197;
    let _e8: Line = other_1045;
    let _e13: Line = self_1197;
    let _e16: Line = other_1045;
    let _e21: Line = self_1197;
    let _e24: Line = other_1045;
    let _e29: Line = self_1197;
    let _e32: Line = other_1045;
    let _e37: Line = self_1197;
    let _e40: Line = other_1045;
    let _e45: Line = self_1197;
    let _e48: Line = other_1045;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_meet(self_1198: Line, other_1046: Line) -> Scalar {
    var self_1199: Line;
    var other_1047: Line;

    self_1199 = self_1198;
    other_1047 = other_1046;
    let _e5: Line = self_1199;
    let _e8: Line = other_1047;
    let _e13: Line = self_1199;
    let _e16: Line = other_1047;
    let _e21: Line = self_1199;
    let _e24: Line = other_1047;
    let _e29: Line = self_1199;
    let _e32: Line = other_1047;
    let _e37: Line = self_1199;
    let _e40: Line = other_1047;
    let _e45: Line = self_1199;
    let _e48: Line = other_1047;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_outer_product(self_1200: Line, other_1048: Line) -> AntiScalar {
    var self_1201: Line;
    var other_1049: Line;

    self_1201 = self_1200;
    other_1049 = other_1048;
    let _e5: Line = self_1201;
    let _e8: Line = other_1049;
    let _e13: Line = self_1201;
    let _e16: Line = other_1049;
    let _e21: Line = self_1201;
    let _e24: Line = other_1049;
    let _e29: Line = self_1201;
    let _e32: Line = other_1049;
    let _e37: Line = self_1201;
    let _e40: Line = other_1049;
    let _e45: Line = self_1201;
    let _e48: Line = other_1049;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_wedge(self_1202: Line, other_1050: Line) -> AntiScalar {
    var self_1203: Line;
    var other_1051: Line;

    self_1203 = self_1202;
    other_1051 = other_1050;
    let _e5: Line = self_1203;
    let _e8: Line = other_1051;
    let _e13: Line = self_1203;
    let _e16: Line = other_1051;
    let _e21: Line = self_1203;
    let _e24: Line = other_1051;
    let _e29: Line = self_1203;
    let _e32: Line = other_1051;
    let _e37: Line = self_1203;
    let _e40: Line = other_1051;
    let _e45: Line = self_1203;
    let _e48: Line = other_1051;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_join(self_1204: Line, other_1052: Line) -> AntiScalar {
    var self_1205: Line;
    var other_1053: Line;

    self_1205 = self_1204;
    other_1053 = other_1052;
    let _e5: Line = self_1205;
    let _e8: Line = other_1053;
    let _e13: Line = self_1205;
    let _e16: Line = other_1053;
    let _e21: Line = self_1205;
    let _e24: Line = other_1053;
    let _e29: Line = self_1205;
    let _e32: Line = other_1053;
    let _e37: Line = self_1205;
    let _e40: Line = other_1053;
    let _e45: Line = self_1205;
    let _e48: Line = other_1053;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_line_inner_product(self_1206: Line, other_1054: Line) -> Scalar {
    var self_1207: Line;
    var other_1055: Line;

    self_1207 = self_1206;
    other_1055 = other_1054;
    let _e5: Line = self_1207;
    let _e8: Line = other_1055;
    let _e13: Line = self_1207;
    let _e16: Line = other_1055;
    let _e21: Line = self_1207;
    let _e24: Line = other_1055;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_inner_anti_product(self_1208: Line, other_1056: Line) -> AntiScalar {
    var self_1209: Line;
    var other_1057: Line;

    self_1209 = self_1208;
    other_1057 = other_1056;
    let _e5: Line = self_1209;
    let _e8: Line = other_1057;
    let _e13: Line = self_1209;
    let _e16: Line = other_1057;
    let _e21: Line = self_1209;
    let _e24: Line = other_1057;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_left_contraction(self_1210: Line, other_1058: Line) -> Scalar {
    var self_1211: Line;
    var other_1059: Line;

    self_1211 = self_1210;
    other_1059 = other_1058;
    let _e5: Line = self_1211;
    let _e8: Line = other_1059;
    let _e13: Line = self_1211;
    let _e16: Line = other_1059;
    let _e21: Line = self_1211;
    let _e24: Line = other_1059;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_right_contraction(self_1212: Line, other_1060: Line) -> Scalar {
    var self_1213: Line;
    var other_1061: Line;

    self_1213 = self_1212;
    other_1061 = other_1060;
    let _e5: Line = self_1213;
    let _e8: Line = other_1061;
    let _e13: Line = self_1213;
    let _e16: Line = other_1061;
    let _e21: Line = self_1213;
    let _e24: Line = other_1061;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_left_anti_contraction(self_1214: Line, other_1062: Line) -> AntiScalar {
    var self_1215: Line;
    var other_1063: Line;

    self_1215 = self_1214;
    other_1063 = other_1062;
    let _e5: Line = self_1215;
    let _e8: Line = other_1063;
    let _e13: Line = self_1215;
    let _e16: Line = other_1063;
    let _e21: Line = self_1215;
    let _e24: Line = other_1063;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_right_anti_contraction(self_1216: Line, other_1064: Line) -> AntiScalar {
    var self_1217: Line;
    var other_1065: Line;

    self_1217 = self_1216;
    other_1065 = other_1064;
    let _e5: Line = self_1217;
    let _e8: Line = other_1065;
    let _e13: Line = self_1217;
    let _e16: Line = other_1065;
    let _e21: Line = self_1217;
    let _e24: Line = other_1065;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_scalar_product(self_1218: Line, other_1066: Line) -> Scalar {
    var self_1219: Line;
    var other_1067: Line;

    self_1219 = self_1218;
    other_1067 = other_1066;
    let _e5: Line = self_1219;
    let _e8: Line = other_1067;
    let _e13: Line = self_1219;
    let _e16: Line = other_1067;
    let _e21: Line = self_1219;
    let _e24: Line = other_1067;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_dot(self_1220: Line, other_1068: Line) -> Scalar {
    var self_1221: Line;
    var other_1069: Line;

    self_1221 = self_1220;
    other_1069 = other_1068;
    let _e5: Line = self_1221;
    let _e8: Line = other_1069;
    let _e13: Line = self_1221;
    let _e16: Line = other_1069;
    let _e21: Line = self_1221;
    let _e24: Line = other_1069;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_line_anti_scalar_product(self_1222: Line, other_1070: Line) -> AntiScalar {
    var self_1223: Line;
    var other_1071: Line;

    self_1223 = self_1222;
    other_1071 = other_1070;
    let _e5: Line = self_1223;
    let _e8: Line = other_1071;
    let _e13: Line = self_1223;
    let _e16: Line = other_1071;
    let _e21: Line = self_1223;
    let _e24: Line = other_1071;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_line_anti_dot(self_1224: Line, other_1072: Line) -> AntiScalar {
    var self_1225: Line;
    var other_1073: Line;

    self_1225 = self_1224;
    other_1073 = other_1072;
    let _e5: Line = self_1225;
    let _e8: Line = other_1073;
    let _e13: Line = self_1225;
    let _e16: Line = other_1073;
    let _e21: Line = self_1225;
    let _e24: Line = other_1073;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_plane_geometric_anti_product(self_1226: Line, other_1074: Plane) -> Flector {
    var self_1227: Line;
    var other_1075: Plane;

    self_1227 = self_1226;
    other_1075 = other_1074;
    let _e4: Line = self_1227;
    let _e8: Plane = other_1075;
    let _e19: Line = self_1227;
    let _e23: Plane = other_1075;
    let _e35: Line = self_1227;
    let _e39: Plane = other_1075;
    let _e51: Line = self_1227;
    let _e55: Plane = other_1075;
    let _e67: Line = self_1227;
    let _e70: Line = self_1227;
    let _e73: Line = self_1227;
    let _e76: Line = self_1227;
    let _e80: Plane = other_1075;
    let _e93: Line = self_1227;
    let _e97: Plane = other_1075;
    let _e108: Line = self_1227;
    let _e112: Plane = other_1075;
    let _e124: Line = self_1227;
    let _e128: Plane = other_1075;
    let _e141: Line = self_1227;
    let _e145: Plane = other_1075;
    let _e158: Line = self_1227;
    let _e161: Line = self_1227;
    let _e164: Line = self_1227;
    let _e167: Line = self_1227;
    let _e171: Plane = other_1075;
    return Flector(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e124.g1_.y) * vec4<f32>(_e128.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e141.g1_.z) * vec4<f32>(_e145.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e158.g0_.x, _e161.g0_.x, _e164.g0_.x, _e167.g1_.x) * _e171.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_regressive_product(self_1228: Line, other_1076: Plane) -> Point {
    var self_1229: Line;
    var other_1077: Plane;

    self_1229 = self_1228;
    other_1077 = other_1076;
    let _e4: Line = self_1229;
    let _e8: Plane = other_1077;
    let _e19: Line = self_1229;
    let _e23: Plane = other_1077;
    let _e35: Line = self_1229;
    let _e39: Plane = other_1077;
    let _e51: Line = self_1229;
    let _e55: Plane = other_1077;
    let _e67: Line = self_1229;
    let _e70: Line = self_1229;
    let _e73: Line = self_1229;
    let _e76: Line = self_1229;
    let _e80: Plane = other_1077;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_anti_wedge(self_1230: Line, other_1078: Plane) -> Point {
    var self_1231: Line;
    var other_1079: Plane;

    self_1231 = self_1230;
    other_1079 = other_1078;
    let _e4: Line = self_1231;
    let _e8: Plane = other_1079;
    let _e19: Line = self_1231;
    let _e23: Plane = other_1079;
    let _e35: Line = self_1231;
    let _e39: Plane = other_1079;
    let _e51: Line = self_1231;
    let _e55: Plane = other_1079;
    let _e67: Line = self_1231;
    let _e70: Line = self_1231;
    let _e73: Line = self_1231;
    let _e76: Line = self_1231;
    let _e80: Plane = other_1079;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_meet(self_1232: Line, other_1080: Plane) -> Point {
    var self_1233: Line;
    var other_1081: Plane;

    self_1233 = self_1232;
    other_1081 = other_1080;
    let _e4: Line = self_1233;
    let _e8: Plane = other_1081;
    let _e19: Line = self_1233;
    let _e23: Plane = other_1081;
    let _e35: Line = self_1233;
    let _e39: Plane = other_1081;
    let _e51: Line = self_1233;
    let _e55: Plane = other_1081;
    let _e67: Line = self_1233;
    let _e70: Line = self_1233;
    let _e73: Line = self_1233;
    let _e76: Line = self_1233;
    let _e80: Plane = other_1081;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_inner_product(self_1234: Line, other_1082: Plane) -> Point {
    var self_1235: Line;
    var other_1083: Plane;

    self_1235 = self_1234;
    other_1083 = other_1082;
    let _e4: Line = self_1235;
    let _e8: Plane = other_1083;
    let _e19: Line = self_1235;
    let _e23: Plane = other_1083;
    let _e35: Line = self_1235;
    let _e39: Plane = other_1083;
    return Point(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_plane_inner_anti_product(self_1236: Line, other_1084: Plane) -> Plane {
    var self_1237: Line;
    var other_1085: Plane;

    self_1237 = self_1236;
    other_1085 = other_1084;
    let _e4: Line = self_1237;
    let _e8: Plane = other_1085;
    let _e19: Line = self_1237;
    let _e23: Plane = other_1085;
    let _e35: Line = self_1237;
    let _e39: Plane = other_1085;
    let _e52: Line = self_1237;
    let _e56: Plane = other_1085;
    let _e69: Line = self_1237;
    let _e72: Line = self_1237;
    let _e75: Line = self_1237;
    let _e78: Line = self_1237;
    let _e82: Plane = other_1085;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_left_contraction(self_1238: Line, other_1086: Plane) -> Point {
    var self_1239: Line;
    var other_1087: Plane;

    self_1239 = self_1238;
    other_1087 = other_1086;
    let _e4: Line = self_1239;
    let _e8: Plane = other_1087;
    let _e19: Line = self_1239;
    let _e23: Plane = other_1087;
    let _e35: Line = self_1239;
    let _e39: Plane = other_1087;
    return Point(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_plane_right_anti_contraction(self_1240: Line, other_1088: Plane) -> Plane {
    var self_1241: Line;
    var other_1089: Plane;

    self_1241 = self_1240;
    other_1089 = other_1088;
    let _e4: Line = self_1241;
    let _e8: Plane = other_1089;
    let _e19: Line = self_1241;
    let _e23: Plane = other_1089;
    let _e35: Line = self_1241;
    let _e39: Plane = other_1089;
    let _e52: Line = self_1241;
    let _e56: Plane = other_1089;
    let _e69: Line = self_1241;
    let _e72: Line = self_1241;
    let _e75: Line = self_1241;
    let _e78: Line = self_1241;
    let _e82: Plane = other_1089;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_motor_add(self_1242: Line, other_1090: Motor) -> Motor {
    var self_1243: Line;
    var other_1091: Motor;

    self_1243 = self_1242;
    other_1091 = other_1090;
    let _e4: Line = self_1243;
    let _e7: Line = self_1243;
    let _e10: Line = self_1243;
    let _e13: Line = self_1243;
    let _e23: Motor = other_1091;
    let _e26: Line = self_1243;
    let _e28: Motor = other_1091;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e23.g0_), (_e26.g1_ + _e28.g1_));
}

fn line_motor_sub(self_1244: Line, other_1092: Motor) -> Motor {
    var self_1245: Line;
    var other_1093: Motor;

    self_1245 = self_1244;
    other_1093 = other_1092;
    let _e4: Line = self_1245;
    let _e7: Line = self_1245;
    let _e10: Line = self_1245;
    let _e13: Line = self_1245;
    let _e23: Motor = other_1093;
    let _e26: Line = self_1245;
    let _e28: Motor = other_1093;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e23.g0_), (_e26.g1_ - _e28.g1_));
}

fn line_motor_outer_product(self_1246: Line, other_1094: Motor) -> AntiScalar {
    var self_1247: Line;
    var other_1095: Motor;

    self_1247 = self_1246;
    other_1095 = other_1094;
    let _e5: Line = self_1247;
    let _e8: Motor = other_1095;
    let _e13: Line = self_1247;
    let _e16: Motor = other_1095;
    let _e21: Line = self_1247;
    let _e24: Motor = other_1095;
    let _e29: Line = self_1247;
    let _e32: Motor = other_1095;
    let _e37: Line = self_1247;
    let _e40: Motor = other_1095;
    let _e45: Line = self_1247;
    let _e48: Motor = other_1095;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_wedge(self_1248: Line, other_1096: Motor) -> AntiScalar {
    var self_1249: Line;
    var other_1097: Motor;

    self_1249 = self_1248;
    other_1097 = other_1096;
    let _e5: Line = self_1249;
    let _e8: Motor = other_1097;
    let _e13: Line = self_1249;
    let _e16: Motor = other_1097;
    let _e21: Line = self_1249;
    let _e24: Motor = other_1097;
    let _e29: Line = self_1249;
    let _e32: Motor = other_1097;
    let _e37: Line = self_1249;
    let _e40: Motor = other_1097;
    let _e45: Line = self_1249;
    let _e48: Motor = other_1097;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_join(self_1250: Line, other_1098: Motor) -> AntiScalar {
    var self_1251: Line;
    var other_1099: Motor;

    self_1251 = self_1250;
    other_1099 = other_1098;
    let _e5: Line = self_1251;
    let _e8: Motor = other_1099;
    let _e13: Line = self_1251;
    let _e16: Motor = other_1099;
    let _e21: Line = self_1251;
    let _e24: Motor = other_1099;
    let _e29: Line = self_1251;
    let _e32: Motor = other_1099;
    let _e37: Line = self_1251;
    let _e40: Motor = other_1099;
    let _e45: Line = self_1251;
    let _e48: Motor = other_1099;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn line_motor_inner_anti_product(self_1252: Line, other_1100: Motor) -> Motor {
    var self_1253: Line;
    var other_1101: Motor;

    self_1253 = self_1252;
    other_1101 = other_1100;
    let _e4: Line = self_1253;
    let _e8: Motor = other_1101;
    let _e19: Line = self_1253;
    let _e23: Motor = other_1101;
    let _e35: Line = self_1253;
    let _e39: Motor = other_1101;
    let _e51: Line = self_1253;
    let _e53: Motor = other_1101;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e51.g1_ * vec3<f32>(_e53.g0_.w)));
}

fn line_motor_right_contraction(self_1254: Line, other_1102: Motor) -> Scalar {
    var self_1255: Line;
    var other_1103: Motor;

    self_1255 = self_1254;
    other_1103 = other_1102;
    let _e5: Line = self_1255;
    let _e8: Motor = other_1103;
    let _e13: Line = self_1255;
    let _e16: Motor = other_1103;
    let _e21: Line = self_1255;
    let _e24: Motor = other_1103;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_left_anti_contraction(self_1256: Line, other_1104: Motor) -> AntiScalar {
    var self_1257: Line;
    var other_1105: Motor;

    self_1257 = self_1256;
    other_1105 = other_1104;
    let _e5: Line = self_1257;
    let _e8: Motor = other_1105;
    let _e13: Line = self_1257;
    let _e16: Motor = other_1105;
    let _e21: Line = self_1257;
    let _e24: Motor = other_1105;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_motor_right_anti_contraction(self_1258: Line, other_1106: Motor) -> Motor {
    var self_1259: Line;
    var other_1107: Motor;

    self_1259 = self_1258;
    other_1107 = other_1106;
    let _e4: Line = self_1259;
    let _e8: Motor = other_1107;
    let _e19: Line = self_1259;
    let _e23: Motor = other_1107;
    let _e35: Line = self_1259;
    let _e39: Motor = other_1107;
    let _e51: Line = self_1259;
    let _e53: Motor = other_1107;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e51.g1_ * vec3<f32>(_e53.g0_.w)));
}

fn line_motor_scalar_product(self_1260: Line, other_1108: Motor) -> Scalar {
    var self_1261: Line;
    var other_1109: Motor;

    self_1261 = self_1260;
    other_1109 = other_1108;
    let _e5: Line = self_1261;
    let _e8: Motor = other_1109;
    let _e13: Line = self_1261;
    let _e16: Motor = other_1109;
    let _e21: Line = self_1261;
    let _e24: Motor = other_1109;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_dot(self_1262: Line, other_1110: Motor) -> Scalar {
    var self_1263: Line;
    var other_1111: Motor;

    self_1263 = self_1262;
    other_1111 = other_1110;
    let _e5: Line = self_1263;
    let _e8: Motor = other_1111;
    let _e13: Line = self_1263;
    let _e16: Motor = other_1111;
    let _e21: Line = self_1263;
    let _e24: Motor = other_1111;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn line_motor_anti_scalar_product(self_1264: Line, other_1112: Motor) -> AntiScalar {
    var self_1265: Line;
    var other_1113: Motor;

    self_1265 = self_1264;
    other_1113 = other_1112;
    let _e5: Line = self_1265;
    let _e8: Motor = other_1113;
    let _e13: Line = self_1265;
    let _e16: Motor = other_1113;
    let _e21: Line = self_1265;
    let _e24: Motor = other_1113;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_motor_anti_dot(self_1266: Line, other_1114: Motor) -> AntiScalar {
    var self_1267: Line;
    var other_1115: Motor;

    self_1267 = self_1266;
    other_1115 = other_1114;
    let _e5: Line = self_1267;
    let _e8: Motor = other_1115;
    let _e13: Line = self_1267;
    let _e16: Motor = other_1115;
    let _e21: Line = self_1267;
    let _e24: Motor = other_1115;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_add(self_1268: Line, other_1116: Rotor) -> Motor {
    var self_1269: Line;
    var other_1117: Rotor;

    self_1269 = self_1268;
    other_1117 = other_1116;
    let _e4: Line = self_1269;
    let _e7: Line = self_1269;
    let _e10: Line = self_1269;
    let _e13: Line = self_1269;
    let _e23: Rotor = other_1117;
    let _e26: Line = self_1269;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + _e23.g0_), _e26.g1_);
}

fn line_rotor_sub(self_1270: Line, other_1118: Rotor) -> Motor {
    var self_1271: Line;
    var other_1119: Rotor;

    self_1271 = self_1270;
    other_1119 = other_1118;
    let _e4: Line = self_1271;
    let _e7: Line = self_1271;
    let _e10: Line = self_1271;
    let _e13: Line = self_1271;
    let _e23: Rotor = other_1119;
    let _e26: Line = self_1271;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - _e23.g0_), _e26.g1_);
}

fn line_rotor_geometric_product(self_1272: Line, other_1120: Rotor) -> Rotor {
    var self_1273: Line;
    var other_1121: Rotor;

    self_1273 = self_1272;
    other_1121 = other_1120;
    let _e4: Line = self_1273;
    let _e8: Rotor = other_1121;
    let _e20: Line = self_1273;
    let _e24: Rotor = other_1121;
    let _e37: Line = self_1273;
    let _e41: Rotor = other_1121;
    return Rotor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e20.g1_.y) * _e24.g0_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * _e41.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_rotor_outer_product(self_1274: Line, other_1122: Rotor) -> AntiScalar {
    var self_1275: Line;
    var other_1123: Rotor;

    self_1275 = self_1274;
    other_1123 = other_1122;
    let _e5: Line = self_1275;
    let _e8: Rotor = other_1123;
    let _e13: Line = self_1275;
    let _e16: Rotor = other_1123;
    let _e21: Line = self_1275;
    let _e24: Rotor = other_1123;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_wedge(self_1276: Line, other_1124: Rotor) -> AntiScalar {
    var self_1277: Line;
    var other_1125: Rotor;

    self_1277 = self_1276;
    other_1125 = other_1124;
    let _e5: Line = self_1277;
    let _e8: Rotor = other_1125;
    let _e13: Line = self_1277;
    let _e16: Rotor = other_1125;
    let _e21: Line = self_1277;
    let _e24: Rotor = other_1125;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_join(self_1278: Line, other_1126: Rotor) -> AntiScalar {
    var self_1279: Line;
    var other_1127: Rotor;

    self_1279 = self_1278;
    other_1127 = other_1126;
    let _e5: Line = self_1279;
    let _e8: Rotor = other_1127;
    let _e13: Line = self_1279;
    let _e16: Rotor = other_1127;
    let _e21: Line = self_1279;
    let _e24: Rotor = other_1127;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_rotor_inner_anti_product(self_1280: Line, other_1128: Rotor) -> Motor {
    var self_1281: Line;
    var other_1129: Rotor;

    self_1281 = self_1280;
    other_1129 = other_1128;
    let _e4: Line = self_1281;
    let _e8: Rotor = other_1129;
    let _e19: Line = self_1281;
    let _e23: Rotor = other_1129;
    let _e35: Line = self_1281;
    let _e39: Rotor = other_1129;
    let _e51: Line = self_1281;
    let _e53: Rotor = other_1129;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e51.g1_ * vec3<f32>(_e53.g0_.w)));
}

fn line_rotor_left_anti_contraction(self_1282: Line, other_1130: Rotor) -> AntiScalar {
    var self_1283: Line;
    var other_1131: Rotor;

    self_1283 = self_1282;
    other_1131 = other_1130;
    let _e5: Line = self_1283;
    let _e8: Rotor = other_1131;
    let _e13: Line = self_1283;
    let _e16: Rotor = other_1131;
    let _e21: Line = self_1283;
    let _e24: Rotor = other_1131;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_right_anti_contraction(self_1284: Line, other_1132: Rotor) -> Motor {
    var self_1285: Line;
    var other_1133: Rotor;

    self_1285 = self_1284;
    other_1133 = other_1132;
    let _e4: Line = self_1285;
    let _e8: Rotor = other_1133;
    let _e19: Line = self_1285;
    let _e23: Rotor = other_1133;
    let _e35: Line = self_1285;
    let _e39: Rotor = other_1133;
    let _e51: Line = self_1285;
    let _e53: Rotor = other_1133;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e51.g1_ * vec3<f32>(_e53.g0_.w)));
}

fn line_rotor_anti_scalar_product(self_1286: Line, other_1134: Rotor) -> AntiScalar {
    var self_1287: Line;
    var other_1135: Rotor;

    self_1287 = self_1286;
    other_1135 = other_1134;
    let _e5: Line = self_1287;
    let _e8: Rotor = other_1135;
    let _e13: Line = self_1287;
    let _e16: Rotor = other_1135;
    let _e21: Line = self_1287;
    let _e24: Rotor = other_1135;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_rotor_anti_dot(self_1288: Line, other_1136: Rotor) -> AntiScalar {
    var self_1289: Line;
    var other_1137: Rotor;

    self_1289 = self_1288;
    other_1137 = other_1136;
    let _e5: Line = self_1289;
    let _e8: Rotor = other_1137;
    let _e13: Line = self_1289;
    let _e16: Rotor = other_1137;
    let _e21: Line = self_1289;
    let _e24: Rotor = other_1137;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_add(self_1290: Line, other_1138: Translator) -> Motor {
    var self_1291: Line;
    var other_1139: Translator;

    self_1291 = self_1290;
    other_1139 = other_1138;
    let _e4: Line = self_1291;
    let _e7: Line = self_1291;
    let _e10: Line = self_1291;
    let _e13: Line = self_1291;
    let _e23: Translator = other_1139;
    let _e33: Line = self_1291;
    let _e35: Translator = other_1139;
    let _e38: Translator = other_1139;
    let _e41: Translator = other_1139;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + (_e23.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e33.g1_ + vec3<f32>(_e35.g0_.x, _e38.g0_.y, _e41.g0_.z)));
}

fn line_translator_sub(self_1292: Line, other_1140: Translator) -> Motor {
    var self_1293: Line;
    var other_1141: Translator;

    self_1293 = self_1292;
    other_1141 = other_1140;
    let _e4: Line = self_1293;
    let _e7: Line = self_1293;
    let _e10: Line = self_1293;
    let _e13: Line = self_1293;
    let _e23: Translator = other_1141;
    let _e33: Line = self_1293;
    let _e35: Translator = other_1141;
    let _e38: Translator = other_1141;
    let _e41: Translator = other_1141;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) - (_e23.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e33.g1_ - vec3<f32>(_e35.g0_.x, _e38.g0_.y, _e41.g0_.z)));
}

fn line_translator_outer_product(self_1294: Line, other_1142: Translator) -> AntiScalar {
    var self_1295: Line;
    var other_1143: Translator;

    self_1295 = self_1294;
    other_1143 = other_1142;
    let _e5: Line = self_1295;
    let _e8: Translator = other_1143;
    let _e13: Line = self_1295;
    let _e16: Translator = other_1143;
    let _e21: Line = self_1295;
    let _e24: Translator = other_1143;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_wedge(self_1296: Line, other_1144: Translator) -> AntiScalar {
    var self_1297: Line;
    var other_1145: Translator;

    self_1297 = self_1296;
    other_1145 = other_1144;
    let _e5: Line = self_1297;
    let _e8: Translator = other_1145;
    let _e13: Line = self_1297;
    let _e16: Translator = other_1145;
    let _e21: Line = self_1297;
    let _e24: Translator = other_1145;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_join(self_1298: Line, other_1146: Translator) -> AntiScalar {
    var self_1299: Line;
    var other_1147: Translator;

    self_1299 = self_1298;
    other_1147 = other_1146;
    let _e5: Line = self_1299;
    let _e8: Translator = other_1147;
    let _e13: Line = self_1299;
    let _e16: Translator = other_1147;
    let _e21: Line = self_1299;
    let _e24: Translator = other_1147;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_translator_inner_anti_product(self_1300: Line, other_1148: Translator) -> Line {
    var self_1301: Line;
    var other_1149: Translator;

    self_1301 = self_1300;
    other_1149 = other_1148;
    let _e4: Line = self_1301;
    let _e6: Translator = other_1149;
    let _e11: Line = self_1301;
    let _e13: Translator = other_1149;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn line_translator_right_contraction(self_1302: Line, other_1150: Translator) -> Scalar {
    var self_1303: Line;
    var other_1151: Translator;

    self_1303 = self_1302;
    other_1151 = other_1150;
    let _e5: Line = self_1303;
    let _e8: Translator = other_1151;
    let _e13: Line = self_1303;
    let _e16: Translator = other_1151;
    let _e21: Line = self_1303;
    let _e24: Translator = other_1151;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_translator_right_anti_contraction(self_1304: Line, other_1152: Translator) -> Line {
    var self_1305: Line;
    var other_1153: Translator;

    self_1305 = self_1304;
    other_1153 = other_1152;
    let _e4: Line = self_1305;
    let _e6: Translator = other_1153;
    let _e11: Line = self_1305;
    let _e13: Translator = other_1153;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn line_translator_scalar_product(self_1306: Line, other_1154: Translator) -> Scalar {
    var self_1307: Line;
    var other_1155: Translator;

    self_1307 = self_1306;
    other_1155 = other_1154;
    let _e5: Line = self_1307;
    let _e8: Translator = other_1155;
    let _e13: Line = self_1307;
    let _e16: Translator = other_1155;
    let _e21: Line = self_1307;
    let _e24: Translator = other_1155;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_translator_dot(self_1308: Line, other_1156: Translator) -> Scalar {
    var self_1309: Line;
    var other_1157: Translator;

    self_1309 = self_1308;
    other_1157 = other_1156;
    let _e5: Line = self_1309;
    let _e8: Translator = other_1157;
    let _e13: Line = self_1309;
    let _e16: Translator = other_1157;
    let _e21: Line = self_1309;
    let _e24: Translator = other_1157;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn line_flector_geometric_product(self_1310: Line, other_1158: Flector) -> Flector {
    var self_1311: Line;
    var other_1159: Flector;

    self_1311 = self_1310;
    other_1159 = other_1158;
    let _e4: Line = self_1311;
    let _e8: Flector = other_1159;
    let _e19: Line = self_1311;
    let _e23: Flector = other_1159;
    let _e35: Line = self_1311;
    let _e39: Flector = other_1159;
    let _e42: Flector = other_1159;
    let _e45: Flector = other_1159;
    let _e48: Flector = other_1159;
    let _e62: Line = self_1311;
    let _e66: Flector = other_1159;
    let _e69: Flector = other_1159;
    let _e72: Flector = other_1159;
    let _e75: Flector = other_1159;
    let _e89: Line = self_1311;
    let _e93: Flector = other_1159;
    let _e96: Flector = other_1159;
    let _e99: Flector = other_1159;
    let _e102: Flector = other_1159;
    let _e116: Line = self_1311;
    let _e120: Flector = other_1159;
    let _e132: Line = self_1311;
    let _e136: Flector = other_1159;
    let _e139: Flector = other_1159;
    let _e142: Flector = other_1159;
    let _e145: Flector = other_1159;
    let _e158: Line = self_1311;
    let _e162: Flector = other_1159;
    let _e165: Flector = other_1159;
    let _e168: Flector = other_1159;
    let _e171: Flector = other_1159;
    let _e185: Line = self_1311;
    let _e189: Flector = other_1159;
    let _e192: Flector = other_1159;
    let _e195: Flector = other_1159;
    let _e198: Flector = other_1159;
    let _e212: Line = self_1311;
    let _e216: Flector = other_1159;
    let _e219: Flector = other_1159;
    let _e222: Flector = other_1159;
    let _e225: Flector = other_1159;
    let _e239: Line = self_1311;
    let _e243: Flector = other_1159;
    let _e246: Flector = other_1159;
    let _e249: Flector = other_1159;
    let _e252: Flector = other_1159;
    let _e266: Line = self_1311;
    let _e270: Flector = other_1159;
    let _e273: Flector = other_1159;
    let _e276: Flector = other_1159;
    let _e279: Flector = other_1159;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g1_.w, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e62.g1_.y) * vec4<f32>(_e66.g0_.z, _e69.g1_.w, _e72.g0_.x, _e75.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e89.g1_.z) * vec4<f32>(_e93.g0_.y, _e96.g0_.x, _e99.g1_.w, _e102.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e116.g0_.x) * vec4<f32>(_e120.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec4<f32>(_e132.g0_.y) * vec4<f32>(_e136.g0_.z, _e139.g1_.w, _e142.g0_.x, _e145.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e158.g0_.z) * vec4<f32>(_e162.g0_.y, _e165.g0_.x, _e168.g1_.w, _e171.g0_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e185.g1_.x) * vec4<f32>(_e189.g0_.w, _e192.g1_.z, _e195.g1_.y, _e198.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e212.g1_.y) * vec4<f32>(_e216.g1_.z, _e219.g0_.w, _e222.g1_.x, _e225.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e239.g1_.z) * vec4<f32>(_e243.g1_.y, _e246.g1_.x, _e249.g0_.w, _e252.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e266.g0_.x) * vec4<f32>(_e270.g1_.w, _e273.g0_.z, _e276.g0_.y, _e279.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn line_flector_geometric_anti_product(self_1312: Line, other_1160: Flector) -> Flector {
    var self_1313: Line;
    var other_1161: Flector;

    self_1313 = self_1312;
    other_1161 = other_1160;
    let _e4: Line = self_1313;
    let _e8: Flector = other_1161;
    let _e11: Flector = other_1161;
    let _e14: Flector = other_1161;
    let _e17: Flector = other_1161;
    let _e30: Line = self_1313;
    let _e34: Flector = other_1161;
    let _e37: Flector = other_1161;
    let _e40: Flector = other_1161;
    let _e43: Flector = other_1161;
    let _e57: Line = self_1313;
    let _e61: Flector = other_1161;
    let _e64: Flector = other_1161;
    let _e67: Flector = other_1161;
    let _e70: Flector = other_1161;
    let _e84: Line = self_1313;
    let _e88: Flector = other_1161;
    let _e91: Flector = other_1161;
    let _e94: Flector = other_1161;
    let _e97: Flector = other_1161;
    let _e110: Line = self_1313;
    let _e114: Flector = other_1161;
    let _e117: Flector = other_1161;
    let _e120: Flector = other_1161;
    let _e123: Flector = other_1161;
    let _e136: Line = self_1313;
    let _e140: Flector = other_1161;
    let _e143: Flector = other_1161;
    let _e146: Flector = other_1161;
    let _e149: Flector = other_1161;
    let _e162: Line = self_1313;
    let _e166: Flector = other_1161;
    let _e169: Flector = other_1161;
    let _e172: Flector = other_1161;
    let _e175: Flector = other_1161;
    let _e188: Line = self_1313;
    let _e192: Flector = other_1161;
    let _e195: Flector = other_1161;
    let _e198: Flector = other_1161;
    let _e201: Flector = other_1161;
    let _e215: Line = self_1313;
    let _e219: Flector = other_1161;
    let _e222: Flector = other_1161;
    let _e225: Flector = other_1161;
    let _e228: Flector = other_1161;
    let _e242: Line = self_1313;
    let _e246: Flector = other_1161;
    let _e259: Line = self_1313;
    let _e263: Flector = other_1161;
    let _e276: Line = self_1313;
    let _e280: Flector = other_1161;
    return Flector((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g1_.z, _e91.g0_.w, _e94.g1_.x, _e97.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e110.g1_.z) * vec4<f32>(_e114.g1_.y, _e117.g1_.x, _e120.g0_.w, _e123.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e136.g1_.x) * vec4<f32>(_e140.g0_.w, _e143.g1_.z, _e146.g1_.y, _e149.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((((vec4<f32>(_e162.g0_.x) * vec4<f32>(_e166.g0_.w, _e169.g1_.z, _e172.g1_.y, _e175.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e188.g0_.y) * vec4<f32>(_e192.g1_.z, _e195.g0_.w, _e198.g1_.x, _e201.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e215.g0_.z) * vec4<f32>(_e219.g1_.y, _e222.g1_.x, _e225.g0_.w, _e228.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e242.g1_.y) * vec4<f32>(_e246.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e259.g1_.z) * vec4<f32>(_e263.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e276.g1_.x) * vec4<f32>(_e280.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_regressive_product(self_1314: Line, other_1162: Flector) -> Point {
    var self_1315: Line;
    var other_1163: Flector;

    self_1315 = self_1314;
    other_1163 = other_1162;
    let _e4: Line = self_1315;
    let _e8: Flector = other_1163;
    let _e19: Line = self_1315;
    let _e23: Flector = other_1163;
    let _e35: Line = self_1315;
    let _e39: Flector = other_1163;
    let _e51: Line = self_1315;
    let _e55: Flector = other_1163;
    let _e67: Line = self_1315;
    let _e70: Line = self_1315;
    let _e73: Line = self_1315;
    let _e76: Line = self_1315;
    let _e80: Flector = other_1163;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_anti_wedge(self_1316: Line, other_1164: Flector) -> Point {
    var self_1317: Line;
    var other_1165: Flector;

    self_1317 = self_1316;
    other_1165 = other_1164;
    let _e4: Line = self_1317;
    let _e8: Flector = other_1165;
    let _e19: Line = self_1317;
    let _e23: Flector = other_1165;
    let _e35: Line = self_1317;
    let _e39: Flector = other_1165;
    let _e51: Line = self_1317;
    let _e55: Flector = other_1165;
    let _e67: Line = self_1317;
    let _e70: Line = self_1317;
    let _e73: Line = self_1317;
    let _e76: Line = self_1317;
    let _e80: Flector = other_1165;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_meet(self_1318: Line, other_1166: Flector) -> Point {
    var self_1319: Line;
    var other_1167: Flector;

    self_1319 = self_1318;
    other_1167 = other_1166;
    let _e4: Line = self_1319;
    let _e8: Flector = other_1167;
    let _e19: Line = self_1319;
    let _e23: Flector = other_1167;
    let _e35: Line = self_1319;
    let _e39: Flector = other_1167;
    let _e51: Line = self_1319;
    let _e55: Flector = other_1167;
    let _e67: Line = self_1319;
    let _e70: Line = self_1319;
    let _e73: Line = self_1319;
    let _e76: Line = self_1319;
    let _e80: Flector = other_1167;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_outer_product(self_1320: Line, other_1168: Flector) -> Plane {
    var self_1321: Line;
    var other_1169: Flector;

    self_1321 = self_1320;
    other_1169 = other_1168;
    let _e4: Line = self_1321;
    let _e8: Flector = other_1169;
    let _e19: Line = self_1321;
    let _e23: Flector = other_1169;
    let _e35: Line = self_1321;
    let _e39: Flector = other_1169;
    let _e51: Line = self_1321;
    let _e55: Flector = other_1169;
    let _e67: Line = self_1321;
    let _e70: Line = self_1321;
    let _e73: Line = self_1321;
    let _e76: Line = self_1321;
    let _e80: Flector = other_1169;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_wedge(self_1322: Line, other_1170: Flector) -> Plane {
    var self_1323: Line;
    var other_1171: Flector;

    self_1323 = self_1322;
    other_1171 = other_1170;
    let _e4: Line = self_1323;
    let _e8: Flector = other_1171;
    let _e19: Line = self_1323;
    let _e23: Flector = other_1171;
    let _e35: Line = self_1323;
    let _e39: Flector = other_1171;
    let _e51: Line = self_1323;
    let _e55: Flector = other_1171;
    let _e67: Line = self_1323;
    let _e70: Line = self_1323;
    let _e73: Line = self_1323;
    let _e76: Line = self_1323;
    let _e80: Flector = other_1171;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_join(self_1324: Line, other_1172: Flector) -> Plane {
    var self_1325: Line;
    var other_1173: Flector;

    self_1325 = self_1324;
    other_1173 = other_1172;
    let _e4: Line = self_1325;
    let _e8: Flector = other_1173;
    let _e19: Line = self_1325;
    let _e23: Flector = other_1173;
    let _e35: Line = self_1325;
    let _e39: Flector = other_1173;
    let _e51: Line = self_1325;
    let _e55: Flector = other_1173;
    let _e67: Line = self_1325;
    let _e70: Line = self_1325;
    let _e73: Line = self_1325;
    let _e76: Line = self_1325;
    let _e80: Flector = other_1173;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g0_.x, _e73.g0_.x, _e76.g1_.x) * _e80.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_flector_inner_product(self_1326: Line, other_1174: Flector) -> Point {
    var self_1327: Line;
    var other_1175: Flector;

    self_1327 = self_1326;
    other_1175 = other_1174;
    let _e4: Line = self_1327;
    let _e8: Flector = other_1175;
    let _e19: Line = self_1327;
    let _e23: Flector = other_1175;
    let _e35: Line = self_1327;
    let _e39: Flector = other_1175;
    let _e42: Flector = other_1175;
    let _e45: Flector = other_1175;
    let _e48: Flector = other_1175;
    let _e62: Line = self_1327;
    let _e66: Flector = other_1175;
    let _e69: Flector = other_1175;
    let _e72: Flector = other_1175;
    let _e75: Flector = other_1175;
    let _e89: Line = self_1327;
    let _e93: Flector = other_1175;
    let _e96: Flector = other_1175;
    let _e99: Flector = other_1175;
    let _e102: Flector = other_1175;
    let _e116: Line = self_1327;
    let _e120: Flector = other_1175;
    return Point((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g1_.w, _e42.g0_.z, _e45.g0_.y, _e48.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e62.g1_.y) * vec4<f32>(_e66.g0_.z, _e69.g1_.w, _e72.g0_.x, _e75.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e89.g1_.z) * vec4<f32>(_e93.g0_.y, _e96.g0_.x, _e99.g1_.w, _e102.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e116.g0_.x) * vec4<f32>(_e120.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn line_flector_inner_anti_product(self_1328: Line, other_1176: Flector) -> Plane {
    var self_1329: Line;
    var other_1177: Flector;

    self_1329 = self_1328;
    other_1177 = other_1176;
    let _e4: Line = self_1329;
    let _e8: Flector = other_1177;
    let _e11: Flector = other_1177;
    let _e14: Flector = other_1177;
    let _e17: Flector = other_1177;
    let _e30: Line = self_1329;
    let _e34: Flector = other_1177;
    let _e37: Flector = other_1177;
    let _e40: Flector = other_1177;
    let _e43: Flector = other_1177;
    let _e57: Line = self_1329;
    let _e61: Flector = other_1177;
    let _e64: Flector = other_1177;
    let _e67: Flector = other_1177;
    let _e70: Flector = other_1177;
    let _e84: Line = self_1329;
    let _e88: Flector = other_1177;
    let _e101: Line = self_1329;
    let _e105: Flector = other_1177;
    let _e118: Line = self_1329;
    let _e122: Flector = other_1177;
    return Plane((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g0_.w, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e101.g1_.z) * vec4<f32>(_e105.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e118.g1_.x) * vec4<f32>(_e122.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_left_contraction(self_1330: Line, other_1178: Flector) -> Point {
    var self_1331: Line;
    var other_1179: Flector;

    self_1331 = self_1330;
    other_1179 = other_1178;
    let _e4: Line = self_1331;
    let _e8: Flector = other_1179;
    let _e19: Line = self_1331;
    let _e23: Flector = other_1179;
    let _e35: Line = self_1331;
    let _e39: Flector = other_1179;
    return Point(((((vec4<f32>(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_right_contraction(self_1332: Line, other_1180: Flector) -> Point {
    var self_1333: Line;
    var other_1181: Flector;

    self_1333 = self_1332;
    other_1181 = other_1180;
    let _e4: Line = self_1333;
    let _e8: Flector = other_1181;
    let _e19: Line = self_1333;
    let _e23: Flector = other_1181;
    let _e35: Line = self_1333;
    let _e39: Flector = other_1181;
    let _e51: Line = self_1333;
    let _e55: Flector = other_1181;
    let _e67: Line = self_1333;
    let _e70: Line = self_1333;
    let _e73: Line = self_1333;
    let _e76: Line = self_1333;
    let _e80: Flector = other_1181;
    return Point(((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g1_.x, _e73.g1_.x, _e76.g0_.x) * _e80.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))));
}

fn line_flector_left_anti_contraction(self_1334: Line, other_1182: Flector) -> Plane {
    var self_1335: Line;
    var other_1183: Flector;

    self_1335 = self_1334;
    other_1183 = other_1182;
    let _e4: Line = self_1335;
    let _e8: Flector = other_1183;
    let _e19: Line = self_1335;
    let _e23: Flector = other_1183;
    let _e35: Line = self_1335;
    let _e39: Flector = other_1183;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn line_flector_right_anti_contraction(self_1336: Line, other_1184: Flector) -> Plane {
    var self_1337: Line;
    var other_1185: Flector;

    self_1337 = self_1336;
    other_1185 = other_1184;
    let _e4: Line = self_1337;
    let _e8: Flector = other_1185;
    let _e19: Line = self_1337;
    let _e23: Flector = other_1185;
    let _e35: Line = self_1337;
    let _e39: Flector = other_1185;
    let _e52: Line = self_1337;
    let _e56: Flector = other_1185;
    let _e69: Line = self_1337;
    let _e72: Line = self_1337;
    let _e75: Line = self_1337;
    let _e78: Line = self_1337;
    let _e82: Flector = other_1185;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.x, _e75.g0_.x, _e78.g1_.x) * _e82.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn line_multi_vector_add(self_1338: Line, other_1186: MultiVector) -> MultiVector {
    var self_1339: Line;
    var other_1187: MultiVector;

    self_1339 = self_1338;
    other_1187 = other_1186;
    let _e4: MultiVector = other_1187;
    let _e6: MultiVector = other_1187;
    let _e8: Line = self_1339;
    let _e10: MultiVector = other_1187;
    let _e13: Line = self_1339;
    let _e15: MultiVector = other_1187;
    let _e18: MultiVector = other_1187;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g0_ + _e10.g2_), (_e13.g1_ + _e15.g3_), _e18.g4_);
}

fn line_multi_vector_sub(self_1340: Line, other_1188: MultiVector) -> MultiVector {
    var self_1341: Line;
    var other_1189: MultiVector;

    self_1341 = self_1340;
    other_1189 = other_1188;
    let _e6: MultiVector = other_1189;
    let _e11: MultiVector = other_1189;
    let _e14: Line = self_1341;
    let _e16: MultiVector = other_1189;
    let _e19: Line = self_1341;
    let _e21: MultiVector = other_1189;
    let _e26: MultiVector = other_1189;
    return MultiVector((vec2<f32>(0.0) - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (_e14.g0_ - _e16.g2_), (_e19.g1_ - _e21.g3_), (vec4<f32>(0.0) - _e26.g4_));
}

fn line_multi_vector_geometric_product(self_1342: Line, other_1190: MultiVector) -> MultiVector {
    var self_1343: Line;
    var other_1191: MultiVector;

    self_1343 = self_1342;
    other_1191 = other_1190;
    let _e4: Line = self_1343;
    let _e8: MultiVector = other_1191;
    let _e18: Line = self_1343;
    let _e22: MultiVector = other_1191;
    let _e33: Line = self_1343;
    let _e37: MultiVector = other_1191;
    let _e40: MultiVector = other_1191;
    let _e46: Line = self_1343;
    let _e50: MultiVector = other_1191;
    let _e53: MultiVector = other_1191;
    let _e59: Line = self_1343;
    let _e63: MultiVector = other_1191;
    let _e66: MultiVector = other_1191;
    let _e72: Line = self_1343;
    let _e76: MultiVector = other_1191;
    let _e87: Line = self_1343;
    let _e91: MultiVector = other_1191;
    let _e102: Line = self_1343;
    let _e106: MultiVector = other_1191;
    let _e118: Line = self_1343;
    let _e122: MultiVector = other_1191;
    let _e125: MultiVector = other_1191;
    let _e128: MultiVector = other_1191;
    let _e131: MultiVector = other_1191;
    let _e145: Line = self_1343;
    let _e149: MultiVector = other_1191;
    let _e152: MultiVector = other_1191;
    let _e155: MultiVector = other_1191;
    let _e158: MultiVector = other_1191;
    let _e172: Line = self_1343;
    let _e176: MultiVector = other_1191;
    let _e179: MultiVector = other_1191;
    let _e182: MultiVector = other_1191;
    let _e185: MultiVector = other_1191;
    let _e199: Line = self_1343;
    let _e203: MultiVector = other_1191;
    let _e215: Line = self_1343;
    let _e219: MultiVector = other_1191;
    let _e222: MultiVector = other_1191;
    let _e225: MultiVector = other_1191;
    let _e236: Line = self_1343;
    let _e240: MultiVector = other_1191;
    let _e243: MultiVector = other_1191;
    let _e246: MultiVector = other_1191;
    let _e258: Line = self_1343;
    let _e262: MultiVector = other_1191;
    let _e265: MultiVector = other_1191;
    let _e268: MultiVector = other_1191;
    let _e280: Line = self_1343;
    let _e284: MultiVector = other_1191;
    let _e287: MultiVector = other_1191;
    let _e290: MultiVector = other_1191;
    let _e302: Line = self_1343;
    let _e306: MultiVector = other_1191;
    let _e309: MultiVector = other_1191;
    let _e312: MultiVector = other_1191;
    let _e324: Line = self_1343;
    let _e328: MultiVector = other_1191;
    let _e331: MultiVector = other_1191;
    let _e334: MultiVector = other_1191;
    let _e346: Line = self_1343;
    let _e350: MultiVector = other_1191;
    let _e353: MultiVector = other_1191;
    let _e356: MultiVector = other_1191;
    let _e367: Line = self_1343;
    let _e371: MultiVector = other_1191;
    let _e374: MultiVector = other_1191;
    let _e377: MultiVector = other_1191;
    let _e389: Line = self_1343;
    let _e393: MultiVector = other_1191;
    let _e396: MultiVector = other_1191;
    let _e399: MultiVector = other_1191;
    let _e411: Line = self_1343;
    let _e415: MultiVector = other_1191;
    let _e418: MultiVector = other_1191;
    let _e421: MultiVector = other_1191;
    let _e424: MultiVector = other_1191;
    let _e437: Line = self_1343;
    let _e441: MultiVector = other_1191;
    let _e444: MultiVector = other_1191;
    let _e447: MultiVector = other_1191;
    let _e450: MultiVector = other_1191;
    let _e464: Line = self_1343;
    let _e468: MultiVector = other_1191;
    let _e471: MultiVector = other_1191;
    let _e474: MultiVector = other_1191;
    let _e477: MultiVector = other_1191;
    let _e491: Line = self_1343;
    let _e495: MultiVector = other_1191;
    let _e498: MultiVector = other_1191;
    let _e501: MultiVector = other_1191;
    let _e504: MultiVector = other_1191;
    let _e518: Line = self_1343;
    let _e522: MultiVector = other_1191;
    let _e525: MultiVector = other_1191;
    let _e528: MultiVector = other_1191;
    let _e531: MultiVector = other_1191;
    let _e545: Line = self_1343;
    let _e549: MultiVector = other_1191;
    let _e552: MultiVector = other_1191;
    let _e555: MultiVector = other_1191;
    let _e558: MultiVector = other_1191;
    return MultiVector((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e33.g1_.x) * vec2<f32>(_e37.g3_.x, _e40.g2_.x))) - (vec2<f32>(_e46.g1_.y) * vec2<f32>(_e50.g3_.y, _e53.g2_.y))) - (vec2<f32>(_e59.g1_.z) * vec2<f32>(_e63.g3_.z, _e66.g2_.z))) + ((vec2<f32>(_e72.g0_.x) * vec2<f32>(_e76.g3_.x)) * vec2<f32>(0.0, -(1.0)))), (((((((vec4<f32>(_e87.g0_.y) * vec4<f32>(_e91.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e102.g0_.z) * vec4<f32>(_e106.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e118.g1_.x) * vec4<f32>(_e122.g4_.w, _e125.g1_.z, _e128.g1_.y, _e131.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e145.g1_.y) * vec4<f32>(_e149.g1_.z, _e152.g4_.w, _e155.g1_.x, _e158.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e172.g1_.z) * vec4<f32>(_e176.g1_.y, _e179.g1_.x, _e182.g4_.w, _e185.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e199.g0_.x) * vec4<f32>(_e203.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((vec3<f32>(_e215.g0_.x) * vec3<f32>(_e219.g0_.x, _e222.g3_.z, _e225.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e236.g0_.y) * vec3<f32>(_e240.g3_.z, _e243.g0_.x, _e246.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e258.g0_.z) * vec3<f32>(_e262.g3_.y, _e265.g3_.x, _e268.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e280.g1_.x) * vec3<f32>(_e284.g0_.y, _e287.g2_.z, _e290.g2_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e302.g1_.y) * vec3<f32>(_e306.g2_.z, _e309.g0_.y, _e312.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e324.g1_.z) * vec3<f32>(_e328.g2_.y, _e331.g2_.x, _e334.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((vec3<f32>(_e346.g1_.x) * vec3<f32>(_e350.g0_.x, _e353.g3_.z, _e356.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e367.g1_.y) * vec3<f32>(_e371.g3_.z, _e374.g0_.x, _e377.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e389.g1_.z) * vec3<f32>(_e393.g3_.y, _e396.g3_.x, _e399.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e411.g0_.y) * vec4<f32>(_e415.g1_.z, _e418.g4_.w, _e421.g1_.x, _e424.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e437.g0_.z) * vec4<f32>(_e441.g1_.y, _e444.g1_.x, _e447.g4_.w, _e450.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e464.g1_.x) * vec4<f32>(_e468.g1_.w, _e471.g4_.z, _e474.g4_.y, _e477.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e491.g1_.y) * vec4<f32>(_e495.g4_.z, _e498.g1_.w, _e501.g4_.x, _e504.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e518.g1_.z) * vec4<f32>(_e522.g4_.y, _e525.g4_.x, _e528.g1_.w, _e531.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e545.g0_.x) * vec4<f32>(_e549.g4_.w, _e552.g1_.z, _e555.g1_.y, _e558.g4_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn line_multi_vector_geometric_anti_product(self_1344: Line, other_1192: MultiVector) -> MultiVector {
    var self_1345: Line;
    var other_1193: MultiVector;

    self_1345 = self_1344;
    other_1193 = other_1192;
    let _e6: Line = self_1345;
    let _e10: MultiVector = other_1193;
    let _e13: MultiVector = other_1193;
    let _e19: Line = self_1345;
    let _e23: MultiVector = other_1193;
    let _e26: MultiVector = other_1193;
    let _e32: Line = self_1345;
    let _e36: MultiVector = other_1193;
    let _e39: MultiVector = other_1193;
    let _e45: Line = self_1345;
    let _e49: MultiVector = other_1193;
    let _e60: Line = self_1345;
    let _e64: MultiVector = other_1193;
    let _e75: Line = self_1345;
    let _e79: MultiVector = other_1193;
    let _e90: Line = self_1345;
    let _e94: MultiVector = other_1193;
    let _e97: MultiVector = other_1193;
    let _e100: MultiVector = other_1193;
    let _e103: MultiVector = other_1193;
    let _e116: Line = self_1345;
    let _e120: MultiVector = other_1193;
    let _e123: MultiVector = other_1193;
    let _e126: MultiVector = other_1193;
    let _e129: MultiVector = other_1193;
    let _e143: Line = self_1345;
    let _e147: MultiVector = other_1193;
    let _e150: MultiVector = other_1193;
    let _e153: MultiVector = other_1193;
    let _e156: MultiVector = other_1193;
    let _e170: Line = self_1345;
    let _e174: MultiVector = other_1193;
    let _e177: MultiVector = other_1193;
    let _e180: MultiVector = other_1193;
    let _e183: MultiVector = other_1193;
    let _e196: Line = self_1345;
    let _e200: MultiVector = other_1193;
    let _e203: MultiVector = other_1193;
    let _e206: MultiVector = other_1193;
    let _e209: MultiVector = other_1193;
    let _e222: Line = self_1345;
    let _e226: MultiVector = other_1193;
    let _e229: MultiVector = other_1193;
    let _e232: MultiVector = other_1193;
    let _e235: MultiVector = other_1193;
    let _e248: Line = self_1345;
    let _e252: MultiVector = other_1193;
    let _e255: MultiVector = other_1193;
    let _e258: MultiVector = other_1193;
    let _e269: Line = self_1345;
    let _e273: MultiVector = other_1193;
    let _e276: MultiVector = other_1193;
    let _e279: MultiVector = other_1193;
    let _e291: Line = self_1345;
    let _e295: MultiVector = other_1193;
    let _e298: MultiVector = other_1193;
    let _e301: MultiVector = other_1193;
    let _e313: Line = self_1345;
    let _e317: MultiVector = other_1193;
    let _e320: MultiVector = other_1193;
    let _e323: MultiVector = other_1193;
    let _e334: Line = self_1345;
    let _e338: MultiVector = other_1193;
    let _e341: MultiVector = other_1193;
    let _e344: MultiVector = other_1193;
    let _e356: Line = self_1345;
    let _e360: MultiVector = other_1193;
    let _e363: MultiVector = other_1193;
    let _e366: MultiVector = other_1193;
    let _e378: Line = self_1345;
    let _e382: MultiVector = other_1193;
    let _e385: MultiVector = other_1193;
    let _e388: MultiVector = other_1193;
    let _e400: Line = self_1345;
    let _e404: MultiVector = other_1193;
    let _e407: MultiVector = other_1193;
    let _e410: MultiVector = other_1193;
    let _e422: Line = self_1345;
    let _e426: MultiVector = other_1193;
    let _e429: MultiVector = other_1193;
    let _e432: MultiVector = other_1193;
    let _e444: Line = self_1345;
    let _e448: MultiVector = other_1193;
    let _e451: MultiVector = other_1193;
    let _e454: MultiVector = other_1193;
    let _e457: MultiVector = other_1193;
    let _e470: Line = self_1345;
    let _e474: MultiVector = other_1193;
    let _e477: MultiVector = other_1193;
    let _e480: MultiVector = other_1193;
    let _e483: MultiVector = other_1193;
    let _e497: Line = self_1345;
    let _e501: MultiVector = other_1193;
    let _e504: MultiVector = other_1193;
    let _e507: MultiVector = other_1193;
    let _e510: MultiVector = other_1193;
    let _e524: Line = self_1345;
    let _e528: MultiVector = other_1193;
    let _e541: Line = self_1345;
    let _e545: MultiVector = other_1193;
    let _e558: Line = self_1345;
    let _e562: MultiVector = other_1193;
    return MultiVector(((((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + ((vec2<f32>(_e45.g1_.y) * vec2<f32>(_e49.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e60.g1_.z) * vec2<f32>(_e64.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e75.g1_.x) * vec2<f32>(_e79.g2_.x)) * vec2<f32>(-(1.0), 0.0))), (((((((vec4<f32>(_e90.g0_.x) * vec4<f32>(_e94.g4_.w, _e97.g1_.z, _e100.g1_.y, _e103.g4_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e116.g0_.y) * vec4<f32>(_e120.g1_.z, _e123.g4_.w, _e126.g1_.x, _e129.g4_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e143.g0_.z) * vec4<f32>(_e147.g1_.y, _e150.g1_.x, _e153.g4_.w, _e156.g4_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e170.g1_.y) * vec4<f32>(_e174.g4_.z, _e177.g1_.w, _e180.g4_.x, _e183.g4_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e196.g1_.z) * vec4<f32>(_e200.g4_.y, _e203.g4_.x, _e206.g1_.w, _e209.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e222.g1_.x) * vec4<f32>(_e226.g1_.w, _e229.g4_.z, _e232.g4_.y, _e235.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e248.g0_.x) * vec3<f32>(_e252.g0_.y, _e255.g2_.z, _e258.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e269.g0_.y) * vec3<f32>(_e273.g2_.z, _e276.g0_.y, _e279.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e291.g0_.z) * vec3<f32>(_e295.g2_.y, _e298.g2_.x, _e301.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec3<f32>(_e313.g0_.x) * vec3<f32>(_e317.g0_.x, _e320.g3_.z, _e323.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e334.g0_.y) * vec3<f32>(_e338.g3_.z, _e341.g0_.x, _e344.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e356.g0_.z) * vec3<f32>(_e360.g3_.y, _e363.g3_.x, _e366.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e378.g1_.x) * vec3<f32>(_e382.g0_.y, _e385.g2_.z, _e388.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e400.g1_.y) * vec3<f32>(_e404.g2_.z, _e407.g0_.y, _e410.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e422.g1_.z) * vec3<f32>(_e426.g2_.y, _e429.g2_.x, _e432.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), (((((((vec4<f32>(_e444.g0_.x) * vec4<f32>(_e448.g1_.w, _e451.g4_.z, _e454.g4_.y, _e457.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e470.g0_.y) * vec4<f32>(_e474.g4_.z, _e477.g1_.w, _e480.g4_.x, _e483.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e497.g0_.z) * vec4<f32>(_e501.g4_.y, _e504.g4_.x, _e507.g1_.w, _e510.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e524.g1_.y) * vec4<f32>(_e528.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e541.g1_.z) * vec4<f32>(_e545.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e558.g1_.x) * vec4<f32>(_e562.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn line_multi_vector_scalar_product(self_1346: Line, other_1194: MultiVector) -> Scalar {
    var self_1347: Line;
    var other_1195: MultiVector;

    self_1347 = self_1346;
    other_1195 = other_1194;
    let _e5: Line = self_1347;
    let _e8: MultiVector = other_1195;
    let _e13: Line = self_1347;
    let _e16: MultiVector = other_1195;
    let _e21: Line = self_1347;
    let _e24: MultiVector = other_1195;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn line_multi_vector_dot(self_1348: Line, other_1196: MultiVector) -> Scalar {
    var self_1349: Line;
    var other_1197: MultiVector;

    self_1349 = self_1348;
    other_1197 = other_1196;
    let _e5: Line = self_1349;
    let _e8: MultiVector = other_1197;
    let _e13: Line = self_1349;
    let _e16: MultiVector = other_1197;
    let _e21: Line = self_1349;
    let _e24: MultiVector = other_1197;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn line_multi_vector_anti_scalar_product(self_1350: Line, other_1198: MultiVector) -> AntiScalar {
    var self_1351: Line;
    var other_1199: MultiVector;

    self_1351 = self_1350;
    other_1199 = other_1198;
    let _e5: Line = self_1351;
    let _e8: MultiVector = other_1199;
    let _e13: Line = self_1351;
    let _e16: MultiVector = other_1199;
    let _e21: Line = self_1351;
    let _e24: MultiVector = other_1199;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)));
}

fn line_multi_vector_anti_dot(self_1352: Line, other_1200: MultiVector) -> AntiScalar {
    var self_1353: Line;
    var other_1201: MultiVector;

    self_1353 = self_1352;
    other_1201 = other_1200;
    let _e5: Line = self_1353;
    let _e8: MultiVector = other_1201;
    let _e13: Line = self_1353;
    let _e16: MultiVector = other_1201;
    let _e21: Line = self_1353;
    let _e24: MultiVector = other_1201;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)));
}

fn line_squared_magnitude(self_1354: Line) -> Scalar {
    var self_1355: Line;

    self_1355 = self_1354;
    let _e2: Line = self_1355;
    let _e3: Line = self_1355;
    let _e4: Line = line_reversal(_e3);
    let _e5: Scalar = line_line_scalar_product(_e2, _e4);
    return _e5;
}

fn line_magnitude(self_1356: Line) -> Scalar {
    var self_1357: Line;

    self_1357 = self_1356;
    let _e2: Line = self_1357;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_bulk_norm(self_1358: Line) -> Scalar {
    var self_1359: Line;

    self_1359 = self_1358;
    let _e2: Line = self_1359;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_squared_anti_magnitude(self_1360: Line) -> AntiScalar {
    var self_1361: Line;

    self_1361 = self_1360;
    let _e2: Line = self_1361;
    let _e3: Line = self_1361;
    let _e4: Line = line_anti_reversal(_e3);
    let _e5: AntiScalar = line_line_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn line_weight_norm(self_1362: Line) -> AntiScalar {
    var self_1363: Line;

    self_1363 = self_1362;
    let _e2: Line = self_1363;
    let _e3: AntiScalar = line_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn line_geometric_norm(self_1364: Line) -> HomogeneousMagnitude {
    var self_1365: Line;

    self_1365 = self_1364;
    let _e2: Line = self_1365;
    let _e3: Scalar = line_bulk_norm(_e2);
    let _e4: Line = self_1365;
    let _e5: AntiScalar = line_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn line_scale(self_1366: Line, other_1202: f32) -> Line {
    var self_1367: Line;
    var other_1203: f32;

    self_1367 = self_1366;
    other_1203 = other_1202;
    let _e4: Line = self_1367;
    let _e5: f32 = other_1203;
    let _e7: Line = line_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn line_signum(self_1368: Line) -> Line {
    var self_1369: Line;

    self_1369 = self_1368;
    let _e2: Line = self_1369;
    let _e3: Line = self_1369;
    let _e4: Scalar = line_magnitude(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_inverse(self_1370: Line) -> Line {
    var self_1371: Line;

    self_1371 = self_1370;
    let _e2: Line = self_1371;
    let _e3: Line = line_reversal(_e2);
    let _e4: Line = self_1371;
    let _e5: Scalar = line_squared_magnitude(_e4);
    let _e10: Line = line_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn line_unitize(self_1372: Line) -> Line {
    var self_1373: Line;

    self_1373 = self_1372;
    let _e2: Line = self_1373;
    let _e3: Line = self_1373;
    let _e4: AntiScalar = line_weight_norm(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_attitude(self_1374: Line) -> Point {
    var self_1375: Line;

    self_1375 = self_1374;
    let _e2: Line = self_1375;
    let _e9: Point = line_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn plane_zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_grade(self_1376: Plane) -> i32 {
    return 3;
}

fn plane_anti_grade(self_1377: Plane) -> i32 {
    return 1;
}

fn plane_neg(self_1378: Plane) -> Plane {
    var self_1379: Plane;

    self_1379 = self_1378;
    let _e2: Plane = self_1379;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_automorphism(self_1380: Plane) -> Plane {
    var self_1381: Plane;

    self_1381 = self_1380;
    let _e2: Plane = self_1381;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_reversal(self_1382: Plane) -> Plane {
    var self_1383: Plane;

    self_1383 = self_1382;
    let _e2: Plane = self_1383;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_conjugation(self_1384: Plane) -> Plane {
    var self_1385: Plane;

    self_1385 = self_1384;
    let _e2: Plane = self_1385;
    return Plane(_e2.g0_);
}

fn plane_dual(self_1386: Plane) -> Point {
    var self_1387: Plane;

    self_1387 = self_1386;
    let _e2: Plane = self_1387;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_anti_reversal(self_1388: Plane) -> Plane {
    var self_1389: Plane;

    self_1389 = self_1388;
    let _e2: Plane = self_1389;
    return Plane(_e2.g0_);
}

fn plane_right_complement(self_1390: Plane) -> Point {
    var self_1391: Plane;

    self_1391 = self_1390;
    let _e2: Plane = self_1391;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_left_complement(self_1392: Plane) -> Point {
    var self_1393: Plane;

    self_1393 = self_1392;
    let _e2: Plane = self_1393;
    return Point(_e2.g0_);
}

fn plane_double_complement(self_1394: Plane) -> Plane {
    var self_1395: Plane;

    self_1395 = self_1394;
    let _e2: Plane = self_1395;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_scalar_geometric_product(self_1396: Plane, other_1204: Scalar) -> Plane {
    var self_1397: Plane;
    var other_1205: Scalar;

    self_1397 = self_1396;
    other_1205 = other_1204;
    let _e4: Plane = self_1397;
    let _e6: Scalar = other_1205;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_outer_product(self_1398: Plane, other_1206: Scalar) -> Plane {
    var self_1399: Plane;
    var other_1207: Scalar;

    self_1399 = self_1398;
    other_1207 = other_1206;
    let _e4: Plane = self_1399;
    let _e6: Scalar = other_1207;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_wedge(self_1400: Plane, other_1208: Scalar) -> Plane {
    var self_1401: Plane;
    var other_1209: Scalar;

    self_1401 = self_1400;
    other_1209 = other_1208;
    let _e4: Plane = self_1401;
    let _e6: Scalar = other_1209;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_join(self_1402: Plane, other_1210: Scalar) -> Plane {
    var self_1403: Plane;
    var other_1211: Scalar;

    self_1403 = self_1402;
    other_1211 = other_1210;
    let _e4: Plane = self_1403;
    let _e6: Scalar = other_1211;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_inner_product(self_1404: Plane, other_1212: Scalar) -> Plane {
    var self_1405: Plane;
    var other_1213: Scalar;

    self_1405 = self_1404;
    other_1213 = other_1212;
    let _e4: Plane = self_1405;
    let _e6: Scalar = other_1213;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_right_contraction(self_1406: Plane, other_1214: Scalar) -> Plane {
    var self_1407: Plane;
    var other_1215: Scalar;

    self_1407 = self_1406;
    other_1215 = other_1214;
    let _e4: Plane = self_1407;
    let _e6: Scalar = other_1215;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_geometric_anti_product(self_1408: Plane, other_1216: AntiScalar) -> Plane {
    var self_1409: Plane;
    var other_1217: AntiScalar;

    self_1409 = self_1408;
    other_1217 = other_1216;
    let _e4: Plane = self_1409;
    let _e6: AntiScalar = other_1217;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_regressive_product(self_1410: Plane, other_1218: AntiScalar) -> Plane {
    var self_1411: Plane;
    var other_1219: AntiScalar;

    self_1411 = self_1410;
    other_1219 = other_1218;
    let _e4: Plane = self_1411;
    let _e6: AntiScalar = other_1219;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_anti_wedge(self_1412: Plane, other_1220: AntiScalar) -> Plane {
    var self_1413: Plane;
    var other_1221: AntiScalar;

    self_1413 = self_1412;
    other_1221 = other_1220;
    let _e4: Plane = self_1413;
    let _e6: AntiScalar = other_1221;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_meet(self_1414: Plane, other_1222: AntiScalar) -> Plane {
    var self_1415: Plane;
    var other_1223: AntiScalar;

    self_1415 = self_1414;
    other_1223 = other_1222;
    let _e4: Plane = self_1415;
    let _e6: AntiScalar = other_1223;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_inner_anti_product(self_1416: Plane, other_1224: AntiScalar) -> Plane {
    var self_1417: Plane;
    var other_1225: AntiScalar;

    self_1417 = self_1416;
    other_1225 = other_1224;
    let _e4: Plane = self_1417;
    let _e6: AntiScalar = other_1225;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_right_anti_contraction(self_1418: Plane, other_1226: AntiScalar) -> Plane {
    var self_1419: Plane;
    var other_1227: AntiScalar;

    self_1419 = self_1418;
    other_1227 = other_1226;
    let _e4: Plane = self_1419;
    let _e6: AntiScalar = other_1227;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_homogeneous_magnitude_regressive_product(self_1420: Plane, other_1228: HomogeneousMagnitude) -> Plane {
    var self_1421: Plane;
    var other_1229: HomogeneousMagnitude;

    self_1421 = self_1420;
    other_1229 = other_1228;
    let _e4: Plane = self_1421;
    let _e6: HomogeneousMagnitude = other_1229;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_anti_wedge(self_1422: Plane, other_1230: HomogeneousMagnitude) -> Plane {
    var self_1423: Plane;
    var other_1231: HomogeneousMagnitude;

    self_1423 = self_1422;
    other_1231 = other_1230;
    let _e4: Plane = self_1423;
    let _e6: HomogeneousMagnitude = other_1231;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_meet(self_1424: Plane, other_1232: HomogeneousMagnitude) -> Plane {
    var self_1425: Plane;
    var other_1233: HomogeneousMagnitude;

    self_1425 = self_1424;
    other_1233 = other_1232;
    let _e4: Plane = self_1425;
    let _e6: HomogeneousMagnitude = other_1233;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn plane_homogeneous_magnitude_outer_product(self_1426: Plane, other_1234: HomogeneousMagnitude) -> Plane {
    var self_1427: Plane;
    var other_1235: HomogeneousMagnitude;

    self_1427 = self_1426;
    other_1235 = other_1234;
    let _e4: Plane = self_1427;
    let _e6: HomogeneousMagnitude = other_1235;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_wedge(self_1428: Plane, other_1236: HomogeneousMagnitude) -> Plane {
    var self_1429: Plane;
    var other_1237: HomogeneousMagnitude;

    self_1429 = self_1428;
    other_1237 = other_1236;
    let _e4: Plane = self_1429;
    let _e6: HomogeneousMagnitude = other_1237;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_join(self_1430: Plane, other_1238: HomogeneousMagnitude) -> Plane {
    var self_1431: Plane;
    var other_1239: HomogeneousMagnitude;

    self_1431 = self_1430;
    other_1239 = other_1238;
    let _e4: Plane = self_1431;
    let _e6: HomogeneousMagnitude = other_1239;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_right_contraction(self_1432: Plane, other_1240: HomogeneousMagnitude) -> Plane {
    var self_1433: Plane;
    var other_1241: HomogeneousMagnitude;

    self_1433 = self_1432;
    other_1241 = other_1240;
    let _e4: Plane = self_1433;
    let _e6: HomogeneousMagnitude = other_1241;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_homogeneous_magnitude_right_anti_contraction(self_1434: Plane, other_1242: HomogeneousMagnitude) -> Plane {
    var self_1435: Plane;
    var other_1243: HomogeneousMagnitude;

    self_1435 = self_1434;
    other_1243 = other_1242;
    let _e4: Plane = self_1435;
    let _e6: HomogeneousMagnitude = other_1243;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn plane_point_add(self_1436: Plane, other_1244: Point) -> Flector {
    var self_1437: Plane;
    var other_1245: Point;

    self_1437 = self_1436;
    other_1245 = other_1244;
    let _e4: Point = other_1245;
    let _e6: Plane = self_1437;
    return Flector(_e4.g0_, _e6.g0_);
}

fn plane_point_sub(self_1438: Plane, other_1246: Point) -> Flector {
    var self_1439: Plane;
    var other_1247: Point;

    self_1439 = self_1438;
    other_1247 = other_1246;
    let _e6: Point = other_1247;
    let _e9: Plane = self_1439;
    return Flector((vec4<f32>(0.0) - _e6.g0_), _e9.g0_);
}

fn plane_point_geometric_product(self_1440: Plane, other_1248: Point) -> Motor {
    var self_1441: Plane;
    var other_1249: Point;

    self_1441 = self_1440;
    other_1249 = other_1248;
    let _e4: Plane = self_1441;
    let _e8: Point = other_1249;
    let _e20: Plane = self_1441;
    let _e24: Point = other_1249;
    let _e37: Plane = self_1441;
    let _e41: Point = other_1249;
    let _e54: Plane = self_1441;
    let _e58: Point = other_1249;
    let _e73: Plane = self_1441;
    let _e77: Point = other_1249;
    let _e80: Point = other_1249;
    let _e83: Point = other_1249;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g0_.x) * _e58.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e73.g0_.w) * vec3<f32>(_e77.g0_.x, _e80.g0_.y, _e83.g0_.z))));
}

fn plane_point_regressive_product(self_1442: Plane, other_1250: Point) -> Scalar {
    var self_1443: Plane;
    var other_1251: Point;

    self_1443 = self_1442;
    other_1251 = other_1250;
    let _e5: Plane = self_1443;
    let _e8: Point = other_1251;
    let _e13: Plane = self_1443;
    let _e16: Point = other_1251;
    let _e21: Plane = self_1443;
    let _e24: Point = other_1251;
    let _e29: Plane = self_1443;
    let _e32: Point = other_1251;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_anti_wedge(self_1444: Plane, other_1252: Point) -> Scalar {
    var self_1445: Plane;
    var other_1253: Point;

    self_1445 = self_1444;
    other_1253 = other_1252;
    let _e5: Plane = self_1445;
    let _e8: Point = other_1253;
    let _e13: Plane = self_1445;
    let _e16: Point = other_1253;
    let _e21: Plane = self_1445;
    let _e24: Point = other_1253;
    let _e29: Plane = self_1445;
    let _e32: Point = other_1253;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_meet(self_1446: Plane, other_1254: Point) -> Scalar {
    var self_1447: Plane;
    var other_1255: Point;

    self_1447 = self_1446;
    other_1255 = other_1254;
    let _e5: Plane = self_1447;
    let _e8: Point = other_1255;
    let _e13: Plane = self_1447;
    let _e16: Point = other_1255;
    let _e21: Plane = self_1447;
    let _e24: Point = other_1255;
    let _e29: Plane = self_1447;
    let _e32: Point = other_1255;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_outer_product(self_1448: Plane, other_1256: Point) -> AntiScalar {
    var self_1449: Plane;
    var other_1257: Point;

    self_1449 = self_1448;
    other_1257 = other_1256;
    let _e5: Plane = self_1449;
    let _e8: Point = other_1257;
    let _e13: Plane = self_1449;
    let _e16: Point = other_1257;
    let _e21: Plane = self_1449;
    let _e24: Point = other_1257;
    let _e29: Plane = self_1449;
    let _e32: Point = other_1257;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_wedge(self_1450: Plane, other_1258: Point) -> AntiScalar {
    var self_1451: Plane;
    var other_1259: Point;

    self_1451 = self_1450;
    other_1259 = other_1258;
    let _e5: Plane = self_1451;
    let _e8: Point = other_1259;
    let _e13: Plane = self_1451;
    let _e16: Point = other_1259;
    let _e21: Plane = self_1451;
    let _e24: Point = other_1259;
    let _e29: Plane = self_1451;
    let _e32: Point = other_1259;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_join(self_1452: Plane, other_1260: Point) -> AntiScalar {
    var self_1453: Plane;
    var other_1261: Point;

    self_1453 = self_1452;
    other_1261 = other_1260;
    let _e5: Plane = self_1453;
    let _e8: Point = other_1261;
    let _e13: Plane = self_1453;
    let _e16: Point = other_1261;
    let _e21: Plane = self_1453;
    let _e24: Point = other_1261;
    let _e29: Plane = self_1453;
    let _e32: Point = other_1261;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_point_inner_product(self_1454: Plane, other_1262: Point) -> Line {
    var self_1455: Plane;
    var other_1263: Point;

    self_1455 = self_1454;
    other_1263 = other_1262;
    let _e4: Plane = self_1455;
    let _e8: Point = other_1263;
    let _e11: Point = other_1263;
    let _e14: Point = other_1263;
    let _e25: Plane = self_1455;
    let _e29: Point = other_1263;
    let _e32: Point = other_1263;
    let _e35: Point = other_1263;
    let _e47: Plane = self_1455;
    let _e51: Point = other_1263;
    let _e54: Point = other_1263;
    let _e57: Point = other_1263;
    let _e71: Plane = self_1455;
    let _e75: Point = other_1263;
    let _e78: Point = other_1263;
    let _e81: Point = other_1263;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))));
}

fn plane_point_inner_anti_product(self_1456: Plane, other_1264: Point) -> Line {
    var self_1457: Plane;
    var other_1265: Point;

    self_1457 = self_1456;
    other_1265 = other_1264;
    let _e4: Plane = self_1457;
    let _e7: Plane = self_1457;
    let _e10: Plane = self_1457;
    let _e14: Point = other_1265;
    let _e23: Plane = self_1457;
    let _e27: Point = other_1265;
    let _e30: Point = other_1265;
    let _e33: Point = other_1265;
    let _e44: Plane = self_1457;
    let _e48: Point = other_1265;
    let _e51: Point = other_1265;
    let _e54: Point = other_1265;
    let _e66: Plane = self_1457;
    let _e70: Point = other_1265;
    let _e73: Point = other_1265;
    let _e76: Point = other_1265;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(_e14.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e23.g0_.y) * vec3<f32>(_e27.g0_.z, _e30.g0_.z, _e33.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e44.g0_.z) * vec3<f32>(_e48.g0_.y, _e51.g0_.x, _e54.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_point_right_contraction(self_1458: Plane, other_1266: Point) -> Line {
    var self_1459: Plane;
    var other_1267: Point;

    self_1459 = self_1458;
    other_1267 = other_1266;
    let _e4: Plane = self_1459;
    let _e8: Point = other_1267;
    let _e11: Point = other_1267;
    let _e14: Point = other_1267;
    let _e25: Plane = self_1459;
    let _e29: Point = other_1267;
    let _e32: Point = other_1267;
    let _e35: Point = other_1267;
    let _e47: Plane = self_1459;
    let _e51: Point = other_1267;
    let _e54: Point = other_1267;
    let _e57: Point = other_1267;
    let _e71: Plane = self_1459;
    let _e75: Point = other_1267;
    let _e78: Point = other_1267;
    let _e81: Point = other_1267;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))));
}

fn plane_point_left_anti_contraction(self_1460: Plane, other_1268: Point) -> Line {
    var self_1461: Plane;
    var other_1269: Point;

    self_1461 = self_1460;
    other_1269 = other_1268;
    let _e4: Plane = self_1461;
    let _e7: Plane = self_1461;
    let _e10: Plane = self_1461;
    let _e14: Point = other_1269;
    let _e23: Plane = self_1461;
    let _e27: Point = other_1269;
    let _e30: Point = other_1269;
    let _e33: Point = other_1269;
    let _e44: Plane = self_1461;
    let _e48: Point = other_1269;
    let _e51: Point = other_1269;
    let _e54: Point = other_1269;
    let _e66: Plane = self_1461;
    let _e70: Point = other_1269;
    let _e73: Point = other_1269;
    let _e76: Point = other_1269;
    return Line(((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(_e14.g0_.w)) * vec3<f32>(-(1.0))), ((((vec3<f32>(_e23.g0_.y) * vec3<f32>(_e27.g0_.z, _e30.g0_.z, _e33.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e44.g0_.z) * vec3<f32>(_e48.g0_.y, _e51.g0_.x, _e54.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e66.g0_.x) * vec3<f32>(_e70.g0_.x, _e73.g0_.z, _e76.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_line_geometric_anti_product(self_1462: Plane, other_1270: Line) -> Flector {
    var self_1463: Plane;
    var other_1271: Line;

    self_1463 = self_1462;
    other_1271 = other_1270;
    let _e4: Plane = self_1463;
    let _e8: Line = other_1271;
    let _e11: Line = other_1271;
    let _e14: Line = other_1271;
    let _e17: Line = other_1271;
    let _e30: Plane = self_1463;
    let _e34: Line = other_1271;
    let _e37: Line = other_1271;
    let _e40: Line = other_1271;
    let _e43: Line = other_1271;
    let _e57: Plane = self_1463;
    let _e61: Line = other_1271;
    let _e64: Line = other_1271;
    let _e67: Line = other_1271;
    let _e70: Line = other_1271;
    let _e82: Plane = self_1463;
    let _e86: Line = other_1271;
    let _e89: Line = other_1271;
    let _e92: Line = other_1271;
    let _e95: Line = other_1271;
    let _e109: Plane = self_1463;
    let _e113: Line = other_1271;
    let _e116: Line = other_1271;
    let _e119: Line = other_1271;
    let _e122: Line = other_1271;
    let _e134: Plane = self_1463;
    let _e138: Line = other_1271;
    let _e141: Line = other_1271;
    let _e144: Line = other_1271;
    let _e147: Line = other_1271;
    let _e160: Plane = self_1463;
    let _e164: Line = other_1271;
    let _e167: Line = other_1271;
    let _e170: Line = other_1271;
    let _e173: Line = other_1271;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.z, _e116.g0_.z, _e119.g0_.x, _e122.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g0_.y, _e141.g0_.x, _e144.g0_.y, _e147.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e160.g0_.x) * vec4<f32>(_e164.g0_.x, _e167.g0_.z, _e170.g0_.y, _e173.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_line_regressive_product(self_1464: Plane, other_1272: Line) -> Point {
    var self_1465: Plane;
    var other_1273: Line;

    self_1465 = self_1464;
    other_1273 = other_1272;
    let _e4: Plane = self_1465;
    let _e8: Line = other_1273;
    let _e11: Line = other_1273;
    let _e14: Line = other_1273;
    let _e17: Line = other_1273;
    let _e30: Plane = self_1465;
    let _e34: Line = other_1273;
    let _e37: Line = other_1273;
    let _e40: Line = other_1273;
    let _e43: Line = other_1273;
    let _e57: Plane = self_1465;
    let _e61: Line = other_1273;
    let _e64: Line = other_1273;
    let _e67: Line = other_1273;
    let _e70: Line = other_1273;
    let _e82: Plane = self_1465;
    let _e86: Line = other_1273;
    let _e89: Line = other_1273;
    let _e92: Line = other_1273;
    let _e95: Line = other_1273;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_line_anti_wedge(self_1466: Plane, other_1274: Line) -> Point {
    var self_1467: Plane;
    var other_1275: Line;

    self_1467 = self_1466;
    other_1275 = other_1274;
    let _e4: Plane = self_1467;
    let _e8: Line = other_1275;
    let _e11: Line = other_1275;
    let _e14: Line = other_1275;
    let _e17: Line = other_1275;
    let _e30: Plane = self_1467;
    let _e34: Line = other_1275;
    let _e37: Line = other_1275;
    let _e40: Line = other_1275;
    let _e43: Line = other_1275;
    let _e57: Plane = self_1467;
    let _e61: Line = other_1275;
    let _e64: Line = other_1275;
    let _e67: Line = other_1275;
    let _e70: Line = other_1275;
    let _e82: Plane = self_1467;
    let _e86: Line = other_1275;
    let _e89: Line = other_1275;
    let _e92: Line = other_1275;
    let _e95: Line = other_1275;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_line_meet(self_1468: Plane, other_1276: Line) -> Point {
    var self_1469: Plane;
    var other_1277: Line;

    self_1469 = self_1468;
    other_1277 = other_1276;
    let _e4: Plane = self_1469;
    let _e8: Line = other_1277;
    let _e11: Line = other_1277;
    let _e14: Line = other_1277;
    let _e17: Line = other_1277;
    let _e30: Plane = self_1469;
    let _e34: Line = other_1277;
    let _e37: Line = other_1277;
    let _e40: Line = other_1277;
    let _e43: Line = other_1277;
    let _e57: Plane = self_1469;
    let _e61: Line = other_1277;
    let _e64: Line = other_1277;
    let _e67: Line = other_1277;
    let _e70: Line = other_1277;
    let _e82: Plane = self_1469;
    let _e86: Line = other_1277;
    let _e89: Line = other_1277;
    let _e92: Line = other_1277;
    let _e95: Line = other_1277;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_line_inner_product(self_1470: Plane, other_1278: Line) -> Point {
    var self_1471: Plane;
    var other_1279: Line;

    self_1471 = self_1470;
    other_1279 = other_1278;
    let _e4: Plane = self_1471;
    let _e8: Line = other_1279;
    let _e20: Plane = self_1471;
    let _e24: Line = other_1279;
    let _e37: Plane = self_1471;
    let _e40: Line = other_1279;
    let _e43: Line = other_1279;
    let _e46: Line = other_1279;
    let _e49: Line = other_1279;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_line_inner_anti_product(self_1472: Plane, other_1280: Line) -> Plane {
    var self_1473: Plane;
    var other_1281: Line;

    self_1473 = self_1472;
    other_1281 = other_1280;
    let _e4: Plane = self_1473;
    let _e8: Line = other_1281;
    let _e11: Line = other_1281;
    let _e14: Line = other_1281;
    let _e17: Line = other_1281;
    let _e29: Plane = self_1473;
    let _e33: Line = other_1281;
    let _e36: Line = other_1281;
    let _e39: Line = other_1281;
    let _e42: Line = other_1281;
    let _e55: Plane = self_1473;
    let _e59: Line = other_1281;
    let _e62: Line = other_1281;
    let _e65: Line = other_1281;
    let _e68: Line = other_1281;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_line_right_contraction(self_1474: Plane, other_1282: Line) -> Point {
    var self_1475: Plane;
    var other_1283: Line;

    self_1475 = self_1474;
    other_1283 = other_1282;
    let _e4: Plane = self_1475;
    let _e8: Line = other_1283;
    let _e20: Plane = self_1475;
    let _e24: Line = other_1283;
    let _e37: Plane = self_1475;
    let _e40: Line = other_1283;
    let _e43: Line = other_1283;
    let _e46: Line = other_1283;
    let _e49: Line = other_1283;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_line_left_anti_contraction(self_1476: Plane, other_1284: Line) -> Plane {
    var self_1477: Plane;
    var other_1285: Line;

    self_1477 = self_1476;
    other_1285 = other_1284;
    let _e4: Plane = self_1477;
    let _e8: Line = other_1285;
    let _e11: Line = other_1285;
    let _e14: Line = other_1285;
    let _e17: Line = other_1285;
    let _e29: Plane = self_1477;
    let _e33: Line = other_1285;
    let _e36: Line = other_1285;
    let _e39: Line = other_1285;
    let _e42: Line = other_1285;
    let _e55: Plane = self_1477;
    let _e59: Line = other_1285;
    let _e62: Line = other_1285;
    let _e65: Line = other_1285;
    let _e68: Line = other_1285;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_plane_add(self_1478: Plane, other_1286: Plane) -> Plane {
    var self_1479: Plane;
    var other_1287: Plane;

    self_1479 = self_1478;
    other_1287 = other_1286;
    let _e4: Plane = self_1479;
    let _e6: Plane = other_1287;
    return Plane((_e4.g0_ + _e6.g0_));
}

fn plane_plane_sub(self_1480: Plane, other_1288: Plane) -> Plane {
    var self_1481: Plane;
    var other_1289: Plane;

    self_1481 = self_1480;
    other_1289 = other_1288;
    let _e4: Plane = self_1481;
    let _e6: Plane = other_1289;
    return Plane((_e4.g0_ - _e6.g0_));
}

fn plane_plane_mul(self_1482: Plane, other_1290: Plane) -> Plane {
    var self_1483: Plane;
    var other_1291: Plane;

    self_1483 = self_1482;
    other_1291 = other_1290;
    let _e4: Plane = self_1483;
    let _e6: Plane = other_1291;
    return Plane((_e4.g0_ * _e6.g0_));
}

fn plane_plane_div(self_1484: Plane, other_1292: Plane) -> Plane {
    var self_1485: Plane;
    var other_1293: Plane;

    self_1485 = self_1484;
    other_1293 = other_1292;
    let _e4: Plane = self_1485;
    let _e7: Plane = self_1485;
    let _e10: Plane = self_1485;
    let _e13: Plane = self_1485;
    let _e23: Plane = other_1293;
    let _e26: Plane = other_1293;
    let _e29: Plane = other_1293;
    let _e32: Plane = other_1293;
    return Plane((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn plane_plane_geometric_anti_product(self_1486: Plane, other_1294: Plane) -> Motor {
    var self_1487: Plane;
    var other_1295: Plane;

    self_1487 = self_1486;
    other_1295 = other_1294;
    let _e4: Plane = self_1487;
    let _e8: Plane = other_1295;
    let _e19: Plane = self_1487;
    let _e23: Plane = other_1295;
    let _e35: Plane = self_1487;
    let _e39: Plane = other_1295;
    let _e53: Plane = self_1487;
    let _e57: Plane = other_1295;
    let _e60: Plane = other_1295;
    let _e63: Plane = other_1295;
    let _e69: Plane = self_1487;
    let _e72: Plane = self_1487;
    let _e75: Plane = self_1487;
    let _e79: Plane = other_1295;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((vec3<f32>(0.0) - (vec3<f32>(_e53.g0_.w) * vec3<f32>(_e57.g0_.x, _e60.g0_.y, _e63.g0_.z))) + (vec3<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z) * vec3<f32>(_e79.g0_.w))));
}

fn plane_plane_regressive_product(self_1488: Plane, other_1296: Plane) -> Line {
    var self_1489: Plane;
    var other_1297: Plane;

    self_1489 = self_1488;
    other_1297 = other_1296;
    let _e4: Plane = self_1489;
    let _e8: Plane = other_1297;
    let _e11: Plane = other_1297;
    let _e14: Plane = other_1297;
    let _e25: Plane = self_1489;
    let _e29: Plane = other_1297;
    let _e32: Plane = other_1297;
    let _e35: Plane = other_1297;
    let _e47: Plane = self_1489;
    let _e51: Plane = other_1297;
    let _e54: Plane = other_1297;
    let _e57: Plane = other_1297;
    let _e71: Plane = self_1489;
    let _e75: Plane = other_1297;
    let _e78: Plane = other_1297;
    let _e81: Plane = other_1297;
    let _e87: Plane = self_1489;
    let _e90: Plane = self_1489;
    let _e93: Plane = self_1489;
    let _e97: Plane = other_1297;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))) + (vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3<f32>(_e97.g0_.w))));
}

fn plane_plane_anti_wedge(self_1490: Plane, other_1298: Plane) -> Line {
    var self_1491: Plane;
    var other_1299: Plane;

    self_1491 = self_1490;
    other_1299 = other_1298;
    let _e4: Plane = self_1491;
    let _e8: Plane = other_1299;
    let _e11: Plane = other_1299;
    let _e14: Plane = other_1299;
    let _e25: Plane = self_1491;
    let _e29: Plane = other_1299;
    let _e32: Plane = other_1299;
    let _e35: Plane = other_1299;
    let _e47: Plane = self_1491;
    let _e51: Plane = other_1299;
    let _e54: Plane = other_1299;
    let _e57: Plane = other_1299;
    let _e71: Plane = self_1491;
    let _e75: Plane = other_1299;
    let _e78: Plane = other_1299;
    let _e81: Plane = other_1299;
    let _e87: Plane = self_1491;
    let _e90: Plane = self_1491;
    let _e93: Plane = self_1491;
    let _e97: Plane = other_1299;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))) + (vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3<f32>(_e97.g0_.w))));
}

fn plane_plane_meet(self_1492: Plane, other_1300: Plane) -> Line {
    var self_1493: Plane;
    var other_1301: Plane;

    self_1493 = self_1492;
    other_1301 = other_1300;
    let _e4: Plane = self_1493;
    let _e8: Plane = other_1301;
    let _e11: Plane = other_1301;
    let _e14: Plane = other_1301;
    let _e25: Plane = self_1493;
    let _e29: Plane = other_1301;
    let _e32: Plane = other_1301;
    let _e35: Plane = other_1301;
    let _e47: Plane = self_1493;
    let _e51: Plane = other_1301;
    let _e54: Plane = other_1301;
    let _e57: Plane = other_1301;
    let _e71: Plane = self_1493;
    let _e75: Plane = other_1301;
    let _e78: Plane = other_1301;
    let _e81: Plane = other_1301;
    let _e87: Plane = self_1493;
    let _e90: Plane = self_1493;
    let _e93: Plane = self_1493;
    let _e97: Plane = other_1301;
    return Line(((((vec3<f32>(_e4.g0_.y) * vec3<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.z) * vec3<f32>(_e29.g0_.y, _e32.g0_.x, _e35.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x) * vec3<f32>(_e51.g0_.x, _e54.g0_.z, _e57.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e71.g0_.w) * vec3<f32>(_e75.g0_.x, _e78.g0_.y, _e81.g0_.z))) + (vec3<f32>(_e87.g0_.x, _e90.g0_.y, _e93.g0_.z) * vec3<f32>(_e97.g0_.w))));
}

fn plane_plane_inner_product(self_1494: Plane, other_1302: Plane) -> Scalar {
    var self_1495: Plane;
    var other_1303: Plane;

    self_1495 = self_1494;
    other_1303 = other_1302;
    let _e5: Plane = self_1495;
    let _e8: Plane = other_1303;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_inner_anti_product(self_1496: Plane, other_1304: Plane) -> AntiScalar {
    var self_1497: Plane;
    var other_1305: Plane;

    self_1497 = self_1496;
    other_1305 = other_1304;
    let _e4: Plane = self_1497;
    let _e7: Plane = other_1305;
    let _e11: Plane = self_1497;
    let _e14: Plane = other_1305;
    let _e19: Plane = self_1497;
    let _e22: Plane = other_1305;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_left_contraction(self_1498: Plane, other_1306: Plane) -> Scalar {
    var self_1499: Plane;
    var other_1307: Plane;

    self_1499 = self_1498;
    other_1307 = other_1306;
    let _e5: Plane = self_1499;
    let _e8: Plane = other_1307;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_right_contraction(self_1500: Plane, other_1308: Plane) -> Scalar {
    var self_1501: Plane;
    var other_1309: Plane;

    self_1501 = self_1500;
    other_1309 = other_1308;
    let _e5: Plane = self_1501;
    let _e8: Plane = other_1309;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_left_anti_contraction(self_1502: Plane, other_1310: Plane) -> AntiScalar {
    var self_1503: Plane;
    var other_1311: Plane;

    self_1503 = self_1502;
    other_1311 = other_1310;
    let _e4: Plane = self_1503;
    let _e7: Plane = other_1311;
    let _e11: Plane = self_1503;
    let _e14: Plane = other_1311;
    let _e19: Plane = self_1503;
    let _e22: Plane = other_1311;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_right_anti_contraction(self_1504: Plane, other_1312: Plane) -> AntiScalar {
    var self_1505: Plane;
    var other_1313: Plane;

    self_1505 = self_1504;
    other_1313 = other_1312;
    let _e4: Plane = self_1505;
    let _e7: Plane = other_1313;
    let _e11: Plane = self_1505;
    let _e14: Plane = other_1313;
    let _e19: Plane = self_1505;
    let _e22: Plane = other_1313;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_scalar_product(self_1506: Plane, other_1314: Plane) -> Scalar {
    var self_1507: Plane;
    var other_1315: Plane;

    self_1507 = self_1506;
    other_1315 = other_1314;
    let _e5: Plane = self_1507;
    let _e8: Plane = other_1315;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_dot(self_1508: Plane, other_1316: Plane) -> Scalar {
    var self_1509: Plane;
    var other_1317: Plane;

    self_1509 = self_1508;
    other_1317 = other_1316;
    let _e5: Plane = self_1509;
    let _e8: Plane = other_1317;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn plane_plane_anti_scalar_product(self_1510: Plane, other_1318: Plane) -> AntiScalar {
    var self_1511: Plane;
    var other_1319: Plane;

    self_1511 = self_1510;
    other_1319 = other_1318;
    let _e4: Plane = self_1511;
    let _e7: Plane = other_1319;
    let _e11: Plane = self_1511;
    let _e14: Plane = other_1319;
    let _e19: Plane = self_1511;
    let _e22: Plane = other_1319;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_plane_anti_dot(self_1512: Plane, other_1320: Plane) -> AntiScalar {
    var self_1513: Plane;
    var other_1321: Plane;

    self_1513 = self_1512;
    other_1321 = other_1320;
    let _e4: Plane = self_1513;
    let _e7: Plane = other_1321;
    let _e11: Plane = self_1513;
    let _e14: Plane = other_1321;
    let _e19: Plane = self_1513;
    let _e22: Plane = other_1321;
    return AntiScalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn plane_motor_geometric_anti_product(self_1514: Plane, other_1322: Motor) -> Flector {
    var self_1515: Plane;
    var other_1323: Motor;

    self_1515 = self_1514;
    other_1323 = other_1322;
    let _e4: Plane = self_1515;
    let _e8: Motor = other_1323;
    let _e11: Motor = other_1323;
    let _e14: Motor = other_1323;
    let _e17: Motor = other_1323;
    let _e30: Plane = self_1515;
    let _e34: Motor = other_1323;
    let _e37: Motor = other_1323;
    let _e40: Motor = other_1323;
    let _e43: Motor = other_1323;
    let _e57: Plane = self_1515;
    let _e61: Motor = other_1323;
    let _e72: Plane = self_1515;
    let _e76: Motor = other_1323;
    let _e79: Motor = other_1323;
    let _e82: Motor = other_1323;
    let _e85: Motor = other_1323;
    let _e99: Plane = self_1515;
    let _e103: Motor = other_1323;
    let _e106: Motor = other_1323;
    let _e109: Motor = other_1323;
    let _e112: Motor = other_1323;
    let _e124: Plane = self_1515;
    let _e128: Motor = other_1323;
    let _e131: Motor = other_1323;
    let _e134: Motor = other_1323;
    let _e137: Motor = other_1323;
    let _e150: Plane = self_1515;
    let _e154: Motor = other_1323;
    let _e157: Motor = other_1323;
    let _e160: Motor = other_1323;
    let _e163: Motor = other_1323;
    let _e176: Plane = self_1515;
    let _e179: Motor = other_1323;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * _e61.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e72.g0_.x) * vec4<f32>(_e76.g1_.x, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e99.g0_.x) * vec4<f32>(_e103.g0_.w, _e106.g0_.z, _e109.g0_.y, _e112.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e124.g0_.y) * vec4<f32>(_e128.g0_.z, _e131.g0_.w, _e134.g0_.x, _e137.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e150.g0_.z) * vec4<f32>(_e154.g0_.y, _e157.g0_.x, _e160.g0_.w, _e163.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((_e176.g0_.xxxw * _e179.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_motor_regressive_product(self_1516: Plane, other_1324: Motor) -> Flector {
    var self_1517: Plane;
    var other_1325: Motor;

    self_1517 = self_1516;
    other_1325 = other_1324;
    let _e4: Plane = self_1517;
    let _e8: Motor = other_1325;
    let _e11: Motor = other_1325;
    let _e14: Motor = other_1325;
    let _e17: Motor = other_1325;
    let _e30: Plane = self_1517;
    let _e34: Motor = other_1325;
    let _e37: Motor = other_1325;
    let _e40: Motor = other_1325;
    let _e43: Motor = other_1325;
    let _e57: Plane = self_1517;
    let _e61: Motor = other_1325;
    let _e72: Plane = self_1517;
    let _e76: Motor = other_1325;
    let _e79: Motor = other_1325;
    let _e82: Motor = other_1325;
    let _e85: Motor = other_1325;
    let _e99: Plane = self_1517;
    let _e101: Motor = other_1325;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * _e61.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e72.g0_.x) * vec4<f32>(_e76.g1_.x, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (_e99.g0_ * vec4<f32>(_e101.g0_.w)));
}

fn plane_motor_anti_wedge(self_1518: Plane, other_1326: Motor) -> Flector {
    var self_1519: Plane;
    var other_1327: Motor;

    self_1519 = self_1518;
    other_1327 = other_1326;
    let _e4: Plane = self_1519;
    let _e8: Motor = other_1327;
    let _e11: Motor = other_1327;
    let _e14: Motor = other_1327;
    let _e17: Motor = other_1327;
    let _e30: Plane = self_1519;
    let _e34: Motor = other_1327;
    let _e37: Motor = other_1327;
    let _e40: Motor = other_1327;
    let _e43: Motor = other_1327;
    let _e57: Plane = self_1519;
    let _e61: Motor = other_1327;
    let _e72: Plane = self_1519;
    let _e76: Motor = other_1327;
    let _e79: Motor = other_1327;
    let _e82: Motor = other_1327;
    let _e85: Motor = other_1327;
    let _e99: Plane = self_1519;
    let _e101: Motor = other_1327;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * _e61.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e72.g0_.x) * vec4<f32>(_e76.g1_.x, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (_e99.g0_ * vec4<f32>(_e101.g0_.w)));
}

fn plane_motor_meet(self_1520: Plane, other_1328: Motor) -> Flector {
    var self_1521: Plane;
    var other_1329: Motor;

    self_1521 = self_1520;
    other_1329 = other_1328;
    let _e4: Plane = self_1521;
    let _e8: Motor = other_1329;
    let _e11: Motor = other_1329;
    let _e14: Motor = other_1329;
    let _e17: Motor = other_1329;
    let _e30: Plane = self_1521;
    let _e34: Motor = other_1329;
    let _e37: Motor = other_1329;
    let _e40: Motor = other_1329;
    let _e43: Motor = other_1329;
    let _e57: Plane = self_1521;
    let _e61: Motor = other_1329;
    let _e72: Plane = self_1521;
    let _e76: Motor = other_1329;
    let _e79: Motor = other_1329;
    let _e82: Motor = other_1329;
    let _e85: Motor = other_1329;
    let _e99: Plane = self_1521;
    let _e101: Motor = other_1329;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * _e61.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e72.g0_.x) * vec4<f32>(_e76.g1_.x, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (_e99.g0_ * vec4<f32>(_e101.g0_.w)));
}

fn plane_motor_inner_product(self_1522: Plane, other_1330: Motor) -> Point {
    var self_1523: Plane;
    var other_1331: Motor;

    self_1523 = self_1522;
    other_1331 = other_1330;
    let _e4: Plane = self_1523;
    let _e8: Motor = other_1331;
    let _e20: Plane = self_1523;
    let _e24: Motor = other_1331;
    let _e37: Plane = self_1523;
    let _e41: Motor = other_1331;
    let _e44: Motor = other_1331;
    let _e47: Motor = other_1331;
    let _e50: Motor = other_1331;
    let _e56: Plane = self_1523;
    let _e60: Motor = other_1331;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g1_.x, _e44.g1_.y, _e47.g1_.z, _e50.g0_.w))) + ((vec4<f32>(_e56.g0_.x) * vec4<f32>(_e60.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn plane_motor_inner_anti_product(self_1524: Plane, other_1332: Motor) -> Plane {
    var self_1525: Plane;
    var other_1333: Motor;

    self_1525 = self_1524;
    other_1333 = other_1332;
    let _e4: Plane = self_1525;
    let _e8: Motor = other_1333;
    let _e11: Motor = other_1333;
    let _e14: Motor = other_1333;
    let _e17: Motor = other_1333;
    let _e29: Plane = self_1525;
    let _e33: Motor = other_1333;
    let _e36: Motor = other_1333;
    let _e39: Motor = other_1333;
    let _e42: Motor = other_1333;
    let _e55: Plane = self_1525;
    let _e59: Motor = other_1333;
    let _e62: Motor = other_1333;
    let _e65: Motor = other_1333;
    let _e68: Motor = other_1333;
    let _e81: Plane = self_1525;
    let _e84: Motor = other_1333;
    return Plane((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g0_.z, _e36.g0_.w, _e39.g0_.x, _e42.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e55.g0_.z) * vec4<f32>(_e59.g0_.y, _e62.g0_.x, _e65.g0_.w, _e68.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((_e81.g0_.xxxw * _e84.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_motor_right_contraction(self_1526: Plane, other_1334: Motor) -> Point {
    var self_1527: Plane;
    var other_1335: Motor;

    self_1527 = self_1526;
    other_1335 = other_1334;
    let _e4: Plane = self_1527;
    let _e8: Motor = other_1335;
    let _e20: Plane = self_1527;
    let _e24: Motor = other_1335;
    let _e37: Plane = self_1527;
    let _e40: Motor = other_1335;
    let _e43: Motor = other_1335;
    let _e46: Motor = other_1335;
    let _e49: Motor = other_1335;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_motor_left_anti_contraction(self_1528: Plane, other_1336: Motor) -> Plane {
    var self_1529: Plane;
    var other_1337: Motor;

    self_1529 = self_1528;
    other_1337 = other_1336;
    let _e4: Plane = self_1529;
    let _e8: Motor = other_1337;
    let _e11: Motor = other_1337;
    let _e14: Motor = other_1337;
    let _e17: Motor = other_1337;
    let _e29: Plane = self_1529;
    let _e33: Motor = other_1337;
    let _e36: Motor = other_1337;
    let _e39: Motor = other_1337;
    let _e42: Motor = other_1337;
    let _e55: Plane = self_1529;
    let _e59: Motor = other_1337;
    let _e62: Motor = other_1337;
    let _e65: Motor = other_1337;
    let _e68: Motor = other_1337;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn plane_motor_right_anti_contraction(self_1530: Plane, other_1338: Motor) -> Plane {
    var self_1531: Plane;
    var other_1339: Motor;

    self_1531 = self_1530;
    other_1339 = other_1338;
    let _e4: Plane = self_1531;
    let _e6: Motor = other_1339;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_rotor_geometric_anti_product(self_1532: Plane, other_1340: Rotor) -> Flector {
    var self_1533: Plane;
    var other_1341: Rotor;

    self_1533 = self_1532;
    other_1341 = other_1340;
    let _e4: Plane = self_1533;
    let _e8: Rotor = other_1341;
    let _e20: Plane = self_1533;
    let _e24: Rotor = other_1341;
    let _e37: Plane = self_1533;
    let _e40: Rotor = other_1341;
    let _e52: Plane = self_1533;
    let _e56: Rotor = other_1341;
    let _e67: Plane = self_1533;
    let _e71: Rotor = other_1341;
    let _e83: Plane = self_1533;
    let _e86: Rotor = other_1341;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), ((((vec4<f32>(_e52.g0_.y) * _e56.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e67.g0_.z) * _e71.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e83.g0_.xxxw * _e86.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn plane_rotor_regressive_product(self_1534: Plane, other_1342: Rotor) -> Flector {
    var self_1535: Plane;
    var other_1343: Rotor;

    self_1535 = self_1534;
    other_1343 = other_1342;
    let _e4: Plane = self_1535;
    let _e8: Rotor = other_1343;
    let _e20: Plane = self_1535;
    let _e24: Rotor = other_1343;
    let _e37: Plane = self_1535;
    let _e40: Rotor = other_1343;
    let _e52: Plane = self_1535;
    let _e54: Rotor = other_1343;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (_e52.g0_ * vec4<f32>(_e54.g0_.w)));
}

fn plane_rotor_anti_wedge(self_1536: Plane, other_1344: Rotor) -> Flector {
    var self_1537: Plane;
    var other_1345: Rotor;

    self_1537 = self_1536;
    other_1345 = other_1344;
    let _e4: Plane = self_1537;
    let _e8: Rotor = other_1345;
    let _e20: Plane = self_1537;
    let _e24: Rotor = other_1345;
    let _e37: Plane = self_1537;
    let _e40: Rotor = other_1345;
    let _e52: Plane = self_1537;
    let _e54: Rotor = other_1345;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (_e52.g0_ * vec4<f32>(_e54.g0_.w)));
}

fn plane_rotor_meet(self_1538: Plane, other_1346: Rotor) -> Flector {
    var self_1539: Plane;
    var other_1347: Rotor;

    self_1539 = self_1538;
    other_1347 = other_1346;
    let _e4: Plane = self_1539;
    let _e8: Rotor = other_1347;
    let _e20: Plane = self_1539;
    let _e24: Rotor = other_1347;
    let _e37: Plane = self_1539;
    let _e40: Rotor = other_1347;
    let _e52: Plane = self_1539;
    let _e54: Rotor = other_1347;
    return Flector(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (_e52.g0_ * vec4<f32>(_e54.g0_.w)));
}

fn plane_rotor_inner_anti_product(self_1540: Plane, other_1348: Rotor) -> Plane {
    var self_1541: Plane;
    var other_1349: Rotor;

    self_1541 = self_1540;
    other_1349 = other_1348;
    let _e4: Plane = self_1541;
    let _e8: Rotor = other_1349;
    let _e19: Plane = self_1541;
    let _e23: Rotor = other_1349;
    let _e35: Plane = self_1541;
    let _e38: Rotor = other_1349;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((_e35.g0_.xxxw * _e38.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn plane_rotor_right_anti_contraction(self_1542: Plane, other_1350: Rotor) -> Plane {
    var self_1543: Plane;
    var other_1351: Rotor;

    self_1543 = self_1542;
    other_1351 = other_1350;
    let _e4: Plane = self_1543;
    let _e6: Rotor = other_1351;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_translator_inner_product(self_1544: Plane, other_1352: Translator) -> Point {
    var self_1545: Plane;
    var other_1353: Translator;

    self_1545 = self_1544;
    other_1353 = other_1352;
    let _e4: Plane = self_1545;
    let _e8: Translator = other_1353;
    let _e20: Plane = self_1545;
    let _e24: Translator = other_1353;
    let _e37: Plane = self_1545;
    let _e41: Translator = other_1353;
    let _e45: Plane = self_1545;
    let _e49: Translator = other_1353;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn plane_translator_inner_anti_product(self_1546: Plane, other_1354: Translator) -> Plane {
    var self_1547: Plane;
    var other_1355: Translator;

    self_1547 = self_1546;
    other_1355 = other_1354;
    let _e4: Plane = self_1547;
    let _e8: Translator = other_1355;
    let _e18: Plane = self_1547;
    let _e22: Translator = other_1355;
    let _e33: Plane = self_1547;
    let _e37: Translator = other_1355;
    let _e49: Plane = self_1547;
    let _e53: Translator = other_1355;
    return Plane((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e33.g0_.w) * vec4<f32>(_e37.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e49.g0_.x) * _e53.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn plane_translator_right_contraction(self_1548: Plane, other_1356: Translator) -> Point {
    var self_1549: Plane;
    var other_1357: Translator;

    self_1549 = self_1548;
    other_1357 = other_1356;
    let _e4: Plane = self_1549;
    let _e8: Translator = other_1357;
    let _e20: Plane = self_1549;
    let _e24: Translator = other_1357;
    let _e37: Plane = self_1549;
    let _e40: Translator = other_1357;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_translator_right_anti_contraction(self_1550: Plane, other_1358: Translator) -> Plane {
    var self_1551: Plane;
    var other_1359: Translator;

    self_1551 = self_1550;
    other_1359 = other_1358;
    let _e4: Plane = self_1551;
    let _e6: Translator = other_1359;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn plane_flector_add(self_1552: Plane, other_1360: Flector) -> Flector {
    var self_1553: Plane;
    var other_1361: Flector;

    self_1553 = self_1552;
    other_1361 = other_1360;
    let _e4: Flector = other_1361;
    let _e6: Plane = self_1553;
    let _e8: Flector = other_1361;
    return Flector(_e4.g0_, (_e6.g0_ + _e8.g1_));
}

fn plane_flector_sub(self_1554: Plane, other_1362: Flector) -> Flector {
    var self_1555: Plane;
    var other_1363: Flector;

    self_1555 = self_1554;
    other_1363 = other_1362;
    let _e6: Flector = other_1363;
    let _e9: Plane = self_1555;
    let _e11: Flector = other_1363;
    return Flector((vec4<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_));
}

fn plane_flector_outer_product(self_1556: Plane, other_1364: Flector) -> AntiScalar {
    var self_1557: Plane;
    var other_1365: Flector;

    self_1557 = self_1556;
    other_1365 = other_1364;
    let _e5: Plane = self_1557;
    let _e8: Flector = other_1365;
    let _e13: Plane = self_1557;
    let _e16: Flector = other_1365;
    let _e21: Plane = self_1557;
    let _e24: Flector = other_1365;
    let _e29: Plane = self_1557;
    let _e32: Flector = other_1365;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_wedge(self_1558: Plane, other_1366: Flector) -> AntiScalar {
    var self_1559: Plane;
    var other_1367: Flector;

    self_1559 = self_1558;
    other_1367 = other_1366;
    let _e5: Plane = self_1559;
    let _e8: Flector = other_1367;
    let _e13: Plane = self_1559;
    let _e16: Flector = other_1367;
    let _e21: Plane = self_1559;
    let _e24: Flector = other_1367;
    let _e29: Plane = self_1559;
    let _e32: Flector = other_1367;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_join(self_1560: Plane, other_1368: Flector) -> AntiScalar {
    var self_1561: Plane;
    var other_1369: Flector;

    self_1561 = self_1560;
    other_1369 = other_1368;
    let _e5: Plane = self_1561;
    let _e8: Flector = other_1369;
    let _e13: Plane = self_1561;
    let _e16: Flector = other_1369;
    let _e21: Plane = self_1561;
    let _e24: Flector = other_1369;
    let _e29: Plane = self_1561;
    let _e32: Flector = other_1369;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_flector_inner_anti_product(self_1562: Plane, other_1370: Flector) -> Motor {
    var self_1563: Plane;
    var other_1371: Flector;

    self_1563 = self_1562;
    other_1371 = other_1370;
    let _e4: Plane = self_1563;
    let _e8: Flector = other_1371;
    let _e11: Flector = other_1371;
    let _e14: Flector = other_1371;
    let _e17: Flector = other_1371;
    let _e29: Plane = self_1563;
    let _e33: Flector = other_1371;
    let _e36: Flector = other_1371;
    let _e39: Flector = other_1371;
    let _e42: Flector = other_1371;
    let _e55: Plane = self_1563;
    let _e59: Flector = other_1371;
    let _e62: Flector = other_1371;
    let _e65: Flector = other_1371;
    let _e68: Flector = other_1371;
    let _e81: Plane = self_1563;
    let _e85: Flector = other_1371;
    let _e88: Flector = other_1371;
    let _e91: Flector = other_1371;
    let _e102: Plane = self_1563;
    let _e106: Flector = other_1371;
    let _e109: Flector = other_1371;
    let _e112: Flector = other_1371;
    let _e124: Plane = self_1563;
    let _e128: Flector = other_1371;
    let _e131: Flector = other_1371;
    let _e134: Flector = other_1371;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.w, _e62.g0_.x, _e65.g0_.x, _e68.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e81.g0_.y) * vec3<f32>(_e85.g0_.z, _e88.g0_.z, _e91.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e102.g0_.z) * vec3<f32>(_e106.g0_.y, _e109.g0_.x, _e112.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e124.g0_.x) * vec3<f32>(_e128.g0_.x, _e131.g0_.z, _e134.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_flector_left_contraction(self_1564: Plane, other_1372: Flector) -> Scalar {
    var self_1565: Plane;
    var other_1373: Flector;

    self_1565 = self_1564;
    other_1373 = other_1372;
    let _e5: Plane = self_1565;
    let _e8: Flector = other_1373;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_left_anti_contraction(self_1566: Plane, other_1374: Flector) -> Motor {
    var self_1567: Plane;
    var other_1375: Flector;

    self_1567 = self_1566;
    other_1375 = other_1374;
    let _e4: Plane = self_1567;
    let _e8: Flector = other_1375;
    let _e11: Flector = other_1375;
    let _e14: Flector = other_1375;
    let _e17: Flector = other_1375;
    let _e29: Plane = self_1567;
    let _e33: Flector = other_1375;
    let _e36: Flector = other_1375;
    let _e39: Flector = other_1375;
    let _e42: Flector = other_1375;
    let _e55: Plane = self_1567;
    let _e59: Flector = other_1375;
    let _e62: Flector = other_1375;
    let _e65: Flector = other_1375;
    let _e68: Flector = other_1375;
    let _e81: Plane = self_1567;
    let _e85: Flector = other_1375;
    let _e88: Flector = other_1375;
    let _e91: Flector = other_1375;
    let _e102: Plane = self_1567;
    let _e106: Flector = other_1375;
    let _e109: Flector = other_1375;
    let _e112: Flector = other_1375;
    let _e124: Plane = self_1567;
    let _e128: Flector = other_1375;
    let _e131: Flector = other_1375;
    let _e134: Flector = other_1375;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g0_.w, _e62.g0_.x, _e65.g0_.x, _e68.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e81.g0_.y) * vec3<f32>(_e85.g0_.z, _e88.g0_.z, _e91.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e102.g0_.z) * vec3<f32>(_e106.g0_.y, _e109.g0_.x, _e112.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e124.g0_.x) * vec3<f32>(_e128.g0_.x, _e131.g0_.z, _e134.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_flector_right_anti_contraction(self_1568: Plane, other_1376: Flector) -> AntiScalar {
    var self_1569: Plane;
    var other_1377: Flector;

    self_1569 = self_1568;
    other_1377 = other_1376;
    let _e4: Plane = self_1569;
    let _e7: Flector = other_1377;
    let _e11: Plane = self_1569;
    let _e14: Flector = other_1377;
    let _e19: Plane = self_1569;
    let _e22: Flector = other_1377;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_flector_scalar_product(self_1570: Plane, other_1378: Flector) -> Scalar {
    var self_1571: Plane;
    var other_1379: Flector;

    self_1571 = self_1570;
    other_1379 = other_1378;
    let _e5: Plane = self_1571;
    let _e8: Flector = other_1379;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_dot(self_1572: Plane, other_1380: Flector) -> Scalar {
    var self_1573: Plane;
    var other_1381: Flector;

    self_1573 = self_1572;
    other_1381 = other_1380;
    let _e5: Plane = self_1573;
    let _e8: Flector = other_1381;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g1_.w)));
}

fn plane_flector_anti_scalar_product(self_1574: Plane, other_1382: Flector) -> AntiScalar {
    var self_1575: Plane;
    var other_1383: Flector;

    self_1575 = self_1574;
    other_1383 = other_1382;
    let _e4: Plane = self_1575;
    let _e7: Flector = other_1383;
    let _e11: Plane = self_1575;
    let _e14: Flector = other_1383;
    let _e19: Plane = self_1575;
    let _e22: Flector = other_1383;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_flector_anti_dot(self_1576: Plane, other_1384: Flector) -> AntiScalar {
    var self_1577: Plane;
    var other_1385: Flector;

    self_1577 = self_1576;
    other_1385 = other_1384;
    let _e4: Plane = self_1577;
    let _e7: Flector = other_1385;
    let _e11: Plane = self_1577;
    let _e14: Flector = other_1385;
    let _e19: Plane = self_1577;
    let _e22: Flector = other_1385;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn plane_multi_vector_add(self_1578: Plane, other_1386: MultiVector) -> MultiVector {
    var self_1579: Plane;
    var other_1387: MultiVector;

    self_1579 = self_1578;
    other_1387 = other_1386;
    let _e4: MultiVector = other_1387;
    let _e6: MultiVector = other_1387;
    let _e8: MultiVector = other_1387;
    let _e10: MultiVector = other_1387;
    let _e12: Plane = self_1579;
    let _e14: MultiVector = other_1387;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g0_ + _e14.g4_));
}

fn plane_multi_vector_sub(self_1580: Plane, other_1388: MultiVector) -> MultiVector {
    var self_1581: Plane;
    var other_1389: MultiVector;

    self_1581 = self_1580;
    other_1389 = other_1388;
    let _e6: MultiVector = other_1389;
    let _e11: MultiVector = other_1389;
    let _e16: MultiVector = other_1389;
    let _e21: MultiVector = other_1389;
    let _e24: Plane = self_1581;
    let _e26: MultiVector = other_1389;
    return MultiVector((vec2<f32>(0.0) - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec3<f32>(0.0) - _e16.g2_), (vec3<f32>(0.0) - _e21.g3_), (_e24.g0_ - _e26.g4_));
}

fn plane_multi_vector_geometric_product(self_1582: Plane, other_1390: MultiVector) -> MultiVector {
    var self_1583: Plane;
    var other_1391: MultiVector;

    self_1583 = self_1582;
    other_1391 = other_1390;
    let _e4: Plane = self_1583;
    let _e8: MultiVector = other_1391;
    let _e18: Plane = self_1583;
    let _e22: MultiVector = other_1391;
    let _e33: Plane = self_1583;
    let _e37: MultiVector = other_1391;
    let _e40: MultiVector = other_1391;
    let _e46: Plane = self_1583;
    let _e50: MultiVector = other_1391;
    let _e61: Plane = self_1583;
    let _e65: MultiVector = other_1391;
    let _e77: Plane = self_1583;
    let _e81: MultiVector = other_1391;
    let _e94: Plane = self_1583;
    let _e98: MultiVector = other_1391;
    let _e101: MultiVector = other_1391;
    let _e104: MultiVector = other_1391;
    let _e107: MultiVector = other_1391;
    let _e113: Plane = self_1583;
    let _e117: MultiVector = other_1391;
    let _e130: Plane = self_1583;
    let _e134: MultiVector = other_1391;
    let _e137: MultiVector = other_1391;
    let _e140: MultiVector = other_1391;
    let _e151: Plane = self_1583;
    let _e155: MultiVector = other_1391;
    let _e158: MultiVector = other_1391;
    let _e161: MultiVector = other_1391;
    let _e173: Plane = self_1583;
    let _e177: MultiVector = other_1391;
    let _e180: MultiVector = other_1391;
    let _e183: MultiVector = other_1391;
    let _e195: Plane = self_1583;
    let _e199: MultiVector = other_1391;
    let _e202: MultiVector = other_1391;
    let _e205: MultiVector = other_1391;
    let _e213: Plane = self_1583;
    let _e217: MultiVector = other_1391;
    let _e220: MultiVector = other_1391;
    let _e223: MultiVector = other_1391;
    let _e229: Plane = self_1583;
    let _e233: MultiVector = other_1391;
    let _e236: MultiVector = other_1391;
    let _e239: MultiVector = other_1391;
    let _e242: MultiVector = other_1391;
    let _e254: Plane = self_1583;
    let _e258: MultiVector = other_1391;
    let _e261: MultiVector = other_1391;
    let _e264: MultiVector = other_1391;
    let _e267: MultiVector = other_1391;
    let _e280: Plane = self_1583;
    let _e284: MultiVector = other_1391;
    let _e287: MultiVector = other_1391;
    let _e290: MultiVector = other_1391;
    let _e293: MultiVector = other_1391;
    let _e299: Plane = self_1583;
    let _e303: MultiVector = other_1391;
    let _e306: MultiVector = other_1391;
    let _e309: MultiVector = other_1391;
    let _e312: MultiVector = other_1391;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e33.g0_.w) * vec2<f32>(_e37.g4_.w, _e40.g1_.w))) + ((vec2<f32>(_e46.g0_.x) * vec2<f32>(_e50.g1_.x)) * vec2<f32>(0.0, -(1.0)))), (((((vec4<f32>(_e61.g0_.y) * vec4<f32>(_e65.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e77.g0_.z) * vec4<f32>(_e81.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e94.g0_.w) * vec4<f32>(_e98.g3_.x, _e101.g3_.y, _e104.g3_.z, _e107.g0_.y))) + ((vec4<f32>(_e113.g0_.x) * vec4<f32>(_e117.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec3<f32>(_e130.g0_.x) * vec3<f32>(_e134.g4_.w, _e137.g1_.z, _e140.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e151.g0_.y) * vec3<f32>(_e155.g1_.z, _e158.g4_.w, _e161.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e173.g0_.z) * vec3<f32>(_e177.g1_.y, _e180.g1_.x, _e183.g4_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e195.g0_.w) * vec3<f32>(_e199.g4_.x, _e202.g4_.y, _e205.g4_.z))), (vec3<f32>(0.0) - (vec3<f32>(_e213.g0_.w) * vec3<f32>(_e217.g1_.x, _e220.g1_.y, _e223.g1_.z))), (((((vec4<f32>(_e229.g0_.y) * vec4<f32>(_e233.g3_.z, _e236.g0_.x, _e239.g3_.x, _e242.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0)) + ((vec4<f32>(_e254.g0_.z) * vec4<f32>(_e258.g3_.y, _e261.g3_.x, _e264.g0_.x, _e267.g3_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e280.g0_.w) * vec4<f32>(_e284.g2_.x, _e287.g2_.y, _e290.g2_.z, _e293.g0_.x))) + ((vec4<f32>(_e299.g0_.x) * vec4<f32>(_e303.g0_.x, _e306.g3_.z, _e309.g3_.y, _e312.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))));
}

fn plane_multi_vector_geometric_anti_product(self_1584: Plane, other_1392: MultiVector) -> MultiVector {
    var self_1585: Plane;
    var other_1393: MultiVector;

    self_1585 = self_1584;
    other_1393 = other_1392;
    let _e4: Plane = self_1585;
    let _e8: MultiVector = other_1393;
    let _e11: MultiVector = other_1393;
    let _e21: Plane = self_1585;
    let _e25: MultiVector = other_1393;
    let _e28: MultiVector = other_1393;
    let _e39: Plane = self_1585;
    let _e43: MultiVector = other_1393;
    let _e46: MultiVector = other_1393;
    let _e57: Plane = self_1585;
    let _e60: Plane = self_1585;
    let _e64: MultiVector = other_1393;
    let _e67: MultiVector = other_1393;
    let _e78: Plane = self_1585;
    let _e82: MultiVector = other_1393;
    let _e85: MultiVector = other_1393;
    let _e88: MultiVector = other_1393;
    let _e91: MultiVector = other_1393;
    let _e105: Plane = self_1585;
    let _e109: MultiVector = other_1393;
    let _e112: MultiVector = other_1393;
    let _e115: MultiVector = other_1393;
    let _e118: MultiVector = other_1393;
    let _e133: Plane = self_1585;
    let _e137: MultiVector = other_1393;
    let _e140: MultiVector = other_1393;
    let _e143: MultiVector = other_1393;
    let _e146: MultiVector = other_1393;
    let _e161: Plane = self_1585;
    let _e164: MultiVector = other_1393;
    let _e167: MultiVector = other_1393;
    let _e170: MultiVector = other_1393;
    let _e173: MultiVector = other_1393;
    let _e185: Plane = self_1585;
    let _e189: MultiVector = other_1393;
    let _e192: MultiVector = other_1393;
    let _e195: MultiVector = other_1393;
    let _e207: Plane = self_1585;
    let _e211: MultiVector = other_1393;
    let _e214: MultiVector = other_1393;
    let _e217: MultiVector = other_1393;
    let _e230: Plane = self_1585;
    let _e234: MultiVector = other_1393;
    let _e237: MultiVector = other_1393;
    let _e240: MultiVector = other_1393;
    let _e253: Plane = self_1585;
    let _e257: MultiVector = other_1393;
    let _e260: MultiVector = other_1393;
    let _e263: MultiVector = other_1393;
    let _e274: Plane = self_1585;
    let _e278: MultiVector = other_1393;
    let _e281: MultiVector = other_1393;
    let _e284: MultiVector = other_1393;
    let _e296: Plane = self_1585;
    let _e300: MultiVector = other_1393;
    let _e303: MultiVector = other_1393;
    let _e306: MultiVector = other_1393;
    let _e318: Plane = self_1585;
    let _e322: MultiVector = other_1393;
    let _e325: MultiVector = other_1393;
    let _e328: MultiVector = other_1393;
    let _e334: Plane = self_1585;
    let _e338: MultiVector = other_1393;
    let _e341: MultiVector = other_1393;
    let _e344: MultiVector = other_1393;
    let _e347: MultiVector = other_1393;
    let _e359: Plane = self_1585;
    let _e363: MultiVector = other_1393;
    let _e366: MultiVector = other_1393;
    let _e369: MultiVector = other_1393;
    let _e372: MultiVector = other_1393;
    let _e385: Plane = self_1585;
    let _e389: MultiVector = other_1393;
    let _e392: MultiVector = other_1393;
    let _e395: MultiVector = other_1393;
    let _e398: MultiVector = other_1393;
    let _e411: Plane = self_1585;
    let _e414: MultiVector = other_1393;
    let _e417: MultiVector = other_1393;
    let _e420: MultiVector = other_1393;
    let _e423: MultiVector = other_1393;
    return MultiVector((((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) * vec2<f32>(-(1.0), 1.0)) + ((vec2<f32>(_e21.g0_.y) * vec2<f32>(_e25.g1_.y, _e28.g4_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e39.g0_.z) * vec2<f32>(_e43.g1_.z, _e46.g4_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e57.g0_.w, _e60.g0_.x) * vec2<f32>(_e64.g1_.w, _e67.g1_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e78.g0_.x) * vec4<f32>(_e82.g0_.x, _e85.g3_.z, _e88.g3_.y, _e91.g2_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e105.g0_.y) * vec4<f32>(_e109.g3_.z, _e112.g0_.x, _e115.g3_.x, _e118.g2_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e133.g0_.z) * vec4<f32>(_e137.g3_.y, _e140.g3_.x, _e143.g0_.x, _e146.g2_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((_e161.g0_.wwwx * vec4<f32>(_e164.g2_.x, _e167.g2_.y, _e170.g2_.z, _e173.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(_e185.g0_.x) * vec3<f32>(_e189.g1_.w, _e192.g4_.z, _e195.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e207.g0_.y) * vec3<f32>(_e211.g4_.z, _e214.g1_.w, _e217.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e230.g0_.z) * vec3<f32>(_e234.g4_.y, _e237.g4_.x, _e240.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((vec3<f32>(_e253.g0_.x) * vec3<f32>(_e257.g4_.w, _e260.g1_.z, _e263.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e274.g0_.y) * vec3<f32>(_e278.g1_.z, _e281.g4_.w, _e284.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e296.g0_.z) * vec3<f32>(_e300.g1_.y, _e303.g1_.x, _e306.g4_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e318.g0_.w) * vec3<f32>(_e322.g4_.x, _e325.g4_.y, _e328.g4_.z))), (((((vec4<f32>(_e334.g0_.x) * vec4<f32>(_e338.g0_.y, _e341.g2_.z, _e344.g2_.y, _e347.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e359.g0_.y) * vec4<f32>(_e363.g2_.z, _e366.g0_.y, _e369.g2_.x, _e372.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e385.g0_.z) * vec4<f32>(_e389.g2_.y, _e392.g2_.x, _e395.g0_.y, _e398.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((_e411.g0_.xxxw * vec4<f32>(_e414.g0_.x, _e417.g0_.x, _e420.g0_.x, _e423.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn plane_multi_vector_scalar_product(self_1586: Plane, other_1394: MultiVector) -> Scalar {
    var self_1587: Plane;
    var other_1395: MultiVector;

    self_1587 = self_1586;
    other_1395 = other_1394;
    let _e5: Plane = self_1587;
    let _e8: MultiVector = other_1395;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g4_.w)));
}

fn plane_multi_vector_dot(self_1588: Plane, other_1396: MultiVector) -> Scalar {
    var self_1589: Plane;
    var other_1397: MultiVector;

    self_1589 = self_1588;
    other_1397 = other_1396;
    let _e5: Plane = self_1589;
    let _e8: MultiVector = other_1397;
    return Scalar((0.0 - (_e5.g0_.w * _e8.g4_.w)));
}

fn plane_multi_vector_anti_scalar_product(self_1590: Plane, other_1398: MultiVector) -> AntiScalar {
    var self_1591: Plane;
    var other_1399: MultiVector;

    self_1591 = self_1590;
    other_1399 = other_1398;
    let _e4: Plane = self_1591;
    let _e7: MultiVector = other_1399;
    let _e11: Plane = self_1591;
    let _e14: MultiVector = other_1399;
    let _e19: Plane = self_1591;
    let _e22: MultiVector = other_1399;
    return AntiScalar((((_e4.g0_.x * _e7.g4_.x) + (_e11.g0_.y * _e14.g4_.y)) + (_e19.g0_.z * _e22.g4_.z)));
}

fn plane_multi_vector_anti_dot(self_1592: Plane, other_1400: MultiVector) -> AntiScalar {
    var self_1593: Plane;
    var other_1401: MultiVector;

    self_1593 = self_1592;
    other_1401 = other_1400;
    let _e4: Plane = self_1593;
    let _e7: MultiVector = other_1401;
    let _e11: Plane = self_1593;
    let _e14: MultiVector = other_1401;
    let _e19: Plane = self_1593;
    let _e22: MultiVector = other_1401;
    return AntiScalar((((_e4.g0_.x * _e7.g4_.x) + (_e11.g0_.y * _e14.g4_.y)) + (_e19.g0_.z * _e22.g4_.z)));
}

fn plane_squared_magnitude(self_1594: Plane) -> Scalar {
    var self_1595: Plane;

    self_1595 = self_1594;
    let _e2: Plane = self_1595;
    let _e3: Plane = self_1595;
    let _e4: Plane = plane_reversal(_e3);
    let _e5: Scalar = plane_plane_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_magnitude(self_1596: Plane) -> Scalar {
    var self_1597: Plane;

    self_1597 = self_1596;
    let _e2: Plane = self_1597;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_bulk_norm(self_1598: Plane) -> Scalar {
    var self_1599: Plane;

    self_1599 = self_1598;
    let _e2: Plane = self_1599;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_squared_anti_magnitude(self_1600: Plane) -> AntiScalar {
    var self_1601: Plane;

    self_1601 = self_1600;
    let _e2: Plane = self_1601;
    let _e3: Plane = self_1601;
    let _e4: Plane = plane_anti_reversal(_e3);
    let _e5: AntiScalar = plane_plane_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_weight_norm(self_1602: Plane) -> AntiScalar {
    var self_1603: Plane;

    self_1603 = self_1602;
    let _e2: Plane = self_1603;
    let _e3: AntiScalar = plane_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn plane_geometric_norm(self_1604: Plane) -> HomogeneousMagnitude {
    var self_1605: Plane;

    self_1605 = self_1604;
    let _e2: Plane = self_1605;
    let _e3: Scalar = plane_bulk_norm(_e2);
    let _e4: Plane = self_1605;
    let _e5: AntiScalar = plane_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn plane_scale(self_1606: Plane, other_1402: f32) -> Plane {
    var self_1607: Plane;
    var other_1403: f32;

    self_1607 = self_1606;
    other_1403 = other_1402;
    let _e4: Plane = self_1607;
    let _e5: f32 = other_1403;
    let _e7: Plane = plane_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn plane_signum(self_1608: Plane) -> Plane {
    var self_1609: Plane;

    self_1609 = self_1608;
    let _e2: Plane = self_1609;
    let _e3: Plane = self_1609;
    let _e4: Scalar = plane_magnitude(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_inverse(self_1610: Plane) -> Plane {
    var self_1611: Plane;

    self_1611 = self_1610;
    let _e2: Plane = self_1611;
    let _e3: Plane = plane_reversal(_e2);
    let _e4: Plane = self_1611;
    let _e5: Scalar = plane_squared_magnitude(_e4);
    let _e10: Plane = plane_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn plane_unitize(self_1612: Plane) -> Plane {
    var self_1613: Plane;

    self_1613 = self_1612;
    let _e2: Plane = self_1613;
    let _e3: Plane = self_1613;
    let _e4: AntiScalar = plane_weight_norm(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_attitude(self_1614: Plane) -> Line {
    var self_1615: Plane;

    self_1615 = self_1614;
    let _e2: Plane = self_1615;
    let _e9: Line = plane_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn motor_zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn motor_one() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn motor_neg(self_1616: Motor) -> Motor {
    var self_1617: Motor;

    self_1617 = self_1616;
    let _e2: Motor = self_1617;
    let _e8: Motor = self_1617;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn motor_automorphism(self_1618: Motor) -> Motor {
    var self_1619: Motor;

    self_1619 = self_1618;
    let _e2: Motor = self_1619;
    let _e4: Motor = self_1619;
    return Motor(_e2.g0_, _e4.g1_);
}

fn motor_reversal(self_1620: Motor) -> Motor {
    var self_1621: Motor;

    self_1621 = self_1620;
    let _e2: Motor = self_1621;
    let _e13: Motor = self_1621;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)), (_e13.g1_ * vec3<f32>(-(1.0))));
}

fn motor_conjugation(self_1622: Motor) -> Motor {
    var self_1623: Motor;

    self_1623 = self_1622;
    let _e2: Motor = self_1623;
    let _e13: Motor = self_1623;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)), (_e13.g1_ * vec3<f32>(-(1.0))));
}

fn motor_anti_reversal(self_1624: Motor) -> Motor {
    var self_1625: Motor;

    self_1625 = self_1624;
    let _e2: Motor = self_1625;
    let _e13: Motor = self_1625;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)), (_e13.g1_ * vec3<f32>(-(1.0))));
}

fn motor_double_complement(self_1626: Motor) -> Motor {
    var self_1627: Motor;

    self_1627 = self_1626;
    let _e2: Motor = self_1627;
    let _e4: Motor = self_1627;
    return Motor(_e2.g0_, _e4.g1_);
}

fn motor_scalar_geometric_product(self_1628: Motor, other_1404: Scalar) -> Motor {
    var self_1629: Motor;
    var other_1405: Scalar;

    self_1629 = self_1628;
    other_1405 = other_1404;
    let _e4: Motor = self_1629;
    let _e6: Scalar = other_1405;
    let _e10: Motor = self_1629;
    let _e12: Scalar = other_1405;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_scalar_regressive_product(self_1630: Motor, other_1406: Scalar) -> Scalar {
    var self_1631: Motor;
    var other_1407: Scalar;

    self_1631 = self_1630;
    other_1407 = other_1406;
    let _e4: Motor = self_1631;
    let _e7: Scalar = other_1407;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_anti_wedge(self_1632: Motor, other_1408: Scalar) -> Scalar {
    var self_1633: Motor;
    var other_1409: Scalar;

    self_1633 = self_1632;
    other_1409 = other_1408;
    let _e4: Motor = self_1633;
    let _e7: Scalar = other_1409;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_meet(self_1634: Motor, other_1410: Scalar) -> Scalar {
    var self_1635: Motor;
    var other_1411: Scalar;

    self_1635 = self_1634;
    other_1411 = other_1410;
    let _e4: Motor = self_1635;
    let _e7: Scalar = other_1411;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn motor_scalar_outer_product(self_1636: Motor, other_1412: Scalar) -> Motor {
    var self_1637: Motor;
    var other_1413: Scalar;

    self_1637 = self_1636;
    other_1413 = other_1412;
    let _e4: Motor = self_1637;
    let _e6: Scalar = other_1413;
    let _e10: Motor = self_1637;
    let _e12: Scalar = other_1413;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_scalar_wedge(self_1638: Motor, other_1414: Scalar) -> Motor {
    var self_1639: Motor;
    var other_1415: Scalar;

    self_1639 = self_1638;
    other_1415 = other_1414;
    let _e4: Motor = self_1639;
    let _e6: Scalar = other_1415;
    let _e10: Motor = self_1639;
    let _e12: Scalar = other_1415;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_scalar_join(self_1640: Motor, other_1416: Scalar) -> Motor {
    var self_1641: Motor;
    var other_1417: Scalar;

    self_1641 = self_1640;
    other_1417 = other_1416;
    let _e4: Motor = self_1641;
    let _e6: Scalar = other_1417;
    let _e10: Motor = self_1641;
    let _e12: Scalar = other_1417;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_scalar_inner_product(self_1642: Motor, other_1418: Scalar) -> Motor {
    var self_1643: Motor;
    var other_1419: Scalar;

    self_1643 = self_1642;
    other_1419 = other_1418;
    let _e4: Motor = self_1643;
    let _e6: Scalar = other_1419;
    let _e10: Motor = self_1643;
    let _e12: Scalar = other_1419;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_scalar_right_contraction(self_1644: Motor, other_1420: Scalar) -> Motor {
    var self_1645: Motor;
    var other_1421: Scalar;

    self_1645 = self_1644;
    other_1421 = other_1420;
    let _e4: Motor = self_1645;
    let _e6: Scalar = other_1421;
    let _e10: Motor = self_1645;
    let _e12: Scalar = other_1421;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_into(self_1646: Motor) -> AntiScalar {
    var self_1647: Motor;

    self_1647 = self_1646;
    let _e2: Motor = self_1647;
    return AntiScalar(_e2.g0_.w);
}

fn motor_anti_scalar_add(self_1648: Motor, other_1422: AntiScalar) -> Motor {
    var self_1649: Motor;
    var other_1423: AntiScalar;

    self_1649 = self_1648;
    other_1423 = other_1422;
    let _e4: Motor = self_1649;
    let _e6: AntiScalar = other_1423;
    let _e16: Motor = self_1649;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_sub(self_1650: Motor, other_1424: AntiScalar) -> Motor {
    var self_1651: Motor;
    var other_1425: AntiScalar;

    self_1651 = self_1650;
    other_1425 = other_1424;
    let _e4: Motor = self_1651;
    let _e6: AntiScalar = other_1425;
    let _e16: Motor = self_1651;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), _e16.g1_);
}

fn motor_anti_scalar_geometric_anti_product(self_1652: Motor, other_1426: AntiScalar) -> Motor {
    var self_1653: Motor;
    var other_1427: AntiScalar;

    self_1653 = self_1652;
    other_1427 = other_1426;
    let _e4: Motor = self_1653;
    let _e6: AntiScalar = other_1427;
    let _e10: Motor = self_1653;
    let _e12: AntiScalar = other_1427;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_regressive_product(self_1654: Motor, other_1428: AntiScalar) -> Motor {
    var self_1655: Motor;
    var other_1429: AntiScalar;

    self_1655 = self_1654;
    other_1429 = other_1428;
    let _e4: Motor = self_1655;
    let _e6: AntiScalar = other_1429;
    let _e10: Motor = self_1655;
    let _e12: AntiScalar = other_1429;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_anti_wedge(self_1656: Motor, other_1430: AntiScalar) -> Motor {
    var self_1657: Motor;
    var other_1431: AntiScalar;

    self_1657 = self_1656;
    other_1431 = other_1430;
    let _e4: Motor = self_1657;
    let _e6: AntiScalar = other_1431;
    let _e10: Motor = self_1657;
    let _e12: AntiScalar = other_1431;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_meet(self_1658: Motor, other_1432: AntiScalar) -> Motor {
    var self_1659: Motor;
    var other_1433: AntiScalar;

    self_1659 = self_1658;
    other_1433 = other_1432;
    let _e4: Motor = self_1659;
    let _e6: AntiScalar = other_1433;
    let _e10: Motor = self_1659;
    let _e12: AntiScalar = other_1433;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_inner_anti_product(self_1660: Motor, other_1434: AntiScalar) -> Motor {
    var self_1661: Motor;
    var other_1435: AntiScalar;

    self_1661 = self_1660;
    other_1435 = other_1434;
    let _e4: Motor = self_1661;
    let _e6: AntiScalar = other_1435;
    let _e10: Motor = self_1661;
    let _e12: AntiScalar = other_1435;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_left_anti_contraction(self_1662: Motor, other_1436: AntiScalar) -> AntiScalar {
    var self_1663: Motor;
    var other_1437: AntiScalar;

    self_1663 = self_1662;
    other_1437 = other_1436;
    let _e4: Motor = self_1663;
    let _e7: AntiScalar = other_1437;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_anti_scalar_right_anti_contraction(self_1664: Motor, other_1438: AntiScalar) -> Motor {
    var self_1665: Motor;
    var other_1439: AntiScalar;

    self_1665 = self_1664;
    other_1439 = other_1438;
    let _e4: Motor = self_1665;
    let _e6: AntiScalar = other_1439;
    let _e10: Motor = self_1665;
    let _e12: AntiScalar = other_1439;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn motor_anti_scalar_anti_scalar_product(self_1666: Motor, other_1440: AntiScalar) -> AntiScalar {
    var self_1667: Motor;
    var other_1441: AntiScalar;

    self_1667 = self_1666;
    other_1441 = other_1440;
    let _e4: Motor = self_1667;
    let _e7: AntiScalar = other_1441;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_anti_scalar_anti_dot(self_1668: Motor, other_1442: AntiScalar) -> AntiScalar {
    var self_1669: Motor;
    var other_1443: AntiScalar;

    self_1669 = self_1668;
    other_1443 = other_1442;
    let _e4: Motor = self_1669;
    let _e7: AntiScalar = other_1443;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn motor_homogeneous_magnitude_geometric_product(self_1670: Motor, other_1444: HomogeneousMagnitude) -> Motor {
    var self_1671: Motor;
    var other_1445: HomogeneousMagnitude;

    self_1671 = self_1670;
    other_1445 = other_1444;
    let _e4: Motor = self_1671;
    let _e8: HomogeneousMagnitude = other_1445;
    let _e19: Motor = self_1671;
    let _e23: HomogeneousMagnitude = other_1445;
    let _e35: Motor = self_1671;
    let _e39: HomogeneousMagnitude = other_1445;
    let _e51: Motor = self_1671;
    let _e53: HomogeneousMagnitude = other_1445;
    let _e59: Motor = self_1671;
    let _e61: HomogeneousMagnitude = other_1445;
    return Motor((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g1_.y) * vec4<f32>(_e23.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.x))), (_e59.g1_ * vec3<f32>(_e61.g0_.x)));
}

fn motor_homogeneous_magnitude_outer_product(self_1672: Motor, other_1446: HomogeneousMagnitude) -> Motor {
    var self_1673: Motor;
    var other_1447: HomogeneousMagnitude;

    self_1673 = self_1672;
    other_1447 = other_1446;
    let _e4: Motor = self_1673;
    let _e6: HomogeneousMagnitude = other_1447;
    let _e11: Motor = self_1673;
    let _e13: HomogeneousMagnitude = other_1447;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_wedge(self_1674: Motor, other_1448: HomogeneousMagnitude) -> Motor {
    var self_1675: Motor;
    var other_1449: HomogeneousMagnitude;

    self_1675 = self_1674;
    other_1449 = other_1448;
    let _e4: Motor = self_1675;
    let _e6: HomogeneousMagnitude = other_1449;
    let _e11: Motor = self_1675;
    let _e13: HomogeneousMagnitude = other_1449;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_join(self_1676: Motor, other_1450: HomogeneousMagnitude) -> Motor {
    var self_1677: Motor;
    var other_1451: HomogeneousMagnitude;

    self_1677 = self_1676;
    other_1451 = other_1450;
    let _e4: Motor = self_1677;
    let _e6: HomogeneousMagnitude = other_1451;
    let _e11: Motor = self_1677;
    let _e13: HomogeneousMagnitude = other_1451;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_inner_product(self_1678: Motor, other_1452: HomogeneousMagnitude) -> Motor {
    var self_1679: Motor;
    var other_1453: HomogeneousMagnitude;

    self_1679 = self_1678;
    other_1453 = other_1452;
    let _e4: Motor = self_1679;
    let _e8: HomogeneousMagnitude = other_1453;
    let _e19: Motor = self_1679;
    let _e23: HomogeneousMagnitude = other_1453;
    let _e35: Motor = self_1679;
    let _e39: HomogeneousMagnitude = other_1453;
    let _e51: Motor = self_1679;
    let _e53: HomogeneousMagnitude = other_1453;
    let _e59: Motor = self_1679;
    let _e61: HomogeneousMagnitude = other_1453;
    return Motor((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g1_.y) * vec4<f32>(_e23.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.x))), (_e59.g1_ * vec3<f32>(_e61.g0_.x)));
}

fn motor_homogeneous_magnitude_right_contraction(self_1680: Motor, other_1454: HomogeneousMagnitude) -> Motor {
    var self_1681: Motor;
    var other_1455: HomogeneousMagnitude;

    self_1681 = self_1680;
    other_1455 = other_1454;
    let _e4: Motor = self_1681;
    let _e6: HomogeneousMagnitude = other_1455;
    let _e11: Motor = self_1681;
    let _e13: HomogeneousMagnitude = other_1455;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec3<f32>(_e13.g0_.x)));
}

fn motor_homogeneous_magnitude_right_anti_contraction(self_1682: Motor, other_1456: HomogeneousMagnitude) -> Motor {
    var self_1683: Motor;
    var other_1457: HomogeneousMagnitude;

    self_1683 = self_1682;
    other_1457 = other_1456;
    let _e4: Motor = self_1683;
    let _e6: HomogeneousMagnitude = other_1457;
    let _e11: Motor = self_1683;
    let _e13: HomogeneousMagnitude = other_1457;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.y)), (_e11.g1_ * vec3<f32>(_e13.g0_.y)));
}

fn motor_homogeneous_magnitude_anti_scalar_product(self_1684: Motor, other_1458: HomogeneousMagnitude) -> AntiScalar {
    var self_1685: Motor;
    var other_1459: HomogeneousMagnitude;

    self_1685 = self_1684;
    other_1459 = other_1458;
    let _e4: Motor = self_1685;
    let _e7: HomogeneousMagnitude = other_1459;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn motor_homogeneous_magnitude_anti_dot(self_1686: Motor, other_1460: HomogeneousMagnitude) -> AntiScalar {
    var self_1687: Motor;
    var other_1461: HomogeneousMagnitude;

    self_1687 = self_1686;
    other_1461 = other_1460;
    let _e4: Motor = self_1687;
    let _e7: HomogeneousMagnitude = other_1461;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn motor_point_geometric_product(self_1688: Motor, other_1462: Point) -> Flector {
    var self_1689: Motor;
    var other_1463: Point;

    self_1689 = self_1688;
    other_1463 = other_1462;
    let _e4: Motor = self_1689;
    let _e8: Point = other_1463;
    let _e19: Motor = self_1689;
    let _e23: Point = other_1463;
    let _e35: Motor = self_1689;
    let _e39: Point = other_1463;
    let _e51: Motor = self_1689;
    let _e55: Point = other_1463;
    let _e67: Motor = self_1689;
    let _e71: Point = other_1463;
    let _e83: Motor = self_1689;
    let _e87: Point = other_1463;
    let _e99: Motor = self_1689;
    let _e103: Point = other_1463;
    let _e114: Motor = self_1689;
    let _e118: Point = other_1463;
    let _e130: Motor = self_1689;
    let _e134: Point = other_1463;
    let _e148: Motor = self_1689;
    let _e152: Point = other_1463;
    let _e164: Motor = self_1689;
    let _e168: Point = other_1463;
    let _e180: Motor = self_1689;
    let _e184: Point = other_1463;
    let _e196: Motor = self_1689;
    let _e200: Point = other_1463;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.x) * vec4<f32>(_e87.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4<f32>(_e99.g0_.y) * _e103.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e114.g0_.z) * _e118.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e130.g0_.w) * _e134.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e148.g1_.x) * _e152.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.y) * _e168.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e180.g1_.z) * _e184.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e196.g0_.x) * _e200.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_point_geometric_anti_product(self_1690: Motor, other_1464: Point) -> Flector {
    var self_1691: Motor;
    var other_1465: Point;

    self_1691 = self_1690;
    other_1465 = other_1464;
    let _e4: Motor = self_1691;
    let _e8: Point = other_1465;
    let _e19: Motor = self_1691;
    let _e23: Point = other_1465;
    let _e35: Motor = self_1691;
    let _e39: Point = other_1465;
    let _e43: Motor = self_1691;
    let _e47: Point = other_1465;
    let _e59: Motor = self_1691;
    let _e63: Point = other_1465;
    let _e75: Motor = self_1691;
    let _e79: Point = other_1465;
    let _e91: Motor = self_1691;
    let _e95: Point = other_1465;
    let _e107: Motor = self_1691;
    let _e111: Point = other_1465;
    let _e122: Motor = self_1691;
    let _e126: Point = other_1465;
    let _e138: Motor = self_1691;
    let _e142: Point = other_1465;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.x) * vec4<f32>(_e47.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e59.g1_.y) * vec4<f32>(_e63.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e75.g1_.z) * vec4<f32>(_e79.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((vec4<f32>(_e107.g0_.y) * _e111.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e122.g0_.z) * _e126.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e138.g0_.x) * _e142.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_point_regressive_product(self_1692: Motor, other_1466: Point) -> Point {
    var self_1693: Motor;
    var other_1467: Point;

    self_1693 = self_1692;
    other_1467 = other_1466;
    let _e4: Motor = self_1693;
    let _e8: Point = other_1467;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_anti_wedge(self_1694: Motor, other_1468: Point) -> Point {
    var self_1695: Motor;
    var other_1469: Point;

    self_1695 = self_1694;
    other_1469 = other_1468;
    let _e4: Motor = self_1695;
    let _e8: Point = other_1469;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_meet(self_1696: Motor, other_1470: Point) -> Point {
    var self_1697: Motor;
    var other_1471: Point;

    self_1697 = self_1696;
    other_1471 = other_1470;
    let _e4: Motor = self_1697;
    let _e8: Point = other_1471;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_point_outer_product(self_1698: Motor, other_1472: Point) -> Plane {
    var self_1699: Motor;
    var other_1473: Point;

    self_1699 = self_1698;
    other_1473 = other_1472;
    let _e4: Motor = self_1699;
    let _e8: Point = other_1473;
    let _e19: Motor = self_1699;
    let _e23: Point = other_1473;
    let _e35: Motor = self_1699;
    let _e39: Point = other_1473;
    let _e51: Motor = self_1699;
    let _e55: Point = other_1473;
    let _e67: Motor = self_1699;
    let _e71: Point = other_1473;
    let _e83: Motor = self_1699;
    let _e87: Point = other_1473;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_point_wedge(self_1700: Motor, other_1474: Point) -> Plane {
    var self_1701: Motor;
    var other_1475: Point;

    self_1701 = self_1700;
    other_1475 = other_1474;
    let _e4: Motor = self_1701;
    let _e8: Point = other_1475;
    let _e19: Motor = self_1701;
    let _e23: Point = other_1475;
    let _e35: Motor = self_1701;
    let _e39: Point = other_1475;
    let _e51: Motor = self_1701;
    let _e55: Point = other_1475;
    let _e67: Motor = self_1701;
    let _e71: Point = other_1475;
    let _e83: Motor = self_1701;
    let _e87: Point = other_1475;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_point_join(self_1702: Motor, other_1476: Point) -> Plane {
    var self_1703: Motor;
    var other_1477: Point;

    self_1703 = self_1702;
    other_1477 = other_1476;
    let _e4: Motor = self_1703;
    let _e8: Point = other_1477;
    let _e19: Motor = self_1703;
    let _e23: Point = other_1477;
    let _e35: Motor = self_1703;
    let _e39: Point = other_1477;
    let _e51: Motor = self_1703;
    let _e55: Point = other_1477;
    let _e67: Motor = self_1703;
    let _e71: Point = other_1477;
    let _e83: Motor = self_1703;
    let _e87: Point = other_1477;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_point_inner_anti_product(self_1704: Motor, other_1478: Point) -> Flector {
    var self_1705: Motor;
    var other_1479: Point;

    self_1705 = self_1704;
    other_1479 = other_1478;
    let _e4: Motor = self_1705;
    let _e8: Point = other_1479;
    let _e11: Motor = self_1705;
    let _e15: Point = other_1479;
    let _e26: Motor = self_1705;
    let _e30: Point = other_1479;
    let _e42: Motor = self_1705;
    let _e46: Point = other_1479;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_point_left_anti_contraction(self_1706: Motor, other_1480: Point) -> Flector {
    var self_1707: Motor;
    var other_1481: Point;

    self_1707 = self_1706;
    other_1481 = other_1480;
    let _e4: Motor = self_1707;
    let _e8: Point = other_1481;
    let _e11: Motor = self_1707;
    let _e15: Point = other_1481;
    let _e26: Motor = self_1707;
    let _e30: Point = other_1481;
    let _e42: Motor = self_1707;
    let _e46: Point = other_1481;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_line_into(self_1708: Motor) -> Line {
    var self_1709: Motor;

    self_1709 = self_1708;
    let _e2: Motor = self_1709;
    let _e5: Motor = self_1709;
    let _e8: Motor = self_1709;
    let _e12: Motor = self_1709;
    return Line(vec3<f32>(_e2.g0_.x, _e5.g0_.y, _e8.g0_.z), _e12.g1_);
}

fn motor_line_add(self_1710: Motor, other_1482: Line) -> Motor {
    var self_1711: Motor;
    var other_1483: Line;

    self_1711 = self_1710;
    other_1483 = other_1482;
    let _e4: Motor = self_1711;
    let _e6: Line = other_1483;
    let _e9: Line = other_1483;
    let _e12: Line = other_1483;
    let _e15: Line = other_1483;
    let _e26: Motor = self_1711;
    let _e28: Line = other_1483;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ + _e28.g1_));
}

fn motor_line_sub(self_1712: Motor, other_1484: Line) -> Motor {
    var self_1713: Motor;
    var other_1485: Line;

    self_1713 = self_1712;
    other_1485 = other_1484;
    let _e4: Motor = self_1713;
    let _e6: Line = other_1485;
    let _e9: Line = other_1485;
    let _e12: Line = other_1485;
    let _e15: Line = other_1485;
    let _e26: Motor = self_1713;
    let _e28: Line = other_1485;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e26.g1_ - _e28.g1_));
}

fn motor_line_outer_product(self_1714: Motor, other_1486: Line) -> AntiScalar {
    var self_1715: Motor;
    var other_1487: Line;

    self_1715 = self_1714;
    other_1487 = other_1486;
    let _e5: Motor = self_1715;
    let _e8: Line = other_1487;
    let _e13: Motor = self_1715;
    let _e16: Line = other_1487;
    let _e21: Motor = self_1715;
    let _e24: Line = other_1487;
    let _e29: Motor = self_1715;
    let _e32: Line = other_1487;
    let _e37: Motor = self_1715;
    let _e40: Line = other_1487;
    let _e45: Motor = self_1715;
    let _e48: Line = other_1487;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_wedge(self_1716: Motor, other_1488: Line) -> AntiScalar {
    var self_1717: Motor;
    var other_1489: Line;

    self_1717 = self_1716;
    other_1489 = other_1488;
    let _e5: Motor = self_1717;
    let _e8: Line = other_1489;
    let _e13: Motor = self_1717;
    let _e16: Line = other_1489;
    let _e21: Motor = self_1717;
    let _e24: Line = other_1489;
    let _e29: Motor = self_1717;
    let _e32: Line = other_1489;
    let _e37: Motor = self_1717;
    let _e40: Line = other_1489;
    let _e45: Motor = self_1717;
    let _e48: Line = other_1489;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_join(self_1718: Motor, other_1490: Line) -> AntiScalar {
    var self_1719: Motor;
    var other_1491: Line;

    self_1719 = self_1718;
    other_1491 = other_1490;
    let _e5: Motor = self_1719;
    let _e8: Line = other_1491;
    let _e13: Motor = self_1719;
    let _e16: Line = other_1491;
    let _e21: Motor = self_1719;
    let _e24: Line = other_1491;
    let _e29: Motor = self_1719;
    let _e32: Line = other_1491;
    let _e37: Motor = self_1719;
    let _e40: Line = other_1491;
    let _e45: Motor = self_1719;
    let _e48: Line = other_1491;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_line_inner_anti_product(self_1720: Motor, other_1492: Line) -> Motor {
    var self_1721: Motor;
    var other_1493: Line;

    self_1721 = self_1720;
    other_1493 = other_1492;
    let _e4: Motor = self_1721;
    let _e8: Line = other_1493;
    let _e20: Motor = self_1721;
    let _e24: Line = other_1493;
    let _e37: Motor = self_1721;
    let _e40: Line = other_1493;
    let _e43: Line = other_1493;
    let _e46: Line = other_1493;
    let _e49: Line = other_1493;
    let _e62: Motor = self_1721;
    let _e66: Line = other_1493;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn motor_line_left_contraction(self_1722: Motor, other_1494: Line) -> Scalar {
    var self_1723: Motor;
    var other_1495: Line;

    self_1723 = self_1722;
    other_1495 = other_1494;
    let _e5: Motor = self_1723;
    let _e8: Line = other_1495;
    let _e13: Motor = self_1723;
    let _e16: Line = other_1495;
    let _e21: Motor = self_1723;
    let _e24: Line = other_1495;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_left_anti_contraction(self_1724: Motor, other_1496: Line) -> Motor {
    var self_1725: Motor;
    var other_1497: Line;

    self_1725 = self_1724;
    other_1497 = other_1496;
    let _e4: Motor = self_1725;
    let _e8: Line = other_1497;
    let _e20: Motor = self_1725;
    let _e24: Line = other_1497;
    let _e37: Motor = self_1725;
    let _e40: Line = other_1497;
    let _e43: Line = other_1497;
    let _e46: Line = other_1497;
    let _e49: Line = other_1497;
    let _e62: Motor = self_1725;
    let _e66: Line = other_1497;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn motor_line_right_anti_contraction(self_1726: Motor, other_1498: Line) -> AntiScalar {
    var self_1727: Motor;
    var other_1499: Line;

    self_1727 = self_1726;
    other_1499 = other_1498;
    let _e5: Motor = self_1727;
    let _e8: Line = other_1499;
    let _e13: Motor = self_1727;
    let _e16: Line = other_1499;
    let _e21: Motor = self_1727;
    let _e24: Line = other_1499;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_line_scalar_product(self_1728: Motor, other_1500: Line) -> Scalar {
    var self_1729: Motor;
    var other_1501: Line;

    self_1729 = self_1728;
    other_1501 = other_1500;
    let _e5: Motor = self_1729;
    let _e8: Line = other_1501;
    let _e13: Motor = self_1729;
    let _e16: Line = other_1501;
    let _e21: Motor = self_1729;
    let _e24: Line = other_1501;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_dot(self_1730: Motor, other_1502: Line) -> Scalar {
    var self_1731: Motor;
    var other_1503: Line;

    self_1731 = self_1730;
    other_1503 = other_1502;
    let _e5: Motor = self_1731;
    let _e8: Line = other_1503;
    let _e13: Motor = self_1731;
    let _e16: Line = other_1503;
    let _e21: Motor = self_1731;
    let _e24: Line = other_1503;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_line_anti_scalar_product(self_1732: Motor, other_1504: Line) -> AntiScalar {
    var self_1733: Motor;
    var other_1505: Line;

    self_1733 = self_1732;
    other_1505 = other_1504;
    let _e5: Motor = self_1733;
    let _e8: Line = other_1505;
    let _e13: Motor = self_1733;
    let _e16: Line = other_1505;
    let _e21: Motor = self_1733;
    let _e24: Line = other_1505;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_line_anti_dot(self_1734: Motor, other_1506: Line) -> AntiScalar {
    var self_1735: Motor;
    var other_1507: Line;

    self_1735 = self_1734;
    other_1507 = other_1506;
    let _e5: Motor = self_1735;
    let _e8: Line = other_1507;
    let _e13: Motor = self_1735;
    let _e16: Line = other_1507;
    let _e21: Motor = self_1735;
    let _e24: Line = other_1507;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_plane_geometric_anti_product(self_1736: Motor, other_1508: Plane) -> Flector {
    var self_1737: Motor;
    var other_1509: Plane;

    self_1737 = self_1736;
    other_1509 = other_1508;
    let _e4: Motor = self_1737;
    let _e8: Plane = other_1509;
    let _e19: Motor = self_1737;
    let _e23: Plane = other_1509;
    let _e35: Motor = self_1737;
    let _e39: Plane = other_1509;
    let _e51: Motor = self_1737;
    let _e55: Plane = other_1509;
    let _e67: Motor = self_1737;
    let _e71: Plane = other_1509;
    let _e83: Motor = self_1737;
    let _e87: Plane = other_1509;
    let _e99: Motor = self_1737;
    let _e103: Plane = other_1509;
    let _e114: Motor = self_1737;
    let _e118: Plane = other_1509;
    let _e130: Motor = self_1737;
    let _e134: Plane = other_1509;
    let _e138: Motor = self_1737;
    let _e142: Plane = other_1509;
    let _e155: Motor = self_1737;
    let _e159: Plane = other_1509;
    let _e172: Motor = self_1737;
    let _e176: Plane = other_1509;
    let _e189: Motor = self_1737;
    let _e193: Plane = other_1509;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((((((((vec4<f32>(_e99.g0_.y) * _e103.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e114.g0_.z) * _e118.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e130.g0_.w) * _e134.g0_)) + ((vec4<f32>(_e138.g1_.x) * vec4<f32>(_e142.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e155.g1_.y) * vec4<f32>(_e159.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e172.g1_.z) * vec4<f32>(_e176.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e189.g0_.x) * _e193.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_plane_regressive_product(self_1738: Motor, other_1510: Plane) -> Flector {
    var self_1739: Motor;
    var other_1511: Plane;

    self_1739 = self_1738;
    other_1511 = other_1510;
    let _e4: Motor = self_1739;
    let _e8: Plane = other_1511;
    let _e19: Motor = self_1739;
    let _e23: Plane = other_1511;
    let _e35: Motor = self_1739;
    let _e39: Plane = other_1511;
    let _e51: Motor = self_1739;
    let _e55: Plane = other_1511;
    let _e67: Motor = self_1739;
    let _e71: Plane = other_1511;
    let _e83: Motor = self_1739;
    let _e87: Plane = other_1511;
    let _e99: Motor = self_1739;
    let _e103: Plane = other_1511;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e99.g0_.w) * _e103.g0_));
}

fn motor_plane_anti_wedge(self_1740: Motor, other_1512: Plane) -> Flector {
    var self_1741: Motor;
    var other_1513: Plane;

    self_1741 = self_1740;
    other_1513 = other_1512;
    let _e4: Motor = self_1741;
    let _e8: Plane = other_1513;
    let _e19: Motor = self_1741;
    let _e23: Plane = other_1513;
    let _e35: Motor = self_1741;
    let _e39: Plane = other_1513;
    let _e51: Motor = self_1741;
    let _e55: Plane = other_1513;
    let _e67: Motor = self_1741;
    let _e71: Plane = other_1513;
    let _e83: Motor = self_1741;
    let _e87: Plane = other_1513;
    let _e99: Motor = self_1741;
    let _e103: Plane = other_1513;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e99.g0_.w) * _e103.g0_));
}

fn motor_plane_meet(self_1742: Motor, other_1514: Plane) -> Flector {
    var self_1743: Motor;
    var other_1515: Plane;

    self_1743 = self_1742;
    other_1515 = other_1514;
    let _e4: Motor = self_1743;
    let _e8: Plane = other_1515;
    let _e19: Motor = self_1743;
    let _e23: Plane = other_1515;
    let _e35: Motor = self_1743;
    let _e39: Plane = other_1515;
    let _e51: Motor = self_1743;
    let _e55: Plane = other_1515;
    let _e67: Motor = self_1743;
    let _e71: Plane = other_1515;
    let _e83: Motor = self_1743;
    let _e87: Plane = other_1515;
    let _e99: Motor = self_1743;
    let _e103: Plane = other_1515;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e99.g0_.w) * _e103.g0_));
}

fn motor_plane_inner_product(self_1744: Motor, other_1516: Plane) -> Point {
    var self_1745: Motor;
    var other_1517: Plane;

    self_1745 = self_1744;
    other_1517 = other_1516;
    let _e4: Motor = self_1745;
    let _e8: Plane = other_1517;
    let _e19: Motor = self_1745;
    let _e23: Plane = other_1517;
    let _e35: Motor = self_1745;
    let _e39: Plane = other_1517;
    let _e51: Motor = self_1745;
    let _e54: Plane = other_1517;
    return Point((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((_e51.g0_.xxxw * _e54.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_plane_inner_anti_product(self_1746: Motor, other_1518: Plane) -> Plane {
    var self_1747: Motor;
    var other_1519: Plane;

    self_1747 = self_1746;
    other_1519 = other_1518;
    let _e4: Motor = self_1747;
    let _e8: Plane = other_1519;
    let _e19: Motor = self_1747;
    let _e23: Plane = other_1519;
    let _e35: Motor = self_1747;
    let _e39: Plane = other_1519;
    let _e43: Motor = self_1747;
    let _e47: Plane = other_1519;
    let _e60: Motor = self_1747;
    let _e64: Plane = other_1519;
    let _e77: Motor = self_1747;
    let _e81: Plane = other_1519;
    let _e94: Motor = self_1747;
    let _e98: Plane = other_1519;
    return Plane(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.x) * vec4<f32>(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e77.g1_.z) * vec4<f32>(_e81.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e94.g0_.x) * _e98.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_plane_left_contraction(self_1748: Motor, other_1520: Plane) -> Point {
    var self_1749: Motor;
    var other_1521: Plane;

    self_1749 = self_1748;
    other_1521 = other_1520;
    let _e4: Motor = self_1749;
    let _e8: Plane = other_1521;
    let _e19: Motor = self_1749;
    let _e23: Plane = other_1521;
    let _e35: Motor = self_1749;
    let _e39: Plane = other_1521;
    return Point(((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_plane_left_anti_contraction(self_1750: Motor, other_1522: Plane) -> Plane {
    var self_1751: Motor;
    var other_1523: Plane;

    self_1751 = self_1750;
    other_1523 = other_1522;
    let _e4: Motor = self_1751;
    let _e8: Plane = other_1523;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_plane_right_anti_contraction(self_1752: Motor, other_1524: Plane) -> Plane {
    var self_1753: Motor;
    var other_1525: Plane;

    self_1753 = self_1752;
    other_1525 = other_1524;
    let _e4: Motor = self_1753;
    let _e8: Plane = other_1525;
    let _e19: Motor = self_1753;
    let _e23: Plane = other_1525;
    let _e35: Motor = self_1753;
    let _e39: Plane = other_1525;
    let _e52: Motor = self_1753;
    let _e56: Plane = other_1525;
    let _e69: Motor = self_1753;
    let _e73: Plane = other_1525;
    let _e86: Motor = self_1753;
    let _e90: Plane = other_1525;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.y) * vec4<f32>(_e56.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.z) * vec4<f32>(_e73.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e86.g0_.x) * _e90.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_motor_add(self_1754: Motor, other_1526: Motor) -> Motor {
    var self_1755: Motor;
    var other_1527: Motor;

    self_1755 = self_1754;
    other_1527 = other_1526;
    let _e4: Motor = self_1755;
    let _e6: Motor = other_1527;
    let _e9: Motor = self_1755;
    let _e11: Motor = other_1527;
    return Motor((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn motor_motor_sub(self_1756: Motor, other_1528: Motor) -> Motor {
    var self_1757: Motor;
    var other_1529: Motor;

    self_1757 = self_1756;
    other_1529 = other_1528;
    let _e4: Motor = self_1757;
    let _e6: Motor = other_1529;
    let _e9: Motor = self_1757;
    let _e11: Motor = other_1529;
    return Motor((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn motor_motor_mul(self_1758: Motor, other_1530: Motor) -> Motor {
    var self_1759: Motor;
    var other_1531: Motor;

    self_1759 = self_1758;
    other_1531 = other_1530;
    let _e4: Motor = self_1759;
    let _e6: Motor = other_1531;
    let _e9: Motor = self_1759;
    let _e11: Motor = other_1531;
    return Motor((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn motor_motor_div(self_1760: Motor, other_1532: Motor) -> Motor {
    var self_1761: Motor;
    var other_1533: Motor;

    self_1761 = self_1760;
    other_1533 = other_1532;
    let _e4: Motor = self_1761;
    let _e7: Motor = self_1761;
    let _e10: Motor = self_1761;
    let _e13: Motor = self_1761;
    let _e23: Motor = other_1533;
    let _e26: Motor = other_1533;
    let _e29: Motor = other_1533;
    let _e32: Motor = other_1533;
    let _e43: Motor = self_1761;
    let _e46: Motor = self_1761;
    let _e49: Motor = self_1761;
    let _e58: Motor = other_1533;
    let _e61: Motor = other_1533;
    let _e64: Motor = other_1533;
    return Motor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e58.g1_.x, _e61.g1_.y, _e64.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn motor_motor_outer_product(self_1762: Motor, other_1534: Motor) -> AntiScalar {
    var self_1763: Motor;
    var other_1535: Motor;

    self_1763 = self_1762;
    other_1535 = other_1534;
    let _e5: Motor = self_1763;
    let _e8: Motor = other_1535;
    let _e13: Motor = self_1763;
    let _e16: Motor = other_1535;
    let _e21: Motor = self_1763;
    let _e24: Motor = other_1535;
    let _e29: Motor = self_1763;
    let _e32: Motor = other_1535;
    let _e37: Motor = self_1763;
    let _e40: Motor = other_1535;
    let _e45: Motor = self_1763;
    let _e48: Motor = other_1535;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_wedge(self_1764: Motor, other_1536: Motor) -> AntiScalar {
    var self_1765: Motor;
    var other_1537: Motor;

    self_1765 = self_1764;
    other_1537 = other_1536;
    let _e5: Motor = self_1765;
    let _e8: Motor = other_1537;
    let _e13: Motor = self_1765;
    let _e16: Motor = other_1537;
    let _e21: Motor = self_1765;
    let _e24: Motor = other_1537;
    let _e29: Motor = self_1765;
    let _e32: Motor = other_1537;
    let _e37: Motor = self_1765;
    let _e40: Motor = other_1537;
    let _e45: Motor = self_1765;
    let _e48: Motor = other_1537;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_join(self_1766: Motor, other_1538: Motor) -> AntiScalar {
    var self_1767: Motor;
    var other_1539: Motor;

    self_1767 = self_1766;
    other_1539 = other_1538;
    let _e5: Motor = self_1767;
    let _e8: Motor = other_1539;
    let _e13: Motor = self_1767;
    let _e16: Motor = other_1539;
    let _e21: Motor = self_1767;
    let _e24: Motor = other_1539;
    let _e29: Motor = self_1767;
    let _e32: Motor = other_1539;
    let _e37: Motor = self_1767;
    let _e40: Motor = other_1539;
    let _e45: Motor = self_1767;
    let _e48: Motor = other_1539;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g1_.x * _e32.g0_.x)) - (_e37.g1_.y * _e40.g0_.y)) - (_e45.g1_.z * _e48.g0_.z)));
}

fn motor_motor_inner_anti_product(self_1768: Motor, other_1540: Motor) -> Motor {
    var self_1769: Motor;
    var other_1541: Motor;

    self_1769 = self_1768;
    other_1541 = other_1540;
    let _e4: Motor = self_1769;
    let _e8: Motor = other_1541;
    let _e19: Motor = self_1769;
    let _e23: Motor = other_1541;
    let _e35: Motor = self_1769;
    let _e39: Motor = other_1541;
    let _e43: Motor = self_1769;
    let _e47: Motor = other_1541;
    let _e59: Motor = self_1769;
    let _e63: Motor = other_1541;
    let _e66: Motor = self_1769;
    let _e68: Motor = other_1541;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e59.g0_.w) * _e63.g1_) + (_e66.g1_ * vec3<f32>(_e68.g0_.w))));
}

fn motor_motor_left_anti_contraction(self_1770: Motor, other_1542: Motor) -> Motor {
    var self_1771: Motor;
    var other_1543: Motor;

    self_1771 = self_1770;
    other_1543 = other_1542;
    let _e4: Motor = self_1771;
    let _e8: Motor = other_1543;
    let _e20: Motor = self_1771;
    let _e24: Motor = other_1543;
    let _e37: Motor = self_1771;
    let _e41: Motor = other_1543;
    let _e45: Motor = self_1771;
    let _e49: Motor = other_1543;
    let _e62: Motor = self_1771;
    let _e66: Motor = other_1543;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn motor_motor_right_anti_contraction(self_1772: Motor, other_1544: Motor) -> Motor {
    var self_1773: Motor;
    var other_1545: Motor;

    self_1773 = self_1772;
    other_1545 = other_1544;
    let _e4: Motor = self_1773;
    let _e8: Motor = other_1545;
    let _e19: Motor = self_1773;
    let _e23: Motor = other_1545;
    let _e35: Motor = self_1773;
    let _e39: Motor = other_1545;
    let _e51: Motor = self_1773;
    let _e55: Motor = other_1545;
    let _e67: Motor = self_1773;
    let _e69: Motor = other_1545;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e67.g1_ * vec3<f32>(_e69.g0_.w)));
}

fn motor_motor_scalar_product(self_1774: Motor, other_1546: Motor) -> Scalar {
    var self_1775: Motor;
    var other_1547: Motor;

    self_1775 = self_1774;
    other_1547 = other_1546;
    let _e5: Motor = self_1775;
    let _e8: Motor = other_1547;
    let _e13: Motor = self_1775;
    let _e16: Motor = other_1547;
    let _e21: Motor = self_1775;
    let _e24: Motor = other_1547;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_motor_dot(self_1776: Motor, other_1548: Motor) -> Scalar {
    var self_1777: Motor;
    var other_1549: Motor;

    self_1777 = self_1776;
    other_1549 = other_1548;
    let _e5: Motor = self_1777;
    let _e8: Motor = other_1549;
    let _e13: Motor = self_1777;
    let _e16: Motor = other_1549;
    let _e21: Motor = self_1777;
    let _e24: Motor = other_1549;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g1_.x)) - (_e13.g1_.y * _e16.g1_.y)) - (_e21.g1_.z * _e24.g1_.z)));
}

fn motor_motor_anti_scalar_product(self_1778: Motor, other_1550: Motor) -> AntiScalar {
    var self_1779: Motor;
    var other_1551: Motor;

    self_1779 = self_1778;
    other_1551 = other_1550;
    let _e5: Motor = self_1779;
    let _e8: Motor = other_1551;
    let _e13: Motor = self_1779;
    let _e16: Motor = other_1551;
    let _e21: Motor = self_1779;
    let _e24: Motor = other_1551;
    let _e29: Motor = self_1779;
    let _e32: Motor = other_1551;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_motor_anti_dot(self_1780: Motor, other_1552: Motor) -> AntiScalar {
    var self_1781: Motor;
    var other_1553: Motor;

    self_1781 = self_1780;
    other_1553 = other_1552;
    let _e5: Motor = self_1781;
    let _e8: Motor = other_1553;
    let _e13: Motor = self_1781;
    let _e16: Motor = other_1553;
    let _e21: Motor = self_1781;
    let _e24: Motor = other_1553;
    let _e29: Motor = self_1781;
    let _e32: Motor = other_1553;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_rotor_into(self_1782: Motor) -> Rotor {
    var self_1783: Motor;

    self_1783 = self_1782;
    let _e2: Motor = self_1783;
    return Rotor(_e2.g0_);
}

fn motor_rotor_add(self_1784: Motor, other_1554: Rotor) -> Motor {
    var self_1785: Motor;
    var other_1555: Rotor;

    self_1785 = self_1784;
    other_1555 = other_1554;
    let _e4: Motor = self_1785;
    let _e6: Rotor = other_1555;
    let _e9: Motor = self_1785;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn motor_rotor_sub(self_1786: Motor, other_1556: Rotor) -> Motor {
    var self_1787: Motor;
    var other_1557: Rotor;

    self_1787 = self_1786;
    other_1557 = other_1556;
    let _e4: Motor = self_1787;
    let _e6: Rotor = other_1557;
    let _e9: Motor = self_1787;
    return Motor((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn motor_rotor_geometric_product(self_1788: Motor, other_1558: Rotor) -> Rotor {
    var self_1789: Motor;
    var other_1559: Rotor;

    self_1789 = self_1788;
    other_1559 = other_1558;
    let _e4: Motor = self_1789;
    let _e8: Rotor = other_1559;
    let _e20: Motor = self_1789;
    let _e24: Rotor = other_1559;
    let _e37: Motor = self_1789;
    let _e41: Rotor = other_1559;
    return Rotor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e20.g1_.y) * _e24.g0_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * _e41.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_rotor_outer_product(self_1790: Motor, other_1560: Rotor) -> AntiScalar {
    var self_1791: Motor;
    var other_1561: Rotor;

    self_1791 = self_1790;
    other_1561 = other_1560;
    let _e5: Motor = self_1791;
    let _e8: Rotor = other_1561;
    let _e13: Motor = self_1791;
    let _e16: Rotor = other_1561;
    let _e21: Motor = self_1791;
    let _e24: Rotor = other_1561;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_wedge(self_1792: Motor, other_1562: Rotor) -> AntiScalar {
    var self_1793: Motor;
    var other_1563: Rotor;

    self_1793 = self_1792;
    other_1563 = other_1562;
    let _e5: Motor = self_1793;
    let _e8: Rotor = other_1563;
    let _e13: Motor = self_1793;
    let _e16: Rotor = other_1563;
    let _e21: Motor = self_1793;
    let _e24: Rotor = other_1563;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_join(self_1794: Motor, other_1564: Rotor) -> AntiScalar {
    var self_1795: Motor;
    var other_1565: Rotor;

    self_1795 = self_1794;
    other_1565 = other_1564;
    let _e5: Motor = self_1795;
    let _e8: Rotor = other_1565;
    let _e13: Motor = self_1795;
    let _e16: Rotor = other_1565;
    let _e21: Motor = self_1795;
    let _e24: Rotor = other_1565;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_rotor_inner_anti_product(self_1796: Motor, other_1566: Rotor) -> Motor {
    var self_1797: Motor;
    var other_1567: Rotor;

    self_1797 = self_1796;
    other_1567 = other_1566;
    let _e4: Motor = self_1797;
    let _e8: Rotor = other_1567;
    let _e19: Motor = self_1797;
    let _e23: Rotor = other_1567;
    let _e35: Motor = self_1797;
    let _e39: Rotor = other_1567;
    let _e43: Motor = self_1797;
    let _e47: Rotor = other_1567;
    let _e59: Motor = self_1797;
    let _e61: Rotor = other_1567;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e59.g1_ * vec3<f32>(_e61.g0_.w)));
}

fn motor_rotor_left_anti_contraction(self_1798: Motor, other_1568: Rotor) -> Rotor {
    var self_1799: Motor;
    var other_1569: Rotor;

    self_1799 = self_1798;
    other_1569 = other_1568;
    let _e4: Motor = self_1799;
    let _e8: Rotor = other_1569;
    let _e20: Motor = self_1799;
    let _e24: Rotor = other_1569;
    let _e37: Motor = self_1799;
    let _e41: Rotor = other_1569;
    let _e45: Motor = self_1799;
    let _e49: Rotor = other_1569;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_rotor_right_anti_contraction(self_1800: Motor, other_1570: Rotor) -> Motor {
    var self_1801: Motor;
    var other_1571: Rotor;

    self_1801 = self_1800;
    other_1571 = other_1570;
    let _e4: Motor = self_1801;
    let _e8: Rotor = other_1571;
    let _e19: Motor = self_1801;
    let _e23: Rotor = other_1571;
    let _e35: Motor = self_1801;
    let _e39: Rotor = other_1571;
    let _e51: Motor = self_1801;
    let _e55: Rotor = other_1571;
    let _e67: Motor = self_1801;
    let _e69: Rotor = other_1571;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (_e67.g1_ * vec3<f32>(_e69.g0_.w)));
}

fn motor_rotor_anti_scalar_product(self_1802: Motor, other_1572: Rotor) -> AntiScalar {
    var self_1803: Motor;
    var other_1573: Rotor;

    self_1803 = self_1802;
    other_1573 = other_1572;
    let _e5: Motor = self_1803;
    let _e8: Rotor = other_1573;
    let _e13: Motor = self_1803;
    let _e16: Rotor = other_1573;
    let _e21: Motor = self_1803;
    let _e24: Rotor = other_1573;
    let _e29: Motor = self_1803;
    let _e32: Rotor = other_1573;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_rotor_anti_dot(self_1804: Motor, other_1574: Rotor) -> AntiScalar {
    var self_1805: Motor;
    var other_1575: Rotor;

    self_1805 = self_1804;
    other_1575 = other_1574;
    let _e5: Motor = self_1805;
    let _e8: Rotor = other_1575;
    let _e13: Motor = self_1805;
    let _e16: Rotor = other_1575;
    let _e21: Motor = self_1805;
    let _e24: Rotor = other_1575;
    let _e29: Motor = self_1805;
    let _e32: Rotor = other_1575;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn motor_translator_into(self_1806: Motor) -> Translator {
    var self_1807: Motor;

    self_1807 = self_1806;
    let _e2: Motor = self_1807;
    let _e5: Motor = self_1807;
    let _e8: Motor = self_1807;
    let _e11: Motor = self_1807;
    return Translator(vec4<f32>(_e2.g1_.x, _e5.g1_.y, _e8.g1_.z, _e11.g0_.w));
}

fn motor_translator_add(self_1808: Motor, other_1576: Translator) -> Motor {
    var self_1809: Motor;
    var other_1577: Translator;

    self_1809 = self_1808;
    other_1577 = other_1576;
    let _e4: Motor = self_1809;
    let _e6: Translator = other_1577;
    let _e16: Motor = self_1809;
    let _e18: Translator = other_1577;
    let _e21: Translator = other_1577;
    let _e24: Translator = other_1577;
    return Motor((_e4.g0_ + (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ + vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn motor_translator_sub(self_1810: Motor, other_1578: Translator) -> Motor {
    var self_1811: Motor;
    var other_1579: Translator;

    self_1811 = self_1810;
    other_1579 = other_1578;
    let _e4: Motor = self_1811;
    let _e6: Translator = other_1579;
    let _e16: Motor = self_1811;
    let _e18: Translator = other_1579;
    let _e21: Translator = other_1579;
    let _e24: Translator = other_1579;
    return Motor((_e4.g0_ - (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (_e16.g1_ - vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn motor_translator_outer_product(self_1812: Motor, other_1580: Translator) -> AntiScalar {
    var self_1813: Motor;
    var other_1581: Translator;

    self_1813 = self_1812;
    other_1581 = other_1580;
    let _e5: Motor = self_1813;
    let _e8: Translator = other_1581;
    let _e13: Motor = self_1813;
    let _e16: Translator = other_1581;
    let _e21: Motor = self_1813;
    let _e24: Translator = other_1581;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_wedge(self_1814: Motor, other_1582: Translator) -> AntiScalar {
    var self_1815: Motor;
    var other_1583: Translator;

    self_1815 = self_1814;
    other_1583 = other_1582;
    let _e5: Motor = self_1815;
    let _e8: Translator = other_1583;
    let _e13: Motor = self_1815;
    let _e16: Translator = other_1583;
    let _e21: Motor = self_1815;
    let _e24: Translator = other_1583;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_join(self_1816: Motor, other_1584: Translator) -> AntiScalar {
    var self_1817: Motor;
    var other_1585: Translator;

    self_1817 = self_1816;
    other_1585 = other_1584;
    let _e5: Motor = self_1817;
    let _e8: Translator = other_1585;
    let _e13: Motor = self_1817;
    let _e16: Translator = other_1585;
    let _e21: Motor = self_1817;
    let _e24: Translator = other_1585;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn motor_translator_inner_anti_product(self_1818: Motor, other_1586: Translator) -> Motor {
    var self_1819: Motor;
    var other_1587: Translator;

    self_1819 = self_1818;
    other_1587 = other_1586;
    let _e4: Motor = self_1819;
    let _e6: Translator = other_1587;
    let _e11: Motor = self_1819;
    let _e15: Translator = other_1587;
    let _e18: Translator = other_1587;
    let _e21: Translator = other_1587;
    let _e26: Motor = self_1819;
    let _e28: Translator = other_1587;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((vec3<f32>(_e11.g0_.w) * vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z)) + (_e26.g1_ * vec3<f32>(_e28.g0_.w))));
}

fn motor_translator_left_anti_contraction(self_1820: Motor, other_1588: Translator) -> Translator {
    var self_1821: Motor;
    var other_1589: Translator;

    self_1821 = self_1820;
    other_1589 = other_1588;
    let _e4: Motor = self_1821;
    let _e8: Translator = other_1589;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn motor_translator_right_anti_contraction(self_1822: Motor, other_1590: Translator) -> Motor {
    var self_1823: Motor;
    var other_1591: Translator;

    self_1823 = self_1822;
    other_1591 = other_1590;
    let _e4: Motor = self_1823;
    let _e6: Translator = other_1591;
    let _e11: Motor = self_1823;
    let _e13: Translator = other_1591;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec3<f32>(_e13.g0_.w)));
}

fn motor_translator_scalar_product(self_1824: Motor, other_1592: Translator) -> Scalar {
    var self_1825: Motor;
    var other_1593: Translator;

    self_1825 = self_1824;
    other_1593 = other_1592;
    let _e5: Motor = self_1825;
    let _e8: Translator = other_1593;
    let _e13: Motor = self_1825;
    let _e16: Translator = other_1593;
    let _e21: Motor = self_1825;
    let _e24: Translator = other_1593;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_translator_dot(self_1826: Motor, other_1594: Translator) -> Scalar {
    var self_1827: Motor;
    var other_1595: Translator;

    self_1827 = self_1826;
    other_1595 = other_1594;
    let _e5: Motor = self_1827;
    let _e8: Translator = other_1595;
    let _e13: Motor = self_1827;
    let _e16: Translator = other_1595;
    let _e21: Motor = self_1827;
    let _e24: Translator = other_1595;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)));
}

fn motor_translator_anti_scalar_product(self_1828: Motor, other_1596: Translator) -> AntiScalar {
    var self_1829: Motor;
    var other_1597: Translator;

    self_1829 = self_1828;
    other_1597 = other_1596;
    let _e4: Motor = self_1829;
    let _e7: Translator = other_1597;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn motor_translator_anti_dot(self_1830: Motor, other_1598: Translator) -> AntiScalar {
    var self_1831: Motor;
    var other_1599: Translator;

    self_1831 = self_1830;
    other_1599 = other_1598;
    let _e4: Motor = self_1831;
    let _e7: Translator = other_1599;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn motor_flector_geometric_product(self_1832: Motor, other_1600: Flector) -> Flector {
    var self_1833: Motor;
    var other_1601: Flector;

    self_1833 = self_1832;
    other_1601 = other_1600;
    let _e4: Motor = self_1833;
    let _e8: Flector = other_1601;
    let _e19: Motor = self_1833;
    let _e23: Flector = other_1601;
    let _e35: Motor = self_1833;
    let _e39: Flector = other_1601;
    let _e52: Motor = self_1833;
    let _e56: Flector = other_1601;
    let _e59: Flector = other_1601;
    let _e62: Flector = other_1601;
    let _e65: Flector = other_1601;
    let _e79: Motor = self_1833;
    let _e83: Flector = other_1601;
    let _e86: Flector = other_1601;
    let _e89: Flector = other_1601;
    let _e92: Flector = other_1601;
    let _e106: Motor = self_1833;
    let _e110: Flector = other_1601;
    let _e113: Flector = other_1601;
    let _e116: Flector = other_1601;
    let _e119: Flector = other_1601;
    let _e133: Motor = self_1833;
    let _e137: Flector = other_1601;
    let _e149: Motor = self_1833;
    let _e153: Flector = other_1601;
    let _e156: Flector = other_1601;
    let _e159: Flector = other_1601;
    let _e162: Flector = other_1601;
    let _e175: Motor = self_1833;
    let _e179: Flector = other_1601;
    let _e182: Flector = other_1601;
    let _e185: Flector = other_1601;
    let _e188: Flector = other_1601;
    let _e202: Motor = self_1833;
    let _e206: Flector = other_1601;
    let _e220: Motor = self_1833;
    let _e224: Flector = other_1601;
    let _e227: Flector = other_1601;
    let _e230: Flector = other_1601;
    let _e233: Flector = other_1601;
    let _e247: Motor = self_1833;
    let _e251: Flector = other_1601;
    let _e254: Flector = other_1601;
    let _e257: Flector = other_1601;
    let _e260: Flector = other_1601;
    let _e274: Motor = self_1833;
    let _e278: Flector = other_1601;
    let _e281: Flector = other_1601;
    let _e284: Flector = other_1601;
    let _e287: Flector = other_1601;
    let _e301: Motor = self_1833;
    let _e305: Flector = other_1601;
    let _e308: Flector = other_1601;
    let _e311: Flector = other_1601;
    let _e314: Flector = other_1601;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g1_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.x) * vec4<f32>(_e56.g1_.w, _e59.g0_.z, _e62.g0_.y, _e65.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e79.g1_.y) * vec4<f32>(_e83.g0_.z, _e86.g1_.w, _e89.g0_.x, _e92.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e106.g1_.z) * vec4<f32>(_e110.g0_.y, _e113.g0_.x, _e116.g1_.w, _e119.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec4<f32>(_e149.g0_.y) * vec4<f32>(_e153.g0_.z, _e156.g1_.w, _e159.g0_.x, _e162.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e175.g0_.z) * vec4<f32>(_e179.g0_.y, _e182.g0_.x, _e185.g1_.w, _e188.g0_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e202.g0_.w) * _e206.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e220.g1_.x) * vec4<f32>(_e224.g0_.w, _e227.g1_.z, _e230.g1_.y, _e233.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e247.g1_.y) * vec4<f32>(_e251.g1_.z, _e254.g0_.w, _e257.g1_.x, _e260.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e274.g1_.z) * vec4<f32>(_e278.g1_.y, _e281.g1_.x, _e284.g0_.w, _e287.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e301.g0_.x) * vec4<f32>(_e305.g1_.w, _e308.g0_.z, _e311.g0_.y, _e314.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn motor_flector_geometric_anti_product(self_1834: Motor, other_1602: Flector) -> Flector {
    var self_1835: Motor;
    var other_1603: Flector;

    self_1835 = self_1834;
    other_1603 = other_1602;
    let _e4: Motor = self_1835;
    let _e8: Flector = other_1603;
    let _e11: Flector = other_1603;
    let _e14: Flector = other_1603;
    let _e17: Flector = other_1603;
    let _e30: Motor = self_1835;
    let _e34: Flector = other_1603;
    let _e37: Flector = other_1603;
    let _e40: Flector = other_1603;
    let _e43: Flector = other_1603;
    let _e57: Motor = self_1835;
    let _e61: Flector = other_1603;
    let _e64: Flector = other_1603;
    let _e67: Flector = other_1603;
    let _e70: Flector = other_1603;
    let _e84: Motor = self_1835;
    let _e88: Flector = other_1603;
    let _e92: Motor = self_1835;
    let _e96: Flector = other_1603;
    let _e99: Flector = other_1603;
    let _e102: Flector = other_1603;
    let _e105: Flector = other_1603;
    let _e118: Motor = self_1835;
    let _e122: Flector = other_1603;
    let _e125: Flector = other_1603;
    let _e128: Flector = other_1603;
    let _e131: Flector = other_1603;
    let _e144: Motor = self_1835;
    let _e148: Flector = other_1603;
    let _e151: Flector = other_1603;
    let _e154: Flector = other_1603;
    let _e157: Flector = other_1603;
    let _e170: Motor = self_1835;
    let _e174: Flector = other_1603;
    let _e177: Flector = other_1603;
    let _e180: Flector = other_1603;
    let _e183: Flector = other_1603;
    let _e196: Motor = self_1835;
    let _e200: Flector = other_1603;
    let _e203: Flector = other_1603;
    let _e206: Flector = other_1603;
    let _e209: Flector = other_1603;
    let _e223: Motor = self_1835;
    let _e227: Flector = other_1603;
    let _e230: Flector = other_1603;
    let _e233: Flector = other_1603;
    let _e236: Flector = other_1603;
    let _e250: Motor = self_1835;
    let _e254: Flector = other_1603;
    let _e258: Motor = self_1835;
    let _e262: Flector = other_1603;
    let _e275: Motor = self_1835;
    let _e279: Flector = other_1603;
    let _e292: Motor = self_1835;
    let _e296: Flector = other_1603;
    return Flector(((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e84.g0_.w) * _e88.g0_)) + ((vec4<f32>(_e92.g1_.y) * vec4<f32>(_e96.g1_.z, _e99.g0_.w, _e102.g1_.x, _e105.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e118.g1_.z) * vec4<f32>(_e122.g1_.y, _e125.g1_.x, _e128.g0_.w, _e131.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e144.g1_.x) * vec4<f32>(_e148.g0_.w, _e151.g1_.z, _e154.g1_.y, _e157.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((((((vec4<f32>(_e170.g0_.x) * vec4<f32>(_e174.g0_.w, _e177.g1_.z, _e180.g1_.y, _e183.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e196.g0_.y) * vec4<f32>(_e200.g1_.z, _e203.g0_.w, _e206.g1_.x, _e209.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e223.g0_.z) * vec4<f32>(_e227.g1_.y, _e230.g1_.x, _e233.g0_.w, _e236.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e250.g0_.w) * _e254.g1_)) + ((vec4<f32>(_e258.g1_.y) * vec4<f32>(_e262.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e275.g1_.z) * vec4<f32>(_e279.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e292.g1_.x) * vec4<f32>(_e296.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_regressive_product(self_1836: Motor, other_1604: Flector) -> Flector {
    var self_1837: Motor;
    var other_1605: Flector;

    self_1837 = self_1836;
    other_1605 = other_1604;
    let _e4: Motor = self_1837;
    let _e8: Flector = other_1605;
    let _e19: Motor = self_1837;
    let _e23: Flector = other_1605;
    let _e35: Motor = self_1837;
    let _e39: Flector = other_1605;
    let _e43: Motor = self_1837;
    let _e47: Flector = other_1605;
    let _e59: Motor = self_1837;
    let _e63: Flector = other_1605;
    let _e75: Motor = self_1837;
    let _e79: Flector = other_1605;
    let _e91: Motor = self_1837;
    let _e95: Flector = other_1605;
    let _e107: Motor = self_1837;
    let _e111: Flector = other_1605;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.x) * _e47.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.y) * _e63.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g1_.z) * _e79.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e107.g0_.w) * _e111.g1_));
}

fn motor_flector_anti_wedge(self_1838: Motor, other_1606: Flector) -> Flector {
    var self_1839: Motor;
    var other_1607: Flector;

    self_1839 = self_1838;
    other_1607 = other_1606;
    let _e4: Motor = self_1839;
    let _e8: Flector = other_1607;
    let _e19: Motor = self_1839;
    let _e23: Flector = other_1607;
    let _e35: Motor = self_1839;
    let _e39: Flector = other_1607;
    let _e43: Motor = self_1839;
    let _e47: Flector = other_1607;
    let _e59: Motor = self_1839;
    let _e63: Flector = other_1607;
    let _e75: Motor = self_1839;
    let _e79: Flector = other_1607;
    let _e91: Motor = self_1839;
    let _e95: Flector = other_1607;
    let _e107: Motor = self_1839;
    let _e111: Flector = other_1607;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.x) * _e47.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.y) * _e63.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g1_.z) * _e79.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e107.g0_.w) * _e111.g1_));
}

fn motor_flector_meet(self_1840: Motor, other_1608: Flector) -> Flector {
    var self_1841: Motor;
    var other_1609: Flector;

    self_1841 = self_1840;
    other_1609 = other_1608;
    let _e4: Motor = self_1841;
    let _e8: Flector = other_1609;
    let _e19: Motor = self_1841;
    let _e23: Flector = other_1609;
    let _e35: Motor = self_1841;
    let _e39: Flector = other_1609;
    let _e43: Motor = self_1841;
    let _e47: Flector = other_1609;
    let _e59: Motor = self_1841;
    let _e63: Flector = other_1609;
    let _e75: Motor = self_1841;
    let _e79: Flector = other_1609;
    let _e91: Motor = self_1841;
    let _e95: Flector = other_1609;
    let _e107: Motor = self_1841;
    let _e111: Flector = other_1609;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.x) * _e47.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.y) * _e63.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g1_.z) * _e79.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e107.g0_.w) * _e111.g1_));
}

fn motor_flector_outer_product(self_1842: Motor, other_1610: Flector) -> Plane {
    var self_1843: Motor;
    var other_1611: Flector;

    self_1843 = self_1842;
    other_1611 = other_1610;
    let _e4: Motor = self_1843;
    let _e8: Flector = other_1611;
    let _e19: Motor = self_1843;
    let _e23: Flector = other_1611;
    let _e35: Motor = self_1843;
    let _e39: Flector = other_1611;
    let _e51: Motor = self_1843;
    let _e55: Flector = other_1611;
    let _e67: Motor = self_1843;
    let _e71: Flector = other_1611;
    let _e83: Motor = self_1843;
    let _e87: Flector = other_1611;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_flector_wedge(self_1844: Motor, other_1612: Flector) -> Plane {
    var self_1845: Motor;
    var other_1613: Flector;

    self_1845 = self_1844;
    other_1613 = other_1612;
    let _e4: Motor = self_1845;
    let _e8: Flector = other_1613;
    let _e19: Motor = self_1845;
    let _e23: Flector = other_1613;
    let _e35: Motor = self_1845;
    let _e39: Flector = other_1613;
    let _e51: Motor = self_1845;
    let _e55: Flector = other_1613;
    let _e67: Motor = self_1845;
    let _e71: Flector = other_1613;
    let _e83: Motor = self_1845;
    let _e87: Flector = other_1613;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_flector_join(self_1846: Motor, other_1614: Flector) -> Plane {
    var self_1847: Motor;
    var other_1615: Flector;

    self_1847 = self_1846;
    other_1615 = other_1614;
    let _e4: Motor = self_1847;
    let _e8: Flector = other_1615;
    let _e19: Motor = self_1847;
    let _e23: Flector = other_1615;
    let _e35: Motor = self_1847;
    let _e39: Flector = other_1615;
    let _e51: Motor = self_1847;
    let _e55: Flector = other_1615;
    let _e67: Motor = self_1847;
    let _e71: Flector = other_1615;
    let _e83: Motor = self_1847;
    let _e87: Flector = other_1615;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.y) * _e55.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.z) * _e71.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.x) * _e87.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_flector_inner_anti_product(self_1848: Motor, other_1616: Flector) -> Flector {
    var self_1849: Motor;
    var other_1617: Flector;

    self_1849 = self_1848;
    other_1617 = other_1616;
    let _e4: Motor = self_1849;
    let _e8: Flector = other_1617;
    let _e11: Motor = self_1849;
    let _e15: Flector = other_1617;
    let _e18: Flector = other_1617;
    let _e21: Flector = other_1617;
    let _e24: Flector = other_1617;
    let _e37: Motor = self_1849;
    let _e41: Flector = other_1617;
    let _e44: Flector = other_1617;
    let _e47: Flector = other_1617;
    let _e50: Flector = other_1617;
    let _e64: Motor = self_1849;
    let _e68: Flector = other_1617;
    let _e71: Flector = other_1617;
    let _e74: Flector = other_1617;
    let _e77: Flector = other_1617;
    let _e91: Motor = self_1849;
    let _e95: Flector = other_1617;
    let _e99: Motor = self_1849;
    let _e103: Flector = other_1617;
    let _e116: Motor = self_1849;
    let _e120: Flector = other_1617;
    let _e133: Motor = self_1849;
    let _e137: Flector = other_1617;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((((((vec4<f32>(_e11.g0_.x) * vec4<f32>(_e15.g0_.w, _e18.g1_.z, _e21.g1_.y, _e24.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.y) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.x, _e50.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e64.g0_.z) * vec4<f32>(_e68.g1_.y, _e71.g1_.x, _e74.g0_.w, _e77.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e91.g0_.w) * _e95.g1_)) + ((vec4<f32>(_e99.g1_.y) * vec4<f32>(_e103.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e116.g1_.z) * vec4<f32>(_e120.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e133.g1_.x) * vec4<f32>(_e137.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_left_contraction(self_1850: Motor, other_1618: Flector) -> Point {
    var self_1851: Motor;
    var other_1619: Flector;

    self_1851 = self_1850;
    other_1619 = other_1618;
    let _e4: Motor = self_1851;
    let _e8: Flector = other_1619;
    let _e19: Motor = self_1851;
    let _e23: Flector = other_1619;
    let _e35: Motor = self_1851;
    let _e39: Flector = other_1619;
    return Point(((((vec4<f32>(_e4.g1_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.x) * _e39.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_left_anti_contraction(self_1852: Motor, other_1620: Flector) -> Flector {
    var self_1853: Motor;
    var other_1621: Flector;

    self_1853 = self_1852;
    other_1621 = other_1620;
    let _e4: Motor = self_1853;
    let _e8: Flector = other_1621;
    let _e11: Motor = self_1853;
    let _e15: Flector = other_1621;
    let _e26: Motor = self_1853;
    let _e30: Flector = other_1621;
    let _e42: Motor = self_1853;
    let _e46: Flector = other_1621;
    let _e50: Motor = self_1853;
    let _e54: Flector = other_1621;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e42.g0_.w) * _e46.g1_)) + ((vec4<f32>(_e50.g0_.x) * _e54.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_flector_right_anti_contraction(self_1854: Motor, other_1622: Flector) -> Plane {
    var self_1855: Motor;
    var other_1623: Flector;

    self_1855 = self_1854;
    other_1623 = other_1622;
    let _e4: Motor = self_1855;
    let _e8: Flector = other_1623;
    let _e19: Motor = self_1855;
    let _e23: Flector = other_1623;
    let _e35: Motor = self_1855;
    let _e39: Flector = other_1623;
    let _e52: Motor = self_1855;
    let _e56: Flector = other_1623;
    let _e69: Motor = self_1855;
    let _e73: Flector = other_1623;
    let _e86: Motor = self_1855;
    let _e90: Flector = other_1623;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.y) * vec4<f32>(_e56.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.z) * vec4<f32>(_e73.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e86.g0_.x) * _e90.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn motor_multi_vector_add(self_1856: Motor, other_1624: MultiVector) -> MultiVector {
    var self_1857: Motor;
    var other_1625: MultiVector;

    self_1857 = self_1856;
    other_1625 = other_1624;
    let _e4: Motor = self_1857;
    let _e7: Motor = self_1857;
    let _e15: MultiVector = other_1625;
    let _e18: MultiVector = other_1625;
    let _e20: Motor = self_1857;
    let _e23: Motor = self_1857;
    let _e26: Motor = self_1857;
    let _e30: MultiVector = other_1625;
    let _e33: Motor = self_1857;
    let _e35: MultiVector = other_1625;
    let _e38: MultiVector = other_1625;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) + _e30.g2_), (_e33.g1_ + _e35.g3_), _e38.g4_);
}

fn motor_multi_vector_sub(self_1858: Motor, other_1626: MultiVector) -> MultiVector {
    var self_1859: Motor;
    var other_1627: MultiVector;

    self_1859 = self_1858;
    other_1627 = other_1626;
    let _e4: Motor = self_1859;
    let _e7: Motor = self_1859;
    let _e15: MultiVector = other_1627;
    let _e20: MultiVector = other_1627;
    let _e23: Motor = self_1859;
    let _e26: Motor = self_1859;
    let _e29: Motor = self_1859;
    let _e33: MultiVector = other_1627;
    let _e36: Motor = self_1859;
    let _e38: MultiVector = other_1627;
    let _e43: MultiVector = other_1627;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4<f32>(0.0) - _e20.g1_), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) - _e33.g2_), (_e36.g1_ - _e38.g3_), (vec4<f32>(0.0) - _e43.g4_));
}

fn motor_multi_vector_geometric_product(self_1860: Motor, other_1628: MultiVector) -> MultiVector {
    var self_1861: Motor;
    var other_1629: MultiVector;

    self_1861 = self_1860;
    other_1629 = other_1628;
    let _e4: Motor = self_1861;
    let _e8: MultiVector = other_1629;
    let _e18: Motor = self_1861;
    let _e22: MultiVector = other_1629;
    let _e33: Motor = self_1861;
    let _e37: MultiVector = other_1629;
    let _e47: Motor = self_1861;
    let _e51: MultiVector = other_1629;
    let _e54: MultiVector = other_1629;
    let _e60: Motor = self_1861;
    let _e64: MultiVector = other_1629;
    let _e67: MultiVector = other_1629;
    let _e73: Motor = self_1861;
    let _e77: MultiVector = other_1629;
    let _e80: MultiVector = other_1629;
    let _e86: Motor = self_1861;
    let _e90: MultiVector = other_1629;
    let _e101: Motor = self_1861;
    let _e105: MultiVector = other_1629;
    let _e116: Motor = self_1861;
    let _e120: MultiVector = other_1629;
    let _e132: Motor = self_1861;
    let _e136: MultiVector = other_1629;
    let _e149: Motor = self_1861;
    let _e153: MultiVector = other_1629;
    let _e156: MultiVector = other_1629;
    let _e159: MultiVector = other_1629;
    let _e162: MultiVector = other_1629;
    let _e176: Motor = self_1861;
    let _e180: MultiVector = other_1629;
    let _e183: MultiVector = other_1629;
    let _e186: MultiVector = other_1629;
    let _e189: MultiVector = other_1629;
    let _e203: Motor = self_1861;
    let _e207: MultiVector = other_1629;
    let _e210: MultiVector = other_1629;
    let _e213: MultiVector = other_1629;
    let _e216: MultiVector = other_1629;
    let _e230: Motor = self_1861;
    let _e234: MultiVector = other_1629;
    let _e246: Motor = self_1861;
    let _e250: MultiVector = other_1629;
    let _e253: MultiVector = other_1629;
    let _e256: MultiVector = other_1629;
    let _e267: Motor = self_1861;
    let _e271: MultiVector = other_1629;
    let _e274: MultiVector = other_1629;
    let _e277: MultiVector = other_1629;
    let _e289: Motor = self_1861;
    let _e293: MultiVector = other_1629;
    let _e296: MultiVector = other_1629;
    let _e299: MultiVector = other_1629;
    let _e311: Motor = self_1861;
    let _e315: MultiVector = other_1629;
    let _e319: Motor = self_1861;
    let _e323: MultiVector = other_1629;
    let _e326: MultiVector = other_1629;
    let _e329: MultiVector = other_1629;
    let _e341: Motor = self_1861;
    let _e345: MultiVector = other_1629;
    let _e348: MultiVector = other_1629;
    let _e351: MultiVector = other_1629;
    let _e363: Motor = self_1861;
    let _e367: MultiVector = other_1629;
    let _e370: MultiVector = other_1629;
    let _e373: MultiVector = other_1629;
    let _e385: Motor = self_1861;
    let _e389: MultiVector = other_1629;
    let _e392: MultiVector = other_1629;
    let _e395: MultiVector = other_1629;
    let _e406: Motor = self_1861;
    let _e410: MultiVector = other_1629;
    let _e413: MultiVector = other_1629;
    let _e416: MultiVector = other_1629;
    let _e428: Motor = self_1861;
    let _e432: MultiVector = other_1629;
    let _e435: MultiVector = other_1629;
    let _e438: MultiVector = other_1629;
    let _e450: Motor = self_1861;
    let _e454: MultiVector = other_1629;
    let _e457: MultiVector = other_1629;
    let _e460: MultiVector = other_1629;
    let _e463: MultiVector = other_1629;
    let _e476: Motor = self_1861;
    let _e480: MultiVector = other_1629;
    let _e483: MultiVector = other_1629;
    let _e486: MultiVector = other_1629;
    let _e489: MultiVector = other_1629;
    let _e503: Motor = self_1861;
    let _e507: MultiVector = other_1629;
    let _e521: Motor = self_1861;
    let _e525: MultiVector = other_1629;
    let _e528: MultiVector = other_1629;
    let _e531: MultiVector = other_1629;
    let _e534: MultiVector = other_1629;
    let _e548: Motor = self_1861;
    let _e552: MultiVector = other_1629;
    let _e555: MultiVector = other_1629;
    let _e558: MultiVector = other_1629;
    let _e561: MultiVector = other_1629;
    let _e575: Motor = self_1861;
    let _e579: MultiVector = other_1629;
    let _e582: MultiVector = other_1629;
    let _e585: MultiVector = other_1629;
    let _e588: MultiVector = other_1629;
    let _e602: Motor = self_1861;
    let _e606: MultiVector = other_1629;
    let _e609: MultiVector = other_1629;
    let _e612: MultiVector = other_1629;
    let _e615: MultiVector = other_1629;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g0_.w) * vec2<f32>(_e37.g0_.x)) * vec2<f32>(0.0, 1.0))) - (vec2<f32>(_e47.g1_.x) * vec2<f32>(_e51.g3_.x, _e54.g2_.x))) - (vec2<f32>(_e60.g1_.y) * vec2<f32>(_e64.g3_.y, _e67.g2_.y))) - (vec2<f32>(_e73.g1_.z) * vec2<f32>(_e77.g3_.z, _e80.g2_.z))) + ((vec2<f32>(_e86.g0_.x) * vec2<f32>(_e90.g3_.x)) * vec2<f32>(0.0, -(1.0)))), ((((((((vec4<f32>(_e101.g0_.y) * vec4<f32>(_e105.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e116.g0_.z) * vec4<f32>(_e120.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e132.g0_.w) * vec4<f32>(_e136.g4_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e149.g1_.x) * vec4<f32>(_e153.g4_.w, _e156.g1_.z, _e159.g1_.y, _e162.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e176.g1_.y) * vec4<f32>(_e180.g1_.z, _e183.g4_.w, _e186.g1_.x, _e189.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e203.g1_.z) * vec4<f32>(_e207.g1_.y, _e210.g1_.x, _e213.g4_.w, _e216.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e230.g0_.x) * vec4<f32>(_e234.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((((((vec3<f32>(_e246.g0_.x) * vec3<f32>(_e250.g0_.x, _e253.g3_.z, _e256.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e267.g0_.y) * vec3<f32>(_e271.g3_.z, _e274.g0_.x, _e277.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e289.g0_.z) * vec3<f32>(_e293.g3_.y, _e296.g3_.x, _e299.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e311.g0_.w) * _e315.g3_)) + ((vec3<f32>(_e319.g1_.x) * vec3<f32>(_e323.g0_.y, _e326.g2_.z, _e329.g2_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e341.g1_.y) * vec3<f32>(_e345.g2_.z, _e348.g0_.y, _e351.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e363.g1_.z) * vec3<f32>(_e367.g2_.y, _e370.g2_.x, _e373.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((vec3<f32>(_e385.g1_.x) * vec3<f32>(_e389.g0_.x, _e392.g3_.z, _e395.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e406.g1_.y) * vec3<f32>(_e410.g3_.z, _e413.g0_.x, _e416.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e428.g1_.z) * vec3<f32>(_e432.g3_.y, _e435.g3_.x, _e438.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e450.g0_.y) * vec4<f32>(_e454.g1_.z, _e457.g4_.w, _e460.g1_.x, _e463.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0)) + ((vec4<f32>(_e476.g0_.z) * vec4<f32>(_e480.g1_.y, _e483.g1_.x, _e486.g4_.w, _e489.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e503.g0_.w) * _e507.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e521.g1_.x) * vec4<f32>(_e525.g1_.w, _e528.g4_.z, _e531.g4_.y, _e534.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e548.g1_.y) * vec4<f32>(_e552.g4_.z, _e555.g1_.w, _e558.g4_.x, _e561.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e575.g1_.z) * vec4<f32>(_e579.g4_.y, _e582.g4_.x, _e585.g1_.w, _e588.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e602.g0_.x) * vec4<f32>(_e606.g4_.w, _e609.g1_.z, _e612.g1_.y, _e615.g4_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))));
}

fn motor_multi_vector_geometric_anti_product(self_1862: Motor, other_1630: MultiVector) -> MultiVector {
    var self_1863: Motor;
    var other_1631: MultiVector;

    self_1863 = self_1862;
    other_1631 = other_1630;
    let _e6: Motor = self_1863;
    let _e10: MultiVector = other_1631;
    let _e13: MultiVector = other_1631;
    let _e19: Motor = self_1863;
    let _e23: MultiVector = other_1631;
    let _e26: MultiVector = other_1631;
    let _e32: Motor = self_1863;
    let _e36: MultiVector = other_1631;
    let _e39: MultiVector = other_1631;
    let _e45: Motor = self_1863;
    let _e49: MultiVector = other_1631;
    let _e53: Motor = self_1863;
    let _e57: MultiVector = other_1631;
    let _e68: Motor = self_1863;
    let _e72: MultiVector = other_1631;
    let _e83: Motor = self_1863;
    let _e87: MultiVector = other_1631;
    let _e98: Motor = self_1863;
    let _e102: MultiVector = other_1631;
    let _e105: MultiVector = other_1631;
    let _e108: MultiVector = other_1631;
    let _e111: MultiVector = other_1631;
    let _e124: Motor = self_1863;
    let _e128: MultiVector = other_1631;
    let _e131: MultiVector = other_1631;
    let _e134: MultiVector = other_1631;
    let _e137: MultiVector = other_1631;
    let _e151: Motor = self_1863;
    let _e155: MultiVector = other_1631;
    let _e158: MultiVector = other_1631;
    let _e161: MultiVector = other_1631;
    let _e164: MultiVector = other_1631;
    let _e178: Motor = self_1863;
    let _e182: MultiVector = other_1631;
    let _e186: Motor = self_1863;
    let _e190: MultiVector = other_1631;
    let _e193: MultiVector = other_1631;
    let _e196: MultiVector = other_1631;
    let _e199: MultiVector = other_1631;
    let _e212: Motor = self_1863;
    let _e216: MultiVector = other_1631;
    let _e219: MultiVector = other_1631;
    let _e222: MultiVector = other_1631;
    let _e225: MultiVector = other_1631;
    let _e238: Motor = self_1863;
    let _e242: MultiVector = other_1631;
    let _e245: MultiVector = other_1631;
    let _e248: MultiVector = other_1631;
    let _e251: MultiVector = other_1631;
    let _e264: Motor = self_1863;
    let _e268: MultiVector = other_1631;
    let _e271: MultiVector = other_1631;
    let _e274: MultiVector = other_1631;
    let _e285: Motor = self_1863;
    let _e289: MultiVector = other_1631;
    let _e292: MultiVector = other_1631;
    let _e295: MultiVector = other_1631;
    let _e307: Motor = self_1863;
    let _e311: MultiVector = other_1631;
    let _e314: MultiVector = other_1631;
    let _e317: MultiVector = other_1631;
    let _e329: Motor = self_1863;
    let _e333: MultiVector = other_1631;
    let _e337: Motor = self_1863;
    let _e341: MultiVector = other_1631;
    let _e344: MultiVector = other_1631;
    let _e347: MultiVector = other_1631;
    let _e358: Motor = self_1863;
    let _e362: MultiVector = other_1631;
    let _e365: MultiVector = other_1631;
    let _e368: MultiVector = other_1631;
    let _e380: Motor = self_1863;
    let _e384: MultiVector = other_1631;
    let _e387: MultiVector = other_1631;
    let _e390: MultiVector = other_1631;
    let _e402: Motor = self_1863;
    let _e406: MultiVector = other_1631;
    let _e410: Motor = self_1863;
    let _e414: MultiVector = other_1631;
    let _e417: MultiVector = other_1631;
    let _e420: MultiVector = other_1631;
    let _e432: Motor = self_1863;
    let _e436: MultiVector = other_1631;
    let _e439: MultiVector = other_1631;
    let _e442: MultiVector = other_1631;
    let _e454: Motor = self_1863;
    let _e458: MultiVector = other_1631;
    let _e461: MultiVector = other_1631;
    let _e464: MultiVector = other_1631;
    let _e476: Motor = self_1863;
    let _e480: MultiVector = other_1631;
    let _e483: MultiVector = other_1631;
    let _e486: MultiVector = other_1631;
    let _e489: MultiVector = other_1631;
    let _e502: Motor = self_1863;
    let _e506: MultiVector = other_1631;
    let _e509: MultiVector = other_1631;
    let _e512: MultiVector = other_1631;
    let _e515: MultiVector = other_1631;
    let _e529: Motor = self_1863;
    let _e533: MultiVector = other_1631;
    let _e536: MultiVector = other_1631;
    let _e539: MultiVector = other_1631;
    let _e542: MultiVector = other_1631;
    let _e556: Motor = self_1863;
    let _e560: MultiVector = other_1631;
    let _e564: Motor = self_1863;
    let _e568: MultiVector = other_1631;
    let _e581: Motor = self_1863;
    let _e585: MultiVector = other_1631;
    let _e598: Motor = self_1863;
    let _e602: MultiVector = other_1631;
    return MultiVector((((((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + (vec2<f32>(_e45.g0_.w) * _e49.g0_)) + ((vec2<f32>(_e53.g1_.y) * vec2<f32>(_e57.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e68.g1_.z) * vec2<f32>(_e72.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e83.g1_.x) * vec2<f32>(_e87.g2_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((vec4<f32>(_e98.g0_.x) * vec4<f32>(_e102.g4_.w, _e105.g1_.z, _e108.g1_.y, _e111.g4_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e124.g0_.y) * vec4<f32>(_e128.g1_.z, _e131.g4_.w, _e134.g1_.x, _e137.g4_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e151.g0_.z) * vec4<f32>(_e155.g1_.y, _e158.g1_.x, _e161.g4_.w, _e164.g4_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e178.g0_.w) * _e182.g1_)) + ((vec4<f32>(_e186.g1_.y) * vec4<f32>(_e190.g4_.z, _e193.g1_.w, _e196.g4_.x, _e199.g4_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e212.g1_.z) * vec4<f32>(_e216.g4_.y, _e219.g4_.x, _e222.g1_.w, _e225.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e238.g1_.x) * vec4<f32>(_e242.g1_.w, _e245.g4_.z, _e248.g4_.y, _e251.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec3<f32>(_e264.g0_.x) * vec3<f32>(_e268.g0_.y, _e271.g2_.z, _e274.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e285.g0_.y) * vec3<f32>(_e289.g2_.z, _e292.g0_.y, _e295.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e307.g0_.z) * vec3<f32>(_e311.g2_.y, _e314.g2_.x, _e317.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e329.g0_.w) * _e333.g2_)), ((((((((vec3<f32>(_e337.g0_.x) * vec3<f32>(_e341.g0_.x, _e344.g3_.z, _e347.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e358.g0_.y) * vec3<f32>(_e362.g3_.z, _e365.g0_.x, _e368.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e380.g0_.z) * vec3<f32>(_e384.g3_.y, _e387.g3_.x, _e390.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e402.g0_.w) * _e406.g3_)) + ((vec3<f32>(_e410.g1_.x) * vec3<f32>(_e414.g0_.y, _e417.g2_.z, _e420.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e432.g1_.y) * vec3<f32>(_e436.g2_.z, _e439.g0_.y, _e442.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e454.g1_.z) * vec3<f32>(_e458.g2_.y, _e461.g2_.x, _e464.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e476.g0_.x) * vec4<f32>(_e480.g1_.w, _e483.g4_.z, _e486.g4_.y, _e489.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e502.g0_.y) * vec4<f32>(_e506.g4_.z, _e509.g1_.w, _e512.g4_.x, _e515.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e529.g0_.z) * vec4<f32>(_e533.g4_.y, _e536.g4_.x, _e539.g1_.w, _e542.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e556.g0_.w) * _e560.g4_)) + ((vec4<f32>(_e564.g1_.y) * vec4<f32>(_e568.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e581.g1_.z) * vec4<f32>(_e585.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e598.g1_.x) * vec4<f32>(_e602.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_regressive_product(self_1864: Motor, other_1632: MultiVector) -> MultiVector {
    var self_1865: Motor;
    var other_1633: MultiVector;

    self_1865 = self_1864;
    other_1633 = other_1632;
    let _e4: Motor = self_1865;
    let _e8: MultiVector = other_1633;
    let _e18: Motor = self_1865;
    let _e22: MultiVector = other_1633;
    let _e33: Motor = self_1865;
    let _e37: MultiVector = other_1633;
    let _e41: Motor = self_1865;
    let _e45: MultiVector = other_1633;
    let _e56: Motor = self_1865;
    let _e60: MultiVector = other_1633;
    let _e71: Motor = self_1865;
    let _e75: MultiVector = other_1633;
    let _e86: Motor = self_1865;
    let _e90: MultiVector = other_1633;
    let _e101: Motor = self_1865;
    let _e105: MultiVector = other_1633;
    let _e116: Motor = self_1865;
    let _e120: MultiVector = other_1633;
    let _e132: Motor = self_1865;
    let _e136: MultiVector = other_1633;
    let _e140: Motor = self_1865;
    let _e144: MultiVector = other_1633;
    let _e156: Motor = self_1865;
    let _e160: MultiVector = other_1633;
    let _e172: Motor = self_1865;
    let _e176: MultiVector = other_1633;
    let _e188: Motor = self_1865;
    let _e192: MultiVector = other_1633;
    let _e204: Motor = self_1865;
    let _e208: MultiVector = other_1633;
    let _e211: Motor = self_1865;
    let _e214: Motor = self_1865;
    let _e217: Motor = self_1865;
    let _e221: MultiVector = other_1633;
    let _e227: Motor = self_1865;
    let _e231: MultiVector = other_1633;
    let _e234: Motor = self_1865;
    let _e236: MultiVector = other_1633;
    let _e242: Motor = self_1865;
    let _e246: MultiVector = other_1633;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g1_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e56.g1_.y) * vec2<f32>(_e60.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e71.g1_.z) * vec2<f32>(_e75.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e86.g0_.x) * vec2<f32>(_e90.g3_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((vec4<f32>(_e101.g0_.y) * _e105.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e116.g0_.z) * _e120.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e132.g0_.w) * _e136.g1_)) + ((vec4<f32>(_e140.g1_.x) * _e144.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e156.g1_.y) * _e160.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e172.g1_.z) * _e176.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e188.g0_.x) * _e192.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e204.g0_.w) * _e208.g2_) + (vec3<f32>(_e211.g0_.x, _e214.g0_.y, _e217.g0_.z) * vec3<f32>(_e221.g0_.y))), ((vec3<f32>(_e227.g0_.w) * _e231.g3_) + (_e234.g1_ * vec3<f32>(_e236.g0_.y))), (vec4<f32>(_e242.g0_.w) * _e246.g4_));
}

fn motor_multi_vector_anti_wedge(self_1866: Motor, other_1634: MultiVector) -> MultiVector {
    var self_1867: Motor;
    var other_1635: MultiVector;

    self_1867 = self_1866;
    other_1635 = other_1634;
    let _e4: Motor = self_1867;
    let _e8: MultiVector = other_1635;
    let _e18: Motor = self_1867;
    let _e22: MultiVector = other_1635;
    let _e33: Motor = self_1867;
    let _e37: MultiVector = other_1635;
    let _e41: Motor = self_1867;
    let _e45: MultiVector = other_1635;
    let _e56: Motor = self_1867;
    let _e60: MultiVector = other_1635;
    let _e71: Motor = self_1867;
    let _e75: MultiVector = other_1635;
    let _e86: Motor = self_1867;
    let _e90: MultiVector = other_1635;
    let _e101: Motor = self_1867;
    let _e105: MultiVector = other_1635;
    let _e116: Motor = self_1867;
    let _e120: MultiVector = other_1635;
    let _e132: Motor = self_1867;
    let _e136: MultiVector = other_1635;
    let _e140: Motor = self_1867;
    let _e144: MultiVector = other_1635;
    let _e156: Motor = self_1867;
    let _e160: MultiVector = other_1635;
    let _e172: Motor = self_1867;
    let _e176: MultiVector = other_1635;
    let _e188: Motor = self_1867;
    let _e192: MultiVector = other_1635;
    let _e204: Motor = self_1867;
    let _e208: MultiVector = other_1635;
    let _e211: Motor = self_1867;
    let _e214: Motor = self_1867;
    let _e217: Motor = self_1867;
    let _e221: MultiVector = other_1635;
    let _e227: Motor = self_1867;
    let _e231: MultiVector = other_1635;
    let _e234: Motor = self_1867;
    let _e236: MultiVector = other_1635;
    let _e242: Motor = self_1867;
    let _e246: MultiVector = other_1635;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g1_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e56.g1_.y) * vec2<f32>(_e60.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e71.g1_.z) * vec2<f32>(_e75.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e86.g0_.x) * vec2<f32>(_e90.g3_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((vec4<f32>(_e101.g0_.y) * _e105.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e116.g0_.z) * _e120.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e132.g0_.w) * _e136.g1_)) + ((vec4<f32>(_e140.g1_.x) * _e144.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e156.g1_.y) * _e160.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e172.g1_.z) * _e176.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e188.g0_.x) * _e192.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e204.g0_.w) * _e208.g2_) + (vec3<f32>(_e211.g0_.x, _e214.g0_.y, _e217.g0_.z) * vec3<f32>(_e221.g0_.y))), ((vec3<f32>(_e227.g0_.w) * _e231.g3_) + (_e234.g1_ * vec3<f32>(_e236.g0_.y))), (vec4<f32>(_e242.g0_.w) * _e246.g4_));
}

fn motor_multi_vector_meet(self_1868: Motor, other_1636: MultiVector) -> MultiVector {
    var self_1869: Motor;
    var other_1637: MultiVector;

    self_1869 = self_1868;
    other_1637 = other_1636;
    let _e4: Motor = self_1869;
    let _e8: MultiVector = other_1637;
    let _e18: Motor = self_1869;
    let _e22: MultiVector = other_1637;
    let _e33: Motor = self_1869;
    let _e37: MultiVector = other_1637;
    let _e41: Motor = self_1869;
    let _e45: MultiVector = other_1637;
    let _e56: Motor = self_1869;
    let _e60: MultiVector = other_1637;
    let _e71: Motor = self_1869;
    let _e75: MultiVector = other_1637;
    let _e86: Motor = self_1869;
    let _e90: MultiVector = other_1637;
    let _e101: Motor = self_1869;
    let _e105: MultiVector = other_1637;
    let _e116: Motor = self_1869;
    let _e120: MultiVector = other_1637;
    let _e132: Motor = self_1869;
    let _e136: MultiVector = other_1637;
    let _e140: Motor = self_1869;
    let _e144: MultiVector = other_1637;
    let _e156: Motor = self_1869;
    let _e160: MultiVector = other_1637;
    let _e172: Motor = self_1869;
    let _e176: MultiVector = other_1637;
    let _e188: Motor = self_1869;
    let _e192: MultiVector = other_1637;
    let _e204: Motor = self_1869;
    let _e208: MultiVector = other_1637;
    let _e211: Motor = self_1869;
    let _e214: Motor = self_1869;
    let _e217: Motor = self_1869;
    let _e221: MultiVector = other_1637;
    let _e227: Motor = self_1869;
    let _e231: MultiVector = other_1637;
    let _e234: Motor = self_1869;
    let _e236: MultiVector = other_1637;
    let _e242: Motor = self_1869;
    let _e246: MultiVector = other_1637;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g1_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e56.g1_.y) * vec2<f32>(_e60.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e71.g1_.z) * vec2<f32>(_e75.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e86.g0_.x) * vec2<f32>(_e90.g3_.x)) * vec2<f32>(-(1.0), 0.0))), ((((((((vec4<f32>(_e101.g0_.y) * _e105.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e116.g0_.z) * _e120.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e132.g0_.w) * _e136.g1_)) + ((vec4<f32>(_e140.g1_.x) * _e144.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e156.g1_.y) * _e160.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e172.g1_.z) * _e176.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e188.g0_.x) * _e192.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e204.g0_.w) * _e208.g2_) + (vec3<f32>(_e211.g0_.x, _e214.g0_.y, _e217.g0_.z) * vec3<f32>(_e221.g0_.y))), ((vec3<f32>(_e227.g0_.w) * _e231.g3_) + (_e234.g1_ * vec3<f32>(_e236.g0_.y))), (vec4<f32>(_e242.g0_.w) * _e246.g4_));
}

fn motor_multi_vector_inner_anti_product(self_1870: Motor, other_1638: MultiVector) -> MultiVector {
    var self_1871: Motor;
    var other_1639: MultiVector;

    self_1871 = self_1870;
    other_1639 = other_1638;
    let _e4: Motor = self_1871;
    let _e8: MultiVector = other_1639;
    let _e18: Motor = self_1871;
    let _e22: MultiVector = other_1639;
    let _e33: Motor = self_1871;
    let _e37: MultiVector = other_1639;
    let _e41: Motor = self_1871;
    let _e45: MultiVector = other_1639;
    let _e56: Motor = self_1871;
    let _e60: MultiVector = other_1639;
    let _e63: Motor = self_1871;
    let _e67: MultiVector = other_1639;
    let _e70: Motor = self_1871;
    let _e73: Motor = self_1871;
    let _e76: Motor = self_1871;
    let _e80: MultiVector = other_1639;
    let _e86: Motor = self_1871;
    let _e90: MultiVector = other_1639;
    let _e93: Motor = self_1871;
    let _e97: MultiVector = other_1639;
    let _e108: Motor = self_1871;
    let _e112: MultiVector = other_1639;
    let _e123: Motor = self_1871;
    let _e127: MultiVector = other_1639;
    let _e138: Motor = self_1871;
    let _e141: Motor = self_1871;
    let _e144: Motor = self_1871;
    let _e148: MultiVector = other_1639;
    let _e154: Motor = self_1871;
    let _e158: MultiVector = other_1639;
    let _e161: MultiVector = other_1639;
    let _e164: MultiVector = other_1639;
    let _e167: MultiVector = other_1639;
    let _e180: Motor = self_1871;
    let _e184: MultiVector = other_1639;
    let _e187: MultiVector = other_1639;
    let _e190: MultiVector = other_1639;
    let _e193: MultiVector = other_1639;
    let _e207: Motor = self_1871;
    let _e211: MultiVector = other_1639;
    let _e214: MultiVector = other_1639;
    let _e217: MultiVector = other_1639;
    let _e220: MultiVector = other_1639;
    let _e234: Motor = self_1871;
    let _e238: MultiVector = other_1639;
    let _e242: Motor = self_1871;
    let _e246: MultiVector = other_1639;
    let _e259: Motor = self_1871;
    let _e263: MultiVector = other_1639;
    let _e276: Motor = self_1871;
    let _e280: MultiVector = other_1639;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(0.0, -(1.0)))), (vec4<f32>(_e56.g0_.w) * _e60.g1_), ((vec3<f32>(_e63.g0_.w) * _e67.g2_) + (vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z) * vec3<f32>(_e80.g0_.y))), (((((vec3<f32>(_e86.g0_.w) * _e90.g3_) + ((vec3<f32>(_e93.g1_.x) * vec3<f32>(_e97.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e108.g1_.y) * vec3<f32>(_e112.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e123.g1_.z) * vec3<f32>(_e127.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (vec3<f32>(_e138.g0_.x, _e141.g0_.y, _e144.g0_.z) * vec3<f32>(_e148.g0_.x))), ((((((((vec4<f32>(_e154.g0_.x) * vec4<f32>(_e158.g1_.w, _e161.g4_.z, _e164.g4_.y, _e167.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e180.g0_.y) * vec4<f32>(_e184.g4_.z, _e187.g1_.w, _e190.g4_.x, _e193.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e207.g0_.z) * vec4<f32>(_e211.g4_.y, _e214.g4_.x, _e217.g1_.w, _e220.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e234.g0_.w) * _e238.g4_)) + ((vec4<f32>(_e242.g1_.y) * vec4<f32>(_e246.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e259.g1_.z) * vec4<f32>(_e263.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e276.g1_.x) * vec4<f32>(_e280.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_left_anti_contraction(self_1872: Motor, other_1640: MultiVector) -> MultiVector {
    var self_1873: Motor;
    var other_1641: MultiVector;

    self_1873 = self_1872;
    other_1641 = other_1640;
    let _e4: Motor = self_1873;
    let _e8: MultiVector = other_1641;
    let _e18: Motor = self_1873;
    let _e22: MultiVector = other_1641;
    let _e33: Motor = self_1873;
    let _e37: MultiVector = other_1641;
    let _e41: Motor = self_1873;
    let _e45: MultiVector = other_1641;
    let _e56: Motor = self_1873;
    let _e60: MultiVector = other_1641;
    let _e63: Motor = self_1873;
    let _e67: MultiVector = other_1641;
    let _e70: Motor = self_1873;
    let _e74: MultiVector = other_1641;
    let _e77: Motor = self_1873;
    let _e80: Motor = self_1873;
    let _e83: Motor = self_1873;
    let _e87: MultiVector = other_1641;
    let _e93: Motor = self_1873;
    let _e97: MultiVector = other_1641;
    let _e108: Motor = self_1873;
    let _e112: MultiVector = other_1641;
    let _e124: Motor = self_1873;
    let _e128: MultiVector = other_1641;
    let _e132: Motor = self_1873;
    let _e136: MultiVector = other_1641;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(0.0, -(1.0)))), (vec4<f32>(_e56.g0_.w) * _e60.g1_), (vec3<f32>(_e63.g0_.w) * _e67.g2_), ((vec3<f32>(_e70.g0_.w) * _e74.g3_) + (vec3<f32>(_e77.g0_.x, _e80.g0_.y, _e83.g0_.z) * vec3<f32>(_e87.g0_.x))), (((((vec4<f32>(_e93.g0_.y) * _e97.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e108.g0_.z) * _e112.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e124.g0_.w) * _e128.g4_)) + ((vec4<f32>(_e132.g0_.x) * _e136.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn motor_multi_vector_scalar_product(self_1874: Motor, other_1642: MultiVector) -> Scalar {
    var self_1875: Motor;
    var other_1643: MultiVector;

    self_1875 = self_1874;
    other_1643 = other_1642;
    let _e5: Motor = self_1875;
    let _e8: MultiVector = other_1643;
    let _e13: Motor = self_1875;
    let _e16: MultiVector = other_1643;
    let _e21: Motor = self_1875;
    let _e24: MultiVector = other_1643;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn motor_multi_vector_dot(self_1876: Motor, other_1644: MultiVector) -> Scalar {
    var self_1877: Motor;
    var other_1645: MultiVector;

    self_1877 = self_1876;
    other_1645 = other_1644;
    let _e5: Motor = self_1877;
    let _e8: MultiVector = other_1645;
    let _e13: Motor = self_1877;
    let _e16: MultiVector = other_1645;
    let _e21: Motor = self_1877;
    let _e24: MultiVector = other_1645;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g3_.x)) - (_e13.g1_.y * _e16.g3_.y)) - (_e21.g1_.z * _e24.g3_.z)));
}

fn motor_multi_vector_anti_scalar_product(self_1878: Motor, other_1646: MultiVector) -> AntiScalar {
    var self_1879: Motor;
    var other_1647: MultiVector;

    self_1879 = self_1878;
    other_1647 = other_1646;
    let _e5: Motor = self_1879;
    let _e8: MultiVector = other_1647;
    let _e13: Motor = self_1879;
    let _e16: MultiVector = other_1647;
    let _e21: Motor = self_1879;
    let _e24: MultiVector = other_1647;
    let _e29: Motor = self_1879;
    let _e32: MultiVector = other_1647;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn motor_multi_vector_anti_dot(self_1880: Motor, other_1648: MultiVector) -> AntiScalar {
    var self_1881: Motor;
    var other_1649: MultiVector;

    self_1881 = self_1880;
    other_1649 = other_1648;
    let _e5: Motor = self_1881;
    let _e8: MultiVector = other_1649;
    let _e13: Motor = self_1881;
    let _e16: MultiVector = other_1649;
    let _e21: Motor = self_1881;
    let _e24: MultiVector = other_1649;
    let _e29: Motor = self_1881;
    let _e32: MultiVector = other_1649;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn motor_squared_magnitude(self_1882: Motor) -> Scalar {
    var self_1883: Motor;

    self_1883 = self_1882;
    let _e2: Motor = self_1883;
    let _e3: Motor = self_1883;
    let _e4: Motor = motor_reversal(_e3);
    let _e5: Scalar = motor_motor_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_magnitude(self_1884: Motor) -> Scalar {
    var self_1885: Motor;

    self_1885 = self_1884;
    let _e2: Motor = self_1885;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_bulk_norm(self_1886: Motor) -> Scalar {
    var self_1887: Motor;

    self_1887 = self_1886;
    let _e2: Motor = self_1887;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_squared_anti_magnitude(self_1888: Motor) -> AntiScalar {
    var self_1889: Motor;

    self_1889 = self_1888;
    let _e2: Motor = self_1889;
    let _e3: Motor = self_1889;
    let _e4: Motor = motor_anti_reversal(_e3);
    let _e5: AntiScalar = motor_motor_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_weight_norm(self_1890: Motor) -> AntiScalar {
    var self_1891: Motor;

    self_1891 = self_1890;
    let _e2: Motor = self_1891;
    let _e3: AntiScalar = motor_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn motor_geometric_norm(self_1892: Motor) -> HomogeneousMagnitude {
    var self_1893: Motor;

    self_1893 = self_1892;
    let _e2: Motor = self_1893;
    let _e3: Scalar = motor_bulk_norm(_e2);
    let _e4: Motor = self_1893;
    let _e5: AntiScalar = motor_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn motor_scale(self_1894: Motor, other_1650: f32) -> Motor {
    var self_1895: Motor;
    var other_1651: f32;

    self_1895 = self_1894;
    other_1651 = other_1650;
    let _e4: Motor = self_1895;
    let _e5: f32 = other_1651;
    let _e7: Motor = motor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn motor_signum(self_1896: Motor) -> Motor {
    var self_1897: Motor;

    self_1897 = self_1896;
    let _e2: Motor = self_1897;
    let _e3: Motor = self_1897;
    let _e4: Scalar = motor_magnitude(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_inverse(self_1898: Motor) -> Motor {
    var self_1899: Motor;

    self_1899 = self_1898;
    let _e2: Motor = self_1899;
    let _e3: Motor = motor_reversal(_e2);
    let _e4: Motor = self_1899;
    let _e5: Scalar = motor_squared_magnitude(_e4);
    let _e10: Motor = motor_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn motor_unitize(self_1900: Motor) -> Motor {
    var self_1901: Motor;

    self_1901 = self_1900;
    let _e2: Motor = self_1901;
    let _e3: Motor = self_1901;
    let _e4: AntiScalar = motor_weight_norm(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_attitude(self_1902: Motor) -> Flector {
    var self_1903: Motor;

    self_1903 = self_1902;
    let _e2: Motor = self_1903;
    let _e9: Flector = motor_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn rotor_zero() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn rotor_one() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn rotor_neg(self_1904: Rotor) -> Rotor {
    var self_1905: Rotor;

    self_1905 = self_1904;
    let _e2: Rotor = self_1905;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn rotor_automorphism(self_1906: Rotor) -> Rotor {
    var self_1907: Rotor;

    self_1907 = self_1906;
    let _e2: Rotor = self_1907;
    return Rotor(_e2.g0_);
}

fn rotor_reversal(self_1908: Rotor) -> Rotor {
    var self_1909: Rotor;

    self_1909 = self_1908;
    let _e2: Rotor = self_1909;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn rotor_conjugation(self_1910: Rotor) -> Rotor {
    var self_1911: Rotor;

    self_1911 = self_1910;
    let _e2: Rotor = self_1911;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn rotor_anti_reversal(self_1912: Rotor) -> Rotor {
    var self_1913: Rotor;

    self_1913 = self_1912;
    let _e2: Rotor = self_1913;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn rotor_double_complement(self_1914: Rotor) -> Rotor {
    var self_1915: Rotor;

    self_1915 = self_1914;
    let _e2: Rotor = self_1915;
    return Rotor(_e2.g0_);
}

fn rotor_scalar_geometric_product(self_1916: Rotor, other_1652: Scalar) -> Rotor {
    var self_1917: Rotor;
    var other_1653: Scalar;

    self_1917 = self_1916;
    other_1653 = other_1652;
    let _e4: Rotor = self_1917;
    let _e6: Scalar = other_1653;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_regressive_product(self_1918: Rotor, other_1654: Scalar) -> Scalar {
    var self_1919: Rotor;
    var other_1655: Scalar;

    self_1919 = self_1918;
    other_1655 = other_1654;
    let _e4: Rotor = self_1919;
    let _e7: Scalar = other_1655;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_anti_wedge(self_1920: Rotor, other_1656: Scalar) -> Scalar {
    var self_1921: Rotor;
    var other_1657: Scalar;

    self_1921 = self_1920;
    other_1657 = other_1656;
    let _e4: Rotor = self_1921;
    let _e7: Scalar = other_1657;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_meet(self_1922: Rotor, other_1658: Scalar) -> Scalar {
    var self_1923: Rotor;
    var other_1659: Scalar;

    self_1923 = self_1922;
    other_1659 = other_1658;
    let _e4: Rotor = self_1923;
    let _e7: Scalar = other_1659;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_scalar_outer_product(self_1924: Rotor, other_1660: Scalar) -> Rotor {
    var self_1925: Rotor;
    var other_1661: Scalar;

    self_1925 = self_1924;
    other_1661 = other_1660;
    let _e4: Rotor = self_1925;
    let _e6: Scalar = other_1661;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_wedge(self_1926: Rotor, other_1662: Scalar) -> Rotor {
    var self_1927: Rotor;
    var other_1663: Scalar;

    self_1927 = self_1926;
    other_1663 = other_1662;
    let _e4: Rotor = self_1927;
    let _e6: Scalar = other_1663;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_join(self_1928: Rotor, other_1664: Scalar) -> Rotor {
    var self_1929: Rotor;
    var other_1665: Scalar;

    self_1929 = self_1928;
    other_1665 = other_1664;
    let _e4: Rotor = self_1929;
    let _e6: Scalar = other_1665;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_inner_product(self_1930: Rotor, other_1666: Scalar) -> Rotor {
    var self_1931: Rotor;
    var other_1667: Scalar;

    self_1931 = self_1930;
    other_1667 = other_1666;
    let _e4: Rotor = self_1931;
    let _e6: Scalar = other_1667;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_right_contraction(self_1932: Rotor, other_1668: Scalar) -> Rotor {
    var self_1933: Rotor;
    var other_1669: Scalar;

    self_1933 = self_1932;
    other_1669 = other_1668;
    let _e4: Rotor = self_1933;
    let _e6: Scalar = other_1669;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_into(self_1934: Rotor) -> AntiScalar {
    var self_1935: Rotor;

    self_1935 = self_1934;
    let _e2: Rotor = self_1935;
    return AntiScalar(_e2.g0_.w);
}

fn rotor_anti_scalar_add(self_1936: Rotor, other_1670: AntiScalar) -> Rotor {
    var self_1937: Rotor;
    var other_1671: AntiScalar;

    self_1937 = self_1936;
    other_1671 = other_1670;
    let _e4: Rotor = self_1937;
    let _e6: AntiScalar = other_1671;
    return Rotor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_sub(self_1938: Rotor, other_1672: AntiScalar) -> Rotor {
    var self_1939: Rotor;
    var other_1673: AntiScalar;

    self_1939 = self_1938;
    other_1673 = other_1672;
    let _e4: Rotor = self_1939;
    let _e6: AntiScalar = other_1673;
    return Rotor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn rotor_anti_scalar_geometric_anti_product(self_1940: Rotor, other_1674: AntiScalar) -> Rotor {
    var self_1941: Rotor;
    var other_1675: AntiScalar;

    self_1941 = self_1940;
    other_1675 = other_1674;
    let _e4: Rotor = self_1941;
    let _e6: AntiScalar = other_1675;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_regressive_product(self_1942: Rotor, other_1676: AntiScalar) -> Rotor {
    var self_1943: Rotor;
    var other_1677: AntiScalar;

    self_1943 = self_1942;
    other_1677 = other_1676;
    let _e4: Rotor = self_1943;
    let _e6: AntiScalar = other_1677;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_anti_wedge(self_1944: Rotor, other_1678: AntiScalar) -> Rotor {
    var self_1945: Rotor;
    var other_1679: AntiScalar;

    self_1945 = self_1944;
    other_1679 = other_1678;
    let _e4: Rotor = self_1945;
    let _e6: AntiScalar = other_1679;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_meet(self_1946: Rotor, other_1680: AntiScalar) -> Rotor {
    var self_1947: Rotor;
    var other_1681: AntiScalar;

    self_1947 = self_1946;
    other_1681 = other_1680;
    let _e4: Rotor = self_1947;
    let _e6: AntiScalar = other_1681;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_inner_anti_product(self_1948: Rotor, other_1682: AntiScalar) -> Rotor {
    var self_1949: Rotor;
    var other_1683: AntiScalar;

    self_1949 = self_1948;
    other_1683 = other_1682;
    let _e4: Rotor = self_1949;
    let _e6: AntiScalar = other_1683;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_left_anti_contraction(self_1950: Rotor, other_1684: AntiScalar) -> AntiScalar {
    var self_1951: Rotor;
    var other_1685: AntiScalar;

    self_1951 = self_1950;
    other_1685 = other_1684;
    let _e4: Rotor = self_1951;
    let _e7: AntiScalar = other_1685;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_anti_scalar_right_anti_contraction(self_1952: Rotor, other_1686: AntiScalar) -> Rotor {
    var self_1953: Rotor;
    var other_1687: AntiScalar;

    self_1953 = self_1952;
    other_1687 = other_1686;
    let _e4: Rotor = self_1953;
    let _e6: AntiScalar = other_1687;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_anti_scalar_product(self_1954: Rotor, other_1688: AntiScalar) -> AntiScalar {
    var self_1955: Rotor;
    var other_1689: AntiScalar;

    self_1955 = self_1954;
    other_1689 = other_1688;
    let _e4: Rotor = self_1955;
    let _e7: AntiScalar = other_1689;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_anti_scalar_anti_dot(self_1956: Rotor, other_1690: AntiScalar) -> AntiScalar {
    var self_1957: Rotor;
    var other_1691: AntiScalar;

    self_1957 = self_1956;
    other_1691 = other_1690;
    let _e4: Rotor = self_1957;
    let _e7: AntiScalar = other_1691;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn rotor_homogeneous_magnitude_geometric_product(self_1958: Rotor, other_1692: HomogeneousMagnitude) -> Rotor {
    var self_1959: Rotor;
    var other_1693: HomogeneousMagnitude;

    self_1959 = self_1958;
    other_1693 = other_1692;
    let _e4: Rotor = self_1959;
    let _e6: HomogeneousMagnitude = other_1693;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_outer_product(self_1960: Rotor, other_1694: HomogeneousMagnitude) -> Rotor {
    var self_1961: Rotor;
    var other_1695: HomogeneousMagnitude;

    self_1961 = self_1960;
    other_1695 = other_1694;
    let _e4: Rotor = self_1961;
    let _e6: HomogeneousMagnitude = other_1695;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_wedge(self_1962: Rotor, other_1696: HomogeneousMagnitude) -> Rotor {
    var self_1963: Rotor;
    var other_1697: HomogeneousMagnitude;

    self_1963 = self_1962;
    other_1697 = other_1696;
    let _e4: Rotor = self_1963;
    let _e6: HomogeneousMagnitude = other_1697;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_join(self_1964: Rotor, other_1698: HomogeneousMagnitude) -> Rotor {
    var self_1965: Rotor;
    var other_1699: HomogeneousMagnitude;

    self_1965 = self_1964;
    other_1699 = other_1698;
    let _e4: Rotor = self_1965;
    let _e6: HomogeneousMagnitude = other_1699;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_inner_product(self_1966: Rotor, other_1700: HomogeneousMagnitude) -> Rotor {
    var self_1967: Rotor;
    var other_1701: HomogeneousMagnitude;

    self_1967 = self_1966;
    other_1701 = other_1700;
    let _e4: Rotor = self_1967;
    let _e6: HomogeneousMagnitude = other_1701;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_right_contraction(self_1968: Rotor, other_1702: HomogeneousMagnitude) -> Rotor {
    var self_1969: Rotor;
    var other_1703: HomogeneousMagnitude;

    self_1969 = self_1968;
    other_1703 = other_1702;
    let _e4: Rotor = self_1969;
    let _e6: HomogeneousMagnitude = other_1703;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_homogeneous_magnitude_right_anti_contraction(self_1970: Rotor, other_1704: HomogeneousMagnitude) -> Rotor {
    var self_1971: Rotor;
    var other_1705: HomogeneousMagnitude;

    self_1971 = self_1970;
    other_1705 = other_1704;
    let _e4: Rotor = self_1971;
    let _e6: HomogeneousMagnitude = other_1705;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn rotor_homogeneous_magnitude_anti_scalar_product(self_1972: Rotor, other_1706: HomogeneousMagnitude) -> AntiScalar {
    var self_1973: Rotor;
    var other_1707: HomogeneousMagnitude;

    self_1973 = self_1972;
    other_1707 = other_1706;
    let _e4: Rotor = self_1973;
    let _e7: HomogeneousMagnitude = other_1707;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn rotor_homogeneous_magnitude_anti_dot(self_1974: Rotor, other_1708: HomogeneousMagnitude) -> AntiScalar {
    var self_1975: Rotor;
    var other_1709: HomogeneousMagnitude;

    self_1975 = self_1974;
    other_1709 = other_1708;
    let _e4: Rotor = self_1975;
    let _e7: HomogeneousMagnitude = other_1709;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn rotor_point_geometric_anti_product(self_1976: Rotor, other_1710: Point) -> Flector {
    var self_1977: Rotor;
    var other_1711: Point;

    self_1977 = self_1976;
    other_1711 = other_1710;
    let _e4: Rotor = self_1977;
    let _e8: Point = other_1711;
    let _e19: Rotor = self_1977;
    let _e23: Point = other_1711;
    let _e35: Rotor = self_1977;
    let _e39: Point = other_1711;
    let _e43: Rotor = self_1977;
    let _e47: Point = other_1711;
    let _e59: Rotor = self_1977;
    let _e63: Point = other_1711;
    let _e74: Rotor = self_1977;
    let _e78: Point = other_1711;
    let _e90: Rotor = self_1977;
    let _e94: Point = other_1711;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((vec4<f32>(_e59.g0_.y) * _e63.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e74.g0_.z) * _e78.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e90.g0_.x) * _e94.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_point_regressive_product(self_1978: Rotor, other_1712: Point) -> Point {
    var self_1979: Rotor;
    var other_1713: Point;

    self_1979 = self_1978;
    other_1713 = other_1712;
    let _e4: Rotor = self_1979;
    let _e8: Point = other_1713;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_anti_wedge(self_1980: Rotor, other_1714: Point) -> Point {
    var self_1981: Rotor;
    var other_1715: Point;

    self_1981 = self_1980;
    other_1715 = other_1714;
    let _e4: Rotor = self_1981;
    let _e8: Point = other_1715;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_meet(self_1982: Rotor, other_1716: Point) -> Point {
    var self_1983: Rotor;
    var other_1717: Point;

    self_1983 = self_1982;
    other_1717 = other_1716;
    let _e4: Rotor = self_1983;
    let _e8: Point = other_1717;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_point_inner_anti_product(self_1984: Rotor, other_1718: Point) -> Flector {
    var self_1985: Rotor;
    var other_1719: Point;

    self_1985 = self_1984;
    other_1719 = other_1718;
    let _e4: Rotor = self_1985;
    let _e8: Point = other_1719;
    let _e11: Rotor = self_1985;
    let _e15: Point = other_1719;
    let _e26: Rotor = self_1985;
    let _e30: Point = other_1719;
    let _e42: Rotor = self_1985;
    let _e46: Point = other_1719;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_point_left_anti_contraction(self_1986: Rotor, other_1720: Point) -> Flector {
    var self_1987: Rotor;
    var other_1721: Point;

    self_1987 = self_1986;
    other_1721 = other_1720;
    let _e4: Rotor = self_1987;
    let _e8: Point = other_1721;
    let _e11: Rotor = self_1987;
    let _e15: Point = other_1721;
    let _e26: Rotor = self_1987;
    let _e30: Point = other_1721;
    let _e42: Rotor = self_1987;
    let _e46: Point = other_1721;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e42.g0_.x) * _e46.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_line_add(self_1988: Rotor, other_1722: Line) -> Motor {
    var self_1989: Rotor;
    var other_1723: Line;

    self_1989 = self_1988;
    other_1723 = other_1722;
    let _e4: Rotor = self_1989;
    let _e6: Line = other_1723;
    let _e9: Line = other_1723;
    let _e12: Line = other_1723;
    let _e15: Line = other_1723;
    let _e26: Line = other_1723;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), _e26.g1_);
}

fn rotor_line_sub(self_1990: Rotor, other_1724: Line) -> Motor {
    var self_1991: Rotor;
    var other_1725: Line;

    self_1991 = self_1990;
    other_1725 = other_1724;
    let _e4: Rotor = self_1991;
    let _e6: Line = other_1725;
    let _e9: Line = other_1725;
    let _e12: Line = other_1725;
    let _e15: Line = other_1725;
    let _e28: Line = other_1725;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(0.0) - _e28.g1_));
}

fn rotor_line_geometric_product(self_1992: Rotor, other_1726: Line) -> Rotor {
    var self_1993: Rotor;
    var other_1727: Line;

    self_1993 = self_1992;
    other_1727 = other_1726;
    let _e4: Rotor = self_1993;
    let _e8: Line = other_1727;
    let _e11: Line = other_1727;
    let _e14: Line = other_1727;
    let _e17: Line = other_1727;
    let _e30: Rotor = self_1993;
    let _e34: Line = other_1727;
    let _e37: Line = other_1727;
    let _e40: Line = other_1727;
    let _e43: Line = other_1727;
    let _e57: Rotor = self_1993;
    let _e61: Line = other_1727;
    let _e64: Line = other_1727;
    let _e67: Line = other_1727;
    let _e70: Line = other_1727;
    let _e82: Rotor = self_1993;
    let _e86: Line = other_1727;
    let _e89: Line = other_1727;
    let _e92: Line = other_1727;
    let _e95: Line = other_1727;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_line_outer_product(self_1994: Rotor, other_1728: Line) -> AntiScalar {
    var self_1995: Rotor;
    var other_1729: Line;

    self_1995 = self_1994;
    other_1729 = other_1728;
    let _e5: Rotor = self_1995;
    let _e8: Line = other_1729;
    let _e13: Rotor = self_1995;
    let _e16: Line = other_1729;
    let _e21: Rotor = self_1995;
    let _e24: Line = other_1729;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_wedge(self_1996: Rotor, other_1730: Line) -> AntiScalar {
    var self_1997: Rotor;
    var other_1731: Line;

    self_1997 = self_1996;
    other_1731 = other_1730;
    let _e5: Rotor = self_1997;
    let _e8: Line = other_1731;
    let _e13: Rotor = self_1997;
    let _e16: Line = other_1731;
    let _e21: Rotor = self_1997;
    let _e24: Line = other_1731;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_join(self_1998: Rotor, other_1732: Line) -> AntiScalar {
    var self_1999: Rotor;
    var other_1733: Line;

    self_1999 = self_1998;
    other_1733 = other_1732;
    let _e5: Rotor = self_1999;
    let _e8: Line = other_1733;
    let _e13: Rotor = self_1999;
    let _e16: Line = other_1733;
    let _e21: Rotor = self_1999;
    let _e24: Line = other_1733;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_line_inner_anti_product(self_2000: Rotor, other_1734: Line) -> Motor {
    var self_2001: Rotor;
    var other_1735: Line;

    self_2001 = self_2000;
    other_1735 = other_1734;
    let _e4: Rotor = self_2001;
    let _e8: Line = other_1735;
    let _e20: Rotor = self_2001;
    let _e24: Line = other_1735;
    let _e37: Rotor = self_2001;
    let _e40: Line = other_1735;
    let _e43: Line = other_1735;
    let _e46: Line = other_1735;
    let _e49: Line = other_1735;
    let _e62: Rotor = self_2001;
    let _e66: Line = other_1735;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn rotor_line_left_anti_contraction(self_2002: Rotor, other_1736: Line) -> Motor {
    var self_2003: Rotor;
    var other_1737: Line;

    self_2003 = self_2002;
    other_1737 = other_1736;
    let _e4: Rotor = self_2003;
    let _e8: Line = other_1737;
    let _e20: Rotor = self_2003;
    let _e24: Line = other_1737;
    let _e37: Rotor = self_2003;
    let _e40: Line = other_1737;
    let _e43: Line = other_1737;
    let _e46: Line = other_1737;
    let _e49: Line = other_1737;
    let _e62: Rotor = self_2003;
    let _e66: Line = other_1737;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn rotor_line_right_anti_contraction(self_2004: Rotor, other_1738: Line) -> AntiScalar {
    var self_2005: Rotor;
    var other_1739: Line;

    self_2005 = self_2004;
    other_1739 = other_1738;
    let _e5: Rotor = self_2005;
    let _e8: Line = other_1739;
    let _e13: Rotor = self_2005;
    let _e16: Line = other_1739;
    let _e21: Rotor = self_2005;
    let _e24: Line = other_1739;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_line_anti_scalar_product(self_2006: Rotor, other_1740: Line) -> AntiScalar {
    var self_2007: Rotor;
    var other_1741: Line;

    self_2007 = self_2006;
    other_1741 = other_1740;
    let _e5: Rotor = self_2007;
    let _e8: Line = other_1741;
    let _e13: Rotor = self_2007;
    let _e16: Line = other_1741;
    let _e21: Rotor = self_2007;
    let _e24: Line = other_1741;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_line_anti_dot(self_2008: Rotor, other_1742: Line) -> AntiScalar {
    var self_2009: Rotor;
    var other_1743: Line;

    self_2009 = self_2008;
    other_1743 = other_1742;
    let _e5: Rotor = self_2009;
    let _e8: Line = other_1743;
    let _e13: Rotor = self_2009;
    let _e16: Line = other_1743;
    let _e21: Rotor = self_2009;
    let _e24: Line = other_1743;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_plane_geometric_anti_product(self_2010: Rotor, other_1744: Plane) -> Flector {
    var self_2011: Rotor;
    var other_1745: Plane;

    self_2011 = self_2010;
    other_1745 = other_1744;
    let _e4: Rotor = self_2011;
    let _e8: Plane = other_1745;
    let _e19: Rotor = self_2011;
    let _e23: Plane = other_1745;
    let _e35: Rotor = self_2011;
    let _e39: Plane = other_1745;
    let _e51: Rotor = self_2011;
    let _e55: Plane = other_1745;
    let _e66: Rotor = self_2011;
    let _e70: Plane = other_1745;
    let _e82: Rotor = self_2011;
    let _e86: Plane = other_1745;
    let _e90: Rotor = self_2011;
    let _e94: Plane = other_1745;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e51.g0_.y) * _e55.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e66.g0_.z) * _e70.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e82.g0_.w) * _e86.g0_)) + ((vec4<f32>(_e90.g0_.x) * _e94.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn rotor_plane_regressive_product(self_2012: Rotor, other_1746: Plane) -> Flector {
    var self_2013: Rotor;
    var other_1747: Plane;

    self_2013 = self_2012;
    other_1747 = other_1746;
    let _e4: Rotor = self_2013;
    let _e8: Plane = other_1747;
    let _e19: Rotor = self_2013;
    let _e23: Plane = other_1747;
    let _e35: Rotor = self_2013;
    let _e39: Plane = other_1747;
    let _e51: Rotor = self_2013;
    let _e55: Plane = other_1747;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e51.g0_.w) * _e55.g0_));
}

fn rotor_plane_anti_wedge(self_2014: Rotor, other_1748: Plane) -> Flector {
    var self_2015: Rotor;
    var other_1749: Plane;

    self_2015 = self_2014;
    other_1749 = other_1748;
    let _e4: Rotor = self_2015;
    let _e8: Plane = other_1749;
    let _e19: Rotor = self_2015;
    let _e23: Plane = other_1749;
    let _e35: Rotor = self_2015;
    let _e39: Plane = other_1749;
    let _e51: Rotor = self_2015;
    let _e55: Plane = other_1749;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e51.g0_.w) * _e55.g0_));
}

fn rotor_plane_meet(self_2016: Rotor, other_1750: Plane) -> Flector {
    var self_2017: Rotor;
    var other_1751: Plane;

    self_2017 = self_2016;
    other_1751 = other_1750;
    let _e4: Rotor = self_2017;
    let _e8: Plane = other_1751;
    let _e19: Rotor = self_2017;
    let _e23: Plane = other_1751;
    let _e35: Rotor = self_2017;
    let _e39: Plane = other_1751;
    let _e51: Rotor = self_2017;
    let _e55: Plane = other_1751;
    return Flector(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e51.g0_.w) * _e55.g0_));
}

fn rotor_plane_inner_anti_product(self_2018: Rotor, other_1752: Plane) -> Plane {
    var self_2019: Rotor;
    var other_1753: Plane;

    self_2019 = self_2018;
    other_1753 = other_1752;
    let _e4: Rotor = self_2019;
    let _e8: Plane = other_1753;
    let _e19: Rotor = self_2019;
    let _e23: Plane = other_1753;
    let _e35: Rotor = self_2019;
    let _e39: Plane = other_1753;
    let _e43: Rotor = self_2019;
    let _e47: Plane = other_1753;
    return Plane((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))));
}

fn rotor_plane_left_anti_contraction(self_2020: Rotor, other_1754: Plane) -> Plane {
    var self_2021: Rotor;
    var other_1755: Plane;

    self_2021 = self_2020;
    other_1755 = other_1754;
    let _e4: Rotor = self_2021;
    let _e8: Plane = other_1755;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_motor_add(self_2022: Rotor, other_1756: Motor) -> Motor {
    var self_2023: Rotor;
    var other_1757: Motor;

    self_2023 = self_2022;
    other_1757 = other_1756;
    let _e4: Rotor = self_2023;
    let _e6: Motor = other_1757;
    let _e9: Motor = other_1757;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn rotor_motor_sub(self_2024: Rotor, other_1758: Motor) -> Motor {
    var self_2025: Rotor;
    var other_1759: Motor;

    self_2025 = self_2024;
    other_1759 = other_1758;
    let _e4: Rotor = self_2025;
    let _e6: Motor = other_1759;
    let _e11: Motor = other_1759;
    return Motor((_e4.g0_ - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_));
}

fn rotor_motor_geometric_product(self_2026: Rotor, other_1760: Motor) -> Rotor {
    var self_2027: Rotor;
    var other_1761: Motor;

    self_2027 = self_2026;
    other_1761 = other_1760;
    let _e4: Rotor = self_2027;
    let _e8: Motor = other_1761;
    let _e11: Motor = other_1761;
    let _e14: Motor = other_1761;
    let _e17: Motor = other_1761;
    let _e30: Rotor = self_2027;
    let _e34: Motor = other_1761;
    let _e37: Motor = other_1761;
    let _e40: Motor = other_1761;
    let _e43: Motor = other_1761;
    let _e57: Rotor = self_2027;
    let _e61: Motor = other_1761;
    let _e64: Motor = other_1761;
    let _e67: Motor = other_1761;
    let _e70: Motor = other_1761;
    let _e82: Rotor = self_2027;
    let _e86: Motor = other_1761;
    let _e89: Motor = other_1761;
    let _e92: Motor = other_1761;
    let _e95: Motor = other_1761;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_motor_outer_product(self_2028: Rotor, other_1762: Motor) -> AntiScalar {
    var self_2029: Rotor;
    var other_1763: Motor;

    self_2029 = self_2028;
    other_1763 = other_1762;
    let _e5: Rotor = self_2029;
    let _e8: Motor = other_1763;
    let _e13: Rotor = self_2029;
    let _e16: Motor = other_1763;
    let _e21: Rotor = self_2029;
    let _e24: Motor = other_1763;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_wedge(self_2030: Rotor, other_1764: Motor) -> AntiScalar {
    var self_2031: Rotor;
    var other_1765: Motor;

    self_2031 = self_2030;
    other_1765 = other_1764;
    let _e5: Rotor = self_2031;
    let _e8: Motor = other_1765;
    let _e13: Rotor = self_2031;
    let _e16: Motor = other_1765;
    let _e21: Rotor = self_2031;
    let _e24: Motor = other_1765;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_join(self_2032: Rotor, other_1766: Motor) -> AntiScalar {
    var self_2033: Rotor;
    var other_1767: Motor;

    self_2033 = self_2032;
    other_1767 = other_1766;
    let _e5: Rotor = self_2033;
    let _e8: Motor = other_1767;
    let _e13: Rotor = self_2033;
    let _e16: Motor = other_1767;
    let _e21: Rotor = self_2033;
    let _e24: Motor = other_1767;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn rotor_motor_inner_anti_product(self_2034: Rotor, other_1768: Motor) -> Motor {
    var self_2035: Rotor;
    var other_1769: Motor;

    self_2035 = self_2034;
    other_1769 = other_1768;
    let _e4: Rotor = self_2035;
    let _e8: Motor = other_1769;
    let _e19: Rotor = self_2035;
    let _e23: Motor = other_1769;
    let _e35: Rotor = self_2035;
    let _e39: Motor = other_1769;
    let _e43: Rotor = self_2035;
    let _e47: Motor = other_1769;
    let _e59: Rotor = self_2035;
    let _e63: Motor = other_1769;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec3<f32>(_e59.g0_.w) * _e63.g1_));
}

fn rotor_motor_left_anti_contraction(self_2036: Rotor, other_1770: Motor) -> Motor {
    var self_2037: Rotor;
    var other_1771: Motor;

    self_2037 = self_2036;
    other_1771 = other_1770;
    let _e4: Rotor = self_2037;
    let _e8: Motor = other_1771;
    let _e20: Rotor = self_2037;
    let _e24: Motor = other_1771;
    let _e37: Rotor = self_2037;
    let _e41: Motor = other_1771;
    let _e45: Rotor = self_2037;
    let _e49: Motor = other_1771;
    let _e62: Rotor = self_2037;
    let _e66: Motor = other_1771;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (vec3<f32>(_e62.g0_.w) * _e66.g1_));
}

fn rotor_motor_right_anti_contraction(self_2038: Rotor, other_1772: Motor) -> Rotor {
    var self_2039: Rotor;
    var other_1773: Motor;

    self_2039 = self_2038;
    other_1773 = other_1772;
    let _e4: Rotor = self_2039;
    let _e8: Motor = other_1773;
    let _e19: Rotor = self_2039;
    let _e23: Motor = other_1773;
    let _e35: Rotor = self_2039;
    let _e39: Motor = other_1773;
    let _e51: Rotor = self_2039;
    let _e55: Motor = other_1773;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_motor_anti_scalar_product(self_2040: Rotor, other_1774: Motor) -> AntiScalar {
    var self_2041: Rotor;
    var other_1775: Motor;

    self_2041 = self_2040;
    other_1775 = other_1774;
    let _e5: Rotor = self_2041;
    let _e8: Motor = other_1775;
    let _e13: Rotor = self_2041;
    let _e16: Motor = other_1775;
    let _e21: Rotor = self_2041;
    let _e24: Motor = other_1775;
    let _e29: Rotor = self_2041;
    let _e32: Motor = other_1775;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_motor_anti_dot(self_2042: Rotor, other_1776: Motor) -> AntiScalar {
    var self_2043: Rotor;
    var other_1777: Motor;

    self_2043 = self_2042;
    other_1777 = other_1776;
    let _e5: Rotor = self_2043;
    let _e8: Motor = other_1777;
    let _e13: Rotor = self_2043;
    let _e16: Motor = other_1777;
    let _e21: Rotor = self_2043;
    let _e24: Motor = other_1777;
    let _e29: Rotor = self_2043;
    let _e32: Motor = other_1777;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_rotor_add(self_2044: Rotor, other_1778: Rotor) -> Rotor {
    var self_2045: Rotor;
    var other_1779: Rotor;

    self_2045 = self_2044;
    other_1779 = other_1778;
    let _e4: Rotor = self_2045;
    let _e6: Rotor = other_1779;
    return Rotor((_e4.g0_ + _e6.g0_));
}

fn rotor_rotor_sub(self_2046: Rotor, other_1780: Rotor) -> Rotor {
    var self_2047: Rotor;
    var other_1781: Rotor;

    self_2047 = self_2046;
    other_1781 = other_1780;
    let _e4: Rotor = self_2047;
    let _e6: Rotor = other_1781;
    return Rotor((_e4.g0_ - _e6.g0_));
}

fn rotor_rotor_mul(self_2048: Rotor, other_1782: Rotor) -> Rotor {
    var self_2049: Rotor;
    var other_1783: Rotor;

    self_2049 = self_2048;
    other_1783 = other_1782;
    let _e4: Rotor = self_2049;
    let _e6: Rotor = other_1783;
    return Rotor((_e4.g0_ * _e6.g0_));
}

fn rotor_rotor_div(self_2050: Rotor, other_1784: Rotor) -> Rotor {
    var self_2051: Rotor;
    var other_1785: Rotor;

    self_2051 = self_2050;
    other_1785 = other_1784;
    let _e4: Rotor = self_2051;
    let _e7: Rotor = self_2051;
    let _e10: Rotor = self_2051;
    let _e13: Rotor = self_2051;
    let _e23: Rotor = other_1785;
    let _e26: Rotor = other_1785;
    let _e29: Rotor = other_1785;
    let _e32: Rotor = other_1785;
    return Rotor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn rotor_rotor_geometric_anti_product(self_2052: Rotor, other_1786: Rotor) -> Rotor {
    var self_2053: Rotor;
    var other_1787: Rotor;

    self_2053 = self_2052;
    other_1787 = other_1786;
    let _e4: Rotor = self_2053;
    let _e8: Rotor = other_1787;
    let _e20: Rotor = self_2053;
    let _e24: Rotor = other_1787;
    let _e37: Rotor = self_2053;
    let _e41: Rotor = other_1787;
    let _e54: Rotor = self_2053;
    let _e58: Rotor = other_1787;
    return Rotor((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e54.g0_.w) * _e58.g0_)));
}

fn rotor_rotor_regressive_product(self_2054: Rotor, other_1788: Rotor) -> Rotor {
    var self_2055: Rotor;
    var other_1789: Rotor;

    self_2055 = self_2054;
    other_1789 = other_1788;
    let _e4: Rotor = self_2055;
    let _e8: Rotor = other_1789;
    let _e11: Rotor = self_2055;
    let _e14: Rotor = other_1789;
    return Rotor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_anti_wedge(self_2056: Rotor, other_1790: Rotor) -> Rotor {
    var self_2057: Rotor;
    var other_1791: Rotor;

    self_2057 = self_2056;
    other_1791 = other_1790;
    let _e4: Rotor = self_2057;
    let _e8: Rotor = other_1791;
    let _e11: Rotor = self_2057;
    let _e14: Rotor = other_1791;
    return Rotor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_meet(self_2058: Rotor, other_1792: Rotor) -> Rotor {
    var self_2059: Rotor;
    var other_1793: Rotor;

    self_2059 = self_2058;
    other_1793 = other_1792;
    let _e4: Rotor = self_2059;
    let _e8: Rotor = other_1793;
    let _e11: Rotor = self_2059;
    let _e14: Rotor = other_1793;
    return Rotor(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn rotor_rotor_inner_anti_product(self_2060: Rotor, other_1794: Rotor) -> Rotor {
    var self_2061: Rotor;
    var other_1795: Rotor;

    self_2061 = self_2060;
    other_1795 = other_1794;
    let _e4: Rotor = self_2061;
    let _e8: Rotor = other_1795;
    let _e19: Rotor = self_2061;
    let _e23: Rotor = other_1795;
    let _e35: Rotor = self_2061;
    let _e39: Rotor = other_1795;
    let _e43: Rotor = self_2061;
    let _e47: Rotor = other_1795;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_left_anti_contraction(self_2062: Rotor, other_1796: Rotor) -> Rotor {
    var self_2063: Rotor;
    var other_1797: Rotor;

    self_2063 = self_2062;
    other_1797 = other_1796;
    let _e4: Rotor = self_2063;
    let _e8: Rotor = other_1797;
    let _e20: Rotor = self_2063;
    let _e24: Rotor = other_1797;
    let _e37: Rotor = self_2063;
    let _e41: Rotor = other_1797;
    let _e45: Rotor = self_2063;
    let _e49: Rotor = other_1797;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_right_anti_contraction(self_2064: Rotor, other_1798: Rotor) -> Rotor {
    var self_2065: Rotor;
    var other_1799: Rotor;

    self_2065 = self_2064;
    other_1799 = other_1798;
    let _e4: Rotor = self_2065;
    let _e8: Rotor = other_1799;
    let _e19: Rotor = self_2065;
    let _e23: Rotor = other_1799;
    let _e35: Rotor = self_2065;
    let _e39: Rotor = other_1799;
    let _e51: Rotor = self_2065;
    let _e55: Rotor = other_1799;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_rotor_anti_scalar_product(self_2066: Rotor, other_1800: Rotor) -> AntiScalar {
    var self_2067: Rotor;
    var other_1801: Rotor;

    self_2067 = self_2066;
    other_1801 = other_1800;
    let _e5: Rotor = self_2067;
    let _e8: Rotor = other_1801;
    let _e13: Rotor = self_2067;
    let _e16: Rotor = other_1801;
    let _e21: Rotor = self_2067;
    let _e24: Rotor = other_1801;
    let _e29: Rotor = self_2067;
    let _e32: Rotor = other_1801;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_rotor_anti_dot(self_2068: Rotor, other_1802: Rotor) -> AntiScalar {
    var self_2069: Rotor;
    var other_1803: Rotor;

    self_2069 = self_2068;
    other_1803 = other_1802;
    let _e5: Rotor = self_2069;
    let _e8: Rotor = other_1803;
    let _e13: Rotor = self_2069;
    let _e16: Rotor = other_1803;
    let _e21: Rotor = self_2069;
    let _e24: Rotor = other_1803;
    let _e29: Rotor = self_2069;
    let _e32: Rotor = other_1803;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) + (_e29.g0_.w * _e32.g0_.w)));
}

fn rotor_translator_add(self_2070: Rotor, other_1804: Translator) -> Motor {
    var self_2071: Rotor;
    var other_1805: Translator;

    self_2071 = self_2070;
    other_1805 = other_1804;
    let _e4: Rotor = self_2071;
    let _e6: Translator = other_1805;
    let _e16: Translator = other_1805;
    let _e19: Translator = other_1805;
    let _e22: Translator = other_1805;
    return Motor((_e4.g0_ + (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn rotor_translator_sub(self_2072: Rotor, other_1806: Translator) -> Motor {
    var self_2073: Rotor;
    var other_1807: Translator;

    self_2073 = self_2072;
    other_1807 = other_1806;
    let _e4: Rotor = self_2073;
    let _e6: Translator = other_1807;
    let _e18: Translator = other_1807;
    let _e21: Translator = other_1807;
    let _e24: Translator = other_1807;
    return Motor((_e4.g0_ - (_e6.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (vec3<f32>(0.0) - vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z)));
}

fn rotor_translator_geometric_product(self_2074: Rotor, other_1808: Translator) -> Rotor {
    var self_2075: Rotor;
    var other_1809: Translator;

    self_2075 = self_2074;
    other_1809 = other_1808;
    let _e4: Rotor = self_2075;
    let _e8: Translator = other_1809;
    let _e20: Rotor = self_2075;
    let _e24: Translator = other_1809;
    let _e37: Rotor = self_2075;
    let _e41: Translator = other_1809;
    let _e52: Rotor = self_2075;
    let _e56: Translator = other_1809;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxy) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.yxyz) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.w) * _e41.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e52.g0_.x) * _e56.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_translator_outer_product(self_2076: Rotor, other_1810: Translator) -> AntiScalar {
    var self_2077: Rotor;
    var other_1811: Translator;

    self_2077 = self_2076;
    other_1811 = other_1810;
    let _e5: Rotor = self_2077;
    let _e8: Translator = other_1811;
    let _e13: Rotor = self_2077;
    let _e16: Translator = other_1811;
    let _e21: Rotor = self_2077;
    let _e24: Translator = other_1811;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_wedge(self_2078: Rotor, other_1812: Translator) -> AntiScalar {
    var self_2079: Rotor;
    var other_1813: Translator;

    self_2079 = self_2078;
    other_1813 = other_1812;
    let _e5: Rotor = self_2079;
    let _e8: Translator = other_1813;
    let _e13: Rotor = self_2079;
    let _e16: Translator = other_1813;
    let _e21: Rotor = self_2079;
    let _e24: Translator = other_1813;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_join(self_2080: Rotor, other_1814: Translator) -> AntiScalar {
    var self_2081: Rotor;
    var other_1815: Translator;

    self_2081 = self_2080;
    other_1815 = other_1814;
    let _e5: Rotor = self_2081;
    let _e8: Translator = other_1815;
    let _e13: Rotor = self_2081;
    let _e16: Translator = other_1815;
    let _e21: Rotor = self_2081;
    let _e24: Translator = other_1815;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn rotor_translator_inner_anti_product(self_2082: Rotor, other_1816: Translator) -> Motor {
    var self_2083: Rotor;
    var other_1817: Translator;

    self_2083 = self_2082;
    other_1817 = other_1816;
    let _e4: Rotor = self_2083;
    let _e6: Translator = other_1817;
    let _e11: Rotor = self_2083;
    let _e15: Translator = other_1817;
    let _e18: Translator = other_1817;
    let _e21: Translator = other_1817;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (vec3<f32>(_e11.g0_.w) * vec3<f32>(_e15.g0_.x, _e18.g0_.y, _e21.g0_.z)));
}

fn rotor_translator_left_anti_contraction(self_2084: Rotor, other_1818: Translator) -> Translator {
    var self_2085: Rotor;
    var other_1819: Translator;

    self_2085 = self_2084;
    other_1819 = other_1818;
    let _e4: Rotor = self_2085;
    let _e8: Translator = other_1819;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn rotor_translator_right_anti_contraction(self_2086: Rotor, other_1820: Translator) -> Rotor {
    var self_2087: Rotor;
    var other_1821: Translator;

    self_2087 = self_2086;
    other_1821 = other_1820;
    let _e4: Rotor = self_2087;
    let _e6: Translator = other_1821;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn rotor_translator_anti_scalar_product(self_2088: Rotor, other_1822: Translator) -> AntiScalar {
    var self_2089: Rotor;
    var other_1823: Translator;

    self_2089 = self_2088;
    other_1823 = other_1822;
    let _e4: Rotor = self_2089;
    let _e7: Translator = other_1823;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn rotor_translator_anti_dot(self_2090: Rotor, other_1824: Translator) -> AntiScalar {
    var self_2091: Rotor;
    var other_1825: Translator;

    self_2091 = self_2090;
    other_1825 = other_1824;
    let _e4: Rotor = self_2091;
    let _e7: Translator = other_1825;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn rotor_flector_geometric_anti_product(self_2092: Rotor, other_1826: Flector) -> Flector {
    var self_2093: Rotor;
    var other_1827: Flector;

    self_2093 = self_2092;
    other_1827 = other_1826;
    let _e4: Rotor = self_2093;
    let _e8: Flector = other_1827;
    let _e11: Flector = other_1827;
    let _e14: Flector = other_1827;
    let _e17: Flector = other_1827;
    let _e30: Rotor = self_2093;
    let _e34: Flector = other_1827;
    let _e37: Flector = other_1827;
    let _e40: Flector = other_1827;
    let _e43: Flector = other_1827;
    let _e57: Rotor = self_2093;
    let _e61: Flector = other_1827;
    let _e64: Flector = other_1827;
    let _e67: Flector = other_1827;
    let _e70: Flector = other_1827;
    let _e84: Rotor = self_2093;
    let _e88: Flector = other_1827;
    let _e92: Rotor = self_2093;
    let _e96: Flector = other_1827;
    let _e99: Flector = other_1827;
    let _e102: Flector = other_1827;
    let _e105: Flector = other_1827;
    let _e118: Rotor = self_2093;
    let _e122: Flector = other_1827;
    let _e125: Flector = other_1827;
    let _e128: Flector = other_1827;
    let _e131: Flector = other_1827;
    let _e145: Rotor = self_2093;
    let _e149: Flector = other_1827;
    let _e152: Flector = other_1827;
    let _e155: Flector = other_1827;
    let _e158: Flector = other_1827;
    let _e172: Rotor = self_2093;
    let _e176: Flector = other_1827;
    return Flector((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e84.g0_.w) * _e88.g0_)), (((((vec4<f32>(_e92.g0_.x) * vec4<f32>(_e96.g0_.w, _e99.g1_.z, _e102.g1_.y, _e105.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e118.g0_.y) * vec4<f32>(_e122.g1_.z, _e125.g0_.w, _e128.g1_.x, _e131.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e145.g0_.z) * vec4<f32>(_e149.g1_.y, _e152.g1_.x, _e155.g0_.w, _e158.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e172.g0_.w) * _e176.g1_)));
}

fn rotor_flector_regressive_product(self_2094: Rotor, other_1828: Flector) -> Flector {
    var self_2095: Rotor;
    var other_1829: Flector;

    self_2095 = self_2094;
    other_1829 = other_1828;
    let _e4: Rotor = self_2095;
    let _e8: Flector = other_1829;
    let _e19: Rotor = self_2095;
    let _e23: Flector = other_1829;
    let _e35: Rotor = self_2095;
    let _e39: Flector = other_1829;
    let _e43: Rotor = self_2095;
    let _e47: Flector = other_1829;
    let _e59: Rotor = self_2095;
    let _e63: Flector = other_1829;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn rotor_flector_anti_wedge(self_2096: Rotor, other_1830: Flector) -> Flector {
    var self_2097: Rotor;
    var other_1831: Flector;

    self_2097 = self_2096;
    other_1831 = other_1830;
    let _e4: Rotor = self_2097;
    let _e8: Flector = other_1831;
    let _e19: Rotor = self_2097;
    let _e23: Flector = other_1831;
    let _e35: Rotor = self_2097;
    let _e39: Flector = other_1831;
    let _e43: Rotor = self_2097;
    let _e47: Flector = other_1831;
    let _e59: Rotor = self_2097;
    let _e63: Flector = other_1831;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn rotor_flector_meet(self_2098: Rotor, other_1832: Flector) -> Flector {
    var self_2099: Rotor;
    var other_1833: Flector;

    self_2099 = self_2098;
    other_1833 = other_1832;
    let _e4: Rotor = self_2099;
    let _e8: Flector = other_1833;
    let _e19: Rotor = self_2099;
    let _e23: Flector = other_1833;
    let _e35: Rotor = self_2099;
    let _e39: Flector = other_1833;
    let _e43: Rotor = self_2099;
    let _e47: Flector = other_1833;
    let _e59: Rotor = self_2099;
    let _e63: Flector = other_1833;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn rotor_flector_inner_anti_product(self_2100: Rotor, other_1834: Flector) -> Flector {
    var self_2101: Rotor;
    var other_1835: Flector;

    self_2101 = self_2100;
    other_1835 = other_1834;
    let _e4: Rotor = self_2101;
    let _e8: Flector = other_1835;
    let _e11: Rotor = self_2101;
    let _e15: Flector = other_1835;
    let _e18: Flector = other_1835;
    let _e21: Flector = other_1835;
    let _e24: Flector = other_1835;
    let _e37: Rotor = self_2101;
    let _e41: Flector = other_1835;
    let _e44: Flector = other_1835;
    let _e47: Flector = other_1835;
    let _e50: Flector = other_1835;
    let _e64: Rotor = self_2101;
    let _e68: Flector = other_1835;
    let _e71: Flector = other_1835;
    let _e74: Flector = other_1835;
    let _e77: Flector = other_1835;
    let _e91: Rotor = self_2101;
    let _e95: Flector = other_1835;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.x) * vec4<f32>(_e15.g0_.w, _e18.g1_.z, _e21.g1_.y, _e24.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.y) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.x, _e50.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e64.g0_.z) * vec4<f32>(_e68.g1_.y, _e71.g1_.x, _e74.g0_.w, _e77.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e91.g0_.w) * _e95.g1_)));
}

fn rotor_flector_left_anti_contraction(self_2102: Rotor, other_1836: Flector) -> Flector {
    var self_2103: Rotor;
    var other_1837: Flector;

    self_2103 = self_2102;
    other_1837 = other_1836;
    let _e4: Rotor = self_2103;
    let _e8: Flector = other_1837;
    let _e11: Rotor = self_2103;
    let _e15: Flector = other_1837;
    let _e26: Rotor = self_2103;
    let _e30: Flector = other_1837;
    let _e42: Rotor = self_2103;
    let _e46: Flector = other_1837;
    let _e50: Rotor = self_2103;
    let _e54: Flector = other_1837;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e42.g0_.w) * _e46.g1_)) + ((vec4<f32>(_e50.g0_.x) * _e54.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_multi_vector_add(self_2104: Rotor, other_1838: MultiVector) -> MultiVector {
    var self_2105: Rotor;
    var other_1839: MultiVector;

    self_2105 = self_2104;
    other_1839 = other_1838;
    let _e4: Rotor = self_2105;
    let _e7: Rotor = self_2105;
    let _e15: MultiVector = other_1839;
    let _e18: MultiVector = other_1839;
    let _e20: Rotor = self_2105;
    let _e23: Rotor = self_2105;
    let _e26: Rotor = self_2105;
    let _e30: MultiVector = other_1839;
    let _e33: MultiVector = other_1839;
    let _e35: MultiVector = other_1839;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) + _e30.g2_), _e33.g3_, _e35.g4_);
}

fn rotor_multi_vector_sub(self_2106: Rotor, other_1840: MultiVector) -> MultiVector {
    var self_2107: Rotor;
    var other_1841: MultiVector;

    self_2107 = self_2106;
    other_1841 = other_1840;
    let _e4: Rotor = self_2107;
    let _e7: Rotor = self_2107;
    let _e15: MultiVector = other_1841;
    let _e20: MultiVector = other_1841;
    let _e23: Rotor = self_2107;
    let _e26: Rotor = self_2107;
    let _e29: Rotor = self_2107;
    let _e33: MultiVector = other_1841;
    let _e38: MultiVector = other_1841;
    let _e43: MultiVector = other_1841;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4<f32>(0.0) - _e20.g1_), (vec3<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z) - _e33.g2_), (vec3<f32>(0.0) - _e38.g3_), (vec4<f32>(0.0) - _e43.g4_));
}

fn rotor_multi_vector_geometric_anti_product(self_2108: Rotor, other_1842: MultiVector) -> MultiVector {
    var self_2109: Rotor;
    var other_1843: MultiVector;

    self_2109 = self_2108;
    other_1843 = other_1842;
    let _e6: Rotor = self_2109;
    let _e10: MultiVector = other_1843;
    let _e13: MultiVector = other_1843;
    let _e19: Rotor = self_2109;
    let _e23: MultiVector = other_1843;
    let _e26: MultiVector = other_1843;
    let _e32: Rotor = self_2109;
    let _e36: MultiVector = other_1843;
    let _e39: MultiVector = other_1843;
    let _e45: Rotor = self_2109;
    let _e49: MultiVector = other_1843;
    let _e53: Rotor = self_2109;
    let _e57: MultiVector = other_1843;
    let _e60: MultiVector = other_1843;
    let _e63: MultiVector = other_1843;
    let _e66: MultiVector = other_1843;
    let _e79: Rotor = self_2109;
    let _e83: MultiVector = other_1843;
    let _e86: MultiVector = other_1843;
    let _e89: MultiVector = other_1843;
    let _e92: MultiVector = other_1843;
    let _e106: Rotor = self_2109;
    let _e110: MultiVector = other_1843;
    let _e113: MultiVector = other_1843;
    let _e116: MultiVector = other_1843;
    let _e119: MultiVector = other_1843;
    let _e133: Rotor = self_2109;
    let _e137: MultiVector = other_1843;
    let _e141: Rotor = self_2109;
    let _e145: MultiVector = other_1843;
    let _e148: MultiVector = other_1843;
    let _e151: MultiVector = other_1843;
    let _e162: Rotor = self_2109;
    let _e166: MultiVector = other_1843;
    let _e169: MultiVector = other_1843;
    let _e172: MultiVector = other_1843;
    let _e184: Rotor = self_2109;
    let _e188: MultiVector = other_1843;
    let _e191: MultiVector = other_1843;
    let _e194: MultiVector = other_1843;
    let _e206: Rotor = self_2109;
    let _e210: MultiVector = other_1843;
    let _e214: Rotor = self_2109;
    let _e218: MultiVector = other_1843;
    let _e221: MultiVector = other_1843;
    let _e224: MultiVector = other_1843;
    let _e235: Rotor = self_2109;
    let _e239: MultiVector = other_1843;
    let _e242: MultiVector = other_1843;
    let _e245: MultiVector = other_1843;
    let _e257: Rotor = self_2109;
    let _e261: MultiVector = other_1843;
    let _e264: MultiVector = other_1843;
    let _e267: MultiVector = other_1843;
    let _e279: Rotor = self_2109;
    let _e283: MultiVector = other_1843;
    let _e287: Rotor = self_2109;
    let _e291: MultiVector = other_1843;
    let _e294: MultiVector = other_1843;
    let _e297: MultiVector = other_1843;
    let _e300: MultiVector = other_1843;
    let _e313: Rotor = self_2109;
    let _e317: MultiVector = other_1843;
    let _e320: MultiVector = other_1843;
    let _e323: MultiVector = other_1843;
    let _e326: MultiVector = other_1843;
    let _e340: Rotor = self_2109;
    let _e344: MultiVector = other_1843;
    let _e347: MultiVector = other_1843;
    let _e350: MultiVector = other_1843;
    let _e353: MultiVector = other_1843;
    let _e367: Rotor = self_2109;
    let _e371: MultiVector = other_1843;
    return MultiVector(((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + (vec2<f32>(_e45.g0_.w) * _e49.g0_)), (((((vec4<f32>(_e53.g0_.x) * vec4<f32>(_e57.g4_.w, _e60.g1_.z, _e63.g1_.y, _e66.g4_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e79.g0_.y) * vec4<f32>(_e83.g1_.z, _e86.g4_.w, _e89.g1_.x, _e92.g4_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e106.g0_.z) * vec4<f32>(_e110.g1_.y, _e113.g1_.x, _e116.g4_.w, _e119.g4_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e133.g0_.w) * _e137.g1_)), (((((vec3<f32>(_e141.g0_.x) * vec3<f32>(_e145.g0_.y, _e148.g2_.z, _e151.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e162.g0_.y) * vec3<f32>(_e166.g2_.z, _e169.g0_.y, _e172.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e184.g0_.z) * vec3<f32>(_e188.g2_.y, _e191.g2_.x, _e194.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e206.g0_.w) * _e210.g2_)), (((((vec3<f32>(_e214.g0_.x) * vec3<f32>(_e218.g0_.x, _e221.g3_.z, _e224.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e235.g0_.y) * vec3<f32>(_e239.g3_.z, _e242.g0_.x, _e245.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e257.g0_.z) * vec3<f32>(_e261.g3_.y, _e264.g3_.x, _e267.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e279.g0_.w) * _e283.g3_)), (((((vec4<f32>(_e287.g0_.x) * vec4<f32>(_e291.g1_.w, _e294.g4_.z, _e297.g4_.y, _e300.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e313.g0_.y) * vec4<f32>(_e317.g4_.z, _e320.g1_.w, _e323.g4_.x, _e326.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e340.g0_.z) * vec4<f32>(_e344.g4_.y, _e347.g4_.x, _e350.g1_.w, _e353.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e367.g0_.w) * _e371.g4_)));
}

fn rotor_multi_vector_regressive_product(self_2110: Rotor, other_1844: MultiVector) -> MultiVector {
    var self_2111: Rotor;
    var other_1845: MultiVector;

    self_2111 = self_2110;
    other_1845 = other_1844;
    let _e4: Rotor = self_2111;
    let _e8: MultiVector = other_1845;
    let _e18: Rotor = self_2111;
    let _e22: MultiVector = other_1845;
    let _e33: Rotor = self_2111;
    let _e37: MultiVector = other_1845;
    let _e41: Rotor = self_2111;
    let _e45: MultiVector = other_1845;
    let _e56: Rotor = self_2111;
    let _e60: MultiVector = other_1845;
    let _e71: Rotor = self_2111;
    let _e75: MultiVector = other_1845;
    let _e87: Rotor = self_2111;
    let _e91: MultiVector = other_1845;
    let _e95: Rotor = self_2111;
    let _e99: MultiVector = other_1845;
    let _e111: Rotor = self_2111;
    let _e115: MultiVector = other_1845;
    let _e118: Rotor = self_2111;
    let _e121: Rotor = self_2111;
    let _e124: Rotor = self_2111;
    let _e128: MultiVector = other_1845;
    let _e134: Rotor = self_2111;
    let _e138: MultiVector = other_1845;
    let _e141: Rotor = self_2111;
    let _e145: MultiVector = other_1845;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g3_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e111.g0_.w) * _e115.g2_) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3<f32>(_e128.g0_.y))), (vec3<f32>(_e134.g0_.w) * _e138.g3_), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn rotor_multi_vector_anti_wedge(self_2112: Rotor, other_1846: MultiVector) -> MultiVector {
    var self_2113: Rotor;
    var other_1847: MultiVector;

    self_2113 = self_2112;
    other_1847 = other_1846;
    let _e4: Rotor = self_2113;
    let _e8: MultiVector = other_1847;
    let _e18: Rotor = self_2113;
    let _e22: MultiVector = other_1847;
    let _e33: Rotor = self_2113;
    let _e37: MultiVector = other_1847;
    let _e41: Rotor = self_2113;
    let _e45: MultiVector = other_1847;
    let _e56: Rotor = self_2113;
    let _e60: MultiVector = other_1847;
    let _e71: Rotor = self_2113;
    let _e75: MultiVector = other_1847;
    let _e87: Rotor = self_2113;
    let _e91: MultiVector = other_1847;
    let _e95: Rotor = self_2113;
    let _e99: MultiVector = other_1847;
    let _e111: Rotor = self_2113;
    let _e115: MultiVector = other_1847;
    let _e118: Rotor = self_2113;
    let _e121: Rotor = self_2113;
    let _e124: Rotor = self_2113;
    let _e128: MultiVector = other_1847;
    let _e134: Rotor = self_2113;
    let _e138: MultiVector = other_1847;
    let _e141: Rotor = self_2113;
    let _e145: MultiVector = other_1847;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g3_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e111.g0_.w) * _e115.g2_) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3<f32>(_e128.g0_.y))), (vec3<f32>(_e134.g0_.w) * _e138.g3_), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn rotor_multi_vector_meet(self_2114: Rotor, other_1848: MultiVector) -> MultiVector {
    var self_2115: Rotor;
    var other_1849: MultiVector;

    self_2115 = self_2114;
    other_1849 = other_1848;
    let _e4: Rotor = self_2115;
    let _e8: MultiVector = other_1849;
    let _e18: Rotor = self_2115;
    let _e22: MultiVector = other_1849;
    let _e33: Rotor = self_2115;
    let _e37: MultiVector = other_1849;
    let _e41: Rotor = self_2115;
    let _e45: MultiVector = other_1849;
    let _e56: Rotor = self_2115;
    let _e60: MultiVector = other_1849;
    let _e71: Rotor = self_2115;
    let _e75: MultiVector = other_1849;
    let _e87: Rotor = self_2115;
    let _e91: MultiVector = other_1849;
    let _e95: Rotor = self_2115;
    let _e99: MultiVector = other_1849;
    let _e111: Rotor = self_2115;
    let _e115: MultiVector = other_1849;
    let _e118: Rotor = self_2115;
    let _e121: Rotor = self_2115;
    let _e124: Rotor = self_2115;
    let _e128: MultiVector = other_1849;
    let _e134: Rotor = self_2115;
    let _e138: MultiVector = other_1849;
    let _e141: Rotor = self_2115;
    let _e145: MultiVector = other_1849;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g3_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g3_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))), ((vec3<f32>(_e111.g0_.w) * _e115.g2_) + (vec3<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z) * vec3<f32>(_e128.g0_.y))), (vec3<f32>(_e134.g0_.w) * _e138.g3_), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn rotor_multi_vector_inner_anti_product(self_2116: Rotor, other_1850: MultiVector) -> MultiVector {
    var self_2117: Rotor;
    var other_1851: MultiVector;

    self_2117 = self_2116;
    other_1851 = other_1850;
    let _e4: Rotor = self_2117;
    let _e8: MultiVector = other_1851;
    let _e18: Rotor = self_2117;
    let _e22: MultiVector = other_1851;
    let _e33: Rotor = self_2117;
    let _e37: MultiVector = other_1851;
    let _e41: Rotor = self_2117;
    let _e45: MultiVector = other_1851;
    let _e56: Rotor = self_2117;
    let _e60: MultiVector = other_1851;
    let _e63: Rotor = self_2117;
    let _e67: MultiVector = other_1851;
    let _e70: Rotor = self_2117;
    let _e73: Rotor = self_2117;
    let _e76: Rotor = self_2117;
    let _e80: MultiVector = other_1851;
    let _e86: Rotor = self_2117;
    let _e90: MultiVector = other_1851;
    let _e93: Rotor = self_2117;
    let _e96: Rotor = self_2117;
    let _e99: Rotor = self_2117;
    let _e103: MultiVector = other_1851;
    let _e109: Rotor = self_2117;
    let _e113: MultiVector = other_1851;
    let _e116: MultiVector = other_1851;
    let _e119: MultiVector = other_1851;
    let _e122: MultiVector = other_1851;
    let _e135: Rotor = self_2117;
    let _e139: MultiVector = other_1851;
    let _e142: MultiVector = other_1851;
    let _e145: MultiVector = other_1851;
    let _e148: MultiVector = other_1851;
    let _e162: Rotor = self_2117;
    let _e166: MultiVector = other_1851;
    let _e169: MultiVector = other_1851;
    let _e172: MultiVector = other_1851;
    let _e175: MultiVector = other_1851;
    let _e189: Rotor = self_2117;
    let _e193: MultiVector = other_1851;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(0.0, -(1.0)))), (vec4<f32>(_e56.g0_.w) * _e60.g1_), ((vec3<f32>(_e63.g0_.w) * _e67.g2_) + (vec3<f32>(_e70.g0_.x, _e73.g0_.y, _e76.g0_.z) * vec3<f32>(_e80.g0_.y))), ((vec3<f32>(_e86.g0_.w) * _e90.g3_) + (vec3<f32>(_e93.g0_.x, _e96.g0_.y, _e99.g0_.z) * vec3<f32>(_e103.g0_.x))), (((((vec4<f32>(_e109.g0_.x) * vec4<f32>(_e113.g1_.w, _e116.g4_.z, _e119.g4_.y, _e122.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.y) * vec4<f32>(_e139.g4_.z, _e142.g1_.w, _e145.g4_.x, _e148.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e162.g0_.z) * vec4<f32>(_e166.g4_.y, _e169.g4_.x, _e172.g1_.w, _e175.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + (vec4<f32>(_e189.g0_.w) * _e193.g4_)));
}

fn rotor_multi_vector_left_anti_contraction(self_2118: Rotor, other_1852: MultiVector) -> MultiVector {
    var self_2119: Rotor;
    var other_1853: MultiVector;

    self_2119 = self_2118;
    other_1853 = other_1852;
    let _e4: Rotor = self_2119;
    let _e8: MultiVector = other_1853;
    let _e18: Rotor = self_2119;
    let _e22: MultiVector = other_1853;
    let _e33: Rotor = self_2119;
    let _e37: MultiVector = other_1853;
    let _e41: Rotor = self_2119;
    let _e45: MultiVector = other_1853;
    let _e56: Rotor = self_2119;
    let _e60: MultiVector = other_1853;
    let _e63: Rotor = self_2119;
    let _e67: MultiVector = other_1853;
    let _e70: Rotor = self_2119;
    let _e74: MultiVector = other_1853;
    let _e77: Rotor = self_2119;
    let _e80: Rotor = self_2119;
    let _e83: Rotor = self_2119;
    let _e87: MultiVector = other_1853;
    let _e93: Rotor = self_2119;
    let _e97: MultiVector = other_1853;
    let _e108: Rotor = self_2119;
    let _e112: MultiVector = other_1853;
    let _e124: Rotor = self_2119;
    let _e128: MultiVector = other_1853;
    let _e132: Rotor = self_2119;
    let _e136: MultiVector = other_1853;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(0.0, -(1.0)))), (vec4<f32>(_e56.g0_.w) * _e60.g1_), (vec3<f32>(_e63.g0_.w) * _e67.g2_), ((vec3<f32>(_e70.g0_.w) * _e74.g3_) + (vec3<f32>(_e77.g0_.x, _e80.g0_.y, _e83.g0_.z) * vec3<f32>(_e87.g0_.x))), (((((vec4<f32>(_e93.g0_.y) * _e97.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e108.g0_.z) * _e112.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + (vec4<f32>(_e124.g0_.w) * _e128.g4_)) + ((vec4<f32>(_e132.g0_.x) * _e136.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn rotor_multi_vector_anti_scalar_product(self_2120: Rotor, other_1854: MultiVector) -> AntiScalar {
    var self_2121: Rotor;
    var other_1855: MultiVector;

    self_2121 = self_2120;
    other_1855 = other_1854;
    let _e5: Rotor = self_2121;
    let _e8: MultiVector = other_1855;
    let _e13: Rotor = self_2121;
    let _e16: MultiVector = other_1855;
    let _e21: Rotor = self_2121;
    let _e24: MultiVector = other_1855;
    let _e29: Rotor = self_2121;
    let _e32: MultiVector = other_1855;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn rotor_multi_vector_anti_dot(self_2122: Rotor, other_1856: MultiVector) -> AntiScalar {
    var self_2123: Rotor;
    var other_1857: MultiVector;

    self_2123 = self_2122;
    other_1857 = other_1856;
    let _e5: Rotor = self_2123;
    let _e8: MultiVector = other_1857;
    let _e13: Rotor = self_2123;
    let _e16: MultiVector = other_1857;
    let _e21: Rotor = self_2123;
    let _e24: MultiVector = other_1857;
    let _e29: Rotor = self_2123;
    let _e32: MultiVector = other_1857;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) + (_e29.g0_.w * _e32.g0_.y)));
}

fn rotor_scale(self_2124: Rotor, other_1858: f32) -> Rotor {
    var self_2125: Rotor;
    var other_1859: f32;

    self_2125 = self_2124;
    other_1859 = other_1858;
    let _e4: Rotor = self_2125;
    let _e5: f32 = other_1859;
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn rotor_attitude(self_2126: Rotor) -> Flector {
    var self_2127: Rotor;

    self_2127 = self_2126;
    let _e2: Rotor = self_2127;
    let _e9: Flector = rotor_plane_regressive_product(_e2, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
    return _e9;
}

fn translator_zero() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn translator_one() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn translator_neg(self_2128: Translator) -> Translator {
    var self_2129: Translator;

    self_2129 = self_2128;
    let _e2: Translator = self_2129;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn translator_automorphism(self_2130: Translator) -> Translator {
    var self_2131: Translator;

    self_2131 = self_2130;
    let _e2: Translator = self_2131;
    return Translator(_e2.g0_);
}

fn translator_reversal(self_2132: Translator) -> Translator {
    var self_2133: Translator;

    self_2133 = self_2132;
    let _e2: Translator = self_2133;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn translator_conjugation(self_2134: Translator) -> Translator {
    var self_2135: Translator;

    self_2135 = self_2134;
    let _e2: Translator = self_2135;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn translator_anti_reversal(self_2136: Translator) -> Translator {
    var self_2137: Translator;

    self_2137 = self_2136;
    let _e2: Translator = self_2137;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)));
}

fn translator_double_complement(self_2138: Translator) -> Translator {
    var self_2139: Translator;

    self_2139 = self_2138;
    let _e2: Translator = self_2139;
    return Translator(_e2.g0_);
}

fn translator_scalar_geometric_product(self_2140: Translator, other_1860: Scalar) -> Translator {
    var self_2141: Translator;
    var other_1861: Scalar;

    self_2141 = self_2140;
    other_1861 = other_1860;
    let _e4: Translator = self_2141;
    let _e6: Scalar = other_1861;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_geometric_anti_product(self_2142: Translator, other_1862: Scalar) -> Scalar {
    var self_2143: Translator;
    var other_1863: Scalar;

    self_2143 = self_2142;
    other_1863 = other_1862;
    let _e4: Translator = self_2143;
    let _e7: Scalar = other_1863;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_regressive_product(self_2144: Translator, other_1864: Scalar) -> Scalar {
    var self_2145: Translator;
    var other_1865: Scalar;

    self_2145 = self_2144;
    other_1865 = other_1864;
    let _e4: Translator = self_2145;
    let _e7: Scalar = other_1865;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_anti_wedge(self_2146: Translator, other_1866: Scalar) -> Scalar {
    var self_2147: Translator;
    var other_1867: Scalar;

    self_2147 = self_2146;
    other_1867 = other_1866;
    let _e4: Translator = self_2147;
    let _e7: Scalar = other_1867;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_meet(self_2148: Translator, other_1868: Scalar) -> Scalar {
    var self_2149: Translator;
    var other_1869: Scalar;

    self_2149 = self_2148;
    other_1869 = other_1868;
    let _e4: Translator = self_2149;
    let _e7: Scalar = other_1869;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_outer_product(self_2150: Translator, other_1870: Scalar) -> Translator {
    var self_2151: Translator;
    var other_1871: Scalar;

    self_2151 = self_2150;
    other_1871 = other_1870;
    let _e4: Translator = self_2151;
    let _e6: Scalar = other_1871;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_wedge(self_2152: Translator, other_1872: Scalar) -> Translator {
    var self_2153: Translator;
    var other_1873: Scalar;

    self_2153 = self_2152;
    other_1873 = other_1872;
    let _e4: Translator = self_2153;
    let _e6: Scalar = other_1873;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_join(self_2154: Translator, other_1874: Scalar) -> Translator {
    var self_2155: Translator;
    var other_1875: Scalar;

    self_2155 = self_2154;
    other_1875 = other_1874;
    let _e4: Translator = self_2155;
    let _e6: Scalar = other_1875;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_inner_product(self_2156: Translator, other_1876: Scalar) -> Translator {
    var self_2157: Translator;
    var other_1877: Scalar;

    self_2157 = self_2156;
    other_1877 = other_1876;
    let _e4: Translator = self_2157;
    let _e6: Scalar = other_1877;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_inner_anti_product(self_2158: Translator, other_1878: Scalar) -> Scalar {
    var self_2159: Translator;
    var other_1879: Scalar;

    self_2159 = self_2158;
    other_1879 = other_1878;
    let _e4: Translator = self_2159;
    let _e7: Scalar = other_1879;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_scalar_right_contraction(self_2160: Translator, other_1880: Scalar) -> Translator {
    var self_2161: Translator;
    var other_1881: Scalar;

    self_2161 = self_2160;
    other_1881 = other_1880;
    let _e4: Translator = self_2161;
    let _e6: Scalar = other_1881;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_left_anti_contraction(self_2162: Translator, other_1882: Scalar) -> Scalar {
    var self_2163: Translator;
    var other_1883: Scalar;

    self_2163 = self_2162;
    other_1883 = other_1882;
    let _e4: Translator = self_2163;
    let _e7: Scalar = other_1883;
    return Scalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_into(self_2164: Translator) -> AntiScalar {
    var self_2165: Translator;

    self_2165 = self_2164;
    let _e2: Translator = self_2165;
    return AntiScalar(_e2.g0_.w);
}

fn translator_anti_scalar_add(self_2166: Translator, other_1884: AntiScalar) -> Translator {
    var self_2167: Translator;
    var other_1885: AntiScalar;

    self_2167 = self_2166;
    other_1885 = other_1884;
    let _e4: Translator = self_2167;
    let _e6: AntiScalar = other_1885;
    return Translator((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_sub(self_2168: Translator, other_1886: AntiScalar) -> Translator {
    var self_2169: Translator;
    var other_1887: AntiScalar;

    self_2169 = self_2168;
    other_1887 = other_1886;
    let _e4: Translator = self_2169;
    let _e6: AntiScalar = other_1887;
    return Translator((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn translator_anti_scalar_geometric_anti_product(self_2170: Translator, other_1888: AntiScalar) -> Translator {
    var self_2171: Translator;
    var other_1889: AntiScalar;

    self_2171 = self_2170;
    other_1889 = other_1888;
    let _e4: Translator = self_2171;
    let _e6: AntiScalar = other_1889;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_regressive_product(self_2172: Translator, other_1890: AntiScalar) -> Translator {
    var self_2173: Translator;
    var other_1891: AntiScalar;

    self_2173 = self_2172;
    other_1891 = other_1890;
    let _e4: Translator = self_2173;
    let _e6: AntiScalar = other_1891;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_anti_wedge(self_2174: Translator, other_1892: AntiScalar) -> Translator {
    var self_2175: Translator;
    var other_1893: AntiScalar;

    self_2175 = self_2174;
    other_1893 = other_1892;
    let _e4: Translator = self_2175;
    let _e6: AntiScalar = other_1893;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_meet(self_2176: Translator, other_1894: AntiScalar) -> Translator {
    var self_2177: Translator;
    var other_1895: AntiScalar;

    self_2177 = self_2176;
    other_1895 = other_1894;
    let _e4: Translator = self_2177;
    let _e6: AntiScalar = other_1895;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_inner_anti_product(self_2178: Translator, other_1896: AntiScalar) -> Translator {
    var self_2179: Translator;
    var other_1897: AntiScalar;

    self_2179 = self_2178;
    other_1897 = other_1896;
    let _e4: Translator = self_2179;
    let _e6: AntiScalar = other_1897;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_left_anti_contraction(self_2180: Translator, other_1898: AntiScalar) -> AntiScalar {
    var self_2181: Translator;
    var other_1899: AntiScalar;

    self_2181 = self_2180;
    other_1899 = other_1898;
    let _e4: Translator = self_2181;
    let _e7: AntiScalar = other_1899;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_right_anti_contraction(self_2182: Translator, other_1900: AntiScalar) -> Translator {
    var self_2183: Translator;
    var other_1901: AntiScalar;

    self_2183 = self_2182;
    other_1901 = other_1900;
    let _e4: Translator = self_2183;
    let _e6: AntiScalar = other_1901;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_anti_scalar_product(self_2184: Translator, other_1902: AntiScalar) -> AntiScalar {
    var self_2185: Translator;
    var other_1903: AntiScalar;

    self_2185 = self_2184;
    other_1903 = other_1902;
    let _e4: Translator = self_2185;
    let _e7: AntiScalar = other_1903;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_anti_scalar_anti_dot(self_2186: Translator, other_1904: AntiScalar) -> AntiScalar {
    var self_2187: Translator;
    var other_1905: AntiScalar;

    self_2187 = self_2186;
    other_1905 = other_1904;
    let _e4: Translator = self_2187;
    let _e7: AntiScalar = other_1905;
    return AntiScalar((_e4.g0_.w * _e7.g0_));
}

fn translator_homogeneous_magnitude_geometric_product(self_2188: Translator, other_1906: HomogeneousMagnitude) -> Motor {
    var self_2189: Translator;
    var other_1907: HomogeneousMagnitude;

    self_2189 = self_2188;
    other_1907 = other_1906;
    let _e4: Translator = self_2189;
    let _e6: HomogeneousMagnitude = other_1907;
    let _e9: HomogeneousMagnitude = other_1907;
    let _e12: HomogeneousMagnitude = other_1907;
    let _e15: HomogeneousMagnitude = other_1907;
    let _e20: Translator = self_2189;
    let _e23: Translator = self_2189;
    let _e26: Translator = self_2189;
    let _e30: HomogeneousMagnitude = other_1907;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.y, _e9.g0_.y, _e12.g0_.y, _e15.g0_.x)), (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) * vec3<f32>(_e30.g0_.x)));
}

fn translator_homogeneous_magnitude_outer_product(self_2190: Translator, other_1908: HomogeneousMagnitude) -> Translator {
    var self_2191: Translator;
    var other_1909: HomogeneousMagnitude;

    self_2191 = self_2190;
    other_1909 = other_1908;
    let _e4: Translator = self_2191;
    let _e6: HomogeneousMagnitude = other_1909;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_wedge(self_2192: Translator, other_1910: HomogeneousMagnitude) -> Translator {
    var self_2193: Translator;
    var other_1911: HomogeneousMagnitude;

    self_2193 = self_2192;
    other_1911 = other_1910;
    let _e4: Translator = self_2193;
    let _e6: HomogeneousMagnitude = other_1911;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_join(self_2194: Translator, other_1912: HomogeneousMagnitude) -> Translator {
    var self_2195: Translator;
    var other_1913: HomogeneousMagnitude;

    self_2195 = self_2194;
    other_1913 = other_1912;
    let _e4: Translator = self_2195;
    let _e6: HomogeneousMagnitude = other_1913;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_inner_product(self_2196: Translator, other_1914: HomogeneousMagnitude) -> Motor {
    var self_2197: Translator;
    var other_1915: HomogeneousMagnitude;

    self_2197 = self_2196;
    other_1915 = other_1914;
    let _e4: Translator = self_2197;
    let _e6: HomogeneousMagnitude = other_1915;
    let _e9: HomogeneousMagnitude = other_1915;
    let _e12: HomogeneousMagnitude = other_1915;
    let _e15: HomogeneousMagnitude = other_1915;
    let _e20: Translator = self_2197;
    let _e23: Translator = self_2197;
    let _e26: Translator = self_2197;
    let _e30: HomogeneousMagnitude = other_1915;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.y, _e9.g0_.y, _e12.g0_.y, _e15.g0_.x)), (vec3<f32>(_e20.g0_.x, _e23.g0_.y, _e26.g0_.z) * vec3<f32>(_e30.g0_.x)));
}

fn translator_homogeneous_magnitude_right_contraction(self_2198: Translator, other_1916: HomogeneousMagnitude) -> Translator {
    var self_2199: Translator;
    var other_1917: HomogeneousMagnitude;

    self_2199 = self_2198;
    other_1917 = other_1916;
    let _e4: Translator = self_2199;
    let _e6: HomogeneousMagnitude = other_1917;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn translator_homogeneous_magnitude_left_anti_contraction(self_2200: Translator, other_1918: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_2201: Translator;
    var other_1919: HomogeneousMagnitude;

    self_2201 = self_2200;
    other_1919 = other_1918;
    let _e4: Translator = self_2201;
    let _e8: HomogeneousMagnitude = other_1919;
    return HomogeneousMagnitude((vec2<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_homogeneous_magnitude_right_anti_contraction(self_2202: Translator, other_1920: HomogeneousMagnitude) -> Translator {
    var self_2203: Translator;
    var other_1921: HomogeneousMagnitude;

    self_2203 = self_2202;
    other_1921 = other_1920;
    let _e4: Translator = self_2203;
    let _e6: HomogeneousMagnitude = other_1921;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.y)));
}

fn translator_homogeneous_magnitude_anti_scalar_product(self_2204: Translator, other_1922: HomogeneousMagnitude) -> AntiScalar {
    var self_2205: Translator;
    var other_1923: HomogeneousMagnitude;

    self_2205 = self_2204;
    other_1923 = other_1922;
    let _e4: Translator = self_2205;
    let _e7: HomogeneousMagnitude = other_1923;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_homogeneous_magnitude_anti_dot(self_2206: Translator, other_1924: HomogeneousMagnitude) -> AntiScalar {
    var self_2207: Translator;
    var other_1925: HomogeneousMagnitude;

    self_2207 = self_2206;
    other_1925 = other_1924;
    let _e4: Translator = self_2207;
    let _e7: HomogeneousMagnitude = other_1925;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_point_geometric_anti_product(self_2208: Translator, other_1926: Point) -> Point {
    var self_2209: Translator;
    var other_1927: Point;

    self_2209 = self_2208;
    other_1927 = other_1926;
    let _e4: Translator = self_2209;
    let _e8: Point = other_1927;
    let _e11: Translator = self_2209;
    let _e14: Point = other_1927;
    return Point(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_point_regressive_product(self_2210: Translator, other_1928: Point) -> Point {
    var self_2211: Translator;
    var other_1929: Point;

    self_2211 = self_2210;
    other_1929 = other_1928;
    let _e4: Translator = self_2211;
    let _e8: Point = other_1929;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_anti_wedge(self_2212: Translator, other_1930: Point) -> Point {
    var self_2213: Translator;
    var other_1931: Point;

    self_2213 = self_2212;
    other_1931 = other_1930;
    let _e4: Translator = self_2213;
    let _e8: Point = other_1931;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_meet(self_2214: Translator, other_1932: Point) -> Point {
    var self_2215: Translator;
    var other_1933: Point;

    self_2215 = self_2214;
    other_1933 = other_1932;
    let _e4: Translator = self_2215;
    let _e8: Point = other_1933;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_outer_product(self_2216: Translator, other_1934: Point) -> Plane {
    var self_2217: Translator;
    var other_1935: Point;

    self_2217 = self_2216;
    other_1935 = other_1934;
    let _e4: Translator = self_2217;
    let _e8: Point = other_1935;
    let _e19: Translator = self_2217;
    let _e23: Point = other_1935;
    let _e35: Translator = self_2217;
    let _e39: Point = other_1935;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_point_wedge(self_2218: Translator, other_1936: Point) -> Plane {
    var self_2219: Translator;
    var other_1937: Point;

    self_2219 = self_2218;
    other_1937 = other_1936;
    let _e4: Translator = self_2219;
    let _e8: Point = other_1937;
    let _e19: Translator = self_2219;
    let _e23: Point = other_1937;
    let _e35: Translator = self_2219;
    let _e39: Point = other_1937;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_point_join(self_2220: Translator, other_1938: Point) -> Plane {
    var self_2221: Translator;
    var other_1939: Point;

    self_2221 = self_2220;
    other_1939 = other_1938;
    let _e4: Translator = self_2221;
    let _e8: Point = other_1939;
    let _e19: Translator = self_2221;
    let _e23: Point = other_1939;
    let _e35: Translator = self_2221;
    let _e39: Point = other_1939;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_point_inner_anti_product(self_2222: Translator, other_1940: Point) -> Point {
    var self_2223: Translator;
    var other_1941: Point;

    self_2223 = self_2222;
    other_1941 = other_1940;
    let _e4: Translator = self_2223;
    let _e8: Point = other_1941;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_point_left_anti_contraction(self_2224: Translator, other_1942: Point) -> Point {
    var self_2225: Translator;
    var other_1943: Point;

    self_2225 = self_2224;
    other_1943 = other_1942;
    let _e4: Translator = self_2225;
    let _e8: Point = other_1943;
    return Point((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_line_add(self_2226: Translator, other_1944: Line) -> Motor {
    var self_2227: Translator;
    var other_1945: Line;

    self_2227 = self_2226;
    other_1945 = other_1944;
    let _e4: Translator = self_2227;
    let _e13: Line = other_1945;
    let _e16: Line = other_1945;
    let _e19: Line = other_1945;
    let _e22: Line = other_1945;
    let _e33: Translator = self_2227;
    let _e36: Translator = self_2227;
    let _e39: Translator = self_2227;
    let _e43: Line = other_1945;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e33.g0_.x, _e36.g0_.y, _e39.g0_.z) + _e43.g1_));
}

fn translator_line_sub(self_2228: Translator, other_1946: Line) -> Motor {
    var self_2229: Translator;
    var other_1947: Line;

    self_2229 = self_2228;
    other_1947 = other_1946;
    let _e4: Translator = self_2229;
    let _e13: Line = other_1947;
    let _e16: Line = other_1947;
    let _e19: Line = other_1947;
    let _e22: Line = other_1947;
    let _e33: Translator = self_2229;
    let _e36: Translator = self_2229;
    let _e39: Translator = self_2229;
    let _e43: Line = other_1947;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - (vec4<f32>(_e13.g0_.x, _e16.g0_.y, _e19.g0_.z, _e22.g0_.x) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (vec3<f32>(_e33.g0_.x, _e36.g0_.y, _e39.g0_.z) - _e43.g1_));
}

fn translator_line_outer_product(self_2230: Translator, other_1948: Line) -> AntiScalar {
    var self_2231: Translator;
    var other_1949: Line;

    self_2231 = self_2230;
    other_1949 = other_1948;
    let _e5: Translator = self_2231;
    let _e8: Line = other_1949;
    let _e13: Translator = self_2231;
    let _e16: Line = other_1949;
    let _e21: Translator = self_2231;
    let _e24: Line = other_1949;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_wedge(self_2232: Translator, other_1950: Line) -> AntiScalar {
    var self_2233: Translator;
    var other_1951: Line;

    self_2233 = self_2232;
    other_1951 = other_1950;
    let _e5: Translator = self_2233;
    let _e8: Line = other_1951;
    let _e13: Translator = self_2233;
    let _e16: Line = other_1951;
    let _e21: Translator = self_2233;
    let _e24: Line = other_1951;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_join(self_2234: Translator, other_1952: Line) -> AntiScalar {
    var self_2235: Translator;
    var other_1953: Line;

    self_2235 = self_2234;
    other_1953 = other_1952;
    let _e5: Translator = self_2235;
    let _e8: Line = other_1953;
    let _e13: Translator = self_2235;
    let _e16: Line = other_1953;
    let _e21: Translator = self_2235;
    let _e24: Line = other_1953;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_line_inner_anti_product(self_2236: Translator, other_1954: Line) -> Line {
    var self_2237: Translator;
    var other_1955: Line;

    self_2237 = self_2236;
    other_1955 = other_1954;
    let _e4: Translator = self_2237;
    let _e8: Line = other_1955;
    let _e11: Translator = self_2237;
    let _e15: Line = other_1955;
    return Line((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_line_left_contraction(self_2238: Translator, other_1956: Line) -> Scalar {
    var self_2239: Translator;
    var other_1957: Line;

    self_2239 = self_2238;
    other_1957 = other_1956;
    let _e5: Translator = self_2239;
    let _e8: Line = other_1957;
    let _e13: Translator = self_2239;
    let _e16: Line = other_1957;
    let _e21: Translator = self_2239;
    let _e24: Line = other_1957;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_line_left_anti_contraction(self_2240: Translator, other_1958: Line) -> Line {
    var self_2241: Translator;
    var other_1959: Line;

    self_2241 = self_2240;
    other_1959 = other_1958;
    let _e4: Translator = self_2241;
    let _e8: Line = other_1959;
    let _e11: Translator = self_2241;
    let _e15: Line = other_1959;
    return Line((vec3<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_line_scalar_product(self_2242: Translator, other_1960: Line) -> Scalar {
    var self_2243: Translator;
    var other_1961: Line;

    self_2243 = self_2242;
    other_1961 = other_1960;
    let _e5: Translator = self_2243;
    let _e8: Line = other_1961;
    let _e13: Translator = self_2243;
    let _e16: Line = other_1961;
    let _e21: Translator = self_2243;
    let _e24: Line = other_1961;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_line_dot(self_2244: Translator, other_1962: Line) -> Scalar {
    var self_2245: Translator;
    var other_1963: Line;

    self_2245 = self_2244;
    other_1963 = other_1962;
    let _e5: Translator = self_2245;
    let _e8: Line = other_1963;
    let _e13: Translator = self_2245;
    let _e16: Line = other_1963;
    let _e21: Translator = self_2245;
    let _e24: Line = other_1963;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_plane_inner_product(self_2246: Translator, other_1964: Plane) -> Point {
    var self_2247: Translator;
    var other_1965: Plane;

    self_2247 = self_2246;
    other_1965 = other_1964;
    let _e4: Translator = self_2247;
    let _e8: Plane = other_1965;
    let _e19: Translator = self_2247;
    let _e23: Plane = other_1965;
    let _e35: Translator = self_2247;
    let _e39: Plane = other_1965;
    let _e52: Translator = self_2247;
    let _e56: Plane = other_1965;
    return Point((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g0_.x) * _e56.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_plane_inner_anti_product(self_2248: Translator, other_1966: Plane) -> Plane {
    var self_2249: Translator;
    var other_1967: Plane;

    self_2249 = self_2248;
    other_1967 = other_1966;
    let _e4: Translator = self_2249;
    let _e8: Plane = other_1967;
    let _e20: Translator = self_2249;
    let _e24: Plane = other_1967;
    let _e37: Translator = self_2249;
    let _e41: Plane = other_1967;
    let _e45: Translator = self_2249;
    let _e49: Plane = other_1967;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e37.g0_.w) * _e41.g0_)) + ((vec4<f32>(_e45.g0_.x) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_plane_left_contraction(self_2250: Translator, other_1968: Plane) -> Point {
    var self_2251: Translator;
    var other_1969: Plane;

    self_2251 = self_2250;
    other_1969 = other_1968;
    let _e4: Translator = self_2251;
    let _e8: Plane = other_1969;
    let _e19: Translator = self_2251;
    let _e23: Plane = other_1969;
    let _e35: Translator = self_2251;
    let _e39: Plane = other_1969;
    return Point(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_plane_left_anti_contraction(self_2252: Translator, other_1970: Plane) -> Plane {
    var self_2253: Translator;
    var other_1971: Plane;

    self_2253 = self_2252;
    other_1971 = other_1970;
    let _e4: Translator = self_2253;
    let _e8: Plane = other_1971;
    return Plane((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_motor_add(self_2254: Translator, other_1972: Motor) -> Motor {
    var self_2255: Translator;
    var other_1973: Motor;

    self_2255 = self_2254;
    other_1973 = other_1972;
    let _e4: Translator = self_2255;
    let _e13: Motor = other_1973;
    let _e16: Translator = self_2255;
    let _e19: Translator = self_2255;
    let _e22: Translator = self_2255;
    let _e26: Motor = other_1973;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), (vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z) + _e26.g1_));
}

fn translator_motor_sub(self_2256: Translator, other_1974: Motor) -> Motor {
    var self_2257: Translator;
    var other_1975: Motor;

    self_2257 = self_2256;
    other_1975 = other_1974;
    let _e4: Translator = self_2257;
    let _e13: Motor = other_1975;
    let _e16: Translator = self_2257;
    let _e19: Translator = self_2257;
    let _e22: Translator = self_2257;
    let _e26: Motor = other_1975;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), (vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z) - _e26.g1_));
}

fn translator_motor_outer_product(self_2258: Translator, other_1976: Motor) -> AntiScalar {
    var self_2259: Translator;
    var other_1977: Motor;

    self_2259 = self_2258;
    other_1977 = other_1976;
    let _e5: Translator = self_2259;
    let _e8: Motor = other_1977;
    let _e13: Translator = self_2259;
    let _e16: Motor = other_1977;
    let _e21: Translator = self_2259;
    let _e24: Motor = other_1977;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_wedge(self_2260: Translator, other_1978: Motor) -> AntiScalar {
    var self_2261: Translator;
    var other_1979: Motor;

    self_2261 = self_2260;
    other_1979 = other_1978;
    let _e5: Translator = self_2261;
    let _e8: Motor = other_1979;
    let _e13: Translator = self_2261;
    let _e16: Motor = other_1979;
    let _e21: Translator = self_2261;
    let _e24: Motor = other_1979;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_join(self_2262: Translator, other_1980: Motor) -> AntiScalar {
    var self_2263: Translator;
    var other_1981: Motor;

    self_2263 = self_2262;
    other_1981 = other_1980;
    let _e5: Translator = self_2263;
    let _e8: Motor = other_1981;
    let _e13: Translator = self_2263;
    let _e16: Motor = other_1981;
    let _e21: Translator = self_2263;
    let _e24: Motor = other_1981;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_motor_inner_anti_product(self_2264: Translator, other_1982: Motor) -> Motor {
    var self_2265: Translator;
    var other_1983: Motor;

    self_2265 = self_2264;
    other_1983 = other_1982;
    let _e4: Translator = self_2265;
    let _e8: Motor = other_1983;
    let _e11: Translator = self_2265;
    let _e15: Motor = other_1983;
    let _e18: Translator = self_2265;
    let _e21: Translator = self_2265;
    let _e24: Translator = self_2265;
    let _e28: Motor = other_1983;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), ((vec3<f32>(_e11.g0_.w) * _e15.g1_) + (vec3<f32>(_e18.g0_.x, _e21.g0_.y, _e24.g0_.z) * vec3<f32>(_e28.g0_.w))));
}

fn translator_motor_left_anti_contraction(self_2266: Translator, other_1984: Motor) -> Motor {
    var self_2267: Translator;
    var other_1985: Motor;

    self_2267 = self_2266;
    other_1985 = other_1984;
    let _e4: Translator = self_2267;
    let _e8: Motor = other_1985;
    let _e11: Translator = self_2267;
    let _e15: Motor = other_1985;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_motor_right_anti_contraction(self_2268: Translator, other_1986: Motor) -> Translator {
    var self_2269: Translator;
    var other_1987: Motor;

    self_2269 = self_2268;
    other_1987 = other_1986;
    let _e4: Translator = self_2269;
    let _e6: Motor = other_1987;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_motor_scalar_product(self_2270: Translator, other_1988: Motor) -> Scalar {
    var self_2271: Translator;
    var other_1989: Motor;

    self_2271 = self_2270;
    other_1989 = other_1988;
    let _e5: Translator = self_2271;
    let _e8: Motor = other_1989;
    let _e13: Translator = self_2271;
    let _e16: Motor = other_1989;
    let _e21: Translator = self_2271;
    let _e24: Motor = other_1989;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_motor_dot(self_2272: Translator, other_1990: Motor) -> Scalar {
    var self_2273: Translator;
    var other_1991: Motor;

    self_2273 = self_2272;
    other_1991 = other_1990;
    let _e5: Translator = self_2273;
    let _e8: Motor = other_1991;
    let _e13: Translator = self_2273;
    let _e16: Motor = other_1991;
    let _e21: Translator = self_2273;
    let _e24: Motor = other_1991;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)));
}

fn translator_motor_anti_scalar_product(self_2274: Translator, other_1992: Motor) -> AntiScalar {
    var self_2275: Translator;
    var other_1993: Motor;

    self_2275 = self_2274;
    other_1993 = other_1992;
    let _e4: Translator = self_2275;
    let _e7: Motor = other_1993;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_motor_anti_dot(self_2276: Translator, other_1994: Motor) -> AntiScalar {
    var self_2277: Translator;
    var other_1995: Motor;

    self_2277 = self_2276;
    other_1995 = other_1994;
    let _e4: Translator = self_2277;
    let _e7: Motor = other_1995;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_rotor_add(self_2278: Translator, other_1996: Rotor) -> Motor {
    var self_2279: Translator;
    var other_1997: Rotor;

    self_2279 = self_2278;
    other_1997 = other_1996;
    let _e4: Translator = self_2279;
    let _e13: Rotor = other_1997;
    let _e16: Translator = self_2279;
    let _e19: Translator = self_2279;
    let _e22: Translator = self_2279;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + _e13.g0_), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn translator_rotor_sub(self_2280: Translator, other_1998: Rotor) -> Motor {
    var self_2281: Translator;
    var other_1999: Rotor;

    self_2281 = self_2280;
    other_1999 = other_1998;
    let _e4: Translator = self_2281;
    let _e13: Rotor = other_1999;
    let _e16: Translator = self_2281;
    let _e19: Translator = self_2281;
    let _e22: Translator = self_2281;
    return Motor(((_e4.g0_.xxxw * vec4<f32>(0.0, 0.0, 0.0, 1.0)) - _e13.g0_), vec3<f32>(_e16.g0_.x, _e19.g0_.y, _e22.g0_.z));
}

fn translator_rotor_geometric_product(self_2282: Translator, other_2000: Rotor) -> Rotor {
    var self_2283: Translator;
    var other_2001: Rotor;

    self_2283 = self_2282;
    other_2001 = other_2000;
    let _e4: Translator = self_2283;
    let _e8: Rotor = other_2001;
    let _e20: Translator = self_2283;
    let _e24: Rotor = other_2001;
    let _e37: Translator = self_2283;
    let _e41: Rotor = other_2001;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn translator_rotor_outer_product(self_2284: Translator, other_2002: Rotor) -> AntiScalar {
    var self_2285: Translator;
    var other_2003: Rotor;

    self_2285 = self_2284;
    other_2003 = other_2002;
    let _e5: Translator = self_2285;
    let _e8: Rotor = other_2003;
    let _e13: Translator = self_2285;
    let _e16: Rotor = other_2003;
    let _e21: Translator = self_2285;
    let _e24: Rotor = other_2003;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_wedge(self_2286: Translator, other_2004: Rotor) -> AntiScalar {
    var self_2287: Translator;
    var other_2005: Rotor;

    self_2287 = self_2286;
    other_2005 = other_2004;
    let _e5: Translator = self_2287;
    let _e8: Rotor = other_2005;
    let _e13: Translator = self_2287;
    let _e16: Rotor = other_2005;
    let _e21: Translator = self_2287;
    let _e24: Rotor = other_2005;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_join(self_2288: Translator, other_2006: Rotor) -> AntiScalar {
    var self_2289: Translator;
    var other_2007: Rotor;

    self_2289 = self_2288;
    other_2007 = other_2006;
    let _e5: Translator = self_2289;
    let _e8: Rotor = other_2007;
    let _e13: Translator = self_2289;
    let _e16: Rotor = other_2007;
    let _e21: Translator = self_2289;
    let _e24: Rotor = other_2007;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_rotor_inner_anti_product(self_2290: Translator, other_2008: Rotor) -> Motor {
    var self_2291: Translator;
    var other_2009: Rotor;

    self_2291 = self_2290;
    other_2009 = other_2008;
    let _e4: Translator = self_2291;
    let _e8: Rotor = other_2009;
    let _e11: Translator = self_2291;
    let _e14: Translator = self_2291;
    let _e17: Translator = self_2291;
    let _e21: Rotor = other_2009;
    return Motor((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec3<f32>(_e11.g0_.x, _e14.g0_.y, _e17.g0_.z) * vec3<f32>(_e21.g0_.w)));
}

fn translator_rotor_left_anti_contraction(self_2292: Translator, other_2010: Rotor) -> Rotor {
    var self_2293: Translator;
    var other_2011: Rotor;

    self_2293 = self_2292;
    other_2011 = other_2010;
    let _e4: Translator = self_2293;
    let _e8: Rotor = other_2011;
    return Rotor((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_rotor_right_anti_contraction(self_2294: Translator, other_2012: Rotor) -> Translator {
    var self_2295: Translator;
    var other_2013: Rotor;

    self_2295 = self_2294;
    other_2013 = other_2012;
    let _e4: Translator = self_2295;
    let _e6: Rotor = other_2013;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_rotor_anti_scalar_product(self_2296: Translator, other_2014: Rotor) -> AntiScalar {
    var self_2297: Translator;
    var other_2015: Rotor;

    self_2297 = self_2296;
    other_2015 = other_2014;
    let _e4: Translator = self_2297;
    let _e7: Rotor = other_2015;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_rotor_anti_dot(self_2298: Translator, other_2016: Rotor) -> AntiScalar {
    var self_2299: Translator;
    var other_2017: Rotor;

    self_2299 = self_2298;
    other_2017 = other_2016;
    let _e4: Translator = self_2299;
    let _e7: Rotor = other_2017;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_translator_add(self_2300: Translator, other_2018: Translator) -> Translator {
    var self_2301: Translator;
    var other_2019: Translator;

    self_2301 = self_2300;
    other_2019 = other_2018;
    let _e4: Translator = self_2301;
    let _e6: Translator = other_2019;
    return Translator((_e4.g0_ + _e6.g0_));
}

fn translator_translator_sub(self_2302: Translator, other_2020: Translator) -> Translator {
    var self_2303: Translator;
    var other_2021: Translator;

    self_2303 = self_2302;
    other_2021 = other_2020;
    let _e4: Translator = self_2303;
    let _e6: Translator = other_2021;
    return Translator((_e4.g0_ - _e6.g0_));
}

fn translator_translator_mul(self_2304: Translator, other_2022: Translator) -> Translator {
    var self_2305: Translator;
    var other_2023: Translator;

    self_2305 = self_2304;
    other_2023 = other_2022;
    let _e4: Translator = self_2305;
    let _e6: Translator = other_2023;
    return Translator((_e4.g0_ * _e6.g0_));
}

fn translator_translator_div(self_2306: Translator, other_2024: Translator) -> Translator {
    var self_2307: Translator;
    var other_2025: Translator;

    self_2307 = self_2306;
    other_2025 = other_2024;
    let _e4: Translator = self_2307;
    let _e7: Translator = self_2307;
    let _e10: Translator = self_2307;
    let _e13: Translator = self_2307;
    let _e23: Translator = other_2025;
    let _e26: Translator = other_2025;
    let _e29: Translator = other_2025;
    let _e32: Translator = other_2025;
    return Translator((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn translator_translator_geometric_anti_product(self_2308: Translator, other_2026: Translator) -> Translator {
    var self_2309: Translator;
    var other_2027: Translator;

    self_2309 = self_2308;
    other_2027 = other_2026;
    let _e4: Translator = self_2309;
    let _e8: Translator = other_2027;
    let _e11: Translator = self_2309;
    let _e14: Translator = other_2027;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_regressive_product(self_2310: Translator, other_2028: Translator) -> Translator {
    var self_2311: Translator;
    var other_2029: Translator;

    self_2311 = self_2310;
    other_2029 = other_2028;
    let _e4: Translator = self_2311;
    let _e8: Translator = other_2029;
    let _e11: Translator = self_2311;
    let _e14: Translator = other_2029;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_anti_wedge(self_2312: Translator, other_2030: Translator) -> Translator {
    var self_2313: Translator;
    var other_2031: Translator;

    self_2313 = self_2312;
    other_2031 = other_2030;
    let _e4: Translator = self_2313;
    let _e8: Translator = other_2031;
    let _e11: Translator = self_2313;
    let _e14: Translator = other_2031;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_meet(self_2314: Translator, other_2032: Translator) -> Translator {
    var self_2315: Translator;
    var other_2033: Translator;

    self_2315 = self_2314;
    other_2033 = other_2032;
    let _e4: Translator = self_2315;
    let _e8: Translator = other_2033;
    let _e11: Translator = self_2315;
    let _e14: Translator = other_2033;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_inner_anti_product(self_2316: Translator, other_2034: Translator) -> Translator {
    var self_2317: Translator;
    var other_2035: Translator;

    self_2317 = self_2316;
    other_2035 = other_2034;
    let _e4: Translator = self_2317;
    let _e8: Translator = other_2035;
    let _e11: Translator = self_2317;
    let _e14: Translator = other_2035;
    return Translator(((vec4<f32>(_e4.g0_.w) * _e8.g0_) + ((_e11.g0_.xyzx * _e14.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn translator_translator_left_anti_contraction(self_2318: Translator, other_2036: Translator) -> Translator {
    var self_2319: Translator;
    var other_2037: Translator;

    self_2319 = self_2318;
    other_2037 = other_2036;
    let _e4: Translator = self_2319;
    let _e8: Translator = other_2037;
    return Translator((vec4<f32>(_e4.g0_.w) * _e8.g0_));
}

fn translator_translator_right_anti_contraction(self_2320: Translator, other_2038: Translator) -> Translator {
    var self_2321: Translator;
    var other_2039: Translator;

    self_2321 = self_2320;
    other_2039 = other_2038;
    let _e4: Translator = self_2321;
    let _e6: Translator = other_2039;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.w)));
}

fn translator_translator_scalar_product(self_2322: Translator, other_2040: Translator) -> Scalar {
    var self_2323: Translator;
    var other_2041: Translator;

    self_2323 = self_2322;
    other_2041 = other_2040;
    let _e5: Translator = self_2323;
    let _e8: Translator = other_2041;
    let _e13: Translator = self_2323;
    let _e16: Translator = other_2041;
    let _e21: Translator = self_2323;
    let _e24: Translator = other_2041;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_translator_dot(self_2324: Translator, other_2042: Translator) -> Scalar {
    var self_2325: Translator;
    var other_2043: Translator;

    self_2325 = self_2324;
    other_2043 = other_2042;
    let _e5: Translator = self_2325;
    let _e8: Translator = other_2043;
    let _e13: Translator = self_2325;
    let _e16: Translator = other_2043;
    let _e21: Translator = self_2325;
    let _e24: Translator = other_2043;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn translator_translator_anti_scalar_product(self_2326: Translator, other_2044: Translator) -> AntiScalar {
    var self_2327: Translator;
    var other_2045: Translator;

    self_2327 = self_2326;
    other_2045 = other_2044;
    let _e4: Translator = self_2327;
    let _e7: Translator = other_2045;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_translator_anti_dot(self_2328: Translator, other_2046: Translator) -> AntiScalar {
    var self_2329: Translator;
    var other_2047: Translator;

    self_2329 = self_2328;
    other_2047 = other_2046;
    let _e4: Translator = self_2329;
    let _e7: Translator = other_2047;
    return AntiScalar((_e4.g0_.w * _e7.g0_.w));
}

fn translator_flector_geometric_product(self_2330: Translator, other_2048: Flector) -> Flector {
    var self_2331: Translator;
    var other_2049: Flector;

    self_2331 = self_2330;
    other_2049 = other_2048;
    let _e4: Translator = self_2331;
    let _e8: Flector = other_2049;
    let _e11: Flector = other_2049;
    let _e14: Flector = other_2049;
    let _e17: Flector = other_2049;
    let _e30: Translator = self_2331;
    let _e34: Flector = other_2049;
    let _e37: Flector = other_2049;
    let _e40: Flector = other_2049;
    let _e43: Flector = other_2049;
    let _e57: Translator = self_2331;
    let _e61: Flector = other_2049;
    let _e64: Flector = other_2049;
    let _e67: Flector = other_2049;
    let _e70: Flector = other_2049;
    let _e84: Translator = self_2331;
    let _e87: Flector = other_2049;
    let _e99: Translator = self_2331;
    let _e103: Flector = other_2049;
    let _e106: Flector = other_2049;
    let _e109: Flector = other_2049;
    let _e112: Flector = other_2049;
    let _e125: Translator = self_2331;
    let _e129: Flector = other_2049;
    let _e132: Flector = other_2049;
    let _e135: Flector = other_2049;
    let _e138: Flector = other_2049;
    let _e152: Translator = self_2331;
    let _e156: Flector = other_2049;
    let _e159: Flector = other_2049;
    let _e162: Flector = other_2049;
    let _e165: Flector = other_2049;
    let _e179: Translator = self_2331;
    let _e182: Flector = other_2049;
    return Flector((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.w, _e11.g0_.z, _e14.g0_.y, _e17.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.y, _e64.g0_.x, _e67.g1_.w, _e70.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e84.g0_.xxxw * _e87.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec4<f32>(_e99.g0_.x) * vec4<f32>(_e103.g0_.w, _e106.g1_.z, _e109.g1_.y, _e112.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e125.g0_.y) * vec4<f32>(_e129.g1_.z, _e132.g0_.w, _e135.g1_.x, _e138.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e152.g0_.z) * vec4<f32>(_e156.g1_.y, _e159.g1_.x, _e162.g0_.w, _e165.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e179.g0_.wwwx * _e182.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn translator_flector_geometric_anti_product(self_2332: Translator, other_2050: Flector) -> Flector {
    var self_2333: Translator;
    var other_2051: Flector;

    self_2333 = self_2332;
    other_2051 = other_2050;
    let _e4: Translator = self_2333;
    let _e8: Flector = other_2051;
    let _e11: Flector = other_2051;
    let _e14: Flector = other_2051;
    let _e17: Flector = other_2051;
    let _e29: Translator = self_2333;
    let _e33: Flector = other_2051;
    let _e36: Flector = other_2051;
    let _e39: Flector = other_2051;
    let _e42: Flector = other_2051;
    let _e55: Translator = self_2333;
    let _e59: Flector = other_2051;
    let _e63: Translator = self_2333;
    let _e67: Flector = other_2051;
    let _e70: Flector = other_2051;
    let _e73: Flector = other_2051;
    let _e76: Flector = other_2051;
    let _e89: Translator = self_2333;
    let _e93: Flector = other_2051;
    let _e105: Translator = self_2333;
    let _e109: Flector = other_2051;
    let _e122: Translator = self_2333;
    let _e126: Flector = other_2051;
    let _e130: Translator = self_2333;
    let _e134: Flector = other_2051;
    return Flector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g0_.w, _e14.g1_.x, _e17.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.x, _e39.g0_.w, _e42.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + (vec4<f32>(_e55.g0_.w) * _e59.g0_)) + ((vec4<f32>(_e63.g0_.x) * vec4<f32>(_e67.g0_.w, _e70.g1_.z, _e73.g1_.y, _e76.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (((((vec4<f32>(_e89.g0_.y) * vec4<f32>(_e93.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e105.g0_.z) * vec4<f32>(_e109.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e122.g0_.w) * _e126.g1_)) + ((vec4<f32>(_e130.g0_.x) * vec4<f32>(_e134.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_regressive_product(self_2334: Translator, other_2052: Flector) -> Flector {
    var self_2335: Translator;
    var other_2053: Flector;

    self_2335 = self_2334;
    other_2053 = other_2052;
    let _e4: Translator = self_2335;
    let _e8: Flector = other_2053;
    let _e19: Translator = self_2335;
    let _e23: Flector = other_2053;
    let _e35: Translator = self_2335;
    let _e39: Flector = other_2053;
    let _e43: Translator = self_2335;
    let _e47: Flector = other_2053;
    let _e59: Translator = self_2335;
    let _e63: Flector = other_2053;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn translator_flector_anti_wedge(self_2336: Translator, other_2054: Flector) -> Flector {
    var self_2337: Translator;
    var other_2055: Flector;

    self_2337 = self_2336;
    other_2055 = other_2054;
    let _e4: Translator = self_2337;
    let _e8: Flector = other_2055;
    let _e19: Translator = self_2337;
    let _e23: Flector = other_2055;
    let _e35: Translator = self_2337;
    let _e39: Flector = other_2055;
    let _e43: Translator = self_2337;
    let _e47: Flector = other_2055;
    let _e59: Translator = self_2337;
    let _e63: Flector = other_2055;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn translator_flector_meet(self_2338: Translator, other_2056: Flector) -> Flector {
    var self_2339: Translator;
    var other_2057: Flector;

    self_2339 = self_2338;
    other_2057 = other_2056;
    let _e4: Translator = self_2339;
    let _e8: Flector = other_2057;
    let _e19: Translator = self_2339;
    let _e23: Flector = other_2057;
    let _e35: Translator = self_2339;
    let _e39: Flector = other_2057;
    let _e43: Translator = self_2339;
    let _e47: Flector = other_2057;
    let _e59: Translator = self_2339;
    let _e63: Flector = other_2057;
    return Flector((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.w) * _e39.g0_)) + ((vec4<f32>(_e43.g0_.x) * _e47.g1_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec4<f32>(_e59.g0_.w) * _e63.g1_));
}

fn translator_flector_outer_product(self_2340: Translator, other_2058: Flector) -> Plane {
    var self_2341: Translator;
    var other_2059: Flector;

    self_2341 = self_2340;
    other_2059 = other_2058;
    let _e4: Translator = self_2341;
    let _e8: Flector = other_2059;
    let _e19: Translator = self_2341;
    let _e23: Flector = other_2059;
    let _e35: Translator = self_2341;
    let _e39: Flector = other_2059;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_wedge(self_2342: Translator, other_2060: Flector) -> Plane {
    var self_2343: Translator;
    var other_2061: Flector;

    self_2343 = self_2342;
    other_2061 = other_2060;
    let _e4: Translator = self_2343;
    let _e8: Flector = other_2061;
    let _e19: Translator = self_2343;
    let _e23: Flector = other_2061;
    let _e35: Translator = self_2343;
    let _e39: Flector = other_2061;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_join(self_2344: Translator, other_2062: Flector) -> Plane {
    var self_2345: Translator;
    var other_2063: Flector;

    self_2345 = self_2344;
    other_2063 = other_2062;
    let _e4: Translator = self_2345;
    let _e8: Flector = other_2063;
    let _e19: Translator = self_2345;
    let _e23: Flector = other_2063;
    let _e35: Translator = self_2345;
    let _e39: Flector = other_2063;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_inner_anti_product(self_2346: Translator, other_2064: Flector) -> Flector {
    var self_2347: Translator;
    var other_2065: Flector;

    self_2347 = self_2346;
    other_2065 = other_2064;
    let _e4: Translator = self_2347;
    let _e8: Flector = other_2065;
    let _e11: Translator = self_2347;
    let _e15: Flector = other_2065;
    let _e27: Translator = self_2347;
    let _e31: Flector = other_2065;
    let _e44: Translator = self_2347;
    let _e48: Flector = other_2065;
    let _e52: Translator = self_2347;
    let _e56: Flector = other_2065;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e44.g0_.w) * _e48.g1_)) + ((vec4<f32>(_e52.g0_.x) * vec4<f32>(_e56.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_left_contraction(self_2348: Translator, other_2066: Flector) -> Point {
    var self_2349: Translator;
    var other_2067: Flector;

    self_2349 = self_2348;
    other_2067 = other_2066;
    let _e4: Translator = self_2349;
    let _e8: Flector = other_2067;
    let _e19: Translator = self_2349;
    let _e23: Flector = other_2067;
    let _e35: Translator = self_2349;
    let _e39: Flector = other_2067;
    return Point(((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g1_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))));
}

fn translator_flector_left_anti_contraction(self_2350: Translator, other_2068: Flector) -> Flector {
    var self_2351: Translator;
    var other_2069: Flector;

    self_2351 = self_2350;
    other_2069 = other_2068;
    let _e4: Translator = self_2351;
    let _e8: Flector = other_2069;
    let _e11: Translator = self_2351;
    let _e15: Flector = other_2069;
    return Flector((vec4<f32>(_e4.g0_.w) * _e8.g0_), (vec4<f32>(_e11.g0_.w) * _e15.g1_));
}

fn translator_multi_vector_add(self_2352: Translator, other_2070: MultiVector) -> MultiVector {
    var self_2353: Translator;
    var other_2071: MultiVector;

    self_2353 = self_2352;
    other_2071 = other_2070;
    let _e4: Translator = self_2353;
    let _e7: Translator = self_2353;
    let _e15: MultiVector = other_2071;
    let _e18: MultiVector = other_2071;
    let _e20: MultiVector = other_2071;
    let _e22: Translator = self_2353;
    let _e25: Translator = self_2353;
    let _e28: Translator = self_2353;
    let _e32: MultiVector = other_2071;
    let _e35: MultiVector = other_2071;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) + _e15.g0_), _e18.g1_, _e20.g2_, (vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z) + _e32.g3_), _e35.g4_);
}

fn translator_multi_vector_sub(self_2354: Translator, other_2072: MultiVector) -> MultiVector {
    var self_2355: Translator;
    var other_2073: MultiVector;

    self_2355 = self_2354;
    other_2073 = other_2072;
    let _e4: Translator = self_2355;
    let _e7: Translator = self_2355;
    let _e15: MultiVector = other_2073;
    let _e20: MultiVector = other_2073;
    let _e25: MultiVector = other_2073;
    let _e28: Translator = self_2355;
    let _e31: Translator = self_2355;
    let _e34: Translator = self_2355;
    let _e38: MultiVector = other_2073;
    let _e43: MultiVector = other_2073;
    return MultiVector(((vec2<f32>(_e4.g0_.x, _e7.g0_.w) * vec2<f32>(0.0, 1.0)) - _e15.g0_), (vec4<f32>(0.0) - _e20.g1_), (vec3<f32>(0.0) - _e25.g2_), (vec3<f32>(_e28.g0_.x, _e31.g0_.y, _e34.g0_.z) - _e38.g3_), (vec4<f32>(0.0) - _e43.g4_));
}

fn translator_multi_vector_geometric_product(self_2356: Translator, other_2074: MultiVector) -> MultiVector {
    var self_2357: Translator;
    var other_2075: MultiVector;

    self_2357 = self_2356;
    other_2075 = other_2074;
    let _e6: Translator = self_2357;
    let _e10: MultiVector = other_2075;
    let _e13: MultiVector = other_2075;
    let _e19: Translator = self_2357;
    let _e23: MultiVector = other_2075;
    let _e26: MultiVector = other_2075;
    let _e32: Translator = self_2357;
    let _e36: MultiVector = other_2075;
    let _e39: MultiVector = other_2075;
    let _e45: Translator = self_2357;
    let _e48: Translator = self_2357;
    let _e52: MultiVector = other_2075;
    let _e62: Translator = self_2357;
    let _e66: MultiVector = other_2075;
    let _e69: MultiVector = other_2075;
    let _e72: MultiVector = other_2075;
    let _e75: MultiVector = other_2075;
    let _e88: Translator = self_2357;
    let _e92: MultiVector = other_2075;
    let _e95: MultiVector = other_2075;
    let _e98: MultiVector = other_2075;
    let _e101: MultiVector = other_2075;
    let _e115: Translator = self_2357;
    let _e119: MultiVector = other_2075;
    let _e122: MultiVector = other_2075;
    let _e125: MultiVector = other_2075;
    let _e128: MultiVector = other_2075;
    let _e142: Translator = self_2357;
    let _e145: MultiVector = other_2075;
    let _e157: Translator = self_2357;
    let _e161: MultiVector = other_2075;
    let _e164: MultiVector = other_2075;
    let _e167: MultiVector = other_2075;
    let _e178: Translator = self_2357;
    let _e182: MultiVector = other_2075;
    let _e185: MultiVector = other_2075;
    let _e188: MultiVector = other_2075;
    let _e200: Translator = self_2357;
    let _e204: MultiVector = other_2075;
    let _e207: MultiVector = other_2075;
    let _e210: MultiVector = other_2075;
    let _e222: Translator = self_2357;
    let _e226: MultiVector = other_2075;
    let _e230: Translator = self_2357;
    let _e234: MultiVector = other_2075;
    let _e237: MultiVector = other_2075;
    let _e240: MultiVector = other_2075;
    let _e251: Translator = self_2357;
    let _e255: MultiVector = other_2075;
    let _e258: MultiVector = other_2075;
    let _e261: MultiVector = other_2075;
    let _e273: Translator = self_2357;
    let _e277: MultiVector = other_2075;
    let _e280: MultiVector = other_2075;
    let _e283: MultiVector = other_2075;
    let _e295: Translator = self_2357;
    let _e299: MultiVector = other_2075;
    let _e302: MultiVector = other_2075;
    let _e305: MultiVector = other_2075;
    let _e308: MultiVector = other_2075;
    let _e321: Translator = self_2357;
    let _e325: MultiVector = other_2075;
    let _e328: MultiVector = other_2075;
    let _e331: MultiVector = other_2075;
    let _e334: MultiVector = other_2075;
    let _e348: Translator = self_2357;
    let _e352: MultiVector = other_2075;
    let _e355: MultiVector = other_2075;
    let _e358: MultiVector = other_2075;
    let _e361: MultiVector = other_2075;
    let _e375: Translator = self_2357;
    let _e378: MultiVector = other_2075;
    return MultiVector(((((vec2<f32>(0.0) - (vec2<f32>(_e6.g0_.x) * vec2<f32>(_e10.g3_.x, _e13.g2_.x))) - (vec2<f32>(_e19.g0_.y) * vec2<f32>(_e23.g3_.y, _e26.g2_.y))) - (vec2<f32>(_e32.g0_.z) * vec2<f32>(_e36.g3_.z, _e39.g2_.z))) + ((vec2<f32>(_e45.g0_.x, _e48.g0_.w) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(0.0, 1.0))), (((((vec4<f32>(_e62.g0_.x) * vec4<f32>(_e66.g4_.w, _e69.g1_.z, _e72.g1_.y, _e75.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e88.g0_.y) * vec4<f32>(_e92.g1_.z, _e95.g4_.w, _e98.g1_.x, _e101.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e115.g0_.z) * vec4<f32>(_e119.g1_.y, _e122.g1_.x, _e125.g4_.w, _e128.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e142.g0_.xxxw * _e145.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec3<f32>(_e157.g0_.x) * vec3<f32>(_e161.g0_.y, _e164.g2_.z, _e167.g2_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e178.g0_.y) * vec3<f32>(_e182.g2_.z, _e185.g0_.y, _e188.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e200.g0_.z) * vec3<f32>(_e204.g2_.y, _e207.g2_.x, _e210.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + (vec3<f32>(_e222.g0_.w) * _e226.g3_)), ((((vec3<f32>(_e230.g0_.x) * vec3<f32>(_e234.g0_.x, _e237.g3_.z, _e240.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0))) + ((vec3<f32>(_e251.g0_.y) * vec3<f32>(_e255.g3_.z, _e258.g0_.x, _e261.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e273.g0_.z) * vec3<f32>(_e277.g3_.y, _e280.g3_.x, _e283.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((vec4<f32>(_e295.g0_.x) * vec4<f32>(_e299.g1_.w, _e302.g4_.z, _e305.g4_.y, _e308.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e321.g0_.y) * vec4<f32>(_e325.g4_.z, _e328.g1_.w, _e331.g4_.x, _e334.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e348.g0_.z) * vec4<f32>(_e352.g4_.y, _e355.g4_.x, _e358.g1_.w, _e361.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((_e375.g0_.wwwx * _e378.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn translator_multi_vector_geometric_anti_product(self_2358: Translator, other_2076: MultiVector) -> MultiVector {
    var self_2359: Translator;
    var other_2077: MultiVector;

    self_2359 = self_2358;
    other_2077 = other_2076;
    let _e4: Translator = self_2359;
    let _e8: MultiVector = other_2077;
    let _e18: Translator = self_2359;
    let _e22: MultiVector = other_2077;
    let _e33: Translator = self_2359;
    let _e37: MultiVector = other_2077;
    let _e41: Translator = self_2359;
    let _e45: MultiVector = other_2077;
    let _e56: Translator = self_2359;
    let _e60: MultiVector = other_2077;
    let _e63: MultiVector = other_2077;
    let _e66: MultiVector = other_2077;
    let _e69: MultiVector = other_2077;
    let _e81: Translator = self_2359;
    let _e85: MultiVector = other_2077;
    let _e88: MultiVector = other_2077;
    let _e91: MultiVector = other_2077;
    let _e94: MultiVector = other_2077;
    let _e107: Translator = self_2359;
    let _e111: MultiVector = other_2077;
    let _e115: Translator = self_2359;
    let _e119: MultiVector = other_2077;
    let _e122: MultiVector = other_2077;
    let _e125: MultiVector = other_2077;
    let _e128: MultiVector = other_2077;
    let _e141: Translator = self_2359;
    let _e145: MultiVector = other_2077;
    let _e148: Translator = self_2359;
    let _e152: MultiVector = other_2077;
    let _e155: MultiVector = other_2077;
    let _e158: MultiVector = other_2077;
    let _e169: Translator = self_2359;
    let _e173: MultiVector = other_2077;
    let _e176: MultiVector = other_2077;
    let _e179: MultiVector = other_2077;
    let _e191: Translator = self_2359;
    let _e195: MultiVector = other_2077;
    let _e198: MultiVector = other_2077;
    let _e201: MultiVector = other_2077;
    let _e213: Translator = self_2359;
    let _e217: MultiVector = other_2077;
    let _e221: Translator = self_2359;
    let _e225: MultiVector = other_2077;
    let _e237: Translator = self_2359;
    let _e241: MultiVector = other_2077;
    let _e254: Translator = self_2359;
    let _e258: MultiVector = other_2077;
    let _e262: Translator = self_2359;
    let _e266: MultiVector = other_2077;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * vec4<f32>(_e60.g4_.z, _e63.g1_.w, _e66.g4_.x, _e69.g4_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e81.g0_.z) * vec4<f32>(_e85.g4_.y, _e88.g4_.x, _e91.g1_.w, _e94.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + (vec4<f32>(_e107.g0_.w) * _e111.g1_)) + ((vec4<f32>(_e115.g0_.x) * vec4<f32>(_e119.g1_.w, _e122.g4_.z, _e125.g4_.y, _e128.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e141.g0_.w) * _e145.g2_), (((((vec3<f32>(_e148.g0_.x) * vec3<f32>(_e152.g0_.y, _e155.g2_.z, _e158.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0)) + ((vec3<f32>(_e169.g0_.y) * vec3<f32>(_e173.g2_.z, _e176.g0_.y, _e179.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e191.g0_.z) * vec3<f32>(_e195.g2_.y, _e198.g2_.x, _e201.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + (vec3<f32>(_e213.g0_.w) * _e217.g3_)), (((((vec4<f32>(_e221.g0_.y) * vec4<f32>(_e225.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e237.g0_.z) * vec4<f32>(_e241.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e254.g0_.w) * _e258.g4_)) + ((vec4<f32>(_e262.g0_.x) * vec4<f32>(_e266.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_multi_vector_regressive_product(self_2360: Translator, other_2078: MultiVector) -> MultiVector {
    var self_2361: Translator;
    var other_2079: MultiVector;

    self_2361 = self_2360;
    other_2079 = other_2078;
    let _e4: Translator = self_2361;
    let _e8: MultiVector = other_2079;
    let _e18: Translator = self_2361;
    let _e22: MultiVector = other_2079;
    let _e33: Translator = self_2361;
    let _e37: MultiVector = other_2079;
    let _e41: Translator = self_2361;
    let _e45: MultiVector = other_2079;
    let _e56: Translator = self_2361;
    let _e60: MultiVector = other_2079;
    let _e71: Translator = self_2361;
    let _e75: MultiVector = other_2079;
    let _e87: Translator = self_2361;
    let _e91: MultiVector = other_2079;
    let _e95: Translator = self_2361;
    let _e99: MultiVector = other_2079;
    let _e111: Translator = self_2361;
    let _e115: MultiVector = other_2079;
    let _e118: Translator = self_2361;
    let _e122: MultiVector = other_2079;
    let _e125: Translator = self_2361;
    let _e128: Translator = self_2361;
    let _e131: Translator = self_2361;
    let _e135: MultiVector = other_2079;
    let _e141: Translator = self_2361;
    let _e145: MultiVector = other_2079;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e111.g0_.w) * _e115.g2_), ((vec3<f32>(_e118.g0_.w) * _e122.g3_) + (vec3<f32>(_e125.g0_.x, _e128.g0_.y, _e131.g0_.z) * vec3<f32>(_e135.g0_.y))), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn translator_multi_vector_anti_wedge(self_2362: Translator, other_2080: MultiVector) -> MultiVector {
    var self_2363: Translator;
    var other_2081: MultiVector;

    self_2363 = self_2362;
    other_2081 = other_2080;
    let _e4: Translator = self_2363;
    let _e8: MultiVector = other_2081;
    let _e18: Translator = self_2363;
    let _e22: MultiVector = other_2081;
    let _e33: Translator = self_2363;
    let _e37: MultiVector = other_2081;
    let _e41: Translator = self_2363;
    let _e45: MultiVector = other_2081;
    let _e56: Translator = self_2363;
    let _e60: MultiVector = other_2081;
    let _e71: Translator = self_2363;
    let _e75: MultiVector = other_2081;
    let _e87: Translator = self_2363;
    let _e91: MultiVector = other_2081;
    let _e95: Translator = self_2363;
    let _e99: MultiVector = other_2081;
    let _e111: Translator = self_2363;
    let _e115: MultiVector = other_2081;
    let _e118: Translator = self_2363;
    let _e122: MultiVector = other_2081;
    let _e125: Translator = self_2363;
    let _e128: Translator = self_2363;
    let _e131: Translator = self_2363;
    let _e135: MultiVector = other_2081;
    let _e141: Translator = self_2363;
    let _e145: MultiVector = other_2081;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e111.g0_.w) * _e115.g2_), ((vec3<f32>(_e118.g0_.w) * _e122.g3_) + (vec3<f32>(_e125.g0_.x, _e128.g0_.y, _e131.g0_.z) * vec3<f32>(_e135.g0_.y))), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn translator_multi_vector_meet(self_2364: Translator, other_2082: MultiVector) -> MultiVector {
    var self_2365: Translator;
    var other_2083: MultiVector;

    self_2365 = self_2364;
    other_2083 = other_2082;
    let _e4: Translator = self_2365;
    let _e8: MultiVector = other_2083;
    let _e18: Translator = self_2365;
    let _e22: MultiVector = other_2083;
    let _e33: Translator = self_2365;
    let _e37: MultiVector = other_2083;
    let _e41: Translator = self_2365;
    let _e45: MultiVector = other_2083;
    let _e56: Translator = self_2365;
    let _e60: MultiVector = other_2083;
    let _e71: Translator = self_2365;
    let _e75: MultiVector = other_2083;
    let _e87: Translator = self_2365;
    let _e91: MultiVector = other_2083;
    let _e95: Translator = self_2365;
    let _e99: MultiVector = other_2083;
    let _e111: Translator = self_2365;
    let _e115: MultiVector = other_2083;
    let _e118: Translator = self_2365;
    let _e122: MultiVector = other_2083;
    let _e125: Translator = self_2365;
    let _e128: Translator = self_2365;
    let _e131: Translator = self_2365;
    let _e135: MultiVector = other_2083;
    let _e141: Translator = self_2365;
    let _e145: MultiVector = other_2083;
    return MultiVector((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g2_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g0_.z) * vec2<f32>(_e22.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + (vec2<f32>(_e33.g0_.w) * _e37.g0_)) + ((vec2<f32>(_e41.g0_.x) * vec2<f32>(_e45.g2_.x)) * vec2<f32>(-(1.0), 0.0))), (((((vec4<f32>(_e56.g0_.y) * _e60.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g0_.z) * _e75.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + (vec4<f32>(_e87.g0_.w) * _e91.g1_)) + ((vec4<f32>(_e95.g0_.x) * _e99.g4_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (vec3<f32>(_e111.g0_.w) * _e115.g2_), ((vec3<f32>(_e118.g0_.w) * _e122.g3_) + (vec3<f32>(_e125.g0_.x, _e128.g0_.y, _e131.g0_.z) * vec3<f32>(_e135.g0_.y))), (vec4<f32>(_e141.g0_.w) * _e145.g4_));
}

fn translator_multi_vector_inner_anti_product(self_2366: Translator, other_2084: MultiVector) -> MultiVector {
    var self_2367: Translator;
    var other_2085: MultiVector;

    self_2367 = self_2366;
    other_2085 = other_2084;
    let _e4: Translator = self_2367;
    let _e8: MultiVector = other_2085;
    let _e11: Translator = self_2367;
    let _e15: MultiVector = other_2085;
    let _e18: Translator = self_2367;
    let _e22: MultiVector = other_2085;
    let _e25: Translator = self_2367;
    let _e29: MultiVector = other_2085;
    let _e32: Translator = self_2367;
    let _e35: Translator = self_2367;
    let _e38: Translator = self_2367;
    let _e42: MultiVector = other_2085;
    let _e48: Translator = self_2367;
    let _e52: MultiVector = other_2085;
    let _e64: Translator = self_2367;
    let _e68: MultiVector = other_2085;
    let _e81: Translator = self_2367;
    let _e85: MultiVector = other_2085;
    let _e89: Translator = self_2367;
    let _e93: MultiVector = other_2085;
    return MultiVector((vec2<f32>(_e4.g0_.w) * _e8.g0_), (vec4<f32>(_e11.g0_.w) * _e15.g1_), (vec3<f32>(_e18.g0_.w) * _e22.g2_), ((vec3<f32>(_e25.g0_.w) * _e29.g3_) + (vec3<f32>(_e32.g0_.x, _e35.g0_.y, _e38.g0_.z) * vec3<f32>(_e42.g0_.y))), (((((vec4<f32>(_e48.g0_.y) * vec4<f32>(_e52.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e64.g0_.z) * vec4<f32>(_e68.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e81.g0_.w) * _e85.g4_)) + ((vec4<f32>(_e89.g0_.x) * vec4<f32>(_e93.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn translator_multi_vector_left_anti_contraction(self_2368: Translator, other_2086: MultiVector) -> MultiVector {
    var self_2369: Translator;
    var other_2087: MultiVector;

    self_2369 = self_2368;
    other_2087 = other_2086;
    let _e4: Translator = self_2369;
    let _e8: MultiVector = other_2087;
    let _e11: Translator = self_2369;
    let _e15: MultiVector = other_2087;
    let _e18: Translator = self_2369;
    let _e22: MultiVector = other_2087;
    let _e25: Translator = self_2369;
    let _e29: MultiVector = other_2087;
    let _e32: Translator = self_2369;
    let _e36: MultiVector = other_2087;
    return MultiVector((vec2<f32>(_e4.g0_.w) * _e8.g0_), (vec4<f32>(_e11.g0_.w) * _e15.g1_), (vec3<f32>(_e18.g0_.w) * _e22.g2_), (vec3<f32>(_e25.g0_.w) * _e29.g3_), (vec4<f32>(_e32.g0_.w) * _e36.g4_));
}

fn translator_multi_vector_scalar_product(self_2370: Translator, other_2088: MultiVector) -> Scalar {
    var self_2371: Translator;
    var other_2089: MultiVector;

    self_2371 = self_2370;
    other_2089 = other_2088;
    let _e5: Translator = self_2371;
    let _e8: MultiVector = other_2089;
    let _e13: Translator = self_2371;
    let _e16: MultiVector = other_2089;
    let _e21: Translator = self_2371;
    let _e24: MultiVector = other_2089;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g3_.x)) - (_e13.g0_.y * _e16.g3_.y)) - (_e21.g0_.z * _e24.g3_.z)));
}

fn translator_multi_vector_dot(self_2372: Translator, other_2090: MultiVector) -> Scalar {
    var self_2373: Translator;
    var other_2091: MultiVector;

    self_2373 = self_2372;
    other_2091 = other_2090;
    let _e5: Translator = self_2373;
    let _e8: MultiVector = other_2091;
    let _e13: Translator = self_2373;
    let _e16: MultiVector = other_2091;
    let _e21: Translator = self_2373;
    let _e24: MultiVector = other_2091;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g3_.x)) - (_e13.g0_.y * _e16.g3_.y)) - (_e21.g0_.z * _e24.g3_.z)));
}

fn translator_multi_vector_anti_scalar_product(self_2374: Translator, other_2092: MultiVector) -> AntiScalar {
    var self_2375: Translator;
    var other_2093: MultiVector;

    self_2375 = self_2374;
    other_2093 = other_2092;
    let _e4: Translator = self_2375;
    let _e7: MultiVector = other_2093;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_multi_vector_anti_dot(self_2376: Translator, other_2094: MultiVector) -> AntiScalar {
    var self_2377: Translator;
    var other_2095: MultiVector;

    self_2377 = self_2376;
    other_2095 = other_2094;
    let _e4: Translator = self_2377;
    let _e7: MultiVector = other_2095;
    return AntiScalar((_e4.g0_.w * _e7.g0_.y));
}

fn translator_squared_magnitude(self_2378: Translator) -> Scalar {
    var self_2379: Translator;

    self_2379 = self_2378;
    let _e2: Translator = self_2379;
    let _e3: Translator = self_2379;
    let _e4: Translator = translator_reversal(_e3);
    let _e5: Scalar = translator_translator_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_magnitude(self_2380: Translator) -> Scalar {
    var self_2381: Translator;

    self_2381 = self_2380;
    let _e2: Translator = self_2381;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_bulk_norm(self_2382: Translator) -> Scalar {
    var self_2383: Translator;

    self_2383 = self_2382;
    let _e2: Translator = self_2383;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_squared_anti_magnitude(self_2384: Translator) -> AntiScalar {
    var self_2385: Translator;

    self_2385 = self_2384;
    let _e2: Translator = self_2385;
    let _e3: Translator = self_2385;
    let _e4: Translator = translator_anti_reversal(_e3);
    let _e5: AntiScalar = translator_translator_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_weight_norm(self_2386: Translator) -> AntiScalar {
    var self_2387: Translator;

    self_2387 = self_2386;
    let _e2: Translator = self_2387;
    let _e3: AntiScalar = translator_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn translator_geometric_norm(self_2388: Translator) -> HomogeneousMagnitude {
    var self_2389: Translator;

    self_2389 = self_2388;
    let _e2: Translator = self_2389;
    let _e3: Scalar = translator_bulk_norm(_e2);
    let _e4: Translator = self_2389;
    let _e5: AntiScalar = translator_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn translator_scale(self_2390: Translator, other_2096: f32) -> Translator {
    var self_2391: Translator;
    var other_2097: f32;

    self_2391 = self_2390;
    other_2097 = other_2096;
    let _e4: Translator = self_2391;
    let _e5: f32 = other_2097;
    let _e7: Translator = translator_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn translator_signum(self_2392: Translator) -> Translator {
    var self_2393: Translator;

    self_2393 = self_2392;
    let _e2: Translator = self_2393;
    let _e3: Translator = self_2393;
    let _e4: Scalar = translator_magnitude(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn translator_inverse(self_2394: Translator) -> Translator {
    var self_2395: Translator;

    self_2395 = self_2394;
    let _e2: Translator = self_2395;
    let _e3: Translator = translator_reversal(_e2);
    let _e4: Translator = self_2395;
    let _e5: Scalar = translator_squared_magnitude(_e4);
    let _e10: Translator = translator_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn translator_unitize(self_2396: Translator) -> Translator {
    var self_2397: Translator;

    self_2397 = self_2396;
    let _e2: Translator = self_2397;
    let _e3: Translator = self_2397;
    let _e4: AntiScalar = translator_weight_norm(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn flector_zero() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_one() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_neg(self_2398: Flector) -> Flector {
    var self_2399: Flector;

    self_2399 = self_2398;
    let _e2: Flector = self_2399;
    let _e8: Flector = self_2399;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn flector_automorphism(self_2400: Flector) -> Flector {
    var self_2401: Flector;

    self_2401 = self_2400;
    let _e2: Flector = self_2401;
    let _e8: Flector = self_2401;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn flector_reversal(self_2402: Flector) -> Flector {
    var self_2403: Flector;

    self_2403 = self_2402;
    let _e2: Flector = self_2403;
    let _e4: Flector = self_2403;
    return Flector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))));
}

fn flector_conjugation(self_2404: Flector) -> Flector {
    var self_2405: Flector;

    self_2405 = self_2404;
    let _e2: Flector = self_2405;
    let _e8: Flector = self_2405;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn flector_dual(self_2406: Flector) -> Flector {
    var self_2407: Flector;

    self_2407 = self_2406;
    let _e2: Flector = self_2407;
    let _e8: Flector = self_2407;
    return Flector((_e2.g1_ * vec4<f32>(-(1.0))), _e8.g0_);
}

fn flector_anti_reversal(self_2408: Flector) -> Flector {
    var self_2409: Flector;

    self_2409 = self_2408;
    let _e2: Flector = self_2409;
    let _e8: Flector = self_2409;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn flector_right_complement(self_2410: Flector) -> Flector {
    var self_2411: Flector;

    self_2411 = self_2410;
    let _e2: Flector = self_2411;
    let _e8: Flector = self_2411;
    return Flector((_e2.g1_ * vec4<f32>(-(1.0))), _e8.g0_);
}

fn flector_left_complement(self_2412: Flector) -> Flector {
    var self_2413: Flector;

    self_2413 = self_2412;
    let _e2: Flector = self_2413;
    let _e4: Flector = self_2413;
    return Flector(_e2.g1_, (_e4.g0_ * vec4<f32>(-(1.0))));
}

fn flector_double_complement(self_2414: Flector) -> Flector {
    var self_2415: Flector;

    self_2415 = self_2414;
    let _e2: Flector = self_2415;
    let _e8: Flector = self_2415;
    return Flector((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn flector_scalar_geometric_product(self_2416: Flector, other_2098: Scalar) -> Flector {
    var self_2417: Flector;
    var other_2099: Scalar;

    self_2417 = self_2416;
    other_2099 = other_2098;
    let _e4: Flector = self_2417;
    let _e6: Scalar = other_2099;
    let _e10: Flector = self_2417;
    let _e12: Scalar = other_2099;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_outer_product(self_2418: Flector, other_2100: Scalar) -> Flector {
    var self_2419: Flector;
    var other_2101: Scalar;

    self_2419 = self_2418;
    other_2101 = other_2100;
    let _e4: Flector = self_2419;
    let _e6: Scalar = other_2101;
    let _e10: Flector = self_2419;
    let _e12: Scalar = other_2101;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_wedge(self_2420: Flector, other_2102: Scalar) -> Flector {
    var self_2421: Flector;
    var other_2103: Scalar;

    self_2421 = self_2420;
    other_2103 = other_2102;
    let _e4: Flector = self_2421;
    let _e6: Scalar = other_2103;
    let _e10: Flector = self_2421;
    let _e12: Scalar = other_2103;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_join(self_2422: Flector, other_2104: Scalar) -> Flector {
    var self_2423: Flector;
    var other_2105: Scalar;

    self_2423 = self_2422;
    other_2105 = other_2104;
    let _e4: Flector = self_2423;
    let _e6: Scalar = other_2105;
    let _e10: Flector = self_2423;
    let _e12: Scalar = other_2105;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_inner_product(self_2424: Flector, other_2106: Scalar) -> Flector {
    var self_2425: Flector;
    var other_2107: Scalar;

    self_2425 = self_2424;
    other_2107 = other_2106;
    let _e4: Flector = self_2425;
    let _e6: Scalar = other_2107;
    let _e10: Flector = self_2425;
    let _e12: Scalar = other_2107;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_scalar_right_contraction(self_2426: Flector, other_2108: Scalar) -> Flector {
    var self_2427: Flector;
    var other_2109: Scalar;

    self_2427 = self_2426;
    other_2109 = other_2108;
    let _e4: Flector = self_2427;
    let _e6: Scalar = other_2109;
    let _e10: Flector = self_2427;
    let _e12: Scalar = other_2109;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_geometric_anti_product(self_2428: Flector, other_2110: AntiScalar) -> Flector {
    var self_2429: Flector;
    var other_2111: AntiScalar;

    self_2429 = self_2428;
    other_2111 = other_2110;
    let _e4: Flector = self_2429;
    let _e6: AntiScalar = other_2111;
    let _e10: Flector = self_2429;
    let _e12: AntiScalar = other_2111;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_regressive_product(self_2430: Flector, other_2112: AntiScalar) -> Flector {
    var self_2431: Flector;
    var other_2113: AntiScalar;

    self_2431 = self_2430;
    other_2113 = other_2112;
    let _e4: Flector = self_2431;
    let _e6: AntiScalar = other_2113;
    let _e10: Flector = self_2431;
    let _e12: AntiScalar = other_2113;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_anti_wedge(self_2432: Flector, other_2114: AntiScalar) -> Flector {
    var self_2433: Flector;
    var other_2115: AntiScalar;

    self_2433 = self_2432;
    other_2115 = other_2114;
    let _e4: Flector = self_2433;
    let _e6: AntiScalar = other_2115;
    let _e10: Flector = self_2433;
    let _e12: AntiScalar = other_2115;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_meet(self_2434: Flector, other_2116: AntiScalar) -> Flector {
    var self_2435: Flector;
    var other_2117: AntiScalar;

    self_2435 = self_2434;
    other_2117 = other_2116;
    let _e4: Flector = self_2435;
    let _e6: AntiScalar = other_2117;
    let _e10: Flector = self_2435;
    let _e12: AntiScalar = other_2117;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_inner_anti_product(self_2436: Flector, other_2118: AntiScalar) -> Flector {
    var self_2437: Flector;
    var other_2119: AntiScalar;

    self_2437 = self_2436;
    other_2119 = other_2118;
    let _e4: Flector = self_2437;
    let _e6: AntiScalar = other_2119;
    let _e10: Flector = self_2437;
    let _e12: AntiScalar = other_2119;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_anti_scalar_right_anti_contraction(self_2438: Flector, other_2120: AntiScalar) -> Flector {
    var self_2439: Flector;
    var other_2121: AntiScalar;

    self_2439 = self_2438;
    other_2121 = other_2120;
    let _e4: Flector = self_2439;
    let _e6: AntiScalar = other_2121;
    let _e10: Flector = self_2439;
    let _e12: AntiScalar = other_2121;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn flector_homogeneous_magnitude_geometric_product(self_2440: Flector, other_2122: HomogeneousMagnitude) -> Flector {
    var self_2441: Flector;
    var other_2123: HomogeneousMagnitude;

    self_2441 = self_2440;
    other_2123 = other_2122;
    let _e4: Flector = self_2441;
    let _e8: HomogeneousMagnitude = other_2123;
    let _e19: Flector = self_2441;
    let _e21: HomogeneousMagnitude = other_2123;
    let _e27: Flector = self_2441;
    let _e31: HomogeneousMagnitude = other_2123;
    let _e42: Flector = self_2441;
    let _e46: HomogeneousMagnitude = other_2123;
    let _e58: Flector = self_2441;
    let _e62: HomogeneousMagnitude = other_2123;
    let _e74: Flector = self_2441;
    let _e77: Flector = self_2441;
    let _e80: Flector = self_2441;
    let _e83: Flector = self_2441;
    let _e87: HomogeneousMagnitude = other_2123;
    let _e90: HomogeneousMagnitude = other_2123;
    let _e93: HomogeneousMagnitude = other_2123;
    let _e96: HomogeneousMagnitude = other_2123;
    return Flector((((vec4<f32>(_e4.g1_.w) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e19.g0_ * vec4<f32>(_e21.g0_.x))), (((((vec4<f32>(_e27.g1_.x) * vec4<f32>(_e31.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e42.g1_.y) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e58.g1_.z) * vec4<f32>(_e62.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z, _e83.g1_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x))));
}

fn flector_homogeneous_magnitude_geometric_anti_product(self_2442: Flector, other_2124: HomogeneousMagnitude) -> Flector {
    var self_2443: Flector;
    var other_2125: HomogeneousMagnitude;

    self_2443 = self_2442;
    other_2125 = other_2124;
    let _e4: Flector = self_2443;
    let _e8: HomogeneousMagnitude = other_2125;
    let _e20: Flector = self_2443;
    let _e24: HomogeneousMagnitude = other_2125;
    let _e37: Flector = self_2443;
    let _e41: HomogeneousMagnitude = other_2125;
    let _e54: Flector = self_2443;
    let _e56: HomogeneousMagnitude = other_2125;
    let _e62: Flector = self_2443;
    let _e66: HomogeneousMagnitude = other_2125;
    let _e77: Flector = self_2443;
    let _e80: Flector = self_2443;
    let _e83: Flector = self_2443;
    let _e86: Flector = self_2443;
    let _e90: HomogeneousMagnitude = other_2125;
    let _e93: HomogeneousMagnitude = other_2125;
    let _e96: HomogeneousMagnitude = other_2125;
    let _e99: HomogeneousMagnitude = other_2125;
    return Flector((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e54.g0_ * vec4<f32>(_e56.g0_.y))), (((vec4<f32>(_e62.g1_.w) * vec4<f32>(_e66.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e77.g1_.x, _e80.g1_.y, _e83.g1_.z, _e86.g0_.w) * vec4<f32>(_e90.g0_.y, _e93.g0_.y, _e96.g0_.y, _e99.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_homogeneous_magnitude_regressive_product(self_2444: Flector, other_2126: HomogeneousMagnitude) -> Flector {
    var self_2445: Flector;
    var other_2127: HomogeneousMagnitude;

    self_2445 = self_2444;
    other_2127 = other_2126;
    let _e4: Flector = self_2445;
    let _e6: HomogeneousMagnitude = other_2127;
    let _e11: Flector = self_2445;
    let _e13: HomogeneousMagnitude = other_2127;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.y)), (_e11.g1_ * vec4<f32>(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_anti_wedge(self_2446: Flector, other_2128: HomogeneousMagnitude) -> Flector {
    var self_2447: Flector;
    var other_2129: HomogeneousMagnitude;

    self_2447 = self_2446;
    other_2129 = other_2128;
    let _e4: Flector = self_2447;
    let _e6: HomogeneousMagnitude = other_2129;
    let _e11: Flector = self_2447;
    let _e13: HomogeneousMagnitude = other_2129;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.y)), (_e11.g1_ * vec4<f32>(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_meet(self_2448: Flector, other_2130: HomogeneousMagnitude) -> Flector {
    var self_2449: Flector;
    var other_2131: HomogeneousMagnitude;

    self_2449 = self_2448;
    other_2131 = other_2130;
    let _e4: Flector = self_2449;
    let _e6: HomogeneousMagnitude = other_2131;
    let _e11: Flector = self_2449;
    let _e13: HomogeneousMagnitude = other_2131;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.y)), (_e11.g1_ * vec4<f32>(_e13.g0_.y)));
}

fn flector_homogeneous_magnitude_outer_product(self_2450: Flector, other_2132: HomogeneousMagnitude) -> Flector {
    var self_2451: Flector;
    var other_2133: HomogeneousMagnitude;

    self_2451 = self_2450;
    other_2133 = other_2132;
    let _e4: Flector = self_2451;
    let _e6: HomogeneousMagnitude = other_2133;
    let _e11: Flector = self_2451;
    let _e13: HomogeneousMagnitude = other_2133;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec4<f32>(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_wedge(self_2452: Flector, other_2134: HomogeneousMagnitude) -> Flector {
    var self_2453: Flector;
    var other_2135: HomogeneousMagnitude;

    self_2453 = self_2452;
    other_2135 = other_2134;
    let _e4: Flector = self_2453;
    let _e6: HomogeneousMagnitude = other_2135;
    let _e11: Flector = self_2453;
    let _e13: HomogeneousMagnitude = other_2135;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec4<f32>(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_join(self_2454: Flector, other_2136: HomogeneousMagnitude) -> Flector {
    var self_2455: Flector;
    var other_2137: HomogeneousMagnitude;

    self_2455 = self_2454;
    other_2137 = other_2136;
    let _e4: Flector = self_2455;
    let _e6: HomogeneousMagnitude = other_2137;
    let _e11: Flector = self_2455;
    let _e13: HomogeneousMagnitude = other_2137;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec4<f32>(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_inner_product(self_2456: Flector, other_2138: HomogeneousMagnitude) -> Flector {
    var self_2457: Flector;
    var other_2139: HomogeneousMagnitude;

    self_2457 = self_2456;
    other_2139 = other_2138;
    let _e4: Flector = self_2457;
    let _e8: HomogeneousMagnitude = other_2139;
    let _e19: Flector = self_2457;
    let _e21: HomogeneousMagnitude = other_2139;
    let _e27: Flector = self_2457;
    let _e31: HomogeneousMagnitude = other_2139;
    let _e42: Flector = self_2457;
    let _e46: HomogeneousMagnitude = other_2139;
    let _e58: Flector = self_2457;
    let _e62: HomogeneousMagnitude = other_2139;
    let _e74: Flector = self_2457;
    let _e77: Flector = self_2457;
    let _e80: Flector = self_2457;
    let _e83: Flector = self_2457;
    let _e87: HomogeneousMagnitude = other_2139;
    let _e90: HomogeneousMagnitude = other_2139;
    let _e93: HomogeneousMagnitude = other_2139;
    let _e96: HomogeneousMagnitude = other_2139;
    return Flector((((vec4<f32>(_e4.g1_.w) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e19.g0_ * vec4<f32>(_e21.g0_.x))), (((((vec4<f32>(_e27.g1_.x) * vec4<f32>(_e31.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e42.g1_.y) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e58.g1_.z) * vec4<f32>(_e62.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z, _e83.g1_.w) * vec4<f32>(_e87.g0_.y, _e90.g0_.y, _e93.g0_.y, _e96.g0_.x))));
}

fn flector_homogeneous_magnitude_inner_anti_product(self_2458: Flector, other_2140: HomogeneousMagnitude) -> Flector {
    var self_2459: Flector;
    var other_2141: HomogeneousMagnitude;

    self_2459 = self_2458;
    other_2141 = other_2140;
    let _e4: Flector = self_2459;
    let _e8: HomogeneousMagnitude = other_2141;
    let _e20: Flector = self_2459;
    let _e24: HomogeneousMagnitude = other_2141;
    let _e37: Flector = self_2459;
    let _e41: HomogeneousMagnitude = other_2141;
    let _e54: Flector = self_2459;
    let _e56: HomogeneousMagnitude = other_2141;
    let _e62: Flector = self_2459;
    let _e66: HomogeneousMagnitude = other_2141;
    let _e77: Flector = self_2459;
    let _e80: Flector = self_2459;
    let _e83: Flector = self_2459;
    let _e86: Flector = self_2459;
    let _e90: HomogeneousMagnitude = other_2141;
    let _e93: HomogeneousMagnitude = other_2141;
    let _e96: HomogeneousMagnitude = other_2141;
    let _e99: HomogeneousMagnitude = other_2141;
    return Flector((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e54.g0_ * vec4<f32>(_e56.g0_.y))), (((vec4<f32>(_e62.g1_.w) * vec4<f32>(_e66.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e77.g1_.x, _e80.g1_.y, _e83.g1_.z, _e86.g0_.w) * vec4<f32>(_e90.g0_.y, _e93.g0_.y, _e96.g0_.y, _e99.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_homogeneous_magnitude_right_contraction(self_2460: Flector, other_2142: HomogeneousMagnitude) -> Flector {
    var self_2461: Flector;
    var other_2143: HomogeneousMagnitude;

    self_2461 = self_2460;
    other_2143 = other_2142;
    let _e4: Flector = self_2461;
    let _e6: HomogeneousMagnitude = other_2143;
    let _e11: Flector = self_2461;
    let _e13: HomogeneousMagnitude = other_2143;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (_e11.g1_ * vec4<f32>(_e13.g0_.x)));
}

fn flector_homogeneous_magnitude_right_anti_contraction(self_2462: Flector, other_2144: HomogeneousMagnitude) -> Flector {
    var self_2463: Flector;
    var other_2145: HomogeneousMagnitude;

    self_2463 = self_2462;
    other_2145 = other_2144;
    let _e4: Flector = self_2463;
    let _e6: HomogeneousMagnitude = other_2145;
    let _e11: Flector = self_2463;
    let _e13: HomogeneousMagnitude = other_2145;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.y)), (_e11.g1_ * vec4<f32>(_e13.g0_.y)));
}

fn flector_point_into(self_2464: Flector) -> Point {
    var self_2465: Flector;

    self_2465 = self_2464;
    let _e2: Flector = self_2465;
    return Point(_e2.g0_);
}

fn flector_point_add(self_2466: Flector, other_2146: Point) -> Flector {
    var self_2467: Flector;
    var other_2147: Point;

    self_2467 = self_2466;
    other_2147 = other_2146;
    let _e4: Flector = self_2467;
    let _e6: Point = other_2147;
    let _e9: Flector = self_2467;
    return Flector((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn flector_point_sub(self_2468: Flector, other_2148: Point) -> Flector {
    var self_2469: Flector;
    var other_2149: Point;

    self_2469 = self_2468;
    other_2149 = other_2148;
    let _e4: Flector = self_2469;
    let _e6: Point = other_2149;
    let _e9: Flector = self_2469;
    return Flector((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn flector_point_regressive_product(self_2470: Flector, other_2150: Point) -> Scalar {
    var self_2471: Flector;
    var other_2151: Point;

    self_2471 = self_2470;
    other_2151 = other_2150;
    let _e5: Flector = self_2471;
    let _e8: Point = other_2151;
    let _e13: Flector = self_2471;
    let _e16: Point = other_2151;
    let _e21: Flector = self_2471;
    let _e24: Point = other_2151;
    let _e29: Flector = self_2471;
    let _e32: Point = other_2151;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_anti_wedge(self_2472: Flector, other_2152: Point) -> Scalar {
    var self_2473: Flector;
    var other_2153: Point;

    self_2473 = self_2472;
    other_2153 = other_2152;
    let _e5: Flector = self_2473;
    let _e8: Point = other_2153;
    let _e13: Flector = self_2473;
    let _e16: Point = other_2153;
    let _e21: Flector = self_2473;
    let _e24: Point = other_2153;
    let _e29: Flector = self_2473;
    let _e32: Point = other_2153;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_meet(self_2474: Flector, other_2154: Point) -> Scalar {
    var self_2475: Flector;
    var other_2155: Point;

    self_2475 = self_2474;
    other_2155 = other_2154;
    let _e5: Flector = self_2475;
    let _e8: Point = other_2155;
    let _e13: Flector = self_2475;
    let _e16: Point = other_2155;
    let _e21: Flector = self_2475;
    let _e24: Point = other_2155;
    let _e29: Flector = self_2475;
    let _e32: Point = other_2155;
    return Scalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn flector_point_outer_product(self_2476: Flector, other_2156: Point) -> Motor {
    var self_2477: Flector;
    var other_2157: Point;

    self_2477 = self_2476;
    other_2157 = other_2156;
    let _e4: Flector = self_2477;
    let _e8: Point = other_2157;
    let _e18: Flector = self_2477;
    let _e22: Point = other_2157;
    let _e35: Flector = self_2477;
    let _e39: Point = other_2157;
    let _e52: Flector = self_2477;
    let _e56: Point = other_2157;
    let _e69: Flector = self_2477;
    let _e72: Flector = self_2477;
    let _e75: Flector = self_2477;
    let _e78: Flector = self_2477;
    let _e82: Point = other_2157;
    let _e91: Flector = self_2477;
    let _e95: Point = other_2157;
    let _e98: Point = other_2157;
    let _e101: Point = other_2157;
    let _e112: Flector = self_2477;
    let _e116: Point = other_2157;
    let _e119: Point = other_2157;
    let _e122: Point = other_2157;
    let _e134: Flector = self_2477;
    let _e138: Point = other_2157;
    let _e141: Point = other_2157;
    let _e144: Point = other_2157;
    return Motor(((((((vec4<f32>(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4<f32>(_e18.g1_.y) * vec4<f32>(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.w) * vec4<f32>(_e56.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z, _e78.g1_.x) * _e82.g0_.wwwx) * vec4<f32>(-(1.0)))), ((((vec3<f32>(_e91.g0_.y) * vec3<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e112.g0_.z) * vec3<f32>(_e116.g0_.y, _e119.g0_.x, _e122.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e134.g0_.x) * vec3<f32>(_e138.g0_.x, _e141.g0_.z, _e144.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_point_wedge(self_2478: Flector, other_2158: Point) -> Motor {
    var self_2479: Flector;
    var other_2159: Point;

    self_2479 = self_2478;
    other_2159 = other_2158;
    let _e4: Flector = self_2479;
    let _e8: Point = other_2159;
    let _e18: Flector = self_2479;
    let _e22: Point = other_2159;
    let _e35: Flector = self_2479;
    let _e39: Point = other_2159;
    let _e52: Flector = self_2479;
    let _e56: Point = other_2159;
    let _e69: Flector = self_2479;
    let _e72: Flector = self_2479;
    let _e75: Flector = self_2479;
    let _e78: Flector = self_2479;
    let _e82: Point = other_2159;
    let _e91: Flector = self_2479;
    let _e95: Point = other_2159;
    let _e98: Point = other_2159;
    let _e101: Point = other_2159;
    let _e112: Flector = self_2479;
    let _e116: Point = other_2159;
    let _e119: Point = other_2159;
    let _e122: Point = other_2159;
    let _e134: Flector = self_2479;
    let _e138: Point = other_2159;
    let _e141: Point = other_2159;
    let _e144: Point = other_2159;
    return Motor(((((((vec4<f32>(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4<f32>(_e18.g1_.y) * vec4<f32>(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.w) * vec4<f32>(_e56.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z, _e78.g1_.x) * _e82.g0_.wwwx) * vec4<f32>(-(1.0)))), ((((vec3<f32>(_e91.g0_.y) * vec3<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e112.g0_.z) * vec3<f32>(_e116.g0_.y, _e119.g0_.x, _e122.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e134.g0_.x) * vec3<f32>(_e138.g0_.x, _e141.g0_.z, _e144.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_point_join(self_2480: Flector, other_2160: Point) -> Motor {
    var self_2481: Flector;
    var other_2161: Point;

    self_2481 = self_2480;
    other_2161 = other_2160;
    let _e4: Flector = self_2481;
    let _e8: Point = other_2161;
    let _e18: Flector = self_2481;
    let _e22: Point = other_2161;
    let _e35: Flector = self_2481;
    let _e39: Point = other_2161;
    let _e52: Flector = self_2481;
    let _e56: Point = other_2161;
    let _e69: Flector = self_2481;
    let _e72: Flector = self_2481;
    let _e75: Flector = self_2481;
    let _e78: Flector = self_2481;
    let _e82: Point = other_2161;
    let _e91: Flector = self_2481;
    let _e95: Point = other_2161;
    let _e98: Point = other_2161;
    let _e101: Point = other_2161;
    let _e112: Flector = self_2481;
    let _e116: Point = other_2161;
    let _e119: Point = other_2161;
    let _e122: Point = other_2161;
    let _e134: Flector = self_2481;
    let _e138: Point = other_2161;
    let _e141: Point = other_2161;
    let _e144: Point = other_2161;
    return Motor(((((((vec4<f32>(_e4.g0_.w) * _e8.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0)) + ((vec4<f32>(_e18.g1_.y) * vec4<f32>(_e22.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.w) * vec4<f32>(_e56.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g0_.x, _e72.g0_.y, _e75.g0_.z, _e78.g1_.x) * _e82.g0_.wwwx) * vec4<f32>(-(1.0)))), ((((vec3<f32>(_e91.g0_.y) * vec3<f32>(_e95.g0_.z, _e98.g0_.z, _e101.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e112.g0_.z) * vec3<f32>(_e116.g0_.y, _e119.g0_.x, _e122.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e134.g0_.x) * vec3<f32>(_e138.g0_.x, _e141.g0_.z, _e144.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_point_inner_anti_product(self_2482: Flector, other_2162: Point) -> Motor {
    var self_2483: Flector;
    var other_2163: Point;

    self_2483 = self_2482;
    other_2163 = other_2162;
    let _e4: Flector = self_2483;
    let _e7: Flector = self_2483;
    let _e10: Flector = self_2483;
    let _e13: Flector = self_2483;
    let _e17: Point = other_2163;
    let _e26: Flector = self_2483;
    let _e30: Point = other_2163;
    let _e33: Point = other_2163;
    let _e36: Point = other_2163;
    let _e47: Flector = self_2483;
    let _e51: Point = other_2163;
    let _e54: Point = other_2163;
    let _e57: Point = other_2163;
    let _e69: Flector = self_2483;
    let _e73: Point = other_2163;
    let _e76: Point = other_2163;
    let _e79: Point = other_2163;
    return Motor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g0_.w) * vec4<f32>(_e17.g0_.w)) * vec4<f32>(-(1.0))), ((((vec3<f32>(_e26.g1_.y) * vec3<f32>(_e30.g0_.z, _e33.g0_.z, _e36.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e47.g1_.z) * vec3<f32>(_e51.g0_.y, _e54.g0_.x, _e57.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e69.g1_.x) * vec3<f32>(_e73.g0_.x, _e76.g0_.z, _e79.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_point_left_contraction(self_2484: Flector, other_2164: Point) -> Scalar {
    var self_2485: Flector;
    var other_2165: Point;

    self_2485 = self_2484;
    other_2165 = other_2164;
    let _e4: Flector = self_2485;
    let _e7: Point = other_2165;
    let _e11: Flector = self_2485;
    let _e14: Point = other_2165;
    let _e19: Flector = self_2485;
    let _e22: Point = other_2165;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_left_anti_contraction(self_2486: Flector, other_2166: Point) -> Motor {
    var self_2487: Flector;
    var other_2167: Point;

    self_2487 = self_2486;
    other_2167 = other_2166;
    let _e4: Flector = self_2487;
    let _e7: Flector = self_2487;
    let _e10: Flector = self_2487;
    let _e13: Flector = self_2487;
    let _e17: Point = other_2167;
    let _e26: Flector = self_2487;
    let _e30: Point = other_2167;
    let _e33: Point = other_2167;
    let _e36: Point = other_2167;
    let _e47: Flector = self_2487;
    let _e51: Point = other_2167;
    let _e54: Point = other_2167;
    let _e57: Point = other_2167;
    let _e69: Flector = self_2487;
    let _e73: Point = other_2167;
    let _e76: Point = other_2167;
    let _e79: Point = other_2167;
    return Motor(((vec4<f32>(_e4.g1_.x, _e7.g1_.y, _e10.g1_.z, _e13.g0_.w) * vec4<f32>(_e17.g0_.w)) * vec4<f32>(-(1.0))), ((((vec3<f32>(_e26.g1_.y) * vec3<f32>(_e30.g0_.z, _e33.g0_.z, _e36.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e47.g1_.z) * vec3<f32>(_e51.g0_.y, _e54.g0_.x, _e57.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e69.g1_.x) * vec3<f32>(_e73.g0_.x, _e76.g0_.z, _e79.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_point_right_anti_contraction(self_2488: Flector, other_2168: Point) -> AntiScalar {
    var self_2489: Flector;
    var other_2169: Point;

    self_2489 = self_2488;
    other_2169 = other_2168;
    let _e5: Flector = self_2489;
    let _e8: Point = other_2169;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_point_scalar_product(self_2490: Flector, other_2170: Point) -> Scalar {
    var self_2491: Flector;
    var other_2171: Point;

    self_2491 = self_2490;
    other_2171 = other_2170;
    let _e4: Flector = self_2491;
    let _e7: Point = other_2171;
    let _e11: Flector = self_2491;
    let _e14: Point = other_2171;
    let _e19: Flector = self_2491;
    let _e22: Point = other_2171;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_dot(self_2492: Flector, other_2172: Point) -> Scalar {
    var self_2493: Flector;
    var other_2173: Point;

    self_2493 = self_2492;
    other_2173 = other_2172;
    let _e4: Flector = self_2493;
    let _e7: Point = other_2173;
    let _e11: Flector = self_2493;
    let _e14: Point = other_2173;
    let _e19: Flector = self_2493;
    let _e22: Point = other_2173;
    return Scalar((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)));
}

fn flector_point_anti_scalar_product(self_2494: Flector, other_2174: Point) -> AntiScalar {
    var self_2495: Flector;
    var other_2175: Point;

    self_2495 = self_2494;
    other_2175 = other_2174;
    let _e5: Flector = self_2495;
    let _e8: Point = other_2175;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_point_anti_dot(self_2496: Flector, other_2176: Point) -> AntiScalar {
    var self_2497: Flector;
    var other_2177: Point;

    self_2497 = self_2496;
    other_2177 = other_2176;
    let _e5: Flector = self_2497;
    let _e8: Point = other_2177;
    return AntiScalar((0.0 - (_e5.g0_.w * _e8.g0_.w)));
}

fn flector_line_geometric_product(self_2498: Flector, other_2178: Line) -> Flector {
    var self_2499: Flector;
    var other_2179: Line;

    self_2499 = self_2498;
    other_2179 = other_2178;
    let _e4: Flector = self_2499;
    let _e8: Line = other_2179;
    let _e11: Line = other_2179;
    let _e14: Line = other_2179;
    let _e17: Line = other_2179;
    let _e30: Flector = self_2499;
    let _e34: Line = other_2179;
    let _e37: Line = other_2179;
    let _e40: Line = other_2179;
    let _e43: Line = other_2179;
    let _e57: Flector = self_2499;
    let _e61: Line = other_2179;
    let _e74: Flector = self_2499;
    let _e78: Line = other_2179;
    let _e91: Flector = self_2499;
    let _e95: Line = other_2179;
    let _e108: Flector = self_2499;
    let _e112: Line = other_2179;
    let _e115: Line = other_2179;
    let _e118: Line = other_2179;
    let _e121: Line = other_2179;
    let _e133: Flector = self_2499;
    let _e137: Line = other_2179;
    let _e140: Line = other_2179;
    let _e143: Line = other_2179;
    let _e146: Line = other_2179;
    let _e160: Flector = self_2499;
    let _e164: Line = other_2179;
    let _e167: Line = other_2179;
    let _e170: Line = other_2179;
    let _e173: Line = other_2179;
    let _e186: Flector = self_2499;
    let _e190: Line = other_2179;
    let _e193: Line = other_2179;
    let _e196: Line = other_2179;
    let _e199: Line = other_2179;
    let _e213: Flector = self_2499;
    let _e217: Line = other_2179;
    let _e220: Line = other_2179;
    let _e223: Line = other_2179;
    let _e226: Line = other_2179;
    let _e238: Flector = self_2499;
    let _e242: Line = other_2179;
    let _e245: Line = other_2179;
    let _e248: Line = other_2179;
    let _e251: Line = other_2179;
    let _e264: Flector = self_2499;
    let _e268: Line = other_2179;
    let _e271: Line = other_2179;
    let _e274: Line = other_2179;
    let _e277: Line = other_2179;
    let _e290: Flector = self_2499;
    let _e294: Line = other_2179;
    let _e297: Line = other_2179;
    let _e300: Line = other_2179;
    let _e303: Line = other_2179;
    let _e316: Flector = self_2499;
    let _e320: Line = other_2179;
    let _e323: Line = other_2179;
    let _e326: Line = other_2179;
    let _e329: Line = other_2179;
    let _e341: Flector = self_2499;
    let _e345: Line = other_2179;
    let _e348: Line = other_2179;
    let _e351: Line = other_2179;
    let _e354: Line = other_2179;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * vec4<f32>(_e78.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.z) * vec4<f32>(_e95.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.w) * vec4<f32>(_e112.g1_.x, _e115.g1_.y, _e118.g1_.z, _e121.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g1_.x, _e140.g1_.z, _e143.g1_.y, _e146.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e160.g0_.y) * vec4<f32>(_e164.g0_.z, _e167.g0_.z, _e170.g0_.x, _e173.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e186.g0_.z) * vec4<f32>(_e190.g0_.y, _e193.g0_.x, _e196.g0_.y, _e199.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e213.g0_.w) * vec4<f32>(_e217.g1_.x, _e220.g1_.y, _e223.g1_.z, _e226.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e238.g1_.x) * vec4<f32>(_e242.g1_.z, _e245.g1_.z, _e248.g1_.y, _e251.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e264.g1_.y) * vec4<f32>(_e268.g1_.z, _e271.g1_.z, _e274.g1_.x, _e277.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e290.g1_.z) * vec4<f32>(_e294.g1_.y, _e297.g1_.x, _e300.g1_.y, _e303.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e316.g1_.w) * vec4<f32>(_e320.g0_.x, _e323.g0_.y, _e326.g0_.z, _e329.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e341.g0_.x) * vec4<f32>(_e345.g0_.x, _e348.g0_.z, _e351.g0_.y, _e354.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_geometric_anti_product(self_2500: Flector, other_2180: Line) -> Flector {
    var self_2501: Flector;
    var other_2181: Line;

    self_2501 = self_2500;
    other_2181 = other_2180;
    let _e4: Flector = self_2501;
    let _e8: Line = other_2181;
    let _e11: Line = other_2181;
    let _e14: Line = other_2181;
    let _e17: Line = other_2181;
    let _e29: Flector = self_2501;
    let _e33: Line = other_2181;
    let _e36: Line = other_2181;
    let _e39: Line = other_2181;
    let _e42: Line = other_2181;
    let _e55: Flector = self_2501;
    let _e59: Line = other_2181;
    let _e62: Line = other_2181;
    let _e65: Line = other_2181;
    let _e68: Line = other_2181;
    let _e83: Flector = self_2501;
    let _e87: Line = other_2181;
    let _e90: Line = other_2181;
    let _e93: Line = other_2181;
    let _e96: Line = other_2181;
    let _e110: Flector = self_2501;
    let _e114: Line = other_2181;
    let _e117: Line = other_2181;
    let _e120: Line = other_2181;
    let _e123: Line = other_2181;
    let _e137: Flector = self_2501;
    let _e141: Line = other_2181;
    let _e144: Line = other_2181;
    let _e147: Line = other_2181;
    let _e150: Line = other_2181;
    let _e164: Flector = self_2501;
    let _e168: Line = other_2181;
    let _e171: Line = other_2181;
    let _e174: Line = other_2181;
    let _e177: Line = other_2181;
    let _e189: Flector = self_2501;
    let _e193: Line = other_2181;
    let _e196: Line = other_2181;
    let _e199: Line = other_2181;
    let _e202: Line = other_2181;
    let _e215: Flector = self_2501;
    let _e219: Line = other_2181;
    let _e231: Flector = self_2501;
    let _e235: Line = other_2181;
    let _e248: Flector = self_2501;
    let _e252: Line = other_2181;
    let _e255: Line = other_2181;
    let _e258: Line = other_2181;
    let _e261: Line = other_2181;
    let _e274: Flector = self_2501;
    let _e278: Line = other_2181;
    let _e281: Line = other_2181;
    let _e284: Line = other_2181;
    let _e287: Line = other_2181;
    let _e300: Flector = self_2501;
    let _e304: Line = other_2181;
    let _e307: Line = other_2181;
    let _e310: Line = other_2181;
    let _e313: Line = other_2181;
    let _e326: Flector = self_2501;
    let _e329: Line = other_2181;
    let _e332: Line = other_2181;
    let _e335: Line = other_2181;
    let _e338: Line = other_2181;
    return Flector((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.x, _e62.g1_.y, _e65.g1_.z, _e68.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e83.g1_.x) * vec4<f32>(_e87.g1_.z, _e90.g1_.z, _e93.g1_.y, _e96.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e110.g1_.y) * vec4<f32>(_e114.g1_.z, _e117.g1_.z, _e120.g1_.x, _e123.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e137.g1_.z) * vec4<f32>(_e141.g1_.y, _e144.g1_.x, _e147.g1_.y, _e150.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.w) * vec4<f32>(_e168.g0_.x, _e171.g0_.y, _e174.g0_.z, _e177.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.z, _e199.g0_.y, _e202.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), (((((((vec4<f32>(_e215.g0_.y) * vec4<f32>(_e219.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e231.g0_.z) * vec4<f32>(_e235.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e248.g1_.x) * vec4<f32>(_e252.g0_.z, _e255.g0_.z, _e258.g0_.y, _e261.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e274.g1_.y) * vec4<f32>(_e278.g0_.z, _e281.g0_.z, _e284.g0_.x, _e287.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e300.g1_.z) * vec4<f32>(_e304.g0_.y, _e307.g0_.x, _e310.g0_.y, _e313.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e326.g0_.wwwx * vec4<f32>(_e329.g0_.x, _e332.g0_.y, _e335.g0_.z, _e338.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_line_regressive_product(self_2502: Flector, other_2182: Line) -> Point {
    var self_2503: Flector;
    var other_2183: Line;

    self_2503 = self_2502;
    other_2183 = other_2182;
    let _e4: Flector = self_2503;
    let _e8: Line = other_2183;
    let _e11: Line = other_2183;
    let _e14: Line = other_2183;
    let _e17: Line = other_2183;
    let _e30: Flector = self_2503;
    let _e34: Line = other_2183;
    let _e37: Line = other_2183;
    let _e40: Line = other_2183;
    let _e43: Line = other_2183;
    let _e57: Flector = self_2503;
    let _e61: Line = other_2183;
    let _e64: Line = other_2183;
    let _e67: Line = other_2183;
    let _e70: Line = other_2183;
    let _e82: Flector = self_2503;
    let _e86: Line = other_2183;
    let _e89: Line = other_2183;
    let _e92: Line = other_2183;
    let _e95: Line = other_2183;
    return Point((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g1_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_anti_wedge(self_2504: Flector, other_2184: Line) -> Point {
    var self_2505: Flector;
    var other_2185: Line;

    self_2505 = self_2504;
    other_2185 = other_2184;
    let _e4: Flector = self_2505;
    let _e8: Line = other_2185;
    let _e11: Line = other_2185;
    let _e14: Line = other_2185;
    let _e17: Line = other_2185;
    let _e30: Flector = self_2505;
    let _e34: Line = other_2185;
    let _e37: Line = other_2185;
    let _e40: Line = other_2185;
    let _e43: Line = other_2185;
    let _e57: Flector = self_2505;
    let _e61: Line = other_2185;
    let _e64: Line = other_2185;
    let _e67: Line = other_2185;
    let _e70: Line = other_2185;
    let _e82: Flector = self_2505;
    let _e86: Line = other_2185;
    let _e89: Line = other_2185;
    let _e92: Line = other_2185;
    let _e95: Line = other_2185;
    return Point((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g1_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_meet(self_2506: Flector, other_2186: Line) -> Point {
    var self_2507: Flector;
    var other_2187: Line;

    self_2507 = self_2506;
    other_2187 = other_2186;
    let _e4: Flector = self_2507;
    let _e8: Line = other_2187;
    let _e11: Line = other_2187;
    let _e14: Line = other_2187;
    let _e17: Line = other_2187;
    let _e30: Flector = self_2507;
    let _e34: Line = other_2187;
    let _e37: Line = other_2187;
    let _e40: Line = other_2187;
    let _e43: Line = other_2187;
    let _e57: Flector = self_2507;
    let _e61: Line = other_2187;
    let _e64: Line = other_2187;
    let _e67: Line = other_2187;
    let _e70: Line = other_2187;
    let _e82: Flector = self_2507;
    let _e86: Line = other_2187;
    let _e89: Line = other_2187;
    let _e92: Line = other_2187;
    let _e95: Line = other_2187;
    return Point((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.x, _e64.g0_.y, _e67.g0_.z, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g1_.x) * vec4<f32>(_e86.g1_.x, _e89.g1_.z, _e92.g1_.y, _e95.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_outer_product(self_2508: Flector, other_2188: Line) -> Plane {
    var self_2509: Flector;
    var other_2189: Line;

    self_2509 = self_2508;
    other_2189 = other_2188;
    let _e4: Flector = self_2509;
    let _e8: Line = other_2189;
    let _e11: Line = other_2189;
    let _e14: Line = other_2189;
    let _e17: Line = other_2189;
    let _e30: Flector = self_2509;
    let _e34: Line = other_2189;
    let _e37: Line = other_2189;
    let _e40: Line = other_2189;
    let _e43: Line = other_2189;
    let _e57: Flector = self_2509;
    let _e61: Line = other_2189;
    let _e64: Line = other_2189;
    let _e67: Line = other_2189;
    let _e70: Line = other_2189;
    let _e82: Flector = self_2509;
    let _e86: Line = other_2189;
    let _e89: Line = other_2189;
    let _e92: Line = other_2189;
    let _e95: Line = other_2189;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_wedge(self_2510: Flector, other_2190: Line) -> Plane {
    var self_2511: Flector;
    var other_2191: Line;

    self_2511 = self_2510;
    other_2191 = other_2190;
    let _e4: Flector = self_2511;
    let _e8: Line = other_2191;
    let _e11: Line = other_2191;
    let _e14: Line = other_2191;
    let _e17: Line = other_2191;
    let _e30: Flector = self_2511;
    let _e34: Line = other_2191;
    let _e37: Line = other_2191;
    let _e40: Line = other_2191;
    let _e43: Line = other_2191;
    let _e57: Flector = self_2511;
    let _e61: Line = other_2191;
    let _e64: Line = other_2191;
    let _e67: Line = other_2191;
    let _e70: Line = other_2191;
    let _e82: Flector = self_2511;
    let _e86: Line = other_2191;
    let _e89: Line = other_2191;
    let _e92: Line = other_2191;
    let _e95: Line = other_2191;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_join(self_2512: Flector, other_2192: Line) -> Plane {
    var self_2513: Flector;
    var other_2193: Line;

    self_2513 = self_2512;
    other_2193 = other_2192;
    let _e4: Flector = self_2513;
    let _e8: Line = other_2193;
    let _e11: Line = other_2193;
    let _e14: Line = other_2193;
    let _e17: Line = other_2193;
    let _e30: Flector = self_2513;
    let _e34: Line = other_2193;
    let _e37: Line = other_2193;
    let _e40: Line = other_2193;
    let _e43: Line = other_2193;
    let _e57: Flector = self_2513;
    let _e61: Line = other_2193;
    let _e64: Line = other_2193;
    let _e67: Line = other_2193;
    let _e70: Line = other_2193;
    let _e82: Flector = self_2513;
    let _e86: Line = other_2193;
    let _e89: Line = other_2193;
    let _e92: Line = other_2193;
    let _e95: Line = other_2193;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_inner_product(self_2514: Flector, other_2194: Line) -> Point {
    var self_2515: Flector;
    var other_2195: Line;

    self_2515 = self_2514;
    other_2195 = other_2194;
    let _e4: Flector = self_2515;
    let _e8: Line = other_2195;
    let _e11: Line = other_2195;
    let _e14: Line = other_2195;
    let _e17: Line = other_2195;
    let _e30: Flector = self_2515;
    let _e34: Line = other_2195;
    let _e37: Line = other_2195;
    let _e40: Line = other_2195;
    let _e43: Line = other_2195;
    let _e57: Flector = self_2515;
    let _e61: Line = other_2195;
    let _e74: Flector = self_2515;
    let _e78: Line = other_2195;
    let _e91: Flector = self_2515;
    let _e95: Line = other_2195;
    let _e108: Flector = self_2515;
    let _e112: Line = other_2195;
    let _e115: Line = other_2195;
    let _e118: Line = other_2195;
    let _e121: Line = other_2195;
    let _e133: Flector = self_2515;
    let _e137: Line = other_2195;
    let _e140: Line = other_2195;
    let _e143: Line = other_2195;
    let _e146: Line = other_2195;
    return Point(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * vec4<f32>(_e78.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.z) * vec4<f32>(_e95.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.w) * vec4<f32>(_e112.g1_.x, _e115.g1_.y, _e118.g1_.z, _e121.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g1_.x, _e140.g1_.z, _e143.g1_.y, _e146.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_inner_anti_product(self_2516: Flector, other_2196: Line) -> Plane {
    var self_2517: Flector;
    var other_2197: Line;

    self_2517 = self_2516;
    other_2197 = other_2196;
    let _e4: Flector = self_2517;
    let _e8: Line = other_2197;
    let _e20: Flector = self_2517;
    let _e24: Line = other_2197;
    let _e37: Flector = self_2517;
    let _e41: Line = other_2197;
    let _e44: Line = other_2197;
    let _e47: Line = other_2197;
    let _e50: Line = other_2197;
    let _e63: Flector = self_2517;
    let _e67: Line = other_2197;
    let _e70: Line = other_2197;
    let _e73: Line = other_2197;
    let _e76: Line = other_2197;
    let _e89: Flector = self_2517;
    let _e93: Line = other_2197;
    let _e96: Line = other_2197;
    let _e99: Line = other_2197;
    let _e102: Line = other_2197;
    let _e115: Flector = self_2517;
    let _e118: Line = other_2197;
    let _e121: Line = other_2197;
    let _e124: Line = other_2197;
    let _e127: Line = other_2197;
    return Plane((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.x) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.y, _e50.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e63.g1_.y) * vec4<f32>(_e67.g0_.z, _e70.g0_.z, _e73.g0_.x, _e76.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e89.g1_.z) * vec4<f32>(_e93.g0_.y, _e96.g0_.x, _e99.g0_.y, _e102.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e115.g0_.wwwx * vec4<f32>(_e118.g0_.x, _e121.g0_.y, _e124.g0_.z, _e127.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_line_left_contraction(self_2518: Flector, other_2198: Line) -> Point {
    var self_2519: Flector;
    var other_2199: Line;

    self_2519 = self_2518;
    other_2199 = other_2198;
    let _e4: Flector = self_2519;
    let _e8: Line = other_2199;
    let _e11: Line = other_2199;
    let _e14: Line = other_2199;
    let _e17: Line = other_2199;
    let _e30: Flector = self_2519;
    let _e34: Line = other_2199;
    let _e37: Line = other_2199;
    let _e40: Line = other_2199;
    let _e43: Line = other_2199;
    let _e57: Flector = self_2519;
    let _e61: Line = other_2199;
    let _e64: Line = other_2199;
    let _e67: Line = other_2199;
    let _e70: Line = other_2199;
    return Point(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_line_right_contraction(self_2520: Flector, other_2200: Line) -> Point {
    var self_2521: Flector;
    var other_2201: Line;

    self_2521 = self_2520;
    other_2201 = other_2200;
    let _e4: Flector = self_2521;
    let _e8: Line = other_2201;
    let _e20: Flector = self_2521;
    let _e24: Line = other_2201;
    let _e37: Flector = self_2521;
    let _e40: Line = other_2201;
    let _e43: Line = other_2201;
    let _e46: Line = other_2201;
    let _e49: Line = other_2201;
    return Point(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g1_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_line_left_anti_contraction(self_2522: Flector, other_2202: Line) -> Plane {
    var self_2523: Flector;
    var other_2203: Line;

    self_2523 = self_2522;
    other_2203 = other_2202;
    let _e4: Flector = self_2523;
    let _e8: Line = other_2203;
    let _e11: Line = other_2203;
    let _e14: Line = other_2203;
    let _e17: Line = other_2203;
    let _e29: Flector = self_2523;
    let _e33: Line = other_2203;
    let _e36: Line = other_2203;
    let _e39: Line = other_2203;
    let _e42: Line = other_2203;
    let _e55: Flector = self_2523;
    let _e59: Line = other_2203;
    let _e62: Line = other_2203;
    let _e65: Line = other_2203;
    let _e68: Line = other_2203;
    return Plane(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn flector_line_right_anti_contraction(self_2524: Flector, other_2204: Line) -> Plane {
    var self_2525: Flector;
    var other_2205: Line;

    self_2525 = self_2524;
    other_2205 = other_2204;
    let _e4: Flector = self_2525;
    let _e8: Line = other_2205;
    let _e20: Flector = self_2525;
    let _e24: Line = other_2205;
    let _e37: Flector = self_2525;
    let _e40: Line = other_2205;
    let _e43: Line = other_2205;
    let _e46: Line = other_2205;
    let _e49: Line = other_2205;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * vec4<f32>(_e40.g0_.x, _e43.g0_.y, _e46.g0_.z, _e49.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_plane_into(self_2526: Flector) -> Plane {
    var self_2527: Flector;

    self_2527 = self_2526;
    let _e2: Flector = self_2527;
    return Plane(_e2.g1_);
}

fn flector_plane_add(self_2528: Flector, other_2206: Plane) -> Flector {
    var self_2529: Flector;
    var other_2207: Plane;

    self_2529 = self_2528;
    other_2207 = other_2206;
    let _e4: Flector = self_2529;
    let _e6: Flector = self_2529;
    let _e8: Plane = other_2207;
    return Flector(_e4.g0_, (_e6.g1_ + _e8.g0_));
}

fn flector_plane_sub(self_2530: Flector, other_2208: Plane) -> Flector {
    var self_2531: Flector;
    var other_2209: Plane;

    self_2531 = self_2530;
    other_2209 = other_2208;
    let _e4: Flector = self_2531;
    let _e6: Flector = self_2531;
    let _e8: Plane = other_2209;
    return Flector(_e4.g0_, (_e6.g1_ - _e8.g0_));
}

fn flector_plane_outer_product(self_2532: Flector, other_2210: Plane) -> AntiScalar {
    var self_2533: Flector;
    var other_2211: Plane;

    self_2533 = self_2532;
    other_2211 = other_2210;
    let _e4: Flector = self_2533;
    let _e7: Plane = other_2211;
    let _e11: Flector = self_2533;
    let _e14: Plane = other_2211;
    let _e19: Flector = self_2533;
    let _e22: Plane = other_2211;
    let _e27: Flector = self_2533;
    let _e30: Plane = other_2211;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_wedge(self_2534: Flector, other_2212: Plane) -> AntiScalar {
    var self_2535: Flector;
    var other_2213: Plane;

    self_2535 = self_2534;
    other_2213 = other_2212;
    let _e4: Flector = self_2535;
    let _e7: Plane = other_2213;
    let _e11: Flector = self_2535;
    let _e14: Plane = other_2213;
    let _e19: Flector = self_2535;
    let _e22: Plane = other_2213;
    let _e27: Flector = self_2535;
    let _e30: Plane = other_2213;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_join(self_2536: Flector, other_2214: Plane) -> AntiScalar {
    var self_2537: Flector;
    var other_2215: Plane;

    self_2537 = self_2536;
    other_2215 = other_2214;
    let _e4: Flector = self_2537;
    let _e7: Plane = other_2215;
    let _e11: Flector = self_2537;
    let _e14: Plane = other_2215;
    let _e19: Flector = self_2537;
    let _e22: Plane = other_2215;
    let _e27: Flector = self_2537;
    let _e30: Plane = other_2215;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn flector_plane_inner_anti_product(self_2538: Flector, other_2216: Plane) -> Motor {
    var self_2539: Flector;
    var other_2217: Plane;

    self_2539 = self_2538;
    other_2217 = other_2216;
    let _e4: Flector = self_2539;
    let _e8: Plane = other_2217;
    let _e19: Flector = self_2539;
    let _e23: Plane = other_2217;
    let _e35: Flector = self_2539;
    let _e38: Flector = self_2539;
    let _e41: Flector = self_2539;
    let _e44: Flector = self_2539;
    let _e48: Plane = other_2217;
    let _e62: Flector = self_2539;
    let _e66: Plane = other_2217;
    let _e69: Plane = other_2217;
    let _e72: Plane = other_2217;
    let _e83: Flector = self_2539;
    let _e87: Plane = other_2217;
    let _e90: Plane = other_2217;
    let _e93: Plane = other_2217;
    let _e105: Flector = self_2539;
    let _e109: Plane = other_2217;
    let _e112: Plane = other_2217;
    let _e115: Plane = other_2217;
    return Motor(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g1_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w, _e38.g0_.w, _e41.g0_.w, _e44.g1_.x) * _e48.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))), ((((vec3<f32>(_e62.g0_.y) * vec3<f32>(_e66.g0_.z, _e69.g0_.z, _e72.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e83.g0_.z) * vec3<f32>(_e87.g0_.y, _e90.g0_.x, _e93.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e105.g0_.x) * vec3<f32>(_e109.g0_.x, _e112.g0_.z, _e115.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flector_plane_right_contraction(self_2540: Flector, other_2218: Plane) -> Scalar {
    var self_2541: Flector;
    var other_2219: Plane;

    self_2541 = self_2540;
    other_2219 = other_2218;
    let _e5: Flector = self_2541;
    let _e8: Plane = other_2219;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_left_anti_contraction(self_2542: Flector, other_2220: Plane) -> AntiScalar {
    var self_2543: Flector;
    var other_2221: Plane;

    self_2543 = self_2542;
    other_2221 = other_2220;
    let _e4: Flector = self_2543;
    let _e7: Plane = other_2221;
    let _e11: Flector = self_2543;
    let _e14: Plane = other_2221;
    let _e19: Flector = self_2543;
    let _e22: Plane = other_2221;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_plane_right_anti_contraction(self_2544: Flector, other_2222: Plane) -> Motor {
    var self_2545: Flector;
    var other_2223: Plane;

    self_2545 = self_2544;
    other_2223 = other_2222;
    let _e4: Flector = self_2545;
    let _e8: Plane = other_2223;
    let _e19: Flector = self_2545;
    let _e23: Plane = other_2223;
    let _e35: Flector = self_2545;
    let _e38: Flector = self_2545;
    let _e41: Flector = self_2545;
    let _e44: Flector = self_2545;
    let _e48: Plane = other_2223;
    let _e62: Flector = self_2545;
    let _e66: Plane = other_2223;
    let _e69: Plane = other_2223;
    let _e72: Plane = other_2223;
    let _e83: Flector = self_2545;
    let _e87: Plane = other_2223;
    let _e90: Plane = other_2223;
    let _e93: Plane = other_2223;
    let _e105: Flector = self_2545;
    let _e109: Plane = other_2223;
    let _e112: Plane = other_2223;
    let _e115: Plane = other_2223;
    return Motor(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e19.g1_.z) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w, _e38.g0_.w, _e41.g0_.w, _e44.g1_.x) * _e48.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))), ((((vec3<f32>(_e62.g0_.y) * vec3<f32>(_e66.g0_.z, _e69.g0_.z, _e72.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e83.g0_.z) * vec3<f32>(_e87.g0_.y, _e90.g0_.x, _e93.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e105.g0_.x) * vec3<f32>(_e109.g0_.x, _e112.g0_.z, _e115.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flector_plane_scalar_product(self_2546: Flector, other_2224: Plane) -> Scalar {
    var self_2547: Flector;
    var other_2225: Plane;

    self_2547 = self_2546;
    other_2225 = other_2224;
    let _e5: Flector = self_2547;
    let _e8: Plane = other_2225;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_dot(self_2548: Flector, other_2226: Plane) -> Scalar {
    var self_2549: Flector;
    var other_2227: Plane;

    self_2549 = self_2548;
    other_2227 = other_2226;
    let _e5: Flector = self_2549;
    let _e8: Plane = other_2227;
    return Scalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn flector_plane_anti_scalar_product(self_2550: Flector, other_2228: Plane) -> AntiScalar {
    var self_2551: Flector;
    var other_2229: Plane;

    self_2551 = self_2550;
    other_2229 = other_2228;
    let _e4: Flector = self_2551;
    let _e7: Plane = other_2229;
    let _e11: Flector = self_2551;
    let _e14: Plane = other_2229;
    let _e19: Flector = self_2551;
    let _e22: Plane = other_2229;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_plane_anti_dot(self_2552: Flector, other_2230: Plane) -> AntiScalar {
    var self_2553: Flector;
    var other_2231: Plane;

    self_2553 = self_2552;
    other_2231 = other_2230;
    let _e4: Flector = self_2553;
    let _e7: Plane = other_2231;
    let _e11: Flector = self_2553;
    let _e14: Plane = other_2231;
    let _e19: Flector = self_2553;
    let _e22: Plane = other_2231;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn flector_motor_geometric_product(self_2554: Flector, other_2232: Motor) -> Flector {
    var self_2555: Flector;
    var other_2233: Motor;

    self_2555 = self_2554;
    other_2233 = other_2232;
    let _e4: Flector = self_2555;
    let _e8: Motor = other_2233;
    let _e11: Motor = other_2233;
    let _e14: Motor = other_2233;
    let _e17: Motor = other_2233;
    let _e30: Flector = self_2555;
    let _e34: Motor = other_2233;
    let _e37: Motor = other_2233;
    let _e40: Motor = other_2233;
    let _e43: Motor = other_2233;
    let _e57: Flector = self_2555;
    let _e61: Motor = other_2233;
    let _e74: Flector = self_2555;
    let _e78: Motor = other_2233;
    let _e91: Flector = self_2555;
    let _e95: Motor = other_2233;
    let _e108: Flector = self_2555;
    let _e112: Motor = other_2233;
    let _e115: Motor = other_2233;
    let _e118: Motor = other_2233;
    let _e121: Motor = other_2233;
    let _e127: Flector = self_2555;
    let _e131: Motor = other_2233;
    let _e134: Motor = other_2233;
    let _e137: Motor = other_2233;
    let _e140: Motor = other_2233;
    let _e154: Flector = self_2555;
    let _e158: Motor = other_2233;
    let _e161: Motor = other_2233;
    let _e164: Motor = other_2233;
    let _e167: Motor = other_2233;
    let _e180: Flector = self_2555;
    let _e184: Motor = other_2233;
    let _e187: Motor = other_2233;
    let _e190: Motor = other_2233;
    let _e193: Motor = other_2233;
    let _e207: Flector = self_2555;
    let _e211: Motor = other_2233;
    let _e214: Motor = other_2233;
    let _e217: Motor = other_2233;
    let _e220: Motor = other_2233;
    let _e234: Flector = self_2555;
    let _e238: Motor = other_2233;
    let _e241: Motor = other_2233;
    let _e244: Motor = other_2233;
    let _e247: Motor = other_2233;
    let _e260: Flector = self_2555;
    let _e264: Motor = other_2233;
    let _e267: Motor = other_2233;
    let _e270: Motor = other_2233;
    let _e273: Motor = other_2233;
    let _e286: Flector = self_2555;
    let _e290: Motor = other_2233;
    let _e293: Motor = other_2233;
    let _e296: Motor = other_2233;
    let _e299: Motor = other_2233;
    let _e312: Flector = self_2555;
    let _e316: Motor = other_2233;
    let _e327: Flector = self_2555;
    let _e330: Motor = other_2233;
    let _e333: Motor = other_2233;
    let _e336: Motor = other_2233;
    let _e339: Motor = other_2233;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.x, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.x, _e40.g1_.y, _e43.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * vec4<f32>(_e78.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.z) * vec4<f32>(_e95.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e108.g1_.w) * vec4<f32>(_e112.g1_.x, _e115.g1_.y, _e118.g1_.z, _e121.g0_.w))) + ((vec4<f32>(_e127.g0_.x) * vec4<f32>(_e131.g1_.x, _e134.g1_.z, _e137.g1_.y, _e140.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e154.g0_.x) * vec4<f32>(_e158.g0_.w, _e161.g0_.z, _e164.g0_.y, _e167.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e180.g0_.y) * vec4<f32>(_e184.g0_.z, _e187.g0_.w, _e190.g0_.x, _e193.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e207.g0_.z) * vec4<f32>(_e211.g0_.y, _e214.g0_.x, _e217.g0_.w, _e220.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e234.g1_.x) * vec4<f32>(_e238.g1_.z, _e241.g1_.z, _e244.g1_.y, _e247.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e260.g1_.y) * vec4<f32>(_e264.g1_.z, _e267.g1_.z, _e270.g1_.x, _e273.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e286.g1_.z) * vec4<f32>(_e290.g1_.y, _e293.g1_.x, _e296.g1_.y, _e299.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e312.g1_.w) * _e316.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e327.g0_.wwwx * vec4<f32>(_e330.g1_.x, _e333.g1_.y, _e336.g1_.z, _e339.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn flector_motor_geometric_anti_product(self_2556: Flector, other_2234: Motor) -> Flector {
    var self_2557: Flector;
    var other_2235: Motor;

    self_2557 = self_2556;
    other_2235 = other_2234;
    let _e4: Flector = self_2557;
    let _e8: Motor = other_2235;
    let _e19: Flector = self_2557;
    let _e23: Motor = other_2235;
    let _e35: Flector = self_2557;
    let _e39: Motor = other_2235;
    let _e42: Motor = other_2235;
    let _e45: Motor = other_2235;
    let _e48: Motor = other_2235;
    let _e63: Flector = self_2557;
    let _e67: Motor = other_2235;
    let _e70: Motor = other_2235;
    let _e73: Motor = other_2235;
    let _e76: Motor = other_2235;
    let _e90: Flector = self_2557;
    let _e94: Motor = other_2235;
    let _e97: Motor = other_2235;
    let _e100: Motor = other_2235;
    let _e103: Motor = other_2235;
    let _e117: Flector = self_2557;
    let _e121: Motor = other_2235;
    let _e124: Motor = other_2235;
    let _e127: Motor = other_2235;
    let _e130: Motor = other_2235;
    let _e144: Flector = self_2557;
    let _e148: Motor = other_2235;
    let _e159: Flector = self_2557;
    let _e163: Motor = other_2235;
    let _e175: Flector = self_2557;
    let _e179: Motor = other_2235;
    let _e191: Flector = self_2557;
    let _e195: Motor = other_2235;
    let _e208: Flector = self_2557;
    let _e212: Motor = other_2235;
    let _e215: Motor = other_2235;
    let _e218: Motor = other_2235;
    let _e221: Motor = other_2235;
    let _e234: Flector = self_2557;
    let _e238: Motor = other_2235;
    let _e241: Motor = other_2235;
    let _e244: Motor = other_2235;
    let _e247: Motor = other_2235;
    let _e260: Flector = self_2557;
    let _e264: Motor = other_2235;
    let _e267: Motor = other_2235;
    let _e270: Motor = other_2235;
    let _e273: Motor = other_2235;
    let _e286: Flector = self_2557;
    let _e290: Motor = other_2235;
    let _e302: Flector = self_2557;
    let _e305: Motor = other_2235;
    return Flector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * vec4<f32>(_e39.g1_.x, _e42.g1_.y, _e45.g1_.z, _e48.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e63.g1_.x) * vec4<f32>(_e67.g1_.z, _e70.g1_.z, _e73.g1_.y, _e76.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e90.g1_.y) * vec4<f32>(_e94.g1_.z, _e97.g1_.z, _e100.g1_.x, _e103.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e117.g1_.z) * vec4<f32>(_e121.g1_.y, _e124.g1_.x, _e127.g1_.y, _e130.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e144.g1_.w) * _e148.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e159.g0_.x) * _e163.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((((((vec4<f32>(_e175.g0_.y) * vec4<f32>(_e179.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e191.g0_.z) * vec4<f32>(_e195.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e208.g1_.x) * vec4<f32>(_e212.g0_.w, _e215.g0_.z, _e218.g0_.y, _e221.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e234.g1_.y) * vec4<f32>(_e238.g0_.z, _e241.g0_.w, _e244.g0_.x, _e247.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e260.g1_.z) * vec4<f32>(_e264.g0_.y, _e267.g0_.x, _e270.g0_.w, _e273.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e286.g1_.w) * vec4<f32>(_e290.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e302.g0_.wwwx * _e305.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_motor_regressive_product(self_2558: Flector, other_2236: Motor) -> Flector {
    var self_2559: Flector;
    var other_2237: Motor;

    self_2559 = self_2558;
    other_2237 = other_2236;
    let _e4: Flector = self_2559;
    let _e8: Motor = other_2237;
    let _e11: Motor = other_2237;
    let _e14: Motor = other_2237;
    let _e17: Motor = other_2237;
    let _e30: Flector = self_2559;
    let _e34: Motor = other_2237;
    let _e37: Motor = other_2237;
    let _e40: Motor = other_2237;
    let _e43: Motor = other_2237;
    let _e57: Flector = self_2559;
    let _e61: Motor = other_2237;
    let _e64: Motor = other_2237;
    let _e67: Motor = other_2237;
    let _e70: Motor = other_2237;
    let _e84: Flector = self_2559;
    let _e88: Motor = other_2237;
    let _e99: Flector = self_2559;
    let _e101: Motor = other_2237;
    let _e107: Flector = self_2559;
    let _e109: Motor = other_2237;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g1_.y) * vec4<f32>(_e34.g1_.z, _e37.g1_.z, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g1_.y, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.w) * _e88.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g0_.w))), (_e107.g1_ * vec4<f32>(_e109.g0_.w)));
}

fn flector_motor_anti_wedge(self_2560: Flector, other_2238: Motor) -> Flector {
    var self_2561: Flector;
    var other_2239: Motor;

    self_2561 = self_2560;
    other_2239 = other_2238;
    let _e4: Flector = self_2561;
    let _e8: Motor = other_2239;
    let _e11: Motor = other_2239;
    let _e14: Motor = other_2239;
    let _e17: Motor = other_2239;
    let _e30: Flector = self_2561;
    let _e34: Motor = other_2239;
    let _e37: Motor = other_2239;
    let _e40: Motor = other_2239;
    let _e43: Motor = other_2239;
    let _e57: Flector = self_2561;
    let _e61: Motor = other_2239;
    let _e64: Motor = other_2239;
    let _e67: Motor = other_2239;
    let _e70: Motor = other_2239;
    let _e84: Flector = self_2561;
    let _e88: Motor = other_2239;
    let _e99: Flector = self_2561;
    let _e101: Motor = other_2239;
    let _e107: Flector = self_2561;
    let _e109: Motor = other_2239;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g1_.y) * vec4<f32>(_e34.g1_.z, _e37.g1_.z, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g1_.y, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.w) * _e88.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g0_.w))), (_e107.g1_ * vec4<f32>(_e109.g0_.w)));
}

fn flector_motor_meet(self_2562: Flector, other_2240: Motor) -> Flector {
    var self_2563: Flector;
    var other_2241: Motor;

    self_2563 = self_2562;
    other_2241 = other_2240;
    let _e4: Flector = self_2563;
    let _e8: Motor = other_2241;
    let _e11: Motor = other_2241;
    let _e14: Motor = other_2241;
    let _e17: Motor = other_2241;
    let _e30: Flector = self_2563;
    let _e34: Motor = other_2241;
    let _e37: Motor = other_2241;
    let _e40: Motor = other_2241;
    let _e43: Motor = other_2241;
    let _e57: Flector = self_2563;
    let _e61: Motor = other_2241;
    let _e64: Motor = other_2241;
    let _e67: Motor = other_2241;
    let _e70: Motor = other_2241;
    let _e84: Flector = self_2563;
    let _e88: Motor = other_2241;
    let _e99: Flector = self_2563;
    let _e101: Motor = other_2241;
    let _e107: Flector = self_2563;
    let _e109: Motor = other_2241;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g1_.y, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e30.g1_.y) * vec4<f32>(_e34.g1_.z, _e37.g1_.z, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.z) * vec4<f32>(_e61.g1_.y, _e64.g1_.x, _e67.g1_.y, _e70.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.w) * _e88.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g0_.w))), (_e107.g1_ * vec4<f32>(_e109.g0_.w)));
}

fn flector_motor_outer_product(self_2564: Flector, other_2242: Motor) -> Plane {
    var self_2565: Flector;
    var other_2243: Motor;

    self_2565 = self_2564;
    other_2243 = other_2242;
    let _e4: Flector = self_2565;
    let _e8: Motor = other_2243;
    let _e11: Motor = other_2243;
    let _e14: Motor = other_2243;
    let _e17: Motor = other_2243;
    let _e30: Flector = self_2565;
    let _e34: Motor = other_2243;
    let _e37: Motor = other_2243;
    let _e40: Motor = other_2243;
    let _e43: Motor = other_2243;
    let _e57: Flector = self_2565;
    let _e61: Motor = other_2243;
    let _e64: Motor = other_2243;
    let _e67: Motor = other_2243;
    let _e70: Motor = other_2243;
    let _e82: Flector = self_2565;
    let _e86: Motor = other_2243;
    let _e89: Motor = other_2243;
    let _e92: Motor = other_2243;
    let _e95: Motor = other_2243;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_motor_wedge(self_2566: Flector, other_2244: Motor) -> Plane {
    var self_2567: Flector;
    var other_2245: Motor;

    self_2567 = self_2566;
    other_2245 = other_2244;
    let _e4: Flector = self_2567;
    let _e8: Motor = other_2245;
    let _e11: Motor = other_2245;
    let _e14: Motor = other_2245;
    let _e17: Motor = other_2245;
    let _e30: Flector = self_2567;
    let _e34: Motor = other_2245;
    let _e37: Motor = other_2245;
    let _e40: Motor = other_2245;
    let _e43: Motor = other_2245;
    let _e57: Flector = self_2567;
    let _e61: Motor = other_2245;
    let _e64: Motor = other_2245;
    let _e67: Motor = other_2245;
    let _e70: Motor = other_2245;
    let _e82: Flector = self_2567;
    let _e86: Motor = other_2245;
    let _e89: Motor = other_2245;
    let _e92: Motor = other_2245;
    let _e95: Motor = other_2245;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_motor_join(self_2568: Flector, other_2246: Motor) -> Plane {
    var self_2569: Flector;
    var other_2247: Motor;

    self_2569 = self_2568;
    other_2247 = other_2246;
    let _e4: Flector = self_2569;
    let _e8: Motor = other_2247;
    let _e11: Motor = other_2247;
    let _e14: Motor = other_2247;
    let _e17: Motor = other_2247;
    let _e30: Flector = self_2569;
    let _e34: Motor = other_2247;
    let _e37: Motor = other_2247;
    let _e40: Motor = other_2247;
    let _e43: Motor = other_2247;
    let _e57: Flector = self_2569;
    let _e61: Motor = other_2247;
    let _e64: Motor = other_2247;
    let _e67: Motor = other_2247;
    let _e70: Motor = other_2247;
    let _e82: Flector = self_2569;
    let _e86: Motor = other_2247;
    let _e89: Motor = other_2247;
    let _e92: Motor = other_2247;
    let _e95: Motor = other_2247;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.x, _e40.g0_.y, _e43.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.x, _e64.g1_.y, _e67.g1_.z, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e82.g0_.x) * vec4<f32>(_e86.g0_.x, _e89.g0_.z, _e92.g0_.y, _e95.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_motor_inner_anti_product(self_2570: Flector, other_2248: Motor) -> Flector {
    var self_2571: Flector;
    var other_2249: Motor;

    self_2571 = self_2570;
    other_2249 = other_2248;
    let _e4: Flector = self_2571;
    let _e6: Motor = other_2249;
    let _e11: Flector = self_2571;
    let _e15: Motor = other_2249;
    let _e27: Flector = self_2571;
    let _e31: Motor = other_2249;
    let _e44: Flector = self_2571;
    let _e48: Motor = other_2249;
    let _e51: Motor = other_2249;
    let _e54: Motor = other_2249;
    let _e57: Motor = other_2249;
    let _e70: Flector = self_2571;
    let _e74: Motor = other_2249;
    let _e77: Motor = other_2249;
    let _e80: Motor = other_2249;
    let _e83: Motor = other_2249;
    let _e96: Flector = self_2571;
    let _e100: Motor = other_2249;
    let _e103: Motor = other_2249;
    let _e106: Motor = other_2249;
    let _e109: Motor = other_2249;
    let _e122: Flector = self_2571;
    let _e126: Motor = other_2249;
    let _e138: Flector = self_2571;
    let _e141: Motor = other_2249;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w, _e51.g0_.z, _e54.g0_.y, _e57.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e70.g1_.y) * vec4<f32>(_e74.g0_.z, _e77.g0_.w, _e80.g0_.x, _e83.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e96.g1_.z) * vec4<f32>(_e100.g0_.y, _e103.g0_.x, _e106.g0_.w, _e109.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e122.g1_.w) * vec4<f32>(_e126.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e138.g0_.wwwx * _e141.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_motor_right_contraction(self_2572: Flector, other_2250: Motor) -> Point {
    var self_2573: Flector;
    var other_2251: Motor;

    self_2573 = self_2572;
    other_2251 = other_2250;
    let _e4: Flector = self_2573;
    let _e8: Motor = other_2251;
    let _e20: Flector = self_2573;
    let _e24: Motor = other_2251;
    let _e37: Flector = self_2573;
    let _e40: Motor = other_2251;
    let _e43: Motor = other_2251;
    let _e46: Motor = other_2251;
    let _e49: Motor = other_2251;
    return Point(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g1_.wwwx * vec4<f32>(_e40.g1_.x, _e43.g1_.y, _e46.g1_.z, _e49.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_motor_left_anti_contraction(self_2574: Flector, other_2252: Motor) -> Plane {
    var self_2575: Flector;
    var other_2253: Motor;

    self_2575 = self_2574;
    other_2253 = other_2252;
    let _e4: Flector = self_2575;
    let _e8: Motor = other_2253;
    let _e11: Motor = other_2253;
    let _e14: Motor = other_2253;
    let _e17: Motor = other_2253;
    let _e29: Flector = self_2575;
    let _e33: Motor = other_2253;
    let _e36: Motor = other_2253;
    let _e39: Motor = other_2253;
    let _e42: Motor = other_2253;
    let _e55: Flector = self_2575;
    let _e59: Motor = other_2253;
    let _e62: Motor = other_2253;
    let _e65: Motor = other_2253;
    let _e68: Motor = other_2253;
    return Plane(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.x, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.x, _e39.g0_.y, _e42.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.z, _e65.g0_.y, _e68.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))));
}

fn flector_motor_right_anti_contraction(self_2576: Flector, other_2254: Motor) -> Flector {
    var self_2577: Flector;
    var other_2255: Motor;

    self_2577 = self_2576;
    other_2255 = other_2254;
    let _e4: Flector = self_2577;
    let _e6: Motor = other_2255;
    let _e11: Flector = self_2577;
    let _e15: Motor = other_2255;
    let _e27: Flector = self_2577;
    let _e31: Motor = other_2255;
    let _e44: Flector = self_2577;
    let _e48: Motor = other_2255;
    let _e60: Flector = self_2577;
    let _e64: Motor = other_2255;
    let _e76: Flector = self_2577;
    let _e80: Motor = other_2255;
    let _e92: Flector = self_2577;
    let _e96: Motor = other_2255;
    let _e108: Flector = self_2577;
    let _e111: Motor = other_2255;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.z) * vec4<f32>(_e80.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_geometric_anti_product(self_2578: Flector, other_2256: Rotor) -> Flector {
    var self_2579: Flector;
    var other_2257: Rotor;

    self_2579 = self_2578;
    other_2257 = other_2256;
    let _e4: Flector = self_2579;
    let _e8: Rotor = other_2257;
    let _e19: Flector = self_2579;
    let _e23: Rotor = other_2257;
    let _e35: Flector = self_2579;
    let _e39: Rotor = other_2257;
    let _e52: Flector = self_2579;
    let _e56: Rotor = other_2257;
    let _e69: Flector = self_2579;
    let _e73: Rotor = other_2257;
    let _e86: Flector = self_2579;
    let _e90: Rotor = other_2257;
    let _e101: Flector = self_2579;
    let _e104: Rotor = other_2257;
    let _e116: Flector = self_2579;
    let _e120: Rotor = other_2257;
    let _e132: Flector = self_2579;
    let _e136: Rotor = other_2257;
    let _e149: Flector = self_2579;
    let _e153: Rotor = other_2257;
    let _e165: Flector = self_2579;
    let _e169: Rotor = other_2257;
    let _e181: Flector = self_2579;
    let _e185: Rotor = other_2257;
    let _e197: Flector = self_2579;
    let _e201: Rotor = other_2257;
    let _e213: Flector = self_2579;
    let _e216: Rotor = other_2257;
    return Flector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.x) * vec4<f32>(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.y) * vec4<f32>(_e56.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.z) * vec4<f32>(_e73.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e86.g1_.w) * _e90.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e101.g0_.xxxw * _e104.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e116.g0_.y) * vec4<f32>(_e120.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e132.g0_.z) * vec4<f32>(_e136.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e149.g1_.x) * _e153.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e165.g1_.y) * _e169.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e181.g1_.z) * _e185.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e197.g1_.w) * vec4<f32>(_e201.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e213.g0_.wwwx * _e216.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_regressive_product(self_2580: Flector, other_2258: Rotor) -> Flector {
    var self_2581: Flector;
    var other_2259: Rotor;

    self_2581 = self_2580;
    other_2259 = other_2258;
    let _e4: Flector = self_2581;
    let _e8: Rotor = other_2259;
    let _e20: Flector = self_2581;
    let _e24: Rotor = other_2259;
    let _e37: Flector = self_2581;
    let _e41: Rotor = other_2259;
    let _e54: Flector = self_2581;
    let _e58: Rotor = other_2259;
    let _e69: Flector = self_2581;
    let _e71: Rotor = other_2259;
    let _e77: Flector = self_2581;
    let _e79: Rotor = other_2259;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.w) * _e58.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e69.g0_ * vec4<f32>(_e71.g0_.w))), (_e77.g1_ * vec4<f32>(_e79.g0_.w)));
}

fn flector_rotor_anti_wedge(self_2582: Flector, other_2260: Rotor) -> Flector {
    var self_2583: Flector;
    var other_2261: Rotor;

    self_2583 = self_2582;
    other_2261 = other_2260;
    let _e4: Flector = self_2583;
    let _e8: Rotor = other_2261;
    let _e20: Flector = self_2583;
    let _e24: Rotor = other_2261;
    let _e37: Flector = self_2583;
    let _e41: Rotor = other_2261;
    let _e54: Flector = self_2583;
    let _e58: Rotor = other_2261;
    let _e69: Flector = self_2583;
    let _e71: Rotor = other_2261;
    let _e77: Flector = self_2583;
    let _e79: Rotor = other_2261;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.w) * _e58.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e69.g0_ * vec4<f32>(_e71.g0_.w))), (_e77.g1_ * vec4<f32>(_e79.g0_.w)));
}

fn flector_rotor_meet(self_2584: Flector, other_2262: Rotor) -> Flector {
    var self_2585: Flector;
    var other_2263: Rotor;

    self_2585 = self_2584;
    other_2263 = other_2262;
    let _e4: Flector = self_2585;
    let _e8: Rotor = other_2263;
    let _e20: Flector = self_2585;
    let _e24: Rotor = other_2263;
    let _e37: Flector = self_2585;
    let _e41: Rotor = other_2263;
    let _e54: Flector = self_2585;
    let _e58: Rotor = other_2263;
    let _e69: Flector = self_2585;
    let _e71: Rotor = other_2263;
    let _e77: Flector = self_2585;
    let _e79: Rotor = other_2263;
    return Flector(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.y) * vec4<f32>(_e24.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.w) * _e58.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e69.g0_ * vec4<f32>(_e71.g0_.w))), (_e77.g1_ * vec4<f32>(_e79.g0_.w)));
}

fn flector_rotor_inner_anti_product(self_2586: Flector, other_2264: Rotor) -> Flector {
    var self_2587: Flector;
    var other_2265: Rotor;

    self_2587 = self_2586;
    other_2265 = other_2264;
    let _e4: Flector = self_2587;
    let _e6: Rotor = other_2265;
    let _e11: Flector = self_2587;
    let _e15: Rotor = other_2265;
    let _e27: Flector = self_2587;
    let _e31: Rotor = other_2265;
    let _e44: Flector = self_2587;
    let _e48: Rotor = other_2265;
    let _e60: Flector = self_2587;
    let _e64: Rotor = other_2265;
    let _e76: Flector = self_2587;
    let _e80: Rotor = other_2265;
    let _e92: Flector = self_2587;
    let _e96: Rotor = other_2265;
    let _e108: Flector = self_2587;
    let _e111: Rotor = other_2265;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * _e48.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * _e64.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e76.g1_.z) * _e80.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_rotor_right_anti_contraction(self_2588: Flector, other_2266: Rotor) -> Flector {
    var self_2589: Flector;
    var other_2267: Rotor;

    self_2589 = self_2588;
    other_2267 = other_2266;
    let _e4: Flector = self_2589;
    let _e6: Rotor = other_2267;
    let _e11: Flector = self_2589;
    let _e15: Rotor = other_2267;
    let _e27: Flector = self_2589;
    let _e31: Rotor = other_2267;
    let _e44: Flector = self_2589;
    let _e48: Rotor = other_2267;
    let _e60: Flector = self_2589;
    let _e64: Rotor = other_2267;
    let _e76: Flector = self_2589;
    let _e80: Rotor = other_2267;
    let _e92: Flector = self_2589;
    let _e96: Rotor = other_2267;
    let _e108: Flector = self_2589;
    let _e111: Rotor = other_2267;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e27.g0_.z) * vec4<f32>(_e31.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e44.g1_.x) * vec4<f32>(_e48.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e60.g1_.y) * vec4<f32>(_e64.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e76.g1_.z) * vec4<f32>(_e80.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e92.g1_.w) * vec4<f32>(_e96.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e108.g0_.wwwx * _e111.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_geometric_product(self_2590: Flector, other_2268: Translator) -> Flector {
    var self_2591: Flector;
    var other_2269: Translator;

    self_2591 = self_2590;
    other_2269 = other_2268;
    let _e4: Flector = self_2591;
    let _e8: Translator = other_2269;
    let _e19: Flector = self_2591;
    let _e23: Translator = other_2269;
    let _e35: Flector = self_2591;
    let _e39: Translator = other_2269;
    let _e52: Flector = self_2591;
    let _e56: Translator = other_2269;
    let _e69: Flector = self_2591;
    let _e73: Translator = other_2269;
    let _e77: Flector = self_2591;
    let _e80: Flector = self_2591;
    let _e83: Flector = self_2591;
    let _e86: Flector = self_2591;
    let _e90: Translator = other_2269;
    let _e103: Flector = self_2591;
    let _e107: Translator = other_2269;
    let _e118: Flector = self_2591;
    let _e122: Translator = other_2269;
    let _e134: Flector = self_2591;
    let _e138: Translator = other_2269;
    let _e149: Flector = self_2591;
    let _e153: Translator = other_2269;
    let _e165: Flector = self_2591;
    let _e169: Translator = other_2269;
    let _e181: Flector = self_2591;
    let _e184: Flector = self_2591;
    let _e187: Flector = self_2591;
    let _e190: Flector = self_2591;
    let _e194: Translator = other_2269;
    return Flector((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.y) * vec4<f32>(_e39.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e69.g1_.w) * _e73.g0_)) + ((vec4<f32>(_e77.g0_.x, _e80.g0_.x, _e83.g0_.x, _e86.g1_.x) * _e90.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((vec4<f32>(_e103.g0_.y) * _e107.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e118.g0_.z) * _e122.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e134.g0_.w) * _e138.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e149.g1_.y) * _e153.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e165.g1_.z) * _e169.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e181.g0_.x, _e184.g1_.x, _e187.g1_.x, _e190.g0_.x) * _e194.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn flector_translator_geometric_anti_product(self_2592: Flector, other_2270: Translator) -> Flector {
    var self_2593: Flector;
    var other_2271: Translator;

    self_2593 = self_2592;
    other_2271 = other_2270;
    let _e4: Flector = self_2593;
    let _e8: Translator = other_2271;
    let _e20: Flector = self_2593;
    let _e24: Translator = other_2271;
    let _e36: Flector = self_2593;
    let _e40: Translator = other_2271;
    let _e52: Flector = self_2593;
    let _e56: Translator = other_2271;
    let _e68: Flector = self_2593;
    let _e71: Translator = other_2271;
    let _e82: Flector = self_2593;
    let _e86: Translator = other_2271;
    let _e96: Flector = self_2593;
    let _e100: Translator = other_2271;
    let _e111: Flector = self_2593;
    let _e115: Translator = other_2271;
    let _e127: Flector = self_2593;
    let _e131: Translator = other_2271;
    return Flector(((((((vec4<f32>(_e4.g0_.w) * _e8.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e20.g1_.x) * _e24.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e36.g1_.y) * _e40.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e52.g1_.z) * _e56.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((_e68.g0_.xyzx * _e71.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (((((vec4<f32>(_e82.g1_.y) * _e86.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e96.g1_.z) * _e100.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e111.g1_.w) * vec4<f32>(_e115.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e127.g1_.x) * _e131.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_regressive_product(self_2594: Flector, other_2272: Translator) -> Flector {
    var self_2595: Flector;
    var other_2273: Translator;

    self_2595 = self_2594;
    other_2273 = other_2272;
    let _e4: Flector = self_2595;
    let _e8: Translator = other_2273;
    let _e19: Flector = self_2595;
    let _e23: Translator = other_2273;
    let _e35: Flector = self_2595;
    let _e39: Translator = other_2273;
    let _e51: Flector = self_2595;
    let _e53: Translator = other_2273;
    let _e59: Flector = self_2595;
    let _e61: Translator = other_2273;
    return Flector((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.w))), (_e59.g1_ * vec4<f32>(_e61.g0_.w)));
}

fn flector_translator_anti_wedge(self_2596: Flector, other_2274: Translator) -> Flector {
    var self_2597: Flector;
    var other_2275: Translator;

    self_2597 = self_2596;
    other_2275 = other_2274;
    let _e4: Flector = self_2597;
    let _e8: Translator = other_2275;
    let _e19: Flector = self_2597;
    let _e23: Translator = other_2275;
    let _e35: Flector = self_2597;
    let _e39: Translator = other_2275;
    let _e51: Flector = self_2597;
    let _e53: Translator = other_2275;
    let _e59: Flector = self_2597;
    let _e61: Translator = other_2275;
    return Flector((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.w))), (_e59.g1_ * vec4<f32>(_e61.g0_.w)));
}

fn flector_translator_meet(self_2598: Flector, other_2276: Translator) -> Flector {
    var self_2599: Flector;
    var other_2277: Translator;

    self_2599 = self_2598;
    other_2277 = other_2276;
    let _e4: Flector = self_2599;
    let _e8: Translator = other_2277;
    let _e19: Flector = self_2599;
    let _e23: Translator = other_2277;
    let _e35: Flector = self_2599;
    let _e39: Translator = other_2277;
    let _e51: Flector = self_2599;
    let _e53: Translator = other_2277;
    let _e59: Flector = self_2599;
    let _e61: Translator = other_2277;
    return Flector((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.w))), (_e59.g1_ * vec4<f32>(_e61.g0_.w)));
}

fn flector_translator_outer_product(self_2600: Flector, other_2278: Translator) -> Plane {
    var self_2601: Flector;
    var other_2279: Translator;

    self_2601 = self_2600;
    other_2279 = other_2278;
    let _e4: Flector = self_2601;
    let _e8: Translator = other_2279;
    let _e20: Flector = self_2601;
    let _e24: Translator = other_2279;
    let _e37: Flector = self_2601;
    let _e40: Translator = other_2279;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_wedge(self_2602: Flector, other_2280: Translator) -> Plane {
    var self_2603: Flector;
    var other_2281: Translator;

    self_2603 = self_2602;
    other_2281 = other_2280;
    let _e4: Flector = self_2603;
    let _e8: Translator = other_2281;
    let _e20: Flector = self_2603;
    let _e24: Translator = other_2281;
    let _e37: Flector = self_2603;
    let _e40: Translator = other_2281;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_join(self_2604: Flector, other_2282: Translator) -> Plane {
    var self_2605: Flector;
    var other_2283: Translator;

    self_2605 = self_2604;
    other_2283 = other_2282;
    let _e4: Flector = self_2605;
    let _e8: Translator = other_2283;
    let _e20: Flector = self_2605;
    let _e24: Translator = other_2283;
    let _e37: Flector = self_2605;
    let _e40: Translator = other_2283;
    return Plane(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g0_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_inner_anti_product(self_2606: Flector, other_2284: Translator) -> Flector {
    var self_2607: Flector;
    var other_2285: Translator;

    self_2607 = self_2606;
    other_2285 = other_2284;
    let _e4: Flector = self_2607;
    let _e6: Translator = other_2285;
    let _e11: Flector = self_2607;
    let _e15: Translator = other_2285;
    let _e25: Flector = self_2607;
    let _e29: Translator = other_2285;
    let _e40: Flector = self_2607;
    let _e44: Translator = other_2285;
    let _e56: Flector = self_2607;
    let _e60: Translator = other_2285;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (((((vec4<f32>(_e11.g1_.y) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e25.g1_.z) * _e29.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e40.g1_.w) * vec4<f32>(_e44.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e56.g1_.x) * _e60.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn flector_translator_right_contraction(self_2608: Flector, other_2286: Translator) -> Point {
    var self_2609: Flector;
    var other_2287: Translator;

    self_2609 = self_2608;
    other_2287 = other_2286;
    let _e4: Flector = self_2609;
    let _e8: Translator = other_2287;
    let _e20: Flector = self_2609;
    let _e24: Translator = other_2287;
    let _e37: Flector = self_2609;
    let _e40: Translator = other_2287;
    return Point(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e37.g1_.wwwx * _e40.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn flector_translator_right_anti_contraction(self_2610: Flector, other_2288: Translator) -> Flector {
    var self_2611: Flector;
    var other_2289: Translator;

    self_2611 = self_2610;
    other_2289 = other_2288;
    let _e4: Flector = self_2611;
    let _e6: Translator = other_2289;
    let _e11: Flector = self_2611;
    let _e13: Translator = other_2289;
    return Flector((_e4.g0_ * vec4<f32>(_e6.g0_.w)), (_e11.g1_ * vec4<f32>(_e13.g0_.w)));
}

fn flector_flector_add(self_2612: Flector, other_2290: Flector) -> Flector {
    var self_2613: Flector;
    var other_2291: Flector;

    self_2613 = self_2612;
    other_2291 = other_2290;
    let _e4: Flector = self_2613;
    let _e6: Flector = other_2291;
    let _e9: Flector = self_2613;
    let _e11: Flector = other_2291;
    return Flector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn flector_flector_sub(self_2614: Flector, other_2292: Flector) -> Flector {
    var self_2615: Flector;
    var other_2293: Flector;

    self_2615 = self_2614;
    other_2293 = other_2292;
    let _e4: Flector = self_2615;
    let _e6: Flector = other_2293;
    let _e9: Flector = self_2615;
    let _e11: Flector = other_2293;
    return Flector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn flector_flector_mul(self_2616: Flector, other_2294: Flector) -> Flector {
    var self_2617: Flector;
    var other_2295: Flector;

    self_2617 = self_2616;
    other_2295 = other_2294;
    let _e4: Flector = self_2617;
    let _e6: Flector = other_2295;
    let _e9: Flector = self_2617;
    let _e11: Flector = other_2295;
    return Flector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn flector_flector_div(self_2618: Flector, other_2296: Flector) -> Flector {
    var self_2619: Flector;
    var other_2297: Flector;

    self_2619 = self_2618;
    other_2297 = other_2296;
    let _e4: Flector = self_2619;
    let _e7: Flector = self_2619;
    let _e10: Flector = self_2619;
    let _e13: Flector = self_2619;
    let _e23: Flector = other_2297;
    let _e26: Flector = other_2297;
    let _e29: Flector = other_2297;
    let _e32: Flector = other_2297;
    let _e43: Flector = self_2619;
    let _e46: Flector = self_2619;
    let _e49: Flector = self_2619;
    let _e52: Flector = self_2619;
    let _e62: Flector = other_2297;
    let _e65: Flector = other_2297;
    let _e68: Flector = other_2297;
    let _e71: Flector = other_2297;
    return Flector((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn flector_flector_outer_product(self_2620: Flector, other_2298: Flector) -> Motor {
    var self_2621: Flector;
    var other_2299: Flector;

    self_2621 = self_2620;
    other_2299 = other_2298;
    let _e4: Flector = self_2621;
    let _e8: Flector = other_2299;
    let _e11: Flector = other_2299;
    let _e14: Flector = other_2299;
    let _e17: Flector = other_2299;
    let _e29: Flector = self_2621;
    let _e33: Flector = other_2299;
    let _e36: Flector = other_2299;
    let _e39: Flector = other_2299;
    let _e42: Flector = other_2299;
    let _e55: Flector = self_2621;
    let _e59: Flector = other_2299;
    let _e62: Flector = other_2299;
    let _e65: Flector = other_2299;
    let _e68: Flector = other_2299;
    let _e74: Flector = self_2621;
    let _e78: Flector = other_2299;
    let _e91: Flector = self_2621;
    let _e95: Flector = other_2299;
    let _e108: Flector = self_2621;
    let _e112: Flector = other_2299;
    let _e125: Flector = self_2621;
    let _e129: Flector = other_2299;
    let _e142: Flector = self_2621;
    let _e146: Flector = other_2299;
    let _e149: Flector = other_2299;
    let _e152: Flector = other_2299;
    let _e155: Flector = other_2299;
    let _e168: Flector = self_2621;
    let _e172: Flector = other_2299;
    let _e175: Flector = other_2299;
    let _e178: Flector = other_2299;
    let _e189: Flector = self_2621;
    let _e193: Flector = other_2299;
    let _e196: Flector = other_2299;
    let _e199: Flector = other_2299;
    let _e211: Flector = self_2621;
    let _e215: Flector = other_2299;
    let _e218: Flector = other_2299;
    let _e221: Flector = other_2299;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g1_.x) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.y) * vec4<f32>(_e95.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.z) * vec4<f32>(_e112.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e125.g1_.w) * vec4<f32>(_e129.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e142.g0_.x) * vec4<f32>(_e146.g0_.w, _e149.g0_.x, _e152.g0_.x, _e155.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e168.g0_.y) * vec3<f32>(_e172.g0_.z, _e175.g0_.z, _e178.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e189.g0_.z) * vec3<f32>(_e193.g0_.y, _e196.g0_.x, _e199.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e211.g0_.x) * vec3<f32>(_e215.g0_.x, _e218.g0_.z, _e221.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_flector_wedge(self_2622: Flector, other_2300: Flector) -> Motor {
    var self_2623: Flector;
    var other_2301: Flector;

    self_2623 = self_2622;
    other_2301 = other_2300;
    let _e4: Flector = self_2623;
    let _e8: Flector = other_2301;
    let _e11: Flector = other_2301;
    let _e14: Flector = other_2301;
    let _e17: Flector = other_2301;
    let _e29: Flector = self_2623;
    let _e33: Flector = other_2301;
    let _e36: Flector = other_2301;
    let _e39: Flector = other_2301;
    let _e42: Flector = other_2301;
    let _e55: Flector = self_2623;
    let _e59: Flector = other_2301;
    let _e62: Flector = other_2301;
    let _e65: Flector = other_2301;
    let _e68: Flector = other_2301;
    let _e74: Flector = self_2623;
    let _e78: Flector = other_2301;
    let _e91: Flector = self_2623;
    let _e95: Flector = other_2301;
    let _e108: Flector = self_2623;
    let _e112: Flector = other_2301;
    let _e125: Flector = self_2623;
    let _e129: Flector = other_2301;
    let _e142: Flector = self_2623;
    let _e146: Flector = other_2301;
    let _e149: Flector = other_2301;
    let _e152: Flector = other_2301;
    let _e155: Flector = other_2301;
    let _e168: Flector = self_2623;
    let _e172: Flector = other_2301;
    let _e175: Flector = other_2301;
    let _e178: Flector = other_2301;
    let _e189: Flector = self_2623;
    let _e193: Flector = other_2301;
    let _e196: Flector = other_2301;
    let _e199: Flector = other_2301;
    let _e211: Flector = self_2623;
    let _e215: Flector = other_2301;
    let _e218: Flector = other_2301;
    let _e221: Flector = other_2301;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g1_.x) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.y) * vec4<f32>(_e95.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.z) * vec4<f32>(_e112.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e125.g1_.w) * vec4<f32>(_e129.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e142.g0_.x) * vec4<f32>(_e146.g0_.w, _e149.g0_.x, _e152.g0_.x, _e155.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e168.g0_.y) * vec3<f32>(_e172.g0_.z, _e175.g0_.z, _e178.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e189.g0_.z) * vec3<f32>(_e193.g0_.y, _e196.g0_.x, _e199.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e211.g0_.x) * vec3<f32>(_e215.g0_.x, _e218.g0_.z, _e221.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_flector_join(self_2624: Flector, other_2302: Flector) -> Motor {
    var self_2625: Flector;
    var other_2303: Flector;

    self_2625 = self_2624;
    other_2303 = other_2302;
    let _e4: Flector = self_2625;
    let _e8: Flector = other_2303;
    let _e11: Flector = other_2303;
    let _e14: Flector = other_2303;
    let _e17: Flector = other_2303;
    let _e29: Flector = self_2625;
    let _e33: Flector = other_2303;
    let _e36: Flector = other_2303;
    let _e39: Flector = other_2303;
    let _e42: Flector = other_2303;
    let _e55: Flector = self_2625;
    let _e59: Flector = other_2303;
    let _e62: Flector = other_2303;
    let _e65: Flector = other_2303;
    let _e68: Flector = other_2303;
    let _e74: Flector = self_2625;
    let _e78: Flector = other_2303;
    let _e91: Flector = self_2625;
    let _e95: Flector = other_2303;
    let _e108: Flector = self_2625;
    let _e112: Flector = other_2303;
    let _e125: Flector = self_2625;
    let _e129: Flector = other_2303;
    let _e142: Flector = self_2625;
    let _e146: Flector = other_2303;
    let _e149: Flector = other_2303;
    let _e152: Flector = other_2303;
    let _e155: Flector = other_2303;
    let _e168: Flector = self_2625;
    let _e172: Flector = other_2303;
    let _e175: Flector = other_2303;
    let _e178: Flector = other_2303;
    let _e189: Flector = self_2625;
    let _e193: Flector = other_2303;
    let _e196: Flector = other_2303;
    let _e199: Flector = other_2303;
    let _e211: Flector = self_2625;
    let _e215: Flector = other_2303;
    let _e218: Flector = other_2303;
    let _e221: Flector = other_2303;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + (vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.x, _e62.g0_.y, _e65.g0_.z, _e68.g1_.w))) + ((vec4<f32>(_e74.g1_.x) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e91.g1_.y) * vec4<f32>(_e95.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.z) * vec4<f32>(_e112.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e125.g1_.w) * vec4<f32>(_e129.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e142.g0_.x) * vec4<f32>(_e146.g0_.w, _e149.g0_.x, _e152.g0_.x, _e155.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), ((((vec3<f32>(_e168.g0_.y) * vec3<f32>(_e172.g0_.z, _e175.g0_.z, _e178.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e189.g0_.z) * vec3<f32>(_e193.g0_.y, _e196.g0_.x, _e199.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e211.g0_.x) * vec3<f32>(_e215.g0_.x, _e218.g0_.z, _e221.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_flector_inner_anti_product(self_2626: Flector, other_2304: Flector) -> Motor {
    var self_2627: Flector;
    var other_2305: Flector;

    self_2627 = self_2626;
    other_2305 = other_2304;
    let _e6: Flector = self_2627;
    let _e10: Flector = other_2305;
    let _e13: Flector = other_2305;
    let _e16: Flector = other_2305;
    let _e19: Flector = other_2305;
    let _e25: Flector = self_2627;
    let _e29: Flector = other_2305;
    let _e32: Flector = other_2305;
    let _e35: Flector = other_2305;
    let _e38: Flector = other_2305;
    let _e51: Flector = self_2627;
    let _e55: Flector = other_2305;
    let _e58: Flector = other_2305;
    let _e61: Flector = other_2305;
    let _e64: Flector = other_2305;
    let _e77: Flector = self_2627;
    let _e81: Flector = other_2305;
    let _e84: Flector = other_2305;
    let _e87: Flector = other_2305;
    let _e90: Flector = other_2305;
    let _e103: Flector = self_2627;
    let _e107: Flector = other_2305;
    let _e110: Flector = other_2305;
    let _e113: Flector = other_2305;
    let _e124: Flector = self_2627;
    let _e128: Flector = other_2305;
    let _e131: Flector = other_2305;
    let _e134: Flector = other_2305;
    let _e146: Flector = self_2627;
    let _e150: Flector = other_2305;
    let _e153: Flector = other_2305;
    let _e156: Flector = other_2305;
    let _e168: Flector = self_2627;
    let _e172: Flector = other_2305;
    let _e175: Flector = other_2305;
    let _e178: Flector = other_2305;
    let _e190: Flector = self_2627;
    let _e194: Flector = other_2305;
    let _e197: Flector = other_2305;
    let _e200: Flector = other_2305;
    let _e212: Flector = self_2627;
    let _e216: Flector = other_2305;
    let _e219: Flector = other_2305;
    let _e222: Flector = other_2305;
    return Motor(((((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))) + ((vec4<f32>(_e25.g1_.y) * vec4<f32>(_e29.g0_.w, _e32.g0_.w, _e35.g0_.w, _e38.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.z) * vec4<f32>(_e55.g0_.w, _e58.g0_.w, _e61.g0_.w, _e64.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e77.g1_.x) * vec4<f32>(_e81.g0_.w, _e84.g0_.x, _e87.g0_.x, _e90.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))), (((((((vec3<f32>(_e103.g0_.y) * vec3<f32>(_e107.g1_.z, _e110.g1_.z, _e113.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e124.g0_.z) * vec3<f32>(_e128.g1_.y, _e131.g1_.x, _e134.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e146.g1_.x) * vec3<f32>(_e150.g0_.z, _e153.g0_.z, _e156.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e168.g1_.y) * vec3<f32>(_e172.g0_.z, _e175.g0_.z, _e178.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e190.g1_.z) * vec3<f32>(_e194.g0_.y, _e197.g0_.x, _e200.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e212.g0_.x) * vec3<f32>(_e216.g1_.x, _e219.g1_.z, _e222.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flector_flector_left_anti_contraction(self_2628: Flector, other_2306: Flector) -> Motor {
    var self_2629: Flector;
    var other_2307: Flector;

    self_2629 = self_2628;
    other_2307 = other_2306;
    let _e4: Flector = self_2629;
    let _e8: Flector = other_2307;
    let _e11: Flector = other_2307;
    let _e14: Flector = other_2307;
    let _e17: Flector = other_2307;
    let _e29: Flector = self_2629;
    let _e33: Flector = other_2307;
    let _e36: Flector = other_2307;
    let _e39: Flector = other_2307;
    let _e42: Flector = other_2307;
    let _e55: Flector = self_2629;
    let _e59: Flector = other_2307;
    let _e62: Flector = other_2307;
    let _e65: Flector = other_2307;
    let _e68: Flector = other_2307;
    let _e81: Flector = self_2629;
    let _e84: Flector = other_2307;
    let _e96: Flector = self_2629;
    let _e100: Flector = other_2307;
    let _e103: Flector = other_2307;
    let _e106: Flector = other_2307;
    let _e117: Flector = self_2629;
    let _e121: Flector = other_2307;
    let _e124: Flector = other_2307;
    let _e127: Flector = other_2307;
    let _e139: Flector = self_2629;
    let _e143: Flector = other_2307;
    let _e146: Flector = other_2307;
    let _e149: Flector = other_2307;
    return Motor((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.w, _e17.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0)) + ((vec4<f32>(_e29.g1_.y) * vec4<f32>(_e33.g0_.w, _e36.g0_.w, _e39.g0_.w, _e42.g1_.y)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.z) * vec4<f32>(_e59.g0_.w, _e62.g0_.w, _e65.g0_.w, _e68.g1_.z)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((_e81.g0_.xxxw * _e84.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((vec3<f32>(_e96.g1_.y) * vec3<f32>(_e100.g0_.z, _e103.g0_.z, _e106.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e117.g1_.z) * vec3<f32>(_e121.g0_.y, _e124.g0_.x, _e127.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e139.g1_.x) * vec3<f32>(_e143.g0_.x, _e146.g0_.z, _e149.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn flector_flector_right_anti_contraction(self_2630: Flector, other_2308: Flector) -> Motor {
    var self_2631: Flector;
    var other_2309: Flector;

    self_2631 = self_2630;
    other_2309 = other_2308;
    let _e6: Flector = self_2631;
    let _e10: Flector = other_2309;
    let _e13: Flector = other_2309;
    let _e16: Flector = other_2309;
    let _e19: Flector = other_2309;
    let _e25: Flector = self_2631;
    let _e29: Flector = other_2309;
    let _e41: Flector = self_2631;
    let _e45: Flector = other_2309;
    let _e57: Flector = self_2631;
    let _e61: Flector = other_2309;
    let _e73: Flector = self_2631;
    let _e77: Flector = other_2309;
    let _e80: Flector = other_2309;
    let _e83: Flector = other_2309;
    let _e94: Flector = self_2631;
    let _e98: Flector = other_2309;
    let _e101: Flector = other_2309;
    let _e104: Flector = other_2309;
    let _e116: Flector = self_2631;
    let _e120: Flector = other_2309;
    let _e123: Flector = other_2309;
    let _e126: Flector = other_2309;
    return Motor(((((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_.w) * vec4<f32>(_e10.g1_.x, _e13.g1_.y, _e16.g1_.z, _e19.g0_.w))) + ((vec4<f32>(_e25.g1_.y) * vec4<f32>(_e29.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e41.g1_.z) * vec4<f32>(_e45.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), ((((vec3<f32>(_e73.g0_.y) * vec3<f32>(_e77.g1_.z, _e80.g1_.z, _e83.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e94.g0_.z) * vec3<f32>(_e98.g1_.y, _e101.g1_.x, _e104.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e116.g0_.x) * vec3<f32>(_e120.g1_.x, _e123.g1_.z, _e126.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn flector_flector_scalar_product(self_2632: Flector, other_2310: Flector) -> Scalar {
    var self_2633: Flector;
    var other_2311: Flector;

    self_2633 = self_2632;
    other_2311 = other_2310;
    let _e4: Flector = self_2633;
    let _e7: Flector = other_2311;
    let _e11: Flector = self_2633;
    let _e14: Flector = other_2311;
    let _e19: Flector = self_2633;
    let _e22: Flector = other_2311;
    let _e27: Flector = self_2633;
    let _e30: Flector = other_2311;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g1_.w)));
}

fn flector_flector_dot(self_2634: Flector, other_2312: Flector) -> Scalar {
    var self_2635: Flector;
    var other_2313: Flector;

    self_2635 = self_2634;
    other_2313 = other_2312;
    let _e4: Flector = self_2635;
    let _e7: Flector = other_2313;
    let _e11: Flector = self_2635;
    let _e14: Flector = other_2313;
    let _e19: Flector = self_2635;
    let _e22: Flector = other_2313;
    let _e27: Flector = self_2635;
    let _e30: Flector = other_2313;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g1_.w)));
}

fn flector_flector_anti_scalar_product(self_2636: Flector, other_2314: Flector) -> AntiScalar {
    var self_2637: Flector;
    var other_2315: Flector;

    self_2637 = self_2636;
    other_2315 = other_2314;
    let _e5: Flector = self_2637;
    let _e8: Flector = other_2315;
    let _e13: Flector = self_2637;
    let _e16: Flector = other_2315;
    let _e21: Flector = self_2637;
    let _e24: Flector = other_2315;
    let _e29: Flector = self_2637;
    let _e32: Flector = other_2315;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g0_.w)) + (_e13.g1_.x * _e16.g1_.x)) + (_e21.g1_.y * _e24.g1_.y)) + (_e29.g1_.z * _e32.g1_.z)));
}

fn flector_flector_anti_dot(self_2638: Flector, other_2316: Flector) -> AntiScalar {
    var self_2639: Flector;
    var other_2317: Flector;

    self_2639 = self_2638;
    other_2317 = other_2316;
    let _e5: Flector = self_2639;
    let _e8: Flector = other_2317;
    let _e13: Flector = self_2639;
    let _e16: Flector = other_2317;
    let _e21: Flector = self_2639;
    let _e24: Flector = other_2317;
    let _e29: Flector = self_2639;
    let _e32: Flector = other_2317;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g0_.w)) + (_e13.g1_.x * _e16.g1_.x)) + (_e21.g1_.y * _e24.g1_.y)) + (_e29.g1_.z * _e32.g1_.z)));
}

fn flector_multi_vector_add(self_2640: Flector, other_2318: MultiVector) -> MultiVector {
    var self_2641: Flector;
    var other_2319: MultiVector;

    self_2641 = self_2640;
    other_2319 = other_2318;
    let _e4: MultiVector = other_2319;
    let _e6: Flector = self_2641;
    let _e8: MultiVector = other_2319;
    let _e11: MultiVector = other_2319;
    let _e13: MultiVector = other_2319;
    let _e15: Flector = self_2641;
    let _e17: MultiVector = other_2319;
    return MultiVector(_e4.g0_, (_e6.g0_ + _e8.g1_), _e11.g2_, _e13.g3_, (_e15.g1_ + _e17.g4_));
}

fn flector_multi_vector_sub(self_2642: Flector, other_2320: MultiVector) -> MultiVector {
    var self_2643: Flector;
    var other_2321: MultiVector;

    self_2643 = self_2642;
    other_2321 = other_2320;
    let _e6: MultiVector = other_2321;
    let _e9: Flector = self_2643;
    let _e11: MultiVector = other_2321;
    let _e16: MultiVector = other_2321;
    let _e21: MultiVector = other_2321;
    let _e24: Flector = self_2643;
    let _e26: MultiVector = other_2321;
    return MultiVector((vec2<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_), (vec3<f32>(0.0) - _e16.g2_), (vec3<f32>(0.0) - _e21.g3_), (_e24.g1_ - _e26.g4_));
}

fn flector_multi_vector_geometric_product(self_2644: Flector, other_2322: MultiVector) -> MultiVector {
    var self_2645: Flector;
    var other_2323: MultiVector;

    self_2645 = self_2644;
    other_2323 = other_2322;
    let _e4: Flector = self_2645;
    let _e8: MultiVector = other_2323;
    let _e11: MultiVector = other_2323;
    let _e16: Flector = self_2645;
    let _e20: MultiVector = other_2323;
    let _e23: MultiVector = other_2323;
    let _e29: Flector = self_2645;
    let _e33: MultiVector = other_2323;
    let _e36: MultiVector = other_2323;
    let _e42: Flector = self_2645;
    let _e46: MultiVector = other_2323;
    let _e57: Flector = self_2645;
    let _e61: MultiVector = other_2323;
    let _e72: Flector = self_2645;
    let _e76: MultiVector = other_2323;
    let _e87: Flector = self_2645;
    let _e91: MultiVector = other_2323;
    let _e94: MultiVector = other_2323;
    let _e100: Flector = self_2645;
    let _e103: Flector = self_2645;
    let _e107: MultiVector = other_2323;
    let _e110: MultiVector = other_2323;
    let _e120: Flector = self_2645;
    let _e124: MultiVector = other_2323;
    let _e127: MultiVector = other_2323;
    let _e130: MultiVector = other_2323;
    let _e133: MultiVector = other_2323;
    let _e146: Flector = self_2645;
    let _e150: MultiVector = other_2323;
    let _e153: MultiVector = other_2323;
    let _e156: MultiVector = other_2323;
    let _e159: MultiVector = other_2323;
    let _e173: Flector = self_2645;
    let _e177: MultiVector = other_2323;
    let _e180: MultiVector = other_2323;
    let _e183: MultiVector = other_2323;
    let _e186: MultiVector = other_2323;
    let _e200: Flector = self_2645;
    let _e204: MultiVector = other_2323;
    let _e217: Flector = self_2645;
    let _e221: MultiVector = other_2323;
    let _e234: Flector = self_2645;
    let _e238: MultiVector = other_2323;
    let _e251: Flector = self_2645;
    let _e255: MultiVector = other_2323;
    let _e258: MultiVector = other_2323;
    let _e261: MultiVector = other_2323;
    let _e264: MultiVector = other_2323;
    let _e270: Flector = self_2645;
    let _e273: MultiVector = other_2323;
    let _e285: Flector = self_2645;
    let _e289: MultiVector = other_2323;
    let _e292: MultiVector = other_2323;
    let _e295: MultiVector = other_2323;
    let _e307: Flector = self_2645;
    let _e311: MultiVector = other_2323;
    let _e314: MultiVector = other_2323;
    let _e317: MultiVector = other_2323;
    let _e330: Flector = self_2645;
    let _e334: MultiVector = other_2323;
    let _e337: MultiVector = other_2323;
    let _e340: MultiVector = other_2323;
    let _e353: Flector = self_2645;
    let _e357: MultiVector = other_2323;
    let _e360: MultiVector = other_2323;
    let _e363: MultiVector = other_2323;
    let _e369: Flector = self_2645;
    let _e373: MultiVector = other_2323;
    let _e376: MultiVector = other_2323;
    let _e379: MultiVector = other_2323;
    let _e391: Flector = self_2645;
    let _e395: MultiVector = other_2323;
    let _e398: MultiVector = other_2323;
    let _e401: MultiVector = other_2323;
    let _e413: Flector = self_2645;
    let _e417: MultiVector = other_2323;
    let _e420: MultiVector = other_2323;
    let _e423: MultiVector = other_2323;
    let _e435: Flector = self_2645;
    let _e439: MultiVector = other_2323;
    let _e442: MultiVector = other_2323;
    let _e445: MultiVector = other_2323;
    let _e451: Flector = self_2645;
    let _e455: MultiVector = other_2323;
    let _e458: MultiVector = other_2323;
    let _e461: MultiVector = other_2323;
    let _e473: Flector = self_2645;
    let _e477: MultiVector = other_2323;
    let _e480: MultiVector = other_2323;
    let _e483: MultiVector = other_2323;
    let _e496: Flector = self_2645;
    let _e500: MultiVector = other_2323;
    let _e503: MultiVector = other_2323;
    let _e506: MultiVector = other_2323;
    let _e519: Flector = self_2645;
    let _e523: MultiVector = other_2323;
    let _e526: MultiVector = other_2323;
    let _e529: MultiVector = other_2323;
    let _e535: Flector = self_2645;
    let _e539: MultiVector = other_2323;
    let _e542: MultiVector = other_2323;
    let _e545: MultiVector = other_2323;
    let _e548: MultiVector = other_2323;
    let _e561: Flector = self_2645;
    let _e565: MultiVector = other_2323;
    let _e568: MultiVector = other_2323;
    let _e571: MultiVector = other_2323;
    let _e574: MultiVector = other_2323;
    let _e588: Flector = self_2645;
    let _e592: MultiVector = other_2323;
    let _e595: MultiVector = other_2323;
    let _e598: MultiVector = other_2323;
    let _e601: MultiVector = other_2323;
    let _e615: Flector = self_2645;
    let _e619: MultiVector = other_2323;
    let _e622: MultiVector = other_2323;
    let _e625: MultiVector = other_2323;
    let _e628: MultiVector = other_2323;
    let _e641: Flector = self_2645;
    let _e645: MultiVector = other_2323;
    let _e648: MultiVector = other_2323;
    let _e651: MultiVector = other_2323;
    let _e654: MultiVector = other_2323;
    let _e667: Flector = self_2645;
    let _e671: MultiVector = other_2323;
    let _e674: MultiVector = other_2323;
    let _e677: MultiVector = other_2323;
    let _e680: MultiVector = other_2323;
    let _e693: Flector = self_2645;
    let _e697: MultiVector = other_2323;
    let _e700: MultiVector = other_2323;
    let _e703: MultiVector = other_2323;
    let _e706: MultiVector = other_2323;
    let _e712: Flector = self_2645;
    let _e715: MultiVector = other_2323;
    let _e718: MultiVector = other_2323;
    let _e721: MultiVector = other_2323;
    let _e724: MultiVector = other_2323;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.x) * vec2<f32>(_e8.g1_.x, _e11.g4_.x)) + (vec2<f32>(_e16.g0_.y) * vec2<f32>(_e20.g1_.y, _e23.g4_.y))) + (vec2<f32>(_e29.g0_.z) * vec2<f32>(_e33.g1_.z, _e36.g4_.z))) + ((vec2<f32>(_e42.g1_.x) * vec2<f32>(_e46.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e57.g1_.y) * vec2<f32>(_e61.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e72.g1_.z) * vec2<f32>(_e76.g1_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e87.g1_.w) * vec2<f32>(_e91.g4_.w, _e94.g1_.w))) + ((vec2<f32>(_e100.g0_.x, _e103.g0_.w) * vec2<f32>(_e107.g4_.x, _e110.g4_.w)) * vec2<f32>(0.0, 1.0))), (((((((((vec4<f32>(_e120.g0_.x) * vec4<f32>(_e124.g0_.x, _e127.g3_.z, _e130.g3_.y, _e133.g2_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e146.g0_.y) * vec4<f32>(_e150.g3_.z, _e153.g0_.x, _e156.g3_.x, _e159.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e173.g0_.z) * vec4<f32>(_e177.g3_.y, _e180.g3_.x, _e183.g0_.x, _e186.g2_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e200.g1_.x) * vec4<f32>(_e204.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e217.g1_.y) * vec4<f32>(_e221.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e234.g1_.z) * vec4<f32>(_e238.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e251.g1_.w) * vec4<f32>(_e255.g3_.x, _e258.g3_.y, _e261.g3_.z, _e264.g0_.y))) + ((_e270.g0_.xxxw * vec4<f32>(_e273.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))), (((((((((vec3<f32>(_e285.g0_.x) * vec3<f32>(_e289.g1_.w, _e292.g4_.z, _e295.g4_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e307.g0_.y) * vec3<f32>(_e311.g4_.z, _e314.g1_.w, _e317.g4_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e330.g0_.z) * vec3<f32>(_e334.g4_.y, _e337.g4_.x, _e340.g1_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e353.g0_.w) * vec3<f32>(_e357.g1_.x, _e360.g1_.y, _e363.g1_.z))) + ((vec3<f32>(_e369.g1_.x) * vec3<f32>(_e373.g4_.w, _e376.g1_.z, _e379.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e391.g1_.y) * vec3<f32>(_e395.g1_.z, _e398.g4_.w, _e401.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e413.g1_.z) * vec3<f32>(_e417.g1_.y, _e420.g1_.x, _e423.g4_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e435.g1_.w) * vec3<f32>(_e439.g4_.x, _e442.g4_.y, _e445.g4_.z))), (((((vec3<f32>(_e451.g0_.x) * vec3<f32>(_e455.g4_.w, _e458.g1_.z, _e461.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e473.g0_.y) * vec3<f32>(_e477.g1_.z, _e480.g4_.w, _e483.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e496.g0_.z) * vec3<f32>(_e500.g1_.y, _e503.g1_.x, _e506.g4_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) - (vec3<f32>(_e519.g1_.w) * vec3<f32>(_e523.g1_.x, _e526.g1_.y, _e529.g1_.z))), (((((((((vec4<f32>(_e535.g0_.x) * vec4<f32>(_e539.g0_.y, _e542.g2_.z, _e545.g2_.y, _e548.g3_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e561.g0_.y) * vec4<f32>(_e565.g2_.z, _e568.g0_.y, _e571.g2_.x, _e574.g3_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e588.g0_.z) * vec4<f32>(_e592.g2_.y, _e595.g2_.x, _e598.g0_.y, _e601.g3_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e615.g1_.x) * vec4<f32>(_e619.g0_.x, _e622.g3_.z, _e625.g3_.y, _e628.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e641.g1_.y) * vec4<f32>(_e645.g3_.z, _e648.g0_.x, _e651.g3_.x, _e654.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e667.g1_.z) * vec4<f32>(_e671.g3_.y, _e674.g3_.x, _e677.g0_.x, _e680.g3_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e693.g1_.w) * vec4<f32>(_e697.g2_.x, _e700.g2_.y, _e703.g2_.z, _e706.g0_.x))) + ((_e712.g0_.wwwx * vec4<f32>(_e715.g3_.x, _e718.g3_.y, _e721.g3_.z, _e724.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn flector_multi_vector_geometric_anti_product(self_2646: Flector, other_2324: MultiVector) -> MultiVector {
    var self_2647: Flector;
    var other_2325: MultiVector;

    self_2647 = self_2646;
    other_2325 = other_2324;
    let _e4: Flector = self_2647;
    let _e8: MultiVector = other_2325;
    let _e17: Flector = self_2647;
    let _e21: MultiVector = other_2325;
    let _e31: Flector = self_2647;
    let _e35: MultiVector = other_2325;
    let _e38: MultiVector = other_2325;
    let _e49: Flector = self_2647;
    let _e53: MultiVector = other_2325;
    let _e56: MultiVector = other_2325;
    let _e67: Flector = self_2647;
    let _e71: MultiVector = other_2325;
    let _e74: MultiVector = other_2325;
    let _e85: Flector = self_2647;
    let _e89: MultiVector = other_2325;
    let _e92: MultiVector = other_2325;
    let _e103: Flector = self_2647;
    let _e107: MultiVector = other_2325;
    let _e118: Flector = self_2647;
    let _e122: MultiVector = other_2325;
    let _e132: Flector = self_2647;
    let _e136: MultiVector = other_2325;
    let _e139: MultiVector = other_2325;
    let _e142: MultiVector = other_2325;
    let _e145: MultiVector = other_2325;
    let _e157: Flector = self_2647;
    let _e161: MultiVector = other_2325;
    let _e164: MultiVector = other_2325;
    let _e167: MultiVector = other_2325;
    let _e170: MultiVector = other_2325;
    let _e183: Flector = self_2647;
    let _e187: MultiVector = other_2325;
    let _e190: MultiVector = other_2325;
    let _e193: MultiVector = other_2325;
    let _e196: MultiVector = other_2325;
    let _e211: Flector = self_2647;
    let _e215: MultiVector = other_2325;
    let _e218: MultiVector = other_2325;
    let _e221: MultiVector = other_2325;
    let _e224: MultiVector = other_2325;
    let _e239: Flector = self_2647;
    let _e243: MultiVector = other_2325;
    let _e246: MultiVector = other_2325;
    let _e249: MultiVector = other_2325;
    let _e252: MultiVector = other_2325;
    let _e267: Flector = self_2647;
    let _e271: MultiVector = other_2325;
    let _e274: MultiVector = other_2325;
    let _e277: MultiVector = other_2325;
    let _e280: MultiVector = other_2325;
    let _e295: Flector = self_2647;
    let _e299: MultiVector = other_2325;
    let _e302: MultiVector = other_2325;
    let _e305: MultiVector = other_2325;
    let _e308: MultiVector = other_2325;
    let _e320: Flector = self_2647;
    let _e324: MultiVector = other_2325;
    let _e327: MultiVector = other_2325;
    let _e330: MultiVector = other_2325;
    let _e333: MultiVector = other_2325;
    let _e348: Flector = self_2647;
    let _e352: MultiVector = other_2325;
    let _e355: MultiVector = other_2325;
    let _e358: MultiVector = other_2325;
    let _e364: Flector = self_2647;
    let _e368: MultiVector = other_2325;
    let _e371: MultiVector = other_2325;
    let _e374: MultiVector = other_2325;
    let _e387: Flector = self_2647;
    let _e391: MultiVector = other_2325;
    let _e394: MultiVector = other_2325;
    let _e397: MultiVector = other_2325;
    let _e410: Flector = self_2647;
    let _e414: MultiVector = other_2325;
    let _e417: MultiVector = other_2325;
    let _e420: MultiVector = other_2325;
    let _e433: Flector = self_2647;
    let _e437: MultiVector = other_2325;
    let _e440: MultiVector = other_2325;
    let _e443: MultiVector = other_2325;
    let _e455: Flector = self_2647;
    let _e459: MultiVector = other_2325;
    let _e462: MultiVector = other_2325;
    let _e465: MultiVector = other_2325;
    let _e478: Flector = self_2647;
    let _e482: MultiVector = other_2325;
    let _e485: MultiVector = other_2325;
    let _e488: MultiVector = other_2325;
    let _e501: Flector = self_2647;
    let _e505: MultiVector = other_2325;
    let _e508: MultiVector = other_2325;
    let _e511: MultiVector = other_2325;
    let _e517: Flector = self_2647;
    let _e521: MultiVector = other_2325;
    let _e524: MultiVector = other_2325;
    let _e527: MultiVector = other_2325;
    let _e539: Flector = self_2647;
    let _e543: MultiVector = other_2325;
    let _e546: MultiVector = other_2325;
    let _e549: MultiVector = other_2325;
    let _e561: Flector = self_2647;
    let _e565: MultiVector = other_2325;
    let _e568: MultiVector = other_2325;
    let _e571: MultiVector = other_2325;
    let _e583: Flector = self_2647;
    let _e587: MultiVector = other_2325;
    let _e590: MultiVector = other_2325;
    let _e593: MultiVector = other_2325;
    let _e599: Flector = self_2647;
    let _e603: MultiVector = other_2325;
    let _e615: Flector = self_2647;
    let _e619: MultiVector = other_2325;
    let _e632: Flector = self_2647;
    let _e636: MultiVector = other_2325;
    let _e639: MultiVector = other_2325;
    let _e642: MultiVector = other_2325;
    let _e645: MultiVector = other_2325;
    let _e658: Flector = self_2647;
    let _e662: MultiVector = other_2325;
    let _e665: MultiVector = other_2325;
    let _e668: MultiVector = other_2325;
    let _e671: MultiVector = other_2325;
    let _e684: Flector = self_2647;
    let _e688: MultiVector = other_2325;
    let _e691: MultiVector = other_2325;
    let _e694: MultiVector = other_2325;
    let _e697: MultiVector = other_2325;
    let _e710: Flector = self_2647;
    let _e714: MultiVector = other_2325;
    let _e717: MultiVector = other_2325;
    let _e720: MultiVector = other_2325;
    let _e723: MultiVector = other_2325;
    let _e736: Flector = self_2647;
    let _e740: MultiVector = other_2325;
    let _e752: Flector = self_2647;
    let _e756: MultiVector = other_2325;
    return MultiVector((((((((((vec2<f32>(_e4.g0_.y) * vec2<f32>(_e8.g4_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g0_.z) * vec2<f32>(_e21.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g0_.w) * vec2<f32>(_e35.g4_.w, _e38.g1_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e49.g1_.x) * vec2<f32>(_e53.g1_.x, _e56.g4_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e67.g1_.y) * vec2<f32>(_e71.g1_.y, _e74.g4_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e85.g1_.z) * vec2<f32>(_e89.g1_.z, _e92.g4_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e103.g1_.w) * vec2<f32>(_e107.g1_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e118.g0_.x) * vec2<f32>(_e122.g4_.x)) * vec2<f32>(1.0, 0.0))), (((((((((vec4<f32>(_e132.g0_.y) * vec4<f32>(_e136.g2_.z, _e139.g0_.y, _e142.g2_.x, _e145.g2_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e157.g0_.z) * vec4<f32>(_e161.g2_.y, _e164.g2_.x, _e167.g0_.y, _e170.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e183.g0_.w) * vec4<f32>(_e187.g3_.x, _e190.g3_.y, _e193.g3_.z, _e196.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e211.g1_.x) * vec4<f32>(_e215.g0_.x, _e218.g3_.z, _e221.g3_.y, _e224.g2_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e239.g1_.y) * vec4<f32>(_e243.g3_.z, _e246.g0_.x, _e249.g3_.x, _e252.g2_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e267.g1_.z) * vec4<f32>(_e271.g3_.y, _e274.g3_.x, _e277.g0_.x, _e280.g2_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e295.g1_.w) * vec4<f32>(_e299.g2_.x, _e302.g2_.y, _e305.g2_.z, _e308.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e320.g0_.x) * vec4<f32>(_e324.g0_.y, _e327.g2_.z, _e330.g2_.y, _e333.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e348.g0_.w) * vec3<f32>(_e352.g4_.x, _e355.g4_.y, _e358.g4_.z))) + ((vec3<f32>(_e364.g1_.x) * vec3<f32>(_e368.g1_.w, _e371.g4_.z, _e374.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e387.g1_.y) * vec3<f32>(_e391.g4_.z, _e394.g1_.w, _e397.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e410.g1_.z) * vec3<f32>(_e414.g4_.y, _e417.g4_.x, _e420.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((((((vec3<f32>(_e433.g0_.x) * vec3<f32>(_e437.g1_.w, _e440.g4_.z, _e443.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e455.g0_.y) * vec3<f32>(_e459.g4_.z, _e462.g1_.w, _e465.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e478.g0_.z) * vec3<f32>(_e482.g4_.y, _e485.g4_.x, _e488.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e501.g0_.w) * vec3<f32>(_e505.g1_.x, _e508.g1_.y, _e511.g1_.z))) + ((vec3<f32>(_e517.g1_.x) * vec3<f32>(_e521.g4_.w, _e524.g1_.z, _e527.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e539.g1_.y) * vec3<f32>(_e543.g1_.z, _e546.g4_.w, _e549.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e561.g1_.z) * vec3<f32>(_e565.g1_.y, _e568.g1_.x, _e571.g4_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e583.g1_.w) * vec3<f32>(_e587.g4_.x, _e590.g4_.y, _e593.g4_.z))), (((((((((vec4<f32>(_e599.g0_.y) * vec4<f32>(_e603.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e615.g0_.z) * vec4<f32>(_e619.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e632.g0_.w) * vec4<f32>(_e636.g2_.x, _e639.g2_.y, _e642.g2_.z, _e645.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e658.g1_.x) * vec4<f32>(_e662.g0_.y, _e665.g2_.z, _e668.g2_.y, _e671.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e684.g1_.y) * vec4<f32>(_e688.g2_.z, _e691.g0_.y, _e694.g2_.x, _e697.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e710.g1_.z) * vec4<f32>(_e714.g2_.y, _e717.g2_.x, _e720.g0_.y, _e723.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e736.g1_.w) * vec4<f32>(_e740.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e752.g0_.x) * vec4<f32>(_e756.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn flector_multi_vector_scalar_product(self_2648: Flector, other_2326: MultiVector) -> Scalar {
    var self_2649: Flector;
    var other_2327: MultiVector;

    self_2649 = self_2648;
    other_2327 = other_2326;
    let _e4: Flector = self_2649;
    let _e7: MultiVector = other_2327;
    let _e11: Flector = self_2649;
    let _e14: MultiVector = other_2327;
    let _e19: Flector = self_2649;
    let _e22: MultiVector = other_2327;
    let _e27: Flector = self_2649;
    let _e30: MultiVector = other_2327;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) - (_e27.g1_.w * _e30.g4_.w)));
}

fn flector_multi_vector_dot(self_2650: Flector, other_2328: MultiVector) -> Scalar {
    var self_2651: Flector;
    var other_2329: MultiVector;

    self_2651 = self_2650;
    other_2329 = other_2328;
    let _e4: Flector = self_2651;
    let _e7: MultiVector = other_2329;
    let _e11: Flector = self_2651;
    let _e14: MultiVector = other_2329;
    let _e19: Flector = self_2651;
    let _e22: MultiVector = other_2329;
    let _e27: Flector = self_2651;
    let _e30: MultiVector = other_2329;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) - (_e27.g1_.w * _e30.g4_.w)));
}

fn flector_multi_vector_anti_scalar_product(self_2652: Flector, other_2330: MultiVector) -> AntiScalar {
    var self_2653: Flector;
    var other_2331: MultiVector;

    self_2653 = self_2652;
    other_2331 = other_2330;
    let _e5: Flector = self_2653;
    let _e8: MultiVector = other_2331;
    let _e13: Flector = self_2653;
    let _e16: MultiVector = other_2331;
    let _e21: Flector = self_2653;
    let _e24: MultiVector = other_2331;
    let _e29: Flector = self_2653;
    let _e32: MultiVector = other_2331;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g1_.w)) + (_e13.g1_.x * _e16.g4_.x)) + (_e21.g1_.y * _e24.g4_.y)) + (_e29.g1_.z * _e32.g4_.z)));
}

fn flector_multi_vector_anti_dot(self_2654: Flector, other_2332: MultiVector) -> AntiScalar {
    var self_2655: Flector;
    var other_2333: MultiVector;

    self_2655 = self_2654;
    other_2333 = other_2332;
    let _e5: Flector = self_2655;
    let _e8: MultiVector = other_2333;
    let _e13: Flector = self_2655;
    let _e16: MultiVector = other_2333;
    let _e21: Flector = self_2655;
    let _e24: MultiVector = other_2333;
    let _e29: Flector = self_2655;
    let _e32: MultiVector = other_2333;
    return AntiScalar(((((0.0 - (_e5.g0_.w * _e8.g1_.w)) + (_e13.g1_.x * _e16.g4_.x)) + (_e21.g1_.y * _e24.g4_.y)) + (_e29.g1_.z * _e32.g4_.z)));
}

fn flector_squared_magnitude(self_2656: Flector) -> Scalar {
    var self_2657: Flector;

    self_2657 = self_2656;
    let _e2: Flector = self_2657;
    let _e3: Flector = self_2657;
    let _e4: Flector = flector_reversal(_e3);
    let _e5: Scalar = flector_flector_scalar_product(_e2, _e4);
    return _e5;
}

fn flector_magnitude(self_2658: Flector) -> Scalar {
    var self_2659: Flector;

    self_2659 = self_2658;
    let _e2: Flector = self_2659;
    let _e3: Scalar = flector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn flector_bulk_norm(self_2660: Flector) -> Scalar {
    var self_2661: Flector;

    self_2661 = self_2660;
    let _e2: Flector = self_2661;
    let _e3: Scalar = flector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn flector_squared_anti_magnitude(self_2662: Flector) -> AntiScalar {
    var self_2663: Flector;

    self_2663 = self_2662;
    let _e2: Flector = self_2663;
    let _e3: Flector = self_2663;
    let _e4: Flector = flector_anti_reversal(_e3);
    let _e5: AntiScalar = flector_flector_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn flector_weight_norm(self_2664: Flector) -> AntiScalar {
    var self_2665: Flector;

    self_2665 = self_2664;
    let _e2: Flector = self_2665;
    let _e3: AntiScalar = flector_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn flector_geometric_norm(self_2666: Flector) -> HomogeneousMagnitude {
    var self_2667: Flector;

    self_2667 = self_2666;
    let _e2: Flector = self_2667;
    let _e3: Scalar = flector_bulk_norm(_e2);
    let _e4: Flector = self_2667;
    let _e5: AntiScalar = flector_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn flector_scale(self_2668: Flector, other_2334: f32) -> Flector {
    var self_2669: Flector;
    var other_2335: f32;

    self_2669 = self_2668;
    other_2335 = other_2334;
    let _e4: Flector = self_2669;
    let _e5: f32 = other_2335;
    let _e7: Flector = flector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn flector_signum(self_2670: Flector) -> Flector {
    var self_2671: Flector;

    self_2671 = self_2670;
    let _e2: Flector = self_2671;
    let _e3: Flector = self_2671;
    let _e4: Scalar = flector_magnitude(_e3);
    let _e9: Flector = flector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn flector_inverse(self_2672: Flector) -> Flector {
    var self_2673: Flector;

    self_2673 = self_2672;
    let _e2: Flector = self_2673;
    let _e3: Flector = flector_reversal(_e2);
    let _e4: Flector = self_2673;
    let _e5: Scalar = flector_squared_magnitude(_e4);
    let _e10: Flector = flector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn flector_unitize(self_2674: Flector) -> Flector {
    var self_2675: Flector;

    self_2675 = self_2674;
    let _e2: Flector = self_2675;
    let _e3: Flector = self_2675;
    let _e4: AntiScalar = flector_weight_norm(_e3);
    let _e9: Flector = flector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_zero() -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_one() -> MultiVector {
    return MultiVector(vec2<f32>(1.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_neg(self_2676: MultiVector) -> MultiVector {
    var self_2677: MultiVector;

    self_2677 = self_2676;
    let _e2: MultiVector = self_2677;
    let _e8: MultiVector = self_2677;
    let _e14: MultiVector = self_2677;
    let _e20: MultiVector = self_2677;
    let _e26: MultiVector = self_2677;
    return MultiVector((_e2.g0_ * vec2<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))), (_e14.g2_ * vec3<f32>(-(1.0))), (_e20.g3_ * vec3<f32>(-(1.0))), (_e26.g4_ * vec4<f32>(-(1.0))));
}

fn multi_vector_automorphism(self_2678: MultiVector) -> MultiVector {
    var self_2679: MultiVector;

    self_2679 = self_2678;
    let _e2: MultiVector = self_2679;
    let _e4: MultiVector = self_2679;
    let _e10: MultiVector = self_2679;
    let _e12: MultiVector = self_2679;
    let _e14: MultiVector = self_2679;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))), _e10.g2_, _e12.g3_, (_e14.g4_ * vec4<f32>(-(1.0))));
}

fn multi_vector_reversal(self_2680: MultiVector) -> MultiVector {
    var self_2681: MultiVector;

    self_2681 = self_2680;
    let _e2: MultiVector = self_2681;
    let _e4: MultiVector = self_2681;
    let _e6: MultiVector = self_2681;
    let _e12: MultiVector = self_2681;
    let _e18: MultiVector = self_2681;
    return MultiVector(_e2.g0_, _e4.g1_, (_e6.g2_ * vec3<f32>(-(1.0))), (_e12.g3_ * vec3<f32>(-(1.0))), (_e18.g4_ * vec4<f32>(-(1.0))));
}

fn multi_vector_conjugation(self_2682: MultiVector) -> MultiVector {
    var self_2683: MultiVector;

    self_2683 = self_2682;
    let _e2: MultiVector = self_2683;
    let _e4: MultiVector = self_2683;
    let _e10: MultiVector = self_2683;
    let _e16: MultiVector = self_2683;
    let _e22: MultiVector = self_2683;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))), (_e10.g2_ * vec3<f32>(-(1.0))), (_e16.g3_ * vec3<f32>(-(1.0))), _e22.g4_);
}

fn multi_vector_dual(self_2684: MultiVector) -> MultiVector {
    var self_2685: MultiVector;

    self_2685 = self_2684;
    let _e2: MultiVector = self_2685;
    let _e5: MultiVector = self_2685;
    let _e11: MultiVector = self_2685;
    let _e17: MultiVector = self_2685;
    let _e23: MultiVector = self_2685;
    return MultiVector(_e2.g0_.yx, (_e5.g4_ * vec4<f32>(-(1.0))), (_e11.g3_ * vec3<f32>(-(1.0))), (_e17.g2_ * vec3<f32>(-(1.0))), _e23.g1_);
}

fn multi_vector_anti_reversal(self_2686: MultiVector) -> MultiVector {
    var self_2687: MultiVector;

    self_2687 = self_2686;
    let _e2: MultiVector = self_2687;
    let _e4: MultiVector = self_2687;
    let _e10: MultiVector = self_2687;
    let _e16: MultiVector = self_2687;
    let _e22: MultiVector = self_2687;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))), (_e10.g2_ * vec3<f32>(-(1.0))), (_e16.g3_ * vec3<f32>(-(1.0))), _e22.g4_);
}

fn multi_vector_right_complement(self_2688: MultiVector) -> MultiVector {
    var self_2689: MultiVector;

    self_2689 = self_2688;
    let _e2: MultiVector = self_2689;
    let _e5: MultiVector = self_2689;
    let _e11: MultiVector = self_2689;
    let _e17: MultiVector = self_2689;
    let _e23: MultiVector = self_2689;
    return MultiVector(_e2.g0_.yx, (_e5.g4_ * vec4<f32>(-(1.0))), (_e11.g3_ * vec3<f32>(-(1.0))), (_e17.g2_ * vec3<f32>(-(1.0))), _e23.g1_);
}

fn multi_vector_left_complement(self_2690: MultiVector) -> MultiVector {
    var self_2691: MultiVector;

    self_2691 = self_2690;
    let _e2: MultiVector = self_2691;
    let _e5: MultiVector = self_2691;
    let _e7: MultiVector = self_2691;
    let _e13: MultiVector = self_2691;
    let _e19: MultiVector = self_2691;
    return MultiVector(_e2.g0_.yx, _e5.g4_, (_e7.g3_ * vec3<f32>(-(1.0))), (_e13.g2_ * vec3<f32>(-(1.0))), (_e19.g1_ * vec4<f32>(-(1.0))));
}

fn multi_vector_double_complement(self_2692: MultiVector) -> MultiVector {
    var self_2693: MultiVector;

    self_2693 = self_2692;
    let _e2: MultiVector = self_2693;
    let _e4: MultiVector = self_2693;
    let _e10: MultiVector = self_2693;
    let _e12: MultiVector = self_2693;
    let _e14: MultiVector = self_2693;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))), _e10.g2_, _e12.g3_, (_e14.g4_ * vec4<f32>(-(1.0))));
}

fn multi_vector_scalar_into(self_2694: MultiVector) -> Scalar {
    var self_2695: MultiVector;

    self_2695 = self_2694;
    let _e2: MultiVector = self_2695;
    return Scalar(_e2.g0_.x);
}

fn multi_vector_scalar_add(self_2696: MultiVector, other_2336: Scalar) -> MultiVector {
    var self_2697: MultiVector;
    var other_2337: Scalar;

    self_2697 = self_2696;
    other_2337 = other_2336;
    let _e4: MultiVector = self_2697;
    let _e6: Scalar = other_2337;
    let _e14: MultiVector = self_2697;
    let _e16: MultiVector = self_2697;
    let _e18: MultiVector = self_2697;
    let _e20: MultiVector = self_2697;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_) * vec2<f32>(1.0, 0.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_scalar_sub(self_2698: MultiVector, other_2338: Scalar) -> MultiVector {
    var self_2699: MultiVector;
    var other_2339: Scalar;

    self_2699 = self_2698;
    other_2339 = other_2338;
    let _e4: MultiVector = self_2699;
    let _e6: Scalar = other_2339;
    let _e14: MultiVector = self_2699;
    let _e16: MultiVector = self_2699;
    let _e18: MultiVector = self_2699;
    let _e20: MultiVector = self_2699;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_) * vec2<f32>(1.0, 0.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_scalar_geometric_product(self_2700: MultiVector, other_2340: Scalar) -> MultiVector {
    var self_2701: MultiVector;
    var other_2341: Scalar;

    self_2701 = self_2700;
    other_2341 = other_2340;
    let _e4: MultiVector = self_2701;
    let _e6: Scalar = other_2341;
    let _e10: MultiVector = self_2701;
    let _e12: Scalar = other_2341;
    let _e16: MultiVector = self_2701;
    let _e18: Scalar = other_2341;
    let _e22: MultiVector = self_2701;
    let _e24: Scalar = other_2341;
    let _e28: MultiVector = self_2701;
    let _e30: Scalar = other_2341;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_regressive_product(self_2702: MultiVector, other_2342: Scalar) -> Scalar {
    var self_2703: MultiVector;
    var other_2343: Scalar;

    self_2703 = self_2702;
    other_2343 = other_2342;
    let _e4: MultiVector = self_2703;
    let _e7: Scalar = other_2343;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_anti_wedge(self_2704: MultiVector, other_2344: Scalar) -> Scalar {
    var self_2705: MultiVector;
    var other_2345: Scalar;

    self_2705 = self_2704;
    other_2345 = other_2344;
    let _e4: MultiVector = self_2705;
    let _e7: Scalar = other_2345;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_meet(self_2706: MultiVector, other_2346: Scalar) -> Scalar {
    var self_2707: MultiVector;
    var other_2347: Scalar;

    self_2707 = self_2706;
    other_2347 = other_2346;
    let _e4: MultiVector = self_2707;
    let _e7: Scalar = other_2347;
    return Scalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_scalar_outer_product(self_2708: MultiVector, other_2348: Scalar) -> MultiVector {
    var self_2709: MultiVector;
    var other_2349: Scalar;

    self_2709 = self_2708;
    other_2349 = other_2348;
    let _e4: MultiVector = self_2709;
    let _e6: Scalar = other_2349;
    let _e10: MultiVector = self_2709;
    let _e12: Scalar = other_2349;
    let _e16: MultiVector = self_2709;
    let _e18: Scalar = other_2349;
    let _e22: MultiVector = self_2709;
    let _e24: Scalar = other_2349;
    let _e28: MultiVector = self_2709;
    let _e30: Scalar = other_2349;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_wedge(self_2710: MultiVector, other_2350: Scalar) -> MultiVector {
    var self_2711: MultiVector;
    var other_2351: Scalar;

    self_2711 = self_2710;
    other_2351 = other_2350;
    let _e4: MultiVector = self_2711;
    let _e6: Scalar = other_2351;
    let _e10: MultiVector = self_2711;
    let _e12: Scalar = other_2351;
    let _e16: MultiVector = self_2711;
    let _e18: Scalar = other_2351;
    let _e22: MultiVector = self_2711;
    let _e24: Scalar = other_2351;
    let _e28: MultiVector = self_2711;
    let _e30: Scalar = other_2351;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_join(self_2712: MultiVector, other_2352: Scalar) -> MultiVector {
    var self_2713: MultiVector;
    var other_2353: Scalar;

    self_2713 = self_2712;
    other_2353 = other_2352;
    let _e4: MultiVector = self_2713;
    let _e6: Scalar = other_2353;
    let _e10: MultiVector = self_2713;
    let _e12: Scalar = other_2353;
    let _e16: MultiVector = self_2713;
    let _e18: Scalar = other_2353;
    let _e22: MultiVector = self_2713;
    let _e24: Scalar = other_2353;
    let _e28: MultiVector = self_2713;
    let _e30: Scalar = other_2353;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_inner_product(self_2714: MultiVector, other_2354: Scalar) -> MultiVector {
    var self_2715: MultiVector;
    var other_2355: Scalar;

    self_2715 = self_2714;
    other_2355 = other_2354;
    let _e4: MultiVector = self_2715;
    let _e6: Scalar = other_2355;
    let _e10: MultiVector = self_2715;
    let _e12: Scalar = other_2355;
    let _e16: MultiVector = self_2715;
    let _e18: Scalar = other_2355;
    let _e22: MultiVector = self_2715;
    let _e24: Scalar = other_2355;
    let _e28: MultiVector = self_2715;
    let _e30: Scalar = other_2355;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_left_contraction(self_2716: MultiVector, other_2356: Scalar) -> Scalar {
    var self_2717: MultiVector;
    var other_2357: Scalar;

    self_2717 = self_2716;
    other_2357 = other_2356;
    let _e4: MultiVector = self_2717;
    let _e7: Scalar = other_2357;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_right_contraction(self_2718: MultiVector, other_2358: Scalar) -> MultiVector {
    var self_2719: MultiVector;
    var other_2359: Scalar;

    self_2719 = self_2718;
    other_2359 = other_2358;
    let _e4: MultiVector = self_2719;
    let _e6: Scalar = other_2359;
    let _e10: MultiVector = self_2719;
    let _e12: Scalar = other_2359;
    let _e16: MultiVector = self_2719;
    let _e18: Scalar = other_2359;
    let _e22: MultiVector = self_2719;
    let _e24: Scalar = other_2359;
    let _e28: MultiVector = self_2719;
    let _e30: Scalar = other_2359;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_scalar_scalar_product(self_2720: MultiVector, other_2360: Scalar) -> Scalar {
    var self_2721: MultiVector;
    var other_2361: Scalar;

    self_2721 = self_2720;
    other_2361 = other_2360;
    let _e4: MultiVector = self_2721;
    let _e7: Scalar = other_2361;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_dot(self_2722: MultiVector, other_2362: Scalar) -> Scalar {
    var self_2723: MultiVector;
    var other_2363: Scalar;

    self_2723 = self_2722;
    other_2363 = other_2362;
    let _e4: MultiVector = self_2723;
    let _e7: Scalar = other_2363;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_into(self_2724: MultiVector) -> AntiScalar {
    var self_2725: MultiVector;

    self_2725 = self_2724;
    let _e2: MultiVector = self_2725;
    return AntiScalar(_e2.g0_.y);
}

fn multi_vector_anti_scalar_add(self_2726: MultiVector, other_2364: AntiScalar) -> MultiVector {
    var self_2727: MultiVector;
    var other_2365: AntiScalar;

    self_2727 = self_2726;
    other_2365 = other_2364;
    let _e4: MultiVector = self_2727;
    let _e6: AntiScalar = other_2365;
    let _e14: MultiVector = self_2727;
    let _e16: MultiVector = self_2727;
    let _e18: MultiVector = self_2727;
    let _e20: MultiVector = self_2727;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_) * vec2<f32>(0.0, 1.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_anti_scalar_sub(self_2728: MultiVector, other_2366: AntiScalar) -> MultiVector {
    var self_2729: MultiVector;
    var other_2367: AntiScalar;

    self_2729 = self_2728;
    other_2367 = other_2366;
    let _e4: MultiVector = self_2729;
    let _e6: AntiScalar = other_2367;
    let _e14: MultiVector = self_2729;
    let _e16: MultiVector = self_2729;
    let _e18: MultiVector = self_2729;
    let _e20: MultiVector = self_2729;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_) * vec2<f32>(0.0, 1.0))), _e14.g1_, _e16.g2_, _e18.g3_, _e20.g4_);
}

fn multi_vector_anti_scalar_geometric_anti_product(self_2730: MultiVector, other_2368: AntiScalar) -> MultiVector {
    var self_2731: MultiVector;
    var other_2369: AntiScalar;

    self_2731 = self_2730;
    other_2369 = other_2368;
    let _e4: MultiVector = self_2731;
    let _e6: AntiScalar = other_2369;
    let _e10: MultiVector = self_2731;
    let _e12: AntiScalar = other_2369;
    let _e16: MultiVector = self_2731;
    let _e18: AntiScalar = other_2369;
    let _e22: MultiVector = self_2731;
    let _e24: AntiScalar = other_2369;
    let _e28: MultiVector = self_2731;
    let _e30: AntiScalar = other_2369;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_regressive_product(self_2732: MultiVector, other_2370: AntiScalar) -> MultiVector {
    var self_2733: MultiVector;
    var other_2371: AntiScalar;

    self_2733 = self_2732;
    other_2371 = other_2370;
    let _e4: MultiVector = self_2733;
    let _e6: AntiScalar = other_2371;
    let _e10: MultiVector = self_2733;
    let _e12: AntiScalar = other_2371;
    let _e16: MultiVector = self_2733;
    let _e18: AntiScalar = other_2371;
    let _e22: MultiVector = self_2733;
    let _e24: AntiScalar = other_2371;
    let _e28: MultiVector = self_2733;
    let _e30: AntiScalar = other_2371;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_anti_wedge(self_2734: MultiVector, other_2372: AntiScalar) -> MultiVector {
    var self_2735: MultiVector;
    var other_2373: AntiScalar;

    self_2735 = self_2734;
    other_2373 = other_2372;
    let _e4: MultiVector = self_2735;
    let _e6: AntiScalar = other_2373;
    let _e10: MultiVector = self_2735;
    let _e12: AntiScalar = other_2373;
    let _e16: MultiVector = self_2735;
    let _e18: AntiScalar = other_2373;
    let _e22: MultiVector = self_2735;
    let _e24: AntiScalar = other_2373;
    let _e28: MultiVector = self_2735;
    let _e30: AntiScalar = other_2373;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_meet(self_2736: MultiVector, other_2374: AntiScalar) -> MultiVector {
    var self_2737: MultiVector;
    var other_2375: AntiScalar;

    self_2737 = self_2736;
    other_2375 = other_2374;
    let _e4: MultiVector = self_2737;
    let _e6: AntiScalar = other_2375;
    let _e10: MultiVector = self_2737;
    let _e12: AntiScalar = other_2375;
    let _e16: MultiVector = self_2737;
    let _e18: AntiScalar = other_2375;
    let _e22: MultiVector = self_2737;
    let _e24: AntiScalar = other_2375;
    let _e28: MultiVector = self_2737;
    let _e30: AntiScalar = other_2375;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_outer_product(self_2738: MultiVector, other_2376: AntiScalar) -> AntiScalar {
    var self_2739: MultiVector;
    var other_2377: AntiScalar;

    self_2739 = self_2738;
    other_2377 = other_2376;
    let _e4: MultiVector = self_2739;
    let _e7: AntiScalar = other_2377;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_wedge(self_2740: MultiVector, other_2378: AntiScalar) -> AntiScalar {
    var self_2741: MultiVector;
    var other_2379: AntiScalar;

    self_2741 = self_2740;
    other_2379 = other_2378;
    let _e4: MultiVector = self_2741;
    let _e7: AntiScalar = other_2379;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_join(self_2742: MultiVector, other_2380: AntiScalar) -> AntiScalar {
    var self_2743: MultiVector;
    var other_2381: AntiScalar;

    self_2743 = self_2742;
    other_2381 = other_2380;
    let _e4: MultiVector = self_2743;
    let _e7: AntiScalar = other_2381;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_inner_anti_product(self_2744: MultiVector, other_2382: AntiScalar) -> MultiVector {
    var self_2745: MultiVector;
    var other_2383: AntiScalar;

    self_2745 = self_2744;
    other_2383 = other_2382;
    let _e4: MultiVector = self_2745;
    let _e6: AntiScalar = other_2383;
    let _e10: MultiVector = self_2745;
    let _e12: AntiScalar = other_2383;
    let _e16: MultiVector = self_2745;
    let _e18: AntiScalar = other_2383;
    let _e22: MultiVector = self_2745;
    let _e24: AntiScalar = other_2383;
    let _e28: MultiVector = self_2745;
    let _e30: AntiScalar = other_2383;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_left_anti_contraction(self_2746: MultiVector, other_2384: AntiScalar) -> AntiScalar {
    var self_2747: MultiVector;
    var other_2385: AntiScalar;

    self_2747 = self_2746;
    other_2385 = other_2384;
    let _e4: MultiVector = self_2747;
    let _e7: AntiScalar = other_2385;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_anti_scalar_right_anti_contraction(self_2748: MultiVector, other_2386: AntiScalar) -> MultiVector {
    var self_2749: MultiVector;
    var other_2387: AntiScalar;

    self_2749 = self_2748;
    other_2387 = other_2386;
    let _e4: MultiVector = self_2749;
    let _e6: AntiScalar = other_2387;
    let _e10: MultiVector = self_2749;
    let _e12: AntiScalar = other_2387;
    let _e16: MultiVector = self_2749;
    let _e18: AntiScalar = other_2387;
    let _e22: MultiVector = self_2749;
    let _e24: AntiScalar = other_2387;
    let _e28: MultiVector = self_2749;
    let _e30: AntiScalar = other_2387;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec3<f32>(_e18.g0_)), (_e22.g3_ * vec3<f32>(_e24.g0_)), (_e28.g4_ * vec4<f32>(_e30.g0_)));
}

fn multi_vector_anti_scalar_anti_scalar_product(self_2750: MultiVector, other_2388: AntiScalar) -> AntiScalar {
    var self_2751: MultiVector;
    var other_2389: AntiScalar;

    self_2751 = self_2750;
    other_2389 = other_2388;
    let _e4: MultiVector = self_2751;
    let _e7: AntiScalar = other_2389;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_anti_scalar_anti_dot(self_2752: MultiVector, other_2390: AntiScalar) -> AntiScalar {
    var self_2753: MultiVector;
    var other_2391: AntiScalar;

    self_2753 = self_2752;
    other_2391 = other_2390;
    let _e4: MultiVector = self_2753;
    let _e7: AntiScalar = other_2391;
    return AntiScalar((_e4.g0_.y * _e7.g0_));
}

fn multi_vector_homogeneous_magnitude_into(self_2754: MultiVector) -> HomogeneousMagnitude {
    var self_2755: MultiVector;

    self_2755 = self_2754;
    let _e2: MultiVector = self_2755;
    return HomogeneousMagnitude(_e2.g0_);
}

fn multi_vector_homogeneous_magnitude_add(self_2756: MultiVector, other_2392: HomogeneousMagnitude) -> MultiVector {
    var self_2757: MultiVector;
    var other_2393: HomogeneousMagnitude;

    self_2757 = self_2756;
    other_2393 = other_2392;
    let _e4: MultiVector = self_2757;
    let _e6: HomogeneousMagnitude = other_2393;
    let _e9: MultiVector = self_2757;
    let _e11: MultiVector = self_2757;
    let _e13: MultiVector = self_2757;
    let _e15: MultiVector = self_2757;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_homogeneous_magnitude_sub(self_2758: MultiVector, other_2394: HomogeneousMagnitude) -> MultiVector {
    var self_2759: MultiVector;
    var other_2395: HomogeneousMagnitude;

    self_2759 = self_2758;
    other_2395 = other_2394;
    let _e4: MultiVector = self_2759;
    let _e6: HomogeneousMagnitude = other_2395;
    let _e9: MultiVector = self_2759;
    let _e11: MultiVector = self_2759;
    let _e13: MultiVector = self_2759;
    let _e15: MultiVector = self_2759;
    return MultiVector((_e4.g0_ - _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_homogeneous_magnitude_geometric_product(self_2760: MultiVector, other_2396: HomogeneousMagnitude) -> MultiVector {
    var self_2761: MultiVector;
    var other_2397: HomogeneousMagnitude;

    self_2761 = self_2760;
    other_2397 = other_2396;
    let _e4: MultiVector = self_2761;
    let _e8: HomogeneousMagnitude = other_2397;
    let _e11: MultiVector = self_2761;
    let _e13: HomogeneousMagnitude = other_2397;
    let _e23: MultiVector = self_2761;
    let _e27: HomogeneousMagnitude = other_2397;
    let _e38: MultiVector = self_2761;
    let _e40: HomogeneousMagnitude = other_2397;
    let _e46: MultiVector = self_2761;
    let _e50: HomogeneousMagnitude = other_2397;
    let _e60: MultiVector = self_2761;
    let _e64: HomogeneousMagnitude = other_2397;
    let _e75: MultiVector = self_2761;
    let _e79: HomogeneousMagnitude = other_2397;
    let _e90: MultiVector = self_2761;
    let _e92: HomogeneousMagnitude = other_2397;
    let _e98: MultiVector = self_2761;
    let _e100: HomogeneousMagnitude = other_2397;
    let _e105: MultiVector = self_2761;
    let _e109: HomogeneousMagnitude = other_2397;
    let _e120: MultiVector = self_2761;
    let _e124: HomogeneousMagnitude = other_2397;
    let _e136: MultiVector = self_2761;
    let _e140: HomogeneousMagnitude = other_2397;
    let _e152: MultiVector = self_2761;
    let _e155: MultiVector = self_2761;
    let _e158: MultiVector = self_2761;
    let _e161: MultiVector = self_2761;
    let _e165: HomogeneousMagnitude = other_2397;
    let _e168: HomogeneousMagnitude = other_2397;
    let _e171: HomogeneousMagnitude = other_2397;
    let _e174: HomogeneousMagnitude = other_2397;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (((vec4<f32>(_e23.g4_.w) * vec4<f32>(_e27.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e38.g1_ * vec4<f32>(_e40.g0_.x))), (((((vec3<f32>(_e46.g3_.x) * vec3<f32>(_e50.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e60.g3_.y) * vec3<f32>(_e64.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e75.g3_.z) * vec3<f32>(_e79.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e90.g2_ * vec3<f32>(_e92.g0_.x))), (_e98.g3_ * vec3<f32>(_e100.g0_.x)), (((((vec4<f32>(_e105.g4_.x) * vec4<f32>(_e109.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e120.g4_.y) * vec4<f32>(_e124.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e136.g4_.z) * vec4<f32>(_e140.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e152.g1_.x, _e155.g1_.y, _e158.g1_.z, _e161.g4_.w) * vec4<f32>(_e165.g0_.y, _e168.g0_.y, _e171.g0_.y, _e174.g0_.x))));
}

fn multi_vector_homogeneous_magnitude_geometric_anti_product(self_2762: MultiVector, other_2398: HomogeneousMagnitude) -> MultiVector {
    var self_2763: MultiVector;
    var other_2399: HomogeneousMagnitude;

    self_2763 = self_2762;
    other_2399 = other_2398;
    let _e4: MultiVector = self_2763;
    let _e8: HomogeneousMagnitude = other_2399;
    let _e11: MultiVector = self_2763;
    let _e15: HomogeneousMagnitude = other_2399;
    let _e24: MultiVector = self_2763;
    let _e28: HomogeneousMagnitude = other_2399;
    let _e40: MultiVector = self_2763;
    let _e44: HomogeneousMagnitude = other_2399;
    let _e57: MultiVector = self_2763;
    let _e61: HomogeneousMagnitude = other_2399;
    let _e74: MultiVector = self_2763;
    let _e76: HomogeneousMagnitude = other_2399;
    let _e82: MultiVector = self_2763;
    let _e84: HomogeneousMagnitude = other_2399;
    let _e89: MultiVector = self_2763;
    let _e93: HomogeneousMagnitude = other_2399;
    let _e103: MultiVector = self_2763;
    let _e107: HomogeneousMagnitude = other_2399;
    let _e118: MultiVector = self_2763;
    let _e122: HomogeneousMagnitude = other_2399;
    let _e133: MultiVector = self_2763;
    let _e135: HomogeneousMagnitude = other_2399;
    let _e141: MultiVector = self_2763;
    let _e145: HomogeneousMagnitude = other_2399;
    let _e156: MultiVector = self_2763;
    let _e159: MultiVector = self_2763;
    let _e162: MultiVector = self_2763;
    let _e165: MultiVector = self_2763;
    let _e169: HomogeneousMagnitude = other_2399;
    let _e172: HomogeneousMagnitude = other_2399;
    let _e175: HomogeneousMagnitude = other_2399;
    let _e178: HomogeneousMagnitude = other_2399;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((vec4<f32>(_e24.g4_.x) * vec4<f32>(_e28.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e40.g4_.y) * vec4<f32>(_e44.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e57.g4_.z) * vec4<f32>(_e61.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e74.g1_ * vec4<f32>(_e76.g0_.y))), (_e82.g2_ * vec3<f32>(_e84.g0_.y)), (((((vec3<f32>(_e89.g3_.x) * vec3<f32>(_e93.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e103.g3_.y) * vec3<f32>(_e107.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e118.g3_.z) * vec3<f32>(_e122.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e133.g2_ * vec3<f32>(_e135.g0_.x))), (((vec4<f32>(_e141.g4_.w) * vec4<f32>(_e145.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e156.g4_.x, _e159.g4_.y, _e162.g4_.z, _e165.g1_.w) * vec4<f32>(_e169.g0_.y, _e172.g0_.y, _e175.g0_.y, _e178.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_homogeneous_magnitude_regressive_product(self_2764: MultiVector, other_2400: HomogeneousMagnitude) -> MultiVector {
    var self_2765: MultiVector;
    var other_2401: HomogeneousMagnitude;

    self_2765 = self_2764;
    other_2401 = other_2400;
    let _e4: MultiVector = self_2765;
    let _e8: HomogeneousMagnitude = other_2401;
    let _e11: MultiVector = self_2765;
    let _e15: HomogeneousMagnitude = other_2401;
    let _e24: MultiVector = self_2765;
    let _e26: HomogeneousMagnitude = other_2401;
    let _e31: MultiVector = self_2765;
    let _e33: HomogeneousMagnitude = other_2401;
    let _e38: MultiVector = self_2765;
    let _e40: HomogeneousMagnitude = other_2401;
    let _e45: MultiVector = self_2765;
    let _e47: HomogeneousMagnitude = other_2401;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4<f32>(_e26.g0_.y)), (_e31.g2_ * vec3<f32>(_e33.g0_.y)), (_e38.g3_ * vec3<f32>(_e40.g0_.y)), (_e45.g4_ * vec4<f32>(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_anti_wedge(self_2766: MultiVector, other_2402: HomogeneousMagnitude) -> MultiVector {
    var self_2767: MultiVector;
    var other_2403: HomogeneousMagnitude;

    self_2767 = self_2766;
    other_2403 = other_2402;
    let _e4: MultiVector = self_2767;
    let _e8: HomogeneousMagnitude = other_2403;
    let _e11: MultiVector = self_2767;
    let _e15: HomogeneousMagnitude = other_2403;
    let _e24: MultiVector = self_2767;
    let _e26: HomogeneousMagnitude = other_2403;
    let _e31: MultiVector = self_2767;
    let _e33: HomogeneousMagnitude = other_2403;
    let _e38: MultiVector = self_2767;
    let _e40: HomogeneousMagnitude = other_2403;
    let _e45: MultiVector = self_2767;
    let _e47: HomogeneousMagnitude = other_2403;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4<f32>(_e26.g0_.y)), (_e31.g2_ * vec3<f32>(_e33.g0_.y)), (_e38.g3_ * vec3<f32>(_e40.g0_.y)), (_e45.g4_ * vec4<f32>(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_meet(self_2768: MultiVector, other_2404: HomogeneousMagnitude) -> MultiVector {
    var self_2769: MultiVector;
    var other_2405: HomogeneousMagnitude;

    self_2769 = self_2768;
    other_2405 = other_2404;
    let _e4: MultiVector = self_2769;
    let _e8: HomogeneousMagnitude = other_2405;
    let _e11: MultiVector = self_2769;
    let _e15: HomogeneousMagnitude = other_2405;
    let _e24: MultiVector = self_2769;
    let _e26: HomogeneousMagnitude = other_2405;
    let _e31: MultiVector = self_2769;
    let _e33: HomogeneousMagnitude = other_2405;
    let _e38: MultiVector = self_2769;
    let _e40: HomogeneousMagnitude = other_2405;
    let _e45: MultiVector = self_2769;
    let _e47: HomogeneousMagnitude = other_2405;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (_e24.g1_ * vec4<f32>(_e26.g0_.y)), (_e31.g2_ * vec3<f32>(_e33.g0_.y)), (_e38.g3_ * vec3<f32>(_e40.g0_.y)), (_e45.g4_ * vec4<f32>(_e47.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_outer_product(self_2770: MultiVector, other_2406: HomogeneousMagnitude) -> MultiVector {
    var self_2771: MultiVector;
    var other_2407: HomogeneousMagnitude;

    self_2771 = self_2770;
    other_2407 = other_2406;
    let _e4: MultiVector = self_2771;
    let _e8: HomogeneousMagnitude = other_2407;
    let _e11: MultiVector = self_2771;
    let _e13: HomogeneousMagnitude = other_2407;
    let _e23: MultiVector = self_2771;
    let _e25: HomogeneousMagnitude = other_2407;
    let _e30: MultiVector = self_2771;
    let _e32: HomogeneousMagnitude = other_2407;
    let _e37: MultiVector = self_2771;
    let _e39: HomogeneousMagnitude = other_2407;
    let _e44: MultiVector = self_2771;
    let _e46: HomogeneousMagnitude = other_2407;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4<f32>(_e25.g0_.x)), (_e30.g2_ * vec3<f32>(_e32.g0_.x)), (_e37.g3_ * vec3<f32>(_e39.g0_.x)), (_e44.g4_ * vec4<f32>(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_wedge(self_2772: MultiVector, other_2408: HomogeneousMagnitude) -> MultiVector {
    var self_2773: MultiVector;
    var other_2409: HomogeneousMagnitude;

    self_2773 = self_2772;
    other_2409 = other_2408;
    let _e4: MultiVector = self_2773;
    let _e8: HomogeneousMagnitude = other_2409;
    let _e11: MultiVector = self_2773;
    let _e13: HomogeneousMagnitude = other_2409;
    let _e23: MultiVector = self_2773;
    let _e25: HomogeneousMagnitude = other_2409;
    let _e30: MultiVector = self_2773;
    let _e32: HomogeneousMagnitude = other_2409;
    let _e37: MultiVector = self_2773;
    let _e39: HomogeneousMagnitude = other_2409;
    let _e44: MultiVector = self_2773;
    let _e46: HomogeneousMagnitude = other_2409;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4<f32>(_e25.g0_.x)), (_e30.g2_ * vec3<f32>(_e32.g0_.x)), (_e37.g3_ * vec3<f32>(_e39.g0_.x)), (_e44.g4_ * vec4<f32>(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_join(self_2774: MultiVector, other_2410: HomogeneousMagnitude) -> MultiVector {
    var self_2775: MultiVector;
    var other_2411: HomogeneousMagnitude;

    self_2775 = self_2774;
    other_2411 = other_2410;
    let _e4: MultiVector = self_2775;
    let _e8: HomogeneousMagnitude = other_2411;
    let _e11: MultiVector = self_2775;
    let _e13: HomogeneousMagnitude = other_2411;
    let _e23: MultiVector = self_2775;
    let _e25: HomogeneousMagnitude = other_2411;
    let _e30: MultiVector = self_2775;
    let _e32: HomogeneousMagnitude = other_2411;
    let _e37: MultiVector = self_2775;
    let _e39: HomogeneousMagnitude = other_2411;
    let _e44: MultiVector = self_2775;
    let _e46: HomogeneousMagnitude = other_2411;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (_e23.g1_ * vec4<f32>(_e25.g0_.x)), (_e30.g2_ * vec3<f32>(_e32.g0_.x)), (_e37.g3_ * vec3<f32>(_e39.g0_.x)), (_e44.g4_ * vec4<f32>(_e46.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_inner_product(self_2776: MultiVector, other_2412: HomogeneousMagnitude) -> MultiVector {
    var self_2777: MultiVector;
    var other_2413: HomogeneousMagnitude;

    self_2777 = self_2776;
    other_2413 = other_2412;
    let _e4: MultiVector = self_2777;
    let _e8: HomogeneousMagnitude = other_2413;
    let _e11: MultiVector = self_2777;
    let _e13: HomogeneousMagnitude = other_2413;
    let _e23: MultiVector = self_2777;
    let _e27: HomogeneousMagnitude = other_2413;
    let _e38: MultiVector = self_2777;
    let _e40: HomogeneousMagnitude = other_2413;
    let _e46: MultiVector = self_2777;
    let _e50: HomogeneousMagnitude = other_2413;
    let _e60: MultiVector = self_2777;
    let _e64: HomogeneousMagnitude = other_2413;
    let _e75: MultiVector = self_2777;
    let _e79: HomogeneousMagnitude = other_2413;
    let _e90: MultiVector = self_2777;
    let _e92: HomogeneousMagnitude = other_2413;
    let _e98: MultiVector = self_2777;
    let _e100: HomogeneousMagnitude = other_2413;
    let _e105: MultiVector = self_2777;
    let _e109: HomogeneousMagnitude = other_2413;
    let _e120: MultiVector = self_2777;
    let _e124: HomogeneousMagnitude = other_2413;
    let _e136: MultiVector = self_2777;
    let _e140: HomogeneousMagnitude = other_2413;
    let _e152: MultiVector = self_2777;
    let _e155: MultiVector = self_2777;
    let _e158: MultiVector = self_2777;
    let _e161: MultiVector = self_2777;
    let _e165: HomogeneousMagnitude = other_2413;
    let _e168: HomogeneousMagnitude = other_2413;
    let _e171: HomogeneousMagnitude = other_2413;
    let _e174: HomogeneousMagnitude = other_2413;
    return MultiVector(((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec2<f32>(_e13.g0_.x)) * vec2<f32>(0.0, 1.0))), (((vec4<f32>(_e23.g4_.w) * vec4<f32>(_e27.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + (_e38.g1_ * vec4<f32>(_e40.g0_.x))), (((((vec3<f32>(_e46.g3_.x) * vec3<f32>(_e50.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e60.g3_.y) * vec3<f32>(_e64.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e75.g3_.z) * vec3<f32>(_e79.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e90.g2_ * vec3<f32>(_e92.g0_.x))), (_e98.g3_ * vec3<f32>(_e100.g0_.x)), (((((vec4<f32>(_e105.g4_.x) * vec4<f32>(_e109.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e120.g4_.y) * vec4<f32>(_e124.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e136.g4_.z) * vec4<f32>(_e140.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + (vec4<f32>(_e152.g1_.x, _e155.g1_.y, _e158.g1_.z, _e161.g4_.w) * vec4<f32>(_e165.g0_.y, _e168.g0_.y, _e171.g0_.y, _e174.g0_.x))));
}

fn multi_vector_homogeneous_magnitude_inner_anti_product(self_2778: MultiVector, other_2414: HomogeneousMagnitude) -> MultiVector {
    var self_2779: MultiVector;
    var other_2415: HomogeneousMagnitude;

    self_2779 = self_2778;
    other_2415 = other_2414;
    let _e4: MultiVector = self_2779;
    let _e8: HomogeneousMagnitude = other_2415;
    let _e11: MultiVector = self_2779;
    let _e15: HomogeneousMagnitude = other_2415;
    let _e24: MultiVector = self_2779;
    let _e28: HomogeneousMagnitude = other_2415;
    let _e40: MultiVector = self_2779;
    let _e44: HomogeneousMagnitude = other_2415;
    let _e57: MultiVector = self_2779;
    let _e61: HomogeneousMagnitude = other_2415;
    let _e74: MultiVector = self_2779;
    let _e76: HomogeneousMagnitude = other_2415;
    let _e82: MultiVector = self_2779;
    let _e84: HomogeneousMagnitude = other_2415;
    let _e89: MultiVector = self_2779;
    let _e93: HomogeneousMagnitude = other_2415;
    let _e103: MultiVector = self_2779;
    let _e107: HomogeneousMagnitude = other_2415;
    let _e118: MultiVector = self_2779;
    let _e122: HomogeneousMagnitude = other_2415;
    let _e133: MultiVector = self_2779;
    let _e135: HomogeneousMagnitude = other_2415;
    let _e141: MultiVector = self_2779;
    let _e145: HomogeneousMagnitude = other_2415;
    let _e156: MultiVector = self_2779;
    let _e159: MultiVector = self_2779;
    let _e162: MultiVector = self_2779;
    let _e165: MultiVector = self_2779;
    let _e169: HomogeneousMagnitude = other_2415;
    let _e172: HomogeneousMagnitude = other_2415;
    let _e175: HomogeneousMagnitude = other_2415;
    let _e178: HomogeneousMagnitude = other_2415;
    return MultiVector(((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g0_.x) * _e15.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((vec4<f32>(_e24.g4_.x) * vec4<f32>(_e28.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e40.g4_.y) * vec4<f32>(_e44.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e57.g4_.z) * vec4<f32>(_e61.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + (_e74.g1_ * vec4<f32>(_e76.g0_.y))), (_e82.g2_ * vec3<f32>(_e84.g0_.y)), (((((vec3<f32>(_e89.g3_.x) * vec3<f32>(_e93.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0)) + ((vec3<f32>(_e103.g3_.y) * vec3<f32>(_e107.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e118.g3_.z) * vec3<f32>(_e122.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + (_e133.g2_ * vec3<f32>(_e135.g0_.x))), (((vec4<f32>(_e141.g4_.w) * vec4<f32>(_e145.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0)) + ((vec4<f32>(_e156.g4_.x, _e159.g4_.y, _e162.g4_.z, _e165.g1_.w) * vec4<f32>(_e169.g0_.y, _e172.g0_.y, _e175.g0_.y, _e178.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_homogeneous_magnitude_right_contraction(self_2780: MultiVector, other_2416: HomogeneousMagnitude) -> MultiVector {
    var self_2781: MultiVector;
    var other_2417: HomogeneousMagnitude;

    self_2781 = self_2780;
    other_2417 = other_2416;
    let _e4: MultiVector = self_2781;
    let _e6: HomogeneousMagnitude = other_2417;
    let _e11: MultiVector = self_2781;
    let _e13: HomogeneousMagnitude = other_2417;
    let _e18: MultiVector = self_2781;
    let _e20: HomogeneousMagnitude = other_2417;
    let _e25: MultiVector = self_2781;
    let _e27: HomogeneousMagnitude = other_2417;
    let _e32: MultiVector = self_2781;
    let _e34: HomogeneousMagnitude = other_2417;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_.x)), (_e11.g1_ * vec4<f32>(_e13.g0_.x)), (_e18.g2_ * vec3<f32>(_e20.g0_.x)), (_e25.g3_ * vec3<f32>(_e27.g0_.x)), (_e32.g4_ * vec4<f32>(_e34.g0_.x)));
}

fn multi_vector_homogeneous_magnitude_right_anti_contraction(self_2782: MultiVector, other_2418: HomogeneousMagnitude) -> MultiVector {
    var self_2783: MultiVector;
    var other_2419: HomogeneousMagnitude;

    self_2783 = self_2782;
    other_2419 = other_2418;
    let _e4: MultiVector = self_2783;
    let _e6: HomogeneousMagnitude = other_2419;
    let _e11: MultiVector = self_2783;
    let _e13: HomogeneousMagnitude = other_2419;
    let _e18: MultiVector = self_2783;
    let _e20: HomogeneousMagnitude = other_2419;
    let _e25: MultiVector = self_2783;
    let _e27: HomogeneousMagnitude = other_2419;
    let _e32: MultiVector = self_2783;
    let _e34: HomogeneousMagnitude = other_2419;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_.y)), (_e11.g1_ * vec4<f32>(_e13.g0_.y)), (_e18.g2_ * vec3<f32>(_e20.g0_.y)), (_e25.g3_ * vec3<f32>(_e27.g0_.y)), (_e32.g4_ * vec4<f32>(_e34.g0_.y)));
}

fn multi_vector_homogeneous_magnitude_scalar_product(self_2784: MultiVector, other_2420: HomogeneousMagnitude) -> Scalar {
    var self_2785: MultiVector;
    var other_2421: HomogeneousMagnitude;

    self_2785 = self_2784;
    other_2421 = other_2420;
    let _e4: MultiVector = self_2785;
    let _e7: HomogeneousMagnitude = other_2421;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn multi_vector_homogeneous_magnitude_dot(self_2786: MultiVector, other_2422: HomogeneousMagnitude) -> Scalar {
    var self_2787: MultiVector;
    var other_2423: HomogeneousMagnitude;

    self_2787 = self_2786;
    other_2423 = other_2422;
    let _e4: MultiVector = self_2787;
    let _e7: HomogeneousMagnitude = other_2423;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn multi_vector_homogeneous_magnitude_anti_scalar_product(self_2788: MultiVector, other_2424: HomogeneousMagnitude) -> AntiScalar {
    var self_2789: MultiVector;
    var other_2425: HomogeneousMagnitude;

    self_2789 = self_2788;
    other_2425 = other_2424;
    let _e4: MultiVector = self_2789;
    let _e7: HomogeneousMagnitude = other_2425;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn multi_vector_homogeneous_magnitude_anti_dot(self_2790: MultiVector, other_2426: HomogeneousMagnitude) -> AntiScalar {
    var self_2791: MultiVector;
    var other_2427: HomogeneousMagnitude;

    self_2791 = self_2790;
    other_2427 = other_2426;
    let _e4: MultiVector = self_2791;
    let _e7: HomogeneousMagnitude = other_2427;
    return AntiScalar((_e4.g0_.y * _e7.g0_.y));
}

fn multi_vector_point_into(self_2792: MultiVector) -> Point {
    var self_2793: MultiVector;

    self_2793 = self_2792;
    let _e2: MultiVector = self_2793;
    return Point(_e2.g1_);
}

fn multi_vector_point_add(self_2794: MultiVector, other_2428: Point) -> MultiVector {
    var self_2795: MultiVector;
    var other_2429: Point;

    self_2795 = self_2794;
    other_2429 = other_2428;
    let _e4: MultiVector = self_2795;
    let _e6: MultiVector = self_2795;
    let _e8: Point = other_2429;
    let _e11: MultiVector = self_2795;
    let _e13: MultiVector = self_2795;
    let _e15: MultiVector = self_2795;
    return MultiVector(_e4.g0_, (_e6.g1_ + _e8.g0_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_point_sub(self_2796: MultiVector, other_2430: Point) -> MultiVector {
    var self_2797: MultiVector;
    var other_2431: Point;

    self_2797 = self_2796;
    other_2431 = other_2430;
    let _e4: MultiVector = self_2797;
    let _e6: MultiVector = self_2797;
    let _e8: Point = other_2431;
    let _e11: MultiVector = self_2797;
    let _e13: MultiVector = self_2797;
    let _e15: MultiVector = self_2797;
    return MultiVector(_e4.g0_, (_e6.g1_ - _e8.g0_), _e11.g2_, _e13.g3_, _e15.g4_);
}

fn multi_vector_point_geometric_product(self_2798: MultiVector, other_2432: Point) -> MultiVector {
    var self_2799: MultiVector;
    var other_2433: Point;

    self_2799 = self_2798;
    other_2433 = other_2432;
    let _e4: MultiVector = self_2799;
    let _e8: Point = other_2433;
    let _e17: MultiVector = self_2799;
    let _e21: Point = other_2433;
    let _e31: MultiVector = self_2799;
    let _e35: Point = other_2433;
    let _e46: MultiVector = self_2799;
    let _e50: Point = other_2433;
    let _e61: MultiVector = self_2799;
    let _e65: Point = other_2433;
    let _e76: MultiVector = self_2799;
    let _e79: MultiVector = self_2799;
    let _e83: Point = other_2433;
    let _e94: MultiVector = self_2799;
    let _e98: Point = other_2433;
    let _e101: MultiVector = self_2799;
    let _e105: Point = other_2433;
    let _e117: MultiVector = self_2799;
    let _e121: Point = other_2433;
    let _e133: MultiVector = self_2799;
    let _e137: Point = other_2433;
    let _e149: MultiVector = self_2799;
    let _e153: Point = other_2433;
    let _e165: MultiVector = self_2799;
    let _e168: MultiVector = self_2799;
    let _e171: MultiVector = self_2799;
    let _e174: MultiVector = self_2799;
    let _e178: Point = other_2433;
    let _e190: MultiVector = self_2799;
    let _e194: Point = other_2433;
    let _e197: Point = other_2433;
    let _e200: Point = other_2433;
    let _e205: MultiVector = self_2799;
    let _e209: Point = other_2433;
    let _e212: Point = other_2433;
    let _e215: Point = other_2433;
    let _e227: MultiVector = self_2799;
    let _e231: Point = other_2433;
    let _e234: Point = other_2433;
    let _e237: Point = other_2433;
    let _e249: MultiVector = self_2799;
    let _e253: Point = other_2433;
    let _e256: Point = other_2433;
    let _e259: Point = other_2433;
    let _e271: MultiVector = self_2799;
    let _e274: MultiVector = self_2799;
    let _e277: MultiVector = self_2799;
    let _e281: Point = other_2433;
    let _e291: MultiVector = self_2799;
    let _e295: Point = other_2433;
    let _e298: Point = other_2433;
    let _e301: Point = other_2433;
    let _e312: MultiVector = self_2799;
    let _e316: Point = other_2433;
    let _e319: Point = other_2433;
    let _e322: Point = other_2433;
    let _e334: MultiVector = self_2799;
    let _e338: Point = other_2433;
    let _e341: Point = other_2433;
    let _e344: Point = other_2433;
    let _e350: MultiVector = self_2799;
    let _e354: Point = other_2433;
    let _e357: Point = other_2433;
    let _e360: Point = other_2433;
    let _e372: MultiVector = self_2799;
    let _e376: Point = other_2433;
    let _e387: MultiVector = self_2799;
    let _e391: Point = other_2433;
    let _e403: MultiVector = self_2799;
    let _e407: Point = other_2433;
    let _e419: MultiVector = self_2799;
    let _e423: Point = other_2433;
    let _e435: MultiVector = self_2799;
    let _e439: Point = other_2433;
    let _e451: MultiVector = self_2799;
    let _e455: Point = other_2433;
    let _e467: MultiVector = self_2799;
    let _e470: MultiVector = self_2799;
    let _e473: MultiVector = self_2799;
    let _e476: MultiVector = self_2799;
    let _e480: Point = other_2433;
    return MultiVector((((((((vec2<f32>(_e4.g1_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g1_.z) * vec2<f32>(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g4_.y) * vec2<f32>(_e35.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e46.g4_.z) * vec2<f32>(_e50.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e61.g4_.w) * vec2<f32>(_e65.g0_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e76.g1_.x, _e79.g4_.x) * vec2<f32>(_e83.g0_.x)) * vec2<f32>(1.0, -(1.0)))), ((((((vec4<f32>(_e94.g0_.x) * _e98.g0_) + ((vec4<f32>(_e101.g2_.y) * vec4<f32>(_e105.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e117.g2_.z) * vec4<f32>(_e121.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e133.g3_.y) * _e137.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e149.g3_.z) * _e153.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e165.g2_.x, _e168.g3_.x, _e171.g3_.x, _e174.g2_.x) * _e178.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), (((((vec3<f32>(_e190.g1_.w) * vec3<f32>(_e194.g0_.x, _e197.g0_.y, _e200.g0_.z)) + ((vec3<f32>(_e205.g4_.x) * vec3<f32>(_e209.g0_.z, _e212.g0_.z, _e215.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e227.g4_.y) * vec3<f32>(_e231.g0_.z, _e234.g0_.z, _e237.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e249.g4_.z) * vec3<f32>(_e253.g0_.y, _e256.g0_.x, _e259.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e271.g1_.x, _e274.g1_.y, _e277.g1_.z) * vec3<f32>(_e281.g0_.w)) * vec3<f32>(-(1.0)))), (((((vec3<f32>(_e291.g1_.y) * vec3<f32>(_e295.g0_.z, _e298.g0_.z, _e301.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e312.g1_.z) * vec3<f32>(_e316.g0_.y, _e319.g0_.x, _e322.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) - (vec3<f32>(_e334.g4_.w) * vec3<f32>(_e338.g0_.x, _e341.g0_.y, _e344.g0_.z))) + ((vec3<f32>(_e350.g1_.x) * vec3<f32>(_e354.g0_.x, _e357.g0_.z, _e360.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e372.g2_.x) * _e376.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0)) + ((vec4<f32>(_e387.g2_.y) * _e391.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e403.g2_.z) * _e407.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e419.g3_.x) * _e423.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e435.g3_.y) * _e439.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e451.g3_.z) * _e455.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e467.g0_.y, _e470.g0_.y, _e473.g0_.y, _e476.g0_.x) * _e480.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_point_geometric_anti_product(self_2800: MultiVector, other_2434: Point) -> MultiVector {
    var self_2801: MultiVector;
    var other_2435: Point;

    self_2801 = self_2800;
    other_2435 = other_2434;
    let _e4: MultiVector = self_2801;
    let _e8: Point = other_2435;
    let _e18: MultiVector = self_2801;
    let _e22: Point = other_2435;
    let _e33: MultiVector = self_2801;
    let _e37: Point = other_2435;
    let _e48: MultiVector = self_2801;
    let _e51: MultiVector = self_2801;
    let _e55: Point = other_2435;
    let _e58: Point = other_2435;
    let _e68: MultiVector = self_2801;
    let _e72: Point = other_2435;
    let _e75: MultiVector = self_2801;
    let _e79: Point = other_2435;
    let _e91: MultiVector = self_2801;
    let _e95: Point = other_2435;
    let _e107: MultiVector = self_2801;
    let _e111: Point = other_2435;
    let _e123: MultiVector = self_2801;
    let _e127: Point = other_2435;
    let _e139: MultiVector = self_2801;
    let _e142: MultiVector = self_2801;
    let _e145: MultiVector = self_2801;
    let _e148: MultiVector = self_2801;
    let _e152: Point = other_2435;
    let _e164: MultiVector = self_2801;
    let _e167: MultiVector = self_2801;
    let _e170: MultiVector = self_2801;
    let _e174: Point = other_2435;
    let _e183: MultiVector = self_2801;
    let _e187: Point = other_2435;
    let _e190: Point = other_2435;
    let _e193: Point = other_2435;
    let _e198: MultiVector = self_2801;
    let _e202: Point = other_2435;
    let _e205: Point = other_2435;
    let _e208: Point = other_2435;
    let _e220: MultiVector = self_2801;
    let _e224: Point = other_2435;
    let _e227: Point = other_2435;
    let _e230: Point = other_2435;
    let _e242: MultiVector = self_2801;
    let _e246: Point = other_2435;
    let _e249: Point = other_2435;
    let _e252: Point = other_2435;
    let _e264: MultiVector = self_2801;
    let _e267: MultiVector = self_2801;
    let _e270: MultiVector = self_2801;
    let _e274: Point = other_2435;
    let _e284: MultiVector = self_2801;
    let _e288: Point = other_2435;
    let _e299: MultiVector = self_2801;
    let _e303: Point = other_2435;
    let _e315: MultiVector = self_2801;
    let _e319: Point = other_2435;
    let _e331: MultiVector = self_2801;
    let _e335: Point = other_2435;
    return MultiVector((((((vec2<f32>(_e4.g4_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g4_.z) * vec2<f32>(_e22.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g4_.w) * vec2<f32>(_e37.g0_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e48.g4_.x, _e51.g1_.w) * vec2<f32>(_e55.g0_.x, _e58.g0_.w)) * vec2<f32>(-(1.0)))), ((((((vec4<f32>(_e68.g0_.y) * _e72.g0_) + ((vec4<f32>(_e75.g2_.y) * _e79.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e91.g2_.z) * _e95.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e107.g3_.y) * vec4<f32>(_e111.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e123.g3_.z) * vec4<f32>(_e127.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e139.g3_.x, _e142.g2_.x, _e145.g2_.x, _e148.g2_.x) * _e152.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((vec3<f32>(_e164.g4_.x, _e167.g4_.y, _e170.g4_.z) * vec3<f32>(_e174.g0_.w)) * vec3<f32>(-(1.0))), (((((vec3<f32>(_e183.g1_.w) * vec3<f32>(_e187.g0_.x, _e190.g0_.y, _e193.g0_.z)) + ((vec3<f32>(_e198.g4_.x) * vec3<f32>(_e202.g0_.z, _e205.g0_.z, _e208.g0_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e220.g4_.y) * vec3<f32>(_e224.g0_.z, _e227.g0_.z, _e230.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e242.g4_.z) * vec3<f32>(_e246.g0_.y, _e249.g0_.x, _e252.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e264.g1_.x, _e267.g1_.y, _e270.g1_.z) * vec3<f32>(_e274.g0_.w)) * vec3<f32>(-(1.0)))), (((((vec4<f32>(_e284.g2_.x) * _e288.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e299.g2_.y) * _e303.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e315.g2_.z) * _e319.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e331.g0_.x) * _e335.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_point_scalar_product(self_2802: MultiVector, other_2436: Point) -> Scalar {
    var self_2803: MultiVector;
    var other_2437: Point;

    self_2803 = self_2802;
    other_2437 = other_2436;
    let _e4: MultiVector = self_2803;
    let _e7: Point = other_2437;
    let _e11: MultiVector = self_2803;
    let _e14: Point = other_2437;
    let _e19: MultiVector = self_2803;
    let _e22: Point = other_2437;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn multi_vector_point_dot(self_2804: MultiVector, other_2438: Point) -> Scalar {
    var self_2805: MultiVector;
    var other_2439: Point;

    self_2805 = self_2804;
    other_2439 = other_2438;
    let _e4: MultiVector = self_2805;
    let _e7: Point = other_2439;
    let _e11: MultiVector = self_2805;
    let _e14: Point = other_2439;
    let _e19: MultiVector = self_2805;
    let _e22: Point = other_2439;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn multi_vector_point_anti_scalar_product(self_2806: MultiVector, other_2440: Point) -> AntiScalar {
    var self_2807: MultiVector;
    var other_2441: Point;

    self_2807 = self_2806;
    other_2441 = other_2440;
    let _e5: MultiVector = self_2807;
    let _e8: Point = other_2441;
    return AntiScalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn multi_vector_point_anti_dot(self_2808: MultiVector, other_2442: Point) -> AntiScalar {
    var self_2809: MultiVector;
    var other_2443: Point;

    self_2809 = self_2808;
    other_2443 = other_2442;
    let _e5: MultiVector = self_2809;
    let _e8: Point = other_2443;
    return AntiScalar((0.0 - (_e5.g1_.w * _e8.g0_.w)));
}

fn multi_vector_line_into(self_2810: MultiVector) -> Line {
    var self_2811: MultiVector;

    self_2811 = self_2810;
    let _e2: MultiVector = self_2811;
    let _e4: MultiVector = self_2811;
    return Line(_e2.g2_, _e4.g3_);
}

fn multi_vector_line_add(self_2812: MultiVector, other_2444: Line) -> MultiVector {
    var self_2813: MultiVector;
    var other_2445: Line;

    self_2813 = self_2812;
    other_2445 = other_2444;
    let _e4: MultiVector = self_2813;
    let _e6: MultiVector = self_2813;
    let _e8: MultiVector = self_2813;
    let _e10: Line = other_2445;
    let _e13: MultiVector = self_2813;
    let _e15: Line = other_2445;
    let _e18: MultiVector = self_2813;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g2_ + _e10.g0_), (_e13.g3_ + _e15.g1_), _e18.g4_);
}

fn multi_vector_line_sub(self_2814: MultiVector, other_2446: Line) -> MultiVector {
    var self_2815: MultiVector;
    var other_2447: Line;

    self_2815 = self_2814;
    other_2447 = other_2446;
    let _e4: MultiVector = self_2815;
    let _e6: MultiVector = self_2815;
    let _e8: MultiVector = self_2815;
    let _e10: Line = other_2447;
    let _e13: MultiVector = self_2815;
    let _e15: Line = other_2447;
    let _e18: MultiVector = self_2815;
    return MultiVector(_e4.g0_, _e6.g1_, (_e8.g2_ - _e10.g0_), (_e13.g3_ - _e15.g1_), _e18.g4_);
}

fn multi_vector_line_geometric_product(self_2816: MultiVector, other_2448: Line) -> MultiVector {
    var self_2817: MultiVector;
    var other_2449: Line;

    self_2817 = self_2816;
    other_2449 = other_2448;
    let _e4: MultiVector = self_2817;
    let _e8: Line = other_2449;
    let _e18: MultiVector = self_2817;
    let _e22: Line = other_2449;
    let _e33: MultiVector = self_2817;
    let _e37: Line = other_2449;
    let _e40: Line = other_2449;
    let _e46: MultiVector = self_2817;
    let _e50: Line = other_2449;
    let _e53: Line = other_2449;
    let _e59: MultiVector = self_2817;
    let _e63: Line = other_2449;
    let _e66: Line = other_2449;
    let _e72: MultiVector = self_2817;
    let _e76: Line = other_2449;
    let _e87: MultiVector = self_2817;
    let _e91: Line = other_2449;
    let _e94: Line = other_2449;
    let _e97: Line = other_2449;
    let _e100: Line = other_2449;
    let _e113: MultiVector = self_2817;
    let _e117: Line = other_2449;
    let _e120: Line = other_2449;
    let _e123: Line = other_2449;
    let _e126: Line = other_2449;
    let _e140: MultiVector = self_2817;
    let _e144: Line = other_2449;
    let _e157: MultiVector = self_2817;
    let _e161: Line = other_2449;
    let _e174: MultiVector = self_2817;
    let _e178: Line = other_2449;
    let _e191: MultiVector = self_2817;
    let _e195: Line = other_2449;
    let _e198: Line = other_2449;
    let _e201: Line = other_2449;
    let _e204: Line = other_2449;
    let _e216: MultiVector = self_2817;
    let _e220: Line = other_2449;
    let _e223: Line = other_2449;
    let _e226: Line = other_2449;
    let _e229: Line = other_2449;
    let _e243: MultiVector = self_2817;
    let _e247: Line = other_2449;
    let _e250: MultiVector = self_2817;
    let _e254: Line = other_2449;
    let _e258: MultiVector = self_2817;
    let _e262: Line = other_2449;
    let _e273: MultiVector = self_2817;
    let _e277: Line = other_2449;
    let _e288: MultiVector = self_2817;
    let _e292: Line = other_2449;
    let _e303: MultiVector = self_2817;
    let _e307: Line = other_2449;
    let _e318: MultiVector = self_2817;
    let _e322: Line = other_2449;
    let _e333: MultiVector = self_2817;
    let _e337: Line = other_2449;
    let _e348: MultiVector = self_2817;
    let _e352: Line = other_2449;
    let _e355: MultiVector = self_2817;
    let _e359: Line = other_2449;
    let _e370: MultiVector = self_2817;
    let _e374: Line = other_2449;
    let _e385: MultiVector = self_2817;
    let _e389: Line = other_2449;
    let _e400: MultiVector = self_2817;
    let _e404: Line = other_2449;
    let _e407: Line = other_2449;
    let _e410: Line = other_2449;
    let _e413: Line = other_2449;
    let _e426: MultiVector = self_2817;
    let _e430: Line = other_2449;
    let _e433: Line = other_2449;
    let _e436: Line = other_2449;
    let _e439: Line = other_2449;
    let _e453: MultiVector = self_2817;
    let _e457: Line = other_2449;
    let _e460: Line = other_2449;
    let _e463: Line = other_2449;
    let _e466: Line = other_2449;
    let _e478: MultiVector = self_2817;
    let _e482: Line = other_2449;
    let _e485: Line = other_2449;
    let _e488: Line = other_2449;
    let _e491: Line = other_2449;
    let _e504: MultiVector = self_2817;
    let _e508: Line = other_2449;
    let _e511: Line = other_2449;
    let _e514: Line = other_2449;
    let _e517: Line = other_2449;
    let _e530: MultiVector = self_2817;
    let _e534: Line = other_2449;
    let _e537: Line = other_2449;
    let _e540: Line = other_2449;
    let _e543: Line = other_2449;
    let _e556: MultiVector = self_2817;
    let _e560: Line = other_2449;
    let _e563: Line = other_2449;
    let _e566: Line = other_2449;
    let _e569: Line = other_2449;
    let _e581: MultiVector = self_2817;
    let _e585: Line = other_2449;
    let _e588: Line = other_2449;
    let _e591: Line = other_2449;
    let _e594: Line = other_2449;
    return MultiVector((((((((vec2<f32>(_e4.g2_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.z) * vec2<f32>(_e22.g1_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e33.g3_.x) * vec2<f32>(_e37.g1_.x, _e40.g0_.x))) - (vec2<f32>(_e46.g3_.y) * vec2<f32>(_e50.g1_.y, _e53.g0_.y))) - (vec2<f32>(_e59.g3_.z) * vec2<f32>(_e63.g1_.z, _e66.g0_.z))) + ((vec2<f32>(_e72.g2_.x) * vec2<f32>(_e76.g1_.x)) * vec2<f32>(0.0, -(1.0)))), ((((((((vec4<f32>(_e87.g1_.y) * vec4<f32>(_e91.g1_.z, _e94.g1_.z, _e97.g1_.x, _e100.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e113.g1_.z) * vec4<f32>(_e117.g1_.y, _e120.g1_.x, _e123.g1_.y, _e126.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e140.g4_.x) * vec4<f32>(_e144.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e157.g4_.y) * vec4<f32>(_e161.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e174.g4_.z) * vec4<f32>(_e178.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e191.g4_.w) * vec4<f32>(_e195.g1_.x, _e198.g1_.y, _e201.g1_.z, _e204.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e216.g1_.x) * vec4<f32>(_e220.g1_.x, _e223.g1_.z, _e226.g1_.y, _e229.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((((vec3<f32>(_e243.g0_.x) * _e247.g0_) + (vec3<f32>(_e250.g0_.y) * _e254.g1_)) + ((vec3<f32>(_e258.g2_.y) * _e262.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e273.g2_.z) * _e277.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e288.g3_.x) * _e292.g0_.zzy) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e303.g3_.y) * _e307.g0_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e318.g3_.z) * _e322.g0_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e333.g2_.x) * _e337.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec3<f32>(_e348.g0_.x) * _e352.g1_) + ((vec3<f32>(_e355.g3_.y) * _e359.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e370.g3_.z) * _e374.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e385.g3_.x) * _e389.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((((vec4<f32>(_e400.g1_.y) * vec4<f32>(_e404.g0_.z, _e407.g0_.z, _e410.g0_.x, _e413.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e426.g1_.z) * vec4<f32>(_e430.g0_.y, _e433.g0_.x, _e436.g0_.y, _e439.g1_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e453.g1_.w) * vec4<f32>(_e457.g1_.x, _e460.g1_.y, _e463.g1_.z, _e466.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e478.g4_.x) * vec4<f32>(_e482.g1_.z, _e485.g1_.z, _e488.g1_.y, _e491.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e504.g4_.y) * vec4<f32>(_e508.g1_.z, _e511.g1_.z, _e514.g1_.x, _e517.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e530.g4_.z) * vec4<f32>(_e534.g1_.y, _e537.g1_.x, _e540.g1_.y, _e543.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e556.g4_.w) * vec4<f32>(_e560.g0_.x, _e563.g0_.y, _e566.g0_.z, _e569.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e581.g1_.x) * vec4<f32>(_e585.g0_.x, _e588.g0_.z, _e591.g0_.y, _e594.g1_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_line_geometric_anti_product(self_2818: MultiVector, other_2450: Line) -> MultiVector {
    var self_2819: MultiVector;
    var other_2451: Line;

    self_2819 = self_2818;
    other_2451 = other_2450;
    let _e6: MultiVector = self_2819;
    let _e10: Line = other_2451;
    let _e13: Line = other_2451;
    let _e19: MultiVector = self_2819;
    let _e23: Line = other_2451;
    let _e26: Line = other_2451;
    let _e32: MultiVector = self_2819;
    let _e36: Line = other_2451;
    let _e39: Line = other_2451;
    let _e45: MultiVector = self_2819;
    let _e49: Line = other_2451;
    let _e60: MultiVector = self_2819;
    let _e64: Line = other_2451;
    let _e75: MultiVector = self_2819;
    let _e79: Line = other_2451;
    let _e90: MultiVector = self_2819;
    let _e94: Line = other_2451;
    let _e97: Line = other_2451;
    let _e100: Line = other_2451;
    let _e103: Line = other_2451;
    let _e115: MultiVector = self_2819;
    let _e119: Line = other_2451;
    let _e122: Line = other_2451;
    let _e125: Line = other_2451;
    let _e128: Line = other_2451;
    let _e141: MultiVector = self_2819;
    let _e145: Line = other_2451;
    let _e148: Line = other_2451;
    let _e151: Line = other_2451;
    let _e154: Line = other_2451;
    let _e169: MultiVector = self_2819;
    let _e173: Line = other_2451;
    let _e176: Line = other_2451;
    let _e179: Line = other_2451;
    let _e182: Line = other_2451;
    let _e196: MultiVector = self_2819;
    let _e200: Line = other_2451;
    let _e203: Line = other_2451;
    let _e206: Line = other_2451;
    let _e209: Line = other_2451;
    let _e223: MultiVector = self_2819;
    let _e227: Line = other_2451;
    let _e230: Line = other_2451;
    let _e233: Line = other_2451;
    let _e236: Line = other_2451;
    let _e250: MultiVector = self_2819;
    let _e254: Line = other_2451;
    let _e257: Line = other_2451;
    let _e260: Line = other_2451;
    let _e263: Line = other_2451;
    let _e275: MultiVector = self_2819;
    let _e279: Line = other_2451;
    let _e282: Line = other_2451;
    let _e285: Line = other_2451;
    let _e288: Line = other_2451;
    let _e301: MultiVector = self_2819;
    let _e305: Line = other_2451;
    let _e308: MultiVector = self_2819;
    let _e312: Line = other_2451;
    let _e323: MultiVector = self_2819;
    let _e327: Line = other_2451;
    let _e338: MultiVector = self_2819;
    let _e342: Line = other_2451;
    let _e353: MultiVector = self_2819;
    let _e357: Line = other_2451;
    let _e360: MultiVector = self_2819;
    let _e364: Line = other_2451;
    let _e368: MultiVector = self_2819;
    let _e372: Line = other_2451;
    let _e383: MultiVector = self_2819;
    let _e387: Line = other_2451;
    let _e398: MultiVector = self_2819;
    let _e402: Line = other_2451;
    let _e413: MultiVector = self_2819;
    let _e417: Line = other_2451;
    let _e428: MultiVector = self_2819;
    let _e432: Line = other_2451;
    let _e443: MultiVector = self_2819;
    let _e447: Line = other_2451;
    let _e458: MultiVector = self_2819;
    let _e462: Line = other_2451;
    let _e474: MultiVector = self_2819;
    let _e478: Line = other_2451;
    let _e491: MultiVector = self_2819;
    let _e495: Line = other_2451;
    let _e498: Line = other_2451;
    let _e501: Line = other_2451;
    let _e504: Line = other_2451;
    let _e517: MultiVector = self_2819;
    let _e521: Line = other_2451;
    let _e524: Line = other_2451;
    let _e527: Line = other_2451;
    let _e530: Line = other_2451;
    let _e543: MultiVector = self_2819;
    let _e547: Line = other_2451;
    let _e550: Line = other_2451;
    let _e553: Line = other_2451;
    let _e556: Line = other_2451;
    let _e569: MultiVector = self_2819;
    let _e572: Line = other_2451;
    let _e575: Line = other_2451;
    let _e578: Line = other_2451;
    let _e581: Line = other_2451;
    return MultiVector(((((((vec2<f32>(0.0) - (vec2<f32>(_e6.g2_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2<f32>(_e19.g2_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2<f32>(_e32.g2_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2<f32>(_e45.g3_.y) * vec2<f32>(_e49.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e60.g3_.z) * vec2<f32>(_e64.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e75.g3_.x) * vec2<f32>(_e79.g0_.x)) * vec2<f32>(-(1.0), 0.0))), (((((((((vec4<f32>(_e90.g1_.y) * vec4<f32>(_e94.g0_.z, _e97.g0_.z, _e100.g0_.x, _e103.g0_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e115.g1_.z) * vec4<f32>(_e119.g0_.y, _e122.g0_.x, _e125.g0_.y, _e128.g0_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e141.g1_.w) * vec4<f32>(_e145.g1_.x, _e148.g1_.y, _e151.g1_.z, _e154.g1_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e169.g4_.x) * vec4<f32>(_e173.g1_.z, _e176.g1_.z, _e179.g1_.y, _e182.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e196.g4_.y) * vec4<f32>(_e200.g1_.z, _e203.g1_.z, _e206.g1_.x, _e209.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e223.g4_.z) * vec4<f32>(_e227.g1_.y, _e230.g1_.x, _e233.g1_.y, _e236.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e250.g4_.w) * vec4<f32>(_e254.g0_.x, _e257.g0_.y, _e260.g0_.z, _e263.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e275.g1_.x) * vec4<f32>(_e279.g0_.x, _e282.g0_.z, _e285.g0_.y, _e288.g0_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e301.g0_.y) * _e305.g0_) + ((vec3<f32>(_e308.g2_.y) * _e312.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e323.g2_.z) * _e327.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e338.g2_.x) * _e342.g0_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec3<f32>(_e353.g0_.x) * _e357.g0_) + (vec3<f32>(_e360.g0_.y) * _e364.g1_)) + ((vec3<f32>(_e368.g2_.y) * _e372.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e383.g2_.z) * _e387.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e398.g3_.x) * _e402.g0_.zzy) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e413.g3_.y) * _e417.g0_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e428.g3_.z) * _e432.g0_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e443.g2_.x) * _e447.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((vec4<f32>(_e458.g1_.y) * vec4<f32>(_e462.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e474.g1_.z) * vec4<f32>(_e478.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e491.g4_.x) * vec4<f32>(_e495.g0_.z, _e498.g0_.z, _e501.g0_.y, _e504.g1_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e517.g4_.y) * vec4<f32>(_e521.g0_.z, _e524.g0_.z, _e527.g0_.x, _e530.g1_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e543.g4_.z) * vec4<f32>(_e547.g0_.y, _e550.g0_.x, _e553.g0_.y, _e556.g1_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e569.g1_.wwwx * vec4<f32>(_e572.g0_.x, _e575.g0_.y, _e578.g0_.z, _e581.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_line_scalar_product(self_2820: MultiVector, other_2452: Line) -> Scalar {
    var self_2821: MultiVector;
    var other_2453: Line;

    self_2821 = self_2820;
    other_2453 = other_2452;
    let _e5: MultiVector = self_2821;
    let _e8: Line = other_2453;
    let _e13: MultiVector = self_2821;
    let _e16: Line = other_2453;
    let _e21: MultiVector = self_2821;
    let _e24: Line = other_2453;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_line_dot(self_2822: MultiVector, other_2454: Line) -> Scalar {
    var self_2823: MultiVector;
    var other_2455: Line;

    self_2823 = self_2822;
    other_2455 = other_2454;
    let _e5: MultiVector = self_2823;
    let _e8: Line = other_2455;
    let _e13: MultiVector = self_2823;
    let _e16: Line = other_2455;
    let _e21: MultiVector = self_2823;
    let _e24: Line = other_2455;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_line_anti_scalar_product(self_2824: MultiVector, other_2456: Line) -> AntiScalar {
    var self_2825: MultiVector;
    var other_2457: Line;

    self_2825 = self_2824;
    other_2457 = other_2456;
    let _e5: MultiVector = self_2825;
    let _e8: Line = other_2457;
    let _e13: MultiVector = self_2825;
    let _e16: Line = other_2457;
    let _e21: MultiVector = self_2825;
    let _e24: Line = other_2457;
    return AntiScalar((((0.0 - (_e5.g2_.x * _e8.g0_.x)) - (_e13.g2_.y * _e16.g0_.y)) - (_e21.g2_.z * _e24.g0_.z)));
}

fn multi_vector_line_anti_dot(self_2826: MultiVector, other_2458: Line) -> AntiScalar {
    var self_2827: MultiVector;
    var other_2459: Line;

    self_2827 = self_2826;
    other_2459 = other_2458;
    let _e5: MultiVector = self_2827;
    let _e8: Line = other_2459;
    let _e13: MultiVector = self_2827;
    let _e16: Line = other_2459;
    let _e21: MultiVector = self_2827;
    let _e24: Line = other_2459;
    return AntiScalar((((0.0 - (_e5.g2_.x * _e8.g0_.x)) - (_e13.g2_.y * _e16.g0_.y)) - (_e21.g2_.z * _e24.g0_.z)));
}

fn multi_vector_plane_into(self_2828: MultiVector) -> Plane {
    var self_2829: MultiVector;

    self_2829 = self_2828;
    let _e2: MultiVector = self_2829;
    return Plane(_e2.g4_);
}

fn multi_vector_plane_add(self_2830: MultiVector, other_2460: Plane) -> MultiVector {
    var self_2831: MultiVector;
    var other_2461: Plane;

    self_2831 = self_2830;
    other_2461 = other_2460;
    let _e4: MultiVector = self_2831;
    let _e6: MultiVector = self_2831;
    let _e8: MultiVector = self_2831;
    let _e10: MultiVector = self_2831;
    let _e12: MultiVector = self_2831;
    let _e14: Plane = other_2461;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g4_ + _e14.g0_));
}

fn multi_vector_plane_sub(self_2832: MultiVector, other_2462: Plane) -> MultiVector {
    var self_2833: MultiVector;
    var other_2463: Plane;

    self_2833 = self_2832;
    other_2463 = other_2462;
    let _e4: MultiVector = self_2833;
    let _e6: MultiVector = self_2833;
    let _e8: MultiVector = self_2833;
    let _e10: MultiVector = self_2833;
    let _e12: MultiVector = self_2833;
    let _e14: Plane = other_2463;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, _e10.g3_, (_e12.g4_ - _e14.g0_));
}

fn multi_vector_plane_geometric_product(self_2834: MultiVector, other_2464: Plane) -> MultiVector {
    var self_2835: MultiVector;
    var other_2465: Plane;

    self_2835 = self_2834;
    other_2465 = other_2464;
    let _e4: MultiVector = self_2835;
    let _e8: Plane = other_2465;
    let _e17: MultiVector = self_2835;
    let _e21: Plane = other_2465;
    let _e31: MultiVector = self_2835;
    let _e35: Plane = other_2465;
    let _e45: MultiVector = self_2835;
    let _e48: MultiVector = self_2835;
    let _e52: Plane = other_2465;
    let _e55: Plane = other_2465;
    let _e66: MultiVector = self_2835;
    let _e70: Plane = other_2465;
    let _e81: MultiVector = self_2835;
    let _e85: Plane = other_2465;
    let _e97: MultiVector = self_2835;
    let _e101: Plane = other_2465;
    let _e113: MultiVector = self_2835;
    let _e116: MultiVector = self_2835;
    let _e119: MultiVector = self_2835;
    let _e122: MultiVector = self_2835;
    let _e126: Plane = other_2465;
    let _e138: MultiVector = self_2835;
    let _e142: Plane = other_2465;
    let _e145: Plane = other_2465;
    let _e148: Plane = other_2465;
    let _e159: MultiVector = self_2835;
    let _e163: Plane = other_2465;
    let _e166: Plane = other_2465;
    let _e169: Plane = other_2465;
    let _e181: MultiVector = self_2835;
    let _e185: Plane = other_2465;
    let _e196: MultiVector = self_2835;
    let _e200: Plane = other_2465;
    let _e211: MultiVector = self_2835;
    let _e215: Plane = other_2465;
    let _e218: Plane = other_2465;
    let _e221: Plane = other_2465;
    let _e227: MultiVector = self_2835;
    let _e230: MultiVector = self_2835;
    let _e233: MultiVector = self_2835;
    let _e237: Plane = other_2465;
    let _e240: Plane = other_2465;
    let _e243: Plane = other_2465;
    let _e255: MultiVector = self_2835;
    let _e258: MultiVector = self_2835;
    let _e261: MultiVector = self_2835;
    let _e265: Plane = other_2465;
    let _e274: MultiVector = self_2835;
    let _e278: Plane = other_2465;
    let _e281: MultiVector = self_2835;
    let _e285: Plane = other_2465;
    let _e297: MultiVector = self_2835;
    let _e301: Plane = other_2465;
    let _e313: MultiVector = self_2835;
    let _e317: Plane = other_2465;
    let _e329: MultiVector = self_2835;
    let _e332: MultiVector = self_2835;
    let _e335: MultiVector = self_2835;
    let _e338: MultiVector = self_2835;
    let _e342: Plane = other_2465;
    return MultiVector((((((vec2<f32>(_e4.g1_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(0.0, 1.0)) + ((vec2<f32>(_e17.g1_.z) * vec2<f32>(_e21.g0_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e31.g1_.w) * vec2<f32>(_e35.g0_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e45.g4_.w, _e48.g1_.x) * vec2<f32>(_e52.g0_.w, _e55.g0_.x)) * vec2<f32>(-(1.0), 1.0))), (((((vec4<f32>(_e66.g3_.x) * _e70.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e81.g3_.y) * _e85.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e97.g3_.z) * _e101.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g0_.x, _e122.g0_.y) * _e126.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((vec3<f32>(_e138.g1_.y) * vec3<f32>(_e142.g0_.z, _e145.g0_.z, _e148.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e159.g1_.z) * vec3<f32>(_e163.g0_.y, _e166.g0_.x, _e169.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e181.g4_.y) * vec3<f32>(_e185.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e196.g4_.z) * vec3<f32>(_e200.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e211.g4_.w) * vec3<f32>(_e215.g0_.x, _e218.g0_.y, _e221.g0_.z))) + ((vec3<f32>(_e227.g4_.x, _e230.g1_.x, _e233.g1_.x) * vec3<f32>(_e237.g0_.w, _e240.g0_.z, _e243.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), ((vec3<f32>(_e255.g1_.x, _e258.g1_.y, _e261.g1_.z) * vec3<f32>(_e265.g0_.w)) * vec3<f32>(-(1.0))), (((((vec4<f32>(_e274.g0_.x) * _e278.g0_) + ((vec4<f32>(_e281.g3_.x) * _e285.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e297.g3_.y) * _e301.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e313.g3_.z) * _e317.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e329.g2_.x, _e332.g2_.y, _e335.g2_.z, _e338.g2_.x) * _e342.g0_.wwwx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_plane_geometric_anti_product(self_2836: MultiVector, other_2466: Plane) -> MultiVector {
    var self_2837: MultiVector;
    var other_2467: Plane;

    self_2837 = self_2836;
    other_2467 = other_2466;
    let _e4: MultiVector = self_2837;
    let _e8: Plane = other_2467;
    let _e17: MultiVector = self_2837;
    let _e21: Plane = other_2467;
    let _e31: MultiVector = self_2837;
    let _e35: Plane = other_2467;
    let _e45: MultiVector = self_2837;
    let _e49: Plane = other_2467;
    let _e59: MultiVector = self_2837;
    let _e63: Plane = other_2467;
    let _e73: MultiVector = self_2837;
    let _e76: MultiVector = self_2837;
    let _e80: Plane = other_2467;
    let _e86: MultiVector = self_2837;
    let _e90: Plane = other_2467;
    let _e101: MultiVector = self_2837;
    let _e105: Plane = other_2467;
    let _e117: MultiVector = self_2837;
    let _e121: Plane = other_2467;
    let _e133: MultiVector = self_2837;
    let _e137: Plane = other_2467;
    let _e149: MultiVector = self_2837;
    let _e153: Plane = other_2467;
    let _e165: MultiVector = self_2837;
    let _e169: Plane = other_2467;
    let _e181: MultiVector = self_2837;
    let _e185: Plane = other_2467;
    let _e198: MultiVector = self_2837;
    let _e202: Plane = other_2467;
    let _e205: Plane = other_2467;
    let _e208: Plane = other_2467;
    let _e214: MultiVector = self_2837;
    let _e218: Plane = other_2467;
    let _e221: Plane = other_2467;
    let _e224: Plane = other_2467;
    let _e236: MultiVector = self_2837;
    let _e240: Plane = other_2467;
    let _e243: Plane = other_2467;
    let _e246: Plane = other_2467;
    let _e258: MultiVector = self_2837;
    let _e262: Plane = other_2467;
    let _e265: Plane = other_2467;
    let _e268: Plane = other_2467;
    let _e280: MultiVector = self_2837;
    let _e284: Plane = other_2467;
    let _e287: Plane = other_2467;
    let _e290: Plane = other_2467;
    let _e301: MultiVector = self_2837;
    let _e305: Plane = other_2467;
    let _e308: Plane = other_2467;
    let _e311: Plane = other_2467;
    let _e323: MultiVector = self_2837;
    let _e327: Plane = other_2467;
    let _e338: MultiVector = self_2837;
    let _e342: Plane = other_2467;
    let _e353: MultiVector = self_2837;
    let _e357: Plane = other_2467;
    let _e360: Plane = other_2467;
    let _e363: Plane = other_2467;
    let _e369: MultiVector = self_2837;
    let _e372: MultiVector = self_2837;
    let _e375: MultiVector = self_2837;
    let _e379: Plane = other_2467;
    let _e382: Plane = other_2467;
    let _e385: Plane = other_2467;
    let _e397: MultiVector = self_2837;
    let _e401: Plane = other_2467;
    let _e404: MultiVector = self_2837;
    let _e408: Plane = other_2467;
    let _e420: MultiVector = self_2837;
    let _e424: Plane = other_2467;
    let _e436: MultiVector = self_2837;
    let _e440: Plane = other_2467;
    let _e453: MultiVector = self_2837;
    let _e457: Plane = other_2467;
    let _e470: MultiVector = self_2837;
    let _e473: MultiVector = self_2837;
    let _e476: MultiVector = self_2837;
    let _e479: MultiVector = self_2837;
    let _e483: Plane = other_2467;
    return MultiVector((((((((vec2<f32>(_e4.g1_.y) * vec2<f32>(_e8.g0_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g1_.z) * vec2<f32>(_e21.g0_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g1_.w) * vec2<f32>(_e35.g0_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e45.g4_.y) * vec2<f32>(_e49.g0_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e59.g4_.z) * vec2<f32>(_e63.g0_.z)) * vec2<f32>(0.0, 1.0))) + (vec2<f32>(_e73.g1_.x, _e76.g4_.x) * vec2<f32>(_e80.g0_.x))), ((((((((vec4<f32>(_e86.g2_.x) * _e90.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e101.g2_.y) * _e105.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e117.g2_.z) * _e121.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e133.g3_.x) * _e137.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e149.g3_.y) * _e153.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e165.g3_.z) * _e169.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e181.g0_.x) * _e185.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e198.g1_.w) * vec3<f32>(_e202.g0_.x, _e205.g0_.y, _e208.g0_.z))) + ((vec3<f32>(_e214.g4_.y) * vec3<f32>(_e218.g0_.z, _e221.g0_.z, _e224.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e236.g4_.z) * vec3<f32>(_e240.g0_.y, _e243.g0_.x, _e246.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e258.g4_.x) * vec3<f32>(_e262.g0_.x, _e265.g0_.z, _e268.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec3<f32>(_e280.g1_.y) * vec3<f32>(_e284.g0_.z, _e287.g0_.z, _e290.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e301.g1_.z) * vec3<f32>(_e305.g0_.y, _e308.g0_.x, _e311.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e323.g4_.y) * vec3<f32>(_e327.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e338.g4_.z) * vec3<f32>(_e342.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e353.g4_.w) * vec3<f32>(_e357.g0_.x, _e360.g0_.y, _e363.g0_.z))) + ((vec3<f32>(_e369.g4_.x, _e372.g1_.x, _e375.g1_.x) * vec3<f32>(_e379.g0_.w, _e382.g0_.z, _e385.g0_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))), ((((((vec4<f32>(_e397.g0_.y) * _e401.g0_) + ((vec4<f32>(_e404.g2_.y) * _e408.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e420.g2_.z) * _e424.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e436.g3_.y) * vec4<f32>(_e440.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e453.g3_.z) * vec4<f32>(_e457.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e470.g2_.x, _e473.g2_.x, _e476.g2_.x, _e479.g3_.x) * _e483.g0_.xzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))));
}

fn multi_vector_plane_scalar_product(self_2838: MultiVector, other_2468: Plane) -> Scalar {
    var self_2839: MultiVector;
    var other_2469: Plane;

    self_2839 = self_2838;
    other_2469 = other_2468;
    let _e5: MultiVector = self_2839;
    let _e8: Plane = other_2469;
    return Scalar((0.0 - (_e5.g4_.w * _e8.g0_.w)));
}

fn multi_vector_plane_dot(self_2840: MultiVector, other_2470: Plane) -> Scalar {
    var self_2841: MultiVector;
    var other_2471: Plane;

    self_2841 = self_2840;
    other_2471 = other_2470;
    let _e5: MultiVector = self_2841;
    let _e8: Plane = other_2471;
    return Scalar((0.0 - (_e5.g4_.w * _e8.g0_.w)));
}

fn multi_vector_plane_anti_scalar_product(self_2842: MultiVector, other_2472: Plane) -> AntiScalar {
    var self_2843: MultiVector;
    var other_2473: Plane;

    self_2843 = self_2842;
    other_2473 = other_2472;
    let _e4: MultiVector = self_2843;
    let _e7: Plane = other_2473;
    let _e11: MultiVector = self_2843;
    let _e14: Plane = other_2473;
    let _e19: MultiVector = self_2843;
    let _e22: Plane = other_2473;
    return AntiScalar((((_e4.g4_.x * _e7.g0_.x) + (_e11.g4_.y * _e14.g0_.y)) + (_e19.g4_.z * _e22.g0_.z)));
}

fn multi_vector_plane_anti_dot(self_2844: MultiVector, other_2474: Plane) -> AntiScalar {
    var self_2845: MultiVector;
    var other_2475: Plane;

    self_2845 = self_2844;
    other_2475 = other_2474;
    let _e4: MultiVector = self_2845;
    let _e7: Plane = other_2475;
    let _e11: MultiVector = self_2845;
    let _e14: Plane = other_2475;
    let _e19: MultiVector = self_2845;
    let _e22: Plane = other_2475;
    return AntiScalar((((_e4.g4_.x * _e7.g0_.x) + (_e11.g4_.y * _e14.g0_.y)) + (_e19.g4_.z * _e22.g0_.z)));
}

fn multi_vector_motor_into(self_2846: MultiVector) -> Motor {
    var self_2847: MultiVector;

    self_2847 = self_2846;
    let _e2: MultiVector = self_2847;
    let _e5: MultiVector = self_2847;
    let _e8: MultiVector = self_2847;
    let _e11: MultiVector = self_2847;
    let _e15: MultiVector = self_2847;
    return Motor(vec4<f32>(_e2.g2_.x, _e5.g2_.y, _e8.g2_.z, _e11.g0_.y), _e15.g3_);
}

fn multi_vector_motor_add(self_2848: MultiVector, other_2476: Motor) -> MultiVector {
    var self_2849: MultiVector;
    var other_2477: Motor;

    self_2849 = self_2848;
    other_2477 = other_2476;
    let _e4: MultiVector = self_2849;
    let _e6: Motor = other_2477;
    let _e9: Motor = other_2477;
    let _e18: MultiVector = self_2849;
    let _e20: MultiVector = self_2849;
    let _e22: Motor = other_2477;
    let _e25: Motor = other_2477;
    let _e28: Motor = other_2477;
    let _e33: MultiVector = self_2849;
    let _e35: Motor = other_2477;
    let _e38: MultiVector = self_2849;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ + vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), (_e33.g3_ + _e35.g1_), _e38.g4_);
}

fn multi_vector_motor_sub(self_2850: MultiVector, other_2478: Motor) -> MultiVector {
    var self_2851: MultiVector;
    var other_2479: Motor;

    self_2851 = self_2850;
    other_2479 = other_2478;
    let _e4: MultiVector = self_2851;
    let _e6: Motor = other_2479;
    let _e9: Motor = other_2479;
    let _e18: MultiVector = self_2851;
    let _e20: MultiVector = self_2851;
    let _e22: Motor = other_2479;
    let _e25: Motor = other_2479;
    let _e28: Motor = other_2479;
    let _e33: MultiVector = self_2851;
    let _e35: Motor = other_2479;
    let _e38: MultiVector = self_2851;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ - vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), (_e33.g3_ - _e35.g1_), _e38.g4_);
}

fn multi_vector_motor_geometric_product(self_2852: MultiVector, other_2480: Motor) -> MultiVector {
    var self_2853: MultiVector;
    var other_2481: Motor;

    self_2853 = self_2852;
    other_2481 = other_2480;
    let _e4: MultiVector = self_2853;
    let _e8: Motor = other_2481;
    let _e18: MultiVector = self_2853;
    let _e22: Motor = other_2481;
    let _e33: MultiVector = self_2853;
    let _e37: Motor = other_2481;
    let _e48: MultiVector = self_2853;
    let _e52: Motor = other_2481;
    let _e55: Motor = other_2481;
    let _e61: MultiVector = self_2853;
    let _e65: Motor = other_2481;
    let _e68: Motor = other_2481;
    let _e74: MultiVector = self_2853;
    let _e78: Motor = other_2481;
    let _e81: Motor = other_2481;
    let _e87: MultiVector = self_2853;
    let _e91: Motor = other_2481;
    let _e94: Motor = other_2481;
    let _e104: MultiVector = self_2853;
    let _e108: Motor = other_2481;
    let _e111: Motor = other_2481;
    let _e114: Motor = other_2481;
    let _e117: Motor = other_2481;
    let _e130: MultiVector = self_2853;
    let _e134: Motor = other_2481;
    let _e137: Motor = other_2481;
    let _e140: Motor = other_2481;
    let _e143: Motor = other_2481;
    let _e157: MultiVector = self_2853;
    let _e161: Motor = other_2481;
    let _e174: MultiVector = self_2853;
    let _e178: Motor = other_2481;
    let _e191: MultiVector = self_2853;
    let _e195: Motor = other_2481;
    let _e208: MultiVector = self_2853;
    let _e212: Motor = other_2481;
    let _e215: Motor = other_2481;
    let _e218: Motor = other_2481;
    let _e221: Motor = other_2481;
    let _e227: MultiVector = self_2853;
    let _e231: Motor = other_2481;
    let _e234: Motor = other_2481;
    let _e237: Motor = other_2481;
    let _e240: Motor = other_2481;
    let _e254: MultiVector = self_2853;
    let _e258: Motor = other_2481;
    let _e261: Motor = other_2481;
    let _e264: Motor = other_2481;
    let _e269: MultiVector = self_2853;
    let _e273: Motor = other_2481;
    let _e277: MultiVector = self_2853;
    let _e281: Motor = other_2481;
    let _e292: MultiVector = self_2853;
    let _e296: Motor = other_2481;
    let _e307: MultiVector = self_2853;
    let _e311: Motor = other_2481;
    let _e314: Motor = other_2481;
    let _e317: Motor = other_2481;
    let _e329: MultiVector = self_2853;
    let _e333: Motor = other_2481;
    let _e336: Motor = other_2481;
    let _e339: Motor = other_2481;
    let _e351: MultiVector = self_2853;
    let _e355: Motor = other_2481;
    let _e358: Motor = other_2481;
    let _e361: Motor = other_2481;
    let _e373: MultiVector = self_2853;
    let _e377: Motor = other_2481;
    let _e388: MultiVector = self_2853;
    let _e392: Motor = other_2481;
    let _e395: MultiVector = self_2853;
    let _e399: Motor = other_2481;
    let _e410: MultiVector = self_2853;
    let _e414: Motor = other_2481;
    let _e425: MultiVector = self_2853;
    let _e429: Motor = other_2481;
    let _e440: MultiVector = self_2853;
    let _e444: Motor = other_2481;
    let _e447: Motor = other_2481;
    let _e450: Motor = other_2481;
    let _e453: Motor = other_2481;
    let _e466: MultiVector = self_2853;
    let _e470: Motor = other_2481;
    let _e473: Motor = other_2481;
    let _e476: Motor = other_2481;
    let _e479: Motor = other_2481;
    let _e493: MultiVector = self_2853;
    let _e497: Motor = other_2481;
    let _e500: Motor = other_2481;
    let _e503: Motor = other_2481;
    let _e506: Motor = other_2481;
    let _e520: MultiVector = self_2853;
    let _e524: Motor = other_2481;
    let _e527: Motor = other_2481;
    let _e530: Motor = other_2481;
    let _e533: Motor = other_2481;
    let _e546: MultiVector = self_2853;
    let _e550: Motor = other_2481;
    let _e553: Motor = other_2481;
    let _e556: Motor = other_2481;
    let _e559: Motor = other_2481;
    let _e572: MultiVector = self_2853;
    let _e576: Motor = other_2481;
    let _e579: Motor = other_2481;
    let _e582: Motor = other_2481;
    let _e585: Motor = other_2481;
    let _e598: MultiVector = self_2853;
    let _e602: Motor = other_2481;
    let _e613: MultiVector = self_2853;
    let _e616: Motor = other_2481;
    let _e619: Motor = other_2481;
    let _e622: Motor = other_2481;
    let _e625: Motor = other_2481;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g1_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g1_.x, _e55.g0_.x))) - (vec2<f32>(_e61.g3_.y) * vec2<f32>(_e65.g1_.y, _e68.g0_.y))) - (vec2<f32>(_e74.g3_.z) * vec2<f32>(_e78.g1_.z, _e81.g0_.z))) + ((vec2<f32>(_e87.g0_.x) * vec2<f32>(_e91.g0_.x, _e94.g0_.w)) * vec2<f32>(0.0, 1.0))), ((((((((vec4<f32>(_e104.g1_.y) * vec4<f32>(_e108.g1_.z, _e111.g1_.z, _e114.g1_.x, _e117.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e130.g1_.z) * vec4<f32>(_e134.g1_.y, _e137.g1_.x, _e140.g1_.y, _e143.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e157.g4_.x) * vec4<f32>(_e161.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e174.g4_.y) * vec4<f32>(_e178.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e191.g4_.z) * vec4<f32>(_e195.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e208.g4_.w) * vec4<f32>(_e212.g1_.x, _e215.g1_.y, _e218.g1_.z, _e221.g0_.w))) + ((vec4<f32>(_e227.g1_.x) * vec4<f32>(_e231.g1_.x, _e234.g1_.z, _e237.g1_.y, _e240.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((((vec3<f32>(_e254.g0_.x) * vec3<f32>(_e258.g0_.x, _e261.g0_.y, _e264.g0_.z)) + (vec3<f32>(_e269.g0_.y) * _e273.g1_)) + ((vec3<f32>(_e277.g2_.y) * _e281.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e292.g2_.z) * _e296.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e307.g3_.x) * vec3<f32>(_e311.g0_.w, _e314.g0_.z, _e317.g0_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e329.g3_.y) * vec3<f32>(_e333.g0_.z, _e336.g0_.w, _e339.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e351.g3_.z) * vec3<f32>(_e355.g0_.y, _e358.g0_.x, _e361.g0_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e373.g2_.x) * _e377.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((vec3<f32>(_e388.g0_.x) * _e392.g1_) + ((vec3<f32>(_e395.g3_.y) * _e399.g1_.zzx) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e410.g3_.z) * _e414.g1_.yxy) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e425.g3_.x) * _e429.g1_.xzy) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((((vec4<f32>(_e440.g1_.x) * vec4<f32>(_e444.g0_.w, _e447.g0_.z, _e450.g0_.y, _e453.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e466.g1_.y) * vec4<f32>(_e470.g0_.z, _e473.g0_.w, _e476.g0_.x, _e479.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e493.g1_.z) * vec4<f32>(_e497.g0_.y, _e500.g0_.x, _e503.g0_.w, _e506.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e520.g4_.x) * vec4<f32>(_e524.g1_.z, _e527.g1_.z, _e530.g1_.y, _e533.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e546.g4_.y) * vec4<f32>(_e550.g1_.z, _e553.g1_.z, _e556.g1_.x, _e559.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e572.g4_.z) * vec4<f32>(_e576.g1_.y, _e579.g1_.x, _e582.g1_.y, _e585.g1_.y)) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e598.g4_.w) * _e602.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e613.g1_.wwwx * vec4<f32>(_e616.g1_.x, _e619.g1_.y, _e622.g1_.z, _e625.g1_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_motor_geometric_anti_product(self_2854: MultiVector, other_2482: Motor) -> MultiVector {
    var self_2855: MultiVector;
    var other_2483: Motor;

    self_2855 = self_2854;
    other_2483 = other_2482;
    let _e6: MultiVector = self_2855;
    let _e10: Motor = other_2483;
    let _e13: Motor = other_2483;
    let _e19: MultiVector = self_2855;
    let _e23: Motor = other_2483;
    let _e26: Motor = other_2483;
    let _e32: MultiVector = self_2855;
    let _e36: Motor = other_2483;
    let _e39: Motor = other_2483;
    let _e45: MultiVector = self_2855;
    let _e49: Motor = other_2483;
    let _e60: MultiVector = self_2855;
    let _e64: Motor = other_2483;
    let _e75: MultiVector = self_2855;
    let _e79: Motor = other_2483;
    let _e90: MultiVector = self_2855;
    let _e92: Motor = other_2483;
    let _e98: MultiVector = self_2855;
    let _e102: Motor = other_2483;
    let _e113: MultiVector = self_2855;
    let _e117: Motor = other_2483;
    let _e129: MultiVector = self_2855;
    let _e133: Motor = other_2483;
    let _e136: Motor = other_2483;
    let _e139: Motor = other_2483;
    let _e142: Motor = other_2483;
    let _e157: MultiVector = self_2855;
    let _e161: Motor = other_2483;
    let _e164: Motor = other_2483;
    let _e167: Motor = other_2483;
    let _e170: Motor = other_2483;
    let _e184: MultiVector = self_2855;
    let _e188: Motor = other_2483;
    let _e191: Motor = other_2483;
    let _e194: Motor = other_2483;
    let _e197: Motor = other_2483;
    let _e211: MultiVector = self_2855;
    let _e215: Motor = other_2483;
    let _e218: Motor = other_2483;
    let _e221: Motor = other_2483;
    let _e224: Motor = other_2483;
    let _e238: MultiVector = self_2855;
    let _e242: Motor = other_2483;
    let _e253: MultiVector = self_2855;
    let _e257: Motor = other_2483;
    let _e269: MultiVector = self_2855;
    let _e273: Motor = other_2483;
    let _e276: Motor = other_2483;
    let _e279: Motor = other_2483;
    let _e284: MultiVector = self_2855;
    let _e288: Motor = other_2483;
    let _e291: Motor = other_2483;
    let _e294: Motor = other_2483;
    let _e306: MultiVector = self_2855;
    let _e310: Motor = other_2483;
    let _e313: Motor = other_2483;
    let _e316: Motor = other_2483;
    let _e328: MultiVector = self_2855;
    let _e332: Motor = other_2483;
    let _e335: Motor = other_2483;
    let _e338: Motor = other_2483;
    let _e350: MultiVector = self_2855;
    let _e354: Motor = other_2483;
    let _e357: Motor = other_2483;
    let _e360: Motor = other_2483;
    let _e365: MultiVector = self_2855;
    let _e369: Motor = other_2483;
    let _e373: MultiVector = self_2855;
    let _e377: Motor = other_2483;
    let _e388: MultiVector = self_2855;
    let _e392: Motor = other_2483;
    let _e403: MultiVector = self_2855;
    let _e407: Motor = other_2483;
    let _e410: Motor = other_2483;
    let _e413: Motor = other_2483;
    let _e425: MultiVector = self_2855;
    let _e429: Motor = other_2483;
    let _e432: Motor = other_2483;
    let _e435: Motor = other_2483;
    let _e447: MultiVector = self_2855;
    let _e451: Motor = other_2483;
    let _e454: Motor = other_2483;
    let _e457: Motor = other_2483;
    let _e469: MultiVector = self_2855;
    let _e473: Motor = other_2483;
    let _e484: MultiVector = self_2855;
    let _e488: Motor = other_2483;
    let _e500: MultiVector = self_2855;
    let _e504: Motor = other_2483;
    let _e517: MultiVector = self_2855;
    let _e521: Motor = other_2483;
    let _e524: Motor = other_2483;
    let _e527: Motor = other_2483;
    let _e530: Motor = other_2483;
    let _e543: MultiVector = self_2855;
    let _e547: Motor = other_2483;
    let _e550: Motor = other_2483;
    let _e553: Motor = other_2483;
    let _e556: Motor = other_2483;
    let _e569: MultiVector = self_2855;
    let _e573: Motor = other_2483;
    let _e576: Motor = other_2483;
    let _e579: Motor = other_2483;
    let _e582: Motor = other_2483;
    let _e595: MultiVector = self_2855;
    let _e599: Motor = other_2483;
    let _e611: MultiVector = self_2855;
    let _e614: Motor = other_2483;
    return MultiVector((((((((vec2<f32>(0.0) - (vec2<f32>(_e6.g2_.x) * vec2<f32>(_e10.g1_.x, _e13.g0_.x))) - (vec2<f32>(_e19.g2_.y) * vec2<f32>(_e23.g1_.y, _e26.g0_.y))) - (vec2<f32>(_e32.g2_.z) * vec2<f32>(_e36.g1_.z, _e39.g0_.z))) + ((vec2<f32>(_e45.g3_.x) * vec2<f32>(_e49.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e60.g3_.y) * vec2<f32>(_e64.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e75.g3_.z) * vec2<f32>(_e79.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e90.g0_ * vec2<f32>(_e92.g0_.w))), (((((((((vec4<f32>(_e98.g1_.y) * _e102.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e113.g1_.z) * _e117.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e129.g1_.w) * vec4<f32>(_e133.g1_.x, _e136.g1_.y, _e139.g1_.z, _e142.g0_.w)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e157.g4_.x) * vec4<f32>(_e161.g1_.z, _e164.g1_.z, _e167.g1_.y, _e170.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e184.g4_.y) * vec4<f32>(_e188.g1_.z, _e191.g1_.z, _e194.g1_.x, _e197.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e211.g4_.z) * vec4<f32>(_e215.g1_.y, _e218.g1_.x, _e221.g1_.y, _e224.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e238.g4_.w) * _e242.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e253.g1_.x) * _e257.g0_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))), ((((vec3<f32>(_e269.g0_.y) * vec3<f32>(_e273.g0_.x, _e276.g0_.y, _e279.g0_.z)) + ((vec3<f32>(_e284.g2_.x) * vec3<f32>(_e288.g0_.w, _e291.g0_.z, _e294.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e306.g2_.y) * vec3<f32>(_e310.g0_.z, _e313.g0_.w, _e316.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e328.g2_.z) * vec3<f32>(_e332.g0_.y, _e335.g0_.x, _e338.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((vec3<f32>(_e350.g0_.x) * vec3<f32>(_e354.g0_.x, _e357.g0_.y, _e360.g0_.z)) + (vec3<f32>(_e365.g0_.y) * _e369.g1_)) + ((vec3<f32>(_e373.g2_.y) * _e377.g1_.zzx) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e388.g2_.z) * _e392.g1_.yxy) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e403.g3_.x) * vec3<f32>(_e407.g0_.w, _e410.g0_.z, _e413.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e425.g3_.y) * vec3<f32>(_e429.g0_.z, _e432.g0_.w, _e435.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e447.g3_.z) * vec3<f32>(_e451.g0_.y, _e454.g0_.x, _e457.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e469.g2_.x) * _e473.g1_.xzy) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e484.g1_.y) * vec4<f32>(_e488.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e500.g1_.z) * vec4<f32>(_e504.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e517.g4_.x) * vec4<f32>(_e521.g0_.w, _e524.g0_.z, _e527.g0_.y, _e530.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e543.g4_.y) * vec4<f32>(_e547.g0_.z, _e550.g0_.w, _e553.g0_.x, _e556.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e569.g4_.z) * vec4<f32>(_e573.g0_.y, _e576.g0_.x, _e579.g0_.w, _e582.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e595.g4_.w) * vec4<f32>(_e599.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e611.g1_.wwwx * _e614.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_motor_regressive_product(self_2856: MultiVector, other_2484: Motor) -> MultiVector {
    var self_2857: MultiVector;
    var other_2485: Motor;

    self_2857 = self_2856;
    other_2485 = other_2484;
    let _e4: MultiVector = self_2857;
    let _e8: Motor = other_2485;
    let _e18: MultiVector = self_2857;
    let _e22: Motor = other_2485;
    let _e33: MultiVector = self_2857;
    let _e37: Motor = other_2485;
    let _e48: MultiVector = self_2857;
    let _e52: Motor = other_2485;
    let _e63: MultiVector = self_2857;
    let _e67: Motor = other_2485;
    let _e78: MultiVector = self_2857;
    let _e82: Motor = other_2485;
    let _e93: MultiVector = self_2857;
    let _e95: Motor = other_2485;
    let _e101: MultiVector = self_2857;
    let _e105: Motor = other_2485;
    let _e108: Motor = other_2485;
    let _e111: Motor = other_2485;
    let _e114: Motor = other_2485;
    let _e127: MultiVector = self_2857;
    let _e131: Motor = other_2485;
    let _e134: Motor = other_2485;
    let _e137: Motor = other_2485;
    let _e140: Motor = other_2485;
    let _e154: MultiVector = self_2857;
    let _e158: Motor = other_2485;
    let _e161: Motor = other_2485;
    let _e164: Motor = other_2485;
    let _e167: Motor = other_2485;
    let _e181: MultiVector = self_2857;
    let _e185: Motor = other_2485;
    let _e196: MultiVector = self_2857;
    let _e198: Motor = other_2485;
    let _e204: MultiVector = self_2857;
    let _e208: Motor = other_2485;
    let _e211: Motor = other_2485;
    let _e214: Motor = other_2485;
    let _e219: MultiVector = self_2857;
    let _e221: Motor = other_2485;
    let _e227: MultiVector = self_2857;
    let _e231: Motor = other_2485;
    let _e234: MultiVector = self_2857;
    let _e236: Motor = other_2485;
    let _e242: MultiVector = self_2857;
    let _e244: Motor = other_2485;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e63.g3_.y) * vec2<f32>(_e67.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e78.g3_.z) * vec2<f32>(_e82.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e93.g0_ * vec2<f32>(_e95.g0_.w))), ((((((vec4<f32>(_e101.g4_.x) * vec4<f32>(_e105.g1_.z, _e108.g1_.z, _e111.g1_.y, _e114.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e127.g4_.y) * vec4<f32>(_e131.g1_.z, _e134.g1_.z, _e137.g1_.x, _e140.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e154.g4_.z) * vec4<f32>(_e158.g1_.y, _e161.g1_.x, _e164.g1_.y, _e167.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e181.g4_.w) * _e185.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e196.g1_ * vec4<f32>(_e198.g0_.w))), ((vec3<f32>(_e204.g0_.y) * vec3<f32>(_e208.g0_.x, _e211.g0_.y, _e214.g0_.z)) + (_e219.g2_ * vec3<f32>(_e221.g0_.w))), ((vec3<f32>(_e227.g0_.y) * _e231.g1_) + (_e234.g3_ * vec3<f32>(_e236.g0_.w))), (_e242.g4_ * vec4<f32>(_e244.g0_.w)));
}

fn multi_vector_motor_anti_wedge(self_2858: MultiVector, other_2486: Motor) -> MultiVector {
    var self_2859: MultiVector;
    var other_2487: Motor;

    self_2859 = self_2858;
    other_2487 = other_2486;
    let _e4: MultiVector = self_2859;
    let _e8: Motor = other_2487;
    let _e18: MultiVector = self_2859;
    let _e22: Motor = other_2487;
    let _e33: MultiVector = self_2859;
    let _e37: Motor = other_2487;
    let _e48: MultiVector = self_2859;
    let _e52: Motor = other_2487;
    let _e63: MultiVector = self_2859;
    let _e67: Motor = other_2487;
    let _e78: MultiVector = self_2859;
    let _e82: Motor = other_2487;
    let _e93: MultiVector = self_2859;
    let _e95: Motor = other_2487;
    let _e101: MultiVector = self_2859;
    let _e105: Motor = other_2487;
    let _e108: Motor = other_2487;
    let _e111: Motor = other_2487;
    let _e114: Motor = other_2487;
    let _e127: MultiVector = self_2859;
    let _e131: Motor = other_2487;
    let _e134: Motor = other_2487;
    let _e137: Motor = other_2487;
    let _e140: Motor = other_2487;
    let _e154: MultiVector = self_2859;
    let _e158: Motor = other_2487;
    let _e161: Motor = other_2487;
    let _e164: Motor = other_2487;
    let _e167: Motor = other_2487;
    let _e181: MultiVector = self_2859;
    let _e185: Motor = other_2487;
    let _e196: MultiVector = self_2859;
    let _e198: Motor = other_2487;
    let _e204: MultiVector = self_2859;
    let _e208: Motor = other_2487;
    let _e211: Motor = other_2487;
    let _e214: Motor = other_2487;
    let _e219: MultiVector = self_2859;
    let _e221: Motor = other_2487;
    let _e227: MultiVector = self_2859;
    let _e231: Motor = other_2487;
    let _e234: MultiVector = self_2859;
    let _e236: Motor = other_2487;
    let _e242: MultiVector = self_2859;
    let _e244: Motor = other_2487;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e63.g3_.y) * vec2<f32>(_e67.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e78.g3_.z) * vec2<f32>(_e82.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e93.g0_ * vec2<f32>(_e95.g0_.w))), ((((((vec4<f32>(_e101.g4_.x) * vec4<f32>(_e105.g1_.z, _e108.g1_.z, _e111.g1_.y, _e114.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e127.g4_.y) * vec4<f32>(_e131.g1_.z, _e134.g1_.z, _e137.g1_.x, _e140.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e154.g4_.z) * vec4<f32>(_e158.g1_.y, _e161.g1_.x, _e164.g1_.y, _e167.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e181.g4_.w) * _e185.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e196.g1_ * vec4<f32>(_e198.g0_.w))), ((vec3<f32>(_e204.g0_.y) * vec3<f32>(_e208.g0_.x, _e211.g0_.y, _e214.g0_.z)) + (_e219.g2_ * vec3<f32>(_e221.g0_.w))), ((vec3<f32>(_e227.g0_.y) * _e231.g1_) + (_e234.g3_ * vec3<f32>(_e236.g0_.w))), (_e242.g4_ * vec4<f32>(_e244.g0_.w)));
}

fn multi_vector_motor_meet(self_2860: MultiVector, other_2488: Motor) -> MultiVector {
    var self_2861: MultiVector;
    var other_2489: Motor;

    self_2861 = self_2860;
    other_2489 = other_2488;
    let _e4: MultiVector = self_2861;
    let _e8: Motor = other_2489;
    let _e18: MultiVector = self_2861;
    let _e22: Motor = other_2489;
    let _e33: MultiVector = self_2861;
    let _e37: Motor = other_2489;
    let _e48: MultiVector = self_2861;
    let _e52: Motor = other_2489;
    let _e63: MultiVector = self_2861;
    let _e67: Motor = other_2489;
    let _e78: MultiVector = self_2861;
    let _e82: Motor = other_2489;
    let _e93: MultiVector = self_2861;
    let _e95: Motor = other_2489;
    let _e101: MultiVector = self_2861;
    let _e105: Motor = other_2489;
    let _e108: Motor = other_2489;
    let _e111: Motor = other_2489;
    let _e114: Motor = other_2489;
    let _e127: MultiVector = self_2861;
    let _e131: Motor = other_2489;
    let _e134: Motor = other_2489;
    let _e137: Motor = other_2489;
    let _e140: Motor = other_2489;
    let _e154: MultiVector = self_2861;
    let _e158: Motor = other_2489;
    let _e161: Motor = other_2489;
    let _e164: Motor = other_2489;
    let _e167: Motor = other_2489;
    let _e181: MultiVector = self_2861;
    let _e185: Motor = other_2489;
    let _e196: MultiVector = self_2861;
    let _e198: Motor = other_2489;
    let _e204: MultiVector = self_2861;
    let _e208: Motor = other_2489;
    let _e211: Motor = other_2489;
    let _e214: Motor = other_2489;
    let _e219: MultiVector = self_2861;
    let _e221: Motor = other_2489;
    let _e227: MultiVector = self_2861;
    let _e231: Motor = other_2489;
    let _e234: MultiVector = self_2861;
    let _e236: Motor = other_2489;
    let _e242: MultiVector = self_2861;
    let _e244: Motor = other_2489;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e63.g3_.y) * vec2<f32>(_e67.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e78.g3_.z) * vec2<f32>(_e82.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e93.g0_ * vec2<f32>(_e95.g0_.w))), ((((((vec4<f32>(_e101.g4_.x) * vec4<f32>(_e105.g1_.z, _e108.g1_.z, _e111.g1_.y, _e114.g0_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0))) + ((vec4<f32>(_e127.g4_.y) * vec4<f32>(_e131.g1_.z, _e134.g1_.z, _e137.g1_.x, _e140.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e154.g4_.z) * vec4<f32>(_e158.g1_.y, _e161.g1_.x, _e164.g1_.y, _e167.g0_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e181.g4_.w) * _e185.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e196.g1_ * vec4<f32>(_e198.g0_.w))), ((vec3<f32>(_e204.g0_.y) * vec3<f32>(_e208.g0_.x, _e211.g0_.y, _e214.g0_.z)) + (_e219.g2_ * vec3<f32>(_e221.g0_.w))), ((vec3<f32>(_e227.g0_.y) * _e231.g1_) + (_e234.g3_ * vec3<f32>(_e236.g0_.w))), (_e242.g4_ * vec4<f32>(_e244.g0_.w)));
}

fn multi_vector_motor_inner_anti_product(self_2862: MultiVector, other_2490: Motor) -> MultiVector {
    var self_2863: MultiVector;
    var other_2491: Motor;

    self_2863 = self_2862;
    other_2491 = other_2490;
    let _e4: MultiVector = self_2863;
    let _e8: Motor = other_2491;
    let _e18: MultiVector = self_2863;
    let _e22: Motor = other_2491;
    let _e33: MultiVector = self_2863;
    let _e37: Motor = other_2491;
    let _e48: MultiVector = self_2863;
    let _e50: Motor = other_2491;
    let _e56: MultiVector = self_2863;
    let _e58: Motor = other_2491;
    let _e63: MultiVector = self_2863;
    let _e67: Motor = other_2491;
    let _e70: Motor = other_2491;
    let _e73: Motor = other_2491;
    let _e78: MultiVector = self_2863;
    let _e80: Motor = other_2491;
    let _e86: MultiVector = self_2863;
    let _e90: Motor = other_2491;
    let _e93: Motor = other_2491;
    let _e96: Motor = other_2491;
    let _e101: MultiVector = self_2863;
    let _e105: Motor = other_2491;
    let _e109: MultiVector = self_2863;
    let _e111: Motor = other_2491;
    let _e117: MultiVector = self_2863;
    let _e121: Motor = other_2491;
    let _e133: MultiVector = self_2863;
    let _e137: Motor = other_2491;
    let _e150: MultiVector = self_2863;
    let _e154: Motor = other_2491;
    let _e157: Motor = other_2491;
    let _e160: Motor = other_2491;
    let _e163: Motor = other_2491;
    let _e176: MultiVector = self_2863;
    let _e180: Motor = other_2491;
    let _e183: Motor = other_2491;
    let _e186: Motor = other_2491;
    let _e189: Motor = other_2491;
    let _e202: MultiVector = self_2863;
    let _e206: Motor = other_2491;
    let _e209: Motor = other_2491;
    let _e212: Motor = other_2491;
    let _e215: Motor = other_2491;
    let _e228: MultiVector = self_2863;
    let _e232: Motor = other_2491;
    let _e244: MultiVector = self_2863;
    let _e247: Motor = other_2491;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (_e56.g1_ * vec4<f32>(_e58.g0_.w)), ((vec3<f32>(_e63.g0_.y) * vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z)) + (_e78.g2_ * vec3<f32>(_e80.g0_.w))), (((vec3<f32>(_e86.g0_.x) * vec3<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z)) + (vec3<f32>(_e101.g0_.y) * _e105.g1_)) + (_e109.g3_ * vec3<f32>(_e111.g0_.w))), ((((((((vec4<f32>(_e117.g1_.y) * vec4<f32>(_e121.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e133.g1_.z) * vec4<f32>(_e137.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e150.g4_.x) * vec4<f32>(_e154.g0_.w, _e157.g0_.z, _e160.g0_.y, _e163.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e176.g4_.y) * vec4<f32>(_e180.g0_.z, _e183.g0_.w, _e186.g0_.x, _e189.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e202.g4_.z) * vec4<f32>(_e206.g0_.y, _e209.g0_.x, _e212.g0_.w, _e215.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e228.g4_.w) * vec4<f32>(_e232.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e244.g1_.wwwx * _e247.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_motor_right_anti_contraction(self_2864: MultiVector, other_2492: Motor) -> MultiVector {
    var self_2865: MultiVector;
    var other_2493: Motor;

    self_2865 = self_2864;
    other_2493 = other_2492;
    let _e4: MultiVector = self_2865;
    let _e8: Motor = other_2493;
    let _e18: MultiVector = self_2865;
    let _e22: Motor = other_2493;
    let _e33: MultiVector = self_2865;
    let _e37: Motor = other_2493;
    let _e48: MultiVector = self_2865;
    let _e50: Motor = other_2493;
    let _e56: MultiVector = self_2865;
    let _e58: Motor = other_2493;
    let _e63: MultiVector = self_2865;
    let _e65: Motor = other_2493;
    let _e70: MultiVector = self_2865;
    let _e74: Motor = other_2493;
    let _e77: Motor = other_2493;
    let _e80: Motor = other_2493;
    let _e85: MultiVector = self_2865;
    let _e87: Motor = other_2493;
    let _e93: MultiVector = self_2865;
    let _e97: Motor = other_2493;
    let _e109: MultiVector = self_2865;
    let _e113: Motor = other_2493;
    let _e126: MultiVector = self_2865;
    let _e130: Motor = other_2493;
    let _e142: MultiVector = self_2865;
    let _e146: Motor = other_2493;
    let _e158: MultiVector = self_2865;
    let _e162: Motor = other_2493;
    let _e174: MultiVector = self_2865;
    let _e178: Motor = other_2493;
    let _e190: MultiVector = self_2865;
    let _e193: Motor = other_2493;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (_e56.g1_ * vec4<f32>(_e58.g0_.w)), (_e63.g2_ * vec3<f32>(_e65.g0_.w)), ((vec3<f32>(_e70.g0_.x) * vec3<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z)) + (_e85.g3_ * vec3<f32>(_e87.g0_.w))), ((((((((vec4<f32>(_e93.g1_.y) * vec4<f32>(_e97.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e109.g1_.z) * vec4<f32>(_e113.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e126.g4_.x) * vec4<f32>(_e130.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e142.g4_.y) * vec4<f32>(_e146.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e158.g4_.z) * vec4<f32>(_e162.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e174.g4_.w) * vec4<f32>(_e178.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e190.g1_.wwwx * _e193.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_motor_scalar_product(self_2866: MultiVector, other_2494: Motor) -> Scalar {
    var self_2867: MultiVector;
    var other_2495: Motor;

    self_2867 = self_2866;
    other_2495 = other_2494;
    let _e5: MultiVector = self_2867;
    let _e8: Motor = other_2495;
    let _e13: MultiVector = self_2867;
    let _e16: Motor = other_2495;
    let _e21: MultiVector = self_2867;
    let _e24: Motor = other_2495;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_motor_dot(self_2868: MultiVector, other_2496: Motor) -> Scalar {
    var self_2869: MultiVector;
    var other_2497: Motor;

    self_2869 = self_2868;
    other_2497 = other_2496;
    let _e5: MultiVector = self_2869;
    let _e8: Motor = other_2497;
    let _e13: MultiVector = self_2869;
    let _e16: Motor = other_2497;
    let _e21: MultiVector = self_2869;
    let _e24: Motor = other_2497;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g1_.x)) - (_e13.g3_.y * _e16.g1_.y)) - (_e21.g3_.z * _e24.g1_.z)));
}

fn multi_vector_motor_anti_scalar_product(self_2870: MultiVector, other_2498: Motor) -> AntiScalar {
    var self_2871: MultiVector;
    var other_2499: Motor;

    self_2871 = self_2870;
    other_2499 = other_2498;
    let _e4: MultiVector = self_2871;
    let _e7: Motor = other_2499;
    let _e11: MultiVector = self_2871;
    let _e14: Motor = other_2499;
    let _e19: MultiVector = self_2871;
    let _e22: Motor = other_2499;
    let _e27: MultiVector = self_2871;
    let _e30: Motor = other_2499;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_motor_anti_dot(self_2872: MultiVector, other_2500: Motor) -> AntiScalar {
    var self_2873: MultiVector;
    var other_2501: Motor;

    self_2873 = self_2872;
    other_2501 = other_2500;
    let _e4: MultiVector = self_2873;
    let _e7: Motor = other_2501;
    let _e11: MultiVector = self_2873;
    let _e14: Motor = other_2501;
    let _e19: MultiVector = self_2873;
    let _e22: Motor = other_2501;
    let _e27: MultiVector = self_2873;
    let _e30: Motor = other_2501;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_rotor_into(self_2874: MultiVector) -> Rotor {
    var self_2875: MultiVector;

    self_2875 = self_2874;
    let _e2: MultiVector = self_2875;
    let _e5: MultiVector = self_2875;
    let _e8: MultiVector = self_2875;
    let _e11: MultiVector = self_2875;
    return Rotor(vec4<f32>(_e2.g2_.x, _e5.g2_.y, _e8.g2_.z, _e11.g0_.y));
}

fn multi_vector_rotor_add(self_2876: MultiVector, other_2502: Rotor) -> MultiVector {
    var self_2877: MultiVector;
    var other_2503: Rotor;

    self_2877 = self_2876;
    other_2503 = other_2502;
    let _e4: MultiVector = self_2877;
    let _e6: Rotor = other_2503;
    let _e9: Rotor = other_2503;
    let _e18: MultiVector = self_2877;
    let _e20: MultiVector = self_2877;
    let _e22: Rotor = other_2503;
    let _e25: Rotor = other_2503;
    let _e28: Rotor = other_2503;
    let _e33: MultiVector = self_2877;
    let _e35: MultiVector = self_2877;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ + vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), _e33.g3_, _e35.g4_);
}

fn multi_vector_rotor_sub(self_2878: MultiVector, other_2504: Rotor) -> MultiVector {
    var self_2879: MultiVector;
    var other_2505: Rotor;

    self_2879 = self_2878;
    other_2505 = other_2504;
    let _e4: MultiVector = self_2879;
    let _e6: Rotor = other_2505;
    let _e9: Rotor = other_2505;
    let _e18: MultiVector = self_2879;
    let _e20: MultiVector = self_2879;
    let _e22: Rotor = other_2505;
    let _e25: Rotor = other_2505;
    let _e28: Rotor = other_2505;
    let _e33: MultiVector = self_2879;
    let _e35: MultiVector = self_2879;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, (_e20.g2_ - vec3<f32>(_e22.g0_.x, _e25.g0_.y, _e28.g0_.z)), _e33.g3_, _e35.g4_);
}

fn multi_vector_rotor_geometric_anti_product(self_2880: MultiVector, other_2506: Rotor) -> MultiVector {
    var self_2881: MultiVector;
    var other_2507: Rotor;

    self_2881 = self_2880;
    other_2507 = other_2506;
    let _e4: MultiVector = self_2881;
    let _e8: Rotor = other_2507;
    let _e18: MultiVector = self_2881;
    let _e22: Rotor = other_2507;
    let _e33: MultiVector = self_2881;
    let _e37: Rotor = other_2507;
    let _e48: MultiVector = self_2881;
    let _e52: Rotor = other_2507;
    let _e63: MultiVector = self_2881;
    let _e67: Rotor = other_2507;
    let _e78: MultiVector = self_2881;
    let _e82: Rotor = other_2507;
    let _e93: MultiVector = self_2881;
    let _e95: Rotor = other_2507;
    let _e101: MultiVector = self_2881;
    let _e105: Rotor = other_2507;
    let _e116: MultiVector = self_2881;
    let _e120: Rotor = other_2507;
    let _e132: MultiVector = self_2881;
    let _e136: Rotor = other_2507;
    let _e149: MultiVector = self_2881;
    let _e153: Rotor = other_2507;
    let _e166: MultiVector = self_2881;
    let _e170: Rotor = other_2507;
    let _e183: MultiVector = self_2881;
    let _e187: Rotor = other_2507;
    let _e198: MultiVector = self_2881;
    let _e201: Rotor = other_2507;
    let _e213: MultiVector = self_2881;
    let _e217: Rotor = other_2507;
    let _e220: Rotor = other_2507;
    let _e223: Rotor = other_2507;
    let _e228: MultiVector = self_2881;
    let _e232: Rotor = other_2507;
    let _e235: Rotor = other_2507;
    let _e238: Rotor = other_2507;
    let _e250: MultiVector = self_2881;
    let _e254: Rotor = other_2507;
    let _e257: Rotor = other_2507;
    let _e260: Rotor = other_2507;
    let _e272: MultiVector = self_2881;
    let _e276: Rotor = other_2507;
    let _e279: Rotor = other_2507;
    let _e282: Rotor = other_2507;
    let _e294: MultiVector = self_2881;
    let _e298: Rotor = other_2507;
    let _e301: Rotor = other_2507;
    let _e304: Rotor = other_2507;
    let _e309: MultiVector = self_2881;
    let _e313: Rotor = other_2507;
    let _e316: Rotor = other_2507;
    let _e319: Rotor = other_2507;
    let _e331: MultiVector = self_2881;
    let _e335: Rotor = other_2507;
    let _e338: Rotor = other_2507;
    let _e341: Rotor = other_2507;
    let _e353: MultiVector = self_2881;
    let _e357: Rotor = other_2507;
    let _e360: Rotor = other_2507;
    let _e363: Rotor = other_2507;
    let _e375: MultiVector = self_2881;
    let _e379: Rotor = other_2507;
    let _e391: MultiVector = self_2881;
    let _e395: Rotor = other_2507;
    let _e408: MultiVector = self_2881;
    let _e412: Rotor = other_2507;
    let _e424: MultiVector = self_2881;
    let _e428: Rotor = other_2507;
    let _e440: MultiVector = self_2881;
    let _e444: Rotor = other_2507;
    let _e456: MultiVector = self_2881;
    let _e460: Rotor = other_2507;
    let _e472: MultiVector = self_2881;
    let _e475: Rotor = other_2507;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e63.g3_.y) * vec2<f32>(_e67.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e78.g3_.z) * vec2<f32>(_e82.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e93.g0_ * vec2<f32>(_e95.g0_.w))), ((((((((vec4<f32>(_e101.g1_.y) * _e105.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e116.g1_.z) * _e120.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e132.g4_.x) * vec4<f32>(_e136.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e149.g4_.y) * vec4<f32>(_e153.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e166.g4_.z) * vec4<f32>(_e170.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e183.g4_.w) * _e187.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((_e198.g1_.xxxw * _e201.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec3<f32>(_e213.g0_.y) * vec3<f32>(_e217.g0_.x, _e220.g0_.y, _e223.g0_.z)) + ((vec3<f32>(_e228.g2_.x) * vec3<f32>(_e232.g0_.w, _e235.g0_.z, _e238.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e250.g2_.y) * vec3<f32>(_e254.g0_.z, _e257.g0_.w, _e260.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e272.g2_.z) * vec3<f32>(_e276.g0_.y, _e279.g0_.x, _e282.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((vec3<f32>(_e294.g0_.x) * vec3<f32>(_e298.g0_.x, _e301.g0_.y, _e304.g0_.z)) + ((vec3<f32>(_e309.g3_.x) * vec3<f32>(_e313.g0_.w, _e316.g0_.z, _e319.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e331.g3_.y) * vec3<f32>(_e335.g0_.z, _e338.g0_.w, _e341.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e353.g3_.z) * vec3<f32>(_e357.g0_.y, _e360.g0_.x, _e363.g0_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e375.g1_.y) * vec4<f32>(_e379.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e391.g1_.z) * vec4<f32>(_e395.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e408.g4_.x) * _e412.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e424.g4_.y) * _e428.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e440.g4_.z) * _e444.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e456.g4_.w) * vec4<f32>(_e460.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e472.g1_.wwwx * _e475.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_regressive_product(self_2882: MultiVector, other_2508: Rotor) -> MultiVector {
    var self_2883: MultiVector;
    var other_2509: Rotor;

    self_2883 = self_2882;
    other_2509 = other_2508;
    let _e4: MultiVector = self_2883;
    let _e8: Rotor = other_2509;
    let _e18: MultiVector = self_2883;
    let _e22: Rotor = other_2509;
    let _e33: MultiVector = self_2883;
    let _e37: Rotor = other_2509;
    let _e48: MultiVector = self_2883;
    let _e50: Rotor = other_2509;
    let _e56: MultiVector = self_2883;
    let _e60: Rotor = other_2509;
    let _e72: MultiVector = self_2883;
    let _e76: Rotor = other_2509;
    let _e89: MultiVector = self_2883;
    let _e93: Rotor = other_2509;
    let _e106: MultiVector = self_2883;
    let _e110: Rotor = other_2509;
    let _e121: MultiVector = self_2883;
    let _e123: Rotor = other_2509;
    let _e129: MultiVector = self_2883;
    let _e133: Rotor = other_2509;
    let _e136: Rotor = other_2509;
    let _e139: Rotor = other_2509;
    let _e144: MultiVector = self_2883;
    let _e146: Rotor = other_2509;
    let _e152: MultiVector = self_2883;
    let _e154: Rotor = other_2509;
    let _e159: MultiVector = self_2883;
    let _e161: Rotor = other_2509;
    return MultiVector((((((vec2<f32>(_e4.g3_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g3_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g3_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), ((((((vec4<f32>(_e56.g4_.x) * vec4<f32>(_e60.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e72.g4_.y) * vec4<f32>(_e76.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g4_.z) * vec4<f32>(_e93.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e106.g4_.w) * _e110.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e121.g1_ * vec4<f32>(_e123.g0_.w))), ((vec3<f32>(_e129.g0_.y) * vec3<f32>(_e133.g0_.x, _e136.g0_.y, _e139.g0_.z)) + (_e144.g2_ * vec3<f32>(_e146.g0_.w))), (_e152.g3_ * vec3<f32>(_e154.g0_.w)), (_e159.g4_ * vec4<f32>(_e161.g0_.w)));
}

fn multi_vector_rotor_anti_wedge(self_2884: MultiVector, other_2510: Rotor) -> MultiVector {
    var self_2885: MultiVector;
    var other_2511: Rotor;

    self_2885 = self_2884;
    other_2511 = other_2510;
    let _e4: MultiVector = self_2885;
    let _e8: Rotor = other_2511;
    let _e18: MultiVector = self_2885;
    let _e22: Rotor = other_2511;
    let _e33: MultiVector = self_2885;
    let _e37: Rotor = other_2511;
    let _e48: MultiVector = self_2885;
    let _e50: Rotor = other_2511;
    let _e56: MultiVector = self_2885;
    let _e60: Rotor = other_2511;
    let _e72: MultiVector = self_2885;
    let _e76: Rotor = other_2511;
    let _e89: MultiVector = self_2885;
    let _e93: Rotor = other_2511;
    let _e106: MultiVector = self_2885;
    let _e110: Rotor = other_2511;
    let _e121: MultiVector = self_2885;
    let _e123: Rotor = other_2511;
    let _e129: MultiVector = self_2885;
    let _e133: Rotor = other_2511;
    let _e136: Rotor = other_2511;
    let _e139: Rotor = other_2511;
    let _e144: MultiVector = self_2885;
    let _e146: Rotor = other_2511;
    let _e152: MultiVector = self_2885;
    let _e154: Rotor = other_2511;
    let _e159: MultiVector = self_2885;
    let _e161: Rotor = other_2511;
    return MultiVector((((((vec2<f32>(_e4.g3_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g3_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g3_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), ((((((vec4<f32>(_e56.g4_.x) * vec4<f32>(_e60.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e72.g4_.y) * vec4<f32>(_e76.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g4_.z) * vec4<f32>(_e93.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e106.g4_.w) * _e110.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e121.g1_ * vec4<f32>(_e123.g0_.w))), ((vec3<f32>(_e129.g0_.y) * vec3<f32>(_e133.g0_.x, _e136.g0_.y, _e139.g0_.z)) + (_e144.g2_ * vec3<f32>(_e146.g0_.w))), (_e152.g3_ * vec3<f32>(_e154.g0_.w)), (_e159.g4_ * vec4<f32>(_e161.g0_.w)));
}

fn multi_vector_rotor_meet(self_2886: MultiVector, other_2512: Rotor) -> MultiVector {
    var self_2887: MultiVector;
    var other_2513: Rotor;

    self_2887 = self_2886;
    other_2513 = other_2512;
    let _e4: MultiVector = self_2887;
    let _e8: Rotor = other_2513;
    let _e18: MultiVector = self_2887;
    let _e22: Rotor = other_2513;
    let _e33: MultiVector = self_2887;
    let _e37: Rotor = other_2513;
    let _e48: MultiVector = self_2887;
    let _e50: Rotor = other_2513;
    let _e56: MultiVector = self_2887;
    let _e60: Rotor = other_2513;
    let _e72: MultiVector = self_2887;
    let _e76: Rotor = other_2513;
    let _e89: MultiVector = self_2887;
    let _e93: Rotor = other_2513;
    let _e106: MultiVector = self_2887;
    let _e110: Rotor = other_2513;
    let _e121: MultiVector = self_2887;
    let _e123: Rotor = other_2513;
    let _e129: MultiVector = self_2887;
    let _e133: Rotor = other_2513;
    let _e136: Rotor = other_2513;
    let _e139: Rotor = other_2513;
    let _e144: MultiVector = self_2887;
    let _e146: Rotor = other_2513;
    let _e152: MultiVector = self_2887;
    let _e154: Rotor = other_2513;
    let _e159: MultiVector = self_2887;
    let _e161: Rotor = other_2513;
    return MultiVector((((((vec2<f32>(_e4.g3_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g3_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g3_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), ((((((vec4<f32>(_e56.g4_.x) * vec4<f32>(_e60.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e72.g4_.y) * vec4<f32>(_e76.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g4_.z) * vec4<f32>(_e93.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e106.g4_.w) * _e110.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e121.g1_ * vec4<f32>(_e123.g0_.w))), ((vec3<f32>(_e129.g0_.y) * vec3<f32>(_e133.g0_.x, _e136.g0_.y, _e139.g0_.z)) + (_e144.g2_ * vec3<f32>(_e146.g0_.w))), (_e152.g3_ * vec3<f32>(_e154.g0_.w)), (_e159.g4_ * vec4<f32>(_e161.g0_.w)));
}

fn multi_vector_rotor_inner_anti_product(self_2888: MultiVector, other_2514: Rotor) -> MultiVector {
    var self_2889: MultiVector;
    var other_2515: Rotor;

    self_2889 = self_2888;
    other_2515 = other_2514;
    let _e4: MultiVector = self_2889;
    let _e8: Rotor = other_2515;
    let _e18: MultiVector = self_2889;
    let _e22: Rotor = other_2515;
    let _e33: MultiVector = self_2889;
    let _e37: Rotor = other_2515;
    let _e48: MultiVector = self_2889;
    let _e50: Rotor = other_2515;
    let _e56: MultiVector = self_2889;
    let _e58: Rotor = other_2515;
    let _e63: MultiVector = self_2889;
    let _e67: Rotor = other_2515;
    let _e70: Rotor = other_2515;
    let _e73: Rotor = other_2515;
    let _e78: MultiVector = self_2889;
    let _e80: Rotor = other_2515;
    let _e86: MultiVector = self_2889;
    let _e90: Rotor = other_2515;
    let _e93: Rotor = other_2515;
    let _e96: Rotor = other_2515;
    let _e101: MultiVector = self_2889;
    let _e103: Rotor = other_2515;
    let _e109: MultiVector = self_2889;
    let _e113: Rotor = other_2515;
    let _e125: MultiVector = self_2889;
    let _e129: Rotor = other_2515;
    let _e142: MultiVector = self_2889;
    let _e146: Rotor = other_2515;
    let _e158: MultiVector = self_2889;
    let _e162: Rotor = other_2515;
    let _e174: MultiVector = self_2889;
    let _e178: Rotor = other_2515;
    let _e190: MultiVector = self_2889;
    let _e194: Rotor = other_2515;
    let _e206: MultiVector = self_2889;
    let _e209: Rotor = other_2515;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (_e56.g1_ * vec4<f32>(_e58.g0_.w)), ((vec3<f32>(_e63.g0_.y) * vec3<f32>(_e67.g0_.x, _e70.g0_.y, _e73.g0_.z)) + (_e78.g2_ * vec3<f32>(_e80.g0_.w))), ((vec3<f32>(_e86.g0_.x) * vec3<f32>(_e90.g0_.x, _e93.g0_.y, _e96.g0_.z)) + (_e101.g3_ * vec3<f32>(_e103.g0_.w))), ((((((((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e125.g1_.z) * vec4<f32>(_e129.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e142.g4_.x) * _e146.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e158.g4_.y) * _e162.g0_.zwxz) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e174.g4_.z) * _e178.g0_.yxwy) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e190.g4_.w) * vec4<f32>(_e194.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e206.g1_.wwwx * _e209.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_right_anti_contraction(self_2890: MultiVector, other_2516: Rotor) -> MultiVector {
    var self_2891: MultiVector;
    var other_2517: Rotor;

    self_2891 = self_2890;
    other_2517 = other_2516;
    let _e4: MultiVector = self_2891;
    let _e8: Rotor = other_2517;
    let _e18: MultiVector = self_2891;
    let _e22: Rotor = other_2517;
    let _e33: MultiVector = self_2891;
    let _e37: Rotor = other_2517;
    let _e48: MultiVector = self_2891;
    let _e50: Rotor = other_2517;
    let _e56: MultiVector = self_2891;
    let _e58: Rotor = other_2517;
    let _e63: MultiVector = self_2891;
    let _e65: Rotor = other_2517;
    let _e70: MultiVector = self_2891;
    let _e74: Rotor = other_2517;
    let _e77: Rotor = other_2517;
    let _e80: Rotor = other_2517;
    let _e85: MultiVector = self_2891;
    let _e87: Rotor = other_2517;
    let _e93: MultiVector = self_2891;
    let _e97: Rotor = other_2517;
    let _e109: MultiVector = self_2891;
    let _e113: Rotor = other_2517;
    let _e126: MultiVector = self_2891;
    let _e130: Rotor = other_2517;
    let _e142: MultiVector = self_2891;
    let _e146: Rotor = other_2517;
    let _e158: MultiVector = self_2891;
    let _e162: Rotor = other_2517;
    let _e174: MultiVector = self_2891;
    let _e178: Rotor = other_2517;
    let _e190: MultiVector = self_2891;
    let _e193: Rotor = other_2517;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (_e56.g1_ * vec4<f32>(_e58.g0_.w)), (_e63.g2_ * vec3<f32>(_e65.g0_.w)), ((vec3<f32>(_e70.g0_.x) * vec3<f32>(_e74.g0_.x, _e77.g0_.y, _e80.g0_.z)) + (_e85.g3_ * vec3<f32>(_e87.g0_.w))), ((((((((vec4<f32>(_e93.g1_.y) * vec4<f32>(_e97.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e109.g1_.z) * vec4<f32>(_e113.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e126.g4_.x) * vec4<f32>(_e130.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e142.g4_.y) * vec4<f32>(_e146.g0_.w)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e158.g4_.z) * vec4<f32>(_e162.g0_.w)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e174.g4_.w) * vec4<f32>(_e178.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e190.g1_.wwwx * _e193.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn multi_vector_rotor_anti_scalar_product(self_2892: MultiVector, other_2518: Rotor) -> AntiScalar {
    var self_2893: MultiVector;
    var other_2519: Rotor;

    self_2893 = self_2892;
    other_2519 = other_2518;
    let _e4: MultiVector = self_2893;
    let _e7: Rotor = other_2519;
    let _e11: MultiVector = self_2893;
    let _e14: Rotor = other_2519;
    let _e19: MultiVector = self_2893;
    let _e22: Rotor = other_2519;
    let _e27: MultiVector = self_2893;
    let _e30: Rotor = other_2519;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_rotor_anti_dot(self_2894: MultiVector, other_2520: Rotor) -> AntiScalar {
    var self_2895: MultiVector;
    var other_2521: Rotor;

    self_2895 = self_2894;
    other_2521 = other_2520;
    let _e4: MultiVector = self_2895;
    let _e7: Rotor = other_2521;
    let _e11: MultiVector = self_2895;
    let _e14: Rotor = other_2521;
    let _e19: MultiVector = self_2895;
    let _e22: Rotor = other_2521;
    let _e27: MultiVector = self_2895;
    let _e30: Rotor = other_2521;
    return AntiScalar(((((_e4.g0_.y * _e7.g0_.w) - (_e11.g2_.x * _e14.g0_.x)) - (_e19.g2_.y * _e22.g0_.y)) - (_e27.g2_.z * _e30.g0_.z)));
}

fn multi_vector_translator_into(self_2896: MultiVector) -> Translator {
    var self_2897: MultiVector;

    self_2897 = self_2896;
    let _e2: MultiVector = self_2897;
    let _e5: MultiVector = self_2897;
    let _e8: MultiVector = self_2897;
    let _e11: MultiVector = self_2897;
    return Translator(vec4<f32>(_e2.g3_.x, _e5.g3_.y, _e8.g3_.z, _e11.g0_.y));
}

fn multi_vector_translator_add(self_2898: MultiVector, other_2522: Translator) -> MultiVector {
    var self_2899: MultiVector;
    var other_2523: Translator;

    self_2899 = self_2898;
    other_2523 = other_2522;
    let _e4: MultiVector = self_2899;
    let _e6: Translator = other_2523;
    let _e9: Translator = other_2523;
    let _e18: MultiVector = self_2899;
    let _e20: MultiVector = self_2899;
    let _e22: MultiVector = self_2899;
    let _e24: Translator = other_2523;
    let _e27: Translator = other_2523;
    let _e30: Translator = other_2523;
    let _e35: MultiVector = self_2899;
    return MultiVector((_e4.g0_ + (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, _e20.g2_, (_e22.g3_ + vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)), _e35.g4_);
}

fn multi_vector_translator_sub(self_2900: MultiVector, other_2524: Translator) -> MultiVector {
    var self_2901: MultiVector;
    var other_2525: Translator;

    self_2901 = self_2900;
    other_2525 = other_2524;
    let _e4: MultiVector = self_2901;
    let _e6: Translator = other_2525;
    let _e9: Translator = other_2525;
    let _e18: MultiVector = self_2901;
    let _e20: MultiVector = self_2901;
    let _e22: MultiVector = self_2901;
    let _e24: Translator = other_2525;
    let _e27: Translator = other_2525;
    let _e30: Translator = other_2525;
    let _e35: MultiVector = self_2901;
    return MultiVector((_e4.g0_ - (vec2<f32>(_e6.g0_.x, _e9.g0_.w) * vec2<f32>(0.0, 1.0))), _e18.g1_, _e20.g2_, (_e22.g3_ - vec3<f32>(_e24.g0_.x, _e27.g0_.y, _e30.g0_.z)), _e35.g4_);
}

fn multi_vector_translator_geometric_product(self_2902: MultiVector, other_2526: Translator) -> MultiVector {
    var self_2903: MultiVector;
    var other_2527: Translator;

    self_2903 = self_2902;
    other_2527 = other_2526;
    let _e4: MultiVector = self_2903;
    let _e8: Translator = other_2527;
    let _e18: MultiVector = self_2903;
    let _e22: Translator = other_2527;
    let _e33: MultiVector = self_2903;
    let _e37: Translator = other_2527;
    let _e48: MultiVector = self_2903;
    let _e52: Translator = other_2527;
    let _e63: MultiVector = self_2903;
    let _e67: Translator = other_2527;
    let _e78: MultiVector = self_2903;
    let _e82: Translator = other_2527;
    let _e93: MultiVector = self_2903;
    let _e97: Translator = other_2527;
    let _e100: Translator = other_2527;
    let _e110: MultiVector = self_2903;
    let _e114: Translator = other_2527;
    let _e125: MultiVector = self_2903;
    let _e129: Translator = other_2527;
    let _e141: MultiVector = self_2903;
    let _e145: Translator = other_2527;
    let _e158: MultiVector = self_2903;
    let _e162: Translator = other_2527;
    let _e175: MultiVector = self_2903;
    let _e179: Translator = other_2527;
    let _e183: MultiVector = self_2903;
    let _e186: MultiVector = self_2903;
    let _e189: MultiVector = self_2903;
    let _e192: MultiVector = self_2903;
    let _e196: Translator = other_2527;
    let _e209: MultiVector = self_2903;
    let _e213: Translator = other_2527;
    let _e216: Translator = other_2527;
    let _e219: Translator = other_2527;
    let _e224: MultiVector = self_2903;
    let _e228: Translator = other_2527;
    let _e231: Translator = other_2527;
    let _e234: Translator = other_2527;
    let _e246: MultiVector = self_2903;
    let _e250: Translator = other_2527;
    let _e253: Translator = other_2527;
    let _e256: Translator = other_2527;
    let _e268: MultiVector = self_2903;
    let _e272: Translator = other_2527;
    let _e283: MultiVector = self_2903;
    let _e287: Translator = other_2527;
    let _e298: MultiVector = self_2903;
    let _e301: MultiVector = self_2903;
    let _e304: MultiVector = self_2903;
    let _e308: Translator = other_2527;
    let _e311: Translator = other_2527;
    let _e314: Translator = other_2527;
    let _e326: MultiVector = self_2903;
    let _e330: Translator = other_2527;
    let _e333: Translator = other_2527;
    let _e336: Translator = other_2527;
    let _e341: MultiVector = self_2903;
    let _e345: Translator = other_2527;
    let _e348: Translator = other_2527;
    let _e351: Translator = other_2527;
    let _e363: MultiVector = self_2903;
    let _e367: Translator = other_2527;
    let _e370: Translator = other_2527;
    let _e373: Translator = other_2527;
    let _e385: MultiVector = self_2903;
    let _e389: Translator = other_2527;
    let _e392: Translator = other_2527;
    let _e395: Translator = other_2527;
    let _e407: MultiVector = self_2903;
    let _e411: Translator = other_2527;
    let _e422: MultiVector = self_2903;
    let _e426: Translator = other_2527;
    let _e438: MultiVector = self_2903;
    let _e442: Translator = other_2527;
    let _e453: MultiVector = self_2903;
    let _e457: Translator = other_2527;
    let _e469: MultiVector = self_2903;
    let _e473: Translator = other_2527;
    let _e485: MultiVector = self_2903;
    let _e488: MultiVector = self_2903;
    let _e491: MultiVector = self_2903;
    let _e494: MultiVector = self_2903;
    let _e498: Translator = other_2527;
    return MultiVector(((((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g3_.x) * vec2<f32>(_e52.g0_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e63.g3_.y) * vec2<f32>(_e67.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e78.g3_.z) * vec2<f32>(_e82.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e93.g0_.x) * vec2<f32>(_e97.g0_.x, _e100.g0_.w)) * vec2<f32>(0.0, 1.0))), (((((((vec4<f32>(_e110.g1_.y) * _e114.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e125.g1_.z) * _e129.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e141.g4_.y) * vec4<f32>(_e145.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e158.g4_.z) * vec4<f32>(_e162.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e175.g4_.w) * _e179.g0_)) + ((vec4<f32>(_e183.g1_.x, _e186.g1_.x, _e189.g1_.x, _e192.g4_.x) * _e196.g0_.xzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), ((((((vec3<f32>(_e209.g0_.y) * vec3<f32>(_e213.g0_.x, _e216.g0_.y, _e219.g0_.z)) + ((vec3<f32>(_e224.g2_.y) * vec3<f32>(_e228.g0_.z, _e231.g0_.z, _e234.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e246.g2_.z) * vec3<f32>(_e250.g0_.y, _e253.g0_.x, _e256.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e268.g3_.y) * vec3<f32>(_e272.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e283.g3_.z) * vec3<f32>(_e287.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e298.g3_.x, _e301.g2_.x, _e304.g2_.x) * vec3<f32>(_e308.g0_.w, _e311.g0_.z, _e314.g0_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))), ((((vec3<f32>(_e326.g0_.x) * vec3<f32>(_e330.g0_.x, _e333.g0_.y, _e336.g0_.z)) + ((vec3<f32>(_e341.g3_.y) * vec3<f32>(_e345.g0_.z, _e348.g0_.z, _e351.g0_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e363.g3_.z) * vec3<f32>(_e367.g0_.y, _e370.g0_.x, _e373.g0_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e385.g3_.x) * vec3<f32>(_e389.g0_.x, _e392.g0_.z, _e395.g0_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e407.g1_.y) * _e411.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e422.g1_.z) * _e426.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e438.g1_.w) * _e442.g0_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e453.g4_.y) * _e457.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e469.g4_.z) * _e473.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e485.g1_.x, _e488.g4_.x, _e491.g4_.x, _e494.g1_.x) * _e498.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_translator_geometric_anti_product(self_2904: MultiVector, other_2528: Translator) -> MultiVector {
    var self_2905: MultiVector;
    var other_2529: Translator;

    self_2905 = self_2904;
    other_2529 = other_2528;
    let _e4: MultiVector = self_2905;
    let _e8: Translator = other_2529;
    let _e18: MultiVector = self_2905;
    let _e22: Translator = other_2529;
    let _e33: MultiVector = self_2905;
    let _e37: Translator = other_2529;
    let _e48: MultiVector = self_2905;
    let _e50: Translator = other_2529;
    let _e56: MultiVector = self_2905;
    let _e60: Translator = other_2529;
    let _e72: MultiVector = self_2905;
    let _e76: Translator = other_2529;
    let _e88: MultiVector = self_2905;
    let _e92: Translator = other_2529;
    let _e104: MultiVector = self_2905;
    let _e108: Translator = other_2529;
    let _e120: MultiVector = self_2905;
    let _e123: Translator = other_2529;
    let _e134: MultiVector = self_2905;
    let _e136: Translator = other_2529;
    let _e141: MultiVector = self_2905;
    let _e145: Translator = other_2529;
    let _e148: Translator = other_2529;
    let _e151: Translator = other_2529;
    let _e156: MultiVector = self_2905;
    let _e160: Translator = other_2529;
    let _e163: Translator = other_2529;
    let _e166: Translator = other_2529;
    let _e178: MultiVector = self_2905;
    let _e182: Translator = other_2529;
    let _e185: Translator = other_2529;
    let _e188: Translator = other_2529;
    let _e200: MultiVector = self_2905;
    let _e204: Translator = other_2529;
    let _e215: MultiVector = self_2905;
    let _e219: Translator = other_2529;
    let _e230: MultiVector = self_2905;
    let _e233: MultiVector = self_2905;
    let _e236: MultiVector = self_2905;
    let _e240: Translator = other_2529;
    let _e243: Translator = other_2529;
    let _e246: Translator = other_2529;
    let _e258: MultiVector = self_2905;
    let _e262: Translator = other_2529;
    let _e272: MultiVector = self_2905;
    let _e276: Translator = other_2529;
    let _e287: MultiVector = self_2905;
    let _e291: Translator = other_2529;
    let _e303: MultiVector = self_2905;
    let _e307: Translator = other_2529;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), ((((((vec4<f32>(_e56.g1_.w) * _e60.g0_) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e72.g4_.x) * _e76.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e88.g4_.y) * _e92.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e104.g4_.z) * _e108.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((_e120.g1_.xyzx * _e123.g0_.wwwx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), (_e134.g2_ * vec3<f32>(_e136.g0_.w)), ((((((vec3<f32>(_e141.g0_.y) * vec3<f32>(_e145.g0_.x, _e148.g0_.y, _e151.g0_.z)) + ((vec3<f32>(_e156.g2_.y) * vec3<f32>(_e160.g0_.z, _e163.g0_.z, _e166.g0_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e178.g2_.z) * vec3<f32>(_e182.g0_.y, _e185.g0_.x, _e188.g0_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e200.g3_.y) * vec3<f32>(_e204.g0_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e215.g3_.z) * vec3<f32>(_e219.g0_.w)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e230.g3_.x, _e233.g2_.x, _e236.g2_.x) * vec3<f32>(_e240.g0_.w, _e243.g0_.z, _e246.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))), (((((vec4<f32>(_e258.g4_.y) * _e262.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e272.g4_.z) * _e276.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e287.g4_.w) * vec4<f32>(_e291.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e303.g4_.x) * _e307.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_regressive_product(self_2906: MultiVector, other_2530: Translator) -> MultiVector {
    var self_2907: MultiVector;
    var other_2531: Translator;

    self_2907 = self_2906;
    other_2531 = other_2530;
    let _e4: MultiVector = self_2907;
    let _e8: Translator = other_2531;
    let _e18: MultiVector = self_2907;
    let _e22: Translator = other_2531;
    let _e33: MultiVector = self_2907;
    let _e37: Translator = other_2531;
    let _e48: MultiVector = self_2907;
    let _e50: Translator = other_2531;
    let _e56: MultiVector = self_2907;
    let _e60: Translator = other_2531;
    let _e71: MultiVector = self_2907;
    let _e75: Translator = other_2531;
    let _e87: MultiVector = self_2907;
    let _e91: Translator = other_2531;
    let _e103: MultiVector = self_2907;
    let _e105: Translator = other_2531;
    let _e111: MultiVector = self_2907;
    let _e113: Translator = other_2531;
    let _e118: MultiVector = self_2907;
    let _e122: Translator = other_2531;
    let _e125: Translator = other_2531;
    let _e128: Translator = other_2531;
    let _e133: MultiVector = self_2907;
    let _e135: Translator = other_2531;
    let _e141: MultiVector = self_2907;
    let _e143: Translator = other_2531;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (((((vec4<f32>(_e56.g4_.x) * _e60.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g4_.y) * _e75.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e87.g4_.z) * _e91.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e103.g1_ * vec4<f32>(_e105.g0_.w))), (_e111.g2_ * vec3<f32>(_e113.g0_.w)), ((vec3<f32>(_e118.g0_.y) * vec3<f32>(_e122.g0_.x, _e125.g0_.y, _e128.g0_.z)) + (_e133.g3_ * vec3<f32>(_e135.g0_.w))), (_e141.g4_ * vec4<f32>(_e143.g0_.w)));
}

fn multi_vector_translator_anti_wedge(self_2908: MultiVector, other_2532: Translator) -> MultiVector {
    var self_2909: MultiVector;
    var other_2533: Translator;

    self_2909 = self_2908;
    other_2533 = other_2532;
    let _e4: MultiVector = self_2909;
    let _e8: Translator = other_2533;
    let _e18: MultiVector = self_2909;
    let _e22: Translator = other_2533;
    let _e33: MultiVector = self_2909;
    let _e37: Translator = other_2533;
    let _e48: MultiVector = self_2909;
    let _e50: Translator = other_2533;
    let _e56: MultiVector = self_2909;
    let _e60: Translator = other_2533;
    let _e71: MultiVector = self_2909;
    let _e75: Translator = other_2533;
    let _e87: MultiVector = self_2909;
    let _e91: Translator = other_2533;
    let _e103: MultiVector = self_2909;
    let _e105: Translator = other_2533;
    let _e111: MultiVector = self_2909;
    let _e113: Translator = other_2533;
    let _e118: MultiVector = self_2909;
    let _e122: Translator = other_2533;
    let _e125: Translator = other_2533;
    let _e128: Translator = other_2533;
    let _e133: MultiVector = self_2909;
    let _e135: Translator = other_2533;
    let _e141: MultiVector = self_2909;
    let _e143: Translator = other_2533;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (((((vec4<f32>(_e56.g4_.x) * _e60.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g4_.y) * _e75.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e87.g4_.z) * _e91.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e103.g1_ * vec4<f32>(_e105.g0_.w))), (_e111.g2_ * vec3<f32>(_e113.g0_.w)), ((vec3<f32>(_e118.g0_.y) * vec3<f32>(_e122.g0_.x, _e125.g0_.y, _e128.g0_.z)) + (_e133.g3_ * vec3<f32>(_e135.g0_.w))), (_e141.g4_ * vec4<f32>(_e143.g0_.w)));
}

fn multi_vector_translator_meet(self_2910: MultiVector, other_2534: Translator) -> MultiVector {
    var self_2911: MultiVector;
    var other_2535: Translator;

    self_2911 = self_2910;
    other_2535 = other_2534;
    let _e4: MultiVector = self_2911;
    let _e8: Translator = other_2535;
    let _e18: MultiVector = self_2911;
    let _e22: Translator = other_2535;
    let _e33: MultiVector = self_2911;
    let _e37: Translator = other_2535;
    let _e48: MultiVector = self_2911;
    let _e50: Translator = other_2535;
    let _e56: MultiVector = self_2911;
    let _e60: Translator = other_2535;
    let _e71: MultiVector = self_2911;
    let _e75: Translator = other_2535;
    let _e87: MultiVector = self_2911;
    let _e91: Translator = other_2535;
    let _e103: MultiVector = self_2911;
    let _e105: Translator = other_2535;
    let _e111: MultiVector = self_2911;
    let _e113: Translator = other_2535;
    let _e118: MultiVector = self_2911;
    let _e122: Translator = other_2535;
    let _e125: Translator = other_2535;
    let _e128: Translator = other_2535;
    let _e133: MultiVector = self_2911;
    let _e135: Translator = other_2535;
    let _e141: MultiVector = self_2911;
    let _e143: Translator = other_2535;
    return MultiVector((((((vec2<f32>(_e4.g2_.x) * vec2<f32>(_e8.g0_.x)) * vec2<f32>(-(1.0), 0.0)) + ((vec2<f32>(_e18.g2_.y) * vec2<f32>(_e22.g0_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e33.g2_.z) * vec2<f32>(_e37.g0_.z)) * vec2<f32>(-(1.0), 0.0))) + (_e48.g0_ * vec2<f32>(_e50.g0_.w))), (((((vec4<f32>(_e56.g4_.x) * _e60.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0)) + ((vec4<f32>(_e71.g4_.y) * _e75.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e87.g4_.z) * _e91.g0_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + (_e103.g1_ * vec4<f32>(_e105.g0_.w))), (_e111.g2_ * vec3<f32>(_e113.g0_.w)), ((vec3<f32>(_e118.g0_.y) * vec3<f32>(_e122.g0_.x, _e125.g0_.y, _e128.g0_.z)) + (_e133.g3_ * vec3<f32>(_e135.g0_.w))), (_e141.g4_ * vec4<f32>(_e143.g0_.w)));
}

fn multi_vector_translator_inner_anti_product(self_2912: MultiVector, other_2536: Translator) -> MultiVector {
    var self_2913: MultiVector;
    var other_2537: Translator;

    self_2913 = self_2912;
    other_2537 = other_2536;
    let _e4: MultiVector = self_2913;
    let _e6: Translator = other_2537;
    let _e11: MultiVector = self_2913;
    let _e13: Translator = other_2537;
    let _e18: MultiVector = self_2913;
    let _e20: Translator = other_2537;
    let _e25: MultiVector = self_2913;
    let _e29: Translator = other_2537;
    let _e32: Translator = other_2537;
    let _e35: Translator = other_2537;
    let _e40: MultiVector = self_2913;
    let _e42: Translator = other_2537;
    let _e48: MultiVector = self_2913;
    let _e52: Translator = other_2537;
    let _e62: MultiVector = self_2913;
    let _e66: Translator = other_2537;
    let _e77: MultiVector = self_2913;
    let _e81: Translator = other_2537;
    let _e93: MultiVector = self_2913;
    let _e97: Translator = other_2537;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_.w)), (_e11.g1_ * vec4<f32>(_e13.g0_.w)), (_e18.g2_ * vec3<f32>(_e20.g0_.w)), ((vec3<f32>(_e25.g0_.y) * vec3<f32>(_e29.g0_.x, _e32.g0_.y, _e35.g0_.z)) + (_e40.g3_ * vec3<f32>(_e42.g0_.w))), (((((vec4<f32>(_e48.g4_.y) * _e52.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, 1.0)) + ((vec4<f32>(_e62.g4_.z) * _e66.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, 1.0))) + ((vec4<f32>(_e77.g4_.w) * vec4<f32>(_e81.g0_.w)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e93.g4_.x) * _e97.g0_.wxxx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_translator_right_anti_contraction(self_2914: MultiVector, other_2538: Translator) -> MultiVector {
    var self_2915: MultiVector;
    var other_2539: Translator;

    self_2915 = self_2914;
    other_2539 = other_2538;
    let _e4: MultiVector = self_2915;
    let _e6: Translator = other_2539;
    let _e11: MultiVector = self_2915;
    let _e13: Translator = other_2539;
    let _e18: MultiVector = self_2915;
    let _e20: Translator = other_2539;
    let _e25: MultiVector = self_2915;
    let _e27: Translator = other_2539;
    let _e32: MultiVector = self_2915;
    let _e34: Translator = other_2539;
    return MultiVector((_e4.g0_ * vec2<f32>(_e6.g0_.w)), (_e11.g1_ * vec4<f32>(_e13.g0_.w)), (_e18.g2_ * vec3<f32>(_e20.g0_.w)), (_e25.g3_ * vec3<f32>(_e27.g0_.w)), (_e32.g4_ * vec4<f32>(_e34.g0_.w)));
}

fn multi_vector_translator_scalar_product(self_2916: MultiVector, other_2540: Translator) -> Scalar {
    var self_2917: MultiVector;
    var other_2541: Translator;

    self_2917 = self_2916;
    other_2541 = other_2540;
    let _e5: MultiVector = self_2917;
    let _e8: Translator = other_2541;
    let _e13: MultiVector = self_2917;
    let _e16: Translator = other_2541;
    let _e21: MultiVector = self_2917;
    let _e24: Translator = other_2541;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g0_.x)) - (_e13.g3_.y * _e16.g0_.y)) - (_e21.g3_.z * _e24.g0_.z)));
}

fn multi_vector_translator_dot(self_2918: MultiVector, other_2542: Translator) -> Scalar {
    var self_2919: MultiVector;
    var other_2543: Translator;

    self_2919 = self_2918;
    other_2543 = other_2542;
    let _e5: MultiVector = self_2919;
    let _e8: Translator = other_2543;
    let _e13: MultiVector = self_2919;
    let _e16: Translator = other_2543;
    let _e21: MultiVector = self_2919;
    let _e24: Translator = other_2543;
    return Scalar((((0.0 - (_e5.g3_.x * _e8.g0_.x)) - (_e13.g3_.y * _e16.g0_.y)) - (_e21.g3_.z * _e24.g0_.z)));
}

fn multi_vector_translator_anti_scalar_product(self_2920: MultiVector, other_2544: Translator) -> AntiScalar {
    var self_2921: MultiVector;
    var other_2545: Translator;

    self_2921 = self_2920;
    other_2545 = other_2544;
    let _e4: MultiVector = self_2921;
    let _e7: Translator = other_2545;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn multi_vector_translator_anti_dot(self_2922: MultiVector, other_2546: Translator) -> AntiScalar {
    var self_2923: MultiVector;
    var other_2547: Translator;

    self_2923 = self_2922;
    other_2547 = other_2546;
    let _e4: MultiVector = self_2923;
    let _e7: Translator = other_2547;
    return AntiScalar((_e4.g0_.y * _e7.g0_.w));
}

fn multi_vector_flector_into(self_2924: MultiVector) -> Flector {
    var self_2925: MultiVector;

    self_2925 = self_2924;
    let _e2: MultiVector = self_2925;
    let _e4: MultiVector = self_2925;
    return Flector(_e2.g1_, _e4.g4_);
}

fn multi_vector_flector_add(self_2926: MultiVector, other_2548: Flector) -> MultiVector {
    var self_2927: MultiVector;
    var other_2549: Flector;

    self_2927 = self_2926;
    other_2549 = other_2548;
    let _e4: MultiVector = self_2927;
    let _e6: MultiVector = self_2927;
    let _e8: Flector = other_2549;
    let _e11: MultiVector = self_2927;
    let _e13: MultiVector = self_2927;
    let _e15: MultiVector = self_2927;
    let _e17: Flector = other_2549;
    return MultiVector(_e4.g0_, (_e6.g1_ + _e8.g0_), _e11.g2_, _e13.g3_, (_e15.g4_ + _e17.g1_));
}

fn multi_vector_flector_sub(self_2928: MultiVector, other_2550: Flector) -> MultiVector {
    var self_2929: MultiVector;
    var other_2551: Flector;

    self_2929 = self_2928;
    other_2551 = other_2550;
    let _e4: MultiVector = self_2929;
    let _e6: MultiVector = self_2929;
    let _e8: Flector = other_2551;
    let _e11: MultiVector = self_2929;
    let _e13: MultiVector = self_2929;
    let _e15: MultiVector = self_2929;
    let _e17: Flector = other_2551;
    return MultiVector(_e4.g0_, (_e6.g1_ - _e8.g0_), _e11.g2_, _e13.g3_, (_e15.g4_ - _e17.g1_));
}

fn multi_vector_flector_geometric_product(self_2930: MultiVector, other_2552: Flector) -> MultiVector {
    var self_2931: MultiVector;
    var other_2553: Flector;

    self_2931 = self_2930;
    other_2553 = other_2552;
    let _e4: MultiVector = self_2931;
    let _e8: Flector = other_2553;
    let _e11: Flector = other_2553;
    let _e16: MultiVector = self_2931;
    let _e20: Flector = other_2553;
    let _e23: Flector = other_2553;
    let _e29: MultiVector = self_2931;
    let _e33: Flector = other_2553;
    let _e36: Flector = other_2553;
    let _e42: MultiVector = self_2931;
    let _e46: Flector = other_2553;
    let _e57: MultiVector = self_2931;
    let _e61: Flector = other_2553;
    let _e72: MultiVector = self_2931;
    let _e76: Flector = other_2553;
    let _e87: MultiVector = self_2931;
    let _e91: Flector = other_2553;
    let _e94: Flector = other_2553;
    let _e100: MultiVector = self_2931;
    let _e103: MultiVector = self_2931;
    let _e107: Flector = other_2553;
    let _e110: Flector = other_2553;
    let _e120: MultiVector = self_2931;
    let _e124: Flector = other_2553;
    let _e127: MultiVector = self_2931;
    let _e131: Flector = other_2553;
    let _e143: MultiVector = self_2931;
    let _e147: Flector = other_2553;
    let _e159: MultiVector = self_2931;
    let _e163: Flector = other_2553;
    let _e175: MultiVector = self_2931;
    let _e179: Flector = other_2553;
    let _e182: Flector = other_2553;
    let _e185: Flector = other_2553;
    let _e188: Flector = other_2553;
    let _e202: MultiVector = self_2931;
    let _e206: Flector = other_2553;
    let _e209: Flector = other_2553;
    let _e212: Flector = other_2553;
    let _e215: Flector = other_2553;
    let _e229: MultiVector = self_2931;
    let _e233: Flector = other_2553;
    let _e236: Flector = other_2553;
    let _e239: Flector = other_2553;
    let _e242: Flector = other_2553;
    let _e256: MultiVector = self_2931;
    let _e259: MultiVector = self_2931;
    let _e262: MultiVector = self_2931;
    let _e265: MultiVector = self_2931;
    let _e269: Flector = other_2553;
    let _e281: MultiVector = self_2931;
    let _e285: Flector = other_2553;
    let _e288: Flector = other_2553;
    let _e291: Flector = other_2553;
    let _e303: MultiVector = self_2931;
    let _e307: Flector = other_2553;
    let _e310: Flector = other_2553;
    let _e313: Flector = other_2553;
    let _e326: MultiVector = self_2931;
    let _e330: Flector = other_2553;
    let _e333: Flector = other_2553;
    let _e336: Flector = other_2553;
    let _e349: MultiVector = self_2931;
    let _e353: Flector = other_2553;
    let _e356: Flector = other_2553;
    let _e359: Flector = other_2553;
    let _e365: MultiVector = self_2931;
    let _e369: Flector = other_2553;
    let _e372: Flector = other_2553;
    let _e375: Flector = other_2553;
    let _e387: MultiVector = self_2931;
    let _e391: Flector = other_2553;
    let _e394: Flector = other_2553;
    let _e397: Flector = other_2553;
    let _e409: MultiVector = self_2931;
    let _e413: Flector = other_2553;
    let _e416: Flector = other_2553;
    let _e419: Flector = other_2553;
    let _e431: MultiVector = self_2931;
    let _e435: Flector = other_2553;
    let _e438: Flector = other_2553;
    let _e441: Flector = other_2553;
    let _e447: MultiVector = self_2931;
    let _e451: Flector = other_2553;
    let _e454: Flector = other_2553;
    let _e457: Flector = other_2553;
    let _e469: MultiVector = self_2931;
    let _e473: Flector = other_2553;
    let _e476: Flector = other_2553;
    let _e479: Flector = other_2553;
    let _e492: MultiVector = self_2931;
    let _e496: Flector = other_2553;
    let _e499: Flector = other_2553;
    let _e502: Flector = other_2553;
    let _e515: MultiVector = self_2931;
    let _e519: Flector = other_2553;
    let _e522: Flector = other_2553;
    let _e525: Flector = other_2553;
    let _e531: MultiVector = self_2931;
    let _e535: Flector = other_2553;
    let _e538: MultiVector = self_2931;
    let _e542: Flector = other_2553;
    let _e545: Flector = other_2553;
    let _e548: Flector = other_2553;
    let _e551: Flector = other_2553;
    let _e565: MultiVector = self_2931;
    let _e569: Flector = other_2553;
    let _e572: Flector = other_2553;
    let _e575: Flector = other_2553;
    let _e578: Flector = other_2553;
    let _e592: MultiVector = self_2931;
    let _e596: Flector = other_2553;
    let _e599: Flector = other_2553;
    let _e602: Flector = other_2553;
    let _e605: Flector = other_2553;
    let _e619: MultiVector = self_2931;
    let _e623: Flector = other_2553;
    let _e626: Flector = other_2553;
    let _e629: Flector = other_2553;
    let _e632: Flector = other_2553;
    let _e646: MultiVector = self_2931;
    let _e650: Flector = other_2553;
    let _e653: Flector = other_2553;
    let _e656: Flector = other_2553;
    let _e659: Flector = other_2553;
    let _e673: MultiVector = self_2931;
    let _e677: Flector = other_2553;
    let _e680: Flector = other_2553;
    let _e683: Flector = other_2553;
    let _e686: Flector = other_2553;
    let _e700: MultiVector = self_2931;
    let _e703: MultiVector = self_2931;
    let _e706: MultiVector = self_2931;
    let _e709: MultiVector = self_2931;
    let _e713: Flector = other_2553;
    return MultiVector(((((((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g0_.x, _e11.g1_.x)) + (vec2<f32>(_e16.g1_.y) * vec2<f32>(_e20.g0_.y, _e23.g1_.y))) + (vec2<f32>(_e29.g1_.z) * vec2<f32>(_e33.g0_.z, _e36.g1_.z))) + ((vec2<f32>(_e42.g4_.x) * vec2<f32>(_e46.g0_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e57.g4_.y) * vec2<f32>(_e61.g0_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e72.g4_.z) * vec2<f32>(_e76.g0_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e87.g4_.w) * vec2<f32>(_e91.g1_.w, _e94.g0_.w))) + ((vec2<f32>(_e100.g1_.x, _e103.g1_.w) * vec2<f32>(_e107.g1_.x, _e110.g1_.w)) * vec2<f32>(0.0, 1.0))), ((((((((vec4<f32>(_e120.g0_.x) * _e124.g0_) + ((vec4<f32>(_e127.g2_.x) * vec4<f32>(_e131.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e143.g2_.y) * vec4<f32>(_e147.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e159.g2_.z) * vec4<f32>(_e163.g0_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e175.g3_.x) * vec4<f32>(_e179.g1_.w, _e182.g0_.z, _e185.g0_.y, _e188.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e202.g3_.y) * vec4<f32>(_e206.g0_.z, _e209.g1_.w, _e212.g0_.x, _e215.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e229.g3_.z) * vec4<f32>(_e233.g0_.y, _e236.g0_.x, _e239.g1_.w, _e242.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e256.g0_.x, _e259.g0_.x, _e262.g0_.x, _e265.g0_.y) * _e269.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((((((vec3<f32>(_e281.g1_.x) * vec3<f32>(_e285.g0_.w, _e288.g1_.z, _e291.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e303.g1_.y) * vec3<f32>(_e307.g1_.z, _e310.g0_.w, _e313.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e326.g1_.z) * vec3<f32>(_e330.g1_.y, _e333.g1_.x, _e336.g0_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e349.g1_.w) * vec3<f32>(_e353.g0_.x, _e356.g0_.y, _e359.g0_.z))) + ((vec3<f32>(_e365.g4_.x) * vec3<f32>(_e369.g1_.w, _e372.g0_.z, _e375.g0_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e387.g4_.y) * vec3<f32>(_e391.g0_.z, _e394.g1_.w, _e397.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e409.g4_.z) * vec3<f32>(_e413.g0_.y, _e416.g0_.x, _e419.g1_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e431.g4_.w) * vec3<f32>(_e435.g1_.x, _e438.g1_.y, _e441.g1_.z))), (((((vec3<f32>(_e447.g1_.x) * vec3<f32>(_e451.g1_.w, _e454.g0_.z, _e457.g0_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0)) + ((vec3<f32>(_e469.g1_.y) * vec3<f32>(_e473.g0_.z, _e476.g1_.w, _e479.g0_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e492.g1_.z) * vec3<f32>(_e496.g0_.y, _e499.g0_.x, _e502.g1_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) - (vec3<f32>(_e515.g4_.w) * vec3<f32>(_e519.g0_.x, _e522.g0_.y, _e525.g0_.z))), ((((((((vec4<f32>(_e531.g0_.x) * _e535.g1_) + ((vec4<f32>(_e538.g2_.x) * vec4<f32>(_e542.g1_.w, _e545.g0_.z, _e548.g0_.y, _e551.g1_.w)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e565.g2_.y) * vec4<f32>(_e569.g0_.z, _e572.g1_.w, _e575.g0_.x, _e578.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e592.g2_.z) * vec4<f32>(_e596.g0_.y, _e599.g0_.x, _e602.g1_.w, _e605.g0_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e619.g3_.x) * vec4<f32>(_e623.g0_.w, _e626.g1_.z, _e629.g1_.y, _e632.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e646.g3_.y) * vec4<f32>(_e650.g1_.z, _e653.g0_.w, _e656.g1_.x, _e659.g0_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e673.g3_.z) * vec4<f32>(_e677.g1_.y, _e680.g1_.x, _e683.g0_.w, _e686.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e700.g0_.y, _e703.g0_.y, _e706.g0_.y, _e709.g0_.x) * _e713.g0_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_flector_geometric_anti_product(self_2932: MultiVector, other_2554: Flector) -> MultiVector {
    var self_2933: MultiVector;
    var other_2555: Flector;

    self_2933 = self_2932;
    other_2555 = other_2554;
    let _e4: MultiVector = self_2933;
    let _e8: Flector = other_2555;
    let _e17: MultiVector = self_2933;
    let _e21: Flector = other_2555;
    let _e31: MultiVector = self_2933;
    let _e35: Flector = other_2555;
    let _e38: Flector = other_2555;
    let _e49: MultiVector = self_2933;
    let _e53: Flector = other_2555;
    let _e56: Flector = other_2555;
    let _e67: MultiVector = self_2933;
    let _e71: Flector = other_2555;
    let _e74: Flector = other_2555;
    let _e85: MultiVector = self_2933;
    let _e89: Flector = other_2555;
    let _e92: Flector = other_2555;
    let _e103: MultiVector = self_2933;
    let _e107: Flector = other_2555;
    let _e118: MultiVector = self_2933;
    let _e122: Flector = other_2555;
    let _e132: MultiVector = self_2933;
    let _e136: Flector = other_2555;
    let _e139: MultiVector = self_2933;
    let _e143: Flector = other_2555;
    let _e146: Flector = other_2555;
    let _e149: Flector = other_2555;
    let _e152: Flector = other_2555;
    let _e166: MultiVector = self_2933;
    let _e170: Flector = other_2555;
    let _e173: Flector = other_2555;
    let _e176: Flector = other_2555;
    let _e179: Flector = other_2555;
    let _e193: MultiVector = self_2933;
    let _e197: Flector = other_2555;
    let _e200: Flector = other_2555;
    let _e203: Flector = other_2555;
    let _e206: Flector = other_2555;
    let _e220: MultiVector = self_2933;
    let _e224: Flector = other_2555;
    let _e227: Flector = other_2555;
    let _e230: Flector = other_2555;
    let _e233: Flector = other_2555;
    let _e246: MultiVector = self_2933;
    let _e250: Flector = other_2555;
    let _e253: Flector = other_2555;
    let _e256: Flector = other_2555;
    let _e259: Flector = other_2555;
    let _e272: MultiVector = self_2933;
    let _e276: Flector = other_2555;
    let _e279: Flector = other_2555;
    let _e282: Flector = other_2555;
    let _e285: Flector = other_2555;
    let _e298: MultiVector = self_2933;
    let _e302: Flector = other_2555;
    let _e315: MultiVector = self_2933;
    let _e319: Flector = other_2555;
    let _e322: Flector = other_2555;
    let _e325: Flector = other_2555;
    let _e331: MultiVector = self_2933;
    let _e335: Flector = other_2555;
    let _e338: Flector = other_2555;
    let _e341: Flector = other_2555;
    let _e354: MultiVector = self_2933;
    let _e358: Flector = other_2555;
    let _e361: Flector = other_2555;
    let _e364: Flector = other_2555;
    let _e377: MultiVector = self_2933;
    let _e381: Flector = other_2555;
    let _e384: Flector = other_2555;
    let _e387: Flector = other_2555;
    let _e400: MultiVector = self_2933;
    let _e404: Flector = other_2555;
    let _e407: Flector = other_2555;
    let _e410: Flector = other_2555;
    let _e422: MultiVector = self_2933;
    let _e426: Flector = other_2555;
    let _e429: Flector = other_2555;
    let _e432: Flector = other_2555;
    let _e445: MultiVector = self_2933;
    let _e449: Flector = other_2555;
    let _e452: Flector = other_2555;
    let _e455: Flector = other_2555;
    let _e468: MultiVector = self_2933;
    let _e472: Flector = other_2555;
    let _e475: Flector = other_2555;
    let _e478: Flector = other_2555;
    let _e484: MultiVector = self_2933;
    let _e488: Flector = other_2555;
    let _e491: Flector = other_2555;
    let _e494: Flector = other_2555;
    let _e506: MultiVector = self_2933;
    let _e510: Flector = other_2555;
    let _e513: Flector = other_2555;
    let _e516: Flector = other_2555;
    let _e528: MultiVector = self_2933;
    let _e532: Flector = other_2555;
    let _e535: Flector = other_2555;
    let _e538: Flector = other_2555;
    let _e550: MultiVector = self_2933;
    let _e554: Flector = other_2555;
    let _e557: Flector = other_2555;
    let _e560: Flector = other_2555;
    let _e566: MultiVector = self_2933;
    let _e570: Flector = other_2555;
    let _e573: MultiVector = self_2933;
    let _e577: Flector = other_2555;
    let _e580: Flector = other_2555;
    let _e583: Flector = other_2555;
    let _e586: Flector = other_2555;
    let _e600: MultiVector = self_2933;
    let _e604: Flector = other_2555;
    let _e607: Flector = other_2555;
    let _e610: Flector = other_2555;
    let _e613: Flector = other_2555;
    let _e627: MultiVector = self_2933;
    let _e631: Flector = other_2555;
    let _e634: Flector = other_2555;
    let _e637: Flector = other_2555;
    let _e640: Flector = other_2555;
    let _e654: MultiVector = self_2933;
    let _e658: Flector = other_2555;
    let _e671: MultiVector = self_2933;
    let _e675: Flector = other_2555;
    let _e688: MultiVector = self_2933;
    let _e692: Flector = other_2555;
    let _e705: MultiVector = self_2933;
    let _e709: Flector = other_2555;
    return MultiVector((((((((((vec2<f32>(_e4.g1_.y) * vec2<f32>(_e8.g1_.y)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g1_.z) * vec2<f32>(_e21.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g1_.w) * vec2<f32>(_e35.g1_.w, _e38.g0_.w)) * vec2<f32>(1.0, -(1.0)))) + ((vec2<f32>(_e49.g4_.x) * vec2<f32>(_e53.g0_.x, _e56.g1_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e67.g4_.y) * vec2<f32>(_e71.g0_.y, _e74.g1_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e85.g4_.z) * vec2<f32>(_e89.g0_.z, _e92.g1_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e103.g4_.w) * vec2<f32>(_e107.g0_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e118.g1_.x) * vec2<f32>(_e122.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4<f32>(_e132.g0_.y) * _e136.g0_) + ((vec4<f32>(_e139.g2_.x) * vec4<f32>(_e143.g1_.w, _e146.g0_.z, _e149.g0_.y, _e152.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e166.g2_.y) * vec4<f32>(_e170.g0_.z, _e173.g1_.w, _e176.g0_.x, _e179.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e193.g2_.z) * vec4<f32>(_e197.g0_.y, _e200.g0_.x, _e203.g1_.w, _e206.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e220.g3_.x) * vec4<f32>(_e224.g0_.w, _e227.g1_.z, _e230.g1_.y, _e233.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e246.g3_.y) * vec4<f32>(_e250.g1_.z, _e253.g0_.w, _e256.g1_.x, _e259.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e272.g3_.z) * vec4<f32>(_e276.g1_.y, _e279.g1_.x, _e282.g0_.w, _e285.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e298.g0_.x) * _e302.g1_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((vec3<f32>(0.0) - (vec3<f32>(_e315.g1_.w) * vec3<f32>(_e319.g1_.x, _e322.g1_.y, _e325.g1_.z))) + ((vec3<f32>(_e331.g4_.x) * vec3<f32>(_e335.g0_.w, _e338.g1_.z, _e341.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e354.g4_.y) * vec3<f32>(_e358.g1_.z, _e361.g0_.w, _e364.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e377.g4_.z) * vec3<f32>(_e381.g1_.y, _e384.g1_.x, _e387.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), (((((((((vec3<f32>(_e400.g1_.x) * vec3<f32>(_e404.g0_.w, _e407.g1_.z, _e410.g1_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0))) + ((vec3<f32>(_e422.g1_.y) * vec3<f32>(_e426.g1_.z, _e429.g0_.w, _e432.g1_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e445.g1_.z) * vec3<f32>(_e449.g1_.y, _e452.g1_.x, _e455.g0_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e468.g1_.w) * vec3<f32>(_e472.g0_.x, _e475.g0_.y, _e478.g0_.z))) + ((vec3<f32>(_e484.g4_.x) * vec3<f32>(_e488.g1_.w, _e491.g0_.z, _e494.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e506.g4_.y) * vec3<f32>(_e510.g0_.z, _e513.g1_.w, _e516.g0_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e528.g4_.z) * vec3<f32>(_e532.g0_.y, _e535.g0_.x, _e538.g1_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e550.g4_.w) * vec3<f32>(_e554.g1_.x, _e557.g1_.y, _e560.g1_.z))), ((((((((vec4<f32>(_e566.g0_.y) * _e570.g1_) + ((vec4<f32>(_e573.g2_.x) * vec4<f32>(_e577.g0_.w, _e580.g1_.z, _e583.g1_.y, _e586.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e600.g2_.y) * vec4<f32>(_e604.g1_.z, _e607.g0_.w, _e610.g1_.x, _e613.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e627.g2_.z) * vec4<f32>(_e631.g1_.y, _e634.g1_.x, _e637.g0_.w, _e640.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e654.g3_.x) * vec4<f32>(_e658.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e671.g3_.y) * vec4<f32>(_e675.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e688.g3_.z) * vec4<f32>(_e692.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e705.g0_.x) * _e709.g0_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_flector_scalar_product(self_2934: MultiVector, other_2556: Flector) -> Scalar {
    var self_2935: MultiVector;
    var other_2557: Flector;

    self_2935 = self_2934;
    other_2557 = other_2556;
    let _e4: MultiVector = self_2935;
    let _e7: Flector = other_2557;
    let _e11: MultiVector = self_2935;
    let _e14: Flector = other_2557;
    let _e19: MultiVector = self_2935;
    let _e22: Flector = other_2557;
    let _e27: MultiVector = self_2935;
    let _e30: Flector = other_2557;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) - (_e27.g4_.w * _e30.g1_.w)));
}

fn multi_vector_flector_dot(self_2936: MultiVector, other_2558: Flector) -> Scalar {
    var self_2937: MultiVector;
    var other_2559: Flector;

    self_2937 = self_2936;
    other_2559 = other_2558;
    let _e4: MultiVector = self_2937;
    let _e7: Flector = other_2559;
    let _e11: MultiVector = self_2937;
    let _e14: Flector = other_2559;
    let _e19: MultiVector = self_2937;
    let _e22: Flector = other_2559;
    let _e27: MultiVector = self_2937;
    let _e30: Flector = other_2559;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) - (_e27.g4_.w * _e30.g1_.w)));
}

fn multi_vector_flector_anti_scalar_product(self_2938: MultiVector, other_2560: Flector) -> AntiScalar {
    var self_2939: MultiVector;
    var other_2561: Flector;

    self_2939 = self_2938;
    other_2561 = other_2560;
    let _e5: MultiVector = self_2939;
    let _e8: Flector = other_2561;
    let _e13: MultiVector = self_2939;
    let _e16: Flector = other_2561;
    let _e21: MultiVector = self_2939;
    let _e24: Flector = other_2561;
    let _e29: MultiVector = self_2939;
    let _e32: Flector = other_2561;
    return AntiScalar(((((0.0 - (_e5.g1_.w * _e8.g0_.w)) + (_e13.g4_.x * _e16.g1_.x)) + (_e21.g4_.y * _e24.g1_.y)) + (_e29.g4_.z * _e32.g1_.z)));
}

fn multi_vector_flector_anti_dot(self_2940: MultiVector, other_2562: Flector) -> AntiScalar {
    var self_2941: MultiVector;
    var other_2563: Flector;

    self_2941 = self_2940;
    other_2563 = other_2562;
    let _e5: MultiVector = self_2941;
    let _e8: Flector = other_2563;
    let _e13: MultiVector = self_2941;
    let _e16: Flector = other_2563;
    let _e21: MultiVector = self_2941;
    let _e24: Flector = other_2563;
    let _e29: MultiVector = self_2941;
    let _e32: Flector = other_2563;
    return AntiScalar(((((0.0 - (_e5.g1_.w * _e8.g0_.w)) + (_e13.g4_.x * _e16.g1_.x)) + (_e21.g4_.y * _e24.g1_.y)) + (_e29.g4_.z * _e32.g1_.z)));
}

fn multi_vector_multi_vector_add(self_2942: MultiVector, other_2564: MultiVector) -> MultiVector {
    var self_2943: MultiVector;
    var other_2565: MultiVector;

    self_2943 = self_2942;
    other_2565 = other_2564;
    let _e4: MultiVector = self_2943;
    let _e6: MultiVector = other_2565;
    let _e9: MultiVector = self_2943;
    let _e11: MultiVector = other_2565;
    let _e14: MultiVector = self_2943;
    let _e16: MultiVector = other_2565;
    let _e19: MultiVector = self_2943;
    let _e21: MultiVector = other_2565;
    let _e24: MultiVector = self_2943;
    let _e26: MultiVector = other_2565;
    return MultiVector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_), (_e19.g3_ + _e21.g3_), (_e24.g4_ + _e26.g4_));
}

fn multi_vector_multi_vector_sub(self_2944: MultiVector, other_2566: MultiVector) -> MultiVector {
    var self_2945: MultiVector;
    var other_2567: MultiVector;

    self_2945 = self_2944;
    other_2567 = other_2566;
    let _e4: MultiVector = self_2945;
    let _e6: MultiVector = other_2567;
    let _e9: MultiVector = self_2945;
    let _e11: MultiVector = other_2567;
    let _e14: MultiVector = self_2945;
    let _e16: MultiVector = other_2567;
    let _e19: MultiVector = self_2945;
    let _e21: MultiVector = other_2567;
    let _e24: MultiVector = self_2945;
    let _e26: MultiVector = other_2567;
    return MultiVector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_), (_e19.g3_ - _e21.g3_), (_e24.g4_ - _e26.g4_));
}

fn multi_vector_multi_vector_mul(self_2946: MultiVector, other_2568: MultiVector) -> MultiVector {
    var self_2947: MultiVector;
    var other_2569: MultiVector;

    self_2947 = self_2946;
    other_2569 = other_2568;
    let _e4: MultiVector = self_2947;
    let _e6: MultiVector = other_2569;
    let _e9: MultiVector = self_2947;
    let _e11: MultiVector = other_2569;
    let _e14: MultiVector = self_2947;
    let _e16: MultiVector = other_2569;
    let _e19: MultiVector = self_2947;
    let _e21: MultiVector = other_2569;
    let _e24: MultiVector = self_2947;
    let _e26: MultiVector = other_2569;
    return MultiVector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_), (_e19.g3_ * _e21.g3_), (_e24.g4_ * _e26.g4_));
}

fn multi_vector_multi_vector_div(self_2948: MultiVector, other_2570: MultiVector) -> MultiVector {
    var self_2949: MultiVector;
    var other_2571: MultiVector;

    self_2949 = self_2948;
    other_2571 = other_2570;
    let _e4: MultiVector = self_2949;
    let _e7: MultiVector = self_2949;
    let _e15: MultiVector = other_2571;
    let _e18: MultiVector = other_2571;
    let _e27: MultiVector = self_2949;
    let _e30: MultiVector = self_2949;
    let _e33: MultiVector = self_2949;
    let _e36: MultiVector = self_2949;
    let _e46: MultiVector = other_2571;
    let _e49: MultiVector = other_2571;
    let _e52: MultiVector = other_2571;
    let _e55: MultiVector = other_2571;
    let _e66: MultiVector = self_2949;
    let _e69: MultiVector = self_2949;
    let _e72: MultiVector = self_2949;
    let _e81: MultiVector = other_2571;
    let _e84: MultiVector = other_2571;
    let _e87: MultiVector = other_2571;
    let _e97: MultiVector = self_2949;
    let _e100: MultiVector = self_2949;
    let _e103: MultiVector = self_2949;
    let _e112: MultiVector = other_2571;
    let _e115: MultiVector = other_2571;
    let _e118: MultiVector = other_2571;
    let _e128: MultiVector = self_2949;
    let _e131: MultiVector = self_2949;
    let _e134: MultiVector = self_2949;
    let _e137: MultiVector = self_2949;
    let _e147: MultiVector = other_2571;
    let _e150: MultiVector = other_2571;
    let _e153: MultiVector = other_2571;
    let _e156: MultiVector = other_2571;
    return MultiVector((((vec2<f32>(_e4.g0_.x, _e7.g0_.y) * vec2<f32>(1.0, 1.0)) / vec2<f32>(_e15.g0_.x, _e18.g0_.y)) * vec2<f32>(1.0, 1.0)), (((vec4<f32>(_e27.g1_.x, _e30.g1_.y, _e33.g1_.z, _e36.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e46.g1_.x, _e49.g1_.y, _e52.g1_.z, _e55.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec3<f32>(_e66.g2_.x, _e69.g2_.y, _e72.g2_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e81.g2_.x, _e84.g2_.y, _e87.g2_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e97.g3_.x, _e100.g3_.y, _e103.g3_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e112.g3_.x, _e115.g3_.y, _e118.g3_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec4<f32>(_e128.g4_.x, _e131.g4_.y, _e134.g4_.z, _e137.g4_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e147.g4_.x, _e150.g4_.y, _e153.g4_.z, _e156.g4_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn multi_vector_multi_vector_geometric_product(self_2950: MultiVector, other_2572: MultiVector) -> MultiVector {
    var self_2951: MultiVector;
    var other_2573: MultiVector;

    self_2951 = self_2950;
    other_2573 = other_2572;
    let _e4: MultiVector = self_2951;
    let _e8: MultiVector = other_2573;
    let _e11: MultiVector = self_2951;
    let _e15: MultiVector = other_2573;
    let _e18: MultiVector = other_2573;
    let _e24: MultiVector = self_2951;
    let _e28: MultiVector = other_2573;
    let _e31: MultiVector = other_2573;
    let _e37: MultiVector = self_2951;
    let _e41: MultiVector = other_2573;
    let _e44: MultiVector = other_2573;
    let _e50: MultiVector = self_2951;
    let _e54: MultiVector = other_2573;
    let _e64: MultiVector = self_2951;
    let _e68: MultiVector = other_2573;
    let _e79: MultiVector = self_2951;
    let _e83: MultiVector = other_2573;
    let _e94: MultiVector = self_2951;
    let _e98: MultiVector = other_2573;
    let _e109: MultiVector = self_2951;
    let _e113: MultiVector = other_2573;
    let _e116: MultiVector = other_2573;
    let _e122: MultiVector = self_2951;
    let _e126: MultiVector = other_2573;
    let _e129: MultiVector = other_2573;
    let _e135: MultiVector = self_2951;
    let _e139: MultiVector = other_2573;
    let _e142: MultiVector = other_2573;
    let _e148: MultiVector = self_2951;
    let _e152: MultiVector = other_2573;
    let _e163: MultiVector = self_2951;
    let _e167: MultiVector = other_2573;
    let _e178: MultiVector = self_2951;
    let _e182: MultiVector = other_2573;
    let _e193: MultiVector = self_2951;
    let _e197: MultiVector = other_2573;
    let _e200: MultiVector = other_2573;
    let _e206: MultiVector = self_2951;
    let _e208: MultiVector = other_2573;
    let _e218: MultiVector = self_2951;
    let _e222: MultiVector = other_2573;
    let _e225: MultiVector = self_2951;
    let _e229: MultiVector = other_2573;
    let _e232: MultiVector = other_2573;
    let _e235: MultiVector = other_2573;
    let _e238: MultiVector = other_2573;
    let _e252: MultiVector = self_2951;
    let _e256: MultiVector = other_2573;
    let _e259: MultiVector = other_2573;
    let _e262: MultiVector = other_2573;
    let _e265: MultiVector = other_2573;
    let _e279: MultiVector = self_2951;
    let _e283: MultiVector = other_2573;
    let _e286: MultiVector = other_2573;
    let _e289: MultiVector = other_2573;
    let _e292: MultiVector = other_2573;
    let _e306: MultiVector = self_2951;
    let _e310: MultiVector = other_2573;
    let _e322: MultiVector = self_2951;
    let _e326: MultiVector = other_2573;
    let _e338: MultiVector = self_2951;
    let _e342: MultiVector = other_2573;
    let _e354: MultiVector = self_2951;
    let _e358: MultiVector = other_2573;
    let _e370: MultiVector = self_2951;
    let _e374: MultiVector = other_2573;
    let _e377: MultiVector = other_2573;
    let _e380: MultiVector = other_2573;
    let _e383: MultiVector = other_2573;
    let _e397: MultiVector = self_2951;
    let _e401: MultiVector = other_2573;
    let _e404: MultiVector = other_2573;
    let _e407: MultiVector = other_2573;
    let _e410: MultiVector = other_2573;
    let _e424: MultiVector = self_2951;
    let _e428: MultiVector = other_2573;
    let _e431: MultiVector = other_2573;
    let _e434: MultiVector = other_2573;
    let _e437: MultiVector = other_2573;
    let _e451: MultiVector = self_2951;
    let _e455: MultiVector = other_2573;
    let _e468: MultiVector = self_2951;
    let _e472: MultiVector = other_2573;
    let _e485: MultiVector = self_2951;
    let _e489: MultiVector = other_2573;
    let _e502: MultiVector = self_2951;
    let _e506: MultiVector = other_2573;
    let _e509: MultiVector = other_2573;
    let _e512: MultiVector = other_2573;
    let _e515: MultiVector = other_2573;
    let _e521: MultiVector = self_2951;
    let _e524: MultiVector = self_2951;
    let _e527: MultiVector = self_2951;
    let _e530: MultiVector = self_2951;
    let _e534: MultiVector = other_2573;
    let _e546: MultiVector = self_2951;
    let _e550: MultiVector = other_2573;
    let _e553: MultiVector = self_2951;
    let _e557: MultiVector = other_2573;
    let _e561: MultiVector = self_2951;
    let _e565: MultiVector = other_2573;
    let _e568: MultiVector = other_2573;
    let _e571: MultiVector = other_2573;
    let _e584: MultiVector = self_2951;
    let _e588: MultiVector = other_2573;
    let _e591: MultiVector = other_2573;
    let _e594: MultiVector = other_2573;
    let _e607: MultiVector = self_2951;
    let _e611: MultiVector = other_2573;
    let _e614: MultiVector = other_2573;
    let _e617: MultiVector = other_2573;
    let _e630: MultiVector = self_2951;
    let _e634: MultiVector = other_2573;
    let _e637: MultiVector = other_2573;
    let _e640: MultiVector = other_2573;
    let _e646: MultiVector = self_2951;
    let _e650: MultiVector = other_2573;
    let _e653: MultiVector = other_2573;
    let _e656: MultiVector = other_2573;
    let _e668: MultiVector = self_2951;
    let _e672: MultiVector = other_2573;
    let _e675: MultiVector = other_2573;
    let _e678: MultiVector = other_2573;
    let _e690: MultiVector = self_2951;
    let _e694: MultiVector = other_2573;
    let _e697: MultiVector = other_2573;
    let _e700: MultiVector = other_2573;
    let _e712: MultiVector = self_2951;
    let _e716: MultiVector = other_2573;
    let _e719: MultiVector = other_2573;
    let _e722: MultiVector = other_2573;
    let _e734: MultiVector = self_2951;
    let _e738: MultiVector = other_2573;
    let _e741: MultiVector = other_2573;
    let _e744: MultiVector = other_2573;
    let _e756: MultiVector = self_2951;
    let _e760: MultiVector = other_2573;
    let _e763: MultiVector = other_2573;
    let _e766: MultiVector = other_2573;
    let _e778: MultiVector = self_2951;
    let _e782: MultiVector = other_2573;
    let _e785: MultiVector = other_2573;
    let _e788: MultiVector = other_2573;
    let _e800: MultiVector = self_2951;
    let _e804: MultiVector = other_2573;
    let _e807: MultiVector = other_2573;
    let _e810: MultiVector = other_2573;
    let _e822: MultiVector = self_2951;
    let _e826: MultiVector = other_2573;
    let _e829: MultiVector = other_2573;
    let _e832: MultiVector = other_2573;
    let _e844: MultiVector = self_2951;
    let _e848: MultiVector = other_2573;
    let _e851: MultiVector = other_2573;
    let _e854: MultiVector = other_2573;
    let _e860: MultiVector = self_2951;
    let _e864: MultiVector = other_2573;
    let _e867: MultiVector = self_2951;
    let _e871: MultiVector = other_2573;
    let _e874: MultiVector = other_2573;
    let _e877: MultiVector = other_2573;
    let _e890: MultiVector = self_2951;
    let _e894: MultiVector = other_2573;
    let _e897: MultiVector = other_2573;
    let _e900: MultiVector = other_2573;
    let _e913: MultiVector = self_2951;
    let _e917: MultiVector = other_2573;
    let _e920: MultiVector = other_2573;
    let _e923: MultiVector = other_2573;
    let _e936: MultiVector = self_2951;
    let _e940: MultiVector = other_2573;
    let _e943: MultiVector = other_2573;
    let _e946: MultiVector = other_2573;
    let _e958: MultiVector = self_2951;
    let _e962: MultiVector = other_2573;
    let _e965: MultiVector = other_2573;
    let _e968: MultiVector = other_2573;
    let _e980: MultiVector = self_2951;
    let _e984: MultiVector = other_2573;
    let _e987: MultiVector = other_2573;
    let _e990: MultiVector = other_2573;
    let _e1002: MultiVector = self_2951;
    let _e1006: MultiVector = other_2573;
    let _e1009: MultiVector = other_2573;
    let _e1012: MultiVector = other_2573;
    let _e1018: MultiVector = self_2951;
    let _e1022: MultiVector = other_2573;
    let _e1025: MultiVector = self_2951;
    let _e1029: MultiVector = other_2573;
    let _e1032: MultiVector = other_2573;
    let _e1035: MultiVector = other_2573;
    let _e1038: MultiVector = other_2573;
    let _e1052: MultiVector = self_2951;
    let _e1056: MultiVector = other_2573;
    let _e1059: MultiVector = other_2573;
    let _e1062: MultiVector = other_2573;
    let _e1065: MultiVector = other_2573;
    let _e1079: MultiVector = self_2951;
    let _e1083: MultiVector = other_2573;
    let _e1086: MultiVector = other_2573;
    let _e1089: MultiVector = other_2573;
    let _e1092: MultiVector = other_2573;
    let _e1106: MultiVector = self_2951;
    let _e1110: MultiVector = other_2573;
    let _e1113: MultiVector = other_2573;
    let _e1116: MultiVector = other_2573;
    let _e1119: MultiVector = other_2573;
    let _e1131: MultiVector = self_2951;
    let _e1135: MultiVector = other_2573;
    let _e1138: MultiVector = other_2573;
    let _e1141: MultiVector = other_2573;
    let _e1144: MultiVector = other_2573;
    let _e1158: MultiVector = self_2951;
    let _e1162: MultiVector = other_2573;
    let _e1165: MultiVector = other_2573;
    let _e1168: MultiVector = other_2573;
    let _e1171: MultiVector = other_2573;
    let _e1185: MultiVector = self_2951;
    let _e1189: MultiVector = other_2573;
    let _e1192: MultiVector = other_2573;
    let _e1195: MultiVector = other_2573;
    let _e1198: MultiVector = other_2573;
    let _e1212: MultiVector = self_2951;
    let _e1216: MultiVector = other_2573;
    let _e1219: MultiVector = other_2573;
    let _e1222: MultiVector = other_2573;
    let _e1225: MultiVector = other_2573;
    let _e1239: MultiVector = self_2951;
    let _e1243: MultiVector = other_2573;
    let _e1246: MultiVector = other_2573;
    let _e1249: MultiVector = other_2573;
    let _e1252: MultiVector = other_2573;
    let _e1266: MultiVector = self_2951;
    let _e1270: MultiVector = other_2573;
    let _e1273: MultiVector = other_2573;
    let _e1276: MultiVector = other_2573;
    let _e1279: MultiVector = other_2573;
    let _e1293: MultiVector = self_2951;
    let _e1297: MultiVector = other_2573;
    let _e1300: MultiVector = other_2573;
    let _e1303: MultiVector = other_2573;
    let _e1306: MultiVector = other_2573;
    let _e1319: MultiVector = self_2951;
    let _e1323: MultiVector = other_2573;
    let _e1326: MultiVector = other_2573;
    let _e1329: MultiVector = other_2573;
    let _e1332: MultiVector = other_2573;
    let _e1345: MultiVector = self_2951;
    let _e1349: MultiVector = other_2573;
    let _e1352: MultiVector = other_2573;
    let _e1355: MultiVector = other_2573;
    let _e1358: MultiVector = other_2573;
    let _e1371: MultiVector = self_2951;
    let _e1375: MultiVector = other_2573;
    let _e1378: MultiVector = other_2573;
    let _e1381: MultiVector = other_2573;
    let _e1384: MultiVector = other_2573;
    let _e1390: MultiVector = self_2951;
    let _e1393: MultiVector = self_2951;
    let _e1396: MultiVector = self_2951;
    let _e1399: MultiVector = self_2951;
    let _e1403: MultiVector = other_2573;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + (vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g1_.x, _e18.g4_.x))) + (vec2<f32>(_e24.g1_.y) * vec2<f32>(_e28.g1_.y, _e31.g4_.y))) + (vec2<f32>(_e37.g1_.z) * vec2<f32>(_e41.g1_.z, _e44.g4_.z))) + ((vec2<f32>(_e50.g1_.w) * vec2<f32>(_e54.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e64.g2_.x) * vec2<f32>(_e68.g3_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e79.g2_.y) * vec2<f32>(_e83.g3_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e94.g2_.z) * vec2<f32>(_e98.g3_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e109.g3_.x) * vec2<f32>(_e113.g3_.x, _e116.g2_.x))) - (vec2<f32>(_e122.g3_.y) * vec2<f32>(_e126.g3_.y, _e129.g2_.y))) - (vec2<f32>(_e135.g3_.z) * vec2<f32>(_e139.g3_.z, _e142.g2_.z))) + ((vec2<f32>(_e148.g4_.x) * vec2<f32>(_e152.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e163.g4_.y) * vec2<f32>(_e167.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e178.g4_.z) * vec2<f32>(_e182.g1_.z)) * vec2<f32>(0.0, -(1.0)))) - (vec2<f32>(_e193.g4_.w) * vec2<f32>(_e197.g4_.w, _e200.g1_.w))) + ((_e206.g0_ * vec2<f32>(_e208.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((((((((((vec4<f32>(_e218.g0_.x) * _e222.g1_) + ((vec4<f32>(_e225.g1_.x) * vec4<f32>(_e229.g0_.x, _e232.g3_.z, _e235.g3_.y, _e238.g2_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e252.g1_.y) * vec4<f32>(_e256.g3_.z, _e259.g0_.x, _e262.g3_.x, _e265.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e279.g1_.z) * vec4<f32>(_e283.g3_.y, _e286.g3_.x, _e289.g0_.x, _e292.g2_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e306.g1_.w) * vec4<f32>(_e310.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e322.g2_.x) * vec4<f32>(_e326.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e338.g2_.y) * vec4<f32>(_e342.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e354.g2_.z) * vec4<f32>(_e358.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e370.g3_.x) * vec4<f32>(_e374.g4_.w, _e377.g1_.z, _e380.g1_.y, _e383.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e397.g3_.y) * vec4<f32>(_e401.g1_.z, _e404.g4_.w, _e407.g1_.x, _e410.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e424.g3_.z) * vec4<f32>(_e428.g1_.y, _e431.g1_.x, _e434.g4_.w, _e437.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e451.g4_.x) * vec4<f32>(_e455.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e468.g4_.y) * vec4<f32>(_e472.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e485.g4_.z) * vec4<f32>(_e489.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e502.g4_.w) * vec4<f32>(_e506.g3_.x, _e509.g3_.y, _e512.g3_.z, _e515.g0_.y))) + ((vec4<f32>(_e521.g0_.x, _e524.g0_.x, _e527.g0_.x, _e530.g0_.y) * _e534.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((((((((((vec3<f32>(_e546.g0_.x) * _e550.g2_) + (vec3<f32>(_e553.g0_.y) * _e557.g3_)) + ((vec3<f32>(_e561.g1_.x) * vec3<f32>(_e565.g1_.w, _e568.g4_.z, _e571.g4_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e584.g1_.y) * vec3<f32>(_e588.g4_.z, _e591.g1_.w, _e594.g4_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e607.g1_.z) * vec3<f32>(_e611.g4_.y, _e614.g4_.x, _e617.g1_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + (vec3<f32>(_e630.g1_.w) * vec3<f32>(_e634.g1_.x, _e637.g1_.y, _e640.g1_.z))) + ((vec3<f32>(_e646.g2_.x) * vec3<f32>(_e650.g0_.x, _e653.g3_.z, _e656.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e668.g2_.y) * vec3<f32>(_e672.g3_.z, _e675.g0_.x, _e678.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e690.g2_.z) * vec3<f32>(_e694.g3_.y, _e697.g3_.x, _e700.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e712.g3_.x) * vec3<f32>(_e716.g0_.y, _e719.g2_.z, _e722.g2_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e734.g3_.y) * vec3<f32>(_e738.g2_.z, _e741.g0_.y, _e744.g2_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e756.g3_.z) * vec3<f32>(_e760.g2_.y, _e763.g2_.x, _e766.g0_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e778.g4_.x) * vec3<f32>(_e782.g4_.w, _e785.g1_.z, _e788.g1_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e800.g4_.y) * vec3<f32>(_e804.g1_.z, _e807.g4_.w, _e810.g1_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e822.g4_.z) * vec3<f32>(_e826.g1_.y, _e829.g1_.x, _e832.g4_.w)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e844.g4_.w) * vec3<f32>(_e848.g4_.x, _e851.g4_.y, _e854.g4_.z))), ((((((((vec3<f32>(_e860.g0_.x) * _e864.g3_) + ((vec3<f32>(_e867.g1_.x) * vec3<f32>(_e871.g4_.w, _e874.g1_.z, _e877.g1_.y)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e890.g1_.y) * vec3<f32>(_e894.g1_.z, _e897.g4_.w, _e900.g1_.x)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + ((vec3<f32>(_e913.g1_.z) * vec3<f32>(_e917.g1_.y, _e920.g1_.x, _e923.g4_.w)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e936.g3_.x) * vec3<f32>(_e940.g0_.x, _e943.g3_.z, _e946.g3_.y)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e958.g3_.y) * vec3<f32>(_e962.g3_.z, _e965.g0_.x, _e968.g3_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e980.g3_.z) * vec3<f32>(_e984.g3_.y, _e987.g3_.x, _e990.g0_.x)) * vec3<f32>(1.0, -(1.0), 1.0))) - (vec3<f32>(_e1002.g4_.w) * vec3<f32>(_e1006.g1_.x, _e1009.g1_.y, _e1012.g1_.z))), ((((((((((((((((vec4<f32>(_e1018.g0_.x) * _e1022.g4_) + ((vec4<f32>(_e1025.g1_.x) * vec4<f32>(_e1029.g0_.y, _e1032.g2_.z, _e1035.g2_.y, _e1038.g3_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1052.g1_.y) * vec4<f32>(_e1056.g2_.z, _e1059.g0_.y, _e1062.g2_.x, _e1065.g3_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1079.g1_.z) * vec4<f32>(_e1083.g2_.y, _e1086.g2_.x, _e1089.g0_.y, _e1092.g3_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1106.g1_.w) * vec4<f32>(_e1110.g3_.x, _e1113.g3_.y, _e1116.g3_.z, _e1119.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1131.g2_.x) * vec4<f32>(_e1135.g4_.w, _e1138.g1_.z, _e1141.g1_.y, _e1144.g4_.w)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e1158.g2_.y) * vec4<f32>(_e1162.g1_.z, _e1165.g4_.w, _e1168.g1_.x, _e1171.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 0.0))) + ((vec4<f32>(_e1185.g2_.z) * vec4<f32>(_e1189.g1_.y, _e1192.g1_.x, _e1195.g4_.w, _e1198.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1212.g3_.x) * vec4<f32>(_e1216.g1_.w, _e1219.g4_.z, _e1222.g4_.y, _e1225.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1239.g3_.y) * vec4<f32>(_e1243.g4_.z, _e1246.g1_.w, _e1249.g4_.x, _e1252.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1266.g3_.z) * vec4<f32>(_e1270.g4_.y, _e1273.g4_.x, _e1276.g1_.w, _e1279.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1293.g4_.x) * vec4<f32>(_e1297.g0_.x, _e1300.g3_.z, _e1303.g3_.y, _e1306.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e1319.g4_.y) * vec4<f32>(_e1323.g3_.z, _e1326.g0_.x, _e1329.g3_.x, _e1332.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e1345.g4_.z) * vec4<f32>(_e1349.g3_.y, _e1352.g3_.x, _e1355.g0_.x, _e1358.g3_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e1371.g4_.w) * vec4<f32>(_e1375.g2_.x, _e1378.g2_.y, _e1381.g2_.z, _e1384.g0_.x))) + ((vec4<f32>(_e1390.g0_.y, _e1393.g0_.y, _e1396.g0_.y, _e1399.g0_.x) * _e1403.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_multi_vector_geometric_anti_product(self_2952: MultiVector, other_2574: MultiVector) -> MultiVector {
    var self_2953: MultiVector;
    var other_2575: MultiVector;

    self_2953 = self_2952;
    other_2575 = other_2574;
    let _e4: MultiVector = self_2953;
    let _e8: MultiVector = other_2575;
    let _e11: MultiVector = self_2953;
    let _e15: MultiVector = other_2575;
    let _e25: MultiVector = self_2953;
    let _e29: MultiVector = other_2575;
    let _e39: MultiVector = self_2953;
    let _e43: MultiVector = other_2575;
    let _e53: MultiVector = self_2953;
    let _e57: MultiVector = other_2575;
    let _e60: MultiVector = other_2575;
    let _e71: MultiVector = self_2953;
    let _e75: MultiVector = other_2575;
    let _e78: MultiVector = other_2575;
    let _e84: MultiVector = self_2953;
    let _e88: MultiVector = other_2575;
    let _e91: MultiVector = other_2575;
    let _e97: MultiVector = self_2953;
    let _e101: MultiVector = other_2575;
    let _e104: MultiVector = other_2575;
    let _e110: MultiVector = self_2953;
    let _e114: MultiVector = other_2575;
    let _e125: MultiVector = self_2953;
    let _e129: MultiVector = other_2575;
    let _e140: MultiVector = self_2953;
    let _e144: MultiVector = other_2575;
    let _e155: MultiVector = self_2953;
    let _e159: MultiVector = other_2575;
    let _e162: MultiVector = other_2575;
    let _e173: MultiVector = self_2953;
    let _e177: MultiVector = other_2575;
    let _e180: MultiVector = other_2575;
    let _e191: MultiVector = self_2953;
    let _e195: MultiVector = other_2575;
    let _e198: MultiVector = other_2575;
    let _e209: MultiVector = self_2953;
    let _e213: MultiVector = other_2575;
    let _e224: MultiVector = self_2953;
    let _e228: MultiVector = other_2575;
    let _e237: MultiVector = self_2953;
    let _e241: MultiVector = other_2575;
    let _e244: MultiVector = self_2953;
    let _e248: MultiVector = other_2575;
    let _e251: MultiVector = other_2575;
    let _e254: MultiVector = other_2575;
    let _e257: MultiVector = other_2575;
    let _e270: MultiVector = self_2953;
    let _e274: MultiVector = other_2575;
    let _e277: MultiVector = other_2575;
    let _e280: MultiVector = other_2575;
    let _e283: MultiVector = other_2575;
    let _e296: MultiVector = self_2953;
    let _e300: MultiVector = other_2575;
    let _e303: MultiVector = other_2575;
    let _e306: MultiVector = other_2575;
    let _e309: MultiVector = other_2575;
    let _e322: MultiVector = self_2953;
    let _e326: MultiVector = other_2575;
    let _e329: MultiVector = other_2575;
    let _e332: MultiVector = other_2575;
    let _e335: MultiVector = other_2575;
    let _e350: MultiVector = self_2953;
    let _e354: MultiVector = other_2575;
    let _e357: MultiVector = other_2575;
    let _e360: MultiVector = other_2575;
    let _e363: MultiVector = other_2575;
    let _e377: MultiVector = self_2953;
    let _e381: MultiVector = other_2575;
    let _e384: MultiVector = other_2575;
    let _e387: MultiVector = other_2575;
    let _e390: MultiVector = other_2575;
    let _e404: MultiVector = self_2953;
    let _e408: MultiVector = other_2575;
    let _e411: MultiVector = other_2575;
    let _e414: MultiVector = other_2575;
    let _e417: MultiVector = other_2575;
    let _e431: MultiVector = self_2953;
    let _e435: MultiVector = other_2575;
    let _e438: MultiVector = other_2575;
    let _e441: MultiVector = other_2575;
    let _e444: MultiVector = other_2575;
    let _e457: MultiVector = self_2953;
    let _e461: MultiVector = other_2575;
    let _e464: MultiVector = other_2575;
    let _e467: MultiVector = other_2575;
    let _e470: MultiVector = other_2575;
    let _e483: MultiVector = self_2953;
    let _e487: MultiVector = other_2575;
    let _e490: MultiVector = other_2575;
    let _e493: MultiVector = other_2575;
    let _e496: MultiVector = other_2575;
    let _e509: MultiVector = self_2953;
    let _e513: MultiVector = other_2575;
    let _e516: MultiVector = other_2575;
    let _e519: MultiVector = other_2575;
    let _e522: MultiVector = other_2575;
    let _e537: MultiVector = self_2953;
    let _e541: MultiVector = other_2575;
    let _e544: MultiVector = other_2575;
    let _e547: MultiVector = other_2575;
    let _e550: MultiVector = other_2575;
    let _e565: MultiVector = self_2953;
    let _e569: MultiVector = other_2575;
    let _e572: MultiVector = other_2575;
    let _e575: MultiVector = other_2575;
    let _e578: MultiVector = other_2575;
    let _e593: MultiVector = self_2953;
    let _e597: MultiVector = other_2575;
    let _e600: MultiVector = other_2575;
    let _e603: MultiVector = other_2575;
    let _e606: MultiVector = other_2575;
    let _e618: MultiVector = self_2953;
    let _e622: MultiVector = other_2575;
    let _e633: MultiVector = self_2953;
    let _e637: MultiVector = other_2575;
    let _e640: MultiVector = self_2953;
    let _e644: MultiVector = other_2575;
    let _e647: MultiVector = other_2575;
    let _e650: MultiVector = other_2575;
    let _e656: MultiVector = self_2953;
    let _e660: MultiVector = other_2575;
    let _e663: MultiVector = other_2575;
    let _e666: MultiVector = other_2575;
    let _e678: MultiVector = self_2953;
    let _e682: MultiVector = other_2575;
    let _e685: MultiVector = other_2575;
    let _e688: MultiVector = other_2575;
    let _e700: MultiVector = self_2953;
    let _e704: MultiVector = other_2575;
    let _e707: MultiVector = other_2575;
    let _e710: MultiVector = other_2575;
    let _e722: MultiVector = self_2953;
    let _e726: MultiVector = other_2575;
    let _e729: MultiVector = other_2575;
    let _e732: MultiVector = other_2575;
    let _e745: MultiVector = self_2953;
    let _e749: MultiVector = other_2575;
    let _e752: MultiVector = other_2575;
    let _e755: MultiVector = other_2575;
    let _e768: MultiVector = self_2953;
    let _e772: MultiVector = other_2575;
    let _e775: MultiVector = other_2575;
    let _e778: MultiVector = other_2575;
    let _e791: MultiVector = self_2953;
    let _e795: MultiVector = other_2575;
    let _e798: MultiVector = self_2953;
    let _e802: MultiVector = other_2575;
    let _e806: MultiVector = self_2953;
    let _e810: MultiVector = other_2575;
    let _e813: MultiVector = other_2575;
    let _e816: MultiVector = other_2575;
    let _e829: MultiVector = self_2953;
    let _e833: MultiVector = other_2575;
    let _e836: MultiVector = other_2575;
    let _e839: MultiVector = other_2575;
    let _e852: MultiVector = self_2953;
    let _e856: MultiVector = other_2575;
    let _e859: MultiVector = other_2575;
    let _e862: MultiVector = other_2575;
    let _e875: MultiVector = self_2953;
    let _e879: MultiVector = other_2575;
    let _e882: MultiVector = other_2575;
    let _e885: MultiVector = other_2575;
    let _e891: MultiVector = self_2953;
    let _e895: MultiVector = other_2575;
    let _e898: MultiVector = other_2575;
    let _e901: MultiVector = other_2575;
    let _e913: MultiVector = self_2953;
    let _e917: MultiVector = other_2575;
    let _e920: MultiVector = other_2575;
    let _e923: MultiVector = other_2575;
    let _e935: MultiVector = self_2953;
    let _e939: MultiVector = other_2575;
    let _e942: MultiVector = other_2575;
    let _e945: MultiVector = other_2575;
    let _e957: MultiVector = self_2953;
    let _e961: MultiVector = other_2575;
    let _e964: MultiVector = other_2575;
    let _e967: MultiVector = other_2575;
    let _e979: MultiVector = self_2953;
    let _e983: MultiVector = other_2575;
    let _e986: MultiVector = other_2575;
    let _e989: MultiVector = other_2575;
    let _e1001: MultiVector = self_2953;
    let _e1005: MultiVector = other_2575;
    let _e1008: MultiVector = other_2575;
    let _e1011: MultiVector = other_2575;
    let _e1023: MultiVector = self_2953;
    let _e1027: MultiVector = other_2575;
    let _e1030: MultiVector = other_2575;
    let _e1033: MultiVector = other_2575;
    let _e1045: MultiVector = self_2953;
    let _e1049: MultiVector = other_2575;
    let _e1052: MultiVector = other_2575;
    let _e1055: MultiVector = other_2575;
    let _e1067: MultiVector = self_2953;
    let _e1071: MultiVector = other_2575;
    let _e1074: MultiVector = other_2575;
    let _e1077: MultiVector = other_2575;
    let _e1089: MultiVector = self_2953;
    let _e1093: MultiVector = other_2575;
    let _e1096: MultiVector = other_2575;
    let _e1099: MultiVector = other_2575;
    let _e1105: MultiVector = self_2953;
    let _e1109: MultiVector = other_2575;
    let _e1112: MultiVector = self_2953;
    let _e1116: MultiVector = other_2575;
    let _e1129: MultiVector = self_2953;
    let _e1133: MultiVector = other_2575;
    let _e1146: MultiVector = self_2953;
    let _e1150: MultiVector = other_2575;
    let _e1163: MultiVector = self_2953;
    let _e1167: MultiVector = other_2575;
    let _e1170: MultiVector = other_2575;
    let _e1173: MultiVector = other_2575;
    let _e1176: MultiVector = other_2575;
    let _e1189: MultiVector = self_2953;
    let _e1193: MultiVector = other_2575;
    let _e1196: MultiVector = other_2575;
    let _e1199: MultiVector = other_2575;
    let _e1202: MultiVector = other_2575;
    let _e1216: MultiVector = self_2953;
    let _e1220: MultiVector = other_2575;
    let _e1223: MultiVector = other_2575;
    let _e1226: MultiVector = other_2575;
    let _e1229: MultiVector = other_2575;
    let _e1243: MultiVector = self_2953;
    let _e1247: MultiVector = other_2575;
    let _e1250: MultiVector = other_2575;
    let _e1253: MultiVector = other_2575;
    let _e1256: MultiVector = other_2575;
    let _e1270: MultiVector = self_2953;
    let _e1274: MultiVector = other_2575;
    let _e1287: MultiVector = self_2953;
    let _e1291: MultiVector = other_2575;
    let _e1304: MultiVector = self_2953;
    let _e1308: MultiVector = other_2575;
    let _e1321: MultiVector = self_2953;
    let _e1325: MultiVector = other_2575;
    let _e1328: MultiVector = other_2575;
    let _e1331: MultiVector = other_2575;
    let _e1334: MultiVector = other_2575;
    let _e1347: MultiVector = self_2953;
    let _e1351: MultiVector = other_2575;
    let _e1354: MultiVector = other_2575;
    let _e1357: MultiVector = other_2575;
    let _e1360: MultiVector = other_2575;
    let _e1373: MultiVector = self_2953;
    let _e1377: MultiVector = other_2575;
    let _e1380: MultiVector = other_2575;
    let _e1383: MultiVector = other_2575;
    let _e1386: MultiVector = other_2575;
    let _e1399: MultiVector = self_2953;
    let _e1403: MultiVector = other_2575;
    let _e1415: MultiVector = self_2953;
    let _e1419: MultiVector = other_2575;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w, _e60.g1_.w)) * vec2<f32>(1.0, -(1.0)))) - (vec2<f32>(_e71.g2_.x) * vec2<f32>(_e75.g3_.x, _e78.g2_.x))) - (vec2<f32>(_e84.g2_.y) * vec2<f32>(_e88.g3_.y, _e91.g2_.y))) - (vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z, _e104.g2_.z))) + ((vec2<f32>(_e110.g3_.x) * vec2<f32>(_e114.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e125.g3_.y) * vec2<f32>(_e129.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e140.g3_.z) * vec2<f32>(_e144.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e155.g4_.x) * vec2<f32>(_e159.g1_.x, _e162.g4_.x)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e173.g4_.y) * vec2<f32>(_e177.g1_.y, _e180.g4_.y)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e191.g4_.z) * vec2<f32>(_e195.g1_.z, _e198.g4_.z)) * vec2<f32>(-(1.0), 1.0))) + ((vec2<f32>(_e209.g4_.w) * vec2<f32>(_e213.g1_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e224.g0_.x) * _e228.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((((((vec4<f32>(_e237.g0_.y) * _e241.g1_) + ((vec4<f32>(_e244.g1_.x) * vec4<f32>(_e248.g0_.y, _e251.g2_.z, _e254.g2_.y, _e257.g0_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e270.g1_.y) * vec4<f32>(_e274.g2_.z, _e277.g0_.y, _e280.g2_.x, _e283.g2_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e296.g1_.z) * vec4<f32>(_e300.g2_.y, _e303.g2_.x, _e306.g0_.y, _e309.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e322.g1_.w) * vec4<f32>(_e326.g3_.x, _e329.g3_.y, _e332.g3_.z, _e335.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e350.g2_.x) * vec4<f32>(_e354.g4_.w, _e357.g1_.z, _e360.g1_.y, _e363.g4_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e377.g2_.y) * vec4<f32>(_e381.g1_.z, _e384.g4_.w, _e387.g1_.x, _e390.g4_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e404.g2_.z) * vec4<f32>(_e408.g1_.y, _e411.g1_.x, _e414.g4_.w, _e417.g4_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e431.g3_.x) * vec4<f32>(_e435.g1_.w, _e438.g4_.z, _e441.g4_.y, _e444.g1_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e457.g3_.y) * vec4<f32>(_e461.g4_.z, _e464.g1_.w, _e467.g4_.x, _e470.g4_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e483.g3_.z) * vec4<f32>(_e487.g4_.y, _e490.g4_.x, _e493.g1_.w, _e496.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, 0.0))) + ((vec4<f32>(_e509.g4_.x) * vec4<f32>(_e513.g0_.x, _e516.g3_.z, _e519.g3_.y, _e522.g2_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e537.g4_.y) * vec4<f32>(_e541.g3_.z, _e544.g0_.x, _e547.g3_.x, _e550.g2_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e565.g4_.z) * vec4<f32>(_e569.g3_.y, _e572.g3_.x, _e575.g0_.x, _e578.g2_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e593.g4_.w) * vec4<f32>(_e597.g2_.x, _e600.g2_.y, _e603.g2_.z, _e606.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e618.g0_.x) * _e622.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((((vec3<f32>(_e633.g0_.y) * _e637.g2_) - (vec3<f32>(_e640.g1_.w) * vec3<f32>(_e644.g4_.x, _e647.g4_.y, _e650.g4_.z))) + ((vec3<f32>(_e656.g2_.x) * vec3<f32>(_e660.g0_.y, _e663.g2_.z, _e666.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e678.g2_.y) * vec3<f32>(_e682.g2_.z, _e685.g0_.y, _e688.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e700.g2_.z) * vec3<f32>(_e704.g2_.y, _e707.g2_.x, _e710.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e722.g4_.x) * vec3<f32>(_e726.g1_.w, _e729.g4_.z, _e732.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e745.g4_.y) * vec3<f32>(_e749.g4_.z, _e752.g1_.w, _e755.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e768.g4_.z) * vec3<f32>(_e772.g4_.y, _e775.g4_.x, _e778.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))), ((((((((((((((((vec3<f32>(_e791.g0_.x) * _e795.g2_) + (vec3<f32>(_e798.g0_.y) * _e802.g3_)) + ((vec3<f32>(_e806.g1_.x) * vec3<f32>(_e810.g1_.w, _e813.g4_.z, _e816.g4_.y)) * vec3<f32>(-(1.0), 1.0, -(1.0)))) + ((vec3<f32>(_e829.g1_.y) * vec3<f32>(_e833.g4_.z, _e836.g1_.w, _e839.g4_.x)) * vec3<f32>(-(1.0), -(1.0), 1.0))) + ((vec3<f32>(_e852.g1_.z) * vec3<f32>(_e856.g4_.y, _e859.g4_.x, _e862.g1_.w)) * vec3<f32>(1.0, -(1.0), -(1.0)))) + (vec3<f32>(_e875.g1_.w) * vec3<f32>(_e879.g1_.x, _e882.g1_.y, _e885.g1_.z))) + ((vec3<f32>(_e891.g2_.x) * vec3<f32>(_e895.g0_.x, _e898.g3_.z, _e901.g3_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e913.g2_.y) * vec3<f32>(_e917.g3_.z, _e920.g0_.x, _e923.g3_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e935.g2_.z) * vec3<f32>(_e939.g3_.y, _e942.g3_.x, _e945.g0_.x)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e957.g3_.x) * vec3<f32>(_e961.g0_.y, _e964.g2_.z, _e967.g2_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e979.g3_.y) * vec3<f32>(_e983.g2_.z, _e986.g0_.y, _e989.g2_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1001.g3_.z) * vec3<f32>(_e1005.g2_.y, _e1008.g2_.x, _e1011.g0_.y)) * vec3<f32>(-(1.0), 1.0, 1.0))) + ((vec3<f32>(_e1023.g4_.x) * vec3<f32>(_e1027.g4_.w, _e1030.g1_.z, _e1033.g1_.y)) * vec3<f32>(1.0, -(1.0), 1.0))) + ((vec3<f32>(_e1045.g4_.y) * vec3<f32>(_e1049.g1_.z, _e1052.g4_.w, _e1055.g1_.x)) * vec3<f32>(1.0, 1.0, -(1.0)))) + ((vec3<f32>(_e1067.g4_.z) * vec3<f32>(_e1071.g1_.y, _e1074.g1_.x, _e1077.g4_.w)) * vec3<f32>(-(1.0), 1.0, 1.0))) - (vec3<f32>(_e1089.g4_.w) * vec3<f32>(_e1093.g4_.x, _e1096.g4_.y, _e1099.g4_.z))), ((((((((((((((((vec4<f32>(_e1105.g0_.y) * _e1109.g4_) + ((vec4<f32>(_e1112.g1_.x) * vec4<f32>(_e1116.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1129.g1_.y) * vec4<f32>(_e1133.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1146.g1_.z) * vec4<f32>(_e1150.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1163.g1_.w) * vec4<f32>(_e1167.g2_.x, _e1170.g2_.y, _e1173.g2_.z, _e1176.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1189.g2_.x) * vec4<f32>(_e1193.g1_.w, _e1196.g4_.z, _e1199.g4_.y, _e1202.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e1216.g2_.y) * vec4<f32>(_e1220.g4_.z, _e1223.g1_.w, _e1226.g4_.x, _e1229.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e1243.g2_.z) * vec4<f32>(_e1247.g4_.y, _e1250.g4_.x, _e1253.g1_.w, _e1256.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e1270.g3_.x) * vec4<f32>(_e1274.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1287.g3_.y) * vec4<f32>(_e1291.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1304.g3_.z) * vec4<f32>(_e1308.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e1321.g4_.x) * vec4<f32>(_e1325.g0_.y, _e1328.g2_.z, _e1331.g2_.y, _e1334.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e1347.g4_.y) * vec4<f32>(_e1351.g2_.z, _e1354.g0_.y, _e1357.g2_.x, _e1360.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e1373.g4_.z) * vec4<f32>(_e1377.g2_.y, _e1380.g2_.x, _e1383.g0_.y, _e1386.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e1399.g4_.w) * vec4<f32>(_e1403.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e1415.g0_.x) * _e1419.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_regressive_product(self_2954: MultiVector, other_2576: MultiVector) -> MultiVector {
    var self_2955: MultiVector;
    var other_2577: MultiVector;

    self_2955 = self_2954;
    other_2577 = other_2576;
    let _e4: MultiVector = self_2955;
    let _e8: MultiVector = other_2577;
    let _e11: MultiVector = self_2955;
    let _e15: MultiVector = other_2577;
    let _e25: MultiVector = self_2955;
    let _e29: MultiVector = other_2577;
    let _e39: MultiVector = self_2955;
    let _e43: MultiVector = other_2577;
    let _e53: MultiVector = self_2955;
    let _e57: MultiVector = other_2577;
    let _e67: MultiVector = self_2955;
    let _e71: MultiVector = other_2577;
    let _e82: MultiVector = self_2955;
    let _e86: MultiVector = other_2577;
    let _e97: MultiVector = self_2955;
    let _e101: MultiVector = other_2577;
    let _e112: MultiVector = self_2955;
    let _e116: MultiVector = other_2577;
    let _e127: MultiVector = self_2955;
    let _e131: MultiVector = other_2577;
    let _e142: MultiVector = self_2955;
    let _e146: MultiVector = other_2577;
    let _e157: MultiVector = self_2955;
    let _e161: MultiVector = other_2577;
    let _e172: MultiVector = self_2955;
    let _e176: MultiVector = other_2577;
    let _e187: MultiVector = self_2955;
    let _e191: MultiVector = other_2577;
    let _e202: MultiVector = self_2955;
    let _e206: MultiVector = other_2577;
    let _e217: MultiVector = self_2955;
    let _e221: MultiVector = other_2577;
    let _e230: MultiVector = self_2955;
    let _e234: MultiVector = other_2577;
    let _e237: MultiVector = self_2955;
    let _e241: MultiVector = other_2577;
    let _e253: MultiVector = self_2955;
    let _e257: MultiVector = other_2577;
    let _e269: MultiVector = self_2955;
    let _e273: MultiVector = other_2577;
    let _e285: MultiVector = self_2955;
    let _e289: MultiVector = other_2577;
    let _e301: MultiVector = self_2955;
    let _e305: MultiVector = other_2577;
    let _e317: MultiVector = self_2955;
    let _e321: MultiVector = other_2577;
    let _e333: MultiVector = self_2955;
    let _e337: MultiVector = other_2577;
    let _e340: MultiVector = other_2577;
    let _e343: MultiVector = other_2577;
    let _e346: MultiVector = other_2577;
    let _e360: MultiVector = self_2955;
    let _e364: MultiVector = other_2577;
    let _e367: MultiVector = other_2577;
    let _e370: MultiVector = other_2577;
    let _e373: MultiVector = other_2577;
    let _e387: MultiVector = self_2955;
    let _e391: MultiVector = other_2577;
    let _e394: MultiVector = other_2577;
    let _e397: MultiVector = other_2577;
    let _e400: MultiVector = other_2577;
    let _e414: MultiVector = self_2955;
    let _e418: MultiVector = other_2577;
    let _e421: MultiVector = other_2577;
    let _e424: MultiVector = other_2577;
    let _e427: MultiVector = other_2577;
    let _e439: MultiVector = self_2955;
    let _e441: MultiVector = other_2577;
    let _e447: MultiVector = self_2955;
    let _e451: MultiVector = other_2577;
    let _e454: MultiVector = self_2955;
    let _e458: MultiVector = other_2577;
    let _e461: MultiVector = other_2577;
    let _e464: MultiVector = other_2577;
    let _e476: MultiVector = self_2955;
    let _e480: MultiVector = other_2577;
    let _e483: MultiVector = other_2577;
    let _e486: MultiVector = other_2577;
    let _e498: MultiVector = self_2955;
    let _e502: MultiVector = other_2577;
    let _e505: MultiVector = other_2577;
    let _e508: MultiVector = other_2577;
    let _e520: MultiVector = self_2955;
    let _e522: MultiVector = other_2577;
    let _e528: MultiVector = self_2955;
    let _e532: MultiVector = other_2577;
    let _e535: MultiVector = self_2955;
    let _e539: MultiVector = other_2577;
    let _e550: MultiVector = self_2955;
    let _e554: MultiVector = other_2577;
    let _e565: MultiVector = self_2955;
    let _e569: MultiVector = other_2577;
    let _e580: MultiVector = self_2955;
    let _e584: MultiVector = other_2577;
    let _e587: MultiVector = other_2577;
    let _e590: MultiVector = other_2577;
    let _e596: MultiVector = self_2955;
    let _e598: MultiVector = other_2577;
    let _e604: MultiVector = self_2955;
    let _e608: MultiVector = other_2577;
    let _e611: MultiVector = self_2955;
    let _e613: MultiVector = other_2577;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e217.g0_.x) * _e221.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4<f32>(_e230.g0_.y) * _e234.g1_) + ((vec4<f32>(_e237.g2_.x) * _e241.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e253.g2_.y) * _e257.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e269.g2_.z) * _e273.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e285.g3_.x) * _e289.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e301.g3_.y) * _e305.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e317.g3_.z) * _e321.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e333.g4_.x) * vec4<f32>(_e337.g3_.z, _e340.g3_.z, _e343.g3_.y, _e346.g2_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e360.g4_.y) * vec4<f32>(_e364.g3_.z, _e367.g3_.z, _e370.g3_.x, _e373.g2_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e387.g4_.z) * vec4<f32>(_e391.g3_.y, _e394.g3_.x, _e397.g3_.y, _e400.g2_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e414.g4_.w) * vec4<f32>(_e418.g2_.x, _e421.g2_.y, _e424.g2_.z, _e427.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e439.g1_ * vec4<f32>(_e441.g0_.y))), (((((vec3<f32>(_e447.g0_.y) * _e451.g2_) + ((vec3<f32>(_e454.g4_.x) * vec3<f32>(_e458.g4_.z, _e461.g4_.z, _e464.g4_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e476.g4_.y) * vec3<f32>(_e480.g4_.z, _e483.g4_.z, _e486.g4_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e498.g4_.z) * vec3<f32>(_e502.g4_.y, _e505.g4_.x, _e508.g4_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e520.g2_ * vec3<f32>(_e522.g0_.y))), ((((((vec3<f32>(_e528.g0_.y) * _e532.g3_) + ((vec3<f32>(_e535.g4_.x) * vec3<f32>(_e539.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e550.g4_.y) * vec3<f32>(_e554.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e565.g4_.z) * vec3<f32>(_e569.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e580.g4_.w) * vec3<f32>(_e584.g4_.x, _e587.g4_.y, _e590.g4_.z))) + (_e596.g3_ * vec3<f32>(_e598.g0_.y))), ((vec4<f32>(_e604.g0_.y) * _e608.g4_) + (_e611.g4_ * vec4<f32>(_e613.g0_.y))));
}

fn multi_vector_multi_vector_anti_wedge(self_2956: MultiVector, other_2578: MultiVector) -> MultiVector {
    var self_2957: MultiVector;
    var other_2579: MultiVector;

    self_2957 = self_2956;
    other_2579 = other_2578;
    let _e4: MultiVector = self_2957;
    let _e8: MultiVector = other_2579;
    let _e11: MultiVector = self_2957;
    let _e15: MultiVector = other_2579;
    let _e25: MultiVector = self_2957;
    let _e29: MultiVector = other_2579;
    let _e39: MultiVector = self_2957;
    let _e43: MultiVector = other_2579;
    let _e53: MultiVector = self_2957;
    let _e57: MultiVector = other_2579;
    let _e67: MultiVector = self_2957;
    let _e71: MultiVector = other_2579;
    let _e82: MultiVector = self_2957;
    let _e86: MultiVector = other_2579;
    let _e97: MultiVector = self_2957;
    let _e101: MultiVector = other_2579;
    let _e112: MultiVector = self_2957;
    let _e116: MultiVector = other_2579;
    let _e127: MultiVector = self_2957;
    let _e131: MultiVector = other_2579;
    let _e142: MultiVector = self_2957;
    let _e146: MultiVector = other_2579;
    let _e157: MultiVector = self_2957;
    let _e161: MultiVector = other_2579;
    let _e172: MultiVector = self_2957;
    let _e176: MultiVector = other_2579;
    let _e187: MultiVector = self_2957;
    let _e191: MultiVector = other_2579;
    let _e202: MultiVector = self_2957;
    let _e206: MultiVector = other_2579;
    let _e217: MultiVector = self_2957;
    let _e221: MultiVector = other_2579;
    let _e230: MultiVector = self_2957;
    let _e234: MultiVector = other_2579;
    let _e237: MultiVector = self_2957;
    let _e241: MultiVector = other_2579;
    let _e253: MultiVector = self_2957;
    let _e257: MultiVector = other_2579;
    let _e269: MultiVector = self_2957;
    let _e273: MultiVector = other_2579;
    let _e285: MultiVector = self_2957;
    let _e289: MultiVector = other_2579;
    let _e301: MultiVector = self_2957;
    let _e305: MultiVector = other_2579;
    let _e317: MultiVector = self_2957;
    let _e321: MultiVector = other_2579;
    let _e333: MultiVector = self_2957;
    let _e337: MultiVector = other_2579;
    let _e340: MultiVector = other_2579;
    let _e343: MultiVector = other_2579;
    let _e346: MultiVector = other_2579;
    let _e360: MultiVector = self_2957;
    let _e364: MultiVector = other_2579;
    let _e367: MultiVector = other_2579;
    let _e370: MultiVector = other_2579;
    let _e373: MultiVector = other_2579;
    let _e387: MultiVector = self_2957;
    let _e391: MultiVector = other_2579;
    let _e394: MultiVector = other_2579;
    let _e397: MultiVector = other_2579;
    let _e400: MultiVector = other_2579;
    let _e414: MultiVector = self_2957;
    let _e418: MultiVector = other_2579;
    let _e421: MultiVector = other_2579;
    let _e424: MultiVector = other_2579;
    let _e427: MultiVector = other_2579;
    let _e439: MultiVector = self_2957;
    let _e441: MultiVector = other_2579;
    let _e447: MultiVector = self_2957;
    let _e451: MultiVector = other_2579;
    let _e454: MultiVector = self_2957;
    let _e458: MultiVector = other_2579;
    let _e461: MultiVector = other_2579;
    let _e464: MultiVector = other_2579;
    let _e476: MultiVector = self_2957;
    let _e480: MultiVector = other_2579;
    let _e483: MultiVector = other_2579;
    let _e486: MultiVector = other_2579;
    let _e498: MultiVector = self_2957;
    let _e502: MultiVector = other_2579;
    let _e505: MultiVector = other_2579;
    let _e508: MultiVector = other_2579;
    let _e520: MultiVector = self_2957;
    let _e522: MultiVector = other_2579;
    let _e528: MultiVector = self_2957;
    let _e532: MultiVector = other_2579;
    let _e535: MultiVector = self_2957;
    let _e539: MultiVector = other_2579;
    let _e550: MultiVector = self_2957;
    let _e554: MultiVector = other_2579;
    let _e565: MultiVector = self_2957;
    let _e569: MultiVector = other_2579;
    let _e580: MultiVector = self_2957;
    let _e584: MultiVector = other_2579;
    let _e587: MultiVector = other_2579;
    let _e590: MultiVector = other_2579;
    let _e596: MultiVector = self_2957;
    let _e598: MultiVector = other_2579;
    let _e604: MultiVector = self_2957;
    let _e608: MultiVector = other_2579;
    let _e611: MultiVector = self_2957;
    let _e613: MultiVector = other_2579;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e217.g0_.x) * _e221.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4<f32>(_e230.g0_.y) * _e234.g1_) + ((vec4<f32>(_e237.g2_.x) * _e241.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e253.g2_.y) * _e257.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e269.g2_.z) * _e273.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e285.g3_.x) * _e289.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e301.g3_.y) * _e305.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e317.g3_.z) * _e321.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e333.g4_.x) * vec4<f32>(_e337.g3_.z, _e340.g3_.z, _e343.g3_.y, _e346.g2_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e360.g4_.y) * vec4<f32>(_e364.g3_.z, _e367.g3_.z, _e370.g3_.x, _e373.g2_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e387.g4_.z) * vec4<f32>(_e391.g3_.y, _e394.g3_.x, _e397.g3_.y, _e400.g2_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e414.g4_.w) * vec4<f32>(_e418.g2_.x, _e421.g2_.y, _e424.g2_.z, _e427.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e439.g1_ * vec4<f32>(_e441.g0_.y))), (((((vec3<f32>(_e447.g0_.y) * _e451.g2_) + ((vec3<f32>(_e454.g4_.x) * vec3<f32>(_e458.g4_.z, _e461.g4_.z, _e464.g4_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e476.g4_.y) * vec3<f32>(_e480.g4_.z, _e483.g4_.z, _e486.g4_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e498.g4_.z) * vec3<f32>(_e502.g4_.y, _e505.g4_.x, _e508.g4_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e520.g2_ * vec3<f32>(_e522.g0_.y))), ((((((vec3<f32>(_e528.g0_.y) * _e532.g3_) + ((vec3<f32>(_e535.g4_.x) * vec3<f32>(_e539.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e550.g4_.y) * vec3<f32>(_e554.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e565.g4_.z) * vec3<f32>(_e569.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e580.g4_.w) * vec3<f32>(_e584.g4_.x, _e587.g4_.y, _e590.g4_.z))) + (_e596.g3_ * vec3<f32>(_e598.g0_.y))), ((vec4<f32>(_e604.g0_.y) * _e608.g4_) + (_e611.g4_ * vec4<f32>(_e613.g0_.y))));
}

fn multi_vector_multi_vector_meet(self_2958: MultiVector, other_2580: MultiVector) -> MultiVector {
    var self_2959: MultiVector;
    var other_2581: MultiVector;

    self_2959 = self_2958;
    other_2581 = other_2580;
    let _e4: MultiVector = self_2959;
    let _e8: MultiVector = other_2581;
    let _e11: MultiVector = self_2959;
    let _e15: MultiVector = other_2581;
    let _e25: MultiVector = self_2959;
    let _e29: MultiVector = other_2581;
    let _e39: MultiVector = self_2959;
    let _e43: MultiVector = other_2581;
    let _e53: MultiVector = self_2959;
    let _e57: MultiVector = other_2581;
    let _e67: MultiVector = self_2959;
    let _e71: MultiVector = other_2581;
    let _e82: MultiVector = self_2959;
    let _e86: MultiVector = other_2581;
    let _e97: MultiVector = self_2959;
    let _e101: MultiVector = other_2581;
    let _e112: MultiVector = self_2959;
    let _e116: MultiVector = other_2581;
    let _e127: MultiVector = self_2959;
    let _e131: MultiVector = other_2581;
    let _e142: MultiVector = self_2959;
    let _e146: MultiVector = other_2581;
    let _e157: MultiVector = self_2959;
    let _e161: MultiVector = other_2581;
    let _e172: MultiVector = self_2959;
    let _e176: MultiVector = other_2581;
    let _e187: MultiVector = self_2959;
    let _e191: MultiVector = other_2581;
    let _e202: MultiVector = self_2959;
    let _e206: MultiVector = other_2581;
    let _e217: MultiVector = self_2959;
    let _e221: MultiVector = other_2581;
    let _e230: MultiVector = self_2959;
    let _e234: MultiVector = other_2581;
    let _e237: MultiVector = self_2959;
    let _e241: MultiVector = other_2581;
    let _e253: MultiVector = self_2959;
    let _e257: MultiVector = other_2581;
    let _e269: MultiVector = self_2959;
    let _e273: MultiVector = other_2581;
    let _e285: MultiVector = self_2959;
    let _e289: MultiVector = other_2581;
    let _e301: MultiVector = self_2959;
    let _e305: MultiVector = other_2581;
    let _e317: MultiVector = self_2959;
    let _e321: MultiVector = other_2581;
    let _e333: MultiVector = self_2959;
    let _e337: MultiVector = other_2581;
    let _e340: MultiVector = other_2581;
    let _e343: MultiVector = other_2581;
    let _e346: MultiVector = other_2581;
    let _e360: MultiVector = self_2959;
    let _e364: MultiVector = other_2581;
    let _e367: MultiVector = other_2581;
    let _e370: MultiVector = other_2581;
    let _e373: MultiVector = other_2581;
    let _e387: MultiVector = self_2959;
    let _e391: MultiVector = other_2581;
    let _e394: MultiVector = other_2581;
    let _e397: MultiVector = other_2581;
    let _e400: MultiVector = other_2581;
    let _e414: MultiVector = self_2959;
    let _e418: MultiVector = other_2581;
    let _e421: MultiVector = other_2581;
    let _e424: MultiVector = other_2581;
    let _e427: MultiVector = other_2581;
    let _e439: MultiVector = self_2959;
    let _e441: MultiVector = other_2581;
    let _e447: MultiVector = self_2959;
    let _e451: MultiVector = other_2581;
    let _e454: MultiVector = self_2959;
    let _e458: MultiVector = other_2581;
    let _e461: MultiVector = other_2581;
    let _e464: MultiVector = other_2581;
    let _e476: MultiVector = self_2959;
    let _e480: MultiVector = other_2581;
    let _e483: MultiVector = other_2581;
    let _e486: MultiVector = other_2581;
    let _e498: MultiVector = self_2959;
    let _e502: MultiVector = other_2581;
    let _e505: MultiVector = other_2581;
    let _e508: MultiVector = other_2581;
    let _e520: MultiVector = self_2959;
    let _e522: MultiVector = other_2581;
    let _e528: MultiVector = self_2959;
    let _e532: MultiVector = other_2581;
    let _e535: MultiVector = self_2959;
    let _e539: MultiVector = other_2581;
    let _e550: MultiVector = self_2959;
    let _e554: MultiVector = other_2581;
    let _e565: MultiVector = self_2959;
    let _e569: MultiVector = other_2581;
    let _e580: MultiVector = self_2959;
    let _e584: MultiVector = other_2581;
    let _e587: MultiVector = other_2581;
    let _e590: MultiVector = other_2581;
    let _e596: MultiVector = self_2959;
    let _e598: MultiVector = other_2581;
    let _e604: MultiVector = self_2959;
    let _e608: MultiVector = other_2581;
    let _e611: MultiVector = self_2959;
    let _e613: MultiVector = other_2581;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e217.g0_.x) * _e221.g0_.yx) * vec2<f32>(1.0, 0.0))), ((((((((((((vec4<f32>(_e230.g0_.y) * _e234.g1_) + ((vec4<f32>(_e237.g2_.x) * _e241.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e253.g2_.y) * _e257.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e269.g2_.z) * _e273.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e285.g3_.x) * _e289.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e301.g3_.y) * _e305.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e317.g3_.z) * _e321.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e333.g4_.x) * vec4<f32>(_e337.g3_.z, _e340.g3_.z, _e343.g3_.y, _e346.g2_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e360.g4_.y) * vec4<f32>(_e364.g3_.z, _e367.g3_.z, _e370.g3_.x, _e373.g2_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e387.g4_.z) * vec4<f32>(_e391.g3_.y, _e394.g3_.x, _e397.g3_.y, _e400.g2_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e414.g4_.w) * vec4<f32>(_e418.g2_.x, _e421.g2_.y, _e424.g2_.z, _e427.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + (_e439.g1_ * vec4<f32>(_e441.g0_.y))), (((((vec3<f32>(_e447.g0_.y) * _e451.g2_) + ((vec3<f32>(_e454.g4_.x) * vec3<f32>(_e458.g4_.z, _e461.g4_.z, _e464.g4_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e476.g4_.y) * vec3<f32>(_e480.g4_.z, _e483.g4_.z, _e486.g4_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e498.g4_.z) * vec3<f32>(_e502.g4_.y, _e505.g4_.x, _e508.g4_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e520.g2_ * vec3<f32>(_e522.g0_.y))), ((((((vec3<f32>(_e528.g0_.y) * _e532.g3_) + ((vec3<f32>(_e535.g4_.x) * vec3<f32>(_e539.g4_.w)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e550.g4_.y) * vec3<f32>(_e554.g4_.w)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e565.g4_.z) * vec3<f32>(_e569.g4_.w)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e580.g4_.w) * vec3<f32>(_e584.g4_.x, _e587.g4_.y, _e590.g4_.z))) + (_e596.g3_ * vec3<f32>(_e598.g0_.y))), ((vec4<f32>(_e604.g0_.y) * _e608.g4_) + (_e611.g4_ * vec4<f32>(_e613.g0_.y))));
}

fn multi_vector_multi_vector_outer_product(self_2960: MultiVector, other_2582: MultiVector) -> MultiVector {
    var self_2961: MultiVector;
    var other_2583: MultiVector;

    self_2961 = self_2960;
    other_2583 = other_2582;
    let _e4: MultiVector = self_2961;
    let _e8: MultiVector = other_2583;
    let _e11: MultiVector = self_2961;
    let _e15: MultiVector = other_2583;
    let _e25: MultiVector = self_2961;
    let _e29: MultiVector = other_2583;
    let _e39: MultiVector = self_2961;
    let _e43: MultiVector = other_2583;
    let _e53: MultiVector = self_2961;
    let _e57: MultiVector = other_2583;
    let _e67: MultiVector = self_2961;
    let _e71: MultiVector = other_2583;
    let _e82: MultiVector = self_2961;
    let _e86: MultiVector = other_2583;
    let _e97: MultiVector = self_2961;
    let _e101: MultiVector = other_2583;
    let _e112: MultiVector = self_2961;
    let _e116: MultiVector = other_2583;
    let _e127: MultiVector = self_2961;
    let _e131: MultiVector = other_2583;
    let _e142: MultiVector = self_2961;
    let _e146: MultiVector = other_2583;
    let _e157: MultiVector = self_2961;
    let _e161: MultiVector = other_2583;
    let _e172: MultiVector = self_2961;
    let _e176: MultiVector = other_2583;
    let _e187: MultiVector = self_2961;
    let _e191: MultiVector = other_2583;
    let _e202: MultiVector = self_2961;
    let _e206: MultiVector = other_2583;
    let _e217: MultiVector = self_2961;
    let _e219: MultiVector = other_2583;
    let _e229: MultiVector = self_2961;
    let _e233: MultiVector = other_2583;
    let _e236: MultiVector = self_2961;
    let _e238: MultiVector = other_2583;
    let _e244: MultiVector = self_2961;
    let _e248: MultiVector = other_2583;
    let _e251: MultiVector = self_2961;
    let _e255: MultiVector = other_2583;
    let _e258: MultiVector = other_2583;
    let _e261: MultiVector = other_2583;
    let _e267: MultiVector = self_2961;
    let _e271: MultiVector = other_2583;
    let _e282: MultiVector = self_2961;
    let _e286: MultiVector = other_2583;
    let _e297: MultiVector = self_2961;
    let _e301: MultiVector = other_2583;
    let _e312: MultiVector = self_2961;
    let _e315: MultiVector = self_2961;
    let _e318: MultiVector = self_2961;
    let _e322: MultiVector = other_2583;
    let _e332: MultiVector = self_2961;
    let _e336: MultiVector = other_2583;
    let _e339: MultiVector = self_2961;
    let _e343: MultiVector = other_2583;
    let _e346: MultiVector = other_2583;
    let _e349: MultiVector = other_2583;
    let _e361: MultiVector = self_2961;
    let _e365: MultiVector = other_2583;
    let _e368: MultiVector = other_2583;
    let _e371: MultiVector = other_2583;
    let _e383: MultiVector = self_2961;
    let _e387: MultiVector = other_2583;
    let _e398: MultiVector = self_2961;
    let _e402: MultiVector = other_2583;
    let _e413: MultiVector = self_2961;
    let _e417: MultiVector = other_2583;
    let _e428: MultiVector = self_2961;
    let _e432: MultiVector = other_2583;
    let _e435: MultiVector = other_2583;
    let _e438: MultiVector = other_2583;
    let _e450: MultiVector = self_2961;
    let _e454: MultiVector = other_2583;
    let _e457: MultiVector = self_2961;
    let _e461: MultiVector = other_2583;
    let _e464: MultiVector = other_2583;
    let _e467: MultiVector = other_2583;
    let _e470: MultiVector = other_2583;
    let _e484: MultiVector = self_2961;
    let _e488: MultiVector = other_2583;
    let _e491: MultiVector = other_2583;
    let _e494: MultiVector = other_2583;
    let _e497: MultiVector = other_2583;
    let _e511: MultiVector = self_2961;
    let _e515: MultiVector = other_2583;
    let _e518: MultiVector = other_2583;
    let _e521: MultiVector = other_2583;
    let _e524: MultiVector = other_2583;
    let _e536: MultiVector = self_2961;
    let _e540: MultiVector = other_2583;
    let _e552: MultiVector = self_2961;
    let _e556: MultiVector = other_2583;
    let _e568: MultiVector = self_2961;
    let _e572: MultiVector = other_2583;
    let _e584: MultiVector = self_2961;
    let _e588: MultiVector = other_2583;
    let _e600: MultiVector = self_2961;
    let _e604: MultiVector = other_2583;
    let _e616: MultiVector = self_2961;
    let _e620: MultiVector = other_2583;
    let _e632: MultiVector = self_2961;
    let _e636: MultiVector = other_2583;
    let _e648: MultiVector = self_2961;
    let _e652: MultiVector = other_2583;
    let _e664: MultiVector = self_2961;
    let _e668: MultiVector = other_2583;
    let _e680: MultiVector = self_2961;
    let _e684: MultiVector = other_2583;
    let _e696: MultiVector = self_2961;
    let _e700: MultiVector = other_2583;
    let _e703: MultiVector = other_2583;
    let _e706: MultiVector = other_2583;
    let _e709: MultiVector = other_2583;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(0.0, -(1.0)))) + ((_e217.g0_ * vec2<f32>(_e219.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e229.g0_.x) * _e233.g1_) + (_e236.g1_ * vec4<f32>(_e238.g0_.x))), ((((((vec3<f32>(_e244.g0_.x) * _e248.g2_) + (vec3<f32>(_e251.g1_.w) * vec3<f32>(_e255.g1_.x, _e258.g1_.y, _e261.g1_.z))) + ((vec3<f32>(_e267.g2_.x) * vec3<f32>(_e271.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e282.g2_.y) * vec3<f32>(_e286.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e297.g2_.z) * vec3<f32>(_e301.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e312.g1_.x, _e315.g1_.y, _e318.g1_.z) * vec3<f32>(_e322.g1_.w)) * vec3<f32>(-(1.0)))), (((((((vec3<f32>(_e332.g0_.x) * _e336.g3_) + ((vec3<f32>(_e339.g1_.y) * vec3<f32>(_e343.g1_.z, _e346.g1_.z, _e349.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e361.g1_.z) * vec3<f32>(_e365.g1_.y, _e368.g1_.x, _e371.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e383.g3_.x) * vec3<f32>(_e387.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e398.g3_.y) * vec3<f32>(_e402.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e413.g3_.z) * vec3<f32>(_e417.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e428.g1_.x) * vec3<f32>(_e432.g1_.x, _e435.g1_.z, _e438.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((((((((vec4<f32>(_e450.g0_.x) * _e454.g4_) + ((vec4<f32>(_e457.g1_.y) * vec4<f32>(_e461.g2_.z, _e464.g2_.z, _e467.g2_.x, _e470.g3_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e484.g1_.z) * vec4<f32>(_e488.g2_.y, _e491.g2_.x, _e494.g2_.y, _e497.g3_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e511.g1_.w) * vec4<f32>(_e515.g3_.x, _e518.g3_.y, _e521.g3_.z, _e524.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e536.g2_.x) * _e540.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e552.g2_.y) * _e556.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e568.g2_.z) * _e572.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e584.g3_.x) * _e588.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e600.g3_.y) * _e604.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e616.g3_.z) * _e620.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e632.g4_.x) * vec4<f32>(_e636.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e648.g4_.y) * vec4<f32>(_e652.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e664.g4_.z) * vec4<f32>(_e668.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e680.g4_.w) * vec4<f32>(_e684.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e696.g1_.x) * vec4<f32>(_e700.g2_.x, _e703.g2_.z, _e706.g2_.y, _e709.g3_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_wedge(self_2962: MultiVector, other_2584: MultiVector) -> MultiVector {
    var self_2963: MultiVector;
    var other_2585: MultiVector;

    self_2963 = self_2962;
    other_2585 = other_2584;
    let _e4: MultiVector = self_2963;
    let _e8: MultiVector = other_2585;
    let _e11: MultiVector = self_2963;
    let _e15: MultiVector = other_2585;
    let _e25: MultiVector = self_2963;
    let _e29: MultiVector = other_2585;
    let _e39: MultiVector = self_2963;
    let _e43: MultiVector = other_2585;
    let _e53: MultiVector = self_2963;
    let _e57: MultiVector = other_2585;
    let _e67: MultiVector = self_2963;
    let _e71: MultiVector = other_2585;
    let _e82: MultiVector = self_2963;
    let _e86: MultiVector = other_2585;
    let _e97: MultiVector = self_2963;
    let _e101: MultiVector = other_2585;
    let _e112: MultiVector = self_2963;
    let _e116: MultiVector = other_2585;
    let _e127: MultiVector = self_2963;
    let _e131: MultiVector = other_2585;
    let _e142: MultiVector = self_2963;
    let _e146: MultiVector = other_2585;
    let _e157: MultiVector = self_2963;
    let _e161: MultiVector = other_2585;
    let _e172: MultiVector = self_2963;
    let _e176: MultiVector = other_2585;
    let _e187: MultiVector = self_2963;
    let _e191: MultiVector = other_2585;
    let _e202: MultiVector = self_2963;
    let _e206: MultiVector = other_2585;
    let _e217: MultiVector = self_2963;
    let _e219: MultiVector = other_2585;
    let _e229: MultiVector = self_2963;
    let _e233: MultiVector = other_2585;
    let _e236: MultiVector = self_2963;
    let _e238: MultiVector = other_2585;
    let _e244: MultiVector = self_2963;
    let _e248: MultiVector = other_2585;
    let _e251: MultiVector = self_2963;
    let _e255: MultiVector = other_2585;
    let _e258: MultiVector = other_2585;
    let _e261: MultiVector = other_2585;
    let _e267: MultiVector = self_2963;
    let _e271: MultiVector = other_2585;
    let _e282: MultiVector = self_2963;
    let _e286: MultiVector = other_2585;
    let _e297: MultiVector = self_2963;
    let _e301: MultiVector = other_2585;
    let _e312: MultiVector = self_2963;
    let _e315: MultiVector = self_2963;
    let _e318: MultiVector = self_2963;
    let _e322: MultiVector = other_2585;
    let _e332: MultiVector = self_2963;
    let _e336: MultiVector = other_2585;
    let _e339: MultiVector = self_2963;
    let _e343: MultiVector = other_2585;
    let _e346: MultiVector = other_2585;
    let _e349: MultiVector = other_2585;
    let _e361: MultiVector = self_2963;
    let _e365: MultiVector = other_2585;
    let _e368: MultiVector = other_2585;
    let _e371: MultiVector = other_2585;
    let _e383: MultiVector = self_2963;
    let _e387: MultiVector = other_2585;
    let _e398: MultiVector = self_2963;
    let _e402: MultiVector = other_2585;
    let _e413: MultiVector = self_2963;
    let _e417: MultiVector = other_2585;
    let _e428: MultiVector = self_2963;
    let _e432: MultiVector = other_2585;
    let _e435: MultiVector = other_2585;
    let _e438: MultiVector = other_2585;
    let _e450: MultiVector = self_2963;
    let _e454: MultiVector = other_2585;
    let _e457: MultiVector = self_2963;
    let _e461: MultiVector = other_2585;
    let _e464: MultiVector = other_2585;
    let _e467: MultiVector = other_2585;
    let _e470: MultiVector = other_2585;
    let _e484: MultiVector = self_2963;
    let _e488: MultiVector = other_2585;
    let _e491: MultiVector = other_2585;
    let _e494: MultiVector = other_2585;
    let _e497: MultiVector = other_2585;
    let _e511: MultiVector = self_2963;
    let _e515: MultiVector = other_2585;
    let _e518: MultiVector = other_2585;
    let _e521: MultiVector = other_2585;
    let _e524: MultiVector = other_2585;
    let _e536: MultiVector = self_2963;
    let _e540: MultiVector = other_2585;
    let _e552: MultiVector = self_2963;
    let _e556: MultiVector = other_2585;
    let _e568: MultiVector = self_2963;
    let _e572: MultiVector = other_2585;
    let _e584: MultiVector = self_2963;
    let _e588: MultiVector = other_2585;
    let _e600: MultiVector = self_2963;
    let _e604: MultiVector = other_2585;
    let _e616: MultiVector = self_2963;
    let _e620: MultiVector = other_2585;
    let _e632: MultiVector = self_2963;
    let _e636: MultiVector = other_2585;
    let _e648: MultiVector = self_2963;
    let _e652: MultiVector = other_2585;
    let _e664: MultiVector = self_2963;
    let _e668: MultiVector = other_2585;
    let _e680: MultiVector = self_2963;
    let _e684: MultiVector = other_2585;
    let _e696: MultiVector = self_2963;
    let _e700: MultiVector = other_2585;
    let _e703: MultiVector = other_2585;
    let _e706: MultiVector = other_2585;
    let _e709: MultiVector = other_2585;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(0.0, -(1.0)))) + ((_e217.g0_ * vec2<f32>(_e219.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e229.g0_.x) * _e233.g1_) + (_e236.g1_ * vec4<f32>(_e238.g0_.x))), ((((((vec3<f32>(_e244.g0_.x) * _e248.g2_) + (vec3<f32>(_e251.g1_.w) * vec3<f32>(_e255.g1_.x, _e258.g1_.y, _e261.g1_.z))) + ((vec3<f32>(_e267.g2_.x) * vec3<f32>(_e271.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e282.g2_.y) * vec3<f32>(_e286.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e297.g2_.z) * vec3<f32>(_e301.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e312.g1_.x, _e315.g1_.y, _e318.g1_.z) * vec3<f32>(_e322.g1_.w)) * vec3<f32>(-(1.0)))), (((((((vec3<f32>(_e332.g0_.x) * _e336.g3_) + ((vec3<f32>(_e339.g1_.y) * vec3<f32>(_e343.g1_.z, _e346.g1_.z, _e349.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e361.g1_.z) * vec3<f32>(_e365.g1_.y, _e368.g1_.x, _e371.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e383.g3_.x) * vec3<f32>(_e387.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e398.g3_.y) * vec3<f32>(_e402.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e413.g3_.z) * vec3<f32>(_e417.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e428.g1_.x) * vec3<f32>(_e432.g1_.x, _e435.g1_.z, _e438.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((((((((vec4<f32>(_e450.g0_.x) * _e454.g4_) + ((vec4<f32>(_e457.g1_.y) * vec4<f32>(_e461.g2_.z, _e464.g2_.z, _e467.g2_.x, _e470.g3_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e484.g1_.z) * vec4<f32>(_e488.g2_.y, _e491.g2_.x, _e494.g2_.y, _e497.g3_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e511.g1_.w) * vec4<f32>(_e515.g3_.x, _e518.g3_.y, _e521.g3_.z, _e524.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e536.g2_.x) * _e540.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e552.g2_.y) * _e556.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e568.g2_.z) * _e572.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e584.g3_.x) * _e588.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e600.g3_.y) * _e604.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e616.g3_.z) * _e620.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e632.g4_.x) * vec4<f32>(_e636.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e648.g4_.y) * vec4<f32>(_e652.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e664.g4_.z) * vec4<f32>(_e668.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e680.g4_.w) * vec4<f32>(_e684.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e696.g1_.x) * vec4<f32>(_e700.g2_.x, _e703.g2_.z, _e706.g2_.y, _e709.g3_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_join(self_2964: MultiVector, other_2586: MultiVector) -> MultiVector {
    var self_2965: MultiVector;
    var other_2587: MultiVector;

    self_2965 = self_2964;
    other_2587 = other_2586;
    let _e4: MultiVector = self_2965;
    let _e8: MultiVector = other_2587;
    let _e11: MultiVector = self_2965;
    let _e15: MultiVector = other_2587;
    let _e25: MultiVector = self_2965;
    let _e29: MultiVector = other_2587;
    let _e39: MultiVector = self_2965;
    let _e43: MultiVector = other_2587;
    let _e53: MultiVector = self_2965;
    let _e57: MultiVector = other_2587;
    let _e67: MultiVector = self_2965;
    let _e71: MultiVector = other_2587;
    let _e82: MultiVector = self_2965;
    let _e86: MultiVector = other_2587;
    let _e97: MultiVector = self_2965;
    let _e101: MultiVector = other_2587;
    let _e112: MultiVector = self_2965;
    let _e116: MultiVector = other_2587;
    let _e127: MultiVector = self_2965;
    let _e131: MultiVector = other_2587;
    let _e142: MultiVector = self_2965;
    let _e146: MultiVector = other_2587;
    let _e157: MultiVector = self_2965;
    let _e161: MultiVector = other_2587;
    let _e172: MultiVector = self_2965;
    let _e176: MultiVector = other_2587;
    let _e187: MultiVector = self_2965;
    let _e191: MultiVector = other_2587;
    let _e202: MultiVector = self_2965;
    let _e206: MultiVector = other_2587;
    let _e217: MultiVector = self_2965;
    let _e219: MultiVector = other_2587;
    let _e229: MultiVector = self_2965;
    let _e233: MultiVector = other_2587;
    let _e236: MultiVector = self_2965;
    let _e238: MultiVector = other_2587;
    let _e244: MultiVector = self_2965;
    let _e248: MultiVector = other_2587;
    let _e251: MultiVector = self_2965;
    let _e255: MultiVector = other_2587;
    let _e258: MultiVector = other_2587;
    let _e261: MultiVector = other_2587;
    let _e267: MultiVector = self_2965;
    let _e271: MultiVector = other_2587;
    let _e282: MultiVector = self_2965;
    let _e286: MultiVector = other_2587;
    let _e297: MultiVector = self_2965;
    let _e301: MultiVector = other_2587;
    let _e312: MultiVector = self_2965;
    let _e315: MultiVector = self_2965;
    let _e318: MultiVector = self_2965;
    let _e322: MultiVector = other_2587;
    let _e332: MultiVector = self_2965;
    let _e336: MultiVector = other_2587;
    let _e339: MultiVector = self_2965;
    let _e343: MultiVector = other_2587;
    let _e346: MultiVector = other_2587;
    let _e349: MultiVector = other_2587;
    let _e361: MultiVector = self_2965;
    let _e365: MultiVector = other_2587;
    let _e368: MultiVector = other_2587;
    let _e371: MultiVector = other_2587;
    let _e383: MultiVector = self_2965;
    let _e387: MultiVector = other_2587;
    let _e398: MultiVector = self_2965;
    let _e402: MultiVector = other_2587;
    let _e413: MultiVector = self_2965;
    let _e417: MultiVector = other_2587;
    let _e428: MultiVector = self_2965;
    let _e432: MultiVector = other_2587;
    let _e435: MultiVector = other_2587;
    let _e438: MultiVector = other_2587;
    let _e450: MultiVector = self_2965;
    let _e454: MultiVector = other_2587;
    let _e457: MultiVector = self_2965;
    let _e461: MultiVector = other_2587;
    let _e464: MultiVector = other_2587;
    let _e467: MultiVector = other_2587;
    let _e470: MultiVector = other_2587;
    let _e484: MultiVector = self_2965;
    let _e488: MultiVector = other_2587;
    let _e491: MultiVector = other_2587;
    let _e494: MultiVector = other_2587;
    let _e497: MultiVector = other_2587;
    let _e511: MultiVector = self_2965;
    let _e515: MultiVector = other_2587;
    let _e518: MultiVector = other_2587;
    let _e521: MultiVector = other_2587;
    let _e524: MultiVector = other_2587;
    let _e536: MultiVector = self_2965;
    let _e540: MultiVector = other_2587;
    let _e552: MultiVector = self_2965;
    let _e556: MultiVector = other_2587;
    let _e568: MultiVector = self_2965;
    let _e572: MultiVector = other_2587;
    let _e584: MultiVector = self_2965;
    let _e588: MultiVector = other_2587;
    let _e600: MultiVector = self_2965;
    let _e604: MultiVector = other_2587;
    let _e616: MultiVector = self_2965;
    let _e620: MultiVector = other_2587;
    let _e632: MultiVector = self_2965;
    let _e636: MultiVector = other_2587;
    let _e648: MultiVector = self_2965;
    let _e652: MultiVector = other_2587;
    let _e664: MultiVector = self_2965;
    let _e668: MultiVector = other_2587;
    let _e680: MultiVector = self_2965;
    let _e684: MultiVector = other_2587;
    let _e696: MultiVector = self_2965;
    let _e700: MultiVector = other_2587;
    let _e703: MultiVector = other_2587;
    let _e706: MultiVector = other_2587;
    let _e709: MultiVector = other_2587;
    return MultiVector(((((((((((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e53.g1_.w) * vec2<f32>(_e57.g4_.w)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e67.g2_.x) * vec2<f32>(_e71.g3_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e82.g2_.y) * vec2<f32>(_e86.g3_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e97.g2_.z) * vec2<f32>(_e101.g3_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e112.g3_.x) * vec2<f32>(_e116.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e127.g3_.y) * vec2<f32>(_e131.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e142.g3_.z) * vec2<f32>(_e146.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e157.g4_.x) * vec2<f32>(_e161.g1_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e172.g4_.y) * vec2<f32>(_e176.g1_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e187.g4_.z) * vec2<f32>(_e191.g1_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e202.g4_.w) * vec2<f32>(_e206.g1_.w)) * vec2<f32>(0.0, -(1.0)))) + ((_e217.g0_ * vec2<f32>(_e219.g0_.x)) * vec2<f32>(0.0, 1.0))), ((vec4<f32>(_e229.g0_.x) * _e233.g1_) + (_e236.g1_ * vec4<f32>(_e238.g0_.x))), ((((((vec3<f32>(_e244.g0_.x) * _e248.g2_) + (vec3<f32>(_e251.g1_.w) * vec3<f32>(_e255.g1_.x, _e258.g1_.y, _e261.g1_.z))) + ((vec3<f32>(_e267.g2_.x) * vec3<f32>(_e271.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e282.g2_.y) * vec3<f32>(_e286.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e297.g2_.z) * vec3<f32>(_e301.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e312.g1_.x, _e315.g1_.y, _e318.g1_.z) * vec3<f32>(_e322.g1_.w)) * vec3<f32>(-(1.0)))), (((((((vec3<f32>(_e332.g0_.x) * _e336.g3_) + ((vec3<f32>(_e339.g1_.y) * vec3<f32>(_e343.g1_.z, _e346.g1_.z, _e349.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e361.g1_.z) * vec3<f32>(_e365.g1_.y, _e368.g1_.x, _e371.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e383.g3_.x) * vec3<f32>(_e387.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e398.g3_.y) * vec3<f32>(_e402.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e413.g3_.z) * vec3<f32>(_e417.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e428.g1_.x) * vec3<f32>(_e432.g1_.x, _e435.g1_.z, _e438.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), (((((((((((((((vec4<f32>(_e450.g0_.x) * _e454.g4_) + ((vec4<f32>(_e457.g1_.y) * vec4<f32>(_e461.g2_.z, _e464.g2_.z, _e467.g2_.x, _e470.g3_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e484.g1_.z) * vec4<f32>(_e488.g2_.y, _e491.g2_.x, _e494.g2_.y, _e497.g3_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e511.g1_.w) * vec4<f32>(_e515.g3_.x, _e518.g3_.y, _e521.g3_.z, _e524.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e536.g2_.x) * _e540.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e552.g2_.y) * _e556.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e568.g2_.z) * _e572.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e584.g3_.x) * _e588.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e600.g3_.y) * _e604.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e616.g3_.z) * _e620.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e632.g4_.x) * vec4<f32>(_e636.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e648.g4_.y) * vec4<f32>(_e652.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e664.g4_.z) * vec4<f32>(_e668.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e680.g4_.w) * vec4<f32>(_e684.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e696.g1_.x) * vec4<f32>(_e700.g2_.x, _e703.g2_.z, _e706.g2_.y, _e709.g3_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_inner_product(self_2966: MultiVector, other_2588: MultiVector) -> MultiVector {
    var self_2967: MultiVector;
    var other_2589: MultiVector;

    self_2967 = self_2966;
    other_2589 = other_2588;
    let _e4: MultiVector = self_2967;
    let _e8: MultiVector = other_2589;
    let _e11: MultiVector = self_2967;
    let _e15: MultiVector = other_2589;
    let _e25: MultiVector = self_2967;
    let _e29: MultiVector = other_2589;
    let _e39: MultiVector = self_2967;
    let _e43: MultiVector = other_2589;
    let _e53: MultiVector = self_2967;
    let _e57: MultiVector = other_2589;
    let _e68: MultiVector = self_2967;
    let _e72: MultiVector = other_2589;
    let _e83: MultiVector = self_2967;
    let _e87: MultiVector = other_2589;
    let _e98: MultiVector = self_2967;
    let _e102: MultiVector = other_2589;
    let _e113: MultiVector = self_2967;
    let _e115: MultiVector = other_2589;
    let _e125: MultiVector = self_2967;
    let _e129: MultiVector = other_2589;
    let _e132: MultiVector = self_2967;
    let _e136: MultiVector = other_2589;
    let _e139: MultiVector = other_2589;
    let _e142: MultiVector = other_2589;
    let _e145: MultiVector = other_2589;
    let _e159: MultiVector = self_2967;
    let _e163: MultiVector = other_2589;
    let _e166: MultiVector = other_2589;
    let _e169: MultiVector = other_2589;
    let _e172: MultiVector = other_2589;
    let _e186: MultiVector = self_2967;
    let _e190: MultiVector = other_2589;
    let _e193: MultiVector = other_2589;
    let _e196: MultiVector = other_2589;
    let _e199: MultiVector = other_2589;
    let _e213: MultiVector = self_2967;
    let _e217: MultiVector = other_2589;
    let _e229: MultiVector = self_2967;
    let _e233: MultiVector = other_2589;
    let _e245: MultiVector = self_2967;
    let _e249: MultiVector = other_2589;
    let _e261: MultiVector = self_2967;
    let _e265: MultiVector = other_2589;
    let _e277: MultiVector = self_2967;
    let _e281: MultiVector = other_2589;
    let _e284: MultiVector = other_2589;
    let _e287: MultiVector = other_2589;
    let _e290: MultiVector = other_2589;
    let _e304: MultiVector = self_2967;
    let _e308: MultiVector = other_2589;
    let _e311: MultiVector = other_2589;
    let _e314: MultiVector = other_2589;
    let _e317: MultiVector = other_2589;
    let _e331: MultiVector = self_2967;
    let _e335: MultiVector = other_2589;
    let _e338: MultiVector = other_2589;
    let _e341: MultiVector = other_2589;
    let _e344: MultiVector = other_2589;
    let _e358: MultiVector = self_2967;
    let _e362: MultiVector = other_2589;
    let _e375: MultiVector = self_2967;
    let _e379: MultiVector = other_2589;
    let _e392: MultiVector = self_2967;
    let _e396: MultiVector = other_2589;
    let _e409: MultiVector = self_2967;
    let _e413: MultiVector = other_2589;
    let _e416: MultiVector = other_2589;
    let _e419: MultiVector = other_2589;
    let _e422: MultiVector = other_2589;
    let _e428: MultiVector = self_2967;
    let _e431: MultiVector = self_2967;
    let _e434: MultiVector = self_2967;
    let _e437: MultiVector = self_2967;
    let _e441: MultiVector = other_2589;
    let _e453: MultiVector = self_2967;
    let _e457: MultiVector = other_2589;
    let _e460: MultiVector = self_2967;
    let _e464: MultiVector = other_2589;
    let _e468: MultiVector = self_2967;
    let _e472: MultiVector = other_2589;
    let _e475: MultiVector = other_2589;
    let _e478: MultiVector = other_2589;
    let _e490: MultiVector = self_2967;
    let _e494: MultiVector = other_2589;
    let _e497: MultiVector = other_2589;
    let _e500: MultiVector = other_2589;
    let _e512: MultiVector = self_2967;
    let _e516: MultiVector = other_2589;
    let _e527: MultiVector = self_2967;
    let _e531: MultiVector = other_2589;
    let _e542: MultiVector = self_2967;
    let _e546: MultiVector = other_2589;
    let _e557: MultiVector = self_2967;
    let _e561: MultiVector = other_2589;
    let _e572: MultiVector = self_2967;
    let _e576: MultiVector = other_2589;
    let _e587: MultiVector = self_2967;
    let _e591: MultiVector = other_2589;
    let _e602: MultiVector = self_2967;
    let _e606: MultiVector = other_2589;
    let _e609: MultiVector = other_2589;
    let _e612: MultiVector = other_2589;
    let _e624: MultiVector = self_2967;
    let _e628: MultiVector = other_2589;
    let _e631: MultiVector = other_2589;
    let _e634: MultiVector = other_2589;
    let _e646: MultiVector = self_2967;
    let _e650: MultiVector = other_2589;
    let _e653: MultiVector = other_2589;
    let _e656: MultiVector = other_2589;
    let _e668: MultiVector = self_2967;
    let _e672: MultiVector = other_2589;
    let _e675: MultiVector = other_2589;
    let _e678: MultiVector = other_2589;
    let _e690: MultiVector = self_2967;
    let _e694: MultiVector = other_2589;
    let _e697: MultiVector = self_2967;
    let _e701: MultiVector = other_2589;
    let _e712: MultiVector = self_2967;
    let _e716: MultiVector = other_2589;
    let _e727: MultiVector = self_2967;
    let _e731: MultiVector = other_2589;
    let _e742: MultiVector = self_2967;
    let _e746: MultiVector = other_2589;
    let _e749: MultiVector = other_2589;
    let _e752: MultiVector = other_2589;
    let _e758: MultiVector = self_2967;
    let _e761: MultiVector = self_2967;
    let _e764: MultiVector = self_2967;
    let _e768: MultiVector = other_2589;
    let _e778: MultiVector = self_2967;
    let _e782: MultiVector = other_2589;
    let _e785: MultiVector = self_2967;
    let _e789: MultiVector = other_2589;
    let _e801: MultiVector = self_2967;
    let _e805: MultiVector = other_2589;
    let _e817: MultiVector = self_2967;
    let _e821: MultiVector = other_2589;
    let _e833: MultiVector = self_2967;
    let _e837: MultiVector = other_2589;
    let _e849: MultiVector = self_2967;
    let _e853: MultiVector = other_2589;
    let _e865: MultiVector = self_2967;
    let _e869: MultiVector = other_2589;
    let _e881: MultiVector = self_2967;
    let _e885: MultiVector = other_2589;
    let _e897: MultiVector = self_2967;
    let _e900: MultiVector = self_2967;
    let _e903: MultiVector = self_2967;
    let _e906: MultiVector = self_2967;
    let _e910: MultiVector = other_2589;
    return MultiVector((((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((vec2<f32>(_e11.g1_.x) * vec2<f32>(_e15.g1_.x)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.y) * vec2<f32>(_e29.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g1_.z) * vec2<f32>(_e43.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e53.g3_.x) * vec2<f32>(_e57.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e68.g3_.y) * vec2<f32>(_e72.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e83.g3_.z) * vec2<f32>(_e87.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e98.g4_.w) * vec2<f32>(_e102.g4_.w)) * vec2<f32>(-(1.0), 0.0))) + ((_e113.g0_ * vec2<f32>(_e115.g0_.x)) * vec2<f32>(0.0, 1.0))), ((((((((((((((((vec4<f32>(_e125.g0_.x) * _e129.g1_) + ((vec4<f32>(_e132.g1_.x) * vec4<f32>(_e136.g0_.x, _e139.g3_.z, _e142.g3_.y, _e145.g2_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e159.g1_.y) * vec4<f32>(_e163.g3_.z, _e166.g0_.x, _e169.g3_.x, _e172.g2_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e186.g1_.z) * vec4<f32>(_e190.g3_.y, _e193.g3_.x, _e196.g0_.x, _e199.g2_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e213.g1_.w) * vec4<f32>(_e217.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e229.g2_.x) * vec4<f32>(_e233.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e245.g2_.y) * vec4<f32>(_e249.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e261.g2_.z) * vec4<f32>(_e265.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e277.g3_.x) * vec4<f32>(_e281.g4_.w, _e284.g1_.z, _e287.g1_.y, _e290.g4_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e304.g3_.y) * vec4<f32>(_e308.g1_.z, _e311.g4_.w, _e314.g1_.x, _e317.g4_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e331.g3_.z) * vec4<f32>(_e335.g1_.y, _e338.g1_.x, _e341.g4_.w, _e344.g4_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e358.g4_.x) * vec4<f32>(_e362.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e375.g4_.y) * vec4<f32>(_e379.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e392.g4_.z) * vec4<f32>(_e396.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e409.g4_.w) * vec4<f32>(_e413.g3_.x, _e416.g3_.y, _e419.g3_.z, _e422.g0_.y))) + ((vec4<f32>(_e428.g0_.x, _e431.g0_.x, _e434.g0_.x, _e437.g0_.y) * _e441.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), ((((((((((((((vec3<f32>(_e453.g0_.x) * _e457.g2_) + (vec3<f32>(_e460.g0_.y) * _e464.g3_)) + ((vec3<f32>(_e468.g1_.y) * vec3<f32>(_e472.g4_.z, _e475.g4_.z, _e478.g4_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e490.g1_.z) * vec3<f32>(_e494.g4_.y, _e497.g4_.x, _e500.g4_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e512.g2_.x) * vec3<f32>(_e516.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e527.g2_.y) * vec3<f32>(_e531.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e542.g2_.z) * vec3<f32>(_e546.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e557.g3_.x) * vec3<f32>(_e561.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e572.g3_.y) * vec3<f32>(_e576.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e587.g3_.z) * vec3<f32>(_e591.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e602.g4_.x) * vec3<f32>(_e606.g1_.z, _e609.g1_.z, _e612.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e624.g4_.y) * vec3<f32>(_e628.g1_.z, _e631.g1_.z, _e634.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e646.g4_.z) * vec3<f32>(_e650.g1_.y, _e653.g1_.x, _e656.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e668.g1_.x) * vec3<f32>(_e672.g4_.x, _e675.g4_.z, _e678.g4_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((((((vec3<f32>(_e690.g0_.x) * _e694.g3_) + ((vec3<f32>(_e697.g3_.x) * vec3<f32>(_e701.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e712.g3_.y) * vec3<f32>(_e716.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e727.g3_.z) * vec3<f32>(_e731.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) - (vec3<f32>(_e742.g4_.w) * vec3<f32>(_e746.g1_.x, _e749.g1_.y, _e752.g1_.z))) + ((vec3<f32>(_e758.g1_.x, _e761.g1_.y, _e764.g1_.z) * vec3<f32>(_e768.g4_.w)) * vec3<f32>(-(1.0)))), (((((((((vec4<f32>(_e778.g0_.x) * _e782.g4_) + ((vec4<f32>(_e785.g1_.x) * vec4<f32>(_e789.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e801.g1_.y) * vec4<f32>(_e805.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e817.g1_.z) * vec4<f32>(_e821.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e833.g4_.x) * vec4<f32>(_e837.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e849.g4_.y) * vec4<f32>(_e853.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e865.g4_.z) * vec4<f32>(_e869.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e881.g4_.w) * vec4<f32>(_e885.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e897.g0_.y, _e900.g0_.y, _e903.g0_.y, _e906.g0_.x) * _e910.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_multi_vector_inner_anti_product(self_2968: MultiVector, other_2590: MultiVector) -> MultiVector {
    var self_2969: MultiVector;
    var other_2591: MultiVector;

    self_2969 = self_2968;
    other_2591 = other_2590;
    let _e4: MultiVector = self_2969;
    let _e8: MultiVector = other_2591;
    let _e11: MultiVector = self_2969;
    let _e15: MultiVector = other_2591;
    let _e26: MultiVector = self_2969;
    let _e30: MultiVector = other_2591;
    let _e41: MultiVector = self_2969;
    let _e45: MultiVector = other_2591;
    let _e56: MultiVector = self_2969;
    let _e60: MultiVector = other_2591;
    let _e71: MultiVector = self_2969;
    let _e75: MultiVector = other_2591;
    let _e85: MultiVector = self_2969;
    let _e89: MultiVector = other_2591;
    let _e99: MultiVector = self_2969;
    let _e103: MultiVector = other_2591;
    let _e113: MultiVector = self_2969;
    let _e117: MultiVector = other_2591;
    let _e126: MultiVector = self_2969;
    let _e130: MultiVector = other_2591;
    let _e133: MultiVector = self_2969;
    let _e137: MultiVector = other_2591;
    let _e149: MultiVector = self_2969;
    let _e153: MultiVector = other_2591;
    let _e165: MultiVector = self_2969;
    let _e169: MultiVector = other_2591;
    let _e181: MultiVector = self_2969;
    let _e185: MultiVector = other_2591;
    let _e197: MultiVector = self_2969;
    let _e201: MultiVector = other_2591;
    let _e214: MultiVector = self_2969;
    let _e218: MultiVector = other_2591;
    let _e231: MultiVector = self_2969;
    let _e235: MultiVector = other_2591;
    let _e248: MultiVector = self_2969;
    let _e252: MultiVector = other_2591;
    let _e263: MultiVector = self_2969;
    let _e267: MultiVector = other_2591;
    let _e270: MultiVector = self_2969;
    let _e274: MultiVector = other_2591;
    let _e277: MultiVector = other_2591;
    let _e280: MultiVector = other_2591;
    let _e286: MultiVector = self_2969;
    let _e290: MultiVector = other_2591;
    let _e302: MultiVector = self_2969;
    let _e306: MultiVector = other_2591;
    let _e318: MultiVector = self_2969;
    let _e322: MultiVector = other_2591;
    let _e334: MultiVector = self_2969;
    let _e336: MultiVector = other_2591;
    let _e342: MultiVector = self_2969;
    let _e346: MultiVector = other_2591;
    let _e349: MultiVector = self_2969;
    let _e353: MultiVector = other_2591;
    let _e357: MultiVector = self_2969;
    let _e361: MultiVector = other_2591;
    let _e364: MultiVector = other_2591;
    let _e367: MultiVector = other_2591;
    let _e379: MultiVector = self_2969;
    let _e383: MultiVector = other_2591;
    let _e386: MultiVector = other_2591;
    let _e389: MultiVector = other_2591;
    let _e401: MultiVector = self_2969;
    let _e405: MultiVector = other_2591;
    let _e416: MultiVector = self_2969;
    let _e420: MultiVector = other_2591;
    let _e431: MultiVector = self_2969;
    let _e435: MultiVector = other_2591;
    let _e446: MultiVector = self_2969;
    let _e450: MultiVector = other_2591;
    let _e461: MultiVector = self_2969;
    let _e465: MultiVector = other_2591;
    let _e476: MultiVector = self_2969;
    let _e480: MultiVector = other_2591;
    let _e491: MultiVector = self_2969;
    let _e495: MultiVector = other_2591;
    let _e498: MultiVector = other_2591;
    let _e501: MultiVector = other_2591;
    let _e513: MultiVector = self_2969;
    let _e517: MultiVector = other_2591;
    let _e520: MultiVector = other_2591;
    let _e523: MultiVector = other_2591;
    let _e535: MultiVector = self_2969;
    let _e539: MultiVector = other_2591;
    let _e542: MultiVector = other_2591;
    let _e545: MultiVector = other_2591;
    let _e557: MultiVector = self_2969;
    let _e561: MultiVector = other_2591;
    let _e564: MultiVector = other_2591;
    let _e567: MultiVector = other_2591;
    let _e579: MultiVector = self_2969;
    let _e583: MultiVector = other_2591;
    let _e586: MultiVector = self_2969;
    let _e590: MultiVector = other_2591;
    let _e603: MultiVector = self_2969;
    let _e607: MultiVector = other_2591;
    let _e620: MultiVector = self_2969;
    let _e624: MultiVector = other_2591;
    let _e637: MultiVector = self_2969;
    let _e641: MultiVector = other_2591;
    let _e644: MultiVector = other_2591;
    let _e647: MultiVector = other_2591;
    let _e650: MultiVector = other_2591;
    let _e663: MultiVector = self_2969;
    let _e667: MultiVector = other_2591;
    let _e670: MultiVector = other_2591;
    let _e673: MultiVector = other_2591;
    let _e676: MultiVector = other_2591;
    let _e690: MultiVector = self_2969;
    let _e694: MultiVector = other_2591;
    let _e697: MultiVector = other_2591;
    let _e700: MultiVector = other_2591;
    let _e703: MultiVector = other_2591;
    let _e717: MultiVector = self_2969;
    let _e721: MultiVector = other_2591;
    let _e724: MultiVector = other_2591;
    let _e727: MultiVector = other_2591;
    let _e730: MultiVector = other_2591;
    let _e744: MultiVector = self_2969;
    let _e748: MultiVector = other_2591;
    let _e761: MultiVector = self_2969;
    let _e765: MultiVector = other_2591;
    let _e778: MultiVector = self_2969;
    let _e782: MultiVector = other_2591;
    let _e795: MultiVector = self_2969;
    let _e799: MultiVector = other_2591;
    let _e802: MultiVector = other_2591;
    let _e805: MultiVector = other_2591;
    let _e808: MultiVector = other_2591;
    let _e821: MultiVector = self_2969;
    let _e825: MultiVector = other_2591;
    let _e828: MultiVector = other_2591;
    let _e831: MultiVector = other_2591;
    let _e834: MultiVector = other_2591;
    let _e847: MultiVector = self_2969;
    let _e851: MultiVector = other_2591;
    let _e854: MultiVector = other_2591;
    let _e857: MultiVector = other_2591;
    let _e860: MultiVector = other_2591;
    let _e873: MultiVector = self_2969;
    let _e877: MultiVector = other_2591;
    let _e889: MultiVector = self_2969;
    let _e893: MultiVector = other_2591;
    return MultiVector((((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g1_.w) * vec2<f32>(_e15.g1_.w)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e26.g2_.x) * vec2<f32>(_e30.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e41.g2_.y) * vec2<f32>(_e45.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e56.g2_.z) * vec2<f32>(_e60.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e71.g4_.x) * vec2<f32>(_e75.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e85.g4_.y) * vec2<f32>(_e89.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e99.g4_.z) * vec2<f32>(_e103.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e113.g0_.x) * _e117.g0_.yx) * vec2<f32>(1.0, 0.0))), (((((((((vec4<f32>(_e126.g0_.y) * _e130.g1_) + ((vec4<f32>(_e133.g1_.x) * vec4<f32>(_e137.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e149.g1_.y) * vec4<f32>(_e153.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e165.g1_.z) * vec4<f32>(_e169.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e181.g1_.w) * vec4<f32>(_e185.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e197.g4_.x) * vec4<f32>(_e201.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e214.g4_.y) * vec4<f32>(_e218.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e231.g4_.z) * vec4<f32>(_e235.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e248.g0_.x) * _e252.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((((((vec3<f32>(_e263.g0_.y) * _e267.g2_) - (vec3<f32>(_e270.g1_.w) * vec3<f32>(_e274.g4_.x, _e277.g4_.y, _e280.g4_.z))) + ((vec3<f32>(_e286.g4_.x) * vec3<f32>(_e290.g1_.w)) * vec3<f32>(-(1.0), 0.0, 0.0))) + ((vec3<f32>(_e302.g4_.y) * vec3<f32>(_e306.g1_.w)) * vec3<f32>(0.0, -(1.0), 0.0))) + ((vec3<f32>(_e318.g4_.z) * vec3<f32>(_e322.g1_.w)) * vec3<f32>(0.0, 0.0, -(1.0)))) + (_e334.g2_ * vec3<f32>(_e336.g0_.y))), ((((((((((((((vec3<f32>(_e342.g0_.x) * _e346.g2_) + (vec3<f32>(_e349.g0_.y) * _e353.g3_)) + ((vec3<f32>(_e357.g1_.y) * vec3<f32>(_e361.g4_.z, _e364.g4_.z, _e367.g4_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e379.g1_.z) * vec3<f32>(_e383.g4_.y, _e386.g4_.x, _e389.g4_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e401.g2_.x) * vec3<f32>(_e405.g0_.x)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e416.g2_.y) * vec3<f32>(_e420.g0_.x)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e431.g2_.z) * vec3<f32>(_e435.g0_.x)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e446.g3_.x) * vec3<f32>(_e450.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e461.g3_.y) * vec3<f32>(_e465.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e476.g3_.z) * vec3<f32>(_e480.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e491.g4_.x) * vec3<f32>(_e495.g1_.z, _e498.g1_.z, _e501.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e513.g4_.y) * vec3<f32>(_e517.g1_.z, _e520.g1_.z, _e523.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e535.g4_.z) * vec3<f32>(_e539.g1_.y, _e542.g1_.x, _e545.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e557.g1_.x) * vec3<f32>(_e561.g4_.x, _e564.g4_.z, _e567.g4_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((((((((vec4<f32>(_e579.g0_.y) * _e583.g4_) + ((vec4<f32>(_e586.g1_.x) * vec4<f32>(_e590.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e603.g1_.y) * vec4<f32>(_e607.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e620.g1_.z) * vec4<f32>(_e624.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e637.g1_.w) * vec4<f32>(_e641.g2_.x, _e644.g2_.y, _e647.g2_.z, _e650.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e663.g2_.x) * vec4<f32>(_e667.g1_.w, _e670.g4_.z, _e673.g4_.y, _e676.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e690.g2_.y) * vec4<f32>(_e694.g4_.z, _e697.g1_.w, _e700.g4_.x, _e703.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e717.g2_.z) * vec4<f32>(_e721.g4_.y, _e724.g4_.x, _e727.g1_.w, _e730.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e744.g3_.x) * vec4<f32>(_e748.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e761.g3_.y) * vec4<f32>(_e765.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e778.g3_.z) * vec4<f32>(_e782.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e795.g4_.x) * vec4<f32>(_e799.g0_.y, _e802.g2_.z, _e805.g2_.y, _e808.g3_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e821.g4_.y) * vec4<f32>(_e825.g2_.z, _e828.g0_.y, _e831.g2_.x, _e834.g3_.y)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e847.g4_.z) * vec4<f32>(_e851.g2_.y, _e854.g2_.x, _e857.g0_.y, _e860.g3_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e873.g4_.w) * vec4<f32>(_e877.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e889.g0_.x) * _e893.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_left_contraction(self_2970: MultiVector, other_2592: MultiVector) -> MultiVector {
    var self_2971: MultiVector;
    var other_2593: MultiVector;

    self_2971 = self_2970;
    other_2593 = other_2592;
    let _e4: MultiVector = self_2971;
    let _e8: MultiVector = other_2593;
    let _e11: MultiVector = self_2971;
    let _e15: MultiVector = other_2593;
    let _e25: MultiVector = self_2971;
    let _e29: MultiVector = other_2593;
    let _e39: MultiVector = self_2971;
    let _e43: MultiVector = other_2593;
    let _e54: MultiVector = self_2971;
    let _e58: MultiVector = other_2593;
    let _e69: MultiVector = self_2971;
    let _e73: MultiVector = other_2593;
    let _e84: MultiVector = self_2971;
    let _e88: MultiVector = other_2593;
    let _e99: MultiVector = self_2971;
    let _e103: MultiVector = other_2593;
    let _e113: MultiVector = self_2971;
    let _e117: MultiVector = other_2593;
    let _e120: MultiVector = self_2971;
    let _e124: MultiVector = other_2593;
    let _e127: MultiVector = other_2593;
    let _e130: MultiVector = other_2593;
    let _e133: MultiVector = other_2593;
    let _e147: MultiVector = self_2971;
    let _e151: MultiVector = other_2593;
    let _e154: MultiVector = other_2593;
    let _e157: MultiVector = other_2593;
    let _e160: MultiVector = other_2593;
    let _e174: MultiVector = self_2971;
    let _e178: MultiVector = other_2593;
    let _e190: MultiVector = self_2971;
    let _e194: MultiVector = other_2593;
    let _e206: MultiVector = self_2971;
    let _e210: MultiVector = other_2593;
    let _e222: MultiVector = self_2971;
    let _e226: MultiVector = other_2593;
    let _e238: MultiVector = self_2971;
    let _e242: MultiVector = other_2593;
    let _e245: MultiVector = other_2593;
    let _e248: MultiVector = other_2593;
    let _e251: MultiVector = other_2593;
    let _e265: MultiVector = self_2971;
    let _e269: MultiVector = other_2593;
    let _e272: MultiVector = self_2971;
    let _e276: MultiVector = other_2593;
    let _e279: MultiVector = other_2593;
    let _e282: MultiVector = other_2593;
    let _e294: MultiVector = self_2971;
    let _e298: MultiVector = other_2593;
    let _e301: MultiVector = other_2593;
    let _e304: MultiVector = other_2593;
    let _e316: MultiVector = self_2971;
    let _e320: MultiVector = other_2593;
    let _e331: MultiVector = self_2971;
    let _e335: MultiVector = other_2593;
    let _e346: MultiVector = self_2971;
    let _e350: MultiVector = other_2593;
    let _e361: MultiVector = self_2971;
    let _e365: MultiVector = other_2593;
    let _e368: MultiVector = other_2593;
    let _e371: MultiVector = other_2593;
    let _e383: MultiVector = self_2971;
    let _e387: MultiVector = other_2593;
    let _e390: MultiVector = self_2971;
    let _e393: MultiVector = self_2971;
    let _e396: MultiVector = self_2971;
    let _e400: MultiVector = other_2593;
    let _e410: MultiVector = self_2971;
    let _e414: MultiVector = other_2593;
    let _e417: MultiVector = self_2971;
    let _e420: MultiVector = other_2593;
    let _e423: MultiVector = other_2593;
    let _e426: MultiVector = other_2593;
    let _e429: MultiVector = other_2593;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.x) * _e8.g0_) + ((vec2<f32>(_e11.g1_.y) * vec2<f32>(_e15.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e25.g1_.z) * vec2<f32>(_e29.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e39.g3_.x) * vec2<f32>(_e43.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e54.g3_.y) * vec2<f32>(_e58.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e69.g3_.z) * vec2<f32>(_e73.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e84.g4_.w) * vec2<f32>(_e88.g4_.w)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e99.g1_.x) * vec2<f32>(_e103.g1_.x)) * vec2<f32>(1.0, 0.0))), ((((((((vec4<f32>(_e113.g0_.x) * _e117.g1_) + ((vec4<f32>(_e120.g1_.y) * vec4<f32>(_e124.g3_.z, _e127.g3_.z, _e130.g3_.x, _e133.g2_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e147.g1_.z) * vec4<f32>(_e151.g3_.y, _e154.g3_.x, _e157.g3_.y, _e160.g2_.z)) * vec4<f32>(1.0, -(1.0), 0.0, -(1.0)))) + ((vec4<f32>(_e174.g3_.x) * _e178.g4_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e190.g3_.y) * _e194.g4_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e206.g3_.z) * _e210.g4_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e222.g4_.w) * vec4<f32>(_e226.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e238.g1_.x) * vec4<f32>(_e242.g3_.x, _e245.g3_.z, _e248.g3_.y, _e251.g2_.x)) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))), (((((((vec3<f32>(_e265.g0_.x) * _e269.g2_) + ((vec3<f32>(_e272.g1_.y) * vec3<f32>(_e276.g4_.z, _e279.g4_.z, _e282.g4_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e294.g1_.z) * vec3<f32>(_e298.g4_.y, _e301.g4_.x, _e304.g4_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e316.g3_.x) * vec3<f32>(_e320.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e331.g3_.y) * vec3<f32>(_e335.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e346.g3_.z) * vec3<f32>(_e350.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e361.g1_.x) * vec3<f32>(_e365.g4_.x, _e368.g4_.z, _e371.g4_.y)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e383.g0_.x) * _e387.g3_) + ((vec3<f32>(_e390.g1_.x, _e393.g1_.y, _e396.g1_.z) * vec3<f32>(_e400.g4_.w)) * vec3<f32>(-(1.0)))), ((vec4<f32>(_e410.g0_.x) * _e414.g4_) + ((_e417.g1_.xyzx * vec4<f32>(_e420.g0_.y, _e423.g0_.y, _e426.g0_.y, _e429.g0_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))));
}

fn multi_vector_multi_vector_right_contraction(self_2972: MultiVector, other_2594: MultiVector) -> MultiVector {
    var self_2973: MultiVector;
    var other_2595: MultiVector;

    self_2973 = self_2972;
    other_2595 = other_2594;
    let _e4: MultiVector = self_2973;
    let _e8: MultiVector = other_2595;
    let _e17: MultiVector = self_2973;
    let _e21: MultiVector = other_2595;
    let _e31: MultiVector = self_2973;
    let _e35: MultiVector = other_2595;
    let _e45: MultiVector = self_2973;
    let _e49: MultiVector = other_2595;
    let _e60: MultiVector = self_2973;
    let _e64: MultiVector = other_2595;
    let _e75: MultiVector = self_2973;
    let _e79: MultiVector = other_2595;
    let _e90: MultiVector = self_2973;
    let _e94: MultiVector = other_2595;
    let _e105: MultiVector = self_2973;
    let _e107: MultiVector = other_2595;
    let _e113: MultiVector = self_2973;
    let _e117: MultiVector = other_2595;
    let _e128: MultiVector = self_2973;
    let _e132: MultiVector = other_2595;
    let _e144: MultiVector = self_2973;
    let _e148: MultiVector = other_2595;
    let _e160: MultiVector = self_2973;
    let _e164: MultiVector = other_2595;
    let _e176: MultiVector = self_2973;
    let _e180: MultiVector = other_2595;
    let _e192: MultiVector = self_2973;
    let _e196: MultiVector = other_2595;
    let _e208: MultiVector = self_2973;
    let _e212: MultiVector = other_2595;
    let _e224: MultiVector = self_2973;
    let _e228: MultiVector = other_2595;
    let _e240: MultiVector = self_2973;
    let _e244: MultiVector = other_2595;
    let _e256: MultiVector = self_2973;
    let _e260: MultiVector = other_2595;
    let _e272: MultiVector = self_2973;
    let _e276: MultiVector = other_2595;
    let _e289: MultiVector = self_2973;
    let _e293: MultiVector = other_2595;
    let _e306: MultiVector = self_2973;
    let _e310: MultiVector = other_2595;
    let _e323: MultiVector = self_2973;
    let _e327: MultiVector = other_2595;
    let _e330: MultiVector = other_2595;
    let _e333: MultiVector = other_2595;
    let _e336: MultiVector = other_2595;
    let _e348: MultiVector = self_2973;
    let _e351: MultiVector = self_2973;
    let _e354: MultiVector = self_2973;
    let _e357: MultiVector = self_2973;
    let _e361: MultiVector = other_2595;
    let _e373: MultiVector = self_2973;
    let _e377: MultiVector = other_2595;
    let _e380: MultiVector = self_2973;
    let _e384: MultiVector = other_2595;
    let _e387: MultiVector = other_2595;
    let _e390: MultiVector = other_2595;
    let _e402: MultiVector = self_2973;
    let _e406: MultiVector = other_2595;
    let _e409: MultiVector = other_2595;
    let _e412: MultiVector = other_2595;
    let _e424: MultiVector = self_2973;
    let _e428: MultiVector = other_2595;
    let _e431: MultiVector = other_2595;
    let _e434: MultiVector = other_2595;
    let _e446: MultiVector = self_2973;
    let _e448: MultiVector = other_2595;
    let _e456: MultiVector = self_2973;
    let _e460: MultiVector = other_2595;
    let _e463: MultiVector = other_2595;
    let _e466: MultiVector = other_2595;
    let _e472: MultiVector = self_2973;
    let _e474: MultiVector = other_2595;
    let _e480: MultiVector = self_2973;
    let _e484: MultiVector = other_2595;
    let _e495: MultiVector = self_2973;
    let _e499: MultiVector = other_2595;
    let _e511: MultiVector = self_2973;
    let _e515: MultiVector = other_2595;
    let _e527: MultiVector = self_2973;
    let _e531: MultiVector = other_2595;
    let _e543: MultiVector = self_2973;
    let _e546: MultiVector = self_2973;
    let _e549: MultiVector = self_2973;
    let _e552: MultiVector = self_2973;
    let _e556: MultiVector = other_2595;
    return MultiVector((((((((((vec2<f32>(_e4.g1_.x) * vec2<f32>(_e8.g1_.x)) * vec2<f32>(1.0, 0.0)) + ((vec2<f32>(_e17.g1_.y) * vec2<f32>(_e21.g1_.y)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e31.g1_.z) * vec2<f32>(_e35.g1_.z)) * vec2<f32>(1.0, 0.0))) + ((vec2<f32>(_e45.g3_.x) * vec2<f32>(_e49.g3_.x)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e60.g3_.y) * vec2<f32>(_e64.g3_.y)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e75.g3_.z) * vec2<f32>(_e79.g3_.z)) * vec2<f32>(-(1.0), 0.0))) + ((vec2<f32>(_e90.g4_.w) * vec2<f32>(_e94.g4_.w)) * vec2<f32>(-(1.0), 0.0))) + (_e105.g0_ * vec2<f32>(_e107.g0_.x))), ((((((((((((((((vec4<f32>(_e113.g1_.x) * vec4<f32>(_e117.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e128.g1_.y) * vec4<f32>(_e132.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e144.g1_.z) * vec4<f32>(_e148.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e160.g1_.w) * vec4<f32>(_e164.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e176.g2_.x) * vec4<f32>(_e180.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e192.g2_.y) * vec4<f32>(_e196.g1_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e208.g2_.z) * vec4<f32>(_e212.g1_.z)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e224.g3_.x) * _e228.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e240.g3_.y) * _e244.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e256.g3_.z) * _e260.g1_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e272.g4_.x) * vec4<f32>(_e276.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e289.g4_.y) * vec4<f32>(_e293.g3_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e306.g4_.z) * vec4<f32>(_e310.g3_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e323.g4_.w) * vec4<f32>(_e327.g3_.x, _e330.g3_.y, _e333.g3_.z, _e336.g3_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e348.g0_.x, _e351.g0_.x, _e354.g0_.x, _e357.g0_.y) * _e361.g4_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))), (((((vec3<f32>(_e373.g0_.y) * _e377.g3_) + ((vec3<f32>(_e380.g4_.x) * vec3<f32>(_e384.g1_.z, _e387.g1_.z, _e390.g1_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))) + ((vec3<f32>(_e402.g4_.y) * vec3<f32>(_e406.g1_.z, _e409.g1_.z, _e412.g1_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e424.g4_.z) * vec3<f32>(_e428.g1_.y, _e431.g1_.x, _e434.g1_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + (_e446.g2_ * vec3<f32>(_e448.g0_.x))), ((vec3<f32>(0.0) - (vec3<f32>(_e456.g4_.w) * vec3<f32>(_e460.g1_.x, _e463.g1_.y, _e466.g1_.z))) + (_e472.g3_ * vec3<f32>(_e474.g0_.x))), ((((((vec4<f32>(_e480.g4_.x) * vec4<f32>(_e484.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e495.g4_.y) * vec4<f32>(_e499.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e511.g4_.z) * vec4<f32>(_e515.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e527.g4_.w) * vec4<f32>(_e531.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e543.g0_.y, _e546.g0_.y, _e549.g0_.y, _e552.g0_.x) * _e556.g1_.xyzx) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))));
}

fn multi_vector_multi_vector_left_anti_contraction(self_2974: MultiVector, other_2596: MultiVector) -> MultiVector {
    var self_2975: MultiVector;
    var other_2597: MultiVector;

    self_2975 = self_2974;
    other_2597 = other_2596;
    let _e4: MultiVector = self_2975;
    let _e8: MultiVector = other_2597;
    let _e11: MultiVector = self_2975;
    let _e15: MultiVector = other_2597;
    let _e26: MultiVector = self_2975;
    let _e30: MultiVector = other_2597;
    let _e41: MultiVector = self_2975;
    let _e45: MultiVector = other_2597;
    let _e56: MultiVector = self_2975;
    let _e60: MultiVector = other_2597;
    let _e70: MultiVector = self_2975;
    let _e74: MultiVector = other_2597;
    let _e84: MultiVector = self_2975;
    let _e88: MultiVector = other_2597;
    let _e98: MultiVector = self_2975;
    let _e101: MultiVector = self_2975;
    let _e105: MultiVector = other_2597;
    let _e108: MultiVector = other_2597;
    let _e119: MultiVector = self_2975;
    let _e123: MultiVector = other_2597;
    let _e126: MultiVector = self_2975;
    let _e129: MultiVector = other_2597;
    let _e144: MultiVector = self_2975;
    let _e148: MultiVector = other_2597;
    let _e151: MultiVector = self_2975;
    let _e154: MultiVector = self_2975;
    let _e157: MultiVector = self_2975;
    let _e161: MultiVector = other_2597;
    let _e171: MultiVector = self_2975;
    let _e175: MultiVector = other_2597;
    let _e178: MultiVector = self_2975;
    let _e182: MultiVector = other_2597;
    let _e185: MultiVector = other_2597;
    let _e188: MultiVector = other_2597;
    let _e200: MultiVector = self_2975;
    let _e204: MultiVector = other_2597;
    let _e207: MultiVector = other_2597;
    let _e210: MultiVector = other_2597;
    let _e222: MultiVector = self_2975;
    let _e226: MultiVector = other_2597;
    let _e229: MultiVector = other_2597;
    let _e232: MultiVector = other_2597;
    let _e244: MultiVector = self_2975;
    let _e246: MultiVector = other_2597;
    let _e252: MultiVector = self_2975;
    let _e256: MultiVector = other_2597;
    let _e259: MultiVector = self_2975;
    let _e263: MultiVector = other_2597;
    let _e275: MultiVector = self_2975;
    let _e279: MultiVector = other_2597;
    let _e291: MultiVector = self_2975;
    let _e295: MultiVector = other_2597;
    let _e307: MultiVector = self_2975;
    let _e311: MultiVector = other_2597;
    let _e314: MultiVector = other_2597;
    let _e317: MultiVector = other_2597;
    let _e320: MultiVector = other_2597;
    let _e333: MultiVector = self_2975;
    let _e337: MultiVector = other_2597;
    let _e340: MultiVector = other_2597;
    let _e343: MultiVector = other_2597;
    let _e346: MultiVector = other_2597;
    let _e359: MultiVector = self_2975;
    let _e363: MultiVector = other_2597;
    let _e366: MultiVector = other_2597;
    let _e369: MultiVector = other_2597;
    let _e372: MultiVector = other_2597;
    let _e385: MultiVector = self_2975;
    let _e388: MultiVector = other_2597;
    return MultiVector(((((((((vec2<f32>(_e4.g0_.y) * _e8.g0_) + ((vec2<f32>(_e11.g2_.x) * vec2<f32>(_e15.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e26.g2_.y) * vec2<f32>(_e30.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e41.g2_.z) * vec2<f32>(_e45.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e56.g4_.x) * vec2<f32>(_e60.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e70.g4_.y) * vec2<f32>(_e74.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e84.g4_.z) * vec2<f32>(_e88.g4_.z)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e98.g1_.x, _e101.g1_.w) * vec2<f32>(_e105.g1_.x, _e108.g1_.w)) * vec2<f32>(0.0, -(1.0)))), ((vec4<f32>(_e119.g0_.y) * _e123.g1_) + ((_e126.g4_.xyzx * vec4<f32>(_e129.g0_.x)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 0.0))), ((vec3<f32>(_e144.g0_.y) * _e148.g2_) + ((vec3<f32>(_e151.g4_.x, _e154.g4_.y, _e157.g4_.z) * vec3<f32>(_e161.g1_.w)) * vec3<f32>(-(1.0)))), (((((vec3<f32>(_e171.g0_.y) * _e175.g3_) + ((vec3<f32>(_e178.g4_.x) * vec3<f32>(_e182.g1_.z, _e185.g1_.z, _e188.g1_.y)) * vec3<f32>(0.0, -(1.0), 1.0))) + ((vec3<f32>(_e200.g4_.y) * vec3<f32>(_e204.g1_.z, _e207.g1_.z, _e210.g1_.x)) * vec3<f32>(1.0, 0.0, -(1.0)))) + ((vec3<f32>(_e222.g4_.z) * vec3<f32>(_e226.g1_.y, _e229.g1_.x, _e232.g1_.y)) * vec3<f32>(-(1.0), 1.0, 0.0))) + (_e244.g2_ * vec3<f32>(_e246.g0_.x))), ((((((((vec4<f32>(_e252.g0_.y) * _e256.g4_) + ((vec4<f32>(_e259.g2_.x) * _e263.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e275.g2_.y) * _e279.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e291.g2_.z) * _e295.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e307.g4_.x) * vec4<f32>(_e311.g2_.z, _e314.g2_.z, _e317.g2_.y, _e320.g3_.x)) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e333.g4_.y) * vec4<f32>(_e337.g2_.z, _e340.g2_.z, _e343.g2_.x, _e346.g3_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e359.g4_.z) * vec4<f32>(_e363.g2_.y, _e366.g2_.x, _e369.g2_.y, _e372.g3_.z)) * vec4<f32>(-(1.0), 1.0, 0.0, 1.0))) + ((_e385.g1_.xxxw * vec4<f32>(_e388.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))));
}

fn multi_vector_multi_vector_right_anti_contraction(self_2976: MultiVector, other_2598: MultiVector) -> MultiVector {
    var self_2977: MultiVector;
    var other_2599: MultiVector;

    self_2977 = self_2976;
    other_2599 = other_2598;
    let _e4: MultiVector = self_2977;
    let _e8: MultiVector = other_2599;
    let _e18: MultiVector = self_2977;
    let _e22: MultiVector = other_2599;
    let _e33: MultiVector = self_2977;
    let _e37: MultiVector = other_2599;
    let _e48: MultiVector = self_2977;
    let _e52: MultiVector = other_2599;
    let _e63: MultiVector = self_2977;
    let _e67: MultiVector = other_2599;
    let _e77: MultiVector = self_2977;
    let _e81: MultiVector = other_2599;
    let _e91: MultiVector = self_2977;
    let _e95: MultiVector = other_2599;
    let _e105: MultiVector = self_2977;
    let _e107: MultiVector = other_2599;
    let _e113: MultiVector = self_2977;
    let _e117: MultiVector = other_2599;
    let _e128: MultiVector = self_2977;
    let _e132: MultiVector = other_2599;
    let _e144: MultiVector = self_2977;
    let _e148: MultiVector = other_2599;
    let _e160: MultiVector = self_2977;
    let _e164: MultiVector = other_2599;
    let _e176: MultiVector = self_2977;
    let _e180: MultiVector = other_2599;
    let _e193: MultiVector = self_2977;
    let _e197: MultiVector = other_2599;
    let _e200: MultiVector = other_2599;
    let _e203: MultiVector = other_2599;
    let _e209: MultiVector = self_2977;
    let _e211: MultiVector = other_2599;
    let _e217: MultiVector = self_2977;
    let _e221: MultiVector = other_2599;
    let _e224: MultiVector = self_2977;
    let _e228: MultiVector = other_2599;
    let _e231: MultiVector = other_2599;
    let _e234: MultiVector = other_2599;
    let _e246: MultiVector = self_2977;
    let _e250: MultiVector = other_2599;
    let _e253: MultiVector = other_2599;
    let _e256: MultiVector = other_2599;
    let _e268: MultiVector = self_2977;
    let _e272: MultiVector = other_2599;
    let _e283: MultiVector = self_2977;
    let _e287: MultiVector = other_2599;
    let _e298: MultiVector = self_2977;
    let _e302: MultiVector = other_2599;
    let _e313: MultiVector = self_2977;
    let _e317: MultiVector = other_2599;
    let _e320: MultiVector = other_2599;
    let _e323: MultiVector = other_2599;
    let _e335: MultiVector = self_2977;
    let _e339: MultiVector = other_2599;
    let _e351: MultiVector = self_2977;
    let _e355: MultiVector = other_2599;
    let _e368: MultiVector = self_2977;
    let _e372: MultiVector = other_2599;
    let _e385: MultiVector = self_2977;
    let _e389: MultiVector = other_2599;
    let _e392: MultiVector = other_2599;
    let _e395: MultiVector = other_2599;
    let _e398: MultiVector = other_2599;
    let _e410: MultiVector = self_2977;
    let _e414: MultiVector = other_2599;
    let _e426: MultiVector = self_2977;
    let _e430: MultiVector = other_2599;
    let _e442: MultiVector = self_2977;
    let _e446: MultiVector = other_2599;
    let _e458: MultiVector = self_2977;
    let _e462: MultiVector = other_2599;
    let _e475: MultiVector = self_2977;
    let _e479: MultiVector = other_2599;
    let _e492: MultiVector = self_2977;
    let _e496: MultiVector = other_2599;
    let _e509: MultiVector = self_2977;
    let _e513: MultiVector = other_2599;
    let _e525: MultiVector = self_2977;
    let _e529: MultiVector = other_2599;
    let _e541: MultiVector = self_2977;
    let _e545: MultiVector = other_2599;
    let _e557: MultiVector = self_2977;
    let _e561: MultiVector = other_2599;
    let _e573: MultiVector = self_2977;
    let _e577: MultiVector = other_2599;
    return MultiVector((((((((((vec2<f32>(_e4.g1_.w) * vec2<f32>(_e8.g1_.w)) * vec2<f32>(0.0, -(1.0))) + ((vec2<f32>(_e18.g2_.x) * vec2<f32>(_e22.g2_.x)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e33.g2_.y) * vec2<f32>(_e37.g2_.y)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e48.g2_.z) * vec2<f32>(_e52.g2_.z)) * vec2<f32>(0.0, -(1.0)))) + ((vec2<f32>(_e63.g4_.x) * vec2<f32>(_e67.g4_.x)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e77.g4_.y) * vec2<f32>(_e81.g4_.y)) * vec2<f32>(0.0, 1.0))) + ((vec2<f32>(_e91.g4_.z) * vec2<f32>(_e95.g4_.z)) * vec2<f32>(0.0, 1.0))) + (_e105.g0_ * vec2<f32>(_e107.g0_.y))), ((((((vec4<f32>(_e113.g1_.x) * vec4<f32>(_e117.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e128.g1_.y) * vec4<f32>(_e132.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e144.g1_.z) * vec4<f32>(_e148.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e160.g1_.w) * vec4<f32>(_e164.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e176.g0_.x) * _e180.g4_.xyzx) * vec4<f32>(1.0, 1.0, 1.0, 0.0))), ((vec3<f32>(0.0) - (vec3<f32>(_e193.g1_.w) * vec3<f32>(_e197.g4_.x, _e200.g4_.y, _e203.g4_.z))) + (_e209.g2_ * vec3<f32>(_e211.g0_.y))), (((((((vec3<f32>(_e217.g0_.x) * _e221.g2_) + ((vec3<f32>(_e224.g1_.y) * vec3<f32>(_e228.g4_.z, _e231.g4_.z, _e234.g4_.x)) * vec3<f32>(-(1.0), 0.0, 1.0))) + ((vec3<f32>(_e246.g1_.z) * vec3<f32>(_e250.g4_.y, _e253.g4_.x, _e256.g4_.y)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e268.g3_.x) * vec3<f32>(_e272.g0_.y)) * vec3<f32>(1.0, 0.0, 0.0))) + ((vec3<f32>(_e283.g3_.y) * vec3<f32>(_e287.g0_.y)) * vec3<f32>(0.0, 1.0, 0.0))) + ((vec3<f32>(_e298.g3_.z) * vec3<f32>(_e302.g0_.y)) * vec3<f32>(0.0, 0.0, 1.0))) + ((vec3<f32>(_e313.g1_.x) * vec3<f32>(_e317.g4_.x, _e320.g4_.z, _e323.g4_.y)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((((((((((((((((vec4<f32>(_e335.g1_.x) * vec4<f32>(_e339.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0))) + ((vec4<f32>(_e351.g1_.y) * vec4<f32>(_e355.g2_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e368.g1_.z) * vec4<f32>(_e372.g2_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e385.g1_.w) * vec4<f32>(_e389.g2_.x, _e392.g2_.y, _e395.g2_.z, _e398.g2_.x)) * vec4<f32>(1.0, 1.0, 1.0, 0.0))) + ((vec4<f32>(_e410.g2_.x) * _e414.g4_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e426.g2_.y) * _e430.g4_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e442.g2_.z) * _e446.g4_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e458.g3_.x) * vec4<f32>(_e462.g4_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e475.g3_.y) * vec4<f32>(_e479.g4_.y)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e492.g3_.z) * vec4<f32>(_e496.g4_.z)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e509.g4_.x) * vec4<f32>(_e513.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e525.g4_.y) * vec4<f32>(_e529.g0_.y)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e541.g4_.z) * vec4<f32>(_e545.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e557.g4_.w) * vec4<f32>(_e561.g0_.y)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e573.g0_.x) * _e577.g1_.xxxw) * vec4<f32>(0.0, 0.0, 0.0, 1.0))));
}

fn multi_vector_multi_vector_scalar_product(self_2978: MultiVector, other_2600: MultiVector) -> Scalar {
    var self_2979: MultiVector;
    var other_2601: MultiVector;

    self_2979 = self_2978;
    other_2601 = other_2600;
    let _e4: MultiVector = self_2979;
    let _e7: MultiVector = other_2601;
    let _e11: MultiVector = self_2979;
    let _e14: MultiVector = other_2601;
    let _e19: MultiVector = self_2979;
    let _e22: MultiVector = other_2601;
    let _e27: MultiVector = self_2979;
    let _e30: MultiVector = other_2601;
    let _e35: MultiVector = self_2979;
    let _e38: MultiVector = other_2601;
    let _e43: MultiVector = self_2979;
    let _e46: MultiVector = other_2601;
    let _e51: MultiVector = self_2979;
    let _e54: MultiVector = other_2601;
    let _e59: MultiVector = self_2979;
    let _e62: MultiVector = other_2601;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g1_.x * _e14.g1_.x)) + (_e19.g1_.y * _e22.g1_.y)) + (_e27.g1_.z * _e30.g1_.z)) - (_e35.g3_.x * _e38.g3_.x)) - (_e43.g3_.y * _e46.g3_.y)) - (_e51.g3_.z * _e54.g3_.z)) - (_e59.g4_.w * _e62.g4_.w)));
}

fn multi_vector_multi_vector_dot(self_2980: MultiVector, other_2602: MultiVector) -> Scalar {
    var self_2981: MultiVector;
    var other_2603: MultiVector;

    self_2981 = self_2980;
    other_2603 = other_2602;
    let _e4: MultiVector = self_2981;
    let _e7: MultiVector = other_2603;
    let _e11: MultiVector = self_2981;
    let _e14: MultiVector = other_2603;
    let _e19: MultiVector = self_2981;
    let _e22: MultiVector = other_2603;
    let _e27: MultiVector = self_2981;
    let _e30: MultiVector = other_2603;
    let _e35: MultiVector = self_2981;
    let _e38: MultiVector = other_2603;
    let _e43: MultiVector = self_2981;
    let _e46: MultiVector = other_2603;
    let _e51: MultiVector = self_2981;
    let _e54: MultiVector = other_2603;
    let _e59: MultiVector = self_2981;
    let _e62: MultiVector = other_2603;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g1_.x * _e14.g1_.x)) + (_e19.g1_.y * _e22.g1_.y)) + (_e27.g1_.z * _e30.g1_.z)) - (_e35.g3_.x * _e38.g3_.x)) - (_e43.g3_.y * _e46.g3_.y)) - (_e51.g3_.z * _e54.g3_.z)) - (_e59.g4_.w * _e62.g4_.w)));
}

fn multi_vector_multi_vector_anti_scalar_product(self_2982: MultiVector, other_2604: MultiVector) -> AntiScalar {
    var self_2983: MultiVector;
    var other_2605: MultiVector;

    self_2983 = self_2982;
    other_2605 = other_2604;
    let _e4: MultiVector = self_2983;
    let _e7: MultiVector = other_2605;
    let _e11: MultiVector = self_2983;
    let _e14: MultiVector = other_2605;
    let _e19: MultiVector = self_2983;
    let _e22: MultiVector = other_2605;
    let _e27: MultiVector = self_2983;
    let _e30: MultiVector = other_2605;
    let _e35: MultiVector = self_2983;
    let _e38: MultiVector = other_2605;
    let _e43: MultiVector = self_2983;
    let _e46: MultiVector = other_2605;
    let _e51: MultiVector = self_2983;
    let _e54: MultiVector = other_2605;
    let _e59: MultiVector = self_2983;
    let _e62: MultiVector = other_2605;
    return AntiScalar(((((((((_e4.g0_.y * _e7.g0_.y) - (_e11.g1_.w * _e14.g1_.w)) - (_e19.g2_.x * _e22.g2_.x)) - (_e27.g2_.y * _e30.g2_.y)) - (_e35.g2_.z * _e38.g2_.z)) + (_e43.g4_.x * _e46.g4_.x)) + (_e51.g4_.y * _e54.g4_.y)) + (_e59.g4_.z * _e62.g4_.z)));
}

fn multi_vector_multi_vector_anti_dot(self_2984: MultiVector, other_2606: MultiVector) -> AntiScalar {
    var self_2985: MultiVector;
    var other_2607: MultiVector;

    self_2985 = self_2984;
    other_2607 = other_2606;
    let _e4: MultiVector = self_2985;
    let _e7: MultiVector = other_2607;
    let _e11: MultiVector = self_2985;
    let _e14: MultiVector = other_2607;
    let _e19: MultiVector = self_2985;
    let _e22: MultiVector = other_2607;
    let _e27: MultiVector = self_2985;
    let _e30: MultiVector = other_2607;
    let _e35: MultiVector = self_2985;
    let _e38: MultiVector = other_2607;
    let _e43: MultiVector = self_2985;
    let _e46: MultiVector = other_2607;
    let _e51: MultiVector = self_2985;
    let _e54: MultiVector = other_2607;
    let _e59: MultiVector = self_2985;
    let _e62: MultiVector = other_2607;
    return AntiScalar(((((((((_e4.g0_.y * _e7.g0_.y) - (_e11.g1_.w * _e14.g1_.w)) - (_e19.g2_.x * _e22.g2_.x)) - (_e27.g2_.y * _e30.g2_.y)) - (_e35.g2_.z * _e38.g2_.z)) + (_e43.g4_.x * _e46.g4_.x)) + (_e51.g4_.y * _e54.g4_.y)) + (_e59.g4_.z * _e62.g4_.z)));
}

fn multi_vector_squared_magnitude(self_2986: MultiVector) -> Scalar {
    var self_2987: MultiVector;

    self_2987 = self_2986;
    let _e2: MultiVector = self_2987;
    let _e3: MultiVector = self_2987;
    let _e4: MultiVector = multi_vector_reversal(_e3);
    let _e5: Scalar = multi_vector_multi_vector_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_magnitude(self_2988: MultiVector) -> Scalar {
    var self_2989: MultiVector;

    self_2989 = self_2988;
    let _e2: MultiVector = self_2989;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_bulk_norm(self_2990: MultiVector) -> Scalar {
    var self_2991: MultiVector;

    self_2991 = self_2990;
    let _e2: MultiVector = self_2991;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_squared_anti_magnitude(self_2992: MultiVector) -> AntiScalar {
    var self_2993: MultiVector;

    self_2993 = self_2992;
    let _e2: MultiVector = self_2993;
    let _e3: MultiVector = self_2993;
    let _e4: MultiVector = multi_vector_anti_reversal(_e3);
    let _e5: AntiScalar = multi_vector_multi_vector_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_weight_norm(self_2994: MultiVector) -> AntiScalar {
    var self_2995: MultiVector;

    self_2995 = self_2994;
    let _e2: MultiVector = self_2995;
    let _e3: AntiScalar = multi_vector_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn multi_vector_geometric_norm(self_2996: MultiVector) -> HomogeneousMagnitude {
    var self_2997: MultiVector;

    self_2997 = self_2996;
    let _e2: MultiVector = self_2997;
    let _e3: Scalar = multi_vector_bulk_norm(_e2);
    let _e4: MultiVector = self_2997;
    let _e5: AntiScalar = multi_vector_weight_norm(_e4);
    let _e6: HomogeneousMagnitude = scalar_anti_scalar_add(_e3, _e5);
    return _e6;
}

fn multi_vector_scale(self_2998: MultiVector, other_2608: f32) -> MultiVector {
    var self_2999: MultiVector;
    var other_2609: f32;

    self_2999 = self_2998;
    other_2609 = other_2608;
    let _e4: MultiVector = self_2999;
    let _e5: f32 = other_2609;
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn multi_vector_signum(self_3000: MultiVector) -> MultiVector {
    var self_3001: MultiVector;

    self_3001 = self_3000;
    let _e2: MultiVector = self_3001;
    let _e3: MultiVector = self_3001;
    let _e4: Scalar = multi_vector_magnitude(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_inverse(self_3002: MultiVector) -> MultiVector {
    var self_3003: MultiVector;

    self_3003 = self_3002;
    let _e2: MultiVector = self_3003;
    let _e3: MultiVector = multi_vector_reversal(_e2);
    let _e4: MultiVector = self_3003;
    let _e5: Scalar = multi_vector_squared_magnitude(_e4);
    let _e10: MultiVector = multi_vector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn multi_vector_unitize(self_3004: MultiVector) -> MultiVector {
    var self_3005: MultiVector;

    self_3005 = self_3004;
    let _e2: MultiVector = self_3005;
    let _e3: MultiVector = self_3005;
    let _e4: AntiScalar = multi_vector_weight_norm(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn anti_scalar_homogeneous_magnitude_geometric_quotient(self_3006: AntiScalar, other_2610: HomogeneousMagnitude) -> AntiScalar {
    var self_3007: AntiScalar;
    var other_2611: HomogeneousMagnitude;

    self_3007 = self_3006;
    other_2611 = other_2610;
    let _e4: AntiScalar = self_3007;
    let _e5: HomogeneousMagnitude = other_2611;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_scalar_geometric_quotient(self_3008: AntiScalar, other_2612: Scalar) -> AntiScalar {
    var self_3009: AntiScalar;
    var other_2613: Scalar;

    self_3009 = self_3008;
    other_2613 = other_2612;
    let _e4: AntiScalar = self_3009;
    let _e5: Scalar = other_2613;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_homogeneous_magnitude_geometric_quotient(self_3010: Flector, other_2614: HomogeneousMagnitude) -> Flector {
    var self_3011: Flector;
    var other_2615: HomogeneousMagnitude;

    self_3011 = self_3010;
    other_2615 = other_2614;
    let _e4: Flector = self_3011;
    let _e5: HomogeneousMagnitude = other_2615;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Flector = flector_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_line_geometric_quotient(self_3012: Flector, other_2616: Line) -> Flector {
    var self_3013: Flector;
    var other_2617: Line;

    self_3013 = self_3012;
    other_2617 = other_2616;
    let _e4: Flector = self_3013;
    let _e5: Line = other_2617;
    let _e6: Line = line_inverse(_e5);
    let _e7: Flector = flector_line_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_motor_geometric_quotient(self_3014: Flector, other_2618: Motor) -> Flector {
    var self_3015: Flector;
    var other_2619: Motor;

    self_3015 = self_3014;
    other_2619 = other_2618;
    let _e4: Flector = self_3015;
    let _e5: Motor = other_2619;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Flector = flector_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_multi_vector_geometric_quotient(self_3016: Flector, other_2620: MultiVector) -> MultiVector {
    var self_3017: Flector;
    var other_2621: MultiVector;

    self_3017 = self_3016;
    other_2621 = other_2620;
    let _e4: Flector = self_3017;
    let _e5: MultiVector = other_2621;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = flector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_multi_vector_transformation(self_3018: Flector, other_2622: MultiVector) -> MultiVector {
    var self_3019: Flector;
    var other_2623: MultiVector;

    self_3019 = self_3018;
    other_2623 = other_2622;
    let _e4: Flector = self_3019;
    let _e5: MultiVector = other_2623;
    let _e6: MultiVector = flector_multi_vector_geometric_product(_e4, _e5);
    let _e7: Flector = self_3019;
    let _e8: Flector = flector_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_product(_e6, _e8);
    return _e9;
}

fn flector_scalar_geometric_quotient(self_3020: Flector, other_2624: Scalar) -> Flector {
    var self_3021: Flector;
    var other_2625: Scalar;

    self_3021 = self_3020;
    other_2625 = other_2624;
    let _e4: Flector = self_3021;
    let _e5: Scalar = other_2625;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Flector = flector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn flector_translator_geometric_quotient(self_3022: Flector, other_2626: Translator) -> Flector {
    var self_3023: Flector;
    var other_2627: Translator;

    self_3023 = self_3022;
    other_2627 = other_2626;
    let _e4: Flector = self_3023;
    let _e5: Translator = other_2627;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Flector = flector_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_anti_scalar_transformation(self_3024: HomogeneousMagnitude, other_2628: AntiScalar) -> AntiScalar {
    var self_3025: HomogeneousMagnitude;
    var other_2629: AntiScalar;

    self_3025 = self_3024;
    other_2629 = other_2628;
    let _e4: HomogeneousMagnitude = self_3025;
    let _e5: AntiScalar = other_2629;
    let _e6: AntiScalar = homogeneous_magnitude_anti_scalar_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3025;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_flector_geometric_quotient(self_3026: HomogeneousMagnitude, other_2630: Flector) -> Flector {
    var self_3027: HomogeneousMagnitude;
    var other_2631: Flector;

    self_3027 = self_3026;
    other_2631 = other_2630;
    let _e4: HomogeneousMagnitude = self_3027;
    let _e5: Flector = other_2631;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = homogeneous_magnitude_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_flector_transformation(self_3028: HomogeneousMagnitude, other_2632: Flector) -> Flector {
    var self_3029: HomogeneousMagnitude;
    var other_2633: Flector;

    self_3029 = self_3028;
    other_2633 = other_2632;
    let _e4: HomogeneousMagnitude = self_3029;
    let _e5: Flector = other_2633;
    let _e6: Flector = homogeneous_magnitude_flector_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3029;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_powi(self_3030: HomogeneousMagnitude, exponent: i32) -> HomogeneousMagnitude {
    var self_3031: HomogeneousMagnitude;
    var exponent_1: i32;
    var local: HomogeneousMagnitude;
    var x: HomogeneousMagnitude;
    var y: HomogeneousMagnitude;
    var n: i32;

    self_3031 = self_3030;
    exponent_1 = exponent;
    let _e4: i32 = exponent_1;
    if (_e4 == 0) {
        {
            let _e7: HomogeneousMagnitude = homogeneous_magnitude_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_1;
    if (_e8 < 0) {
        let _e11: HomogeneousMagnitude = self_3031;
        let _e12: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e11);
        local = _e12;
    } else {
        let _e14: HomogeneousMagnitude = self_3031;
        local = _e14;
    }
    let _e15: HomogeneousMagnitude = local;
    x = _e15;
    let _e17: HomogeneousMagnitude = homogeneous_magnitude_one();
    y = _e17;
    let _e19: i32 = exponent_1;
    n = abs(_e19);
    loop {
        let _e23: i32 = n;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: HomogeneousMagnitude = x;
                    let _e32: HomogeneousMagnitude = y;
                    let _e33: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e31, _e32);
                    y = _e33;
                }
            }
            let _e34: HomogeneousMagnitude = x;
            let _e35: HomogeneousMagnitude = x;
            let _e36: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e34, _e35);
            x = _e36;
            let _e37: i32 = n;
            n = (_e37 >> u32(1));
        }
    }
    let _e41: HomogeneousMagnitude = x;
    let _e42: HomogeneousMagnitude = y;
    let _e43: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e41, _e42);
    return _e43;
}

fn homogeneous_magnitude_homogeneous_magnitude_geometric_quotient(self_3032: HomogeneousMagnitude, other_2634: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3033: HomogeneousMagnitude;
    var other_2635: HomogeneousMagnitude;

    self_3033 = self_3032;
    other_2635 = other_2634;
    let _e4: HomogeneousMagnitude = self_3033;
    let _e5: HomogeneousMagnitude = other_2635;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_homogeneous_magnitude_transformation(self_3034: HomogeneousMagnitude, other_2636: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3035: HomogeneousMagnitude;
    var other_2637: HomogeneousMagnitude;

    self_3035 = self_3034;
    other_2637 = other_2636;
    let _e4: HomogeneousMagnitude = self_3035;
    let _e5: HomogeneousMagnitude = other_2637;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3035;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_line_geometric_quotient(self_3036: HomogeneousMagnitude, other_2638: Line) -> Line {
    var self_3037: HomogeneousMagnitude;
    var other_2639: Line;

    self_3037 = self_3036;
    other_2639 = other_2638;
    let _e4: HomogeneousMagnitude = self_3037;
    let _e5: Line = other_2639;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = homogeneous_magnitude_line_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_line_transformation(self_3038: HomogeneousMagnitude, other_2640: Line) -> Line {
    var self_3039: HomogeneousMagnitude;
    var other_2641: Line;

    self_3039 = self_3038;
    other_2641 = other_2640;
    let _e4: HomogeneousMagnitude = self_3039;
    let _e5: Line = other_2641;
    let _e6: Line = homogeneous_magnitude_line_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3039;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Line = line_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_motor_geometric_quotient(self_3040: HomogeneousMagnitude, other_2642: Motor) -> Motor {
    var self_3041: HomogeneousMagnitude;
    var other_2643: Motor;

    self_3041 = self_3040;
    other_2643 = other_2642;
    let _e4: HomogeneousMagnitude = self_3041;
    let _e5: Motor = other_2643;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = homogeneous_magnitude_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_motor_transformation(self_3042: HomogeneousMagnitude, other_2644: Motor) -> Motor {
    var self_3043: HomogeneousMagnitude;
    var other_2645: Motor;

    self_3043 = self_3042;
    other_2645 = other_2644;
    let _e4: HomogeneousMagnitude = self_3043;
    let _e5: Motor = other_2645;
    let _e6: Motor = homogeneous_magnitude_motor_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3043;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Motor = motor_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_multi_vector_geometric_quotient(self_3044: HomogeneousMagnitude, other_2646: MultiVector) -> MultiVector {
    var self_3045: HomogeneousMagnitude;
    var other_2647: MultiVector;

    self_3045 = self_3044;
    other_2647 = other_2646;
    let _e4: HomogeneousMagnitude = self_3045;
    let _e5: MultiVector = other_2647;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = homogeneous_magnitude_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_multi_vector_transformation(self_3046: HomogeneousMagnitude, other_2648: MultiVector) -> MultiVector {
    var self_3047: HomogeneousMagnitude;
    var other_2649: MultiVector;

    self_3047 = self_3046;
    other_2649 = other_2648;
    let _e4: HomogeneousMagnitude = self_3047;
    let _e5: MultiVector = other_2649;
    let _e6: MultiVector = homogeneous_magnitude_multi_vector_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3047;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_rotor_transformation(self_3048: HomogeneousMagnitude, other_2650: Rotor) -> Rotor {
    var self_3049: HomogeneousMagnitude;
    var other_2651: Rotor;

    self_3049 = self_3048;
    other_2651 = other_2650;
    let _e4: HomogeneousMagnitude = self_3049;
    let _e5: Rotor = other_2651;
    let _e6: Rotor = homogeneous_magnitude_rotor_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3049;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Rotor = rotor_homogeneous_magnitude_geometric_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_scalar_geometric_quotient(self_3050: HomogeneousMagnitude, other_2652: Scalar) -> HomogeneousMagnitude {
    var self_3051: HomogeneousMagnitude;
    var other_2653: Scalar;

    self_3051 = self_3050;
    other_2653 = other_2652;
    let _e4: HomogeneousMagnitude = self_3051;
    let _e5: Scalar = other_2653;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_scalar_transformation(self_3052: HomogeneousMagnitude, other_2654: Scalar) -> Scalar {
    var self_3053: HomogeneousMagnitude;
    var other_2655: Scalar;

    self_3053 = self_3052;
    other_2655 = other_2654;
    let _e4: HomogeneousMagnitude = self_3053;
    let _e5: Scalar = other_2655;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3053;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Scalar = homogeneous_magnitude_scalar_into(_e9);
    return _e10;
}

fn homogeneous_magnitude_translator_geometric_quotient(self_3054: HomogeneousMagnitude, other_2656: Translator) -> Motor {
    var self_3055: HomogeneousMagnitude;
    var other_2657: Translator;

    self_3055 = self_3054;
    other_2657 = other_2656;
    let _e4: HomogeneousMagnitude = self_3055;
    let _e5: Translator = other_2657;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Motor = homogeneous_magnitude_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn homogeneous_magnitude_translator_transformation(self_3056: HomogeneousMagnitude, other_2658: Translator) -> Translator {
    var self_3057: HomogeneousMagnitude;
    var other_2659: Translator;

    self_3057 = self_3056;
    other_2659 = other_2658;
    let _e4: HomogeneousMagnitude = self_3057;
    let _e5: Translator = other_2659;
    let _e6: Motor = homogeneous_magnitude_translator_geometric_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3057;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_reversal(_e7);
    let _e9: Motor = motor_homogeneous_magnitude_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn line_flector_geometric_quotient(self_3058: Line, other_2660: Flector) -> Flector {
    var self_3059: Line;
    var other_2661: Flector;

    self_3059 = self_3058;
    other_2661 = other_2660;
    let _e4: Line = self_3059;
    let _e5: Flector = other_2661;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = line_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn line_flector_transformation(self_3060: Line, other_2662: Flector) -> Flector {
    var self_3061: Line;
    var other_2663: Flector;

    self_3061 = self_3060;
    other_2663 = other_2662;
    let _e4: Line = self_3061;
    let _e5: Flector = other_2663;
    let _e6: Flector = line_flector_geometric_product(_e4, _e5);
    let _e7: Line = self_3061;
    let _e8: Line = line_reversal(_e7);
    let _e9: Flector = flector_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_homogeneous_magnitude_geometric_quotient(self_3062: Line, other_2664: HomogeneousMagnitude) -> Line {
    var self_3063: Line;
    var other_2665: HomogeneousMagnitude;

    self_3063 = self_3062;
    other_2665 = other_2664;
    let _e4: Line = self_3063;
    let _e5: HomogeneousMagnitude = other_2665;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Line = line_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn line_multi_vector_geometric_quotient(self_3064: Line, other_2666: MultiVector) -> MultiVector {
    var self_3065: Line;
    var other_2667: MultiVector;

    self_3065 = self_3064;
    other_2667 = other_2666;
    let _e4: Line = self_3065;
    let _e5: MultiVector = other_2667;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = line_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn line_multi_vector_transformation(self_3066: Line, other_2668: MultiVector) -> MultiVector {
    var self_3067: Line;
    var other_2669: MultiVector;

    self_3067 = self_3066;
    other_2669 = other_2668;
    let _e4: Line = self_3067;
    let _e5: MultiVector = other_2669;
    let _e6: MultiVector = line_multi_vector_geometric_product(_e4, _e5);
    let _e7: Line = self_3067;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_point_geometric_quotient(self_3068: Line, other_2670: Point) -> Flector {
    var self_3069: Line;
    var other_2671: Point;

    self_3069 = self_3068;
    other_2671 = other_2670;
    let _e4: Line = self_3069;
    let _e5: Point = other_2671;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = line_point_geometric_product(_e4, _e6);
    return _e7;
}

fn line_point_transformation(self_3070: Line, other_2672: Point) -> Point {
    var self_3071: Line;
    var other_2673: Point;

    self_3071 = self_3070;
    other_2673 = other_2672;
    let _e4: Line = self_3071;
    let _e5: Point = other_2673;
    let _e6: Flector = line_point_geometric_product(_e4, _e5);
    let _e7: Line = self_3071;
    let _e8: Line = line_reversal(_e7);
    let _e9: Flector = flector_line_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn line_rotor_transformation(self_3072: Line, other_2674: Rotor) -> Rotor {
    var self_3073: Line;
    var other_2675: Rotor;

    self_3073 = self_3072;
    other_2675 = other_2674;
    let _e4: Line = self_3073;
    let _e5: Rotor = other_2675;
    let _e6: Rotor = line_rotor_geometric_product(_e4, _e5);
    let _e7: Line = self_3073;
    let _e8: Line = line_reversal(_e7);
    let _e9: Rotor = rotor_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_scalar_geometric_quotient(self_3074: Line, other_2676: Scalar) -> Line {
    var self_3075: Line;
    var other_2677: Scalar;

    self_3075 = self_3074;
    other_2677 = other_2676;
    let _e4: Line = self_3075;
    let _e5: Scalar = other_2677;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Line = line_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_flector_geometric_quotient(self_3076: Motor, other_2678: Flector) -> Flector {
    var self_3077: Motor;
    var other_2679: Flector;

    self_3077 = self_3076;
    other_2679 = other_2678;
    let _e4: Motor = self_3077;
    let _e5: Flector = other_2679;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = motor_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_flector_transformation(self_3078: Motor, other_2680: Flector) -> Flector {
    var self_3079: Motor;
    var other_2681: Flector;

    self_3079 = self_3078;
    other_2681 = other_2680;
    let _e4: Motor = self_3079;
    let _e5: Flector = other_2681;
    let _e6: Flector = motor_flector_geometric_product(_e4, _e5);
    let _e7: Motor = self_3079;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_homogeneous_magnitude_geometric_quotient(self_3080: Motor, other_2682: HomogeneousMagnitude) -> Motor {
    var self_3081: Motor;
    var other_2683: HomogeneousMagnitude;

    self_3081 = self_3080;
    other_2683 = other_2682;
    let _e4: Motor = self_3081;
    let _e5: HomogeneousMagnitude = other_2683;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Motor = motor_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_multi_vector_geometric_quotient(self_3082: Motor, other_2684: MultiVector) -> MultiVector {
    var self_3083: Motor;
    var other_2685: MultiVector;

    self_3083 = self_3082;
    other_2685 = other_2684;
    let _e4: Motor = self_3083;
    let _e5: MultiVector = other_2685;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = motor_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_multi_vector_transformation(self_3084: Motor, other_2686: MultiVector) -> MultiVector {
    var self_3085: Motor;
    var other_2687: MultiVector;

    self_3085 = self_3084;
    other_2687 = other_2686;
    let _e4: Motor = self_3085;
    let _e5: MultiVector = other_2687;
    let _e6: MultiVector = motor_multi_vector_geometric_product(_e4, _e5);
    let _e7: Motor = self_3085;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_point_geometric_quotient(self_3086: Motor, other_2688: Point) -> Flector {
    var self_3087: Motor;
    var other_2689: Point;

    self_3087 = self_3086;
    other_2689 = other_2688;
    let _e4: Motor = self_3087;
    let _e5: Point = other_2689;
    let _e6: Point = point_inverse(_e5);
    let _e7: Flector = motor_point_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_point_transformation(self_3088: Motor, other_2690: Point) -> Point {
    var self_3089: Motor;
    var other_2691: Point;

    self_3089 = self_3088;
    other_2691 = other_2690;
    let _e4: Motor = self_3089;
    let _e5: Point = other_2691;
    let _e6: Flector = motor_point_geometric_product(_e4, _e5);
    let _e7: Motor = self_3089;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_product(_e6, _e8);
    let _e10: Point = flector_point_into(_e9);
    return _e10;
}

fn motor_rotor_transformation(self_3090: Motor, other_2692: Rotor) -> Rotor {
    var self_3091: Motor;
    var other_2693: Rotor;

    self_3091 = self_3090;
    other_2693 = other_2692;
    let _e4: Motor = self_3091;
    let _e5: Rotor = other_2693;
    let _e6: Rotor = motor_rotor_geometric_product(_e4, _e5);
    let _e7: Motor = self_3091;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Rotor = rotor_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_scalar_geometric_quotient(self_3092: Motor, other_2694: Scalar) -> Motor {
    var self_3093: Motor;
    var other_2695: Scalar;

    self_3093 = self_3092;
    other_2695 = other_2694;
    let _e4: Motor = self_3093;
    let _e5: Scalar = other_2695;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Motor = motor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_flector_geometric_quotient(self_3094: MultiVector, other_2696: Flector) -> MultiVector {
    var self_3095: MultiVector;
    var other_2697: Flector;

    self_3095 = self_3094;
    other_2697 = other_2696;
    let _e4: MultiVector = self_3095;
    let _e5: Flector = other_2697;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: MultiVector = multi_vector_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_flector_transformation(self_3096: MultiVector, other_2698: Flector) -> Flector {
    var self_3097: MultiVector;
    var other_2699: Flector;

    self_3097 = self_3096;
    other_2699 = other_2698;
    let _e4: MultiVector = self_3097;
    let _e5: Flector = other_2699;
    let _e6: MultiVector = multi_vector_flector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3097;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Flector = multi_vector_flector_into(_e9);
    return _e10;
}

fn multi_vector_homogeneous_magnitude_geometric_quotient(self_3098: MultiVector, other_2700: HomogeneousMagnitude) -> MultiVector {
    var self_3099: MultiVector;
    var other_2701: HomogeneousMagnitude;

    self_3099 = self_3098;
    other_2701 = other_2700;
    let _e4: MultiVector = self_3099;
    let _e5: HomogeneousMagnitude = other_2701;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_homogeneous_magnitude_transformation(self_3100: MultiVector, other_2702: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3101: MultiVector;
    var other_2703: HomogeneousMagnitude;

    self_3101 = self_3100;
    other_2703 = other_2702;
    let _e4: MultiVector = self_3101;
    let _e5: HomogeneousMagnitude = other_2703;
    let _e6: MultiVector = multi_vector_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3101;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: HomogeneousMagnitude = multi_vector_homogeneous_magnitude_into(_e9);
    return _e10;
}

fn multi_vector_line_geometric_quotient(self_3102: MultiVector, other_2704: Line) -> MultiVector {
    var self_3103: MultiVector;
    var other_2705: Line;

    self_3103 = self_3102;
    other_2705 = other_2704;
    let _e4: MultiVector = self_3103;
    let _e5: Line = other_2705;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = multi_vector_line_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_line_transformation(self_3104: MultiVector, other_2706: Line) -> Line {
    var self_3105: MultiVector;
    var other_2707: Line;

    self_3105 = self_3104;
    other_2707 = other_2706;
    let _e4: MultiVector = self_3105;
    let _e5: Line = other_2707;
    let _e6: MultiVector = multi_vector_line_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3105;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn multi_vector_motor_geometric_quotient(self_3106: MultiVector, other_2708: Motor) -> MultiVector {
    var self_3107: MultiVector;
    var other_2709: Motor;

    self_3107 = self_3106;
    other_2709 = other_2708;
    let _e4: MultiVector = self_3107;
    let _e5: Motor = other_2709;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = multi_vector_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_motor_transformation(self_3108: MultiVector, other_2710: Motor) -> Motor {
    var self_3109: MultiVector;
    var other_2711: Motor;

    self_3109 = self_3108;
    other_2711 = other_2710;
    let _e4: MultiVector = self_3109;
    let _e5: Motor = other_2711;
    let _e6: MultiVector = multi_vector_motor_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3109;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn multi_vector_powi(self_3110: MultiVector, exponent_2: i32) -> MultiVector {
    var self_3111: MultiVector;
    var exponent_3: i32;
    var local_1: MultiVector;
    var x_1: MultiVector;
    var y_1: MultiVector;
    var n_1: i32;

    self_3111 = self_3110;
    exponent_3 = exponent_2;
    let _e4: i32 = exponent_3;
    if (_e4 == 0) {
        {
            let _e7: MultiVector = multi_vector_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_3;
    if (_e8 < 0) {
        let _e11: MultiVector = self_3111;
        let _e12: MultiVector = multi_vector_inverse(_e11);
        local_1 = _e12;
    } else {
        let _e14: MultiVector = self_3111;
        local_1 = _e14;
    }
    let _e15: MultiVector = local_1;
    x_1 = _e15;
    let _e17: MultiVector = multi_vector_one();
    y_1 = _e17;
    let _e19: i32 = exponent_3;
    n_1 = abs(_e19);
    loop {
        let _e23: i32 = n_1;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_1;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: MultiVector = x_1;
                    let _e32: MultiVector = y_1;
                    let _e33: MultiVector = multi_vector_multi_vector_geometric_product(_e31, _e32);
                    y_1 = _e33;
                }
            }
            let _e34: MultiVector = x_1;
            let _e35: MultiVector = x_1;
            let _e36: MultiVector = multi_vector_multi_vector_geometric_product(_e34, _e35);
            x_1 = _e36;
            let _e37: i32 = n_1;
            n_1 = (_e37 >> u32(1));
        }
    }
    let _e41: MultiVector = x_1;
    let _e42: MultiVector = y_1;
    let _e43: MultiVector = multi_vector_multi_vector_geometric_product(_e41, _e42);
    return _e43;
}

fn multi_vector_multi_vector_geometric_quotient(self_3112: MultiVector, other_2712: MultiVector) -> MultiVector {
    var self_3113: MultiVector;
    var other_2713: MultiVector;

    self_3113 = self_3112;
    other_2713 = other_2712;
    let _e4: MultiVector = self_3113;
    let _e5: MultiVector = other_2713;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_multi_vector_transformation(self_3114: MultiVector, other_2714: MultiVector) -> MultiVector {
    var self_3115: MultiVector;
    var other_2715: MultiVector;

    self_3115 = self_3114;
    other_2715 = other_2714;
    let _e4: MultiVector = self_3115;
    let _e5: MultiVector = other_2715;
    let _e6: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3115;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    return _e9;
}

fn multi_vector_plane_geometric_quotient(self_3116: MultiVector, other_2716: Plane) -> MultiVector {
    var self_3117: MultiVector;
    var other_2717: Plane;

    self_3117 = self_3116;
    other_2717 = other_2716;
    let _e4: MultiVector = self_3117;
    let _e5: Plane = other_2717;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: MultiVector = multi_vector_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_plane_transformation(self_3118: MultiVector, other_2718: Plane) -> Plane {
    var self_3119: MultiVector;
    var other_2719: Plane;

    self_3119 = self_3118;
    other_2719 = other_2718;
    let _e4: MultiVector = self_3119;
    let _e5: Plane = other_2719;
    let _e6: MultiVector = multi_vector_plane_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3119;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn multi_vector_point_geometric_quotient(self_3120: MultiVector, other_2720: Point) -> MultiVector {
    var self_3121: MultiVector;
    var other_2721: Point;

    self_3121 = self_3120;
    other_2721 = other_2720;
    let _e4: MultiVector = self_3121;
    let _e5: Point = other_2721;
    let _e6: Point = point_inverse(_e5);
    let _e7: MultiVector = multi_vector_point_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_point_transformation(self_3122: MultiVector, other_2722: Point) -> Point {
    var self_3123: MultiVector;
    var other_2723: Point;

    self_3123 = self_3122;
    other_2723 = other_2722;
    let _e4: MultiVector = self_3123;
    let _e5: Point = other_2723;
    let _e6: MultiVector = multi_vector_point_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3123;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn multi_vector_scalar_geometric_quotient(self_3124: MultiVector, other_2724: Scalar) -> MultiVector {
    var self_3125: MultiVector;
    var other_2725: Scalar;

    self_3125 = self_3124;
    other_2725 = other_2724;
    let _e4: MultiVector = self_3125;
    let _e5: Scalar = other_2725;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_scalar_transformation(self_3126: MultiVector, other_2726: Scalar) -> Scalar {
    var self_3127: MultiVector;
    var other_2727: Scalar;

    self_3127 = self_3126;
    other_2727 = other_2726;
    let _e4: MultiVector = self_3127;
    let _e5: Scalar = other_2727;
    let _e6: MultiVector = multi_vector_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3127;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn multi_vector_translator_geometric_quotient(self_3128: MultiVector, other_2728: Translator) -> MultiVector {
    var self_3129: MultiVector;
    var other_2729: Translator;

    self_3129 = self_3128;
    other_2729 = other_2728;
    let _e4: MultiVector = self_3129;
    let _e5: Translator = other_2729;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = multi_vector_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_translator_transformation(self_3130: MultiVector, other_2730: Translator) -> Translator {
    var self_3131: MultiVector;
    var other_2731: Translator;

    self_3131 = self_3130;
    other_2731 = other_2730;
    let _e4: MultiVector = self_3131;
    let _e5: Translator = other_2731;
    let _e6: MultiVector = multi_vector_translator_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_3131;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn plane_multi_vector_geometric_quotient(self_3132: Plane, other_2732: MultiVector) -> MultiVector {
    var self_3133: Plane;
    var other_2733: MultiVector;

    self_3133 = self_3132;
    other_2733 = other_2732;
    let _e4: Plane = self_3133;
    let _e5: MultiVector = other_2733;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = plane_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_multi_vector_transformation(self_3134: Plane, other_2734: MultiVector) -> MultiVector {
    var self_3135: Plane;
    var other_2735: MultiVector;

    self_3135 = self_3134;
    other_2735 = other_2734;
    let _e4: Plane = self_3135;
    let _e5: MultiVector = other_2735;
    let _e6: MultiVector = plane_multi_vector_geometric_product(_e4, _e5);
    let _e7: Plane = self_3135;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn plane_point_geometric_quotient(self_3136: Plane, other_2736: Point) -> Motor {
    var self_3137: Plane;
    var other_2737: Point;

    self_3137 = self_3136;
    other_2737 = other_2736;
    let _e4: Plane = self_3137;
    let _e5: Point = other_2737;
    let _e6: Point = point_inverse(_e5);
    let _e7: Motor = plane_point_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_scalar_geometric_quotient(self_3138: Plane, other_2738: Scalar) -> Plane {
    var self_3139: Plane;
    var other_2739: Scalar;

    self_3139 = self_3138;
    other_2739 = other_2738;
    let _e4: Plane = self_3139;
    let _e5: Scalar = other_2739;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Plane = plane_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_line_geometric_quotient(self_3140: Point, other_2740: Line) -> Flector {
    var self_3141: Point;
    var other_2741: Line;

    self_3141 = self_3140;
    other_2741 = other_2740;
    let _e4: Point = self_3141;
    let _e5: Line = other_2741;
    let _e6: Line = line_inverse(_e5);
    let _e7: Flector = point_line_geometric_product(_e4, _e6);
    return _e7;
}

fn point_motor_geometric_quotient(self_3142: Point, other_2742: Motor) -> Flector {
    var self_3143: Point;
    var other_2743: Motor;

    self_3143 = self_3142;
    other_2743 = other_2742;
    let _e4: Point = self_3143;
    let _e5: Motor = other_2743;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Flector = point_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_multi_vector_geometric_quotient(self_3144: Point, other_2744: MultiVector) -> MultiVector {
    var self_3145: Point;
    var other_2745: MultiVector;

    self_3145 = self_3144;
    other_2745 = other_2744;
    let _e4: Point = self_3145;
    let _e5: MultiVector = other_2745;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = point_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn point_multi_vector_transformation(self_3146: Point, other_2746: MultiVector) -> MultiVector {
    var self_3147: Point;
    var other_2747: MultiVector;

    self_3147 = self_3146;
    other_2747 = other_2746;
    let _e4: Point = self_3147;
    let _e5: MultiVector = other_2747;
    let _e6: MultiVector = point_multi_vector_geometric_product(_e4, _e5);
    let _e7: Point = self_3147;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_product(_e6, _e8);
    return _e9;
}

fn point_plane_geometric_quotient(self_3148: Point, other_2748: Plane) -> Motor {
    var self_3149: Point;
    var other_2749: Plane;

    self_3149 = self_3148;
    other_2749 = other_2748;
    let _e4: Point = self_3149;
    let _e5: Plane = other_2749;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Motor = point_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn point_plane_transformation(self_3150: Point, other_2750: Plane) -> Plane {
    var self_3151: Point;
    var other_2751: Plane;

    self_3151 = self_3150;
    other_2751 = other_2750;
    let _e4: Point = self_3151;
    let _e5: Plane = other_2751;
    let _e6: Motor = point_plane_geometric_product(_e4, _e5);
    let _e7: Point = self_3151;
    let _e8: Point = point_reversal(_e7);
    let _e9: Flector = motor_point_geometric_product(_e6, _e8);
    let _e10: Plane = flector_plane_into(_e9);
    return _e10;
}

fn point_scalar_geometric_quotient(self_3152: Point, other_2752: Scalar) -> Point {
    var self_3153: Point;
    var other_2753: Scalar;

    self_3153 = self_3152;
    other_2753 = other_2752;
    let _e4: Point = self_3153;
    let _e5: Scalar = other_2753;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Point = point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_homogeneous_magnitude_geometric_quotient(self_3154: Rotor, other_2754: HomogeneousMagnitude) -> Rotor {
    var self_3155: Rotor;
    var other_2755: HomogeneousMagnitude;

    self_3155 = self_3154;
    other_2755 = other_2754;
    let _e4: Rotor = self_3155;
    let _e5: HomogeneousMagnitude = other_2755;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Rotor = rotor_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_line_geometric_quotient(self_3156: Rotor, other_2756: Line) -> Rotor {
    var self_3157: Rotor;
    var other_2757: Line;

    self_3157 = self_3156;
    other_2757 = other_2756;
    let _e4: Rotor = self_3157;
    let _e5: Line = other_2757;
    let _e6: Line = line_inverse(_e5);
    let _e7: Rotor = rotor_line_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_motor_geometric_quotient(self_3158: Rotor, other_2758: Motor) -> Rotor {
    var self_3159: Rotor;
    var other_2759: Motor;

    self_3159 = self_3158;
    other_2759 = other_2758;
    let _e4: Rotor = self_3159;
    let _e5: Motor = other_2759;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Rotor = rotor_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_scalar_geometric_quotient(self_3160: Rotor, other_2760: Scalar) -> Rotor {
    var self_3161: Rotor;
    var other_2761: Scalar;

    self_3161 = self_3160;
    other_2761 = other_2760;
    let _e4: Rotor = self_3161;
    let _e5: Scalar = other_2761;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_translator_geometric_quotient(self_3162: Rotor, other_2762: Translator) -> Rotor {
    var self_3163: Rotor;
    var other_2763: Translator;

    self_3163 = self_3162;
    other_2763 = other_2762;
    let _e4: Rotor = self_3163;
    let _e5: Translator = other_2763;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Rotor = rotor_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_anti_scalar_transformation(self_3164: Scalar, other_2764: AntiScalar) -> AntiScalar {
    var self_3165: Scalar;
    var other_2765: AntiScalar;

    self_3165 = self_3164;
    other_2765 = other_2764;
    let _e4: Scalar = self_3165;
    let _e5: AntiScalar = other_2765;
    let _e6: AntiScalar = scalar_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3165;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_flector_geometric_quotient(self_3166: Scalar, other_2766: Flector) -> Flector {
    var self_3167: Scalar;
    var other_2767: Flector;

    self_3167 = self_3166;
    other_2767 = other_2766;
    let _e4: Scalar = self_3167;
    let _e5: Flector = other_2767;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = scalar_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_flector_transformation(self_3168: Scalar, other_2768: Flector) -> Flector {
    var self_3169: Scalar;
    var other_2769: Flector;

    self_3169 = self_3168;
    other_2769 = other_2768;
    let _e4: Scalar = self_3169;
    let _e5: Flector = other_2769;
    let _e6: Flector = scalar_flector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3169;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Flector = flector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_homogeneous_magnitude_geometric_quotient(self_3170: Scalar, other_2770: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3171: Scalar;
    var other_2771: HomogeneousMagnitude;

    self_3171 = self_3170;
    other_2771 = other_2770;
    let _e4: Scalar = self_3171;
    let _e5: HomogeneousMagnitude = other_2771;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: HomogeneousMagnitude = scalar_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_homogeneous_magnitude_transformation(self_3172: Scalar, other_2772: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3173: Scalar;
    var other_2773: HomogeneousMagnitude;

    self_3173 = self_3172;
    other_2773 = other_2772;
    let _e4: Scalar = self_3173;
    let _e5: HomogeneousMagnitude = other_2773;
    let _e6: HomogeneousMagnitude = scalar_homogeneous_magnitude_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3173;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_line_geometric_quotient(self_3174: Scalar, other_2774: Line) -> Line {
    var self_3175: Scalar;
    var other_2775: Line;

    self_3175 = self_3174;
    other_2775 = other_2774;
    let _e4: Scalar = self_3175;
    let _e5: Line = other_2775;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = scalar_line_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_line_transformation(self_3176: Scalar, other_2776: Line) -> Line {
    var self_3177: Scalar;
    var other_2777: Line;

    self_3177 = self_3176;
    other_2777 = other_2776;
    let _e4: Scalar = self_3177;
    let _e5: Line = other_2777;
    let _e6: Line = scalar_line_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3177;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Line = line_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_motor_geometric_quotient(self_3178: Scalar, other_2778: Motor) -> Motor {
    var self_3179: Scalar;
    var other_2779: Motor;

    self_3179 = self_3178;
    other_2779 = other_2778;
    let _e4: Scalar = self_3179;
    let _e5: Motor = other_2779;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = scalar_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_motor_transformation(self_3180: Scalar, other_2780: Motor) -> Motor {
    var self_3181: Scalar;
    var other_2781: Motor;

    self_3181 = self_3180;
    other_2781 = other_2780;
    let _e4: Scalar = self_3181;
    let _e5: Motor = other_2781;
    let _e6: Motor = scalar_motor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3181;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Motor = motor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_multi_vector_geometric_quotient(self_3182: Scalar, other_2782: MultiVector) -> MultiVector {
    var self_3183: Scalar;
    var other_2783: MultiVector;

    self_3183 = self_3182;
    other_2783 = other_2782;
    let _e4: Scalar = self_3183;
    let _e5: MultiVector = other_2783;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_multi_vector_transformation(self_3184: Scalar, other_2784: MultiVector) -> MultiVector {
    var self_3185: Scalar;
    var other_2785: MultiVector;

    self_3185 = self_3184;
    other_2785 = other_2784;
    let _e4: Scalar = self_3185;
    let _e5: MultiVector = other_2785;
    let _e6: MultiVector = scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3185;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_plane_geometric_quotient(self_3186: Scalar, other_2786: Plane) -> Plane {
    var self_3187: Scalar;
    var other_2787: Plane;

    self_3187 = self_3186;
    other_2787 = other_2786;
    let _e4: Scalar = self_3187;
    let _e5: Plane = other_2787;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Plane = scalar_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_plane_transformation(self_3188: Scalar, other_2788: Plane) -> Plane {
    var self_3189: Scalar;
    var other_2789: Plane;

    self_3189 = self_3188;
    other_2789 = other_2788;
    let _e4: Scalar = self_3189;
    let _e5: Plane = other_2789;
    let _e6: Plane = scalar_plane_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3189;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Plane = plane_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_point_geometric_quotient(self_3190: Scalar, other_2790: Point) -> Point {
    var self_3191: Scalar;
    var other_2791: Point;

    self_3191 = self_3190;
    other_2791 = other_2790;
    let _e4: Scalar = self_3191;
    let _e5: Point = other_2791;
    let _e6: Point = point_inverse(_e5);
    let _e7: Point = scalar_point_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_point_transformation(self_3192: Scalar, other_2792: Point) -> Point {
    var self_3193: Scalar;
    var other_2793: Point;

    self_3193 = self_3192;
    other_2793 = other_2792;
    let _e4: Scalar = self_3193;
    let _e5: Point = other_2793;
    let _e6: Point = scalar_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3193;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Point = point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_rotor_transformation(self_3194: Scalar, other_2794: Rotor) -> Rotor {
    var self_3195: Scalar;
    var other_2795: Rotor;

    self_3195 = self_3194;
    other_2795 = other_2794;
    let _e4: Scalar = self_3195;
    let _e5: Rotor = other_2795;
    let _e6: Rotor = scalar_rotor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3195;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Rotor = rotor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_powi(self_3196: Scalar, exponent_4: i32) -> Scalar {
    var self_3197: Scalar;
    var exponent_5: i32;
    var local_2: Scalar;
    var x_2: Scalar;
    var y_2: Scalar;
    var n_2: i32;

    self_3197 = self_3196;
    exponent_5 = exponent_4;
    let _e4: i32 = exponent_5;
    if (_e4 == 0) {
        {
            let _e7: Scalar = scalar_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_5;
    if (_e8 < 0) {
        let _e11: Scalar = self_3197;
        let _e12: Scalar = scalar_inverse(_e11);
        local_2 = _e12;
    } else {
        let _e14: Scalar = self_3197;
        local_2 = _e14;
    }
    let _e15: Scalar = local_2;
    x_2 = _e15;
    let _e17: Scalar = scalar_one();
    y_2 = _e17;
    let _e19: i32 = exponent_5;
    n_2 = abs(_e19);
    loop {
        let _e23: i32 = n_2;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_2;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Scalar = x_2;
                    let _e32: Scalar = y_2;
                    let _e33: Scalar = scalar_scalar_geometric_product(_e31, _e32);
                    y_2 = _e33;
                }
            }
            let _e34: Scalar = x_2;
            let _e35: Scalar = x_2;
            let _e36: Scalar = scalar_scalar_geometric_product(_e34, _e35);
            x_2 = _e36;
            let _e37: i32 = n_2;
            n_2 = (_e37 >> u32(1));
        }
    }
    let _e41: Scalar = x_2;
    let _e42: Scalar = y_2;
    let _e43: Scalar = scalar_scalar_geometric_product(_e41, _e42);
    return _e43;
}

fn scalar_scalar_geometric_quotient(self_3198: Scalar, other_2796: Scalar) -> Scalar {
    var self_3199: Scalar;
    var other_2797: Scalar;

    self_3199 = self_3198;
    other_2797 = other_2796;
    let _e4: Scalar = self_3199;
    let _e5: Scalar = other_2797;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_scalar_transformation(self_3200: Scalar, other_2798: Scalar) -> Scalar {
    var self_3201: Scalar;
    var other_2799: Scalar;

    self_3201 = self_3200;
    other_2799 = other_2798;
    let _e4: Scalar = self_3201;
    let _e5: Scalar = other_2799;
    let _e6: Scalar = scalar_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3201;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Scalar = scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_translator_geometric_quotient(self_3202: Scalar, other_2800: Translator) -> Translator {
    var self_3203: Scalar;
    var other_2801: Translator;

    self_3203 = self_3202;
    other_2801 = other_2800;
    let _e4: Scalar = self_3203;
    let _e5: Translator = other_2801;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Translator = scalar_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_translator_transformation(self_3204: Scalar, other_2802: Translator) -> Translator {
    var self_3205: Scalar;
    var other_2803: Translator;

    self_3205 = self_3204;
    other_2803 = other_2802;
    let _e4: Scalar = self_3205;
    let _e5: Translator = other_2803;
    let _e6: Translator = scalar_translator_geometric_product(_e4, _e5);
    let _e7: Scalar = self_3205;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Translator = translator_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_flector_geometric_quotient(self_3206: Translator, other_2804: Flector) -> Flector {
    var self_3207: Translator;
    var other_2805: Flector;

    self_3207 = self_3206;
    other_2805 = other_2804;
    let _e4: Translator = self_3207;
    let _e5: Flector = other_2805;
    let _e6: Flector = flector_inverse(_e5);
    let _e7: Flector = translator_flector_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_flector_transformation(self_3208: Translator, other_2806: Flector) -> Flector {
    var self_3209: Translator;
    var other_2807: Flector;

    self_3209 = self_3208;
    other_2807 = other_2806;
    let _e4: Translator = self_3209;
    let _e5: Flector = other_2807;
    let _e6: Flector = translator_flector_geometric_product(_e4, _e5);
    let _e7: Translator = self_3209;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_homogeneous_magnitude_geometric_quotient(self_3210: Translator, other_2808: HomogeneousMagnitude) -> Motor {
    var self_3211: Translator;
    var other_2809: HomogeneousMagnitude;

    self_3211 = self_3210;
    other_2809 = other_2808;
    let _e4: Translator = self_3211;
    let _e5: HomogeneousMagnitude = other_2809;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_inverse(_e5);
    let _e7: Motor = translator_homogeneous_magnitude_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_multi_vector_geometric_quotient(self_3212: Translator, other_2810: MultiVector) -> MultiVector {
    var self_3213: Translator;
    var other_2811: MultiVector;

    self_3213 = self_3212;
    other_2811 = other_2810;
    let _e4: Translator = self_3213;
    let _e5: MultiVector = other_2811;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = translator_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_multi_vector_transformation(self_3214: Translator, other_2812: MultiVector) -> MultiVector {
    var self_3215: Translator;
    var other_2813: MultiVector;

    self_3215 = self_3214;
    other_2813 = other_2812;
    let _e4: Translator = self_3215;
    let _e5: MultiVector = other_2813;
    let _e6: MultiVector = translator_multi_vector_geometric_product(_e4, _e5);
    let _e7: Translator = self_3215;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_rotor_transformation(self_3216: Translator, other_2814: Rotor) -> Rotor {
    var self_3217: Translator;
    var other_2815: Rotor;

    self_3217 = self_3216;
    other_2815 = other_2814;
    let _e4: Translator = self_3217;
    let _e5: Rotor = other_2815;
    let _e6: Rotor = translator_rotor_geometric_product(_e4, _e5);
    let _e7: Translator = self_3217;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Rotor = rotor_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_scalar_geometric_quotient(self_3218: Translator, other_2816: Scalar) -> Translator {
    var self_3219: Translator;
    var other_2817: Scalar;

    self_3219 = self_3218;
    other_2817 = other_2816;
    let _e4: Translator = self_3219;
    let _e5: Scalar = other_2817;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Translator = translator_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_anti_scalar_sandwich(self_3220: AntiScalar, other_2818: AntiScalar) -> AntiScalar {
    var self_3221: AntiScalar;
    var other_2819: AntiScalar;

    self_3221 = self_3220;
    other_2819 = other_2818;
    let _e4: AntiScalar = self_3221;
    let _e5: AntiScalar = other_2819;
    let _e6: AntiScalar = anti_scalar_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3221;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_flector_sandwich(self_3222: AntiScalar, other_2820: Flector) -> Flector {
    var self_3223: AntiScalar;
    var other_2821: Flector;

    self_3223 = self_3222;
    other_2821 = other_2820;
    let _e4: AntiScalar = self_3223;
    let _e5: Flector = other_2821;
    let _e6: Flector = anti_scalar_flector_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3223;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Flector = flector_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_homogeneous_magnitude_sandwich(self_3224: AntiScalar, other_2822: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3225: AntiScalar;
    var other_2823: HomogeneousMagnitude;

    self_3225 = self_3224;
    other_2823 = other_2822;
    let _e4: AntiScalar = self_3225;
    let _e5: HomogeneousMagnitude = other_2823;
    let _e6: HomogeneousMagnitude = anti_scalar_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3225;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_line_sandwich(self_3226: AntiScalar, other_2824: Line) -> Line {
    var self_3227: AntiScalar;
    var other_2825: Line;

    self_3227 = self_3226;
    other_2825 = other_2824;
    let _e4: AntiScalar = self_3227;
    let _e5: Line = other_2825;
    let _e6: Line = anti_scalar_line_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3227;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Line = line_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_motor_sandwich(self_3228: AntiScalar, other_2826: Motor) -> Motor {
    var self_3229: AntiScalar;
    var other_2827: Motor;

    self_3229 = self_3228;
    other_2827 = other_2826;
    let _e4: AntiScalar = self_3229;
    let _e5: Motor = other_2827;
    let _e6: Motor = anti_scalar_motor_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3229;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Motor = motor_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_multi_vector_sandwich(self_3230: AntiScalar, other_2828: MultiVector) -> MultiVector {
    var self_3231: AntiScalar;
    var other_2829: MultiVector;

    self_3231 = self_3230;
    other_2829 = other_2828;
    let _e4: AntiScalar = self_3231;
    let _e5: MultiVector = other_2829;
    let _e6: MultiVector = anti_scalar_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3231;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_plane_sandwich(self_3232: AntiScalar, other_2830: Plane) -> Plane {
    var self_3233: AntiScalar;
    var other_2831: Plane;

    self_3233 = self_3232;
    other_2831 = other_2830;
    let _e4: AntiScalar = self_3233;
    let _e5: Plane = other_2831;
    let _e6: Plane = anti_scalar_plane_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3233;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Plane = plane_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_point_sandwich(self_3234: AntiScalar, other_2832: Point) -> Point {
    var self_3235: AntiScalar;
    var other_2833: Point;

    self_3235 = self_3234;
    other_2833 = other_2832;
    let _e4: AntiScalar = self_3235;
    let _e5: Point = other_2833;
    let _e6: Point = anti_scalar_point_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3235;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Point = point_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_rotor_sandwich(self_3236: AntiScalar, other_2834: Rotor) -> Rotor {
    var self_3237: AntiScalar;
    var other_2835: Rotor;

    self_3237 = self_3236;
    other_2835 = other_2834;
    let _e4: AntiScalar = self_3237;
    let _e5: Rotor = other_2835;
    let _e6: Rotor = anti_scalar_rotor_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3237;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Rotor = rotor_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_scalar_sandwich(self_3238: AntiScalar, other_2836: Scalar) -> Scalar {
    var self_3239: AntiScalar;
    var other_2837: Scalar;

    self_3239 = self_3238;
    other_2837 = other_2836;
    let _e4: AntiScalar = self_3239;
    let _e5: Scalar = other_2837;
    let _e6: Scalar = anti_scalar_scalar_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3239;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Scalar = scalar_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_translator_sandwich(self_3240: AntiScalar, other_2838: Translator) -> Translator {
    var self_3241: AntiScalar;
    var other_2839: Translator;

    self_3241 = self_3240;
    other_2839 = other_2838;
    let _e4: AntiScalar = self_3241;
    let _e5: Translator = other_2839;
    let _e6: Translator = anti_scalar_translator_geometric_anti_product(_e4, _e5);
    let _e7: AntiScalar = self_3241;
    let _e8: AntiScalar = anti_scalar_anti_reversal(_e7);
    let _e9: Translator = translator_anti_scalar_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn flector_multi_vector_sandwich(self_3242: Flector, other_2840: MultiVector) -> MultiVector {
    var self_3243: Flector;
    var other_2841: MultiVector;

    self_3243 = self_3242;
    other_2841 = other_2840;
    let _e4: Flector = self_3243;
    let _e5: MultiVector = other_2841;
    let _e6: MultiVector = flector_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Flector = self_3243;
    let _e8: Flector = flector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_flector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_anti_scalar_sandwich(self_3244: HomogeneousMagnitude, other_2842: AntiScalar) -> HomogeneousMagnitude {
    var self_3245: HomogeneousMagnitude;
    var other_2843: AntiScalar;

    self_3245 = self_3244;
    other_2843 = other_2842;
    let _e4: HomogeneousMagnitude = self_3245;
    let _e5: AntiScalar = other_2843;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3245;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_flector_sandwich(self_3246: HomogeneousMagnitude, other_2844: Flector) -> Flector {
    var self_3247: HomogeneousMagnitude;
    var other_2845: Flector;

    self_3247 = self_3246;
    other_2845 = other_2844;
    let _e4: HomogeneousMagnitude = self_3247;
    let _e5: Flector = other_2845;
    let _e6: Flector = homogeneous_magnitude_flector_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3247;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: Flector = flector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_homogeneous_magnitude_sandwich(self_3248: HomogeneousMagnitude, other_2846: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3249: HomogeneousMagnitude;
    var other_2847: HomogeneousMagnitude;

    self_3249 = self_3248;
    other_2847 = other_2846;
    let _e4: HomogeneousMagnitude = self_3249;
    let _e5: HomogeneousMagnitude = other_2847;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3249;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_line_sandwich(self_3250: HomogeneousMagnitude, other_2848: Line) -> Line {
    var self_3251: HomogeneousMagnitude;
    var other_2849: Line;

    self_3251 = self_3250;
    other_2849 = other_2848;
    let _e4: HomogeneousMagnitude = self_3251;
    let _e5: Line = other_2849;
    let _e6: Line = homogeneous_magnitude_line_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3251;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: Line = line_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_multi_vector_sandwich(self_3252: HomogeneousMagnitude, other_2850: MultiVector) -> MultiVector {
    var self_3253: HomogeneousMagnitude;
    var other_2851: MultiVector;

    self_3253 = self_3252;
    other_2851 = other_2850;
    let _e4: HomogeneousMagnitude = self_3253;
    let _e5: MultiVector = other_2851;
    let _e6: MultiVector = homogeneous_magnitude_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3253;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn homogeneous_magnitude_scalar_sandwich(self_3254: HomogeneousMagnitude, other_2852: Scalar) -> Scalar {
    var self_3255: HomogeneousMagnitude;
    var other_2853: Scalar;

    self_3255 = self_3254;
    other_2853 = other_2852;
    let _e4: HomogeneousMagnitude = self_3255;
    let _e5: Scalar = other_2853;
    let _e6: Scalar = homogeneous_magnitude_scalar_geometric_anti_product(_e4, _e5);
    let _e7: HomogeneousMagnitude = self_3255;
    let _e8: HomogeneousMagnitude = homogeneous_magnitude_anti_reversal(_e7);
    let _e9: Scalar = scalar_homogeneous_magnitude_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn line_flector_sandwich(self_3256: Line, other_2854: Flector) -> Flector {
    var self_3257: Line;
    var other_2855: Flector;

    self_3257 = self_3256;
    other_2855 = other_2854;
    let _e4: Line = self_3257;
    let _e5: Flector = other_2855;
    let _e6: Flector = line_flector_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_3257;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: Flector = flector_line_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn line_multi_vector_sandwich(self_3258: Line, other_2856: MultiVector) -> MultiVector {
    var self_3259: Line;
    var other_2857: MultiVector;

    self_3259 = self_3258;
    other_2857 = other_2856;
    let _e4: Line = self_3259;
    let _e5: MultiVector = other_2857;
    let _e6: MultiVector = line_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_3259;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn line_plane_sandwich(self_3260: Line, other_2858: Plane) -> Flector {
    var self_3261: Line;
    var other_2859: Plane;

    self_3261 = self_3260;
    other_2859 = other_2858;
    let _e4: Line = self_3261;
    let _e5: Plane = other_2859;
    let _e6: Flector = line_plane_geometric_anti_product(_e4, _e5);
    let _e7: Line = self_3261;
    let _e8: Line = line_anti_reversal(_e7);
    let _e9: Flector = flector_line_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn motor_flector_sandwich(self_3262: Motor, other_2860: Flector) -> Flector {
    var self_3263: Motor;
    var other_2861: Flector;

    self_3263 = self_3262;
    other_2861 = other_2860;
    let _e4: Motor = self_3263;
    let _e5: Flector = other_2861;
    let _e6: Flector = motor_flector_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_3263;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn motor_multi_vector_sandwich(self_3264: Motor, other_2862: MultiVector) -> MultiVector {
    var self_3265: Motor;
    var other_2863: MultiVector;

    self_3265 = self_3264;
    other_2863 = other_2862;
    let _e4: Motor = self_3265;
    let _e5: MultiVector = other_2863;
    let _e6: MultiVector = motor_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_3265;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn motor_plane_sandwich(self_3266: Motor, other_2864: Plane) -> Flector {
    var self_3267: Motor;
    var other_2865: Plane;

    self_3267 = self_3266;
    other_2865 = other_2864;
    let _e4: Motor = self_3267;
    let _e5: Plane = other_2865;
    let _e6: Flector = motor_plane_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_3267;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn motor_point_sandwich(self_3268: Motor, other_2866: Point) -> Flector {
    var self_3269: Motor;
    var other_2867: Point;

    self_3269 = self_3268;
    other_2867 = other_2866;
    let _e4: Motor = self_3269;
    let _e5: Point = other_2867;
    let _e6: Flector = motor_point_geometric_anti_product(_e4, _e5);
    let _e7: Motor = self_3269;
    let _e8: Motor = motor_anti_reversal(_e7);
    let _e9: Flector = flector_motor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_anti_scalar_sandwich(self_3270: MultiVector, other_2868: AntiScalar) -> MultiVector {
    var self_3271: MultiVector;
    var other_2869: AntiScalar;

    self_3271 = self_3270;
    other_2869 = other_2868;
    let _e4: MultiVector = self_3271;
    let _e5: AntiScalar = other_2869;
    let _e6: MultiVector = multi_vector_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3271;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_flector_sandwich(self_3272: MultiVector, other_2870: Flector) -> MultiVector {
    var self_3273: MultiVector;
    var other_2871: Flector;

    self_3273 = self_3272;
    other_2871 = other_2870;
    let _e4: MultiVector = self_3273;
    let _e5: Flector = other_2871;
    let _e6: MultiVector = multi_vector_flector_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3273;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_homogeneous_magnitude_sandwich(self_3274: MultiVector, other_2872: HomogeneousMagnitude) -> MultiVector {
    var self_3275: MultiVector;
    var other_2873: HomogeneousMagnitude;

    self_3275 = self_3274;
    other_2873 = other_2872;
    let _e4: MultiVector = self_3275;
    let _e5: HomogeneousMagnitude = other_2873;
    let _e6: MultiVector = multi_vector_homogeneous_magnitude_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3275;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_line_sandwich(self_3276: MultiVector, other_2874: Line) -> MultiVector {
    var self_3277: MultiVector;
    var other_2875: Line;

    self_3277 = self_3276;
    other_2875 = other_2874;
    let _e4: MultiVector = self_3277;
    let _e5: Line = other_2875;
    let _e6: MultiVector = multi_vector_line_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3277;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_motor_sandwich(self_3278: MultiVector, other_2876: Motor) -> MultiVector {
    var self_3279: MultiVector;
    var other_2877: Motor;

    self_3279 = self_3278;
    other_2877 = other_2876;
    let _e4: MultiVector = self_3279;
    let _e5: Motor = other_2877;
    let _e6: MultiVector = multi_vector_motor_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3279;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_multi_vector_sandwich(self_3280: MultiVector, other_2878: MultiVector) -> MultiVector {
    var self_3281: MultiVector;
    var other_2879: MultiVector;

    self_3281 = self_3280;
    other_2879 = other_2878;
    let _e4: MultiVector = self_3281;
    let _e5: MultiVector = other_2879;
    let _e6: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3281;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_plane_sandwich(self_3282: MultiVector, other_2880: Plane) -> MultiVector {
    var self_3283: MultiVector;
    var other_2881: Plane;

    self_3283 = self_3282;
    other_2881 = other_2880;
    let _e4: MultiVector = self_3283;
    let _e5: Plane = other_2881;
    let _e6: MultiVector = multi_vector_plane_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3283;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_point_sandwich(self_3284: MultiVector, other_2882: Point) -> MultiVector {
    var self_3285: MultiVector;
    var other_2883: Point;

    self_3285 = self_3284;
    other_2883 = other_2882;
    let _e4: MultiVector = self_3285;
    let _e5: Point = other_2883;
    let _e6: MultiVector = multi_vector_point_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3285;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_rotor_sandwich(self_3286: MultiVector, other_2884: Rotor) -> MultiVector {
    var self_3287: MultiVector;
    var other_2885: Rotor;

    self_3287 = self_3286;
    other_2885 = other_2884;
    let _e4: MultiVector = self_3287;
    let _e5: Rotor = other_2885;
    let _e6: MultiVector = multi_vector_rotor_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3287;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn multi_vector_translator_sandwich(self_3288: MultiVector, other_2886: Translator) -> MultiVector {
    var self_3289: MultiVector;
    var other_2887: Translator;

    self_3289 = self_3288;
    other_2887 = other_2886;
    let _e4: MultiVector = self_3289;
    let _e5: Translator = other_2887;
    let _e6: MultiVector = multi_vector_translator_geometric_anti_product(_e4, _e5);
    let _e7: MultiVector = self_3289;
    let _e8: MultiVector = multi_vector_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn plane_anti_scalar_sandwich(self_3290: Plane, other_2888: AntiScalar) -> Motor {
    var self_3291: Plane;
    var other_2889: AntiScalar;

    self_3291 = self_3290;
    other_2889 = other_2888;
    let _e4: Plane = self_3291;
    let _e5: AntiScalar = other_2889;
    let _e6: Plane = plane_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_3291;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: Motor = plane_plane_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn plane_multi_vector_sandwich(self_3292: Plane, other_2890: MultiVector) -> MultiVector {
    var self_3293: Plane;
    var other_2891: MultiVector;

    self_3293 = self_3292;
    other_2891 = other_2890;
    let _e4: Plane = self_3293;
    let _e5: MultiVector = other_2891;
    let _e6: MultiVector = plane_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_3293;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn plane_plane_sandwich(self_3294: Plane, other_2892: Plane) -> Flector {
    var self_3295: Plane;
    var other_2893: Plane;

    self_3295 = self_3294;
    other_2893 = other_2892;
    let _e4: Plane = self_3295;
    let _e5: Plane = other_2893;
    let _e6: Motor = plane_plane_geometric_anti_product(_e4, _e5);
    let _e7: Plane = self_3295;
    let _e8: Plane = plane_anti_reversal(_e7);
    let _e9: Flector = motor_plane_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn point_anti_scalar_sandwich(self_3296: Point, other_2894: AntiScalar) -> Translator {
    var self_3297: Point;
    var other_2895: AntiScalar;

    self_3297 = self_3296;
    other_2895 = other_2894;
    let _e4: Point = self_3297;
    let _e5: AntiScalar = other_2895;
    let _e6: Point = point_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_3297;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: Translator = point_point_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn point_multi_vector_sandwich(self_3298: Point, other_2896: MultiVector) -> MultiVector {
    var self_3299: Point;
    var other_2897: MultiVector;

    self_3299 = self_3298;
    other_2897 = other_2896;
    let _e4: Point = self_3299;
    let _e5: MultiVector = other_2897;
    let _e6: MultiVector = point_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_3299;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn point_point_sandwich(self_3300: Point, other_2898: Point) -> Point {
    var self_3301: Point;
    var other_2899: Point;

    self_3301 = self_3300;
    other_2899 = other_2898;
    let _e4: Point = self_3301;
    let _e5: Point = other_2899;
    let _e6: Translator = point_point_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_3301;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: Point = translator_point_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn point_translator_sandwich(self_3302: Point, other_2900: Translator) -> Translator {
    var self_3303: Point;
    var other_2901: Translator;

    self_3303 = self_3302;
    other_2901 = other_2900;
    let _e4: Point = self_3303;
    let _e5: Translator = other_2901;
    let _e6: Point = point_translator_geometric_anti_product(_e4, _e5);
    let _e7: Point = self_3303;
    let _e8: Point = point_anti_reversal(_e7);
    let _e9: Translator = point_point_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_anti_scalar_sandwich(self_3304: Rotor, other_2902: AntiScalar) -> Rotor {
    var self_3305: Rotor;
    var other_2903: AntiScalar;

    self_3305 = self_3304;
    other_2903 = other_2902;
    let _e4: Rotor = self_3305;
    let _e5: AntiScalar = other_2903;
    let _e6: Rotor = rotor_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3305;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Rotor = rotor_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_flector_sandwich(self_3306: Rotor, other_2904: Flector) -> Flector {
    var self_3307: Rotor;
    var other_2905: Flector;

    self_3307 = self_3306;
    other_2905 = other_2904;
    let _e4: Rotor = self_3307;
    let _e5: Flector = other_2905;
    let _e6: Flector = rotor_flector_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3307;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_multi_vector_sandwich(self_3308: Rotor, other_2906: MultiVector) -> MultiVector {
    var self_3309: Rotor;
    var other_2907: MultiVector;

    self_3309 = self_3308;
    other_2907 = other_2906;
    let _e4: Rotor = self_3309;
    let _e5: MultiVector = other_2907;
    let _e6: MultiVector = rotor_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3309;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_plane_sandwich(self_3310: Rotor, other_2908: Plane) -> Flector {
    var self_3311: Rotor;
    var other_2909: Plane;

    self_3311 = self_3310;
    other_2909 = other_2908;
    let _e4: Rotor = self_3311;
    let _e5: Plane = other_2909;
    let _e6: Flector = rotor_plane_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3311;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_point_sandwich(self_3312: Rotor, other_2910: Point) -> Flector {
    var self_3313: Rotor;
    var other_2911: Point;

    self_3313 = self_3312;
    other_2911 = other_2910;
    let _e4: Rotor = self_3313;
    let _e5: Point = other_2911;
    let _e6: Flector = rotor_point_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3313;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Flector = flector_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn rotor_rotor_sandwich(self_3314: Rotor, other_2912: Rotor) -> Rotor {
    var self_3315: Rotor;
    var other_2913: Rotor;

    self_3315 = self_3314;
    other_2913 = other_2912;
    let _e4: Rotor = self_3315;
    let _e5: Rotor = other_2913;
    let _e6: Rotor = rotor_rotor_geometric_anti_product(_e4, _e5);
    let _e7: Rotor = self_3315;
    let _e8: Rotor = rotor_anti_reversal(_e7);
    let _e9: Rotor = rotor_rotor_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_anti_scalar_sandwich(self_3316: Translator, other_2914: AntiScalar) -> Translator {
    var self_3317: Translator;
    var other_2915: AntiScalar;

    self_3317 = self_3316;
    other_2915 = other_2914;
    let _e4: Translator = self_3317;
    let _e5: AntiScalar = other_2915;
    let _e6: Translator = translator_anti_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3317;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Translator = translator_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_flector_sandwich(self_3318: Translator, other_2916: Flector) -> Flector {
    var self_3319: Translator;
    var other_2917: Flector;

    self_3319 = self_3318;
    other_2917 = other_2916;
    let _e4: Translator = self_3319;
    let _e5: Flector = other_2917;
    let _e6: Flector = translator_flector_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3319;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Flector = flector_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_multi_vector_sandwich(self_3320: Translator, other_2918: MultiVector) -> MultiVector {
    var self_3321: Translator;
    var other_2919: MultiVector;

    self_3321 = self_3320;
    other_2919 = other_2918;
    let _e4: Translator = self_3321;
    let _e5: MultiVector = other_2919;
    let _e6: MultiVector = translator_multi_vector_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3321;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_point_sandwich(self_3322: Translator, other_2920: Point) -> Point {
    var self_3323: Translator;
    var other_2921: Point;

    self_3323 = self_3322;
    other_2921 = other_2920;
    let _e4: Translator = self_3323;
    let _e5: Point = other_2921;
    let _e6: Point = translator_point_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3323;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Point = point_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_scalar_sandwich(self_3324: Translator, other_2922: Scalar) -> Scalar {
    var self_3325: Translator;
    var other_2923: Scalar;

    self_3325 = self_3324;
    other_2923 = other_2922;
    let _e4: Translator = self_3325;
    let _e5: Scalar = other_2923;
    let _e6: Scalar = translator_scalar_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3325;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Scalar = scalar_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn translator_translator_sandwich(self_3326: Translator, other_2924: Translator) -> Translator {
    var self_3327: Translator;
    var other_2925: Translator;

    self_3327 = self_3326;
    other_2925 = other_2924;
    let _e4: Translator = self_3327;
    let _e5: Translator = other_2925;
    let _e6: Translator = translator_translator_geometric_anti_product(_e4, _e5);
    let _e7: Translator = self_3327;
    let _e8: Translator = translator_anti_reversal(_e7);
    let _e9: Translator = translator_translator_geometric_anti_product(_e6, _e8);
    return _e9;
}

fn flector_line_distance(self_3328: Flector, other_2926: Line) -> HomogeneousMagnitude {
    var self_3329: Flector;
    var other_2927: Line;

    self_3329 = self_3328;
    other_2927 = other_2926;
    let _e4: Flector = self_3329;
    let _e5: Line = other_2927;
    let _e6: Plane = flector_line_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_3329;
    let _e10: Line = other_2927;
    let _e11: Point = line_attitude(_e10);
    let _e12: Motor = flector_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_motor_distance(self_3330: Flector, other_2928: Motor) -> HomogeneousMagnitude {
    var self_3331: Flector;
    var other_2929: Motor;

    self_3331 = self_3330;
    other_2929 = other_2928;
    let _e4: Flector = self_3331;
    let _e5: Motor = other_2929;
    let _e6: Plane = flector_motor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Flector = self_3331;
    let _e10: Motor = other_2929;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Motor = flector_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_plane_distance(self_3332: Flector, other_2930: Plane) -> HomogeneousMagnitude {
    var self_3333: Flector;
    var other_2931: Plane;

    self_3333 = self_3332;
    other_2931 = other_2930;
    let _e4: Flector = self_3333;
    let _e5: Plane = other_2931;
    let _e6: AntiScalar = flector_plane_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Flector = self_3333;
    let _e10: Plane = other_2931;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Plane = flector_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn flector_point_distance(self_3334: Flector, other_2932: Point) -> HomogeneousMagnitude {
    var self_3335: Flector;
    var other_2933: Point;

    self_3335 = self_3334;
    other_2933 = other_2932;
    let _e4: Flector = self_3335;
    let _e5: Point = other_2933;
    let _e6: Motor = flector_point_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Flector = self_3335;
    let _e10: Point = other_2933;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Flector = flector_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_anti_scalar_distance(self_3336: HomogeneousMagnitude, other_2934: AntiScalar) -> HomogeneousMagnitude {
    var self_3337: HomogeneousMagnitude;
    var other_2935: AntiScalar;

    self_3337 = self_3336;
    other_2935 = other_2934;
    let _e4: HomogeneousMagnitude = self_3337;
    let _e5: AntiScalar = other_2935;
    let _e6: AntiScalar = homogeneous_magnitude_anti_scalar_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3337;
    let _e10: AntiScalar = other_2935;
    let _e11: Plane = anti_scalar_attitude(_e10);
    let _e12: Plane = homogeneous_magnitude_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_homogeneous_magnitude_distance(self_3338: HomogeneousMagnitude, other_2936: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3339: HomogeneousMagnitude;
    var other_2937: HomogeneousMagnitude;

    self_3339 = self_3338;
    other_2937 = other_2936;
    let _e4: HomogeneousMagnitude = self_3339;
    let _e5: HomogeneousMagnitude = other_2937;
    let _e6: HomogeneousMagnitude = homogeneous_magnitude_homogeneous_magnitude_outer_product(_e4, _e5);
    let _e7: Plane = homogeneous_magnitude_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3339;
    let _e10: HomogeneousMagnitude = other_2937;
    let _e11: Plane = homogeneous_magnitude_attitude(_e10);
    let _e12: Plane = homogeneous_magnitude_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_line_distance(self_3340: HomogeneousMagnitude, other_2938: Line) -> HomogeneousMagnitude {
    var self_3341: HomogeneousMagnitude;
    var other_2939: Line;

    self_3341 = self_3340;
    other_2939 = other_2938;
    let _e4: HomogeneousMagnitude = self_3341;
    let _e5: Line = other_2939;
    let _e6: Line = homogeneous_magnitude_line_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3341;
    let _e10: Line = other_2939;
    let _e11: Point = line_attitude(_e10);
    let _e12: Point = homogeneous_magnitude_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_motor_distance(self_3342: HomogeneousMagnitude, other_2940: Motor) -> HomogeneousMagnitude {
    var self_3343: HomogeneousMagnitude;
    var other_2941: Motor;

    self_3343 = self_3342;
    other_2941 = other_2940;
    let _e4: HomogeneousMagnitude = self_3343;
    let _e5: Motor = other_2941;
    let _e6: Motor = homogeneous_magnitude_motor_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3343;
    let _e10: Motor = other_2941;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Flector = homogeneous_magnitude_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_plane_distance(self_3344: HomogeneousMagnitude, other_2942: Plane) -> HomogeneousMagnitude {
    var self_3345: HomogeneousMagnitude;
    var other_2943: Plane;

    self_3345 = self_3344;
    other_2943 = other_2942;
    let _e4: HomogeneousMagnitude = self_3345;
    let _e5: Plane = other_2943;
    let _e6: Plane = homogeneous_magnitude_plane_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3345;
    let _e10: Plane = other_2943;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Line = homogeneous_magnitude_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn homogeneous_magnitude_rotor_distance(self_3346: HomogeneousMagnitude, other_2944: Rotor) -> HomogeneousMagnitude {
    var self_3347: HomogeneousMagnitude;
    var other_2945: Rotor;

    self_3347 = self_3346;
    other_2945 = other_2944;
    let _e4: HomogeneousMagnitude = self_3347;
    let _e5: Rotor = other_2945;
    let _e6: Rotor = homogeneous_magnitude_rotor_outer_product(_e4, _e5);
    let _e7: Flector = rotor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: HomogeneousMagnitude = self_3347;
    let _e10: Rotor = other_2945;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Flector = homogeneous_magnitude_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_line_distance(self_3348: Line, other_2946: Line) -> HomogeneousMagnitude {
    var self_3349: Line;
    var other_2947: Line;

    self_3349 = self_3348;
    other_2947 = other_2946;
    let _e4: Line = self_3349;
    let _e5: Line = other_2947;
    let _e6: AntiScalar = line_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_3349;
    let _e10: Line = other_2947;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = line_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_motor_distance(self_3350: Line, other_2948: Motor) -> HomogeneousMagnitude {
    var self_3351: Line;
    var other_2949: Motor;

    self_3351 = self_3350;
    other_2949 = other_2948;
    let _e4: Line = self_3351;
    let _e5: Motor = other_2949;
    let _e6: AntiScalar = line_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_3351;
    let _e10: Motor = other_2949;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = line_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_point_distance(self_3352: Line, other_2950: Point) -> HomogeneousMagnitude {
    var self_3353: Line;
    var other_2951: Point;

    self_3353 = self_3352;
    other_2951 = other_2950;
    let _e4: Line = self_3353;
    let _e5: Point = other_2951;
    let _e6: Plane = line_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Line = self_3353;
    let _e10: Point = other_2951;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Line = line_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn line_rotor_distance(self_3354: Line, other_2952: Rotor) -> HomogeneousMagnitude {
    var self_3355: Line;
    var other_2953: Rotor;

    self_3355 = self_3354;
    other_2953 = other_2952;
    let _e4: Line = self_3355;
    let _e5: Rotor = other_2953;
    let _e6: AntiScalar = line_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Line = self_3355;
    let _e10: Rotor = other_2953;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = line_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_line_distance(self_3356: Motor, other_2954: Line) -> HomogeneousMagnitude {
    var self_3357: Motor;
    var other_2955: Line;

    self_3357 = self_3356;
    other_2955 = other_2954;
    let _e4: Motor = self_3357;
    let _e5: Line = other_2955;
    let _e6: AntiScalar = motor_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_3357;
    let _e10: Line = other_2955;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = motor_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_motor_distance(self_3358: Motor, other_2956: Motor) -> HomogeneousMagnitude {
    var self_3359: Motor;
    var other_2957: Motor;

    self_3359 = self_3358;
    other_2957 = other_2956;
    let _e4: Motor = self_3359;
    let _e5: Motor = other_2957;
    let _e6: AntiScalar = motor_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_3359;
    let _e10: Motor = other_2957;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = motor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_point_distance(self_3360: Motor, other_2958: Point) -> HomogeneousMagnitude {
    var self_3361: Motor;
    var other_2959: Point;

    self_3361 = self_3360;
    other_2959 = other_2958;
    let _e4: Motor = self_3361;
    let _e5: Point = other_2959;
    let _e6: Plane = motor_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Motor = self_3361;
    let _e10: Point = other_2959;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Motor = motor_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn motor_rotor_distance(self_3362: Motor, other_2960: Rotor) -> HomogeneousMagnitude {
    var self_3363: Motor;
    var other_2961: Rotor;

    self_3363 = self_3362;
    other_2961 = other_2960;
    let _e4: Motor = self_3363;
    let _e5: Rotor = other_2961;
    let _e6: AntiScalar = motor_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Motor = self_3363;
    let _e10: Rotor = other_2961;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = motor_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn plane_point_distance(self_3364: Plane, other_2962: Point) -> HomogeneousMagnitude {
    var self_3365: Plane;
    var other_2963: Point;

    self_3365 = self_3364;
    other_2963 = other_2962;
    let _e4: Plane = self_3365;
    let _e5: Point = other_2963;
    let _e6: AntiScalar = plane_point_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Plane = self_3365;
    let _e10: Point = other_2963;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Plane = plane_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_line_distance(self_3366: Point, other_2964: Line) -> HomogeneousMagnitude {
    var self_3367: Point;
    var other_2965: Line;

    self_3367 = self_3366;
    other_2965 = other_2964;
    let _e4: Point = self_3367;
    let _e5: Line = other_2965;
    let _e6: Plane = point_line_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_3367;
    let _e10: Line = other_2965;
    let _e11: Point = line_attitude(_e10);
    let _e12: Line = point_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_motor_distance(self_3368: Point, other_2966: Motor) -> HomogeneousMagnitude {
    var self_3369: Point;
    var other_2967: Motor;

    self_3369 = self_3368;
    other_2967 = other_2966;
    let _e4: Point = self_3369;
    let _e5: Motor = other_2967;
    let _e6: Plane = point_motor_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Point = self_3369;
    let _e10: Motor = other_2967;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Motor = point_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = motor_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_plane_distance(self_3370: Point, other_2968: Plane) -> HomogeneousMagnitude {
    var self_3371: Point;
    var other_2969: Plane;

    self_3371 = self_3370;
    other_2969 = other_2968;
    let _e4: Point = self_3371;
    let _e5: Plane = other_2969;
    let _e6: AntiScalar = point_plane_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Point = self_3371;
    let _e10: Plane = other_2969;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Plane = point_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn point_point_distance(self_3372: Point, other_2970: Point) -> HomogeneousMagnitude {
    var self_3373: Point;
    var other_2971: Point;

    self_3373 = self_3372;
    other_2971 = other_2970;
    let _e4: Point = self_3373;
    let _e5: Point = other_2971;
    let _e6: Line = point_point_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: Point = self_3373;
    let _e10: Point = other_2971;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Point = point_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_anti_scalar_distance(self_3374: Scalar, other_2972: AntiScalar) -> HomogeneousMagnitude {
    var self_3375: Scalar;
    var other_2973: AntiScalar;

    self_3375 = self_3374;
    other_2973 = other_2972;
    let _e4: Scalar = self_3375;
    let _e5: AntiScalar = other_2973;
    let _e6: AntiScalar = scalar_anti_scalar_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Scalar = self_3375;
    let _e10: AntiScalar = other_2973;
    let _e11: Plane = anti_scalar_attitude(_e10);
    let _e12: Plane = scalar_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_homogeneous_magnitude_distance(self_3376: Scalar, other_2974: HomogeneousMagnitude) -> HomogeneousMagnitude {
    var self_3377: Scalar;
    var other_2975: HomogeneousMagnitude;

    self_3377 = self_3376;
    other_2975 = other_2974;
    let _e4: Scalar = self_3377;
    let _e5: HomogeneousMagnitude = other_2975;
    let _e6: HomogeneousMagnitude = scalar_homogeneous_magnitude_outer_product(_e4, _e5);
    let _e7: Plane = homogeneous_magnitude_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Scalar = self_3377;
    let _e10: HomogeneousMagnitude = other_2975;
    let _e11: Plane = homogeneous_magnitude_attitude(_e10);
    let _e12: Plane = scalar_plane_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_line_distance(self_3378: Scalar, other_2976: Line) -> HomogeneousMagnitude {
    var self_3379: Scalar;
    var other_2977: Line;

    self_3379 = self_3378;
    other_2977 = other_2976;
    let _e4: Scalar = self_3379;
    let _e5: Line = other_2977;
    let _e6: Line = scalar_line_outer_product(_e4, _e5);
    let _e7: Point = line_attitude(_e6);
    let _e8: Scalar = point_bulk_norm(_e7);
    let _e9: Scalar = self_3379;
    let _e10: Line = other_2977;
    let _e11: Point = line_attitude(_e10);
    let _e12: Point = scalar_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = point_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_motor_distance(self_3380: Scalar, other_2978: Motor) -> HomogeneousMagnitude {
    var self_3381: Scalar;
    var other_2979: Motor;

    self_3381 = self_3380;
    other_2979 = other_2978;
    let _e4: Scalar = self_3381;
    let _e5: Motor = other_2979;
    let _e6: Motor = scalar_motor_outer_product(_e4, _e5);
    let _e7: Flector = motor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Scalar = self_3381;
    let _e10: Motor = other_2979;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Flector = scalar_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_plane_distance(self_3382: Scalar, other_2980: Plane) -> HomogeneousMagnitude {
    var self_3383: Scalar;
    var other_2981: Plane;

    self_3383 = self_3382;
    other_2981 = other_2980;
    let _e4: Scalar = self_3383;
    let _e5: Plane = other_2981;
    let _e6: Plane = scalar_plane_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Scalar = self_3383;
    let _e10: Plane = other_2981;
    let _e11: Line = plane_attitude(_e10);
    let _e12: Line = scalar_line_outer_product(_e9, _e11);
    let _e13: AntiScalar = line_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn scalar_rotor_distance(self_3384: Scalar, other_2982: Rotor) -> HomogeneousMagnitude {
    var self_3385: Scalar;
    var other_2983: Rotor;

    self_3385 = self_3384;
    other_2983 = other_2982;
    let _e4: Scalar = self_3385;
    let _e5: Rotor = other_2983;
    let _e6: Rotor = scalar_rotor_outer_product(_e4, _e5);
    let _e7: Flector = rotor_attitude(_e6);
    let _e8: Scalar = flector_bulk_norm(_e7);
    let _e9: Scalar = self_3385;
    let _e10: Rotor = other_2983;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Flector = scalar_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = flector_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_line_distance(self_3386: Translator, other_2984: Line) -> HomogeneousMagnitude {
    var self_3387: Translator;
    var other_2985: Line;

    self_3387 = self_3386;
    other_2985 = other_2984;
    let _e4: Translator = self_3387;
    let _e5: Line = other_2985;
    let _e6: AntiScalar = translator_line_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_3387;
    let _e10: Line = other_2985;
    let _e11: Point = line_attitude(_e10);
    let _e12: Plane = translator_point_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_motor_distance(self_3388: Translator, other_2986: Motor) -> HomogeneousMagnitude {
    var self_3389: Translator;
    var other_2987: Motor;

    self_3389 = self_3388;
    other_2987 = other_2986;
    let _e4: Translator = self_3389;
    let _e5: Motor = other_2987;
    let _e6: AntiScalar = translator_motor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_3389;
    let _e10: Motor = other_2987;
    let _e11: Flector = motor_attitude(_e10);
    let _e12: Plane = translator_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_point_distance(self_3390: Translator, other_2988: Point) -> HomogeneousMagnitude {
    var self_3391: Translator;
    var other_2989: Point;

    self_3391 = self_3390;
    other_2989 = other_2988;
    let _e4: Translator = self_3391;
    let _e5: Point = other_2989;
    let _e6: Plane = translator_point_outer_product(_e4, _e5);
    let _e7: Line = plane_attitude(_e6);
    let _e8: Scalar = line_bulk_norm(_e7);
    let _e9: Translator = self_3391;
    let _e10: Point = other_2989;
    let _e11: Scalar = point_attitude(_e10);
    let _e12: Translator = translator_scalar_outer_product(_e9, _e11);
    let _e13: AntiScalar = translator_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

fn translator_rotor_distance(self_3392: Translator, other_2990: Rotor) -> HomogeneousMagnitude {
    var self_3393: Translator;
    var other_2991: Rotor;

    self_3393 = self_3392;
    other_2991 = other_2990;
    let _e4: Translator = self_3393;
    let _e5: Rotor = other_2991;
    let _e6: AntiScalar = translator_rotor_outer_product(_e4, _e5);
    let _e7: Plane = anti_scalar_attitude(_e6);
    let _e8: Scalar = plane_bulk_norm(_e7);
    let _e9: Translator = self_3393;
    let _e10: Rotor = other_2991;
    let _e11: Flector = rotor_attitude(_e10);
    let _e12: Plane = translator_flector_outer_product(_e9, _e11);
    let _e13: AntiScalar = plane_weight_norm(_e12);
    let _e14: HomogeneousMagnitude = scalar_anti_scalar_add(_e8, _e13);
    return _e14;
}

