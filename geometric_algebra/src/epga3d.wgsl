struct Scalar {
    g0_: f32,
}

struct AntiScalar {
    g0_: f32,
}

struct MultiVector {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
    g2_: vec4<f32>,
    g3_: vec4<f32>,
}

struct Rotor {
    g0_: vec4<f32>,
}

struct Point {
    g0_: vec4<f32>,
}

struct Plane {
    g0_: vec4<f32>,
}

struct IdealPoint {
    g0_: vec3<f32>,
}

struct Translator {
    g0_: vec4<f32>,
}

struct Line {
    g0_: vec3<f32>,
    g1_: vec3<f32>,
}

struct Motor {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

struct PointAndPlane {
    g0_: vec4<f32>,
    g1_: vec4<f32>,
}

fn scalar_zero() -> Scalar {
    return Scalar(0.0);
}

fn scalar_one() -> Scalar {
    return Scalar(1.0);
}

fn scalar_grade(self_: Scalar) -> i32 {
    return 0;
}

fn scalar_anti_grade(self_1: Scalar) -> i32 {
    return 4;
}

fn scalar_neg(self_2: Scalar) -> Scalar {
    var self_3: Scalar;

    self_3 = self_2;
    let _e2: Scalar = self_3;
    return Scalar((_e2.g0_ * -(1.0)));
}

fn scalar_automorphism(self_4: Scalar) -> Scalar {
    var self_5: Scalar;

    self_5 = self_4;
    let _e2: Scalar = self_5;
    return Scalar(_e2.g0_);
}

fn scalar_reversal(self_6: Scalar) -> Scalar {
    var self_7: Scalar;

    self_7 = self_6;
    let _e2: Scalar = self_7;
    return Scalar(_e2.g0_);
}

fn scalar_conjugation(self_8: Scalar) -> Scalar {
    var self_9: Scalar;

    self_9 = self_8;
    let _e2: Scalar = self_9;
    return Scalar(_e2.g0_);
}

fn scalar_dual(self_10: Scalar) -> AntiScalar {
    var self_11: Scalar;

    self_11 = self_10;
    let _e2: Scalar = self_11;
    return AntiScalar(_e2.g0_);
}

fn scalar_anti_reversal(self_12: Scalar) -> Scalar {
    var self_13: Scalar;

    self_13 = self_12;
    let _e2: Scalar = self_13;
    return Scalar(_e2.g0_);
}

fn scalar_scalar_add(self_14: Scalar, other: Scalar) -> Scalar {
    var self_15: Scalar;
    var other_1: Scalar;

    self_15 = self_14;
    other_1 = other;
    let _e4: Scalar = self_15;
    let _e6: Scalar = other_1;
    return Scalar((_e4.g0_ + _e6.g0_));
}

fn scalar_scalar_sub(self_16: Scalar, other_2: Scalar) -> Scalar {
    var self_17: Scalar;
    var other_3: Scalar;

    self_17 = self_16;
    other_3 = other_2;
    let _e4: Scalar = self_17;
    let _e6: Scalar = other_3;
    return Scalar((_e4.g0_ - _e6.g0_));
}

fn scalar_scalar_mul(self_18: Scalar, other_4: Scalar) -> Scalar {
    var self_19: Scalar;
    var other_5: Scalar;

    self_19 = self_18;
    other_5 = other_4;
    let _e4: Scalar = self_19;
    let _e6: Scalar = other_5;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_div(self_20: Scalar, other_6: Scalar) -> Scalar {
    var self_21: Scalar;
    var other_7: Scalar;

    self_21 = self_20;
    other_7 = other_6;
    let _e4: Scalar = self_21;
    let _e8: Scalar = other_7;
    return Scalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn scalar_scalar_geometric_product(self_22: Scalar, other_8: Scalar) -> Scalar {
    var self_23: Scalar;
    var other_9: Scalar;

    self_23 = self_22;
    other_9 = other_8;
    let _e4: Scalar = self_23;
    let _e6: Scalar = other_9;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_outer_product(self_24: Scalar, other_10: Scalar) -> Scalar {
    var self_25: Scalar;
    var other_11: Scalar;

    self_25 = self_24;
    other_11 = other_10;
    let _e4: Scalar = self_25;
    let _e6: Scalar = other_11;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_inner_product(self_26: Scalar, other_12: Scalar) -> Scalar {
    var self_27: Scalar;
    var other_13: Scalar;

    self_27 = self_26;
    other_13 = other_12;
    let _e4: Scalar = self_27;
    let _e6: Scalar = other_13;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_geometric_anti_product(self_28: Scalar, other_14: Scalar) -> AntiScalar {
    var self_29: Scalar;
    var other_15: Scalar;

    self_29 = self_28;
    other_15 = other_14;
    let _e4: Scalar = self_29;
    let _e6: Scalar = other_15;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_inner_anti_product(self_30: Scalar, other_16: Scalar) -> AntiScalar {
    var self_31: Scalar;
    var other_17: Scalar;

    self_31 = self_30;
    other_17 = other_16;
    let _e4: Scalar = self_31;
    let _e6: Scalar = other_17;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_left_contraction(self_32: Scalar, other_18: Scalar) -> Scalar {
    var self_33: Scalar;
    var other_19: Scalar;

    self_33 = self_32;
    other_19 = other_18;
    let _e4: Scalar = self_33;
    let _e6: Scalar = other_19;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_right_contraction(self_34: Scalar, other_20: Scalar) -> Scalar {
    var self_35: Scalar;
    var other_21: Scalar;

    self_35 = self_34;
    other_21 = other_20;
    let _e4: Scalar = self_35;
    let _e6: Scalar = other_21;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_left_anti_contraction(self_36: Scalar, other_22: Scalar) -> AntiScalar {
    var self_37: Scalar;
    var other_23: Scalar;

    self_37 = self_36;
    other_23 = other_22;
    let _e4: Scalar = self_37;
    let _e6: Scalar = other_23;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_right_anti_contraction(self_38: Scalar, other_24: Scalar) -> AntiScalar {
    var self_39: Scalar;
    var other_25: Scalar;

    self_39 = self_38;
    other_25 = other_24;
    let _e4: Scalar = self_39;
    let _e6: Scalar = other_25;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_scalar_product(self_40: Scalar, other_26: Scalar) -> Scalar {
    var self_41: Scalar;
    var other_27: Scalar;

    self_41 = self_40;
    other_27 = other_26;
    let _e4: Scalar = self_41;
    let _e6: Scalar = other_27;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_scalar_anti_scalar_product(self_42: Scalar, other_28: Scalar) -> AntiScalar {
    var self_43: Scalar;
    var other_29: Scalar;

    self_43 = self_42;
    other_29 = other_28;
    let _e4: Scalar = self_43;
    let _e6: Scalar = other_29;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_product(self_44: Scalar, other_30: AntiScalar) -> AntiScalar {
    var self_45: Scalar;
    var other_31: AntiScalar;

    self_45 = self_44;
    other_31 = other_30;
    let _e4: Scalar = self_45;
    let _e6: AntiScalar = other_31;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_regressive_product(self_46: Scalar, other_32: AntiScalar) -> Scalar {
    var self_47: Scalar;
    var other_33: AntiScalar;

    self_47 = self_46;
    other_33 = other_32;
    let _e4: Scalar = self_47;
    let _e6: AntiScalar = other_33;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_outer_product(self_48: Scalar, other_34: AntiScalar) -> AntiScalar {
    var self_49: Scalar;
    var other_35: AntiScalar;

    self_49 = self_48;
    other_35 = other_34;
    let _e4: Scalar = self_49;
    let _e6: AntiScalar = other_35;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_product(self_50: Scalar, other_36: AntiScalar) -> AntiScalar {
    var self_51: Scalar;
    var other_37: AntiScalar;

    self_51 = self_50;
    other_37 = other_36;
    let _e4: Scalar = self_51;
    let _e6: AntiScalar = other_37;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_geometric_anti_product(self_52: Scalar, other_38: AntiScalar) -> Scalar {
    var self_53: Scalar;
    var other_39: AntiScalar;

    self_53 = self_52;
    other_39 = other_38;
    let _e4: Scalar = self_53;
    let _e6: AntiScalar = other_39;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_inner_anti_product(self_54: Scalar, other_40: AntiScalar) -> Scalar {
    var self_55: Scalar;
    var other_41: AntiScalar;

    self_55 = self_54;
    other_41 = other_40;
    let _e4: Scalar = self_55;
    let _e6: AntiScalar = other_41;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_left_contraction(self_56: Scalar, other_42: AntiScalar) -> AntiScalar {
    var self_57: Scalar;
    var other_43: AntiScalar;

    self_57 = self_56;
    other_43 = other_42;
    let _e4: Scalar = self_57;
    let _e6: AntiScalar = other_43;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn scalar_anti_scalar_right_anti_contraction(self_58: Scalar, other_44: AntiScalar) -> Scalar {
    var self_59: Scalar;
    var other_45: AntiScalar;

    self_59 = self_58;
    other_45 = other_44;
    let _e4: Scalar = self_59;
    let _e6: AntiScalar = other_45;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn scalar_multi_vector_add(self_60: Scalar, other_46: MultiVector) -> MultiVector {
    var self_61: Scalar;
    var other_47: MultiVector;

    self_61 = self_60;
    other_47 = other_46;
    let _e4: Scalar = self_61;
    let _e13: MultiVector = other_47;
    let _e16: MultiVector = other_47;
    let _e18: MultiVector = other_47;
    let _e20: MultiVector = other_47;
    return MultiVector(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e13.g0_), _e16.g1_, _e18.g2_, _e20.g3_);
}

fn scalar_multi_vector_sub(self_62: Scalar, other_48: MultiVector) -> MultiVector {
    var self_63: Scalar;
    var other_49: MultiVector;

    self_63 = self_62;
    other_49 = other_48;
    let _e4: Scalar = self_63;
    let _e13: MultiVector = other_49;
    let _e18: MultiVector = other_49;
    let _e23: MultiVector = other_49;
    let _e28: MultiVector = other_49;
    return MultiVector(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e13.g0_), (vec4<f32>(0.0) - _e18.g1_), (vec4<f32>(0.0) - _e23.g2_), (vec4<f32>(0.0) - _e28.g3_));
}

fn scalar_multi_vector_geometric_product(self_64: Scalar, other_50: MultiVector) -> MultiVector {
    var self_65: Scalar;
    var other_51: MultiVector;

    self_65 = self_64;
    other_51 = other_50;
    let _e4: Scalar = self_65;
    let _e7: MultiVector = other_51;
    let _e10: Scalar = self_65;
    let _e13: MultiVector = other_51;
    let _e16: Scalar = self_65;
    let _e19: MultiVector = other_51;
    let _e22: Scalar = self_65;
    let _e25: MultiVector = other_51;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn scalar_multi_vector_regressive_product(self_66: Scalar, other_52: MultiVector) -> Scalar {
    var self_67: Scalar;
    var other_53: MultiVector;

    self_67 = self_66;
    other_53 = other_52;
    let _e4: Scalar = self_67;
    let _e6: MultiVector = other_53;
    return Scalar((_e4.g0_ * _e6.g3_.x));
}

fn scalar_multi_vector_outer_product(self_68: Scalar, other_54: MultiVector) -> MultiVector {
    var self_69: Scalar;
    var other_55: MultiVector;

    self_69 = self_68;
    other_55 = other_54;
    let _e4: Scalar = self_69;
    let _e7: MultiVector = other_55;
    let _e10: Scalar = self_69;
    let _e13: MultiVector = other_55;
    let _e16: Scalar = self_69;
    let _e19: MultiVector = other_55;
    let _e22: Scalar = self_69;
    let _e25: MultiVector = other_55;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn scalar_multi_vector_inner_product(self_70: Scalar, other_56: MultiVector) -> MultiVector {
    var self_71: Scalar;
    var other_57: MultiVector;

    self_71 = self_70;
    other_57 = other_56;
    let _e4: Scalar = self_71;
    let _e7: MultiVector = other_57;
    let _e10: Scalar = self_71;
    let _e13: MultiVector = other_57;
    let _e16: Scalar = self_71;
    let _e19: MultiVector = other_57;
    let _e22: Scalar = self_71;
    let _e25: MultiVector = other_57;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn scalar_multi_vector_geometric_anti_product(self_72: Scalar, other_58: MultiVector) -> MultiVector {
    var self_73: Scalar;
    var other_59: MultiVector;

    self_73 = self_72;
    other_59 = other_58;
    let _e4: Scalar = self_73;
    let _e7: MultiVector = other_59;
    let _e19: Scalar = self_73;
    let _e22: MultiVector = other_59;
    let _e25: Scalar = self_73;
    let _e28: MultiVector = other_59;
    let _e31: Scalar = self_73;
    let _e34: MultiVector = other_59;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(_e19.g0_) * _e22.g2_), (vec4<f32>(_e25.g0_) * _e28.g1_), ((vec4<f32>(_e31.g0_) * _e34.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_multi_vector_inner_anti_product(self_74: Scalar, other_60: MultiVector) -> MultiVector {
    var self_75: Scalar;
    var other_61: MultiVector;

    self_75 = self_74;
    other_61 = other_60;
    let _e4: Scalar = self_75;
    let _e7: MultiVector = other_61;
    let _e19: Scalar = self_75;
    let _e22: MultiVector = other_61;
    let _e25: Scalar = self_75;
    let _e28: MultiVector = other_61;
    let _e31: Scalar = self_75;
    let _e34: MultiVector = other_61;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(_e19.g0_) * _e22.g2_), (vec4<f32>(_e25.g0_) * _e28.g1_), ((vec4<f32>(_e31.g0_) * _e34.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_multi_vector_left_contraction(self_76: Scalar, other_62: MultiVector) -> MultiVector {
    var self_77: Scalar;
    var other_63: MultiVector;

    self_77 = self_76;
    other_63 = other_62;
    let _e4: Scalar = self_77;
    let _e7: MultiVector = other_63;
    let _e10: Scalar = self_77;
    let _e13: MultiVector = other_63;
    let _e16: Scalar = self_77;
    let _e19: MultiVector = other_63;
    let _e22: Scalar = self_77;
    let _e25: MultiVector = other_63;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn scalar_multi_vector_right_contraction(self_78: Scalar, other_64: MultiVector) -> Scalar {
    var self_79: Scalar;
    var other_65: MultiVector;

    self_79 = self_78;
    other_65 = other_64;
    let _e4: Scalar = self_79;
    let _e6: MultiVector = other_65;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_left_anti_contraction(self_80: Scalar, other_66: MultiVector) -> AntiScalar {
    var self_81: Scalar;
    var other_67: MultiVector;

    self_81 = self_80;
    other_67 = other_66;
    let _e4: Scalar = self_81;
    let _e6: MultiVector = other_67;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_right_anti_contraction(self_82: Scalar, other_68: MultiVector) -> MultiVector {
    var self_83: Scalar;
    var other_69: MultiVector;

    self_83 = self_82;
    other_69 = other_68;
    let _e4: Scalar = self_83;
    let _e7: MultiVector = other_69;
    let _e19: Scalar = self_83;
    let _e22: MultiVector = other_69;
    let _e25: Scalar = self_83;
    let _e28: MultiVector = other_69;
    let _e31: Scalar = self_83;
    let _e34: MultiVector = other_69;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(_e19.g0_) * _e22.g2_), (vec4<f32>(_e25.g0_) * _e28.g1_), ((vec4<f32>(_e31.g0_) * _e34.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_multi_vector_scalar_product(self_84: Scalar, other_70: MultiVector) -> Scalar {
    var self_85: Scalar;
    var other_71: MultiVector;

    self_85 = self_84;
    other_71 = other_70;
    let _e4: Scalar = self_85;
    let _e6: MultiVector = other_71;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_multi_vector_anti_scalar_product(self_86: Scalar, other_72: MultiVector) -> AntiScalar {
    var self_87: Scalar;
    var other_73: MultiVector;

    self_87 = self_86;
    other_73 = other_72;
    let _e4: Scalar = self_87;
    let _e6: MultiVector = other_73;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_rotor_add(self_88: Scalar, other_74: Rotor) -> Rotor {
    var self_89: Scalar;
    var other_75: Rotor;

    self_89 = self_88;
    other_75 = other_74;
    let _e4: Scalar = self_89;
    let _e13: Rotor = other_75;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e13.g0_));
}

fn scalar_rotor_sub(self_90: Scalar, other_76: Rotor) -> Rotor {
    var self_91: Scalar;
    var other_77: Rotor;

    self_91 = self_90;
    other_77 = other_76;
    let _e4: Scalar = self_91;
    let _e13: Rotor = other_77;
    return Rotor(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e13.g0_));
}

fn scalar_rotor_geometric_product(self_92: Scalar, other_78: Rotor) -> Rotor {
    var self_93: Scalar;
    var other_79: Rotor;

    self_93 = self_92;
    other_79 = other_78;
    let _e4: Scalar = self_93;
    let _e7: Rotor = other_79;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_outer_product(self_94: Scalar, other_80: Rotor) -> Rotor {
    var self_95: Scalar;
    var other_81: Rotor;

    self_95 = self_94;
    other_81 = other_80;
    let _e4: Scalar = self_95;
    let _e7: Rotor = other_81;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_inner_product(self_96: Scalar, other_82: Rotor) -> Rotor {
    var self_97: Scalar;
    var other_83: Rotor;

    self_97 = self_96;
    other_83 = other_82;
    let _e4: Scalar = self_97;
    let _e7: Rotor = other_83;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_left_contraction(self_98: Scalar, other_84: Rotor) -> Rotor {
    var self_99: Scalar;
    var other_85: Rotor;

    self_99 = self_98;
    other_85 = other_84;
    let _e4: Scalar = self_99;
    let _e7: Rotor = other_85;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_rotor_right_contraction(self_100: Scalar, other_86: Rotor) -> Scalar {
    var self_101: Scalar;
    var other_87: Rotor;

    self_101 = self_100;
    other_87 = other_86;
    let _e4: Scalar = self_101;
    let _e6: Rotor = other_87;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_rotor_left_anti_contraction(self_102: Scalar, other_88: Rotor) -> AntiScalar {
    var self_103: Scalar;
    var other_89: Rotor;

    self_103 = self_102;
    other_89 = other_88;
    let _e4: Scalar = self_103;
    let _e6: Rotor = other_89;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_rotor_scalar_product(self_104: Scalar, other_90: Rotor) -> Scalar {
    var self_105: Scalar;
    var other_91: Rotor;

    self_105 = self_104;
    other_91 = other_90;
    let _e4: Scalar = self_105;
    let _e6: Rotor = other_91;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_rotor_anti_scalar_product(self_106: Scalar, other_92: Rotor) -> AntiScalar {
    var self_107: Scalar;
    var other_93: Rotor;

    self_107 = self_106;
    other_93 = other_92;
    let _e4: Scalar = self_107;
    let _e6: Rotor = other_93;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_point_geometric_product(self_108: Scalar, other_94: Point) -> Point {
    var self_109: Scalar;
    var other_95: Point;

    self_109 = self_108;
    other_95 = other_94;
    let _e4: Scalar = self_109;
    let _e7: Point = other_95;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_outer_product(self_110: Scalar, other_96: Point) -> Point {
    var self_111: Scalar;
    var other_97: Point;

    self_111 = self_110;
    other_97 = other_96;
    let _e4: Scalar = self_111;
    let _e7: Point = other_97;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_inner_product(self_112: Scalar, other_98: Point) -> Point {
    var self_113: Scalar;
    var other_99: Point;

    self_113 = self_112;
    other_99 = other_98;
    let _e4: Scalar = self_113;
    let _e7: Point = other_99;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_geometric_anti_product(self_114: Scalar, other_100: Point) -> Plane {
    var self_115: Scalar;
    var other_101: Point;

    self_115 = self_114;
    other_101 = other_100;
    let _e4: Scalar = self_115;
    let _e7: Point = other_101;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_inner_anti_product(self_116: Scalar, other_102: Point) -> Plane {
    var self_117: Scalar;
    var other_103: Point;

    self_117 = self_116;
    other_103 = other_102;
    let _e4: Scalar = self_117;
    let _e7: Point = other_103;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_left_contraction(self_118: Scalar, other_104: Point) -> Point {
    var self_119: Scalar;
    var other_105: Point;

    self_119 = self_118;
    other_105 = other_104;
    let _e4: Scalar = self_119;
    let _e7: Point = other_105;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_point_right_anti_contraction(self_120: Scalar, other_106: Point) -> Plane {
    var self_121: Scalar;
    var other_107: Point;

    self_121 = self_120;
    other_107 = other_106;
    let _e4: Scalar = self_121;
    let _e7: Point = other_107;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_ideal_point_add(self_122: Scalar, other_108: IdealPoint) -> Translator {
    var self_123: Scalar;
    var other_109: IdealPoint;

    self_123 = self_122;
    other_109 = other_108;
    let _e4: Scalar = self_123;
    let _e13: IdealPoint = other_109;
    let _e16: IdealPoint = other_109;
    let _e19: IdealPoint = other_109;
    let _e22: IdealPoint = other_109;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + (vec4<f32>(_e13.g0_.x, _e16.g0_.x, _e19.g0_.y, _e22.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn scalar_ideal_point_sub(self_124: Scalar, other_110: IdealPoint) -> Translator {
    var self_125: Scalar;
    var other_111: IdealPoint;

    self_125 = self_124;
    other_111 = other_110;
    let _e4: Scalar = self_125;
    let _e13: IdealPoint = other_111;
    let _e16: IdealPoint = other_111;
    let _e19: IdealPoint = other_111;
    let _e22: IdealPoint = other_111;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - (vec4<f32>(_e13.g0_.x, _e16.g0_.x, _e19.g0_.y, _e22.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn scalar_ideal_point_geometric_product(self_126: Scalar, other_112: IdealPoint) -> IdealPoint {
    var self_127: Scalar;
    var other_113: IdealPoint;

    self_127 = self_126;
    other_113 = other_112;
    let _e4: Scalar = self_127;
    let _e7: IdealPoint = other_113;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_ideal_point_outer_product(self_128: Scalar, other_114: IdealPoint) -> IdealPoint {
    var self_129: Scalar;
    var other_115: IdealPoint;

    self_129 = self_128;
    other_115 = other_114;
    let _e4: Scalar = self_129;
    let _e7: IdealPoint = other_115;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_ideal_point_inner_product(self_130: Scalar, other_116: IdealPoint) -> IdealPoint {
    var self_131: Scalar;
    var other_117: IdealPoint;

    self_131 = self_130;
    other_117 = other_116;
    let _e4: Scalar = self_131;
    let _e7: IdealPoint = other_117;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_ideal_point_left_contraction(self_132: Scalar, other_118: IdealPoint) -> IdealPoint {
    var self_133: Scalar;
    var other_119: IdealPoint;

    self_133 = self_132;
    other_119 = other_118;
    let _e4: Scalar = self_133;
    let _e7: IdealPoint = other_119;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_geometric_product(self_134: Scalar, other_120: Plane) -> Plane {
    var self_135: Scalar;
    var other_121: Plane;

    self_135 = self_134;
    other_121 = other_120;
    let _e4: Scalar = self_135;
    let _e7: Plane = other_121;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_outer_product(self_136: Scalar, other_122: Plane) -> Plane {
    var self_137: Scalar;
    var other_123: Plane;

    self_137 = self_136;
    other_123 = other_122;
    let _e4: Scalar = self_137;
    let _e7: Plane = other_123;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_product(self_138: Scalar, other_124: Plane) -> Plane {
    var self_139: Scalar;
    var other_125: Plane;

    self_139 = self_138;
    other_125 = other_124;
    let _e4: Scalar = self_139;
    let _e7: Plane = other_125;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_geometric_anti_product(self_140: Scalar, other_126: Plane) -> Point {
    var self_141: Scalar;
    var other_127: Plane;

    self_141 = self_140;
    other_127 = other_126;
    let _e4: Scalar = self_141;
    let _e7: Plane = other_127;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_inner_anti_product(self_142: Scalar, other_128: Plane) -> Point {
    var self_143: Scalar;
    var other_129: Plane;

    self_143 = self_142;
    other_129 = other_128;
    let _e4: Scalar = self_143;
    let _e7: Plane = other_129;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_left_contraction(self_144: Scalar, other_130: Plane) -> Plane {
    var self_145: Scalar;
    var other_131: Plane;

    self_145 = self_144;
    other_131 = other_130;
    let _e4: Scalar = self_145;
    let _e7: Plane = other_131;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_plane_right_anti_contraction(self_146: Scalar, other_132: Plane) -> Point {
    var self_147: Scalar;
    var other_133: Plane;

    self_147 = self_146;
    other_133 = other_132;
    let _e4: Scalar = self_147;
    let _e7: Plane = other_133;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_line_geometric_product(self_148: Scalar, other_134: Line) -> Line {
    var self_149: Scalar;
    var other_135: Line;

    self_149 = self_148;
    other_135 = other_134;
    let _e4: Scalar = self_149;
    let _e7: Line = other_135;
    let _e10: Scalar = self_149;
    let _e13: Line = other_135;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_outer_product(self_150: Scalar, other_136: Line) -> Line {
    var self_151: Scalar;
    var other_137: Line;

    self_151 = self_150;
    other_137 = other_136;
    let _e4: Scalar = self_151;
    let _e7: Line = other_137;
    let _e10: Scalar = self_151;
    let _e13: Line = other_137;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_inner_product(self_152: Scalar, other_138: Line) -> Line {
    var self_153: Scalar;
    var other_139: Line;

    self_153 = self_152;
    other_139 = other_138;
    let _e4: Scalar = self_153;
    let _e7: Line = other_139;
    let _e10: Scalar = self_153;
    let _e13: Line = other_139;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_geometric_anti_product(self_154: Scalar, other_140: Line) -> Line {
    var self_155: Scalar;
    var other_141: Line;

    self_155 = self_154;
    other_141 = other_140;
    let _e6: Scalar = self_155;
    let _e9: Line = other_141;
    let _e15: Scalar = self_155;
    let _e18: Line = other_141;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn scalar_line_inner_anti_product(self_156: Scalar, other_142: Line) -> Line {
    var self_157: Scalar;
    var other_143: Line;

    self_157 = self_156;
    other_143 = other_142;
    let _e6: Scalar = self_157;
    let _e9: Line = other_143;
    let _e15: Scalar = self_157;
    let _e18: Line = other_143;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn scalar_line_left_contraction(self_158: Scalar, other_144: Line) -> Line {
    var self_159: Scalar;
    var other_145: Line;

    self_159 = self_158;
    other_145 = other_144;
    let _e4: Scalar = self_159;
    let _e7: Line = other_145;
    let _e10: Scalar = self_159;
    let _e13: Line = other_145;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_line_right_anti_contraction(self_160: Scalar, other_146: Line) -> Line {
    var self_161: Scalar;
    var other_147: Line;

    self_161 = self_160;
    other_147 = other_146;
    let _e6: Scalar = self_161;
    let _e9: Line = other_147;
    let _e15: Scalar = self_161;
    let _e18: Line = other_147;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn scalar_translator_add(self_162: Scalar, other_148: Translator) -> Translator {
    var self_163: Scalar;
    var other_149: Translator;

    self_163 = self_162;
    other_149 = other_148;
    let _e4: Scalar = self_163;
    let _e13: Translator = other_149;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e13.g0_));
}

fn scalar_translator_sub(self_164: Scalar, other_150: Translator) -> Translator {
    var self_165: Scalar;
    var other_151: Translator;

    self_165 = self_164;
    other_151 = other_150;
    let _e4: Scalar = self_165;
    let _e13: Translator = other_151;
    return Translator(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e13.g0_));
}

fn scalar_translator_geometric_product(self_166: Scalar, other_152: Translator) -> Translator {
    var self_167: Scalar;
    var other_153: Translator;

    self_167 = self_166;
    other_153 = other_152;
    let _e4: Scalar = self_167;
    let _e7: Translator = other_153;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_outer_product(self_168: Scalar, other_154: Translator) -> Translator {
    var self_169: Scalar;
    var other_155: Translator;

    self_169 = self_168;
    other_155 = other_154;
    let _e4: Scalar = self_169;
    let _e7: Translator = other_155;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_inner_product(self_170: Scalar, other_156: Translator) -> Translator {
    var self_171: Scalar;
    var other_157: Translator;

    self_171 = self_170;
    other_157 = other_156;
    let _e4: Scalar = self_171;
    let _e7: Translator = other_157;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_left_contraction(self_172: Scalar, other_158: Translator) -> Translator {
    var self_173: Scalar;
    var other_159: Translator;

    self_173 = self_172;
    other_159 = other_158;
    let _e4: Scalar = self_173;
    let _e7: Translator = other_159;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn scalar_translator_right_contraction(self_174: Scalar, other_160: Translator) -> Scalar {
    var self_175: Scalar;
    var other_161: Translator;

    self_175 = self_174;
    other_161 = other_160;
    let _e4: Scalar = self_175;
    let _e6: Translator = other_161;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_translator_left_anti_contraction(self_176: Scalar, other_162: Translator) -> AntiScalar {
    var self_177: Scalar;
    var other_163: Translator;

    self_177 = self_176;
    other_163 = other_162;
    let _e4: Scalar = self_177;
    let _e6: Translator = other_163;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_translator_scalar_product(self_178: Scalar, other_164: Translator) -> Scalar {
    var self_179: Scalar;
    var other_165: Translator;

    self_179 = self_178;
    other_165 = other_164;
    let _e4: Scalar = self_179;
    let _e6: Translator = other_165;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_translator_anti_scalar_product(self_180: Scalar, other_166: Translator) -> AntiScalar {
    var self_181: Scalar;
    var other_167: Translator;

    self_181 = self_180;
    other_167 = other_166;
    let _e4: Scalar = self_181;
    let _e6: Translator = other_167;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_motor_add(self_182: Scalar, other_168: Motor) -> Motor {
    var self_183: Scalar;
    var other_169: Motor;

    self_183 = self_182;
    other_169 = other_168;
    let _e4: Scalar = self_183;
    let _e13: Motor = other_169;
    let _e16: Motor = other_169;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e13.g0_), _e16.g1_);
}

fn scalar_motor_sub(self_184: Scalar, other_170: Motor) -> Motor {
    var self_185: Scalar;
    var other_171: Motor;

    self_185 = self_184;
    other_171 = other_170;
    let _e4: Scalar = self_185;
    let _e13: Motor = other_171;
    let _e18: Motor = other_171;
    return Motor(((vec4<f32>(_e4.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e13.g0_), (vec4<f32>(0.0) - _e18.g1_));
}

fn scalar_motor_geometric_product(self_186: Scalar, other_172: Motor) -> Motor {
    var self_187: Scalar;
    var other_173: Motor;

    self_187 = self_186;
    other_173 = other_172;
    let _e4: Scalar = self_187;
    let _e7: Motor = other_173;
    let _e10: Scalar = self_187;
    let _e13: Motor = other_173;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_regressive_product(self_188: Scalar, other_174: Motor) -> Scalar {
    var self_189: Scalar;
    var other_175: Motor;

    self_189 = self_188;
    other_175 = other_174;
    let _e4: Scalar = self_189;
    let _e6: Motor = other_175;
    return Scalar((_e4.g0_ * _e6.g1_.x));
}

fn scalar_motor_outer_product(self_190: Scalar, other_176: Motor) -> Motor {
    var self_191: Scalar;
    var other_177: Motor;

    self_191 = self_190;
    other_177 = other_176;
    let _e4: Scalar = self_191;
    let _e7: Motor = other_177;
    let _e10: Scalar = self_191;
    let _e13: Motor = other_177;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_inner_product(self_192: Scalar, other_178: Motor) -> Motor {
    var self_193: Scalar;
    var other_179: Motor;

    self_193 = self_192;
    other_179 = other_178;
    let _e4: Scalar = self_193;
    let _e7: Motor = other_179;
    let _e10: Scalar = self_193;
    let _e13: Motor = other_179;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_geometric_anti_product(self_194: Scalar, other_180: Motor) -> Motor {
    var self_195: Scalar;
    var other_181: Motor;

    self_195 = self_194;
    other_181 = other_180;
    let _e4: Scalar = self_195;
    let _e7: Motor = other_181;
    let _e19: Scalar = self_195;
    let _e22: Motor = other_181;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_motor_inner_anti_product(self_196: Scalar, other_182: Motor) -> Motor {
    var self_197: Scalar;
    var other_183: Motor;

    self_197 = self_196;
    other_183 = other_182;
    let _e4: Scalar = self_197;
    let _e7: Motor = other_183;
    let _e19: Scalar = self_197;
    let _e22: Motor = other_183;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_motor_left_contraction(self_198: Scalar, other_184: Motor) -> Motor {
    var self_199: Scalar;
    var other_185: Motor;

    self_199 = self_198;
    other_185 = other_184;
    let _e4: Scalar = self_199;
    let _e7: Motor = other_185;
    let _e10: Scalar = self_199;
    let _e13: Motor = other_185;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_motor_right_contraction(self_200: Scalar, other_186: Motor) -> Scalar {
    var self_201: Scalar;
    var other_187: Motor;

    self_201 = self_200;
    other_187 = other_186;
    let _e4: Scalar = self_201;
    let _e6: Motor = other_187;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_motor_left_anti_contraction(self_202: Scalar, other_188: Motor) -> AntiScalar {
    var self_203: Scalar;
    var other_189: Motor;

    self_203 = self_202;
    other_189 = other_188;
    let _e4: Scalar = self_203;
    let _e6: Motor = other_189;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_motor_right_anti_contraction(self_204: Scalar, other_190: Motor) -> Motor {
    var self_205: Scalar;
    var other_191: Motor;

    self_205 = self_204;
    other_191 = other_190;
    let _e4: Scalar = self_205;
    let _e7: Motor = other_191;
    let _e19: Scalar = self_205;
    let _e22: Motor = other_191;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn scalar_motor_scalar_product(self_206: Scalar, other_192: Motor) -> Scalar {
    var self_207: Scalar;
    var other_193: Motor;

    self_207 = self_206;
    other_193 = other_192;
    let _e4: Scalar = self_207;
    let _e6: Motor = other_193;
    return Scalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_motor_anti_scalar_product(self_208: Scalar, other_194: Motor) -> AntiScalar {
    var self_209: Scalar;
    var other_195: Motor;

    self_209 = self_208;
    other_195 = other_194;
    let _e4: Scalar = self_209;
    let _e6: Motor = other_195;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn scalar_point_and_plane_geometric_product(self_210: Scalar, other_196: PointAndPlane) -> PointAndPlane {
    var self_211: Scalar;
    var other_197: PointAndPlane;

    self_211 = self_210;
    other_197 = other_196;
    let _e4: Scalar = self_211;
    let _e7: PointAndPlane = other_197;
    let _e10: Scalar = self_211;
    let _e13: PointAndPlane = other_197;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_point_and_plane_outer_product(self_212: Scalar, other_198: PointAndPlane) -> PointAndPlane {
    var self_213: Scalar;
    var other_199: PointAndPlane;

    self_213 = self_212;
    other_199 = other_198;
    let _e4: Scalar = self_213;
    let _e7: PointAndPlane = other_199;
    let _e10: Scalar = self_213;
    let _e13: PointAndPlane = other_199;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_point_and_plane_inner_product(self_214: Scalar, other_200: PointAndPlane) -> PointAndPlane {
    var self_215: Scalar;
    var other_201: PointAndPlane;

    self_215 = self_214;
    other_201 = other_200;
    let _e4: Scalar = self_215;
    let _e7: PointAndPlane = other_201;
    let _e10: Scalar = self_215;
    let _e13: PointAndPlane = other_201;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_point_and_plane_geometric_anti_product(self_216: Scalar, other_202: PointAndPlane) -> PointAndPlane {
    var self_217: Scalar;
    var other_203: PointAndPlane;

    self_217 = self_216;
    other_203 = other_202;
    let _e4: Scalar = self_217;
    let _e7: PointAndPlane = other_203;
    let _e10: Scalar = self_217;
    let _e13: PointAndPlane = other_203;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g1_), (vec4<f32>(_e10.g0_) * _e13.g0_));
}

fn scalar_point_and_plane_inner_anti_product(self_218: Scalar, other_204: PointAndPlane) -> PointAndPlane {
    var self_219: Scalar;
    var other_205: PointAndPlane;

    self_219 = self_218;
    other_205 = other_204;
    let _e4: Scalar = self_219;
    let _e7: PointAndPlane = other_205;
    let _e10: Scalar = self_219;
    let _e13: PointAndPlane = other_205;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g1_), (vec4<f32>(_e10.g0_) * _e13.g0_));
}

fn scalar_point_and_plane_left_contraction(self_220: Scalar, other_206: PointAndPlane) -> PointAndPlane {
    var self_221: Scalar;
    var other_207: PointAndPlane;

    self_221 = self_220;
    other_207 = other_206;
    let _e4: Scalar = self_221;
    let _e7: PointAndPlane = other_207;
    let _e10: Scalar = self_221;
    let _e13: PointAndPlane = other_207;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn scalar_point_and_plane_right_anti_contraction(self_222: Scalar, other_208: PointAndPlane) -> PointAndPlane {
    var self_223: Scalar;
    var other_209: PointAndPlane;

    self_223 = self_222;
    other_209 = other_208;
    let _e4: Scalar = self_223;
    let _e7: PointAndPlane = other_209;
    let _e10: Scalar = self_223;
    let _e13: PointAndPlane = other_209;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g1_), (vec4<f32>(_e10.g0_) * _e13.g0_));
}

fn scalar_squared_magnitude(self_224: Scalar) -> Scalar {
    var self_225: Scalar;

    self_225 = self_224;
    let _e2: Scalar = self_225;
    let _e3: Scalar = self_225;
    let _e4: Scalar = scalar_reversal(_e3);
    let _e5: Scalar = scalar_scalar_scalar_product(_e2, _e4);
    return _e5;
}

fn scalar_magnitude(self_226: Scalar) -> Scalar {
    var self_227: Scalar;

    self_227 = self_226;
    let _e2: Scalar = self_227;
    let _e3: Scalar = scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn scalar_bulk_norm(self_228: Scalar) -> Scalar {
    var self_229: Scalar;

    self_229 = self_228;
    let _e2: Scalar = self_229;
    let _e3: Scalar = scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn scalar_squared_anti_magnitude(self_230: Scalar) -> AntiScalar {
    var self_231: Scalar;

    self_231 = self_230;
    let _e2: Scalar = self_231;
    let _e3: Scalar = self_231;
    let _e4: Scalar = scalar_anti_reversal(_e3);
    let _e5: AntiScalar = scalar_scalar_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn scalar_weight_norm(self_232: Scalar) -> AntiScalar {
    var self_233: Scalar;

    self_233 = self_232;
    let _e2: Scalar = self_233;
    let _e3: AntiScalar = scalar_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn scalar_scale(self_234: Scalar, other_210: f32) -> Scalar {
    var self_235: Scalar;
    var other_211: f32;

    self_235 = self_234;
    other_211 = other_210;
    let _e4: Scalar = self_235;
    let _e5: f32 = other_211;
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn scalar_signum(self_236: Scalar) -> Scalar {
    var self_237: Scalar;

    self_237 = self_236;
    let _e2: Scalar = self_237;
    let _e3: Scalar = self_237;
    let _e4: Scalar = scalar_magnitude(_e3);
    let _e9: Scalar = scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn scalar_inverse(self_238: Scalar) -> Scalar {
    var self_239: Scalar;

    self_239 = self_238;
    let _e2: Scalar = self_239;
    let _e3: Scalar = scalar_reversal(_e2);
    let _e4: Scalar = self_239;
    let _e5: Scalar = scalar_squared_magnitude(_e4);
    let _e10: Scalar = scalar_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn scalar_unitize(self_240: Scalar) -> Scalar {
    var self_241: Scalar;

    self_241 = self_240;
    let _e2: Scalar = self_241;
    let _e3: Scalar = self_241;
    let _e4: AntiScalar = scalar_weight_norm(_e3);
    let _e9: Scalar = scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn anti_scalar_zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn anti_scalar_grade(self_242: AntiScalar) -> i32 {
    return 4;
}

fn anti_scalar_anti_grade(self_243: AntiScalar) -> i32 {
    return 0;
}

fn anti_scalar_neg(self_244: AntiScalar) -> AntiScalar {
    var self_245: AntiScalar;

    self_245 = self_244;
    let _e2: AntiScalar = self_245;
    return AntiScalar((_e2.g0_ * -(1.0)));
}

fn anti_scalar_automorphism(self_246: AntiScalar) -> AntiScalar {
    var self_247: AntiScalar;

    self_247 = self_246;
    let _e2: AntiScalar = self_247;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_reversal(self_248: AntiScalar) -> AntiScalar {
    var self_249: AntiScalar;

    self_249 = self_248;
    let _e2: AntiScalar = self_249;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_conjugation(self_250: AntiScalar) -> AntiScalar {
    var self_251: AntiScalar;

    self_251 = self_250;
    let _e2: AntiScalar = self_251;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_dual(self_252: AntiScalar) -> Scalar {
    var self_253: AntiScalar;

    self_253 = self_252;
    let _e2: AntiScalar = self_253;
    return Scalar(_e2.g0_);
}

fn anti_scalar_anti_reversal(self_254: AntiScalar) -> AntiScalar {
    var self_255: AntiScalar;

    self_255 = self_254;
    let _e2: AntiScalar = self_255;
    return AntiScalar(_e2.g0_);
}

fn anti_scalar_scalar_geometric_product(self_256: AntiScalar, other_212: Scalar) -> AntiScalar {
    var self_257: AntiScalar;
    var other_213: Scalar;

    self_257 = self_256;
    other_213 = other_212;
    let _e4: AntiScalar = self_257;
    let _e6: Scalar = other_213;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_regressive_product(self_258: AntiScalar, other_214: Scalar) -> Scalar {
    var self_259: AntiScalar;
    var other_215: Scalar;

    self_259 = self_258;
    other_215 = other_214;
    let _e4: AntiScalar = self_259;
    let _e6: Scalar = other_215;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_outer_product(self_260: AntiScalar, other_216: Scalar) -> AntiScalar {
    var self_261: AntiScalar;
    var other_217: Scalar;

    self_261 = self_260;
    other_217 = other_216;
    let _e4: AntiScalar = self_261;
    let _e6: Scalar = other_217;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_product(self_262: AntiScalar, other_218: Scalar) -> AntiScalar {
    var self_263: AntiScalar;
    var other_219: Scalar;

    self_263 = self_262;
    other_219 = other_218;
    let _e4: AntiScalar = self_263;
    let _e6: Scalar = other_219;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_geometric_anti_product(self_264: AntiScalar, other_220: Scalar) -> Scalar {
    var self_265: AntiScalar;
    var other_221: Scalar;

    self_265 = self_264;
    other_221 = other_220;
    let _e4: AntiScalar = self_265;
    let _e6: Scalar = other_221;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_inner_anti_product(self_266: AntiScalar, other_222: Scalar) -> Scalar {
    var self_267: AntiScalar;
    var other_223: Scalar;

    self_267 = self_266;
    other_223 = other_222;
    let _e4: AntiScalar = self_267;
    let _e6: Scalar = other_223;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_right_contraction(self_268: AntiScalar, other_224: Scalar) -> AntiScalar {
    var self_269: AntiScalar;
    var other_225: Scalar;

    self_269 = self_268;
    other_225 = other_224;
    let _e4: AntiScalar = self_269;
    let _e6: Scalar = other_225;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_scalar_left_anti_contraction(self_270: AntiScalar, other_226: Scalar) -> Scalar {
    var self_271: AntiScalar;
    var other_227: Scalar;

    self_271 = self_270;
    other_227 = other_226;
    let _e4: AntiScalar = self_271;
    let _e6: Scalar = other_227;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_add(self_272: AntiScalar, other_228: AntiScalar) -> AntiScalar {
    var self_273: AntiScalar;
    var other_229: AntiScalar;

    self_273 = self_272;
    other_229 = other_228;
    let _e4: AntiScalar = self_273;
    let _e6: AntiScalar = other_229;
    return AntiScalar((_e4.g0_ + _e6.g0_));
}

fn anti_scalar_anti_scalar_sub(self_274: AntiScalar, other_230: AntiScalar) -> AntiScalar {
    var self_275: AntiScalar;
    var other_231: AntiScalar;

    self_275 = self_274;
    other_231 = other_230;
    let _e4: AntiScalar = self_275;
    let _e6: AntiScalar = other_231;
    return AntiScalar((_e4.g0_ - _e6.g0_));
}

fn anti_scalar_anti_scalar_mul(self_276: AntiScalar, other_232: AntiScalar) -> AntiScalar {
    var self_277: AntiScalar;
    var other_233: AntiScalar;

    self_277 = self_276;
    other_233 = other_232;
    let _e4: AntiScalar = self_277;
    let _e6: AntiScalar = other_233;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_div(self_278: AntiScalar, other_234: AntiScalar) -> AntiScalar {
    var self_279: AntiScalar;
    var other_235: AntiScalar;

    self_279 = self_278;
    other_235 = other_234;
    let _e4: AntiScalar = self_279;
    let _e8: AntiScalar = other_235;
    return AntiScalar((((_e4.g0_ * 1.0) / _e8.g0_) * 1.0));
}

fn anti_scalar_anti_scalar_geometric_product(self_280: AntiScalar, other_236: AntiScalar) -> Scalar {
    var self_281: AntiScalar;
    var other_237: AntiScalar;

    self_281 = self_280;
    other_237 = other_236;
    let _e4: AntiScalar = self_281;
    let _e6: AntiScalar = other_237;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_regressive_product(self_282: AntiScalar, other_238: AntiScalar) -> AntiScalar {
    var self_283: AntiScalar;
    var other_239: AntiScalar;

    self_283 = self_282;
    other_239 = other_238;
    let _e4: AntiScalar = self_283;
    let _e6: AntiScalar = other_239;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_inner_product(self_284: AntiScalar, other_240: AntiScalar) -> Scalar {
    var self_285: AntiScalar;
    var other_241: AntiScalar;

    self_285 = self_284;
    other_241 = other_240;
    let _e4: AntiScalar = self_285;
    let _e6: AntiScalar = other_241;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_geometric_anti_product(self_286: AntiScalar, other_242: AntiScalar) -> AntiScalar {
    var self_287: AntiScalar;
    var other_243: AntiScalar;

    self_287 = self_286;
    other_243 = other_242;
    let _e4: AntiScalar = self_287;
    let _e6: AntiScalar = other_243;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_inner_anti_product(self_288: AntiScalar, other_244: AntiScalar) -> AntiScalar {
    var self_289: AntiScalar;
    var other_245: AntiScalar;

    self_289 = self_288;
    other_245 = other_244;
    let _e4: AntiScalar = self_289;
    let _e6: AntiScalar = other_245;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_left_contraction(self_290: AntiScalar, other_246: AntiScalar) -> Scalar {
    var self_291: AntiScalar;
    var other_247: AntiScalar;

    self_291 = self_290;
    other_247 = other_246;
    let _e4: AntiScalar = self_291;
    let _e6: AntiScalar = other_247;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_right_contraction(self_292: AntiScalar, other_248: AntiScalar) -> Scalar {
    var self_293: AntiScalar;
    var other_249: AntiScalar;

    self_293 = self_292;
    other_249 = other_248;
    let _e4: AntiScalar = self_293;
    let _e6: AntiScalar = other_249;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_left_anti_contraction(self_294: AntiScalar, other_250: AntiScalar) -> AntiScalar {
    var self_295: AntiScalar;
    var other_251: AntiScalar;

    self_295 = self_294;
    other_251 = other_250;
    let _e4: AntiScalar = self_295;
    let _e6: AntiScalar = other_251;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_right_anti_contraction(self_296: AntiScalar, other_252: AntiScalar) -> AntiScalar {
    var self_297: AntiScalar;
    var other_253: AntiScalar;

    self_297 = self_296;
    other_253 = other_252;
    let _e4: AntiScalar = self_297;
    let _e6: AntiScalar = other_253;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_scalar_product(self_298: AntiScalar, other_254: AntiScalar) -> Scalar {
    var self_299: AntiScalar;
    var other_255: AntiScalar;

    self_299 = self_298;
    other_255 = other_254;
    let _e4: AntiScalar = self_299;
    let _e6: AntiScalar = other_255;
    return Scalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_anti_scalar_anti_scalar_product(self_300: AntiScalar, other_256: AntiScalar) -> AntiScalar {
    var self_301: AntiScalar;
    var other_257: AntiScalar;

    self_301 = self_300;
    other_257 = other_256;
    let _e4: AntiScalar = self_301;
    let _e6: AntiScalar = other_257;
    return AntiScalar((_e4.g0_ * _e6.g0_));
}

fn anti_scalar_multi_vector_add(self_302: AntiScalar, other_258: MultiVector) -> MultiVector {
    var self_303: AntiScalar;
    var other_259: MultiVector;

    self_303 = self_302;
    other_259 = other_258;
    let _e4: MultiVector = other_259;
    let _e6: MultiVector = other_259;
    let _e8: MultiVector = other_259;
    let _e10: AntiScalar = self_303;
    let _e19: MultiVector = other_259;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, ((vec4<f32>(_e10.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e19.g3_));
}

fn anti_scalar_multi_vector_sub(self_304: AntiScalar, other_260: MultiVector) -> MultiVector {
    var self_305: AntiScalar;
    var other_261: MultiVector;

    self_305 = self_304;
    other_261 = other_260;
    let _e6: MultiVector = other_261;
    let _e11: MultiVector = other_261;
    let _e16: MultiVector = other_261;
    let _e19: AntiScalar = self_305;
    let _e28: MultiVector = other_261;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec4<f32>(0.0) - _e16.g2_), ((vec4<f32>(_e19.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e28.g3_));
}

fn anti_scalar_multi_vector_geometric_product(self_306: AntiScalar, other_262: MultiVector) -> MultiVector {
    var self_307: AntiScalar;
    var other_263: MultiVector;

    self_307 = self_306;
    other_263 = other_262;
    let _e4: AntiScalar = self_307;
    let _e7: MultiVector = other_263;
    let _e21: AntiScalar = self_307;
    let _e24: MultiVector = other_263;
    let _e30: AntiScalar = self_307;
    let _e33: MultiVector = other_263;
    let _e37: AntiScalar = self_307;
    let _e40: MultiVector = other_263;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(0.0) - (vec4<f32>(_e21.g0_) * _e24.g2_)), (vec4<f32>(0.0) - (vec4<f32>(_e30.g0_) * _e33.g1_)), ((vec4<f32>(_e37.g0_) * _e40.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_multi_vector_regressive_product(self_308: AntiScalar, other_264: MultiVector) -> MultiVector {
    var self_309: AntiScalar;
    var other_265: MultiVector;

    self_309 = self_308;
    other_265 = other_264;
    let _e4: AntiScalar = self_309;
    let _e7: MultiVector = other_265;
    let _e10: AntiScalar = self_309;
    let _e13: MultiVector = other_265;
    let _e16: AntiScalar = self_309;
    let _e19: MultiVector = other_265;
    let _e22: AntiScalar = self_309;
    let _e25: MultiVector = other_265;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn anti_scalar_multi_vector_outer_product(self_310: AntiScalar, other_266: MultiVector) -> AntiScalar {
    var self_311: AntiScalar;
    var other_267: MultiVector;

    self_311 = self_310;
    other_267 = other_266;
    let _e4: AntiScalar = self_311;
    let _e6: MultiVector = other_267;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_multi_vector_inner_product(self_312: AntiScalar, other_268: MultiVector) -> MultiVector {
    var self_313: AntiScalar;
    var other_269: MultiVector;

    self_313 = self_312;
    other_269 = other_268;
    let _e4: AntiScalar = self_313;
    let _e7: MultiVector = other_269;
    let _e21: AntiScalar = self_313;
    let _e24: MultiVector = other_269;
    let _e30: AntiScalar = self_313;
    let _e33: MultiVector = other_269;
    let _e37: AntiScalar = self_313;
    let _e40: MultiVector = other_269;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(0.0) - (vec4<f32>(_e21.g0_) * _e24.g2_)), (vec4<f32>(0.0) - (vec4<f32>(_e30.g0_) * _e33.g1_)), ((vec4<f32>(_e37.g0_) * _e40.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_multi_vector_geometric_anti_product(self_314: AntiScalar, other_270: MultiVector) -> MultiVector {
    var self_315: AntiScalar;
    var other_271: MultiVector;

    self_315 = self_314;
    other_271 = other_270;
    let _e4: AntiScalar = self_315;
    let _e7: MultiVector = other_271;
    let _e10: AntiScalar = self_315;
    let _e13: MultiVector = other_271;
    let _e16: AntiScalar = self_315;
    let _e19: MultiVector = other_271;
    let _e22: AntiScalar = self_315;
    let _e25: MultiVector = other_271;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn anti_scalar_multi_vector_inner_anti_product(self_316: AntiScalar, other_272: MultiVector) -> MultiVector {
    var self_317: AntiScalar;
    var other_273: MultiVector;

    self_317 = self_316;
    other_273 = other_272;
    let _e4: AntiScalar = self_317;
    let _e7: MultiVector = other_273;
    let _e10: AntiScalar = self_317;
    let _e13: MultiVector = other_273;
    let _e16: AntiScalar = self_317;
    let _e19: MultiVector = other_273;
    let _e22: AntiScalar = self_317;
    let _e25: MultiVector = other_273;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn anti_scalar_multi_vector_left_contraction(self_318: AntiScalar, other_274: MultiVector) -> Scalar {
    var self_319: AntiScalar;
    var other_275: MultiVector;

    self_319 = self_318;
    other_275 = other_274;
    let _e4: AntiScalar = self_319;
    let _e6: MultiVector = other_275;
    return Scalar((_e4.g0_ * _e6.g3_.x));
}

fn anti_scalar_multi_vector_right_contraction(self_320: AntiScalar, other_276: MultiVector) -> MultiVector {
    var self_321: AntiScalar;
    var other_277: MultiVector;

    self_321 = self_320;
    other_277 = other_276;
    let _e4: AntiScalar = self_321;
    let _e7: MultiVector = other_277;
    let _e21: AntiScalar = self_321;
    let _e24: MultiVector = other_277;
    let _e30: AntiScalar = self_321;
    let _e33: MultiVector = other_277;
    let _e37: AntiScalar = self_321;
    let _e40: MultiVector = other_277;
    return MultiVector(((vec4<f32>(_e4.g0_) * _e7.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (vec4<f32>(0.0) - (vec4<f32>(_e21.g0_) * _e24.g2_)), (vec4<f32>(0.0) - (vec4<f32>(_e30.g0_) * _e33.g1_)), ((vec4<f32>(_e37.g0_) * _e40.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_multi_vector_left_anti_contraction(self_322: AntiScalar, other_278: MultiVector) -> MultiVector {
    var self_323: AntiScalar;
    var other_279: MultiVector;

    self_323 = self_322;
    other_279 = other_278;
    let _e4: AntiScalar = self_323;
    let _e7: MultiVector = other_279;
    let _e10: AntiScalar = self_323;
    let _e13: MultiVector = other_279;
    let _e16: AntiScalar = self_323;
    let _e19: MultiVector = other_279;
    let _e22: AntiScalar = self_323;
    let _e25: MultiVector = other_279;
    return MultiVector((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_), (vec4<f32>(_e16.g0_) * _e19.g2_), (vec4<f32>(_e22.g0_) * _e25.g3_));
}

fn anti_scalar_multi_vector_right_anti_contraction(self_324: AntiScalar, other_280: MultiVector) -> AntiScalar {
    var self_325: AntiScalar;
    var other_281: MultiVector;

    self_325 = self_324;
    other_281 = other_280;
    let _e4: AntiScalar = self_325;
    let _e6: MultiVector = other_281;
    return AntiScalar((_e4.g0_ * _e6.g3_.x));
}

fn anti_scalar_multi_vector_scalar_product(self_326: AntiScalar, other_282: MultiVector) -> Scalar {
    var self_327: AntiScalar;
    var other_283: MultiVector;

    self_327 = self_326;
    other_283 = other_282;
    let _e4: AntiScalar = self_327;
    let _e6: MultiVector = other_283;
    return Scalar((_e4.g0_ * _e6.g3_.x));
}

fn anti_scalar_multi_vector_anti_scalar_product(self_328: AntiScalar, other_284: MultiVector) -> AntiScalar {
    var self_329: AntiScalar;
    var other_285: MultiVector;

    self_329 = self_328;
    other_285 = other_284;
    let _e4: AntiScalar = self_329;
    let _e6: MultiVector = other_285;
    return AntiScalar((_e4.g0_ * _e6.g3_.x));
}

fn anti_scalar_rotor_regressive_product(self_330: AntiScalar, other_286: Rotor) -> Rotor {
    var self_331: AntiScalar;
    var other_287: Rotor;

    self_331 = self_330;
    other_287 = other_286;
    let _e4: AntiScalar = self_331;
    let _e7: Rotor = other_287;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_outer_product(self_332: AntiScalar, other_288: Rotor) -> AntiScalar {
    var self_333: AntiScalar;
    var other_289: Rotor;

    self_333 = self_332;
    other_289 = other_288;
    let _e4: AntiScalar = self_333;
    let _e6: Rotor = other_289;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_rotor_geometric_anti_product(self_334: AntiScalar, other_290: Rotor) -> Rotor {
    var self_335: AntiScalar;
    var other_291: Rotor;

    self_335 = self_334;
    other_291 = other_290;
    let _e4: AntiScalar = self_335;
    let _e7: Rotor = other_291;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_inner_anti_product(self_336: AntiScalar, other_292: Rotor) -> Rotor {
    var self_337: AntiScalar;
    var other_293: Rotor;

    self_337 = self_336;
    other_293 = other_292;
    let _e4: AntiScalar = self_337;
    let _e7: Rotor = other_293;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_rotor_left_anti_contraction(self_338: AntiScalar, other_294: Rotor) -> Rotor {
    var self_339: AntiScalar;
    var other_295: Rotor;

    self_339 = self_338;
    other_295 = other_294;
    let _e4: AntiScalar = self_339;
    let _e7: Rotor = other_295;
    return Rotor((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_geometric_product(self_340: AntiScalar, other_296: Point) -> Plane {
    var self_341: AntiScalar;
    var other_297: Point;

    self_341 = self_340;
    other_297 = other_296;
    let _e6: AntiScalar = self_341;
    let _e9: Point = other_297;
    return Plane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_point_regressive_product(self_342: AntiScalar, other_298: Point) -> Point {
    var self_343: AntiScalar;
    var other_299: Point;

    self_343 = self_342;
    other_299 = other_298;
    let _e4: AntiScalar = self_343;
    let _e7: Point = other_299;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_inner_product(self_344: AntiScalar, other_300: Point) -> Plane {
    var self_345: AntiScalar;
    var other_301: Point;

    self_345 = self_344;
    other_301 = other_300;
    let _e6: AntiScalar = self_345;
    let _e9: Point = other_301;
    return Plane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_point_geometric_anti_product(self_346: AntiScalar, other_302: Point) -> Point {
    var self_347: AntiScalar;
    var other_303: Point;

    self_347 = self_346;
    other_303 = other_302;
    let _e4: AntiScalar = self_347;
    let _e7: Point = other_303;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_inner_anti_product(self_348: AntiScalar, other_304: Point) -> Point {
    var self_349: AntiScalar;
    var other_305: Point;

    self_349 = self_348;
    other_305 = other_304;
    let _e4: AntiScalar = self_349;
    let _e7: Point = other_305;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_point_right_contraction(self_350: AntiScalar, other_306: Point) -> Plane {
    var self_351: AntiScalar;
    var other_307: Point;

    self_351 = self_350;
    other_307 = other_306;
    let _e6: AntiScalar = self_351;
    let _e9: Point = other_307;
    return Plane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_point_left_anti_contraction(self_352: AntiScalar, other_308: Point) -> Point {
    var self_353: AntiScalar;
    var other_309: Point;

    self_353 = self_352;
    other_309 = other_308;
    let _e4: AntiScalar = self_353;
    let _e7: Point = other_309;
    return Point((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_ideal_point_regressive_product(self_354: AntiScalar, other_310: IdealPoint) -> IdealPoint {
    var self_355: AntiScalar;
    var other_311: IdealPoint;

    self_355 = self_354;
    other_311 = other_310;
    let _e4: AntiScalar = self_355;
    let _e7: IdealPoint = other_311;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_ideal_point_geometric_anti_product(self_356: AntiScalar, other_312: IdealPoint) -> IdealPoint {
    var self_357: AntiScalar;
    var other_313: IdealPoint;

    self_357 = self_356;
    other_313 = other_312;
    let _e4: AntiScalar = self_357;
    let _e7: IdealPoint = other_313;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_ideal_point_inner_anti_product(self_358: AntiScalar, other_314: IdealPoint) -> IdealPoint {
    var self_359: AntiScalar;
    var other_315: IdealPoint;

    self_359 = self_358;
    other_315 = other_314;
    let _e4: AntiScalar = self_359;
    let _e7: IdealPoint = other_315;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_ideal_point_left_anti_contraction(self_360: AntiScalar, other_316: IdealPoint) -> IdealPoint {
    var self_361: AntiScalar;
    var other_317: IdealPoint;

    self_361 = self_360;
    other_317 = other_316;
    let _e4: AntiScalar = self_361;
    let _e7: IdealPoint = other_317;
    return IdealPoint((vec3<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_geometric_product(self_362: AntiScalar, other_318: Plane) -> Point {
    var self_363: AntiScalar;
    var other_319: Plane;

    self_363 = self_362;
    other_319 = other_318;
    let _e6: AntiScalar = self_363;
    let _e9: Plane = other_319;
    return Point((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_plane_regressive_product(self_364: AntiScalar, other_320: Plane) -> Plane {
    var self_365: AntiScalar;
    var other_321: Plane;

    self_365 = self_364;
    other_321 = other_320;
    let _e4: AntiScalar = self_365;
    let _e7: Plane = other_321;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_inner_product(self_366: AntiScalar, other_322: Plane) -> Point {
    var self_367: AntiScalar;
    var other_323: Plane;

    self_367 = self_366;
    other_323 = other_322;
    let _e6: AntiScalar = self_367;
    let _e9: Plane = other_323;
    return Point((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_plane_geometric_anti_product(self_368: AntiScalar, other_324: Plane) -> Plane {
    var self_369: AntiScalar;
    var other_325: Plane;

    self_369 = self_368;
    other_325 = other_324;
    let _e4: AntiScalar = self_369;
    let _e7: Plane = other_325;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_inner_anti_product(self_370: AntiScalar, other_326: Plane) -> Plane {
    var self_371: AntiScalar;
    var other_327: Plane;

    self_371 = self_370;
    other_327 = other_326;
    let _e4: AntiScalar = self_371;
    let _e7: Plane = other_327;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_plane_right_contraction(self_372: AntiScalar, other_328: Plane) -> Point {
    var self_373: AntiScalar;
    var other_329: Plane;

    self_373 = self_372;
    other_329 = other_328;
    let _e6: AntiScalar = self_373;
    let _e9: Plane = other_329;
    return Point((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g0_)));
}

fn anti_scalar_plane_left_anti_contraction(self_374: AntiScalar, other_330: Plane) -> Plane {
    var self_375: AntiScalar;
    var other_331: Plane;

    self_375 = self_374;
    other_331 = other_330;
    let _e4: AntiScalar = self_375;
    let _e7: Plane = other_331;
    return Plane((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_line_geometric_product(self_376: AntiScalar, other_332: Line) -> Line {
    var self_377: AntiScalar;
    var other_333: Line;

    self_377 = self_376;
    other_333 = other_332;
    let _e6: AntiScalar = self_377;
    let _e9: Line = other_333;
    let _e15: AntiScalar = self_377;
    let _e18: Line = other_333;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_line_regressive_product(self_378: AntiScalar, other_334: Line) -> Line {
    var self_379: AntiScalar;
    var other_335: Line;

    self_379 = self_378;
    other_335 = other_334;
    let _e4: AntiScalar = self_379;
    let _e7: Line = other_335;
    let _e10: AntiScalar = self_379;
    let _e13: Line = other_335;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_inner_product(self_380: AntiScalar, other_336: Line) -> Line {
    var self_381: AntiScalar;
    var other_337: Line;

    self_381 = self_380;
    other_337 = other_336;
    let _e6: AntiScalar = self_381;
    let _e9: Line = other_337;
    let _e15: AntiScalar = self_381;
    let _e18: Line = other_337;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_line_geometric_anti_product(self_382: AntiScalar, other_338: Line) -> Line {
    var self_383: AntiScalar;
    var other_339: Line;

    self_383 = self_382;
    other_339 = other_338;
    let _e4: AntiScalar = self_383;
    let _e7: Line = other_339;
    let _e10: AntiScalar = self_383;
    let _e13: Line = other_339;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_inner_anti_product(self_384: AntiScalar, other_340: Line) -> Line {
    var self_385: AntiScalar;
    var other_341: Line;

    self_385 = self_384;
    other_341 = other_340;
    let _e4: AntiScalar = self_385;
    let _e7: Line = other_341;
    let _e10: AntiScalar = self_385;
    let _e13: Line = other_341;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_line_right_contraction(self_386: AntiScalar, other_342: Line) -> Line {
    var self_387: AntiScalar;
    var other_343: Line;

    self_387 = self_386;
    other_343 = other_342;
    let _e6: AntiScalar = self_387;
    let _e9: Line = other_343;
    let _e15: AntiScalar = self_387;
    let _e18: Line = other_343;
    return Line((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_) * _e9.g1_)), (vec3<f32>(0.0) - (vec3<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_line_left_anti_contraction(self_388: AntiScalar, other_344: Line) -> Line {
    var self_389: AntiScalar;
    var other_345: Line;

    self_389 = self_388;
    other_345 = other_344;
    let _e4: AntiScalar = self_389;
    let _e7: Line = other_345;
    let _e10: AntiScalar = self_389;
    let _e13: Line = other_345;
    return Line((vec3<f32>(_e4.g0_) * _e7.g0_), (vec3<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_translator_regressive_product(self_390: AntiScalar, other_346: Translator) -> Translator {
    var self_391: AntiScalar;
    var other_347: Translator;

    self_391 = self_390;
    other_347 = other_346;
    let _e4: AntiScalar = self_391;
    let _e7: Translator = other_347;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_outer_product(self_392: AntiScalar, other_348: Translator) -> AntiScalar {
    var self_393: AntiScalar;
    var other_349: Translator;

    self_393 = self_392;
    other_349 = other_348;
    let _e4: AntiScalar = self_393;
    let _e6: Translator = other_349;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_translator_geometric_anti_product(self_394: AntiScalar, other_350: Translator) -> Translator {
    var self_395: AntiScalar;
    var other_351: Translator;

    self_395 = self_394;
    other_351 = other_350;
    let _e4: AntiScalar = self_395;
    let _e7: Translator = other_351;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_inner_anti_product(self_396: AntiScalar, other_352: Translator) -> Translator {
    var self_397: AntiScalar;
    var other_353: Translator;

    self_397 = self_396;
    other_353 = other_352;
    let _e4: AntiScalar = self_397;
    let _e7: Translator = other_353;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_translator_left_anti_contraction(self_398: AntiScalar, other_354: Translator) -> Translator {
    var self_399: AntiScalar;
    var other_355: Translator;

    self_399 = self_398;
    other_355 = other_354;
    let _e4: AntiScalar = self_399;
    let _e7: Translator = other_355;
    return Translator((vec4<f32>(_e4.g0_) * _e7.g0_));
}

fn anti_scalar_motor_add(self_400: AntiScalar, other_356: Motor) -> Motor {
    var self_401: AntiScalar;
    var other_357: Motor;

    self_401 = self_400;
    other_357 = other_356;
    let _e4: Motor = other_357;
    let _e6: AntiScalar = self_401;
    let _e15: Motor = other_357;
    return Motor(_e4.g0_, ((vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e15.g1_));
}

fn anti_scalar_motor_sub(self_402: AntiScalar, other_358: Motor) -> Motor {
    var self_403: AntiScalar;
    var other_359: Motor;

    self_403 = self_402;
    other_359 = other_358;
    let _e6: Motor = other_359;
    let _e9: AntiScalar = self_403;
    let _e18: Motor = other_359;
    return Motor((vec4<f32>(0.0) - _e6.g0_), ((vec4<f32>(_e9.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e18.g1_));
}

fn anti_scalar_motor_geometric_product(self_404: AntiScalar, other_360: Motor) -> Motor {
    var self_405: AntiScalar;
    var other_361: Motor;

    self_405 = self_404;
    other_361 = other_360;
    let _e4: AntiScalar = self_405;
    let _e7: Motor = other_361;
    let _e19: AntiScalar = self_405;
    let _e22: Motor = other_361;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_motor_regressive_product(self_406: AntiScalar, other_362: Motor) -> Motor {
    var self_407: AntiScalar;
    var other_363: Motor;

    self_407 = self_406;
    other_363 = other_362;
    let _e4: AntiScalar = self_407;
    let _e7: Motor = other_363;
    let _e10: AntiScalar = self_407;
    let _e13: Motor = other_363;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_outer_product(self_408: AntiScalar, other_364: Motor) -> AntiScalar {
    var self_409: AntiScalar;
    var other_365: Motor;

    self_409 = self_408;
    other_365 = other_364;
    let _e4: AntiScalar = self_409;
    let _e6: Motor = other_365;
    return AntiScalar((_e4.g0_ * _e6.g0_.x));
}

fn anti_scalar_motor_inner_product(self_410: AntiScalar, other_366: Motor) -> Motor {
    var self_411: AntiScalar;
    var other_367: Motor;

    self_411 = self_410;
    other_367 = other_366;
    let _e4: AntiScalar = self_411;
    let _e7: Motor = other_367;
    let _e19: AntiScalar = self_411;
    let _e22: Motor = other_367;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_motor_geometric_anti_product(self_412: AntiScalar, other_368: Motor) -> Motor {
    var self_413: AntiScalar;
    var other_369: Motor;

    self_413 = self_412;
    other_369 = other_368;
    let _e4: AntiScalar = self_413;
    let _e7: Motor = other_369;
    let _e10: AntiScalar = self_413;
    let _e13: Motor = other_369;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_inner_anti_product(self_414: AntiScalar, other_370: Motor) -> Motor {
    var self_415: AntiScalar;
    var other_371: Motor;

    self_415 = self_414;
    other_371 = other_370;
    let _e4: AntiScalar = self_415;
    let _e7: Motor = other_371;
    let _e10: AntiScalar = self_415;
    let _e13: Motor = other_371;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_left_contraction(self_416: AntiScalar, other_372: Motor) -> Scalar {
    var self_417: AntiScalar;
    var other_373: Motor;

    self_417 = self_416;
    other_373 = other_372;
    let _e4: AntiScalar = self_417;
    let _e6: Motor = other_373;
    return Scalar((_e4.g0_ * _e6.g1_.x));
}

fn anti_scalar_motor_right_contraction(self_418: AntiScalar, other_374: Motor) -> Motor {
    var self_419: AntiScalar;
    var other_375: Motor;

    self_419 = self_418;
    other_375 = other_374;
    let _e4: AntiScalar = self_419;
    let _e7: Motor = other_375;
    let _e19: AntiScalar = self_419;
    let _e22: Motor = other_375;
    return Motor(((vec4<f32>(_e4.g0_) * _e7.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((vec4<f32>(_e19.g0_) * _e22.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn anti_scalar_motor_left_anti_contraction(self_420: AntiScalar, other_376: Motor) -> Motor {
    var self_421: AntiScalar;
    var other_377: Motor;

    self_421 = self_420;
    other_377 = other_376;
    let _e4: AntiScalar = self_421;
    let _e7: Motor = other_377;
    let _e10: AntiScalar = self_421;
    let _e13: Motor = other_377;
    return Motor((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_motor_right_anti_contraction(self_422: AntiScalar, other_378: Motor) -> AntiScalar {
    var self_423: AntiScalar;
    var other_379: Motor;

    self_423 = self_422;
    other_379 = other_378;
    let _e4: AntiScalar = self_423;
    let _e6: Motor = other_379;
    return AntiScalar((_e4.g0_ * _e6.g1_.x));
}

fn anti_scalar_motor_scalar_product(self_424: AntiScalar, other_380: Motor) -> Scalar {
    var self_425: AntiScalar;
    var other_381: Motor;

    self_425 = self_424;
    other_381 = other_380;
    let _e4: AntiScalar = self_425;
    let _e6: Motor = other_381;
    return Scalar((_e4.g0_ * _e6.g1_.x));
}

fn anti_scalar_motor_anti_scalar_product(self_426: AntiScalar, other_382: Motor) -> AntiScalar {
    var self_427: AntiScalar;
    var other_383: Motor;

    self_427 = self_426;
    other_383 = other_382;
    let _e4: AntiScalar = self_427;
    let _e6: Motor = other_383;
    return AntiScalar((_e4.g0_ * _e6.g1_.x));
}

fn anti_scalar_point_and_plane_geometric_product(self_428: AntiScalar, other_384: PointAndPlane) -> PointAndPlane {
    var self_429: AntiScalar;
    var other_385: PointAndPlane;

    self_429 = self_428;
    other_385 = other_384;
    let _e6: AntiScalar = self_429;
    let _e9: PointAndPlane = other_385;
    let _e15: AntiScalar = self_429;
    let _e18: PointAndPlane = other_385;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g1_)), (vec4<f32>(0.0) - (vec4<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_point_and_plane_regressive_product(self_430: AntiScalar, other_386: PointAndPlane) -> PointAndPlane {
    var self_431: AntiScalar;
    var other_387: PointAndPlane;

    self_431 = self_430;
    other_387 = other_386;
    let _e4: AntiScalar = self_431;
    let _e7: PointAndPlane = other_387;
    let _e10: AntiScalar = self_431;
    let _e13: PointAndPlane = other_387;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_point_and_plane_inner_product(self_432: AntiScalar, other_388: PointAndPlane) -> PointAndPlane {
    var self_433: AntiScalar;
    var other_389: PointAndPlane;

    self_433 = self_432;
    other_389 = other_388;
    let _e6: AntiScalar = self_433;
    let _e9: PointAndPlane = other_389;
    let _e15: AntiScalar = self_433;
    let _e18: PointAndPlane = other_389;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g1_)), (vec4<f32>(0.0) - (vec4<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_point_and_plane_geometric_anti_product(self_434: AntiScalar, other_390: PointAndPlane) -> PointAndPlane {
    var self_435: AntiScalar;
    var other_391: PointAndPlane;

    self_435 = self_434;
    other_391 = other_390;
    let _e4: AntiScalar = self_435;
    let _e7: PointAndPlane = other_391;
    let _e10: AntiScalar = self_435;
    let _e13: PointAndPlane = other_391;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_point_and_plane_inner_anti_product(self_436: AntiScalar, other_392: PointAndPlane) -> PointAndPlane {
    var self_437: AntiScalar;
    var other_393: PointAndPlane;

    self_437 = self_436;
    other_393 = other_392;
    let _e4: AntiScalar = self_437;
    let _e7: PointAndPlane = other_393;
    let _e10: AntiScalar = self_437;
    let _e13: PointAndPlane = other_393;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_point_and_plane_right_contraction(self_438: AntiScalar, other_394: PointAndPlane) -> PointAndPlane {
    var self_439: AntiScalar;
    var other_395: PointAndPlane;

    self_439 = self_438;
    other_395 = other_394;
    let _e6: AntiScalar = self_439;
    let _e9: PointAndPlane = other_395;
    let _e15: AntiScalar = self_439;
    let _e18: PointAndPlane = other_395;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g0_) * _e9.g1_)), (vec4<f32>(0.0) - (vec4<f32>(_e15.g0_) * _e18.g0_)));
}

fn anti_scalar_point_and_plane_left_anti_contraction(self_440: AntiScalar, other_396: PointAndPlane) -> PointAndPlane {
    var self_441: AntiScalar;
    var other_397: PointAndPlane;

    self_441 = self_440;
    other_397 = other_396;
    let _e4: AntiScalar = self_441;
    let _e7: PointAndPlane = other_397;
    let _e10: AntiScalar = self_441;
    let _e13: PointAndPlane = other_397;
    return PointAndPlane((vec4<f32>(_e4.g0_) * _e7.g0_), (vec4<f32>(_e10.g0_) * _e13.g1_));
}

fn anti_scalar_squared_magnitude(self_442: AntiScalar) -> Scalar {
    var self_443: AntiScalar;

    self_443 = self_442;
    let _e2: AntiScalar = self_443;
    let _e3: AntiScalar = self_443;
    let _e4: AntiScalar = anti_scalar_reversal(_e3);
    let _e5: Scalar = anti_scalar_anti_scalar_scalar_product(_e2, _e4);
    return _e5;
}

fn anti_scalar_magnitude(self_444: AntiScalar) -> Scalar {
    var self_445: AntiScalar;

    self_445 = self_444;
    let _e2: AntiScalar = self_445;
    let _e3: Scalar = anti_scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn anti_scalar_bulk_norm(self_446: AntiScalar) -> Scalar {
    var self_447: AntiScalar;

    self_447 = self_446;
    let _e2: AntiScalar = self_447;
    let _e3: Scalar = anti_scalar_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn anti_scalar_squared_anti_magnitude(self_448: AntiScalar) -> AntiScalar {
    var self_449: AntiScalar;

    self_449 = self_448;
    let _e2: AntiScalar = self_449;
    let _e3: AntiScalar = self_449;
    let _e4: AntiScalar = anti_scalar_anti_reversal(_e3);
    let _e5: AntiScalar = anti_scalar_anti_scalar_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn anti_scalar_weight_norm(self_450: AntiScalar) -> AntiScalar {
    var self_451: AntiScalar;

    self_451 = self_450;
    let _e2: AntiScalar = self_451;
    let _e3: AntiScalar = anti_scalar_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn anti_scalar_scale(self_452: AntiScalar, other_398: f32) -> AntiScalar {
    var self_453: AntiScalar;
    var other_399: f32;

    self_453 = self_452;
    other_399 = other_398;
    let _e4: AntiScalar = self_453;
    let _e5: f32 = other_399;
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn anti_scalar_signum(self_454: AntiScalar) -> AntiScalar {
    var self_455: AntiScalar;

    self_455 = self_454;
    let _e2: AntiScalar = self_455;
    let _e3: AntiScalar = self_455;
    let _e4: Scalar = anti_scalar_magnitude(_e3);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn anti_scalar_inverse(self_456: AntiScalar) -> AntiScalar {
    var self_457: AntiScalar;

    self_457 = self_456;
    let _e2: AntiScalar = self_457;
    let _e3: AntiScalar = anti_scalar_reversal(_e2);
    let _e4: AntiScalar = self_457;
    let _e5: Scalar = anti_scalar_squared_magnitude(_e4);
    let _e10: AntiScalar = anti_scalar_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn anti_scalar_unitize(self_458: AntiScalar) -> AntiScalar {
    var self_459: AntiScalar;

    self_459 = self_458;
    let _e2: AntiScalar = self_459;
    let _e3: AntiScalar = self_459;
    let _e4: AntiScalar = anti_scalar_weight_norm(_e3);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_zero() -> MultiVector {
    return MultiVector(vec4<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_one() -> MultiVector {
    return MultiVector(vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_neg(self_460: MultiVector) -> MultiVector {
    var self_461: MultiVector;

    self_461 = self_460;
    let _e2: MultiVector = self_461;
    let _e8: MultiVector = self_461;
    let _e14: MultiVector = self_461;
    let _e20: MultiVector = self_461;
    return MultiVector((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))), (_e14.g2_ * vec4<f32>(-(1.0))), (_e20.g3_ * vec4<f32>(-(1.0))));
}

fn multi_vector_automorphism(self_462: MultiVector) -> MultiVector {
    var self_463: MultiVector;

    self_463 = self_462;
    let _e2: MultiVector = self_463;
    let _e4: MultiVector = self_463;
    let _e10: MultiVector = self_463;
    let _e16: MultiVector = self_463;
    return MultiVector(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))), (_e10.g2_ * vec4<f32>(-(1.0))), _e16.g3_);
}

fn multi_vector_reversal(self_464: MultiVector) -> MultiVector {
    var self_465: MultiVector;

    self_465 = self_464;
    let _e2: MultiVector = self_465;
    let _e13: MultiVector = self_465;
    let _e24: MultiVector = self_465;
    let _e33: MultiVector = self_465;
    return MultiVector((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e24.g2_ * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)), (_e33.g3_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_conjugation(self_466: MultiVector) -> MultiVector {
    var self_467: MultiVector;

    self_467 = self_466;
    let _e2: MultiVector = self_467;
    let _e13: MultiVector = self_467;
    let _e22: MultiVector = self_467;
    let _e33: MultiVector = self_467;
    return MultiVector((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)), (_e22.g2_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e33.g3_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_dual(self_468: MultiVector) -> MultiVector {
    var self_469: MultiVector;

    self_469 = self_468;
    let _e2: MultiVector = self_469;
    let _e4: MultiVector = self_469;
    let _e13: MultiVector = self_469;
    let _e24: MultiVector = self_469;
    return MultiVector(_e2.g3_, (_e4.g2_ * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)), (_e13.g1_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), _e24.g0_);
}

fn multi_vector_anti_reversal(self_470: MultiVector) -> MultiVector {
    var self_471: MultiVector;

    self_471 = self_470;
    let _e2: MultiVector = self_471;
    let _e13: MultiVector = self_471;
    let _e22: MultiVector = self_471;
    let _e33: MultiVector = self_471;
    return MultiVector((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)), (_e22.g2_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e33.g3_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_scalar_into(self_472: MultiVector) -> Scalar {
    var self_473: MultiVector;

    self_473 = self_472;
    let _e2: MultiVector = self_473;
    return Scalar(_e2.g0_.x);
}

fn multi_vector_scalar_add(self_474: MultiVector, other_400: Scalar) -> MultiVector {
    var self_475: MultiVector;
    var other_401: Scalar;

    self_475 = self_474;
    other_401 = other_400;
    let _e4: MultiVector = self_475;
    let _e6: Scalar = other_401;
    let _e16: MultiVector = self_475;
    let _e18: MultiVector = self_475;
    let _e20: MultiVector = self_475;
    return MultiVector((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e16.g1_, _e18.g2_, _e20.g3_);
}

fn multi_vector_scalar_sub(self_476: MultiVector, other_402: Scalar) -> MultiVector {
    var self_477: MultiVector;
    var other_403: Scalar;

    self_477 = self_476;
    other_403 = other_402;
    let _e4: MultiVector = self_477;
    let _e6: Scalar = other_403;
    let _e16: MultiVector = self_477;
    let _e18: MultiVector = self_477;
    let _e20: MultiVector = self_477;
    return MultiVector((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e16.g1_, _e18.g2_, _e20.g3_);
}

fn multi_vector_scalar_geometric_product(self_478: MultiVector, other_404: Scalar) -> MultiVector {
    var self_479: MultiVector;
    var other_405: Scalar;

    self_479 = self_478;
    other_405 = other_404;
    let _e4: MultiVector = self_479;
    let _e6: Scalar = other_405;
    let _e10: MultiVector = self_479;
    let _e12: Scalar = other_405;
    let _e16: MultiVector = self_479;
    let _e18: Scalar = other_405;
    let _e22: MultiVector = self_479;
    let _e24: Scalar = other_405;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_scalar_regressive_product(self_480: MultiVector, other_406: Scalar) -> Scalar {
    var self_481: MultiVector;
    var other_407: Scalar;

    self_481 = self_480;
    other_407 = other_406;
    let _e4: MultiVector = self_481;
    let _e7: Scalar = other_407;
    return Scalar((_e4.g3_.x * _e7.g0_));
}

fn multi_vector_scalar_outer_product(self_482: MultiVector, other_408: Scalar) -> MultiVector {
    var self_483: MultiVector;
    var other_409: Scalar;

    self_483 = self_482;
    other_409 = other_408;
    let _e4: MultiVector = self_483;
    let _e6: Scalar = other_409;
    let _e10: MultiVector = self_483;
    let _e12: Scalar = other_409;
    let _e16: MultiVector = self_483;
    let _e18: Scalar = other_409;
    let _e22: MultiVector = self_483;
    let _e24: Scalar = other_409;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_scalar_inner_product(self_484: MultiVector, other_410: Scalar) -> MultiVector {
    var self_485: MultiVector;
    var other_411: Scalar;

    self_485 = self_484;
    other_411 = other_410;
    let _e4: MultiVector = self_485;
    let _e6: Scalar = other_411;
    let _e10: MultiVector = self_485;
    let _e12: Scalar = other_411;
    let _e16: MultiVector = self_485;
    let _e18: Scalar = other_411;
    let _e22: MultiVector = self_485;
    let _e24: Scalar = other_411;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_scalar_geometric_anti_product(self_486: MultiVector, other_412: Scalar) -> MultiVector {
    var self_487: MultiVector;
    var other_413: Scalar;

    self_487 = self_486;
    other_413 = other_412;
    let _e4: MultiVector = self_487;
    let _e6: Scalar = other_413;
    let _e19: MultiVector = self_487;
    let _e21: Scalar = other_413;
    let _e29: MultiVector = self_487;
    let _e31: Scalar = other_413;
    let _e39: MultiVector = self_487;
    let _e41: Scalar = other_413;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g2_ * vec4<f32>(_e21.g0_)) * vec4<f32>(-(1.0))), ((_e29.g1_ * vec4<f32>(_e31.g0_)) * vec4<f32>(-(1.0))), ((_e39.g0_ * vec4<f32>(_e41.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_scalar_inner_anti_product(self_488: MultiVector, other_414: Scalar) -> MultiVector {
    var self_489: MultiVector;
    var other_415: Scalar;

    self_489 = self_488;
    other_415 = other_414;
    let _e4: MultiVector = self_489;
    let _e6: Scalar = other_415;
    let _e19: MultiVector = self_489;
    let _e21: Scalar = other_415;
    let _e29: MultiVector = self_489;
    let _e31: Scalar = other_415;
    let _e39: MultiVector = self_489;
    let _e41: Scalar = other_415;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g2_ * vec4<f32>(_e21.g0_)) * vec4<f32>(-(1.0))), ((_e29.g1_ * vec4<f32>(_e31.g0_)) * vec4<f32>(-(1.0))), ((_e39.g0_ * vec4<f32>(_e41.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_scalar_left_contraction(self_490: MultiVector, other_416: Scalar) -> Scalar {
    var self_491: MultiVector;
    var other_417: Scalar;

    self_491 = self_490;
    other_417 = other_416;
    let _e4: MultiVector = self_491;
    let _e7: Scalar = other_417;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_right_contraction(self_492: MultiVector, other_418: Scalar) -> MultiVector {
    var self_493: MultiVector;
    var other_419: Scalar;

    self_493 = self_492;
    other_419 = other_418;
    let _e4: MultiVector = self_493;
    let _e6: Scalar = other_419;
    let _e10: MultiVector = self_493;
    let _e12: Scalar = other_419;
    let _e16: MultiVector = self_493;
    let _e18: Scalar = other_419;
    let _e22: MultiVector = self_493;
    let _e24: Scalar = other_419;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_scalar_left_anti_contraction(self_494: MultiVector, other_420: Scalar) -> MultiVector {
    var self_495: MultiVector;
    var other_421: Scalar;

    self_495 = self_494;
    other_421 = other_420;
    let _e4: MultiVector = self_495;
    let _e6: Scalar = other_421;
    let _e19: MultiVector = self_495;
    let _e21: Scalar = other_421;
    let _e29: MultiVector = self_495;
    let _e31: Scalar = other_421;
    let _e39: MultiVector = self_495;
    let _e41: Scalar = other_421;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g2_ * vec4<f32>(_e21.g0_)) * vec4<f32>(-(1.0))), ((_e29.g1_ * vec4<f32>(_e31.g0_)) * vec4<f32>(-(1.0))), ((_e39.g0_ * vec4<f32>(_e41.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_scalar_right_anti_contraction(self_496: MultiVector, other_422: Scalar) -> AntiScalar {
    var self_497: MultiVector;
    var other_423: Scalar;

    self_497 = self_496;
    other_423 = other_422;
    let _e4: MultiVector = self_497;
    let _e7: Scalar = other_423;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_scalar_product(self_498: MultiVector, other_424: Scalar) -> Scalar {
    var self_499: MultiVector;
    var other_425: Scalar;

    self_499 = self_498;
    other_425 = other_424;
    let _e4: MultiVector = self_499;
    let _e7: Scalar = other_425;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_scalar_anti_scalar_product(self_500: MultiVector, other_426: Scalar) -> AntiScalar {
    var self_501: MultiVector;
    var other_427: Scalar;

    self_501 = self_500;
    other_427 = other_426;
    let _e4: MultiVector = self_501;
    let _e7: Scalar = other_427;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_into(self_502: MultiVector) -> AntiScalar {
    var self_503: MultiVector;

    self_503 = self_502;
    let _e2: MultiVector = self_503;
    return AntiScalar(_e2.g3_.x);
}

fn multi_vector_anti_scalar_add(self_504: MultiVector, other_428: AntiScalar) -> MultiVector {
    var self_505: MultiVector;
    var other_429: AntiScalar;

    self_505 = self_504;
    other_429 = other_428;
    let _e4: MultiVector = self_505;
    let _e6: MultiVector = self_505;
    let _e8: MultiVector = self_505;
    let _e10: MultiVector = self_505;
    let _e12: AntiScalar = other_429;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ + (vec4<f32>(_e12.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_anti_scalar_sub(self_506: MultiVector, other_430: AntiScalar) -> MultiVector {
    var self_507: MultiVector;
    var other_431: AntiScalar;

    self_507 = self_506;
    other_431 = other_430;
    let _e4: MultiVector = self_507;
    let _e6: MultiVector = self_507;
    let _e8: MultiVector = self_507;
    let _e10: MultiVector = self_507;
    let _e12: AntiScalar = other_431;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ - (vec4<f32>(_e12.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_anti_scalar_geometric_product(self_508: MultiVector, other_432: AntiScalar) -> MultiVector {
    var self_509: MultiVector;
    var other_433: AntiScalar;

    self_509 = self_508;
    other_433 = other_432;
    let _e4: MultiVector = self_509;
    let _e6: AntiScalar = other_433;
    let _e19: MultiVector = self_509;
    let _e21: AntiScalar = other_433;
    let _e25: MultiVector = self_509;
    let _e27: AntiScalar = other_433;
    let _e31: MultiVector = self_509;
    let _e33: AntiScalar = other_433;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e19.g2_ * vec4<f32>(_e21.g0_)), (_e25.g1_ * vec4<f32>(_e27.g0_)), ((_e31.g0_ * vec4<f32>(_e33.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_anti_scalar_regressive_product(self_510: MultiVector, other_434: AntiScalar) -> MultiVector {
    var self_511: MultiVector;
    var other_435: AntiScalar;

    self_511 = self_510;
    other_435 = other_434;
    let _e4: MultiVector = self_511;
    let _e6: AntiScalar = other_435;
    let _e10: MultiVector = self_511;
    let _e12: AntiScalar = other_435;
    let _e16: MultiVector = self_511;
    let _e18: AntiScalar = other_435;
    let _e22: MultiVector = self_511;
    let _e24: AntiScalar = other_435;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_anti_scalar_outer_product(self_512: MultiVector, other_436: AntiScalar) -> AntiScalar {
    var self_513: MultiVector;
    var other_437: AntiScalar;

    self_513 = self_512;
    other_437 = other_436;
    let _e4: MultiVector = self_513;
    let _e7: AntiScalar = other_437;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_inner_product(self_514: MultiVector, other_438: AntiScalar) -> MultiVector {
    var self_515: MultiVector;
    var other_439: AntiScalar;

    self_515 = self_514;
    other_439 = other_438;
    let _e4: MultiVector = self_515;
    let _e6: AntiScalar = other_439;
    let _e19: MultiVector = self_515;
    let _e21: AntiScalar = other_439;
    let _e25: MultiVector = self_515;
    let _e27: AntiScalar = other_439;
    let _e31: MultiVector = self_515;
    let _e33: AntiScalar = other_439;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e19.g2_ * vec4<f32>(_e21.g0_)), (_e25.g1_ * vec4<f32>(_e27.g0_)), ((_e31.g0_ * vec4<f32>(_e33.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_anti_scalar_geometric_anti_product(self_516: MultiVector, other_440: AntiScalar) -> MultiVector {
    var self_517: MultiVector;
    var other_441: AntiScalar;

    self_517 = self_516;
    other_441 = other_440;
    let _e4: MultiVector = self_517;
    let _e6: AntiScalar = other_441;
    let _e10: MultiVector = self_517;
    let _e12: AntiScalar = other_441;
    let _e16: MultiVector = self_517;
    let _e18: AntiScalar = other_441;
    let _e22: MultiVector = self_517;
    let _e24: AntiScalar = other_441;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_anti_scalar_inner_anti_product(self_518: MultiVector, other_442: AntiScalar) -> MultiVector {
    var self_519: MultiVector;
    var other_443: AntiScalar;

    self_519 = self_518;
    other_443 = other_442;
    let _e4: MultiVector = self_519;
    let _e6: AntiScalar = other_443;
    let _e10: MultiVector = self_519;
    let _e12: AntiScalar = other_443;
    let _e16: MultiVector = self_519;
    let _e18: AntiScalar = other_443;
    let _e22: MultiVector = self_519;
    let _e24: AntiScalar = other_443;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_anti_scalar_left_contraction(self_520: MultiVector, other_444: AntiScalar) -> MultiVector {
    var self_521: MultiVector;
    var other_445: AntiScalar;

    self_521 = self_520;
    other_445 = other_444;
    let _e4: MultiVector = self_521;
    let _e6: AntiScalar = other_445;
    let _e19: MultiVector = self_521;
    let _e21: AntiScalar = other_445;
    let _e25: MultiVector = self_521;
    let _e27: AntiScalar = other_445;
    let _e31: MultiVector = self_521;
    let _e33: AntiScalar = other_445;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e19.g2_ * vec4<f32>(_e21.g0_)), (_e25.g1_ * vec4<f32>(_e27.g0_)), ((_e31.g0_ * vec4<f32>(_e33.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn multi_vector_anti_scalar_right_contraction(self_522: MultiVector, other_446: AntiScalar) -> Scalar {
    var self_523: MultiVector;
    var other_447: AntiScalar;

    self_523 = self_522;
    other_447 = other_446;
    let _e4: MultiVector = self_523;
    let _e7: AntiScalar = other_447;
    return Scalar((_e4.g3_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_left_anti_contraction(self_524: MultiVector, other_448: AntiScalar) -> AntiScalar {
    var self_525: MultiVector;
    var other_449: AntiScalar;

    self_525 = self_524;
    other_449 = other_448;
    let _e4: MultiVector = self_525;
    let _e7: AntiScalar = other_449;
    return AntiScalar((_e4.g3_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_right_anti_contraction(self_526: MultiVector, other_450: AntiScalar) -> MultiVector {
    var self_527: MultiVector;
    var other_451: AntiScalar;

    self_527 = self_526;
    other_451 = other_450;
    let _e4: MultiVector = self_527;
    let _e6: AntiScalar = other_451;
    let _e10: MultiVector = self_527;
    let _e12: AntiScalar = other_451;
    let _e16: MultiVector = self_527;
    let _e18: AntiScalar = other_451;
    let _e22: MultiVector = self_527;
    let _e24: AntiScalar = other_451;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)), (_e16.g2_ * vec4<f32>(_e18.g0_)), (_e22.g3_ * vec4<f32>(_e24.g0_)));
}

fn multi_vector_anti_scalar_scalar_product(self_528: MultiVector, other_452: AntiScalar) -> Scalar {
    var self_529: MultiVector;
    var other_453: AntiScalar;

    self_529 = self_528;
    other_453 = other_452;
    let _e4: MultiVector = self_529;
    let _e7: AntiScalar = other_453;
    return Scalar((_e4.g3_.x * _e7.g0_));
}

fn multi_vector_anti_scalar_anti_scalar_product(self_530: MultiVector, other_454: AntiScalar) -> AntiScalar {
    var self_531: MultiVector;
    var other_455: AntiScalar;

    self_531 = self_530;
    other_455 = other_454;
    let _e4: MultiVector = self_531;
    let _e7: AntiScalar = other_455;
    return AntiScalar((_e4.g3_.x * _e7.g0_));
}

fn multi_vector_multi_vector_add(self_532: MultiVector, other_456: MultiVector) -> MultiVector {
    var self_533: MultiVector;
    var other_457: MultiVector;

    self_533 = self_532;
    other_457 = other_456;
    let _e4: MultiVector = self_533;
    let _e6: MultiVector = other_457;
    let _e9: MultiVector = self_533;
    let _e11: MultiVector = other_457;
    let _e14: MultiVector = self_533;
    let _e16: MultiVector = other_457;
    let _e19: MultiVector = self_533;
    let _e21: MultiVector = other_457;
    return MultiVector((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_), (_e14.g2_ + _e16.g2_), (_e19.g3_ + _e21.g3_));
}

fn multi_vector_multi_vector_sub(self_534: MultiVector, other_458: MultiVector) -> MultiVector {
    var self_535: MultiVector;
    var other_459: MultiVector;

    self_535 = self_534;
    other_459 = other_458;
    let _e4: MultiVector = self_535;
    let _e6: MultiVector = other_459;
    let _e9: MultiVector = self_535;
    let _e11: MultiVector = other_459;
    let _e14: MultiVector = self_535;
    let _e16: MultiVector = other_459;
    let _e19: MultiVector = self_535;
    let _e21: MultiVector = other_459;
    return MultiVector((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_), (_e14.g2_ - _e16.g2_), (_e19.g3_ - _e21.g3_));
}

fn multi_vector_multi_vector_mul(self_536: MultiVector, other_460: MultiVector) -> MultiVector {
    var self_537: MultiVector;
    var other_461: MultiVector;

    self_537 = self_536;
    other_461 = other_460;
    let _e4: MultiVector = self_537;
    let _e6: MultiVector = other_461;
    let _e9: MultiVector = self_537;
    let _e11: MultiVector = other_461;
    let _e14: MultiVector = self_537;
    let _e16: MultiVector = other_461;
    let _e19: MultiVector = self_537;
    let _e21: MultiVector = other_461;
    return MultiVector((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_), (_e14.g2_ * _e16.g2_), (_e19.g3_ * _e21.g3_));
}

fn multi_vector_multi_vector_div(self_538: MultiVector, other_462: MultiVector) -> MultiVector {
    var self_539: MultiVector;
    var other_463: MultiVector;

    self_539 = self_538;
    other_463 = other_462;
    let _e4: MultiVector = self_539;
    let _e7: MultiVector = self_539;
    let _e10: MultiVector = self_539;
    let _e13: MultiVector = self_539;
    let _e23: MultiVector = other_463;
    let _e26: MultiVector = other_463;
    let _e29: MultiVector = other_463;
    let _e32: MultiVector = other_463;
    let _e43: MultiVector = self_539;
    let _e46: MultiVector = self_539;
    let _e49: MultiVector = self_539;
    let _e52: MultiVector = self_539;
    let _e62: MultiVector = other_463;
    let _e65: MultiVector = other_463;
    let _e68: MultiVector = other_463;
    let _e71: MultiVector = other_463;
    let _e82: MultiVector = self_539;
    let _e85: MultiVector = self_539;
    let _e88: MultiVector = self_539;
    let _e91: MultiVector = self_539;
    let _e101: MultiVector = other_463;
    let _e104: MultiVector = other_463;
    let _e107: MultiVector = other_463;
    let _e110: MultiVector = other_463;
    let _e121: MultiVector = self_539;
    let _e124: MultiVector = self_539;
    let _e127: MultiVector = self_539;
    let _e130: MultiVector = self_539;
    let _e140: MultiVector = other_463;
    let _e143: MultiVector = other_463;
    let _e146: MultiVector = other_463;
    let _e149: MultiVector = other_463;
    return MultiVector((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e82.g2_.x, _e85.g2_.y, _e88.g2_.z, _e91.g2_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e101.g2_.x, _e104.g2_.y, _e107.g2_.z, _e110.g2_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e121.g3_.x, _e124.g3_.y, _e127.g3_.z, _e130.g3_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e140.g3_.x, _e143.g3_.y, _e146.g3_.z, _e149.g3_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn multi_vector_multi_vector_geometric_product(self_540: MultiVector, other_464: MultiVector) -> MultiVector {
    var self_541: MultiVector;
    var other_465: MultiVector;

    self_541 = self_540;
    other_465 = other_464;
    let _e4: MultiVector = self_541;
    let _e8: MultiVector = other_465;
    let _e11: MultiVector = self_541;
    let _e15: MultiVector = other_465;
    let _e28: MultiVector = self_541;
    let _e32: MultiVector = other_465;
    let _e45: MultiVector = self_541;
    let _e49: MultiVector = other_465;
    let _e62: MultiVector = self_541;
    let _e66: MultiVector = other_465;
    let _e79: MultiVector = self_541;
    let _e83: MultiVector = other_465;
    let _e97: MultiVector = self_541;
    let _e101: MultiVector = other_465;
    let _e115: MultiVector = self_541;
    let _e119: MultiVector = other_465;
    let _e133: MultiVector = self_541;
    let _e137: MultiVector = other_465;
    let _e148: MultiVector = self_541;
    let _e152: MultiVector = other_465;
    let _e164: MultiVector = self_541;
    let _e168: MultiVector = other_465;
    let _e180: MultiVector = self_541;
    let _e184: MultiVector = other_465;
    let _e196: MultiVector = self_541;
    let _e200: MultiVector = other_465;
    let _e213: MultiVector = self_541;
    let _e217: MultiVector = other_465;
    let _e231: MultiVector = self_541;
    let _e235: MultiVector = other_465;
    let _e249: MultiVector = self_541;
    let _e253: MultiVector = other_465;
    let _e267: MultiVector = self_541;
    let _e271: MultiVector = other_465;
    let _e274: MultiVector = self_541;
    let _e278: MultiVector = other_465;
    let _e291: MultiVector = self_541;
    let _e295: MultiVector = other_465;
    let _e308: MultiVector = self_541;
    let _e312: MultiVector = other_465;
    let _e325: MultiVector = self_541;
    let _e329: MultiVector = other_465;
    let _e342: MultiVector = self_541;
    let _e346: MultiVector = other_465;
    let _e358: MultiVector = self_541;
    let _e362: MultiVector = other_465;
    let _e374: MultiVector = self_541;
    let _e378: MultiVector = other_465;
    let _e390: MultiVector = self_541;
    let _e394: MultiVector = other_465;
    let _e398: MultiVector = self_541;
    let _e402: MultiVector = other_465;
    let _e415: MultiVector = self_541;
    let _e419: MultiVector = other_465;
    let _e432: MultiVector = self_541;
    let _e436: MultiVector = other_465;
    let _e449: MultiVector = self_541;
    let _e453: MultiVector = other_465;
    let _e457: MultiVector = self_541;
    let _e461: MultiVector = other_465;
    let _e474: MultiVector = self_541;
    let _e478: MultiVector = other_465;
    let _e491: MultiVector = self_541;
    let _e495: MultiVector = other_465;
    let _e508: MultiVector = self_541;
    let _e512: MultiVector = other_465;
    let _e515: MultiVector = self_541;
    let _e519: MultiVector = other_465;
    let _e532: MultiVector = self_541;
    let _e536: MultiVector = other_465;
    let _e549: MultiVector = self_541;
    let _e553: MultiVector = other_465;
    let _e566: MultiVector = self_541;
    let _e570: MultiVector = other_465;
    let _e574: MultiVector = self_541;
    let _e578: MultiVector = other_465;
    let _e591: MultiVector = self_541;
    let _e595: MultiVector = other_465;
    let _e608: MultiVector = self_541;
    let _e612: MultiVector = other_465;
    let _e625: MultiVector = self_541;
    let _e629: MultiVector = other_465;
    let _e642: MultiVector = self_541;
    let _e646: MultiVector = other_465;
    let _e658: MultiVector = self_541;
    let _e662: MultiVector = other_465;
    let _e674: MultiVector = self_541;
    let _e678: MultiVector = other_465;
    let _e690: MultiVector = self_541;
    let _e694: MultiVector = other_465;
    let _e698: MultiVector = self_541;
    let _e702: MultiVector = other_465;
    let _e715: MultiVector = self_541;
    let _e719: MultiVector = other_465;
    let _e732: MultiVector = self_541;
    let _e736: MultiVector = other_465;
    let _e749: MultiVector = self_541;
    let _e753: MultiVector = other_465;
    let _e756: MultiVector = self_541;
    let _e760: MultiVector = other_465;
    let _e773: MultiVector = self_541;
    let _e777: MultiVector = other_465;
    let _e790: MultiVector = self_541;
    let _e794: MultiVector = other_465;
    let _e807: MultiVector = self_541;
    let _e811: MultiVector = other_465;
    let _e815: MultiVector = self_541;
    let _e819: MultiVector = other_465;
    let _e832: MultiVector = self_541;
    let _e836: MultiVector = other_465;
    let _e849: MultiVector = self_541;
    let _e853: MultiVector = other_465;
    let _e866: MultiVector = self_541;
    let _e870: MultiVector = other_465;
    let _e874: MultiVector = self_541;
    let _e878: MultiVector = other_465;
    let _e891: MultiVector = self_541;
    let _e895: MultiVector = other_465;
    let _e908: MultiVector = self_541;
    let _e912: MultiVector = other_465;
    let _e925: MultiVector = self_541;
    let _e929: MultiVector = other_465;
    let _e942: MultiVector = self_541;
    let _e946: MultiVector = other_465;
    let _e958: MultiVector = self_541;
    let _e962: MultiVector = other_465;
    let _e974: MultiVector = self_541;
    let _e978: MultiVector = other_465;
    return MultiVector(((((((((((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e62.g1_.x) * _e66.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e79.g1_.y) * _e83.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e97.g1_.z) * _e101.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e115.g1_.w) * _e119.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e133.g2_.x) * _e137.g2_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e148.g2_.y) * _e152.g2_.yxwz) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e164.g2_.z) * _e168.g2_.zwxy) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e180.g2_.w) * _e184.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e196.g3_.x) * _e200.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e213.g3_.y) * _e217.g3_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e231.g3_.z) * _e235.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e249.g3_.w) * _e253.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((((((((((((((vec4<f32>(_e267.g0_.x) * _e271.g1_) + ((vec4<f32>(_e274.g0_.y) * _e278.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e291.g0_.z) * _e295.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e308.g0_.w) * _e312.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e325.g1_.x) * _e329.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e342.g1_.y) * _e346.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e358.g1_.z) * _e362.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e374.g1_.w) * _e378.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e390.g2_.x) * _e394.g3_)) + ((vec4<f32>(_e398.g2_.y) * _e402.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e415.g2_.z) * _e419.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e432.g2_.w) * _e436.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) - (vec4<f32>(_e449.g3_.x) * _e453.g2_)) + ((vec4<f32>(_e457.g3_.y) * _e461.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e474.g3_.z) * _e478.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e491.g3_.w) * _e495.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((((((((((vec4<f32>(_e508.g0_.x) * _e512.g2_) + ((vec4<f32>(_e515.g0_.y) * _e519.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e532.g0_.z) * _e536.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e549.g0_.w) * _e553.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e566.g1_.x) * _e570.g3_)) + ((vec4<f32>(_e574.g1_.y) * _e578.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e591.g1_.z) * _e595.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e608.g1_.w) * _e612.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e625.g2_.x) * _e629.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e642.g2_.y) * _e646.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e658.g2_.z) * _e662.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e674.g2_.w) * _e678.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) - (vec4<f32>(_e690.g3_.x) * _e694.g1_)) + ((vec4<f32>(_e698.g3_.y) * _e702.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e715.g3_.z) * _e719.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e732.g3_.w) * _e736.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((((((((((vec4<f32>(_e749.g0_.x) * _e753.g3_) + ((vec4<f32>(_e756.g0_.y) * _e760.g3_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e773.g0_.z) * _e777.g3_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e790.g0_.w) * _e794.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e807.g1_.x) * _e811.g2_)) + ((vec4<f32>(_e815.g1_.y) * _e819.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e832.g1_.z) * _e836.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e849.g1_.w) * _e853.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) - (vec4<f32>(_e866.g2_.x) * _e870.g1_)) + ((vec4<f32>(_e874.g2_.y) * _e878.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e891.g2_.z) * _e895.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e908.g2_.w) * _e912.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e925.g3_.x) * _e929.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e942.g3_.y) * _e946.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e958.g3_.z) * _e962.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e974.g3_.w) * _e978.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn multi_vector_multi_vector_regressive_product(self_542: MultiVector, other_466: MultiVector) -> MultiVector {
    var self_543: MultiVector;
    var other_467: MultiVector;

    self_543 = self_542;
    other_467 = other_466;
    let _e4: MultiVector = self_543;
    let _e8: MultiVector = other_467;
    let _e18: MultiVector = self_543;
    let _e22: MultiVector = other_467;
    let _e33: MultiVector = self_543;
    let _e37: MultiVector = other_467;
    let _e48: MultiVector = self_543;
    let _e52: MultiVector = other_467;
    let _e64: MultiVector = self_543;
    let _e68: MultiVector = other_467;
    let _e81: MultiVector = self_543;
    let _e85: MultiVector = other_467;
    let _e98: MultiVector = self_543;
    let _e102: MultiVector = other_467;
    let _e115: MultiVector = self_543;
    let _e119: MultiVector = other_467;
    let _e130: MultiVector = self_543;
    let _e134: MultiVector = other_467;
    let _e146: MultiVector = self_543;
    let _e150: MultiVector = other_467;
    let _e162: MultiVector = self_543;
    let _e166: MultiVector = other_467;
    let _e178: MultiVector = self_543;
    let _e182: MultiVector = other_467;
    let _e186: MultiVector = self_543;
    let _e190: MultiVector = other_467;
    let _e202: MultiVector = self_543;
    let _e206: MultiVector = other_467;
    let _e218: MultiVector = self_543;
    let _e222: MultiVector = other_467;
    let _e234: MultiVector = self_543;
    let _e238: MultiVector = other_467;
    let _e250: MultiVector = self_543;
    let _e254: MultiVector = other_467;
    let _e265: MultiVector = self_543;
    let _e269: MultiVector = other_467;
    let _e281: MultiVector = self_543;
    let _e285: MultiVector = other_467;
    let _e297: MultiVector = self_543;
    let _e301: MultiVector = other_467;
    let _e305: MultiVector = self_543;
    let _e309: MultiVector = other_467;
    let _e322: MultiVector = self_543;
    let _e326: MultiVector = other_467;
    let _e339: MultiVector = self_543;
    let _e343: MultiVector = other_467;
    let _e356: MultiVector = self_543;
    let _e360: MultiVector = other_467;
    let _e372: MultiVector = self_543;
    let _e376: MultiVector = other_467;
    let _e387: MultiVector = self_543;
    let _e391: MultiVector = other_467;
    let _e403: MultiVector = self_543;
    let _e407: MultiVector = other_467;
    let _e419: MultiVector = self_543;
    let _e423: MultiVector = other_467;
    let _e435: MultiVector = self_543;
    let _e439: MultiVector = other_467;
    let _e451: MultiVector = self_543;
    let _e455: MultiVector = other_467;
    let _e459: MultiVector = self_543;
    let _e463: MultiVector = other_467;
    let _e475: MultiVector = self_543;
    let _e479: MultiVector = other_467;
    let _e491: MultiVector = self_543;
    let _e495: MultiVector = other_467;
    let _e499: MultiVector = self_543;
    let _e503: MultiVector = other_467;
    let _e515: MultiVector = self_543;
    let _e519: MultiVector = other_467;
    let _e531: MultiVector = self_543;
    let _e535: MultiVector = other_467;
    let _e547: MultiVector = self_543;
    let _e550: MultiVector = self_543;
    let _e553: MultiVector = self_543;
    let _e556: MultiVector = self_543;
    let _e560: MultiVector = other_467;
    let _e563: MultiVector = other_467;
    let _e566: MultiVector = other_467;
    let _e569: MultiVector = other_467;
    let _e582: MultiVector = self_543;
    let _e586: MultiVector = other_467;
    let _e597: MultiVector = self_543;
    let _e601: MultiVector = other_467;
    let _e613: MultiVector = self_543;
    let _e617: MultiVector = other_467;
    let _e621: MultiVector = self_543;
    let _e625: MultiVector = other_467;
    let _e637: MultiVector = self_543;
    let _e641: MultiVector = other_467;
    let _e653: MultiVector = self_543;
    let _e656: MultiVector = self_543;
    let _e659: MultiVector = self_543;
    let _e662: MultiVector = self_543;
    let _e666: MultiVector = other_467;
    let _e669: MultiVector = other_467;
    let _e672: MultiVector = other_467;
    let _e675: MultiVector = other_467;
    return MultiVector((((((((((((((((((vec4<f32>(_e4.g0_.y) * _e8.g3_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g3_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g3_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e48.g1_.x) * vec4<f32>(_e52.g2_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e64.g1_.y) * _e68.g2_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e81.g1_.z) * _e85.g2_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e98.g1_.w) * _e102.g2_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e115.g2_.x) * _e119.g1_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e130.g2_.y) * vec4<f32>(_e134.g1_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e146.g2_.z) * vec4<f32>(_e150.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e162.g2_.w) * vec4<f32>(_e166.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (vec4<f32>(_e178.g3_.x) * _e182.g0_)) + ((vec4<f32>(_e186.g3_.y) * vec4<f32>(_e190.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e202.g3_.z) * vec4<f32>(_e206.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e218.g3_.w) * vec4<f32>(_e222.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e234.g0_.x) * vec4<f32>(_e238.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e250.g1_.y) * _e254.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e265.g1_.z) * _e269.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e281.g1_.w) * _e285.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + (vec4<f32>(_e297.g3_.x) * _e301.g1_)) + ((vec4<f32>(_e305.g3_.y) * vec4<f32>(_e309.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e322.g3_.z) * vec4<f32>(_e326.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e339.g3_.w) * vec4<f32>(_e343.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e356.g1_.x) * vec4<f32>(_e360.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((((((((vec4<f32>(_e372.g0_.z) * _e376.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e387.g0_.w) * _e391.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e403.g1_.y) * _e407.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e419.g1_.z) * _e423.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e435.g1_.w) * _e439.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + (vec4<f32>(_e451.g2_.x) * _e455.g3_)) + ((vec4<f32>(_e459.g2_.z) * vec4<f32>(_e463.g3_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e475.g2_.w) * vec4<f32>(_e479.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e491.g3_.x) * _e495.g2_)) + ((vec4<f32>(_e499.g3_.y) * vec4<f32>(_e503.g2_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e515.g3_.z) * vec4<f32>(_e519.g2_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e531.g3_.w) * vec4<f32>(_e535.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e547.g0_.x, _e550.g2_.y, _e553.g0_.y, _e556.g0_.y) * vec4<f32>(_e560.g1_.x, _e563.g3_.x, _e566.g1_.w, _e569.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e582.g1_.z) * _e586.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e597.g1_.w) * _e601.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e613.g3_.x) * _e617.g3_)) + ((vec4<f32>(_e621.g3_.z) * vec4<f32>(_e625.g3_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e637.g3_.w) * vec4<f32>(_e641.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e653.g1_.x, _e656.g3_.y, _e659.g1_.y, _e662.g1_.y) * vec4<f32>(_e666.g1_.x, _e669.g3_.x, _e672.g1_.w, _e675.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))));
}

fn multi_vector_multi_vector_outer_product(self_544: MultiVector, other_468: MultiVector) -> MultiVector {
    var self_545: MultiVector;
    var other_469: MultiVector;

    self_545 = self_544;
    other_469 = other_468;
    let _e4: MultiVector = self_545;
    let _e8: MultiVector = other_469;
    let _e11: MultiVector = self_545;
    let _e15: MultiVector = other_469;
    let _e27: MultiVector = self_545;
    let _e31: MultiVector = other_469;
    let _e43: MultiVector = self_545;
    let _e47: MultiVector = other_469;
    let _e59: MultiVector = self_545;
    let _e61: MultiVector = other_469;
    let _e73: MultiVector = self_545;
    let _e77: MultiVector = other_469;
    let _e80: MultiVector = self_545;
    let _e84: MultiVector = other_469;
    let _e97: MultiVector = self_545;
    let _e101: MultiVector = other_469;
    let _e113: MultiVector = self_545;
    let _e117: MultiVector = other_469;
    let _e129: MultiVector = self_545;
    let _e133: MultiVector = other_469;
    let _e145: MultiVector = self_545;
    let _e149: MultiVector = other_469;
    let _e161: MultiVector = self_545;
    let _e165: MultiVector = other_469;
    let _e177: MultiVector = self_545;
    let _e181: MultiVector = other_469;
    let _e193: MultiVector = self_545;
    let _e197: MultiVector = other_469;
    let _e209: MultiVector = self_545;
    let _e213: MultiVector = other_469;
    let _e225: MultiVector = self_545;
    let _e229: MultiVector = other_469;
    let _e241: MultiVector = self_545;
    let _e243: MultiVector = other_469;
    let _e258: MultiVector = self_545;
    let _e262: MultiVector = other_469;
    let _e265: MultiVector = self_545;
    let _e269: MultiVector = other_469;
    let _e281: MultiVector = self_545;
    let _e285: MultiVector = other_469;
    let _e297: MultiVector = self_545;
    let _e301: MultiVector = other_469;
    let _e313: MultiVector = self_545;
    let _e317: MultiVector = other_469;
    let _e328: MultiVector = self_545;
    let _e332: MultiVector = other_469;
    let _e343: MultiVector = self_545;
    let _e347: MultiVector = other_469;
    let _e358: MultiVector = self_545;
    let _e361: MultiVector = other_469;
    let _e372: MultiVector = self_545;
    let _e376: MultiVector = other_469;
    let _e379: MultiVector = self_545;
    let _e383: MultiVector = other_469;
    let _e395: MultiVector = self_545;
    let _e399: MultiVector = other_469;
    let _e411: MultiVector = self_545;
    let _e415: MultiVector = other_469;
    let _e419: MultiVector = self_545;
    let _e423: MultiVector = other_469;
    let _e436: MultiVector = self_545;
    let _e440: MultiVector = other_469;
    let _e453: MultiVector = self_545;
    let _e457: MultiVector = other_469;
    let _e470: MultiVector = self_545;
    let _e474: MultiVector = other_469;
    let _e487: MultiVector = self_545;
    let _e491: MultiVector = other_469;
    let _e503: MultiVector = self_545;
    let _e507: MultiVector = other_469;
    let _e519: MultiVector = self_545;
    let _e523: MultiVector = other_469;
    let _e535: MultiVector = self_545;
    let _e539: MultiVector = other_469;
    let _e551: MultiVector = self_545;
    let _e555: MultiVector = other_469;
    let _e566: MultiVector = self_545;
    let _e570: MultiVector = other_469;
    let _e581: MultiVector = self_545;
    let _e585: MultiVector = other_469;
    let _e596: MultiVector = self_545;
    let _e599: MultiVector = other_469;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g2_.y) * _e15.g2_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e27.g2_.z) * _e31.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e43.g2_.w) * _e47.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e59.g0_ * vec4<f32>(_e61.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((((((vec4<f32>(_e73.g0_.x) * _e77.g1_) + ((vec4<f32>(_e80.g1_.x) * _e84.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e97.g1_.y) * vec4<f32>(_e101.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e113.g1_.z) * vec4<f32>(_e117.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e129.g1_.w) * vec4<f32>(_e133.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e145.g2_.y) * _e149.g3_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e161.g2_.z) * _e165.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e177.g2_.w) * _e181.g3_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e193.g3_.y) * _e197.g2_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e209.g3_.z) * _e213.g2_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e225.g3_.w) * _e229.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e241.g0_ * vec4<f32>(_e243.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e258.g0_.x) * _e262.g2_) + ((vec4<f32>(_e265.g0_.z) * vec4<f32>(_e269.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e281.g0_.w) * vec4<f32>(_e285.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e297.g2_.x) * vec4<f32>(_e301.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e313.g2_.y) * _e317.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e328.g2_.z) * _e332.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e343.g2_.w) * _e347.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e358.g0_.yxxx * _e361.g2_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((((((((((vec4<f32>(_e372.g0_.x) * _e376.g3_) + ((vec4<f32>(_e379.g0_.z) * vec4<f32>(_e383.g3_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e395.g0_.w) * vec4<f32>(_e399.g3_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (vec4<f32>(_e411.g1_.x) * _e415.g2_)) + ((vec4<f32>(_e419.g1_.y) * vec4<f32>(_e423.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e436.g1_.z) * vec4<f32>(_e440.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e453.g1_.w) * vec4<f32>(_e457.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e470.g2_.x) * vec4<f32>(_e474.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e487.g2_.y) * _e491.g1_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e503.g2_.z) * _e507.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e519.g2_.w) * _e523.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e535.g3_.x) * vec4<f32>(_e539.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e551.g3_.y) * _e555.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e566.g3_.z) * _e570.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e581.g3_.w) * _e585.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e596.g0_.yxxx * _e599.g3_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_multi_vector_inner_product(self_546: MultiVector, other_470: MultiVector) -> MultiVector {
    var self_547: MultiVector;
    var other_471: MultiVector;

    self_547 = self_546;
    other_471 = other_470;
    let _e4: MultiVector = self_547;
    let _e8: MultiVector = other_471;
    let _e11: MultiVector = self_547;
    let _e15: MultiVector = other_471;
    let _e27: MultiVector = self_547;
    let _e31: MultiVector = other_471;
    let _e43: MultiVector = self_547;
    let _e47: MultiVector = other_471;
    let _e60: MultiVector = self_547;
    let _e64: MultiVector = other_471;
    let _e77: MultiVector = self_547;
    let _e81: MultiVector = other_471;
    let _e94: MultiVector = self_547;
    let _e98: MultiVector = other_471;
    let _e111: MultiVector = self_547;
    let _e115: MultiVector = other_471;
    let _e126: MultiVector = self_547;
    let _e130: MultiVector = other_471;
    let _e141: MultiVector = self_547;
    let _e145: MultiVector = other_471;
    let _e156: MultiVector = self_547;
    let _e160: MultiVector = other_471;
    let _e171: MultiVector = self_547;
    let _e175: MultiVector = other_471;
    let _e188: MultiVector = self_547;
    let _e192: MultiVector = other_471;
    let _e205: MultiVector = self_547;
    let _e209: MultiVector = other_471;
    let _e222: MultiVector = self_547;
    let _e226: MultiVector = other_471;
    let _e239: MultiVector = self_547;
    let _e242: MultiVector = other_471;
    let _e254: MultiVector = self_547;
    let _e258: MultiVector = other_471;
    let _e261: MultiVector = self_547;
    let _e265: MultiVector = other_471;
    let _e277: MultiVector = self_547;
    let _e281: MultiVector = other_471;
    let _e293: MultiVector = self_547;
    let _e297: MultiVector = other_471;
    let _e309: MultiVector = self_547;
    let _e313: MultiVector = other_471;
    let _e324: MultiVector = self_547;
    let _e328: MultiVector = other_471;
    let _e339: MultiVector = self_547;
    let _e343: MultiVector = other_471;
    let _e354: MultiVector = self_547;
    let _e358: MultiVector = other_471;
    let _e370: MultiVector = self_547;
    let _e374: MultiVector = other_471;
    let _e386: MultiVector = self_547;
    let _e390: MultiVector = other_471;
    let _e402: MultiVector = self_547;
    let _e406: MultiVector = other_471;
    let _e418: MultiVector = self_547;
    let _e422: MultiVector = other_471;
    let _e426: MultiVector = self_547;
    let _e430: MultiVector = other_471;
    let _e442: MultiVector = self_547;
    let _e446: MultiVector = other_471;
    let _e458: MultiVector = self_547;
    let _e462: MultiVector = other_471;
    let _e474: MultiVector = self_547;
    let _e477: MultiVector = other_471;
    let _e488: MultiVector = self_547;
    let _e492: MultiVector = other_471;
    let _e495: MultiVector = self_547;
    let _e499: MultiVector = other_471;
    let _e512: MultiVector = self_547;
    let _e516: MultiVector = other_471;
    let _e529: MultiVector = self_547;
    let _e533: MultiVector = other_471;
    let _e537: MultiVector = self_547;
    let _e541: MultiVector = other_471;
    let _e553: MultiVector = self_547;
    let _e557: MultiVector = other_471;
    let _e569: MultiVector = self_547;
    let _e573: MultiVector = other_471;
    let _e585: MultiVector = self_547;
    let _e589: MultiVector = other_471;
    let _e602: MultiVector = self_547;
    let _e606: MultiVector = other_471;
    let _e618: MultiVector = self_547;
    let _e622: MultiVector = other_471;
    let _e634: MultiVector = self_547;
    let _e638: MultiVector = other_471;
    let _e650: MultiVector = self_547;
    let _e654: MultiVector = other_471;
    let _e658: MultiVector = self_547;
    let _e662: MultiVector = other_471;
    let _e675: MultiVector = self_547;
    let _e679: MultiVector = other_471;
    let _e692: MultiVector = self_547;
    let _e696: MultiVector = other_471;
    let _e709: MultiVector = self_547;
    let _e712: MultiVector = other_471;
    let _e725: MultiVector = self_547;
    let _e729: MultiVector = other_471;
    let _e732: MultiVector = self_547;
    let _e736: MultiVector = other_471;
    let _e748: MultiVector = self_547;
    let _e752: MultiVector = other_471;
    let _e764: MultiVector = self_547;
    let _e768: MultiVector = other_471;
    let _e780: MultiVector = self_547;
    let _e784: MultiVector = other_471;
    let _e796: MultiVector = self_547;
    let _e800: MultiVector = other_471;
    let _e812: MultiVector = self_547;
    let _e816: MultiVector = other_471;
    let _e828: MultiVector = self_547;
    let _e832: MultiVector = other_471;
    let _e845: MultiVector = self_547;
    let _e849: MultiVector = other_471;
    let _e861: MultiVector = self_547;
    let _e865: MultiVector = other_471;
    let _e877: MultiVector = self_547;
    let _e881: MultiVector = other_471;
    let _e893: MultiVector = self_547;
    let _e895: MultiVector = other_471;
    return MultiVector(((((((((((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e43.g1_.x) * _e47.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e60.g1_.y) * _e64.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e77.g1_.z) * _e81.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e94.g1_.w) * _e98.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e111.g2_.x) * _e115.g2_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e126.g2_.y) * _e130.g2_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e141.g2_.z) * _e145.g2_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e156.g2_.w) * _e160.g2_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e171.g3_.x) * _e175.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e188.g3_.y) * _e192.g3_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e205.g3_.z) * _e209.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e222.g3_.w) * _e226.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e239.g0_.yyxx * _e242.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), ((((((((((((((((vec4<f32>(_e254.g0_.x) * _e258.g1_) + ((vec4<f32>(_e261.g0_.z) * vec4<f32>(_e265.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e277.g0_.w) * vec4<f32>(_e281.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e293.g1_.x) * vec4<f32>(_e297.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e309.g1_.y) * _e313.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e324.g1_.z) * _e328.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e339.g1_.w) * _e343.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e354.g2_.x) * vec4<f32>(_e358.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e370.g2_.y) * _e374.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e386.g2_.z) * _e390.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e402.g2_.w) * _e406.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) - (vec4<f32>(_e418.g3_.x) * _e422.g2_)) + ((vec4<f32>(_e426.g3_.y) * vec4<f32>(_e430.g2_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e442.g3_.z) * vec4<f32>(_e446.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e458.g3_.w) * vec4<f32>(_e462.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e474.g0_.yxxx * _e477.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((((((((((vec4<f32>(_e488.g0_.x) * _e492.g2_) + ((vec4<f32>(_e495.g0_.z) * _e499.g2_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e512.g0_.w) * _e516.g2_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e529.g1_.x) * _e533.g3_)) + ((vec4<f32>(_e537.g1_.y) * _e541.g3_.xxwz) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e553.g1_.z) * _e557.g3_.wwxy) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e569.g1_.w) * _e573.g3_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e585.g2_.x) * _e589.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e602.g2_.y) * _e606.g0_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e618.g2_.z) * _e622.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e634.g2_.w) * _e638.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) - (vec4<f32>(_e650.g3_.x) * _e654.g1_)) + ((vec4<f32>(_e658.g3_.y) * _e662.g1_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e675.g3_.z) * _e679.g1_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e692.g3_.w) * _e696.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e709.g0_.xyyy * _e712.g2_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((((((((((((vec4<f32>(_e725.g0_.x) * _e729.g3_) + ((vec4<f32>(_e732.g1_.y) * _e736.g2_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e748.g1_.z) * _e752.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e764.g1_.w) * _e768.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e780.g2_.y) * _e784.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e796.g2_.z) * _e800.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e812.g2_.w) * _e816.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e828.g3_.x) * _e832.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e845.g3_.y) * vec4<f32>(_e849.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e861.g3_.z) * vec4<f32>(_e865.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e877.g3_.w) * vec4<f32>(_e881.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e893.g0_ * vec4<f32>(_e895.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_geometric_anti_product(self_548: MultiVector, other_472: MultiVector) -> MultiVector {
    var self_549: MultiVector;
    var other_473: MultiVector;

    self_549 = self_548;
    other_473 = other_472;
    let _e4: MultiVector = self_549;
    let _e8: MultiVector = other_473;
    let _e20: MultiVector = self_549;
    let _e24: MultiVector = other_473;
    let _e36: MultiVector = self_549;
    let _e40: MultiVector = other_473;
    let _e52: MultiVector = self_549;
    let _e56: MultiVector = other_473;
    let _e68: MultiVector = self_549;
    let _e72: MultiVector = other_473;
    let _e85: MultiVector = self_549;
    let _e89: MultiVector = other_473;
    let _e103: MultiVector = self_549;
    let _e107: MultiVector = other_473;
    let _e121: MultiVector = self_549;
    let _e125: MultiVector = other_473;
    let _e139: MultiVector = self_549;
    let _e143: MultiVector = other_473;
    let _e154: MultiVector = self_549;
    let _e158: MultiVector = other_473;
    let _e170: MultiVector = self_549;
    let _e174: MultiVector = other_473;
    let _e186: MultiVector = self_549;
    let _e190: MultiVector = other_473;
    let _e202: MultiVector = self_549;
    let _e206: MultiVector = other_473;
    let _e210: MultiVector = self_549;
    let _e214: MultiVector = other_473;
    let _e227: MultiVector = self_549;
    let _e231: MultiVector = other_473;
    let _e244: MultiVector = self_549;
    let _e248: MultiVector = other_473;
    let _e261: MultiVector = self_549;
    let _e265: MultiVector = other_473;
    let _e268: MultiVector = self_549;
    let _e272: MultiVector = other_473;
    let _e285: MultiVector = self_549;
    let _e289: MultiVector = other_473;
    let _e302: MultiVector = self_549;
    let _e306: MultiVector = other_473;
    let _e319: MultiVector = self_549;
    let _e323: MultiVector = other_473;
    let _e327: MultiVector = self_549;
    let _e331: MultiVector = other_473;
    let _e344: MultiVector = self_549;
    let _e348: MultiVector = other_473;
    let _e361: MultiVector = self_549;
    let _e365: MultiVector = other_473;
    let _e378: MultiVector = self_549;
    let _e382: MultiVector = other_473;
    let _e393: MultiVector = self_549;
    let _e397: MultiVector = other_473;
    let _e411: MultiVector = self_549;
    let _e415: MultiVector = other_473;
    let _e429: MultiVector = self_549;
    let _e433: MultiVector = other_473;
    let _e447: MultiVector = self_549;
    let _e451: MultiVector = other_473;
    let _e455: MultiVector = self_549;
    let _e459: MultiVector = other_473;
    let _e472: MultiVector = self_549;
    let _e476: MultiVector = other_473;
    let _e489: MultiVector = self_549;
    let _e493: MultiVector = other_473;
    let _e506: MultiVector = self_549;
    let _e510: MultiVector = other_473;
    let _e513: MultiVector = self_549;
    let _e517: MultiVector = other_473;
    let _e530: MultiVector = self_549;
    let _e534: MultiVector = other_473;
    let _e547: MultiVector = self_549;
    let _e551: MultiVector = other_473;
    let _e564: MultiVector = self_549;
    let _e568: MultiVector = other_473;
    let _e579: MultiVector = self_549;
    let _e583: MultiVector = other_473;
    let _e597: MultiVector = self_549;
    let _e601: MultiVector = other_473;
    let _e615: MultiVector = self_549;
    let _e619: MultiVector = other_473;
    let _e633: MultiVector = self_549;
    let _e637: MultiVector = other_473;
    let _e641: MultiVector = self_549;
    let _e645: MultiVector = other_473;
    let _e658: MultiVector = self_549;
    let _e662: MultiVector = other_473;
    let _e675: MultiVector = self_549;
    let _e679: MultiVector = other_473;
    let _e692: MultiVector = self_549;
    let _e696: MultiVector = other_473;
    let _e700: MultiVector = self_549;
    let _e704: MultiVector = other_473;
    let _e717: MultiVector = self_549;
    let _e721: MultiVector = other_473;
    let _e734: MultiVector = self_549;
    let _e738: MultiVector = other_473;
    let _e751: MultiVector = self_549;
    let _e755: MultiVector = other_473;
    let _e767: MultiVector = self_549;
    let _e771: MultiVector = other_473;
    let _e785: MultiVector = self_549;
    let _e789: MultiVector = other_473;
    let _e803: MultiVector = self_549;
    let _e807: MultiVector = other_473;
    let _e821: MultiVector = self_549;
    let _e825: MultiVector = other_473;
    let _e829: MultiVector = self_549;
    let _e833: MultiVector = other_473;
    let _e846: MultiVector = self_549;
    let _e850: MultiVector = other_473;
    let _e863: MultiVector = self_549;
    let _e867: MultiVector = other_473;
    let _e880: MultiVector = self_549;
    let _e884: MultiVector = other_473;
    let _e888: MultiVector = self_549;
    let _e892: MultiVector = other_473;
    let _e905: MultiVector = self_549;
    let _e909: MultiVector = other_473;
    let _e922: MultiVector = self_549;
    let _e926: MultiVector = other_473;
    let _e939: MultiVector = self_549;
    let _e943: MultiVector = other_473;
    let _e947: MultiVector = self_549;
    let _e951: MultiVector = other_473;
    let _e964: MultiVector = self_549;
    let _e968: MultiVector = other_473;
    let _e981: MultiVector = self_549;
    let _e985: MultiVector = other_473;
    return MultiVector((((((((((((((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g3_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g3_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e68.g1_.x) * _e72.g2_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e85.g1_.y) * _e89.g2_.yxwz) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e103.g1_.z) * _e107.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e121.g1_.w) * _e125.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e139.g2_.x) * _e143.g1_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e154.g2_.y) * _e158.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e170.g2_.z) * _e174.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e186.g2_.w) * _e190.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e202.g3_.x) * _e206.g0_)) + ((vec4<f32>(_e210.g3_.y) * _e214.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e227.g3_.z) * _e231.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e244.g3_.w) * _e248.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((((((((((vec4<f32>(_e261.g0_.x) * _e265.g2_) + ((vec4<f32>(_e268.g0_.y) * _e272.g2_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e285.g0_.z) * _e289.g2_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e302.g0_.w) * _e306.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e319.g1_.x) * _e323.g3_)) + ((vec4<f32>(_e327.g1_.y) * _e331.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e344.g1_.z) * _e348.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e361.g1_.w) * _e365.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e378.g2_.x) * _e382.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e393.g2_.y) * _e397.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e411.g2_.z) * _e415.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e429.g2_.w) * _e433.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e447.g3_.x) * _e451.g1_)) + ((vec4<f32>(_e455.g3_.y) * _e459.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e472.g3_.z) * _e476.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e489.g3_.w) * _e493.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((((((((((vec4<f32>(_e506.g0_.x) * _e510.g1_) + ((vec4<f32>(_e513.g0_.y) * _e517.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e530.g0_.z) * _e534.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e547.g0_.w) * _e551.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e564.g1_.x) * _e568.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e579.g1_.y) * _e583.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e597.g1_.z) * _e601.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e615.g1_.w) * _e619.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e633.g2_.x) * _e637.g3_)) + ((vec4<f32>(_e641.g2_.y) * _e645.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e658.g2_.z) * _e662.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e675.g2_.w) * _e679.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + (vec4<f32>(_e692.g3_.x) * _e696.g2_)) + ((vec4<f32>(_e700.g3_.y) * _e704.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e717.g3_.z) * _e721.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e734.g3_.w) * _e738.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((((((((((((vec4<f32>(_e751.g0_.x) * _e755.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e767.g0_.y) * _e771.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e785.g0_.z) * _e789.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e803.g0_.w) * _e807.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e821.g1_.x) * _e825.g1_)) + ((vec4<f32>(_e829.g1_.y) * _e833.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e846.g1_.z) * _e850.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e863.g1_.w) * _e867.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e880.g2_.x) * _e884.g2_)) + ((vec4<f32>(_e888.g2_.y) * _e892.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e905.g2_.z) * _e909.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e922.g2_.w) * _e926.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + (vec4<f32>(_e939.g3_.x) * _e943.g3_)) + ((vec4<f32>(_e947.g3_.y) * _e951.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e964.g3_.z) * _e968.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e981.g3_.w) * _e985.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn multi_vector_multi_vector_inner_anti_product(self_550: MultiVector, other_474: MultiVector) -> MultiVector {
    var self_551: MultiVector;
    var other_475: MultiVector;

    self_551 = self_550;
    other_475 = other_474;
    let _e4: MultiVector = self_551;
    let _e8: MultiVector = other_475;
    let _e20: MultiVector = self_551;
    let _e24: MultiVector = other_475;
    let _e36: MultiVector = self_551;
    let _e40: MultiVector = other_475;
    let _e52: MultiVector = self_551;
    let _e56: MultiVector = other_475;
    let _e68: MultiVector = self_551;
    let _e72: MultiVector = other_475;
    let _e84: MultiVector = self_551;
    let _e88: MultiVector = other_475;
    let _e100: MultiVector = self_551;
    let _e104: MultiVector = other_475;
    let _e116: MultiVector = self_551;
    let _e120: MultiVector = other_475;
    let _e124: MultiVector = self_551;
    let _e128: MultiVector = other_475;
    let _e141: MultiVector = self_551;
    let _e145: MultiVector = other_475;
    let _e158: MultiVector = self_551;
    let _e162: MultiVector = other_475;
    let _e175: MultiVector = self_551;
    let _e177: MultiVector = other_475;
    let _e189: MultiVector = self_551;
    let _e193: MultiVector = other_475;
    let _e196: MultiVector = self_551;
    let _e200: MultiVector = other_475;
    let _e213: MultiVector = self_551;
    let _e217: MultiVector = other_475;
    let _e230: MultiVector = self_551;
    let _e234: MultiVector = other_475;
    let _e238: MultiVector = self_551;
    let _e242: MultiVector = other_475;
    let _e254: MultiVector = self_551;
    let _e258: MultiVector = other_475;
    let _e270: MultiVector = self_551;
    let _e274: MultiVector = other_475;
    let _e286: MultiVector = self_551;
    let _e290: MultiVector = other_475;
    let _e301: MultiVector = self_551;
    let _e305: MultiVector = other_475;
    let _e318: MultiVector = self_551;
    let _e322: MultiVector = other_475;
    let _e335: MultiVector = self_551;
    let _e339: MultiVector = other_475;
    let _e352: MultiVector = self_551;
    let _e356: MultiVector = other_475;
    let _e360: MultiVector = self_551;
    let _e364: MultiVector = other_475;
    let _e376: MultiVector = self_551;
    let _e380: MultiVector = other_475;
    let _e392: MultiVector = self_551;
    let _e396: MultiVector = other_475;
    let _e408: MultiVector = self_551;
    let _e411: MultiVector = other_475;
    let _e424: MultiVector = self_551;
    let _e428: MultiVector = other_475;
    let _e431: MultiVector = self_551;
    let _e435: MultiVector = other_475;
    let _e447: MultiVector = self_551;
    let _e451: MultiVector = other_475;
    let _e463: MultiVector = self_551;
    let _e467: MultiVector = other_475;
    let _e480: MultiVector = self_551;
    let _e484: MultiVector = other_475;
    let _e497: MultiVector = self_551;
    let _e501: MultiVector = other_475;
    let _e514: MultiVector = self_551;
    let _e518: MultiVector = other_475;
    let _e531: MultiVector = self_551;
    let _e535: MultiVector = other_475;
    let _e547: MultiVector = self_551;
    let _e551: MultiVector = other_475;
    let _e563: MultiVector = self_551;
    let _e567: MultiVector = other_475;
    let _e579: MultiVector = self_551;
    let _e583: MultiVector = other_475;
    let _e595: MultiVector = self_551;
    let _e599: MultiVector = other_475;
    let _e603: MultiVector = self_551;
    let _e607: MultiVector = other_475;
    let _e620: MultiVector = self_551;
    let _e624: MultiVector = other_475;
    let _e637: MultiVector = self_551;
    let _e641: MultiVector = other_475;
    let _e654: MultiVector = self_551;
    let _e657: MultiVector = other_475;
    let _e668: MultiVector = self_551;
    let _e672: MultiVector = other_475;
    let _e684: MultiVector = self_551;
    let _e688: MultiVector = other_475;
    let _e701: MultiVector = self_551;
    let _e705: MultiVector = other_475;
    let _e718: MultiVector = self_551;
    let _e722: MultiVector = other_475;
    let _e726: MultiVector = self_551;
    let _e730: MultiVector = other_475;
    let _e742: MultiVector = self_551;
    let _e746: MultiVector = other_475;
    let _e758: MultiVector = self_551;
    let _e762: MultiVector = other_475;
    let _e774: MultiVector = self_551;
    let _e778: MultiVector = other_475;
    let _e782: MultiVector = self_551;
    let _e786: MultiVector = other_475;
    let _e798: MultiVector = self_551;
    let _e802: MultiVector = other_475;
    let _e814: MultiVector = self_551;
    let _e818: MultiVector = other_475;
    let _e830: MultiVector = self_551;
    let _e834: MultiVector = other_475;
    let _e838: MultiVector = self_551;
    let _e842: MultiVector = other_475;
    let _e854: MultiVector = self_551;
    let _e858: MultiVector = other_475;
    let _e870: MultiVector = self_551;
    let _e874: MultiVector = other_475;
    let _e886: MultiVector = self_551;
    let _e889: MultiVector = other_475;
    return MultiVector((((((((((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g1_.y) * _e24.g2_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e36.g1_.z) * _e40.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.w) * _e56.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e68.g2_.y) * _e72.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g2_.z) * _e88.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e100.g2_.w) * _e104.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + (vec4<f32>(_e116.g3_.x) * _e120.g0_)) + ((vec4<f32>(_e124.g3_.y) * vec4<f32>(_e128.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e141.g3_.z) * vec4<f32>(_e145.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e158.g3_.w) * vec4<f32>(_e162.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e175.g0_ * vec4<f32>(_e177.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((((((((((vec4<f32>(_e189.g0_.x) * _e193.g2_) + ((vec4<f32>(_e196.g0_.z) * _e200.g2_.wwxy) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e213.g0_.w) * _e217.g2_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e230.g1_.x) * _e234.g3_)) + ((vec4<f32>(_e238.g1_.y) * _e242.g3_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e254.g1_.z) * _e258.g3_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e270.g1_.w) * _e274.g3_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e286.g2_.x) * _e290.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e301.g2_.y) * _e305.g0_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e318.g2_.z) * _e322.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e335.g2_.w) * _e339.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e352.g3_.x) * _e356.g1_)) + ((vec4<f32>(_e360.g3_.y) * _e364.g1_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e376.g3_.z) * _e380.g1_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e392.g3_.w) * _e396.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e408.g0_.xyyy * _e411.g2_.xxwz) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))), ((((((((((((((((vec4<f32>(_e424.g0_.x) * _e428.g1_) + ((vec4<f32>(_e431.g0_.z) * vec4<f32>(_e435.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e447.g0_.w) * vec4<f32>(_e451.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e463.g1_.x) * vec4<f32>(_e467.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e480.g1_.y) * _e484.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e497.g1_.z) * _e501.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e514.g1_.w) * _e518.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e531.g2_.x) * vec4<f32>(_e535.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e547.g2_.y) * _e551.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e563.g2_.z) * _e567.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e579.g2_.w) * _e583.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + (vec4<f32>(_e595.g3_.x) * _e599.g2_)) + ((vec4<f32>(_e603.g3_.y) * vec4<f32>(_e607.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e620.g3_.z) * vec4<f32>(_e624.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e637.g3_.w) * vec4<f32>(_e641.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e654.g0_.yxxx * _e657.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((((((((((vec4<f32>(_e668.g0_.x) * _e672.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e684.g0_.z) * _e688.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e701.g0_.w) * _e705.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) - (vec4<f32>(_e718.g1_.x) * _e722.g1_)) + ((vec4<f32>(_e726.g1_.y) * _e730.g1_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e742.g1_.z) * _e746.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e758.g1_.w) * _e762.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e774.g2_.x) * _e778.g2_)) + ((vec4<f32>(_e782.g2_.y) * _e786.g2_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e798.g2_.z) * _e802.g2_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e814.g2_.w) * _e818.g2_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + (vec4<f32>(_e830.g3_.x) * _e834.g3_)) + ((vec4<f32>(_e838.g3_.y) * _e842.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e854.g3_.z) * _e858.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e870.g3_.w) * _e874.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e886.g0_.yyxx * _e889.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn multi_vector_multi_vector_left_contraction(self_552: MultiVector, other_476: MultiVector) -> MultiVector {
    var self_553: MultiVector;
    var other_477: MultiVector;

    self_553 = self_552;
    other_477 = other_476;
    let _e4: MultiVector = self_553;
    let _e8: MultiVector = other_477;
    let _e11: MultiVector = self_553;
    let _e15: MultiVector = other_477;
    let _e28: MultiVector = self_553;
    let _e32: MultiVector = other_477;
    let _e45: MultiVector = self_553;
    let _e49: MultiVector = other_477;
    let _e62: MultiVector = self_553;
    let _e66: MultiVector = other_477;
    let _e79: MultiVector = self_553;
    let _e83: MultiVector = other_477;
    let _e96: MultiVector = self_553;
    let _e100: MultiVector = other_477;
    let _e113: MultiVector = self_553;
    let _e117: MultiVector = other_477;
    let _e130: MultiVector = self_553;
    let _e134: MultiVector = other_477;
    let _e145: MultiVector = self_553;
    let _e149: MultiVector = other_477;
    let _e160: MultiVector = self_553;
    let _e164: MultiVector = other_477;
    let _e175: MultiVector = self_553;
    let _e179: MultiVector = other_477;
    let _e191: MultiVector = self_553;
    let _e195: MultiVector = other_477;
    let _e208: MultiVector = self_553;
    let _e212: MultiVector = other_477;
    let _e225: MultiVector = self_553;
    let _e229: MultiVector = other_477;
    let _e242: MultiVector = self_553;
    let _e245: MultiVector = other_477;
    let _e257: MultiVector = self_553;
    let _e261: MultiVector = other_477;
    let _e264: MultiVector = self_553;
    let _e268: MultiVector = other_477;
    let _e280: MultiVector = self_553;
    let _e284: MultiVector = other_477;
    let _e296: MultiVector = self_553;
    let _e300: MultiVector = other_477;
    let _e312: MultiVector = self_553;
    let _e316: MultiVector = other_477;
    let _e328: MultiVector = self_553;
    let _e332: MultiVector = other_477;
    let _e344: MultiVector = self_553;
    let _e348: MultiVector = other_477;
    let _e360: MultiVector = self_553;
    let _e363: MultiVector = other_477;
    let _e374: MultiVector = self_553;
    let _e378: MultiVector = other_477;
    let _e381: MultiVector = self_553;
    let _e385: MultiVector = other_477;
    let _e389: MultiVector = self_553;
    let _e393: MultiVector = other_477;
    let _e405: MultiVector = self_553;
    let _e409: MultiVector = other_477;
    let _e421: MultiVector = self_553;
    let _e425: MultiVector = other_477;
    let _e437: MultiVector = self_553;
    let _e441: MultiVector = other_477;
    let _e453: MultiVector = self_553;
    let _e457: MultiVector = other_477;
    let _e469: MultiVector = self_553;
    let _e473: MultiVector = other_477;
    let _e485: MultiVector = self_553;
    let _e489: MultiVector = other_477;
    let _e501: MultiVector = self_553;
    let _e505: MultiVector = other_477;
    let _e517: MultiVector = self_553;
    let _e521: MultiVector = other_477;
    let _e533: MultiVector = self_553;
    let _e535: MultiVector = other_477;
    let _e550: MultiVector = self_553;
    let _e554: MultiVector = other_477;
    let _e557: MultiVector = self_553;
    let _e561: MultiVector = other_477;
    let _e573: MultiVector = self_553;
    let _e577: MultiVector = other_477;
    let _e589: MultiVector = self_553;
    let _e593: MultiVector = other_477;
    let _e605: MultiVector = self_553;
    let _e607: MultiVector = other_477;
    return MultiVector(((((((((((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e45.g1_.x) * _e49.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e62.g1_.y) * vec4<f32>(_e66.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e79.g1_.z) * vec4<f32>(_e83.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e96.g1_.w) * vec4<f32>(_e100.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e113.g2_.x) * vec4<f32>(_e117.g2_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e130.g2_.y) * _e134.g2_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e145.g2_.z) * _e149.g2_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e160.g2_.w) * _e164.g2_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e175.g3_.x) * vec4<f32>(_e179.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e191.g3_.y) * _e195.g3_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e208.g3_.z) * _e212.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e225.g3_.w) * _e229.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e242.g0_.yxxx * _e245.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), ((((((((vec4<f32>(_e257.g0_.x) * _e261.g1_) + ((vec4<f32>(_e264.g0_.z) * vec4<f32>(_e268.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e280.g0_.w) * vec4<f32>(_e284.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e296.g2_.x) * vec4<f32>(_e300.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e312.g2_.y) * _e316.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e328.g2_.z) * _e332.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e344.g2_.w) * _e348.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e360.g0_.yxxx * _e363.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((((((vec4<f32>(_e374.g0_.x) * _e378.g2_) + (vec4<f32>(_e381.g1_.x) * _e385.g3_)) + ((vec4<f32>(_e389.g1_.y) * vec4<f32>(_e393.g3_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e405.g1_.z) * vec4<f32>(_e409.g3_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e421.g1_.w) * vec4<f32>(_e425.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e437.g2_.y) * _e441.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e453.g2_.z) * _e457.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e469.g2_.w) * _e473.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e485.g3_.y) * _e489.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e501.g3_.z) * _e505.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e517.g3_.w) * _e521.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e533.g0_ * vec4<f32>(_e535.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e550.g0_.x) * _e554.g3_) + ((vec4<f32>(_e557.g2_.y) * _e561.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e573.g2_.z) * _e577.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e589.g2_.w) * _e593.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e605.g0_ * vec4<f32>(_e607.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_multi_vector_right_contraction(self_554: MultiVector, other_478: MultiVector) -> MultiVector {
    var self_555: MultiVector;
    var other_479: MultiVector;

    self_555 = self_554;
    other_479 = other_478;
    let _e4: MultiVector = self_555;
    let _e8: MultiVector = other_479;
    let _e19: MultiVector = self_555;
    let _e23: MultiVector = other_479;
    let _e35: MultiVector = self_555;
    let _e39: MultiVector = other_479;
    let _e51: MultiVector = self_555;
    let _e55: MultiVector = other_479;
    let _e67: MultiVector = self_555;
    let _e71: MultiVector = other_479;
    let _e84: MultiVector = self_555;
    let _e88: MultiVector = other_479;
    let _e101: MultiVector = self_555;
    let _e105: MultiVector = other_479;
    let _e118: MultiVector = self_555;
    let _e122: MultiVector = other_479;
    let _e133: MultiVector = self_555;
    let _e137: MultiVector = other_479;
    let _e149: MultiVector = self_555;
    let _e153: MultiVector = other_479;
    let _e165: MultiVector = self_555;
    let _e169: MultiVector = other_479;
    let _e181: MultiVector = self_555;
    let _e185: MultiVector = other_479;
    let _e198: MultiVector = self_555;
    let _e202: MultiVector = other_479;
    let _e215: MultiVector = self_555;
    let _e219: MultiVector = other_479;
    let _e232: MultiVector = self_555;
    let _e236: MultiVector = other_479;
    let _e249: MultiVector = self_555;
    let _e253: MultiVector = other_479;
    let _e265: MultiVector = self_555;
    let _e269: MultiVector = other_479;
    let _e279: MultiVector = self_555;
    let _e283: MultiVector = other_479;
    let _e294: MultiVector = self_555;
    let _e298: MultiVector = other_479;
    let _e309: MultiVector = self_555;
    let _e313: MultiVector = other_479;
    let _e317: MultiVector = self_555;
    let _e321: MultiVector = other_479;
    let _e333: MultiVector = self_555;
    let _e337: MultiVector = other_479;
    let _e349: MultiVector = self_555;
    let _e353: MultiVector = other_479;
    let _e365: MultiVector = self_555;
    let _e369: MultiVector = other_479;
    let _e381: MultiVector = self_555;
    let _e385: MultiVector = other_479;
    let _e396: MultiVector = self_555;
    let _e400: MultiVector = other_479;
    let _e412: MultiVector = self_555;
    let _e416: MultiVector = other_479;
    let _e428: MultiVector = self_555;
    let _e432: MultiVector = other_479;
    let _e444: MultiVector = self_555;
    let _e448: MultiVector = other_479;
    let _e460: MultiVector = self_555;
    let _e464: MultiVector = other_479;
    let _e477: MultiVector = self_555;
    let _e481: MultiVector = other_479;
    let _e493: MultiVector = self_555;
    let _e497: MultiVector = other_479;
    let _e509: MultiVector = self_555;
    let _e513: MultiVector = other_479;
    let _e517: MultiVector = self_555;
    let _e521: MultiVector = other_479;
    let _e534: MultiVector = self_555;
    let _e538: MultiVector = other_479;
    let _e551: MultiVector = self_555;
    let _e555: MultiVector = other_479;
    let _e568: MultiVector = self_555;
    let _e571: MultiVector = self_555;
    let _e574: MultiVector = self_555;
    let _e577: MultiVector = self_555;
    let _e581: MultiVector = other_479;
    let _e584: MultiVector = other_479;
    let _e587: MultiVector = other_479;
    let _e590: MultiVector = other_479;
    let _e603: MultiVector = self_555;
    let _e607: MultiVector = other_479;
    let _e618: MultiVector = self_555;
    let _e622: MultiVector = other_479;
    let _e634: MultiVector = self_555;
    let _e638: MultiVector = other_479;
    let _e651: MultiVector = self_555;
    let _e655: MultiVector = other_479;
    let _e667: MultiVector = self_555;
    let _e671: MultiVector = other_479;
    let _e683: MultiVector = self_555;
    let _e686: MultiVector = self_555;
    let _e689: MultiVector = self_555;
    let _e692: MultiVector = self_555;
    let _e696: MultiVector = other_479;
    let _e699: MultiVector = other_479;
    let _e702: MultiVector = other_479;
    let _e705: MultiVector = other_479;
    return MultiVector((((((((((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.x) * vec4<f32>(_e55.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g1_.y) * _e71.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e84.g1_.z) * _e88.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e101.g1_.w) * _e105.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e118.g2_.x) * _e122.g2_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e133.g2_.y) * vec4<f32>(_e137.g2_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e149.g2_.z) * vec4<f32>(_e153.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e165.g2_.w) * vec4<f32>(_e169.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e181.g3_.x) * _e185.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e198.g3_.y) * vec4<f32>(_e202.g3_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e215.g3_.z) * vec4<f32>(_e219.g3_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e232.g3_.w) * vec4<f32>(_e236.g3_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e249.g0_.x) * vec4<f32>(_e253.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e265.g1_.y) * _e269.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e279.g1_.z) * _e283.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e294.g1_.w) * _e298.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) - (vec4<f32>(_e309.g3_.x) * _e313.g2_)) + ((vec4<f32>(_e317.g3_.y) * vec4<f32>(_e321.g2_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e333.g3_.z) * vec4<f32>(_e337.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e349.g3_.w) * vec4<f32>(_e353.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e365.g1_.x) * vec4<f32>(_e369.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((((((((vec4<f32>(_e381.g0_.z) * _e385.g2_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e396.g0_.w) * _e400.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e412.g1_.y) * _e416.g3_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e428.g1_.z) * _e432.g3_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e444.g1_.w) * _e448.g3_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e460.g2_.x) * _e464.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e477.g2_.z) * vec4<f32>(_e481.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e493.g2_.w) * vec4<f32>(_e497.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) - (vec4<f32>(_e509.g3_.x) * _e513.g1_)) + ((vec4<f32>(_e517.g3_.y) * vec4<f32>(_e521.g1_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e534.g3_.z) * vec4<f32>(_e538.g1_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e551.g3_.w) * vec4<f32>(_e555.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e568.g0_.x, _e571.g2_.y, _e574.g0_.y, _e577.g0_.y) * vec4<f32>(_e581.g2_.x, _e584.g0_.x, _e587.g2_.w, _e590.g2_.z)) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e603.g1_.z) * _e607.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e618.g1_.w) * _e622.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e634.g3_.x) * _e638.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e651.g3_.z) * vec4<f32>(_e655.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e667.g3_.w) * vec4<f32>(_e671.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e683.g1_.x, _e686.g3_.y, _e689.g1_.y, _e692.g1_.y) * vec4<f32>(_e696.g2_.x, _e699.g0_.x, _e702.g2_.w, _e705.g2_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))));
}

fn multi_vector_multi_vector_left_anti_contraction(self_556: MultiVector, other_480: MultiVector) -> MultiVector {
    var self_557: MultiVector;
    var other_481: MultiVector;

    self_557 = self_556;
    other_481 = other_480;
    let _e4: MultiVector = self_557;
    let _e8: MultiVector = other_481;
    let _e19: MultiVector = self_557;
    let _e23: MultiVector = other_481;
    let _e35: MultiVector = self_557;
    let _e39: MultiVector = other_481;
    let _e43: MultiVector = self_557;
    let _e47: MultiVector = other_481;
    let _e60: MultiVector = self_557;
    let _e64: MultiVector = other_481;
    let _e77: MultiVector = self_557;
    let _e80: MultiVector = self_557;
    let _e83: MultiVector = self_557;
    let _e86: MultiVector = self_557;
    let _e90: MultiVector = other_481;
    let _e93: MultiVector = other_481;
    let _e96: MultiVector = other_481;
    let _e99: MultiVector = other_481;
    let _e113: MultiVector = self_557;
    let _e117: MultiVector = other_481;
    let _e128: MultiVector = self_557;
    let _e132: MultiVector = other_481;
    let _e144: MultiVector = self_557;
    let _e148: MultiVector = other_481;
    let _e160: MultiVector = self_557;
    let _e164: MultiVector = other_481;
    let _e176: MultiVector = self_557;
    let _e180: MultiVector = other_481;
    let _e192: MultiVector = self_557;
    let _e196: MultiVector = other_481;
    let _e207: MultiVector = self_557;
    let _e211: MultiVector = other_481;
    let _e224: MultiVector = self_557;
    let _e228: MultiVector = other_481;
    let _e241: MultiVector = self_557;
    let _e245: MultiVector = other_481;
    let _e249: MultiVector = self_557;
    let _e253: MultiVector = other_481;
    let _e265: MultiVector = self_557;
    let _e269: MultiVector = other_481;
    let _e281: MultiVector = self_557;
    let _e285: MultiVector = other_481;
    let _e297: MultiVector = self_557;
    let _e300: MultiVector = self_557;
    let _e303: MultiVector = self_557;
    let _e306: MultiVector = self_557;
    let _e310: MultiVector = other_481;
    let _e313: MultiVector = other_481;
    let _e316: MultiVector = other_481;
    let _e319: MultiVector = other_481;
    let _e333: MultiVector = self_557;
    let _e337: MultiVector = other_481;
    let _e349: MultiVector = self_557;
    let _e353: MultiVector = other_481;
    let _e366: MultiVector = self_557;
    let _e370: MultiVector = other_481;
    let _e383: MultiVector = self_557;
    let _e387: MultiVector = other_481;
    let _e391: MultiVector = self_557;
    let _e395: MultiVector = other_481;
    let _e408: MultiVector = self_557;
    let _e412: MultiVector = other_481;
    let _e425: MultiVector = self_557;
    let _e429: MultiVector = other_481;
    let _e442: MultiVector = self_557;
    let _e446: MultiVector = other_481;
    let _e459: MultiVector = self_557;
    let _e463: MultiVector = other_481;
    let _e475: MultiVector = self_557;
    let _e479: MultiVector = other_481;
    let _e492: MultiVector = self_557;
    let _e496: MultiVector = other_481;
    let _e509: MultiVector = self_557;
    let _e513: MultiVector = other_481;
    let _e526: MultiVector = self_557;
    let _e530: MultiVector = other_481;
    let _e542: MultiVector = self_557;
    let _e546: MultiVector = other_481;
    let _e558: MultiVector = self_557;
    let _e562: MultiVector = other_481;
    let _e574: MultiVector = self_557;
    let _e578: MultiVector = other_481;
    let _e582: MultiVector = self_557;
    let _e586: MultiVector = other_481;
    let _e599: MultiVector = self_557;
    let _e603: MultiVector = other_481;
    let _e616: MultiVector = self_557;
    let _e620: MultiVector = other_481;
    let _e633: MultiVector = self_557;
    let _e637: MultiVector = other_481;
    let _e641: MultiVector = self_557;
    let _e645: MultiVector = other_481;
    let _e658: MultiVector = self_557;
    let _e662: MultiVector = other_481;
    let _e675: MultiVector = self_557;
    let _e679: MultiVector = other_481;
    let _e692: MultiVector = self_557;
    let _e696: MultiVector = other_481;
    return MultiVector((((((((vec4<f32>(_e4.g1_.z) * _e8.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g1_.w) * _e23.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e35.g3_.x) * _e39.g0_)) + ((vec4<f32>(_e43.g3_.z) * vec4<f32>(_e47.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e60.g3_.w) * vec4<f32>(_e64.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e77.g1_.x, _e80.g3_.y, _e83.g1_.y, _e86.g1_.y) * vec4<f32>(_e90.g2_.x, _e93.g0_.x, _e96.g2_.w, _e99.g2_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))), ((((((((((((((vec4<f32>(_e113.g0_.z) * _e117.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e128.g0_.w) * _e132.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e144.g1_.y) * _e148.g3_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e160.g1_.z) * _e164.g3_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e176.g1_.w) * _e180.g3_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e192.g2_.x) * _e196.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e207.g2_.z) * vec4<f32>(_e211.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e224.g2_.w) * vec4<f32>(_e228.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e241.g3_.x) * _e245.g1_)) + ((vec4<f32>(_e249.g3_.y) * vec4<f32>(_e253.g1_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e265.g3_.z) * vec4<f32>(_e269.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e281.g3_.w) * vec4<f32>(_e285.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e297.g0_.x, _e300.g2_.y, _e303.g0_.y, _e306.g0_.y) * vec4<f32>(_e310.g2_.x, _e313.g0_.x, _e316.g2_.w, _e319.g2_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))), (((((((((vec4<f32>(_e333.g1_.y) * _e337.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e349.g1_.z) * _e353.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e366.g1_.w) * _e370.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e383.g3_.x) * _e387.g2_)) + ((vec4<f32>(_e391.g3_.y) * vec4<f32>(_e395.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e408.g3_.z) * vec4<f32>(_e412.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e425.g3_.w) * vec4<f32>(_e429.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e442.g1_.x) * vec4<f32>(_e446.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((((((((((((((vec4<f32>(_e459.g0_.y) * _e463.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e475.g0_.z) * _e479.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e492.g0_.w) * _e496.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e509.g1_.x) * vec4<f32>(_e513.g1_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e526.g1_.y) * _e530.g1_.yxyy) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e542.g1_.z) * _e546.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e558.g1_.w) * _e562.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e574.g2_.x) * _e578.g2_)) + ((vec4<f32>(_e582.g2_.y) * vec4<f32>(_e586.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e599.g2_.z) * vec4<f32>(_e603.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e616.g2_.w) * vec4<f32>(_e620.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (vec4<f32>(_e633.g3_.x) * _e637.g3_)) + ((vec4<f32>(_e641.g3_.y) * vec4<f32>(_e645.g3_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e658.g3_.z) * vec4<f32>(_e662.g3_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e675.g3_.w) * vec4<f32>(_e679.g3_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e692.g0_.x) * vec4<f32>(_e696.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_multi_vector_right_anti_contraction(self_558: MultiVector, other_482: MultiVector) -> MultiVector {
    var self_559: MultiVector;
    var other_483: MultiVector;

    self_559 = self_558;
    other_483 = other_482;
    let _e4: MultiVector = self_559;
    let _e8: MultiVector = other_483;
    let _e20: MultiVector = self_559;
    let _e24: MultiVector = other_483;
    let _e36: MultiVector = self_559;
    let _e40: MultiVector = other_483;
    let _e52: MultiVector = self_559;
    let _e56: MultiVector = other_483;
    let _e68: MultiVector = self_559;
    let _e70: MultiVector = other_483;
    let _e82: MultiVector = self_559;
    let _e86: MultiVector = other_483;
    let _e89: MultiVector = self_559;
    let _e93: MultiVector = other_483;
    let _e97: MultiVector = self_559;
    let _e101: MultiVector = other_483;
    let _e113: MultiVector = self_559;
    let _e117: MultiVector = other_483;
    let _e129: MultiVector = self_559;
    let _e133: MultiVector = other_483;
    let _e145: MultiVector = self_559;
    let _e149: MultiVector = other_483;
    let _e161: MultiVector = self_559;
    let _e165: MultiVector = other_483;
    let _e177: MultiVector = self_559;
    let _e181: MultiVector = other_483;
    let _e193: MultiVector = self_559;
    let _e197: MultiVector = other_483;
    let _e209: MultiVector = self_559;
    let _e213: MultiVector = other_483;
    let _e225: MultiVector = self_559;
    let _e229: MultiVector = other_483;
    let _e241: MultiVector = self_559;
    let _e243: MultiVector = other_483;
    let _e258: MultiVector = self_559;
    let _e262: MultiVector = other_483;
    let _e265: MultiVector = self_559;
    let _e269: MultiVector = other_483;
    let _e281: MultiVector = self_559;
    let _e285: MultiVector = other_483;
    let _e297: MultiVector = self_559;
    let _e301: MultiVector = other_483;
    let _e313: MultiVector = self_559;
    let _e317: MultiVector = other_483;
    let _e329: MultiVector = self_559;
    let _e333: MultiVector = other_483;
    let _e345: MultiVector = self_559;
    let _e349: MultiVector = other_483;
    let _e361: MultiVector = self_559;
    let _e364: MultiVector = other_483;
    let _e375: MultiVector = self_559;
    let _e379: MultiVector = other_483;
    let _e391: MultiVector = self_559;
    let _e395: MultiVector = other_483;
    let _e408: MultiVector = self_559;
    let _e412: MultiVector = other_483;
    let _e425: MultiVector = self_559;
    let _e429: MultiVector = other_483;
    let _e433: MultiVector = self_559;
    let _e437: MultiVector = other_483;
    let _e449: MultiVector = self_559;
    let _e453: MultiVector = other_483;
    let _e465: MultiVector = self_559;
    let _e469: MultiVector = other_483;
    let _e481: MultiVector = self_559;
    let _e485: MultiVector = other_483;
    let _e497: MultiVector = self_559;
    let _e501: MultiVector = other_483;
    let _e513: MultiVector = self_559;
    let _e517: MultiVector = other_483;
    let _e529: MultiVector = self_559;
    let _e533: MultiVector = other_483;
    let _e545: MultiVector = self_559;
    let _e549: MultiVector = other_483;
    let _e561: MultiVector = self_559;
    let _e565: MultiVector = other_483;
    let _e577: MultiVector = self_559;
    let _e581: MultiVector = other_483;
    let _e593: MultiVector = self_559;
    let _e597: MultiVector = other_483;
    let _e609: MultiVector = self_559;
    let _e612: MultiVector = other_483;
    return MultiVector(((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g2_.y) * _e24.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g2_.z) * _e40.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e52.g2_.w) * _e56.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e68.g0_ * vec4<f32>(_e70.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((((((vec4<f32>(_e82.g0_.x) * _e86.g2_) + (vec4<f32>(_e89.g1_.x) * _e93.g3_)) + ((vec4<f32>(_e97.g1_.y) * vec4<f32>(_e101.g3_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e113.g1_.z) * vec4<f32>(_e117.g3_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e129.g1_.w) * vec4<f32>(_e133.g3_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e145.g2_.y) * _e149.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e161.g2_.z) * _e165.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e177.g2_.w) * _e181.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e193.g3_.y) * _e197.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e209.g3_.z) * _e213.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e225.g3_.w) * _e229.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e241.g0_ * vec4<f32>(_e243.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e258.g0_.x) * _e262.g1_) + ((vec4<f32>(_e265.g0_.z) * vec4<f32>(_e269.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e281.g0_.w) * vec4<f32>(_e285.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e297.g2_.x) * vec4<f32>(_e301.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e313.g2_.y) * _e317.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e329.g2_.z) * _e333.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e345.g2_.w) * _e349.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e361.g0_.yxxx * _e364.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((((((((((vec4<f32>(_e375.g0_.x) * _e379.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e391.g0_.z) * vec4<f32>(_e395.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e408.g0_.w) * vec4<f32>(_e412.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) - (vec4<f32>(_e425.g1_.x) * _e429.g1_)) + ((vec4<f32>(_e433.g1_.y) * vec4<f32>(_e437.g1_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e449.g1_.z) * vec4<f32>(_e453.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e465.g1_.w) * vec4<f32>(_e469.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e481.g2_.x) * vec4<f32>(_e485.g2_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e497.g2_.y) * _e501.g2_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e513.g2_.z) * _e517.g2_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e529.g2_.w) * _e533.g2_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e545.g3_.x) * vec4<f32>(_e549.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e561.g3_.y) * _e565.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e577.g3_.z) * _e581.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e593.g3_.w) * _e597.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e609.g0_.yxxx * _e612.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn multi_vector_multi_vector_scalar_product(self_560: MultiVector, other_484: MultiVector) -> Scalar {
    var self_561: MultiVector;
    var other_485: MultiVector;

    self_561 = self_560;
    other_485 = other_484;
    let _e4: MultiVector = self_561;
    let _e7: MultiVector = other_485;
    let _e11: MultiVector = self_561;
    let _e14: MultiVector = other_485;
    let _e19: MultiVector = self_561;
    let _e22: MultiVector = other_485;
    let _e27: MultiVector = self_561;
    let _e30: MultiVector = other_485;
    let _e35: MultiVector = self_561;
    let _e38: MultiVector = other_485;
    let _e43: MultiVector = self_561;
    let _e46: MultiVector = other_485;
    let _e51: MultiVector = self_561;
    let _e54: MultiVector = other_485;
    let _e59: MultiVector = self_561;
    let _e62: MultiVector = other_485;
    let _e67: MultiVector = self_561;
    let _e70: MultiVector = other_485;
    let _e75: MultiVector = self_561;
    let _e78: MultiVector = other_485;
    let _e83: MultiVector = self_561;
    let _e86: MultiVector = other_485;
    let _e91: MultiVector = self_561;
    let _e94: MultiVector = other_485;
    let _e99: MultiVector = self_561;
    let _e102: MultiVector = other_485;
    let _e107: MultiVector = self_561;
    let _e110: MultiVector = other_485;
    let _e115: MultiVector = self_561;
    let _e118: MultiVector = other_485;
    let _e123: MultiVector = self_561;
    let _e126: MultiVector = other_485;
    return Scalar(((((((((((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g1_.x * _e38.g1_.x)) - (_e43.g1_.y * _e46.g1_.y)) - (_e51.g1_.z * _e54.g1_.z)) - (_e59.g1_.w * _e62.g1_.w)) - (_e67.g2_.x * _e70.g2_.x)) + (_e75.g2_.y * _e78.g2_.y)) + (_e83.g2_.z * _e86.g2_.z)) + (_e91.g2_.w * _e94.g2_.w)) + (_e99.g3_.x * _e102.g3_.x)) - (_e107.g3_.y * _e110.g3_.y)) - (_e115.g3_.z * _e118.g3_.z)) - (_e123.g3_.w * _e126.g3_.w)));
}

fn multi_vector_multi_vector_anti_scalar_product(self_562: MultiVector, other_486: MultiVector) -> AntiScalar {
    var self_563: MultiVector;
    var other_487: MultiVector;

    self_563 = self_562;
    other_487 = other_486;
    let _e4: MultiVector = self_563;
    let _e7: MultiVector = other_487;
    let _e11: MultiVector = self_563;
    let _e14: MultiVector = other_487;
    let _e19: MultiVector = self_563;
    let _e22: MultiVector = other_487;
    let _e27: MultiVector = self_563;
    let _e30: MultiVector = other_487;
    let _e35: MultiVector = self_563;
    let _e38: MultiVector = other_487;
    let _e43: MultiVector = self_563;
    let _e46: MultiVector = other_487;
    let _e51: MultiVector = self_563;
    let _e54: MultiVector = other_487;
    let _e59: MultiVector = self_563;
    let _e62: MultiVector = other_487;
    let _e67: MultiVector = self_563;
    let _e70: MultiVector = other_487;
    let _e75: MultiVector = self_563;
    let _e78: MultiVector = other_487;
    let _e83: MultiVector = self_563;
    let _e86: MultiVector = other_487;
    let _e91: MultiVector = self_563;
    let _e94: MultiVector = other_487;
    let _e99: MultiVector = self_563;
    let _e102: MultiVector = other_487;
    let _e107: MultiVector = self_563;
    let _e110: MultiVector = other_487;
    let _e115: MultiVector = self_563;
    let _e118: MultiVector = other_487;
    let _e123: MultiVector = self_563;
    let _e126: MultiVector = other_487;
    return AntiScalar(((((((((((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) - (_e35.g1_.x * _e38.g1_.x)) + (_e43.g1_.y * _e46.g1_.y)) + (_e51.g1_.z * _e54.g1_.z)) + (_e59.g1_.w * _e62.g1_.w)) + (_e67.g2_.x * _e70.g2_.x)) - (_e75.g2_.y * _e78.g2_.y)) - (_e83.g2_.z * _e86.g2_.z)) - (_e91.g2_.w * _e94.g2_.w)) + (_e99.g3_.x * _e102.g3_.x)) - (_e107.g3_.y * _e110.g3_.y)) - (_e115.g3_.z * _e118.g3_.z)) - (_e123.g3_.w * _e126.g3_.w)));
}

fn multi_vector_rotor_into(self_564: MultiVector) -> Rotor {
    var self_565: MultiVector;

    self_565 = self_564;
    let _e2: MultiVector = self_565;
    return Rotor(_e2.g0_);
}

fn multi_vector_rotor_add(self_566: MultiVector, other_488: Rotor) -> MultiVector {
    var self_567: MultiVector;
    var other_489: Rotor;

    self_567 = self_566;
    other_489 = other_488;
    let _e4: MultiVector = self_567;
    let _e6: Rotor = other_489;
    let _e9: MultiVector = self_567;
    let _e11: MultiVector = self_567;
    let _e13: MultiVector = self_567;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_);
}

fn multi_vector_rotor_sub(self_568: MultiVector, other_490: Rotor) -> MultiVector {
    var self_569: MultiVector;
    var other_491: Rotor;

    self_569 = self_568;
    other_491 = other_490;
    let _e4: MultiVector = self_569;
    let _e6: Rotor = other_491;
    let _e9: MultiVector = self_569;
    let _e11: MultiVector = self_569;
    let _e13: MultiVector = self_569;
    return MultiVector((_e4.g0_ - _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_);
}

fn multi_vector_rotor_geometric_product(self_570: MultiVector, other_492: Rotor) -> MultiVector {
    var self_571: MultiVector;
    var other_493: Rotor;

    self_571 = self_570;
    other_493 = other_492;
    let _e4: MultiVector = self_571;
    let _e8: Rotor = other_493;
    let _e11: MultiVector = self_571;
    let _e15: Rotor = other_493;
    let _e28: MultiVector = self_571;
    let _e32: Rotor = other_493;
    let _e45: MultiVector = self_571;
    let _e49: Rotor = other_493;
    let _e62: MultiVector = self_571;
    let _e66: Rotor = other_493;
    let _e78: MultiVector = self_571;
    let _e82: Rotor = other_493;
    let _e94: MultiVector = self_571;
    let _e98: Rotor = other_493;
    let _e110: MultiVector = self_571;
    let _e114: Rotor = other_493;
    let _e126: MultiVector = self_571;
    let _e130: Rotor = other_493;
    let _e142: MultiVector = self_571;
    let _e146: Rotor = other_493;
    let _e158: MultiVector = self_571;
    let _e162: Rotor = other_493;
    let _e174: MultiVector = self_571;
    let _e178: Rotor = other_493;
    let _e190: MultiVector = self_571;
    let _e194: Rotor = other_493;
    let _e206: MultiVector = self_571;
    let _e210: Rotor = other_493;
    let _e222: MultiVector = self_571;
    let _e226: Rotor = other_493;
    let _e238: MultiVector = self_571;
    let _e242: Rotor = other_493;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e62.g1_.x) * _e66.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e78.g1_.y) * _e82.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e94.g1_.z) * _e98.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e110.g1_.w) * _e114.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e126.g2_.x) * _e130.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e142.g2_.y) * _e146.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e158.g2_.z) * _e162.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e174.g2_.w) * _e178.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e190.g3_.x) * _e194.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e206.g3_.y) * _e210.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e222.g3_.z) * _e226.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e238.g3_.w) * _e242.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn multi_vector_rotor_outer_product(self_572: MultiVector, other_494: Rotor) -> MultiVector {
    var self_573: MultiVector;
    var other_495: Rotor;

    self_573 = self_572;
    other_495 = other_494;
    let _e4: MultiVector = self_573;
    let _e8: Rotor = other_495;
    let _e11: MultiVector = self_573;
    let _e13: Rotor = other_495;
    let _e25: MultiVector = self_573;
    let _e29: Rotor = other_495;
    let _e41: MultiVector = self_573;
    let _e43: Rotor = other_495;
    let _e55: MultiVector = self_573;
    let _e59: Rotor = other_495;
    let _e69: MultiVector = self_573;
    let _e73: Rotor = other_495;
    let _e84: MultiVector = self_573;
    let _e88: Rotor = other_495;
    let _e99: MultiVector = self_573;
    let _e103: Rotor = other_495;
    let _e115: MultiVector = self_573;
    let _e119: Rotor = other_495;
    let _e129: MultiVector = self_573;
    let _e133: Rotor = other_495;
    let _e144: MultiVector = self_573;
    let _e148: Rotor = other_495;
    let _e159: MultiVector = self_573;
    let _e163: Rotor = other_495;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((vec4<f32>(_e25.g1_.x) * _e29.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e41.g1_ * vec4<f32>(_e43.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e55.g2_.y) * _e59.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e69.g2_.z) * _e73.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e84.g2_.w) * _e88.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e99.g2_.x) * vec4<f32>(_e103.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e115.g3_.y) * _e119.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e129.g3_.z) * _e133.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e144.g3_.w) * _e148.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e159.g3_.x) * vec4<f32>(_e163.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_rotor_inner_product(self_574: MultiVector, other_496: Rotor) -> MultiVector {
    var self_575: MultiVector;
    var other_497: Rotor;

    self_575 = self_574;
    other_497 = other_496;
    let _e4: MultiVector = self_575;
    let _e8: Rotor = other_497;
    let _e11: MultiVector = self_575;
    let _e15: Rotor = other_497;
    let _e27: MultiVector = self_575;
    let _e31: Rotor = other_497;
    let _e43: MultiVector = self_575;
    let _e46: Rotor = other_497;
    let _e58: MultiVector = self_575;
    let _e62: Rotor = other_497;
    let _e72: MultiVector = self_575;
    let _e76: Rotor = other_497;
    let _e87: MultiVector = self_575;
    let _e91: Rotor = other_497;
    let _e102: MultiVector = self_575;
    let _e106: Rotor = other_497;
    let _e118: MultiVector = self_575;
    let _e122: Rotor = other_497;
    let _e134: MultiVector = self_575;
    let _e138: Rotor = other_497;
    let _e150: MultiVector = self_575;
    let _e154: Rotor = other_497;
    let _e166: MultiVector = self_575;
    let _e169: Rotor = other_497;
    let _e181: MultiVector = self_575;
    let _e185: Rotor = other_497;
    let _e197: MultiVector = self_575;
    let _e199: Rotor = other_497;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), (((((vec4<f32>(_e58.g1_.y) * _e62.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e72.g1_.z) * _e76.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e87.g1_.w) * _e91.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g1_.x) * vec4<f32>(_e106.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e118.g2_.x) * _e122.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e134.g2_.z) * _e138.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e150.g2_.w) * _e154.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e166.g2_.xyyy * _e169.g0_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))), (((vec4<f32>(_e181.g3_.x) * _e185.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e197.g3_ * vec4<f32>(_e199.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_rotor_geometric_anti_product(self_576: MultiVector, other_498: Rotor) -> MultiVector {
    var self_577: MultiVector;
    var other_499: Rotor;

    self_577 = self_576;
    other_499 = other_498;
    let _e4: MultiVector = self_577;
    let _e8: Rotor = other_499;
    let _e11: MultiVector = self_577;
    let _e15: Rotor = other_499;
    let _e28: MultiVector = self_577;
    let _e32: Rotor = other_499;
    let _e45: MultiVector = self_577;
    let _e49: Rotor = other_499;
    let _e62: MultiVector = self_577;
    let _e66: Rotor = other_499;
    let _e76: MultiVector = self_577;
    let _e80: Rotor = other_499;
    let _e94: MultiVector = self_577;
    let _e98: Rotor = other_499;
    let _e112: MultiVector = self_577;
    let _e116: Rotor = other_499;
    let _e130: MultiVector = self_577;
    let _e134: Rotor = other_499;
    let _e144: MultiVector = self_577;
    let _e148: Rotor = other_499;
    let _e162: MultiVector = self_577;
    let _e166: Rotor = other_499;
    let _e180: MultiVector = self_577;
    let _e184: Rotor = other_499;
    let _e198: MultiVector = self_577;
    let _e202: Rotor = other_499;
    let _e214: MultiVector = self_577;
    let _e218: Rotor = other_499;
    let _e232: MultiVector = self_577;
    let _e236: Rotor = other_499;
    let _e250: MultiVector = self_577;
    let _e254: Rotor = other_499;
    return MultiVector(((((vec4<f32>(_e4.g3_.x) * _e8.g0_) + ((vec4<f32>(_e11.g3_.y) * _e15.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e28.g3_.z) * _e32.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e45.g3_.w) * _e49.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e62.g2_.x) * _e66.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e76.g2_.y) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e94.g2_.z) * _e98.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e112.g2_.w) * _e116.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e130.g1_.x) * _e134.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e144.g1_.y) * _e148.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e162.g1_.z) * _e166.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e180.g1_.w) * _e184.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e198.g0_.x) * _e202.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e214.g0_.y) * _e218.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e232.g0_.z) * _e236.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e250.g0_.w) * _e254.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_rotor_inner_anti_product(self_578: MultiVector, other_500: Rotor) -> MultiVector {
    var self_579: MultiVector;
    var other_501: Rotor;

    self_579 = self_578;
    other_501 = other_500;
    let _e4: MultiVector = self_579;
    let _e8: Rotor = other_501;
    let _e11: MultiVector = self_579;
    let _e13: Rotor = other_501;
    let _e28: MultiVector = self_579;
    let _e32: Rotor = other_501;
    let _e42: MultiVector = self_579;
    let _e46: Rotor = other_501;
    let _e59: MultiVector = self_579;
    let _e63: Rotor = other_501;
    let _e76: MultiVector = self_579;
    let _e79: Rotor = other_501;
    let _e92: MultiVector = self_579;
    let _e96: Rotor = other_501;
    let _e108: MultiVector = self_579;
    let _e112: Rotor = other_501;
    let _e125: MultiVector = self_579;
    let _e129: Rotor = other_501;
    let _e142: MultiVector = self_579;
    let _e146: Rotor = other_501;
    let _e159: MultiVector = self_579;
    let _e163: Rotor = other_501;
    let _e175: MultiVector = self_579;
    let _e179: Rotor = other_501;
    let _e192: MultiVector = self_579;
    let _e196: Rotor = other_501;
    let _e209: MultiVector = self_579;
    let _e212: Rotor = other_501;
    return MultiVector(((vec4<f32>(_e4.g3_.x) * _e8.g0_) + ((_e11.g3_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e28.g2_.x) * _e32.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e42.g2_.z) * _e46.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e59.g2_.w) * _e63.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e76.g2_.xyyy * _e79.g0_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e92.g1_.y) * _e96.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e108.g1_.z) * _e112.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e125.g1_.w) * _e129.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e142.g1_.x) * vec4<f32>(_e146.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((vec4<f32>(_e159.g0_.x) * _e163.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e175.g0_.z) * _e179.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e192.g0_.w) * _e196.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e209.g0_.yyxx * _e212.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn multi_vector_rotor_right_contraction(self_580: MultiVector, other_502: Rotor) -> MultiVector {
    var self_581: MultiVector;
    var other_503: Rotor;

    self_581 = self_580;
    other_503 = other_502;
    let _e4: MultiVector = self_581;
    let _e8: Rotor = other_503;
    let _e19: MultiVector = self_581;
    let _e23: Rotor = other_503;
    let _e35: MultiVector = self_581;
    let _e39: Rotor = other_503;
    let _e51: MultiVector = self_581;
    let _e55: Rotor = other_503;
    let _e67: MultiVector = self_581;
    let _e71: Rotor = other_503;
    let _e81: MultiVector = self_581;
    let _e85: Rotor = other_503;
    let _e96: MultiVector = self_581;
    let _e100: Rotor = other_503;
    let _e111: MultiVector = self_581;
    let _e115: Rotor = other_503;
    let _e127: MultiVector = self_581;
    let _e131: Rotor = other_503;
    let _e143: MultiVector = self_581;
    let _e145: Rotor = other_503;
    let _e157: MultiVector = self_581;
    let _e161: Rotor = other_503;
    let _e173: MultiVector = self_581;
    let _e175: Rotor = other_503;
    return MultiVector((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e67.g1_.y) * _e71.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e81.g1_.z) * _e85.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e96.g1_.w) * _e100.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e111.g1_.x) * vec4<f32>(_e115.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((vec4<f32>(_e127.g2_.x) * _e131.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e143.g2_ * vec4<f32>(_e145.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((vec4<f32>(_e157.g3_.x) * _e161.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e173.g3_ * vec4<f32>(_e175.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_rotor_left_anti_contraction(self_582: MultiVector, other_504: Rotor) -> MultiVector {
    var self_583: MultiVector;
    var other_505: Rotor;

    self_583 = self_582;
    other_505 = other_504;
    let _e4: MultiVector = self_583;
    let _e8: Rotor = other_505;
    let _e11: MultiVector = self_583;
    let _e13: Rotor = other_505;
    let _e28: MultiVector = self_583;
    let _e32: Rotor = other_505;
    let _e42: MultiVector = self_583;
    let _e44: Rotor = other_505;
    let _e59: MultiVector = self_583;
    let _e63: Rotor = other_505;
    let _e75: MultiVector = self_583;
    let _e79: Rotor = other_505;
    let _e92: MultiVector = self_583;
    let _e96: Rotor = other_505;
    let _e109: MultiVector = self_583;
    let _e113: Rotor = other_505;
    let _e126: MultiVector = self_583;
    let _e130: Rotor = other_505;
    let _e142: MultiVector = self_583;
    let _e146: Rotor = other_505;
    let _e159: MultiVector = self_583;
    let _e163: Rotor = other_505;
    let _e176: MultiVector = self_583;
    let _e180: Rotor = other_505;
    return MultiVector(((vec4<f32>(_e4.g3_.x) * _e8.g0_) + ((_e11.g3_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((vec4<f32>(_e28.g2_.x) * _e32.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((_e42.g2_ * vec4<f32>(_e44.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e59.g1_.y) * _e63.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e75.g1_.z) * _e79.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e92.g1_.w) * _e96.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e109.g1_.x) * vec4<f32>(_e113.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((vec4<f32>(_e126.g0_.y) * _e130.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e142.g0_.z) * _e146.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e159.g0_.w) * _e163.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e176.g0_.x) * vec4<f32>(_e180.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_rotor_scalar_product(self_584: MultiVector, other_506: Rotor) -> Scalar {
    var self_585: MultiVector;
    var other_507: Rotor;

    self_585 = self_584;
    other_507 = other_506;
    let _e4: MultiVector = self_585;
    let _e7: Rotor = other_507;
    let _e11: MultiVector = self_585;
    let _e14: Rotor = other_507;
    let _e19: MultiVector = self_585;
    let _e22: Rotor = other_507;
    let _e27: MultiVector = self_585;
    let _e30: Rotor = other_507;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn multi_vector_rotor_anti_scalar_product(self_586: MultiVector, other_508: Rotor) -> AntiScalar {
    var self_587: MultiVector;
    var other_509: Rotor;

    self_587 = self_586;
    other_509 = other_508;
    let _e4: MultiVector = self_587;
    let _e7: Rotor = other_509;
    let _e11: MultiVector = self_587;
    let _e14: Rotor = other_509;
    let _e19: MultiVector = self_587;
    let _e22: Rotor = other_509;
    let _e27: MultiVector = self_587;
    let _e30: Rotor = other_509;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn multi_vector_point_into(self_588: MultiVector) -> Point {
    var self_589: MultiVector;

    self_589 = self_588;
    let _e2: MultiVector = self_589;
    let _e5: MultiVector = self_589;
    let _e8: MultiVector = self_589;
    let _e11: MultiVector = self_589;
    return Point(vec4<f32>(_e2.g2_.x, _e5.g1_.y, _e8.g1_.z, _e11.g1_.w));
}

fn multi_vector_point_add(self_590: MultiVector, other_510: Point) -> MultiVector {
    var self_591: MultiVector;
    var other_511: Point;

    self_591 = self_590;
    other_511 = other_510;
    let _e4: MultiVector = self_591;
    let _e6: MultiVector = self_591;
    let _e8: Point = other_511;
    let _e17: MultiVector = self_591;
    let _e19: Point = other_511;
    let _e30: MultiVector = self_591;
    return MultiVector(_e4.g0_, (_e6.g1_ + (_e8.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (_e17.g2_ + (vec4<f32>(_e19.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e30.g3_);
}

fn multi_vector_point_sub(self_592: MultiVector, other_512: Point) -> MultiVector {
    var self_593: MultiVector;
    var other_513: Point;

    self_593 = self_592;
    other_513 = other_512;
    let _e4: MultiVector = self_593;
    let _e6: MultiVector = self_593;
    let _e8: Point = other_513;
    let _e17: MultiVector = self_593;
    let _e19: Point = other_513;
    let _e30: MultiVector = self_593;
    return MultiVector(_e4.g0_, (_e6.g1_ - (_e8.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (_e17.g2_ - (vec4<f32>(_e19.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e30.g3_);
}

fn multi_vector_point_geometric_product(self_594: MultiVector, other_514: Point) -> MultiVector {
    var self_595: MultiVector;
    var other_515: Point;

    self_595 = self_594;
    other_515 = other_514;
    let _e4: MultiVector = self_595;
    let _e8: Point = other_515;
    let _e20: MultiVector = self_595;
    let _e24: Point = other_515;
    let _e37: MultiVector = self_595;
    let _e41: Point = other_515;
    let _e54: MultiVector = self_595;
    let _e58: Point = other_515;
    let _e70: MultiVector = self_595;
    let _e74: Point = other_515;
    let _e86: MultiVector = self_595;
    let _e90: Point = other_515;
    let _e102: MultiVector = self_595;
    let _e105: MultiVector = self_595;
    let _e108: MultiVector = self_595;
    let _e111: MultiVector = self_595;
    let _e115: Point = other_515;
    let _e123: MultiVector = self_595;
    let _e127: Point = other_515;
    let _e138: MultiVector = self_595;
    let _e142: Point = other_515;
    let _e154: MultiVector = self_595;
    let _e158: Point = other_515;
    let _e170: MultiVector = self_595;
    let _e174: Point = other_515;
    let _e187: MultiVector = self_595;
    let _e191: Point = other_515;
    let _e204: MultiVector = self_595;
    let _e208: Point = other_515;
    let _e221: MultiVector = self_595;
    let _e224: MultiVector = self_595;
    let _e227: MultiVector = self_595;
    let _e230: MultiVector = self_595;
    let _e234: Point = other_515;
    let _e245: MultiVector = self_595;
    let _e249: Point = other_515;
    let _e262: MultiVector = self_595;
    let _e266: Point = other_515;
    let _e278: MultiVector = self_595;
    let _e282: Point = other_515;
    let _e294: MultiVector = self_595;
    let _e298: Point = other_515;
    let _e310: MultiVector = self_595;
    let _e312: Point = other_515;
    let _e327: MultiVector = self_595;
    let _e331: Point = other_515;
    let _e344: MultiVector = self_595;
    let _e348: Point = other_515;
    let _e360: MultiVector = self_595;
    let _e364: Point = other_515;
    let _e376: MultiVector = self_595;
    let _e380: Point = other_515;
    let _e392: MultiVector = self_595;
    let _e394: Point = other_515;
    return MultiVector(((((((((vec4<f32>(_e4.g1_.y) * _e8.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g1_.z) * _e24.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e37.g1_.w) * _e41.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e54.g2_.y) * vec4<f32>(_e58.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e70.g2_.z) * vec4<f32>(_e74.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e86.g2_.w) * vec4<f32>(_e90.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g2_.x, _e105.g1_.x, _e108.g1_.x, _e111.g1_.x) * _e115.g0_) * vec4<f32>(-(1.0)))), ((((((((vec4<f32>(_e123.g0_.y) * _e127.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e138.g0_.z) * _e142.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e154.g0_.w) * _e158.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e170.g3_.y) * vec4<f32>(_e174.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e187.g3_.z) * vec4<f32>(_e191.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e204.g3_.w) * vec4<f32>(_e208.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e221.g3_.x, _e224.g0_.x, _e227.g0_.x, _e230.g0_.x) * _e234.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((((((vec4<f32>(_e245.g3_.x) * _e249.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e262.g3_.y) * _e266.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e278.g3_.z) * _e282.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e294.g3_.w) * _e298.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((_e310.g0_ * vec4<f32>(_e312.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e327.g2_.x) * _e331.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e344.g2_.y) * _e348.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e360.g2_.z) * _e364.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e376.g2_.w) * _e380.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + (_e392.g1_ * vec4<f32>(_e394.g0_.x))));
}

fn multi_vector_point_geometric_anti_product(self_596: MultiVector, other_516: Point) -> MultiVector {
    var self_597: MultiVector;
    var other_517: Point;

    self_597 = self_596;
    other_517 = other_516;
    let _e4: MultiVector = self_597;
    let _e8: Point = other_517;
    let _e18: MultiVector = self_597;
    let _e22: Point = other_517;
    let _e34: MultiVector = self_597;
    let _e38: Point = other_517;
    let _e50: MultiVector = self_597;
    let _e54: Point = other_517;
    let _e66: MultiVector = self_597;
    let _e68: Point = other_517;
    let _e83: MultiVector = self_597;
    let _e87: Point = other_517;
    let _e97: MultiVector = self_597;
    let _e101: Point = other_517;
    let _e114: MultiVector = self_597;
    let _e118: Point = other_517;
    let _e131: MultiVector = self_597;
    let _e135: Point = other_517;
    let _e148: MultiVector = self_597;
    let _e150: Point = other_517;
    let _e165: MultiVector = self_597;
    let _e169: Point = other_517;
    let _e180: MultiVector = self_597;
    let _e184: Point = other_517;
    let _e196: MultiVector = self_597;
    let _e200: Point = other_517;
    let _e212: MultiVector = self_597;
    let _e216: Point = other_517;
    let _e228: MultiVector = self_597;
    let _e232: Point = other_517;
    let _e244: MultiVector = self_597;
    let _e248: Point = other_517;
    let _e260: MultiVector = self_597;
    let _e263: MultiVector = self_597;
    let _e266: MultiVector = self_597;
    let _e269: MultiVector = self_597;
    let _e273: Point = other_517;
    let _e277: MultiVector = self_597;
    let _e281: Point = other_517;
    let _e292: MultiVector = self_597;
    let _e296: Point = other_517;
    let _e308: MultiVector = self_597;
    let _e312: Point = other_517;
    let _e324: MultiVector = self_597;
    let _e328: Point = other_517;
    let _e340: MultiVector = self_597;
    let _e344: Point = other_517;
    let _e356: MultiVector = self_597;
    let _e360: Point = other_517;
    let _e372: MultiVector = self_597;
    let _e375: MultiVector = self_597;
    let _e378: MultiVector = self_597;
    let _e381: MultiVector = self_597;
    let _e385: Point = other_517;
    return MultiVector(((((((vec4<f32>(_e4.g2_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g2_.y) * _e22.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e34.g2_.z) * _e38.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e50.g2_.w) * _e54.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((_e66.g1_ * vec4<f32>(_e68.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e83.g3_.x) * _e87.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e97.g3_.y) * _e101.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e114.g3_.z) * _e118.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e131.g3_.w) * _e135.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e148.g0_ * vec4<f32>(_e150.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e165.g0_.y) * _e169.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e180.g0_.z) * _e184.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e196.g0_.w) * _e200.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e212.g3_.y) * vec4<f32>(_e216.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e228.g3_.z) * vec4<f32>(_e232.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e244.g3_.w) * vec4<f32>(_e248.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e260.g3_.x, _e263.g0_.x, _e266.g0_.x, _e269.g0_.x) * _e273.g0_)), ((((((((vec4<f32>(_e277.g1_.y) * _e281.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e292.g1_.z) * _e296.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e308.g1_.w) * _e312.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e324.g2_.y) * vec4<f32>(_e328.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e340.g2_.z) * vec4<f32>(_e344.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e356.g2_.w) * vec4<f32>(_e360.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e372.g2_.x, _e375.g1_.x, _e378.g1_.x, _e381.g1_.x) * _e385.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_point_scalar_product(self_598: MultiVector, other_518: Point) -> Scalar {
    var self_599: MultiVector;
    var other_519: Point;

    self_599 = self_598;
    other_519 = other_518;
    let _e5: MultiVector = self_599;
    let _e8: Point = other_519;
    let _e13: MultiVector = self_599;
    let _e16: Point = other_519;
    let _e21: MultiVector = self_599;
    let _e24: Point = other_519;
    let _e29: MultiVector = self_599;
    let _e32: Point = other_519;
    return Scalar(((((0.0 - (_e5.g1_.y * _e8.g0_.y)) - (_e13.g1_.z * _e16.g0_.z)) - (_e21.g1_.w * _e24.g0_.w)) - (_e29.g2_.x * _e32.g0_.x)));
}

fn multi_vector_point_anti_scalar_product(self_600: MultiVector, other_520: Point) -> AntiScalar {
    var self_601: MultiVector;
    var other_521: Point;

    self_601 = self_600;
    other_521 = other_520;
    let _e4: MultiVector = self_601;
    let _e7: Point = other_521;
    let _e11: MultiVector = self_601;
    let _e14: Point = other_521;
    let _e19: MultiVector = self_601;
    let _e22: Point = other_521;
    let _e27: MultiVector = self_601;
    let _e30: Point = other_521;
    return AntiScalar(((((_e4.g1_.y * _e7.g0_.y) + (_e11.g1_.z * _e14.g0_.z)) + (_e19.g1_.w * _e22.g0_.w)) + (_e27.g2_.x * _e30.g0_.x)));
}

fn multi_vector_ideal_point_into(self_602: MultiVector) -> IdealPoint {
    var self_603: MultiVector;

    self_603 = self_602;
    let _e2: MultiVector = self_603;
    let _e5: MultiVector = self_603;
    let _e8: MultiVector = self_603;
    return IdealPoint(vec3<f32>(_e2.g3_.y, _e5.g3_.z, _e8.g3_.w));
}

fn multi_vector_ideal_point_add(self_604: MultiVector, other_522: IdealPoint) -> MultiVector {
    var self_605: MultiVector;
    var other_523: IdealPoint;

    self_605 = self_604;
    other_523 = other_522;
    let _e4: MultiVector = self_605;
    let _e6: MultiVector = self_605;
    let _e8: MultiVector = self_605;
    let _e10: MultiVector = self_605;
    let _e12: IdealPoint = other_523;
    let _e15: IdealPoint = other_523;
    let _e18: IdealPoint = other_523;
    let _e21: IdealPoint = other_523;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ + (vec4<f32>(_e12.g0_.x, _e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_ideal_point_sub(self_606: MultiVector, other_524: IdealPoint) -> MultiVector {
    var self_607: MultiVector;
    var other_525: IdealPoint;

    self_607 = self_606;
    other_525 = other_524;
    let _e4: MultiVector = self_607;
    let _e6: MultiVector = self_607;
    let _e8: MultiVector = self_607;
    let _e10: MultiVector = self_607;
    let _e12: IdealPoint = other_525;
    let _e15: IdealPoint = other_525;
    let _e18: IdealPoint = other_525;
    let _e21: IdealPoint = other_525;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, (_e10.g3_ - (vec4<f32>(_e12.g0_.x, _e15.g0_.x, _e18.g0_.y, _e21.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_ideal_point_geometric_product(self_608: MultiVector, other_526: IdealPoint) -> MultiVector {
    var self_609: MultiVector;
    var other_527: IdealPoint;

    self_609 = self_608;
    other_527 = other_526;
    let _e4: MultiVector = self_609;
    let _e8: IdealPoint = other_527;
    let _e11: IdealPoint = other_527;
    let _e14: IdealPoint = other_527;
    let _e17: IdealPoint = other_527;
    let _e30: MultiVector = self_609;
    let _e34: IdealPoint = other_527;
    let _e37: IdealPoint = other_527;
    let _e40: IdealPoint = other_527;
    let _e43: IdealPoint = other_527;
    let _e57: MultiVector = self_609;
    let _e61: IdealPoint = other_527;
    let _e64: IdealPoint = other_527;
    let _e67: IdealPoint = other_527;
    let _e70: IdealPoint = other_527;
    let _e84: MultiVector = self_609;
    let _e88: IdealPoint = other_527;
    let _e91: IdealPoint = other_527;
    let _e94: IdealPoint = other_527;
    let _e97: IdealPoint = other_527;
    let _e112: MultiVector = self_609;
    let _e116: IdealPoint = other_527;
    let _e119: IdealPoint = other_527;
    let _e122: IdealPoint = other_527;
    let _e125: IdealPoint = other_527;
    let _e138: MultiVector = self_609;
    let _e142: IdealPoint = other_527;
    let _e145: IdealPoint = other_527;
    let _e148: IdealPoint = other_527;
    let _e151: IdealPoint = other_527;
    let _e165: MultiVector = self_609;
    let _e169: IdealPoint = other_527;
    let _e172: IdealPoint = other_527;
    let _e175: IdealPoint = other_527;
    let _e178: IdealPoint = other_527;
    let _e192: MultiVector = self_609;
    let _e196: IdealPoint = other_527;
    let _e199: IdealPoint = other_527;
    let _e202: IdealPoint = other_527;
    let _e205: IdealPoint = other_527;
    let _e217: MultiVector = self_609;
    let _e221: IdealPoint = other_527;
    let _e224: IdealPoint = other_527;
    let _e227: IdealPoint = other_527;
    let _e230: IdealPoint = other_527;
    let _e243: MultiVector = self_609;
    let _e247: IdealPoint = other_527;
    let _e250: IdealPoint = other_527;
    let _e253: IdealPoint = other_527;
    let _e256: IdealPoint = other_527;
    let _e270: MultiVector = self_609;
    let _e274: IdealPoint = other_527;
    let _e277: IdealPoint = other_527;
    let _e280: IdealPoint = other_527;
    let _e283: IdealPoint = other_527;
    let _e297: MultiVector = self_609;
    let _e301: IdealPoint = other_527;
    let _e304: IdealPoint = other_527;
    let _e307: IdealPoint = other_527;
    let _e310: IdealPoint = other_527;
    let _e322: MultiVector = self_609;
    let _e326: IdealPoint = other_527;
    let _e329: IdealPoint = other_527;
    let _e332: IdealPoint = other_527;
    let _e335: IdealPoint = other_527;
    let _e347: MultiVector = self_609;
    let _e351: IdealPoint = other_527;
    let _e354: IdealPoint = other_527;
    let _e357: IdealPoint = other_527;
    let _e360: IdealPoint = other_527;
    let _e373: MultiVector = self_609;
    let _e377: IdealPoint = other_527;
    let _e380: IdealPoint = other_527;
    let _e383: IdealPoint = other_527;
    let _e386: IdealPoint = other_527;
    let _e399: MultiVector = self_609;
    let _e403: IdealPoint = other_527;
    let _e406: IdealPoint = other_527;
    let _e409: IdealPoint = other_527;
    let _e412: IdealPoint = other_527;
    return MultiVector((((((vec4<f32>(_e4.g3_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g3_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.z, _e40.g0_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g3_.w) * vec4<f32>(_e61.g0_.z, _e64.g0_.y, _e67.g0_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g3_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e112.g2_.y) * vec4<f32>(_e116.g0_.x, _e119.g0_.x, _e122.g0_.z, _e125.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e138.g2_.z) * vec4<f32>(_e142.g0_.y, _e145.g0_.z, _e148.g0_.y, _e151.g0_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e165.g2_.w) * vec4<f32>(_e169.g0_.z, _e172.g0_.y, _e175.g0_.x, _e178.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e192.g2_.x) * vec4<f32>(_e196.g0_.x, _e199.g0_.x, _e202.g0_.y, _e205.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e217.g1_.y) * vec4<f32>(_e221.g0_.x, _e224.g0_.x, _e227.g0_.z, _e230.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e243.g1_.z) * vec4<f32>(_e247.g0_.y, _e250.g0_.z, _e253.g0_.y, _e256.g0_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e270.g1_.w) * vec4<f32>(_e274.g0_.z, _e277.g0_.y, _e280.g0_.x, _e283.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e297.g1_.x) * vec4<f32>(_e301.g0_.x, _e304.g0_.x, _e307.g0_.y, _e310.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e322.g0_.y) * vec4<f32>(_e326.g0_.x, _e329.g0_.x, _e332.g0_.z, _e335.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e347.g0_.z) * vec4<f32>(_e351.g0_.y, _e354.g0_.z, _e357.g0_.y, _e360.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e373.g0_.w) * vec4<f32>(_e377.g0_.z, _e380.g0_.y, _e383.g0_.x, _e386.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e399.g0_.x) * vec4<f32>(_e403.g0_.x, _e406.g0_.x, _e409.g0_.y, _e412.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_ideal_point_geometric_anti_product(self_610: MultiVector, other_528: IdealPoint) -> MultiVector {
    var self_611: MultiVector;
    var other_529: IdealPoint;

    self_611 = self_610;
    other_529 = other_528;
    let _e4: MultiVector = self_611;
    let _e8: IdealPoint = other_529;
    let _e11: IdealPoint = other_529;
    let _e14: IdealPoint = other_529;
    let _e17: IdealPoint = other_529;
    let _e29: MultiVector = self_611;
    let _e33: IdealPoint = other_529;
    let _e36: IdealPoint = other_529;
    let _e39: IdealPoint = other_529;
    let _e42: IdealPoint = other_529;
    let _e55: MultiVector = self_611;
    let _e59: IdealPoint = other_529;
    let _e62: IdealPoint = other_529;
    let _e65: IdealPoint = other_529;
    let _e68: IdealPoint = other_529;
    let _e81: MultiVector = self_611;
    let _e85: IdealPoint = other_529;
    let _e88: IdealPoint = other_529;
    let _e91: IdealPoint = other_529;
    let _e94: IdealPoint = other_529;
    let _e109: MultiVector = self_611;
    let _e113: IdealPoint = other_529;
    let _e116: IdealPoint = other_529;
    let _e119: IdealPoint = other_529;
    let _e122: IdealPoint = other_529;
    let _e135: MultiVector = self_611;
    let _e139: IdealPoint = other_529;
    let _e142: IdealPoint = other_529;
    let _e145: IdealPoint = other_529;
    let _e148: IdealPoint = other_529;
    let _e162: MultiVector = self_611;
    let _e166: IdealPoint = other_529;
    let _e169: IdealPoint = other_529;
    let _e172: IdealPoint = other_529;
    let _e175: IdealPoint = other_529;
    let _e189: MultiVector = self_611;
    let _e193: IdealPoint = other_529;
    let _e196: IdealPoint = other_529;
    let _e199: IdealPoint = other_529;
    let _e202: IdealPoint = other_529;
    let _e214: MultiVector = self_611;
    let _e218: IdealPoint = other_529;
    let _e221: IdealPoint = other_529;
    let _e224: IdealPoint = other_529;
    let _e227: IdealPoint = other_529;
    let _e240: MultiVector = self_611;
    let _e244: IdealPoint = other_529;
    let _e247: IdealPoint = other_529;
    let _e250: IdealPoint = other_529;
    let _e253: IdealPoint = other_529;
    let _e267: MultiVector = self_611;
    let _e271: IdealPoint = other_529;
    let _e274: IdealPoint = other_529;
    let _e277: IdealPoint = other_529;
    let _e280: IdealPoint = other_529;
    let _e294: MultiVector = self_611;
    let _e298: IdealPoint = other_529;
    let _e301: IdealPoint = other_529;
    let _e304: IdealPoint = other_529;
    let _e307: IdealPoint = other_529;
    let _e319: MultiVector = self_611;
    let _e323: IdealPoint = other_529;
    let _e326: IdealPoint = other_529;
    let _e329: IdealPoint = other_529;
    let _e332: IdealPoint = other_529;
    let _e345: MultiVector = self_611;
    let _e349: IdealPoint = other_529;
    let _e352: IdealPoint = other_529;
    let _e355: IdealPoint = other_529;
    let _e358: IdealPoint = other_529;
    let _e372: MultiVector = self_611;
    let _e376: IdealPoint = other_529;
    let _e379: IdealPoint = other_529;
    let _e382: IdealPoint = other_529;
    let _e385: IdealPoint = other_529;
    let _e399: MultiVector = self_611;
    let _e403: IdealPoint = other_529;
    let _e406: IdealPoint = other_529;
    let _e409: IdealPoint = other_529;
    let _e412: IdealPoint = other_529;
    return MultiVector((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g1_.z) * vec4<f32>(_e139.g0_.y, _e142.g0_.z, _e145.g0_.y, _e148.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g1_.w) * vec4<f32>(_e166.g0_.z, _e169.g0_.y, _e172.g0_.x, _e175.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g1_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e214.g2_.y) * vec4<f32>(_e218.g0_.x, _e221.g0_.x, _e224.g0_.z, _e227.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e240.g2_.z) * vec4<f32>(_e244.g0_.y, _e247.g0_.z, _e250.g0_.y, _e253.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e267.g2_.w) * vec4<f32>(_e271.g0_.z, _e274.g0_.y, _e277.g0_.x, _e280.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e294.g2_.x) * vec4<f32>(_e298.g0_.x, _e301.g0_.x, _e304.g0_.y, _e307.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e319.g3_.y) * vec4<f32>(_e323.g0_.x, _e326.g0_.x, _e329.g0_.z, _e332.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e345.g3_.z) * vec4<f32>(_e349.g0_.y, _e352.g0_.z, _e355.g0_.y, _e358.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e372.g3_.w) * vec4<f32>(_e376.g0_.z, _e379.g0_.y, _e382.g0_.x, _e385.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e399.g3_.x) * vec4<f32>(_e403.g0_.x, _e406.g0_.x, _e409.g0_.y, _e412.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_ideal_point_scalar_product(self_612: MultiVector, other_530: IdealPoint) -> Scalar {
    var self_613: MultiVector;
    var other_531: IdealPoint;

    self_613 = self_612;
    other_531 = other_530;
    let _e5: MultiVector = self_613;
    let _e8: IdealPoint = other_531;
    let _e13: MultiVector = self_613;
    let _e16: IdealPoint = other_531;
    let _e21: MultiVector = self_613;
    let _e24: IdealPoint = other_531;
    return Scalar((((0.0 - (_e5.g3_.y * _e8.g0_.x)) - (_e13.g3_.z * _e16.g0_.y)) - (_e21.g3_.w * _e24.g0_.z)));
}

fn multi_vector_ideal_point_anti_scalar_product(self_614: MultiVector, other_532: IdealPoint) -> AntiScalar {
    var self_615: MultiVector;
    var other_533: IdealPoint;

    self_615 = self_614;
    other_533 = other_532;
    let _e5: MultiVector = self_615;
    let _e8: IdealPoint = other_533;
    let _e13: MultiVector = self_615;
    let _e16: IdealPoint = other_533;
    let _e21: MultiVector = self_615;
    let _e24: IdealPoint = other_533;
    return AntiScalar((((0.0 - (_e5.g3_.y * _e8.g0_.x)) - (_e13.g3_.z * _e16.g0_.y)) - (_e21.g3_.w * _e24.g0_.z)));
}

fn multi_vector_plane_into(self_616: MultiVector) -> Plane {
    var self_617: MultiVector;

    self_617 = self_616;
    let _e2: MultiVector = self_617;
    let _e5: MultiVector = self_617;
    let _e8: MultiVector = self_617;
    let _e11: MultiVector = self_617;
    return Plane(vec4<f32>(_e2.g1_.x, _e5.g2_.y, _e8.g2_.z, _e11.g2_.w));
}

fn multi_vector_plane_add(self_618: MultiVector, other_534: Plane) -> MultiVector {
    var self_619: MultiVector;
    var other_535: Plane;

    self_619 = self_618;
    other_535 = other_534;
    let _e4: MultiVector = self_619;
    let _e6: MultiVector = self_619;
    let _e8: Plane = other_535;
    let _e19: MultiVector = self_619;
    let _e21: Plane = other_535;
    let _e30: MultiVector = self_619;
    return MultiVector(_e4.g0_, (_e6.g1_ + (vec4<f32>(_e8.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (_e19.g2_ + (_e21.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))), _e30.g3_);
}

fn multi_vector_plane_sub(self_620: MultiVector, other_536: Plane) -> MultiVector {
    var self_621: MultiVector;
    var other_537: Plane;

    self_621 = self_620;
    other_537 = other_536;
    let _e4: MultiVector = self_621;
    let _e6: MultiVector = self_621;
    let _e8: Plane = other_537;
    let _e19: MultiVector = self_621;
    let _e21: Plane = other_537;
    let _e30: MultiVector = self_621;
    return MultiVector(_e4.g0_, (_e6.g1_ - (vec4<f32>(_e8.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (_e19.g2_ - (_e21.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))), _e30.g3_);
}

fn multi_vector_plane_geometric_product(self_622: MultiVector, other_538: Plane) -> MultiVector {
    var self_623: MultiVector;
    var other_539: Plane;

    self_623 = self_622;
    other_539 = other_538;
    let _e4: MultiVector = self_623;
    let _e8: Plane = other_539;
    let _e18: MultiVector = self_623;
    let _e22: Plane = other_539;
    let _e34: MultiVector = self_623;
    let _e38: Plane = other_539;
    let _e50: MultiVector = self_623;
    let _e54: Plane = other_539;
    let _e66: MultiVector = self_623;
    let _e68: Plane = other_539;
    let _e83: MultiVector = self_623;
    let _e87: Plane = other_539;
    let _e100: MultiVector = self_623;
    let _e104: Plane = other_539;
    let _e116: MultiVector = self_623;
    let _e120: Plane = other_539;
    let _e132: MultiVector = self_623;
    let _e136: Plane = other_539;
    let _e148: MultiVector = self_623;
    let _e150: Plane = other_539;
    let _e165: MultiVector = self_623;
    let _e169: Plane = other_539;
    let _e180: MultiVector = self_623;
    let _e184: Plane = other_539;
    let _e196: MultiVector = self_623;
    let _e200: Plane = other_539;
    let _e212: MultiVector = self_623;
    let _e216: Plane = other_539;
    let _e229: MultiVector = self_623;
    let _e233: Plane = other_539;
    let _e246: MultiVector = self_623;
    let _e250: Plane = other_539;
    let _e263: MultiVector = self_623;
    let _e266: MultiVector = self_623;
    let _e269: MultiVector = self_623;
    let _e272: MultiVector = self_623;
    let _e276: Plane = other_539;
    let _e287: MultiVector = self_623;
    let _e291: Plane = other_539;
    let _e303: MultiVector = self_623;
    let _e307: Plane = other_539;
    let _e320: MultiVector = self_623;
    let _e324: Plane = other_539;
    let _e337: MultiVector = self_623;
    let _e341: Plane = other_539;
    let _e354: MultiVector = self_623;
    let _e358: Plane = other_539;
    let _e371: MultiVector = self_623;
    let _e375: Plane = other_539;
    let _e388: MultiVector = self_623;
    let _e391: MultiVector = self_623;
    let _e394: MultiVector = self_623;
    let _e397: MultiVector = self_623;
    let _e401: Plane = other_539;
    return MultiVector(((((((vec4<f32>(_e4.g2_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g2_.y) * _e22.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e34.g2_.z) * _e38.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e50.g2_.w) * _e54.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((_e66.g1_ * vec4<f32>(_e68.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e83.g3_.x) * _e87.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e100.g3_.y) * _e104.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e116.g3_.z) * _e120.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e132.g3_.w) * _e136.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((_e148.g0_ * vec4<f32>(_e150.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e165.g0_.y) * _e169.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e180.g0_.z) * _e184.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e196.g0_.w) * _e200.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e212.g3_.y) * vec4<f32>(_e216.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e229.g3_.z) * vec4<f32>(_e233.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e246.g3_.w) * vec4<f32>(_e250.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e263.g3_.x, _e266.g0_.x, _e269.g0_.x, _e272.g0_.x) * _e276.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((((((((vec4<f32>(_e287.g1_.y) * _e291.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e303.g1_.z) * _e307.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e320.g1_.w) * _e324.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e337.g2_.y) * vec4<f32>(_e341.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e354.g2_.z) * vec4<f32>(_e358.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e371.g2_.w) * vec4<f32>(_e375.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e388.g2_.x, _e391.g1_.x, _e394.g1_.x, _e397.g1_.x) * _e401.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn multi_vector_plane_geometric_anti_product(self_624: MultiVector, other_540: Plane) -> MultiVector {
    var self_625: MultiVector;
    var other_541: Plane;

    self_625 = self_624;
    other_541 = other_540;
    let _e4: MultiVector = self_625;
    let _e8: Plane = other_541;
    let _e20: MultiVector = self_625;
    let _e24: Plane = other_541;
    let _e37: MultiVector = self_625;
    let _e41: Plane = other_541;
    let _e54: MultiVector = self_625;
    let _e58: Plane = other_541;
    let _e70: MultiVector = self_625;
    let _e74: Plane = other_541;
    let _e86: MultiVector = self_625;
    let _e90: Plane = other_541;
    let _e102: MultiVector = self_625;
    let _e105: MultiVector = self_625;
    let _e108: MultiVector = self_625;
    let _e111: MultiVector = self_625;
    let _e115: Plane = other_541;
    let _e123: MultiVector = self_625;
    let _e127: Plane = other_541;
    let _e138: MultiVector = self_625;
    let _e142: Plane = other_541;
    let _e154: MultiVector = self_625;
    let _e158: Plane = other_541;
    let _e170: MultiVector = self_625;
    let _e174: Plane = other_541;
    let _e186: MultiVector = self_625;
    let _e190: Plane = other_541;
    let _e202: MultiVector = self_625;
    let _e206: Plane = other_541;
    let _e218: MultiVector = self_625;
    let _e221: MultiVector = self_625;
    let _e224: MultiVector = self_625;
    let _e227: MultiVector = self_625;
    let _e231: Plane = other_541;
    let _e235: MultiVector = self_625;
    let _e239: Plane = other_541;
    let _e249: MultiVector = self_625;
    let _e253: Plane = other_541;
    let _e266: MultiVector = self_625;
    let _e270: Plane = other_541;
    let _e283: MultiVector = self_625;
    let _e287: Plane = other_541;
    let _e300: MultiVector = self_625;
    let _e302: Plane = other_541;
    let _e317: MultiVector = self_625;
    let _e321: Plane = other_541;
    let _e331: MultiVector = self_625;
    let _e335: Plane = other_541;
    let _e348: MultiVector = self_625;
    let _e352: Plane = other_541;
    let _e365: MultiVector = self_625;
    let _e369: Plane = other_541;
    let _e382: MultiVector = self_625;
    let _e384: Plane = other_541;
    return MultiVector(((((((((vec4<f32>(_e4.g1_.y) * _e8.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e20.g1_.z) * _e24.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g1_.w) * _e41.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e54.g2_.y) * vec4<f32>(_e58.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e70.g2_.z) * vec4<f32>(_e74.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e86.g2_.w) * vec4<f32>(_e90.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g2_.x, _e105.g1_.x, _e108.g1_.x, _e111.g1_.x) * _e115.g0_) * vec4<f32>(-(1.0)))), ((((((((vec4<f32>(_e123.g0_.y) * _e127.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e138.g0_.z) * _e142.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e154.g0_.w) * _e158.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e170.g3_.y) * vec4<f32>(_e174.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e186.g3_.z) * vec4<f32>(_e190.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e202.g3_.w) * vec4<f32>(_e206.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e218.g3_.x, _e221.g0_.x, _e224.g0_.x, _e227.g0_.x) * _e231.g0_)), ((((((vec4<f32>(_e235.g3_.x) * _e239.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e249.g3_.y) * _e253.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e266.g3_.z) * _e270.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e283.g3_.w) * _e287.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e300.g0_ * vec4<f32>(_e302.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e317.g2_.x) * _e321.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e331.g2_.y) * _e335.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e348.g2_.z) * _e352.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e365.g2_.w) * _e369.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e382.g1_ * vec4<f32>(_e384.g0_.x)) * vec4<f32>(-(1.0)))));
}

fn multi_vector_plane_scalar_product(self_626: MultiVector, other_542: Plane) -> Scalar {
    var self_627: MultiVector;
    var other_543: Plane;

    self_627 = self_626;
    other_543 = other_542;
    let _e4: MultiVector = self_627;
    let _e7: Plane = other_543;
    let _e11: MultiVector = self_627;
    let _e14: Plane = other_543;
    let _e19: MultiVector = self_627;
    let _e22: Plane = other_543;
    let _e27: MultiVector = self_627;
    let _e30: Plane = other_543;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g2_.y * _e14.g0_.y)) + (_e19.g2_.z * _e22.g0_.z)) + (_e27.g2_.w * _e30.g0_.w)));
}

fn multi_vector_plane_anti_scalar_product(self_628: MultiVector, other_544: Plane) -> AntiScalar {
    var self_629: MultiVector;
    var other_545: Plane;

    self_629 = self_628;
    other_545 = other_544;
    let _e5: MultiVector = self_629;
    let _e8: Plane = other_545;
    let _e13: MultiVector = self_629;
    let _e16: Plane = other_545;
    let _e21: MultiVector = self_629;
    let _e24: Plane = other_545;
    let _e29: MultiVector = self_629;
    let _e32: Plane = other_545;
    return AntiScalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g2_.y * _e16.g0_.y)) - (_e21.g2_.z * _e24.g0_.z)) - (_e29.g2_.w * _e32.g0_.w)));
}

fn multi_vector_line_into(self_630: MultiVector) -> Line {
    var self_631: MultiVector;

    self_631 = self_630;
    let _e2: MultiVector = self_631;
    let _e5: MultiVector = self_631;
    let _e8: MultiVector = self_631;
    let _e12: MultiVector = self_631;
    let _e15: MultiVector = self_631;
    let _e18: MultiVector = self_631;
    return Line(vec3<f32>(_e2.g3_.y, _e5.g3_.z, _e8.g3_.w), vec3<f32>(_e12.g0_.y, _e15.g0_.z, _e18.g0_.w));
}

fn multi_vector_line_add(self_632: MultiVector, other_546: Line) -> MultiVector {
    var self_633: MultiVector;
    var other_547: Line;

    self_633 = self_632;
    other_547 = other_546;
    let _e4: MultiVector = self_633;
    let _e6: Line = other_547;
    let _e9: Line = other_547;
    let _e12: Line = other_547;
    let _e15: Line = other_547;
    let _e26: MultiVector = self_633;
    let _e28: MultiVector = self_633;
    let _e30: MultiVector = self_633;
    let _e32: Line = other_547;
    let _e35: Line = other_547;
    let _e38: Line = other_547;
    let _e41: Line = other_547;
    return MultiVector((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g1_.x, _e12.g1_.y, _e15.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), _e26.g1_, _e28.g2_, (_e30.g3_ + (vec4<f32>(_e32.g0_.x, _e35.g0_.x, _e38.g0_.y, _e41.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_line_sub(self_634: MultiVector, other_548: Line) -> MultiVector {
    var self_635: MultiVector;
    var other_549: Line;

    self_635 = self_634;
    other_549 = other_548;
    let _e4: MultiVector = self_635;
    let _e6: Line = other_549;
    let _e9: Line = other_549;
    let _e12: Line = other_549;
    let _e15: Line = other_549;
    let _e26: MultiVector = self_635;
    let _e28: MultiVector = self_635;
    let _e30: MultiVector = self_635;
    let _e32: Line = other_549;
    let _e35: Line = other_549;
    let _e38: Line = other_549;
    let _e41: Line = other_549;
    return MultiVector((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g1_.x, _e12.g1_.y, _e15.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), _e26.g1_, _e28.g2_, (_e30.g3_ - (vec4<f32>(_e32.g0_.x, _e35.g0_.x, _e38.g0_.y, _e41.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_line_geometric_product(self_636: MultiVector, other_550: Line) -> MultiVector {
    var self_637: MultiVector;
    var other_551: Line;

    self_637 = self_636;
    other_551 = other_550;
    let _e4: MultiVector = self_637;
    let _e8: Line = other_551;
    let _e11: Line = other_551;
    let _e14: Line = other_551;
    let _e17: Line = other_551;
    let _e30: MultiVector = self_637;
    let _e34: Line = other_551;
    let _e37: Line = other_551;
    let _e40: Line = other_551;
    let _e43: Line = other_551;
    let _e57: MultiVector = self_637;
    let _e61: Line = other_551;
    let _e64: Line = other_551;
    let _e67: Line = other_551;
    let _e70: Line = other_551;
    let _e84: MultiVector = self_637;
    let _e88: Line = other_551;
    let _e91: Line = other_551;
    let _e94: Line = other_551;
    let _e97: Line = other_551;
    let _e112: MultiVector = self_637;
    let _e116: Line = other_551;
    let _e119: Line = other_551;
    let _e122: Line = other_551;
    let _e125: Line = other_551;
    let _e139: MultiVector = self_637;
    let _e143: Line = other_551;
    let _e146: Line = other_551;
    let _e149: Line = other_551;
    let _e152: Line = other_551;
    let _e166: MultiVector = self_637;
    let _e170: Line = other_551;
    let _e173: Line = other_551;
    let _e176: Line = other_551;
    let _e179: Line = other_551;
    let _e193: MultiVector = self_637;
    let _e197: Line = other_551;
    let _e200: Line = other_551;
    let _e203: Line = other_551;
    let _e206: Line = other_551;
    let _e218: MultiVector = self_637;
    let _e222: Line = other_551;
    let _e225: Line = other_551;
    let _e228: Line = other_551;
    let _e231: Line = other_551;
    let _e243: MultiVector = self_637;
    let _e247: Line = other_551;
    let _e250: Line = other_551;
    let _e253: Line = other_551;
    let _e256: Line = other_551;
    let _e269: MultiVector = self_637;
    let _e273: Line = other_551;
    let _e276: Line = other_551;
    let _e279: Line = other_551;
    let _e282: Line = other_551;
    let _e295: MultiVector = self_637;
    let _e299: Line = other_551;
    let _e302: Line = other_551;
    let _e305: Line = other_551;
    let _e308: Line = other_551;
    let _e320: MultiVector = self_637;
    let _e324: Line = other_551;
    let _e327: Line = other_551;
    let _e330: Line = other_551;
    let _e333: Line = other_551;
    let _e347: MultiVector = self_637;
    let _e351: Line = other_551;
    let _e354: Line = other_551;
    let _e357: Line = other_551;
    let _e360: Line = other_551;
    let _e374: MultiVector = self_637;
    let _e378: Line = other_551;
    let _e381: Line = other_551;
    let _e384: Line = other_551;
    let _e387: Line = other_551;
    let _e401: MultiVector = self_637;
    let _e405: Line = other_551;
    let _e408: Line = other_551;
    let _e411: Line = other_551;
    let _e414: Line = other_551;
    let _e429: MultiVector = self_637;
    let _e433: Line = other_551;
    let _e436: Line = other_551;
    let _e439: Line = other_551;
    let _e442: Line = other_551;
    let _e455: MultiVector = self_637;
    let _e459: Line = other_551;
    let _e462: Line = other_551;
    let _e465: Line = other_551;
    let _e468: Line = other_551;
    let _e482: MultiVector = self_637;
    let _e486: Line = other_551;
    let _e489: Line = other_551;
    let _e492: Line = other_551;
    let _e495: Line = other_551;
    let _e509: MultiVector = self_637;
    let _e513: Line = other_551;
    let _e516: Line = other_551;
    let _e519: Line = other_551;
    let _e522: Line = other_551;
    let _e537: MultiVector = self_637;
    let _e541: Line = other_551;
    let _e544: Line = other_551;
    let _e547: Line = other_551;
    let _e550: Line = other_551;
    let _e563: MultiVector = self_637;
    let _e567: Line = other_551;
    let _e570: Line = other_551;
    let _e573: Line = other_551;
    let _e576: Line = other_551;
    let _e589: MultiVector = self_637;
    let _e593: Line = other_551;
    let _e596: Line = other_551;
    let _e599: Line = other_551;
    let _e602: Line = other_551;
    let _e615: MultiVector = self_637;
    let _e619: Line = other_551;
    let _e622: Line = other_551;
    let _e625: Line = other_551;
    let _e628: Line = other_551;
    let _e640: MultiVector = self_637;
    let _e644: Line = other_551;
    let _e647: Line = other_551;
    let _e650: Line = other_551;
    let _e653: Line = other_551;
    let _e665: MultiVector = self_637;
    let _e669: Line = other_551;
    let _e672: Line = other_551;
    let _e675: Line = other_551;
    let _e678: Line = other_551;
    let _e691: MultiVector = self_637;
    let _e695: Line = other_551;
    let _e698: Line = other_551;
    let _e701: Line = other_551;
    let _e704: Line = other_551;
    let _e717: MultiVector = self_637;
    let _e721: Line = other_551;
    let _e724: Line = other_551;
    let _e727: Line = other_551;
    let _e730: Line = other_551;
    let _e745: MultiVector = self_637;
    let _e749: Line = other_551;
    let _e752: Line = other_551;
    let _e755: Line = other_551;
    let _e758: Line = other_551;
    let _e771: MultiVector = self_637;
    let _e775: Line = other_551;
    let _e778: Line = other_551;
    let _e781: Line = other_551;
    let _e784: Line = other_551;
    let _e797: MultiVector = self_637;
    let _e801: Line = other_551;
    let _e804: Line = other_551;
    let _e807: Line = other_551;
    let _e810: Line = other_551;
    let _e823: MultiVector = self_637;
    let _e827: Line = other_551;
    let _e830: Line = other_551;
    let _e833: Line = other_551;
    let _e836: Line = other_551;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.z, _e40.g1_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g1_.y, _e67.g1_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g3_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e112.g3_.y) * vec4<f32>(_e116.g0_.x, _e119.g0_.x, _e122.g0_.z, _e125.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e139.g3_.z) * vec4<f32>(_e143.g0_.y, _e146.g0_.z, _e149.g0_.y, _e152.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e166.g3_.w) * vec4<f32>(_e170.g0_.z, _e173.g0_.y, _e176.g0_.x, _e179.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e193.g0_.x) * vec4<f32>(_e197.g1_.x, _e200.g1_.x, _e203.g1_.y, _e206.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e218.g1_.y) * vec4<f32>(_e222.g1_.x, _e225.g1_.x, _e228.g1_.z, _e231.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e243.g1_.z) * vec4<f32>(_e247.g1_.y, _e250.g1_.z, _e253.g1_.y, _e256.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e269.g1_.w) * vec4<f32>(_e273.g1_.z, _e276.g1_.y, _e279.g1_.x, _e282.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e295.g2_.x) * vec4<f32>(_e299.g0_.x, _e302.g0_.x, _e305.g0_.y, _e308.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e320.g2_.y) * vec4<f32>(_e324.g0_.x, _e327.g0_.x, _e330.g0_.z, _e333.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e347.g2_.z) * vec4<f32>(_e351.g0_.y, _e354.g0_.z, _e357.g0_.y, _e360.g0_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e374.g2_.w) * vec4<f32>(_e378.g0_.z, _e381.g0_.y, _e384.g0_.x, _e387.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e401.g1_.x) * vec4<f32>(_e405.g1_.x, _e408.g1_.x, _e411.g1_.y, _e414.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((((vec4<f32>(_e429.g1_.y) * vec4<f32>(_e433.g0_.x, _e436.g0_.x, _e439.g0_.z, _e442.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e455.g1_.z) * vec4<f32>(_e459.g0_.y, _e462.g0_.z, _e465.g0_.y, _e468.g0_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e482.g1_.w) * vec4<f32>(_e486.g0_.z, _e489.g0_.y, _e492.g0_.x, _e495.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e509.g2_.x) * vec4<f32>(_e513.g1_.x, _e516.g1_.x, _e519.g1_.y, _e522.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e537.g2_.y) * vec4<f32>(_e541.g1_.x, _e544.g1_.x, _e547.g1_.z, _e550.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e563.g2_.z) * vec4<f32>(_e567.g1_.y, _e570.g1_.z, _e573.g1_.y, _e576.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e589.g2_.w) * vec4<f32>(_e593.g1_.z, _e596.g1_.y, _e599.g1_.x, _e602.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e615.g1_.x) * vec4<f32>(_e619.g0_.x, _e622.g0_.x, _e625.g0_.y, _e628.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e640.g0_.y) * vec4<f32>(_e644.g0_.x, _e647.g0_.x, _e650.g0_.z, _e653.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e665.g0_.z) * vec4<f32>(_e669.g0_.y, _e672.g0_.z, _e675.g0_.y, _e678.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e691.g0_.w) * vec4<f32>(_e695.g0_.z, _e698.g0_.y, _e701.g0_.x, _e704.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e717.g3_.x) * vec4<f32>(_e721.g1_.x, _e724.g1_.x, _e727.g1_.y, _e730.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e745.g3_.y) * vec4<f32>(_e749.g1_.x, _e752.g1_.x, _e755.g1_.z, _e758.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e771.g3_.z) * vec4<f32>(_e775.g1_.y, _e778.g1_.z, _e781.g1_.y, _e784.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e797.g3_.w) * vec4<f32>(_e801.g1_.z, _e804.g1_.y, _e807.g1_.x, _e810.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e823.g0_.x) * vec4<f32>(_e827.g0_.x, _e830.g0_.x, _e833.g0_.y, _e836.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_line_geometric_anti_product(self_638: MultiVector, other_552: Line) -> MultiVector {
    var self_639: MultiVector;
    var other_553: Line;

    self_639 = self_638;
    other_553 = other_552;
    let _e4: MultiVector = self_639;
    let _e8: Line = other_553;
    let _e11: Line = other_553;
    let _e14: Line = other_553;
    let _e17: Line = other_553;
    let _e29: MultiVector = self_639;
    let _e33: Line = other_553;
    let _e36: Line = other_553;
    let _e39: Line = other_553;
    let _e42: Line = other_553;
    let _e55: MultiVector = self_639;
    let _e59: Line = other_553;
    let _e62: Line = other_553;
    let _e65: Line = other_553;
    let _e68: Line = other_553;
    let _e81: MultiVector = self_639;
    let _e85: Line = other_553;
    let _e88: Line = other_553;
    let _e91: Line = other_553;
    let _e94: Line = other_553;
    let _e106: MultiVector = self_639;
    let _e110: Line = other_553;
    let _e113: Line = other_553;
    let _e116: Line = other_553;
    let _e119: Line = other_553;
    let _e132: MultiVector = self_639;
    let _e136: Line = other_553;
    let _e139: Line = other_553;
    let _e142: Line = other_553;
    let _e145: Line = other_553;
    let _e158: MultiVector = self_639;
    let _e162: Line = other_553;
    let _e165: Line = other_553;
    let _e168: Line = other_553;
    let _e171: Line = other_553;
    let _e184: MultiVector = self_639;
    let _e188: Line = other_553;
    let _e191: Line = other_553;
    let _e194: Line = other_553;
    let _e197: Line = other_553;
    let _e212: MultiVector = self_639;
    let _e216: Line = other_553;
    let _e219: Line = other_553;
    let _e222: Line = other_553;
    let _e225: Line = other_553;
    let _e238: MultiVector = self_639;
    let _e242: Line = other_553;
    let _e245: Line = other_553;
    let _e248: Line = other_553;
    let _e251: Line = other_553;
    let _e265: MultiVector = self_639;
    let _e269: Line = other_553;
    let _e272: Line = other_553;
    let _e275: Line = other_553;
    let _e278: Line = other_553;
    let _e292: MultiVector = self_639;
    let _e296: Line = other_553;
    let _e299: Line = other_553;
    let _e302: Line = other_553;
    let _e305: Line = other_553;
    let _e317: MultiVector = self_639;
    let _e321: Line = other_553;
    let _e324: Line = other_553;
    let _e327: Line = other_553;
    let _e330: Line = other_553;
    let _e344: MultiVector = self_639;
    let _e348: Line = other_553;
    let _e351: Line = other_553;
    let _e354: Line = other_553;
    let _e357: Line = other_553;
    let _e371: MultiVector = self_639;
    let _e375: Line = other_553;
    let _e378: Line = other_553;
    let _e381: Line = other_553;
    let _e384: Line = other_553;
    let _e398: MultiVector = self_639;
    let _e402: Line = other_553;
    let _e405: Line = other_553;
    let _e408: Line = other_553;
    let _e411: Line = other_553;
    let _e423: MultiVector = self_639;
    let _e427: Line = other_553;
    let _e430: Line = other_553;
    let _e433: Line = other_553;
    let _e436: Line = other_553;
    let _e449: MultiVector = self_639;
    let _e453: Line = other_553;
    let _e456: Line = other_553;
    let _e459: Line = other_553;
    let _e462: Line = other_553;
    let _e476: MultiVector = self_639;
    let _e480: Line = other_553;
    let _e483: Line = other_553;
    let _e486: Line = other_553;
    let _e489: Line = other_553;
    let _e503: MultiVector = self_639;
    let _e507: Line = other_553;
    let _e510: Line = other_553;
    let _e513: Line = other_553;
    let _e516: Line = other_553;
    let _e528: MultiVector = self_639;
    let _e532: Line = other_553;
    let _e535: Line = other_553;
    let _e538: Line = other_553;
    let _e541: Line = other_553;
    let _e555: MultiVector = self_639;
    let _e559: Line = other_553;
    let _e562: Line = other_553;
    let _e565: Line = other_553;
    let _e568: Line = other_553;
    let _e582: MultiVector = self_639;
    let _e586: Line = other_553;
    let _e589: Line = other_553;
    let _e592: Line = other_553;
    let _e595: Line = other_553;
    let _e609: MultiVector = self_639;
    let _e613: Line = other_553;
    let _e616: Line = other_553;
    let _e619: Line = other_553;
    let _e622: Line = other_553;
    let _e634: MultiVector = self_639;
    let _e638: Line = other_553;
    let _e641: Line = other_553;
    let _e644: Line = other_553;
    let _e647: Line = other_553;
    let _e660: MultiVector = self_639;
    let _e664: Line = other_553;
    let _e667: Line = other_553;
    let _e670: Line = other_553;
    let _e673: Line = other_553;
    let _e687: MultiVector = self_639;
    let _e691: Line = other_553;
    let _e694: Line = other_553;
    let _e697: Line = other_553;
    let _e700: Line = other_553;
    let _e714: MultiVector = self_639;
    let _e718: Line = other_553;
    let _e721: Line = other_553;
    let _e724: Line = other_553;
    let _e727: Line = other_553;
    let _e739: MultiVector = self_639;
    let _e743: Line = other_553;
    let _e746: Line = other_553;
    let _e749: Line = other_553;
    let _e752: Line = other_553;
    let _e766: MultiVector = self_639;
    let _e770: Line = other_553;
    let _e773: Line = other_553;
    let _e776: Line = other_553;
    let _e779: Line = other_553;
    let _e793: MultiVector = self_639;
    let _e797: Line = other_553;
    let _e800: Line = other_553;
    let _e803: Line = other_553;
    let _e806: Line = other_553;
    let _e820: MultiVector = self_639;
    let _e824: Line = other_553;
    let _e827: Line = other_553;
    let _e830: Line = other_553;
    let _e833: Line = other_553;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g3_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e106.g3_.y) * vec4<f32>(_e110.g1_.x, _e113.g1_.x, _e116.g1_.z, _e119.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e132.g3_.z) * vec4<f32>(_e136.g1_.y, _e139.g1_.z, _e142.g1_.y, _e145.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e158.g3_.w) * vec4<f32>(_e162.g1_.z, _e165.g1_.y, _e168.g1_.x, _e171.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e184.g0_.x) * vec4<f32>(_e188.g0_.x, _e191.g0_.x, _e194.g0_.y, _e197.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((((vec4<f32>(_e212.g1_.y) * vec4<f32>(_e216.g0_.x, _e219.g0_.x, _e222.g0_.z, _e225.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e238.g1_.z) * vec4<f32>(_e242.g0_.y, _e245.g0_.z, _e248.g0_.y, _e251.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e265.g1_.w) * vec4<f32>(_e269.g0_.z, _e272.g0_.y, _e275.g0_.x, _e278.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e292.g2_.x) * vec4<f32>(_e296.g1_.x, _e299.g1_.x, _e302.g1_.y, _e305.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e317.g2_.y) * vec4<f32>(_e321.g1_.x, _e324.g1_.x, _e327.g1_.z, _e330.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e344.g2_.z) * vec4<f32>(_e348.g1_.y, _e351.g1_.z, _e354.g1_.y, _e357.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e371.g2_.w) * vec4<f32>(_e375.g1_.z, _e378.g1_.y, _e381.g1_.x, _e384.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e398.g1_.x) * vec4<f32>(_e402.g0_.x, _e405.g0_.x, _e408.g0_.y, _e411.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e423.g1_.y) * vec4<f32>(_e427.g1_.x, _e430.g1_.x, _e433.g1_.z, _e436.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e449.g1_.z) * vec4<f32>(_e453.g1_.y, _e456.g1_.z, _e459.g1_.y, _e462.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e476.g1_.w) * vec4<f32>(_e480.g1_.z, _e483.g1_.y, _e486.g1_.x, _e489.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e503.g2_.x) * vec4<f32>(_e507.g0_.x, _e510.g0_.x, _e513.g0_.y, _e516.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e528.g2_.y) * vec4<f32>(_e532.g0_.x, _e535.g0_.x, _e538.g0_.z, _e541.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e555.g2_.z) * vec4<f32>(_e559.g0_.y, _e562.g0_.z, _e565.g0_.y, _e568.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e582.g2_.w) * vec4<f32>(_e586.g0_.z, _e589.g0_.y, _e592.g0_.x, _e595.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e609.g1_.x) * vec4<f32>(_e613.g1_.x, _e616.g1_.x, _e619.g1_.y, _e622.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e634.g0_.y) * vec4<f32>(_e638.g1_.x, _e641.g1_.x, _e644.g1_.z, _e647.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e660.g0_.z) * vec4<f32>(_e664.g1_.y, _e667.g1_.z, _e670.g1_.y, _e673.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e687.g0_.w) * vec4<f32>(_e691.g1_.z, _e694.g1_.y, _e697.g1_.x, _e700.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e714.g3_.x) * vec4<f32>(_e718.g0_.x, _e721.g0_.x, _e724.g0_.y, _e727.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e739.g3_.y) * vec4<f32>(_e743.g0_.x, _e746.g0_.x, _e749.g0_.z, _e752.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e766.g3_.z) * vec4<f32>(_e770.g0_.y, _e773.g0_.z, _e776.g0_.y, _e779.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e793.g3_.w) * vec4<f32>(_e797.g0_.z, _e800.g0_.y, _e803.g0_.x, _e806.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e820.g0_.x) * vec4<f32>(_e824.g1_.x, _e827.g1_.x, _e830.g1_.y, _e833.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_line_scalar_product(self_640: MultiVector, other_554: Line) -> Scalar {
    var self_641: MultiVector;
    var other_555: Line;

    self_641 = self_640;
    other_555 = other_554;
    let _e5: MultiVector = self_641;
    let _e8: Line = other_555;
    let _e13: MultiVector = self_641;
    let _e16: Line = other_555;
    let _e21: MultiVector = self_641;
    let _e24: Line = other_555;
    let _e29: MultiVector = self_641;
    let _e32: Line = other_555;
    let _e37: MultiVector = self_641;
    let _e40: Line = other_555;
    let _e45: MultiVector = self_641;
    let _e48: Line = other_555;
    return Scalar(((((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)) - (_e29.g3_.y * _e32.g0_.x)) - (_e37.g3_.z * _e40.g0_.y)) - (_e45.g3_.w * _e48.g0_.z)));
}

fn multi_vector_line_anti_scalar_product(self_642: MultiVector, other_556: Line) -> AntiScalar {
    var self_643: MultiVector;
    var other_557: Line;

    self_643 = self_642;
    other_557 = other_556;
    let _e5: MultiVector = self_643;
    let _e8: Line = other_557;
    let _e13: MultiVector = self_643;
    let _e16: Line = other_557;
    let _e21: MultiVector = self_643;
    let _e24: Line = other_557;
    let _e29: MultiVector = self_643;
    let _e32: Line = other_557;
    let _e37: MultiVector = self_643;
    let _e40: Line = other_557;
    let _e45: MultiVector = self_643;
    let _e48: Line = other_557;
    return AntiScalar(((((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)) - (_e29.g3_.y * _e32.g0_.x)) - (_e37.g3_.z * _e40.g0_.y)) - (_e45.g3_.w * _e48.g0_.z)));
}

fn multi_vector_translator_into(self_644: MultiVector) -> Translator {
    var self_645: MultiVector;

    self_645 = self_644;
    let _e2: MultiVector = self_645;
    let _e5: MultiVector = self_645;
    let _e8: MultiVector = self_645;
    let _e11: MultiVector = self_645;
    return Translator(vec4<f32>(_e2.g0_.x, _e5.g3_.y, _e8.g3_.z, _e11.g3_.w));
}

fn multi_vector_translator_add(self_646: MultiVector, other_558: Translator) -> MultiVector {
    var self_647: MultiVector;
    var other_559: Translator;

    self_647 = self_646;
    other_559 = other_558;
    let _e4: MultiVector = self_647;
    let _e6: Translator = other_559;
    let _e17: MultiVector = self_647;
    let _e19: MultiVector = self_647;
    let _e21: MultiVector = self_647;
    let _e23: Translator = other_559;
    return MultiVector((_e4.g0_ + (vec4<f32>(_e6.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e17.g1_, _e19.g2_, (_e21.g3_ + (_e23.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_translator_sub(self_648: MultiVector, other_560: Translator) -> MultiVector {
    var self_649: MultiVector;
    var other_561: Translator;

    self_649 = self_648;
    other_561 = other_560;
    let _e4: MultiVector = self_649;
    let _e6: Translator = other_561;
    let _e17: MultiVector = self_649;
    let _e19: MultiVector = self_649;
    let _e21: MultiVector = self_649;
    let _e23: Translator = other_561;
    return MultiVector((_e4.g0_ - (vec4<f32>(_e6.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e17.g1_, _e19.g2_, (_e21.g3_ - (_e23.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_translator_geometric_product(self_650: MultiVector, other_562: Translator) -> MultiVector {
    var self_651: MultiVector;
    var other_563: Translator;

    self_651 = self_650;
    other_563 = other_562;
    let _e4: MultiVector = self_651;
    let _e8: Translator = other_563;
    let _e21: MultiVector = self_651;
    let _e25: Translator = other_563;
    let _e38: MultiVector = self_651;
    let _e42: Translator = other_563;
    let _e55: MultiVector = self_651;
    let _e59: Translator = other_563;
    let _e72: MultiVector = self_651;
    let _e74: Translator = other_563;
    let _e80: MultiVector = self_651;
    let _e84: Translator = other_563;
    let _e94: MultiVector = self_651;
    let _e98: Translator = other_563;
    let _e111: MultiVector = self_651;
    let _e115: Translator = other_563;
    let _e128: MultiVector = self_651;
    let _e132: Translator = other_563;
    let _e145: MultiVector = self_651;
    let _e147: Translator = other_563;
    let _e153: MultiVector = self_651;
    let _e157: Translator = other_563;
    let _e169: MultiVector = self_651;
    let _e173: Translator = other_563;
    let _e186: MultiVector = self_651;
    let _e190: Translator = other_563;
    let _e203: MultiVector = self_651;
    let _e207: Translator = other_563;
    let _e219: MultiVector = self_651;
    let _e223: Translator = other_563;
    let _e235: MultiVector = self_651;
    let _e239: Translator = other_563;
    let _e251: MultiVector = self_651;
    let _e254: MultiVector = self_651;
    let _e257: MultiVector = self_651;
    let _e260: MultiVector = self_651;
    let _e264: Translator = other_563;
    let _e268: MultiVector = self_651;
    let _e272: Translator = other_563;
    let _e283: MultiVector = self_651;
    let _e287: Translator = other_563;
    let _e299: MultiVector = self_651;
    let _e303: Translator = other_563;
    let _e315: MultiVector = self_651;
    let _e319: Translator = other_563;
    let _e331: MultiVector = self_651;
    let _e335: Translator = other_563;
    let _e347: MultiVector = self_651;
    let _e351: Translator = other_563;
    let _e363: MultiVector = self_651;
    let _e366: MultiVector = self_651;
    let _e369: MultiVector = self_651;
    let _e372: MultiVector = self_651;
    let _e376: Translator = other_563;
    return MultiVector(((((((vec4<f32>(_e4.g3_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g3_.y) * _e25.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e38.g3_.z) * _e42.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g3_.w) * _e59.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), ((((((vec4<f32>(_e80.g2_.x) * _e84.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e94.g2_.y) * _e98.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e111.g2_.z) * _e115.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e128.g2_.w) * _e132.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + (_e145.g1_ * vec4<f32>(_e147.g0_.x))), ((((((((vec4<f32>(_e153.g1_.y) * _e157.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e169.g1_.z) * _e173.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e186.g1_.w) * _e190.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e203.g2_.y) * vec4<f32>(_e207.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e219.g2_.z) * vec4<f32>(_e223.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e235.g2_.w) * vec4<f32>(_e239.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e251.g2_.x, _e254.g1_.x, _e257.g1_.x, _e260.g1_.x) * _e264.g0_)), ((((((((vec4<f32>(_e268.g0_.y) * _e272.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e283.g0_.z) * _e287.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e299.g0_.w) * _e303.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e315.g3_.y) * vec4<f32>(_e319.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e331.g3_.z) * vec4<f32>(_e335.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e347.g3_.w) * vec4<f32>(_e351.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e363.g3_.x, _e366.g0_.x, _e369.g0_.x, _e372.g0_.x) * _e376.g0_)));
}

fn multi_vector_translator_outer_product(self_652: MultiVector, other_564: Translator) -> MultiVector {
    var self_653: MultiVector;
    var other_565: Translator;

    self_653 = self_652;
    other_565 = other_564;
    let _e4: MultiVector = self_653;
    let _e6: Translator = other_565;
    let _e11: MultiVector = self_653;
    let _e15: Translator = other_565;
    let _e26: MultiVector = self_653;
    let _e30: Translator = other_565;
    let _e42: MultiVector = self_653;
    let _e46: Translator = other_565;
    let _e58: MultiVector = self_653;
    let _e60: Translator = other_565;
    let _e66: MultiVector = self_653;
    let _e68: Translator = other_565;
    let _e73: MultiVector = self_653;
    let _e77: Translator = other_565;
    let _e88: MultiVector = self_653;
    let _e92: Translator = other_565;
    let _e104: MultiVector = self_653;
    let _e108: Translator = other_565;
    let _e120: MultiVector = self_653;
    let _e124: Translator = other_565;
    let _e136: MultiVector = self_653;
    let _e140: Translator = other_565;
    let _e152: MultiVector = self_653;
    let _e156: Translator = other_565;
    let _e168: MultiVector = self_653;
    let _e171: Translator = other_565;
    return MultiVector((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (((((vec4<f32>(_e11.g2_.y) * _e15.g0_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e26.g2_.z) * _e30.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e42.g2_.w) * _e46.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (_e58.g1_ * vec4<f32>(_e60.g0_.x))), (_e66.g2_ * vec4<f32>(_e68.g0_.x)), ((((((((vec4<f32>(_e73.g0_.z) * vec4<f32>(_e77.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e88.g0_.w) * vec4<f32>(_e92.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e104.g3_.x) * vec4<f32>(_e108.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e120.g3_.y) * vec4<f32>(_e124.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e136.g3_.z) * vec4<f32>(_e140.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e152.g3_.w) * vec4<f32>(_e156.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (_e168.g0_.yxxx * _e171.g0_.yyzw)));
}

fn multi_vector_translator_inner_product(self_654: MultiVector, other_566: Translator) -> MultiVector {
    var self_655: MultiVector;
    var other_567: Translator;

    self_655 = self_654;
    other_567 = other_566;
    let _e4: MultiVector = self_655;
    let _e8: Translator = other_567;
    let _e21: MultiVector = self_655;
    let _e25: Translator = other_567;
    let _e38: MultiVector = self_655;
    let _e42: Translator = other_567;
    let _e55: MultiVector = self_655;
    let _e59: Translator = other_567;
    let _e72: MultiVector = self_655;
    let _e74: Translator = other_567;
    let _e80: MultiVector = self_655;
    let _e84: Translator = other_567;
    let _e96: MultiVector = self_655;
    let _e100: Translator = other_567;
    let _e113: MultiVector = self_655;
    let _e117: Translator = other_567;
    let _e130: MultiVector = self_655;
    let _e132: Translator = other_567;
    let _e138: MultiVector = self_655;
    let _e142: Translator = other_567;
    let _e153: MultiVector = self_655;
    let _e157: Translator = other_567;
    let _e169: MultiVector = self_655;
    let _e173: Translator = other_567;
    let _e185: MultiVector = self_655;
    let _e189: Translator = other_567;
    let _e201: MultiVector = self_655;
    let _e205: Translator = other_567;
    let _e217: MultiVector = self_655;
    let _e221: Translator = other_567;
    let _e233: MultiVector = self_655;
    let _e236: MultiVector = self_655;
    let _e239: MultiVector = self_655;
    let _e242: MultiVector = self_655;
    let _e246: Translator = other_567;
    let _e250: MultiVector = self_655;
    let _e254: Translator = other_567;
    let _e265: MultiVector = self_655;
    let _e269: Translator = other_567;
    let _e281: MultiVector = self_655;
    let _e285: Translator = other_567;
    let _e297: MultiVector = self_655;
    let _e300: MultiVector = self_655;
    let _e303: MultiVector = self_655;
    let _e306: MultiVector = self_655;
    let _e310: Translator = other_567;
    return MultiVector(((((((vec4<f32>(_e4.g3_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g3_.y) * vec4<f32>(_e25.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e38.g3_.z) * vec4<f32>(_e42.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g3_.w) * vec4<f32>(_e59.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), (((((vec4<f32>(_e80.g2_.y) * vec4<f32>(_e84.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e96.g2_.z) * vec4<f32>(_e100.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e113.g2_.w) * vec4<f32>(_e117.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (_e130.g1_ * vec4<f32>(_e132.g0_.x))), ((((((((vec4<f32>(_e138.g1_.y) * _e142.g0_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e153.g1_.z) * _e157.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e169.g1_.w) * _e173.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e185.g2_.y) * vec4<f32>(_e189.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e201.g2_.z) * vec4<f32>(_e205.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e217.g2_.w) * vec4<f32>(_e221.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e233.g2_.x, _e236.g1_.x, _e239.g1_.x, _e242.g1_.x) * _e246.g0_)), (((((vec4<f32>(_e250.g3_.y) * vec4<f32>(_e254.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e265.g3_.z) * vec4<f32>(_e269.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e281.g3_.w) * vec4<f32>(_e285.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e297.g3_.x, _e300.g0_.x, _e303.g0_.x, _e306.g0_.x) * _e310.g0_)));
}

fn multi_vector_translator_geometric_anti_product(self_656: MultiVector, other_568: Translator) -> MultiVector {
    var self_657: MultiVector;
    var other_569: Translator;

    self_657 = self_656;
    other_569 = other_568;
    let _e4: MultiVector = self_657;
    let _e8: Translator = other_569;
    let _e19: MultiVector = self_657;
    let _e23: Translator = other_569;
    let _e35: MultiVector = self_657;
    let _e39: Translator = other_569;
    let _e51: MultiVector = self_657;
    let _e55: Translator = other_569;
    let _e68: MultiVector = self_657;
    let _e72: Translator = other_569;
    let _e85: MultiVector = self_657;
    let _e89: Translator = other_569;
    let _e102: MultiVector = self_657;
    let _e105: MultiVector = self_657;
    let _e108: MultiVector = self_657;
    let _e111: MultiVector = self_657;
    let _e115: Translator = other_569;
    let _e128: MultiVector = self_657;
    let _e132: Translator = other_569;
    let _e144: MultiVector = self_657;
    let _e148: Translator = other_569;
    let _e161: MultiVector = self_657;
    let _e165: Translator = other_569;
    let _e178: MultiVector = self_657;
    let _e182: Translator = other_569;
    let _e195: MultiVector = self_657;
    let _e199: Translator = other_569;
    let _e212: MultiVector = self_657;
    let _e216: Translator = other_569;
    let _e229: MultiVector = self_657;
    let _e232: MultiVector = self_657;
    let _e235: MultiVector = self_657;
    let _e238: MultiVector = self_657;
    let _e242: Translator = other_569;
    let _e253: MultiVector = self_657;
    let _e257: Translator = other_569;
    let _e267: MultiVector = self_657;
    let _e271: Translator = other_569;
    let _e284: MultiVector = self_657;
    let _e288: Translator = other_569;
    let _e301: MultiVector = self_657;
    let _e305: Translator = other_569;
    let _e318: MultiVector = self_657;
    let _e320: Translator = other_569;
    let _e330: MultiVector = self_657;
    let _e334: Translator = other_569;
    let _e344: MultiVector = self_657;
    let _e348: Translator = other_569;
    let _e361: MultiVector = self_657;
    let _e365: Translator = other_569;
    let _e378: MultiVector = self_657;
    let _e382: Translator = other_569;
    let _e395: MultiVector = self_657;
    let _e397: Translator = other_569;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g3_.y) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e68.g3_.z) * vec4<f32>(_e72.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e85.g3_.w) * vec4<f32>(_e89.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e102.g3_.x, _e105.g0_.x, _e108.g0_.x, _e111.g0_.x) * _e115.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e128.g1_.y) * _e132.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e144.g1_.z) * _e148.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e161.g1_.w) * _e165.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e178.g2_.y) * vec4<f32>(_e182.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e195.g2_.z) * vec4<f32>(_e199.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e212.g2_.w) * vec4<f32>(_e216.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e229.g2_.x, _e232.g1_.x, _e235.g1_.x, _e238.g1_.x) * _e242.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((((((vec4<f32>(_e253.g2_.x) * _e257.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e267.g2_.y) * _e271.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e284.g2_.z) * _e288.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e301.g2_.w) * _e305.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e318.g1_ * vec4<f32>(_e320.g0_.x)) * vec4<f32>(-(1.0)))), ((((((vec4<f32>(_e330.g3_.x) * _e334.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e344.g3_.y) * _e348.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e361.g3_.z) * _e365.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e378.g3_.w) * _e382.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e395.g0_ * vec4<f32>(_e397.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_translator_inner_anti_product(self_658: MultiVector, other_570: Translator) -> MultiVector {
    var self_659: MultiVector;
    var other_571: Translator;

    self_659 = self_658;
    other_571 = other_570;
    let _e4: MultiVector = self_659;
    let _e8: Translator = other_571;
    let _e20: MultiVector = self_659;
    let _e24: Translator = other_571;
    let _e37: MultiVector = self_659;
    let _e41: Translator = other_571;
    let _e54: MultiVector = self_659;
    let _e57: MultiVector = self_659;
    let _e60: MultiVector = self_659;
    let _e63: MultiVector = self_659;
    let _e67: Translator = other_571;
    let _e80: MultiVector = self_659;
    let _e84: Translator = other_571;
    let _e95: MultiVector = self_659;
    let _e99: Translator = other_571;
    let _e111: MultiVector = self_659;
    let _e115: Translator = other_571;
    let _e127: MultiVector = self_659;
    let _e131: Translator = other_571;
    let _e144: MultiVector = self_659;
    let _e148: Translator = other_571;
    let _e161: MultiVector = self_659;
    let _e165: Translator = other_571;
    let _e178: MultiVector = self_659;
    let _e181: MultiVector = self_659;
    let _e184: MultiVector = self_659;
    let _e187: MultiVector = self_659;
    let _e191: Translator = other_571;
    let _e202: MultiVector = self_659;
    let _e206: Translator = other_571;
    let _e218: MultiVector = self_659;
    let _e222: Translator = other_571;
    let _e235: MultiVector = self_659;
    let _e239: Translator = other_571;
    let _e252: MultiVector = self_659;
    let _e254: Translator = other_571;
    let _e264: MultiVector = self_659;
    let _e268: Translator = other_571;
    let _e278: MultiVector = self_659;
    let _e282: Translator = other_571;
    let _e295: MultiVector = self_659;
    let _e299: Translator = other_571;
    let _e312: MultiVector = self_659;
    let _e316: Translator = other_571;
    let _e329: MultiVector = self_659;
    let _e331: Translator = other_571;
    return MultiVector((((((vec4<f32>(_e4.g3_.y) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e20.g3_.z) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e37.g3_.w) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g3_.x, _e57.g0_.x, _e60.g0_.x, _e63.g0_.x) * _e67.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((((vec4<f32>(_e80.g1_.y) * _e84.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e95.g1_.z) * _e99.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e111.g1_.w) * _e115.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e127.g2_.y) * vec4<f32>(_e131.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e144.g2_.z) * vec4<f32>(_e148.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e161.g2_.w) * vec4<f32>(_e165.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e178.g2_.x, _e181.g1_.x, _e184.g1_.x, _e187.g1_.x) * _e191.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), (((((vec4<f32>(_e202.g2_.y) * vec4<f32>(_e206.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e218.g2_.z) * vec4<f32>(_e222.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e235.g2_.w) * vec4<f32>(_e239.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e252.g1_ * vec4<f32>(_e254.g0_.x)) * vec4<f32>(-(1.0)))), ((((((vec4<f32>(_e264.g3_.x) * _e268.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e278.g3_.y) * vec4<f32>(_e282.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e295.g3_.z) * vec4<f32>(_e299.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e312.g3_.w) * vec4<f32>(_e316.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e329.g0_ * vec4<f32>(_e331.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_translator_right_contraction(self_660: MultiVector, other_572: Translator) -> MultiVector {
    var self_661: MultiVector;
    var other_573: Translator;

    self_661 = self_660;
    other_573 = other_572;
    let _e4: MultiVector = self_661;
    let _e8: Translator = other_573;
    let _e21: MultiVector = self_661;
    let _e25: Translator = other_573;
    let _e38: MultiVector = self_661;
    let _e42: Translator = other_573;
    let _e55: MultiVector = self_661;
    let _e59: Translator = other_573;
    let _e72: MultiVector = self_661;
    let _e74: Translator = other_573;
    let _e80: MultiVector = self_661;
    let _e82: Translator = other_573;
    let _e87: MultiVector = self_661;
    let _e91: Translator = other_573;
    let _e102: MultiVector = self_661;
    let _e106: Translator = other_573;
    let _e118: MultiVector = self_661;
    let _e122: Translator = other_573;
    let _e134: MultiVector = self_661;
    let _e138: Translator = other_573;
    let _e150: MultiVector = self_661;
    let _e153: MultiVector = self_661;
    let _e156: MultiVector = self_661;
    let _e159: MultiVector = self_661;
    let _e163: Translator = other_573;
    let _e175: MultiVector = self_661;
    let _e177: Translator = other_573;
    return MultiVector(((((((vec4<f32>(_e4.g3_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g3_.y) * vec4<f32>(_e25.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e38.g3_.z) * vec4<f32>(_e42.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g3_.w) * vec4<f32>(_e59.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), (_e80.g1_ * vec4<f32>(_e82.g0_.x)), ((((((vec4<f32>(_e87.g1_.z) * _e91.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e102.g1_.w) * _e106.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e118.g2_.z) * vec4<f32>(_e122.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e134.g2_.w) * vec4<f32>(_e138.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e150.g2_.x, _e153.g2_.y, _e156.g1_.y, _e159.g1_.y) * _e163.g0_.xxwz) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (_e175.g3_ * vec4<f32>(_e177.g0_.x)));
}

fn multi_vector_translator_left_anti_contraction(self_662: MultiVector, other_574: Translator) -> MultiVector {
    var self_663: MultiVector;
    var other_575: Translator;

    self_663 = self_662;
    other_575 = other_574;
    let _e4: MultiVector = self_663;
    let _e6: Translator = other_575;
    let _e20: MultiVector = self_663;
    let _e24: Translator = other_575;
    let _e35: MultiVector = self_663;
    let _e39: Translator = other_575;
    let _e51: MultiVector = self_663;
    let _e55: Translator = other_575;
    let _e68: MultiVector = self_663;
    let _e72: Translator = other_575;
    let _e85: MultiVector = self_663;
    let _e88: MultiVector = self_663;
    let _e91: MultiVector = self_663;
    let _e94: MultiVector = self_663;
    let _e98: Translator = other_575;
    let _e112: MultiVector = self_663;
    let _e114: Translator = other_575;
    let _e123: MultiVector = self_663;
    let _e127: Translator = other_575;
    let _e137: MultiVector = self_663;
    let _e141: Translator = other_575;
    let _e154: MultiVector = self_663;
    let _e158: Translator = other_575;
    let _e171: MultiVector = self_663;
    let _e175: Translator = other_575;
    let _e188: MultiVector = self_663;
    let _e190: Translator = other_575;
    return MultiVector(((_e4.g3_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((((((vec4<f32>(_e20.g1_.z) * _e24.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e35.g1_.w) * _e39.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g2_.z) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e68.g2_.w) * vec4<f32>(_e72.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e85.g2_.x, _e88.g2_.y, _e91.g1_.y, _e94.g1_.y) * _e98.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), ((_e112.g1_ * vec4<f32>(_e114.g0_.x)) * vec4<f32>(-(1.0))), ((((((vec4<f32>(_e123.g3_.x) * _e127.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e137.g3_.y) * vec4<f32>(_e141.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e154.g3_.z) * vec4<f32>(_e158.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e171.g3_.w) * vec4<f32>(_e175.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e188.g0_ * vec4<f32>(_e190.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_translator_scalar_product(self_664: MultiVector, other_576: Translator) -> Scalar {
    var self_665: MultiVector;
    var other_577: Translator;

    self_665 = self_664;
    other_577 = other_576;
    let _e4: MultiVector = self_665;
    let _e7: Translator = other_577;
    let _e11: MultiVector = self_665;
    let _e14: Translator = other_577;
    let _e19: MultiVector = self_665;
    let _e22: Translator = other_577;
    let _e27: MultiVector = self_665;
    let _e30: Translator = other_577;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g3_.y * _e14.g0_.y)) - (_e19.g3_.z * _e22.g0_.z)) - (_e27.g3_.w * _e30.g0_.w)));
}

fn multi_vector_translator_anti_scalar_product(self_666: MultiVector, other_578: Translator) -> AntiScalar {
    var self_667: MultiVector;
    var other_579: Translator;

    self_667 = self_666;
    other_579 = other_578;
    let _e4: MultiVector = self_667;
    let _e7: Translator = other_579;
    let _e11: MultiVector = self_667;
    let _e14: Translator = other_579;
    let _e19: MultiVector = self_667;
    let _e22: Translator = other_579;
    let _e27: MultiVector = self_667;
    let _e30: Translator = other_579;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g3_.y * _e14.g0_.y)) - (_e19.g3_.z * _e22.g0_.z)) - (_e27.g3_.w * _e30.g0_.w)));
}

fn multi_vector_motor_into(self_668: MultiVector) -> Motor {
    var self_669: MultiVector;

    self_669 = self_668;
    let _e2: MultiVector = self_669;
    let _e4: MultiVector = self_669;
    return Motor(_e2.g0_, _e4.g3_);
}

fn multi_vector_motor_add(self_670: MultiVector, other_580: Motor) -> MultiVector {
    var self_671: MultiVector;
    var other_581: Motor;

    self_671 = self_670;
    other_581 = other_580;
    let _e4: MultiVector = self_671;
    let _e6: Motor = other_581;
    let _e9: MultiVector = self_671;
    let _e11: MultiVector = self_671;
    let _e13: MultiVector = self_671;
    let _e15: Motor = other_581;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, (_e13.g3_ + _e15.g1_));
}

fn multi_vector_motor_sub(self_672: MultiVector, other_582: Motor) -> MultiVector {
    var self_673: MultiVector;
    var other_583: Motor;

    self_673 = self_672;
    other_583 = other_582;
    let _e4: MultiVector = self_673;
    let _e6: Motor = other_583;
    let _e9: MultiVector = self_673;
    let _e11: MultiVector = self_673;
    let _e13: MultiVector = self_673;
    let _e15: Motor = other_583;
    return MultiVector((_e4.g0_ - _e6.g0_), _e9.g1_, _e11.g2_, (_e13.g3_ - _e15.g1_));
}

fn multi_vector_motor_geometric_product(self_674: MultiVector, other_584: Motor) -> MultiVector {
    var self_675: MultiVector;
    var other_585: Motor;

    self_675 = self_674;
    other_585 = other_584;
    let _e4: MultiVector = self_675;
    let _e8: Motor = other_585;
    let _e11: MultiVector = self_675;
    let _e15: Motor = other_585;
    let _e28: MultiVector = self_675;
    let _e32: Motor = other_585;
    let _e45: MultiVector = self_675;
    let _e49: Motor = other_585;
    let _e62: MultiVector = self_675;
    let _e66: Motor = other_585;
    let _e79: MultiVector = self_675;
    let _e83: Motor = other_585;
    let _e97: MultiVector = self_675;
    let _e101: Motor = other_585;
    let _e115: MultiVector = self_675;
    let _e119: Motor = other_585;
    let _e133: MultiVector = self_675;
    let _e137: Motor = other_585;
    let _e149: MultiVector = self_675;
    let _e153: Motor = other_585;
    let _e165: MultiVector = self_675;
    let _e169: Motor = other_585;
    let _e181: MultiVector = self_675;
    let _e185: Motor = other_585;
    let _e197: MultiVector = self_675;
    let _e201: Motor = other_585;
    let _e205: MultiVector = self_675;
    let _e209: Motor = other_585;
    let _e222: MultiVector = self_675;
    let _e226: Motor = other_585;
    let _e239: MultiVector = self_675;
    let _e243: Motor = other_585;
    let _e256: MultiVector = self_675;
    let _e260: Motor = other_585;
    let _e263: MultiVector = self_675;
    let _e267: Motor = other_585;
    let _e280: MultiVector = self_675;
    let _e284: Motor = other_585;
    let _e297: MultiVector = self_675;
    let _e301: Motor = other_585;
    let _e314: MultiVector = self_675;
    let _e318: Motor = other_585;
    let _e331: MultiVector = self_675;
    let _e335: Motor = other_585;
    let _e347: MultiVector = self_675;
    let _e351: Motor = other_585;
    let _e363: MultiVector = self_675;
    let _e367: Motor = other_585;
    let _e379: MultiVector = self_675;
    let _e383: Motor = other_585;
    let _e386: MultiVector = self_675;
    let _e390: Motor = other_585;
    let _e403: MultiVector = self_675;
    let _e407: Motor = other_585;
    let _e420: MultiVector = self_675;
    let _e424: Motor = other_585;
    let _e437: MultiVector = self_675;
    let _e441: Motor = other_585;
    let _e454: MultiVector = self_675;
    let _e458: Motor = other_585;
    let _e470: MultiVector = self_675;
    let _e474: Motor = other_585;
    let _e486: MultiVector = self_675;
    let _e490: Motor = other_585;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e62.g3_.x) * _e66.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e79.g3_.y) * _e83.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e97.g3_.z) * _e101.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e115.g3_.w) * _e119.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e133.g1_.x) * _e137.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e149.g1_.y) * _e153.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e165.g1_.z) * _e169.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e181.g1_.w) * _e185.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e197.g2_.x) * _e201.g1_)) + ((vec4<f32>(_e205.g2_.y) * _e209.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e222.g2_.z) * _e226.g1_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e239.g2_.w) * _e243.g1_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e256.g1_.x) * _e260.g1_) + ((vec4<f32>(_e263.g1_.y) * _e267.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e280.g1_.z) * _e284.g1_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e297.g1_.w) * _e301.g1_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e314.g2_.x) * _e318.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e331.g2_.y) * _e335.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e347.g2_.z) * _e351.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e363.g2_.w) * _e367.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e379.g0_.x) * _e383.g1_) + ((vec4<f32>(_e386.g0_.y) * _e390.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e403.g0_.z) * _e407.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e420.g0_.w) * _e424.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e437.g3_.x) * _e441.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e454.g3_.y) * _e458.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e470.g3_.z) * _e474.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e486.g3_.w) * _e490.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn multi_vector_motor_regressive_product(self_676: MultiVector, other_586: Motor) -> MultiVector {
    var self_677: MultiVector;
    var other_587: Motor;

    self_677 = self_676;
    other_587 = other_586;
    let _e4: MultiVector = self_677;
    let _e8: Motor = other_587;
    let _e18: MultiVector = self_677;
    let _e22: Motor = other_587;
    let _e33: MultiVector = self_677;
    let _e37: Motor = other_587;
    let _e48: MultiVector = self_677;
    let _e52: Motor = other_587;
    let _e56: MultiVector = self_677;
    let _e60: Motor = other_587;
    let _e72: MultiVector = self_677;
    let _e76: Motor = other_587;
    let _e88: MultiVector = self_677;
    let _e92: Motor = other_587;
    let _e104: MultiVector = self_677;
    let _e108: Motor = other_587;
    let _e120: MultiVector = self_677;
    let _e124: Motor = other_587;
    let _e135: MultiVector = self_677;
    let _e139: Motor = other_587;
    let _e151: MultiVector = self_677;
    let _e155: Motor = other_587;
    let _e167: MultiVector = self_677;
    let _e171: Motor = other_587;
    let _e183: MultiVector = self_677;
    let _e187: Motor = other_587;
    let _e198: MultiVector = self_677;
    let _e202: Motor = other_587;
    let _e214: MultiVector = self_677;
    let _e218: Motor = other_587;
    let _e222: MultiVector = self_677;
    let _e226: Motor = other_587;
    let _e238: MultiVector = self_677;
    let _e242: Motor = other_587;
    let _e254: MultiVector = self_677;
    let _e257: MultiVector = self_677;
    let _e260: MultiVector = self_677;
    let _e263: MultiVector = self_677;
    let _e267: Motor = other_587;
    let _e270: Motor = other_587;
    let _e273: Motor = other_587;
    let _e276: Motor = other_587;
    let _e289: MultiVector = self_677;
    let _e293: Motor = other_587;
    let _e296: MultiVector = self_677;
    let _e298: Motor = other_587;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g1_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e48.g3_.x) * _e52.g0_)) + ((vec4<f32>(_e56.g3_.y) * vec4<f32>(_e60.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e72.g3_.z) * vec4<f32>(_e76.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e88.g3_.w) * vec4<f32>(_e92.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e104.g0_.x) * vec4<f32>(_e108.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e120.g1_.y) * _e124.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e135.g1_.z) * _e139.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e151.g1_.w) * _e155.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e167.g1_.x) * vec4<f32>(_e171.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((vec4<f32>(_e183.g1_.z) * _e187.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e198.g1_.w) * _e202.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + (vec4<f32>(_e214.g2_.x) * _e218.g1_)) + ((vec4<f32>(_e222.g2_.z) * vec4<f32>(_e226.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e238.g2_.w) * vec4<f32>(_e242.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e254.g1_.x, _e257.g2_.y, _e260.g1_.y, _e263.g1_.y) * vec4<f32>(_e267.g0_.x, _e270.g1_.x, _e273.g0_.w, _e276.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))), ((vec4<f32>(_e289.g3_.x) * _e293.g1_) + ((_e296.g3_ * vec4<f32>(_e298.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_motor_outer_product(self_678: MultiVector, other_588: Motor) -> MultiVector {
    var self_679: MultiVector;
    var other_589: Motor;

    self_679 = self_678;
    other_589 = other_588;
    let _e4: MultiVector = self_679;
    let _e8: Motor = other_589;
    let _e11: MultiVector = self_679;
    let _e13: Motor = other_589;
    let _e25: MultiVector = self_679;
    let _e29: Motor = other_589;
    let _e41: MultiVector = self_679;
    let _e45: Motor = other_589;
    let _e57: MultiVector = self_679;
    let _e61: Motor = other_589;
    let _e73: MultiVector = self_679;
    let _e77: Motor = other_589;
    let _e89: MultiVector = self_679;
    let _e91: Motor = other_589;
    let _e103: MultiVector = self_679;
    let _e107: Motor = other_589;
    let _e117: MultiVector = self_679;
    let _e121: Motor = other_589;
    let _e132: MultiVector = self_679;
    let _e136: Motor = other_589;
    let _e147: MultiVector = self_679;
    let _e151: Motor = other_589;
    let _e163: MultiVector = self_679;
    let _e167: Motor = other_589;
    let _e170: MultiVector = self_679;
    let _e174: Motor = other_589;
    let _e186: MultiVector = self_679;
    let _e190: Motor = other_589;
    let _e202: MultiVector = self_679;
    let _e206: Motor = other_589;
    let _e218: MultiVector = self_679;
    let _e222: Motor = other_589;
    let _e233: MultiVector = self_679;
    let _e237: Motor = other_589;
    let _e248: MultiVector = self_679;
    let _e252: Motor = other_589;
    let _e263: MultiVector = self_679;
    let _e266: Motor = other_589;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((vec4<f32>(_e25.g1_.x) * _e29.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e41.g2_.y) * _e45.g1_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e57.g2_.z) * _e61.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e73.g2_.w) * _e77.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e89.g1_ * vec4<f32>(_e91.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e103.g2_.y) * _e107.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e117.g2_.z) * _e121.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e132.g2_.w) * _e136.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e147.g2_.x) * vec4<f32>(_e151.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((vec4<f32>(_e163.g0_.x) * _e167.g1_) + ((vec4<f32>(_e170.g0_.z) * vec4<f32>(_e174.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e186.g0_.w) * vec4<f32>(_e190.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e202.g3_.x) * vec4<f32>(_e206.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e218.g3_.y) * _e222.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e233.g3_.z) * _e237.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e248.g3_.w) * _e252.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e263.g0_.yxxx * _e266.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_motor_inner_product(self_680: MultiVector, other_590: Motor) -> MultiVector {
    var self_681: MultiVector;
    var other_591: Motor;

    self_681 = self_680;
    other_591 = other_590;
    let _e4: MultiVector = self_681;
    let _e8: Motor = other_591;
    let _e11: MultiVector = self_681;
    let _e15: Motor = other_591;
    let _e27: MultiVector = self_681;
    let _e31: Motor = other_591;
    let _e43: MultiVector = self_681;
    let _e47: Motor = other_591;
    let _e60: MultiVector = self_681;
    let _e64: Motor = other_591;
    let _e77: MultiVector = self_681;
    let _e81: Motor = other_591;
    let _e94: MultiVector = self_681;
    let _e98: Motor = other_591;
    let _e111: MultiVector = self_681;
    let _e114: Motor = other_591;
    let _e126: MultiVector = self_681;
    let _e130: Motor = other_591;
    let _e140: MultiVector = self_681;
    let _e144: Motor = other_591;
    let _e155: MultiVector = self_681;
    let _e159: Motor = other_591;
    let _e170: MultiVector = self_681;
    let _e174: Motor = other_591;
    let _e186: MultiVector = self_681;
    let _e190: Motor = other_591;
    let _e202: MultiVector = self_681;
    let _e206: Motor = other_591;
    let _e218: MultiVector = self_681;
    let _e222: Motor = other_591;
    let _e234: MultiVector = self_681;
    let _e238: Motor = other_591;
    let _e250: MultiVector = self_681;
    let _e254: Motor = other_591;
    let _e257: MultiVector = self_681;
    let _e261: Motor = other_591;
    let _e273: MultiVector = self_681;
    let _e277: Motor = other_591;
    let _e289: MultiVector = self_681;
    let _e293: Motor = other_591;
    let _e306: MultiVector = self_681;
    let _e310: Motor = other_591;
    let _e322: MultiVector = self_681;
    let _e326: Motor = other_591;
    let _e338: MultiVector = self_681;
    let _e342: Motor = other_591;
    let _e354: MultiVector = self_681;
    let _e357: Motor = other_591;
    let _e369: MultiVector = self_681;
    let _e373: Motor = other_591;
    let _e376: MultiVector = self_681;
    let _e380: Motor = other_591;
    let _e393: MultiVector = self_681;
    let _e397: Motor = other_591;
    let _e409: MultiVector = self_681;
    let _e413: Motor = other_591;
    let _e425: MultiVector = self_681;
    let _e429: Motor = other_591;
    let _e441: MultiVector = self_681;
    let _e443: Motor = other_591;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e43.g3_.x) * _e47.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e60.g3_.y) * _e64.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e77.g3_.z) * _e81.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e94.g3_.w) * _e98.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e111.g0_.yyxx * _e114.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), (((((((((vec4<f32>(_e126.g1_.y) * _e130.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e155.g1_.w) * _e159.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e170.g2_.x) * vec4<f32>(_e174.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e186.g2_.y) * _e190.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e202.g2_.z) * _e206.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e218.g2_.w) * _e222.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e234.g1_.x) * vec4<f32>(_e238.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((vec4<f32>(_e250.g1_.x) * _e254.g1_) + ((vec4<f32>(_e257.g1_.z) * _e261.g1_.wwxy) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e273.g1_.w) * _e277.g1_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e289.g2_.x) * _e293.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e306.g2_.y) * _e310.g0_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e322.g2_.z) * _e326.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e338.g2_.w) * _e342.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e354.g1_.xyyy * _e357.g1_.xxwz) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((((((vec4<f32>(_e369.g0_.x) * _e373.g1_) + ((vec4<f32>(_e376.g3_.x) * _e380.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e393.g3_.y) * vec4<f32>(_e397.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e409.g3_.z) * vec4<f32>(_e413.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e425.g3_.w) * vec4<f32>(_e429.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e441.g0_ * vec4<f32>(_e443.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_motor_geometric_anti_product(self_682: MultiVector, other_592: Motor) -> MultiVector {
    var self_683: MultiVector;
    var other_593: Motor;

    self_683 = self_682;
    other_593 = other_592;
    let _e4: MultiVector = self_683;
    let _e8: Motor = other_593;
    let _e20: MultiVector = self_683;
    let _e24: Motor = other_593;
    let _e36: MultiVector = self_683;
    let _e40: Motor = other_593;
    let _e52: MultiVector = self_683;
    let _e56: Motor = other_593;
    let _e68: MultiVector = self_683;
    let _e72: Motor = other_593;
    let _e76: MultiVector = self_683;
    let _e80: Motor = other_593;
    let _e93: MultiVector = self_683;
    let _e97: Motor = other_593;
    let _e110: MultiVector = self_683;
    let _e114: Motor = other_593;
    let _e127: MultiVector = self_683;
    let _e131: Motor = other_593;
    let _e134: MultiVector = self_683;
    let _e138: Motor = other_593;
    let _e151: MultiVector = self_683;
    let _e155: Motor = other_593;
    let _e168: MultiVector = self_683;
    let _e172: Motor = other_593;
    let _e185: MultiVector = self_683;
    let _e189: Motor = other_593;
    let _e200: MultiVector = self_683;
    let _e204: Motor = other_593;
    let _e218: MultiVector = self_683;
    let _e222: Motor = other_593;
    let _e236: MultiVector = self_683;
    let _e240: Motor = other_593;
    let _e254: MultiVector = self_683;
    let _e258: Motor = other_593;
    let _e268: MultiVector = self_683;
    let _e272: Motor = other_593;
    let _e286: MultiVector = self_683;
    let _e290: Motor = other_593;
    let _e304: MultiVector = self_683;
    let _e308: Motor = other_593;
    let _e322: MultiVector = self_683;
    let _e326: Motor = other_593;
    let _e330: MultiVector = self_683;
    let _e334: Motor = other_593;
    let _e347: MultiVector = self_683;
    let _e351: Motor = other_593;
    let _e364: MultiVector = self_683;
    let _e368: Motor = other_593;
    let _e381: MultiVector = self_683;
    let _e385: Motor = other_593;
    let _e397: MultiVector = self_683;
    let _e401: Motor = other_593;
    let _e415: MultiVector = self_683;
    let _e419: Motor = other_593;
    let _e433: MultiVector = self_683;
    let _e437: Motor = other_593;
    let _e451: MultiVector = self_683;
    let _e455: Motor = other_593;
    let _e459: MultiVector = self_683;
    let _e463: Motor = other_593;
    let _e476: MultiVector = self_683;
    let _e480: Motor = other_593;
    let _e493: MultiVector = self_683;
    let _e497: Motor = other_593;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e68.g3_.x) * _e72.g0_)) + ((vec4<f32>(_e76.g3_.y) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e93.g3_.z) * _e97.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e110.g3_.w) * _e114.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e127.g1_.x) * _e131.g1_) + ((vec4<f32>(_e134.g1_.y) * _e138.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e151.g1_.z) * _e155.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e168.g1_.w) * _e172.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e185.g2_.x) * _e189.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e200.g2_.y) * _e204.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e218.g2_.z) * _e222.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e236.g2_.w) * _e240.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e254.g1_.x) * _e258.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e268.g1_.y) * _e272.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e286.g1_.z) * _e290.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e304.g1_.w) * _e308.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e322.g2_.x) * _e326.g1_)) + ((vec4<f32>(_e330.g2_.y) * _e334.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e347.g2_.z) * _e351.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e364.g2_.w) * _e368.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((((vec4<f32>(_e381.g0_.x) * _e385.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e397.g0_.y) * _e401.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e415.g0_.z) * _e419.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e433.g0_.w) * _e437.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e451.g3_.x) * _e455.g1_)) + ((vec4<f32>(_e459.g3_.y) * _e463.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e476.g3_.z) * _e480.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e493.g3_.w) * _e497.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn multi_vector_motor_inner_anti_product(self_684: MultiVector, other_594: Motor) -> MultiVector {
    var self_685: MultiVector;
    var other_595: Motor;

    self_685 = self_684;
    other_595 = other_594;
    let _e4: MultiVector = self_685;
    let _e8: Motor = other_595;
    let _e20: MultiVector = self_685;
    let _e24: Motor = other_595;
    let _e28: MultiVector = self_685;
    let _e32: Motor = other_595;
    let _e45: MultiVector = self_685;
    let _e49: Motor = other_595;
    let _e62: MultiVector = self_685;
    let _e66: Motor = other_595;
    let _e79: MultiVector = self_685;
    let _e81: Motor = other_595;
    let _e93: MultiVector = self_685;
    let _e97: Motor = other_595;
    let _e100: MultiVector = self_685;
    let _e104: Motor = other_595;
    let _e116: MultiVector = self_685;
    let _e120: Motor = other_595;
    let _e132: MultiVector = self_685;
    let _e136: Motor = other_595;
    let _e147: MultiVector = self_685;
    let _e151: Motor = other_595;
    let _e164: MultiVector = self_685;
    let _e168: Motor = other_595;
    let _e181: MultiVector = self_685;
    let _e185: Motor = other_595;
    let _e198: MultiVector = self_685;
    let _e201: Motor = other_595;
    let _e213: MultiVector = self_685;
    let _e217: Motor = other_595;
    let _e229: MultiVector = self_685;
    let _e233: Motor = other_595;
    let _e246: MultiVector = self_685;
    let _e250: Motor = other_595;
    let _e263: MultiVector = self_685;
    let _e267: Motor = other_595;
    let _e279: MultiVector = self_685;
    let _e283: Motor = other_595;
    let _e295: MultiVector = self_685;
    let _e299: Motor = other_595;
    let _e311: MultiVector = self_685;
    let _e315: Motor = other_595;
    let _e327: MultiVector = self_685;
    let _e331: Motor = other_595;
    let _e344: MultiVector = self_685;
    let _e348: Motor = other_595;
    let _e360: MultiVector = self_685;
    let _e364: Motor = other_595;
    let _e377: MultiVector = self_685;
    let _e381: Motor = other_595;
    let _e394: MultiVector = self_685;
    let _e398: Motor = other_595;
    let _e402: MultiVector = self_685;
    let _e406: Motor = other_595;
    let _e418: MultiVector = self_685;
    let _e422: Motor = other_595;
    let _e434: MultiVector = self_685;
    let _e438: Motor = other_595;
    let _e450: MultiVector = self_685;
    let _e453: Motor = other_595;
    return MultiVector((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + (vec4<f32>(_e20.g3_.x) * _e24.g0_)) + ((vec4<f32>(_e28.g3_.y) * vec4<f32>(_e32.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e45.g3_.z) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e62.g3_.w) * vec4<f32>(_e66.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e79.g0_ * vec4<f32>(_e81.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((vec4<f32>(_e93.g1_.x) * _e97.g1_) + ((vec4<f32>(_e100.g1_.z) * _e104.g1_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e116.g1_.w) * _e120.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e132.g2_.x) * _e136.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e147.g2_.y) * _e151.g0_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e164.g2_.z) * _e168.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e181.g2_.w) * _e185.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e198.g1_.xyyy * _e201.g1_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))), (((((((((vec4<f32>(_e213.g1_.y) * _e217.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e229.g1_.z) * _e233.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e246.g1_.w) * _e250.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e263.g2_.x) * vec4<f32>(_e267.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e279.g2_.y) * _e283.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e295.g2_.z) * _e299.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e311.g2_.w) * _e315.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e327.g1_.x) * vec4<f32>(_e331.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e344.g0_.x) * _e348.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e360.g0_.z) * _e364.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e377.g0_.w) * _e381.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e394.g3_.x) * _e398.g1_)) + ((vec4<f32>(_e402.g3_.y) * _e406.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e418.g3_.z) * _e422.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e434.g3_.w) * _e438.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e450.g0_.yyxx * _e453.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn multi_vector_motor_left_contraction(self_686: MultiVector, other_596: Motor) -> MultiVector {
    var self_687: MultiVector;
    var other_597: Motor;

    self_687 = self_686;
    other_597 = other_596;
    let _e4: MultiVector = self_687;
    let _e8: Motor = other_597;
    let _e11: MultiVector = self_687;
    let _e15: Motor = other_597;
    let _e28: MultiVector = self_687;
    let _e32: Motor = other_597;
    let _e45: MultiVector = self_687;
    let _e49: Motor = other_597;
    let _e61: MultiVector = self_687;
    let _e65: Motor = other_597;
    let _e78: MultiVector = self_687;
    let _e82: Motor = other_597;
    let _e95: MultiVector = self_687;
    let _e99: Motor = other_597;
    let _e112: MultiVector = self_687;
    let _e115: Motor = other_597;
    let _e127: MultiVector = self_687;
    let _e131: Motor = other_597;
    let _e142: MultiVector = self_687;
    let _e146: Motor = other_597;
    let _e158: MultiVector = self_687;
    let _e162: Motor = other_597;
    let _e174: MultiVector = self_687;
    let _e178: Motor = other_597;
    let _e190: MultiVector = self_687;
    let _e194: Motor = other_597;
    let _e197: MultiVector = self_687;
    let _e201: Motor = other_597;
    let _e213: MultiVector = self_687;
    let _e217: Motor = other_597;
    let _e229: MultiVector = self_687;
    let _e233: Motor = other_597;
    let _e245: MultiVector = self_687;
    let _e247: Motor = other_597;
    let _e259: MultiVector = self_687;
    let _e263: Motor = other_597;
    let _e266: MultiVector = self_687;
    let _e268: Motor = other_597;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e45.g3_.x) * vec4<f32>(_e49.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e61.g3_.y) * _e65.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e78.g3_.z) * _e82.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e95.g3_.w) * _e99.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e112.g0_.yxxx * _e115.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((vec4<f32>(_e127.g2_.y) * _e131.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e142.g2_.z) * _e146.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e158.g2_.w) * _e162.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e174.g2_.x) * vec4<f32>(_e178.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e190.g1_.x) * _e194.g1_) + ((vec4<f32>(_e197.g2_.y) * _e201.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e213.g2_.z) * _e217.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e229.g2_.w) * _e233.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e245.g1_ * vec4<f32>(_e247.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((vec4<f32>(_e259.g0_.x) * _e263.g1_) + ((_e266.g0_ * vec4<f32>(_e268.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn multi_vector_motor_right_contraction(self_688: MultiVector, other_598: Motor) -> MultiVector {
    var self_689: MultiVector;
    var other_599: Motor;

    self_689 = self_688;
    other_599 = other_598;
    let _e4: MultiVector = self_689;
    let _e8: Motor = other_599;
    let _e19: MultiVector = self_689;
    let _e23: Motor = other_599;
    let _e35: MultiVector = self_689;
    let _e39: Motor = other_599;
    let _e51: MultiVector = self_689;
    let _e55: Motor = other_599;
    let _e68: MultiVector = self_689;
    let _e72: Motor = other_599;
    let _e85: MultiVector = self_689;
    let _e89: Motor = other_599;
    let _e102: MultiVector = self_689;
    let _e106: Motor = other_599;
    let _e119: MultiVector = self_689;
    let _e123: Motor = other_599;
    let _e135: MultiVector = self_689;
    let _e139: Motor = other_599;
    let _e149: MultiVector = self_689;
    let _e153: Motor = other_599;
    let _e164: MultiVector = self_689;
    let _e168: Motor = other_599;
    let _e179: MultiVector = self_689;
    let _e183: Motor = other_599;
    let _e195: MultiVector = self_689;
    let _e199: Motor = other_599;
    let _e210: MultiVector = self_689;
    let _e214: Motor = other_599;
    let _e226: MultiVector = self_689;
    let _e230: Motor = other_599;
    let _e243: MultiVector = self_689;
    let _e247: Motor = other_599;
    let _e259: MultiVector = self_689;
    let _e263: Motor = other_599;
    let _e275: MultiVector = self_689;
    let _e278: MultiVector = self_689;
    let _e281: MultiVector = self_689;
    let _e284: MultiVector = self_689;
    let _e288: Motor = other_599;
    let _e291: Motor = other_599;
    let _e294: Motor = other_599;
    let _e297: Motor = other_599;
    let _e310: MultiVector = self_689;
    let _e314: Motor = other_599;
    let _e326: MultiVector = self_689;
    let _e328: Motor = other_599;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g3_.x) * _e55.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e68.g3_.y) * vec4<f32>(_e72.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e85.g3_.z) * vec4<f32>(_e89.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e102.g3_.w) * vec4<f32>(_e106.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e119.g0_.x) * vec4<f32>(_e123.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e135.g1_.y) * _e139.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e149.g1_.z) * _e153.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e164.g1_.w) * _e168.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e179.g1_.x) * vec4<f32>(_e183.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((vec4<f32>(_e195.g1_.z) * _e199.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e210.g1_.w) * _e214.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e226.g2_.x) * _e230.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e243.g2_.z) * vec4<f32>(_e247.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e259.g2_.w) * vec4<f32>(_e263.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e275.g1_.x, _e278.g2_.y, _e281.g1_.y, _e284.g1_.y) * vec4<f32>(_e288.g1_.x, _e291.g0_.x, _e294.g1_.w, _e297.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), (((vec4<f32>(_e310.g3_.x) * _e314.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e326.g3_ * vec4<f32>(_e328.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn multi_vector_motor_left_anti_contraction(self_690: MultiVector, other_600: Motor) -> MultiVector {
    var self_691: MultiVector;
    var other_601: Motor;

    self_691 = self_690;
    other_601 = other_600;
    let _e4: MultiVector = self_691;
    let _e8: Motor = other_601;
    let _e11: MultiVector = self_691;
    let _e13: Motor = other_601;
    let _e28: MultiVector = self_691;
    let _e32: Motor = other_601;
    let _e43: MultiVector = self_691;
    let _e47: Motor = other_601;
    let _e59: MultiVector = self_691;
    let _e63: Motor = other_601;
    let _e74: MultiVector = self_691;
    let _e78: Motor = other_601;
    let _e91: MultiVector = self_691;
    let _e95: Motor = other_601;
    let _e108: MultiVector = self_691;
    let _e111: MultiVector = self_691;
    let _e114: MultiVector = self_691;
    let _e117: MultiVector = self_691;
    let _e121: Motor = other_601;
    let _e124: Motor = other_601;
    let _e127: Motor = other_601;
    let _e130: Motor = other_601;
    let _e144: MultiVector = self_691;
    let _e148: Motor = other_601;
    let _e160: MultiVector = self_691;
    let _e164: Motor = other_601;
    let _e177: MultiVector = self_691;
    let _e181: Motor = other_601;
    let _e194: MultiVector = self_691;
    let _e198: Motor = other_601;
    let _e211: MultiVector = self_691;
    let _e215: Motor = other_601;
    let _e227: MultiVector = self_691;
    let _e231: Motor = other_601;
    let _e244: MultiVector = self_691;
    let _e248: Motor = other_601;
    let _e261: MultiVector = self_691;
    let _e265: Motor = other_601;
    let _e269: MultiVector = self_691;
    let _e273: Motor = other_601;
    let _e286: MultiVector = self_691;
    let _e290: Motor = other_601;
    let _e303: MultiVector = self_691;
    let _e307: Motor = other_601;
    let _e320: MultiVector = self_691;
    let _e324: Motor = other_601;
    return MultiVector(((vec4<f32>(_e4.g3_.x) * _e8.g0_) + ((_e11.g3_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((vec4<f32>(_e28.g1_.z) * _e32.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e43.g1_.w) * _e47.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e59.g2_.x) * _e63.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e74.g2_.z) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e91.g2_.w) * vec4<f32>(_e95.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e108.g1_.x, _e111.g2_.y, _e114.g1_.y, _e117.g1_.y) * vec4<f32>(_e121.g1_.x, _e124.g0_.x, _e127.g1_.w, _e130.g1_.z)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e144.g1_.y) * _e148.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e160.g1_.z) * _e164.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e177.g1_.w) * _e181.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e194.g1_.x) * vec4<f32>(_e198.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e211.g0_.y) * _e215.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e227.g0_.z) * _e231.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e244.g0_.w) * _e248.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e261.g3_.x) * _e265.g1_)) + ((vec4<f32>(_e269.g3_.y) * vec4<f32>(_e273.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e286.g3_.z) * vec4<f32>(_e290.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e303.g3_.w) * vec4<f32>(_e307.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e320.g0_.x) * vec4<f32>(_e324.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn multi_vector_motor_right_anti_contraction(self_692: MultiVector, other_602: Motor) -> MultiVector {
    var self_693: MultiVector;
    var other_603: Motor;

    self_693 = self_692;
    other_603 = other_602;
    let _e4: MultiVector = self_693;
    let _e8: Motor = other_603;
    let _e20: MultiVector = self_693;
    let _e22: Motor = other_603;
    let _e34: MultiVector = self_693;
    let _e38: Motor = other_603;
    let _e41: MultiVector = self_693;
    let _e45: Motor = other_603;
    let _e57: MultiVector = self_693;
    let _e61: Motor = other_603;
    let _e73: MultiVector = self_693;
    let _e77: Motor = other_603;
    let _e89: MultiVector = self_693;
    let _e91: Motor = other_603;
    let _e103: MultiVector = self_693;
    let _e107: Motor = other_603;
    let _e118: MultiVector = self_693;
    let _e122: Motor = other_603;
    let _e134: MultiVector = self_693;
    let _e138: Motor = other_603;
    let _e150: MultiVector = self_693;
    let _e154: Motor = other_603;
    let _e166: MultiVector = self_693;
    let _e170: Motor = other_603;
    let _e182: MultiVector = self_693;
    let _e186: Motor = other_603;
    let _e199: MultiVector = self_693;
    let _e203: Motor = other_603;
    let _e216: MultiVector = self_693;
    let _e220: Motor = other_603;
    let _e232: MultiVector = self_693;
    let _e236: Motor = other_603;
    let _e248: MultiVector = self_693;
    let _e252: Motor = other_603;
    let _e264: MultiVector = self_693;
    let _e268: Motor = other_603;
    let _e280: MultiVector = self_693;
    let _e283: Motor = other_603;
    return MultiVector((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e34.g1_.x) * _e38.g1_) + ((vec4<f32>(_e41.g2_.y) * _e45.g0_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g2_.z) * _e61.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e73.g2_.w) * _e77.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e89.g1_ * vec4<f32>(_e91.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e103.g2_.y) * _e107.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e118.g2_.z) * _e122.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e134.g2_.w) * _e138.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e150.g2_.x) * vec4<f32>(_e154.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e166.g0_.x) * _e170.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e182.g0_.z) * vec4<f32>(_e186.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e199.g0_.w) * vec4<f32>(_e203.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e216.g3_.x) * vec4<f32>(_e220.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e232.g3_.y) * _e236.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e248.g3_.z) * _e252.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e264.g3_.w) * _e268.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e280.g0_.yxxx * _e283.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn multi_vector_motor_scalar_product(self_694: MultiVector, other_604: Motor) -> Scalar {
    var self_695: MultiVector;
    var other_605: Motor;

    self_695 = self_694;
    other_605 = other_604;
    let _e4: MultiVector = self_695;
    let _e7: Motor = other_605;
    let _e11: MultiVector = self_695;
    let _e14: Motor = other_605;
    let _e19: MultiVector = self_695;
    let _e22: Motor = other_605;
    let _e27: MultiVector = self_695;
    let _e30: Motor = other_605;
    let _e35: MultiVector = self_695;
    let _e38: Motor = other_605;
    let _e43: MultiVector = self_695;
    let _e46: Motor = other_605;
    let _e51: MultiVector = self_695;
    let _e54: Motor = other_605;
    let _e59: MultiVector = self_695;
    let _e62: Motor = other_605;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g3_.x * _e38.g1_.x)) - (_e43.g3_.y * _e46.g1_.y)) - (_e51.g3_.z * _e54.g1_.z)) - (_e59.g3_.w * _e62.g1_.w)));
}

fn multi_vector_motor_anti_scalar_product(self_696: MultiVector, other_606: Motor) -> AntiScalar {
    var self_697: MultiVector;
    var other_607: Motor;

    self_697 = self_696;
    other_607 = other_606;
    let _e4: MultiVector = self_697;
    let _e7: Motor = other_607;
    let _e11: MultiVector = self_697;
    let _e14: Motor = other_607;
    let _e19: MultiVector = self_697;
    let _e22: Motor = other_607;
    let _e27: MultiVector = self_697;
    let _e30: Motor = other_607;
    let _e35: MultiVector = self_697;
    let _e38: Motor = other_607;
    let _e43: MultiVector = self_697;
    let _e46: Motor = other_607;
    let _e51: MultiVector = self_697;
    let _e54: Motor = other_607;
    let _e59: MultiVector = self_697;
    let _e62: Motor = other_607;
    return AntiScalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g3_.x * _e38.g1_.x)) - (_e43.g3_.y * _e46.g1_.y)) - (_e51.g3_.z * _e54.g1_.z)) - (_e59.g3_.w * _e62.g1_.w)));
}

fn multi_vector_point_and_plane_into(self_698: MultiVector) -> PointAndPlane {
    var self_699: MultiVector;

    self_699 = self_698;
    let _e2: MultiVector = self_699;
    let _e5: MultiVector = self_699;
    let _e8: MultiVector = self_699;
    let _e11: MultiVector = self_699;
    let _e15: MultiVector = self_699;
    let _e18: MultiVector = self_699;
    let _e21: MultiVector = self_699;
    let _e24: MultiVector = self_699;
    return PointAndPlane(vec4<f32>(_e2.g2_.x, _e5.g1_.y, _e8.g1_.z, _e11.g1_.w), vec4<f32>(_e15.g1_.x, _e18.g2_.y, _e21.g2_.z, _e24.g2_.w));
}

fn multi_vector_point_and_plane_add(self_700: MultiVector, other_608: PointAndPlane) -> MultiVector {
    var self_701: MultiVector;
    var other_609: PointAndPlane;

    self_701 = self_700;
    other_609 = other_608;
    let _e4: MultiVector = self_701;
    let _e6: MultiVector = self_701;
    let _e8: PointAndPlane = other_609;
    let _e11: PointAndPlane = other_609;
    let _e14: PointAndPlane = other_609;
    let _e17: PointAndPlane = other_609;
    let _e22: MultiVector = self_701;
    let _e24: PointAndPlane = other_609;
    let _e27: PointAndPlane = other_609;
    let _e30: PointAndPlane = other_609;
    let _e33: PointAndPlane = other_609;
    let _e38: MultiVector = self_701;
    return MultiVector(_e4.g0_, (_e6.g1_ + vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)), (_e22.g2_ + vec4<f32>(_e24.g0_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.w)), _e38.g3_);
}

fn multi_vector_point_and_plane_sub(self_702: MultiVector, other_610: PointAndPlane) -> MultiVector {
    var self_703: MultiVector;
    var other_611: PointAndPlane;

    self_703 = self_702;
    other_611 = other_610;
    let _e4: MultiVector = self_703;
    let _e6: MultiVector = self_703;
    let _e8: PointAndPlane = other_611;
    let _e11: PointAndPlane = other_611;
    let _e14: PointAndPlane = other_611;
    let _e17: PointAndPlane = other_611;
    let _e22: MultiVector = self_703;
    let _e24: PointAndPlane = other_611;
    let _e27: PointAndPlane = other_611;
    let _e30: PointAndPlane = other_611;
    let _e33: PointAndPlane = other_611;
    let _e38: MultiVector = self_703;
    return MultiVector(_e4.g0_, (_e6.g1_ - vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)), (_e22.g2_ - vec4<f32>(_e24.g0_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.w)), _e38.g3_);
}

fn multi_vector_point_and_plane_geometric_product(self_704: MultiVector, other_612: PointAndPlane) -> MultiVector {
    var self_705: MultiVector;
    var other_613: PointAndPlane;

    self_705 = self_704;
    other_613 = other_612;
    let _e4: MultiVector = self_705;
    let _e8: PointAndPlane = other_613;
    let _e11: PointAndPlane = other_613;
    let _e14: PointAndPlane = other_613;
    let _e17: PointAndPlane = other_613;
    let _e31: MultiVector = self_705;
    let _e35: PointAndPlane = other_613;
    let _e38: PointAndPlane = other_613;
    let _e41: PointAndPlane = other_613;
    let _e44: PointAndPlane = other_613;
    let _e59: MultiVector = self_705;
    let _e63: PointAndPlane = other_613;
    let _e66: PointAndPlane = other_613;
    let _e69: PointAndPlane = other_613;
    let _e72: PointAndPlane = other_613;
    let _e87: MultiVector = self_705;
    let _e91: PointAndPlane = other_613;
    let _e94: PointAndPlane = other_613;
    let _e97: PointAndPlane = other_613;
    let _e100: PointAndPlane = other_613;
    let _e115: MultiVector = self_705;
    let _e119: PointAndPlane = other_613;
    let _e122: PointAndPlane = other_613;
    let _e125: PointAndPlane = other_613;
    let _e128: PointAndPlane = other_613;
    let _e141: MultiVector = self_705;
    let _e145: PointAndPlane = other_613;
    let _e148: PointAndPlane = other_613;
    let _e151: PointAndPlane = other_613;
    let _e154: PointAndPlane = other_613;
    let _e167: MultiVector = self_705;
    let _e171: PointAndPlane = other_613;
    let _e174: PointAndPlane = other_613;
    let _e177: PointAndPlane = other_613;
    let _e180: PointAndPlane = other_613;
    let _e193: MultiVector = self_705;
    let _e197: PointAndPlane = other_613;
    let _e200: PointAndPlane = other_613;
    let _e203: PointAndPlane = other_613;
    let _e206: PointAndPlane = other_613;
    let _e219: MultiVector = self_705;
    let _e223: PointAndPlane = other_613;
    let _e226: PointAndPlane = other_613;
    let _e229: PointAndPlane = other_613;
    let _e232: PointAndPlane = other_613;
    let _e237: MultiVector = self_705;
    let _e241: PointAndPlane = other_613;
    let _e244: PointAndPlane = other_613;
    let _e247: PointAndPlane = other_613;
    let _e250: PointAndPlane = other_613;
    let _e264: MultiVector = self_705;
    let _e268: PointAndPlane = other_613;
    let _e271: PointAndPlane = other_613;
    let _e274: PointAndPlane = other_613;
    let _e277: PointAndPlane = other_613;
    let _e291: MultiVector = self_705;
    let _e295: PointAndPlane = other_613;
    let _e298: PointAndPlane = other_613;
    let _e301: PointAndPlane = other_613;
    let _e304: PointAndPlane = other_613;
    let _e318: MultiVector = self_705;
    let _e322: PointAndPlane = other_613;
    let _e325: PointAndPlane = other_613;
    let _e328: PointAndPlane = other_613;
    let _e331: PointAndPlane = other_613;
    let _e337: MultiVector = self_705;
    let _e341: PointAndPlane = other_613;
    let _e344: PointAndPlane = other_613;
    let _e347: PointAndPlane = other_613;
    let _e350: PointAndPlane = other_613;
    let _e364: MultiVector = self_705;
    let _e368: PointAndPlane = other_613;
    let _e371: PointAndPlane = other_613;
    let _e374: PointAndPlane = other_613;
    let _e377: PointAndPlane = other_613;
    let _e391: MultiVector = self_705;
    let _e395: PointAndPlane = other_613;
    let _e398: PointAndPlane = other_613;
    let _e401: PointAndPlane = other_613;
    let _e404: PointAndPlane = other_613;
    let _e418: MultiVector = self_705;
    let _e422: PointAndPlane = other_613;
    let _e425: PointAndPlane = other_613;
    let _e428: PointAndPlane = other_613;
    let _e431: PointAndPlane = other_613;
    let _e436: MultiVector = self_705;
    let _e440: PointAndPlane = other_613;
    let _e443: PointAndPlane = other_613;
    let _e446: PointAndPlane = other_613;
    let _e449: PointAndPlane = other_613;
    let _e463: MultiVector = self_705;
    let _e467: PointAndPlane = other_613;
    let _e470: PointAndPlane = other_613;
    let _e473: PointAndPlane = other_613;
    let _e476: PointAndPlane = other_613;
    let _e490: MultiVector = self_705;
    let _e494: PointAndPlane = other_613;
    let _e497: PointAndPlane = other_613;
    let _e500: PointAndPlane = other_613;
    let _e503: PointAndPlane = other_613;
    let _e517: MultiVector = self_705;
    let _e521: PointAndPlane = other_613;
    let _e524: PointAndPlane = other_613;
    let _e527: PointAndPlane = other_613;
    let _e530: PointAndPlane = other_613;
    let _e536: MultiVector = self_705;
    let _e540: PointAndPlane = other_613;
    let _e543: PointAndPlane = other_613;
    let _e546: PointAndPlane = other_613;
    let _e549: PointAndPlane = other_613;
    let _e563: MultiVector = self_705;
    let _e567: PointAndPlane = other_613;
    let _e570: PointAndPlane = other_613;
    let _e573: PointAndPlane = other_613;
    let _e576: PointAndPlane = other_613;
    let _e590: MultiVector = self_705;
    let _e594: PointAndPlane = other_613;
    let _e597: PointAndPlane = other_613;
    let _e600: PointAndPlane = other_613;
    let _e603: PointAndPlane = other_613;
    let _e617: MultiVector = self_705;
    let _e621: PointAndPlane = other_613;
    let _e624: PointAndPlane = other_613;
    let _e627: PointAndPlane = other_613;
    let _e630: PointAndPlane = other_613;
    let _e635: MultiVector = self_705;
    let _e639: PointAndPlane = other_613;
    let _e642: PointAndPlane = other_613;
    let _e645: PointAndPlane = other_613;
    let _e648: PointAndPlane = other_613;
    let _e662: MultiVector = self_705;
    let _e666: PointAndPlane = other_613;
    let _e669: PointAndPlane = other_613;
    let _e672: PointAndPlane = other_613;
    let _e675: PointAndPlane = other_613;
    let _e689: MultiVector = self_705;
    let _e693: PointAndPlane = other_613;
    let _e696: PointAndPlane = other_613;
    let _e699: PointAndPlane = other_613;
    let _e702: PointAndPlane = other_613;
    let _e716: MultiVector = self_705;
    let _e720: PointAndPlane = other_613;
    let _e723: PointAndPlane = other_613;
    let _e726: PointAndPlane = other_613;
    let _e729: PointAndPlane = other_613;
    let _e735: MultiVector = self_705;
    let _e739: PointAndPlane = other_613;
    let _e742: PointAndPlane = other_613;
    let _e745: PointAndPlane = other_613;
    let _e748: PointAndPlane = other_613;
    let _e762: MultiVector = self_705;
    let _e766: PointAndPlane = other_613;
    let _e769: PointAndPlane = other_613;
    let _e772: PointAndPlane = other_613;
    let _e775: PointAndPlane = other_613;
    let _e789: MultiVector = self_705;
    let _e793: PointAndPlane = other_613;
    let _e796: PointAndPlane = other_613;
    let _e799: PointAndPlane = other_613;
    let _e802: PointAndPlane = other_613;
    return MultiVector((((((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e31.g1_.y) * vec4<f32>(_e35.g0_.y, _e38.g1_.x, _e41.g0_.w, _e44.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e59.g1_.z) * vec4<f32>(_e63.g0_.z, _e66.g0_.w, _e69.g1_.x, _e72.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e87.g1_.w) * vec4<f32>(_e91.g0_.w, _e94.g0_.z, _e97.g0_.y, _e100.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e115.g2_.x) * vec4<f32>(_e119.g0_.x, _e122.g1_.y, _e125.g1_.z, _e128.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e141.g2_.y) * vec4<f32>(_e145.g1_.y, _e148.g0_.x, _e151.g1_.w, _e154.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e167.g2_.z) * vec4<f32>(_e171.g1_.z, _e174.g1_.w, _e177.g0_.x, _e180.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e193.g2_.w) * vec4<f32>(_e197.g1_.w, _e200.g1_.z, _e203.g1_.y, _e206.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e219.g0_.x) * vec4<f32>(_e223.g1_.x, _e226.g0_.y, _e229.g0_.z, _e232.g0_.w)) + ((vec4<f32>(_e237.g0_.y) * vec4<f32>(_e241.g0_.y, _e244.g1_.x, _e247.g0_.w, _e250.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e264.g0_.z) * vec4<f32>(_e268.g0_.z, _e271.g0_.w, _e274.g1_.x, _e277.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e291.g0_.w) * vec4<f32>(_e295.g0_.w, _e298.g0_.z, _e301.g0_.y, _e304.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e318.g3_.x) * vec4<f32>(_e322.g0_.x, _e325.g1_.y, _e328.g1_.z, _e331.g1_.w))) + ((vec4<f32>(_e337.g3_.y) * vec4<f32>(_e341.g1_.y, _e344.g0_.x, _e347.g1_.w, _e350.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e364.g3_.z) * vec4<f32>(_e368.g1_.z, _e371.g1_.w, _e374.g0_.x, _e377.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e391.g3_.w) * vec4<f32>(_e395.g1_.w, _e398.g1_.z, _e401.g1_.y, _e404.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e418.g0_.x) * vec4<f32>(_e422.g0_.x, _e425.g1_.y, _e428.g1_.z, _e431.g1_.w)) + ((vec4<f32>(_e436.g0_.y) * vec4<f32>(_e440.g1_.y, _e443.g0_.x, _e446.g1_.w, _e449.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e463.g0_.z) * vec4<f32>(_e467.g1_.z, _e470.g1_.w, _e473.g0_.x, _e476.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e490.g0_.w) * vec4<f32>(_e494.g1_.w, _e497.g1_.z, _e500.g1_.y, _e503.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e517.g3_.x) * vec4<f32>(_e521.g1_.x, _e524.g0_.y, _e527.g0_.z, _e530.g0_.w))) + ((vec4<f32>(_e536.g3_.y) * vec4<f32>(_e540.g0_.y, _e543.g1_.x, _e546.g0_.w, _e549.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e563.g3_.z) * vec4<f32>(_e567.g0_.z, _e570.g0_.w, _e573.g1_.x, _e576.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e590.g3_.w) * vec4<f32>(_e594.g0_.w, _e597.g0_.z, _e600.g0_.y, _e603.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e617.g1_.x) * vec4<f32>(_e621.g0_.x, _e624.g1_.y, _e627.g1_.z, _e630.g1_.w)) + ((vec4<f32>(_e635.g1_.y) * vec4<f32>(_e639.g1_.y, _e642.g0_.x, _e645.g1_.w, _e648.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e662.g1_.z) * vec4<f32>(_e666.g1_.z, _e669.g1_.w, _e672.g0_.x, _e675.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e689.g1_.w) * vec4<f32>(_e693.g1_.w, _e696.g1_.z, _e699.g1_.y, _e702.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) - (vec4<f32>(_e716.g2_.x) * vec4<f32>(_e720.g1_.x, _e723.g0_.y, _e726.g0_.z, _e729.g0_.w))) + ((vec4<f32>(_e735.g2_.y) * vec4<f32>(_e739.g0_.y, _e742.g1_.x, _e745.g0_.w, _e748.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e762.g2_.z) * vec4<f32>(_e766.g0_.z, _e769.g0_.w, _e772.g1_.x, _e775.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e789.g2_.w) * vec4<f32>(_e793.g0_.w, _e796.g0_.z, _e799.g0_.y, _e802.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn multi_vector_point_and_plane_geometric_anti_product(self_706: MultiVector, other_614: PointAndPlane) -> MultiVector {
    var self_707: MultiVector;
    var other_615: PointAndPlane;

    self_707 = self_706;
    other_615 = other_614;
    let _e4: MultiVector = self_707;
    let _e8: PointAndPlane = other_615;
    let _e11: PointAndPlane = other_615;
    let _e14: PointAndPlane = other_615;
    let _e17: PointAndPlane = other_615;
    let _e31: MultiVector = self_707;
    let _e35: PointAndPlane = other_615;
    let _e38: PointAndPlane = other_615;
    let _e41: PointAndPlane = other_615;
    let _e44: PointAndPlane = other_615;
    let _e59: MultiVector = self_707;
    let _e63: PointAndPlane = other_615;
    let _e66: PointAndPlane = other_615;
    let _e69: PointAndPlane = other_615;
    let _e72: PointAndPlane = other_615;
    let _e87: MultiVector = self_707;
    let _e91: PointAndPlane = other_615;
    let _e94: PointAndPlane = other_615;
    let _e97: PointAndPlane = other_615;
    let _e100: PointAndPlane = other_615;
    let _e115: MultiVector = self_707;
    let _e119: PointAndPlane = other_615;
    let _e122: PointAndPlane = other_615;
    let _e125: PointAndPlane = other_615;
    let _e128: PointAndPlane = other_615;
    let _e141: MultiVector = self_707;
    let _e145: PointAndPlane = other_615;
    let _e148: PointAndPlane = other_615;
    let _e151: PointAndPlane = other_615;
    let _e154: PointAndPlane = other_615;
    let _e167: MultiVector = self_707;
    let _e171: PointAndPlane = other_615;
    let _e174: PointAndPlane = other_615;
    let _e177: PointAndPlane = other_615;
    let _e180: PointAndPlane = other_615;
    let _e193: MultiVector = self_707;
    let _e197: PointAndPlane = other_615;
    let _e200: PointAndPlane = other_615;
    let _e203: PointAndPlane = other_615;
    let _e206: PointAndPlane = other_615;
    let _e219: MultiVector = self_707;
    let _e223: PointAndPlane = other_615;
    let _e226: PointAndPlane = other_615;
    let _e229: PointAndPlane = other_615;
    let _e232: PointAndPlane = other_615;
    let _e237: MultiVector = self_707;
    let _e241: PointAndPlane = other_615;
    let _e244: PointAndPlane = other_615;
    let _e247: PointAndPlane = other_615;
    let _e250: PointAndPlane = other_615;
    let _e264: MultiVector = self_707;
    let _e268: PointAndPlane = other_615;
    let _e271: PointAndPlane = other_615;
    let _e274: PointAndPlane = other_615;
    let _e277: PointAndPlane = other_615;
    let _e291: MultiVector = self_707;
    let _e295: PointAndPlane = other_615;
    let _e298: PointAndPlane = other_615;
    let _e301: PointAndPlane = other_615;
    let _e304: PointAndPlane = other_615;
    let _e318: MultiVector = self_707;
    let _e322: PointAndPlane = other_615;
    let _e325: PointAndPlane = other_615;
    let _e328: PointAndPlane = other_615;
    let _e331: PointAndPlane = other_615;
    let _e337: MultiVector = self_707;
    let _e341: PointAndPlane = other_615;
    let _e344: PointAndPlane = other_615;
    let _e347: PointAndPlane = other_615;
    let _e350: PointAndPlane = other_615;
    let _e364: MultiVector = self_707;
    let _e368: PointAndPlane = other_615;
    let _e371: PointAndPlane = other_615;
    let _e374: PointAndPlane = other_615;
    let _e377: PointAndPlane = other_615;
    let _e391: MultiVector = self_707;
    let _e395: PointAndPlane = other_615;
    let _e398: PointAndPlane = other_615;
    let _e401: PointAndPlane = other_615;
    let _e404: PointAndPlane = other_615;
    let _e418: MultiVector = self_707;
    let _e422: PointAndPlane = other_615;
    let _e425: PointAndPlane = other_615;
    let _e428: PointAndPlane = other_615;
    let _e431: PointAndPlane = other_615;
    let _e436: MultiVector = self_707;
    let _e440: PointAndPlane = other_615;
    let _e443: PointAndPlane = other_615;
    let _e446: PointAndPlane = other_615;
    let _e449: PointAndPlane = other_615;
    let _e463: MultiVector = self_707;
    let _e467: PointAndPlane = other_615;
    let _e470: PointAndPlane = other_615;
    let _e473: PointAndPlane = other_615;
    let _e476: PointAndPlane = other_615;
    let _e490: MultiVector = self_707;
    let _e494: PointAndPlane = other_615;
    let _e497: PointAndPlane = other_615;
    let _e500: PointAndPlane = other_615;
    let _e503: PointAndPlane = other_615;
    let _e517: MultiVector = self_707;
    let _e521: PointAndPlane = other_615;
    let _e524: PointAndPlane = other_615;
    let _e527: PointAndPlane = other_615;
    let _e530: PointAndPlane = other_615;
    let _e536: MultiVector = self_707;
    let _e540: PointAndPlane = other_615;
    let _e543: PointAndPlane = other_615;
    let _e546: PointAndPlane = other_615;
    let _e549: PointAndPlane = other_615;
    let _e563: MultiVector = self_707;
    let _e567: PointAndPlane = other_615;
    let _e570: PointAndPlane = other_615;
    let _e573: PointAndPlane = other_615;
    let _e576: PointAndPlane = other_615;
    let _e590: MultiVector = self_707;
    let _e594: PointAndPlane = other_615;
    let _e597: PointAndPlane = other_615;
    let _e600: PointAndPlane = other_615;
    let _e603: PointAndPlane = other_615;
    let _e619: MultiVector = self_707;
    let _e623: PointAndPlane = other_615;
    let _e626: PointAndPlane = other_615;
    let _e629: PointAndPlane = other_615;
    let _e632: PointAndPlane = other_615;
    let _e638: MultiVector = self_707;
    let _e642: PointAndPlane = other_615;
    let _e645: PointAndPlane = other_615;
    let _e648: PointAndPlane = other_615;
    let _e651: PointAndPlane = other_615;
    let _e665: MultiVector = self_707;
    let _e669: PointAndPlane = other_615;
    let _e672: PointAndPlane = other_615;
    let _e675: PointAndPlane = other_615;
    let _e678: PointAndPlane = other_615;
    let _e692: MultiVector = self_707;
    let _e696: PointAndPlane = other_615;
    let _e699: PointAndPlane = other_615;
    let _e702: PointAndPlane = other_615;
    let _e705: PointAndPlane = other_615;
    let _e719: MultiVector = self_707;
    let _e723: PointAndPlane = other_615;
    let _e726: PointAndPlane = other_615;
    let _e729: PointAndPlane = other_615;
    let _e732: PointAndPlane = other_615;
    let _e738: MultiVector = self_707;
    let _e742: PointAndPlane = other_615;
    let _e745: PointAndPlane = other_615;
    let _e748: PointAndPlane = other_615;
    let _e751: PointAndPlane = other_615;
    let _e765: MultiVector = self_707;
    let _e769: PointAndPlane = other_615;
    let _e772: PointAndPlane = other_615;
    let _e775: PointAndPlane = other_615;
    let _e778: PointAndPlane = other_615;
    let _e792: MultiVector = self_707;
    let _e796: PointAndPlane = other_615;
    let _e799: PointAndPlane = other_615;
    let _e802: PointAndPlane = other_615;
    let _e805: PointAndPlane = other_615;
    return MultiVector((((((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e31.g1_.y) * vec4<f32>(_e35.g1_.y, _e38.g0_.x, _e41.g1_.w, _e44.g1_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e59.g1_.z) * vec4<f32>(_e63.g1_.z, _e66.g1_.w, _e69.g0_.x, _e72.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e87.g1_.w) * vec4<f32>(_e91.g1_.w, _e94.g1_.z, _e97.g1_.y, _e100.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e115.g2_.x) * vec4<f32>(_e119.g1_.x, _e122.g0_.y, _e125.g0_.z, _e128.g0_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e141.g2_.y) * vec4<f32>(_e145.g0_.y, _e148.g1_.x, _e151.g0_.w, _e154.g0_.z)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e167.g2_.z) * vec4<f32>(_e171.g0_.z, _e174.g0_.w, _e177.g1_.x, _e180.g0_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e193.g2_.w) * vec4<f32>(_e197.g0_.w, _e200.g0_.z, _e203.g0_.y, _e206.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e219.g0_.x) * vec4<f32>(_e223.g0_.x, _e226.g1_.y, _e229.g1_.z, _e232.g1_.w)) + ((vec4<f32>(_e237.g0_.y) * vec4<f32>(_e241.g1_.y, _e244.g0_.x, _e247.g1_.w, _e250.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e264.g0_.z) * vec4<f32>(_e268.g1_.z, _e271.g1_.w, _e274.g0_.x, _e277.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e291.g0_.w) * vec4<f32>(_e295.g1_.w, _e298.g1_.z, _e301.g1_.y, _e304.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e318.g3_.x) * vec4<f32>(_e322.g1_.x, _e325.g0_.y, _e328.g0_.z, _e331.g0_.w))) + ((vec4<f32>(_e337.g3_.y) * vec4<f32>(_e341.g0_.y, _e344.g1_.x, _e347.g0_.w, _e350.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e364.g3_.z) * vec4<f32>(_e368.g0_.z, _e371.g0_.w, _e374.g1_.x, _e377.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e391.g3_.w) * vec4<f32>(_e395.g0_.w, _e398.g0_.z, _e401.g0_.y, _e404.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e418.g0_.x) * vec4<f32>(_e422.g1_.x, _e425.g0_.y, _e428.g0_.z, _e431.g0_.w)) + ((vec4<f32>(_e436.g0_.y) * vec4<f32>(_e440.g0_.y, _e443.g1_.x, _e446.g0_.w, _e449.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e463.g0_.z) * vec4<f32>(_e467.g0_.z, _e470.g0_.w, _e473.g1_.x, _e476.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e490.g0_.w) * vec4<f32>(_e494.g0_.w, _e497.g0_.z, _e500.g0_.y, _e503.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e517.g3_.x) * vec4<f32>(_e521.g0_.x, _e524.g1_.y, _e527.g1_.z, _e530.g1_.w))) + ((vec4<f32>(_e536.g3_.y) * vec4<f32>(_e540.g1_.y, _e543.g0_.x, _e546.g1_.w, _e549.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e563.g3_.z) * vec4<f32>(_e567.g1_.z, _e570.g1_.w, _e573.g0_.x, _e576.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e590.g3_.w) * vec4<f32>(_e594.g1_.w, _e597.g1_.z, _e600.g1_.y, _e603.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(0.0) - (vec4<f32>(_e619.g1_.x) * vec4<f32>(_e623.g1_.x, _e626.g0_.y, _e629.g0_.z, _e632.g0_.w))) + ((vec4<f32>(_e638.g1_.y) * vec4<f32>(_e642.g0_.y, _e645.g1_.x, _e648.g0_.w, _e651.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e665.g1_.z) * vec4<f32>(_e669.g0_.z, _e672.g0_.w, _e675.g1_.x, _e678.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e692.g1_.w) * vec4<f32>(_e696.g0_.w, _e699.g0_.z, _e702.g0_.y, _e705.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e719.g2_.x) * vec4<f32>(_e723.g0_.x, _e726.g1_.y, _e729.g1_.z, _e732.g1_.w))) + ((vec4<f32>(_e738.g2_.y) * vec4<f32>(_e742.g1_.y, _e745.g0_.x, _e748.g1_.w, _e751.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e765.g2_.z) * vec4<f32>(_e769.g1_.z, _e772.g1_.w, _e775.g0_.x, _e778.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e792.g2_.w) * vec4<f32>(_e796.g1_.w, _e799.g1_.z, _e802.g1_.y, _e805.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn multi_vector_point_and_plane_scalar_product(self_708: MultiVector, other_616: PointAndPlane) -> Scalar {
    var self_709: MultiVector;
    var other_617: PointAndPlane;

    self_709 = self_708;
    other_617 = other_616;
    let _e4: MultiVector = self_709;
    let _e7: PointAndPlane = other_617;
    let _e11: MultiVector = self_709;
    let _e14: PointAndPlane = other_617;
    let _e19: MultiVector = self_709;
    let _e22: PointAndPlane = other_617;
    let _e27: MultiVector = self_709;
    let _e30: PointAndPlane = other_617;
    let _e35: MultiVector = self_709;
    let _e38: PointAndPlane = other_617;
    let _e43: MultiVector = self_709;
    let _e46: PointAndPlane = other_617;
    let _e51: MultiVector = self_709;
    let _e54: PointAndPlane = other_617;
    let _e59: MultiVector = self_709;
    let _e62: PointAndPlane = other_617;
    return Scalar(((((((((_e4.g1_.x * _e7.g1_.x) - (_e11.g1_.y * _e14.g0_.y)) - (_e19.g1_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g0_.w)) - (_e35.g2_.x * _e38.g0_.x)) + (_e43.g2_.y * _e46.g1_.y)) + (_e51.g2_.z * _e54.g1_.z)) + (_e59.g2_.w * _e62.g1_.w)));
}

fn multi_vector_point_and_plane_anti_scalar_product(self_710: MultiVector, other_618: PointAndPlane) -> AntiScalar {
    var self_711: MultiVector;
    var other_619: PointAndPlane;

    self_711 = self_710;
    other_619 = other_618;
    let _e5: MultiVector = self_711;
    let _e8: PointAndPlane = other_619;
    let _e13: MultiVector = self_711;
    let _e16: PointAndPlane = other_619;
    let _e21: MultiVector = self_711;
    let _e24: PointAndPlane = other_619;
    let _e29: MultiVector = self_711;
    let _e32: PointAndPlane = other_619;
    let _e37: MultiVector = self_711;
    let _e40: PointAndPlane = other_619;
    let _e45: MultiVector = self_711;
    let _e48: PointAndPlane = other_619;
    let _e53: MultiVector = self_711;
    let _e56: PointAndPlane = other_619;
    let _e61: MultiVector = self_711;
    let _e64: PointAndPlane = other_619;
    return AntiScalar(((((((((0.0 - (_e5.g1_.x * _e8.g1_.x)) + (_e13.g1_.y * _e16.g0_.y)) + (_e21.g1_.z * _e24.g0_.z)) + (_e29.g1_.w * _e32.g0_.w)) + (_e37.g2_.x * _e40.g0_.x)) - (_e45.g2_.y * _e48.g1_.y)) - (_e53.g2_.z * _e56.g1_.z)) - (_e61.g2_.w * _e64.g1_.w)));
}

fn multi_vector_squared_magnitude(self_712: MultiVector) -> Scalar {
    var self_713: MultiVector;

    self_713 = self_712;
    let _e2: MultiVector = self_713;
    let _e3: MultiVector = self_713;
    let _e4: MultiVector = multi_vector_reversal(_e3);
    let _e5: Scalar = multi_vector_multi_vector_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_magnitude(self_714: MultiVector) -> Scalar {
    var self_715: MultiVector;

    self_715 = self_714;
    let _e2: MultiVector = self_715;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_bulk_norm(self_716: MultiVector) -> Scalar {
    var self_717: MultiVector;

    self_717 = self_716;
    let _e2: MultiVector = self_717;
    let _e3: Scalar = multi_vector_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn multi_vector_squared_anti_magnitude(self_718: MultiVector) -> AntiScalar {
    var self_719: MultiVector;

    self_719 = self_718;
    let _e2: MultiVector = self_719;
    let _e3: MultiVector = self_719;
    let _e4: MultiVector = multi_vector_anti_reversal(_e3);
    let _e5: AntiScalar = multi_vector_multi_vector_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn multi_vector_weight_norm(self_720: MultiVector) -> AntiScalar {
    var self_721: MultiVector;

    self_721 = self_720;
    let _e2: MultiVector = self_721;
    let _e3: AntiScalar = multi_vector_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn multi_vector_scale(self_722: MultiVector, other_620: f32) -> MultiVector {
    var self_723: MultiVector;
    var other_621: f32;

    self_723 = self_722;
    other_621 = other_620;
    let _e4: MultiVector = self_723;
    let _e5: f32 = other_621;
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn multi_vector_signum(self_724: MultiVector) -> MultiVector {
    var self_725: MultiVector;

    self_725 = self_724;
    let _e2: MultiVector = self_725;
    let _e3: MultiVector = self_725;
    let _e4: Scalar = multi_vector_magnitude(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn multi_vector_inverse(self_726: MultiVector) -> MultiVector {
    var self_727: MultiVector;

    self_727 = self_726;
    let _e2: MultiVector = self_727;
    let _e3: MultiVector = multi_vector_reversal(_e2);
    let _e4: MultiVector = self_727;
    let _e5: Scalar = multi_vector_squared_magnitude(_e4);
    let _e10: MultiVector = multi_vector_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn multi_vector_unitize(self_728: MultiVector) -> MultiVector {
    var self_729: MultiVector;

    self_729 = self_728;
    let _e2: MultiVector = self_729;
    let _e3: MultiVector = self_729;
    let _e4: AntiScalar = multi_vector_weight_norm(_e3);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn rotor_zero() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn rotor_one() -> Rotor {
    return Rotor(vec4<f32>(1.0, 0.0, 0.0, 0.0));
}

fn rotor_neg(self_730: Rotor) -> Rotor {
    var self_731: Rotor;

    self_731 = self_730;
    let _e2: Rotor = self_731;
    return Rotor((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn rotor_automorphism(self_732: Rotor) -> Rotor {
    var self_733: Rotor;

    self_733 = self_732;
    let _e2: Rotor = self_733;
    return Rotor(_e2.g0_);
}

fn rotor_reversal(self_734: Rotor) -> Rotor {
    var self_735: Rotor;

    self_735 = self_734;
    let _e2: Rotor = self_735;
    return Rotor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn rotor_conjugation(self_736: Rotor) -> Rotor {
    var self_737: Rotor;

    self_737 = self_736;
    let _e2: Rotor = self_737;
    return Rotor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn rotor_anti_reversal(self_738: Rotor) -> Rotor {
    var self_739: Rotor;

    self_739 = self_738;
    let _e2: Rotor = self_739;
    return Rotor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn rotor_scalar_into(self_740: Rotor) -> Scalar {
    var self_741: Rotor;

    self_741 = self_740;
    let _e2: Rotor = self_741;
    return Scalar(_e2.g0_.x);
}

fn rotor_scalar_add(self_742: Rotor, other_622: Scalar) -> Rotor {
    var self_743: Rotor;
    var other_623: Scalar;

    self_743 = self_742;
    other_623 = other_622;
    let _e4: Rotor = self_743;
    let _e6: Scalar = other_623;
    return Rotor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_scalar_sub(self_744: Rotor, other_624: Scalar) -> Rotor {
    var self_745: Rotor;
    var other_625: Scalar;

    self_745 = self_744;
    other_625 = other_624;
    let _e4: Rotor = self_745;
    let _e6: Scalar = other_625;
    return Rotor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_scalar_geometric_product(self_746: Rotor, other_626: Scalar) -> Rotor {
    var self_747: Rotor;
    var other_627: Scalar;

    self_747 = self_746;
    other_627 = other_626;
    let _e4: Rotor = self_747;
    let _e6: Scalar = other_627;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_outer_product(self_748: Rotor, other_628: Scalar) -> Rotor {
    var self_749: Rotor;
    var other_629: Scalar;

    self_749 = self_748;
    other_629 = other_628;
    let _e4: Rotor = self_749;
    let _e6: Scalar = other_629;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_inner_product(self_750: Rotor, other_630: Scalar) -> Rotor {
    var self_751: Rotor;
    var other_631: Scalar;

    self_751 = self_750;
    other_631 = other_630;
    let _e4: Rotor = self_751;
    let _e6: Scalar = other_631;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_left_contraction(self_752: Rotor, other_632: Scalar) -> Scalar {
    var self_753: Rotor;
    var other_633: Scalar;

    self_753 = self_752;
    other_633 = other_632;
    let _e4: Rotor = self_753;
    let _e7: Scalar = other_633;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn rotor_scalar_right_contraction(self_754: Rotor, other_634: Scalar) -> Rotor {
    var self_755: Rotor;
    var other_635: Scalar;

    self_755 = self_754;
    other_635 = other_634;
    let _e4: Rotor = self_755;
    let _e6: Scalar = other_635;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_scalar_right_anti_contraction(self_756: Rotor, other_636: Scalar) -> AntiScalar {
    var self_757: Rotor;
    var other_637: Scalar;

    self_757 = self_756;
    other_637 = other_636;
    let _e4: Rotor = self_757;
    let _e7: Scalar = other_637;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn rotor_scalar_scalar_product(self_758: Rotor, other_638: Scalar) -> Scalar {
    var self_759: Rotor;
    var other_639: Scalar;

    self_759 = self_758;
    other_639 = other_638;
    let _e4: Rotor = self_759;
    let _e7: Scalar = other_639;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn rotor_scalar_anti_scalar_product(self_760: Rotor, other_640: Scalar) -> AntiScalar {
    var self_761: Rotor;
    var other_641: Scalar;

    self_761 = self_760;
    other_641 = other_640;
    let _e4: Rotor = self_761;
    let _e7: Scalar = other_641;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn rotor_anti_scalar_regressive_product(self_762: Rotor, other_642: AntiScalar) -> Rotor {
    var self_763: Rotor;
    var other_643: AntiScalar;

    self_763 = self_762;
    other_643 = other_642;
    let _e4: Rotor = self_763;
    let _e6: AntiScalar = other_643;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_outer_product(self_764: Rotor, other_644: AntiScalar) -> AntiScalar {
    var self_765: Rotor;
    var other_645: AntiScalar;

    self_765 = self_764;
    other_645 = other_644;
    let _e4: Rotor = self_765;
    let _e7: AntiScalar = other_645;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn rotor_anti_scalar_geometric_anti_product(self_766: Rotor, other_646: AntiScalar) -> Rotor {
    var self_767: Rotor;
    var other_647: AntiScalar;

    self_767 = self_766;
    other_647 = other_646;
    let _e4: Rotor = self_767;
    let _e6: AntiScalar = other_647;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_inner_anti_product(self_768: Rotor, other_648: AntiScalar) -> Rotor {
    var self_769: Rotor;
    var other_649: AntiScalar;

    self_769 = self_768;
    other_649 = other_648;
    let _e4: Rotor = self_769;
    let _e6: AntiScalar = other_649;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_anti_scalar_right_anti_contraction(self_770: Rotor, other_650: AntiScalar) -> Rotor {
    var self_771: Rotor;
    var other_651: AntiScalar;

    self_771 = self_770;
    other_651 = other_650;
    let _e4: Rotor = self_771;
    let _e6: AntiScalar = other_651;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn rotor_multi_vector_add(self_772: Rotor, other_652: MultiVector) -> MultiVector {
    var self_773: Rotor;
    var other_653: MultiVector;

    self_773 = self_772;
    other_653 = other_652;
    let _e4: Rotor = self_773;
    let _e6: MultiVector = other_653;
    let _e9: MultiVector = other_653;
    let _e11: MultiVector = other_653;
    let _e13: MultiVector = other_653;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, _e13.g3_);
}

fn rotor_multi_vector_sub(self_774: Rotor, other_654: MultiVector) -> MultiVector {
    var self_775: Rotor;
    var other_655: MultiVector;

    self_775 = self_774;
    other_655 = other_654;
    let _e4: Rotor = self_775;
    let _e6: MultiVector = other_655;
    let _e11: MultiVector = other_655;
    let _e16: MultiVector = other_655;
    let _e21: MultiVector = other_655;
    return MultiVector((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec4<f32>(0.0) - _e16.g2_), (vec4<f32>(0.0) - _e21.g3_));
}

fn rotor_multi_vector_geometric_product(self_776: Rotor, other_656: MultiVector) -> MultiVector {
    var self_777: Rotor;
    var other_657: MultiVector;

    self_777 = self_776;
    other_657 = other_656;
    let _e4: Rotor = self_777;
    let _e8: MultiVector = other_657;
    let _e11: Rotor = self_777;
    let _e15: MultiVector = other_657;
    let _e28: Rotor = self_777;
    let _e32: MultiVector = other_657;
    let _e45: Rotor = self_777;
    let _e49: MultiVector = other_657;
    let _e62: Rotor = self_777;
    let _e66: MultiVector = other_657;
    let _e69: Rotor = self_777;
    let _e73: MultiVector = other_657;
    let _e86: Rotor = self_777;
    let _e90: MultiVector = other_657;
    let _e103: Rotor = self_777;
    let _e107: MultiVector = other_657;
    let _e120: Rotor = self_777;
    let _e124: MultiVector = other_657;
    let _e127: Rotor = self_777;
    let _e131: MultiVector = other_657;
    let _e144: Rotor = self_777;
    let _e148: MultiVector = other_657;
    let _e161: Rotor = self_777;
    let _e165: MultiVector = other_657;
    let _e178: Rotor = self_777;
    let _e182: MultiVector = other_657;
    let _e185: Rotor = self_777;
    let _e189: MultiVector = other_657;
    let _e202: Rotor = self_777;
    let _e206: MultiVector = other_657;
    let _e219: Rotor = self_777;
    let _e223: MultiVector = other_657;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e62.g0_.x) * _e66.g1_) + ((vec4<f32>(_e69.g0_.y) * _e73.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e86.g0_.z) * _e90.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e103.g0_.w) * _e107.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e120.g0_.x) * _e124.g2_) + ((vec4<f32>(_e127.g0_.y) * _e131.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e144.g0_.z) * _e148.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e161.g0_.w) * _e165.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e178.g0_.x) * _e182.g3_) + ((vec4<f32>(_e185.g0_.y) * _e189.g3_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e202.g0_.z) * _e206.g3_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e219.g0_.w) * _e223.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_multi_vector_outer_product(self_778: Rotor, other_658: MultiVector) -> MultiVector {
    var self_779: Rotor;
    var other_659: MultiVector;

    self_779 = self_778;
    other_659 = other_658;
    let _e4: Rotor = self_779;
    let _e8: MultiVector = other_659;
    let _e11: Rotor = self_779;
    let _e13: MultiVector = other_659;
    let _e25: Rotor = self_779;
    let _e29: MultiVector = other_659;
    let _e32: Rotor = self_779;
    let _e34: MultiVector = other_659;
    let _e49: Rotor = self_779;
    let _e53: MultiVector = other_659;
    let _e56: Rotor = self_779;
    let _e60: MultiVector = other_659;
    let _e72: Rotor = self_779;
    let _e76: MultiVector = other_659;
    let _e88: Rotor = self_779;
    let _e91: MultiVector = other_659;
    let _e102: Rotor = self_779;
    let _e106: MultiVector = other_659;
    let _e109: Rotor = self_779;
    let _e113: MultiVector = other_659;
    let _e125: Rotor = self_779;
    let _e129: MultiVector = other_659;
    let _e141: Rotor = self_779;
    let _e144: MultiVector = other_659;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((vec4<f32>(_e25.g0_.x) * _e29.g1_) + ((_e32.g0_ * vec4<f32>(_e34.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e49.g0_.x) * _e53.g2_) + ((vec4<f32>(_e56.g0_.z) * vec4<f32>(_e60.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e72.g0_.w) * vec4<f32>(_e76.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e88.g0_.yxxx * _e91.g2_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((vec4<f32>(_e102.g0_.x) * _e106.g3_) + ((vec4<f32>(_e109.g0_.z) * vec4<f32>(_e113.g3_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e125.g0_.w) * vec4<f32>(_e129.g3_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e141.g0_.yxxx * _e144.g3_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_multi_vector_inner_product(self_780: Rotor, other_660: MultiVector) -> MultiVector {
    var self_781: Rotor;
    var other_661: MultiVector;

    self_781 = self_780;
    other_661 = other_660;
    let _e4: Rotor = self_781;
    let _e8: MultiVector = other_661;
    let _e11: Rotor = self_781;
    let _e15: MultiVector = other_661;
    let _e27: Rotor = self_781;
    let _e31: MultiVector = other_661;
    let _e43: Rotor = self_781;
    let _e46: MultiVector = other_661;
    let _e58: Rotor = self_781;
    let _e62: MultiVector = other_661;
    let _e65: Rotor = self_781;
    let _e69: MultiVector = other_661;
    let _e81: Rotor = self_781;
    let _e85: MultiVector = other_661;
    let _e97: Rotor = self_781;
    let _e100: MultiVector = other_661;
    let _e111: Rotor = self_781;
    let _e115: MultiVector = other_661;
    let _e118: Rotor = self_781;
    let _e122: MultiVector = other_661;
    let _e135: Rotor = self_781;
    let _e139: MultiVector = other_661;
    let _e152: Rotor = self_781;
    let _e155: MultiVector = other_661;
    let _e168: Rotor = self_781;
    let _e172: MultiVector = other_661;
    let _e175: Rotor = self_781;
    let _e177: MultiVector = other_661;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), ((((vec4<f32>(_e58.g0_.x) * _e62.g1_) + ((vec4<f32>(_e65.g0_.z) * vec4<f32>(_e69.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e81.g0_.w) * vec4<f32>(_e85.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e97.g0_.yxxx * _e100.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((vec4<f32>(_e111.g0_.x) * _e115.g2_) + ((vec4<f32>(_e118.g0_.z) * _e122.g2_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e135.g0_.w) * _e139.g2_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e152.g0_.xyyy * _e155.g2_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((vec4<f32>(_e168.g0_.x) * _e172.g3_) + ((_e175.g0_ * vec4<f32>(_e177.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_multi_vector_geometric_anti_product(self_782: Rotor, other_662: MultiVector) -> MultiVector {
    var self_783: Rotor;
    var other_663: MultiVector;

    self_783 = self_782;
    other_663 = other_662;
    let _e4: Rotor = self_783;
    let _e8: MultiVector = other_663;
    let _e20: Rotor = self_783;
    let _e24: MultiVector = other_663;
    let _e36: Rotor = self_783;
    let _e40: MultiVector = other_663;
    let _e52: Rotor = self_783;
    let _e56: MultiVector = other_663;
    let _e68: Rotor = self_783;
    let _e72: MultiVector = other_663;
    let _e75: Rotor = self_783;
    let _e79: MultiVector = other_663;
    let _e92: Rotor = self_783;
    let _e96: MultiVector = other_663;
    let _e109: Rotor = self_783;
    let _e113: MultiVector = other_663;
    let _e126: Rotor = self_783;
    let _e130: MultiVector = other_663;
    let _e133: Rotor = self_783;
    let _e137: MultiVector = other_663;
    let _e150: Rotor = self_783;
    let _e154: MultiVector = other_663;
    let _e167: Rotor = self_783;
    let _e171: MultiVector = other_663;
    let _e184: Rotor = self_783;
    let _e188: MultiVector = other_663;
    let _e200: Rotor = self_783;
    let _e204: MultiVector = other_663;
    let _e218: Rotor = self_783;
    let _e222: MultiVector = other_663;
    let _e236: Rotor = self_783;
    let _e240: MultiVector = other_663;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g3_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g3_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e68.g0_.x) * _e72.g2_) + ((vec4<f32>(_e75.g0_.y) * _e79.g2_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e92.g0_.z) * _e96.g2_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e109.g0_.w) * _e113.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((vec4<f32>(_e126.g0_.x) * _e130.g1_) + ((vec4<f32>(_e133.g0_.y) * _e137.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e150.g0_.z) * _e154.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e167.g0_.w) * _e171.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e184.g0_.x) * _e188.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e200.g0_.y) * _e204.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e218.g0_.z) * _e222.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e236.g0_.w) * _e240.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn rotor_multi_vector_inner_anti_product(self_784: Rotor, other_664: MultiVector) -> MultiVector {
    var self_785: Rotor;
    var other_665: MultiVector;

    self_785 = self_784;
    other_665 = other_664;
    let _e4: Rotor = self_785;
    let _e8: MultiVector = other_665;
    let _e20: Rotor = self_785;
    let _e22: MultiVector = other_665;
    let _e34: Rotor = self_785;
    let _e38: MultiVector = other_665;
    let _e41: Rotor = self_785;
    let _e45: MultiVector = other_665;
    let _e58: Rotor = self_785;
    let _e62: MultiVector = other_665;
    let _e75: Rotor = self_785;
    let _e78: MultiVector = other_665;
    let _e91: Rotor = self_785;
    let _e95: MultiVector = other_665;
    let _e98: Rotor = self_785;
    let _e102: MultiVector = other_665;
    let _e114: Rotor = self_785;
    let _e118: MultiVector = other_665;
    let _e130: Rotor = self_785;
    let _e133: MultiVector = other_665;
    let _e144: Rotor = self_785;
    let _e148: MultiVector = other_665;
    let _e160: Rotor = self_785;
    let _e164: MultiVector = other_665;
    let _e177: Rotor = self_785;
    let _e181: MultiVector = other_665;
    let _e194: Rotor = self_785;
    let _e197: MultiVector = other_665;
    return MultiVector((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((vec4<f32>(_e34.g0_.x) * _e38.g2_) + ((vec4<f32>(_e41.g0_.z) * _e45.g2_.wwxy) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e58.g0_.w) * _e62.g2_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((_e75.g0_.xyyy * _e78.g2_.xxwz) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))), ((((vec4<f32>(_e91.g0_.x) * _e95.g1_) + ((vec4<f32>(_e98.g0_.z) * vec4<f32>(_e102.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e114.g0_.w) * vec4<f32>(_e118.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e130.g0_.yxxx * _e133.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e144.g0_.x) * _e148.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e160.g0_.z) * _e164.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e177.g0_.w) * _e181.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e194.g0_.yyxx * _e197.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn rotor_multi_vector_left_contraction(self_786: Rotor, other_666: MultiVector) -> MultiVector {
    var self_787: Rotor;
    var other_667: MultiVector;

    self_787 = self_786;
    other_667 = other_666;
    let _e4: Rotor = self_787;
    let _e8: MultiVector = other_667;
    let _e11: Rotor = self_787;
    let _e15: MultiVector = other_667;
    let _e28: Rotor = self_787;
    let _e32: MultiVector = other_667;
    let _e45: Rotor = self_787;
    let _e48: MultiVector = other_667;
    let _e60: Rotor = self_787;
    let _e64: MultiVector = other_667;
    let _e67: Rotor = self_787;
    let _e71: MultiVector = other_667;
    let _e83: Rotor = self_787;
    let _e87: MultiVector = other_667;
    let _e99: Rotor = self_787;
    let _e102: MultiVector = other_667;
    let _e113: Rotor = self_787;
    let _e117: MultiVector = other_667;
    let _e120: Rotor = self_787;
    let _e122: MultiVector = other_667;
    let _e137: Rotor = self_787;
    let _e141: MultiVector = other_667;
    let _e144: Rotor = self_787;
    let _e146: MultiVector = other_667;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g0_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), ((((vec4<f32>(_e60.g0_.x) * _e64.g1_) + ((vec4<f32>(_e67.g0_.z) * vec4<f32>(_e71.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e83.g0_.w) * vec4<f32>(_e87.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e99.g0_.yxxx * _e102.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((vec4<f32>(_e113.g0_.x) * _e117.g2_) + ((_e120.g0_ * vec4<f32>(_e122.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((vec4<f32>(_e137.g0_.x) * _e141.g3_) + ((_e144.g0_ * vec4<f32>(_e146.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_multi_vector_right_anti_contraction(self_788: Rotor, other_668: MultiVector) -> MultiVector {
    var self_789: Rotor;
    var other_669: MultiVector;

    self_789 = self_788;
    other_669 = other_668;
    let _e4: Rotor = self_789;
    let _e8: MultiVector = other_669;
    let _e20: Rotor = self_789;
    let _e22: MultiVector = other_669;
    let _e34: Rotor = self_789;
    let _e38: MultiVector = other_669;
    let _e41: Rotor = self_789;
    let _e43: MultiVector = other_669;
    let _e58: Rotor = self_789;
    let _e62: MultiVector = other_669;
    let _e65: Rotor = self_789;
    let _e69: MultiVector = other_669;
    let _e81: Rotor = self_789;
    let _e85: MultiVector = other_669;
    let _e97: Rotor = self_789;
    let _e100: MultiVector = other_669;
    let _e111: Rotor = self_789;
    let _e115: MultiVector = other_669;
    let _e127: Rotor = self_789;
    let _e131: MultiVector = other_669;
    let _e144: Rotor = self_789;
    let _e148: MultiVector = other_669;
    let _e161: Rotor = self_789;
    let _e164: MultiVector = other_669;
    return MultiVector((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((vec4<f32>(_e34.g0_.x) * _e38.g2_) + ((_e41.g0_ * vec4<f32>(_e43.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e58.g0_.x) * _e62.g1_) + ((vec4<f32>(_e65.g0_.z) * vec4<f32>(_e69.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e81.g0_.w) * vec4<f32>(_e85.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e97.g0_.yxxx * _e100.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e111.g0_.x) * _e115.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e127.g0_.z) * vec4<f32>(_e131.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e144.g0_.w) * vec4<f32>(_e148.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e161.g0_.yxxx * _e164.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn rotor_multi_vector_scalar_product(self_790: Rotor, other_670: MultiVector) -> Scalar {
    var self_791: Rotor;
    var other_671: MultiVector;

    self_791 = self_790;
    other_671 = other_670;
    let _e4: Rotor = self_791;
    let _e7: MultiVector = other_671;
    let _e11: Rotor = self_791;
    let _e14: MultiVector = other_671;
    let _e19: Rotor = self_791;
    let _e22: MultiVector = other_671;
    let _e27: Rotor = self_791;
    let _e30: MultiVector = other_671;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_multi_vector_anti_scalar_product(self_792: Rotor, other_672: MultiVector) -> AntiScalar {
    var self_793: Rotor;
    var other_673: MultiVector;

    self_793 = self_792;
    other_673 = other_672;
    let _e4: Rotor = self_793;
    let _e7: MultiVector = other_673;
    let _e11: Rotor = self_793;
    let _e14: MultiVector = other_673;
    let _e19: Rotor = self_793;
    let _e22: MultiVector = other_673;
    let _e27: Rotor = self_793;
    let _e30: MultiVector = other_673;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_rotor_add(self_794: Rotor, other_674: Rotor) -> Rotor {
    var self_795: Rotor;
    var other_675: Rotor;

    self_795 = self_794;
    other_675 = other_674;
    let _e4: Rotor = self_795;
    let _e6: Rotor = other_675;
    return Rotor((_e4.g0_ + _e6.g0_));
}

fn rotor_rotor_sub(self_796: Rotor, other_676: Rotor) -> Rotor {
    var self_797: Rotor;
    var other_677: Rotor;

    self_797 = self_796;
    other_677 = other_676;
    let _e4: Rotor = self_797;
    let _e6: Rotor = other_677;
    return Rotor((_e4.g0_ - _e6.g0_));
}

fn rotor_rotor_mul(self_798: Rotor, other_678: Rotor) -> Rotor {
    var self_799: Rotor;
    var other_679: Rotor;

    self_799 = self_798;
    other_679 = other_678;
    let _e4: Rotor = self_799;
    let _e6: Rotor = other_679;
    return Rotor((_e4.g0_ * _e6.g0_));
}

fn rotor_rotor_div(self_800: Rotor, other_680: Rotor) -> Rotor {
    var self_801: Rotor;
    var other_681: Rotor;

    self_801 = self_800;
    other_681 = other_680;
    let _e4: Rotor = self_801;
    let _e7: Rotor = self_801;
    let _e10: Rotor = self_801;
    let _e13: Rotor = self_801;
    let _e23: Rotor = other_681;
    let _e26: Rotor = other_681;
    let _e29: Rotor = other_681;
    let _e32: Rotor = other_681;
    return Rotor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn rotor_rotor_geometric_product(self_802: Rotor, other_682: Rotor) -> Rotor {
    var self_803: Rotor;
    var other_683: Rotor;

    self_803 = self_802;
    other_683 = other_682;
    let _e4: Rotor = self_803;
    let _e8: Rotor = other_683;
    let _e11: Rotor = self_803;
    let _e15: Rotor = other_683;
    let _e28: Rotor = self_803;
    let _e32: Rotor = other_683;
    let _e45: Rotor = self_803;
    let _e49: Rotor = other_683;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn rotor_rotor_outer_product(self_804: Rotor, other_684: Rotor) -> Rotor {
    var self_805: Rotor;
    var other_685: Rotor;

    self_805 = self_804;
    other_685 = other_684;
    let _e4: Rotor = self_805;
    let _e8: Rotor = other_685;
    let _e11: Rotor = self_805;
    let _e13: Rotor = other_685;
    return Rotor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn rotor_rotor_inner_product(self_806: Rotor, other_686: Rotor) -> Rotor {
    var self_807: Rotor;
    var other_687: Rotor;

    self_807 = self_806;
    other_687 = other_686;
    let _e4: Rotor = self_807;
    let _e8: Rotor = other_687;
    let _e11: Rotor = self_807;
    let _e15: Rotor = other_687;
    let _e27: Rotor = self_807;
    let _e31: Rotor = other_687;
    let _e43: Rotor = self_807;
    let _e46: Rotor = other_687;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn rotor_rotor_left_contraction(self_808: Rotor, other_688: Rotor) -> Rotor {
    var self_809: Rotor;
    var other_689: Rotor;

    self_809 = self_808;
    other_689 = other_688;
    let _e4: Rotor = self_809;
    let _e8: Rotor = other_689;
    let _e11: Rotor = self_809;
    let _e15: Rotor = other_689;
    let _e28: Rotor = self_809;
    let _e32: Rotor = other_689;
    let _e45: Rotor = self_809;
    let _e48: Rotor = other_689;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g0_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn rotor_rotor_right_contraction(self_810: Rotor, other_690: Rotor) -> Rotor {
    var self_811: Rotor;
    var other_691: Rotor;

    self_811 = self_810;
    other_691 = other_690;
    let _e4: Rotor = self_811;
    let _e8: Rotor = other_691;
    let _e19: Rotor = self_811;
    let _e23: Rotor = other_691;
    let _e35: Rotor = self_811;
    let _e39: Rotor = other_691;
    let _e51: Rotor = self_811;
    let _e55: Rotor = other_691;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_rotor_scalar_product(self_812: Rotor, other_692: Rotor) -> Scalar {
    var self_813: Rotor;
    var other_693: Rotor;

    self_813 = self_812;
    other_693 = other_692;
    let _e4: Rotor = self_813;
    let _e7: Rotor = other_693;
    let _e11: Rotor = self_813;
    let _e14: Rotor = other_693;
    let _e19: Rotor = self_813;
    let _e22: Rotor = other_693;
    let _e27: Rotor = self_813;
    let _e30: Rotor = other_693;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_rotor_anti_scalar_product(self_814: Rotor, other_694: Rotor) -> AntiScalar {
    var self_815: Rotor;
    var other_695: Rotor;

    self_815 = self_814;
    other_695 = other_694;
    let _e4: Rotor = self_815;
    let _e7: Rotor = other_695;
    let _e11: Rotor = self_815;
    let _e14: Rotor = other_695;
    let _e19: Rotor = self_815;
    let _e22: Rotor = other_695;
    let _e27: Rotor = self_815;
    let _e30: Rotor = other_695;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_point_geometric_product(self_816: Rotor, other_696: Point) -> PointAndPlane {
    var self_817: Rotor;
    var other_697: Point;

    self_817 = self_816;
    other_697 = other_696;
    let _e4: Rotor = self_817;
    let _e8: Point = other_697;
    let _e11: Rotor = self_817;
    let _e15: Point = other_697;
    let _e27: Rotor = self_817;
    let _e31: Point = other_697;
    let _e43: Rotor = self_817;
    let _e46: Point = other_697;
    let _e58: Rotor = self_817;
    let _e62: Point = other_697;
    let _e73: Rotor = self_817;
    let _e77: Point = other_697;
    let _e89: Rotor = self_817;
    let _e92: Point = other_697;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e43.g0_.xxyy * _e46.g0_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), ((((vec4<f32>(_e58.g0_.z) * _e62.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e73.g0_.w) * _e77.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e89.g0_.yyxx * _e92.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn rotor_point_outer_product(self_818: Rotor, other_698: Point) -> Point {
    var self_819: Rotor;
    var other_699: Point;

    self_819 = self_818;
    other_699 = other_698;
    let _e4: Rotor = self_819;
    let _e8: Point = other_699;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_point_inner_product(self_820: Rotor, other_700: Point) -> PointAndPlane {
    var self_821: Rotor;
    var other_701: Point;

    self_821 = self_820;
    other_701 = other_700;
    let _e4: Rotor = self_821;
    let _e8: Point = other_701;
    let _e11: Rotor = self_821;
    let _e15: Point = other_701;
    let _e26: Rotor = self_821;
    let _e30: Point = other_701;
    let _e42: Rotor = self_821;
    let _e45: Point = other_701;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e42.g0_.yyxx * _e45.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn rotor_point_geometric_anti_product(self_822: Rotor, other_702: Point) -> PointAndPlane {
    var self_823: Rotor;
    var other_703: Point;

    self_823 = self_822;
    other_703 = other_702;
    let _e4: Rotor = self_823;
    let _e8: Point = other_703;
    let _e19: Rotor = self_823;
    let _e23: Point = other_703;
    let _e35: Rotor = self_823;
    let _e38: Point = other_703;
    let _e50: Rotor = self_823;
    let _e54: Point = other_703;
    let _e57: Rotor = self_823;
    let _e61: Point = other_703;
    let _e73: Rotor = self_823;
    let _e77: Point = other_703;
    let _e89: Rotor = self_823;
    let _e92: Point = other_703;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), ((((vec4<f32>(_e50.g0_.x) * _e54.g0_) + ((vec4<f32>(_e57.g0_.z) * _e61.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e73.g0_.w) * _e77.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e89.g0_.xxyy * _e92.g0_.xxwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))));
}

fn rotor_point_inner_anti_product(self_824: Rotor, other_704: Point) -> PointAndPlane {
    var self_825: Rotor;
    var other_705: Point;

    self_825 = self_824;
    other_705 = other_704;
    let _e4: Rotor = self_825;
    let _e8: Point = other_705;
    let _e19: Rotor = self_825;
    let _e23: Point = other_705;
    let _e35: Rotor = self_825;
    let _e38: Point = other_705;
    let _e50: Rotor = self_825;
    let _e54: Point = other_705;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), (vec4<f32>(_e50.g0_.x) * _e54.g0_));
}

fn rotor_point_left_contraction(self_826: Rotor, other_706: Point) -> PointAndPlane {
    var self_827: Rotor;
    var other_707: Point;

    self_827 = self_826;
    other_707 = other_706;
    let _e4: Rotor = self_827;
    let _e8: Point = other_707;
    let _e11: Rotor = self_827;
    let _e15: Point = other_707;
    let _e26: Rotor = self_827;
    let _e30: Point = other_707;
    let _e42: Rotor = self_827;
    let _e45: Point = other_707;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e42.g0_.yyxx * _e45.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn rotor_point_right_anti_contraction(self_828: Rotor, other_708: Point) -> PointAndPlane {
    var self_829: Rotor;
    var other_709: Point;

    self_829 = self_828;
    other_709 = other_708;
    let _e4: Rotor = self_829;
    let _e8: Point = other_709;
    let _e19: Rotor = self_829;
    let _e23: Point = other_709;
    let _e35: Rotor = self_829;
    let _e38: Point = other_709;
    let _e50: Rotor = self_829;
    let _e54: Point = other_709;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), (vec4<f32>(_e50.g0_.x) * _e54.g0_));
}

fn rotor_ideal_point_regressive_product(self_830: Rotor, other_710: IdealPoint) -> Scalar {
    var self_831: Rotor;
    var other_711: IdealPoint;

    self_831 = self_830;
    other_711 = other_710;
    let _e4: Rotor = self_831;
    let _e7: IdealPoint = other_711;
    let _e11: Rotor = self_831;
    let _e14: IdealPoint = other_711;
    let _e19: Rotor = self_831;
    let _e22: IdealPoint = other_711;
    return Scalar((((_e4.g0_.y * _e7.g0_.x) + (_e11.g0_.z * _e14.g0_.y)) + (_e19.g0_.w * _e22.g0_.z)));
}

fn rotor_ideal_point_inner_product(self_832: Rotor, other_712: IdealPoint) -> IdealPoint {
    var self_833: Rotor;
    var other_713: IdealPoint;

    self_833 = self_832;
    other_713 = other_712;
    let _e4: Rotor = self_833;
    let _e8: IdealPoint = other_713;
    return IdealPoint((vec3<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_ideal_point_geometric_anti_product(self_834: Rotor, other_714: IdealPoint) -> Rotor {
    var self_835: Rotor;
    var other_715: IdealPoint;

    self_835 = self_834;
    other_715 = other_714;
    let _e4: Rotor = self_835;
    let _e8: IdealPoint = other_715;
    let _e11: IdealPoint = other_715;
    let _e14: IdealPoint = other_715;
    let _e17: IdealPoint = other_715;
    let _e29: Rotor = self_835;
    let _e33: IdealPoint = other_715;
    let _e36: IdealPoint = other_715;
    let _e39: IdealPoint = other_715;
    let _e42: IdealPoint = other_715;
    let _e55: Rotor = self_835;
    let _e59: IdealPoint = other_715;
    let _e62: IdealPoint = other_715;
    let _e65: IdealPoint = other_715;
    let _e68: IdealPoint = other_715;
    let _e81: Rotor = self_835;
    let _e85: IdealPoint = other_715;
    let _e88: IdealPoint = other_715;
    let _e91: IdealPoint = other_715;
    let _e94: IdealPoint = other_715;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_ideal_point_left_contraction(self_836: Rotor, other_716: IdealPoint) -> IdealPoint {
    var self_837: Rotor;
    var other_717: IdealPoint;

    self_837 = self_836;
    other_717 = other_716;
    let _e4: Rotor = self_837;
    let _e8: IdealPoint = other_717;
    return IdealPoint((vec3<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_plane_geometric_product(self_838: Rotor, other_718: Plane) -> PointAndPlane {
    var self_839: Rotor;
    var other_719: Plane;

    self_839 = self_838;
    other_719 = other_718;
    let _e4: Rotor = self_839;
    let _e8: Plane = other_719;
    let _e19: Rotor = self_839;
    let _e23: Plane = other_719;
    let _e35: Rotor = self_839;
    let _e38: Plane = other_719;
    let _e50: Rotor = self_839;
    let _e54: Plane = other_719;
    let _e57: Rotor = self_839;
    let _e61: Plane = other_719;
    let _e73: Rotor = self_839;
    let _e77: Plane = other_719;
    let _e89: Rotor = self_839;
    let _e92: Plane = other_719;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), ((((vec4<f32>(_e50.g0_.x) * _e54.g0_) + ((vec4<f32>(_e57.g0_.z) * _e61.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e73.g0_.w) * _e77.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e89.g0_.xxyy * _e92.g0_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))));
}

fn rotor_plane_outer_product(self_840: Rotor, other_720: Plane) -> PointAndPlane {
    var self_841: Rotor;
    var other_721: Plane;

    self_841 = self_840;
    other_721 = other_720;
    let _e4: Rotor = self_841;
    let _e8: Plane = other_721;
    let _e19: Rotor = self_841;
    let _e23: Plane = other_721;
    let _e35: Rotor = self_841;
    let _e38: Plane = other_721;
    let _e50: Rotor = self_841;
    let _e54: Plane = other_721;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), (vec4<f32>(_e50.g0_.x) * _e54.g0_));
}

fn rotor_plane_inner_product(self_842: Rotor, other_722: Plane) -> Plane {
    var self_843: Rotor;
    var other_723: Plane;

    self_843 = self_842;
    other_723 = other_722;
    let _e4: Rotor = self_843;
    let _e8: Plane = other_723;
    let _e11: Rotor = self_843;
    let _e15: Plane = other_723;
    let _e27: Rotor = self_843;
    let _e31: Plane = other_723;
    let _e43: Rotor = self_843;
    let _e46: Plane = other_723;
    return Plane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e43.g0_.xxyy * _e46.g0_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))));
}

fn rotor_plane_geometric_anti_product(self_844: Rotor, other_724: Plane) -> PointAndPlane {
    var self_845: Rotor;
    var other_725: Plane;

    self_845 = self_844;
    other_725 = other_724;
    let _e4: Rotor = self_845;
    let _e8: Plane = other_725;
    let _e11: Rotor = self_845;
    let _e15: Plane = other_725;
    let _e27: Rotor = self_845;
    let _e31: Plane = other_725;
    let _e43: Rotor = self_845;
    let _e46: Plane = other_725;
    let _e58: Rotor = self_845;
    let _e62: Plane = other_725;
    let _e73: Rotor = self_845;
    let _e77: Plane = other_725;
    let _e89: Rotor = self_845;
    let _e92: Plane = other_725;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e43.g0_.xxyy * _e46.g0_.xxwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))), ((((vec4<f32>(_e58.g0_.z) * _e62.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e73.g0_.w) * _e77.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e89.g0_.yyxx * _e92.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn rotor_plane_inner_anti_product(self_846: Rotor, other_726: Plane) -> Point {
    var self_847: Rotor;
    var other_727: Plane;

    self_847 = self_846;
    other_727 = other_726;
    let _e4: Rotor = self_847;
    let _e8: Plane = other_727;
    let _e11: Rotor = self_847;
    let _e15: Plane = other_727;
    let _e27: Rotor = self_847;
    let _e31: Plane = other_727;
    let _e43: Rotor = self_847;
    let _e46: Plane = other_727;
    return Point(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e43.g0_.xxyy * _e46.g0_.xxwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))));
}

fn rotor_plane_left_contraction(self_848: Rotor, other_728: Plane) -> Plane {
    var self_849: Rotor;
    var other_729: Plane;

    self_849 = self_848;
    other_729 = other_728;
    let _e4: Rotor = self_849;
    let _e8: Plane = other_729;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_plane_right_anti_contraction(self_850: Rotor, other_730: Plane) -> Point {
    var self_851: Rotor;
    var other_731: Plane;

    self_851 = self_850;
    other_731 = other_730;
    let _e4: Rotor = self_851;
    let _e8: Plane = other_731;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_line_geometric_product(self_852: Rotor, other_732: Line) -> Motor {
    var self_853: Rotor;
    var other_733: Line;

    self_853 = self_852;
    other_733 = other_732;
    let _e4: Rotor = self_853;
    let _e8: Line = other_733;
    let _e11: Line = other_733;
    let _e14: Line = other_733;
    let _e17: Line = other_733;
    let _e30: Rotor = self_853;
    let _e34: Line = other_733;
    let _e37: Line = other_733;
    let _e40: Line = other_733;
    let _e43: Line = other_733;
    let _e57: Rotor = self_853;
    let _e61: Line = other_733;
    let _e64: Line = other_733;
    let _e67: Line = other_733;
    let _e70: Line = other_733;
    let _e84: Rotor = self_853;
    let _e88: Line = other_733;
    let _e91: Line = other_733;
    let _e94: Line = other_733;
    let _e97: Line = other_733;
    let _e109: Rotor = self_853;
    let _e113: Line = other_733;
    let _e116: Line = other_733;
    let _e119: Line = other_733;
    let _e122: Line = other_733;
    let _e134: Rotor = self_853;
    let _e138: Line = other_733;
    let _e141: Line = other_733;
    let _e144: Line = other_733;
    let _e147: Line = other_733;
    let _e160: Rotor = self_853;
    let _e164: Line = other_733;
    let _e167: Line = other_733;
    let _e170: Line = other_733;
    let _e173: Line = other_733;
    let _e186: Rotor = self_853;
    let _e190: Line = other_733;
    let _e193: Line = other_733;
    let _e196: Line = other_733;
    let _e199: Line = other_733;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.z, _e40.g1_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g1_.y, _e67.g1_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g0_.y, _e141.g0_.z, _e144.g0_.y, _e147.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e160.g0_.w) * vec4<f32>(_e164.g0_.z, _e167.g0_.y, _e170.g0_.x, _e173.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e186.g0_.x) * vec4<f32>(_e190.g0_.x, _e193.g0_.x, _e196.g0_.y, _e199.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn rotor_line_regressive_product(self_854: Rotor, other_734: Line) -> Scalar {
    var self_855: Rotor;
    var other_735: Line;

    self_855 = self_854;
    other_735 = other_734;
    let _e4: Rotor = self_855;
    let _e7: Line = other_735;
    let _e11: Rotor = self_855;
    let _e14: Line = other_735;
    let _e19: Rotor = self_855;
    let _e22: Line = other_735;
    return Scalar((((_e4.g0_.y * _e7.g0_.x) + (_e11.g0_.z * _e14.g0_.y)) + (_e19.g0_.w * _e22.g0_.z)));
}

fn rotor_line_geometric_anti_product(self_856: Rotor, other_736: Line) -> Motor {
    var self_857: Rotor;
    var other_737: Line;

    self_857 = self_856;
    other_737 = other_736;
    let _e4: Rotor = self_857;
    let _e8: Line = other_737;
    let _e11: Line = other_737;
    let _e14: Line = other_737;
    let _e17: Line = other_737;
    let _e29: Rotor = self_857;
    let _e33: Line = other_737;
    let _e36: Line = other_737;
    let _e39: Line = other_737;
    let _e42: Line = other_737;
    let _e55: Rotor = self_857;
    let _e59: Line = other_737;
    let _e62: Line = other_737;
    let _e65: Line = other_737;
    let _e68: Line = other_737;
    let _e81: Rotor = self_857;
    let _e85: Line = other_737;
    let _e88: Line = other_737;
    let _e91: Line = other_737;
    let _e94: Line = other_737;
    let _e109: Rotor = self_857;
    let _e113: Line = other_737;
    let _e116: Line = other_737;
    let _e119: Line = other_737;
    let _e122: Line = other_737;
    let _e135: Rotor = self_857;
    let _e139: Line = other_737;
    let _e142: Line = other_737;
    let _e145: Line = other_737;
    let _e148: Line = other_737;
    let _e162: Rotor = self_857;
    let _e166: Line = other_737;
    let _e169: Line = other_737;
    let _e172: Line = other_737;
    let _e175: Line = other_737;
    let _e189: Rotor = self_857;
    let _e193: Line = other_737;
    let _e196: Line = other_737;
    let _e199: Line = other_737;
    let _e202: Line = other_737;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.x, _e116.g1_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g1_.z, _e145.g1_.y, _e148.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g1_.z, _e169.g1_.y, _e172.g1_.x, _e175.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g1_.x, _e196.g1_.x, _e199.g1_.y, _e202.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_line_right_contraction(self_858: Rotor, other_738: Line) -> Scalar {
    var self_859: Rotor;
    var other_739: Line;

    self_859 = self_858;
    other_739 = other_738;
    let _e5: Rotor = self_859;
    let _e8: Line = other_739;
    let _e13: Rotor = self_859;
    let _e16: Line = other_739;
    let _e21: Rotor = self_859;
    let _e24: Line = other_739;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)));
}

fn rotor_line_left_anti_contraction(self_860: Rotor, other_740: Line) -> AntiScalar {
    var self_861: Rotor;
    var other_741: Line;

    self_861 = self_860;
    other_741 = other_740;
    let _e5: Rotor = self_861;
    let _e8: Line = other_741;
    let _e13: Rotor = self_861;
    let _e16: Line = other_741;
    let _e21: Rotor = self_861;
    let _e24: Line = other_741;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)));
}

fn rotor_line_scalar_product(self_862: Rotor, other_742: Line) -> Scalar {
    var self_863: Rotor;
    var other_743: Line;

    self_863 = self_862;
    other_743 = other_742;
    let _e5: Rotor = self_863;
    let _e8: Line = other_743;
    let _e13: Rotor = self_863;
    let _e16: Line = other_743;
    let _e21: Rotor = self_863;
    let _e24: Line = other_743;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)));
}

fn rotor_line_anti_scalar_product(self_864: Rotor, other_744: Line) -> AntiScalar {
    var self_865: Rotor;
    var other_745: Line;

    self_865 = self_864;
    other_745 = other_744;
    let _e5: Rotor = self_865;
    let _e8: Line = other_745;
    let _e13: Rotor = self_865;
    let _e16: Line = other_745;
    let _e21: Rotor = self_865;
    let _e24: Line = other_745;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)));
}

fn rotor_translator_geometric_product(self_866: Rotor, other_746: Translator) -> Motor {
    var self_867: Rotor;
    var other_747: Translator;

    self_867 = self_866;
    other_747 = other_746;
    let _e4: Rotor = self_867;
    let _e6: Translator = other_747;
    let _e11: Rotor = self_867;
    let _e15: Translator = other_747;
    let _e26: Rotor = self_867;
    let _e30: Translator = other_747;
    let _e42: Rotor = self_867;
    let _e46: Translator = other_747;
    let _e58: Rotor = self_867;
    let _e62: Translator = other_747;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (((((vec4<f32>(_e11.g0_.y) * _e15.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e42.g0_.w) * _e46.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e58.g0_.x) * _e62.g0_) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn rotor_translator_regressive_product(self_868: Rotor, other_748: Translator) -> Scalar {
    var self_869: Rotor;
    var other_749: Translator;

    self_869 = self_868;
    other_749 = other_748;
    let _e4: Rotor = self_869;
    let _e7: Translator = other_749;
    let _e11: Rotor = self_869;
    let _e14: Translator = other_749;
    let _e19: Rotor = self_869;
    let _e22: Translator = other_749;
    return Scalar((((_e4.g0_.y * _e7.g0_.y) + (_e11.g0_.z * _e14.g0_.z)) + (_e19.g0_.w * _e22.g0_.w)));
}

fn rotor_translator_outer_product(self_870: Rotor, other_750: Translator) -> Motor {
    var self_871: Rotor;
    var other_751: Translator;

    self_871 = self_870;
    other_751 = other_750;
    let _e4: Rotor = self_871;
    let _e6: Translator = other_751;
    let _e11: Rotor = self_871;
    let _e15: Translator = other_751;
    let _e26: Rotor = self_871;
    let _e30: Translator = other_751;
    let _e42: Rotor = self_871;
    let _e45: Translator = other_751;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (_e42.g0_.yxxx * _e45.g0_.yyzw)));
}

fn rotor_translator_geometric_anti_product(self_872: Rotor, other_752: Translator) -> Motor {
    var self_873: Rotor;
    var other_753: Translator;

    self_873 = self_872;
    other_753 = other_752;
    let _e4: Rotor = self_873;
    let _e8: Translator = other_753;
    let _e19: Rotor = self_873;
    let _e23: Translator = other_753;
    let _e35: Rotor = self_873;
    let _e39: Translator = other_753;
    let _e51: Rotor = self_873;
    let _e55: Translator = other_753;
    let _e68: Rotor = self_873;
    let _e70: Translator = other_753;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g0_.x) * _e55.g0_) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((_e68.g0_ * vec4<f32>(_e70.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn rotor_translator_left_contraction(self_874: Rotor, other_754: Translator) -> Translator {
    var self_875: Rotor;
    var other_755: Translator;

    self_875 = self_874;
    other_755 = other_754;
    let _e4: Rotor = self_875;
    let _e8: Translator = other_755;
    return Translator((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn rotor_translator_right_contraction(self_876: Rotor, other_756: Translator) -> Rotor {
    var self_877: Rotor;
    var other_757: Translator;

    self_877 = self_876;
    other_757 = other_756;
    let _e4: Rotor = self_877;
    let _e6: Translator = other_757;
    return Rotor((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn rotor_translator_scalar_product(self_878: Rotor, other_758: Translator) -> Scalar {
    var self_879: Rotor;
    var other_759: Translator;

    self_879 = self_878;
    other_759 = other_758;
    let _e4: Rotor = self_879;
    let _e7: Translator = other_759;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn rotor_translator_anti_scalar_product(self_880: Rotor, other_760: Translator) -> AntiScalar {
    var self_881: Rotor;
    var other_761: Translator;

    self_881 = self_880;
    other_761 = other_760;
    let _e4: Rotor = self_881;
    let _e7: Translator = other_761;
    return AntiScalar((_e4.g0_.x * _e7.g0_.x));
}

fn rotor_motor_add(self_882: Rotor, other_762: Motor) -> Motor {
    var self_883: Rotor;
    var other_763: Motor;

    self_883 = self_882;
    other_763 = other_762;
    let _e4: Rotor = self_883;
    let _e6: Motor = other_763;
    let _e9: Motor = other_763;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn rotor_motor_sub(self_884: Rotor, other_764: Motor) -> Motor {
    var self_885: Rotor;
    var other_765: Motor;

    self_885 = self_884;
    other_765 = other_764;
    let _e4: Rotor = self_885;
    let _e6: Motor = other_765;
    let _e11: Motor = other_765;
    return Motor((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_));
}

fn rotor_motor_geometric_product(self_886: Rotor, other_766: Motor) -> Motor {
    var self_887: Rotor;
    var other_767: Motor;

    self_887 = self_886;
    other_767 = other_766;
    let _e4: Rotor = self_887;
    let _e8: Motor = other_767;
    let _e11: Rotor = self_887;
    let _e15: Motor = other_767;
    let _e28: Rotor = self_887;
    let _e32: Motor = other_767;
    let _e45: Rotor = self_887;
    let _e49: Motor = other_767;
    let _e62: Rotor = self_887;
    let _e66: Motor = other_767;
    let _e69: Rotor = self_887;
    let _e73: Motor = other_767;
    let _e86: Rotor = self_887;
    let _e90: Motor = other_767;
    let _e103: Rotor = self_887;
    let _e107: Motor = other_767;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e62.g0_.x) * _e66.g1_) + ((vec4<f32>(_e69.g0_.y) * _e73.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e86.g0_.z) * _e90.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e103.g0_.w) * _e107.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_motor_regressive_product(self_888: Rotor, other_768: Motor) -> Rotor {
    var self_889: Rotor;
    var other_769: Motor;

    self_889 = self_888;
    other_769 = other_768;
    let _e4: Rotor = self_889;
    let _e8: Motor = other_769;
    let _e18: Rotor = self_889;
    let _e22: Motor = other_769;
    let _e33: Rotor = self_889;
    let _e37: Motor = other_769;
    let _e48: Rotor = self_889;
    let _e52: Motor = other_769;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g1_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e48.g0_.x) * vec4<f32>(_e52.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_motor_outer_product(self_890: Rotor, other_770: Motor) -> Motor {
    var self_891: Rotor;
    var other_771: Motor;

    self_891 = self_890;
    other_771 = other_770;
    let _e4: Rotor = self_891;
    let _e8: Motor = other_771;
    let _e11: Rotor = self_891;
    let _e13: Motor = other_771;
    let _e25: Rotor = self_891;
    let _e29: Motor = other_771;
    let _e32: Rotor = self_891;
    let _e36: Motor = other_771;
    let _e48: Rotor = self_891;
    let _e52: Motor = other_771;
    let _e64: Rotor = self_891;
    let _e67: Motor = other_771;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((vec4<f32>(_e25.g0_.x) * _e29.g1_) + ((vec4<f32>(_e32.g0_.z) * vec4<f32>(_e36.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e48.g0_.w) * vec4<f32>(_e52.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e64.g0_.yxxx * _e67.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_motor_inner_product(self_892: Rotor, other_772: Motor) -> Motor {
    var self_893: Rotor;
    var other_773: Motor;

    self_893 = self_892;
    other_773 = other_772;
    let _e4: Rotor = self_893;
    let _e8: Motor = other_773;
    let _e11: Rotor = self_893;
    let _e15: Motor = other_773;
    let _e27: Rotor = self_893;
    let _e31: Motor = other_773;
    let _e43: Rotor = self_893;
    let _e46: Motor = other_773;
    let _e58: Rotor = self_893;
    let _e62: Motor = other_773;
    let _e65: Rotor = self_893;
    let _e67: Motor = other_773;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), ((vec4<f32>(_e58.g0_.x) * _e62.g1_) + ((_e65.g0_ * vec4<f32>(_e67.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_motor_geometric_anti_product(self_894: Rotor, other_774: Motor) -> Motor {
    var self_895: Rotor;
    var other_775: Motor;

    self_895 = self_894;
    other_775 = other_774;
    let _e4: Rotor = self_895;
    let _e8: Motor = other_775;
    let _e20: Rotor = self_895;
    let _e24: Motor = other_775;
    let _e36: Rotor = self_895;
    let _e40: Motor = other_775;
    let _e52: Rotor = self_895;
    let _e56: Motor = other_775;
    let _e68: Rotor = self_895;
    let _e72: Motor = other_775;
    let _e84: Rotor = self_895;
    let _e88: Motor = other_775;
    let _e102: Rotor = self_895;
    let _e106: Motor = other_775;
    let _e120: Rotor = self_895;
    let _e124: Motor = other_775;
    return Motor((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e68.g0_.x) * _e72.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e84.g0_.y) * _e88.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e102.g0_.z) * _e106.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e120.g0_.w) * _e124.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn rotor_motor_inner_anti_product(self_896: Rotor, other_776: Motor) -> Motor {
    var self_897: Rotor;
    var other_777: Motor;

    self_897 = self_896;
    other_777 = other_776;
    let _e4: Rotor = self_897;
    let _e8: Motor = other_777;
    let _e20: Rotor = self_897;
    let _e22: Motor = other_777;
    let _e34: Rotor = self_897;
    let _e38: Motor = other_777;
    let _e50: Rotor = self_897;
    let _e54: Motor = other_777;
    let _e67: Rotor = self_897;
    let _e71: Motor = other_777;
    let _e84: Rotor = self_897;
    let _e87: Motor = other_777;
    return Motor((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e34.g0_.x) * _e38.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e50.g0_.z) * _e54.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.w) * _e71.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e84.g0_.yyxx * _e87.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn rotor_motor_left_contraction(self_898: Rotor, other_778: Motor) -> Motor {
    var self_899: Rotor;
    var other_779: Motor;

    self_899 = self_898;
    other_779 = other_778;
    let _e4: Rotor = self_899;
    let _e8: Motor = other_779;
    let _e11: Rotor = self_899;
    let _e15: Motor = other_779;
    let _e28: Rotor = self_899;
    let _e32: Motor = other_779;
    let _e45: Rotor = self_899;
    let _e48: Motor = other_779;
    let _e60: Rotor = self_899;
    let _e64: Motor = other_779;
    let _e67: Rotor = self_899;
    let _e69: Motor = other_779;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g0_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), ((vec4<f32>(_e60.g0_.x) * _e64.g1_) + ((_e67.g0_ * vec4<f32>(_e69.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn rotor_motor_right_contraction(self_900: Rotor, other_780: Motor) -> Rotor {
    var self_901: Rotor;
    var other_781: Motor;

    self_901 = self_900;
    other_781 = other_780;
    let _e4: Rotor = self_901;
    let _e8: Motor = other_781;
    let _e19: Rotor = self_901;
    let _e23: Motor = other_781;
    let _e35: Rotor = self_901;
    let _e39: Motor = other_781;
    let _e51: Rotor = self_901;
    let _e55: Motor = other_781;
    return Rotor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn rotor_motor_right_anti_contraction(self_902: Rotor, other_782: Motor) -> Motor {
    var self_903: Rotor;
    var other_783: Motor;

    self_903 = self_902;
    other_783 = other_782;
    let _e4: Rotor = self_903;
    let _e8: Motor = other_783;
    let _e20: Rotor = self_903;
    let _e22: Motor = other_783;
    let _e34: Rotor = self_903;
    let _e38: Motor = other_783;
    let _e50: Rotor = self_903;
    let _e54: Motor = other_783;
    let _e67: Rotor = self_903;
    let _e71: Motor = other_783;
    let _e84: Rotor = self_903;
    let _e87: Motor = other_783;
    return Motor((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e34.g0_.x) * _e38.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e50.g0_.z) * vec4<f32>(_e54.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.w) * vec4<f32>(_e71.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e84.g0_.yxxx * _e87.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn rotor_motor_scalar_product(self_904: Rotor, other_784: Motor) -> Scalar {
    var self_905: Rotor;
    var other_785: Motor;

    self_905 = self_904;
    other_785 = other_784;
    let _e4: Rotor = self_905;
    let _e7: Motor = other_785;
    let _e11: Rotor = self_905;
    let _e14: Motor = other_785;
    let _e19: Rotor = self_905;
    let _e22: Motor = other_785;
    let _e27: Rotor = self_905;
    let _e30: Motor = other_785;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_motor_anti_scalar_product(self_906: Rotor, other_786: Motor) -> AntiScalar {
    var self_907: Rotor;
    var other_787: Motor;

    self_907 = self_906;
    other_787 = other_786;
    let _e4: Rotor = self_907;
    let _e7: Motor = other_787;
    let _e11: Rotor = self_907;
    let _e14: Motor = other_787;
    let _e19: Rotor = self_907;
    let _e22: Motor = other_787;
    let _e27: Rotor = self_907;
    let _e30: Motor = other_787;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn rotor_point_and_plane_geometric_product(self_908: Rotor, other_788: PointAndPlane) -> PointAndPlane {
    var self_909: Rotor;
    var other_789: PointAndPlane;

    self_909 = self_908;
    other_789 = other_788;
    let _e4: Rotor = self_909;
    let _e8: PointAndPlane = other_789;
    let _e11: Rotor = self_909;
    let _e15: PointAndPlane = other_789;
    let _e18: PointAndPlane = other_789;
    let _e21: PointAndPlane = other_789;
    let _e24: PointAndPlane = other_789;
    let _e38: Rotor = self_909;
    let _e42: PointAndPlane = other_789;
    let _e45: PointAndPlane = other_789;
    let _e48: PointAndPlane = other_789;
    let _e51: PointAndPlane = other_789;
    let _e65: Rotor = self_909;
    let _e69: PointAndPlane = other_789;
    let _e72: PointAndPlane = other_789;
    let _e75: PointAndPlane = other_789;
    let _e78: PointAndPlane = other_789;
    let _e92: Rotor = self_909;
    let _e96: PointAndPlane = other_789;
    let _e99: Rotor = self_909;
    let _e103: PointAndPlane = other_789;
    let _e106: PointAndPlane = other_789;
    let _e109: PointAndPlane = other_789;
    let _e112: PointAndPlane = other_789;
    let _e126: Rotor = self_909;
    let _e130: PointAndPlane = other_789;
    let _e133: PointAndPlane = other_789;
    let _e136: PointAndPlane = other_789;
    let _e139: PointAndPlane = other_789;
    let _e153: Rotor = self_909;
    let _e157: PointAndPlane = other_789;
    let _e160: PointAndPlane = other_789;
    let _e163: PointAndPlane = other_789;
    let _e166: PointAndPlane = other_789;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.x, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g1_.z, _e45.g0_.w, _e48.g1_.x, _e51.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g1_.w, _e72.g0_.z, _e75.g0_.y, _e78.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e92.g0_.x) * _e96.g1_) + ((vec4<f32>(_e99.g0_.y) * vec4<f32>(_e103.g0_.y, _e106.g0_.x, _e109.g1_.w, _e112.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e126.g0_.z) * vec4<f32>(_e130.g0_.z, _e133.g1_.w, _e136.g0_.x, _e139.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e153.g0_.w) * vec4<f32>(_e157.g0_.w, _e160.g1_.z, _e163.g1_.y, _e166.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_point_and_plane_outer_product(self_910: Rotor, other_790: PointAndPlane) -> PointAndPlane {
    var self_911: Rotor;
    var other_791: PointAndPlane;

    self_911 = self_910;
    other_791 = other_790;
    let _e4: Rotor = self_911;
    let _e8: PointAndPlane = other_791;
    let _e11: Rotor = self_911;
    let _e15: PointAndPlane = other_791;
    let _e27: Rotor = self_911;
    let _e31: PointAndPlane = other_791;
    let _e43: Rotor = self_911;
    let _e46: PointAndPlane = other_791;
    let _e58: Rotor = self_911;
    let _e62: PointAndPlane = other_791;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e43.g0_.yyxx * _e46.g1_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), (vec4<f32>(_e58.g0_.x) * _e62.g1_));
}

fn rotor_point_and_plane_inner_product(self_912: Rotor, other_792: PointAndPlane) -> PointAndPlane {
    var self_913: Rotor;
    var other_793: PointAndPlane;

    self_913 = self_912;
    other_793 = other_792;
    let _e4: Rotor = self_913;
    let _e8: PointAndPlane = other_793;
    let _e11: Rotor = self_913;
    let _e15: PointAndPlane = other_793;
    let _e18: Rotor = self_913;
    let _e22: PointAndPlane = other_793;
    let _e25: PointAndPlane = other_793;
    let _e28: PointAndPlane = other_793;
    let _e31: PointAndPlane = other_793;
    let _e45: Rotor = self_913;
    let _e49: PointAndPlane = other_793;
    let _e52: PointAndPlane = other_793;
    let _e55: PointAndPlane = other_793;
    let _e58: PointAndPlane = other_793;
    let _e72: Rotor = self_913;
    let _e76: PointAndPlane = other_793;
    let _e79: PointAndPlane = other_793;
    let _e82: PointAndPlane = other_793;
    let _e85: PointAndPlane = other_793;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.y) * vec4<f32>(_e22.g0_.y, _e25.g0_.x, _e28.g1_.w, _e31.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e45.g0_.z) * vec4<f32>(_e49.g0_.z, _e52.g1_.w, _e55.g0_.x, _e58.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e72.g0_.w) * vec4<f32>(_e76.g0_.w, _e79.g1_.z, _e82.g1_.y, _e85.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn rotor_point_and_plane_geometric_anti_product(self_914: Rotor, other_794: PointAndPlane) -> PointAndPlane {
    var self_915: Rotor;
    var other_795: PointAndPlane;

    self_915 = self_914;
    other_795 = other_794;
    let _e4: Rotor = self_915;
    let _e8: PointAndPlane = other_795;
    let _e11: Rotor = self_915;
    let _e15: PointAndPlane = other_795;
    let _e18: PointAndPlane = other_795;
    let _e21: PointAndPlane = other_795;
    let _e24: PointAndPlane = other_795;
    let _e38: Rotor = self_915;
    let _e42: PointAndPlane = other_795;
    let _e45: PointAndPlane = other_795;
    let _e48: PointAndPlane = other_795;
    let _e51: PointAndPlane = other_795;
    let _e65: Rotor = self_915;
    let _e69: PointAndPlane = other_795;
    let _e72: PointAndPlane = other_795;
    let _e75: PointAndPlane = other_795;
    let _e78: PointAndPlane = other_795;
    let _e92: Rotor = self_915;
    let _e96: PointAndPlane = other_795;
    let _e99: Rotor = self_915;
    let _e103: PointAndPlane = other_795;
    let _e106: PointAndPlane = other_795;
    let _e109: PointAndPlane = other_795;
    let _e112: PointAndPlane = other_795;
    let _e126: Rotor = self_915;
    let _e130: PointAndPlane = other_795;
    let _e133: PointAndPlane = other_795;
    let _e136: PointAndPlane = other_795;
    let _e139: PointAndPlane = other_795;
    let _e153: Rotor = self_915;
    let _e157: PointAndPlane = other_795;
    let _e160: PointAndPlane = other_795;
    let _e163: PointAndPlane = other_795;
    let _e166: PointAndPlane = other_795;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.x, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g0_.z, _e45.g1_.w, _e48.g0_.x, _e51.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w, _e72.g1_.z, _e75.g1_.y, _e78.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((vec4<f32>(_e92.g0_.x) * _e96.g0_) + ((vec4<f32>(_e99.g0_.y) * vec4<f32>(_e103.g1_.y, _e106.g1_.x, _e109.g0_.w, _e112.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e126.g0_.z) * vec4<f32>(_e130.g1_.z, _e133.g0_.w, _e136.g1_.x, _e139.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e153.g0_.w) * vec4<f32>(_e157.g1_.w, _e160.g0_.z, _e163.g0_.y, _e166.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn rotor_point_and_plane_inner_anti_product(self_916: Rotor, other_796: PointAndPlane) -> PointAndPlane {
    var self_917: Rotor;
    var other_797: PointAndPlane;

    self_917 = self_916;
    other_797 = other_796;
    let _e4: Rotor = self_917;
    let _e8: PointAndPlane = other_797;
    let _e11: Rotor = self_917;
    let _e15: PointAndPlane = other_797;
    let _e18: PointAndPlane = other_797;
    let _e21: PointAndPlane = other_797;
    let _e24: PointAndPlane = other_797;
    let _e38: Rotor = self_917;
    let _e42: PointAndPlane = other_797;
    let _e45: PointAndPlane = other_797;
    let _e48: PointAndPlane = other_797;
    let _e51: PointAndPlane = other_797;
    let _e65: Rotor = self_917;
    let _e69: PointAndPlane = other_797;
    let _e72: PointAndPlane = other_797;
    let _e75: PointAndPlane = other_797;
    let _e78: PointAndPlane = other_797;
    let _e92: Rotor = self_917;
    let _e96: PointAndPlane = other_797;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.x, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g0_.z, _e45.g1_.w, _e48.g0_.x, _e51.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w, _e72.g1_.z, _e75.g1_.y, _e78.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e92.g0_.x) * _e96.g0_));
}

fn rotor_point_and_plane_left_contraction(self_918: Rotor, other_798: PointAndPlane) -> PointAndPlane {
    var self_919: Rotor;
    var other_799: PointAndPlane;

    self_919 = self_918;
    other_799 = other_798;
    let _e4: Rotor = self_919;
    let _e8: PointAndPlane = other_799;
    let _e11: Rotor = self_919;
    let _e15: PointAndPlane = other_799;
    let _e18: Rotor = self_919;
    let _e22: PointAndPlane = other_799;
    let _e34: Rotor = self_919;
    let _e38: PointAndPlane = other_799;
    let _e50: Rotor = self_919;
    let _e53: PointAndPlane = other_799;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e34.g0_.w) * _e38.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e50.g0_.yyxx * _e53.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn rotor_point_and_plane_right_anti_contraction(self_920: Rotor, other_800: PointAndPlane) -> PointAndPlane {
    var self_921: Rotor;
    var other_801: PointAndPlane;

    self_921 = self_920;
    other_801 = other_800;
    let _e4: Rotor = self_921;
    let _e8: PointAndPlane = other_801;
    let _e11: Rotor = self_921;
    let _e15: PointAndPlane = other_801;
    let _e27: Rotor = self_921;
    let _e31: PointAndPlane = other_801;
    let _e43: Rotor = self_921;
    let _e46: PointAndPlane = other_801;
    let _e58: Rotor = self_921;
    let _e62: PointAndPlane = other_801;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))), (vec4<f32>(_e58.g0_.x) * _e62.g0_));
}

fn rotor_squared_magnitude(self_922: Rotor) -> Scalar {
    var self_923: Rotor;

    self_923 = self_922;
    let _e2: Rotor = self_923;
    let _e3: Rotor = self_923;
    let _e4: Rotor = rotor_reversal(_e3);
    let _e5: Scalar = rotor_rotor_scalar_product(_e2, _e4);
    return _e5;
}

fn rotor_magnitude(self_924: Rotor) -> Scalar {
    var self_925: Rotor;

    self_925 = self_924;
    let _e2: Rotor = self_925;
    let _e3: Scalar = rotor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn rotor_bulk_norm(self_926: Rotor) -> Scalar {
    var self_927: Rotor;

    self_927 = self_926;
    let _e2: Rotor = self_927;
    let _e3: Scalar = rotor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn rotor_squared_anti_magnitude(self_928: Rotor) -> AntiScalar {
    var self_929: Rotor;

    self_929 = self_928;
    let _e2: Rotor = self_929;
    let _e3: Rotor = self_929;
    let _e4: Rotor = rotor_anti_reversal(_e3);
    let _e5: AntiScalar = rotor_rotor_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn rotor_weight_norm(self_930: Rotor) -> AntiScalar {
    var self_931: Rotor;

    self_931 = self_930;
    let _e2: Rotor = self_931;
    let _e3: AntiScalar = rotor_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn rotor_scale(self_932: Rotor, other_802: f32) -> Rotor {
    var self_933: Rotor;
    var other_803: f32;

    self_933 = self_932;
    other_803 = other_802;
    let _e4: Rotor = self_933;
    let _e5: f32 = other_803;
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn rotor_signum(self_934: Rotor) -> Rotor {
    var self_935: Rotor;

    self_935 = self_934;
    let _e2: Rotor = self_935;
    let _e3: Rotor = self_935;
    let _e4: Scalar = rotor_magnitude(_e3);
    let _e9: Rotor = rotor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn rotor_inverse(self_936: Rotor) -> Rotor {
    var self_937: Rotor;

    self_937 = self_936;
    let _e2: Rotor = self_937;
    let _e3: Rotor = rotor_reversal(_e2);
    let _e4: Rotor = self_937;
    let _e5: Scalar = rotor_squared_magnitude(_e4);
    let _e10: Rotor = rotor_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn rotor_unitize(self_938: Rotor) -> Rotor {
    var self_939: Rotor;

    self_939 = self_938;
    let _e2: Rotor = self_939;
    let _e3: Rotor = self_939;
    let _e4: AntiScalar = rotor_weight_norm(_e3);
    let _e9: Rotor = rotor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_zero() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_one() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_grade(self_940: Point) -> i32 {
    return 3;
}

fn point_anti_grade(self_941: Point) -> i32 {
    return 1;
}

fn point_neg(self_942: Point) -> Point {
    var self_943: Point;

    self_943 = self_942;
    let _e2: Point = self_943;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_automorphism(self_944: Point) -> Point {
    var self_945: Point;

    self_945 = self_944;
    let _e2: Point = self_945;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_reversal(self_946: Point) -> Point {
    var self_947: Point;

    self_947 = self_946;
    let _e2: Point = self_947;
    return Point((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_conjugation(self_948: Point) -> Point {
    var self_949: Point;

    self_949 = self_948;
    let _e2: Point = self_949;
    return Point(_e2.g0_);
}

fn point_dual(self_950: Point) -> Plane {
    var self_951: Point;

    self_951 = self_950;
    let _e2: Point = self_951;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn point_anti_reversal(self_952: Point) -> Point {
    var self_953: Point;

    self_953 = self_952;
    let _e2: Point = self_953;
    return Point(_e2.g0_);
}

fn point_scalar_geometric_product(self_954: Point, other_804: Scalar) -> Point {
    var self_955: Point;
    var other_805: Scalar;

    self_955 = self_954;
    other_805 = other_804;
    let _e4: Point = self_955;
    let _e6: Scalar = other_805;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_outer_product(self_956: Point, other_806: Scalar) -> Point {
    var self_957: Point;
    var other_807: Scalar;

    self_957 = self_956;
    other_807 = other_806;
    let _e4: Point = self_957;
    let _e6: Scalar = other_807;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_inner_product(self_958: Point, other_808: Scalar) -> Point {
    var self_959: Point;
    var other_809: Scalar;

    self_959 = self_958;
    other_809 = other_808;
    let _e4: Point = self_959;
    let _e6: Scalar = other_809;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_geometric_anti_product(self_960: Point, other_810: Scalar) -> Plane {
    var self_961: Point;
    var other_811: Scalar;

    self_961 = self_960;
    other_811 = other_810;
    let _e4: Point = self_961;
    let _e6: Scalar = other_811;
    return Plane(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn point_scalar_inner_anti_product(self_962: Point, other_812: Scalar) -> Plane {
    var self_963: Point;
    var other_813: Scalar;

    self_963 = self_962;
    other_813 = other_812;
    let _e4: Point = self_963;
    let _e6: Scalar = other_813;
    return Plane(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn point_scalar_right_contraction(self_964: Point, other_814: Scalar) -> Point {
    var self_965: Point;
    var other_815: Scalar;

    self_965 = self_964;
    other_815 = other_814;
    let _e4: Point = self_965;
    let _e6: Scalar = other_815;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_scalar_left_anti_contraction(self_966: Point, other_816: Scalar) -> Plane {
    var self_967: Point;
    var other_817: Scalar;

    self_967 = self_966;
    other_817 = other_816;
    let _e4: Point = self_967;
    let _e6: Scalar = other_817;
    return Plane(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn point_anti_scalar_geometric_product(self_968: Point, other_818: AntiScalar) -> Plane {
    var self_969: Point;
    var other_819: AntiScalar;

    self_969 = self_968;
    other_819 = other_818;
    let _e4: Point = self_969;
    let _e6: AntiScalar = other_819;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_regressive_product(self_970: Point, other_820: AntiScalar) -> Point {
    var self_971: Point;
    var other_821: AntiScalar;

    self_971 = self_970;
    other_821 = other_820;
    let _e4: Point = self_971;
    let _e6: AntiScalar = other_821;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_inner_product(self_972: Point, other_822: AntiScalar) -> Plane {
    var self_973: Point;
    var other_823: AntiScalar;

    self_973 = self_972;
    other_823 = other_822;
    let _e4: Point = self_973;
    let _e6: AntiScalar = other_823;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_geometric_anti_product(self_974: Point, other_824: AntiScalar) -> Point {
    var self_975: Point;
    var other_825: AntiScalar;

    self_975 = self_974;
    other_825 = other_824;
    let _e4: Point = self_975;
    let _e6: AntiScalar = other_825;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_inner_anti_product(self_976: Point, other_826: AntiScalar) -> Point {
    var self_977: Point;
    var other_827: AntiScalar;

    self_977 = self_976;
    other_827 = other_826;
    let _e4: Point = self_977;
    let _e6: AntiScalar = other_827;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_left_contraction(self_978: Point, other_828: AntiScalar) -> Plane {
    var self_979: Point;
    var other_829: AntiScalar;

    self_979 = self_978;
    other_829 = other_828;
    let _e4: Point = self_979;
    let _e6: AntiScalar = other_829;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_anti_scalar_right_anti_contraction(self_980: Point, other_830: AntiScalar) -> Point {
    var self_981: Point;
    var other_831: AntiScalar;

    self_981 = self_980;
    other_831 = other_830;
    let _e4: Point = self_981;
    let _e6: AntiScalar = other_831;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn point_multi_vector_add(self_982: Point, other_832: MultiVector) -> MultiVector {
    var self_983: Point;
    var other_833: MultiVector;

    self_983 = self_982;
    other_833 = other_832;
    let _e4: MultiVector = other_833;
    let _e6: Point = self_983;
    let _e14: MultiVector = other_833;
    let _e17: Point = self_983;
    let _e27: MultiVector = other_833;
    let _e30: MultiVector = other_833;
    return MultiVector(_e4.g0_, ((_e6.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e14.g1_), ((vec4<f32>(_e17.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e27.g2_), _e30.g3_);
}

fn point_multi_vector_sub(self_984: Point, other_834: MultiVector) -> MultiVector {
    var self_985: Point;
    var other_835: MultiVector;

    self_985 = self_984;
    other_835 = other_834;
    let _e6: MultiVector = other_835;
    let _e9: Point = self_985;
    let _e17: MultiVector = other_835;
    let _e20: Point = self_985;
    let _e30: MultiVector = other_835;
    let _e35: MultiVector = other_835;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), ((_e9.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e17.g1_), ((vec4<f32>(_e20.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e30.g2_), (vec4<f32>(0.0) - _e35.g3_));
}

fn point_multi_vector_geometric_product(self_986: Point, other_836: MultiVector) -> MultiVector {
    var self_987: Point;
    var other_837: MultiVector;

    self_987 = self_986;
    other_837 = other_836;
    let _e4: Point = self_987;
    let _e8: MultiVector = other_837;
    let _e18: Point = self_987;
    let _e22: MultiVector = other_837;
    let _e36: Point = self_987;
    let _e40: MultiVector = other_837;
    let _e54: Point = self_987;
    let _e58: MultiVector = other_837;
    let _e72: Point = self_987;
    let _e76: MultiVector = other_837;
    let _e79: Point = self_987;
    let _e83: MultiVector = other_837;
    let _e95: Point = self_987;
    let _e99: MultiVector = other_837;
    let _e111: Point = self_987;
    let _e115: MultiVector = other_837;
    let _e127: Point = self_987;
    let _e131: MultiVector = other_837;
    let _e143: Point = self_987;
    let _e147: MultiVector = other_837;
    let _e160: Point = self_987;
    let _e164: MultiVector = other_837;
    let _e177: Point = self_987;
    let _e181: MultiVector = other_837;
    let _e196: Point = self_987;
    let _e200: MultiVector = other_837;
    let _e204: Point = self_987;
    let _e208: MultiVector = other_837;
    let _e221: Point = self_987;
    let _e225: MultiVector = other_837;
    let _e238: Point = self_987;
    let _e242: MultiVector = other_837;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g2_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g0_.y) * _e22.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e54.g0_.w) * _e58.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e72.g0_.x) * _e76.g3_) + ((vec4<f32>(_e79.g0_.y) * _e83.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e95.g0_.z) * _e99.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e111.g0_.w) * _e115.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e127.g0_.x) * _e131.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e143.g0_.y) * _e147.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e160.g0_.z) * _e164.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e177.g0_.w) * _e181.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))), ((((vec4<f32>(0.0) - (vec4<f32>(_e196.g0_.x) * _e200.g1_)) + ((vec4<f32>(_e204.g0_.y) * _e208.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e221.g0_.z) * _e225.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e238.g0_.w) * _e242.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))));
}

fn point_multi_vector_geometric_anti_product(self_988: Point, other_838: MultiVector) -> MultiVector {
    var self_989: Point;
    var other_839: MultiVector;

    self_989 = self_988;
    other_839 = other_838;
    let _e4: Point = self_989;
    let _e8: MultiVector = other_839;
    let _e18: Point = self_989;
    let _e22: MultiVector = other_839;
    let _e36: Point = self_989;
    let _e40: MultiVector = other_839;
    let _e54: Point = self_989;
    let _e58: MultiVector = other_839;
    let _e72: Point = self_989;
    let _e76: MultiVector = other_839;
    let _e86: Point = self_989;
    let _e90: MultiVector = other_839;
    let _e103: Point = self_989;
    let _e107: MultiVector = other_839;
    let _e120: Point = self_989;
    let _e124: MultiVector = other_839;
    let _e137: Point = self_989;
    let _e141: MultiVector = other_839;
    let _e144: Point = self_989;
    let _e148: MultiVector = other_839;
    let _e162: Point = self_989;
    let _e166: MultiVector = other_839;
    let _e180: Point = self_989;
    let _e184: MultiVector = other_839;
    let _e198: Point = self_989;
    let _e202: MultiVector = other_839;
    let _e205: Point = self_989;
    let _e209: MultiVector = other_839;
    let _e222: Point = self_989;
    let _e226: MultiVector = other_839;
    let _e239: Point = self_989;
    let _e243: MultiVector = other_839;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g0_.y) * _e22.g2_.yxwz) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e36.g0_.z) * _e40.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e54.g0_.w) * _e58.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), (((((vec4<f32>(_e72.g0_.x) * _e76.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e86.g0_.y) * _e90.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e103.g0_.z) * _e107.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e120.g0_.w) * _e124.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e137.g0_.x) * _e141.g3_) + ((vec4<f32>(_e144.g0_.y) * _e148.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e162.g0_.z) * _e166.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e180.g0_.w) * _e184.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e198.g0_.x) * _e202.g2_) + ((vec4<f32>(_e205.g0_.y) * _e209.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e222.g0_.z) * _e226.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e239.g0_.w) * _e243.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn point_multi_vector_scalar_product(self_990: Point, other_840: MultiVector) -> Scalar {
    var self_991: Point;
    var other_841: MultiVector;

    self_991 = self_990;
    other_841 = other_840;
    let _e5: Point = self_991;
    let _e8: MultiVector = other_841;
    let _e13: Point = self_991;
    let _e16: MultiVector = other_841;
    let _e21: Point = self_991;
    let _e24: MultiVector = other_841;
    let _e29: Point = self_991;
    let _e32: MultiVector = other_841;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g0_.w * _e32.g1_.w)));
}

fn point_multi_vector_anti_scalar_product(self_992: Point, other_842: MultiVector) -> AntiScalar {
    var self_993: Point;
    var other_843: MultiVector;

    self_993 = self_992;
    other_843 = other_842;
    let _e4: Point = self_993;
    let _e7: MultiVector = other_843;
    let _e11: Point = self_993;
    let _e14: MultiVector = other_843;
    let _e19: Point = self_993;
    let _e22: MultiVector = other_843;
    let _e27: Point = self_993;
    let _e30: MultiVector = other_843;
    return AntiScalar(((((_e4.g0_.x * _e7.g2_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn point_rotor_geometric_product(self_994: Point, other_844: Rotor) -> PointAndPlane {
    var self_995: Point;
    var other_845: Rotor;

    self_995 = self_994;
    other_845 = other_844;
    let _e4: Point = self_995;
    let _e8: Rotor = other_845;
    let _e19: Point = self_995;
    let _e23: Rotor = other_845;
    let _e35: Point = self_995;
    let _e38: Rotor = other_845;
    let _e50: Point = self_995;
    let _e54: Rotor = other_845;
    let _e65: Point = self_995;
    let _e69: Rotor = other_845;
    let _e81: Point = self_995;
    let _e84: Rotor = other_845;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e35.g0_.xyyy * _e38.g0_.xxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), ((((vec4<f32>(_e50.g0_.z) * vec4<f32>(_e54.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e81.g0_.yxxx * _e84.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_rotor_outer_product(self_996: Point, other_846: Rotor) -> Point {
    var self_997: Point;
    var other_847: Rotor;

    self_997 = self_996;
    other_847 = other_846;
    let _e4: Point = self_997;
    let _e6: Rotor = other_847;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_rotor_inner_product(self_998: Point, other_848: Rotor) -> PointAndPlane {
    var self_999: Point;
    var other_849: Rotor;

    self_999 = self_998;
    other_849 = other_848;
    let _e4: Point = self_999;
    let _e6: Rotor = other_849;
    let _e11: Point = self_999;
    let _e15: Rotor = other_849;
    let _e26: Point = self_999;
    let _e30: Rotor = other_849;
    let _e42: Point = self_999;
    let _e45: Rotor = other_849;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e42.g0_.yxxx * _e45.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_rotor_geometric_anti_product(self_1000: Point, other_850: Rotor) -> PointAndPlane {
    var self_1001: Point;
    var other_851: Rotor;

    self_1001 = self_1000;
    other_851 = other_850;
    let _e4: Point = self_1001;
    let _e8: Rotor = other_851;
    let _e20: Point = self_1001;
    let _e24: Rotor = other_851;
    let _e37: Point = self_1001;
    let _e40: Rotor = other_851;
    let _e52: Point = self_1001;
    let _e56: Rotor = other_851;
    let _e68: Point = self_1001;
    let _e72: Rotor = other_851;
    let _e85: Point = self_1001;
    let _e88: Rotor = other_851;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((((vec4<f32>(_e52.g0_.z) * _e56.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e68.g0_.w) * _e72.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e85.g0_.xyyy * _e88.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))));
}

fn point_rotor_inner_anti_product(self_1002: Point, other_852: Rotor) -> PointAndPlane {
    var self_1003: Point;
    var other_853: Rotor;

    self_1003 = self_1002;
    other_853 = other_852;
    let _e4: Point = self_1003;
    let _e8: Rotor = other_853;
    let _e20: Point = self_1003;
    let _e24: Rotor = other_853;
    let _e37: Point = self_1003;
    let _e40: Rotor = other_853;
    let _e52: Point = self_1003;
    let _e54: Rotor = other_853;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((_e52.g0_ * vec4<f32>(_e54.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_rotor_right_contraction(self_1004: Point, other_854: Rotor) -> PointAndPlane {
    var self_1005: Point;
    var other_855: Rotor;

    self_1005 = self_1004;
    other_855 = other_854;
    let _e4: Point = self_1005;
    let _e6: Rotor = other_855;
    let _e11: Point = self_1005;
    let _e15: Rotor = other_855;
    let _e26: Point = self_1005;
    let _e30: Rotor = other_855;
    let _e42: Point = self_1005;
    let _e45: Rotor = other_855;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e42.g0_.yxxx * _e45.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_rotor_left_anti_contraction(self_1006: Point, other_856: Rotor) -> PointAndPlane {
    var self_1007: Point;
    var other_857: Rotor;

    self_1007 = self_1006;
    other_857 = other_856;
    let _e4: Point = self_1007;
    let _e8: Rotor = other_857;
    let _e20: Point = self_1007;
    let _e24: Rotor = other_857;
    let _e37: Point = self_1007;
    let _e40: Rotor = other_857;
    let _e52: Point = self_1007;
    let _e54: Rotor = other_857;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((_e52.g0_ * vec4<f32>(_e54.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_point_add(self_1008: Point, other_858: Point) -> Point {
    var self_1009: Point;
    var other_859: Point;

    self_1009 = self_1008;
    other_859 = other_858;
    let _e4: Point = self_1009;
    let _e6: Point = other_859;
    return Point((_e4.g0_ + _e6.g0_));
}

fn point_point_sub(self_1010: Point, other_860: Point) -> Point {
    var self_1011: Point;
    var other_861: Point;

    self_1011 = self_1010;
    other_861 = other_860;
    let _e4: Point = self_1011;
    let _e6: Point = other_861;
    return Point((_e4.g0_ - _e6.g0_));
}

fn point_point_mul(self_1012: Point, other_862: Point) -> Point {
    var self_1013: Point;
    var other_863: Point;

    self_1013 = self_1012;
    other_863 = other_862;
    let _e4: Point = self_1013;
    let _e6: Point = other_863;
    return Point((_e4.g0_ * _e6.g0_));
}

fn point_point_div(self_1014: Point, other_864: Point) -> Point {
    var self_1015: Point;
    var other_865: Point;

    self_1015 = self_1014;
    other_865 = other_864;
    let _e4: Point = self_1015;
    let _e7: Point = self_1015;
    let _e10: Point = self_1015;
    let _e13: Point = self_1015;
    let _e23: Point = other_865;
    let _e26: Point = other_865;
    let _e29: Point = other_865;
    let _e32: Point = other_865;
    return Point((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn point_point_regressive_product(self_1016: Point, other_866: Point) -> Line {
    var self_1017: Point;
    var other_867: Point;

    self_1017 = self_1016;
    other_867 = other_866;
    let _e4: Point = self_1017;
    let _e8: Point = other_867;
    let _e11: Point = other_867;
    let _e14: Point = other_867;
    let _e25: Point = self_1017;
    let _e29: Point = other_867;
    let _e32: Point = other_867;
    let _e35: Point = other_867;
    let _e47: Point = self_1017;
    let _e50: Point = self_1017;
    let _e53: Point = self_1017;
    let _e57: Point = other_867;
    let _e60: Point = other_867;
    let _e63: Point = other_867;
    let _e75: Point = self_1017;
    let _e79: Point = other_867;
    let _e82: Point = other_867;
    let _e85: Point = other_867;
    let _e90: Point = self_1017;
    let _e93: Point = self_1017;
    let _e96: Point = self_1017;
    let _e100: Point = other_867;
    return Line(((((vec3<f32>(_e4.g0_.z) * vec3<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.w) * vec3<f32>(_e29.g0_.z, _e32.g0_.y, _e35.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.y) * vec3<f32>(_e57.g0_.x, _e60.g0_.w, _e63.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e75.g0_.x) * vec3<f32>(_e79.g0_.y, _e82.g0_.z, _e85.g0_.w)) + ((vec3<f32>(_e90.g0_.y, _e93.g0_.z, _e96.g0_.w) * vec3<f32>(_e100.g0_.x)) * vec3<f32>(-(1.0)))));
}

fn point_point_inner_product(self_1018: Point, other_868: Point) -> Scalar {
    var self_1019: Point;
    var other_869: Point;

    self_1019 = self_1018;
    other_869 = other_868;
    let _e5: Point = self_1019;
    let _e8: Point = other_869;
    let _e13: Point = self_1019;
    let _e16: Point = other_869;
    let _e21: Point = self_1019;
    let _e24: Point = other_869;
    let _e29: Point = self_1019;
    let _e32: Point = other_869;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_inner_anti_product(self_1020: Point, other_870: Point) -> AntiScalar {
    var self_1021: Point;
    var other_871: Point;

    self_1021 = self_1020;
    other_871 = other_870;
    let _e4: Point = self_1021;
    let _e7: Point = other_871;
    let _e11: Point = self_1021;
    let _e14: Point = other_871;
    let _e19: Point = self_1021;
    let _e22: Point = other_871;
    let _e27: Point = self_1021;
    let _e30: Point = other_871;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_point_left_contraction(self_1022: Point, other_872: Point) -> Scalar {
    var self_1023: Point;
    var other_873: Point;

    self_1023 = self_1022;
    other_873 = other_872;
    let _e5: Point = self_1023;
    let _e8: Point = other_873;
    let _e13: Point = self_1023;
    let _e16: Point = other_873;
    let _e21: Point = self_1023;
    let _e24: Point = other_873;
    let _e29: Point = self_1023;
    let _e32: Point = other_873;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_right_contraction(self_1024: Point, other_874: Point) -> Scalar {
    var self_1025: Point;
    var other_875: Point;

    self_1025 = self_1024;
    other_875 = other_874;
    let _e5: Point = self_1025;
    let _e8: Point = other_875;
    let _e13: Point = self_1025;
    let _e16: Point = other_875;
    let _e21: Point = self_1025;
    let _e24: Point = other_875;
    let _e29: Point = self_1025;
    let _e32: Point = other_875;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_left_anti_contraction(self_1026: Point, other_876: Point) -> AntiScalar {
    var self_1027: Point;
    var other_877: Point;

    self_1027 = self_1026;
    other_877 = other_876;
    let _e4: Point = self_1027;
    let _e7: Point = other_877;
    let _e11: Point = self_1027;
    let _e14: Point = other_877;
    let _e19: Point = self_1027;
    let _e22: Point = other_877;
    let _e27: Point = self_1027;
    let _e30: Point = other_877;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_point_right_anti_contraction(self_1028: Point, other_878: Point) -> AntiScalar {
    var self_1029: Point;
    var other_879: Point;

    self_1029 = self_1028;
    other_879 = other_878;
    let _e4: Point = self_1029;
    let _e7: Point = other_879;
    let _e11: Point = self_1029;
    let _e14: Point = other_879;
    let _e19: Point = self_1029;
    let _e22: Point = other_879;
    let _e27: Point = self_1029;
    let _e30: Point = other_879;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_point_scalar_product(self_1030: Point, other_880: Point) -> Scalar {
    var self_1031: Point;
    var other_881: Point;

    self_1031 = self_1030;
    other_881 = other_880;
    let _e5: Point = self_1031;
    let _e8: Point = other_881;
    let _e13: Point = self_1031;
    let _e16: Point = other_881;
    let _e21: Point = self_1031;
    let _e24: Point = other_881;
    let _e29: Point = self_1031;
    let _e32: Point = other_881;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_anti_scalar_product(self_1032: Point, other_882: Point) -> AntiScalar {
    var self_1033: Point;
    var other_883: Point;

    self_1033 = self_1032;
    other_883 = other_882;
    let _e4: Point = self_1033;
    let _e7: Point = other_883;
    let _e11: Point = self_1033;
    let _e14: Point = other_883;
    let _e19: Point = self_1033;
    let _e22: Point = other_883;
    let _e27: Point = self_1033;
    let _e30: Point = other_883;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_ideal_point_regressive_product(self_1034: Point, other_884: IdealPoint) -> Plane {
    var self_1035: Point;
    var other_885: IdealPoint;

    self_1035 = self_1034;
    other_885 = other_884;
    let _e4: Point = self_1035;
    let _e8: IdealPoint = other_885;
    let _e20: Point = self_1035;
    let _e24: IdealPoint = other_885;
    let _e37: Point = self_1035;
    let _e40: IdealPoint = other_885;
    let _e43: IdealPoint = other_885;
    let _e46: IdealPoint = other_885;
    let _e49: IdealPoint = other_885;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_plane_add(self_1036: Point, other_886: Plane) -> PointAndPlane {
    var self_1037: Point;
    var other_887: Plane;

    self_1037 = self_1036;
    other_887 = other_886;
    let _e4: Point = self_1037;
    let _e6: Plane = other_887;
    return PointAndPlane(_e4.g0_, _e6.g0_);
}

fn point_plane_sub(self_1038: Point, other_888: Plane) -> PointAndPlane {
    var self_1039: Point;
    var other_889: Plane;

    self_1039 = self_1038;
    other_889 = other_888;
    let _e4: Point = self_1039;
    let _e8: Plane = other_889;
    return PointAndPlane(_e4.g0_, (vec4<f32>(0.0) - _e8.g0_));
}

fn point_plane_regressive_product(self_1040: Point, other_890: Plane) -> Scalar {
    var self_1041: Point;
    var other_891: Plane;

    self_1041 = self_1040;
    other_891 = other_890;
    let _e5: Point = self_1041;
    let _e8: Plane = other_891;
    let _e13: Point = self_1041;
    let _e16: Plane = other_891;
    let _e21: Point = self_1041;
    let _e24: Plane = other_891;
    let _e29: Point = self_1041;
    let _e32: Plane = other_891;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_plane_outer_product(self_1042: Point, other_892: Plane) -> AntiScalar {
    var self_1043: Point;
    var other_893: Plane;

    self_1043 = self_1042;
    other_893 = other_892;
    let _e5: Point = self_1043;
    let _e8: Plane = other_893;
    let _e13: Point = self_1043;
    let _e16: Plane = other_893;
    let _e21: Point = self_1043;
    let _e24: Plane = other_893;
    let _e29: Point = self_1043;
    let _e32: Plane = other_893;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_plane_inner_product(self_1044: Point, other_894: Plane) -> Line {
    var self_1045: Point;
    var other_895: Plane;

    self_1045 = self_1044;
    other_895 = other_894;
    let _e4: Point = self_1045;
    let _e8: Plane = other_895;
    let _e11: Plane = other_895;
    let _e14: Plane = other_895;
    let _e25: Point = self_1045;
    let _e29: Plane = other_895;
    let _e32: Plane = other_895;
    let _e35: Plane = other_895;
    let _e47: Point = self_1045;
    let _e50: Point = self_1045;
    let _e53: Point = self_1045;
    let _e57: Plane = other_895;
    let _e60: Plane = other_895;
    let _e63: Plane = other_895;
    let _e75: Point = self_1045;
    let _e79: Plane = other_895;
    let _e82: Plane = other_895;
    let _e85: Plane = other_895;
    let _e90: Point = self_1045;
    let _e93: Point = self_1045;
    let _e96: Point = self_1045;
    let _e100: Plane = other_895;
    return Line(((((vec3<f32>(_e4.g0_.z) * vec3<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.w) * vec3<f32>(_e29.g0_.z, _e32.g0_.y, _e35.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.y) * vec3<f32>(_e57.g0_.x, _e60.g0_.w, _e63.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e75.g0_.x) * vec3<f32>(_e79.g0_.y, _e82.g0_.z, _e85.g0_.w)) + ((vec3<f32>(_e90.g0_.y, _e93.g0_.z, _e96.g0_.w) * vec3<f32>(_e100.g0_.x)) * vec3<f32>(-(1.0)))));
}

fn point_plane_inner_anti_product(self_1046: Point, other_896: Plane) -> Line {
    var self_1047: Point;
    var other_897: Plane;

    self_1047 = self_1046;
    other_897 = other_896;
    let _e4: Point = self_1047;
    let _e8: Plane = other_897;
    let _e11: Plane = other_897;
    let _e14: Plane = other_897;
    let _e19: Point = self_1047;
    let _e22: Point = self_1047;
    let _e25: Point = self_1047;
    let _e29: Plane = other_897;
    let _e39: Point = self_1047;
    let _e43: Plane = other_897;
    let _e46: Plane = other_897;
    let _e49: Plane = other_897;
    let _e60: Point = self_1047;
    let _e64: Plane = other_897;
    let _e67: Plane = other_897;
    let _e70: Plane = other_897;
    let _e82: Point = self_1047;
    let _e85: Point = self_1047;
    let _e88: Point = self_1047;
    let _e92: Plane = other_897;
    let _e95: Plane = other_897;
    let _e98: Plane = other_897;
    return Line(((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.w)) + ((vec3<f32>(_e19.g0_.y, _e22.g0_.z, _e25.g0_.w) * vec3<f32>(_e29.g0_.x)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.z) * vec3<f32>(_e43.g0_.w, _e46.g0_.w, _e49.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.w) * vec3<f32>(_e64.g0_.z, _e67.g0_.y, _e70.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.y) * vec3<f32>(_e92.g0_.x, _e95.g0_.w, _e98.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_plane_right_contraction(self_1048: Point, other_898: Plane) -> Line {
    var self_1049: Point;
    var other_899: Plane;

    self_1049 = self_1048;
    other_899 = other_898;
    let _e4: Point = self_1049;
    let _e8: Plane = other_899;
    let _e11: Plane = other_899;
    let _e14: Plane = other_899;
    let _e25: Point = self_1049;
    let _e29: Plane = other_899;
    let _e32: Plane = other_899;
    let _e35: Plane = other_899;
    let _e47: Point = self_1049;
    let _e50: Point = self_1049;
    let _e53: Point = self_1049;
    let _e57: Plane = other_899;
    let _e60: Plane = other_899;
    let _e63: Plane = other_899;
    let _e75: Point = self_1049;
    let _e79: Plane = other_899;
    let _e82: Plane = other_899;
    let _e85: Plane = other_899;
    let _e90: Point = self_1049;
    let _e93: Point = self_1049;
    let _e96: Point = self_1049;
    let _e100: Plane = other_899;
    return Line(((((vec3<f32>(_e4.g0_.z) * vec3<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e25.g0_.w) * vec3<f32>(_e29.g0_.z, _e32.g0_.y, _e35.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.y) * vec3<f32>(_e57.g0_.x, _e60.g0_.w, _e63.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))), ((vec3<f32>(_e75.g0_.x) * vec3<f32>(_e79.g0_.y, _e82.g0_.z, _e85.g0_.w)) + ((vec3<f32>(_e90.g0_.y, _e93.g0_.z, _e96.g0_.w) * vec3<f32>(_e100.g0_.x)) * vec3<f32>(-(1.0)))));
}

fn point_plane_left_anti_contraction(self_1050: Point, other_900: Plane) -> Line {
    var self_1051: Point;
    var other_901: Plane;

    self_1051 = self_1050;
    other_901 = other_900;
    let _e4: Point = self_1051;
    let _e8: Plane = other_901;
    let _e11: Plane = other_901;
    let _e14: Plane = other_901;
    let _e19: Point = self_1051;
    let _e22: Point = self_1051;
    let _e25: Point = self_1051;
    let _e29: Plane = other_901;
    let _e39: Point = self_1051;
    let _e43: Plane = other_901;
    let _e46: Plane = other_901;
    let _e49: Plane = other_901;
    let _e60: Point = self_1051;
    let _e64: Plane = other_901;
    let _e67: Plane = other_901;
    let _e70: Plane = other_901;
    let _e82: Point = self_1051;
    let _e85: Point = self_1051;
    let _e88: Point = self_1051;
    let _e92: Plane = other_901;
    let _e95: Plane = other_901;
    let _e98: Plane = other_901;
    return Line(((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.w)) + ((vec3<f32>(_e19.g0_.y, _e22.g0_.z, _e25.g0_.w) * vec3<f32>(_e29.g0_.x)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.z) * vec3<f32>(_e43.g0_.w, _e46.g0_.w, _e49.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.w) * vec3<f32>(_e64.g0_.z, _e67.g0_.y, _e70.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.y) * vec3<f32>(_e92.g0_.x, _e95.g0_.w, _e98.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn point_line_geometric_product(self_1052: Point, other_902: Line) -> PointAndPlane {
    var self_1053: Point;
    var other_903: Line;

    self_1053 = self_1052;
    other_903 = other_902;
    let _e4: Point = self_1053;
    let _e8: Line = other_903;
    let _e11: Line = other_903;
    let _e14: Line = other_903;
    let _e17: Line = other_903;
    let _e30: Point = self_1053;
    let _e34: Line = other_903;
    let _e37: Line = other_903;
    let _e40: Line = other_903;
    let _e43: Line = other_903;
    let _e57: Point = self_1053;
    let _e61: Line = other_903;
    let _e64: Line = other_903;
    let _e67: Line = other_903;
    let _e70: Line = other_903;
    let _e84: Point = self_1053;
    let _e88: Line = other_903;
    let _e91: Line = other_903;
    let _e94: Line = other_903;
    let _e97: Line = other_903;
    let _e109: Point = self_1053;
    let _e113: Line = other_903;
    let _e116: Line = other_903;
    let _e119: Line = other_903;
    let _e122: Line = other_903;
    let _e134: Point = self_1053;
    let _e138: Line = other_903;
    let _e141: Line = other_903;
    let _e144: Line = other_903;
    let _e147: Line = other_903;
    let _e160: Point = self_1053;
    let _e164: Line = other_903;
    let _e167: Line = other_903;
    let _e170: Line = other_903;
    let _e173: Line = other_903;
    let _e186: Point = self_1053;
    let _e190: Line = other_903;
    let _e193: Line = other_903;
    let _e196: Line = other_903;
    let _e199: Line = other_903;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.x, _e116.g1_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g1_.y, _e141.g0_.z, _e144.g1_.y, _e147.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e160.g0_.w) * vec4<f32>(_e164.g1_.z, _e167.g0_.y, _e170.g0_.x, _e173.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e186.g0_.x) * vec4<f32>(_e190.g1_.x, _e193.g1_.x, _e196.g1_.y, _e199.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_line_regressive_product(self_1054: Point, other_904: Line) -> Plane {
    var self_1055: Point;
    var other_905: Line;

    self_1055 = self_1054;
    other_905 = other_904;
    let _e4: Point = self_1055;
    let _e8: Line = other_905;
    let _e11: Line = other_905;
    let _e14: Line = other_905;
    let _e17: Line = other_905;
    let _e30: Point = self_1055;
    let _e34: Line = other_905;
    let _e37: Line = other_905;
    let _e40: Line = other_905;
    let _e43: Line = other_905;
    let _e57: Point = self_1055;
    let _e61: Line = other_905;
    let _e64: Line = other_905;
    let _e67: Line = other_905;
    let _e70: Line = other_905;
    let _e84: Point = self_1055;
    let _e88: Line = other_905;
    let _e91: Line = other_905;
    let _e94: Line = other_905;
    let _e97: Line = other_905;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_line_inner_product(self_1056: Point, other_906: Line) -> Plane {
    var self_1057: Point;
    var other_907: Line;

    self_1057 = self_1056;
    other_907 = other_906;
    let _e4: Point = self_1057;
    let _e8: Line = other_907;
    let _e11: Line = other_907;
    let _e14: Line = other_907;
    let _e17: Line = other_907;
    let _e29: Point = self_1057;
    let _e33: Line = other_907;
    let _e36: Line = other_907;
    let _e39: Line = other_907;
    let _e42: Line = other_907;
    let _e55: Point = self_1057;
    let _e59: Line = other_907;
    let _e62: Line = other_907;
    let _e65: Line = other_907;
    let _e68: Line = other_907;
    let _e81: Point = self_1057;
    let _e85: Line = other_907;
    let _e88: Line = other_907;
    let _e91: Line = other_907;
    let _e94: Line = other_907;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_line_geometric_anti_product(self_1058: Point, other_908: Line) -> PointAndPlane {
    var self_1059: Point;
    var other_909: Line;

    self_1059 = self_1058;
    other_909 = other_908;
    let _e4: Point = self_1059;
    let _e8: Line = other_909;
    let _e11: Line = other_909;
    let _e14: Line = other_909;
    let _e17: Line = other_909;
    let _e30: Point = self_1059;
    let _e34: Line = other_909;
    let _e37: Line = other_909;
    let _e40: Line = other_909;
    let _e43: Line = other_909;
    let _e57: Point = self_1059;
    let _e61: Line = other_909;
    let _e64: Line = other_909;
    let _e67: Line = other_909;
    let _e70: Line = other_909;
    let _e84: Point = self_1059;
    let _e88: Line = other_909;
    let _e91: Line = other_909;
    let _e94: Line = other_909;
    let _e97: Line = other_909;
    let _e109: Point = self_1059;
    let _e113: Line = other_909;
    let _e116: Line = other_909;
    let _e119: Line = other_909;
    let _e122: Line = other_909;
    let _e135: Point = self_1059;
    let _e139: Line = other_909;
    let _e142: Line = other_909;
    let _e145: Line = other_909;
    let _e148: Line = other_909;
    let _e162: Point = self_1059;
    let _e166: Line = other_909;
    let _e169: Line = other_909;
    let _e172: Line = other_909;
    let _e175: Line = other_909;
    let _e189: Point = self_1059;
    let _e193: Line = other_909;
    let _e196: Line = other_909;
    let _e199: Line = other_909;
    let _e202: Line = other_909;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g0_.y, _e142.g1_.z, _e145.g0_.y, _e148.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g0_.z, _e169.g1_.y, _e172.g1_.x, _e175.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_line_inner_anti_product(self_1060: Point, other_910: Line) -> Point {
    var self_1061: Point;
    var other_911: Line;

    self_1061 = self_1060;
    other_911 = other_910;
    let _e4: Point = self_1061;
    let _e8: Line = other_911;
    let _e11: Line = other_911;
    let _e14: Line = other_911;
    let _e17: Line = other_911;
    let _e30: Point = self_1061;
    let _e34: Line = other_911;
    let _e37: Line = other_911;
    let _e40: Line = other_911;
    let _e43: Line = other_911;
    let _e57: Point = self_1061;
    let _e61: Line = other_911;
    let _e64: Line = other_911;
    let _e67: Line = other_911;
    let _e70: Line = other_911;
    let _e84: Point = self_1061;
    let _e88: Line = other_911;
    let _e91: Line = other_911;
    let _e94: Line = other_911;
    let _e97: Line = other_911;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_line_right_contraction(self_1062: Point, other_912: Line) -> Plane {
    var self_1063: Point;
    var other_913: Line;

    self_1063 = self_1062;
    other_913 = other_912;
    let _e4: Point = self_1063;
    let _e8: Line = other_913;
    let _e11: Line = other_913;
    let _e14: Line = other_913;
    let _e17: Line = other_913;
    let _e29: Point = self_1063;
    let _e33: Line = other_913;
    let _e36: Line = other_913;
    let _e39: Line = other_913;
    let _e42: Line = other_913;
    let _e55: Point = self_1063;
    let _e59: Line = other_913;
    let _e62: Line = other_913;
    let _e65: Line = other_913;
    let _e68: Line = other_913;
    let _e81: Point = self_1063;
    let _e85: Line = other_913;
    let _e88: Line = other_913;
    let _e91: Line = other_913;
    let _e94: Line = other_913;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_line_left_anti_contraction(self_1064: Point, other_914: Line) -> Point {
    var self_1065: Point;
    var other_915: Line;

    self_1065 = self_1064;
    other_915 = other_914;
    let _e4: Point = self_1065;
    let _e8: Line = other_915;
    let _e11: Line = other_915;
    let _e14: Line = other_915;
    let _e17: Line = other_915;
    let _e30: Point = self_1065;
    let _e34: Line = other_915;
    let _e37: Line = other_915;
    let _e40: Line = other_915;
    let _e43: Line = other_915;
    let _e57: Point = self_1065;
    let _e61: Line = other_915;
    let _e64: Line = other_915;
    let _e67: Line = other_915;
    let _e70: Line = other_915;
    let _e84: Point = self_1065;
    let _e88: Line = other_915;
    let _e91: Line = other_915;
    let _e94: Line = other_915;
    let _e97: Line = other_915;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_translator_regressive_product(self_1066: Point, other_916: Translator) -> Plane {
    var self_1067: Point;
    var other_917: Translator;

    self_1067 = self_1066;
    other_917 = other_916;
    let _e4: Point = self_1067;
    let _e8: Translator = other_917;
    let _e20: Point = self_1067;
    let _e24: Translator = other_917;
    let _e37: Point = self_1067;
    let _e40: Translator = other_917;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_translator_outer_product(self_1068: Point, other_918: Translator) -> Point {
    var self_1069: Point;
    var other_919: Translator;

    self_1069 = self_1068;
    other_919 = other_918;
    let _e4: Point = self_1069;
    let _e6: Translator = other_919;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_motor_geometric_product(self_1070: Point, other_920: Motor) -> PointAndPlane {
    var self_1071: Point;
    var other_921: Motor;

    self_1071 = self_1070;
    other_921 = other_920;
    let _e4: Point = self_1071;
    let _e8: Motor = other_921;
    let _e11: Motor = other_921;
    let _e14: Motor = other_921;
    let _e17: Motor = other_921;
    let _e22: Point = self_1071;
    let _e26: Motor = other_921;
    let _e29: Motor = other_921;
    let _e32: Motor = other_921;
    let _e35: Motor = other_921;
    let _e49: Point = self_1071;
    let _e53: Motor = other_921;
    let _e56: Motor = other_921;
    let _e59: Motor = other_921;
    let _e62: Motor = other_921;
    let _e76: Point = self_1071;
    let _e80: Motor = other_921;
    let _e83: Motor = other_921;
    let _e86: Motor = other_921;
    let _e89: Motor = other_921;
    let _e103: Point = self_1071;
    let _e107: Motor = other_921;
    let _e110: Motor = other_921;
    let _e113: Motor = other_921;
    let _e116: Motor = other_921;
    let _e130: Point = self_1071;
    let _e134: Motor = other_921;
    let _e137: Motor = other_921;
    let _e140: Motor = other_921;
    let _e143: Motor = other_921;
    let _e156: Point = self_1071;
    let _e160: Motor = other_921;
    let _e163: Motor = other_921;
    let _e166: Motor = other_921;
    let _e169: Motor = other_921;
    let _e182: Point = self_1071;
    let _e186: Motor = other_921;
    let _e189: Motor = other_921;
    let _e192: Motor = other_921;
    let _e195: Motor = other_921;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g1_.y, _e29.g0_.x, _e32.g0_.w, _e35.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g1_.z, _e56.g0_.w, _e59.g0_.x, _e62.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g1_.w, _e83.g0_.z, _e86.g0_.y, _e89.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e103.g0_.x) * vec4<f32>(_e107.g1_.x, _e110.g0_.y, _e113.g0_.z, _e116.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e130.g0_.y) * vec4<f32>(_e134.g0_.y, _e137.g1_.x, _e140.g1_.w, _e143.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e156.g0_.z) * vec4<f32>(_e160.g0_.z, _e163.g1_.w, _e166.g1_.x, _e169.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e182.g0_.w) * vec4<f32>(_e186.g0_.w, _e189.g1_.z, _e192.g1_.y, _e195.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn point_motor_regressive_product(self_1072: Point, other_922: Motor) -> PointAndPlane {
    var self_1073: Point;
    var other_923: Motor;

    self_1073 = self_1072;
    other_923 = other_922;
    let _e4: Point = self_1073;
    let _e6: Motor = other_923;
    let _e11: Point = self_1073;
    let _e15: Motor = other_923;
    let _e18: Motor = other_923;
    let _e21: Motor = other_923;
    let _e24: Motor = other_923;
    let _e37: Point = self_1073;
    let _e41: Motor = other_923;
    let _e44: Motor = other_923;
    let _e47: Motor = other_923;
    let _e50: Motor = other_923;
    let _e64: Point = self_1073;
    let _e68: Motor = other_923;
    let _e71: Motor = other_923;
    let _e74: Motor = other_923;
    let _e77: Motor = other_923;
    let _e91: Point = self_1073;
    let _e95: Motor = other_923;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g1_.x)), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.y, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.z) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.z, _e50.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e64.g0_.w) * vec4<f32>(_e68.g1_.w, _e71.g0_.z, _e74.g0_.y, _e77.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g1_) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_motor_outer_product(self_1074: Point, other_924: Motor) -> Point {
    var self_1075: Point;
    var other_925: Motor;

    self_1075 = self_1074;
    other_925 = other_924;
    let _e4: Point = self_1075;
    let _e6: Motor = other_925;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn point_motor_inner_product(self_1076: Point, other_926: Motor) -> PointAndPlane {
    var self_1077: Point;
    var other_927: Motor;

    self_1077 = self_1076;
    other_927 = other_926;
    let _e4: Point = self_1077;
    let _e6: Motor = other_927;
    let _e11: Point = self_1077;
    let _e15: Motor = other_927;
    let _e18: Motor = other_927;
    let _e21: Motor = other_927;
    let _e24: Motor = other_927;
    let _e38: Point = self_1077;
    let _e42: Motor = other_927;
    let _e45: Motor = other_927;
    let _e48: Motor = other_927;
    let _e51: Motor = other_927;
    let _e64: Point = self_1077;
    let _e68: Motor = other_927;
    let _e71: Motor = other_927;
    let _e74: Motor = other_927;
    let _e77: Motor = other_927;
    let _e90: Point = self_1077;
    let _e94: Motor = other_927;
    let _e97: Motor = other_927;
    let _e100: Motor = other_927;
    let _e103: Motor = other_927;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (((((vec4<f32>(_e11.g0_.x) * vec4<f32>(_e15.g1_.x, _e18.g0_.y, _e21.g0_.z, _e24.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e38.g0_.y) * vec4<f32>(_e42.g0_.y, _e45.g1_.x, _e48.g1_.w, _e51.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e64.g0_.z) * vec4<f32>(_e68.g0_.z, _e71.g1_.w, _e74.g1_.x, _e77.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e90.g0_.w) * vec4<f32>(_e94.g0_.w, _e97.g1_.z, _e100.g1_.y, _e103.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))));
}

fn point_motor_geometric_anti_product(self_1078: Point, other_928: Motor) -> PointAndPlane {
    var self_1079: Point;
    var other_929: Motor;

    self_1079 = self_1078;
    other_929 = other_928;
    let _e4: Point = self_1079;
    let _e8: Motor = other_929;
    let _e11: Motor = other_929;
    let _e14: Motor = other_929;
    let _e17: Motor = other_929;
    let _e22: Point = self_1079;
    let _e26: Motor = other_929;
    let _e29: Motor = other_929;
    let _e32: Motor = other_929;
    let _e35: Motor = other_929;
    let _e49: Point = self_1079;
    let _e53: Motor = other_929;
    let _e56: Motor = other_929;
    let _e59: Motor = other_929;
    let _e62: Motor = other_929;
    let _e76: Point = self_1079;
    let _e80: Motor = other_929;
    let _e83: Motor = other_929;
    let _e86: Motor = other_929;
    let _e89: Motor = other_929;
    let _e103: Point = self_1079;
    let _e107: Motor = other_929;
    let _e110: Motor = other_929;
    let _e113: Motor = other_929;
    let _e116: Motor = other_929;
    let _e128: Point = self_1079;
    let _e132: Motor = other_929;
    let _e135: Motor = other_929;
    let _e138: Motor = other_929;
    let _e141: Motor = other_929;
    let _e156: Point = self_1079;
    let _e160: Motor = other_929;
    let _e163: Motor = other_929;
    let _e166: Motor = other_929;
    let _e169: Motor = other_929;
    let _e184: Point = self_1079;
    let _e188: Motor = other_929;
    let _e191: Motor = other_929;
    let _e194: Motor = other_929;
    let _e197: Motor = other_929;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g0_.y, _e29.g1_.x, _e32.g1_.w, _e35.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g0_.z, _e56.g1_.w, _e59.g1_.x, _e62.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g0_.w, _e83.g1_.z, _e86.g1_.y, _e89.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e103.g0_.x) * vec4<f32>(_e107.g0_.x, _e110.g1_.y, _e113.g1_.z, _e116.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e128.g0_.y) * vec4<f32>(_e132.g1_.y, _e135.g0_.x, _e138.g0_.w, _e141.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e156.g0_.z) * vec4<f32>(_e160.g1_.z, _e163.g0_.w, _e166.g0_.x, _e169.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e184.g0_.w) * vec4<f32>(_e188.g1_.w, _e191.g0_.z, _e194.g0_.y, _e197.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn point_motor_inner_anti_product(self_1080: Point, other_930: Motor) -> PointAndPlane {
    var self_1081: Point;
    var other_931: Motor;

    self_1081 = self_1080;
    other_931 = other_930;
    let _e4: Point = self_1081;
    let _e8: Motor = other_931;
    let _e11: Motor = other_931;
    let _e14: Motor = other_931;
    let _e17: Motor = other_931;
    let _e22: Point = self_1081;
    let _e26: Motor = other_931;
    let _e29: Motor = other_931;
    let _e32: Motor = other_931;
    let _e35: Motor = other_931;
    let _e49: Point = self_1081;
    let _e53: Motor = other_931;
    let _e56: Motor = other_931;
    let _e59: Motor = other_931;
    let _e62: Motor = other_931;
    let _e76: Point = self_1081;
    let _e80: Motor = other_931;
    let _e83: Motor = other_931;
    let _e86: Motor = other_931;
    let _e89: Motor = other_931;
    let _e103: Point = self_1081;
    let _e105: Motor = other_931;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g0_.y, _e29.g1_.x, _e32.g1_.w, _e35.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g0_.z, _e56.g1_.w, _e59.g1_.x, _e62.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g0_.w, _e83.g1_.z, _e86.g1_.y, _e89.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((_e103.g0_ * vec4<f32>(_e105.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_motor_left_contraction(self_1082: Point, other_932: Motor) -> Plane {
    var self_1083: Point;
    var other_933: Motor;

    self_1083 = self_1082;
    other_933 = other_932;
    let _e4: Point = self_1083;
    let _e6: Motor = other_933;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g1_.x)));
}

fn point_motor_right_contraction(self_1084: Point, other_934: Motor) -> PointAndPlane {
    var self_1085: Point;
    var other_935: Motor;

    self_1085 = self_1084;
    other_935 = other_934;
    let _e4: Point = self_1085;
    let _e6: Motor = other_935;
    let _e11: Point = self_1085;
    let _e15: Motor = other_935;
    let _e18: Motor = other_935;
    let _e21: Motor = other_935;
    let _e24: Motor = other_935;
    let _e36: Point = self_1085;
    let _e40: Motor = other_935;
    let _e43: Motor = other_935;
    let _e46: Motor = other_935;
    let _e49: Motor = other_935;
    let _e62: Point = self_1085;
    let _e66: Motor = other_935;
    let _e69: Motor = other_935;
    let _e72: Motor = other_935;
    let _e75: Motor = other_935;
    let _e88: Point = self_1085;
    let _e92: Motor = other_935;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.y, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e36.g0_.z) * vec4<f32>(_e40.g0_.z, _e43.g1_.w, _e46.g0_.z, _e49.g1_.y)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e62.g0_.w) * vec4<f32>(_e66.g0_.w, _e69.g1_.z, _e72.g1_.y, _e75.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e88.g0_.x) * _e92.g0_) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_motor_left_anti_contraction(self_1086: Point, other_936: Motor) -> PointAndPlane {
    var self_1087: Point;
    var other_937: Motor;

    self_1087 = self_1086;
    other_937 = other_936;
    let _e4: Point = self_1087;
    let _e8: Motor = other_937;
    let _e11: Motor = other_937;
    let _e14: Motor = other_937;
    let _e17: Motor = other_937;
    let _e30: Point = self_1087;
    let _e34: Motor = other_937;
    let _e37: Motor = other_937;
    let _e40: Motor = other_937;
    let _e43: Motor = other_937;
    let _e57: Point = self_1087;
    let _e61: Motor = other_937;
    let _e64: Motor = other_937;
    let _e67: Motor = other_937;
    let _e70: Motor = other_937;
    let _e84: Point = self_1087;
    let _e88: Motor = other_937;
    let _e98: Point = self_1087;
    let _e100: Motor = other_937;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.y, _e14.g1_.w, _e17.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.z, _e43.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.w, _e64.g1_.z, _e67.g1_.y, _e70.g0_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * _e88.g0_) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((_e98.g0_ * vec4<f32>(_e100.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_motor_right_anti_contraction(self_1088: Point, other_938: Motor) -> Point {
    var self_1089: Point;
    var other_939: Motor;

    self_1089 = self_1088;
    other_939 = other_938;
    let _e4: Point = self_1089;
    let _e6: Motor = other_939;
    return Point((_e4.g0_ * vec4<f32>(_e6.g1_.x)));
}

fn point_point_and_plane_add(self_1090: Point, other_940: PointAndPlane) -> PointAndPlane {
    var self_1091: Point;
    var other_941: PointAndPlane;

    self_1091 = self_1090;
    other_941 = other_940;
    let _e4: Point = self_1091;
    let _e6: PointAndPlane = other_941;
    let _e9: PointAndPlane = other_941;
    return PointAndPlane((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn point_point_and_plane_sub(self_1092: Point, other_942: PointAndPlane) -> PointAndPlane {
    var self_1093: Point;
    var other_943: PointAndPlane;

    self_1093 = self_1092;
    other_943 = other_942;
    let _e4: Point = self_1093;
    let _e6: PointAndPlane = other_943;
    let _e11: PointAndPlane = other_943;
    return PointAndPlane((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_));
}

fn point_point_and_plane_geometric_product(self_1094: Point, other_944: PointAndPlane) -> Motor {
    var self_1095: Point;
    var other_945: PointAndPlane;

    self_1095 = self_1094;
    other_945 = other_944;
    let _e4: Point = self_1095;
    let _e8: PointAndPlane = other_945;
    let _e11: PointAndPlane = other_945;
    let _e14: PointAndPlane = other_945;
    let _e17: PointAndPlane = other_945;
    let _e29: Point = self_1095;
    let _e33: PointAndPlane = other_945;
    let _e36: PointAndPlane = other_945;
    let _e39: PointAndPlane = other_945;
    let _e42: PointAndPlane = other_945;
    let _e57: Point = self_1095;
    let _e61: PointAndPlane = other_945;
    let _e64: PointAndPlane = other_945;
    let _e67: PointAndPlane = other_945;
    let _e70: PointAndPlane = other_945;
    let _e85: Point = self_1095;
    let _e89: PointAndPlane = other_945;
    let _e92: PointAndPlane = other_945;
    let _e95: PointAndPlane = other_945;
    let _e98: PointAndPlane = other_945;
    let _e115: Point = self_1095;
    let _e119: PointAndPlane = other_945;
    let _e122: PointAndPlane = other_945;
    let _e125: PointAndPlane = other_945;
    let _e128: PointAndPlane = other_945;
    let _e134: Point = self_1095;
    let _e138: PointAndPlane = other_945;
    let _e141: PointAndPlane = other_945;
    let _e144: PointAndPlane = other_945;
    let _e147: PointAndPlane = other_945;
    let _e161: Point = self_1095;
    let _e165: PointAndPlane = other_945;
    let _e168: PointAndPlane = other_945;
    let _e171: PointAndPlane = other_945;
    let _e174: PointAndPlane = other_945;
    let _e188: Point = self_1095;
    let _e192: PointAndPlane = other_945;
    let _e195: PointAndPlane = other_945;
    let _e198: PointAndPlane = other_945;
    let _e201: PointAndPlane = other_945;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g0_.y, _e36.g1_.x, _e39.g0_.w, _e42.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.z, _e64.g0_.w, _e67.g1_.x, _e70.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g0_.w, _e92.g0_.z, _e95.g0_.y, _e98.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(0.0) - (vec4<f32>(_e115.g0_.x) * vec4<f32>(_e119.g1_.x, _e122.g0_.y, _e125.g0_.z, _e128.g0_.w))) + ((vec4<f32>(_e134.g0_.y) * vec4<f32>(_e138.g1_.y, _e141.g0_.x, _e144.g1_.w, _e147.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e161.g0_.z) * vec4<f32>(_e165.g1_.z, _e168.g1_.w, _e171.g0_.x, _e174.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e188.g0_.w) * vec4<f32>(_e192.g1_.w, _e195.g1_.z, _e198.g1_.y, _e201.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))));
}

fn point_point_and_plane_outer_product(self_1096: Point, other_946: PointAndPlane) -> AntiScalar {
    var self_1097: Point;
    var other_947: PointAndPlane;

    self_1097 = self_1096;
    other_947 = other_946;
    let _e5: Point = self_1097;
    let _e8: PointAndPlane = other_947;
    let _e13: Point = self_1097;
    let _e16: PointAndPlane = other_947;
    let _e21: Point = self_1097;
    let _e24: PointAndPlane = other_947;
    let _e29: Point = self_1097;
    let _e32: PointAndPlane = other_947;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g0_.w * _e32.g1_.w)));
}

fn point_point_and_plane_geometric_anti_product(self_1098: Point, other_948: PointAndPlane) -> Motor {
    var self_1099: Point;
    var other_949: PointAndPlane;

    self_1099 = self_1098;
    other_949 = other_948;
    let _e4: Point = self_1099;
    let _e8: PointAndPlane = other_949;
    let _e11: PointAndPlane = other_949;
    let _e14: PointAndPlane = other_949;
    let _e17: PointAndPlane = other_949;
    let _e29: Point = self_1099;
    let _e33: PointAndPlane = other_949;
    let _e36: PointAndPlane = other_949;
    let _e39: PointAndPlane = other_949;
    let _e42: PointAndPlane = other_949;
    let _e57: Point = self_1099;
    let _e61: PointAndPlane = other_949;
    let _e64: PointAndPlane = other_949;
    let _e67: PointAndPlane = other_949;
    let _e70: PointAndPlane = other_949;
    let _e85: Point = self_1099;
    let _e89: PointAndPlane = other_949;
    let _e92: PointAndPlane = other_949;
    let _e95: PointAndPlane = other_949;
    let _e98: PointAndPlane = other_949;
    let _e113: Point = self_1099;
    let _e117: PointAndPlane = other_949;
    let _e120: PointAndPlane = other_949;
    let _e123: PointAndPlane = other_949;
    let _e126: PointAndPlane = other_949;
    let _e131: Point = self_1099;
    let _e135: PointAndPlane = other_949;
    let _e138: PointAndPlane = other_949;
    let _e141: PointAndPlane = other_949;
    let _e144: PointAndPlane = other_949;
    let _e158: Point = self_1099;
    let _e162: PointAndPlane = other_949;
    let _e165: PointAndPlane = other_949;
    let _e168: PointAndPlane = other_949;
    let _e171: PointAndPlane = other_949;
    let _e185: Point = self_1099;
    let _e189: PointAndPlane = other_949;
    let _e192: PointAndPlane = other_949;
    let _e195: PointAndPlane = other_949;
    let _e198: PointAndPlane = other_949;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g1_.y, _e36.g0_.x, _e39.g1_.w, _e42.g1_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.z, _e64.g1_.w, _e67.g0_.x, _e70.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g1_.w, _e92.g1_.z, _e95.g1_.y, _e98.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), ((((vec4<f32>(_e113.g0_.x) * vec4<f32>(_e117.g0_.x, _e120.g1_.y, _e123.g1_.z, _e126.g1_.w)) + ((vec4<f32>(_e131.g0_.y) * vec4<f32>(_e135.g0_.y, _e138.g1_.x, _e141.g0_.w, _e144.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e158.g0_.z) * vec4<f32>(_e162.g0_.z, _e165.g0_.w, _e168.g1_.x, _e171.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e185.g0_.w) * vec4<f32>(_e189.g0_.w, _e192.g0_.z, _e195.g0_.y, _e198.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn point_point_and_plane_left_contraction(self_1100: Point, other_950: PointAndPlane) -> Scalar {
    var self_1101: Point;
    var other_951: PointAndPlane;

    self_1101 = self_1100;
    other_951 = other_950;
    let _e5: Point = self_1101;
    let _e8: PointAndPlane = other_951;
    let _e13: Point = self_1101;
    let _e16: PointAndPlane = other_951;
    let _e21: Point = self_1101;
    let _e24: PointAndPlane = other_951;
    let _e29: Point = self_1101;
    let _e32: PointAndPlane = other_951;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_and_plane_right_anti_contraction(self_1102: Point, other_952: PointAndPlane) -> AntiScalar {
    var self_1103: Point;
    var other_953: PointAndPlane;

    self_1103 = self_1102;
    other_953 = other_952;
    let _e4: Point = self_1103;
    let _e7: PointAndPlane = other_953;
    let _e11: Point = self_1103;
    let _e14: PointAndPlane = other_953;
    let _e19: Point = self_1103;
    let _e22: PointAndPlane = other_953;
    let _e27: Point = self_1103;
    let _e30: PointAndPlane = other_953;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_point_and_plane_scalar_product(self_1104: Point, other_954: PointAndPlane) -> Scalar {
    var self_1105: Point;
    var other_955: PointAndPlane;

    self_1105 = self_1104;
    other_955 = other_954;
    let _e5: Point = self_1105;
    let _e8: PointAndPlane = other_955;
    let _e13: Point = self_1105;
    let _e16: PointAndPlane = other_955;
    let _e21: Point = self_1105;
    let _e24: PointAndPlane = other_955;
    let _e29: Point = self_1105;
    let _e32: PointAndPlane = other_955;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_point_and_plane_anti_scalar_product(self_1106: Point, other_956: PointAndPlane) -> AntiScalar {
    var self_1107: Point;
    var other_957: PointAndPlane;

    self_1107 = self_1106;
    other_957 = other_956;
    let _e4: Point = self_1107;
    let _e7: PointAndPlane = other_957;
    let _e11: Point = self_1107;
    let _e14: PointAndPlane = other_957;
    let _e19: Point = self_1107;
    let _e22: PointAndPlane = other_957;
    let _e27: Point = self_1107;
    let _e30: PointAndPlane = other_957;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_squared_magnitude(self_1108: Point) -> Scalar {
    var self_1109: Point;

    self_1109 = self_1108;
    let _e2: Point = self_1109;
    let _e3: Point = self_1109;
    let _e4: Point = point_reversal(_e3);
    let _e5: Scalar = point_point_scalar_product(_e2, _e4);
    return _e5;
}

fn point_magnitude(self_1110: Point) -> Scalar {
    var self_1111: Point;

    self_1111 = self_1110;
    let _e2: Point = self_1111;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_bulk_norm(self_1112: Point) -> Scalar {
    var self_1113: Point;

    self_1113 = self_1112;
    let _e2: Point = self_1113;
    let _e3: Scalar = point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_squared_anti_magnitude(self_1114: Point) -> AntiScalar {
    var self_1115: Point;

    self_1115 = self_1114;
    let _e2: Point = self_1115;
    let _e3: Point = self_1115;
    let _e4: Point = point_anti_reversal(_e3);
    let _e5: AntiScalar = point_point_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn point_weight_norm(self_1116: Point) -> AntiScalar {
    var self_1117: Point;

    self_1117 = self_1116;
    let _e2: Point = self_1117;
    let _e3: AntiScalar = point_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn point_scale(self_1118: Point, other_958: f32) -> Point {
    var self_1119: Point;
    var other_959: f32;

    self_1119 = self_1118;
    other_959 = other_958;
    let _e4: Point = self_1119;
    let _e5: f32 = other_959;
    let _e7: Point = point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn point_signum(self_1120: Point) -> Point {
    var self_1121: Point;

    self_1121 = self_1120;
    let _e2: Point = self_1121;
    let _e3: Point = self_1121;
    let _e4: Scalar = point_magnitude(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_inverse(self_1122: Point) -> Point {
    var self_1123: Point;

    self_1123 = self_1122;
    let _e2: Point = self_1123;
    let _e3: Point = point_reversal(_e2);
    let _e4: Point = self_1123;
    let _e5: Scalar = point_squared_magnitude(_e4);
    let _e10: Point = point_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn point_unitize(self_1124: Point) -> Point {
    var self_1125: Point;

    self_1125 = self_1124;
    let _e2: Point = self_1125;
    let _e3: Point = self_1125;
    let _e4: AntiScalar = point_weight_norm(_e3);
    let _e9: Point = point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn ideal_point_zero() -> IdealPoint {
    return IdealPoint(vec3<f32>(0.0));
}

fn ideal_point_one() -> IdealPoint {
    return IdealPoint(vec3<f32>(0.0));
}

fn ideal_point_grade(self_1126: IdealPoint) -> i32 {
    return 2;
}

fn ideal_point_anti_grade(self_1127: IdealPoint) -> i32 {
    return 2;
}

fn ideal_point_neg(self_1128: IdealPoint) -> IdealPoint {
    var self_1129: IdealPoint;

    self_1129 = self_1128;
    let _e2: IdealPoint = self_1129;
    return IdealPoint((_e2.g0_ * vec3<f32>(-(1.0))));
}

fn ideal_point_automorphism(self_1130: IdealPoint) -> IdealPoint {
    var self_1131: IdealPoint;

    self_1131 = self_1130;
    let _e2: IdealPoint = self_1131;
    return IdealPoint(_e2.g0_);
}

fn ideal_point_reversal(self_1132: IdealPoint) -> IdealPoint {
    var self_1133: IdealPoint;

    self_1133 = self_1132;
    let _e2: IdealPoint = self_1133;
    return IdealPoint((_e2.g0_ * vec3<f32>(-(1.0))));
}

fn ideal_point_conjugation(self_1134: IdealPoint) -> IdealPoint {
    var self_1135: IdealPoint;

    self_1135 = self_1134;
    let _e2: IdealPoint = self_1135;
    return IdealPoint((_e2.g0_ * vec3<f32>(-(1.0))));
}

fn ideal_point_anti_reversal(self_1136: IdealPoint) -> IdealPoint {
    var self_1137: IdealPoint;

    self_1137 = self_1136;
    let _e2: IdealPoint = self_1137;
    return IdealPoint((_e2.g0_ * vec3<f32>(-(1.0))));
}

fn ideal_point_scalar_add(self_1138: IdealPoint, other_960: Scalar) -> Translator {
    var self_1139: IdealPoint;
    var other_961: Scalar;

    self_1139 = self_1138;
    other_961 = other_960;
    let _e4: IdealPoint = self_1139;
    let _e7: IdealPoint = self_1139;
    let _e10: IdealPoint = self_1139;
    let _e13: IdealPoint = self_1139;
    let _e23: Scalar = other_961;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.y, _e13.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + (vec4<f32>(_e23.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn ideal_point_scalar_sub(self_1140: IdealPoint, other_962: Scalar) -> Translator {
    var self_1141: IdealPoint;
    var other_963: Scalar;

    self_1141 = self_1140;
    other_963 = other_962;
    let _e4: IdealPoint = self_1141;
    let _e7: IdealPoint = self_1141;
    let _e10: IdealPoint = self_1141;
    let _e13: IdealPoint = self_1141;
    let _e23: Scalar = other_963;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.y, _e13.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - (vec4<f32>(_e23.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn ideal_point_scalar_geometric_product(self_1142: IdealPoint, other_964: Scalar) -> IdealPoint {
    var self_1143: IdealPoint;
    var other_965: Scalar;

    self_1143 = self_1142;
    other_965 = other_964;
    let _e4: IdealPoint = self_1143;
    let _e6: Scalar = other_965;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_scalar_outer_product(self_1144: IdealPoint, other_966: Scalar) -> IdealPoint {
    var self_1145: IdealPoint;
    var other_967: Scalar;

    self_1145 = self_1144;
    other_967 = other_966;
    let _e4: IdealPoint = self_1145;
    let _e6: Scalar = other_967;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_scalar_inner_product(self_1146: IdealPoint, other_968: Scalar) -> IdealPoint {
    var self_1147: IdealPoint;
    var other_969: Scalar;

    self_1147 = self_1146;
    other_969 = other_968;
    let _e4: IdealPoint = self_1147;
    let _e6: Scalar = other_969;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_scalar_right_contraction(self_1148: IdealPoint, other_970: Scalar) -> IdealPoint {
    var self_1149: IdealPoint;
    var other_971: Scalar;

    self_1149 = self_1148;
    other_971 = other_970;
    let _e4: IdealPoint = self_1149;
    let _e6: Scalar = other_971;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_anti_scalar_regressive_product(self_1150: IdealPoint, other_972: AntiScalar) -> IdealPoint {
    var self_1151: IdealPoint;
    var other_973: AntiScalar;

    self_1151 = self_1150;
    other_973 = other_972;
    let _e4: IdealPoint = self_1151;
    let _e6: AntiScalar = other_973;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_anti_scalar_geometric_anti_product(self_1152: IdealPoint, other_974: AntiScalar) -> IdealPoint {
    var self_1153: IdealPoint;
    var other_975: AntiScalar;

    self_1153 = self_1152;
    other_975 = other_974;
    let _e4: IdealPoint = self_1153;
    let _e6: AntiScalar = other_975;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_anti_scalar_inner_anti_product(self_1154: IdealPoint, other_976: AntiScalar) -> IdealPoint {
    var self_1155: IdealPoint;
    var other_977: AntiScalar;

    self_1155 = self_1154;
    other_977 = other_976;
    let _e4: IdealPoint = self_1155;
    let _e6: AntiScalar = other_977;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_anti_scalar_right_anti_contraction(self_1156: IdealPoint, other_978: AntiScalar) -> IdealPoint {
    var self_1157: IdealPoint;
    var other_979: AntiScalar;

    self_1157 = self_1156;
    other_979 = other_978;
    let _e4: IdealPoint = self_1157;
    let _e6: AntiScalar = other_979;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_)));
}

fn ideal_point_multi_vector_add(self_1158: IdealPoint, other_980: MultiVector) -> MultiVector {
    var self_1159: IdealPoint;
    var other_981: MultiVector;

    self_1159 = self_1158;
    other_981 = other_980;
    let _e4: MultiVector = other_981;
    let _e6: MultiVector = other_981;
    let _e8: MultiVector = other_981;
    let _e10: IdealPoint = self_1159;
    let _e13: IdealPoint = self_1159;
    let _e16: IdealPoint = self_1159;
    let _e19: IdealPoint = self_1159;
    let _e29: MultiVector = other_981;
    return MultiVector(_e4.g0_, _e6.g1_, _e8.g2_, ((vec4<f32>(_e10.g0_.x, _e13.g0_.x, _e16.g0_.y, _e19.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e29.g3_));
}

fn ideal_point_multi_vector_sub(self_1160: IdealPoint, other_982: MultiVector) -> MultiVector {
    var self_1161: IdealPoint;
    var other_983: MultiVector;

    self_1161 = self_1160;
    other_983 = other_982;
    let _e6: MultiVector = other_983;
    let _e11: MultiVector = other_983;
    let _e16: MultiVector = other_983;
    let _e19: IdealPoint = self_1161;
    let _e22: IdealPoint = self_1161;
    let _e25: IdealPoint = self_1161;
    let _e28: IdealPoint = self_1161;
    let _e38: MultiVector = other_983;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec4<f32>(0.0) - _e16.g2_), ((vec4<f32>(_e19.g0_.x, _e22.g0_.x, _e25.g0_.y, _e28.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e38.g3_));
}

fn ideal_point_multi_vector_geometric_product(self_1162: IdealPoint, other_984: MultiVector) -> MultiVector {
    var self_1163: IdealPoint;
    var other_985: MultiVector;

    self_1163 = self_1162;
    other_985 = other_984;
    let _e4: IdealPoint = self_1163;
    let _e8: MultiVector = other_985;
    let _e21: IdealPoint = self_1163;
    let _e25: MultiVector = other_985;
    let _e39: IdealPoint = self_1163;
    let _e43: MultiVector = other_985;
    let _e57: IdealPoint = self_1163;
    let _e61: MultiVector = other_985;
    let _e73: IdealPoint = self_1163;
    let _e77: MultiVector = other_985;
    let _e90: IdealPoint = self_1163;
    let _e94: MultiVector = other_985;
    let _e107: IdealPoint = self_1163;
    let _e111: MultiVector = other_985;
    let _e123: IdealPoint = self_1163;
    let _e127: MultiVector = other_985;
    let _e140: IdealPoint = self_1163;
    let _e144: MultiVector = other_985;
    let _e157: IdealPoint = self_1163;
    let _e161: MultiVector = other_985;
    let _e172: IdealPoint = self_1163;
    let _e176: MultiVector = other_985;
    let _e188: IdealPoint = self_1163;
    let _e192: MultiVector = other_985;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g3_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e21.g0_.y) * _e25.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e39.g0_.z) * _e43.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e57.g0_.x) * _e61.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e73.g0_.y) * _e77.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e90.g0_.z) * _e94.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e107.g0_.x) * _e111.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e123.g0_.y) * _e127.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e140.g0_.z) * _e144.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e157.g0_.x) * _e161.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e172.g0_.y) * _e176.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e188.g0_.z) * _e192.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn ideal_point_multi_vector_geometric_anti_product(self_1164: IdealPoint, other_986: MultiVector) -> MultiVector {
    var self_1165: IdealPoint;
    var other_987: MultiVector;

    self_1165 = self_1164;
    other_987 = other_986;
    let _e4: IdealPoint = self_1165;
    let _e8: MultiVector = other_987;
    let _e20: IdealPoint = self_1165;
    let _e24: MultiVector = other_987;
    let _e37: IdealPoint = self_1165;
    let _e41: MultiVector = other_987;
    let _e54: IdealPoint = self_1165;
    let _e58: MultiVector = other_987;
    let _e70: IdealPoint = self_1165;
    let _e74: MultiVector = other_987;
    let _e87: IdealPoint = self_1165;
    let _e91: MultiVector = other_987;
    let _e104: IdealPoint = self_1165;
    let _e108: MultiVector = other_987;
    let _e120: IdealPoint = self_1165;
    let _e124: MultiVector = other_987;
    let _e137: IdealPoint = self_1165;
    let _e141: MultiVector = other_987;
    let _e154: IdealPoint = self_1165;
    let _e158: MultiVector = other_987;
    let _e170: IdealPoint = self_1165;
    let _e174: MultiVector = other_987;
    let _e187: IdealPoint = self_1165;
    let _e191: MultiVector = other_987;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e54.g0_.x) * _e58.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e70.g0_.y) * _e74.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e87.g0_.z) * _e91.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e104.g0_.x) * _e108.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e120.g0_.y) * _e124.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e137.g0_.z) * _e141.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e154.g0_.x) * _e158.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e170.g0_.y) * _e174.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e187.g0_.z) * _e191.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn ideal_point_multi_vector_scalar_product(self_1166: IdealPoint, other_988: MultiVector) -> Scalar {
    var self_1167: IdealPoint;
    var other_989: MultiVector;

    self_1167 = self_1166;
    other_989 = other_988;
    let _e5: IdealPoint = self_1167;
    let _e8: MultiVector = other_989;
    let _e13: IdealPoint = self_1167;
    let _e16: MultiVector = other_989;
    let _e21: IdealPoint = self_1167;
    let _e24: MultiVector = other_989;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g3_.y)) - (_e13.g0_.y * _e16.g3_.z)) - (_e21.g0_.z * _e24.g3_.w)));
}

fn ideal_point_multi_vector_anti_scalar_product(self_1168: IdealPoint, other_990: MultiVector) -> AntiScalar {
    var self_1169: IdealPoint;
    var other_991: MultiVector;

    self_1169 = self_1168;
    other_991 = other_990;
    let _e5: IdealPoint = self_1169;
    let _e8: MultiVector = other_991;
    let _e13: IdealPoint = self_1169;
    let _e16: MultiVector = other_991;
    let _e21: IdealPoint = self_1169;
    let _e24: MultiVector = other_991;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g3_.y)) - (_e13.g0_.y * _e16.g3_.z)) - (_e21.g0_.z * _e24.g3_.w)));
}

fn ideal_point_rotor_regressive_product(self_1170: IdealPoint, other_992: Rotor) -> Scalar {
    var self_1171: IdealPoint;
    var other_993: Rotor;

    self_1171 = self_1170;
    other_993 = other_992;
    let _e4: IdealPoint = self_1171;
    let _e7: Rotor = other_993;
    let _e11: IdealPoint = self_1171;
    let _e14: Rotor = other_993;
    let _e19: IdealPoint = self_1171;
    let _e22: Rotor = other_993;
    return Scalar((((_e4.g0_.x * _e7.g0_.y) + (_e11.g0_.y * _e14.g0_.z)) + (_e19.g0_.z * _e22.g0_.w)));
}

fn ideal_point_rotor_inner_product(self_1172: IdealPoint, other_994: Rotor) -> IdealPoint {
    var self_1173: IdealPoint;
    var other_995: Rotor;

    self_1173 = self_1172;
    other_995 = other_994;
    let _e4: IdealPoint = self_1173;
    let _e6: Rotor = other_995;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_.x)));
}

fn ideal_point_rotor_geometric_anti_product(self_1174: IdealPoint, other_996: Rotor) -> Rotor {
    var self_1175: IdealPoint;
    var other_997: Rotor;

    self_1175 = self_1174;
    other_997 = other_996;
    let _e4: IdealPoint = self_1175;
    let _e8: Rotor = other_997;
    let _e20: IdealPoint = self_1175;
    let _e24: Rotor = other_997;
    let _e37: IdealPoint = self_1175;
    let _e41: Rotor = other_997;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn ideal_point_rotor_right_contraction(self_1176: IdealPoint, other_998: Rotor) -> IdealPoint {
    var self_1177: IdealPoint;
    var other_999: Rotor;

    self_1177 = self_1176;
    other_999 = other_998;
    let _e4: IdealPoint = self_1177;
    let _e6: Rotor = other_999;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_.x)));
}

fn ideal_point_point_regressive_product(self_1178: IdealPoint, other_1000: Point) -> Plane {
    var self_1179: IdealPoint;
    var other_1001: Point;

    self_1179 = self_1178;
    other_1001 = other_1000;
    let _e4: IdealPoint = self_1179;
    let _e8: Point = other_1001;
    let _e19: IdealPoint = self_1179;
    let _e23: Point = other_1001;
    let _e35: IdealPoint = self_1179;
    let _e39: Point = other_1001;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_ideal_point_add(self_1180: IdealPoint, other_1002: IdealPoint) -> IdealPoint {
    var self_1181: IdealPoint;
    var other_1003: IdealPoint;

    self_1181 = self_1180;
    other_1003 = other_1002;
    let _e4: IdealPoint = self_1181;
    let _e6: IdealPoint = other_1003;
    return IdealPoint((_e4.g0_ + _e6.g0_));
}

fn ideal_point_ideal_point_sub(self_1182: IdealPoint, other_1004: IdealPoint) -> IdealPoint {
    var self_1183: IdealPoint;
    var other_1005: IdealPoint;

    self_1183 = self_1182;
    other_1005 = other_1004;
    let _e4: IdealPoint = self_1183;
    let _e6: IdealPoint = other_1005;
    return IdealPoint((_e4.g0_ - _e6.g0_));
}

fn ideal_point_ideal_point_mul(self_1184: IdealPoint, other_1006: IdealPoint) -> IdealPoint {
    var self_1185: IdealPoint;
    var other_1007: IdealPoint;

    self_1185 = self_1184;
    other_1007 = other_1006;
    let _e4: IdealPoint = self_1185;
    let _e6: IdealPoint = other_1007;
    return IdealPoint((_e4.g0_ * _e6.g0_));
}

fn ideal_point_ideal_point_div(self_1186: IdealPoint, other_1008: IdealPoint) -> IdealPoint {
    var self_1187: IdealPoint;
    var other_1009: IdealPoint;

    self_1187 = self_1186;
    other_1009 = other_1008;
    let _e4: IdealPoint = self_1187;
    let _e7: IdealPoint = self_1187;
    let _e10: IdealPoint = self_1187;
    let _e19: IdealPoint = other_1009;
    let _e22: IdealPoint = other_1009;
    let _e25: IdealPoint = other_1009;
    return IdealPoint((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn ideal_point_ideal_point_geometric_product(self_1188: IdealPoint, other_1010: IdealPoint) -> Rotor {
    var self_1189: IdealPoint;
    var other_1011: IdealPoint;

    self_1189 = self_1188;
    other_1011 = other_1010;
    let _e4: IdealPoint = self_1189;
    let _e8: IdealPoint = other_1011;
    let _e11: IdealPoint = other_1011;
    let _e14: IdealPoint = other_1011;
    let _e17: IdealPoint = other_1011;
    let _e30: IdealPoint = self_1189;
    let _e34: IdealPoint = other_1011;
    let _e37: IdealPoint = other_1011;
    let _e40: IdealPoint = other_1011;
    let _e43: IdealPoint = other_1011;
    let _e57: IdealPoint = self_1189;
    let _e61: IdealPoint = other_1011;
    let _e64: IdealPoint = other_1011;
    let _e67: IdealPoint = other_1011;
    let _e70: IdealPoint = other_1011;
    return Rotor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g0_.y, _e40.g0_.x, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.x, _e67.g0_.z, _e70.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))));
}

fn ideal_point_ideal_point_inner_product(self_1190: IdealPoint, other_1012: IdealPoint) -> Scalar {
    var self_1191: IdealPoint;
    var other_1013: IdealPoint;

    self_1191 = self_1190;
    other_1013 = other_1012;
    let _e5: IdealPoint = self_1191;
    let _e8: IdealPoint = other_1013;
    let _e13: IdealPoint = self_1191;
    let _e16: IdealPoint = other_1013;
    let _e21: IdealPoint = self_1191;
    let _e24: IdealPoint = other_1013;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_inner_anti_product(self_1192: IdealPoint, other_1014: IdealPoint) -> AntiScalar {
    var self_1193: IdealPoint;
    var other_1015: IdealPoint;

    self_1193 = self_1192;
    other_1015 = other_1014;
    let _e5: IdealPoint = self_1193;
    let _e8: IdealPoint = other_1015;
    let _e13: IdealPoint = self_1193;
    let _e16: IdealPoint = other_1015;
    let _e21: IdealPoint = self_1193;
    let _e24: IdealPoint = other_1015;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_left_contraction(self_1194: IdealPoint, other_1016: IdealPoint) -> Scalar {
    var self_1195: IdealPoint;
    var other_1017: IdealPoint;

    self_1195 = self_1194;
    other_1017 = other_1016;
    let _e5: IdealPoint = self_1195;
    let _e8: IdealPoint = other_1017;
    let _e13: IdealPoint = self_1195;
    let _e16: IdealPoint = other_1017;
    let _e21: IdealPoint = self_1195;
    let _e24: IdealPoint = other_1017;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_right_contraction(self_1196: IdealPoint, other_1018: IdealPoint) -> Scalar {
    var self_1197: IdealPoint;
    var other_1019: IdealPoint;

    self_1197 = self_1196;
    other_1019 = other_1018;
    let _e5: IdealPoint = self_1197;
    let _e8: IdealPoint = other_1019;
    let _e13: IdealPoint = self_1197;
    let _e16: IdealPoint = other_1019;
    let _e21: IdealPoint = self_1197;
    let _e24: IdealPoint = other_1019;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_left_anti_contraction(self_1198: IdealPoint, other_1020: IdealPoint) -> AntiScalar {
    var self_1199: IdealPoint;
    var other_1021: IdealPoint;

    self_1199 = self_1198;
    other_1021 = other_1020;
    let _e5: IdealPoint = self_1199;
    let _e8: IdealPoint = other_1021;
    let _e13: IdealPoint = self_1199;
    let _e16: IdealPoint = other_1021;
    let _e21: IdealPoint = self_1199;
    let _e24: IdealPoint = other_1021;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_right_anti_contraction(self_1200: IdealPoint, other_1022: IdealPoint) -> AntiScalar {
    var self_1201: IdealPoint;
    var other_1023: IdealPoint;

    self_1201 = self_1200;
    other_1023 = other_1022;
    let _e5: IdealPoint = self_1201;
    let _e8: IdealPoint = other_1023;
    let _e13: IdealPoint = self_1201;
    let _e16: IdealPoint = other_1023;
    let _e21: IdealPoint = self_1201;
    let _e24: IdealPoint = other_1023;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_scalar_product(self_1202: IdealPoint, other_1024: IdealPoint) -> Scalar {
    var self_1203: IdealPoint;
    var other_1025: IdealPoint;

    self_1203 = self_1202;
    other_1025 = other_1024;
    let _e5: IdealPoint = self_1203;
    let _e8: IdealPoint = other_1025;
    let _e13: IdealPoint = self_1203;
    let _e16: IdealPoint = other_1025;
    let _e21: IdealPoint = self_1203;
    let _e24: IdealPoint = other_1025;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_ideal_point_anti_scalar_product(self_1204: IdealPoint, other_1026: IdealPoint) -> AntiScalar {
    var self_1205: IdealPoint;
    var other_1027: IdealPoint;

    self_1205 = self_1204;
    other_1027 = other_1026;
    let _e5: IdealPoint = self_1205;
    let _e8: IdealPoint = other_1027;
    let _e13: IdealPoint = self_1205;
    let _e16: IdealPoint = other_1027;
    let _e21: IdealPoint = self_1205;
    let _e24: IdealPoint = other_1027;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_plane_inner_product(self_1206: IdealPoint, other_1028: Plane) -> Plane {
    var self_1207: IdealPoint;
    var other_1029: Plane;

    self_1207 = self_1206;
    other_1029 = other_1028;
    let _e4: IdealPoint = self_1207;
    let _e8: Plane = other_1029;
    let _e19: IdealPoint = self_1207;
    let _e23: Plane = other_1029;
    let _e35: IdealPoint = self_1207;
    let _e39: Plane = other_1029;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn ideal_point_plane_inner_anti_product(self_1208: IdealPoint, other_1030: Plane) -> Point {
    var self_1209: IdealPoint;
    var other_1031: Plane;

    self_1209 = self_1208;
    other_1031 = other_1030;
    let _e4: IdealPoint = self_1209;
    let _e8: Plane = other_1031;
    let _e19: IdealPoint = self_1209;
    let _e23: Plane = other_1031;
    let _e35: IdealPoint = self_1209;
    let _e39: Plane = other_1031;
    return Point(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_plane_right_contraction(self_1210: IdealPoint, other_1032: Plane) -> Plane {
    var self_1211: IdealPoint;
    var other_1033: Plane;

    self_1211 = self_1210;
    other_1033 = other_1032;
    let _e4: IdealPoint = self_1211;
    let _e8: Plane = other_1033;
    let _e19: IdealPoint = self_1211;
    let _e23: Plane = other_1033;
    let _e35: IdealPoint = self_1211;
    let _e39: Plane = other_1033;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn ideal_point_plane_left_anti_contraction(self_1212: IdealPoint, other_1034: Plane) -> Point {
    var self_1213: IdealPoint;
    var other_1035: Plane;

    self_1213 = self_1212;
    other_1035 = other_1034;
    let _e4: IdealPoint = self_1213;
    let _e8: Plane = other_1035;
    let _e19: IdealPoint = self_1213;
    let _e23: Plane = other_1035;
    let _e35: IdealPoint = self_1213;
    let _e39: Plane = other_1035;
    return Point(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_line_add(self_1214: IdealPoint, other_1036: Line) -> Line {
    var self_1215: IdealPoint;
    var other_1037: Line;

    self_1215 = self_1214;
    other_1037 = other_1036;
    let _e4: IdealPoint = self_1215;
    let _e6: Line = other_1037;
    let _e9: Line = other_1037;
    return Line((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn ideal_point_line_sub(self_1216: IdealPoint, other_1038: Line) -> Line {
    var self_1217: IdealPoint;
    var other_1039: Line;

    self_1217 = self_1216;
    other_1039 = other_1038;
    let _e4: IdealPoint = self_1217;
    let _e6: Line = other_1039;
    let _e11: Line = other_1039;
    return Line((_e4.g0_ - _e6.g0_), (vec3<f32>(0.0) - _e11.g1_));
}

fn ideal_point_line_geometric_product(self_1218: IdealPoint, other_1040: Line) -> Motor {
    var self_1219: IdealPoint;
    var other_1041: Line;

    self_1219 = self_1218;
    other_1041 = other_1040;
    let _e4: IdealPoint = self_1219;
    let _e8: Line = other_1041;
    let _e11: Line = other_1041;
    let _e14: Line = other_1041;
    let _e17: Line = other_1041;
    let _e30: IdealPoint = self_1219;
    let _e34: Line = other_1041;
    let _e37: Line = other_1041;
    let _e40: Line = other_1041;
    let _e43: Line = other_1041;
    let _e57: IdealPoint = self_1219;
    let _e61: Line = other_1041;
    let _e64: Line = other_1041;
    let _e67: Line = other_1041;
    let _e70: Line = other_1041;
    let _e84: IdealPoint = self_1219;
    let _e88: Line = other_1041;
    let _e91: Line = other_1041;
    let _e94: Line = other_1041;
    let _e97: Line = other_1041;
    let _e109: IdealPoint = self_1219;
    let _e113: Line = other_1041;
    let _e116: Line = other_1041;
    let _e119: Line = other_1041;
    let _e122: Line = other_1041;
    let _e135: IdealPoint = self_1219;
    let _e139: Line = other_1041;
    let _e142: Line = other_1041;
    let _e145: Line = other_1041;
    let _e148: Line = other_1041;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g0_.y, _e40.g0_.x, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.x, _e67.g0_.z, _e70.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))), ((((vec4<f32>(_e84.g0_.y) * vec4<f32>(_e88.g1_.y, _e91.g1_.z, _e94.g1_.y, _e97.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e109.g0_.z) * vec4<f32>(_e113.g1_.z, _e116.g1_.y, _e119.g1_.x, _e122.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e135.g0_.x) * vec4<f32>(_e139.g1_.x, _e142.g1_.x, _e145.g1_.z, _e148.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))));
}

fn ideal_point_line_regressive_product(self_1220: IdealPoint, other_1042: Line) -> Scalar {
    var self_1221: IdealPoint;
    var other_1043: Line;

    self_1221 = self_1220;
    other_1043 = other_1042;
    let _e4: IdealPoint = self_1221;
    let _e7: Line = other_1043;
    let _e11: IdealPoint = self_1221;
    let _e14: Line = other_1043;
    let _e19: IdealPoint = self_1221;
    let _e22: Line = other_1043;
    return Scalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn ideal_point_line_outer_product(self_1222: IdealPoint, other_1044: Line) -> AntiScalar {
    var self_1223: IdealPoint;
    var other_1045: Line;

    self_1223 = self_1222;
    other_1045 = other_1044;
    let _e4: IdealPoint = self_1223;
    let _e7: Line = other_1045;
    let _e11: IdealPoint = self_1223;
    let _e14: Line = other_1045;
    let _e19: IdealPoint = self_1223;
    let _e22: Line = other_1045;
    return AntiScalar((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)));
}

fn ideal_point_line_inner_product(self_1224: IdealPoint, other_1046: Line) -> Scalar {
    var self_1225: IdealPoint;
    var other_1047: Line;

    self_1225 = self_1224;
    other_1047 = other_1046;
    let _e5: IdealPoint = self_1225;
    let _e8: Line = other_1047;
    let _e13: IdealPoint = self_1225;
    let _e16: Line = other_1047;
    let _e21: IdealPoint = self_1225;
    let _e24: Line = other_1047;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_geometric_anti_product(self_1226: IdealPoint, other_1048: Line) -> Motor {
    var self_1227: IdealPoint;
    var other_1049: Line;

    self_1227 = self_1226;
    other_1049 = other_1048;
    let _e4: IdealPoint = self_1227;
    let _e8: Line = other_1049;
    let _e11: Line = other_1049;
    let _e14: Line = other_1049;
    let _e17: Line = other_1049;
    let _e29: IdealPoint = self_1227;
    let _e33: Line = other_1049;
    let _e36: Line = other_1049;
    let _e39: Line = other_1049;
    let _e42: Line = other_1049;
    let _e55: IdealPoint = self_1227;
    let _e59: Line = other_1049;
    let _e62: Line = other_1049;
    let _e65: Line = other_1049;
    let _e68: Line = other_1049;
    let _e81: IdealPoint = self_1227;
    let _e85: Line = other_1049;
    let _e88: Line = other_1049;
    let _e91: Line = other_1049;
    let _e94: Line = other_1049;
    let _e107: IdealPoint = self_1227;
    let _e111: Line = other_1049;
    let _e114: Line = other_1049;
    let _e117: Line = other_1049;
    let _e120: Line = other_1049;
    let _e134: IdealPoint = self_1227;
    let _e138: Line = other_1049;
    let _e141: Line = other_1049;
    let _e144: Line = other_1049;
    let _e147: Line = other_1049;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y, _e11.g1_.z, _e14.g1_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.z, _e36.g1_.y, _e39.g1_.x, _e42.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g1_.x, _e62.g1_.x, _e65.g1_.z, _e68.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))), ((((vec4<f32>(_e81.g0_.y) * vec4<f32>(_e85.g0_.y, _e88.g0_.z, _e91.g0_.y, _e94.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e107.g0_.z) * vec4<f32>(_e111.g0_.z, _e114.g0_.y, _e117.g0_.x, _e120.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e134.g0_.x) * vec4<f32>(_e138.g0_.x, _e141.g0_.x, _e144.g0_.z, _e147.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))));
}

fn ideal_point_line_inner_anti_product(self_1228: IdealPoint, other_1050: Line) -> AntiScalar {
    var self_1229: IdealPoint;
    var other_1051: Line;

    self_1229 = self_1228;
    other_1051 = other_1050;
    let _e5: IdealPoint = self_1229;
    let _e8: Line = other_1051;
    let _e13: IdealPoint = self_1229;
    let _e16: Line = other_1051;
    let _e21: IdealPoint = self_1229;
    let _e24: Line = other_1051;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_left_contraction(self_1230: IdealPoint, other_1052: Line) -> Scalar {
    var self_1231: IdealPoint;
    var other_1053: Line;

    self_1231 = self_1230;
    other_1053 = other_1052;
    let _e5: IdealPoint = self_1231;
    let _e8: Line = other_1053;
    let _e13: IdealPoint = self_1231;
    let _e16: Line = other_1053;
    let _e21: IdealPoint = self_1231;
    let _e24: Line = other_1053;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_right_contraction(self_1232: IdealPoint, other_1054: Line) -> Scalar {
    var self_1233: IdealPoint;
    var other_1055: Line;

    self_1233 = self_1232;
    other_1055 = other_1054;
    let _e5: IdealPoint = self_1233;
    let _e8: Line = other_1055;
    let _e13: IdealPoint = self_1233;
    let _e16: Line = other_1055;
    let _e21: IdealPoint = self_1233;
    let _e24: Line = other_1055;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_left_anti_contraction(self_1234: IdealPoint, other_1056: Line) -> AntiScalar {
    var self_1235: IdealPoint;
    var other_1057: Line;

    self_1235 = self_1234;
    other_1057 = other_1056;
    let _e5: IdealPoint = self_1235;
    let _e8: Line = other_1057;
    let _e13: IdealPoint = self_1235;
    let _e16: Line = other_1057;
    let _e21: IdealPoint = self_1235;
    let _e24: Line = other_1057;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_right_anti_contraction(self_1236: IdealPoint, other_1058: Line) -> AntiScalar {
    var self_1237: IdealPoint;
    var other_1059: Line;

    self_1237 = self_1236;
    other_1059 = other_1058;
    let _e5: IdealPoint = self_1237;
    let _e8: Line = other_1059;
    let _e13: IdealPoint = self_1237;
    let _e16: Line = other_1059;
    let _e21: IdealPoint = self_1237;
    let _e24: Line = other_1059;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_scalar_product(self_1238: IdealPoint, other_1060: Line) -> Scalar {
    var self_1239: IdealPoint;
    var other_1061: Line;

    self_1239 = self_1238;
    other_1061 = other_1060;
    let _e5: IdealPoint = self_1239;
    let _e8: Line = other_1061;
    let _e13: IdealPoint = self_1239;
    let _e16: Line = other_1061;
    let _e21: IdealPoint = self_1239;
    let _e24: Line = other_1061;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_line_anti_scalar_product(self_1240: IdealPoint, other_1062: Line) -> AntiScalar {
    var self_1241: IdealPoint;
    var other_1063: Line;

    self_1241 = self_1240;
    other_1063 = other_1062;
    let _e5: IdealPoint = self_1241;
    let _e8: Line = other_1063;
    let _e13: IdealPoint = self_1241;
    let _e16: Line = other_1063;
    let _e21: IdealPoint = self_1241;
    let _e24: Line = other_1063;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn ideal_point_translator_add(self_1242: IdealPoint, other_1064: Translator) -> Translator {
    var self_1243: IdealPoint;
    var other_1065: Translator;

    self_1243 = self_1242;
    other_1065 = other_1064;
    let _e4: IdealPoint = self_1243;
    let _e7: IdealPoint = self_1243;
    let _e10: IdealPoint = self_1243;
    let _e13: IdealPoint = self_1243;
    let _e23: Translator = other_1065;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.y, _e13.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e23.g0_));
}

fn ideal_point_translator_sub(self_1244: IdealPoint, other_1066: Translator) -> Translator {
    var self_1245: IdealPoint;
    var other_1067: Translator;

    self_1245 = self_1244;
    other_1067 = other_1066;
    let _e4: IdealPoint = self_1245;
    let _e7: IdealPoint = self_1245;
    let _e10: IdealPoint = self_1245;
    let _e13: IdealPoint = self_1245;
    let _e23: Translator = other_1067;
    return Translator(((vec4<f32>(_e4.g0_.x, _e7.g0_.x, _e10.g0_.y, _e13.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e23.g0_));
}

fn ideal_point_translator_outer_product(self_1246: IdealPoint, other_1068: Translator) -> IdealPoint {
    var self_1247: IdealPoint;
    var other_1069: Translator;

    self_1247 = self_1246;
    other_1069 = other_1068;
    let _e4: IdealPoint = self_1247;
    let _e6: Translator = other_1069;
    return IdealPoint((_e4.g0_ * vec3<f32>(_e6.g0_.x)));
}

fn ideal_point_translator_inner_product(self_1248: IdealPoint, other_1070: Translator) -> Translator {
    var self_1249: IdealPoint;
    var other_1071: Translator;

    self_1249 = self_1248;
    other_1071 = other_1070;
    let _e4: IdealPoint = self_1249;
    let _e8: Translator = other_1071;
    let _e19: IdealPoint = self_1249;
    let _e23: Translator = other_1071;
    let _e35: IdealPoint = self_1249;
    let _e39: Translator = other_1071;
    return Translator(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_translator_left_contraction(self_1250: IdealPoint, other_1072: Translator) -> Scalar {
    var self_1251: IdealPoint;
    var other_1073: Translator;

    self_1251 = self_1250;
    other_1073 = other_1072;
    let _e5: IdealPoint = self_1251;
    let _e8: Translator = other_1073;
    let _e13: IdealPoint = self_1251;
    let _e16: Translator = other_1073;
    let _e21: IdealPoint = self_1251;
    let _e24: Translator = other_1073;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn ideal_point_translator_right_contraction(self_1252: IdealPoint, other_1074: Translator) -> Translator {
    var self_1253: IdealPoint;
    var other_1075: Translator;

    self_1253 = self_1252;
    other_1075 = other_1074;
    let _e4: IdealPoint = self_1253;
    let _e8: Translator = other_1075;
    let _e19: IdealPoint = self_1253;
    let _e23: Translator = other_1075;
    let _e35: IdealPoint = self_1253;
    let _e39: Translator = other_1075;
    return Translator(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_translator_right_anti_contraction(self_1254: IdealPoint, other_1076: Translator) -> AntiScalar {
    var self_1255: IdealPoint;
    var other_1077: Translator;

    self_1255 = self_1254;
    other_1077 = other_1076;
    let _e5: IdealPoint = self_1255;
    let _e8: Translator = other_1077;
    let _e13: IdealPoint = self_1255;
    let _e16: Translator = other_1077;
    let _e21: IdealPoint = self_1255;
    let _e24: Translator = other_1077;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn ideal_point_translator_scalar_product(self_1256: IdealPoint, other_1078: Translator) -> Scalar {
    var self_1257: IdealPoint;
    var other_1079: Translator;

    self_1257 = self_1256;
    other_1079 = other_1078;
    let _e5: IdealPoint = self_1257;
    let _e8: Translator = other_1079;
    let _e13: IdealPoint = self_1257;
    let _e16: Translator = other_1079;
    let _e21: IdealPoint = self_1257;
    let _e24: Translator = other_1079;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn ideal_point_translator_anti_scalar_product(self_1258: IdealPoint, other_1080: Translator) -> AntiScalar {
    var self_1259: IdealPoint;
    var other_1081: Translator;

    self_1259 = self_1258;
    other_1081 = other_1080;
    let _e5: IdealPoint = self_1259;
    let _e8: Translator = other_1081;
    let _e13: IdealPoint = self_1259;
    let _e16: Translator = other_1081;
    let _e21: IdealPoint = self_1259;
    let _e24: Translator = other_1081;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn ideal_point_motor_add(self_1260: IdealPoint, other_1082: Motor) -> Motor {
    var self_1261: IdealPoint;
    var other_1083: Motor;

    self_1261 = self_1260;
    other_1083 = other_1082;
    let _e4: Motor = other_1083;
    let _e6: IdealPoint = self_1261;
    let _e9: IdealPoint = self_1261;
    let _e12: IdealPoint = self_1261;
    let _e15: IdealPoint = self_1261;
    let _e25: Motor = other_1083;
    return Motor(_e4.g0_, ((vec4<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.y, _e15.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e25.g1_));
}

fn ideal_point_motor_sub(self_1262: IdealPoint, other_1084: Motor) -> Motor {
    var self_1263: IdealPoint;
    var other_1085: Motor;

    self_1263 = self_1262;
    other_1085 = other_1084;
    let _e6: Motor = other_1085;
    let _e9: IdealPoint = self_1263;
    let _e12: IdealPoint = self_1263;
    let _e15: IdealPoint = self_1263;
    let _e18: IdealPoint = self_1263;
    let _e28: Motor = other_1085;
    return Motor((vec4<f32>(0.0) - _e6.g0_), ((vec4<f32>(_e9.g0_.x, _e12.g0_.x, _e15.g0_.y, _e18.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e28.g1_));
}

fn ideal_point_motor_geometric_product(self_1264: IdealPoint, other_1086: Motor) -> Motor {
    var self_1265: IdealPoint;
    var other_1087: Motor;

    self_1265 = self_1264;
    other_1087 = other_1086;
    let _e4: IdealPoint = self_1265;
    let _e8: Motor = other_1087;
    let _e21: IdealPoint = self_1265;
    let _e25: Motor = other_1087;
    let _e39: IdealPoint = self_1265;
    let _e43: Motor = other_1087;
    let _e57: IdealPoint = self_1265;
    let _e61: Motor = other_1087;
    let _e72: IdealPoint = self_1265;
    let _e76: Motor = other_1087;
    let _e88: IdealPoint = self_1265;
    let _e92: Motor = other_1087;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e21.g0_.y) * _e25.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e39.g0_.z) * _e43.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e57.g0_.x) * _e61.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e72.g0_.y) * _e76.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e88.g0_.z) * _e92.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn ideal_point_motor_regressive_product(self_1266: IdealPoint, other_1088: Motor) -> Translator {
    var self_1267: IdealPoint;
    var other_1089: Motor;

    self_1267 = self_1266;
    other_1089 = other_1088;
    let _e4: IdealPoint = self_1267;
    let _e8: Motor = other_1089;
    let _e11: Motor = other_1089;
    let _e14: Motor = other_1089;
    let _e17: Motor = other_1089;
    let _e28: IdealPoint = self_1267;
    let _e32: Motor = other_1089;
    let _e35: Motor = other_1089;
    let _e38: Motor = other_1089;
    let _e41: Motor = other_1089;
    let _e53: IdealPoint = self_1267;
    let _e57: Motor = other_1089;
    let _e60: Motor = other_1089;
    let _e63: Motor = other_1089;
    let _e66: Motor = other_1089;
    return Translator(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g1_.x, _e17.g0_.z)) * vec4<f32>(1.0, 0.0, 1.0, 0.0)) + ((vec4<f32>(_e28.g0_.z) * vec4<f32>(_e32.g0_.w, _e35.g0_.w, _e38.g0_.w, _e41.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e53.g0_.x) * vec4<f32>(_e57.g0_.y, _e60.g1_.x, _e63.g0_.x, _e66.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, 0.0))));
}

fn ideal_point_motor_geometric_anti_product(self_1268: IdealPoint, other_1090: Motor) -> Motor {
    var self_1269: IdealPoint;
    var other_1091: Motor;

    self_1269 = self_1268;
    other_1091 = other_1090;
    let _e4: IdealPoint = self_1269;
    let _e8: Motor = other_1091;
    let _e20: IdealPoint = self_1269;
    let _e24: Motor = other_1091;
    let _e37: IdealPoint = self_1269;
    let _e41: Motor = other_1091;
    let _e54: IdealPoint = self_1269;
    let _e58: Motor = other_1091;
    let _e70: IdealPoint = self_1269;
    let _e74: Motor = other_1091;
    let _e87: IdealPoint = self_1269;
    let _e91: Motor = other_1091;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e54.g0_.x) * _e58.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e70.g0_.y) * _e74.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e87.g0_.z) * _e91.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn ideal_point_motor_left_contraction(self_1270: IdealPoint, other_1092: Motor) -> Rotor {
    var self_1271: IdealPoint;
    var other_1093: Motor;

    self_1271 = self_1270;
    other_1093 = other_1092;
    let _e4: IdealPoint = self_1271;
    let _e8: Motor = other_1093;
    let _e20: IdealPoint = self_1271;
    let _e24: Motor = other_1093;
    let _e37: IdealPoint = self_1271;
    let _e41: Motor = other_1093;
    return Rotor(((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e20.g0_.z) * _e24.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.x) * _e41.g1_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn ideal_point_motor_right_contraction(self_1272: IdealPoint, other_1094: Motor) -> Translator {
    var self_1273: IdealPoint;
    var other_1095: Motor;

    self_1273 = self_1272;
    other_1095 = other_1094;
    let _e4: IdealPoint = self_1273;
    let _e8: Motor = other_1095;
    let _e11: Motor = other_1095;
    let _e14: Motor = other_1095;
    let _e17: Motor = other_1095;
    let _e29: IdealPoint = self_1273;
    let _e33: Motor = other_1095;
    let _e36: Motor = other_1095;
    let _e39: Motor = other_1095;
    let _e42: Motor = other_1095;
    let _e55: IdealPoint = self_1273;
    let _e59: Motor = other_1095;
    let _e62: Motor = other_1095;
    let _e65: Motor = other_1095;
    let _e68: Motor = other_1095;
    return Translator(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.z, _e11.g1_.z, _e14.g0_.x, _e17.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.w, _e36.g1_.w, _e39.g1_.w, _e42.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.x) * vec4<f32>(_e59.g1_.y, _e62.g0_.x, _e65.g1_.x, _e68.g1_.x)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_motor_scalar_product(self_1274: IdealPoint, other_1096: Motor) -> Scalar {
    var self_1275: IdealPoint;
    var other_1097: Motor;

    self_1275 = self_1274;
    other_1097 = other_1096;
    let _e5: IdealPoint = self_1275;
    let _e8: Motor = other_1097;
    let _e13: IdealPoint = self_1275;
    let _e16: Motor = other_1097;
    let _e21: IdealPoint = self_1275;
    let _e24: Motor = other_1097;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g1_.y)) - (_e13.g0_.y * _e16.g1_.z)) - (_e21.g0_.z * _e24.g1_.w)));
}

fn ideal_point_motor_anti_scalar_product(self_1276: IdealPoint, other_1098: Motor) -> AntiScalar {
    var self_1277: IdealPoint;
    var other_1099: Motor;

    self_1277 = self_1276;
    other_1099 = other_1098;
    let _e5: IdealPoint = self_1277;
    let _e8: Motor = other_1099;
    let _e13: IdealPoint = self_1277;
    let _e16: Motor = other_1099;
    let _e21: IdealPoint = self_1277;
    let _e24: Motor = other_1099;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g1_.y)) - (_e13.g0_.y * _e16.g1_.z)) - (_e21.g0_.z * _e24.g1_.w)));
}

fn ideal_point_point_and_plane_geometric_product(self_1278: IdealPoint, other_1100: PointAndPlane) -> PointAndPlane {
    var self_1279: IdealPoint;
    var other_1101: PointAndPlane;

    self_1279 = self_1278;
    other_1101 = other_1100;
    let _e4: IdealPoint = self_1279;
    let _e8: PointAndPlane = other_1101;
    let _e11: PointAndPlane = other_1101;
    let _e14: PointAndPlane = other_1101;
    let _e17: PointAndPlane = other_1101;
    let _e30: IdealPoint = self_1279;
    let _e34: PointAndPlane = other_1101;
    let _e37: PointAndPlane = other_1101;
    let _e40: PointAndPlane = other_1101;
    let _e43: PointAndPlane = other_1101;
    let _e57: IdealPoint = self_1279;
    let _e61: PointAndPlane = other_1101;
    let _e64: PointAndPlane = other_1101;
    let _e67: PointAndPlane = other_1101;
    let _e70: PointAndPlane = other_1101;
    let _e84: IdealPoint = self_1279;
    let _e88: PointAndPlane = other_1101;
    let _e91: PointAndPlane = other_1101;
    let _e94: PointAndPlane = other_1101;
    let _e97: PointAndPlane = other_1101;
    let _e110: IdealPoint = self_1279;
    let _e114: PointAndPlane = other_1101;
    let _e117: PointAndPlane = other_1101;
    let _e120: PointAndPlane = other_1101;
    let _e123: PointAndPlane = other_1101;
    let _e137: IdealPoint = self_1279;
    let _e141: PointAndPlane = other_1101;
    let _e144: PointAndPlane = other_1101;
    let _e147: PointAndPlane = other_1101;
    let _e150: PointAndPlane = other_1101;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.y, _e11.g0_.x, _e14.g1_.w, _e17.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.w, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.y, _e91.g1_.x, _e94.g0_.w, _e97.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.y) * vec4<f32>(_e114.g1_.z, _e117.g0_.w, _e120.g1_.x, _e123.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e137.g0_.z) * vec4<f32>(_e141.g1_.w, _e144.g0_.z, _e147.g0_.y, _e150.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn ideal_point_point_and_plane_regressive_product(self_1280: IdealPoint, other_1102: PointAndPlane) -> Plane {
    var self_1281: IdealPoint;
    var other_1103: PointAndPlane;

    self_1281 = self_1280;
    other_1103 = other_1102;
    let _e4: IdealPoint = self_1281;
    let _e8: PointAndPlane = other_1103;
    let _e19: IdealPoint = self_1281;
    let _e23: PointAndPlane = other_1103;
    let _e35: IdealPoint = self_1281;
    let _e39: PointAndPlane = other_1103;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_point_and_plane_inner_product(self_1282: IdealPoint, other_1104: PointAndPlane) -> Plane {
    var self_1283: IdealPoint;
    var other_1105: PointAndPlane;

    self_1283 = self_1282;
    other_1105 = other_1104;
    let _e4: IdealPoint = self_1283;
    let _e8: PointAndPlane = other_1105;
    let _e11: PointAndPlane = other_1105;
    let _e14: PointAndPlane = other_1105;
    let _e17: PointAndPlane = other_1105;
    let _e30: IdealPoint = self_1283;
    let _e34: PointAndPlane = other_1105;
    let _e37: PointAndPlane = other_1105;
    let _e40: PointAndPlane = other_1105;
    let _e43: PointAndPlane = other_1105;
    let _e57: IdealPoint = self_1283;
    let _e61: PointAndPlane = other_1105;
    let _e64: PointAndPlane = other_1105;
    let _e67: PointAndPlane = other_1105;
    let _e70: PointAndPlane = other_1105;
    return Plane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn ideal_point_point_and_plane_geometric_anti_product(self_1284: IdealPoint, other_1106: PointAndPlane) -> PointAndPlane {
    var self_1285: IdealPoint;
    var other_1107: PointAndPlane;

    self_1285 = self_1284;
    other_1107 = other_1106;
    let _e4: IdealPoint = self_1285;
    let _e8: PointAndPlane = other_1107;
    let _e11: PointAndPlane = other_1107;
    let _e14: PointAndPlane = other_1107;
    let _e17: PointAndPlane = other_1107;
    let _e30: IdealPoint = self_1285;
    let _e34: PointAndPlane = other_1107;
    let _e37: PointAndPlane = other_1107;
    let _e40: PointAndPlane = other_1107;
    let _e43: PointAndPlane = other_1107;
    let _e57: IdealPoint = self_1285;
    let _e61: PointAndPlane = other_1107;
    let _e64: PointAndPlane = other_1107;
    let _e67: PointAndPlane = other_1107;
    let _e70: PointAndPlane = other_1107;
    let _e84: IdealPoint = self_1285;
    let _e88: PointAndPlane = other_1107;
    let _e91: PointAndPlane = other_1107;
    let _e94: PointAndPlane = other_1107;
    let _e97: PointAndPlane = other_1107;
    let _e110: IdealPoint = self_1285;
    let _e114: PointAndPlane = other_1107;
    let _e117: PointAndPlane = other_1107;
    let _e120: PointAndPlane = other_1107;
    let _e123: PointAndPlane = other_1107;
    let _e137: IdealPoint = self_1285;
    let _e141: PointAndPlane = other_1107;
    let _e144: PointAndPlane = other_1107;
    let _e147: PointAndPlane = other_1107;
    let _e150: PointAndPlane = other_1107;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.y, _e91.g0_.x, _e94.g1_.w, _e97.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e110.g0_.y) * vec4<f32>(_e114.g0_.z, _e117.g1_.w, _e120.g0_.x, _e123.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e137.g0_.z) * vec4<f32>(_e141.g0_.w, _e144.g1_.z, _e147.g1_.y, _e150.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn ideal_point_point_and_plane_inner_anti_product(self_1286: IdealPoint, other_1108: PointAndPlane) -> Point {
    var self_1287: IdealPoint;
    var other_1109: PointAndPlane;

    self_1287 = self_1286;
    other_1109 = other_1108;
    let _e4: IdealPoint = self_1287;
    let _e8: PointAndPlane = other_1109;
    let _e11: PointAndPlane = other_1109;
    let _e14: PointAndPlane = other_1109;
    let _e17: PointAndPlane = other_1109;
    let _e30: IdealPoint = self_1287;
    let _e34: PointAndPlane = other_1109;
    let _e37: PointAndPlane = other_1109;
    let _e40: PointAndPlane = other_1109;
    let _e43: PointAndPlane = other_1109;
    let _e57: IdealPoint = self_1287;
    let _e61: PointAndPlane = other_1109;
    let _e64: PointAndPlane = other_1109;
    let _e67: PointAndPlane = other_1109;
    let _e70: PointAndPlane = other_1109;
    return Point(((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn ideal_point_point_and_plane_right_contraction(self_1288: IdealPoint, other_1110: PointAndPlane) -> Plane {
    var self_1289: IdealPoint;
    var other_1111: PointAndPlane;

    self_1289 = self_1288;
    other_1111 = other_1110;
    let _e4: IdealPoint = self_1289;
    let _e8: PointAndPlane = other_1111;
    let _e19: IdealPoint = self_1289;
    let _e23: PointAndPlane = other_1111;
    let _e35: IdealPoint = self_1289;
    let _e39: PointAndPlane = other_1111;
    return Plane(((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g0_.x) * _e39.g1_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn ideal_point_point_and_plane_left_anti_contraction(self_1290: IdealPoint, other_1112: PointAndPlane) -> Point {
    var self_1291: IdealPoint;
    var other_1113: PointAndPlane;

    self_1291 = self_1290;
    other_1113 = other_1112;
    let _e4: IdealPoint = self_1291;
    let _e8: PointAndPlane = other_1113;
    let _e19: IdealPoint = self_1291;
    let _e23: PointAndPlane = other_1113;
    let _e35: IdealPoint = self_1291;
    let _e39: PointAndPlane = other_1113;
    return Point(((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.x) * _e39.g1_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn ideal_point_squared_magnitude(self_1292: IdealPoint) -> Scalar {
    var self_1293: IdealPoint;

    self_1293 = self_1292;
    let _e2: IdealPoint = self_1293;
    let _e3: IdealPoint = self_1293;
    let _e4: IdealPoint = ideal_point_reversal(_e3);
    let _e5: Scalar = ideal_point_ideal_point_scalar_product(_e2, _e4);
    return _e5;
}

fn ideal_point_magnitude(self_1294: IdealPoint) -> Scalar {
    var self_1295: IdealPoint;

    self_1295 = self_1294;
    let _e2: IdealPoint = self_1295;
    let _e3: Scalar = ideal_point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn ideal_point_bulk_norm(self_1296: IdealPoint) -> Scalar {
    var self_1297: IdealPoint;

    self_1297 = self_1296;
    let _e2: IdealPoint = self_1297;
    let _e3: Scalar = ideal_point_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn ideal_point_squared_anti_magnitude(self_1298: IdealPoint) -> AntiScalar {
    var self_1299: IdealPoint;

    self_1299 = self_1298;
    let _e2: IdealPoint = self_1299;
    let _e3: IdealPoint = self_1299;
    let _e4: IdealPoint = ideal_point_anti_reversal(_e3);
    let _e5: AntiScalar = ideal_point_ideal_point_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn ideal_point_weight_norm(self_1300: IdealPoint) -> AntiScalar {
    var self_1301: IdealPoint;

    self_1301 = self_1300;
    let _e2: IdealPoint = self_1301;
    let _e3: AntiScalar = ideal_point_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn ideal_point_scale(self_1302: IdealPoint, other_1114: f32) -> IdealPoint {
    var self_1303: IdealPoint;
    var other_1115: f32;

    self_1303 = self_1302;
    other_1115 = other_1114;
    let _e4: IdealPoint = self_1303;
    let _e5: f32 = other_1115;
    let _e7: IdealPoint = ideal_point_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn ideal_point_signum(self_1304: IdealPoint) -> IdealPoint {
    var self_1305: IdealPoint;

    self_1305 = self_1304;
    let _e2: IdealPoint = self_1305;
    let _e3: IdealPoint = self_1305;
    let _e4: Scalar = ideal_point_magnitude(_e3);
    let _e9: IdealPoint = ideal_point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn ideal_point_inverse(self_1306: IdealPoint) -> IdealPoint {
    var self_1307: IdealPoint;

    self_1307 = self_1306;
    let _e2: IdealPoint = self_1307;
    let _e3: IdealPoint = ideal_point_reversal(_e2);
    let _e4: IdealPoint = self_1307;
    let _e5: Scalar = ideal_point_squared_magnitude(_e4);
    let _e10: IdealPoint = ideal_point_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn ideal_point_unitize(self_1308: IdealPoint) -> IdealPoint {
    var self_1309: IdealPoint;

    self_1309 = self_1308;
    let _e2: IdealPoint = self_1309;
    let _e3: IdealPoint = self_1309;
    let _e4: AntiScalar = ideal_point_weight_norm(_e3);
    let _e9: IdealPoint = ideal_point_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_grade(self_1310: Plane) -> i32 {
    return 1;
}

fn plane_anti_grade(self_1311: Plane) -> i32 {
    return 3;
}

fn plane_neg(self_1312: Plane) -> Plane {
    var self_1313: Plane;

    self_1313 = self_1312;
    let _e2: Plane = self_1313;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_automorphism(self_1314: Plane) -> Plane {
    var self_1315: Plane;

    self_1315 = self_1314;
    let _e2: Plane = self_1315;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_reversal(self_1316: Plane) -> Plane {
    var self_1317: Plane;

    self_1317 = self_1316;
    let _e2: Plane = self_1317;
    return Plane(_e2.g0_);
}

fn plane_conjugation(self_1318: Plane) -> Plane {
    var self_1319: Plane;

    self_1319 = self_1318;
    let _e2: Plane = self_1319;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_dual(self_1320: Plane) -> Point {
    var self_1321: Plane;

    self_1321 = self_1320;
    let _e2: Plane = self_1321;
    return Point(_e2.g0_);
}

fn plane_anti_reversal(self_1322: Plane) -> Plane {
    var self_1323: Plane;

    self_1323 = self_1322;
    let _e2: Plane = self_1323;
    return Plane((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn plane_scalar_geometric_product(self_1324: Plane, other_1116: Scalar) -> Plane {
    var self_1325: Plane;
    var other_1117: Scalar;

    self_1325 = self_1324;
    other_1117 = other_1116;
    let _e4: Plane = self_1325;
    let _e6: Scalar = other_1117;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_outer_product(self_1326: Plane, other_1118: Scalar) -> Plane {
    var self_1327: Plane;
    var other_1119: Scalar;

    self_1327 = self_1326;
    other_1119 = other_1118;
    let _e4: Plane = self_1327;
    let _e6: Scalar = other_1119;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_inner_product(self_1328: Plane, other_1120: Scalar) -> Plane {
    var self_1329: Plane;
    var other_1121: Scalar;

    self_1329 = self_1328;
    other_1121 = other_1120;
    let _e4: Plane = self_1329;
    let _e6: Scalar = other_1121;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_geometric_anti_product(self_1330: Plane, other_1122: Scalar) -> Point {
    var self_1331: Plane;
    var other_1123: Scalar;

    self_1331 = self_1330;
    other_1123 = other_1122;
    let _e4: Plane = self_1331;
    let _e6: Scalar = other_1123;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn plane_scalar_inner_anti_product(self_1332: Plane, other_1124: Scalar) -> Point {
    var self_1333: Plane;
    var other_1125: Scalar;

    self_1333 = self_1332;
    other_1125 = other_1124;
    let _e4: Plane = self_1333;
    let _e6: Scalar = other_1125;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn plane_scalar_right_contraction(self_1334: Plane, other_1126: Scalar) -> Plane {
    var self_1335: Plane;
    var other_1127: Scalar;

    self_1335 = self_1334;
    other_1127 = other_1126;
    let _e4: Plane = self_1335;
    let _e6: Scalar = other_1127;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_scalar_left_anti_contraction(self_1336: Plane, other_1128: Scalar) -> Point {
    var self_1337: Plane;
    var other_1129: Scalar;

    self_1337 = self_1336;
    other_1129 = other_1128;
    let _e4: Plane = self_1337;
    let _e6: Scalar = other_1129;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))));
}

fn plane_anti_scalar_geometric_product(self_1338: Plane, other_1130: AntiScalar) -> Point {
    var self_1339: Plane;
    var other_1131: AntiScalar;

    self_1339 = self_1338;
    other_1131 = other_1130;
    let _e4: Plane = self_1339;
    let _e6: AntiScalar = other_1131;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_regressive_product(self_1340: Plane, other_1132: AntiScalar) -> Plane {
    var self_1341: Plane;
    var other_1133: AntiScalar;

    self_1341 = self_1340;
    other_1133 = other_1132;
    let _e4: Plane = self_1341;
    let _e6: AntiScalar = other_1133;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_inner_product(self_1342: Plane, other_1134: AntiScalar) -> Point {
    var self_1343: Plane;
    var other_1135: AntiScalar;

    self_1343 = self_1342;
    other_1135 = other_1134;
    let _e4: Plane = self_1343;
    let _e6: AntiScalar = other_1135;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_geometric_anti_product(self_1344: Plane, other_1136: AntiScalar) -> Plane {
    var self_1345: Plane;
    var other_1137: AntiScalar;

    self_1345 = self_1344;
    other_1137 = other_1136;
    let _e4: Plane = self_1345;
    let _e6: AntiScalar = other_1137;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_inner_anti_product(self_1346: Plane, other_1138: AntiScalar) -> Plane {
    var self_1347: Plane;
    var other_1139: AntiScalar;

    self_1347 = self_1346;
    other_1139 = other_1138;
    let _e4: Plane = self_1347;
    let _e6: AntiScalar = other_1139;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_left_contraction(self_1348: Plane, other_1140: AntiScalar) -> Point {
    var self_1349: Plane;
    var other_1141: AntiScalar;

    self_1349 = self_1348;
    other_1141 = other_1140;
    let _e4: Plane = self_1349;
    let _e6: AntiScalar = other_1141;
    return Point((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_anti_scalar_right_anti_contraction(self_1350: Plane, other_1142: AntiScalar) -> Plane {
    var self_1351: Plane;
    var other_1143: AntiScalar;

    self_1351 = self_1350;
    other_1143 = other_1142;
    let _e4: Plane = self_1351;
    let _e6: AntiScalar = other_1143;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn plane_multi_vector_add(self_1352: Plane, other_1144: MultiVector) -> MultiVector {
    var self_1353: Plane;
    var other_1145: MultiVector;

    self_1353 = self_1352;
    other_1145 = other_1144;
    let _e4: MultiVector = other_1145;
    let _e6: Plane = self_1353;
    let _e16: MultiVector = other_1145;
    let _e19: Plane = self_1353;
    let _e27: MultiVector = other_1145;
    let _e30: MultiVector = other_1145;
    return MultiVector(_e4.g0_, ((vec4<f32>(_e6.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e16.g1_), ((_e19.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e27.g2_), _e30.g3_);
}

fn plane_multi_vector_sub(self_1354: Plane, other_1146: MultiVector) -> MultiVector {
    var self_1355: Plane;
    var other_1147: MultiVector;

    self_1355 = self_1354;
    other_1147 = other_1146;
    let _e6: MultiVector = other_1147;
    let _e9: Plane = self_1355;
    let _e19: MultiVector = other_1147;
    let _e22: Plane = self_1355;
    let _e30: MultiVector = other_1147;
    let _e35: MultiVector = other_1147;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), ((vec4<f32>(_e9.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e19.g1_), ((_e22.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e30.g2_), (vec4<f32>(0.0) - _e35.g3_));
}

fn plane_multi_vector_geometric_product(self_1356: Plane, other_1148: MultiVector) -> MultiVector {
    var self_1357: Plane;
    var other_1149: MultiVector;

    self_1357 = self_1356;
    other_1149 = other_1148;
    let _e4: Plane = self_1357;
    let _e8: MultiVector = other_1149;
    let _e20: Plane = self_1357;
    let _e24: MultiVector = other_1149;
    let _e36: Plane = self_1357;
    let _e40: MultiVector = other_1149;
    let _e52: Plane = self_1357;
    let _e56: MultiVector = other_1149;
    let _e68: Plane = self_1357;
    let _e72: MultiVector = other_1149;
    let _e84: Plane = self_1357;
    let _e88: MultiVector = other_1149;
    let _e101: Plane = self_1357;
    let _e105: MultiVector = other_1149;
    let _e118: Plane = self_1357;
    let _e122: MultiVector = other_1149;
    let _e135: Plane = self_1357;
    let _e139: MultiVector = other_1149;
    let _e142: Plane = self_1357;
    let _e146: MultiVector = other_1149;
    let _e158: Plane = self_1357;
    let _e162: MultiVector = other_1149;
    let _e174: Plane = self_1357;
    let _e178: MultiVector = other_1149;
    let _e190: Plane = self_1357;
    let _e194: MultiVector = other_1149;
    let _e197: Plane = self_1357;
    let _e201: MultiVector = other_1149;
    let _e214: Plane = self_1357;
    let _e218: MultiVector = other_1149;
    let _e231: Plane = self_1357;
    let _e235: MultiVector = other_1149;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g2_.yxwz) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e36.g0_.z) * _e40.g2_.zwxy) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e52.g0_.w) * _e56.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), (((((vec4<f32>(_e68.g0_.x) * _e72.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e84.g0_.y) * _e88.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e101.g0_.z) * _e105.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e118.g0_.w) * _e122.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))), ((((vec4<f32>(_e135.g0_.x) * _e139.g3_) + ((vec4<f32>(_e142.g0_.y) * _e146.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e158.g0_.z) * _e162.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e174.g0_.w) * _e178.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e190.g0_.x) * _e194.g2_) + ((vec4<f32>(_e197.g0_.y) * _e201.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e214.g0_.z) * _e218.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e231.g0_.w) * _e235.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_multi_vector_geometric_anti_product(self_1358: Plane, other_1150: MultiVector) -> MultiVector {
    var self_1359: Plane;
    var other_1151: MultiVector;

    self_1359 = self_1358;
    other_1151 = other_1150;
    let _e4: Plane = self_1359;
    let _e8: MultiVector = other_1151;
    let _e20: Plane = self_1359;
    let _e24: MultiVector = other_1151;
    let _e36: Plane = self_1359;
    let _e40: MultiVector = other_1151;
    let _e52: Plane = self_1359;
    let _e56: MultiVector = other_1151;
    let _e68: Plane = self_1359;
    let _e72: MultiVector = other_1151;
    let _e75: Plane = self_1359;
    let _e79: MultiVector = other_1151;
    let _e93: Plane = self_1359;
    let _e97: MultiVector = other_1151;
    let _e111: Plane = self_1359;
    let _e115: MultiVector = other_1151;
    let _e129: Plane = self_1359;
    let _e133: MultiVector = other_1151;
    let _e143: Plane = self_1359;
    let _e147: MultiVector = other_1151;
    let _e160: Plane = self_1359;
    let _e164: MultiVector = other_1151;
    let _e177: Plane = self_1359;
    let _e181: MultiVector = other_1151;
    let _e196: Plane = self_1359;
    let _e200: MultiVector = other_1151;
    let _e204: Plane = self_1359;
    let _e208: MultiVector = other_1151;
    let _e221: Plane = self_1359;
    let _e225: MultiVector = other_1151;
    let _e238: Plane = self_1359;
    let _e242: MultiVector = other_1151;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g2_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e68.g0_.x) * _e72.g3_) + ((vec4<f32>(_e75.g0_.y) * _e79.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e93.g0_.z) * _e97.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e111.g0_.w) * _e115.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e129.g0_.x) * _e133.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e143.g0_.y) * _e147.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e160.g0_.z) * _e164.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e177.g0_.w) * _e181.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(0.0) - (vec4<f32>(_e196.g0_.x) * _e200.g1_)) + ((vec4<f32>(_e204.g0_.y) * _e208.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e221.g0_.z) * _e225.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e238.g0_.w) * _e242.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn plane_multi_vector_scalar_product(self_1360: Plane, other_1152: MultiVector) -> Scalar {
    var self_1361: Plane;
    var other_1153: MultiVector;

    self_1361 = self_1360;
    other_1153 = other_1152;
    let _e4: Plane = self_1361;
    let _e7: MultiVector = other_1153;
    let _e11: Plane = self_1361;
    let _e14: MultiVector = other_1153;
    let _e19: Plane = self_1361;
    let _e22: MultiVector = other_1153;
    let _e27: Plane = self_1361;
    let _e30: MultiVector = other_1153;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g2_.y)) + (_e19.g0_.z * _e22.g2_.z)) + (_e27.g0_.w * _e30.g2_.w)));
}

fn plane_multi_vector_anti_scalar_product(self_1362: Plane, other_1154: MultiVector) -> AntiScalar {
    var self_1363: Plane;
    var other_1155: MultiVector;

    self_1363 = self_1362;
    other_1155 = other_1154;
    let _e5: Plane = self_1363;
    let _e8: MultiVector = other_1155;
    let _e13: Plane = self_1363;
    let _e16: MultiVector = other_1155;
    let _e21: Plane = self_1363;
    let _e24: MultiVector = other_1155;
    let _e29: Plane = self_1363;
    let _e32: MultiVector = other_1155;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g2_.y)) - (_e21.g0_.z * _e24.g2_.z)) - (_e29.g0_.w * _e32.g2_.w)));
}

fn plane_rotor_geometric_product(self_1364: Plane, other_1156: Rotor) -> PointAndPlane {
    var self_1365: Plane;
    var other_1157: Rotor;

    self_1365 = self_1364;
    other_1157 = other_1156;
    let _e4: Plane = self_1365;
    let _e8: Rotor = other_1157;
    let _e19: Plane = self_1365;
    let _e23: Rotor = other_1157;
    let _e35: Plane = self_1365;
    let _e38: Rotor = other_1157;
    let _e52: Plane = self_1365;
    let _e56: Rotor = other_1157;
    let _e67: Plane = self_1365;
    let _e71: Rotor = other_1157;
    let _e83: Plane = self_1365;
    let _e86: Rotor = other_1157;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * vec4<f32>(_e23.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e35.g0_.yxxx * _e38.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e52.g0_.z) * _e56.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e67.g0_.w) * _e71.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e83.g0_.xyyy * _e86.g0_.xxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_rotor_outer_product(self_1366: Plane, other_1158: Rotor) -> PointAndPlane {
    var self_1367: Plane;
    var other_1159: Rotor;

    self_1367 = self_1366;
    other_1159 = other_1158;
    let _e4: Plane = self_1367;
    let _e8: Rotor = other_1159;
    let _e19: Plane = self_1367;
    let _e23: Rotor = other_1159;
    let _e35: Plane = self_1367;
    let _e38: Rotor = other_1159;
    let _e52: Plane = self_1367;
    let _e54: Rotor = other_1159;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * vec4<f32>(_e23.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e35.g0_.yxxx * _e38.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), (_e52.g0_ * vec4<f32>(_e54.g0_.x)));
}

fn plane_rotor_inner_product(self_1368: Plane, other_1160: Rotor) -> Plane {
    var self_1369: Plane;
    var other_1161: Rotor;

    self_1369 = self_1368;
    other_1161 = other_1160;
    let _e4: Plane = self_1369;
    let _e8: Rotor = other_1161;
    let _e19: Plane = self_1369;
    let _e23: Rotor = other_1161;
    let _e35: Plane = self_1369;
    let _e38: Rotor = other_1161;
    return Plane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e35.g0_.xyyy * _e38.g0_.xxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))));
}

fn plane_rotor_geometric_anti_product(self_1370: Plane, other_1162: Rotor) -> PointAndPlane {
    var self_1371: Plane;
    var other_1163: Rotor;

    self_1371 = self_1370;
    other_1163 = other_1162;
    let _e4: Plane = self_1371;
    let _e8: Rotor = other_1163;
    let _e20: Plane = self_1371;
    let _e24: Rotor = other_1163;
    let _e37: Plane = self_1371;
    let _e40: Rotor = other_1163;
    let _e54: Plane = self_1371;
    let _e58: Rotor = other_1163;
    let _e70: Plane = self_1371;
    let _e74: Rotor = other_1163;
    let _e87: Plane = self_1371;
    let _e90: Rotor = other_1163;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e20.g0_.w) * _e24.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e37.g0_.xyyy * _e40.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), ((((vec4<f32>(_e54.g0_.z) * vec4<f32>(_e58.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e70.g0_.w) * vec4<f32>(_e74.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e87.g0_.yxxx * _e90.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_rotor_inner_anti_product(self_1372: Plane, other_1164: Rotor) -> Point {
    var self_1373: Plane;
    var other_1165: Rotor;

    self_1373 = self_1372;
    other_1165 = other_1164;
    let _e4: Plane = self_1373;
    let _e8: Rotor = other_1165;
    let _e20: Plane = self_1373;
    let _e24: Rotor = other_1165;
    let _e37: Plane = self_1373;
    let _e40: Rotor = other_1165;
    return Point(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e20.g0_.w) * _e24.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e37.g0_.xyyy * _e40.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))));
}

fn plane_rotor_right_contraction(self_1374: Plane, other_1166: Rotor) -> Plane {
    var self_1375: Plane;
    var other_1167: Rotor;

    self_1375 = self_1374;
    other_1167 = other_1166;
    let _e4: Plane = self_1375;
    let _e6: Rotor = other_1167;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_rotor_left_anti_contraction(self_1376: Plane, other_1168: Rotor) -> Point {
    var self_1377: Plane;
    var other_1169: Rotor;

    self_1377 = self_1376;
    other_1169 = other_1168;
    let _e4: Plane = self_1377;
    let _e6: Rotor = other_1169;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(-(1.0))));
}

fn plane_point_add(self_1378: Plane, other_1170: Point) -> PointAndPlane {
    var self_1379: Plane;
    var other_1171: Point;

    self_1379 = self_1378;
    other_1171 = other_1170;
    let _e4: Point = other_1171;
    let _e6: Plane = self_1379;
    return PointAndPlane(_e4.g0_, _e6.g0_);
}

fn plane_point_sub(self_1380: Plane, other_1172: Point) -> PointAndPlane {
    var self_1381: Plane;
    var other_1173: Point;

    self_1381 = self_1380;
    other_1173 = other_1172;
    let _e6: Point = other_1173;
    let _e9: Plane = self_1381;
    return PointAndPlane((vec4<f32>(0.0) - _e6.g0_), _e9.g0_);
}

fn plane_point_regressive_product(self_1382: Plane, other_1174: Point) -> Scalar {
    var self_1383: Plane;
    var other_1175: Point;

    self_1383 = self_1382;
    other_1175 = other_1174;
    let _e4: Plane = self_1383;
    let _e7: Point = other_1175;
    let _e11: Plane = self_1383;
    let _e14: Point = other_1175;
    let _e19: Plane = self_1383;
    let _e22: Point = other_1175;
    let _e27: Plane = self_1383;
    let _e30: Point = other_1175;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_point_outer_product(self_1384: Plane, other_1176: Point) -> AntiScalar {
    var self_1385: Plane;
    var other_1177: Point;

    self_1385 = self_1384;
    other_1177 = other_1176;
    let _e4: Plane = self_1385;
    let _e7: Point = other_1177;
    let _e11: Plane = self_1385;
    let _e14: Point = other_1177;
    let _e19: Plane = self_1385;
    let _e22: Point = other_1177;
    let _e27: Plane = self_1385;
    let _e30: Point = other_1177;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_point_inner_product(self_1386: Plane, other_1178: Point) -> Line {
    var self_1387: Plane;
    var other_1179: Point;

    self_1387 = self_1386;
    other_1179 = other_1178;
    let _e4: Plane = self_1387;
    let _e8: Point = other_1179;
    let _e11: Point = other_1179;
    let _e14: Point = other_1179;
    let _e25: Plane = self_1387;
    let _e29: Point = other_1179;
    let _e32: Point = other_1179;
    let _e35: Point = other_1179;
    let _e47: Plane = self_1387;
    let _e50: Plane = self_1387;
    let _e53: Plane = self_1387;
    let _e57: Point = other_1179;
    let _e60: Point = other_1179;
    let _e63: Point = other_1179;
    let _e77: Plane = self_1387;
    let _e81: Point = other_1179;
    let _e84: Point = other_1179;
    let _e87: Point = other_1179;
    let _e93: Plane = self_1387;
    let _e96: Plane = self_1387;
    let _e99: Plane = self_1387;
    let _e103: Point = other_1179;
    return Line(((((vec3<f32>(_e4.g0_.z) * vec3<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.y)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.w) * vec3<f32>(_e29.g0_.z, _e32.g0_.y, _e35.g0_.z)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.y) * vec3<f32>(_e57.g0_.x, _e60.g0_.w, _e63.g0_.z)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e77.g0_.x) * vec3<f32>(_e81.g0_.y, _e84.g0_.z, _e87.g0_.w))) + (vec3<f32>(_e93.g0_.y, _e96.g0_.z, _e99.g0_.w) * vec3<f32>(_e103.g0_.x))));
}

fn plane_point_inner_anti_product(self_1388: Plane, other_1180: Point) -> Line {
    var self_1389: Plane;
    var other_1181: Point;

    self_1389 = self_1388;
    other_1181 = other_1180;
    let _e6: Plane = self_1389;
    let _e10: Point = other_1181;
    let _e13: Point = other_1181;
    let _e16: Point = other_1181;
    let _e22: Plane = self_1389;
    let _e25: Plane = self_1389;
    let _e28: Plane = self_1389;
    let _e32: Point = other_1181;
    let _e38: Plane = self_1389;
    let _e42: Point = other_1181;
    let _e45: Point = other_1181;
    let _e48: Point = other_1181;
    let _e59: Plane = self_1389;
    let _e63: Point = other_1181;
    let _e66: Point = other_1181;
    let _e69: Point = other_1181;
    let _e81: Plane = self_1389;
    let _e84: Plane = self_1389;
    let _e87: Plane = self_1389;
    let _e91: Point = other_1181;
    let _e94: Point = other_1181;
    let _e97: Point = other_1181;
    return Line(((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.x) * vec3<f32>(_e10.g0_.y, _e13.g0_.z, _e16.g0_.w))) + (vec3<f32>(_e22.g0_.y, _e25.g0_.z, _e28.g0_.w) * vec3<f32>(_e32.g0_.x))), ((((vec3<f32>(_e38.g0_.z) * vec3<f32>(_e42.g0_.w, _e45.g0_.w, _e48.g0_.y)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e59.g0_.w) * vec3<f32>(_e63.g0_.z, _e66.g0_.y, _e69.g0_.z)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e81.g0_.x, _e84.g0_.y, _e87.g0_.y) * vec3<f32>(_e91.g0_.x, _e94.g0_.w, _e97.g0_.z)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn plane_point_left_contraction(self_1390: Plane, other_1182: Point) -> Line {
    var self_1391: Plane;
    var other_1183: Point;

    self_1391 = self_1390;
    other_1183 = other_1182;
    let _e4: Plane = self_1391;
    let _e8: Point = other_1183;
    let _e11: Point = other_1183;
    let _e14: Point = other_1183;
    let _e25: Plane = self_1391;
    let _e29: Point = other_1183;
    let _e32: Point = other_1183;
    let _e35: Point = other_1183;
    let _e47: Plane = self_1391;
    let _e50: Plane = self_1391;
    let _e53: Plane = self_1391;
    let _e57: Point = other_1183;
    let _e60: Point = other_1183;
    let _e63: Point = other_1183;
    let _e77: Plane = self_1391;
    let _e81: Point = other_1183;
    let _e84: Point = other_1183;
    let _e87: Point = other_1183;
    let _e93: Plane = self_1391;
    let _e96: Plane = self_1391;
    let _e99: Plane = self_1391;
    let _e103: Point = other_1183;
    return Line(((((vec3<f32>(_e4.g0_.z) * vec3<f32>(_e8.g0_.w, _e11.g0_.w, _e14.g0_.y)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e25.g0_.w) * vec3<f32>(_e29.g0_.z, _e32.g0_.y, _e35.g0_.z)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e47.g0_.x, _e50.g0_.y, _e53.g0_.y) * vec3<f32>(_e57.g0_.x, _e60.g0_.w, _e63.g0_.z)) * vec3<f32>(0.0, 1.0, -(1.0)))), ((vec3<f32>(0.0) - (vec3<f32>(_e77.g0_.x) * vec3<f32>(_e81.g0_.y, _e84.g0_.z, _e87.g0_.w))) + (vec3<f32>(_e93.g0_.y, _e96.g0_.z, _e99.g0_.w) * vec3<f32>(_e103.g0_.x))));
}

fn plane_point_right_anti_contraction(self_1392: Plane, other_1184: Point) -> Line {
    var self_1393: Plane;
    var other_1185: Point;

    self_1393 = self_1392;
    other_1185 = other_1184;
    let _e6: Plane = self_1393;
    let _e10: Point = other_1185;
    let _e13: Point = other_1185;
    let _e16: Point = other_1185;
    let _e22: Plane = self_1393;
    let _e25: Plane = self_1393;
    let _e28: Plane = self_1393;
    let _e32: Point = other_1185;
    let _e38: Plane = self_1393;
    let _e42: Point = other_1185;
    let _e45: Point = other_1185;
    let _e48: Point = other_1185;
    let _e59: Plane = self_1393;
    let _e63: Point = other_1185;
    let _e66: Point = other_1185;
    let _e69: Point = other_1185;
    let _e81: Plane = self_1393;
    let _e84: Plane = self_1393;
    let _e87: Plane = self_1393;
    let _e91: Point = other_1185;
    let _e94: Point = other_1185;
    let _e97: Point = other_1185;
    return Line(((vec3<f32>(0.0) - (vec3<f32>(_e6.g0_.x) * vec3<f32>(_e10.g0_.y, _e13.g0_.z, _e16.g0_.w))) + (vec3<f32>(_e22.g0_.y, _e25.g0_.z, _e28.g0_.w) * vec3<f32>(_e32.g0_.x))), ((((vec3<f32>(_e38.g0_.z) * vec3<f32>(_e42.g0_.w, _e45.g0_.w, _e48.g0_.y)) * vec3<f32>(-(1.0), 0.0, 1.0)) + ((vec3<f32>(_e59.g0_.w) * vec3<f32>(_e63.g0_.z, _e66.g0_.y, _e69.g0_.z)) * vec3<f32>(1.0, -(1.0), 0.0))) + ((vec3<f32>(_e81.g0_.x, _e84.g0_.y, _e87.g0_.y) * vec3<f32>(_e91.g0_.x, _e94.g0_.w, _e97.g0_.z)) * vec3<f32>(0.0, 1.0, -(1.0)))));
}

fn plane_ideal_point_inner_product(self_1394: Plane, other_1186: IdealPoint) -> Plane {
    var self_1395: Plane;
    var other_1187: IdealPoint;

    self_1395 = self_1394;
    other_1187 = other_1186;
    let _e4: Plane = self_1395;
    let _e8: IdealPoint = other_1187;
    let _e20: Plane = self_1395;
    let _e24: IdealPoint = other_1187;
    let _e37: Plane = self_1395;
    let _e40: IdealPoint = other_1187;
    let _e43: IdealPoint = other_1187;
    let _e46: IdealPoint = other_1187;
    let _e49: IdealPoint = other_1187;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_ideal_point_inner_anti_product(self_1396: Plane, other_1188: IdealPoint) -> Point {
    var self_1397: Plane;
    var other_1189: IdealPoint;

    self_1397 = self_1396;
    other_1189 = other_1188;
    let _e4: Plane = self_1397;
    let _e8: IdealPoint = other_1189;
    let _e20: Plane = self_1397;
    let _e24: IdealPoint = other_1189;
    let _e37: Plane = self_1397;
    let _e40: IdealPoint = other_1189;
    let _e43: IdealPoint = other_1189;
    let _e46: IdealPoint = other_1189;
    let _e49: IdealPoint = other_1189;
    return Point(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_ideal_point_left_contraction(self_1398: Plane, other_1190: IdealPoint) -> Plane {
    var self_1399: Plane;
    var other_1191: IdealPoint;

    self_1399 = self_1398;
    other_1191 = other_1190;
    let _e4: Plane = self_1399;
    let _e8: IdealPoint = other_1191;
    let _e20: Plane = self_1399;
    let _e24: IdealPoint = other_1191;
    let _e37: Plane = self_1399;
    let _e40: IdealPoint = other_1191;
    let _e43: IdealPoint = other_1191;
    let _e46: IdealPoint = other_1191;
    let _e49: IdealPoint = other_1191;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_ideal_point_right_anti_contraction(self_1400: Plane, other_1192: IdealPoint) -> Point {
    var self_1401: Plane;
    var other_1193: IdealPoint;

    self_1401 = self_1400;
    other_1193 = other_1192;
    let _e4: Plane = self_1401;
    let _e8: IdealPoint = other_1193;
    let _e20: Plane = self_1401;
    let _e24: IdealPoint = other_1193;
    let _e37: Plane = self_1401;
    let _e40: IdealPoint = other_1193;
    let _e43: IdealPoint = other_1193;
    let _e46: IdealPoint = other_1193;
    let _e49: IdealPoint = other_1193;
    return Point(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_plane_add(self_1402: Plane, other_1194: Plane) -> Plane {
    var self_1403: Plane;
    var other_1195: Plane;

    self_1403 = self_1402;
    other_1195 = other_1194;
    let _e4: Plane = self_1403;
    let _e6: Plane = other_1195;
    return Plane((_e4.g0_ + _e6.g0_));
}

fn plane_plane_sub(self_1404: Plane, other_1196: Plane) -> Plane {
    var self_1405: Plane;
    var other_1197: Plane;

    self_1405 = self_1404;
    other_1197 = other_1196;
    let _e4: Plane = self_1405;
    let _e6: Plane = other_1197;
    return Plane((_e4.g0_ - _e6.g0_));
}

fn plane_plane_mul(self_1406: Plane, other_1198: Plane) -> Plane {
    var self_1407: Plane;
    var other_1199: Plane;

    self_1407 = self_1406;
    other_1199 = other_1198;
    let _e4: Plane = self_1407;
    let _e6: Plane = other_1199;
    return Plane((_e4.g0_ * _e6.g0_));
}

fn plane_plane_div(self_1408: Plane, other_1200: Plane) -> Plane {
    var self_1409: Plane;
    var other_1201: Plane;

    self_1409 = self_1408;
    other_1201 = other_1200;
    let _e4: Plane = self_1409;
    let _e7: Plane = self_1409;
    let _e10: Plane = self_1409;
    let _e13: Plane = self_1409;
    let _e23: Plane = other_1201;
    let _e26: Plane = other_1201;
    let _e29: Plane = other_1201;
    let _e32: Plane = other_1201;
    return Plane((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn plane_plane_outer_product(self_1410: Plane, other_1202: Plane) -> Line {
    var self_1411: Plane;
    var other_1203: Plane;

    self_1411 = self_1410;
    other_1203 = other_1202;
    let _e4: Plane = self_1411;
    let _e8: Plane = other_1203;
    let _e11: Plane = other_1203;
    let _e14: Plane = other_1203;
    let _e19: Plane = self_1411;
    let _e22: Plane = self_1411;
    let _e25: Plane = self_1411;
    let _e29: Plane = other_1203;
    let _e39: Plane = self_1411;
    let _e43: Plane = other_1203;
    let _e46: Plane = other_1203;
    let _e49: Plane = other_1203;
    let _e60: Plane = self_1411;
    let _e64: Plane = other_1203;
    let _e67: Plane = other_1203;
    let _e70: Plane = other_1203;
    let _e82: Plane = self_1411;
    let _e85: Plane = self_1411;
    let _e88: Plane = self_1411;
    let _e92: Plane = other_1203;
    let _e95: Plane = other_1203;
    let _e98: Plane = other_1203;
    return Line(((vec3<f32>(_e4.g0_.x) * vec3<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.w)) + ((vec3<f32>(_e19.g0_.y, _e22.g0_.z, _e25.g0_.w) * vec3<f32>(_e29.g0_.x)) * vec3<f32>(-(1.0)))), ((((vec3<f32>(_e39.g0_.z) * vec3<f32>(_e43.g0_.w, _e46.g0_.w, _e49.g0_.y)) * vec3<f32>(1.0, 0.0, -(1.0))) + ((vec3<f32>(_e60.g0_.w) * vec3<f32>(_e64.g0_.z, _e67.g0_.y, _e70.g0_.z)) * vec3<f32>(-(1.0), 1.0, 0.0))) + ((vec3<f32>(_e82.g0_.x, _e85.g0_.y, _e88.g0_.y) * vec3<f32>(_e92.g0_.x, _e95.g0_.w, _e98.g0_.z)) * vec3<f32>(0.0, -(1.0), 1.0))));
}

fn plane_plane_inner_product(self_1412: Plane, other_1204: Plane) -> Scalar {
    var self_1413: Plane;
    var other_1205: Plane;

    self_1413 = self_1412;
    other_1205 = other_1204;
    let _e4: Plane = self_1413;
    let _e7: Plane = other_1205;
    let _e11: Plane = self_1413;
    let _e14: Plane = other_1205;
    let _e19: Plane = self_1413;
    let _e22: Plane = other_1205;
    let _e27: Plane = self_1413;
    let _e30: Plane = other_1205;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_plane_inner_anti_product(self_1414: Plane, other_1206: Plane) -> AntiScalar {
    var self_1415: Plane;
    var other_1207: Plane;

    self_1415 = self_1414;
    other_1207 = other_1206;
    let _e5: Plane = self_1415;
    let _e8: Plane = other_1207;
    let _e13: Plane = self_1415;
    let _e16: Plane = other_1207;
    let _e21: Plane = self_1415;
    let _e24: Plane = other_1207;
    let _e29: Plane = self_1415;
    let _e32: Plane = other_1207;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_plane_left_contraction(self_1416: Plane, other_1208: Plane) -> Scalar {
    var self_1417: Plane;
    var other_1209: Plane;

    self_1417 = self_1416;
    other_1209 = other_1208;
    let _e4: Plane = self_1417;
    let _e7: Plane = other_1209;
    let _e11: Plane = self_1417;
    let _e14: Plane = other_1209;
    let _e19: Plane = self_1417;
    let _e22: Plane = other_1209;
    let _e27: Plane = self_1417;
    let _e30: Plane = other_1209;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_plane_right_contraction(self_1418: Plane, other_1210: Plane) -> Scalar {
    var self_1419: Plane;
    var other_1211: Plane;

    self_1419 = self_1418;
    other_1211 = other_1210;
    let _e4: Plane = self_1419;
    let _e7: Plane = other_1211;
    let _e11: Plane = self_1419;
    let _e14: Plane = other_1211;
    let _e19: Plane = self_1419;
    let _e22: Plane = other_1211;
    let _e27: Plane = self_1419;
    let _e30: Plane = other_1211;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_plane_left_anti_contraction(self_1420: Plane, other_1212: Plane) -> AntiScalar {
    var self_1421: Plane;
    var other_1213: Plane;

    self_1421 = self_1420;
    other_1213 = other_1212;
    let _e5: Plane = self_1421;
    let _e8: Plane = other_1213;
    let _e13: Plane = self_1421;
    let _e16: Plane = other_1213;
    let _e21: Plane = self_1421;
    let _e24: Plane = other_1213;
    let _e29: Plane = self_1421;
    let _e32: Plane = other_1213;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_plane_right_anti_contraction(self_1422: Plane, other_1214: Plane) -> AntiScalar {
    var self_1423: Plane;
    var other_1215: Plane;

    self_1423 = self_1422;
    other_1215 = other_1214;
    let _e5: Plane = self_1423;
    let _e8: Plane = other_1215;
    let _e13: Plane = self_1423;
    let _e16: Plane = other_1215;
    let _e21: Plane = self_1423;
    let _e24: Plane = other_1215;
    let _e29: Plane = self_1423;
    let _e32: Plane = other_1215;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_plane_scalar_product(self_1424: Plane, other_1216: Plane) -> Scalar {
    var self_1425: Plane;
    var other_1217: Plane;

    self_1425 = self_1424;
    other_1217 = other_1216;
    let _e4: Plane = self_1425;
    let _e7: Plane = other_1217;
    let _e11: Plane = self_1425;
    let _e14: Plane = other_1217;
    let _e19: Plane = self_1425;
    let _e22: Plane = other_1217;
    let _e27: Plane = self_1425;
    let _e30: Plane = other_1217;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_plane_anti_scalar_product(self_1426: Plane, other_1218: Plane) -> AntiScalar {
    var self_1427: Plane;
    var other_1219: Plane;

    self_1427 = self_1426;
    other_1219 = other_1218;
    let _e5: Plane = self_1427;
    let _e8: Plane = other_1219;
    let _e13: Plane = self_1427;
    let _e16: Plane = other_1219;
    let _e21: Plane = self_1427;
    let _e24: Plane = other_1219;
    let _e29: Plane = self_1427;
    let _e32: Plane = other_1219;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn plane_line_geometric_product(self_1428: Plane, other_1220: Line) -> PointAndPlane {
    var self_1429: Plane;
    var other_1221: Line;

    self_1429 = self_1428;
    other_1221 = other_1220;
    let _e4: Plane = self_1429;
    let _e8: Line = other_1221;
    let _e11: Line = other_1221;
    let _e14: Line = other_1221;
    let _e17: Line = other_1221;
    let _e29: Plane = self_1429;
    let _e33: Line = other_1221;
    let _e36: Line = other_1221;
    let _e39: Line = other_1221;
    let _e42: Line = other_1221;
    let _e55: Plane = self_1429;
    let _e59: Line = other_1221;
    let _e62: Line = other_1221;
    let _e65: Line = other_1221;
    let _e68: Line = other_1221;
    let _e81: Plane = self_1429;
    let _e85: Line = other_1221;
    let _e88: Line = other_1221;
    let _e91: Line = other_1221;
    let _e94: Line = other_1221;
    let _e109: Plane = self_1429;
    let _e113: Line = other_1221;
    let _e116: Line = other_1221;
    let _e119: Line = other_1221;
    let _e122: Line = other_1221;
    let _e135: Plane = self_1429;
    let _e139: Line = other_1221;
    let _e142: Line = other_1221;
    let _e145: Line = other_1221;
    let _e148: Line = other_1221;
    let _e162: Plane = self_1429;
    let _e166: Line = other_1221;
    let _e169: Line = other_1221;
    let _e172: Line = other_1221;
    let _e175: Line = other_1221;
    let _e189: Plane = self_1429;
    let _e193: Line = other_1221;
    let _e196: Line = other_1221;
    let _e199: Line = other_1221;
    let _e202: Line = other_1221;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g0_.y, _e142.g1_.z, _e145.g0_.y, _e148.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g0_.z, _e169.g1_.y, _e172.g1_.x, _e175.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_line_outer_product(self_1430: Plane, other_1222: Line) -> Point {
    var self_1431: Plane;
    var other_1223: Line;

    self_1431 = self_1430;
    other_1223 = other_1222;
    let _e4: Plane = self_1431;
    let _e8: Line = other_1223;
    let _e11: Line = other_1223;
    let _e14: Line = other_1223;
    let _e17: Line = other_1223;
    let _e29: Plane = self_1431;
    let _e33: Line = other_1223;
    let _e36: Line = other_1223;
    let _e39: Line = other_1223;
    let _e42: Line = other_1223;
    let _e55: Plane = self_1431;
    let _e59: Line = other_1223;
    let _e62: Line = other_1223;
    let _e65: Line = other_1223;
    let _e68: Line = other_1223;
    let _e81: Plane = self_1431;
    let _e85: Line = other_1223;
    let _e88: Line = other_1223;
    let _e91: Line = other_1223;
    let _e94: Line = other_1223;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn plane_line_inner_product(self_1432: Plane, other_1224: Line) -> Plane {
    var self_1433: Plane;
    var other_1225: Line;

    self_1433 = self_1432;
    other_1225 = other_1224;
    let _e4: Plane = self_1433;
    let _e8: Line = other_1225;
    let _e11: Line = other_1225;
    let _e14: Line = other_1225;
    let _e17: Line = other_1225;
    let _e30: Plane = self_1433;
    let _e34: Line = other_1225;
    let _e37: Line = other_1225;
    let _e40: Line = other_1225;
    let _e43: Line = other_1225;
    let _e57: Plane = self_1433;
    let _e61: Line = other_1225;
    let _e64: Line = other_1225;
    let _e67: Line = other_1225;
    let _e70: Line = other_1225;
    let _e84: Plane = self_1433;
    let _e88: Line = other_1225;
    let _e91: Line = other_1225;
    let _e94: Line = other_1225;
    let _e97: Line = other_1225;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_line_geometric_anti_product(self_1434: Plane, other_1226: Line) -> PointAndPlane {
    var self_1435: Plane;
    var other_1227: Line;

    self_1435 = self_1434;
    other_1227 = other_1226;
    let _e4: Plane = self_1435;
    let _e8: Line = other_1227;
    let _e11: Line = other_1227;
    let _e14: Line = other_1227;
    let _e17: Line = other_1227;
    let _e30: Plane = self_1435;
    let _e34: Line = other_1227;
    let _e37: Line = other_1227;
    let _e40: Line = other_1227;
    let _e43: Line = other_1227;
    let _e57: Plane = self_1435;
    let _e61: Line = other_1227;
    let _e64: Line = other_1227;
    let _e67: Line = other_1227;
    let _e70: Line = other_1227;
    let _e84: Plane = self_1435;
    let _e88: Line = other_1227;
    let _e91: Line = other_1227;
    let _e94: Line = other_1227;
    let _e97: Line = other_1227;
    let _e109: Plane = self_1435;
    let _e113: Line = other_1227;
    let _e116: Line = other_1227;
    let _e119: Line = other_1227;
    let _e122: Line = other_1227;
    let _e135: Plane = self_1435;
    let _e139: Line = other_1227;
    let _e142: Line = other_1227;
    let _e145: Line = other_1227;
    let _e148: Line = other_1227;
    let _e162: Plane = self_1435;
    let _e166: Line = other_1227;
    let _e169: Line = other_1227;
    let _e172: Line = other_1227;
    let _e175: Line = other_1227;
    let _e189: Plane = self_1435;
    let _e193: Line = other_1227;
    let _e196: Line = other_1227;
    let _e199: Line = other_1227;
    let _e202: Line = other_1227;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.x, _e116.g1_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g1_.y, _e142.g0_.z, _e145.g1_.y, _e148.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g1_.z, _e169.g0_.y, _e172.g0_.x, _e175.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g1_.x, _e196.g1_.x, _e199.g1_.y, _e202.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_line_inner_anti_product(self_1436: Plane, other_1228: Line) -> Point {
    var self_1437: Plane;
    var other_1229: Line;

    self_1437 = self_1436;
    other_1229 = other_1228;
    let _e4: Plane = self_1437;
    let _e8: Line = other_1229;
    let _e11: Line = other_1229;
    let _e14: Line = other_1229;
    let _e17: Line = other_1229;
    let _e30: Plane = self_1437;
    let _e34: Line = other_1229;
    let _e37: Line = other_1229;
    let _e40: Line = other_1229;
    let _e43: Line = other_1229;
    let _e57: Plane = self_1437;
    let _e61: Line = other_1229;
    let _e64: Line = other_1229;
    let _e67: Line = other_1229;
    let _e70: Line = other_1229;
    let _e84: Plane = self_1437;
    let _e88: Line = other_1229;
    let _e91: Line = other_1229;
    let _e94: Line = other_1229;
    let _e97: Line = other_1229;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_line_left_contraction(self_1438: Plane, other_1230: Line) -> Plane {
    var self_1439: Plane;
    var other_1231: Line;

    self_1439 = self_1438;
    other_1231 = other_1230;
    let _e4: Plane = self_1439;
    let _e8: Line = other_1231;
    let _e11: Line = other_1231;
    let _e14: Line = other_1231;
    let _e17: Line = other_1231;
    let _e30: Plane = self_1439;
    let _e34: Line = other_1231;
    let _e37: Line = other_1231;
    let _e40: Line = other_1231;
    let _e43: Line = other_1231;
    let _e57: Plane = self_1439;
    let _e61: Line = other_1231;
    let _e64: Line = other_1231;
    let _e67: Line = other_1231;
    let _e70: Line = other_1231;
    let _e84: Plane = self_1439;
    let _e88: Line = other_1231;
    let _e91: Line = other_1231;
    let _e94: Line = other_1231;
    let _e97: Line = other_1231;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_line_right_anti_contraction(self_1440: Plane, other_1232: Line) -> Point {
    var self_1441: Plane;
    var other_1233: Line;

    self_1441 = self_1440;
    other_1233 = other_1232;
    let _e4: Plane = self_1441;
    let _e8: Line = other_1233;
    let _e11: Line = other_1233;
    let _e14: Line = other_1233;
    let _e17: Line = other_1233;
    let _e30: Plane = self_1441;
    let _e34: Line = other_1233;
    let _e37: Line = other_1233;
    let _e40: Line = other_1233;
    let _e43: Line = other_1233;
    let _e57: Plane = self_1441;
    let _e61: Line = other_1233;
    let _e64: Line = other_1233;
    let _e67: Line = other_1233;
    let _e70: Line = other_1233;
    let _e84: Plane = self_1441;
    let _e88: Line = other_1233;
    let _e91: Line = other_1233;
    let _e94: Line = other_1233;
    let _e97: Line = other_1233;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_translator_inner_product(self_1442: Plane, other_1234: Translator) -> Plane {
    var self_1443: Plane;
    var other_1235: Translator;

    self_1443 = self_1442;
    other_1235 = other_1234;
    let _e4: Plane = self_1443;
    let _e8: Translator = other_1235;
    let _e11: Plane = self_1443;
    let _e15: Translator = other_1235;
    let _e27: Plane = self_1443;
    let _e31: Translator = other_1235;
    let _e43: Plane = self_1443;
    let _e46: Translator = other_1235;
    return Plane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn plane_translator_inner_anti_product(self_1444: Plane, other_1236: Translator) -> Point {
    var self_1445: Plane;
    var other_1237: Translator;

    self_1445 = self_1444;
    other_1237 = other_1236;
    let _e4: Plane = self_1445;
    let _e8: Translator = other_1237;
    let _e18: Plane = self_1445;
    let _e22: Translator = other_1237;
    let _e35: Plane = self_1445;
    let _e39: Translator = other_1237;
    let _e52: Plane = self_1445;
    let _e55: Translator = other_1237;
    return Point((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e52.g0_.yyxx * _e55.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn plane_translator_left_contraction(self_1446: Plane, other_1238: Translator) -> Plane {
    var self_1447: Plane;
    var other_1239: Translator;

    self_1447 = self_1446;
    other_1239 = other_1238;
    let _e4: Plane = self_1447;
    let _e8: Translator = other_1239;
    let _e20: Plane = self_1447;
    let _e24: Translator = other_1239;
    let _e37: Plane = self_1447;
    let _e40: Translator = other_1239;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_translator_right_contraction(self_1448: Plane, other_1240: Translator) -> Plane {
    var self_1449: Plane;
    var other_1241: Translator;

    self_1449 = self_1448;
    other_1241 = other_1240;
    let _e4: Plane = self_1449;
    let _e6: Translator = other_1241;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_translator_left_anti_contraction(self_1450: Plane, other_1242: Translator) -> Point {
    var self_1451: Plane;
    var other_1243: Translator;

    self_1451 = self_1450;
    other_1243 = other_1242;
    let _e4: Plane = self_1451;
    let _e6: Translator = other_1243;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(-(1.0))));
}

fn plane_translator_right_anti_contraction(self_1452: Plane, other_1244: Translator) -> Point {
    var self_1453: Plane;
    var other_1245: Translator;

    self_1453 = self_1452;
    other_1245 = other_1244;
    let _e4: Plane = self_1453;
    let _e8: Translator = other_1245;
    let _e20: Plane = self_1453;
    let _e24: Translator = other_1245;
    let _e37: Plane = self_1453;
    let _e40: Translator = other_1245;
    return Point(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn plane_motor_geometric_product(self_1454: Plane, other_1246: Motor) -> PointAndPlane {
    var self_1455: Plane;
    var other_1247: Motor;

    self_1455 = self_1454;
    other_1247 = other_1246;
    let _e4: Plane = self_1455;
    let _e8: Motor = other_1247;
    let _e11: Motor = other_1247;
    let _e14: Motor = other_1247;
    let _e17: Motor = other_1247;
    let _e31: Plane = self_1455;
    let _e35: Motor = other_1247;
    let _e38: Motor = other_1247;
    let _e41: Motor = other_1247;
    let _e44: Motor = other_1247;
    let _e57: Plane = self_1455;
    let _e61: Motor = other_1247;
    let _e64: Motor = other_1247;
    let _e67: Motor = other_1247;
    let _e70: Motor = other_1247;
    let _e83: Plane = self_1455;
    let _e87: Motor = other_1247;
    let _e90: Motor = other_1247;
    let _e93: Motor = other_1247;
    let _e96: Motor = other_1247;
    let _e109: Plane = self_1455;
    let _e113: Motor = other_1247;
    let _e116: Motor = other_1247;
    let _e119: Motor = other_1247;
    let _e122: Motor = other_1247;
    let _e127: Plane = self_1455;
    let _e131: Motor = other_1247;
    let _e134: Motor = other_1247;
    let _e137: Motor = other_1247;
    let _e140: Motor = other_1247;
    let _e154: Plane = self_1455;
    let _e158: Motor = other_1247;
    let _e161: Motor = other_1247;
    let _e164: Motor = other_1247;
    let _e167: Motor = other_1247;
    let _e181: Plane = self_1455;
    let _e185: Motor = other_1247;
    let _e188: Motor = other_1247;
    let _e191: Motor = other_1247;
    let _e194: Motor = other_1247;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e31.g0_.y) * vec4<f32>(_e35.g0_.y, _e38.g1_.x, _e41.g1_.w, _e44.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.z, _e64.g1_.w, _e67.g1_.x, _e70.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.w) * vec4<f32>(_e87.g0_.w, _e90.g1_.z, _e93.g1_.y, _e96.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec4<f32>(_e109.g0_.x) * vec4<f32>(_e113.g0_.x, _e116.g1_.y, _e119.g1_.z, _e122.g1_.w)) + ((vec4<f32>(_e127.g0_.y) * vec4<f32>(_e131.g1_.y, _e134.g0_.x, _e137.g0_.w, _e140.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e154.g0_.z) * vec4<f32>(_e158.g1_.z, _e161.g0_.w, _e164.g0_.x, _e167.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e181.g0_.w) * vec4<f32>(_e185.g1_.w, _e188.g0_.z, _e191.g0_.y, _e194.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn plane_motor_regressive_product(self_1456: Plane, other_1248: Motor) -> Plane {
    var self_1457: Plane;
    var other_1249: Motor;

    self_1457 = self_1456;
    other_1249 = other_1248;
    let _e4: Plane = self_1457;
    let _e6: Motor = other_1249;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g1_.x)));
}

fn plane_motor_outer_product(self_1458: Plane, other_1250: Motor) -> PointAndPlane {
    var self_1459: Plane;
    var other_1251: Motor;

    self_1459 = self_1458;
    other_1251 = other_1250;
    let _e4: Plane = self_1459;
    let _e8: Motor = other_1251;
    let _e11: Motor = other_1251;
    let _e14: Motor = other_1251;
    let _e17: Motor = other_1251;
    let _e29: Plane = self_1459;
    let _e33: Motor = other_1251;
    let _e36: Motor = other_1251;
    let _e39: Motor = other_1251;
    let _e42: Motor = other_1251;
    let _e55: Plane = self_1459;
    let _e59: Motor = other_1251;
    let _e62: Motor = other_1251;
    let _e65: Motor = other_1251;
    let _e68: Motor = other_1251;
    let _e81: Plane = self_1459;
    let _e85: Motor = other_1251;
    let _e98: Plane = self_1459;
    let _e100: Motor = other_1251;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.y, _e14.g1_.w, _e17.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.z, _e36.g1_.w, _e39.g0_.z, _e42.g1_.y)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.w, _e62.g1_.z, _e65.g1_.y, _e68.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * _e85.g0_) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (_e98.g0_ * vec4<f32>(_e100.g0_.x)));
}

fn plane_motor_inner_product(self_1460: Plane, other_1252: Motor) -> PointAndPlane {
    var self_1461: Plane;
    var other_1253: Motor;

    self_1461 = self_1460;
    other_1253 = other_1252;
    let _e4: Plane = self_1461;
    let _e6: Motor = other_1253;
    let _e11: Plane = self_1461;
    let _e15: Motor = other_1253;
    let _e18: Motor = other_1253;
    let _e21: Motor = other_1253;
    let _e24: Motor = other_1253;
    let _e29: Plane = self_1461;
    let _e33: Motor = other_1253;
    let _e36: Motor = other_1253;
    let _e39: Motor = other_1253;
    let _e42: Motor = other_1253;
    let _e56: Plane = self_1461;
    let _e60: Motor = other_1253;
    let _e63: Motor = other_1253;
    let _e66: Motor = other_1253;
    let _e69: Motor = other_1253;
    let _e83: Plane = self_1461;
    let _e87: Motor = other_1253;
    let _e90: Motor = other_1253;
    let _e93: Motor = other_1253;
    let _e96: Motor = other_1253;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g1_.x)), ((((vec4<f32>(_e11.g0_.x) * vec4<f32>(_e15.g0_.x, _e18.g1_.y, _e21.g1_.z, _e24.g1_.w)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g1_.y, _e36.g0_.x, _e39.g0_.w, _e42.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e56.g0_.z) * vec4<f32>(_e60.g1_.z, _e63.g0_.w, _e66.g0_.x, _e69.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e83.g0_.w) * vec4<f32>(_e87.g1_.w, _e90.g0_.z, _e93.g0_.y, _e96.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn plane_motor_geometric_anti_product(self_1462: Plane, other_1254: Motor) -> PointAndPlane {
    var self_1463: Plane;
    var other_1255: Motor;

    self_1463 = self_1462;
    other_1255 = other_1254;
    let _e4: Plane = self_1463;
    let _e8: Motor = other_1255;
    let _e11: Motor = other_1255;
    let _e14: Motor = other_1255;
    let _e17: Motor = other_1255;
    let _e29: Plane = self_1463;
    let _e33: Motor = other_1255;
    let _e36: Motor = other_1255;
    let _e39: Motor = other_1255;
    let _e42: Motor = other_1255;
    let _e57: Plane = self_1463;
    let _e61: Motor = other_1255;
    let _e64: Motor = other_1255;
    let _e67: Motor = other_1255;
    let _e70: Motor = other_1255;
    let _e85: Plane = self_1463;
    let _e89: Motor = other_1255;
    let _e92: Motor = other_1255;
    let _e95: Motor = other_1255;
    let _e98: Motor = other_1255;
    let _e113: Plane = self_1463;
    let _e117: Motor = other_1255;
    let _e120: Motor = other_1255;
    let _e123: Motor = other_1255;
    let _e126: Motor = other_1255;
    let _e131: Plane = self_1463;
    let _e135: Motor = other_1255;
    let _e138: Motor = other_1255;
    let _e141: Motor = other_1255;
    let _e144: Motor = other_1255;
    let _e158: Plane = self_1463;
    let _e162: Motor = other_1255;
    let _e165: Motor = other_1255;
    let _e168: Motor = other_1255;
    let _e171: Motor = other_1255;
    let _e185: Plane = self_1463;
    let _e189: Motor = other_1255;
    let _e192: Motor = other_1255;
    let _e195: Motor = other_1255;
    let _e198: Motor = other_1255;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g1_.y, _e36.g0_.x, _e39.g0_.w, _e42.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.z, _e64.g0_.w, _e67.g0_.x, _e70.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g1_.w, _e92.g0_.z, _e95.g0_.y, _e98.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e113.g0_.x) * vec4<f32>(_e117.g1_.x, _e120.g0_.y, _e123.g0_.z, _e126.g0_.w)) + ((vec4<f32>(_e131.g0_.y) * vec4<f32>(_e135.g0_.y, _e138.g1_.x, _e141.g1_.w, _e144.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e158.g0_.z) * vec4<f32>(_e162.g0_.z, _e165.g1_.w, _e168.g1_.x, _e171.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e185.g0_.w) * vec4<f32>(_e189.g0_.w, _e192.g1_.z, _e195.g1_.y, _e198.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn plane_motor_inner_anti_product(self_1464: Plane, other_1256: Motor) -> PointAndPlane {
    var self_1465: Plane;
    var other_1257: Motor;

    self_1465 = self_1464;
    other_1257 = other_1256;
    let _e4: Plane = self_1465;
    let _e8: Motor = other_1257;
    let _e11: Motor = other_1257;
    let _e14: Motor = other_1257;
    let _e17: Motor = other_1257;
    let _e29: Plane = self_1465;
    let _e33: Motor = other_1257;
    let _e36: Motor = other_1257;
    let _e39: Motor = other_1257;
    let _e42: Motor = other_1257;
    let _e57: Plane = self_1465;
    let _e61: Motor = other_1257;
    let _e64: Motor = other_1257;
    let _e67: Motor = other_1257;
    let _e70: Motor = other_1257;
    let _e85: Plane = self_1465;
    let _e89: Motor = other_1257;
    let _e92: Motor = other_1257;
    let _e95: Motor = other_1257;
    let _e98: Motor = other_1257;
    let _e113: Plane = self_1465;
    let _e115: Motor = other_1257;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g1_.y, _e36.g0_.x, _e39.g0_.w, _e42.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.z, _e64.g0_.w, _e67.g0_.x, _e70.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g1_.w, _e92.g0_.z, _e95.g0_.y, _e98.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (_e113.g0_ * vec4<f32>(_e115.g1_.x)));
}

fn plane_motor_left_contraction(self_1466: Plane, other_1258: Motor) -> PointAndPlane {
    var self_1467: Plane;
    var other_1259: Motor;

    self_1467 = self_1466;
    other_1259 = other_1258;
    let _e4: Plane = self_1467;
    let _e6: Motor = other_1259;
    let _e11: Plane = self_1467;
    let _e15: Motor = other_1259;
    let _e18: Motor = other_1259;
    let _e21: Motor = other_1259;
    let _e24: Motor = other_1259;
    let _e37: Plane = self_1467;
    let _e41: Motor = other_1259;
    let _e44: Motor = other_1259;
    let _e47: Motor = other_1259;
    let _e50: Motor = other_1259;
    let _e64: Plane = self_1467;
    let _e68: Motor = other_1259;
    let _e71: Motor = other_1259;
    let _e74: Motor = other_1259;
    let _e77: Motor = other_1259;
    let _e91: Plane = self_1467;
    let _e95: Motor = other_1259;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g1_.x)), (((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.y, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.z) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.z, _e50.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e64.g0_.w) * vec4<f32>(_e68.g1_.w, _e71.g0_.z, _e74.g0_.y, _e77.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e91.g0_.x) * _e95.g1_) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn plane_motor_right_contraction(self_1468: Plane, other_1260: Motor) -> Plane {
    var self_1469: Plane;
    var other_1261: Motor;

    self_1469 = self_1468;
    other_1261 = other_1260;
    let _e4: Plane = self_1469;
    let _e6: Motor = other_1261;
    return Plane((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn plane_motor_left_anti_contraction(self_1470: Plane, other_1262: Motor) -> Point {
    var self_1471: Plane;
    var other_1263: Motor;

    self_1471 = self_1470;
    other_1263 = other_1262;
    let _e4: Plane = self_1471;
    let _e6: Motor = other_1263;
    return Point(((_e4.g0_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(-(1.0))));
}

fn plane_motor_right_anti_contraction(self_1472: Plane, other_1264: Motor) -> PointAndPlane {
    var self_1473: Plane;
    var other_1265: Motor;

    self_1473 = self_1472;
    other_1265 = other_1264;
    let _e4: Plane = self_1473;
    let _e8: Motor = other_1265;
    let _e11: Motor = other_1265;
    let _e14: Motor = other_1265;
    let _e17: Motor = other_1265;
    let _e30: Plane = self_1473;
    let _e34: Motor = other_1265;
    let _e37: Motor = other_1265;
    let _e40: Motor = other_1265;
    let _e43: Motor = other_1265;
    let _e57: Plane = self_1473;
    let _e61: Motor = other_1265;
    let _e64: Motor = other_1265;
    let _e67: Motor = other_1265;
    let _e70: Motor = other_1265;
    let _e84: Plane = self_1473;
    let _e88: Motor = other_1265;
    let _e98: Plane = self_1473;
    let _e100: Motor = other_1265;
    return PointAndPlane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y, _e11.g1_.y, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.z, _e43.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * _e88.g1_) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (_e98.g0_ * vec4<f32>(_e100.g1_.x)));
}

fn plane_point_and_plane_add(self_1474: Plane, other_1266: PointAndPlane) -> PointAndPlane {
    var self_1475: Plane;
    var other_1267: PointAndPlane;

    self_1475 = self_1474;
    other_1267 = other_1266;
    let _e4: PointAndPlane = other_1267;
    let _e6: Plane = self_1475;
    let _e8: PointAndPlane = other_1267;
    return PointAndPlane(_e4.g0_, (_e6.g0_ + _e8.g1_));
}

fn plane_point_and_plane_sub(self_1476: Plane, other_1268: PointAndPlane) -> PointAndPlane {
    var self_1477: Plane;
    var other_1269: PointAndPlane;

    self_1477 = self_1476;
    other_1269 = other_1268;
    let _e6: PointAndPlane = other_1269;
    let _e9: Plane = self_1477;
    let _e11: PointAndPlane = other_1269;
    return PointAndPlane((vec4<f32>(0.0) - _e6.g0_), (_e9.g0_ - _e11.g1_));
}

fn plane_point_and_plane_geometric_product(self_1478: Plane, other_1270: PointAndPlane) -> Motor {
    var self_1479: Plane;
    var other_1271: PointAndPlane;

    self_1479 = self_1478;
    other_1271 = other_1270;
    let _e4: Plane = self_1479;
    let _e8: PointAndPlane = other_1271;
    let _e11: PointAndPlane = other_1271;
    let _e14: PointAndPlane = other_1271;
    let _e17: PointAndPlane = other_1271;
    let _e31: Plane = self_1479;
    let _e35: PointAndPlane = other_1271;
    let _e38: PointAndPlane = other_1271;
    let _e41: PointAndPlane = other_1271;
    let _e44: PointAndPlane = other_1271;
    let _e57: Plane = self_1479;
    let _e61: PointAndPlane = other_1271;
    let _e64: PointAndPlane = other_1271;
    let _e67: PointAndPlane = other_1271;
    let _e70: PointAndPlane = other_1271;
    let _e83: Plane = self_1479;
    let _e87: PointAndPlane = other_1271;
    let _e90: PointAndPlane = other_1271;
    let _e93: PointAndPlane = other_1271;
    let _e96: PointAndPlane = other_1271;
    let _e109: Plane = self_1479;
    let _e113: PointAndPlane = other_1271;
    let _e116: PointAndPlane = other_1271;
    let _e119: PointAndPlane = other_1271;
    let _e122: PointAndPlane = other_1271;
    let _e127: Plane = self_1479;
    let _e131: PointAndPlane = other_1271;
    let _e134: PointAndPlane = other_1271;
    let _e137: PointAndPlane = other_1271;
    let _e140: PointAndPlane = other_1271;
    let _e154: Plane = self_1479;
    let _e158: PointAndPlane = other_1271;
    let _e161: PointAndPlane = other_1271;
    let _e164: PointAndPlane = other_1271;
    let _e167: PointAndPlane = other_1271;
    let _e181: Plane = self_1479;
    let _e185: PointAndPlane = other_1271;
    let _e188: PointAndPlane = other_1271;
    let _e191: PointAndPlane = other_1271;
    let _e194: PointAndPlane = other_1271;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e31.g0_.y) * vec4<f32>(_e35.g1_.y, _e38.g0_.x, _e41.g1_.w, _e44.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.z, _e64.g1_.w, _e67.g0_.x, _e70.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e83.g0_.w) * vec4<f32>(_e87.g1_.w, _e90.g1_.z, _e93.g1_.y, _e96.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((vec4<f32>(_e109.g0_.x) * vec4<f32>(_e113.g0_.x, _e116.g1_.y, _e119.g1_.z, _e122.g1_.w)) + ((vec4<f32>(_e127.g0_.y) * vec4<f32>(_e131.g0_.y, _e134.g1_.x, _e137.g0_.w, _e140.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e154.g0_.z) * vec4<f32>(_e158.g0_.z, _e161.g0_.w, _e164.g1_.x, _e167.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e181.g0_.w) * vec4<f32>(_e185.g0_.w, _e188.g0_.z, _e191.g0_.y, _e194.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn plane_point_and_plane_regressive_product(self_1480: Plane, other_1272: PointAndPlane) -> Scalar {
    var self_1481: Plane;
    var other_1273: PointAndPlane;

    self_1481 = self_1480;
    other_1273 = other_1272;
    let _e4: Plane = self_1481;
    let _e7: PointAndPlane = other_1273;
    let _e11: Plane = self_1481;
    let _e14: PointAndPlane = other_1273;
    let _e19: Plane = self_1481;
    let _e22: PointAndPlane = other_1273;
    let _e27: Plane = self_1481;
    let _e30: PointAndPlane = other_1273;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn plane_point_and_plane_geometric_anti_product(self_1482: Plane, other_1274: PointAndPlane) -> Motor {
    var self_1483: Plane;
    var other_1275: PointAndPlane;

    self_1483 = self_1482;
    other_1275 = other_1274;
    let _e4: Plane = self_1483;
    let _e8: PointAndPlane = other_1275;
    let _e11: PointAndPlane = other_1275;
    let _e14: PointAndPlane = other_1275;
    let _e17: PointAndPlane = other_1275;
    let _e31: Plane = self_1483;
    let _e35: PointAndPlane = other_1275;
    let _e38: PointAndPlane = other_1275;
    let _e41: PointAndPlane = other_1275;
    let _e44: PointAndPlane = other_1275;
    let _e57: Plane = self_1483;
    let _e61: PointAndPlane = other_1275;
    let _e64: PointAndPlane = other_1275;
    let _e67: PointAndPlane = other_1275;
    let _e70: PointAndPlane = other_1275;
    let _e83: Plane = self_1483;
    let _e87: PointAndPlane = other_1275;
    let _e90: PointAndPlane = other_1275;
    let _e93: PointAndPlane = other_1275;
    let _e96: PointAndPlane = other_1275;
    let _e111: Plane = self_1483;
    let _e115: PointAndPlane = other_1275;
    let _e118: PointAndPlane = other_1275;
    let _e121: PointAndPlane = other_1275;
    let _e124: PointAndPlane = other_1275;
    let _e130: Plane = self_1483;
    let _e134: PointAndPlane = other_1275;
    let _e137: PointAndPlane = other_1275;
    let _e140: PointAndPlane = other_1275;
    let _e143: PointAndPlane = other_1275;
    let _e157: Plane = self_1483;
    let _e161: PointAndPlane = other_1275;
    let _e164: PointAndPlane = other_1275;
    let _e167: PointAndPlane = other_1275;
    let _e170: PointAndPlane = other_1275;
    let _e184: Plane = self_1483;
    let _e188: PointAndPlane = other_1275;
    let _e191: PointAndPlane = other_1275;
    let _e194: PointAndPlane = other_1275;
    let _e197: PointAndPlane = other_1275;
    return Motor((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e31.g0_.y) * vec4<f32>(_e35.g0_.y, _e38.g1_.x, _e41.g0_.w, _e44.g0_.z)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.z, _e64.g0_.w, _e67.g1_.x, _e70.g0_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e83.g0_.w) * vec4<f32>(_e87.g0_.w, _e90.g0_.z, _e93.g0_.y, _e96.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((vec4<f32>(0.0) - (vec4<f32>(_e111.g0_.x) * vec4<f32>(_e115.g1_.x, _e118.g0_.y, _e121.g0_.z, _e124.g0_.w))) + ((vec4<f32>(_e130.g0_.y) * vec4<f32>(_e134.g1_.y, _e137.g0_.x, _e140.g1_.w, _e143.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e157.g0_.z) * vec4<f32>(_e161.g1_.z, _e164.g1_.w, _e167.g0_.x, _e170.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e184.g0_.w) * vec4<f32>(_e188.g1_.w, _e191.g1_.z, _e194.g1_.y, _e197.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn plane_point_and_plane_right_contraction(self_1484: Plane, other_1276: PointAndPlane) -> Scalar {
    var self_1485: Plane;
    var other_1277: PointAndPlane;

    self_1485 = self_1484;
    other_1277 = other_1276;
    let _e4: Plane = self_1485;
    let _e7: PointAndPlane = other_1277;
    let _e11: Plane = self_1485;
    let _e14: PointAndPlane = other_1277;
    let _e19: Plane = self_1485;
    let _e22: PointAndPlane = other_1277;
    let _e27: Plane = self_1485;
    let _e30: PointAndPlane = other_1277;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn plane_point_and_plane_left_anti_contraction(self_1486: Plane, other_1278: PointAndPlane) -> AntiScalar {
    var self_1487: Plane;
    var other_1279: PointAndPlane;

    self_1487 = self_1486;
    other_1279 = other_1278;
    let _e5: Plane = self_1487;
    let _e8: PointAndPlane = other_1279;
    let _e13: Plane = self_1487;
    let _e16: PointAndPlane = other_1279;
    let _e21: Plane = self_1487;
    let _e24: PointAndPlane = other_1279;
    let _e29: Plane = self_1487;
    let _e32: PointAndPlane = other_1279;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g0_.w * _e32.g1_.w)));
}

fn plane_point_and_plane_scalar_product(self_1488: Plane, other_1280: PointAndPlane) -> Scalar {
    var self_1489: Plane;
    var other_1281: PointAndPlane;

    self_1489 = self_1488;
    other_1281 = other_1280;
    let _e4: Plane = self_1489;
    let _e7: PointAndPlane = other_1281;
    let _e11: Plane = self_1489;
    let _e14: PointAndPlane = other_1281;
    let _e19: Plane = self_1489;
    let _e22: PointAndPlane = other_1281;
    let _e27: Plane = self_1489;
    let _e30: PointAndPlane = other_1281;
    return Scalar(((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)));
}

fn plane_point_and_plane_anti_scalar_product(self_1490: Plane, other_1282: PointAndPlane) -> AntiScalar {
    var self_1491: Plane;
    var other_1283: PointAndPlane;

    self_1491 = self_1490;
    other_1283 = other_1282;
    let _e5: Plane = self_1491;
    let _e8: PointAndPlane = other_1283;
    let _e13: Plane = self_1491;
    let _e16: PointAndPlane = other_1283;
    let _e21: Plane = self_1491;
    let _e24: PointAndPlane = other_1283;
    let _e29: Plane = self_1491;
    let _e32: PointAndPlane = other_1283;
    return AntiScalar(((((0.0 - (_e5.g0_.x * _e8.g1_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g0_.w * _e32.g1_.w)));
}

fn plane_squared_magnitude(self_1492: Plane) -> Scalar {
    var self_1493: Plane;

    self_1493 = self_1492;
    let _e2: Plane = self_1493;
    let _e3: Plane = self_1493;
    let _e4: Plane = plane_reversal(_e3);
    let _e5: Scalar = plane_plane_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_magnitude(self_1494: Plane) -> Scalar {
    var self_1495: Plane;

    self_1495 = self_1494;
    let _e2: Plane = self_1495;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_bulk_norm(self_1496: Plane) -> Scalar {
    var self_1497: Plane;

    self_1497 = self_1496;
    let _e2: Plane = self_1497;
    let _e3: Scalar = plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn plane_squared_anti_magnitude(self_1498: Plane) -> AntiScalar {
    var self_1499: Plane;

    self_1499 = self_1498;
    let _e2: Plane = self_1499;
    let _e3: Plane = self_1499;
    let _e4: Plane = plane_anti_reversal(_e3);
    let _e5: AntiScalar = plane_plane_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn plane_weight_norm(self_1500: Plane) -> AntiScalar {
    var self_1501: Plane;

    self_1501 = self_1500;
    let _e2: Plane = self_1501;
    let _e3: AntiScalar = plane_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn plane_scale(self_1502: Plane, other_1284: f32) -> Plane {
    var self_1503: Plane;
    var other_1285: f32;

    self_1503 = self_1502;
    other_1285 = other_1284;
    let _e4: Plane = self_1503;
    let _e5: f32 = other_1285;
    let _e7: Plane = plane_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn plane_signum(self_1504: Plane) -> Plane {
    var self_1505: Plane;

    self_1505 = self_1504;
    let _e2: Plane = self_1505;
    let _e3: Plane = self_1505;
    let _e4: Scalar = plane_magnitude(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn plane_inverse(self_1506: Plane) -> Plane {
    var self_1507: Plane;

    self_1507 = self_1506;
    let _e2: Plane = self_1507;
    let _e3: Plane = plane_reversal(_e2);
    let _e4: Plane = self_1507;
    let _e5: Scalar = plane_squared_magnitude(_e4);
    let _e10: Plane = plane_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn plane_unitize(self_1508: Plane) -> Plane {
    var self_1509: Plane;

    self_1509 = self_1508;
    let _e2: Plane = self_1509;
    let _e3: Plane = self_1509;
    let _e4: AntiScalar = plane_weight_norm(_e3);
    let _e9: Plane = plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_grade(self_1510: Line) -> i32 {
    return 2;
}

fn line_anti_grade(self_1511: Line) -> i32 {
    return 2;
}

fn line_neg(self_1512: Line) -> Line {
    var self_1513: Line;

    self_1513 = self_1512;
    let _e2: Line = self_1513;
    let _e8: Line = self_1513;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_automorphism(self_1514: Line) -> Line {
    var self_1515: Line;

    self_1515 = self_1514;
    let _e2: Line = self_1515;
    let _e4: Line = self_1515;
    return Line(_e2.g0_, _e4.g1_);
}

fn line_reversal(self_1516: Line) -> Line {
    var self_1517: Line;

    self_1517 = self_1516;
    let _e2: Line = self_1517;
    let _e8: Line = self_1517;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_conjugation(self_1518: Line) -> Line {
    var self_1519: Line;

    self_1519 = self_1518;
    let _e2: Line = self_1519;
    let _e8: Line = self_1519;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_dual(self_1520: Line) -> Line {
    var self_1521: Line;

    self_1521 = self_1520;
    let _e2: Line = self_1521;
    let _e4: Line = self_1521;
    return Line(_e2.g1_, _e4.g0_);
}

fn line_anti_reversal(self_1522: Line) -> Line {
    var self_1523: Line;

    self_1523 = self_1522;
    let _e2: Line = self_1523;
    let _e8: Line = self_1523;
    return Line((_e2.g0_ * vec3<f32>(-(1.0))), (_e8.g1_ * vec3<f32>(-(1.0))));
}

fn line_scalar_geometric_product(self_1524: Line, other_1286: Scalar) -> Line {
    var self_1525: Line;
    var other_1287: Scalar;

    self_1525 = self_1524;
    other_1287 = other_1286;
    let _e4: Line = self_1525;
    let _e6: Scalar = other_1287;
    let _e10: Line = self_1525;
    let _e12: Scalar = other_1287;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_outer_product(self_1526: Line, other_1288: Scalar) -> Line {
    var self_1527: Line;
    var other_1289: Scalar;

    self_1527 = self_1526;
    other_1289 = other_1288;
    let _e4: Line = self_1527;
    let _e6: Scalar = other_1289;
    let _e10: Line = self_1527;
    let _e12: Scalar = other_1289;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_inner_product(self_1528: Line, other_1290: Scalar) -> Line {
    var self_1529: Line;
    var other_1291: Scalar;

    self_1529 = self_1528;
    other_1291 = other_1290;
    let _e4: Line = self_1529;
    let _e6: Scalar = other_1291;
    let _e10: Line = self_1529;
    let _e12: Scalar = other_1291;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_geometric_anti_product(self_1530: Line, other_1292: Scalar) -> Line {
    var self_1531: Line;
    var other_1293: Scalar;

    self_1531 = self_1530;
    other_1293 = other_1292;
    let _e4: Line = self_1531;
    let _e6: Scalar = other_1293;
    let _e14: Line = self_1531;
    let _e16: Scalar = other_1293;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_scalar_inner_anti_product(self_1532: Line, other_1294: Scalar) -> Line {
    var self_1533: Line;
    var other_1295: Scalar;

    self_1533 = self_1532;
    other_1295 = other_1294;
    let _e4: Line = self_1533;
    let _e6: Scalar = other_1295;
    let _e14: Line = self_1533;
    let _e16: Scalar = other_1295;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_scalar_right_contraction(self_1534: Line, other_1296: Scalar) -> Line {
    var self_1535: Line;
    var other_1297: Scalar;

    self_1535 = self_1534;
    other_1297 = other_1296;
    let _e4: Line = self_1535;
    let _e6: Scalar = other_1297;
    let _e10: Line = self_1535;
    let _e12: Scalar = other_1297;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_scalar_left_anti_contraction(self_1536: Line, other_1298: Scalar) -> Line {
    var self_1537: Line;
    var other_1299: Scalar;

    self_1537 = self_1536;
    other_1299 = other_1298;
    let _e4: Line = self_1537;
    let _e6: Scalar = other_1299;
    let _e14: Line = self_1537;
    let _e16: Scalar = other_1299;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_anti_scalar_geometric_product(self_1538: Line, other_1300: AntiScalar) -> Line {
    var self_1539: Line;
    var other_1301: AntiScalar;

    self_1539 = self_1538;
    other_1301 = other_1300;
    let _e4: Line = self_1539;
    let _e6: AntiScalar = other_1301;
    let _e14: Line = self_1539;
    let _e16: AntiScalar = other_1301;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_anti_scalar_regressive_product(self_1540: Line, other_1302: AntiScalar) -> Line {
    var self_1541: Line;
    var other_1303: AntiScalar;

    self_1541 = self_1540;
    other_1303 = other_1302;
    let _e4: Line = self_1541;
    let _e6: AntiScalar = other_1303;
    let _e10: Line = self_1541;
    let _e12: AntiScalar = other_1303;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_inner_product(self_1542: Line, other_1304: AntiScalar) -> Line {
    var self_1543: Line;
    var other_1305: AntiScalar;

    self_1543 = self_1542;
    other_1305 = other_1304;
    let _e4: Line = self_1543;
    let _e6: AntiScalar = other_1305;
    let _e14: Line = self_1543;
    let _e16: AntiScalar = other_1305;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_anti_scalar_geometric_anti_product(self_1544: Line, other_1306: AntiScalar) -> Line {
    var self_1545: Line;
    var other_1307: AntiScalar;

    self_1545 = self_1544;
    other_1307 = other_1306;
    let _e4: Line = self_1545;
    let _e6: AntiScalar = other_1307;
    let _e10: Line = self_1545;
    let _e12: AntiScalar = other_1307;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_inner_anti_product(self_1546: Line, other_1308: AntiScalar) -> Line {
    var self_1547: Line;
    var other_1309: AntiScalar;

    self_1547 = self_1546;
    other_1309 = other_1308;
    let _e4: Line = self_1547;
    let _e6: AntiScalar = other_1309;
    let _e10: Line = self_1547;
    let _e12: AntiScalar = other_1309;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_anti_scalar_left_contraction(self_1548: Line, other_1310: AntiScalar) -> Line {
    var self_1549: Line;
    var other_1311: AntiScalar;

    self_1549 = self_1548;
    other_1311 = other_1310;
    let _e4: Line = self_1549;
    let _e6: AntiScalar = other_1311;
    let _e14: Line = self_1549;
    let _e16: AntiScalar = other_1311;
    return Line(((_e4.g1_ * vec3<f32>(_e6.g0_)) * vec3<f32>(-(1.0))), ((_e14.g0_ * vec3<f32>(_e16.g0_)) * vec3<f32>(-(1.0))));
}

fn line_anti_scalar_right_anti_contraction(self_1550: Line, other_1312: AntiScalar) -> Line {
    var self_1551: Line;
    var other_1313: AntiScalar;

    self_1551 = self_1550;
    other_1313 = other_1312;
    let _e4: Line = self_1551;
    let _e6: AntiScalar = other_1313;
    let _e10: Line = self_1551;
    let _e12: AntiScalar = other_1313;
    return Line((_e4.g0_ * vec3<f32>(_e6.g0_)), (_e10.g1_ * vec3<f32>(_e12.g0_)));
}

fn line_multi_vector_add(self_1552: Line, other_1314: MultiVector) -> MultiVector {
    var self_1553: Line;
    var other_1315: MultiVector;

    self_1553 = self_1552;
    other_1315 = other_1314;
    let _e4: Line = self_1553;
    let _e7: Line = self_1553;
    let _e10: Line = self_1553;
    let _e13: Line = self_1553;
    let _e23: MultiVector = other_1315;
    let _e26: MultiVector = other_1315;
    let _e28: MultiVector = other_1315;
    let _e30: Line = self_1553;
    let _e33: Line = self_1553;
    let _e36: Line = self_1553;
    let _e39: Line = self_1553;
    let _e49: MultiVector = other_1315;
    return MultiVector(((vec4<f32>(_e4.g0_.x, _e7.g1_.x, _e10.g1_.y, _e13.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e23.g0_), _e26.g1_, _e28.g2_, ((vec4<f32>(_e30.g0_.x, _e33.g0_.x, _e36.g0_.y, _e39.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e49.g3_));
}

fn line_multi_vector_sub(self_1554: Line, other_1316: MultiVector) -> MultiVector {
    var self_1555: Line;
    var other_1317: MultiVector;

    self_1555 = self_1554;
    other_1317 = other_1316;
    let _e4: Line = self_1555;
    let _e7: Line = self_1555;
    let _e10: Line = self_1555;
    let _e13: Line = self_1555;
    let _e23: MultiVector = other_1317;
    let _e28: MultiVector = other_1317;
    let _e33: MultiVector = other_1317;
    let _e36: Line = self_1555;
    let _e39: Line = self_1555;
    let _e42: Line = self_1555;
    let _e45: Line = self_1555;
    let _e55: MultiVector = other_1317;
    return MultiVector(((vec4<f32>(_e4.g0_.x, _e7.g1_.x, _e10.g1_.y, _e13.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e23.g0_), (vec4<f32>(0.0) - _e28.g1_), (vec4<f32>(0.0) - _e33.g2_), ((vec4<f32>(_e36.g0_.x, _e39.g0_.x, _e42.g0_.y, _e45.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e55.g3_));
}

fn line_multi_vector_geometric_product(self_1556: Line, other_1318: MultiVector) -> MultiVector {
    var self_1557: Line;
    var other_1319: MultiVector;

    self_1557 = self_1556;
    other_1319 = other_1318;
    let _e4: Line = self_1557;
    let _e8: MultiVector = other_1319;
    let _e21: Line = self_1557;
    let _e25: MultiVector = other_1319;
    let _e39: Line = self_1557;
    let _e43: MultiVector = other_1319;
    let _e57: Line = self_1557;
    let _e61: MultiVector = other_1319;
    let _e74: Line = self_1557;
    let _e78: MultiVector = other_1319;
    let _e91: Line = self_1557;
    let _e95: MultiVector = other_1319;
    let _e108: Line = self_1557;
    let _e112: MultiVector = other_1319;
    let _e124: Line = self_1557;
    let _e128: MultiVector = other_1319;
    let _e141: Line = self_1557;
    let _e145: MultiVector = other_1319;
    let _e158: Line = self_1557;
    let _e162: MultiVector = other_1319;
    let _e175: Line = self_1557;
    let _e179: MultiVector = other_1319;
    let _e192: Line = self_1557;
    let _e196: MultiVector = other_1319;
    let _e209: Line = self_1557;
    let _e213: MultiVector = other_1319;
    let _e225: Line = self_1557;
    let _e229: MultiVector = other_1319;
    let _e242: Line = self_1557;
    let _e246: MultiVector = other_1319;
    let _e259: Line = self_1557;
    let _e263: MultiVector = other_1319;
    let _e276: Line = self_1557;
    let _e280: MultiVector = other_1319;
    let _e293: Line = self_1557;
    let _e297: MultiVector = other_1319;
    let _e310: Line = self_1557;
    let _e314: MultiVector = other_1319;
    let _e325: Line = self_1557;
    let _e329: MultiVector = other_1319;
    let _e341: Line = self_1557;
    let _e345: MultiVector = other_1319;
    let _e357: Line = self_1557;
    let _e361: MultiVector = other_1319;
    let _e374: Line = self_1557;
    let _e378: MultiVector = other_1319;
    let _e391: Line = self_1557;
    let _e395: MultiVector = other_1319;
    return MultiVector((((((((vec4<f32>(_e4.g0_.x) * _e8.g3_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e21.g0_.y) * _e25.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e39.g0_.z) * _e43.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * _e61.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * _e78.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e91.g1_.z) * _e95.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e108.g0_.x) * _e112.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e124.g0_.y) * _e128.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e141.g0_.z) * _e145.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e158.g1_.x) * _e162.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e175.g1_.y) * _e179.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e192.g1_.z) * _e196.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((((vec4<f32>(_e209.g0_.x) * _e213.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e225.g0_.y) * _e229.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e242.g0_.z) * _e246.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e259.g1_.x) * _e263.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e276.g1_.y) * _e280.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e293.g1_.z) * _e297.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((((vec4<f32>(_e310.g0_.x) * _e314.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e325.g0_.y) * _e329.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e341.g0_.z) * _e345.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e357.g1_.x) * _e361.g3_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e374.g1_.y) * _e378.g3_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e391.g1_.z) * _e395.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn line_multi_vector_geometric_anti_product(self_1558: Line, other_1320: MultiVector) -> MultiVector {
    var self_1559: Line;
    var other_1321: MultiVector;

    self_1559 = self_1558;
    other_1321 = other_1320;
    let _e4: Line = self_1559;
    let _e8: MultiVector = other_1321;
    let _e20: Line = self_1559;
    let _e24: MultiVector = other_1321;
    let _e37: Line = self_1559;
    let _e41: MultiVector = other_1321;
    let _e54: Line = self_1559;
    let _e58: MultiVector = other_1321;
    let _e70: Line = self_1559;
    let _e74: MultiVector = other_1321;
    let _e86: Line = self_1559;
    let _e90: MultiVector = other_1321;
    let _e102: Line = self_1559;
    let _e106: MultiVector = other_1321;
    let _e118: Line = self_1559;
    let _e122: MultiVector = other_1321;
    let _e135: Line = self_1559;
    let _e139: MultiVector = other_1321;
    let _e152: Line = self_1559;
    let _e156: MultiVector = other_1321;
    let _e169: Line = self_1559;
    let _e173: MultiVector = other_1321;
    let _e186: Line = self_1559;
    let _e190: MultiVector = other_1321;
    let _e203: Line = self_1559;
    let _e207: MultiVector = other_1321;
    let _e219: Line = self_1559;
    let _e223: MultiVector = other_1321;
    let _e236: Line = self_1559;
    let _e240: MultiVector = other_1321;
    let _e253: Line = self_1559;
    let _e257: MultiVector = other_1321;
    let _e270: Line = self_1559;
    let _e274: MultiVector = other_1321;
    let _e287: Line = self_1559;
    let _e291: MultiVector = other_1321;
    let _e304: Line = self_1559;
    let _e308: MultiVector = other_1321;
    let _e320: Line = self_1559;
    let _e324: MultiVector = other_1321;
    let _e337: Line = self_1559;
    let _e341: MultiVector = other_1321;
    let _e354: Line = self_1559;
    let _e358: MultiVector = other_1321;
    let _e372: Line = self_1559;
    let _e376: MultiVector = other_1321;
    let _e390: Line = self_1559;
    let _e394: MultiVector = other_1321;
    return MultiVector((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e54.g1_.x) * _e58.g3_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e70.g1_.y) * _e74.g3_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e86.g1_.z) * _e90.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e102.g0_.x) * _e106.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e118.g0_.y) * _e122.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e135.g0_.z) * _e139.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e152.g1_.x) * _e156.g2_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e169.g1_.y) * _e173.g2_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e186.g1_.z) * _e190.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e203.g0_.x) * _e207.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e219.g0_.y) * _e223.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e236.g0_.z) * _e240.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e253.g1_.x) * _e257.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e270.g1_.y) * _e274.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e287.g1_.z) * _e291.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e304.g0_.x) * _e308.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e320.g0_.y) * _e324.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e337.g0_.z) * _e341.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e354.g1_.x) * _e358.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e372.g1_.y) * _e376.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e390.g1_.z) * _e394.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn line_multi_vector_scalar_product(self_1560: Line, other_1322: MultiVector) -> Scalar {
    var self_1561: Line;
    var other_1323: MultiVector;

    self_1561 = self_1560;
    other_1323 = other_1322;
    let _e5: Line = self_1561;
    let _e8: MultiVector = other_1323;
    let _e13: Line = self_1561;
    let _e16: MultiVector = other_1323;
    let _e21: Line = self_1561;
    let _e24: MultiVector = other_1323;
    let _e29: Line = self_1561;
    let _e32: MultiVector = other_1323;
    let _e37: Line = self_1561;
    let _e40: MultiVector = other_1323;
    let _e45: Line = self_1561;
    let _e48: MultiVector = other_1323;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g3_.y)) - (_e13.g0_.y * _e16.g3_.z)) - (_e21.g0_.z * _e24.g3_.w)) - (_e29.g1_.x * _e32.g0_.y)) - (_e37.g1_.y * _e40.g0_.z)) - (_e45.g1_.z * _e48.g0_.w)));
}

fn line_multi_vector_anti_scalar_product(self_1562: Line, other_1324: MultiVector) -> AntiScalar {
    var self_1563: Line;
    var other_1325: MultiVector;

    self_1563 = self_1562;
    other_1325 = other_1324;
    let _e5: Line = self_1563;
    let _e8: MultiVector = other_1325;
    let _e13: Line = self_1563;
    let _e16: MultiVector = other_1325;
    let _e21: Line = self_1563;
    let _e24: MultiVector = other_1325;
    let _e29: Line = self_1563;
    let _e32: MultiVector = other_1325;
    let _e37: Line = self_1563;
    let _e40: MultiVector = other_1325;
    let _e45: Line = self_1563;
    let _e48: MultiVector = other_1325;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g3_.y)) - (_e13.g0_.y * _e16.g3_.z)) - (_e21.g0_.z * _e24.g3_.w)) - (_e29.g1_.x * _e32.g0_.y)) - (_e37.g1_.y * _e40.g0_.z)) - (_e45.g1_.z * _e48.g0_.w)));
}

fn line_rotor_geometric_product(self_1564: Line, other_1326: Rotor) -> Motor {
    var self_1565: Line;
    var other_1327: Rotor;

    self_1565 = self_1564;
    other_1327 = other_1326;
    let _e4: Line = self_1565;
    let _e8: Rotor = other_1327;
    let _e20: Line = self_1565;
    let _e24: Rotor = other_1327;
    let _e37: Line = self_1565;
    let _e41: Rotor = other_1327;
    let _e54: Line = self_1565;
    let _e58: Rotor = other_1327;
    let _e69: Line = self_1565;
    let _e73: Rotor = other_1327;
    let _e85: Line = self_1565;
    let _e89: Rotor = other_1327;
    return Motor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g1_.y) * _e24.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e37.g1_.z) * _e41.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e54.g0_.x) * _e58.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e69.g0_.y) * _e73.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e85.g0_.z) * _e89.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn line_rotor_regressive_product(self_1566: Line, other_1328: Rotor) -> Scalar {
    var self_1567: Line;
    var other_1329: Rotor;

    self_1567 = self_1566;
    other_1329 = other_1328;
    let _e4: Line = self_1567;
    let _e7: Rotor = other_1329;
    let _e11: Line = self_1567;
    let _e14: Rotor = other_1329;
    let _e19: Line = self_1567;
    let _e22: Rotor = other_1329;
    return Scalar((((_e4.g0_.x * _e7.g0_.y) + (_e11.g0_.y * _e14.g0_.z)) + (_e19.g0_.z * _e22.g0_.w)));
}

fn line_rotor_geometric_anti_product(self_1568: Line, other_1330: Rotor) -> Motor {
    var self_1569: Line;
    var other_1331: Rotor;

    self_1569 = self_1568;
    other_1331 = other_1330;
    let _e4: Line = self_1569;
    let _e8: Rotor = other_1331;
    let _e20: Line = self_1569;
    let _e24: Rotor = other_1331;
    let _e37: Line = self_1569;
    let _e41: Rotor = other_1331;
    let _e54: Line = self_1569;
    let _e58: Rotor = other_1331;
    let _e71: Line = self_1569;
    let _e75: Rotor = other_1331;
    let _e89: Line = self_1569;
    let _e93: Rotor = other_1331;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e54.g1_.x) * _e58.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e71.g1_.y) * _e75.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e89.g1_.z) * _e93.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn line_rotor_left_contraction(self_1570: Line, other_1332: Rotor) -> Scalar {
    var self_1571: Line;
    var other_1333: Rotor;

    self_1571 = self_1570;
    other_1333 = other_1332;
    let _e5: Line = self_1571;
    let _e8: Rotor = other_1333;
    let _e13: Line = self_1571;
    let _e16: Rotor = other_1333;
    let _e21: Line = self_1571;
    let _e24: Rotor = other_1333;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.y)) - (_e13.g1_.y * _e16.g0_.z)) - (_e21.g1_.z * _e24.g0_.w)));
}

fn line_rotor_right_anti_contraction(self_1572: Line, other_1334: Rotor) -> AntiScalar {
    var self_1573: Line;
    var other_1335: Rotor;

    self_1573 = self_1572;
    other_1335 = other_1334;
    let _e5: Line = self_1573;
    let _e8: Rotor = other_1335;
    let _e13: Line = self_1573;
    let _e16: Rotor = other_1335;
    let _e21: Line = self_1573;
    let _e24: Rotor = other_1335;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.y)) - (_e13.g1_.y * _e16.g0_.z)) - (_e21.g1_.z * _e24.g0_.w)));
}

fn line_rotor_scalar_product(self_1574: Line, other_1336: Rotor) -> Scalar {
    var self_1575: Line;
    var other_1337: Rotor;

    self_1575 = self_1574;
    other_1337 = other_1336;
    let _e5: Line = self_1575;
    let _e8: Rotor = other_1337;
    let _e13: Line = self_1575;
    let _e16: Rotor = other_1337;
    let _e21: Line = self_1575;
    let _e24: Rotor = other_1337;
    return Scalar((((0.0 - (_e5.g1_.x * _e8.g0_.y)) - (_e13.g1_.y * _e16.g0_.z)) - (_e21.g1_.z * _e24.g0_.w)));
}

fn line_rotor_anti_scalar_product(self_1576: Line, other_1338: Rotor) -> AntiScalar {
    var self_1577: Line;
    var other_1339: Rotor;

    self_1577 = self_1576;
    other_1339 = other_1338;
    let _e5: Line = self_1577;
    let _e8: Rotor = other_1339;
    let _e13: Line = self_1577;
    let _e16: Rotor = other_1339;
    let _e21: Line = self_1577;
    let _e24: Rotor = other_1339;
    return AntiScalar((((0.0 - (_e5.g1_.x * _e8.g0_.y)) - (_e13.g1_.y * _e16.g0_.z)) - (_e21.g1_.z * _e24.g0_.w)));
}

fn line_point_geometric_product(self_1578: Line, other_1340: Point) -> PointAndPlane {
    var self_1579: Line;
    var other_1341: Point;

    self_1579 = self_1578;
    other_1341 = other_1340;
    let _e4: Line = self_1579;
    let _e8: Point = other_1341;
    let _e19: Line = self_1579;
    let _e23: Point = other_1341;
    let _e35: Line = self_1579;
    let _e39: Point = other_1341;
    let _e51: Line = self_1579;
    let _e55: Point = other_1341;
    let _e67: Line = self_1579;
    let _e70: Line = self_1579;
    let _e73: Line = self_1579;
    let _e76: Line = self_1579;
    let _e80: Point = other_1341;
    let _e93: Line = self_1579;
    let _e97: Point = other_1341;
    let _e108: Line = self_1579;
    let _e112: Point = other_1341;
    let _e124: Line = self_1579;
    let _e128: Point = other_1341;
    let _e140: Line = self_1579;
    let _e144: Point = other_1341;
    let _e156: Line = self_1579;
    let _e159: Line = self_1579;
    let _e162: Line = self_1579;
    let _e165: Line = self_1579;
    let _e169: Point = other_1341;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e124.g1_.y) * _e128.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e156.g1_.x, _e159.g1_.x, _e162.g0_.x, _e165.g0_.x) * _e169.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_regressive_product(self_1580: Line, other_1342: Point) -> Plane {
    var self_1581: Line;
    var other_1343: Point;

    self_1581 = self_1580;
    other_1343 = other_1342;
    let _e4: Line = self_1581;
    let _e8: Point = other_1343;
    let _e19: Line = self_1581;
    let _e23: Point = other_1343;
    let _e35: Line = self_1581;
    let _e39: Point = other_1343;
    let _e51: Line = self_1581;
    let _e55: Point = other_1343;
    let _e67: Line = self_1581;
    let _e70: Line = self_1581;
    let _e73: Line = self_1581;
    let _e76: Line = self_1581;
    let _e80: Point = other_1343;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_point_inner_product(self_1582: Line, other_1344: Point) -> Plane {
    var self_1583: Line;
    var other_1345: Point;

    self_1583 = self_1582;
    other_1345 = other_1344;
    let _e4: Line = self_1583;
    let _e8: Point = other_1345;
    let _e19: Line = self_1583;
    let _e23: Point = other_1345;
    let _e35: Line = self_1583;
    let _e39: Point = other_1345;
    let _e51: Line = self_1583;
    let _e55: Point = other_1345;
    let _e67: Line = self_1583;
    let _e70: Line = self_1583;
    let _e73: Line = self_1583;
    let _e76: Line = self_1583;
    let _e80: Point = other_1345;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_geometric_anti_product(self_1584: Line, other_1346: Point) -> PointAndPlane {
    var self_1585: Line;
    var other_1347: Point;

    self_1585 = self_1584;
    other_1347 = other_1346;
    let _e4: Line = self_1585;
    let _e8: Point = other_1347;
    let _e19: Line = self_1585;
    let _e23: Point = other_1347;
    let _e35: Line = self_1585;
    let _e39: Point = other_1347;
    let _e51: Line = self_1585;
    let _e55: Point = other_1347;
    let _e67: Line = self_1585;
    let _e70: Line = self_1585;
    let _e73: Line = self_1585;
    let _e76: Line = self_1585;
    let _e80: Point = other_1347;
    let _e93: Line = self_1585;
    let _e97: Point = other_1347;
    let _e108: Line = self_1585;
    let _e112: Point = other_1347;
    let _e124: Line = self_1585;
    let _e128: Point = other_1347;
    let _e140: Line = self_1585;
    let _e144: Point = other_1347;
    let _e156: Line = self_1585;
    let _e159: Line = self_1585;
    let _e162: Line = self_1585;
    let _e165: Line = self_1585;
    let _e169: Point = other_1347;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e124.g1_.y) * _e128.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e156.g0_.x, _e159.g0_.x, _e162.g1_.x, _e165.g1_.x) * _e169.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_point_inner_anti_product(self_1586: Line, other_1348: Point) -> Point {
    var self_1587: Line;
    var other_1349: Point;

    self_1587 = self_1586;
    other_1349 = other_1348;
    let _e4: Line = self_1587;
    let _e8: Point = other_1349;
    let _e19: Line = self_1587;
    let _e23: Point = other_1349;
    let _e35: Line = self_1587;
    let _e39: Point = other_1349;
    let _e51: Line = self_1587;
    let _e55: Point = other_1349;
    let _e67: Line = self_1587;
    let _e70: Line = self_1587;
    let _e73: Line = self_1587;
    let _e76: Line = self_1587;
    let _e80: Point = other_1349;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_left_contraction(self_1588: Line, other_1350: Point) -> Plane {
    var self_1589: Line;
    var other_1351: Point;

    self_1589 = self_1588;
    other_1351 = other_1350;
    let _e4: Line = self_1589;
    let _e8: Point = other_1351;
    let _e19: Line = self_1589;
    let _e23: Point = other_1351;
    let _e35: Line = self_1589;
    let _e39: Point = other_1351;
    let _e51: Line = self_1589;
    let _e55: Point = other_1351;
    let _e67: Line = self_1589;
    let _e70: Line = self_1589;
    let _e73: Line = self_1589;
    let _e76: Line = self_1589;
    let _e80: Point = other_1351;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_right_anti_contraction(self_1590: Line, other_1352: Point) -> Point {
    var self_1591: Line;
    var other_1353: Point;

    self_1591 = self_1590;
    other_1353 = other_1352;
    let _e4: Line = self_1591;
    let _e8: Point = other_1353;
    let _e19: Line = self_1591;
    let _e23: Point = other_1353;
    let _e35: Line = self_1591;
    let _e39: Point = other_1353;
    let _e51: Line = self_1591;
    let _e55: Point = other_1353;
    let _e67: Line = self_1591;
    let _e70: Line = self_1591;
    let _e73: Line = self_1591;
    let _e76: Line = self_1591;
    let _e80: Point = other_1353;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_ideal_point_into(self_1592: Line) -> IdealPoint {
    var self_1593: Line;

    self_1593 = self_1592;
    let _e2: Line = self_1593;
    return IdealPoint(_e2.g0_);
}

fn line_ideal_point_add(self_1594: Line, other_1354: IdealPoint) -> Line {
    var self_1595: Line;
    var other_1355: IdealPoint;

    self_1595 = self_1594;
    other_1355 = other_1354;
    let _e4: Line = self_1595;
    let _e6: IdealPoint = other_1355;
    let _e9: Line = self_1595;
    return Line((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn line_ideal_point_sub(self_1596: Line, other_1356: IdealPoint) -> Line {
    var self_1597: Line;
    var other_1357: IdealPoint;

    self_1597 = self_1596;
    other_1357 = other_1356;
    let _e4: Line = self_1597;
    let _e6: IdealPoint = other_1357;
    let _e9: Line = self_1597;
    return Line((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn line_ideal_point_geometric_product(self_1598: Line, other_1358: IdealPoint) -> Motor {
    var self_1599: Line;
    var other_1359: IdealPoint;

    self_1599 = self_1598;
    other_1359 = other_1358;
    let _e4: Line = self_1599;
    let _e8: IdealPoint = other_1359;
    let _e11: IdealPoint = other_1359;
    let _e14: IdealPoint = other_1359;
    let _e17: IdealPoint = other_1359;
    let _e30: Line = self_1599;
    let _e34: IdealPoint = other_1359;
    let _e37: IdealPoint = other_1359;
    let _e40: IdealPoint = other_1359;
    let _e43: IdealPoint = other_1359;
    let _e57: Line = self_1599;
    let _e61: IdealPoint = other_1359;
    let _e64: IdealPoint = other_1359;
    let _e67: IdealPoint = other_1359;
    let _e70: IdealPoint = other_1359;
    let _e84: Line = self_1599;
    let _e88: IdealPoint = other_1359;
    let _e91: IdealPoint = other_1359;
    let _e94: IdealPoint = other_1359;
    let _e97: IdealPoint = other_1359;
    let _e109: Line = self_1599;
    let _e113: IdealPoint = other_1359;
    let _e116: IdealPoint = other_1359;
    let _e119: IdealPoint = other_1359;
    let _e122: IdealPoint = other_1359;
    let _e135: Line = self_1599;
    let _e139: IdealPoint = other_1359;
    let _e142: IdealPoint = other_1359;
    let _e145: IdealPoint = other_1359;
    let _e148: IdealPoint = other_1359;
    return Motor(((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g0_.y, _e40.g0_.x, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e57.g0_.x) * vec4<f32>(_e61.g0_.x, _e64.g0_.x, _e67.g0_.z, _e70.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))), ((((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g0_.y, _e91.g0_.z, _e94.g0_.y, _e97.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e109.g1_.z) * vec4<f32>(_e113.g0_.z, _e116.g0_.y, _e119.g0_.x, _e122.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e135.g1_.x) * vec4<f32>(_e139.g0_.x, _e142.g0_.x, _e145.g0_.z, _e148.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))));
}

fn line_ideal_point_regressive_product(self_1600: Line, other_1360: IdealPoint) -> Scalar {
    var self_1601: Line;
    var other_1361: IdealPoint;

    self_1601 = self_1600;
    other_1361 = other_1360;
    let _e4: Line = self_1601;
    let _e7: IdealPoint = other_1361;
    let _e11: Line = self_1601;
    let _e14: IdealPoint = other_1361;
    let _e19: Line = self_1601;
    let _e22: IdealPoint = other_1361;
    return Scalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn line_ideal_point_outer_product(self_1602: Line, other_1362: IdealPoint) -> AntiScalar {
    var self_1603: Line;
    var other_1363: IdealPoint;

    self_1603 = self_1602;
    other_1363 = other_1362;
    let _e4: Line = self_1603;
    let _e7: IdealPoint = other_1363;
    let _e11: Line = self_1603;
    let _e14: IdealPoint = other_1363;
    let _e19: Line = self_1603;
    let _e22: IdealPoint = other_1363;
    return AntiScalar((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)));
}

fn line_ideal_point_inner_product(self_1604: Line, other_1364: IdealPoint) -> Scalar {
    var self_1605: Line;
    var other_1365: IdealPoint;

    self_1605 = self_1604;
    other_1365 = other_1364;
    let _e5: Line = self_1605;
    let _e8: IdealPoint = other_1365;
    let _e13: Line = self_1605;
    let _e16: IdealPoint = other_1365;
    let _e21: Line = self_1605;
    let _e24: IdealPoint = other_1365;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_geometric_anti_product(self_1606: Line, other_1366: IdealPoint) -> Motor {
    var self_1607: Line;
    var other_1367: IdealPoint;

    self_1607 = self_1606;
    other_1367 = other_1366;
    let _e4: Line = self_1607;
    let _e8: IdealPoint = other_1367;
    let _e11: IdealPoint = other_1367;
    let _e14: IdealPoint = other_1367;
    let _e17: IdealPoint = other_1367;
    let _e29: Line = self_1607;
    let _e33: IdealPoint = other_1367;
    let _e36: IdealPoint = other_1367;
    let _e39: IdealPoint = other_1367;
    let _e42: IdealPoint = other_1367;
    let _e55: Line = self_1607;
    let _e59: IdealPoint = other_1367;
    let _e62: IdealPoint = other_1367;
    let _e65: IdealPoint = other_1367;
    let _e68: IdealPoint = other_1367;
    let _e81: Line = self_1607;
    let _e85: IdealPoint = other_1367;
    let _e88: IdealPoint = other_1367;
    let _e91: IdealPoint = other_1367;
    let _e94: IdealPoint = other_1367;
    let _e107: Line = self_1607;
    let _e111: IdealPoint = other_1367;
    let _e114: IdealPoint = other_1367;
    let _e117: IdealPoint = other_1367;
    let _e120: IdealPoint = other_1367;
    let _e134: Line = self_1607;
    let _e138: IdealPoint = other_1367;
    let _e141: IdealPoint = other_1367;
    let _e144: IdealPoint = other_1367;
    let _e147: IdealPoint = other_1367;
    return Motor(((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g0_.z, _e36.g0_.y, _e39.g0_.x, _e42.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.x, _e65.g0_.z, _e68.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))), ((((vec4<f32>(_e81.g0_.y) * vec4<f32>(_e85.g0_.y, _e88.g0_.z, _e91.g0_.y, _e94.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e107.g0_.z) * vec4<f32>(_e111.g0_.z, _e114.g0_.y, _e117.g0_.x, _e120.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e134.g0_.x) * vec4<f32>(_e138.g0_.x, _e141.g0_.x, _e144.g0_.z, _e147.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))));
}

fn line_ideal_point_inner_anti_product(self_1608: Line, other_1368: IdealPoint) -> AntiScalar {
    var self_1609: Line;
    var other_1369: IdealPoint;

    self_1609 = self_1608;
    other_1369 = other_1368;
    let _e5: Line = self_1609;
    let _e8: IdealPoint = other_1369;
    let _e13: Line = self_1609;
    let _e16: IdealPoint = other_1369;
    let _e21: Line = self_1609;
    let _e24: IdealPoint = other_1369;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_left_contraction(self_1610: Line, other_1370: IdealPoint) -> Scalar {
    var self_1611: Line;
    var other_1371: IdealPoint;

    self_1611 = self_1610;
    other_1371 = other_1370;
    let _e5: Line = self_1611;
    let _e8: IdealPoint = other_1371;
    let _e13: Line = self_1611;
    let _e16: IdealPoint = other_1371;
    let _e21: Line = self_1611;
    let _e24: IdealPoint = other_1371;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_right_contraction(self_1612: Line, other_1372: IdealPoint) -> Scalar {
    var self_1613: Line;
    var other_1373: IdealPoint;

    self_1613 = self_1612;
    other_1373 = other_1372;
    let _e5: Line = self_1613;
    let _e8: IdealPoint = other_1373;
    let _e13: Line = self_1613;
    let _e16: IdealPoint = other_1373;
    let _e21: Line = self_1613;
    let _e24: IdealPoint = other_1373;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_left_anti_contraction(self_1614: Line, other_1374: IdealPoint) -> AntiScalar {
    var self_1615: Line;
    var other_1375: IdealPoint;

    self_1615 = self_1614;
    other_1375 = other_1374;
    let _e5: Line = self_1615;
    let _e8: IdealPoint = other_1375;
    let _e13: Line = self_1615;
    let _e16: IdealPoint = other_1375;
    let _e21: Line = self_1615;
    let _e24: IdealPoint = other_1375;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_right_anti_contraction(self_1616: Line, other_1376: IdealPoint) -> AntiScalar {
    var self_1617: Line;
    var other_1377: IdealPoint;

    self_1617 = self_1616;
    other_1377 = other_1376;
    let _e5: Line = self_1617;
    let _e8: IdealPoint = other_1377;
    let _e13: Line = self_1617;
    let _e16: IdealPoint = other_1377;
    let _e21: Line = self_1617;
    let _e24: IdealPoint = other_1377;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_scalar_product(self_1618: Line, other_1378: IdealPoint) -> Scalar {
    var self_1619: Line;
    var other_1379: IdealPoint;

    self_1619 = self_1618;
    other_1379 = other_1378;
    let _e5: Line = self_1619;
    let _e8: IdealPoint = other_1379;
    let _e13: Line = self_1619;
    let _e16: IdealPoint = other_1379;
    let _e21: Line = self_1619;
    let _e24: IdealPoint = other_1379;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_ideal_point_anti_scalar_product(self_1620: Line, other_1380: IdealPoint) -> AntiScalar {
    var self_1621: Line;
    var other_1381: IdealPoint;

    self_1621 = self_1620;
    other_1381 = other_1380;
    let _e5: Line = self_1621;
    let _e8: IdealPoint = other_1381;
    let _e13: Line = self_1621;
    let _e16: IdealPoint = other_1381;
    let _e21: Line = self_1621;
    let _e24: IdealPoint = other_1381;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)));
}

fn line_plane_geometric_product(self_1622: Line, other_1382: Plane) -> PointAndPlane {
    var self_1623: Line;
    var other_1383: Plane;

    self_1623 = self_1622;
    other_1383 = other_1382;
    let _e4: Line = self_1623;
    let _e8: Plane = other_1383;
    let _e19: Line = self_1623;
    let _e23: Plane = other_1383;
    let _e35: Line = self_1623;
    let _e39: Plane = other_1383;
    let _e51: Line = self_1623;
    let _e55: Plane = other_1383;
    let _e67: Line = self_1623;
    let _e70: Line = self_1623;
    let _e73: Line = self_1623;
    let _e76: Line = self_1623;
    let _e80: Plane = other_1383;
    let _e93: Line = self_1623;
    let _e97: Plane = other_1383;
    let _e108: Line = self_1623;
    let _e112: Plane = other_1383;
    let _e124: Line = self_1623;
    let _e128: Plane = other_1383;
    let _e140: Line = self_1623;
    let _e144: Plane = other_1383;
    let _e156: Line = self_1623;
    let _e159: Line = self_1623;
    let _e162: Line = self_1623;
    let _e165: Line = self_1623;
    let _e169: Plane = other_1383;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e124.g1_.y) * _e128.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e156.g0_.x, _e159.g0_.x, _e162.g1_.x, _e165.g1_.x) * _e169.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_outer_product(self_1624: Line, other_1384: Plane) -> Point {
    var self_1625: Line;
    var other_1385: Plane;

    self_1625 = self_1624;
    other_1385 = other_1384;
    let _e4: Line = self_1625;
    let _e8: Plane = other_1385;
    let _e19: Line = self_1625;
    let _e23: Plane = other_1385;
    let _e35: Line = self_1625;
    let _e39: Plane = other_1385;
    let _e51: Line = self_1625;
    let _e55: Plane = other_1385;
    let _e67: Line = self_1625;
    let _e70: Line = self_1625;
    let _e73: Line = self_1625;
    let _e76: Line = self_1625;
    let _e80: Plane = other_1385;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_inner_product(self_1626: Line, other_1386: Plane) -> Plane {
    var self_1627: Line;
    var other_1387: Plane;

    self_1627 = self_1626;
    other_1387 = other_1386;
    let _e4: Line = self_1627;
    let _e8: Plane = other_1387;
    let _e19: Line = self_1627;
    let _e23: Plane = other_1387;
    let _e35: Line = self_1627;
    let _e39: Plane = other_1387;
    let _e51: Line = self_1627;
    let _e55: Plane = other_1387;
    let _e67: Line = self_1627;
    let _e70: Line = self_1627;
    let _e73: Line = self_1627;
    let _e76: Line = self_1627;
    let _e80: Plane = other_1387;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_geometric_anti_product(self_1628: Line, other_1388: Plane) -> PointAndPlane {
    var self_1629: Line;
    var other_1389: Plane;

    self_1629 = self_1628;
    other_1389 = other_1388;
    let _e4: Line = self_1629;
    let _e8: Plane = other_1389;
    let _e19: Line = self_1629;
    let _e23: Plane = other_1389;
    let _e35: Line = self_1629;
    let _e39: Plane = other_1389;
    let _e51: Line = self_1629;
    let _e55: Plane = other_1389;
    let _e67: Line = self_1629;
    let _e70: Line = self_1629;
    let _e73: Line = self_1629;
    let _e76: Line = self_1629;
    let _e80: Plane = other_1389;
    let _e93: Line = self_1629;
    let _e97: Plane = other_1389;
    let _e108: Line = self_1629;
    let _e112: Plane = other_1389;
    let _e124: Line = self_1629;
    let _e128: Plane = other_1389;
    let _e140: Line = self_1629;
    let _e144: Plane = other_1389;
    let _e156: Line = self_1629;
    let _e159: Line = self_1629;
    let _e162: Line = self_1629;
    let _e165: Line = self_1629;
    let _e169: Plane = other_1389;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((vec4<f32>(_e93.g0_.y) * _e97.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e124.g1_.y) * _e128.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e156.g1_.x, _e159.g1_.x, _e162.g0_.x, _e165.g0_.x) * _e169.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_inner_anti_product(self_1630: Line, other_1390: Plane) -> Point {
    var self_1631: Line;
    var other_1391: Plane;

    self_1631 = self_1630;
    other_1391 = other_1390;
    let _e4: Line = self_1631;
    let _e8: Plane = other_1391;
    let _e19: Line = self_1631;
    let _e23: Plane = other_1391;
    let _e35: Line = self_1631;
    let _e39: Plane = other_1391;
    let _e51: Line = self_1631;
    let _e55: Plane = other_1391;
    let _e67: Line = self_1631;
    let _e70: Line = self_1631;
    let _e73: Line = self_1631;
    let _e76: Line = self_1631;
    let _e80: Plane = other_1391;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_plane_right_contraction(self_1632: Line, other_1392: Plane) -> Plane {
    var self_1633: Line;
    var other_1393: Plane;

    self_1633 = self_1632;
    other_1393 = other_1392;
    let _e4: Line = self_1633;
    let _e8: Plane = other_1393;
    let _e19: Line = self_1633;
    let _e23: Plane = other_1393;
    let _e35: Line = self_1633;
    let _e39: Plane = other_1393;
    let _e51: Line = self_1633;
    let _e55: Plane = other_1393;
    let _e67: Line = self_1633;
    let _e70: Line = self_1633;
    let _e73: Line = self_1633;
    let _e76: Line = self_1633;
    let _e80: Plane = other_1393;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_plane_left_anti_contraction(self_1634: Line, other_1394: Plane) -> Point {
    var self_1635: Line;
    var other_1395: Plane;

    self_1635 = self_1634;
    other_1395 = other_1394;
    let _e4: Line = self_1635;
    let _e8: Plane = other_1395;
    let _e19: Line = self_1635;
    let _e23: Plane = other_1395;
    let _e35: Line = self_1635;
    let _e39: Plane = other_1395;
    let _e51: Line = self_1635;
    let _e55: Plane = other_1395;
    let _e67: Line = self_1635;
    let _e70: Line = self_1635;
    let _e73: Line = self_1635;
    let _e76: Line = self_1635;
    let _e80: Plane = other_1395;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_line_add(self_1636: Line, other_1396: Line) -> Line {
    var self_1637: Line;
    var other_1397: Line;

    self_1637 = self_1636;
    other_1397 = other_1396;
    let _e4: Line = self_1637;
    let _e6: Line = other_1397;
    let _e9: Line = self_1637;
    let _e11: Line = other_1397;
    return Line((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn line_line_sub(self_1638: Line, other_1398: Line) -> Line {
    var self_1639: Line;
    var other_1399: Line;

    self_1639 = self_1638;
    other_1399 = other_1398;
    let _e4: Line = self_1639;
    let _e6: Line = other_1399;
    let _e9: Line = self_1639;
    let _e11: Line = other_1399;
    return Line((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn line_line_mul(self_1640: Line, other_1400: Line) -> Line {
    var self_1641: Line;
    var other_1401: Line;

    self_1641 = self_1640;
    other_1401 = other_1400;
    let _e4: Line = self_1641;
    let _e6: Line = other_1401;
    let _e9: Line = self_1641;
    let _e11: Line = other_1401;
    return Line((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn line_line_div(self_1642: Line, other_1402: Line) -> Line {
    var self_1643: Line;
    var other_1403: Line;

    self_1643 = self_1642;
    other_1403 = other_1402;
    let _e4: Line = self_1643;
    let _e7: Line = self_1643;
    let _e10: Line = self_1643;
    let _e19: Line = other_1403;
    let _e22: Line = other_1403;
    let _e25: Line = other_1403;
    let _e35: Line = self_1643;
    let _e38: Line = self_1643;
    let _e41: Line = self_1643;
    let _e50: Line = other_1403;
    let _e53: Line = other_1403;
    let _e56: Line = other_1403;
    return Line((((vec3<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e19.g0_.x, _e22.g0_.y, _e25.g0_.z)) * vec3<f32>(1.0, 1.0, 1.0)), (((vec3<f32>(_e35.g1_.x, _e38.g1_.y, _e41.g1_.z) * vec3<f32>(1.0, 1.0, 1.0)) / vec3<f32>(_e50.g1_.x, _e53.g1_.y, _e56.g1_.z)) * vec3<f32>(1.0, 1.0, 1.0)));
}

fn line_line_geometric_product(self_1644: Line, other_1404: Line) -> Motor {
    var self_1645: Line;
    var other_1405: Line;

    self_1645 = self_1644;
    other_1405 = other_1404;
    let _e4: Line = self_1645;
    let _e8: Line = other_1405;
    let _e11: Line = other_1405;
    let _e14: Line = other_1405;
    let _e17: Line = other_1405;
    let _e30: Line = self_1645;
    let _e34: Line = other_1405;
    let _e37: Line = other_1405;
    let _e40: Line = other_1405;
    let _e43: Line = other_1405;
    let _e57: Line = self_1645;
    let _e61: Line = other_1405;
    let _e64: Line = other_1405;
    let _e67: Line = other_1405;
    let _e70: Line = other_1405;
    let _e84: Line = self_1645;
    let _e88: Line = other_1405;
    let _e91: Line = other_1405;
    let _e94: Line = other_1405;
    let _e97: Line = other_1405;
    let _e111: Line = self_1645;
    let _e115: Line = other_1405;
    let _e118: Line = other_1405;
    let _e121: Line = other_1405;
    let _e124: Line = other_1405;
    let _e138: Line = self_1645;
    let _e142: Line = other_1405;
    let _e145: Line = other_1405;
    let _e148: Line = other_1405;
    let _e151: Line = other_1405;
    let _e165: Line = self_1645;
    let _e169: Line = other_1405;
    let _e172: Line = other_1405;
    let _e175: Line = other_1405;
    let _e178: Line = other_1405;
    let _e190: Line = self_1645;
    let _e194: Line = other_1405;
    let _e197: Line = other_1405;
    let _e200: Line = other_1405;
    let _e203: Line = other_1405;
    let _e216: Line = self_1645;
    let _e220: Line = other_1405;
    let _e223: Line = other_1405;
    let _e226: Line = other_1405;
    let _e229: Line = other_1405;
    let _e242: Line = self_1645;
    let _e246: Line = other_1405;
    let _e249: Line = other_1405;
    let _e252: Line = other_1405;
    let _e255: Line = other_1405;
    let _e268: Line = self_1645;
    let _e272: Line = other_1405;
    let _e275: Line = other_1405;
    let _e278: Line = other_1405;
    let _e281: Line = other_1405;
    let _e294: Line = self_1645;
    let _e298: Line = other_1405;
    let _e301: Line = other_1405;
    let _e304: Line = other_1405;
    let _e307: Line = other_1405;
    return Motor((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.z, _e14.g0_.y, _e17.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g0_.y, _e40.g0_.x, _e43.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e57.g1_.x) * vec4<f32>(_e61.g1_.x, _e64.g1_.x, _e67.g1_.z, _e70.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g1_.y, _e91.g1_.z, _e94.g1_.y, _e97.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e111.g1_.z) * vec4<f32>(_e115.g1_.z, _e118.g1_.y, _e121.g1_.x, _e124.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e138.g0_.x) * vec4<f32>(_e142.g0_.x, _e145.g0_.x, _e148.g0_.z, _e151.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e165.g0_.y) * vec4<f32>(_e169.g1_.y, _e172.g1_.z, _e175.g1_.y, _e178.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e190.g0_.z) * vec4<f32>(_e194.g1_.z, _e197.g1_.y, _e200.g1_.x, _e203.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e216.g1_.x) * vec4<f32>(_e220.g0_.x, _e223.g0_.x, _e226.g0_.z, _e229.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e242.g1_.y) * vec4<f32>(_e246.g0_.y, _e249.g0_.z, _e252.g0_.y, _e255.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e268.g1_.z) * vec4<f32>(_e272.g0_.z, _e275.g0_.y, _e278.g0_.x, _e281.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e294.g0_.x) * vec4<f32>(_e298.g1_.x, _e301.g1_.x, _e304.g1_.z, _e307.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))));
}

fn line_line_regressive_product(self_1646: Line, other_1406: Line) -> Scalar {
    var self_1647: Line;
    var other_1407: Line;

    self_1647 = self_1646;
    other_1407 = other_1406;
    let _e4: Line = self_1647;
    let _e7: Line = other_1407;
    let _e11: Line = self_1647;
    let _e14: Line = other_1407;
    let _e19: Line = self_1647;
    let _e22: Line = other_1407;
    let _e27: Line = self_1647;
    let _e30: Line = other_1407;
    let _e35: Line = self_1647;
    let _e38: Line = other_1407;
    let _e43: Line = self_1647;
    let _e46: Line = other_1407;
    return Scalar(((((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g1_.x * _e30.g0_.x)) + (_e35.g1_.y * _e38.g0_.y)) + (_e43.g1_.z * _e46.g0_.z)));
}

fn line_line_outer_product(self_1648: Line, other_1408: Line) -> AntiScalar {
    var self_1649: Line;
    var other_1409: Line;

    self_1649 = self_1648;
    other_1409 = other_1408;
    let _e4: Line = self_1649;
    let _e7: Line = other_1409;
    let _e11: Line = self_1649;
    let _e14: Line = other_1409;
    let _e19: Line = self_1649;
    let _e22: Line = other_1409;
    let _e27: Line = self_1649;
    let _e30: Line = other_1409;
    let _e35: Line = self_1649;
    let _e38: Line = other_1409;
    let _e43: Line = self_1649;
    let _e46: Line = other_1409;
    return AntiScalar(((((((_e4.g0_.x * _e7.g1_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g1_.x * _e30.g0_.x)) + (_e35.g1_.y * _e38.g0_.y)) + (_e43.g1_.z * _e46.g0_.z)));
}

fn line_line_inner_product(self_1650: Line, other_1410: Line) -> Scalar {
    var self_1651: Line;
    var other_1411: Line;

    self_1651 = self_1650;
    other_1411 = other_1410;
    let _e5: Line = self_1651;
    let _e8: Line = other_1411;
    let _e13: Line = self_1651;
    let _e16: Line = other_1411;
    let _e21: Line = self_1651;
    let _e24: Line = other_1411;
    let _e29: Line = self_1651;
    let _e32: Line = other_1411;
    let _e37: Line = self_1651;
    let _e40: Line = other_1411;
    let _e45: Line = self_1651;
    let _e48: Line = other_1411;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_geometric_anti_product(self_1652: Line, other_1412: Line) -> Motor {
    var self_1653: Line;
    var other_1413: Line;

    self_1653 = self_1652;
    other_1413 = other_1412;
    let _e4: Line = self_1653;
    let _e8: Line = other_1413;
    let _e11: Line = other_1413;
    let _e14: Line = other_1413;
    let _e17: Line = other_1413;
    let _e29: Line = self_1653;
    let _e33: Line = other_1413;
    let _e36: Line = other_1413;
    let _e39: Line = other_1413;
    let _e42: Line = other_1413;
    let _e55: Line = self_1653;
    let _e59: Line = other_1413;
    let _e62: Line = other_1413;
    let _e65: Line = other_1413;
    let _e68: Line = other_1413;
    let _e81: Line = self_1653;
    let _e85: Line = other_1413;
    let _e88: Line = other_1413;
    let _e91: Line = other_1413;
    let _e94: Line = other_1413;
    let _e107: Line = self_1653;
    let _e111: Line = other_1413;
    let _e114: Line = other_1413;
    let _e117: Line = other_1413;
    let _e120: Line = other_1413;
    let _e133: Line = self_1653;
    let _e137: Line = other_1413;
    let _e140: Line = other_1413;
    let _e143: Line = other_1413;
    let _e146: Line = other_1413;
    let _e159: Line = self_1653;
    let _e163: Line = other_1413;
    let _e166: Line = other_1413;
    let _e169: Line = other_1413;
    let _e172: Line = other_1413;
    let _e185: Line = self_1653;
    let _e189: Line = other_1413;
    let _e192: Line = other_1413;
    let _e195: Line = other_1413;
    let _e198: Line = other_1413;
    let _e212: Line = self_1653;
    let _e216: Line = other_1413;
    let _e219: Line = other_1413;
    let _e222: Line = other_1413;
    let _e225: Line = other_1413;
    let _e239: Line = self_1653;
    let _e243: Line = other_1413;
    let _e246: Line = other_1413;
    let _e249: Line = other_1413;
    let _e252: Line = other_1413;
    let _e266: Line = self_1653;
    let _e270: Line = other_1413;
    let _e273: Line = other_1413;
    let _e276: Line = other_1413;
    let _e279: Line = other_1413;
    let _e293: Line = self_1653;
    let _e297: Line = other_1413;
    let _e300: Line = other_1413;
    let _e303: Line = other_1413;
    let _e306: Line = other_1413;
    return Motor((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y, _e11.g1_.z, _e14.g1_.y, _e17.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.z, _e36.g1_.y, _e39.g1_.x, _e42.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.x, _e65.g0_.z, _e68.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e81.g1_.y) * vec4<f32>(_e85.g0_.y, _e88.g0_.z, _e91.g0_.y, _e94.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e107.g1_.z) * vec4<f32>(_e111.g0_.z, _e114.g0_.y, _e117.g0_.x, _e120.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e133.g0_.x) * vec4<f32>(_e137.g1_.x, _e140.g1_.x, _e143.g1_.z, _e146.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e159.g0_.y) * vec4<f32>(_e163.g0_.y, _e166.g0_.z, _e169.g0_.y, _e172.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e185.g0_.z) * vec4<f32>(_e189.g0_.z, _e192.g0_.y, _e195.g0_.x, _e198.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e212.g1_.x) * vec4<f32>(_e216.g1_.x, _e219.g1_.x, _e222.g1_.z, _e225.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e239.g1_.y) * vec4<f32>(_e243.g1_.y, _e246.g1_.z, _e249.g1_.y, _e252.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e266.g1_.z) * vec4<f32>(_e270.g1_.z, _e273.g1_.y, _e276.g1_.x, _e279.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e293.g0_.x) * vec4<f32>(_e297.g0_.x, _e300.g0_.x, _e303.g0_.z, _e306.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))));
}

fn line_line_inner_anti_product(self_1654: Line, other_1414: Line) -> AntiScalar {
    var self_1655: Line;
    var other_1415: Line;

    self_1655 = self_1654;
    other_1415 = other_1414;
    let _e5: Line = self_1655;
    let _e8: Line = other_1415;
    let _e13: Line = self_1655;
    let _e16: Line = other_1415;
    let _e21: Line = self_1655;
    let _e24: Line = other_1415;
    let _e29: Line = self_1655;
    let _e32: Line = other_1415;
    let _e37: Line = self_1655;
    let _e40: Line = other_1415;
    let _e45: Line = self_1655;
    let _e48: Line = other_1415;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_left_contraction(self_1656: Line, other_1416: Line) -> Scalar {
    var self_1657: Line;
    var other_1417: Line;

    self_1657 = self_1656;
    other_1417 = other_1416;
    let _e5: Line = self_1657;
    let _e8: Line = other_1417;
    let _e13: Line = self_1657;
    let _e16: Line = other_1417;
    let _e21: Line = self_1657;
    let _e24: Line = other_1417;
    let _e29: Line = self_1657;
    let _e32: Line = other_1417;
    let _e37: Line = self_1657;
    let _e40: Line = other_1417;
    let _e45: Line = self_1657;
    let _e48: Line = other_1417;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_right_contraction(self_1658: Line, other_1418: Line) -> Scalar {
    var self_1659: Line;
    var other_1419: Line;

    self_1659 = self_1658;
    other_1419 = other_1418;
    let _e5: Line = self_1659;
    let _e8: Line = other_1419;
    let _e13: Line = self_1659;
    let _e16: Line = other_1419;
    let _e21: Line = self_1659;
    let _e24: Line = other_1419;
    let _e29: Line = self_1659;
    let _e32: Line = other_1419;
    let _e37: Line = self_1659;
    let _e40: Line = other_1419;
    let _e45: Line = self_1659;
    let _e48: Line = other_1419;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_left_anti_contraction(self_1660: Line, other_1420: Line) -> AntiScalar {
    var self_1661: Line;
    var other_1421: Line;

    self_1661 = self_1660;
    other_1421 = other_1420;
    let _e5: Line = self_1661;
    let _e8: Line = other_1421;
    let _e13: Line = self_1661;
    let _e16: Line = other_1421;
    let _e21: Line = self_1661;
    let _e24: Line = other_1421;
    let _e29: Line = self_1661;
    let _e32: Line = other_1421;
    let _e37: Line = self_1661;
    let _e40: Line = other_1421;
    let _e45: Line = self_1661;
    let _e48: Line = other_1421;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_right_anti_contraction(self_1662: Line, other_1422: Line) -> AntiScalar {
    var self_1663: Line;
    var other_1423: Line;

    self_1663 = self_1662;
    other_1423 = other_1422;
    let _e5: Line = self_1663;
    let _e8: Line = other_1423;
    let _e13: Line = self_1663;
    let _e16: Line = other_1423;
    let _e21: Line = self_1663;
    let _e24: Line = other_1423;
    let _e29: Line = self_1663;
    let _e32: Line = other_1423;
    let _e37: Line = self_1663;
    let _e40: Line = other_1423;
    let _e45: Line = self_1663;
    let _e48: Line = other_1423;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_scalar_product(self_1664: Line, other_1424: Line) -> Scalar {
    var self_1665: Line;
    var other_1425: Line;

    self_1665 = self_1664;
    other_1425 = other_1424;
    let _e5: Line = self_1665;
    let _e8: Line = other_1425;
    let _e13: Line = self_1665;
    let _e16: Line = other_1425;
    let _e21: Line = self_1665;
    let _e24: Line = other_1425;
    let _e29: Line = self_1665;
    let _e32: Line = other_1425;
    let _e37: Line = self_1665;
    let _e40: Line = other_1425;
    let _e45: Line = self_1665;
    let _e48: Line = other_1425;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_line_anti_scalar_product(self_1666: Line, other_1426: Line) -> AntiScalar {
    var self_1667: Line;
    var other_1427: Line;

    self_1667 = self_1666;
    other_1427 = other_1426;
    let _e5: Line = self_1667;
    let _e8: Line = other_1427;
    let _e13: Line = self_1667;
    let _e16: Line = other_1427;
    let _e21: Line = self_1667;
    let _e24: Line = other_1427;
    let _e29: Line = self_1667;
    let _e32: Line = other_1427;
    let _e37: Line = self_1667;
    let _e40: Line = other_1427;
    let _e45: Line = self_1667;
    let _e48: Line = other_1427;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g1_.x * _e32.g1_.x)) - (_e37.g1_.y * _e40.g1_.y)) - (_e45.g1_.z * _e48.g1_.z)));
}

fn line_translator_geometric_product(self_1668: Line, other_1428: Translator) -> Motor {
    var self_1669: Line;
    var other_1429: Translator;

    self_1669 = self_1668;
    other_1429 = other_1428;
    let _e4: Line = self_1669;
    let _e8: Translator = other_1429;
    let _e20: Line = self_1669;
    let _e24: Translator = other_1429;
    let _e37: Line = self_1669;
    let _e41: Translator = other_1429;
    let _e53: Line = self_1669;
    let _e57: Translator = other_1429;
    let _e69: Line = self_1669;
    let _e72: Line = self_1669;
    let _e75: Line = self_1669;
    let _e78: Line = self_1669;
    let _e82: Translator = other_1429;
    let _e95: Line = self_1669;
    let _e99: Translator = other_1429;
    let _e110: Line = self_1669;
    let _e114: Translator = other_1429;
    let _e126: Line = self_1669;
    let _e130: Translator = other_1429;
    let _e142: Line = self_1669;
    let _e145: Line = self_1669;
    let _e148: Line = self_1669;
    let _e151: Line = self_1669;
    let _e155: Translator = other_1429;
    return Motor(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e53.g1_.z) * vec4<f32>(_e57.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e69.g0_.x, _e72.g1_.x, _e75.g0_.x, _e78.g0_.x) * _e82.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))), (((((vec4<f32>(_e95.g1_.x) * _e99.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e110.g1_.y) * _e114.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e126.g1_.z) * _e130.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e142.g0_.x, _e145.g0_.x, _e148.g0_.y, _e151.g0_.z) * vec4<f32>(_e155.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn line_translator_regressive_product(self_1670: Line, other_1430: Translator) -> Scalar {
    var self_1671: Line;
    var other_1431: Translator;

    self_1671 = self_1670;
    other_1431 = other_1430;
    let _e4: Line = self_1671;
    let _e7: Translator = other_1431;
    let _e11: Line = self_1671;
    let _e14: Translator = other_1431;
    let _e19: Line = self_1671;
    let _e22: Translator = other_1431;
    return Scalar((((_e4.g1_.x * _e7.g0_.y) + (_e11.g1_.y * _e14.g0_.z)) + (_e19.g1_.z * _e22.g0_.w)));
}

fn line_translator_geometric_anti_product(self_1672: Line, other_1432: Translator) -> Motor {
    var self_1673: Line;
    var other_1433: Translator;

    self_1673 = self_1672;
    other_1433 = other_1432;
    let _e4: Line = self_1673;
    let _e8: Translator = other_1433;
    let _e19: Line = self_1673;
    let _e23: Translator = other_1433;
    let _e35: Line = self_1673;
    let _e39: Translator = other_1433;
    let _e51: Line = self_1673;
    let _e54: Line = self_1673;
    let _e57: Line = self_1673;
    let _e60: Line = self_1673;
    let _e64: Translator = other_1433;
    let _e79: Line = self_1673;
    let _e83: Translator = other_1433;
    let _e95: Line = self_1673;
    let _e99: Translator = other_1433;
    let _e112: Line = self_1673;
    let _e116: Translator = other_1433;
    let _e129: Line = self_1673;
    let _e133: Translator = other_1433;
    let _e146: Line = self_1673;
    let _e149: Line = self_1673;
    let _e152: Line = self_1673;
    let _e155: Line = self_1673;
    let _e159: Translator = other_1433;
    return Motor((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e19.g1_.y) * _e23.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g0_.x, _e54.g0_.x, _e57.g0_.y, _e60.g0_.z) * vec4<f32>(_e64.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e79.g0_.y) * _e83.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e95.g0_.z) * _e99.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e112.g1_.y) * vec4<f32>(_e116.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e129.g1_.z) * vec4<f32>(_e133.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e146.g0_.x, _e149.g1_.x, _e152.g0_.x, _e155.g0_.x) * _e159.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))));
}

fn line_translator_left_contraction(self_1674: Line, other_1434: Translator) -> Scalar {
    var self_1675: Line;
    var other_1435: Translator;

    self_1675 = self_1674;
    other_1435 = other_1434;
    let _e5: Line = self_1675;
    let _e8: Translator = other_1435;
    let _e13: Line = self_1675;
    let _e16: Translator = other_1435;
    let _e21: Line = self_1675;
    let _e24: Translator = other_1435;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn line_translator_right_anti_contraction(self_1676: Line, other_1436: Translator) -> AntiScalar {
    var self_1677: Line;
    var other_1437: Translator;

    self_1677 = self_1676;
    other_1437 = other_1436;
    let _e5: Line = self_1677;
    let _e8: Translator = other_1437;
    let _e13: Line = self_1677;
    let _e16: Translator = other_1437;
    let _e21: Line = self_1677;
    let _e24: Translator = other_1437;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn line_translator_scalar_product(self_1678: Line, other_1438: Translator) -> Scalar {
    var self_1679: Line;
    var other_1439: Translator;

    self_1679 = self_1678;
    other_1439 = other_1438;
    let _e5: Line = self_1679;
    let _e8: Translator = other_1439;
    let _e13: Line = self_1679;
    let _e16: Translator = other_1439;
    let _e21: Line = self_1679;
    let _e24: Translator = other_1439;
    return Scalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn line_translator_anti_scalar_product(self_1680: Line, other_1440: Translator) -> AntiScalar {
    var self_1681: Line;
    var other_1441: Translator;

    self_1681 = self_1680;
    other_1441 = other_1440;
    let _e5: Line = self_1681;
    let _e8: Translator = other_1441;
    let _e13: Line = self_1681;
    let _e16: Translator = other_1441;
    let _e21: Line = self_1681;
    let _e24: Translator = other_1441;
    return AntiScalar((((0.0 - (_e5.g0_.x * _e8.g0_.y)) - (_e13.g0_.y * _e16.g0_.z)) - (_e21.g0_.z * _e24.g0_.w)));
}

fn line_motor_add(self_1682: Line, other_1442: Motor) -> Motor {
    var self_1683: Line;
    var other_1443: Motor;

    self_1683 = self_1682;
    other_1443 = other_1442;
    let _e4: Line = self_1683;
    let _e7: Line = self_1683;
    let _e10: Line = self_1683;
    let _e13: Line = self_1683;
    let _e23: Motor = other_1443;
    let _e26: Line = self_1683;
    let _e29: Line = self_1683;
    let _e32: Line = self_1683;
    let _e35: Line = self_1683;
    let _e45: Motor = other_1443;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g1_.x, _e10.g1_.y, _e13.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e23.g0_), ((vec4<f32>(_e26.g0_.x, _e29.g0_.x, _e32.g0_.y, _e35.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e45.g1_));
}

fn line_motor_sub(self_1684: Line, other_1444: Motor) -> Motor {
    var self_1685: Line;
    var other_1445: Motor;

    self_1685 = self_1684;
    other_1445 = other_1444;
    let _e4: Line = self_1685;
    let _e7: Line = self_1685;
    let _e10: Line = self_1685;
    let _e13: Line = self_1685;
    let _e23: Motor = other_1445;
    let _e26: Line = self_1685;
    let _e29: Line = self_1685;
    let _e32: Line = self_1685;
    let _e35: Line = self_1685;
    let _e45: Motor = other_1445;
    return Motor(((vec4<f32>(_e4.g0_.x, _e7.g1_.x, _e10.g1_.y, _e13.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e23.g0_), ((vec4<f32>(_e26.g0_.x, _e29.g0_.x, _e32.g0_.y, _e35.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e45.g1_));
}

fn line_motor_geometric_product(self_1686: Line, other_1446: Motor) -> Motor {
    var self_1687: Line;
    var other_1447: Motor;

    self_1687 = self_1686;
    other_1447 = other_1446;
    let _e4: Line = self_1687;
    let _e8: Motor = other_1447;
    let _e21: Line = self_1687;
    let _e25: Motor = other_1447;
    let _e39: Line = self_1687;
    let _e43: Motor = other_1447;
    let _e57: Line = self_1687;
    let _e61: Motor = other_1447;
    let _e74: Line = self_1687;
    let _e78: Motor = other_1447;
    let _e91: Line = self_1687;
    let _e95: Motor = other_1447;
    let _e108: Line = self_1687;
    let _e112: Motor = other_1447;
    let _e123: Line = self_1687;
    let _e127: Motor = other_1447;
    let _e139: Line = self_1687;
    let _e143: Motor = other_1447;
    let _e155: Line = self_1687;
    let _e159: Motor = other_1447;
    let _e172: Line = self_1687;
    let _e176: Motor = other_1447;
    let _e189: Line = self_1687;
    let _e193: Motor = other_1447;
    return Motor((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e21.g0_.y) * _e25.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e39.g0_.z) * _e43.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e57.g1_.x) * _e61.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.y) * _e78.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e91.g1_.z) * _e95.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e108.g0_.x) * _e112.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e123.g0_.y) * _e127.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e139.g0_.z) * _e143.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e155.g1_.x) * _e159.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e172.g1_.y) * _e176.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e189.g1_.z) * _e193.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn line_motor_geometric_anti_product(self_1688: Line, other_1448: Motor) -> Motor {
    var self_1689: Line;
    var other_1449: Motor;

    self_1689 = self_1688;
    other_1449 = other_1448;
    let _e4: Line = self_1689;
    let _e8: Motor = other_1449;
    let _e20: Line = self_1689;
    let _e24: Motor = other_1449;
    let _e37: Line = self_1689;
    let _e41: Motor = other_1449;
    let _e54: Line = self_1689;
    let _e58: Motor = other_1449;
    let _e70: Line = self_1689;
    let _e74: Motor = other_1449;
    let _e86: Line = self_1689;
    let _e90: Motor = other_1449;
    let _e102: Line = self_1689;
    let _e106: Motor = other_1449;
    let _e118: Line = self_1689;
    let _e122: Motor = other_1449;
    let _e135: Line = self_1689;
    let _e139: Motor = other_1449;
    let _e152: Line = self_1689;
    let _e156: Motor = other_1449;
    let _e170: Line = self_1689;
    let _e174: Motor = other_1449;
    let _e188: Line = self_1689;
    let _e192: Motor = other_1449;
    return Motor((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e54.g1_.x) * _e58.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e70.g1_.y) * _e74.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e86.g1_.z) * _e90.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e102.g0_.x) * _e106.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e118.g0_.y) * _e122.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e135.g0_.z) * _e139.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e152.g1_.x) * _e156.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e170.g1_.y) * _e174.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e188.g1_.z) * _e192.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn line_motor_scalar_product(self_1690: Line, other_1450: Motor) -> Scalar {
    var self_1691: Line;
    var other_1451: Motor;

    self_1691 = self_1690;
    other_1451 = other_1450;
    let _e5: Line = self_1691;
    let _e8: Motor = other_1451;
    let _e13: Line = self_1691;
    let _e16: Motor = other_1451;
    let _e21: Line = self_1691;
    let _e24: Motor = other_1451;
    let _e29: Line = self_1691;
    let _e32: Motor = other_1451;
    let _e37: Line = self_1691;
    let _e40: Motor = other_1451;
    let _e45: Line = self_1691;
    let _e48: Motor = other_1451;
    return Scalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.y)) - (_e13.g0_.y * _e16.g1_.z)) - (_e21.g0_.z * _e24.g1_.w)) - (_e29.g1_.x * _e32.g0_.y)) - (_e37.g1_.y * _e40.g0_.z)) - (_e45.g1_.z * _e48.g0_.w)));
}

fn line_motor_anti_scalar_product(self_1692: Line, other_1452: Motor) -> AntiScalar {
    var self_1693: Line;
    var other_1453: Motor;

    self_1693 = self_1692;
    other_1453 = other_1452;
    let _e5: Line = self_1693;
    let _e8: Motor = other_1453;
    let _e13: Line = self_1693;
    let _e16: Motor = other_1453;
    let _e21: Line = self_1693;
    let _e24: Motor = other_1453;
    let _e29: Line = self_1693;
    let _e32: Motor = other_1453;
    let _e37: Line = self_1693;
    let _e40: Motor = other_1453;
    let _e45: Line = self_1693;
    let _e48: Motor = other_1453;
    return AntiScalar(((((((0.0 - (_e5.g0_.x * _e8.g1_.y)) - (_e13.g0_.y * _e16.g1_.z)) - (_e21.g0_.z * _e24.g1_.w)) - (_e29.g1_.x * _e32.g0_.y)) - (_e37.g1_.y * _e40.g0_.z)) - (_e45.g1_.z * _e48.g0_.w)));
}

fn line_point_and_plane_geometric_product(self_1694: Line, other_1454: PointAndPlane) -> PointAndPlane {
    var self_1695: Line;
    var other_1455: PointAndPlane;

    self_1695 = self_1694;
    other_1455 = other_1454;
    let _e4: Line = self_1695;
    let _e8: PointAndPlane = other_1455;
    let _e11: PointAndPlane = other_1455;
    let _e14: PointAndPlane = other_1455;
    let _e17: PointAndPlane = other_1455;
    let _e30: Line = self_1695;
    let _e34: PointAndPlane = other_1455;
    let _e37: PointAndPlane = other_1455;
    let _e40: PointAndPlane = other_1455;
    let _e43: PointAndPlane = other_1455;
    let _e57: Line = self_1695;
    let _e61: PointAndPlane = other_1455;
    let _e64: PointAndPlane = other_1455;
    let _e67: PointAndPlane = other_1455;
    let _e70: PointAndPlane = other_1455;
    let _e84: Line = self_1695;
    let _e88: PointAndPlane = other_1455;
    let _e91: PointAndPlane = other_1455;
    let _e94: PointAndPlane = other_1455;
    let _e97: PointAndPlane = other_1455;
    let _e111: Line = self_1695;
    let _e115: PointAndPlane = other_1455;
    let _e118: PointAndPlane = other_1455;
    let _e121: PointAndPlane = other_1455;
    let _e124: PointAndPlane = other_1455;
    let _e138: Line = self_1695;
    let _e142: PointAndPlane = other_1455;
    let _e145: PointAndPlane = other_1455;
    let _e148: PointAndPlane = other_1455;
    let _e151: PointAndPlane = other_1455;
    let _e165: Line = self_1695;
    let _e169: PointAndPlane = other_1455;
    let _e172: PointAndPlane = other_1455;
    let _e175: PointAndPlane = other_1455;
    let _e178: PointAndPlane = other_1455;
    let _e191: Line = self_1695;
    let _e195: PointAndPlane = other_1455;
    let _e198: PointAndPlane = other_1455;
    let _e201: PointAndPlane = other_1455;
    let _e204: PointAndPlane = other_1455;
    let _e218: Line = self_1695;
    let _e222: PointAndPlane = other_1455;
    let _e225: PointAndPlane = other_1455;
    let _e228: PointAndPlane = other_1455;
    let _e231: PointAndPlane = other_1455;
    let _e245: Line = self_1695;
    let _e249: PointAndPlane = other_1455;
    let _e252: PointAndPlane = other_1455;
    let _e255: PointAndPlane = other_1455;
    let _e258: PointAndPlane = other_1455;
    let _e272: Line = self_1695;
    let _e276: PointAndPlane = other_1455;
    let _e279: PointAndPlane = other_1455;
    let _e282: PointAndPlane = other_1455;
    let _e285: PointAndPlane = other_1455;
    let _e299: Line = self_1695;
    let _e303: PointAndPlane = other_1455;
    let _e306: PointAndPlane = other_1455;
    let _e309: PointAndPlane = other_1455;
    let _e312: PointAndPlane = other_1455;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.y, _e11.g0_.x, _e14.g1_.w, _e17.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.x, _e43.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.w, _e64.g1_.z, _e67.g1_.y, _e70.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g1_.y, _e91.g1_.x, _e94.g0_.w, _e97.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e111.g1_.y) * vec4<f32>(_e115.g1_.z, _e118.g0_.w, _e121.g1_.x, _e124.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e138.g1_.z) * vec4<f32>(_e142.g1_.w, _e145.g0_.z, _e148.g0_.y, _e151.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((((vec4<f32>(_e165.g0_.x) * vec4<f32>(_e169.g1_.y, _e172.g1_.x, _e175.g0_.w, _e178.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e191.g0_.y) * vec4<f32>(_e195.g1_.z, _e198.g0_.w, _e201.g1_.x, _e204.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e218.g0_.z) * vec4<f32>(_e222.g1_.w, _e225.g0_.z, _e228.g0_.y, _e231.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e245.g1_.x) * vec4<f32>(_e249.g0_.y, _e252.g0_.x, _e255.g1_.w, _e258.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e272.g1_.y) * vec4<f32>(_e276.g0_.z, _e279.g1_.w, _e282.g0_.x, _e285.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e299.g1_.z) * vec4<f32>(_e303.g0_.w, _e306.g1_.z, _e309.g1_.y, _e312.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn line_point_and_plane_regressive_product(self_1696: Line, other_1456: PointAndPlane) -> Plane {
    var self_1697: Line;
    var other_1457: PointAndPlane;

    self_1697 = self_1696;
    other_1457 = other_1456;
    let _e4: Line = self_1697;
    let _e8: PointAndPlane = other_1457;
    let _e19: Line = self_1697;
    let _e23: PointAndPlane = other_1457;
    let _e35: Line = self_1697;
    let _e39: PointAndPlane = other_1457;
    let _e51: Line = self_1697;
    let _e55: PointAndPlane = other_1457;
    let _e67: Line = self_1697;
    let _e70: Line = self_1697;
    let _e73: Line = self_1697;
    let _e76: Line = self_1697;
    let _e80: PointAndPlane = other_1457;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_point_and_plane_outer_product(self_1698: Line, other_1458: PointAndPlane) -> Point {
    var self_1699: Line;
    var other_1459: PointAndPlane;

    self_1699 = self_1698;
    other_1459 = other_1458;
    let _e4: Line = self_1699;
    let _e8: PointAndPlane = other_1459;
    let _e19: Line = self_1699;
    let _e23: PointAndPlane = other_1459;
    let _e35: Line = self_1699;
    let _e39: PointAndPlane = other_1459;
    let _e51: Line = self_1699;
    let _e55: PointAndPlane = other_1459;
    let _e67: Line = self_1699;
    let _e70: Line = self_1699;
    let _e73: Line = self_1699;
    let _e76: Line = self_1699;
    let _e80: PointAndPlane = other_1459;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_and_plane_inner_product(self_1700: Line, other_1460: PointAndPlane) -> Plane {
    var self_1701: Line;
    var other_1461: PointAndPlane;

    self_1701 = self_1700;
    other_1461 = other_1460;
    let _e4: Line = self_1701;
    let _e8: PointAndPlane = other_1461;
    let _e11: PointAndPlane = other_1461;
    let _e14: PointAndPlane = other_1461;
    let _e17: PointAndPlane = other_1461;
    let _e30: Line = self_1701;
    let _e34: PointAndPlane = other_1461;
    let _e37: PointAndPlane = other_1461;
    let _e40: PointAndPlane = other_1461;
    let _e43: PointAndPlane = other_1461;
    let _e57: Line = self_1701;
    let _e61: PointAndPlane = other_1461;
    let _e64: PointAndPlane = other_1461;
    let _e67: PointAndPlane = other_1461;
    let _e70: PointAndPlane = other_1461;
    let _e84: Line = self_1701;
    let _e88: PointAndPlane = other_1461;
    let _e91: PointAndPlane = other_1461;
    let _e94: PointAndPlane = other_1461;
    let _e97: PointAndPlane = other_1461;
    let _e111: Line = self_1701;
    let _e115: PointAndPlane = other_1461;
    let _e118: PointAndPlane = other_1461;
    let _e121: PointAndPlane = other_1461;
    let _e124: PointAndPlane = other_1461;
    let _e138: Line = self_1701;
    let _e142: PointAndPlane = other_1461;
    let _e145: PointAndPlane = other_1461;
    let _e148: PointAndPlane = other_1461;
    let _e151: PointAndPlane = other_1461;
    return Plane((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.y, _e91.g0_.x, _e94.g1_.w, _e97.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e111.g1_.y) * vec4<f32>(_e115.g0_.z, _e118.g1_.w, _e121.g0_.x, _e124.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e138.g1_.z) * vec4<f32>(_e142.g0_.w, _e145.g1_.z, _e148.g1_.y, _e151.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn line_point_and_plane_geometric_anti_product(self_1702: Line, other_1462: PointAndPlane) -> PointAndPlane {
    var self_1703: Line;
    var other_1463: PointAndPlane;

    self_1703 = self_1702;
    other_1463 = other_1462;
    let _e4: Line = self_1703;
    let _e8: PointAndPlane = other_1463;
    let _e11: PointAndPlane = other_1463;
    let _e14: PointAndPlane = other_1463;
    let _e17: PointAndPlane = other_1463;
    let _e30: Line = self_1703;
    let _e34: PointAndPlane = other_1463;
    let _e37: PointAndPlane = other_1463;
    let _e40: PointAndPlane = other_1463;
    let _e43: PointAndPlane = other_1463;
    let _e57: Line = self_1703;
    let _e61: PointAndPlane = other_1463;
    let _e64: PointAndPlane = other_1463;
    let _e67: PointAndPlane = other_1463;
    let _e70: PointAndPlane = other_1463;
    let _e84: Line = self_1703;
    let _e88: PointAndPlane = other_1463;
    let _e91: PointAndPlane = other_1463;
    let _e94: PointAndPlane = other_1463;
    let _e97: PointAndPlane = other_1463;
    let _e111: Line = self_1703;
    let _e115: PointAndPlane = other_1463;
    let _e118: PointAndPlane = other_1463;
    let _e121: PointAndPlane = other_1463;
    let _e124: PointAndPlane = other_1463;
    let _e138: Line = self_1703;
    let _e142: PointAndPlane = other_1463;
    let _e145: PointAndPlane = other_1463;
    let _e148: PointAndPlane = other_1463;
    let _e151: PointAndPlane = other_1463;
    let _e165: Line = self_1703;
    let _e169: PointAndPlane = other_1463;
    let _e172: PointAndPlane = other_1463;
    let _e175: PointAndPlane = other_1463;
    let _e178: PointAndPlane = other_1463;
    let _e191: Line = self_1703;
    let _e195: PointAndPlane = other_1463;
    let _e198: PointAndPlane = other_1463;
    let _e201: PointAndPlane = other_1463;
    let _e204: PointAndPlane = other_1463;
    let _e218: Line = self_1703;
    let _e222: PointAndPlane = other_1463;
    let _e225: PointAndPlane = other_1463;
    let _e228: PointAndPlane = other_1463;
    let _e231: PointAndPlane = other_1463;
    let _e245: Line = self_1703;
    let _e249: PointAndPlane = other_1463;
    let _e252: PointAndPlane = other_1463;
    let _e255: PointAndPlane = other_1463;
    let _e258: PointAndPlane = other_1463;
    let _e272: Line = self_1703;
    let _e276: PointAndPlane = other_1463;
    let _e279: PointAndPlane = other_1463;
    let _e282: PointAndPlane = other_1463;
    let _e285: PointAndPlane = other_1463;
    let _e299: Line = self_1703;
    let _e303: PointAndPlane = other_1463;
    let _e306: PointAndPlane = other_1463;
    let _e309: PointAndPlane = other_1463;
    let _e312: PointAndPlane = other_1463;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.y, _e91.g0_.x, _e94.g1_.w, _e97.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e111.g1_.y) * vec4<f32>(_e115.g0_.z, _e118.g1_.w, _e121.g0_.x, _e124.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e138.g1_.z) * vec4<f32>(_e142.g0_.w, _e145.g1_.z, _e148.g1_.y, _e151.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e165.g0_.x) * vec4<f32>(_e169.g0_.y, _e172.g0_.x, _e175.g1_.w, _e178.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e191.g0_.y) * vec4<f32>(_e195.g0_.z, _e198.g1_.w, _e201.g0_.x, _e204.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e218.g0_.z) * vec4<f32>(_e222.g0_.w, _e225.g1_.z, _e228.g1_.y, _e231.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e245.g1_.x) * vec4<f32>(_e249.g1_.y, _e252.g1_.x, _e255.g0_.w, _e258.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e272.g1_.y) * vec4<f32>(_e276.g1_.z, _e279.g0_.w, _e282.g1_.x, _e285.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e299.g1_.z) * vec4<f32>(_e303.g1_.w, _e306.g0_.z, _e309.g0_.y, _e312.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_and_plane_inner_anti_product(self_1704: Line, other_1464: PointAndPlane) -> Point {
    var self_1705: Line;
    var other_1465: PointAndPlane;

    self_1705 = self_1704;
    other_1465 = other_1464;
    let _e4: Line = self_1705;
    let _e8: PointAndPlane = other_1465;
    let _e11: PointAndPlane = other_1465;
    let _e14: PointAndPlane = other_1465;
    let _e17: PointAndPlane = other_1465;
    let _e30: Line = self_1705;
    let _e34: PointAndPlane = other_1465;
    let _e37: PointAndPlane = other_1465;
    let _e40: PointAndPlane = other_1465;
    let _e43: PointAndPlane = other_1465;
    let _e57: Line = self_1705;
    let _e61: PointAndPlane = other_1465;
    let _e64: PointAndPlane = other_1465;
    let _e67: PointAndPlane = other_1465;
    let _e70: PointAndPlane = other_1465;
    let _e84: Line = self_1705;
    let _e88: PointAndPlane = other_1465;
    let _e91: PointAndPlane = other_1465;
    let _e94: PointAndPlane = other_1465;
    let _e97: PointAndPlane = other_1465;
    let _e111: Line = self_1705;
    let _e115: PointAndPlane = other_1465;
    let _e118: PointAndPlane = other_1465;
    let _e121: PointAndPlane = other_1465;
    let _e124: PointAndPlane = other_1465;
    let _e138: Line = self_1705;
    let _e142: PointAndPlane = other_1465;
    let _e145: PointAndPlane = other_1465;
    let _e148: PointAndPlane = other_1465;
    let _e151: PointAndPlane = other_1465;
    return Point((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.y, _e11.g1_.x, _e14.g0_.w, _e17.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.y) * vec4<f32>(_e34.g1_.z, _e37.g0_.w, _e40.g1_.x, _e43.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.w, _e64.g0_.z, _e67.g0_.y, _e70.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.y, _e91.g0_.x, _e94.g1_.w, _e97.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e111.g1_.y) * vec4<f32>(_e115.g0_.z, _e118.g1_.w, _e121.g0_.x, _e124.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e138.g1_.z) * vec4<f32>(_e142.g0_.w, _e145.g1_.z, _e148.g1_.y, _e151.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_and_plane_left_contraction(self_1706: Line, other_1466: PointAndPlane) -> Plane {
    var self_1707: Line;
    var other_1467: PointAndPlane;

    self_1707 = self_1706;
    other_1467 = other_1466;
    let _e4: Line = self_1707;
    let _e8: PointAndPlane = other_1467;
    let _e19: Line = self_1707;
    let _e23: PointAndPlane = other_1467;
    let _e35: Line = self_1707;
    let _e39: PointAndPlane = other_1467;
    let _e51: Line = self_1707;
    let _e55: PointAndPlane = other_1467;
    let _e67: Line = self_1707;
    let _e70: Line = self_1707;
    let _e73: Line = self_1707;
    let _e76: Line = self_1707;
    let _e80: PointAndPlane = other_1467;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_and_plane_right_contraction(self_1708: Line, other_1468: PointAndPlane) -> Plane {
    var self_1709: Line;
    var other_1469: PointAndPlane;

    self_1709 = self_1708;
    other_1469 = other_1468;
    let _e4: Line = self_1709;
    let _e8: PointAndPlane = other_1469;
    let _e19: Line = self_1709;
    let _e23: PointAndPlane = other_1469;
    let _e35: Line = self_1709;
    let _e39: PointAndPlane = other_1469;
    let _e51: Line = self_1709;
    let _e55: PointAndPlane = other_1469;
    let _e67: Line = self_1709;
    let _e70: Line = self_1709;
    let _e73: Line = self_1709;
    let _e76: Line = self_1709;
    let _e80: PointAndPlane = other_1469;
    return Plane(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_point_and_plane_left_anti_contraction(self_1710: Line, other_1470: PointAndPlane) -> Point {
    var self_1711: Line;
    var other_1471: PointAndPlane;

    self_1711 = self_1710;
    other_1471 = other_1470;
    let _e4: Line = self_1711;
    let _e8: PointAndPlane = other_1471;
    let _e19: Line = self_1711;
    let _e23: PointAndPlane = other_1471;
    let _e35: Line = self_1711;
    let _e39: PointAndPlane = other_1471;
    let _e51: Line = self_1711;
    let _e55: PointAndPlane = other_1471;
    let _e67: Line = self_1711;
    let _e70: Line = self_1711;
    let _e73: Line = self_1711;
    let _e76: Line = self_1711;
    let _e80: PointAndPlane = other_1471;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e51.g1_.z) * _e55.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e67.g0_.x, _e70.g0_.x, _e73.g1_.x, _e76.g1_.x) * _e80.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn line_point_and_plane_right_anti_contraction(self_1712: Line, other_1472: PointAndPlane) -> Point {
    var self_1713: Line;
    var other_1473: PointAndPlane;

    self_1713 = self_1712;
    other_1473 = other_1472;
    let _e4: Line = self_1713;
    let _e8: PointAndPlane = other_1473;
    let _e19: Line = self_1713;
    let _e23: PointAndPlane = other_1473;
    let _e35: Line = self_1713;
    let _e39: PointAndPlane = other_1473;
    let _e51: Line = self_1713;
    let _e55: PointAndPlane = other_1473;
    let _e67: Line = self_1713;
    let _e70: Line = self_1713;
    let _e73: Line = self_1713;
    let _e76: Line = self_1713;
    let _e80: PointAndPlane = other_1473;
    return Point(((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.y) * _e39.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.z) * _e55.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e67.g1_.x, _e70.g1_.x, _e73.g0_.x, _e76.g0_.x) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn line_squared_magnitude(self_1714: Line) -> Scalar {
    var self_1715: Line;

    self_1715 = self_1714;
    let _e2: Line = self_1715;
    let _e3: Line = self_1715;
    let _e4: Line = line_reversal(_e3);
    let _e5: Scalar = line_line_scalar_product(_e2, _e4);
    return _e5;
}

fn line_magnitude(self_1716: Line) -> Scalar {
    var self_1717: Line;

    self_1717 = self_1716;
    let _e2: Line = self_1717;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_bulk_norm(self_1718: Line) -> Scalar {
    var self_1719: Line;

    self_1719 = self_1718;
    let _e2: Line = self_1719;
    let _e3: Scalar = line_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn line_squared_anti_magnitude(self_1720: Line) -> AntiScalar {
    var self_1721: Line;

    self_1721 = self_1720;
    let _e2: Line = self_1721;
    let _e3: Line = self_1721;
    let _e4: Line = line_anti_reversal(_e3);
    let _e5: AntiScalar = line_line_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn line_weight_norm(self_1722: Line) -> AntiScalar {
    var self_1723: Line;

    self_1723 = self_1722;
    let _e2: Line = self_1723;
    let _e3: AntiScalar = line_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn line_scale(self_1724: Line, other_1474: f32) -> Line {
    var self_1725: Line;
    var other_1475: f32;

    self_1725 = self_1724;
    other_1475 = other_1474;
    let _e4: Line = self_1725;
    let _e5: f32 = other_1475;
    let _e7: Line = line_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn line_signum(self_1726: Line) -> Line {
    var self_1727: Line;

    self_1727 = self_1726;
    let _e2: Line = self_1727;
    let _e3: Line = self_1727;
    let _e4: Scalar = line_magnitude(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn line_inverse(self_1728: Line) -> Line {
    var self_1729: Line;

    self_1729 = self_1728;
    let _e2: Line = self_1729;
    let _e3: Line = line_reversal(_e2);
    let _e4: Line = self_1729;
    let _e5: Scalar = line_squared_magnitude(_e4);
    let _e10: Line = line_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn line_unitize(self_1730: Line) -> Line {
    var self_1731: Line;

    self_1731 = self_1730;
    let _e2: Line = self_1731;
    let _e3: Line = self_1731;
    let _e4: AntiScalar = line_weight_norm(_e3);
    let _e9: Line = line_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn translator_zero() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn translator_one() -> Translator {
    return Translator(vec4<f32>(1.0, 0.0, 0.0, 0.0));
}

fn translator_neg(self_1732: Translator) -> Translator {
    var self_1733: Translator;

    self_1733 = self_1732;
    let _e2: Translator = self_1733;
    return Translator((_e2.g0_ * vec4<f32>(-(1.0))));
}

fn translator_automorphism(self_1734: Translator) -> Translator {
    var self_1735: Translator;

    self_1735 = self_1734;
    let _e2: Translator = self_1735;
    return Translator(_e2.g0_);
}

fn translator_reversal(self_1736: Translator) -> Translator {
    var self_1737: Translator;

    self_1737 = self_1736;
    let _e2: Translator = self_1737;
    return Translator((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn translator_conjugation(self_1738: Translator) -> Translator {
    var self_1739: Translator;

    self_1739 = self_1738;
    let _e2: Translator = self_1739;
    return Translator((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn translator_anti_reversal(self_1740: Translator) -> Translator {
    var self_1741: Translator;

    self_1741 = self_1740;
    let _e2: Translator = self_1741;
    return Translator((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn translator_scalar_into(self_1742: Translator) -> Scalar {
    var self_1743: Translator;

    self_1743 = self_1742;
    let _e2: Translator = self_1743;
    return Scalar(_e2.g0_.x);
}

fn translator_scalar_add(self_1744: Translator, other_1476: Scalar) -> Translator {
    var self_1745: Translator;
    var other_1477: Scalar;

    self_1745 = self_1744;
    other_1477 = other_1476;
    let _e4: Translator = self_1745;
    let _e6: Scalar = other_1477;
    return Translator((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn translator_scalar_sub(self_1746: Translator, other_1478: Scalar) -> Translator {
    var self_1747: Translator;
    var other_1479: Scalar;

    self_1747 = self_1746;
    other_1479 = other_1478;
    let _e4: Translator = self_1747;
    let _e6: Scalar = other_1479;
    return Translator((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn translator_scalar_geometric_product(self_1748: Translator, other_1480: Scalar) -> Translator {
    var self_1749: Translator;
    var other_1481: Scalar;

    self_1749 = self_1748;
    other_1481 = other_1480;
    let _e4: Translator = self_1749;
    let _e6: Scalar = other_1481;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_outer_product(self_1750: Translator, other_1482: Scalar) -> Translator {
    var self_1751: Translator;
    var other_1483: Scalar;

    self_1751 = self_1750;
    other_1483 = other_1482;
    let _e4: Translator = self_1751;
    let _e6: Scalar = other_1483;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_inner_product(self_1752: Translator, other_1484: Scalar) -> Translator {
    var self_1753: Translator;
    var other_1485: Scalar;

    self_1753 = self_1752;
    other_1485 = other_1484;
    let _e4: Translator = self_1753;
    let _e6: Scalar = other_1485;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_left_contraction(self_1754: Translator, other_1486: Scalar) -> Scalar {
    var self_1755: Translator;
    var other_1487: Scalar;

    self_1755 = self_1754;
    other_1487 = other_1486;
    let _e4: Translator = self_1755;
    let _e7: Scalar = other_1487;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn translator_scalar_right_contraction(self_1756: Translator, other_1488: Scalar) -> Translator {
    var self_1757: Translator;
    var other_1489: Scalar;

    self_1757 = self_1756;
    other_1489 = other_1488;
    let _e4: Translator = self_1757;
    let _e6: Scalar = other_1489;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_scalar_right_anti_contraction(self_1758: Translator, other_1490: Scalar) -> AntiScalar {
    var self_1759: Translator;
    var other_1491: Scalar;

    self_1759 = self_1758;
    other_1491 = other_1490;
    let _e4: Translator = self_1759;
    let _e7: Scalar = other_1491;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn translator_scalar_scalar_product(self_1760: Translator, other_1492: Scalar) -> Scalar {
    var self_1761: Translator;
    var other_1493: Scalar;

    self_1761 = self_1760;
    other_1493 = other_1492;
    let _e4: Translator = self_1761;
    let _e7: Scalar = other_1493;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn translator_scalar_anti_scalar_product(self_1762: Translator, other_1494: Scalar) -> AntiScalar {
    var self_1763: Translator;
    var other_1495: Scalar;

    self_1763 = self_1762;
    other_1495 = other_1494;
    let _e4: Translator = self_1763;
    let _e7: Scalar = other_1495;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn translator_anti_scalar_regressive_product(self_1764: Translator, other_1496: AntiScalar) -> Translator {
    var self_1765: Translator;
    var other_1497: AntiScalar;

    self_1765 = self_1764;
    other_1497 = other_1496;
    let _e4: Translator = self_1765;
    let _e6: AntiScalar = other_1497;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_outer_product(self_1766: Translator, other_1498: AntiScalar) -> AntiScalar {
    var self_1767: Translator;
    var other_1499: AntiScalar;

    self_1767 = self_1766;
    other_1499 = other_1498;
    let _e4: Translator = self_1767;
    let _e7: AntiScalar = other_1499;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn translator_anti_scalar_geometric_anti_product(self_1768: Translator, other_1500: AntiScalar) -> Translator {
    var self_1769: Translator;
    var other_1501: AntiScalar;

    self_1769 = self_1768;
    other_1501 = other_1500;
    let _e4: Translator = self_1769;
    let _e6: AntiScalar = other_1501;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_inner_anti_product(self_1770: Translator, other_1502: AntiScalar) -> Translator {
    var self_1771: Translator;
    var other_1503: AntiScalar;

    self_1771 = self_1770;
    other_1503 = other_1502;
    let _e4: Translator = self_1771;
    let _e6: AntiScalar = other_1503;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_anti_scalar_right_anti_contraction(self_1772: Translator, other_1504: AntiScalar) -> Translator {
    var self_1773: Translator;
    var other_1505: AntiScalar;

    self_1773 = self_1772;
    other_1505 = other_1504;
    let _e4: Translator = self_1773;
    let _e6: AntiScalar = other_1505;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_)));
}

fn translator_multi_vector_add(self_1774: Translator, other_1506: MultiVector) -> MultiVector {
    var self_1775: Translator;
    var other_1507: MultiVector;

    self_1775 = self_1774;
    other_1507 = other_1506;
    let _e4: Translator = self_1775;
    let _e14: MultiVector = other_1507;
    let _e17: MultiVector = other_1507;
    let _e19: MultiVector = other_1507;
    let _e21: Translator = self_1775;
    let _e29: MultiVector = other_1507;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e14.g0_), _e17.g1_, _e19.g2_, ((_e21.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e29.g3_));
}

fn translator_multi_vector_sub(self_1776: Translator, other_1508: MultiVector) -> MultiVector {
    var self_1777: Translator;
    var other_1509: MultiVector;

    self_1777 = self_1776;
    other_1509 = other_1508;
    let _e4: Translator = self_1777;
    let _e14: MultiVector = other_1509;
    let _e19: MultiVector = other_1509;
    let _e24: MultiVector = other_1509;
    let _e27: Translator = self_1777;
    let _e35: MultiVector = other_1509;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e14.g0_), (vec4<f32>(0.0) - _e19.g1_), (vec4<f32>(0.0) - _e24.g2_), ((_e27.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e35.g3_));
}

fn translator_multi_vector_geometric_product(self_1778: Translator, other_1510: MultiVector) -> MultiVector {
    var self_1779: Translator;
    var other_1511: MultiVector;

    self_1779 = self_1778;
    other_1511 = other_1510;
    let _e4: Translator = self_1779;
    let _e8: MultiVector = other_1511;
    let _e11: Translator = self_1779;
    let _e15: MultiVector = other_1511;
    let _e29: Translator = self_1779;
    let _e33: MultiVector = other_1511;
    let _e47: Translator = self_1779;
    let _e51: MultiVector = other_1511;
    let _e65: Translator = self_1779;
    let _e69: MultiVector = other_1511;
    let _e72: Translator = self_1779;
    let _e76: MultiVector = other_1511;
    let _e89: Translator = self_1779;
    let _e93: MultiVector = other_1511;
    let _e106: Translator = self_1779;
    let _e110: MultiVector = other_1511;
    let _e123: Translator = self_1779;
    let _e127: MultiVector = other_1511;
    let _e130: Translator = self_1779;
    let _e134: MultiVector = other_1511;
    let _e147: Translator = self_1779;
    let _e151: MultiVector = other_1511;
    let _e164: Translator = self_1779;
    let _e168: MultiVector = other_1511;
    let _e181: Translator = self_1779;
    let _e185: MultiVector = other_1511;
    let _e188: Translator = self_1779;
    let _e192: MultiVector = other_1511;
    let _e204: Translator = self_1779;
    let _e208: MultiVector = other_1511;
    let _e220: Translator = self_1779;
    let _e224: MultiVector = other_1511;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g3_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e29.g0_.z) * _e33.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e47.g0_.w) * _e51.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e65.g0_.x) * _e69.g1_) + ((vec4<f32>(_e72.g0_.y) * _e76.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e89.g0_.z) * _e93.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e106.g0_.w) * _e110.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e123.g0_.x) * _e127.g2_) + ((vec4<f32>(_e130.g0_.y) * _e134.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e147.g0_.z) * _e151.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e164.g0_.w) * _e168.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e181.g0_.x) * _e185.g3_) + ((vec4<f32>(_e188.g0_.y) * _e192.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e204.g0_.z) * _e208.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e220.g0_.w) * _e224.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn translator_multi_vector_outer_product(self_1780: Translator, other_1512: MultiVector) -> MultiVector {
    var self_1781: Translator;
    var other_1513: MultiVector;

    self_1781 = self_1780;
    other_1513 = other_1512;
    let _e4: Translator = self_1781;
    let _e8: MultiVector = other_1513;
    let _e11: Translator = self_1781;
    let _e15: MultiVector = other_1513;
    let _e18: Translator = self_1781;
    let _e22: MultiVector = other_1513;
    let _e34: Translator = self_1781;
    let _e38: MultiVector = other_1513;
    let _e50: Translator = self_1781;
    let _e53: MultiVector = other_1513;
    let _e65: Translator = self_1781;
    let _e69: MultiVector = other_1513;
    let _e72: Translator = self_1781;
    let _e76: MultiVector = other_1513;
    let _e79: Translator = self_1781;
    let _e83: MultiVector = other_1513;
    let _e94: Translator = self_1781;
    let _e98: MultiVector = other_1513;
    let _e109: Translator = self_1781;
    let _e112: MultiVector = other_1513;
    return MultiVector((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.z) * _e22.g2_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e34.g0_.w) * _e38.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e50.g0_.xxyy * _e53.g2_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), (vec4<f32>(_e65.g0_.x) * _e69.g2_), ((((vec4<f32>(_e72.g0_.x) * _e76.g3_) + ((vec4<f32>(_e79.g0_.z) * _e83.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e94.g0_.w) * _e98.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e109.g0_.yyxx * _e112.g0_.yxxx) * vec4<f32>(1.0, 1.0, 0.0, 0.0))));
}

fn translator_multi_vector_inner_product(self_1782: Translator, other_1514: MultiVector) -> MultiVector {
    var self_1783: Translator;
    var other_1515: MultiVector;

    self_1783 = self_1782;
    other_1515 = other_1514;
    let _e4: Translator = self_1783;
    let _e8: MultiVector = other_1515;
    let _e11: Translator = self_1783;
    let _e15: MultiVector = other_1515;
    let _e28: Translator = self_1783;
    let _e32: MultiVector = other_1515;
    let _e45: Translator = self_1783;
    let _e48: MultiVector = other_1515;
    let _e61: Translator = self_1783;
    let _e65: MultiVector = other_1515;
    let _e68: Translator = self_1783;
    let _e72: MultiVector = other_1515;
    let _e84: Translator = self_1783;
    let _e88: MultiVector = other_1515;
    let _e100: Translator = self_1783;
    let _e103: MultiVector = other_1515;
    let _e114: Translator = self_1783;
    let _e118: MultiVector = other_1515;
    let _e121: Translator = self_1783;
    let _e125: MultiVector = other_1515;
    let _e138: Translator = self_1783;
    let _e142: MultiVector = other_1515;
    let _e155: Translator = self_1783;
    let _e158: MultiVector = other_1515;
    let _e171: Translator = self_1783;
    let _e175: MultiVector = other_1515;
    let _e178: Translator = self_1783;
    let _e180: MultiVector = other_1515;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e28.g0_.w) * _e32.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e45.g0_.yyxx * _e48.g3_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))), ((((vec4<f32>(_e61.g0_.x) * _e65.g1_) + ((vec4<f32>(_e68.g0_.z) * vec4<f32>(_e72.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e84.g0_.w) * vec4<f32>(_e88.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e100.g0_.yxxx * _e103.g2_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((vec4<f32>(_e114.g0_.x) * _e118.g2_) + ((vec4<f32>(_e121.g0_.z) * _e125.g1_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e138.g0_.w) * _e142.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e155.g0_.xyyy * _e158.g1_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((vec4<f32>(_e171.g0_.x) * _e175.g3_) + ((_e178.g0_ * vec4<f32>(_e180.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_multi_vector_geometric_anti_product(self_1784: Translator, other_1516: MultiVector) -> MultiVector {
    var self_1785: Translator;
    var other_1517: MultiVector;

    self_1785 = self_1784;
    other_1517 = other_1516;
    let _e4: Translator = self_1785;
    let _e8: MultiVector = other_1517;
    let _e20: Translator = self_1785;
    let _e24: MultiVector = other_1517;
    let _e37: Translator = self_1785;
    let _e41: MultiVector = other_1517;
    let _e54: Translator = self_1785;
    let _e58: MultiVector = other_1517;
    let _e71: Translator = self_1785;
    let _e75: MultiVector = other_1517;
    let _e78: Translator = self_1785;
    let _e82: MultiVector = other_1517;
    let _e95: Translator = self_1785;
    let _e99: MultiVector = other_1517;
    let _e112: Translator = self_1785;
    let _e116: MultiVector = other_1517;
    let _e129: Translator = self_1785;
    let _e133: MultiVector = other_1517;
    let _e136: Translator = self_1785;
    let _e140: MultiVector = other_1517;
    let _e153: Translator = self_1785;
    let _e157: MultiVector = other_1517;
    let _e170: Translator = self_1785;
    let _e174: MultiVector = other_1517;
    let _e187: Translator = self_1785;
    let _e191: MultiVector = other_1517;
    let _e203: Translator = self_1785;
    let _e207: MultiVector = other_1517;
    let _e220: Translator = self_1785;
    let _e224: MultiVector = other_1517;
    let _e237: Translator = self_1785;
    let _e241: MultiVector = other_1517;
    return MultiVector((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e54.g0_.w) * _e58.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e71.g0_.x) * _e75.g2_) + ((vec4<f32>(_e78.g0_.y) * _e82.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e95.g0_.z) * _e99.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e112.g0_.w) * _e116.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e129.g0_.x) * _e133.g1_) + ((vec4<f32>(_e136.g0_.y) * _e140.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e153.g0_.z) * _e157.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e170.g0_.w) * _e174.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e187.g0_.x) * _e191.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e203.g0_.y) * _e207.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e220.g0_.z) * _e224.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e237.g0_.w) * _e241.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn translator_multi_vector_inner_anti_product(self_1786: Translator, other_1518: MultiVector) -> MultiVector {
    var self_1787: Translator;
    var other_1519: MultiVector;

    self_1787 = self_1786;
    other_1519 = other_1518;
    let _e4: Translator = self_1787;
    let _e8: MultiVector = other_1519;
    let _e20: Translator = self_1787;
    let _e22: MultiVector = other_1519;
    let _e37: Translator = self_1787;
    let _e41: MultiVector = other_1519;
    let _e44: Translator = self_1787;
    let _e48: MultiVector = other_1519;
    let _e60: Translator = self_1787;
    let _e64: MultiVector = other_1519;
    let _e76: Translator = self_1787;
    let _e79: MultiVector = other_1519;
    let _e91: Translator = self_1787;
    let _e95: MultiVector = other_1519;
    let _e98: Translator = self_1787;
    let _e102: MultiVector = other_1519;
    let _e115: Translator = self_1787;
    let _e119: MultiVector = other_1519;
    let _e132: Translator = self_1787;
    let _e135: MultiVector = other_1519;
    let _e147: Translator = self_1787;
    let _e151: MultiVector = other_1519;
    let _e163: Translator = self_1787;
    let _e167: MultiVector = other_1519;
    let _e179: Translator = self_1787;
    let _e183: MultiVector = other_1519;
    let _e195: Translator = self_1787;
    let _e198: MultiVector = other_1519;
    return MultiVector((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e37.g0_.x) * _e41.g2_) + ((vec4<f32>(_e44.g0_.z) * _e48.g1_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e60.g0_.w) * _e64.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e76.g0_.xyyy * _e79.g1_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))), ((((vec4<f32>(_e91.g0_.x) * _e95.g1_) + ((vec4<f32>(_e98.g0_.z) * vec4<f32>(_e102.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e115.g0_.w) * vec4<f32>(_e119.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e132.g0_.yxxx * _e135.g2_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((vec4<f32>(_e147.g0_.x) * _e151.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e163.g0_.z) * _e167.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e179.g0_.w) * _e183.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e195.g0_.yyxx * _e198.g3_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_multi_vector_left_contraction(self_1788: Translator, other_1520: MultiVector) -> MultiVector {
    var self_1789: Translator;
    var other_1521: MultiVector;

    self_1789 = self_1788;
    other_1521 = other_1520;
    let _e4: Translator = self_1789;
    let _e8: MultiVector = other_1521;
    let _e11: Translator = self_1789;
    let _e15: MultiVector = other_1521;
    let _e28: Translator = self_1789;
    let _e32: MultiVector = other_1521;
    let _e45: Translator = self_1789;
    let _e48: MultiVector = other_1521;
    let _e61: Translator = self_1789;
    let _e65: MultiVector = other_1521;
    let _e68: Translator = self_1789;
    let _e72: MultiVector = other_1521;
    let _e75: Translator = self_1789;
    let _e79: MultiVector = other_1521;
    let _e91: Translator = self_1789;
    let _e95: MultiVector = other_1521;
    let _e107: Translator = self_1789;
    let _e110: MultiVector = other_1521;
    let _e122: Translator = self_1789;
    let _e126: MultiVector = other_1521;
    return MultiVector(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e28.g0_.w) * _e32.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e45.g0_.yyxx * _e48.g3_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))), (vec4<f32>(_e61.g0_.x) * _e65.g1_), ((((vec4<f32>(_e68.g0_.x) * _e72.g2_) + ((vec4<f32>(_e75.g0_.z) * _e79.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e91.g0_.w) * _e95.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e107.g0_.xxyy * _e110.g1_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), (vec4<f32>(_e122.g0_.x) * _e126.g3_));
}

fn translator_multi_vector_right_anti_contraction(self_1790: Translator, other_1522: MultiVector) -> MultiVector {
    var self_1791: Translator;
    var other_1523: MultiVector;

    self_1791 = self_1790;
    other_1523 = other_1522;
    let _e4: Translator = self_1791;
    let _e8: MultiVector = other_1523;
    let _e20: Translator = self_1791;
    let _e24: MultiVector = other_1523;
    let _e27: Translator = self_1791;
    let _e31: MultiVector = other_1523;
    let _e43: Translator = self_1791;
    let _e47: MultiVector = other_1523;
    let _e59: Translator = self_1791;
    let _e62: MultiVector = other_1523;
    let _e74: Translator = self_1791;
    let _e78: MultiVector = other_1523;
    let _e81: Translator = self_1791;
    let _e85: MultiVector = other_1523;
    let _e97: Translator = self_1791;
    let _e101: MultiVector = other_1523;
    let _e113: Translator = self_1791;
    let _e117: MultiVector = other_1523;
    let _e129: Translator = self_1791;
    let _e132: MultiVector = other_1523;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((((vec4<f32>(_e20.g0_.x) * _e24.g2_) + ((vec4<f32>(_e27.g0_.z) * _e31.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e43.g0_.w) * _e47.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e59.g0_.xxyy * _e62.g1_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), (vec4<f32>(_e74.g0_.x) * _e78.g1_), (((((vec4<f32>(_e81.g0_.x) * _e85.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e97.g0_.z) * _e101.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e113.g0_.w) * _e117.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e129.g0_.yyxx * _e132.g3_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_multi_vector_scalar_product(self_1792: Translator, other_1524: MultiVector) -> Scalar {
    var self_1793: Translator;
    var other_1525: MultiVector;

    self_1793 = self_1792;
    other_1525 = other_1524;
    let _e4: Translator = self_1793;
    let _e7: MultiVector = other_1525;
    let _e11: Translator = self_1793;
    let _e14: MultiVector = other_1525;
    let _e19: Translator = self_1793;
    let _e22: MultiVector = other_1525;
    let _e27: Translator = self_1793;
    let _e30: MultiVector = other_1525;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g3_.y)) - (_e19.g0_.z * _e22.g3_.z)) - (_e27.g0_.w * _e30.g3_.w)));
}

fn translator_multi_vector_anti_scalar_product(self_1794: Translator, other_1526: MultiVector) -> AntiScalar {
    var self_1795: Translator;
    var other_1527: MultiVector;

    self_1795 = self_1794;
    other_1527 = other_1526;
    let _e4: Translator = self_1795;
    let _e7: MultiVector = other_1527;
    let _e11: Translator = self_1795;
    let _e14: MultiVector = other_1527;
    let _e19: Translator = self_1795;
    let _e22: MultiVector = other_1527;
    let _e27: Translator = self_1795;
    let _e30: MultiVector = other_1527;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g3_.y)) - (_e19.g0_.z * _e22.g3_.z)) - (_e27.g0_.w * _e30.g3_.w)));
}

fn translator_rotor_geometric_product(self_1796: Translator, other_1528: Rotor) -> Motor {
    var self_1797: Translator;
    var other_1529: Rotor;

    self_1797 = self_1796;
    other_1529 = other_1528;
    let _e4: Translator = self_1797;
    let _e8: Rotor = other_1529;
    let _e11: Translator = self_1797;
    let _e15: Rotor = other_1529;
    let _e26: Translator = self_1797;
    let _e30: Rotor = other_1529;
    let _e42: Translator = self_1797;
    let _e46: Rotor = other_1529;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0))) + ((vec4<f32>(_e26.g0_.z) * _e30.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e42.g0_.w) * _e46.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn translator_rotor_regressive_product(self_1798: Translator, other_1530: Rotor) -> Scalar {
    var self_1799: Translator;
    var other_1531: Rotor;

    self_1799 = self_1798;
    other_1531 = other_1530;
    let _e4: Translator = self_1799;
    let _e7: Rotor = other_1531;
    let _e11: Translator = self_1799;
    let _e14: Rotor = other_1531;
    let _e19: Translator = self_1799;
    let _e22: Rotor = other_1531;
    return Scalar((((_e4.g0_.y * _e7.g0_.y) + (_e11.g0_.z * _e14.g0_.z)) + (_e19.g0_.w * _e22.g0_.w)));
}

fn translator_rotor_outer_product(self_1800: Translator, other_1532: Rotor) -> Motor {
    var self_1801: Translator;
    var other_1533: Rotor;

    self_1801 = self_1800;
    other_1533 = other_1532;
    let _e4: Translator = self_1801;
    let _e8: Rotor = other_1533;
    let _e11: Translator = self_1801;
    let _e15: Rotor = other_1533;
    let _e25: Translator = self_1801;
    let _e29: Rotor = other_1533;
    let _e40: Translator = self_1801;
    let _e43: Rotor = other_1533;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0)) + ((vec4<f32>(_e25.g0_.w) * _e29.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e40.g0_.yyxx * _e43.g0_.yxxx) * vec4<f32>(1.0, 1.0, 0.0, 0.0))));
}

fn translator_rotor_geometric_anti_product(self_1802: Translator, other_1534: Rotor) -> Motor {
    var self_1803: Translator;
    var other_1535: Rotor;

    self_1803 = self_1802;
    other_1535 = other_1534;
    let _e4: Translator = self_1803;
    let _e8: Rotor = other_1535;
    let _e20: Translator = self_1803;
    let _e24: Rotor = other_1535;
    let _e37: Translator = self_1803;
    let _e41: Rotor = other_1535;
    let _e54: Translator = self_1803;
    let _e58: Rotor = other_1535;
    return Motor(((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e37.g0_.w) * _e41.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((vec4<f32>(_e54.g0_.x) * _e58.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn translator_rotor_left_contraction(self_1804: Translator, other_1536: Rotor) -> Rotor {
    var self_1805: Translator;
    var other_1537: Rotor;

    self_1805 = self_1804;
    other_1537 = other_1536;
    let _e4: Translator = self_1805;
    let _e8: Rotor = other_1537;
    return Rotor((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn translator_rotor_right_contraction(self_1806: Translator, other_1538: Rotor) -> Translator {
    var self_1807: Translator;
    var other_1539: Rotor;

    self_1807 = self_1806;
    other_1539 = other_1538;
    let _e4: Translator = self_1807;
    let _e6: Rotor = other_1539;
    return Translator((_e4.g0_ * vec4<f32>(_e6.g0_.x)));
}

fn translator_rotor_scalar_product(self_1808: Translator, other_1540: Rotor) -> Scalar {
    var self_1809: Translator;
    var other_1541: Rotor;

    self_1809 = self_1808;
    other_1541 = other_1540;
    let _e4: Translator = self_1809;
    let _e7: Rotor = other_1541;
    return Scalar((_e4.g0_.x * _e7.g0_.x));
}

fn translator_rotor_anti_scalar_product(self_1810: Translator, other_1542: Rotor) -> AntiScalar {
    var self_1811: Translator;
    var other_1543: Rotor;

    self_1811 = self_1810;
    other_1543 = other_1542;
    let _e4: Translator = self_1811;
    let _e7: Rotor = other_1543;
    return AntiScalar((_e4.g0_.x * _e7.g0_.x));
}

fn translator_point_regressive_product(self_1812: Translator, other_1544: Point) -> Plane {
    var self_1813: Translator;
    var other_1545: Point;

    self_1813 = self_1812;
    other_1545 = other_1544;
    let _e4: Translator = self_1813;
    let _e8: Point = other_1545;
    let _e19: Translator = self_1813;
    let _e23: Point = other_1545;
    let _e35: Translator = self_1813;
    let _e38: Point = other_1545;
    return Plane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_point_outer_product(self_1814: Translator, other_1546: Point) -> Point {
    var self_1815: Translator;
    var other_1547: Point;

    self_1815 = self_1814;
    other_1547 = other_1546;
    let _e4: Translator = self_1815;
    let _e8: Point = other_1547;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn translator_ideal_point_into(self_1816: Translator) -> IdealPoint {
    var self_1817: Translator;

    self_1817 = self_1816;
    let _e2: Translator = self_1817;
    let _e5: Translator = self_1817;
    let _e8: Translator = self_1817;
    return IdealPoint(vec3<f32>(_e2.g0_.y, _e5.g0_.z, _e8.g0_.w));
}

fn translator_ideal_point_add(self_1818: Translator, other_1548: IdealPoint) -> Translator {
    var self_1819: Translator;
    var other_1549: IdealPoint;

    self_1819 = self_1818;
    other_1549 = other_1548;
    let _e4: Translator = self_1819;
    let _e6: IdealPoint = other_1549;
    let _e9: IdealPoint = other_1549;
    let _e12: IdealPoint = other_1549;
    let _e15: IdealPoint = other_1549;
    return Translator((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.y, _e15.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_ideal_point_sub(self_1820: Translator, other_1550: IdealPoint) -> Translator {
    var self_1821: Translator;
    var other_1551: IdealPoint;

    self_1821 = self_1820;
    other_1551 = other_1550;
    let _e4: Translator = self_1821;
    let _e6: IdealPoint = other_1551;
    let _e9: IdealPoint = other_1551;
    let _e12: IdealPoint = other_1551;
    let _e15: IdealPoint = other_1551;
    return Translator((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g0_.x, _e12.g0_.y, _e15.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_ideal_point_outer_product(self_1822: Translator, other_1552: IdealPoint) -> IdealPoint {
    var self_1823: Translator;
    var other_1553: IdealPoint;

    self_1823 = self_1822;
    other_1553 = other_1552;
    let _e4: Translator = self_1823;
    let _e8: IdealPoint = other_1553;
    return IdealPoint((vec3<f32>(_e4.g0_.x) * _e8.g0_));
}

fn translator_ideal_point_inner_product(self_1824: Translator, other_1554: IdealPoint) -> Translator {
    var self_1825: Translator;
    var other_1555: IdealPoint;

    self_1825 = self_1824;
    other_1555 = other_1554;
    let _e4: Translator = self_1825;
    let _e8: IdealPoint = other_1555;
    let _e20: Translator = self_1825;
    let _e24: IdealPoint = other_1555;
    let _e37: Translator = self_1825;
    let _e40: IdealPoint = other_1555;
    let _e43: IdealPoint = other_1555;
    let _e46: IdealPoint = other_1555;
    let _e49: IdealPoint = other_1555;
    return Translator(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn translator_ideal_point_left_contraction(self_1826: Translator, other_1556: IdealPoint) -> Translator {
    var self_1827: Translator;
    var other_1557: IdealPoint;

    self_1827 = self_1826;
    other_1557 = other_1556;
    let _e4: Translator = self_1827;
    let _e8: IdealPoint = other_1557;
    let _e20: Translator = self_1827;
    let _e24: IdealPoint = other_1557;
    let _e37: Translator = self_1827;
    let _e40: IdealPoint = other_1557;
    let _e43: IdealPoint = other_1557;
    let _e46: IdealPoint = other_1557;
    let _e49: IdealPoint = other_1557;
    return Translator(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn translator_ideal_point_right_contraction(self_1828: Translator, other_1558: IdealPoint) -> Scalar {
    var self_1829: Translator;
    var other_1559: IdealPoint;

    self_1829 = self_1828;
    other_1559 = other_1558;
    let _e5: Translator = self_1829;
    let _e8: IdealPoint = other_1559;
    let _e13: Translator = self_1829;
    let _e16: IdealPoint = other_1559;
    let _e21: Translator = self_1829;
    let _e24: IdealPoint = other_1559;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_ideal_point_left_anti_contraction(self_1830: Translator, other_1560: IdealPoint) -> AntiScalar {
    var self_1831: Translator;
    var other_1561: IdealPoint;

    self_1831 = self_1830;
    other_1561 = other_1560;
    let _e5: Translator = self_1831;
    let _e8: IdealPoint = other_1561;
    let _e13: Translator = self_1831;
    let _e16: IdealPoint = other_1561;
    let _e21: Translator = self_1831;
    let _e24: IdealPoint = other_1561;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_ideal_point_scalar_product(self_1832: Translator, other_1562: IdealPoint) -> Scalar {
    var self_1833: Translator;
    var other_1563: IdealPoint;

    self_1833 = self_1832;
    other_1563 = other_1562;
    let _e5: Translator = self_1833;
    let _e8: IdealPoint = other_1563;
    let _e13: Translator = self_1833;
    let _e16: IdealPoint = other_1563;
    let _e21: Translator = self_1833;
    let _e24: IdealPoint = other_1563;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_ideal_point_anti_scalar_product(self_1834: Translator, other_1564: IdealPoint) -> AntiScalar {
    var self_1835: Translator;
    var other_1565: IdealPoint;

    self_1835 = self_1834;
    other_1565 = other_1564;
    let _e5: Translator = self_1835;
    let _e8: IdealPoint = other_1565;
    let _e13: Translator = self_1835;
    let _e16: IdealPoint = other_1565;
    let _e21: Translator = self_1835;
    let _e24: IdealPoint = other_1565;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_plane_inner_product(self_1836: Translator, other_1566: Plane) -> Plane {
    var self_1837: Translator;
    var other_1567: Plane;

    self_1837 = self_1836;
    other_1567 = other_1566;
    let _e4: Translator = self_1837;
    let _e8: Plane = other_1567;
    let _e11: Translator = self_1837;
    let _e15: Plane = other_1567;
    let _e27: Translator = self_1837;
    let _e31: Plane = other_1567;
    let _e43: Translator = self_1837;
    let _e46: Plane = other_1567;
    return Plane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn translator_plane_inner_anti_product(self_1838: Translator, other_1568: Plane) -> Point {
    var self_1839: Translator;
    var other_1569: Plane;

    self_1839 = self_1838;
    other_1569 = other_1568;
    let _e4: Translator = self_1839;
    let _e8: Plane = other_1569;
    let _e11: Translator = self_1839;
    let _e15: Plane = other_1569;
    let _e27: Translator = self_1839;
    let _e31: Plane = other_1569;
    let _e43: Translator = self_1839;
    let _e46: Plane = other_1569;
    return Point(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_plane_left_contraction(self_1840: Translator, other_1570: Plane) -> Plane {
    var self_1841: Translator;
    var other_1571: Plane;

    self_1841 = self_1840;
    other_1571 = other_1570;
    let _e4: Translator = self_1841;
    let _e8: Plane = other_1571;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn translator_plane_right_contraction(self_1842: Translator, other_1572: Plane) -> Plane {
    var self_1843: Translator;
    var other_1573: Plane;

    self_1843 = self_1842;
    other_1573 = other_1572;
    let _e4: Translator = self_1843;
    let _e8: Plane = other_1573;
    let _e19: Translator = self_1843;
    let _e23: Plane = other_1573;
    let _e35: Translator = self_1843;
    let _e38: Plane = other_1573;
    return Plane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn translator_plane_left_anti_contraction(self_1844: Translator, other_1574: Plane) -> Point {
    var self_1845: Translator;
    var other_1575: Plane;

    self_1845 = self_1844;
    other_1575 = other_1574;
    let _e4: Translator = self_1845;
    let _e8: Plane = other_1575;
    let _e19: Translator = self_1845;
    let _e23: Plane = other_1575;
    let _e35: Translator = self_1845;
    let _e38: Plane = other_1575;
    return Point(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_plane_right_anti_contraction(self_1846: Translator, other_1576: Plane) -> Point {
    var self_1847: Translator;
    var other_1577: Plane;

    self_1847 = self_1846;
    other_1577 = other_1576;
    let _e4: Translator = self_1847;
    let _e8: Plane = other_1577;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn translator_line_geometric_product(self_1848: Translator, other_1578: Line) -> Motor {
    var self_1849: Translator;
    var other_1579: Line;

    self_1849 = self_1848;
    other_1579 = other_1578;
    let _e4: Translator = self_1849;
    let _e8: Line = other_1579;
    let _e11: Line = other_1579;
    let _e14: Line = other_1579;
    let _e17: Line = other_1579;
    let _e30: Translator = self_1849;
    let _e34: Line = other_1579;
    let _e37: Line = other_1579;
    let _e40: Line = other_1579;
    let _e43: Line = other_1579;
    let _e57: Translator = self_1849;
    let _e61: Line = other_1579;
    let _e64: Line = other_1579;
    let _e67: Line = other_1579;
    let _e70: Line = other_1579;
    let _e84: Translator = self_1849;
    let _e88: Line = other_1579;
    let _e91: Line = other_1579;
    let _e94: Line = other_1579;
    let _e97: Line = other_1579;
    let _e109: Translator = self_1849;
    let _e113: Line = other_1579;
    let _e116: Line = other_1579;
    let _e119: Line = other_1579;
    let _e122: Line = other_1579;
    let _e134: Translator = self_1849;
    let _e138: Line = other_1579;
    let _e141: Line = other_1579;
    let _e144: Line = other_1579;
    let _e147: Line = other_1579;
    let _e160: Translator = self_1849;
    let _e164: Line = other_1579;
    let _e167: Line = other_1579;
    let _e170: Line = other_1579;
    let _e173: Line = other_1579;
    let _e186: Translator = self_1849;
    let _e190: Line = other_1579;
    let _e193: Line = other_1579;
    let _e196: Line = other_1579;
    let _e199: Line = other_1579;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.z, _e40.g0_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g0_.y, _e67.g0_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g1_.x, _e116.g1_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g1_.y, _e141.g1_.z, _e144.g1_.y, _e147.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e160.g0_.w) * vec4<f32>(_e164.g1_.z, _e167.g1_.y, _e170.g1_.x, _e173.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e186.g0_.x) * vec4<f32>(_e190.g0_.x, _e193.g0_.x, _e196.g0_.y, _e199.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_line_regressive_product(self_1850: Translator, other_1580: Line) -> Scalar {
    var self_1851: Translator;
    var other_1581: Line;

    self_1851 = self_1850;
    other_1581 = other_1580;
    let _e4: Translator = self_1851;
    let _e7: Line = other_1581;
    let _e11: Translator = self_1851;
    let _e14: Line = other_1581;
    let _e19: Translator = self_1851;
    let _e22: Line = other_1581;
    return Scalar((((_e4.g0_.y * _e7.g1_.x) + (_e11.g0_.z * _e14.g1_.y)) + (_e19.g0_.w * _e22.g1_.z)));
}

fn translator_line_geometric_anti_product(self_1852: Translator, other_1582: Line) -> Motor {
    var self_1853: Translator;
    var other_1583: Line;

    self_1853 = self_1852;
    other_1583 = other_1582;
    let _e4: Translator = self_1853;
    let _e8: Line = other_1583;
    let _e11: Line = other_1583;
    let _e14: Line = other_1583;
    let _e17: Line = other_1583;
    let _e29: Translator = self_1853;
    let _e33: Line = other_1583;
    let _e36: Line = other_1583;
    let _e39: Line = other_1583;
    let _e42: Line = other_1583;
    let _e55: Translator = self_1853;
    let _e59: Line = other_1583;
    let _e62: Line = other_1583;
    let _e65: Line = other_1583;
    let _e68: Line = other_1583;
    let _e81: Translator = self_1853;
    let _e85: Line = other_1583;
    let _e88: Line = other_1583;
    let _e91: Line = other_1583;
    let _e94: Line = other_1583;
    let _e109: Translator = self_1853;
    let _e113: Line = other_1583;
    let _e116: Line = other_1583;
    let _e119: Line = other_1583;
    let _e122: Line = other_1583;
    let _e135: Translator = self_1853;
    let _e139: Line = other_1583;
    let _e142: Line = other_1583;
    let _e145: Line = other_1583;
    let _e148: Line = other_1583;
    let _e162: Translator = self_1853;
    let _e166: Line = other_1583;
    let _e169: Line = other_1583;
    let _e172: Line = other_1583;
    let _e175: Line = other_1583;
    let _e189: Translator = self_1853;
    let _e193: Line = other_1583;
    let _e196: Line = other_1583;
    let _e199: Line = other_1583;
    let _e202: Line = other_1583;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g1_.z, _e39.g1_.y, _e42.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g1_.y, _e65.g1_.x, _e68.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e109.g0_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g0_.z) * vec4<f32>(_e139.g0_.y, _e142.g0_.z, _e145.g0_.y, _e148.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g0_.w) * vec4<f32>(_e166.g0_.z, _e169.g0_.y, _e172.g0_.x, _e175.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g1_.x, _e196.g1_.x, _e199.g1_.y, _e202.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn translator_line_right_contraction(self_1854: Translator, other_1584: Line) -> Scalar {
    var self_1855: Translator;
    var other_1585: Line;

    self_1855 = self_1854;
    other_1585 = other_1584;
    let _e5: Translator = self_1855;
    let _e8: Line = other_1585;
    let _e13: Translator = self_1855;
    let _e16: Line = other_1585;
    let _e21: Translator = self_1855;
    let _e24: Line = other_1585;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_line_left_anti_contraction(self_1856: Translator, other_1586: Line) -> AntiScalar {
    var self_1857: Translator;
    var other_1587: Line;

    self_1857 = self_1856;
    other_1587 = other_1586;
    let _e5: Translator = self_1857;
    let _e8: Line = other_1587;
    let _e13: Translator = self_1857;
    let _e16: Line = other_1587;
    let _e21: Translator = self_1857;
    let _e24: Line = other_1587;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_line_scalar_product(self_1858: Translator, other_1588: Line) -> Scalar {
    var self_1859: Translator;
    var other_1589: Line;

    self_1859 = self_1858;
    other_1589 = other_1588;
    let _e5: Translator = self_1859;
    let _e8: Line = other_1589;
    let _e13: Translator = self_1859;
    let _e16: Line = other_1589;
    let _e21: Translator = self_1859;
    let _e24: Line = other_1589;
    return Scalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_line_anti_scalar_product(self_1860: Translator, other_1590: Line) -> AntiScalar {
    var self_1861: Translator;
    var other_1591: Line;

    self_1861 = self_1860;
    other_1591 = other_1590;
    let _e5: Translator = self_1861;
    let _e8: Line = other_1591;
    let _e13: Translator = self_1861;
    let _e16: Line = other_1591;
    let _e21: Translator = self_1861;
    let _e24: Line = other_1591;
    return AntiScalar((((0.0 - (_e5.g0_.y * _e8.g0_.x)) - (_e13.g0_.z * _e16.g0_.y)) - (_e21.g0_.w * _e24.g0_.z)));
}

fn translator_translator_add(self_1862: Translator, other_1592: Translator) -> Translator {
    var self_1863: Translator;
    var other_1593: Translator;

    self_1863 = self_1862;
    other_1593 = other_1592;
    let _e4: Translator = self_1863;
    let _e6: Translator = other_1593;
    return Translator((_e4.g0_ + _e6.g0_));
}

fn translator_translator_sub(self_1864: Translator, other_1594: Translator) -> Translator {
    var self_1865: Translator;
    var other_1595: Translator;

    self_1865 = self_1864;
    other_1595 = other_1594;
    let _e4: Translator = self_1865;
    let _e6: Translator = other_1595;
    return Translator((_e4.g0_ - _e6.g0_));
}

fn translator_translator_mul(self_1866: Translator, other_1596: Translator) -> Translator {
    var self_1867: Translator;
    var other_1597: Translator;

    self_1867 = self_1866;
    other_1597 = other_1596;
    let _e4: Translator = self_1867;
    let _e6: Translator = other_1597;
    return Translator((_e4.g0_ * _e6.g0_));
}

fn translator_translator_div(self_1868: Translator, other_1598: Translator) -> Translator {
    var self_1869: Translator;
    var other_1599: Translator;

    self_1869 = self_1868;
    other_1599 = other_1598;
    let _e4: Translator = self_1869;
    let _e7: Translator = self_1869;
    let _e10: Translator = self_1869;
    let _e13: Translator = self_1869;
    let _e23: Translator = other_1599;
    let _e26: Translator = other_1599;
    let _e29: Translator = other_1599;
    let _e32: Translator = other_1599;
    return Translator((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn translator_translator_outer_product(self_1870: Translator, other_1600: Translator) -> Translator {
    var self_1871: Translator;
    var other_1601: Translator;

    self_1871 = self_1870;
    other_1601 = other_1600;
    let _e4: Translator = self_1871;
    let _e8: Translator = other_1601;
    let _e11: Translator = self_1871;
    let _e13: Translator = other_1601;
    return Translator(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_translator_inner_product(self_1872: Translator, other_1602: Translator) -> Translator {
    var self_1873: Translator;
    var other_1603: Translator;

    self_1873 = self_1872;
    other_1603 = other_1602;
    let _e4: Translator = self_1873;
    let _e8: Translator = other_1603;
    let _e11: Translator = self_1873;
    let _e15: Translator = other_1603;
    let _e27: Translator = self_1873;
    let _e31: Translator = other_1603;
    let _e43: Translator = self_1873;
    let _e46: Translator = other_1603;
    return Translator(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_translator_left_contraction(self_1874: Translator, other_1604: Translator) -> Translator {
    var self_1875: Translator;
    var other_1605: Translator;

    self_1875 = self_1874;
    other_1605 = other_1604;
    let _e4: Translator = self_1875;
    let _e8: Translator = other_1605;
    let _e11: Translator = self_1875;
    let _e15: Translator = other_1605;
    let _e28: Translator = self_1875;
    let _e32: Translator = other_1605;
    let _e45: Translator = self_1875;
    let _e48: Translator = other_1605;
    return Translator(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g0_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn translator_translator_right_contraction(self_1876: Translator, other_1606: Translator) -> Translator {
    var self_1877: Translator;
    var other_1607: Translator;

    self_1877 = self_1876;
    other_1607 = other_1606;
    let _e4: Translator = self_1877;
    let _e8: Translator = other_1607;
    let _e19: Translator = self_1877;
    let _e23: Translator = other_1607;
    let _e35: Translator = self_1877;
    let _e39: Translator = other_1607;
    let _e51: Translator = self_1877;
    let _e55: Translator = other_1607;
    return Translator((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn translator_translator_scalar_product(self_1878: Translator, other_1608: Translator) -> Scalar {
    var self_1879: Translator;
    var other_1609: Translator;

    self_1879 = self_1878;
    other_1609 = other_1608;
    let _e4: Translator = self_1879;
    let _e7: Translator = other_1609;
    let _e11: Translator = self_1879;
    let _e14: Translator = other_1609;
    let _e19: Translator = self_1879;
    let _e22: Translator = other_1609;
    let _e27: Translator = self_1879;
    let _e30: Translator = other_1609;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn translator_translator_anti_scalar_product(self_1880: Translator, other_1610: Translator) -> AntiScalar {
    var self_1881: Translator;
    var other_1611: Translator;

    self_1881 = self_1880;
    other_1611 = other_1610;
    let _e4: Translator = self_1881;
    let _e7: Translator = other_1611;
    let _e11: Translator = self_1881;
    let _e14: Translator = other_1611;
    let _e19: Translator = self_1881;
    let _e22: Translator = other_1611;
    let _e27: Translator = self_1881;
    let _e30: Translator = other_1611;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn translator_motor_add(self_1882: Translator, other_1612: Motor) -> Motor {
    var self_1883: Translator;
    var other_1613: Motor;

    self_1883 = self_1882;
    other_1613 = other_1612;
    let _e4: Translator = self_1883;
    let _e14: Motor = other_1613;
    let _e17: Translator = self_1883;
    let _e25: Motor = other_1613;
    return Motor(((vec4<f32>(_e4.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + _e14.g0_), ((_e17.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + _e25.g1_));
}

fn translator_motor_sub(self_1884: Translator, other_1614: Motor) -> Motor {
    var self_1885: Translator;
    var other_1615: Motor;

    self_1885 = self_1884;
    other_1615 = other_1614;
    let _e4: Translator = self_1885;
    let _e14: Motor = other_1615;
    let _e17: Translator = self_1885;
    let _e25: Motor = other_1615;
    return Motor(((vec4<f32>(_e4.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) - _e14.g0_), ((_e17.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0)) - _e25.g1_));
}

fn translator_motor_geometric_product(self_1886: Translator, other_1616: Motor) -> Motor {
    var self_1887: Translator;
    var other_1617: Motor;

    self_1887 = self_1886;
    other_1617 = other_1616;
    let _e4: Translator = self_1887;
    let _e8: Motor = other_1617;
    let _e11: Translator = self_1887;
    let _e15: Motor = other_1617;
    let _e29: Translator = self_1887;
    let _e33: Motor = other_1617;
    let _e47: Translator = self_1887;
    let _e51: Motor = other_1617;
    let _e65: Translator = self_1887;
    let _e69: Motor = other_1617;
    let _e72: Translator = self_1887;
    let _e76: Motor = other_1617;
    let _e88: Translator = self_1887;
    let _e92: Motor = other_1617;
    let _e104: Translator = self_1887;
    let _e108: Motor = other_1617;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e29.g0_.z) * _e33.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e47.g0_.w) * _e51.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e65.g0_.x) * _e69.g1_) + ((vec4<f32>(_e72.g0_.y) * _e76.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e88.g0_.z) * _e92.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e104.g0_.w) * _e108.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn translator_motor_regressive_product(self_1888: Translator, other_1618: Motor) -> Translator {
    var self_1889: Translator;
    var other_1619: Motor;

    self_1889 = self_1888;
    other_1619 = other_1618;
    let _e4: Translator = self_1889;
    let _e8: Motor = other_1619;
    let _e11: Motor = other_1619;
    let _e14: Motor = other_1619;
    let _e17: Motor = other_1619;
    let _e28: Translator = self_1889;
    let _e32: Motor = other_1619;
    let _e35: Motor = other_1619;
    let _e38: Motor = other_1619;
    let _e41: Motor = other_1619;
    let _e53: Translator = self_1889;
    let _e57: Motor = other_1619;
    let _e60: Motor = other_1619;
    let _e63: Motor = other_1619;
    let _e66: Motor = other_1619;
    let _e78: Translator = self_1889;
    let _e82: Motor = other_1619;
    return Translator((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g1_.x, _e14.g0_.y, _e17.g0_.y)) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e28.g0_.z) * vec4<f32>(_e32.g0_.z, _e35.g0_.z, _e38.g1_.x, _e41.g0_.z)) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e53.g0_.w) * vec4<f32>(_e57.g0_.w, _e60.g0_.w, _e63.g0_.w, _e66.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e78.g0_.x) * vec4<f32>(_e82.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn translator_motor_outer_product(self_1890: Translator, other_1620: Motor) -> Motor {
    var self_1891: Translator;
    var other_1621: Motor;

    self_1891 = self_1890;
    other_1621 = other_1620;
    let _e4: Translator = self_1891;
    let _e8: Motor = other_1621;
    let _e11: Translator = self_1891;
    let _e15: Motor = other_1621;
    let _e18: Translator = self_1891;
    let _e22: Motor = other_1621;
    let _e33: Translator = self_1891;
    let _e37: Motor = other_1621;
    let _e48: Translator = self_1891;
    let _e51: Motor = other_1621;
    return Motor((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e48.g0_.yyxx * _e51.g0_.yxxx) * vec4<f32>(1.0, 1.0, 0.0, 0.0))));
}

fn translator_motor_inner_product(self_1892: Translator, other_1622: Motor) -> Motor {
    var self_1893: Translator;
    var other_1623: Motor;

    self_1893 = self_1892;
    other_1623 = other_1622;
    let _e4: Translator = self_1893;
    let _e8: Motor = other_1623;
    let _e11: Translator = self_1893;
    let _e15: Motor = other_1623;
    let _e28: Translator = self_1893;
    let _e32: Motor = other_1623;
    let _e45: Translator = self_1893;
    let _e48: Motor = other_1623;
    let _e61: Translator = self_1893;
    let _e65: Motor = other_1623;
    let _e68: Translator = self_1893;
    let _e70: Motor = other_1623;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e28.g0_.w) * _e32.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e45.g0_.yyxx * _e48.g1_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))), ((vec4<f32>(_e61.g0_.x) * _e65.g1_) + ((_e68.g0_ * vec4<f32>(_e70.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn translator_motor_geometric_anti_product(self_1894: Translator, other_1624: Motor) -> Motor {
    var self_1895: Translator;
    var other_1625: Motor;

    self_1895 = self_1894;
    other_1625 = other_1624;
    let _e4: Translator = self_1895;
    let _e8: Motor = other_1625;
    let _e20: Translator = self_1895;
    let _e24: Motor = other_1625;
    let _e37: Translator = self_1895;
    let _e41: Motor = other_1625;
    let _e54: Translator = self_1895;
    let _e58: Motor = other_1625;
    let _e71: Translator = self_1895;
    let _e75: Motor = other_1625;
    let _e87: Translator = self_1895;
    let _e91: Motor = other_1625;
    let _e104: Translator = self_1895;
    let _e108: Motor = other_1625;
    let _e121: Translator = self_1895;
    let _e125: Motor = other_1625;
    return Motor((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.z) * _e41.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e54.g0_.w) * _e58.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e71.g0_.x) * _e75.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e87.g0_.y) * _e91.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e104.g0_.z) * _e108.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e121.g0_.w) * _e125.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn translator_motor_inner_anti_product(self_1896: Translator, other_1626: Motor) -> Motor {
    var self_1897: Translator;
    var other_1627: Motor;

    self_1897 = self_1896;
    other_1627 = other_1626;
    let _e4: Translator = self_1897;
    let _e8: Motor = other_1627;
    let _e20: Translator = self_1897;
    let _e22: Motor = other_1627;
    let _e37: Translator = self_1897;
    let _e41: Motor = other_1627;
    let _e53: Translator = self_1897;
    let _e57: Motor = other_1627;
    let _e69: Translator = self_1897;
    let _e73: Motor = other_1627;
    let _e85: Translator = self_1897;
    let _e88: Motor = other_1627;
    return Motor((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e37.g0_.x) * _e41.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e53.g0_.z) * _e57.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e69.g0_.w) * _e73.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e85.g0_.yyxx * _e88.g1_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_motor_left_contraction(self_1898: Translator, other_1628: Motor) -> Motor {
    var self_1899: Translator;
    var other_1629: Motor;

    self_1899 = self_1898;
    other_1629 = other_1628;
    let _e4: Translator = self_1899;
    let _e8: Motor = other_1629;
    let _e11: Translator = self_1899;
    let _e15: Motor = other_1629;
    let _e28: Translator = self_1899;
    let _e32: Motor = other_1629;
    let _e45: Translator = self_1899;
    let _e48: Motor = other_1629;
    let _e61: Translator = self_1899;
    let _e65: Motor = other_1629;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e28.g0_.w) * _e32.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e45.g0_.yyxx * _e48.g1_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))), (vec4<f32>(_e61.g0_.x) * _e65.g1_));
}

fn translator_motor_right_contraction(self_1900: Translator, other_1630: Motor) -> Translator {
    var self_1901: Translator;
    var other_1631: Motor;

    self_1901 = self_1900;
    other_1631 = other_1630;
    let _e4: Translator = self_1901;
    let _e8: Motor = other_1631;
    let _e11: Motor = other_1631;
    let _e14: Motor = other_1631;
    let _e17: Motor = other_1631;
    let _e29: Translator = self_1901;
    let _e33: Motor = other_1631;
    let _e36: Motor = other_1631;
    let _e39: Motor = other_1631;
    let _e42: Motor = other_1631;
    let _e55: Translator = self_1901;
    let _e59: Motor = other_1631;
    let _e62: Motor = other_1631;
    let _e65: Motor = other_1631;
    let _e68: Motor = other_1631;
    let _e81: Translator = self_1901;
    let _e85: Motor = other_1631;
    return Translator((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.y, _e11.g0_.x, _e14.g1_.y, _e17.g1_.y)) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.z, _e36.g1_.z, _e39.g0_.x, _e42.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.w, _e62.g1_.w, _e65.g1_.w, _e68.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn translator_motor_right_anti_contraction(self_1902: Translator, other_1632: Motor) -> Motor {
    var self_1903: Translator;
    var other_1633: Motor;

    self_1903 = self_1902;
    other_1633 = other_1632;
    let _e4: Translator = self_1903;
    let _e8: Motor = other_1633;
    let _e20: Translator = self_1903;
    let _e24: Motor = other_1633;
    let _e36: Translator = self_1903;
    let _e40: Motor = other_1633;
    let _e52: Translator = self_1903;
    let _e56: Motor = other_1633;
    let _e68: Translator = self_1903;
    let _e71: Motor = other_1633;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (((((vec4<f32>(_e20.g0_.x) * _e24.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e68.g0_.yyxx * _e71.g1_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_motor_scalar_product(self_1904: Translator, other_1634: Motor) -> Scalar {
    var self_1905: Translator;
    var other_1635: Motor;

    self_1905 = self_1904;
    other_1635 = other_1634;
    let _e4: Translator = self_1905;
    let _e7: Motor = other_1635;
    let _e11: Translator = self_1905;
    let _e14: Motor = other_1635;
    let _e19: Translator = self_1905;
    let _e22: Motor = other_1635;
    let _e27: Translator = self_1905;
    let _e30: Motor = other_1635;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g1_.y)) - (_e19.g0_.z * _e22.g1_.z)) - (_e27.g0_.w * _e30.g1_.w)));
}

fn translator_motor_anti_scalar_product(self_1906: Translator, other_1636: Motor) -> AntiScalar {
    var self_1907: Translator;
    var other_1637: Motor;

    self_1907 = self_1906;
    other_1637 = other_1636;
    let _e4: Translator = self_1907;
    let _e7: Motor = other_1637;
    let _e11: Translator = self_1907;
    let _e14: Motor = other_1637;
    let _e19: Translator = self_1907;
    let _e22: Motor = other_1637;
    let _e27: Translator = self_1907;
    let _e30: Motor = other_1637;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g1_.y)) - (_e19.g0_.z * _e22.g1_.z)) - (_e27.g0_.w * _e30.g1_.w)));
}

fn translator_point_and_plane_geometric_product(self_1908: Translator, other_1638: PointAndPlane) -> PointAndPlane {
    var self_1909: Translator;
    var other_1639: PointAndPlane;

    self_1909 = self_1908;
    other_1639 = other_1638;
    let _e4: Translator = self_1909;
    let _e8: PointAndPlane = other_1639;
    let _e11: Translator = self_1909;
    let _e15: PointAndPlane = other_1639;
    let _e18: PointAndPlane = other_1639;
    let _e21: PointAndPlane = other_1639;
    let _e24: PointAndPlane = other_1639;
    let _e38: Translator = self_1909;
    let _e42: PointAndPlane = other_1639;
    let _e45: PointAndPlane = other_1639;
    let _e48: PointAndPlane = other_1639;
    let _e51: PointAndPlane = other_1639;
    let _e65: Translator = self_1909;
    let _e69: PointAndPlane = other_1639;
    let _e72: PointAndPlane = other_1639;
    let _e75: PointAndPlane = other_1639;
    let _e78: PointAndPlane = other_1639;
    let _e92: Translator = self_1909;
    let _e96: PointAndPlane = other_1639;
    let _e99: Translator = self_1909;
    let _e103: PointAndPlane = other_1639;
    let _e106: PointAndPlane = other_1639;
    let _e109: PointAndPlane = other_1639;
    let _e112: PointAndPlane = other_1639;
    let _e126: Translator = self_1909;
    let _e130: PointAndPlane = other_1639;
    let _e133: PointAndPlane = other_1639;
    let _e136: PointAndPlane = other_1639;
    let _e139: PointAndPlane = other_1639;
    let _e153: Translator = self_1909;
    let _e157: PointAndPlane = other_1639;
    let _e160: PointAndPlane = other_1639;
    let _e163: PointAndPlane = other_1639;
    let _e166: PointAndPlane = other_1639;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.x, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g0_.z, _e45.g1_.w, _e48.g0_.x, _e51.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w, _e72.g1_.z, _e75.g1_.y, _e78.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((vec4<f32>(_e92.g0_.x) * _e96.g1_) + ((vec4<f32>(_e99.g0_.y) * vec4<f32>(_e103.g1_.y, _e106.g1_.x, _e109.g0_.w, _e112.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e126.g0_.z) * vec4<f32>(_e130.g1_.z, _e133.g0_.w, _e136.g1_.x, _e139.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e153.g0_.w) * vec4<f32>(_e157.g1_.w, _e160.g0_.z, _e163.g0_.y, _e166.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn translator_point_and_plane_regressive_product(self_1910: Translator, other_1640: PointAndPlane) -> Plane {
    var self_1911: Translator;
    var other_1641: PointAndPlane;

    self_1911 = self_1910;
    other_1641 = other_1640;
    let _e4: Translator = self_1911;
    let _e8: PointAndPlane = other_1641;
    let _e19: Translator = self_1911;
    let _e23: PointAndPlane = other_1641;
    let _e35: Translator = self_1911;
    let _e38: PointAndPlane = other_1641;
    return Plane(((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e35.g0_.yyxx * _e38.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_point_and_plane_outer_product(self_1912: Translator, other_1642: PointAndPlane) -> PointAndPlane {
    var self_1913: Translator;
    var other_1643: PointAndPlane;

    self_1913 = self_1912;
    other_1643 = other_1642;
    let _e4: Translator = self_1913;
    let _e8: PointAndPlane = other_1643;
    let _e11: Translator = self_1913;
    let _e15: PointAndPlane = other_1643;
    let _e27: Translator = self_1913;
    let _e31: PointAndPlane = other_1643;
    let _e43: Translator = self_1913;
    let _e46: PointAndPlane = other_1643;
    let _e58: Translator = self_1913;
    let _e62: PointAndPlane = other_1643;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e43.g0_.xxyy * _e46.g1_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), (vec4<f32>(_e58.g0_.x) * _e62.g1_));
}

fn translator_point_and_plane_inner_product(self_1914: Translator, other_1644: PointAndPlane) -> PointAndPlane {
    var self_1915: Translator;
    var other_1645: PointAndPlane;

    self_1915 = self_1914;
    other_1645 = other_1644;
    let _e4: Translator = self_1915;
    let _e8: PointAndPlane = other_1645;
    let _e11: Translator = self_1915;
    let _e15: PointAndPlane = other_1645;
    let _e18: Translator = self_1915;
    let _e22: PointAndPlane = other_1645;
    let _e25: PointAndPlane = other_1645;
    let _e28: PointAndPlane = other_1645;
    let _e31: PointAndPlane = other_1645;
    let _e45: Translator = self_1915;
    let _e49: PointAndPlane = other_1645;
    let _e52: PointAndPlane = other_1645;
    let _e55: PointAndPlane = other_1645;
    let _e58: PointAndPlane = other_1645;
    let _e72: Translator = self_1915;
    let _e76: PointAndPlane = other_1645;
    let _e79: PointAndPlane = other_1645;
    let _e82: PointAndPlane = other_1645;
    let _e85: PointAndPlane = other_1645;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.y) * vec4<f32>(_e22.g1_.y, _e25.g1_.x, _e28.g0_.w, _e31.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e45.g0_.z) * vec4<f32>(_e49.g1_.z, _e52.g0_.w, _e55.g1_.x, _e58.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e72.g0_.w) * vec4<f32>(_e76.g1_.w, _e79.g0_.z, _e82.g0_.y, _e85.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn translator_point_and_plane_geometric_anti_product(self_1916: Translator, other_1646: PointAndPlane) -> PointAndPlane {
    var self_1917: Translator;
    var other_1647: PointAndPlane;

    self_1917 = self_1916;
    other_1647 = other_1646;
    let _e4: Translator = self_1917;
    let _e8: PointAndPlane = other_1647;
    let _e11: Translator = self_1917;
    let _e15: PointAndPlane = other_1647;
    let _e18: PointAndPlane = other_1647;
    let _e21: PointAndPlane = other_1647;
    let _e24: PointAndPlane = other_1647;
    let _e38: Translator = self_1917;
    let _e42: PointAndPlane = other_1647;
    let _e45: PointAndPlane = other_1647;
    let _e48: PointAndPlane = other_1647;
    let _e51: PointAndPlane = other_1647;
    let _e65: Translator = self_1917;
    let _e69: PointAndPlane = other_1647;
    let _e72: PointAndPlane = other_1647;
    let _e75: PointAndPlane = other_1647;
    let _e78: PointAndPlane = other_1647;
    let _e92: Translator = self_1917;
    let _e96: PointAndPlane = other_1647;
    let _e99: Translator = self_1917;
    let _e103: PointAndPlane = other_1647;
    let _e106: PointAndPlane = other_1647;
    let _e109: PointAndPlane = other_1647;
    let _e112: PointAndPlane = other_1647;
    let _e126: Translator = self_1917;
    let _e130: PointAndPlane = other_1647;
    let _e133: PointAndPlane = other_1647;
    let _e136: PointAndPlane = other_1647;
    let _e139: PointAndPlane = other_1647;
    let _e153: Translator = self_1917;
    let _e157: PointAndPlane = other_1647;
    let _e160: PointAndPlane = other_1647;
    let _e163: PointAndPlane = other_1647;
    let _e166: PointAndPlane = other_1647;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.x, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g1_.z, _e45.g0_.w, _e48.g1_.x, _e51.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g1_.w, _e72.g0_.z, _e75.g0_.y, _e78.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e92.g0_.x) * _e96.g0_) + ((vec4<f32>(_e99.g0_.y) * vec4<f32>(_e103.g0_.y, _e106.g0_.x, _e109.g1_.w, _e112.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e126.g0_.z) * vec4<f32>(_e130.g0_.z, _e133.g1_.w, _e136.g0_.x, _e139.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e153.g0_.w) * vec4<f32>(_e157.g0_.w, _e160.g1_.z, _e163.g1_.y, _e166.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn translator_point_and_plane_inner_anti_product(self_1918: Translator, other_1648: PointAndPlane) -> PointAndPlane {
    var self_1919: Translator;
    var other_1649: PointAndPlane;

    self_1919 = self_1918;
    other_1649 = other_1648;
    let _e4: Translator = self_1919;
    let _e8: PointAndPlane = other_1649;
    let _e11: Translator = self_1919;
    let _e15: PointAndPlane = other_1649;
    let _e18: PointAndPlane = other_1649;
    let _e21: PointAndPlane = other_1649;
    let _e24: PointAndPlane = other_1649;
    let _e38: Translator = self_1919;
    let _e42: PointAndPlane = other_1649;
    let _e45: PointAndPlane = other_1649;
    let _e48: PointAndPlane = other_1649;
    let _e51: PointAndPlane = other_1649;
    let _e65: Translator = self_1919;
    let _e69: PointAndPlane = other_1649;
    let _e72: PointAndPlane = other_1649;
    let _e75: PointAndPlane = other_1649;
    let _e78: PointAndPlane = other_1649;
    let _e92: Translator = self_1919;
    let _e96: PointAndPlane = other_1649;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.x, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g1_.z, _e45.g0_.w, _e48.g1_.x, _e51.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g1_.w, _e72.g0_.z, _e75.g0_.y, _e78.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (vec4<f32>(_e92.g0_.x) * _e96.g0_));
}

fn translator_point_and_plane_left_contraction(self_1920: Translator, other_1650: PointAndPlane) -> PointAndPlane {
    var self_1921: Translator;
    var other_1651: PointAndPlane;

    self_1921 = self_1920;
    other_1651 = other_1650;
    let _e4: Translator = self_1921;
    let _e8: PointAndPlane = other_1651;
    let _e11: Translator = self_1921;
    let _e15: PointAndPlane = other_1651;
    let _e18: Translator = self_1921;
    let _e22: PointAndPlane = other_1651;
    let _e34: Translator = self_1921;
    let _e38: PointAndPlane = other_1651;
    let _e50: Translator = self_1921;
    let _e53: PointAndPlane = other_1651;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e34.g0_.w) * _e38.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e50.g0_.xxyy * _e53.g0_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))));
}

fn translator_point_and_plane_right_contraction(self_1922: Translator, other_1652: PointAndPlane) -> Plane {
    var self_1923: Translator;
    var other_1653: PointAndPlane;

    self_1923 = self_1922;
    other_1653 = other_1652;
    let _e4: Translator = self_1923;
    let _e8: PointAndPlane = other_1653;
    let _e19: Translator = self_1923;
    let _e23: PointAndPlane = other_1653;
    let _e35: Translator = self_1923;
    let _e38: PointAndPlane = other_1653;
    return Plane(((((vec4<f32>(_e4.g0_.z) * _e8.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((_e35.g0_.yyxx * _e38.g1_.yxxx) * vec4<f32>(1.0, -(1.0), 0.0, 0.0))));
}

fn translator_point_and_plane_left_anti_contraction(self_1924: Translator, other_1654: PointAndPlane) -> Point {
    var self_1925: Translator;
    var other_1655: PointAndPlane;

    self_1925 = self_1924;
    other_1655 = other_1654;
    let _e4: Translator = self_1925;
    let _e8: PointAndPlane = other_1655;
    let _e19: Translator = self_1925;
    let _e23: PointAndPlane = other_1655;
    let _e35: Translator = self_1925;
    let _e38: PointAndPlane = other_1655;
    return Point(((((vec4<f32>(_e4.g0_.z) * _e8.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e35.g0_.yyxx * _e38.g1_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))));
}

fn translator_point_and_plane_right_anti_contraction(self_1926: Translator, other_1656: PointAndPlane) -> PointAndPlane {
    var self_1927: Translator;
    var other_1657: PointAndPlane;

    self_1927 = self_1926;
    other_1657 = other_1656;
    let _e4: Translator = self_1927;
    let _e8: PointAndPlane = other_1657;
    let _e11: Translator = self_1927;
    let _e15: PointAndPlane = other_1657;
    let _e27: Translator = self_1927;
    let _e31: PointAndPlane = other_1657;
    let _e43: Translator = self_1927;
    let _e46: PointAndPlane = other_1657;
    let _e58: Translator = self_1927;
    let _e62: PointAndPlane = other_1657;
    return PointAndPlane(((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e43.g0_.xxyy * _e46.g0_.xxwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))), (vec4<f32>(_e58.g0_.x) * _e62.g0_));
}

fn translator_squared_magnitude(self_1928: Translator) -> Scalar {
    var self_1929: Translator;

    self_1929 = self_1928;
    let _e2: Translator = self_1929;
    let _e3: Translator = self_1929;
    let _e4: Translator = translator_reversal(_e3);
    let _e5: Scalar = translator_translator_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_magnitude(self_1930: Translator) -> Scalar {
    var self_1931: Translator;

    self_1931 = self_1930;
    let _e2: Translator = self_1931;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_bulk_norm(self_1932: Translator) -> Scalar {
    var self_1933: Translator;

    self_1933 = self_1932;
    let _e2: Translator = self_1933;
    let _e3: Scalar = translator_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn translator_squared_anti_magnitude(self_1934: Translator) -> AntiScalar {
    var self_1935: Translator;

    self_1935 = self_1934;
    let _e2: Translator = self_1935;
    let _e3: Translator = self_1935;
    let _e4: Translator = translator_anti_reversal(_e3);
    let _e5: AntiScalar = translator_translator_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn translator_weight_norm(self_1936: Translator) -> AntiScalar {
    var self_1937: Translator;

    self_1937 = self_1936;
    let _e2: Translator = self_1937;
    let _e3: AntiScalar = translator_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn translator_scale(self_1938: Translator, other_1658: f32) -> Translator {
    var self_1939: Translator;
    var other_1659: f32;

    self_1939 = self_1938;
    other_1659 = other_1658;
    let _e4: Translator = self_1939;
    let _e5: f32 = other_1659;
    let _e7: Translator = translator_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn translator_signum(self_1940: Translator) -> Translator {
    var self_1941: Translator;

    self_1941 = self_1940;
    let _e2: Translator = self_1941;
    let _e3: Translator = self_1941;
    let _e4: Scalar = translator_magnitude(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn translator_inverse(self_1942: Translator) -> Translator {
    var self_1943: Translator;

    self_1943 = self_1942;
    let _e2: Translator = self_1943;
    let _e3: Translator = translator_reversal(_e2);
    let _e4: Translator = self_1943;
    let _e5: Scalar = translator_squared_magnitude(_e4);
    let _e10: Translator = translator_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn translator_unitize(self_1944: Translator) -> Translator {
    var self_1945: Translator;

    self_1945 = self_1944;
    let _e2: Translator = self_1945;
    let _e3: Translator = self_1945;
    let _e4: AntiScalar = translator_weight_norm(_e3);
    let _e9: Translator = translator_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn motor_one() -> Motor {
    return Motor(vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(0.0));
}

fn motor_neg(self_1946: Motor) -> Motor {
    var self_1947: Motor;

    self_1947 = self_1946;
    let _e2: Motor = self_1947;
    let _e8: Motor = self_1947;
    return Motor((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn motor_automorphism(self_1948: Motor) -> Motor {
    var self_1949: Motor;

    self_1949 = self_1948;
    let _e2: Motor = self_1949;
    let _e4: Motor = self_1949;
    return Motor(_e2.g0_, _e4.g1_);
}

fn motor_reversal(self_1950: Motor) -> Motor {
    var self_1951: Motor;

    self_1951 = self_1950;
    let _e2: Motor = self_1951;
    let _e13: Motor = self_1951;
    return Motor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_conjugation(self_1952: Motor) -> Motor {
    var self_1953: Motor;

    self_1953 = self_1952;
    let _e2: Motor = self_1953;
    let _e13: Motor = self_1953;
    return Motor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_dual(self_1954: Motor) -> Motor {
    var self_1955: Motor;

    self_1955 = self_1954;
    let _e2: Motor = self_1955;
    let _e4: Motor = self_1955;
    return Motor(_e2.g1_, _e4.g0_);
}

fn motor_anti_reversal(self_1956: Motor) -> Motor {
    var self_1957: Motor;

    self_1957 = self_1956;
    let _e2: Motor = self_1957;
    let _e13: Motor = self_1957;
    return Motor((_e2.g0_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), (_e13.g1_ * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_scalar_into(self_1958: Motor) -> Scalar {
    var self_1959: Motor;

    self_1959 = self_1958;
    let _e2: Motor = self_1959;
    return Scalar(_e2.g0_.x);
}

fn motor_scalar_add(self_1960: Motor, other_1660: Scalar) -> Motor {
    var self_1961: Motor;
    var other_1661: Scalar;

    self_1961 = self_1960;
    other_1661 = other_1660;
    let _e4: Motor = self_1961;
    let _e6: Scalar = other_1661;
    let _e16: Motor = self_1961;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e16.g1_);
}

fn motor_scalar_sub(self_1962: Motor, other_1662: Scalar) -> Motor {
    var self_1963: Motor;
    var other_1663: Scalar;

    self_1963 = self_1962;
    other_1663 = other_1662;
    let _e4: Motor = self_1963;
    let _e6: Scalar = other_1663;
    let _e16: Motor = self_1963;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), _e16.g1_);
}

fn motor_scalar_geometric_product(self_1964: Motor, other_1664: Scalar) -> Motor {
    var self_1965: Motor;
    var other_1665: Scalar;

    self_1965 = self_1964;
    other_1665 = other_1664;
    let _e4: Motor = self_1965;
    let _e6: Scalar = other_1665;
    let _e10: Motor = self_1965;
    let _e12: Scalar = other_1665;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_regressive_product(self_1966: Motor, other_1666: Scalar) -> Scalar {
    var self_1967: Motor;
    var other_1667: Scalar;

    self_1967 = self_1966;
    other_1667 = other_1666;
    let _e4: Motor = self_1967;
    let _e7: Scalar = other_1667;
    return Scalar((_e4.g1_.x * _e7.g0_));
}

fn motor_scalar_outer_product(self_1968: Motor, other_1668: Scalar) -> Motor {
    var self_1969: Motor;
    var other_1669: Scalar;

    self_1969 = self_1968;
    other_1669 = other_1668;
    let _e4: Motor = self_1969;
    let _e6: Scalar = other_1669;
    let _e10: Motor = self_1969;
    let _e12: Scalar = other_1669;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_inner_product(self_1970: Motor, other_1670: Scalar) -> Motor {
    var self_1971: Motor;
    var other_1671: Scalar;

    self_1971 = self_1970;
    other_1671 = other_1670;
    let _e4: Motor = self_1971;
    let _e6: Scalar = other_1671;
    let _e10: Motor = self_1971;
    let _e12: Scalar = other_1671;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_geometric_anti_product(self_1972: Motor, other_1672: Scalar) -> Motor {
    var self_1973: Motor;
    var other_1673: Scalar;

    self_1973 = self_1972;
    other_1673 = other_1672;
    let _e4: Motor = self_1973;
    let _e6: Scalar = other_1673;
    let _e19: Motor = self_1973;
    let _e21: Scalar = other_1673;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_scalar_inner_anti_product(self_1974: Motor, other_1674: Scalar) -> Motor {
    var self_1975: Motor;
    var other_1675: Scalar;

    self_1975 = self_1974;
    other_1675 = other_1674;
    let _e4: Motor = self_1975;
    let _e6: Scalar = other_1675;
    let _e19: Motor = self_1975;
    let _e21: Scalar = other_1675;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_scalar_left_contraction(self_1976: Motor, other_1676: Scalar) -> Scalar {
    var self_1977: Motor;
    var other_1677: Scalar;

    self_1977 = self_1976;
    other_1677 = other_1676;
    let _e4: Motor = self_1977;
    let _e7: Scalar = other_1677;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn motor_scalar_right_contraction(self_1978: Motor, other_1678: Scalar) -> Motor {
    var self_1979: Motor;
    var other_1679: Scalar;

    self_1979 = self_1978;
    other_1679 = other_1678;
    let _e4: Motor = self_1979;
    let _e6: Scalar = other_1679;
    let _e10: Motor = self_1979;
    let _e12: Scalar = other_1679;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_scalar_left_anti_contraction(self_1980: Motor, other_1680: Scalar) -> Motor {
    var self_1981: Motor;
    var other_1681: Scalar;

    self_1981 = self_1980;
    other_1681 = other_1680;
    let _e4: Motor = self_1981;
    let _e6: Scalar = other_1681;
    let _e19: Motor = self_1981;
    let _e21: Scalar = other_1681;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_scalar_right_anti_contraction(self_1982: Motor, other_1682: Scalar) -> AntiScalar {
    var self_1983: Motor;
    var other_1683: Scalar;

    self_1983 = self_1982;
    other_1683 = other_1682;
    let _e4: Motor = self_1983;
    let _e7: Scalar = other_1683;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn motor_scalar_scalar_product(self_1984: Motor, other_1684: Scalar) -> Scalar {
    var self_1985: Motor;
    var other_1685: Scalar;

    self_1985 = self_1984;
    other_1685 = other_1684;
    let _e4: Motor = self_1985;
    let _e7: Scalar = other_1685;
    return Scalar((_e4.g0_.x * _e7.g0_));
}

fn motor_scalar_anti_scalar_product(self_1986: Motor, other_1686: Scalar) -> AntiScalar {
    var self_1987: Motor;
    var other_1687: Scalar;

    self_1987 = self_1986;
    other_1687 = other_1686;
    let _e4: Motor = self_1987;
    let _e7: Scalar = other_1687;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn motor_anti_scalar_into(self_1988: Motor) -> AntiScalar {
    var self_1989: Motor;

    self_1989 = self_1988;
    let _e2: Motor = self_1989;
    return AntiScalar(_e2.g1_.x);
}

fn motor_anti_scalar_add(self_1990: Motor, other_1688: AntiScalar) -> Motor {
    var self_1991: Motor;
    var other_1689: AntiScalar;

    self_1991 = self_1990;
    other_1689 = other_1688;
    let _e4: Motor = self_1991;
    let _e6: Motor = self_1991;
    let _e8: AntiScalar = other_1689;
    return Motor(_e4.g0_, (_e6.g1_ + (vec4<f32>(_e8.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_anti_scalar_sub(self_1992: Motor, other_1690: AntiScalar) -> Motor {
    var self_1993: Motor;
    var other_1691: AntiScalar;

    self_1993 = self_1992;
    other_1691 = other_1690;
    let _e4: Motor = self_1993;
    let _e6: Motor = self_1993;
    let _e8: AntiScalar = other_1691;
    return Motor(_e4.g0_, (_e6.g1_ - (vec4<f32>(_e8.g0_) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_anti_scalar_geometric_product(self_1994: Motor, other_1692: AntiScalar) -> Motor {
    var self_1995: Motor;
    var other_1693: AntiScalar;

    self_1995 = self_1994;
    other_1693 = other_1692;
    let _e4: Motor = self_1995;
    let _e6: AntiScalar = other_1693;
    let _e19: Motor = self_1995;
    let _e21: AntiScalar = other_1693;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_anti_scalar_regressive_product(self_1996: Motor, other_1694: AntiScalar) -> Motor {
    var self_1997: Motor;
    var other_1695: AntiScalar;

    self_1997 = self_1996;
    other_1695 = other_1694;
    let _e4: Motor = self_1997;
    let _e6: AntiScalar = other_1695;
    let _e10: Motor = self_1997;
    let _e12: AntiScalar = other_1695;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_outer_product(self_1998: Motor, other_1696: AntiScalar) -> AntiScalar {
    var self_1999: Motor;
    var other_1697: AntiScalar;

    self_1999 = self_1998;
    other_1697 = other_1696;
    let _e4: Motor = self_1999;
    let _e7: AntiScalar = other_1697;
    return AntiScalar((_e4.g0_.x * _e7.g0_));
}

fn motor_anti_scalar_inner_product(self_2000: Motor, other_1698: AntiScalar) -> Motor {
    var self_2001: Motor;
    var other_1699: AntiScalar;

    self_2001 = self_2000;
    other_1699 = other_1698;
    let _e4: Motor = self_2001;
    let _e6: AntiScalar = other_1699;
    let _e19: Motor = self_2001;
    let _e21: AntiScalar = other_1699;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_anti_scalar_geometric_anti_product(self_2002: Motor, other_1700: AntiScalar) -> Motor {
    var self_2003: Motor;
    var other_1701: AntiScalar;

    self_2003 = self_2002;
    other_1701 = other_1700;
    let _e4: Motor = self_2003;
    let _e6: AntiScalar = other_1701;
    let _e10: Motor = self_2003;
    let _e12: AntiScalar = other_1701;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_inner_anti_product(self_2004: Motor, other_1702: AntiScalar) -> Motor {
    var self_2005: Motor;
    var other_1703: AntiScalar;

    self_2005 = self_2004;
    other_1703 = other_1702;
    let _e4: Motor = self_2005;
    let _e6: AntiScalar = other_1703;
    let _e10: Motor = self_2005;
    let _e12: AntiScalar = other_1703;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_left_contraction(self_2006: Motor, other_1704: AntiScalar) -> Motor {
    var self_2007: Motor;
    var other_1705: AntiScalar;

    self_2007 = self_2006;
    other_1705 = other_1704;
    let _e4: Motor = self_2007;
    let _e6: AntiScalar = other_1705;
    let _e19: Motor = self_2007;
    let _e21: AntiScalar = other_1705;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((_e19.g0_ * vec4<f32>(_e21.g0_)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))));
}

fn motor_anti_scalar_right_contraction(self_2008: Motor, other_1706: AntiScalar) -> Scalar {
    var self_2009: Motor;
    var other_1707: AntiScalar;

    self_2009 = self_2008;
    other_1707 = other_1706;
    let _e4: Motor = self_2009;
    let _e7: AntiScalar = other_1707;
    return Scalar((_e4.g1_.x * _e7.g0_));
}

fn motor_anti_scalar_left_anti_contraction(self_2010: Motor, other_1708: AntiScalar) -> AntiScalar {
    var self_2011: Motor;
    var other_1709: AntiScalar;

    self_2011 = self_2010;
    other_1709 = other_1708;
    let _e4: Motor = self_2011;
    let _e7: AntiScalar = other_1709;
    return AntiScalar((_e4.g1_.x * _e7.g0_));
}

fn motor_anti_scalar_right_anti_contraction(self_2012: Motor, other_1710: AntiScalar) -> Motor {
    var self_2013: Motor;
    var other_1711: AntiScalar;

    self_2013 = self_2012;
    other_1711 = other_1710;
    let _e4: Motor = self_2013;
    let _e6: AntiScalar = other_1711;
    let _e10: Motor = self_2013;
    let _e12: AntiScalar = other_1711;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn motor_anti_scalar_scalar_product(self_2014: Motor, other_1712: AntiScalar) -> Scalar {
    var self_2015: Motor;
    var other_1713: AntiScalar;

    self_2015 = self_2014;
    other_1713 = other_1712;
    let _e4: Motor = self_2015;
    let _e7: AntiScalar = other_1713;
    return Scalar((_e4.g1_.x * _e7.g0_));
}

fn motor_anti_scalar_anti_scalar_product(self_2016: Motor, other_1714: AntiScalar) -> AntiScalar {
    var self_2017: Motor;
    var other_1715: AntiScalar;

    self_2017 = self_2016;
    other_1715 = other_1714;
    let _e4: Motor = self_2017;
    let _e7: AntiScalar = other_1715;
    return AntiScalar((_e4.g1_.x * _e7.g0_));
}

fn motor_multi_vector_add(self_2018: Motor, other_1716: MultiVector) -> MultiVector {
    var self_2019: Motor;
    var other_1717: MultiVector;

    self_2019 = self_2018;
    other_1717 = other_1716;
    let _e4: Motor = self_2019;
    let _e6: MultiVector = other_1717;
    let _e9: MultiVector = other_1717;
    let _e11: MultiVector = other_1717;
    let _e13: Motor = self_2019;
    let _e15: MultiVector = other_1717;
    return MultiVector((_e4.g0_ + _e6.g0_), _e9.g1_, _e11.g2_, (_e13.g1_ + _e15.g3_));
}

fn motor_multi_vector_sub(self_2020: Motor, other_1718: MultiVector) -> MultiVector {
    var self_2021: Motor;
    var other_1719: MultiVector;

    self_2021 = self_2020;
    other_1719 = other_1718;
    let _e4: Motor = self_2021;
    let _e6: MultiVector = other_1719;
    let _e11: MultiVector = other_1719;
    let _e16: MultiVector = other_1719;
    let _e19: Motor = self_2021;
    let _e21: MultiVector = other_1719;
    return MultiVector((_e4.g0_ - _e6.g0_), (vec4<f32>(0.0) - _e11.g1_), (vec4<f32>(0.0) - _e16.g2_), (_e19.g1_ - _e21.g3_));
}

fn motor_multi_vector_geometric_product(self_2022: Motor, other_1720: MultiVector) -> MultiVector {
    var self_2023: Motor;
    var other_1721: MultiVector;

    self_2023 = self_2022;
    other_1721 = other_1720;
    let _e4: Motor = self_2023;
    let _e8: MultiVector = other_1721;
    let _e11: Motor = self_2023;
    let _e15: MultiVector = other_1721;
    let _e28: Motor = self_2023;
    let _e32: MultiVector = other_1721;
    let _e45: Motor = self_2023;
    let _e49: MultiVector = other_1721;
    let _e62: Motor = self_2023;
    let _e66: MultiVector = other_1721;
    let _e79: Motor = self_2023;
    let _e83: MultiVector = other_1721;
    let _e97: Motor = self_2023;
    let _e101: MultiVector = other_1721;
    let _e115: Motor = self_2023;
    let _e119: MultiVector = other_1721;
    let _e133: Motor = self_2023;
    let _e137: MultiVector = other_1721;
    let _e140: Motor = self_2023;
    let _e144: MultiVector = other_1721;
    let _e157: Motor = self_2023;
    let _e161: MultiVector = other_1721;
    let _e174: Motor = self_2023;
    let _e178: MultiVector = other_1721;
    let _e191: Motor = self_2023;
    let _e195: MultiVector = other_1721;
    let _e199: Motor = self_2023;
    let _e203: MultiVector = other_1721;
    let _e216: Motor = self_2023;
    let _e220: MultiVector = other_1721;
    let _e233: Motor = self_2023;
    let _e237: MultiVector = other_1721;
    let _e250: Motor = self_2023;
    let _e254: MultiVector = other_1721;
    let _e257: Motor = self_2023;
    let _e261: MultiVector = other_1721;
    let _e274: Motor = self_2023;
    let _e278: MultiVector = other_1721;
    let _e291: Motor = self_2023;
    let _e295: MultiVector = other_1721;
    let _e308: Motor = self_2023;
    let _e312: MultiVector = other_1721;
    let _e316: Motor = self_2023;
    let _e320: MultiVector = other_1721;
    let _e333: Motor = self_2023;
    let _e337: MultiVector = other_1721;
    let _e350: Motor = self_2023;
    let _e354: MultiVector = other_1721;
    let _e367: Motor = self_2023;
    let _e371: MultiVector = other_1721;
    let _e374: Motor = self_2023;
    let _e378: MultiVector = other_1721;
    let _e391: Motor = self_2023;
    let _e395: MultiVector = other_1721;
    let _e408: Motor = self_2023;
    let _e412: MultiVector = other_1721;
    let _e425: Motor = self_2023;
    let _e429: MultiVector = other_1721;
    let _e442: Motor = self_2023;
    let _e446: MultiVector = other_1721;
    let _e458: Motor = self_2023;
    let _e462: MultiVector = other_1721;
    let _e474: Motor = self_2023;
    let _e478: MultiVector = other_1721;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e62.g1_.x) * _e66.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e79.g1_.y) * _e83.g3_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e97.g1_.z) * _e101.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e115.g1_.w) * _e119.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e133.g0_.x) * _e137.g1_) + ((vec4<f32>(_e140.g0_.y) * _e144.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e157.g0_.z) * _e161.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e174.g0_.w) * _e178.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e191.g1_.x) * _e195.g2_)) + ((vec4<f32>(_e199.g1_.y) * _e203.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e216.g1_.z) * _e220.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e233.g1_.w) * _e237.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e250.g0_.x) * _e254.g2_) + ((vec4<f32>(_e257.g0_.y) * _e261.g2_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e274.g0_.z) * _e278.g2_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e291.g0_.w) * _e295.g2_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e308.g1_.x) * _e312.g1_)) + ((vec4<f32>(_e316.g1_.y) * _e320.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e333.g1_.z) * _e337.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e350.g1_.w) * _e354.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e367.g0_.x) * _e371.g3_) + ((vec4<f32>(_e374.g0_.y) * _e378.g3_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e391.g0_.z) * _e395.g3_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e408.g0_.w) * _e412.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e425.g1_.x) * _e429.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e442.g1_.y) * _e446.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e458.g1_.z) * _e462.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e474.g1_.w) * _e478.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn motor_multi_vector_regressive_product(self_2024: Motor, other_1722: MultiVector) -> MultiVector {
    var self_2025: Motor;
    var other_1723: MultiVector;

    self_2025 = self_2024;
    other_1723 = other_1722;
    let _e4: Motor = self_2025;
    let _e8: MultiVector = other_1723;
    let _e18: Motor = self_2025;
    let _e22: MultiVector = other_1723;
    let _e33: Motor = self_2025;
    let _e37: MultiVector = other_1723;
    let _e48: Motor = self_2025;
    let _e52: MultiVector = other_1723;
    let _e56: Motor = self_2025;
    let _e60: MultiVector = other_1723;
    let _e72: Motor = self_2025;
    let _e76: MultiVector = other_1723;
    let _e88: Motor = self_2025;
    let _e92: MultiVector = other_1723;
    let _e104: Motor = self_2025;
    let _e108: MultiVector = other_1723;
    let _e120: Motor = self_2025;
    let _e124: MultiVector = other_1723;
    let _e127: Motor = self_2025;
    let _e131: MultiVector = other_1723;
    let _e144: Motor = self_2025;
    let _e148: MultiVector = other_1723;
    let _e161: Motor = self_2025;
    let _e164: MultiVector = other_1723;
    let _e176: Motor = self_2025;
    let _e180: MultiVector = other_1723;
    let _e191: Motor = self_2025;
    let _e195: MultiVector = other_1723;
    let _e207: Motor = self_2025;
    let _e211: MultiVector = other_1723;
    let _e215: Motor = self_2025;
    let _e219: MultiVector = other_1723;
    let _e231: Motor = self_2025;
    let _e235: MultiVector = other_1723;
    let _e247: Motor = self_2025;
    let _e250: Motor = self_2025;
    let _e253: Motor = self_2025;
    let _e256: Motor = self_2025;
    let _e260: MultiVector = other_1723;
    let _e263: MultiVector = other_1723;
    let _e266: MultiVector = other_1723;
    let _e269: MultiVector = other_1723;
    let _e282: Motor = self_2025;
    let _e286: MultiVector = other_1723;
    let _e289: Motor = self_2025;
    let _e291: MultiVector = other_1723;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g3_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g3_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g3_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e48.g1_.x) * _e52.g0_)) + ((vec4<f32>(_e56.g1_.y) * vec4<f32>(_e60.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e88.g1_.w) * vec4<f32>(_e92.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e104.g0_.x) * vec4<f32>(_e108.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((vec4<f32>(_e120.g1_.x) * _e124.g1_) + ((vec4<f32>(_e127.g1_.z) * vec4<f32>(_e131.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e144.g1_.w) * vec4<f32>(_e148.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e161.g1_.yxxx * _e164.g1_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((((vec4<f32>(_e176.g0_.z) * _e180.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e191.g0_.w) * _e195.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e207.g1_.x) * _e211.g2_)) + ((vec4<f32>(_e215.g1_.z) * vec4<f32>(_e219.g2_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e231.g1_.w) * vec4<f32>(_e235.g2_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e247.g0_.x, _e250.g1_.y, _e253.g0_.y, _e256.g0_.y) * vec4<f32>(_e260.g1_.x, _e263.g2_.x, _e266.g1_.w, _e269.g1_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((vec4<f32>(_e282.g1_.x) * _e286.g3_) + ((_e289.g1_ * vec4<f32>(_e291.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_multi_vector_outer_product(self_2026: Motor, other_1724: MultiVector) -> MultiVector {
    var self_2027: Motor;
    var other_1725: MultiVector;

    self_2027 = self_2026;
    other_1725 = other_1724;
    let _e4: Motor = self_2027;
    let _e8: MultiVector = other_1725;
    let _e11: Motor = self_2027;
    let _e13: MultiVector = other_1725;
    let _e25: Motor = self_2027;
    let _e29: MultiVector = other_1725;
    let _e32: Motor = self_2027;
    let _e36: MultiVector = other_1725;
    let _e48: Motor = self_2027;
    let _e52: MultiVector = other_1725;
    let _e64: Motor = self_2027;
    let _e68: MultiVector = other_1725;
    let _e80: Motor = self_2027;
    let _e82: MultiVector = other_1725;
    let _e97: Motor = self_2027;
    let _e101: MultiVector = other_1725;
    let _e104: Motor = self_2027;
    let _e108: MultiVector = other_1725;
    let _e120: Motor = self_2027;
    let _e124: MultiVector = other_1725;
    let _e136: Motor = self_2027;
    let _e139: MultiVector = other_1725;
    let _e150: Motor = self_2027;
    let _e154: MultiVector = other_1725;
    let _e157: Motor = self_2027;
    let _e161: MultiVector = other_1725;
    let _e173: Motor = self_2027;
    let _e177: MultiVector = other_1725;
    let _e189: Motor = self_2027;
    let _e193: MultiVector = other_1725;
    let _e205: Motor = self_2027;
    let _e209: MultiVector = other_1725;
    let _e220: Motor = self_2027;
    let _e224: MultiVector = other_1725;
    let _e235: Motor = self_2027;
    let _e239: MultiVector = other_1725;
    let _e250: Motor = self_2027;
    let _e253: MultiVector = other_1725;
    return MultiVector(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e25.g0_.x) * _e29.g1_) + ((vec4<f32>(_e32.g1_.y) * _e36.g2_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e48.g1_.z) * _e52.g2_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e64.g1_.w) * _e68.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e80.g0_ * vec4<f32>(_e82.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e97.g0_.x) * _e101.g2_) + ((vec4<f32>(_e104.g0_.z) * vec4<f32>(_e108.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e120.g0_.w) * vec4<f32>(_e124.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e136.g0_.yxxx * _e139.g2_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((vec4<f32>(_e150.g0_.x) * _e154.g3_) + ((vec4<f32>(_e157.g0_.z) * vec4<f32>(_e161.g3_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e173.g0_.w) * vec4<f32>(_e177.g3_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e189.g1_.x) * vec4<f32>(_e193.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e205.g1_.y) * _e209.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e220.g1_.z) * _e224.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e235.g1_.w) * _e239.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e250.g0_.yxxx * _e253.g3_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_multi_vector_inner_product(self_2028: Motor, other_1726: MultiVector) -> MultiVector {
    var self_2029: Motor;
    var other_1727: MultiVector;

    self_2029 = self_2028;
    other_1727 = other_1726;
    let _e4: Motor = self_2029;
    let _e8: MultiVector = other_1727;
    let _e11: Motor = self_2029;
    let _e15: MultiVector = other_1727;
    let _e27: Motor = self_2029;
    let _e31: MultiVector = other_1727;
    let _e43: Motor = self_2029;
    let _e47: MultiVector = other_1727;
    let _e60: Motor = self_2029;
    let _e64: MultiVector = other_1727;
    let _e77: Motor = self_2029;
    let _e81: MultiVector = other_1727;
    let _e94: Motor = self_2029;
    let _e98: MultiVector = other_1727;
    let _e111: Motor = self_2029;
    let _e114: MultiVector = other_1727;
    let _e126: Motor = self_2029;
    let _e130: MultiVector = other_1727;
    let _e133: Motor = self_2029;
    let _e137: MultiVector = other_1727;
    let _e149: Motor = self_2029;
    let _e153: MultiVector = other_1727;
    let _e165: Motor = self_2029;
    let _e169: MultiVector = other_1727;
    let _e173: Motor = self_2029;
    let _e177: MultiVector = other_1727;
    let _e189: Motor = self_2029;
    let _e193: MultiVector = other_1727;
    let _e205: Motor = self_2029;
    let _e209: MultiVector = other_1727;
    let _e221: Motor = self_2029;
    let _e224: MultiVector = other_1727;
    let _e235: Motor = self_2029;
    let _e239: MultiVector = other_1727;
    let _e242: Motor = self_2029;
    let _e246: MultiVector = other_1727;
    let _e259: Motor = self_2029;
    let _e263: MultiVector = other_1727;
    let _e276: Motor = self_2029;
    let _e280: MultiVector = other_1727;
    let _e284: Motor = self_2029;
    let _e288: MultiVector = other_1727;
    let _e301: Motor = self_2029;
    let _e305: MultiVector = other_1727;
    let _e318: Motor = self_2029;
    let _e322: MultiVector = other_1727;
    let _e335: Motor = self_2029;
    let _e338: MultiVector = other_1727;
    let _e351: Motor = self_2029;
    let _e355: MultiVector = other_1727;
    let _e358: Motor = self_2029;
    let _e362: MultiVector = other_1727;
    let _e375: Motor = self_2029;
    let _e379: MultiVector = other_1727;
    let _e391: Motor = self_2029;
    let _e395: MultiVector = other_1727;
    let _e407: Motor = self_2029;
    let _e411: MultiVector = other_1727;
    let _e423: Motor = self_2029;
    let _e425: MultiVector = other_1727;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e43.g1_.x) * _e47.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e60.g1_.y) * _e64.g3_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e77.g1_.z) * _e81.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e94.g1_.w) * _e98.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e111.g0_.yyxx * _e114.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), ((((((((vec4<f32>(_e126.g0_.x) * _e130.g1_) + ((vec4<f32>(_e133.g0_.z) * vec4<f32>(_e137.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e149.g0_.w) * vec4<f32>(_e153.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) - (vec4<f32>(_e165.g1_.x) * _e169.g2_)) + ((vec4<f32>(_e173.g1_.y) * vec4<f32>(_e177.g2_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e189.g1_.z) * vec4<f32>(_e193.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e205.g1_.w) * vec4<f32>(_e209.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e221.g0_.yxxx * _e224.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((((((vec4<f32>(_e235.g0_.x) * _e239.g2_) + ((vec4<f32>(_e242.g0_.z) * _e246.g2_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e259.g0_.w) * _e263.g2_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e276.g1_.x) * _e280.g1_)) + ((vec4<f32>(_e284.g1_.y) * _e288.g1_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e301.g1_.z) * _e305.g1_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e318.g1_.w) * _e322.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e335.g0_.xyyy * _e338.g2_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e351.g0_.x) * _e355.g3_) + ((vec4<f32>(_e358.g1_.x) * _e362.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e375.g1_.y) * vec4<f32>(_e379.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e391.g1_.z) * vec4<f32>(_e395.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e407.g1_.w) * vec4<f32>(_e411.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e423.g0_ * vec4<f32>(_e425.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_multi_vector_geometric_anti_product(self_2030: Motor, other_1728: MultiVector) -> MultiVector {
    var self_2031: Motor;
    var other_1729: MultiVector;

    self_2031 = self_2030;
    other_1729 = other_1728;
    let _e4: Motor = self_2031;
    let _e8: MultiVector = other_1729;
    let _e20: Motor = self_2031;
    let _e24: MultiVector = other_1729;
    let _e36: Motor = self_2031;
    let _e40: MultiVector = other_1729;
    let _e52: Motor = self_2031;
    let _e56: MultiVector = other_1729;
    let _e68: Motor = self_2031;
    let _e72: MultiVector = other_1729;
    let _e76: Motor = self_2031;
    let _e80: MultiVector = other_1729;
    let _e93: Motor = self_2031;
    let _e97: MultiVector = other_1729;
    let _e110: Motor = self_2031;
    let _e114: MultiVector = other_1729;
    let _e127: Motor = self_2031;
    let _e131: MultiVector = other_1729;
    let _e134: Motor = self_2031;
    let _e138: MultiVector = other_1729;
    let _e151: Motor = self_2031;
    let _e155: MultiVector = other_1729;
    let _e168: Motor = self_2031;
    let _e172: MultiVector = other_1729;
    let _e185: Motor = self_2031;
    let _e189: MultiVector = other_1729;
    let _e193: Motor = self_2031;
    let _e197: MultiVector = other_1729;
    let _e210: Motor = self_2031;
    let _e214: MultiVector = other_1729;
    let _e227: Motor = self_2031;
    let _e231: MultiVector = other_1729;
    let _e244: Motor = self_2031;
    let _e248: MultiVector = other_1729;
    let _e251: Motor = self_2031;
    let _e255: MultiVector = other_1729;
    let _e268: Motor = self_2031;
    let _e272: MultiVector = other_1729;
    let _e285: Motor = self_2031;
    let _e289: MultiVector = other_1729;
    let _e302: Motor = self_2031;
    let _e306: MultiVector = other_1729;
    let _e310: Motor = self_2031;
    let _e314: MultiVector = other_1729;
    let _e327: Motor = self_2031;
    let _e331: MultiVector = other_1729;
    let _e344: Motor = self_2031;
    let _e348: MultiVector = other_1729;
    let _e361: Motor = self_2031;
    let _e365: MultiVector = other_1729;
    let _e377: Motor = self_2031;
    let _e381: MultiVector = other_1729;
    let _e395: Motor = self_2031;
    let _e399: MultiVector = other_1729;
    let _e413: Motor = self_2031;
    let _e417: MultiVector = other_1729;
    let _e431: Motor = self_2031;
    let _e435: MultiVector = other_1729;
    let _e439: Motor = self_2031;
    let _e443: MultiVector = other_1729;
    let _e456: Motor = self_2031;
    let _e460: MultiVector = other_1729;
    let _e473: Motor = self_2031;
    let _e477: MultiVector = other_1729;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g3_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g3_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g3_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e68.g1_.x) * _e72.g0_)) + ((vec4<f32>(_e76.g1_.y) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e93.g1_.z) * _e97.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e110.g1_.w) * _e114.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e127.g0_.x) * _e131.g2_) + ((vec4<f32>(_e134.g0_.y) * _e138.g2_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e151.g0_.z) * _e155.g2_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e168.g0_.w) * _e172.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e185.g1_.x) * _e189.g1_)) + ((vec4<f32>(_e193.g1_.y) * _e197.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e210.g1_.z) * _e214.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e227.g1_.w) * _e231.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e244.g0_.x) * _e248.g1_) + ((vec4<f32>(_e251.g0_.y) * _e255.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e268.g0_.z) * _e272.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e285.g0_.w) * _e289.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e302.g1_.x) * _e306.g2_)) + ((vec4<f32>(_e310.g1_.y) * _e314.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e327.g1_.z) * _e331.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e344.g1_.w) * _e348.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((((vec4<f32>(_e361.g0_.x) * _e365.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e377.g0_.y) * _e381.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e395.g0_.z) * _e399.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e413.g0_.w) * _e417.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e431.g1_.x) * _e435.g3_)) + ((vec4<f32>(_e439.g1_.y) * _e443.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e456.g1_.z) * _e460.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e473.g1_.w) * _e477.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_multi_vector_inner_anti_product(self_2032: Motor, other_1730: MultiVector) -> MultiVector {
    var self_2033: Motor;
    var other_1731: MultiVector;

    self_2033 = self_2032;
    other_1731 = other_1730;
    let _e4: Motor = self_2033;
    let _e8: MultiVector = other_1731;
    let _e20: Motor = self_2033;
    let _e24: MultiVector = other_1731;
    let _e28: Motor = self_2033;
    let _e32: MultiVector = other_1731;
    let _e45: Motor = self_2033;
    let _e49: MultiVector = other_1731;
    let _e62: Motor = self_2033;
    let _e66: MultiVector = other_1731;
    let _e79: Motor = self_2033;
    let _e81: MultiVector = other_1731;
    let _e93: Motor = self_2033;
    let _e97: MultiVector = other_1731;
    let _e100: Motor = self_2033;
    let _e104: MultiVector = other_1731;
    let _e117: Motor = self_2033;
    let _e121: MultiVector = other_1731;
    let _e134: Motor = self_2033;
    let _e138: MultiVector = other_1731;
    let _e142: Motor = self_2033;
    let _e146: MultiVector = other_1731;
    let _e158: Motor = self_2033;
    let _e162: MultiVector = other_1731;
    let _e174: Motor = self_2033;
    let _e178: MultiVector = other_1731;
    let _e190: Motor = self_2033;
    let _e193: MultiVector = other_1731;
    let _e206: Motor = self_2033;
    let _e210: MultiVector = other_1731;
    let _e213: Motor = self_2033;
    let _e217: MultiVector = other_1731;
    let _e229: Motor = self_2033;
    let _e233: MultiVector = other_1731;
    let _e245: Motor = self_2033;
    let _e249: MultiVector = other_1731;
    let _e253: Motor = self_2033;
    let _e257: MultiVector = other_1731;
    let _e270: Motor = self_2033;
    let _e274: MultiVector = other_1731;
    let _e287: Motor = self_2033;
    let _e291: MultiVector = other_1731;
    let _e304: Motor = self_2033;
    let _e307: MultiVector = other_1731;
    let _e318: Motor = self_2033;
    let _e322: MultiVector = other_1731;
    let _e334: Motor = self_2033;
    let _e338: MultiVector = other_1731;
    let _e351: Motor = self_2033;
    let _e355: MultiVector = other_1731;
    let _e368: Motor = self_2033;
    let _e372: MultiVector = other_1731;
    let _e376: Motor = self_2033;
    let _e380: MultiVector = other_1731;
    let _e392: Motor = self_2033;
    let _e396: MultiVector = other_1731;
    let _e408: Motor = self_2033;
    let _e412: MultiVector = other_1731;
    let _e424: Motor = self_2033;
    let _e427: MultiVector = other_1731;
    return MultiVector((((((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + (vec4<f32>(_e20.g1_.x) * _e24.g0_)) + ((vec4<f32>(_e28.g1_.y) * vec4<f32>(_e32.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e45.g1_.z) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e62.g1_.w) * vec4<f32>(_e66.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e79.g0_ * vec4<f32>(_e81.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((vec4<f32>(_e93.g0_.x) * _e97.g2_) + ((vec4<f32>(_e100.g0_.z) * _e104.g2_.wwxy) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e117.g0_.w) * _e121.g2_.zzyx) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e134.g1_.x) * _e138.g1_)) + ((vec4<f32>(_e142.g1_.y) * _e146.g1_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e158.g1_.z) * _e162.g1_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e174.g1_.w) * _e178.g1_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e190.g0_.xyyy * _e193.g2_.xxwz) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))), ((((((((vec4<f32>(_e206.g0_.x) * _e210.g1_) + ((vec4<f32>(_e213.g0_.z) * vec4<f32>(_e217.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e229.g0_.w) * vec4<f32>(_e233.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (vec4<f32>(_e245.g1_.x) * _e249.g2_)) + ((vec4<f32>(_e253.g1_.y) * vec4<f32>(_e257.g2_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e270.g1_.z) * vec4<f32>(_e274.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e287.g1_.w) * vec4<f32>(_e291.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e304.g0_.yxxx * _e307.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e318.g0_.x) * _e322.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e334.g0_.z) * _e338.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e351.g0_.w) * _e355.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e368.g1_.x) * _e372.g3_)) + ((vec4<f32>(_e376.g1_.y) * _e380.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e392.g1_.z) * _e396.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e408.g1_.w) * _e412.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e424.g0_.yyxx * _e427.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn motor_multi_vector_left_contraction(self_2034: Motor, other_1732: MultiVector) -> MultiVector {
    var self_2035: Motor;
    var other_1733: MultiVector;

    self_2035 = self_2034;
    other_1733 = other_1732;
    let _e4: Motor = self_2035;
    let _e8: MultiVector = other_1733;
    let _e11: Motor = self_2035;
    let _e15: MultiVector = other_1733;
    let _e28: Motor = self_2035;
    let _e32: MultiVector = other_1733;
    let _e45: Motor = self_2035;
    let _e49: MultiVector = other_1733;
    let _e61: Motor = self_2035;
    let _e65: MultiVector = other_1733;
    let _e78: Motor = self_2035;
    let _e82: MultiVector = other_1733;
    let _e95: Motor = self_2035;
    let _e99: MultiVector = other_1733;
    let _e112: Motor = self_2035;
    let _e115: MultiVector = other_1733;
    let _e127: Motor = self_2035;
    let _e131: MultiVector = other_1733;
    let _e134: Motor = self_2035;
    let _e138: MultiVector = other_1733;
    let _e150: Motor = self_2035;
    let _e154: MultiVector = other_1733;
    let _e166: Motor = self_2035;
    let _e169: MultiVector = other_1733;
    let _e180: Motor = self_2035;
    let _e184: MultiVector = other_1733;
    let _e187: Motor = self_2035;
    let _e191: MultiVector = other_1733;
    let _e203: Motor = self_2035;
    let _e207: MultiVector = other_1733;
    let _e219: Motor = self_2035;
    let _e223: MultiVector = other_1733;
    let _e235: Motor = self_2035;
    let _e237: MultiVector = other_1733;
    let _e252: Motor = self_2035;
    let _e256: MultiVector = other_1733;
    let _e259: Motor = self_2035;
    let _e261: MultiVector = other_1733;
    return MultiVector(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e45.g1_.x) * vec4<f32>(_e49.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e61.g1_.y) * _e65.g3_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e78.g1_.z) * _e82.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e95.g1_.w) * _e99.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e112.g0_.yxxx * _e115.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), ((((vec4<f32>(_e127.g0_.x) * _e131.g1_) + ((vec4<f32>(_e134.g0_.z) * vec4<f32>(_e138.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e150.g0_.w) * vec4<f32>(_e154.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e166.g0_.yxxx * _e169.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((vec4<f32>(_e180.g0_.x) * _e184.g2_) + ((vec4<f32>(_e187.g1_.y) * _e191.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e203.g1_.z) * _e207.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e219.g1_.w) * _e223.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e235.g0_ * vec4<f32>(_e237.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((vec4<f32>(_e252.g0_.x) * _e256.g3_) + ((_e259.g0_ * vec4<f32>(_e261.g3_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_multi_vector_right_contraction(self_2036: Motor, other_1734: MultiVector) -> MultiVector {
    var self_2037: Motor;
    var other_1735: MultiVector;

    self_2037 = self_2036;
    other_1735 = other_1734;
    let _e4: Motor = self_2037;
    let _e8: MultiVector = other_1735;
    let _e19: Motor = self_2037;
    let _e23: MultiVector = other_1735;
    let _e35: Motor = self_2037;
    let _e39: MultiVector = other_1735;
    let _e51: Motor = self_2037;
    let _e55: MultiVector = other_1735;
    let _e68: Motor = self_2037;
    let _e72: MultiVector = other_1735;
    let _e85: Motor = self_2037;
    let _e89: MultiVector = other_1735;
    let _e102: Motor = self_2037;
    let _e106: MultiVector = other_1735;
    let _e119: Motor = self_2037;
    let _e123: MultiVector = other_1735;
    let _e137: Motor = self_2037;
    let _e141: MultiVector = other_1735;
    let _e145: Motor = self_2037;
    let _e149: MultiVector = other_1735;
    let _e161: Motor = self_2037;
    let _e165: MultiVector = other_1735;
    let _e177: Motor = self_2037;
    let _e180: MultiVector = other_1735;
    let _e191: Motor = self_2037;
    let _e195: MultiVector = other_1735;
    let _e206: Motor = self_2037;
    let _e210: MultiVector = other_1735;
    let _e222: Motor = self_2037;
    let _e226: MultiVector = other_1735;
    let _e230: Motor = self_2037;
    let _e234: MultiVector = other_1735;
    let _e247: Motor = self_2037;
    let _e251: MultiVector = other_1735;
    let _e264: Motor = self_2037;
    let _e267: Motor = self_2037;
    let _e270: Motor = self_2037;
    let _e273: Motor = self_2037;
    let _e277: MultiVector = other_1735;
    let _e280: MultiVector = other_1735;
    let _e283: MultiVector = other_1735;
    let _e286: MultiVector = other_1735;
    let _e300: Motor = self_2037;
    let _e304: MultiVector = other_1735;
    let _e316: Motor = self_2037;
    let _e318: MultiVector = other_1735;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.x) * _e55.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e68.g1_.y) * vec4<f32>(_e72.g3_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e85.g1_.z) * vec4<f32>(_e89.g3_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e102.g1_.w) * vec4<f32>(_e106.g3_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e119.g0_.x) * vec4<f32>(_e123.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((((vec4<f32>(0.0) - (vec4<f32>(_e137.g1_.x) * _e141.g2_)) + ((vec4<f32>(_e145.g1_.z) * vec4<f32>(_e149.g2_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e161.g1_.w) * vec4<f32>(_e165.g2_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e177.g1_.yxxx * _e180.g2_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((vec4<f32>(_e191.g0_.z) * _e195.g2_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e206.g0_.w) * _e210.g2_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) - (vec4<f32>(_e222.g1_.x) * _e226.g1_)) + ((vec4<f32>(_e230.g1_.z) * vec4<f32>(_e234.g1_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e247.g1_.w) * vec4<f32>(_e251.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e264.g0_.x, _e267.g1_.y, _e270.g0_.y, _e273.g0_.y) * vec4<f32>(_e277.g2_.x, _e280.g1_.x, _e283.g2_.w, _e286.g2_.z)) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))), (((vec4<f32>(_e300.g1_.x) * _e304.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e316.g1_ * vec4<f32>(_e318.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_multi_vector_left_anti_contraction(self_2038: Motor, other_1736: MultiVector) -> MultiVector {
    var self_2039: Motor;
    var other_1737: MultiVector;

    self_2039 = self_2038;
    other_1737 = other_1736;
    let _e4: Motor = self_2039;
    let _e8: MultiVector = other_1737;
    let _e11: Motor = self_2039;
    let _e13: MultiVector = other_1737;
    let _e28: Motor = self_2039;
    let _e32: MultiVector = other_1737;
    let _e43: Motor = self_2039;
    let _e47: MultiVector = other_1737;
    let _e59: Motor = self_2039;
    let _e63: MultiVector = other_1737;
    let _e67: Motor = self_2039;
    let _e71: MultiVector = other_1737;
    let _e83: Motor = self_2039;
    let _e87: MultiVector = other_1737;
    let _e99: Motor = self_2039;
    let _e102: Motor = self_2039;
    let _e105: Motor = self_2039;
    let _e108: Motor = self_2039;
    let _e112: MultiVector = other_1737;
    let _e115: MultiVector = other_1737;
    let _e118: MultiVector = other_1737;
    let _e121: MultiVector = other_1737;
    let _e134: Motor = self_2039;
    let _e138: MultiVector = other_1737;
    let _e141: Motor = self_2039;
    let _e145: MultiVector = other_1737;
    let _e158: Motor = self_2039;
    let _e162: MultiVector = other_1737;
    let _e175: Motor = self_2039;
    let _e178: MultiVector = other_1737;
    let _e190: Motor = self_2039;
    let _e194: MultiVector = other_1737;
    let _e206: Motor = self_2039;
    let _e210: MultiVector = other_1737;
    let _e223: Motor = self_2039;
    let _e227: MultiVector = other_1737;
    let _e240: Motor = self_2039;
    let _e244: MultiVector = other_1737;
    let _e248: Motor = self_2039;
    let _e252: MultiVector = other_1737;
    let _e265: Motor = self_2039;
    let _e269: MultiVector = other_1737;
    let _e282: Motor = self_2039;
    let _e286: MultiVector = other_1737;
    let _e299: Motor = self_2039;
    let _e303: MultiVector = other_1737;
    return MultiVector(((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((_e11.g1_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((vec4<f32>(_e28.g0_.z) * _e32.g2_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e43.g0_.w) * _e47.g2_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e59.g1_.x) * _e63.g1_)) + ((vec4<f32>(_e67.g1_.z) * vec4<f32>(_e71.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e83.g1_.w) * vec4<f32>(_e87.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e99.g0_.x, _e102.g1_.y, _e105.g0_.y, _e108.g0_.y) * vec4<f32>(_e112.g2_.x, _e115.g1_.x, _e118.g2_.w, _e121.g2_.z)) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))), ((((vec4<f32>(_e134.g1_.x) * _e138.g2_) + ((vec4<f32>(_e141.g1_.z) * vec4<f32>(_e145.g2_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e158.g1_.w) * vec4<f32>(_e162.g2_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e175.g1_.yxxx * _e178.g2_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e190.g0_.y) * _e194.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e206.g0_.z) * _e210.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e223.g0_.w) * _e227.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e240.g1_.x) * _e244.g3_)) + ((vec4<f32>(_e248.g1_.y) * vec4<f32>(_e252.g3_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e265.g1_.z) * vec4<f32>(_e269.g3_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e282.g1_.w) * vec4<f32>(_e286.g3_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e299.g0_.x) * vec4<f32>(_e303.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_multi_vector_right_anti_contraction(self_2040: Motor, other_1738: MultiVector) -> MultiVector {
    var self_2041: Motor;
    var other_1739: MultiVector;

    self_2041 = self_2040;
    other_1739 = other_1738;
    let _e4: Motor = self_2041;
    let _e8: MultiVector = other_1739;
    let _e20: Motor = self_2041;
    let _e22: MultiVector = other_1739;
    let _e34: Motor = self_2041;
    let _e38: MultiVector = other_1739;
    let _e41: Motor = self_2041;
    let _e45: MultiVector = other_1739;
    let _e57: Motor = self_2041;
    let _e61: MultiVector = other_1739;
    let _e73: Motor = self_2041;
    let _e77: MultiVector = other_1739;
    let _e89: Motor = self_2041;
    let _e91: MultiVector = other_1739;
    let _e106: Motor = self_2041;
    let _e110: MultiVector = other_1739;
    let _e113: Motor = self_2041;
    let _e117: MultiVector = other_1739;
    let _e129: Motor = self_2041;
    let _e133: MultiVector = other_1739;
    let _e145: Motor = self_2041;
    let _e148: MultiVector = other_1739;
    let _e159: Motor = self_2041;
    let _e163: MultiVector = other_1739;
    let _e175: Motor = self_2041;
    let _e179: MultiVector = other_1739;
    let _e192: Motor = self_2041;
    let _e196: MultiVector = other_1739;
    let _e209: Motor = self_2041;
    let _e213: MultiVector = other_1739;
    let _e225: Motor = self_2041;
    let _e229: MultiVector = other_1739;
    let _e241: Motor = self_2041;
    let _e245: MultiVector = other_1739;
    let _e257: Motor = self_2041;
    let _e261: MultiVector = other_1739;
    let _e273: Motor = self_2041;
    let _e276: MultiVector = other_1739;
    return MultiVector((((vec4<f32>(_e4.g0_.x) * _e8.g3_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g3_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e34.g0_.x) * _e38.g2_) + ((vec4<f32>(_e41.g1_.y) * _e45.g1_.wwwz) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e57.g1_.z) * _e61.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e73.g1_.w) * _e77.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e89.g0_ * vec4<f32>(_e91.g2_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), ((((vec4<f32>(_e106.g0_.x) * _e110.g1_) + ((vec4<f32>(_e113.g0_.z) * vec4<f32>(_e117.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e129.g0_.w) * vec4<f32>(_e133.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e145.g0_.yxxx * _e148.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((((((((vec4<f32>(_e159.g0_.x) * _e163.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e175.g0_.z) * vec4<f32>(_e179.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e192.g0_.w) * vec4<f32>(_e196.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e209.g1_.x) * vec4<f32>(_e213.g3_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e225.g1_.y) * _e229.g3_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e241.g1_.z) * _e245.g3_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e257.g1_.w) * _e261.g3_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e273.g0_.yxxx * _e276.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn motor_multi_vector_scalar_product(self_2042: Motor, other_1740: MultiVector) -> Scalar {
    var self_2043: Motor;
    var other_1741: MultiVector;

    self_2043 = self_2042;
    other_1741 = other_1740;
    let _e4: Motor = self_2043;
    let _e7: MultiVector = other_1741;
    let _e11: Motor = self_2043;
    let _e14: MultiVector = other_1741;
    let _e19: Motor = self_2043;
    let _e22: MultiVector = other_1741;
    let _e27: Motor = self_2043;
    let _e30: MultiVector = other_1741;
    let _e35: Motor = self_2043;
    let _e38: MultiVector = other_1741;
    let _e43: Motor = self_2043;
    let _e46: MultiVector = other_1741;
    let _e51: Motor = self_2043;
    let _e54: MultiVector = other_1741;
    let _e59: Motor = self_2043;
    let _e62: MultiVector = other_1741;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g1_.x * _e38.g3_.x)) - (_e43.g1_.y * _e46.g3_.y)) - (_e51.g1_.z * _e54.g3_.z)) - (_e59.g1_.w * _e62.g3_.w)));
}

fn motor_multi_vector_anti_scalar_product(self_2044: Motor, other_1742: MultiVector) -> AntiScalar {
    var self_2045: Motor;
    var other_1743: MultiVector;

    self_2045 = self_2044;
    other_1743 = other_1742;
    let _e4: Motor = self_2045;
    let _e7: MultiVector = other_1743;
    let _e11: Motor = self_2045;
    let _e14: MultiVector = other_1743;
    let _e19: Motor = self_2045;
    let _e22: MultiVector = other_1743;
    let _e27: Motor = self_2045;
    let _e30: MultiVector = other_1743;
    let _e35: Motor = self_2045;
    let _e38: MultiVector = other_1743;
    let _e43: Motor = self_2045;
    let _e46: MultiVector = other_1743;
    let _e51: Motor = self_2045;
    let _e54: MultiVector = other_1743;
    let _e59: Motor = self_2045;
    let _e62: MultiVector = other_1743;
    return AntiScalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g1_.x * _e38.g3_.x)) - (_e43.g1_.y * _e46.g3_.y)) - (_e51.g1_.z * _e54.g3_.z)) - (_e59.g1_.w * _e62.g3_.w)));
}

fn motor_rotor_into(self_2046: Motor) -> Rotor {
    var self_2047: Motor;

    self_2047 = self_2046;
    let _e2: Motor = self_2047;
    return Rotor(_e2.g0_);
}

fn motor_rotor_add(self_2048: Motor, other_1744: Rotor) -> Motor {
    var self_2049: Motor;
    var other_1745: Rotor;

    self_2049 = self_2048;
    other_1745 = other_1744;
    let _e4: Motor = self_2049;
    let _e6: Rotor = other_1745;
    let _e9: Motor = self_2049;
    return Motor((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn motor_rotor_sub(self_2050: Motor, other_1746: Rotor) -> Motor {
    var self_2051: Motor;
    var other_1747: Rotor;

    self_2051 = self_2050;
    other_1747 = other_1746;
    let _e4: Motor = self_2051;
    let _e6: Rotor = other_1747;
    let _e9: Motor = self_2051;
    return Motor((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn motor_rotor_geometric_product(self_2052: Motor, other_1748: Rotor) -> Motor {
    var self_2053: Motor;
    var other_1749: Rotor;

    self_2053 = self_2052;
    other_1749 = other_1748;
    let _e4: Motor = self_2053;
    let _e8: Rotor = other_1749;
    let _e11: Motor = self_2053;
    let _e15: Rotor = other_1749;
    let _e28: Motor = self_2053;
    let _e32: Rotor = other_1749;
    let _e45: Motor = self_2053;
    let _e49: Rotor = other_1749;
    let _e62: Motor = self_2053;
    let _e66: Rotor = other_1749;
    let _e78: Motor = self_2053;
    let _e82: Rotor = other_1749;
    let _e94: Motor = self_2053;
    let _e98: Rotor = other_1749;
    let _e110: Motor = self_2053;
    let _e114: Rotor = other_1749;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((vec4<f32>(_e62.g1_.x) * _e66.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e78.g1_.y) * _e82.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e94.g1_.z) * _e98.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e110.g1_.w) * _e114.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn motor_rotor_regressive_product(self_2054: Motor, other_1750: Rotor) -> Rotor {
    var self_2055: Motor;
    var other_1751: Rotor;

    self_2055 = self_2054;
    other_1751 = other_1750;
    let _e4: Motor = self_2055;
    let _e8: Rotor = other_1751;
    let _e11: Motor = self_2055;
    let _e15: Rotor = other_1751;
    let _e27: Motor = self_2055;
    let _e31: Rotor = other_1751;
    let _e43: Motor = self_2055;
    let _e46: Rotor = other_1751;
    return Rotor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((vec4<f32>(_e11.g1_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e27.g1_.w) * vec4<f32>(_e31.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e43.g1_.yxxx * _e46.g0_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_rotor_outer_product(self_2056: Motor, other_1752: Rotor) -> Motor {
    var self_2057: Motor;
    var other_1753: Rotor;

    self_2057 = self_2056;
    other_1753 = other_1752;
    let _e4: Motor = self_2057;
    let _e8: Rotor = other_1753;
    let _e11: Motor = self_2057;
    let _e13: Rotor = other_1753;
    let _e25: Motor = self_2057;
    let _e29: Rotor = other_1753;
    let _e39: Motor = self_2057;
    let _e43: Rotor = other_1753;
    let _e54: Motor = self_2057;
    let _e58: Rotor = other_1753;
    let _e69: Motor = self_2057;
    let _e73: Rotor = other_1753;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((vec4<f32>(_e25.g1_.y) * _e29.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e39.g1_.z) * _e43.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e54.g1_.w) * _e58.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e69.g1_.x) * vec4<f32>(_e73.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_rotor_inner_product(self_2058: Motor, other_1754: Rotor) -> Motor {
    var self_2059: Motor;
    var other_1755: Rotor;

    self_2059 = self_2058;
    other_1755 = other_1754;
    let _e4: Motor = self_2059;
    let _e8: Rotor = other_1755;
    let _e11: Motor = self_2059;
    let _e15: Rotor = other_1755;
    let _e27: Motor = self_2059;
    let _e31: Rotor = other_1755;
    let _e43: Motor = self_2059;
    let _e46: Rotor = other_1755;
    let _e58: Motor = self_2059;
    let _e62: Rotor = other_1755;
    let _e74: Motor = self_2059;
    let _e76: Rotor = other_1755;
    return Motor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e43.g0_.yyxx * _e46.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), (((vec4<f32>(_e58.g1_.x) * _e62.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e74.g1_ * vec4<f32>(_e76.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_rotor_geometric_anti_product(self_2060: Motor, other_1756: Rotor) -> Motor {
    var self_2061: Motor;
    var other_1757: Rotor;

    self_2061 = self_2060;
    other_1757 = other_1756;
    let _e4: Motor = self_2061;
    let _e8: Rotor = other_1757;
    let _e11: Motor = self_2061;
    let _e15: Rotor = other_1757;
    let _e28: Motor = self_2061;
    let _e32: Rotor = other_1757;
    let _e45: Motor = self_2061;
    let _e49: Rotor = other_1757;
    let _e62: Motor = self_2061;
    let _e66: Rotor = other_1757;
    let _e78: Motor = self_2061;
    let _e82: Rotor = other_1757;
    let _e96: Motor = self_2061;
    let _e100: Rotor = other_1757;
    let _e114: Motor = self_2061;
    let _e118: Rotor = other_1757;
    return Motor(((((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((vec4<f32>(_e11.g1_.y) * _e15.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e28.g1_.z) * _e32.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e45.g1_.w) * _e49.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((vec4<f32>(_e62.g0_.x) * _e66.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e78.g0_.y) * _e82.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e96.g0_.z) * _e100.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e114.g0_.w) * _e118.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))));
}

fn motor_rotor_inner_anti_product(self_2062: Motor, other_1758: Rotor) -> Motor {
    var self_2063: Motor;
    var other_1759: Rotor;

    self_2063 = self_2062;
    other_1759 = other_1758;
    let _e4: Motor = self_2063;
    let _e8: Rotor = other_1759;
    let _e11: Motor = self_2063;
    let _e13: Rotor = other_1759;
    let _e28: Motor = self_2063;
    let _e32: Rotor = other_1759;
    let _e44: Motor = self_2063;
    let _e48: Rotor = other_1759;
    let _e61: Motor = self_2063;
    let _e65: Rotor = other_1759;
    let _e78: Motor = self_2063;
    let _e81: Rotor = other_1759;
    return Motor(((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((_e11.g1_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e28.g0_.x) * _e32.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e44.g0_.z) * _e48.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e61.g0_.w) * _e65.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e78.g0_.yyxx * _e81.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn motor_rotor_left_contraction(self_2064: Motor, other_1760: Rotor) -> Rotor {
    var self_2065: Motor;
    var other_1761: Rotor;

    self_2065 = self_2064;
    other_1761 = other_1760;
    let _e4: Motor = self_2065;
    let _e8: Rotor = other_1761;
    let _e11: Motor = self_2065;
    let _e15: Rotor = other_1761;
    let _e28: Motor = self_2065;
    let _e32: Rotor = other_1761;
    let _e45: Motor = self_2065;
    let _e48: Rotor = other_1761;
    return Rotor(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g0_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn motor_rotor_right_contraction(self_2066: Motor, other_1762: Rotor) -> Motor {
    var self_2067: Motor;
    var other_1763: Rotor;

    self_2067 = self_2066;
    other_1763 = other_1762;
    let _e4: Motor = self_2067;
    let _e8: Rotor = other_1763;
    let _e19: Motor = self_2067;
    let _e23: Rotor = other_1763;
    let _e35: Motor = self_2067;
    let _e39: Rotor = other_1763;
    let _e51: Motor = self_2067;
    let _e55: Rotor = other_1763;
    let _e67: Motor = self_2067;
    let _e71: Rotor = other_1763;
    let _e83: Motor = self_2067;
    let _e85: Rotor = other_1763;
    return Motor((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g0_.x) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((vec4<f32>(_e67.g1_.x) * _e71.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e83.g1_ * vec4<f32>(_e85.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_rotor_left_anti_contraction(self_2068: Motor, other_1764: Rotor) -> Motor {
    var self_2069: Motor;
    var other_1765: Rotor;

    self_2069 = self_2068;
    other_1765 = other_1764;
    let _e4: Motor = self_2069;
    let _e8: Rotor = other_1765;
    let _e11: Motor = self_2069;
    let _e13: Rotor = other_1765;
    let _e28: Motor = self_2069;
    let _e32: Rotor = other_1765;
    let _e44: Motor = self_2069;
    let _e48: Rotor = other_1765;
    let _e61: Motor = self_2069;
    let _e65: Rotor = other_1765;
    let _e78: Motor = self_2069;
    let _e82: Rotor = other_1765;
    return Motor(((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((_e11.g1_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e28.g0_.y) * _e32.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e44.g0_.z) * _e48.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e61.g0_.w) * _e65.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e78.g0_.x) * vec4<f32>(_e82.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_rotor_scalar_product(self_2070: Motor, other_1766: Rotor) -> Scalar {
    var self_2071: Motor;
    var other_1767: Rotor;

    self_2071 = self_2070;
    other_1767 = other_1766;
    let _e4: Motor = self_2071;
    let _e7: Rotor = other_1767;
    let _e11: Motor = self_2071;
    let _e14: Rotor = other_1767;
    let _e19: Motor = self_2071;
    let _e22: Rotor = other_1767;
    let _e27: Motor = self_2071;
    let _e30: Rotor = other_1767;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn motor_rotor_anti_scalar_product(self_2072: Motor, other_1768: Rotor) -> AntiScalar {
    var self_2073: Motor;
    var other_1769: Rotor;

    self_2073 = self_2072;
    other_1769 = other_1768;
    let _e4: Motor = self_2073;
    let _e7: Rotor = other_1769;
    let _e11: Motor = self_2073;
    let _e14: Rotor = other_1769;
    let _e19: Motor = self_2073;
    let _e22: Rotor = other_1769;
    let _e27: Motor = self_2073;
    let _e30: Rotor = other_1769;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)));
}

fn motor_point_geometric_product(self_2074: Motor, other_1770: Point) -> PointAndPlane {
    var self_2075: Motor;
    var other_1771: Point;

    self_2075 = self_2074;
    other_1771 = other_1770;
    let _e4: Motor = self_2075;
    let _e8: Point = other_1771;
    let _e11: Motor = self_2075;
    let _e15: Point = other_1771;
    let _e27: Motor = self_2075;
    let _e31: Point = other_1771;
    let _e43: Motor = self_2075;
    let _e47: Point = other_1771;
    let _e59: Motor = self_2075;
    let _e63: Point = other_1771;
    let _e75: Motor = self_2075;
    let _e78: Motor = self_2075;
    let _e81: Motor = self_2075;
    let _e84: Motor = self_2075;
    let _e88: Point = other_1771;
    let _e101: Motor = self_2075;
    let _e105: Point = other_1771;
    let _e116: Motor = self_2075;
    let _e120: Point = other_1771;
    let _e132: Motor = self_2075;
    let _e136: Point = other_1771;
    let _e140: Motor = self_2075;
    let _e144: Point = other_1771;
    let _e156: Motor = self_2075;
    let _e160: Point = other_1771;
    let _e172: Motor = self_2075;
    let _e175: Motor = self_2075;
    let _e178: Motor = self_2075;
    let _e181: Motor = self_2075;
    let _e185: Point = other_1771;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e75.g1_.y, _e78.g1_.y, _e81.g0_.y, _e84.g0_.y) * _e88.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e101.g0_.z) * _e105.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e116.g0_.w) * _e120.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) - (vec4<f32>(_e132.g1_.x) * _e136.g0_)) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e156.g1_.w) * _e160.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e172.g0_.y, _e175.g0_.y, _e178.g1_.y, _e181.g1_.y) * _e185.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_point_regressive_product(self_2076: Motor, other_1772: Point) -> PointAndPlane {
    var self_2077: Motor;
    var other_1773: Point;

    self_2077 = self_2076;
    other_1773 = other_1772;
    let _e4: Motor = self_2077;
    let _e8: Point = other_1773;
    let _e11: Motor = self_2077;
    let _e15: Point = other_1773;
    let _e26: Motor = self_2077;
    let _e30: Point = other_1773;
    let _e42: Motor = self_2077;
    let _e46: Point = other_1773;
    let _e58: Motor = self_2077;
    let _e62: Point = other_1773;
    let _e74: Motor = self_2077;
    let _e77: Motor = self_2077;
    let _e80: Motor = self_2077;
    let _e83: Motor = self_2077;
    let _e87: Point = other_1773;
    return PointAndPlane((vec4<f32>(_e4.g1_.x) * _e8.g0_), ((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e42.g1_.z) * _e46.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e58.g1_.w) * _e62.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e74.g1_.y, _e77.g1_.y, _e80.g0_.y, _e83.g0_.y) * _e87.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_point_outer_product(self_2078: Motor, other_1774: Point) -> Point {
    var self_2079: Motor;
    var other_1775: Point;

    self_2079 = self_2078;
    other_1775 = other_1774;
    let _e4: Motor = self_2079;
    let _e8: Point = other_1775;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn motor_point_inner_product(self_2080: Motor, other_1776: Point) -> PointAndPlane {
    var self_2081: Motor;
    var other_1777: Point;

    self_2081 = self_2080;
    other_1777 = other_1776;
    let _e4: Motor = self_2081;
    let _e8: Point = other_1777;
    let _e11: Motor = self_2081;
    let _e15: Point = other_1777;
    let _e26: Motor = self_2081;
    let _e30: Point = other_1777;
    let _e42: Motor = self_2081;
    let _e46: Point = other_1777;
    let _e50: Motor = self_2081;
    let _e54: Point = other_1777;
    let _e66: Motor = self_2081;
    let _e70: Point = other_1777;
    let _e82: Motor = self_2081;
    let _e85: Motor = self_2081;
    let _e88: Motor = self_2081;
    let _e91: Motor = self_2081;
    let _e95: Point = other_1777;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), (((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) - (vec4<f32>(_e42.g1_.x) * _e46.g0_)) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e66.g1_.w) * _e70.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e82.g0_.y, _e85.g0_.y, _e88.g1_.y, _e91.g1_.y) * _e95.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_point_geometric_anti_product(self_2082: Motor, other_1778: Point) -> PointAndPlane {
    var self_2083: Motor;
    var other_1779: Point;

    self_2083 = self_2082;
    other_1779 = other_1778;
    let _e4: Motor = self_2083;
    let _e8: Point = other_1779;
    let _e19: Motor = self_2083;
    let _e23: Point = other_1779;
    let _e35: Motor = self_2083;
    let _e39: Point = other_1779;
    let _e43: Motor = self_2083;
    let _e47: Point = other_1779;
    let _e59: Motor = self_2083;
    let _e63: Point = other_1779;
    let _e75: Motor = self_2083;
    let _e78: Motor = self_2083;
    let _e81: Motor = self_2083;
    let _e84: Motor = self_2083;
    let _e88: Point = other_1779;
    let _e101: Motor = self_2083;
    let _e105: Point = other_1779;
    let _e108: Motor = self_2083;
    let _e112: Point = other_1779;
    let _e124: Motor = self_2083;
    let _e128: Point = other_1779;
    let _e140: Motor = self_2083;
    let _e144: Point = other_1779;
    let _e156: Motor = self_2083;
    let _e160: Point = other_1779;
    let _e172: Motor = self_2083;
    let _e175: Motor = self_2083;
    let _e178: Motor = self_2083;
    let _e181: Motor = self_2083;
    let _e185: Point = other_1779;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e35.g1_.x) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e101.g0_.x) * _e105.g0_) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e124.g0_.w) * _e128.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e156.g1_.w) * _e160.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e172.g1_.y, _e175.g1_.y, _e178.g0_.y, _e181.g0_.y) * _e185.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_point_inner_anti_product(self_2084: Motor, other_1780: Point) -> PointAndPlane {
    var self_2085: Motor;
    var other_1781: Point;

    self_2085 = self_2084;
    other_1781 = other_1780;
    let _e4: Motor = self_2085;
    let _e8: Point = other_1781;
    let _e19: Motor = self_2085;
    let _e23: Point = other_1781;
    let _e35: Motor = self_2085;
    let _e39: Point = other_1781;
    let _e43: Motor = self_2085;
    let _e47: Point = other_1781;
    let _e59: Motor = self_2085;
    let _e63: Point = other_1781;
    let _e75: Motor = self_2085;
    let _e78: Motor = self_2085;
    let _e81: Motor = self_2085;
    let _e84: Motor = self_2085;
    let _e88: Point = other_1781;
    let _e101: Motor = self_2085;
    let _e105: Point = other_1781;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e35.g1_.x) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e101.g0_.x) * _e105.g0_));
}

fn motor_point_left_contraction(self_2086: Motor, other_1782: Point) -> PointAndPlane {
    var self_2087: Motor;
    var other_1783: Point;

    self_2087 = self_2086;
    other_1783 = other_1782;
    let _e4: Motor = self_2087;
    let _e8: Point = other_1783;
    let _e11: Motor = self_2087;
    let _e15: Point = other_1783;
    let _e26: Motor = self_2087;
    let _e30: Point = other_1783;
    let _e42: Motor = self_2087;
    let _e46: Point = other_1783;
    let _e58: Motor = self_2087;
    let _e62: Point = other_1783;
    let _e74: Motor = self_2087;
    let _e77: Motor = self_2087;
    let _e80: Motor = self_2087;
    let _e83: Motor = self_2087;
    let _e87: Point = other_1783;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e42.g1_.z) * _e46.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e58.g1_.w) * _e62.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e74.g0_.y, _e77.g0_.y, _e80.g1_.y, _e83.g1_.y) * _e87.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_point_right_contraction(self_2088: Motor, other_1784: Point) -> Plane {
    var self_2089: Motor;
    var other_1785: Point;

    self_2089 = self_2088;
    other_1785 = other_1784;
    let _e6: Motor = self_2089;
    let _e10: Point = other_1785;
    return Plane((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.x) * _e10.g0_)));
}

fn motor_point_left_anti_contraction(self_2090: Motor, other_1786: Point) -> Point {
    var self_2091: Motor;
    var other_1787: Point;

    self_2091 = self_2090;
    other_1787 = other_1786;
    let _e4: Motor = self_2091;
    let _e8: Point = other_1787;
    return Point((vec4<f32>(_e4.g1_.x) * _e8.g0_));
}

fn motor_point_right_anti_contraction(self_2092: Motor, other_1788: Point) -> PointAndPlane {
    var self_2093: Motor;
    var other_1789: Point;

    self_2093 = self_2092;
    other_1789 = other_1788;
    let _e4: Motor = self_2093;
    let _e8: Point = other_1789;
    let _e19: Motor = self_2093;
    let _e23: Point = other_1789;
    let _e35: Motor = self_2093;
    let _e39: Point = other_1789;
    let _e51: Motor = self_2093;
    let _e55: Point = other_1789;
    let _e67: Motor = self_2093;
    let _e70: Motor = self_2093;
    let _e73: Motor = self_2093;
    let _e76: Motor = self_2093;
    let _e80: Point = other_1789;
    let _e93: Motor = self_2093;
    let _e97: Point = other_1789;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.w) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.y, _e70.g0_.y, _e73.g1_.y, _e76.g1_.y) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e93.g0_.x) * _e97.g0_));
}

fn motor_ideal_point_into(self_2094: Motor) -> IdealPoint {
    var self_2095: Motor;

    self_2095 = self_2094;
    let _e2: Motor = self_2095;
    let _e5: Motor = self_2095;
    let _e8: Motor = self_2095;
    return IdealPoint(vec3<f32>(_e2.g1_.y, _e5.g1_.z, _e8.g1_.w));
}

fn motor_ideal_point_add(self_2096: Motor, other_1790: IdealPoint) -> Motor {
    var self_2097: Motor;
    var other_1791: IdealPoint;

    self_2097 = self_2096;
    other_1791 = other_1790;
    let _e4: Motor = self_2097;
    let _e6: Motor = self_2097;
    let _e8: IdealPoint = other_1791;
    let _e11: IdealPoint = other_1791;
    let _e14: IdealPoint = other_1791;
    let _e17: IdealPoint = other_1791;
    return Motor(_e4.g0_, (_e6.g1_ + (vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.y, _e17.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_ideal_point_sub(self_2098: Motor, other_1792: IdealPoint) -> Motor {
    var self_2099: Motor;
    var other_1793: IdealPoint;

    self_2099 = self_2098;
    other_1793 = other_1792;
    let _e4: Motor = self_2099;
    let _e6: Motor = self_2099;
    let _e8: IdealPoint = other_1793;
    let _e11: IdealPoint = other_1793;
    let _e14: IdealPoint = other_1793;
    let _e17: IdealPoint = other_1793;
    return Motor(_e4.g0_, (_e6.g1_ - (vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.y, _e17.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_ideal_point_geometric_product(self_2100: Motor, other_1794: IdealPoint) -> Motor {
    var self_2101: Motor;
    var other_1795: IdealPoint;

    self_2101 = self_2100;
    other_1795 = other_1794;
    let _e4: Motor = self_2101;
    let _e8: IdealPoint = other_1795;
    let _e11: IdealPoint = other_1795;
    let _e14: IdealPoint = other_1795;
    let _e17: IdealPoint = other_1795;
    let _e30: Motor = self_2101;
    let _e34: IdealPoint = other_1795;
    let _e37: IdealPoint = other_1795;
    let _e40: IdealPoint = other_1795;
    let _e43: IdealPoint = other_1795;
    let _e57: Motor = self_2101;
    let _e61: IdealPoint = other_1795;
    let _e64: IdealPoint = other_1795;
    let _e67: IdealPoint = other_1795;
    let _e70: IdealPoint = other_1795;
    let _e84: Motor = self_2101;
    let _e88: IdealPoint = other_1795;
    let _e91: IdealPoint = other_1795;
    let _e94: IdealPoint = other_1795;
    let _e97: IdealPoint = other_1795;
    let _e112: Motor = self_2101;
    let _e116: IdealPoint = other_1795;
    let _e119: IdealPoint = other_1795;
    let _e122: IdealPoint = other_1795;
    let _e125: IdealPoint = other_1795;
    let _e137: Motor = self_2101;
    let _e141: IdealPoint = other_1795;
    let _e144: IdealPoint = other_1795;
    let _e147: IdealPoint = other_1795;
    let _e150: IdealPoint = other_1795;
    let _e163: Motor = self_2101;
    let _e167: IdealPoint = other_1795;
    let _e170: IdealPoint = other_1795;
    let _e173: IdealPoint = other_1795;
    let _e176: IdealPoint = other_1795;
    let _e189: Motor = self_2101;
    let _e193: IdealPoint = other_1795;
    let _e196: IdealPoint = other_1795;
    let _e199: IdealPoint = other_1795;
    let _e202: IdealPoint = other_1795;
    return Motor((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g0_.y, _e37.g0_.z, _e40.g0_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.z, _e64.g0_.y, _e67.g0_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e112.g0_.y) * vec4<f32>(_e116.g0_.x, _e119.g0_.x, _e122.g0_.z, _e125.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e137.g0_.z) * vec4<f32>(_e141.g0_.y, _e144.g0_.z, _e147.g0_.y, _e150.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e163.g0_.w) * vec4<f32>(_e167.g0_.z, _e170.g0_.y, _e173.g0_.x, _e176.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g0_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_ideal_point_regressive_product(self_2102: Motor, other_1796: IdealPoint) -> Translator {
    var self_2103: Motor;
    var other_1797: IdealPoint;

    self_2103 = self_2102;
    other_1797 = other_1796;
    let _e4: Motor = self_2103;
    let _e8: IdealPoint = other_1797;
    let _e19: Motor = self_2103;
    let _e23: IdealPoint = other_1797;
    let _e35: Motor = self_2103;
    let _e38: Motor = self_2103;
    let _e41: Motor = self_2103;
    let _e44: Motor = self_2103;
    let _e48: IdealPoint = other_1797;
    let _e51: IdealPoint = other_1797;
    let _e54: IdealPoint = other_1797;
    let _e57: IdealPoint = other_1797;
    return Translator(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * vec4<f32>(_e23.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (vec4<f32>(_e35.g0_.y, _e38.g1_.x, _e41.g1_.x, _e44.g1_.x) * vec4<f32>(_e48.g0_.x, _e51.g0_.x, _e54.g0_.y, _e57.g0_.z))));
}

fn motor_ideal_point_geometric_anti_product(self_2104: Motor, other_1798: IdealPoint) -> Motor {
    var self_2105: Motor;
    var other_1799: IdealPoint;

    self_2105 = self_2104;
    other_1799 = other_1798;
    let _e4: Motor = self_2105;
    let _e8: IdealPoint = other_1799;
    let _e11: IdealPoint = other_1799;
    let _e14: IdealPoint = other_1799;
    let _e17: IdealPoint = other_1799;
    let _e29: Motor = self_2105;
    let _e33: IdealPoint = other_1799;
    let _e36: IdealPoint = other_1799;
    let _e39: IdealPoint = other_1799;
    let _e42: IdealPoint = other_1799;
    let _e55: Motor = self_2105;
    let _e59: IdealPoint = other_1799;
    let _e62: IdealPoint = other_1799;
    let _e65: IdealPoint = other_1799;
    let _e68: IdealPoint = other_1799;
    let _e81: Motor = self_2105;
    let _e85: IdealPoint = other_1799;
    let _e88: IdealPoint = other_1799;
    let _e91: IdealPoint = other_1799;
    let _e94: IdealPoint = other_1799;
    let _e109: Motor = self_2105;
    let _e113: IdealPoint = other_1799;
    let _e116: IdealPoint = other_1799;
    let _e119: IdealPoint = other_1799;
    let _e122: IdealPoint = other_1799;
    let _e135: Motor = self_2105;
    let _e139: IdealPoint = other_1799;
    let _e142: IdealPoint = other_1799;
    let _e145: IdealPoint = other_1799;
    let _e148: IdealPoint = other_1799;
    let _e162: Motor = self_2105;
    let _e166: IdealPoint = other_1799;
    let _e169: IdealPoint = other_1799;
    let _e172: IdealPoint = other_1799;
    let _e175: IdealPoint = other_1799;
    let _e189: Motor = self_2105;
    let _e193: IdealPoint = other_1799;
    let _e196: IdealPoint = other_1799;
    let _e199: IdealPoint = other_1799;
    let _e202: IdealPoint = other_1799;
    return Motor((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g0_.z, _e122.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e135.g1_.z) * vec4<f32>(_e139.g0_.y, _e142.g0_.z, _e145.g0_.y, _e148.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e162.g1_.w) * vec4<f32>(_e166.g0_.z, _e169.g0_.y, _e172.g0_.x, _e175.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e189.g1_.x) * vec4<f32>(_e193.g0_.x, _e196.g0_.x, _e199.g0_.y, _e202.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_ideal_point_left_contraction(self_2106: Motor, other_1800: IdealPoint) -> Translator {
    var self_2107: Motor;
    var other_1801: IdealPoint;

    self_2107 = self_2106;
    other_1801 = other_1800;
    let _e4: Motor = self_2107;
    let _e8: IdealPoint = other_1801;
    let _e20: Motor = self_2107;
    let _e24: IdealPoint = other_1801;
    let _e37: Motor = self_2107;
    let _e40: Motor = self_2107;
    let _e43: Motor = self_2107;
    let _e46: Motor = self_2107;
    let _e50: IdealPoint = other_1801;
    let _e53: IdealPoint = other_1801;
    let _e56: IdealPoint = other_1801;
    let _e59: IdealPoint = other_1801;
    return Translator(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.y, _e40.g0_.x, _e43.g0_.x, _e46.g0_.x) * vec4<f32>(_e50.g0_.x, _e53.g0_.x, _e56.g0_.y, _e59.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn motor_ideal_point_right_contraction(self_2108: Motor, other_1802: IdealPoint) -> Rotor {
    var self_2109: Motor;
    var other_1803: IdealPoint;

    self_2109 = self_2108;
    other_1803 = other_1802;
    let _e4: Motor = self_2109;
    let _e8: IdealPoint = other_1803;
    let _e20: Motor = self_2109;
    let _e24: IdealPoint = other_1803;
    let _e37: Motor = self_2109;
    let _e40: IdealPoint = other_1803;
    let _e43: IdealPoint = other_1803;
    let _e46: IdealPoint = other_1803;
    let _e49: IdealPoint = other_1803;
    return Rotor(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g1_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0)))));
}

fn motor_ideal_point_scalar_product(self_2110: Motor, other_1804: IdealPoint) -> Scalar {
    var self_2111: Motor;
    var other_1805: IdealPoint;

    self_2111 = self_2110;
    other_1805 = other_1804;
    let _e5: Motor = self_2111;
    let _e8: IdealPoint = other_1805;
    let _e13: Motor = self_2111;
    let _e16: IdealPoint = other_1805;
    let _e21: Motor = self_2111;
    let _e24: IdealPoint = other_1805;
    return Scalar((((0.0 - (_e5.g1_.y * _e8.g0_.x)) - (_e13.g1_.z * _e16.g0_.y)) - (_e21.g1_.w * _e24.g0_.z)));
}

fn motor_ideal_point_anti_scalar_product(self_2112: Motor, other_1806: IdealPoint) -> AntiScalar {
    var self_2113: Motor;
    var other_1807: IdealPoint;

    self_2113 = self_2112;
    other_1807 = other_1806;
    let _e5: Motor = self_2113;
    let _e8: IdealPoint = other_1807;
    let _e13: Motor = self_2113;
    let _e16: IdealPoint = other_1807;
    let _e21: Motor = self_2113;
    let _e24: IdealPoint = other_1807;
    return AntiScalar((((0.0 - (_e5.g1_.y * _e8.g0_.x)) - (_e13.g1_.z * _e16.g0_.y)) - (_e21.g1_.w * _e24.g0_.z)));
}

fn motor_plane_geometric_product(self_2114: Motor, other_1808: Plane) -> PointAndPlane {
    var self_2115: Motor;
    var other_1809: Plane;

    self_2115 = self_2114;
    other_1809 = other_1808;
    let _e4: Motor = self_2115;
    let _e8: Plane = other_1809;
    let _e19: Motor = self_2115;
    let _e23: Plane = other_1809;
    let _e35: Motor = self_2115;
    let _e39: Plane = other_1809;
    let _e43: Motor = self_2115;
    let _e47: Plane = other_1809;
    let _e59: Motor = self_2115;
    let _e63: Plane = other_1809;
    let _e75: Motor = self_2115;
    let _e78: Motor = self_2115;
    let _e81: Motor = self_2115;
    let _e84: Motor = self_2115;
    let _e88: Plane = other_1809;
    let _e101: Motor = self_2115;
    let _e105: Plane = other_1809;
    let _e108: Motor = self_2115;
    let _e112: Plane = other_1809;
    let _e124: Motor = self_2115;
    let _e128: Plane = other_1809;
    let _e140: Motor = self_2115;
    let _e144: Plane = other_1809;
    let _e156: Motor = self_2115;
    let _e160: Plane = other_1809;
    let _e172: Motor = self_2115;
    let _e175: Motor = self_2115;
    let _e178: Motor = self_2115;
    let _e181: Motor = self_2115;
    let _e185: Plane = other_1809;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) - (vec4<f32>(_e35.g1_.x) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), ((((((vec4<f32>(_e101.g0_.x) * _e105.g0_) + ((vec4<f32>(_e108.g0_.z) * _e112.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e124.g0_.w) * _e128.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e156.g1_.w) * _e160.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e172.g1_.y, _e175.g1_.y, _e178.g0_.y, _e181.g0_.y) * _e185.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_plane_regressive_product(self_2116: Motor, other_1810: Plane) -> Plane {
    var self_2117: Motor;
    var other_1811: Plane;

    self_2117 = self_2116;
    other_1811 = other_1810;
    let _e4: Motor = self_2117;
    let _e8: Plane = other_1811;
    return Plane((vec4<f32>(_e4.g1_.x) * _e8.g0_));
}

fn motor_plane_outer_product(self_2118: Motor, other_1812: Plane) -> PointAndPlane {
    var self_2119: Motor;
    var other_1813: Plane;

    self_2119 = self_2118;
    other_1813 = other_1812;
    let _e4: Motor = self_2119;
    let _e8: Plane = other_1813;
    let _e19: Motor = self_2119;
    let _e23: Plane = other_1813;
    let _e35: Motor = self_2119;
    let _e39: Plane = other_1813;
    let _e51: Motor = self_2119;
    let _e55: Plane = other_1813;
    let _e67: Motor = self_2119;
    let _e70: Motor = self_2119;
    let _e73: Motor = self_2119;
    let _e76: Motor = self_2119;
    let _e80: Plane = other_1813;
    let _e93: Motor = self_2119;
    let _e97: Plane = other_1813;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.w) * _e55.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g0_.y, _e70.g0_.y, _e73.g1_.y, _e76.g1_.y) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e93.g0_.x) * _e97.g0_));
}

fn motor_plane_inner_product(self_2120: Motor, other_1814: Plane) -> PointAndPlane {
    var self_2121: Motor;
    var other_1815: Plane;

    self_2121 = self_2120;
    other_1815 = other_1814;
    let _e6: Motor = self_2121;
    let _e10: Plane = other_1815;
    let _e14: Motor = self_2121;
    let _e18: Plane = other_1815;
    let _e21: Motor = self_2121;
    let _e25: Plane = other_1815;
    let _e37: Motor = self_2121;
    let _e41: Plane = other_1815;
    let _e53: Motor = self_2121;
    let _e57: Plane = other_1815;
    let _e69: Motor = self_2121;
    let _e73: Plane = other_1815;
    let _e85: Motor = self_2121;
    let _e88: Motor = self_2121;
    let _e91: Motor = self_2121;
    let _e94: Motor = self_2121;
    let _e98: Plane = other_1815;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.x) * _e10.g0_)), ((((((vec4<f32>(_e14.g0_.x) * _e18.g0_) + ((vec4<f32>(_e21.g0_.z) * _e25.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e37.g0_.w) * _e41.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e53.g1_.z) * _e57.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e69.g1_.w) * _e73.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e85.g1_.y, _e88.g1_.y, _e91.g0_.y, _e94.g0_.y) * _e98.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_plane_geometric_anti_product(self_2122: Motor, other_1816: Plane) -> PointAndPlane {
    var self_2123: Motor;
    var other_1817: Plane;

    self_2123 = self_2122;
    other_1817 = other_1816;
    let _e4: Motor = self_2123;
    let _e8: Plane = other_1817;
    let _e11: Motor = self_2123;
    let _e15: Plane = other_1817;
    let _e27: Motor = self_2123;
    let _e31: Plane = other_1817;
    let _e43: Motor = self_2123;
    let _e47: Plane = other_1817;
    let _e59: Motor = self_2123;
    let _e63: Plane = other_1817;
    let _e75: Motor = self_2123;
    let _e78: Motor = self_2123;
    let _e81: Motor = self_2123;
    let _e84: Motor = self_2123;
    let _e88: Plane = other_1817;
    let _e101: Motor = self_2123;
    let _e105: Plane = other_1817;
    let _e116: Motor = self_2123;
    let _e120: Plane = other_1817;
    let _e132: Motor = self_2123;
    let _e136: Plane = other_1817;
    let _e140: Motor = self_2123;
    let _e144: Plane = other_1817;
    let _e156: Motor = self_2123;
    let _e160: Plane = other_1817;
    let _e172: Motor = self_2123;
    let _e175: Motor = self_2123;
    let _e178: Motor = self_2123;
    let _e181: Motor = self_2123;
    let _e185: Plane = other_1817;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e75.g1_.y, _e78.g1_.y, _e81.g0_.y, _e84.g0_.y) * _e88.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e101.g0_.z) * _e105.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0)) + ((vec4<f32>(_e116.g0_.w) * _e120.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e132.g1_.x) * _e136.g0_)) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e156.g1_.w) * _e160.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e172.g0_.y, _e175.g0_.y, _e178.g1_.y, _e181.g1_.y) * _e185.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_plane_inner_anti_product(self_2124: Motor, other_1818: Plane) -> PointAndPlane {
    var self_2125: Motor;
    var other_1819: Plane;

    self_2125 = self_2124;
    other_1819 = other_1818;
    let _e4: Motor = self_2125;
    let _e8: Plane = other_1819;
    let _e11: Motor = self_2125;
    let _e15: Plane = other_1819;
    let _e27: Motor = self_2125;
    let _e31: Plane = other_1819;
    let _e43: Motor = self_2125;
    let _e47: Plane = other_1819;
    let _e59: Motor = self_2125;
    let _e63: Plane = other_1819;
    let _e75: Motor = self_2125;
    let _e78: Motor = self_2125;
    let _e81: Motor = self_2125;
    let _e84: Motor = self_2125;
    let _e88: Plane = other_1819;
    let _e101: Motor = self_2125;
    let _e105: Plane = other_1819;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e75.g1_.y, _e78.g1_.y, _e81.g0_.y, _e84.g0_.y) * _e88.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (vec4<f32>(_e101.g1_.x) * _e105.g0_));
}

fn motor_plane_left_contraction(self_2126: Motor, other_1820: Plane) -> Plane {
    var self_2127: Motor;
    var other_1821: Plane;

    self_2127 = self_2126;
    other_1821 = other_1820;
    let _e4: Motor = self_2127;
    let _e8: Plane = other_1821;
    return Plane((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn motor_plane_right_contraction(self_2128: Motor, other_1822: Plane) -> PointAndPlane {
    var self_2129: Motor;
    var other_1823: Plane;

    self_2129 = self_2128;
    other_1823 = other_1822;
    let _e6: Motor = self_2129;
    let _e10: Plane = other_1823;
    let _e14: Motor = self_2129;
    let _e18: Plane = other_1823;
    let _e29: Motor = self_2129;
    let _e33: Plane = other_1823;
    let _e45: Motor = self_2129;
    let _e49: Plane = other_1823;
    let _e61: Motor = self_2129;
    let _e65: Plane = other_1823;
    let _e77: Motor = self_2129;
    let _e80: Motor = self_2129;
    let _e83: Motor = self_2129;
    let _e86: Motor = self_2129;
    let _e90: Plane = other_1823;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.x) * _e10.g0_)), ((((((vec4<f32>(_e14.g0_.z) * _e18.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.w) * _e33.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e45.g1_.z) * _e49.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e61.g1_.w) * _e65.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e77.g1_.y, _e80.g1_.y, _e83.g0_.y, _e86.g0_.y) * _e90.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_plane_left_anti_contraction(self_2130: Motor, other_1824: Plane) -> PointAndPlane {
    var self_2131: Motor;
    var other_1825: Plane;

    self_2131 = self_2130;
    other_1825 = other_1824;
    let _e4: Motor = self_2131;
    let _e8: Plane = other_1825;
    let _e19: Motor = self_2131;
    let _e23: Plane = other_1825;
    let _e35: Motor = self_2131;
    let _e39: Plane = other_1825;
    let _e51: Motor = self_2131;
    let _e55: Plane = other_1825;
    let _e67: Motor = self_2131;
    let _e70: Motor = self_2131;
    let _e73: Motor = self_2131;
    let _e76: Motor = self_2131;
    let _e80: Plane = other_1825;
    let _e93: Motor = self_2131;
    let _e97: Plane = other_1825;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * _e39.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.w) * _e55.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e67.g1_.y, _e70.g1_.y, _e73.g0_.y, _e76.g0_.y) * _e80.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (vec4<f32>(_e93.g1_.x) * _e97.g0_));
}

fn motor_plane_right_anti_contraction(self_2132: Motor, other_1826: Plane) -> Point {
    var self_2133: Motor;
    var other_1827: Plane;

    self_2133 = self_2132;
    other_1827 = other_1826;
    let _e4: Motor = self_2133;
    let _e8: Plane = other_1827;
    return Point((vec4<f32>(_e4.g0_.x) * _e8.g0_));
}

fn motor_line_into(self_2134: Motor) -> Line {
    var self_2135: Motor;

    self_2135 = self_2134;
    let _e2: Motor = self_2135;
    let _e5: Motor = self_2135;
    let _e8: Motor = self_2135;
    let _e12: Motor = self_2135;
    let _e15: Motor = self_2135;
    let _e18: Motor = self_2135;
    return Line(vec3<f32>(_e2.g1_.y, _e5.g1_.z, _e8.g1_.w), vec3<f32>(_e12.g0_.y, _e15.g0_.z, _e18.g0_.w));
}

fn motor_line_add(self_2136: Motor, other_1828: Line) -> Motor {
    var self_2137: Motor;
    var other_1829: Line;

    self_2137 = self_2136;
    other_1829 = other_1828;
    let _e4: Motor = self_2137;
    let _e6: Line = other_1829;
    let _e9: Line = other_1829;
    let _e12: Line = other_1829;
    let _e15: Line = other_1829;
    let _e26: Motor = self_2137;
    let _e28: Line = other_1829;
    let _e31: Line = other_1829;
    let _e34: Line = other_1829;
    let _e37: Line = other_1829;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x, _e9.g1_.x, _e12.g1_.y, _e15.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (_e26.g1_ + (vec4<f32>(_e28.g0_.x, _e31.g0_.x, _e34.g0_.y, _e37.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_line_sub(self_2138: Motor, other_1830: Line) -> Motor {
    var self_2139: Motor;
    var other_1831: Line;

    self_2139 = self_2138;
    other_1831 = other_1830;
    let _e4: Motor = self_2139;
    let _e6: Line = other_1831;
    let _e9: Line = other_1831;
    let _e12: Line = other_1831;
    let _e15: Line = other_1831;
    let _e26: Motor = self_2139;
    let _e28: Line = other_1831;
    let _e31: Line = other_1831;
    let _e34: Line = other_1831;
    let _e37: Line = other_1831;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x, _e9.g1_.x, _e12.g1_.y, _e15.g1_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (_e26.g1_ - (vec4<f32>(_e28.g0_.x, _e31.g0_.x, _e34.g0_.y, _e37.g0_.z) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_line_geometric_product(self_2140: Motor, other_1832: Line) -> Motor {
    var self_2141: Motor;
    var other_1833: Line;

    self_2141 = self_2140;
    other_1833 = other_1832;
    let _e4: Motor = self_2141;
    let _e8: Line = other_1833;
    let _e11: Line = other_1833;
    let _e14: Line = other_1833;
    let _e17: Line = other_1833;
    let _e30: Motor = self_2141;
    let _e34: Line = other_1833;
    let _e37: Line = other_1833;
    let _e40: Line = other_1833;
    let _e43: Line = other_1833;
    let _e57: Motor = self_2141;
    let _e61: Line = other_1833;
    let _e64: Line = other_1833;
    let _e67: Line = other_1833;
    let _e70: Line = other_1833;
    let _e84: Motor = self_2141;
    let _e88: Line = other_1833;
    let _e91: Line = other_1833;
    let _e94: Line = other_1833;
    let _e97: Line = other_1833;
    let _e112: Motor = self_2141;
    let _e116: Line = other_1833;
    let _e119: Line = other_1833;
    let _e122: Line = other_1833;
    let _e125: Line = other_1833;
    let _e139: Motor = self_2141;
    let _e143: Line = other_1833;
    let _e146: Line = other_1833;
    let _e149: Line = other_1833;
    let _e152: Line = other_1833;
    let _e166: Motor = self_2141;
    let _e170: Line = other_1833;
    let _e173: Line = other_1833;
    let _e176: Line = other_1833;
    let _e179: Line = other_1833;
    let _e193: Motor = self_2141;
    let _e197: Line = other_1833;
    let _e200: Line = other_1833;
    let _e203: Line = other_1833;
    let _e206: Line = other_1833;
    let _e218: Motor = self_2141;
    let _e222: Line = other_1833;
    let _e225: Line = other_1833;
    let _e228: Line = other_1833;
    let _e231: Line = other_1833;
    let _e243: Motor = self_2141;
    let _e247: Line = other_1833;
    let _e250: Line = other_1833;
    let _e253: Line = other_1833;
    let _e256: Line = other_1833;
    let _e269: Motor = self_2141;
    let _e273: Line = other_1833;
    let _e276: Line = other_1833;
    let _e279: Line = other_1833;
    let _e282: Line = other_1833;
    let _e295: Motor = self_2141;
    let _e299: Line = other_1833;
    let _e302: Line = other_1833;
    let _e305: Line = other_1833;
    let _e308: Line = other_1833;
    let _e323: Motor = self_2141;
    let _e327: Line = other_1833;
    let _e330: Line = other_1833;
    let _e333: Line = other_1833;
    let _e336: Line = other_1833;
    let _e349: Motor = self_2141;
    let _e353: Line = other_1833;
    let _e356: Line = other_1833;
    let _e359: Line = other_1833;
    let _e362: Line = other_1833;
    let _e375: Motor = self_2141;
    let _e379: Line = other_1833;
    let _e382: Line = other_1833;
    let _e385: Line = other_1833;
    let _e388: Line = other_1833;
    let _e401: Motor = self_2141;
    let _e405: Line = other_1833;
    let _e408: Line = other_1833;
    let _e411: Line = other_1833;
    let _e414: Line = other_1833;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g1_.z, _e40.g1_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g1_.y, _e67.g1_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e112.g1_.y) * vec4<f32>(_e116.g0_.x, _e119.g0_.x, _e122.g0_.z, _e125.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e139.g1_.z) * vec4<f32>(_e143.g0_.y, _e146.g0_.z, _e149.g0_.y, _e152.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e166.g1_.w) * vec4<f32>(_e170.g0_.z, _e173.g0_.y, _e176.g0_.x, _e179.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e193.g0_.x) * vec4<f32>(_e197.g1_.x, _e200.g1_.x, _e203.g1_.y, _e206.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e218.g0_.y) * vec4<f32>(_e222.g0_.x, _e225.g0_.x, _e228.g0_.z, _e231.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e243.g0_.z) * vec4<f32>(_e247.g0_.y, _e250.g0_.z, _e253.g0_.y, _e256.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e269.g0_.w) * vec4<f32>(_e273.g0_.z, _e276.g0_.y, _e279.g0_.x, _e282.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e295.g1_.x) * vec4<f32>(_e299.g1_.x, _e302.g1_.x, _e305.g1_.y, _e308.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e323.g1_.y) * vec4<f32>(_e327.g1_.x, _e330.g1_.x, _e333.g1_.z, _e336.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e349.g1_.z) * vec4<f32>(_e353.g1_.y, _e356.g1_.z, _e359.g1_.y, _e362.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e375.g1_.w) * vec4<f32>(_e379.g1_.z, _e382.g1_.y, _e385.g1_.x, _e388.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e401.g0_.x) * vec4<f32>(_e405.g0_.x, _e408.g0_.x, _e411.g0_.y, _e414.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_line_geometric_anti_product(self_2142: Motor, other_1834: Line) -> Motor {
    var self_2143: Motor;
    var other_1835: Line;

    self_2143 = self_2142;
    other_1835 = other_1834;
    let _e4: Motor = self_2143;
    let _e8: Line = other_1835;
    let _e11: Line = other_1835;
    let _e14: Line = other_1835;
    let _e17: Line = other_1835;
    let _e29: Motor = self_2143;
    let _e33: Line = other_1835;
    let _e36: Line = other_1835;
    let _e39: Line = other_1835;
    let _e42: Line = other_1835;
    let _e55: Motor = self_2143;
    let _e59: Line = other_1835;
    let _e62: Line = other_1835;
    let _e65: Line = other_1835;
    let _e68: Line = other_1835;
    let _e81: Motor = self_2143;
    let _e85: Line = other_1835;
    let _e88: Line = other_1835;
    let _e91: Line = other_1835;
    let _e94: Line = other_1835;
    let _e106: Motor = self_2143;
    let _e110: Line = other_1835;
    let _e113: Line = other_1835;
    let _e116: Line = other_1835;
    let _e119: Line = other_1835;
    let _e132: Motor = self_2143;
    let _e136: Line = other_1835;
    let _e139: Line = other_1835;
    let _e142: Line = other_1835;
    let _e145: Line = other_1835;
    let _e158: Motor = self_2143;
    let _e162: Line = other_1835;
    let _e165: Line = other_1835;
    let _e168: Line = other_1835;
    let _e171: Line = other_1835;
    let _e184: Motor = self_2143;
    let _e188: Line = other_1835;
    let _e191: Line = other_1835;
    let _e194: Line = other_1835;
    let _e197: Line = other_1835;
    let _e212: Motor = self_2143;
    let _e216: Line = other_1835;
    let _e219: Line = other_1835;
    let _e222: Line = other_1835;
    let _e225: Line = other_1835;
    let _e238: Motor = self_2143;
    let _e242: Line = other_1835;
    let _e245: Line = other_1835;
    let _e248: Line = other_1835;
    let _e251: Line = other_1835;
    let _e265: Motor = self_2143;
    let _e269: Line = other_1835;
    let _e272: Line = other_1835;
    let _e275: Line = other_1835;
    let _e278: Line = other_1835;
    let _e292: Motor = self_2143;
    let _e296: Line = other_1835;
    let _e299: Line = other_1835;
    let _e302: Line = other_1835;
    let _e305: Line = other_1835;
    let _e317: Motor = self_2143;
    let _e321: Line = other_1835;
    let _e324: Line = other_1835;
    let _e327: Line = other_1835;
    let _e330: Line = other_1835;
    let _e344: Motor = self_2143;
    let _e348: Line = other_1835;
    let _e351: Line = other_1835;
    let _e354: Line = other_1835;
    let _e357: Line = other_1835;
    let _e371: Motor = self_2143;
    let _e375: Line = other_1835;
    let _e378: Line = other_1835;
    let _e381: Line = other_1835;
    let _e384: Line = other_1835;
    let _e398: Motor = self_2143;
    let _e402: Line = other_1835;
    let _e405: Line = other_1835;
    let _e408: Line = other_1835;
    let _e411: Line = other_1835;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g0_.y, _e36.g0_.z, _e39.g0_.y, _e42.g0_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g0_.z, _e62.g0_.y, _e65.g0_.x, _e68.g0_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e81.g1_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e106.g1_.y) * vec4<f32>(_e110.g1_.x, _e113.g1_.x, _e116.g1_.z, _e119.g1_.y)) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e132.g1_.z) * vec4<f32>(_e136.g1_.y, _e139.g1_.z, _e142.g1_.y, _e145.g1_.x)) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e158.g1_.w) * vec4<f32>(_e162.g1_.z, _e165.g1_.y, _e168.g1_.x, _e171.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e184.g0_.x) * vec4<f32>(_e188.g0_.x, _e191.g0_.x, _e194.g0_.y, _e197.g0_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((((vec4<f32>(_e212.g0_.y) * vec4<f32>(_e216.g1_.x, _e219.g1_.x, _e222.g1_.z, _e225.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e238.g0_.z) * vec4<f32>(_e242.g1_.y, _e245.g1_.z, _e248.g1_.y, _e251.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e265.g0_.w) * vec4<f32>(_e269.g1_.z, _e272.g1_.y, _e275.g1_.x, _e278.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e292.g1_.x) * vec4<f32>(_e296.g0_.x, _e299.g0_.x, _e302.g0_.y, _e305.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e317.g1_.y) * vec4<f32>(_e321.g0_.x, _e324.g0_.x, _e327.g0_.z, _e330.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e344.g1_.z) * vec4<f32>(_e348.g0_.y, _e351.g0_.z, _e354.g0_.y, _e357.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e371.g1_.w) * vec4<f32>(_e375.g0_.z, _e378.g0_.y, _e381.g0_.x, _e384.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e398.g0_.x) * vec4<f32>(_e402.g1_.x, _e405.g1_.x, _e408.g1_.y, _e411.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_line_scalar_product(self_2144: Motor, other_1836: Line) -> Scalar {
    var self_2145: Motor;
    var other_1837: Line;

    self_2145 = self_2144;
    other_1837 = other_1836;
    let _e5: Motor = self_2145;
    let _e8: Line = other_1837;
    let _e13: Motor = self_2145;
    let _e16: Line = other_1837;
    let _e21: Motor = self_2145;
    let _e24: Line = other_1837;
    let _e29: Motor = self_2145;
    let _e32: Line = other_1837;
    let _e37: Motor = self_2145;
    let _e40: Line = other_1837;
    let _e45: Motor = self_2145;
    let _e48: Line = other_1837;
    return Scalar(((((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)) - (_e29.g1_.y * _e32.g0_.x)) - (_e37.g1_.z * _e40.g0_.y)) - (_e45.g1_.w * _e48.g0_.z)));
}

fn motor_line_anti_scalar_product(self_2146: Motor, other_1838: Line) -> AntiScalar {
    var self_2147: Motor;
    var other_1839: Line;

    self_2147 = self_2146;
    other_1839 = other_1838;
    let _e5: Motor = self_2147;
    let _e8: Line = other_1839;
    let _e13: Motor = self_2147;
    let _e16: Line = other_1839;
    let _e21: Motor = self_2147;
    let _e24: Line = other_1839;
    let _e29: Motor = self_2147;
    let _e32: Line = other_1839;
    let _e37: Motor = self_2147;
    let _e40: Line = other_1839;
    let _e45: Motor = self_2147;
    let _e48: Line = other_1839;
    return AntiScalar(((((((0.0 - (_e5.g0_.y * _e8.g1_.x)) - (_e13.g0_.z * _e16.g1_.y)) - (_e21.g0_.w * _e24.g1_.z)) - (_e29.g1_.y * _e32.g0_.x)) - (_e37.g1_.z * _e40.g0_.y)) - (_e45.g1_.w * _e48.g0_.z)));
}

fn motor_translator_into(self_2148: Motor) -> Translator {
    var self_2149: Motor;

    self_2149 = self_2148;
    let _e2: Motor = self_2149;
    let _e5: Motor = self_2149;
    let _e8: Motor = self_2149;
    let _e11: Motor = self_2149;
    return Translator(vec4<f32>(_e2.g0_.x, _e5.g1_.y, _e8.g1_.z, _e11.g1_.w));
}

fn motor_translator_add(self_2150: Motor, other_1840: Translator) -> Motor {
    var self_2151: Motor;
    var other_1841: Translator;

    self_2151 = self_2150;
    other_1841 = other_1840;
    let _e4: Motor = self_2151;
    let _e6: Translator = other_1841;
    let _e17: Motor = self_2151;
    let _e19: Translator = other_1841;
    return Motor((_e4.g0_ + (vec4<f32>(_e6.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (_e17.g1_ + (_e19.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_translator_sub(self_2152: Motor, other_1842: Translator) -> Motor {
    var self_2153: Motor;
    var other_1843: Translator;

    self_2153 = self_2152;
    other_1843 = other_1842;
    let _e4: Motor = self_2153;
    let _e6: Translator = other_1843;
    let _e17: Motor = self_2153;
    let _e19: Translator = other_1843;
    return Motor((_e4.g0_ - (vec4<f32>(_e6.g0_.x) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (_e17.g1_ - (_e19.g0_ * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_translator_geometric_product(self_2154: Motor, other_1844: Translator) -> Motor {
    var self_2155: Motor;
    var other_1845: Translator;

    self_2155 = self_2154;
    other_1845 = other_1844;
    let _e4: Motor = self_2155;
    let _e8: Translator = other_1845;
    let _e21: Motor = self_2155;
    let _e25: Translator = other_1845;
    let _e38: Motor = self_2155;
    let _e42: Translator = other_1845;
    let _e55: Motor = self_2155;
    let _e59: Translator = other_1845;
    let _e72: Motor = self_2155;
    let _e74: Translator = other_1845;
    let _e80: Motor = self_2155;
    let _e84: Translator = other_1845;
    let _e95: Motor = self_2155;
    let _e99: Translator = other_1845;
    let _e111: Motor = self_2155;
    let _e115: Translator = other_1845;
    let _e127: Motor = self_2155;
    let _e131: Translator = other_1845;
    let _e143: Motor = self_2155;
    let _e147: Translator = other_1845;
    let _e159: Motor = self_2155;
    let _e163: Translator = other_1845;
    let _e175: Motor = self_2155;
    let _e178: Motor = self_2155;
    let _e181: Motor = self_2155;
    let _e184: Motor = self_2155;
    let _e188: Translator = other_1845;
    return Motor(((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g1_.y) * _e25.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e38.g1_.z) * _e42.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e55.g1_.w) * _e59.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), ((((((((vec4<f32>(_e80.g0_.y) * _e84.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e95.g0_.z) * _e99.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e111.g0_.w) * _e115.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e127.g1_.y) * vec4<f32>(_e131.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e143.g1_.z) * vec4<f32>(_e147.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e159.g1_.w) * vec4<f32>(_e163.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e175.g1_.x, _e178.g0_.x, _e181.g0_.x, _e184.g0_.x) * _e188.g0_)));
}

fn motor_translator_regressive_product(self_2156: Motor, other_1846: Translator) -> Translator {
    var self_2157: Motor;
    var other_1847: Translator;

    self_2157 = self_2156;
    other_1847 = other_1846;
    let _e4: Motor = self_2157;
    let _e8: Translator = other_1847;
    let _e19: Motor = self_2157;
    let _e23: Translator = other_1847;
    let _e35: Motor = self_2157;
    let _e39: Translator = other_1847;
    let _e43: Motor = self_2157;
    let _e46: Translator = other_1847;
    return Translator((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.w) * vec4<f32>(_e23.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (vec4<f32>(_e35.g1_.x) * _e39.g0_)) + ((_e43.g0_.yxxx * _e46.g0_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_translator_outer_product(self_2158: Motor, other_1848: Translator) -> Motor {
    var self_2159: Motor;
    var other_1849: Translator;

    self_2159 = self_2158;
    other_1849 = other_1848;
    let _e4: Motor = self_2159;
    let _e6: Translator = other_1849;
    let _e11: Motor = self_2159;
    let _e15: Translator = other_1849;
    let _e26: Motor = self_2159;
    let _e30: Translator = other_1849;
    let _e42: Motor = self_2159;
    let _e46: Translator = other_1849;
    let _e58: Motor = self_2159;
    let _e62: Translator = other_1849;
    let _e74: Motor = self_2159;
    let _e78: Translator = other_1849;
    let _e90: Motor = self_2159;
    let _e94: Translator = other_1849;
    let _e106: Motor = self_2159;
    let _e109: Translator = other_1849;
    return Motor((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e42.g1_.x) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e58.g1_.y) * vec4<f32>(_e62.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e74.g1_.z) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e90.g1_.w) * vec4<f32>(_e94.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (_e106.g0_.yxxx * _e109.g0_.yyzw)));
}

fn motor_translator_inner_product(self_2160: Motor, other_1850: Translator) -> Motor {
    var self_2161: Motor;
    var other_1851: Translator;

    self_2161 = self_2160;
    other_1851 = other_1850;
    let _e4: Motor = self_2161;
    let _e8: Translator = other_1851;
    let _e21: Motor = self_2161;
    let _e25: Translator = other_1851;
    let _e38: Motor = self_2161;
    let _e42: Translator = other_1851;
    let _e55: Motor = self_2161;
    let _e59: Translator = other_1851;
    let _e72: Motor = self_2161;
    let _e74: Translator = other_1851;
    let _e80: Motor = self_2161;
    let _e84: Translator = other_1851;
    let _e95: Motor = self_2161;
    let _e99: Translator = other_1851;
    let _e111: Motor = self_2161;
    let _e115: Translator = other_1851;
    let _e127: Motor = self_2161;
    let _e130: Motor = self_2161;
    let _e133: Motor = self_2161;
    let _e136: Motor = self_2161;
    let _e140: Translator = other_1851;
    return Motor(((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g1_.y) * vec4<f32>(_e25.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e38.g1_.z) * vec4<f32>(_e42.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.w) * vec4<f32>(_e59.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), (((((vec4<f32>(_e80.g1_.y) * vec4<f32>(_e84.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e95.g1_.z) * vec4<f32>(_e99.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e111.g1_.w) * vec4<f32>(_e115.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e127.g1_.x, _e130.g0_.x, _e133.g0_.x, _e136.g0_.x) * _e140.g0_)));
}

fn motor_translator_geometric_anti_product(self_2162: Motor, other_1852: Translator) -> Motor {
    var self_2163: Motor;
    var other_1853: Translator;

    self_2163 = self_2162;
    other_1853 = other_1852;
    let _e4: Motor = self_2163;
    let _e8: Translator = other_1853;
    let _e19: Motor = self_2163;
    let _e23: Translator = other_1853;
    let _e35: Motor = self_2163;
    let _e39: Translator = other_1853;
    let _e51: Motor = self_2163;
    let _e55: Translator = other_1853;
    let _e68: Motor = self_2163;
    let _e72: Translator = other_1853;
    let _e85: Motor = self_2163;
    let _e89: Translator = other_1853;
    let _e102: Motor = self_2163;
    let _e105: Motor = self_2163;
    let _e108: Motor = self_2163;
    let _e111: Motor = self_2163;
    let _e115: Translator = other_1853;
    let _e128: Motor = self_2163;
    let _e132: Translator = other_1853;
    let _e142: Motor = self_2163;
    let _e146: Translator = other_1853;
    let _e159: Motor = self_2163;
    let _e163: Translator = other_1853;
    let _e176: Motor = self_2163;
    let _e180: Translator = other_1853;
    let _e193: Motor = self_2163;
    let _e195: Translator = other_1853;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e51.g1_.y) * vec4<f32>(_e55.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e68.g1_.z) * vec4<f32>(_e72.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e85.g1_.w) * vec4<f32>(_e89.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e102.g1_.x, _e105.g0_.x, _e108.g0_.x, _e111.g0_.x) * _e115.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e128.g1_.x) * _e132.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e142.g1_.y) * _e146.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e159.g1_.z) * _e163.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e176.g1_.w) * _e180.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((_e193.g0_ * vec4<f32>(_e195.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_translator_inner_anti_product(self_2164: Motor, other_1854: Translator) -> Motor {
    var self_2165: Motor;
    var other_1855: Translator;

    self_2165 = self_2164;
    other_1855 = other_1854;
    let _e4: Motor = self_2165;
    let _e8: Translator = other_1855;
    let _e20: Motor = self_2165;
    let _e24: Translator = other_1855;
    let _e37: Motor = self_2165;
    let _e41: Translator = other_1855;
    let _e54: Motor = self_2165;
    let _e57: Motor = self_2165;
    let _e60: Motor = self_2165;
    let _e63: Motor = self_2165;
    let _e67: Translator = other_1855;
    let _e80: Motor = self_2165;
    let _e84: Translator = other_1855;
    let _e94: Motor = self_2165;
    let _e98: Translator = other_1855;
    let _e111: Motor = self_2165;
    let _e115: Translator = other_1855;
    let _e128: Motor = self_2165;
    let _e132: Translator = other_1855;
    let _e145: Motor = self_2165;
    let _e147: Translator = other_1855;
    return Motor((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.z) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e37.g1_.w) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.x, _e57.g0_.x, _e60.g0_.x, _e63.g0_.x) * _e67.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))), ((((((vec4<f32>(_e80.g1_.x) * _e84.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e94.g1_.y) * vec4<f32>(_e98.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e111.g1_.z) * vec4<f32>(_e115.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e128.g1_.w) * vec4<f32>(_e132.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e145.g0_ * vec4<f32>(_e147.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_translator_left_contraction(self_2166: Motor, other_1856: Translator) -> Translator {
    var self_2167: Motor;
    var other_1857: Translator;

    self_2167 = self_2166;
    other_1857 = other_1856;
    let _e4: Motor = self_2167;
    let _e8: Translator = other_1857;
    let _e11: Motor = self_2167;
    let _e15: Translator = other_1857;
    let _e28: Motor = self_2167;
    let _e32: Translator = other_1857;
    let _e45: Motor = self_2167;
    let _e48: Translator = other_1857;
    return Translator(((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g1_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g1_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e45.g1_.yxxx * _e48.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn motor_translator_right_contraction(self_2168: Motor, other_1858: Translator) -> Motor {
    var self_2169: Motor;
    var other_1859: Translator;

    self_2169 = self_2168;
    other_1859 = other_1858;
    let _e4: Motor = self_2169;
    let _e8: Translator = other_1859;
    let _e21: Motor = self_2169;
    let _e25: Translator = other_1859;
    let _e38: Motor = self_2169;
    let _e42: Translator = other_1859;
    let _e55: Motor = self_2169;
    let _e59: Translator = other_1859;
    let _e72: Motor = self_2169;
    let _e74: Translator = other_1859;
    let _e80: Motor = self_2169;
    let _e82: Translator = other_1859;
    return Motor(((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g1_.y) * vec4<f32>(_e25.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e38.g1_.z) * vec4<f32>(_e42.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e55.g1_.w) * vec4<f32>(_e59.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + (_e72.g0_ * vec4<f32>(_e74.g0_.x))), (_e80.g1_ * vec4<f32>(_e82.g0_.x)));
}

fn motor_translator_left_anti_contraction(self_2170: Motor, other_1860: Translator) -> Motor {
    var self_2171: Motor;
    var other_1861: Translator;

    self_2171 = self_2170;
    other_1861 = other_1860;
    let _e4: Motor = self_2171;
    let _e6: Translator = other_1861;
    let _e20: Motor = self_2171;
    let _e24: Translator = other_1861;
    let _e34: Motor = self_2171;
    let _e38: Translator = other_1861;
    let _e51: Motor = self_2171;
    let _e55: Translator = other_1861;
    let _e68: Motor = self_2171;
    let _e72: Translator = other_1861;
    let _e85: Motor = self_2171;
    let _e87: Translator = other_1861;
    return Motor(((_e4.g1_ * vec4<f32>(_e6.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))), ((((((vec4<f32>(_e20.g1_.x) * _e24.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e34.g1_.y) * vec4<f32>(_e38.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e51.g1_.z) * vec4<f32>(_e55.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e68.g1_.w) * vec4<f32>(_e72.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e85.g0_ * vec4<f32>(_e87.g0_.x)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_translator_scalar_product(self_2172: Motor, other_1862: Translator) -> Scalar {
    var self_2173: Motor;
    var other_1863: Translator;

    self_2173 = self_2172;
    other_1863 = other_1862;
    let _e4: Motor = self_2173;
    let _e7: Translator = other_1863;
    let _e11: Motor = self_2173;
    let _e14: Translator = other_1863;
    let _e19: Motor = self_2173;
    let _e22: Translator = other_1863;
    let _e27: Motor = self_2173;
    let _e30: Translator = other_1863;
    return Scalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g1_.y * _e14.g0_.y)) - (_e19.g1_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g0_.w)));
}

fn motor_translator_anti_scalar_product(self_2174: Motor, other_1864: Translator) -> AntiScalar {
    var self_2175: Motor;
    var other_1865: Translator;

    self_2175 = self_2174;
    other_1865 = other_1864;
    let _e4: Motor = self_2175;
    let _e7: Translator = other_1865;
    let _e11: Motor = self_2175;
    let _e14: Translator = other_1865;
    let _e19: Motor = self_2175;
    let _e22: Translator = other_1865;
    let _e27: Motor = self_2175;
    let _e30: Translator = other_1865;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) - (_e11.g1_.y * _e14.g0_.y)) - (_e19.g1_.z * _e22.g0_.z)) - (_e27.g1_.w * _e30.g0_.w)));
}

fn motor_motor_add(self_2176: Motor, other_1866: Motor) -> Motor {
    var self_2177: Motor;
    var other_1867: Motor;

    self_2177 = self_2176;
    other_1867 = other_1866;
    let _e4: Motor = self_2177;
    let _e6: Motor = other_1867;
    let _e9: Motor = self_2177;
    let _e11: Motor = other_1867;
    return Motor((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn motor_motor_sub(self_2178: Motor, other_1868: Motor) -> Motor {
    var self_2179: Motor;
    var other_1869: Motor;

    self_2179 = self_2178;
    other_1869 = other_1868;
    let _e4: Motor = self_2179;
    let _e6: Motor = other_1869;
    let _e9: Motor = self_2179;
    let _e11: Motor = other_1869;
    return Motor((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn motor_motor_mul(self_2180: Motor, other_1870: Motor) -> Motor {
    var self_2181: Motor;
    var other_1871: Motor;

    self_2181 = self_2180;
    other_1871 = other_1870;
    let _e4: Motor = self_2181;
    let _e6: Motor = other_1871;
    let _e9: Motor = self_2181;
    let _e11: Motor = other_1871;
    return Motor((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn motor_motor_div(self_2182: Motor, other_1872: Motor) -> Motor {
    var self_2183: Motor;
    var other_1873: Motor;

    self_2183 = self_2182;
    other_1873 = other_1872;
    let _e4: Motor = self_2183;
    let _e7: Motor = self_2183;
    let _e10: Motor = self_2183;
    let _e13: Motor = self_2183;
    let _e23: Motor = other_1873;
    let _e26: Motor = other_1873;
    let _e29: Motor = other_1873;
    let _e32: Motor = other_1873;
    let _e43: Motor = self_2183;
    let _e46: Motor = self_2183;
    let _e49: Motor = self_2183;
    let _e52: Motor = self_2183;
    let _e62: Motor = other_1873;
    let _e65: Motor = other_1873;
    let _e68: Motor = other_1873;
    let _e71: Motor = other_1873;
    return Motor((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn motor_motor_geometric_product(self_2184: Motor, other_1874: Motor) -> Motor {
    var self_2185: Motor;
    var other_1875: Motor;

    self_2185 = self_2184;
    other_1875 = other_1874;
    let _e4: Motor = self_2185;
    let _e8: Motor = other_1875;
    let _e11: Motor = self_2185;
    let _e15: Motor = other_1875;
    let _e28: Motor = self_2185;
    let _e32: Motor = other_1875;
    let _e45: Motor = self_2185;
    let _e49: Motor = other_1875;
    let _e62: Motor = self_2185;
    let _e66: Motor = other_1875;
    let _e79: Motor = self_2185;
    let _e83: Motor = other_1875;
    let _e97: Motor = self_2185;
    let _e101: Motor = other_1875;
    let _e115: Motor = self_2185;
    let _e119: Motor = other_1875;
    let _e133: Motor = self_2185;
    let _e137: Motor = other_1875;
    let _e140: Motor = self_2185;
    let _e144: Motor = other_1875;
    let _e157: Motor = self_2185;
    let _e161: Motor = other_1875;
    let _e174: Motor = self_2185;
    let _e178: Motor = other_1875;
    let _e191: Motor = self_2185;
    let _e195: Motor = other_1875;
    let _e208: Motor = self_2185;
    let _e212: Motor = other_1875;
    let _e224: Motor = self_2185;
    let _e228: Motor = other_1875;
    let _e240: Motor = self_2185;
    let _e244: Motor = other_1875;
    return Motor(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * _e15.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e28.g0_.z) * _e32.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e45.g0_.w) * _e49.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e62.g1_.x) * _e66.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e79.g1_.y) * _e83.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e97.g1_.z) * _e101.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e115.g1_.w) * _e119.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e133.g0_.x) * _e137.g1_) + ((vec4<f32>(_e140.g0_.y) * _e144.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e157.g0_.z) * _e161.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e174.g0_.w) * _e178.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e191.g1_.x) * _e195.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e208.g1_.y) * _e212.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e224.g1_.z) * _e228.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e240.g1_.w) * _e244.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn motor_motor_regressive_product(self_2186: Motor, other_1876: Motor) -> Motor {
    var self_2187: Motor;
    var other_1877: Motor;

    self_2187 = self_2186;
    other_1877 = other_1876;
    let _e4: Motor = self_2187;
    let _e8: Motor = other_1877;
    let _e18: Motor = self_2187;
    let _e22: Motor = other_1877;
    let _e33: Motor = self_2187;
    let _e37: Motor = other_1877;
    let _e48: Motor = self_2187;
    let _e52: Motor = other_1877;
    let _e56: Motor = self_2187;
    let _e60: Motor = other_1877;
    let _e72: Motor = self_2187;
    let _e76: Motor = other_1877;
    let _e88: Motor = self_2187;
    let _e92: Motor = other_1877;
    let _e104: Motor = self_2187;
    let _e108: Motor = other_1877;
    let _e120: Motor = self_2187;
    let _e124: Motor = other_1877;
    let _e127: Motor = self_2187;
    let _e129: Motor = other_1877;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * _e8.g1_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e18.g0_.z) * _e22.g1_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e33.g0_.w) * _e37.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e48.g1_.x) * _e52.g0_)) + ((vec4<f32>(_e56.g1_.y) * vec4<f32>(_e60.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e72.g1_.z) * vec4<f32>(_e76.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e88.g1_.w) * vec4<f32>(_e92.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e104.g0_.x) * vec4<f32>(_e108.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), ((vec4<f32>(_e120.g1_.x) * _e124.g1_) + ((_e127.g1_ * vec4<f32>(_e129.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_motor_outer_product(self_2188: Motor, other_1878: Motor) -> Motor {
    var self_2189: Motor;
    var other_1879: Motor;

    self_2189 = self_2188;
    other_1879 = other_1878;
    let _e4: Motor = self_2189;
    let _e8: Motor = other_1879;
    let _e11: Motor = self_2189;
    let _e13: Motor = other_1879;
    let _e25: Motor = self_2189;
    let _e29: Motor = other_1879;
    let _e32: Motor = self_2189;
    let _e36: Motor = other_1879;
    let _e48: Motor = self_2189;
    let _e52: Motor = other_1879;
    let _e64: Motor = self_2189;
    let _e68: Motor = other_1879;
    let _e80: Motor = self_2189;
    let _e84: Motor = other_1879;
    let _e95: Motor = self_2189;
    let _e99: Motor = other_1879;
    let _e110: Motor = self_2189;
    let _e114: Motor = other_1879;
    let _e125: Motor = self_2189;
    let _e128: Motor = other_1879;
    return Motor(((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((_e11.g0_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), ((((((((vec4<f32>(_e25.g0_.x) * _e29.g1_) + ((vec4<f32>(_e32.g0_.z) * vec4<f32>(_e36.g1_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e48.g0_.w) * vec4<f32>(_e52.g1_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e64.g1_.x) * vec4<f32>(_e68.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e80.g1_.y) * _e84.g0_.yxyy) * vec4<f32>(1.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e95.g1_.z) * _e99.g0_.zzxz) * vec4<f32>(1.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e110.g1_.w) * _e114.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, 1.0))) + ((_e125.g0_.yxxx * _e128.g1_.yxxx) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_motor_inner_product(self_2190: Motor, other_1880: Motor) -> Motor {
    var self_2191: Motor;
    var other_1881: Motor;

    self_2191 = self_2190;
    other_1881 = other_1880;
    let _e4: Motor = self_2191;
    let _e8: Motor = other_1881;
    let _e11: Motor = self_2191;
    let _e15: Motor = other_1881;
    let _e27: Motor = self_2191;
    let _e31: Motor = other_1881;
    let _e43: Motor = self_2191;
    let _e47: Motor = other_1881;
    let _e60: Motor = self_2191;
    let _e64: Motor = other_1881;
    let _e77: Motor = self_2191;
    let _e81: Motor = other_1881;
    let _e94: Motor = self_2191;
    let _e98: Motor = other_1881;
    let _e111: Motor = self_2191;
    let _e114: Motor = other_1881;
    let _e126: Motor = self_2191;
    let _e130: Motor = other_1881;
    let _e133: Motor = self_2191;
    let _e137: Motor = other_1881;
    let _e150: Motor = self_2191;
    let _e154: Motor = other_1881;
    let _e166: Motor = self_2191;
    let _e170: Motor = other_1881;
    let _e182: Motor = self_2191;
    let _e186: Motor = other_1881;
    let _e198: Motor = self_2191;
    let _e200: Motor = other_1881;
    return Motor(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e43.g1_.x) * _e47.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e60.g1_.y) * _e64.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e77.g1_.z) * _e81.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e94.g1_.w) * _e98.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e111.g0_.yyxx * _e114.g0_.yxxx) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))), ((((((vec4<f32>(_e126.g0_.x) * _e130.g1_) + ((vec4<f32>(_e133.g1_.x) * _e137.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e150.g1_.y) * vec4<f32>(_e154.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e166.g1_.z) * vec4<f32>(_e170.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e182.g1_.w) * vec4<f32>(_e186.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e198.g0_ * vec4<f32>(_e200.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_motor_geometric_anti_product(self_2192: Motor, other_1882: Motor) -> Motor {
    var self_2193: Motor;
    var other_1883: Motor;

    self_2193 = self_2192;
    other_1883 = other_1882;
    let _e4: Motor = self_2193;
    let _e8: Motor = other_1883;
    let _e20: Motor = self_2193;
    let _e24: Motor = other_1883;
    let _e36: Motor = self_2193;
    let _e40: Motor = other_1883;
    let _e52: Motor = self_2193;
    let _e56: Motor = other_1883;
    let _e68: Motor = self_2193;
    let _e72: Motor = other_1883;
    let _e76: Motor = self_2193;
    let _e80: Motor = other_1883;
    let _e93: Motor = self_2193;
    let _e97: Motor = other_1883;
    let _e110: Motor = self_2193;
    let _e114: Motor = other_1883;
    let _e127: Motor = self_2193;
    let _e131: Motor = other_1883;
    let _e143: Motor = self_2193;
    let _e147: Motor = other_1883;
    let _e161: Motor = self_2193;
    let _e165: Motor = other_1883;
    let _e179: Motor = self_2193;
    let _e183: Motor = other_1883;
    let _e197: Motor = self_2193;
    let _e201: Motor = other_1883;
    let _e205: Motor = self_2193;
    let _e209: Motor = other_1883;
    let _e222: Motor = self_2193;
    let _e226: Motor = other_1883;
    let _e239: Motor = self_2193;
    let _e243: Motor = other_1883;
    return Motor((((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e20.g0_.y) * _e24.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e52.g0_.w) * _e56.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + (vec4<f32>(_e68.g1_.x) * _e72.g0_)) + ((vec4<f32>(_e76.g1_.y) * _e80.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e93.g1_.z) * _e97.g0_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e110.g1_.w) * _e114.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e127.g0_.x) * _e131.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e143.g0_.y) * _e147.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e161.g0_.z) * _e165.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e179.g0_.w) * _e183.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e197.g1_.x) * _e201.g1_)) + ((vec4<f32>(_e205.g1_.y) * _e209.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e222.g1_.z) * _e226.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e239.g1_.w) * _e243.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_motor_inner_anti_product(self_2194: Motor, other_1884: Motor) -> Motor {
    var self_2195: Motor;
    var other_1885: Motor;

    self_2195 = self_2194;
    other_1885 = other_1884;
    let _e4: Motor = self_2195;
    let _e8: Motor = other_1885;
    let _e20: Motor = self_2195;
    let _e24: Motor = other_1885;
    let _e28: Motor = self_2195;
    let _e32: Motor = other_1885;
    let _e45: Motor = self_2195;
    let _e49: Motor = other_1885;
    let _e62: Motor = self_2195;
    let _e66: Motor = other_1885;
    let _e79: Motor = self_2195;
    let _e81: Motor = other_1885;
    let _e93: Motor = self_2195;
    let _e97: Motor = other_1885;
    let _e109: Motor = self_2195;
    let _e113: Motor = other_1885;
    let _e126: Motor = self_2195;
    let _e130: Motor = other_1885;
    let _e143: Motor = self_2195;
    let _e147: Motor = other_1885;
    let _e151: Motor = self_2195;
    let _e155: Motor = other_1885;
    let _e167: Motor = self_2195;
    let _e171: Motor = other_1885;
    let _e183: Motor = self_2195;
    let _e187: Motor = other_1885;
    let _e199: Motor = self_2195;
    let _e202: Motor = other_1885;
    return Motor((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + (vec4<f32>(_e20.g1_.x) * _e24.g0_)) + ((vec4<f32>(_e28.g1_.y) * vec4<f32>(_e32.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e45.g1_.z) * vec4<f32>(_e49.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e62.g1_.w) * vec4<f32>(_e66.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e79.g0_ * vec4<f32>(_e81.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e93.g0_.x) * _e97.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e109.g0_.z) * _e113.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e126.g0_.w) * _e130.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e143.g1_.x) * _e147.g1_)) + ((vec4<f32>(_e151.g1_.y) * _e155.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e167.g1_.z) * _e171.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e183.g1_.w) * _e187.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e199.g0_.yyxx * _e202.g0_.yxxx) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))));
}

fn motor_motor_left_contraction(self_2196: Motor, other_1886: Motor) -> Motor {
    var self_2197: Motor;
    var other_1887: Motor;

    self_2197 = self_2196;
    other_1887 = other_1886;
    let _e4: Motor = self_2197;
    let _e8: Motor = other_1887;
    let _e11: Motor = self_2197;
    let _e15: Motor = other_1887;
    let _e28: Motor = self_2197;
    let _e32: Motor = other_1887;
    let _e45: Motor = self_2197;
    let _e49: Motor = other_1887;
    let _e61: Motor = self_2197;
    let _e65: Motor = other_1887;
    let _e78: Motor = self_2197;
    let _e82: Motor = other_1887;
    let _e95: Motor = self_2197;
    let _e99: Motor = other_1887;
    let _e112: Motor = self_2197;
    let _e115: Motor = other_1887;
    let _e127: Motor = self_2197;
    let _e131: Motor = other_1887;
    let _e134: Motor = self_2197;
    let _e136: Motor = other_1887;
    return Motor(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e28.g0_.w) * vec4<f32>(_e32.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e45.g1_.x) * vec4<f32>(_e49.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e61.g1_.y) * _e65.g1_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e78.g1_.z) * _e82.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e95.g1_.w) * _e99.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((_e112.g0_.yxxx * _e115.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))), ((vec4<f32>(_e127.g0_.x) * _e131.g1_) + ((_e134.g0_ * vec4<f32>(_e136.g1_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn motor_motor_right_contraction(self_2198: Motor, other_1888: Motor) -> Motor {
    var self_2199: Motor;
    var other_1889: Motor;

    self_2199 = self_2198;
    other_1889 = other_1888;
    let _e4: Motor = self_2199;
    let _e8: Motor = other_1889;
    let _e19: Motor = self_2199;
    let _e23: Motor = other_1889;
    let _e35: Motor = self_2199;
    let _e39: Motor = other_1889;
    let _e51: Motor = self_2199;
    let _e55: Motor = other_1889;
    let _e68: Motor = self_2199;
    let _e72: Motor = other_1889;
    let _e85: Motor = self_2199;
    let _e89: Motor = other_1889;
    let _e102: Motor = self_2199;
    let _e106: Motor = other_1889;
    let _e119: Motor = self_2199;
    let _e123: Motor = other_1889;
    let _e135: Motor = self_2199;
    let _e139: Motor = other_1889;
    let _e151: Motor = self_2199;
    let _e153: Motor = other_1889;
    return Motor((((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g0_.z) * _e23.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e35.g0_.w) * _e39.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e51.g1_.x) * _e55.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e68.g1_.y) * vec4<f32>(_e72.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e85.g1_.z) * vec4<f32>(_e89.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e102.g1_.w) * vec4<f32>(_e106.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e119.g0_.x) * vec4<f32>(_e123.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))), (((vec4<f32>(_e135.g1_.x) * _e139.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e151.g1_ * vec4<f32>(_e153.g0_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn motor_motor_left_anti_contraction(self_2200: Motor, other_1890: Motor) -> Motor {
    var self_2201: Motor;
    var other_1891: Motor;

    self_2201 = self_2200;
    other_1891 = other_1890;
    let _e4: Motor = self_2201;
    let _e8: Motor = other_1891;
    let _e11: Motor = self_2201;
    let _e13: Motor = other_1891;
    let _e28: Motor = self_2201;
    let _e32: Motor = other_1891;
    let _e44: Motor = self_2201;
    let _e48: Motor = other_1891;
    let _e61: Motor = self_2201;
    let _e65: Motor = other_1891;
    let _e78: Motor = self_2201;
    let _e82: Motor = other_1891;
    let _e86: Motor = self_2201;
    let _e90: Motor = other_1891;
    let _e103: Motor = self_2201;
    let _e107: Motor = other_1891;
    let _e120: Motor = self_2201;
    let _e124: Motor = other_1891;
    let _e137: Motor = self_2201;
    let _e141: Motor = other_1891;
    return Motor(((vec4<f32>(_e4.g1_.x) * _e8.g0_) + ((_e11.g1_ * vec4<f32>(_e13.g0_.x)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))), (((((((((vec4<f32>(_e28.g0_.y) * _e32.g0_.yxyy) * vec4<f32>(-(1.0), -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e44.g0_.z) * _e48.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e61.g0_.w) * _e65.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + (vec4<f32>(_e78.g1_.x) * _e82.g1_)) + ((vec4<f32>(_e86.g1_.y) * vec4<f32>(_e90.g1_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e103.g1_.z) * vec4<f32>(_e107.g1_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e120.g1_.w) * vec4<f32>(_e124.g1_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e137.g0_.x) * vec4<f32>(_e141.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))));
}

fn motor_motor_right_anti_contraction(self_2202: Motor, other_1892: Motor) -> Motor {
    var self_2203: Motor;
    var other_1893: Motor;

    self_2203 = self_2202;
    other_1893 = other_1892;
    let _e4: Motor = self_2203;
    let _e8: Motor = other_1893;
    let _e20: Motor = self_2203;
    let _e22: Motor = other_1893;
    let _e34: Motor = self_2203;
    let _e38: Motor = other_1893;
    let _e50: Motor = self_2203;
    let _e54: Motor = other_1893;
    let _e67: Motor = self_2203;
    let _e71: Motor = other_1893;
    let _e84: Motor = self_2203;
    let _e88: Motor = other_1893;
    let _e100: Motor = self_2203;
    let _e104: Motor = other_1893;
    let _e116: Motor = self_2203;
    let _e120: Motor = other_1893;
    let _e132: Motor = self_2203;
    let _e136: Motor = other_1893;
    let _e148: Motor = self_2203;
    let _e151: Motor = other_1893;
    return Motor((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((_e20.g0_ * vec4<f32>(_e22.g1_.x)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e34.g0_.x) * _e38.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e50.g0_.z) * vec4<f32>(_e54.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e67.g0_.w) * vec4<f32>(_e71.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e100.g1_.y) * _e104.g1_.yxyy) * vec4<f32>(-(1.0), 1.0, 0.0, 0.0))) + ((vec4<f32>(_e116.g1_.z) * _e120.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e132.g1_.w) * _e136.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((_e148.g0_.yxxx * _e151.g0_.yxxx) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))));
}

fn motor_motor_scalar_product(self_2204: Motor, other_1894: Motor) -> Scalar {
    var self_2205: Motor;
    var other_1895: Motor;

    self_2205 = self_2204;
    other_1895 = other_1894;
    let _e4: Motor = self_2205;
    let _e7: Motor = other_1895;
    let _e11: Motor = self_2205;
    let _e14: Motor = other_1895;
    let _e19: Motor = self_2205;
    let _e22: Motor = other_1895;
    let _e27: Motor = self_2205;
    let _e30: Motor = other_1895;
    let _e35: Motor = self_2205;
    let _e38: Motor = other_1895;
    let _e43: Motor = self_2205;
    let _e46: Motor = other_1895;
    let _e51: Motor = self_2205;
    let _e54: Motor = other_1895;
    let _e59: Motor = self_2205;
    let _e62: Motor = other_1895;
    return Scalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g1_.x * _e38.g1_.x)) - (_e43.g1_.y * _e46.g1_.y)) - (_e51.g1_.z * _e54.g1_.z)) - (_e59.g1_.w * _e62.g1_.w)));
}

fn motor_motor_anti_scalar_product(self_2206: Motor, other_1896: Motor) -> AntiScalar {
    var self_2207: Motor;
    var other_1897: Motor;

    self_2207 = self_2206;
    other_1897 = other_1896;
    let _e4: Motor = self_2207;
    let _e7: Motor = other_1897;
    let _e11: Motor = self_2207;
    let _e14: Motor = other_1897;
    let _e19: Motor = self_2207;
    let _e22: Motor = other_1897;
    let _e27: Motor = self_2207;
    let _e30: Motor = other_1897;
    let _e35: Motor = self_2207;
    let _e38: Motor = other_1897;
    let _e43: Motor = self_2207;
    let _e46: Motor = other_1897;
    let _e51: Motor = self_2207;
    let _e54: Motor = other_1897;
    let _e59: Motor = self_2207;
    let _e62: Motor = other_1897;
    return AntiScalar(((((((((_e4.g0_.x * _e7.g0_.x) - (_e11.g0_.y * _e14.g0_.y)) - (_e19.g0_.z * _e22.g0_.z)) - (_e27.g0_.w * _e30.g0_.w)) + (_e35.g1_.x * _e38.g1_.x)) - (_e43.g1_.y * _e46.g1_.y)) - (_e51.g1_.z * _e54.g1_.z)) - (_e59.g1_.w * _e62.g1_.w)));
}

fn motor_point_and_plane_add(self_2208: Motor, other_1898: PointAndPlane) -> MultiVector {
    var self_2209: Motor;
    var other_1899: PointAndPlane;

    self_2209 = self_2208;
    other_1899 = other_1898;
    let _e4: Motor = self_2209;
    let _e6: PointAndPlane = other_1899;
    let _e9: PointAndPlane = other_1899;
    let _e12: PointAndPlane = other_1899;
    let _e15: PointAndPlane = other_1899;
    let _e19: PointAndPlane = other_1899;
    let _e22: PointAndPlane = other_1899;
    let _e25: PointAndPlane = other_1899;
    let _e28: PointAndPlane = other_1899;
    let _e32: Motor = self_2209;
    return MultiVector(_e4.g0_, vec4<f32>(_e6.g1_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.w), vec4<f32>(_e19.g0_.x, _e22.g1_.y, _e25.g1_.z, _e28.g1_.w), _e32.g1_);
}

fn motor_point_and_plane_sub(self_2210: Motor, other_1900: PointAndPlane) -> MultiVector {
    var self_2211: Motor;
    var other_1901: PointAndPlane;

    self_2211 = self_2210;
    other_1901 = other_1900;
    let _e4: Motor = self_2211;
    let _e8: PointAndPlane = other_1901;
    let _e11: PointAndPlane = other_1901;
    let _e14: PointAndPlane = other_1901;
    let _e17: PointAndPlane = other_1901;
    let _e24: PointAndPlane = other_1901;
    let _e27: PointAndPlane = other_1901;
    let _e30: PointAndPlane = other_1901;
    let _e33: PointAndPlane = other_1901;
    let _e38: Motor = self_2211;
    return MultiVector(_e4.g0_, (vec4<f32>(0.0) - vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)), (vec4<f32>(0.0) - vec4<f32>(_e24.g0_.x, _e27.g1_.y, _e30.g1_.z, _e33.g1_.w)), _e38.g1_);
}

fn motor_point_and_plane_geometric_product(self_2212: Motor, other_1902: PointAndPlane) -> PointAndPlane {
    var self_2213: Motor;
    var other_1903: PointAndPlane;

    self_2213 = self_2212;
    other_1903 = other_1902;
    let _e4: Motor = self_2213;
    let _e8: PointAndPlane = other_1903;
    let _e11: Motor = self_2213;
    let _e15: PointAndPlane = other_1903;
    let _e18: PointAndPlane = other_1903;
    let _e21: PointAndPlane = other_1903;
    let _e24: PointAndPlane = other_1903;
    let _e38: Motor = self_2213;
    let _e42: PointAndPlane = other_1903;
    let _e45: PointAndPlane = other_1903;
    let _e48: PointAndPlane = other_1903;
    let _e51: PointAndPlane = other_1903;
    let _e65: Motor = self_2213;
    let _e69: PointAndPlane = other_1903;
    let _e72: PointAndPlane = other_1903;
    let _e75: PointAndPlane = other_1903;
    let _e78: PointAndPlane = other_1903;
    let _e92: Motor = self_2213;
    let _e96: PointAndPlane = other_1903;
    let _e100: Motor = self_2213;
    let _e104: PointAndPlane = other_1903;
    let _e107: PointAndPlane = other_1903;
    let _e110: PointAndPlane = other_1903;
    let _e113: PointAndPlane = other_1903;
    let _e127: Motor = self_2213;
    let _e131: PointAndPlane = other_1903;
    let _e134: PointAndPlane = other_1903;
    let _e137: PointAndPlane = other_1903;
    let _e140: PointAndPlane = other_1903;
    let _e154: Motor = self_2213;
    let _e158: PointAndPlane = other_1903;
    let _e161: PointAndPlane = other_1903;
    let _e164: PointAndPlane = other_1903;
    let _e167: PointAndPlane = other_1903;
    let _e181: Motor = self_2213;
    let _e185: PointAndPlane = other_1903;
    let _e188: Motor = self_2213;
    let _e192: PointAndPlane = other_1903;
    let _e195: PointAndPlane = other_1903;
    let _e198: PointAndPlane = other_1903;
    let _e201: PointAndPlane = other_1903;
    let _e215: Motor = self_2213;
    let _e219: PointAndPlane = other_1903;
    let _e222: PointAndPlane = other_1903;
    let _e225: PointAndPlane = other_1903;
    let _e228: PointAndPlane = other_1903;
    let _e242: Motor = self_2213;
    let _e246: PointAndPlane = other_1903;
    let _e249: PointAndPlane = other_1903;
    let _e252: PointAndPlane = other_1903;
    let _e255: PointAndPlane = other_1903;
    let _e269: Motor = self_2213;
    let _e273: PointAndPlane = other_1903;
    let _e277: Motor = self_2213;
    let _e281: PointAndPlane = other_1903;
    let _e284: PointAndPlane = other_1903;
    let _e287: PointAndPlane = other_1903;
    let _e290: PointAndPlane = other_1903;
    let _e304: Motor = self_2213;
    let _e308: PointAndPlane = other_1903;
    let _e311: PointAndPlane = other_1903;
    let _e314: PointAndPlane = other_1903;
    let _e317: PointAndPlane = other_1903;
    let _e331: Motor = self_2213;
    let _e335: PointAndPlane = other_1903;
    let _e338: PointAndPlane = other_1903;
    let _e341: PointAndPlane = other_1903;
    let _e344: PointAndPlane = other_1903;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.x, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g1_.z, _e45.g0_.w, _e48.g1_.x, _e51.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g1_.w, _e72.g0_.z, _e75.g0_.y, _e78.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e92.g1_.x) * _e96.g1_)) + ((vec4<f32>(_e100.g1_.y) * vec4<f32>(_e104.g0_.y, _e107.g0_.x, _e110.g1_.w, _e113.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e127.g1_.z) * vec4<f32>(_e131.g0_.z, _e134.g1_.w, _e137.g0_.x, _e140.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e154.g1_.w) * vec4<f32>(_e158.g0_.w, _e161.g1_.z, _e164.g1_.y, _e167.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e181.g0_.x) * _e185.g1_) + ((vec4<f32>(_e188.g0_.y) * vec4<f32>(_e192.g0_.y, _e195.g0_.x, _e198.g1_.w, _e201.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e215.g0_.z) * vec4<f32>(_e219.g0_.z, _e222.g1_.w, _e225.g0_.x, _e228.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e242.g0_.w) * vec4<f32>(_e246.g0_.w, _e249.g1_.z, _e252.g1_.y, _e255.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e269.g1_.x) * _e273.g0_)) + ((vec4<f32>(_e277.g1_.y) * vec4<f32>(_e281.g1_.y, _e284.g1_.x, _e287.g0_.w, _e290.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e304.g1_.z) * vec4<f32>(_e308.g1_.z, _e311.g0_.w, _e314.g1_.x, _e317.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e331.g1_.w) * vec4<f32>(_e335.g1_.w, _e338.g0_.z, _e341.g0_.y, _e344.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn motor_point_and_plane_regressive_product(self_2214: Motor, other_1904: PointAndPlane) -> PointAndPlane {
    var self_2215: Motor;
    var other_1905: PointAndPlane;

    self_2215 = self_2214;
    other_1905 = other_1904;
    let _e4: Motor = self_2215;
    let _e8: PointAndPlane = other_1905;
    let _e11: Motor = self_2215;
    let _e15: PointAndPlane = other_1905;
    let _e26: Motor = self_2215;
    let _e30: PointAndPlane = other_1905;
    let _e42: Motor = self_2215;
    let _e46: PointAndPlane = other_1905;
    let _e50: Motor = self_2215;
    let _e54: PointAndPlane = other_1905;
    let _e66: Motor = self_2215;
    let _e70: PointAndPlane = other_1905;
    let _e82: Motor = self_2215;
    let _e85: Motor = self_2215;
    let _e88: Motor = self_2215;
    let _e91: Motor = self_2215;
    let _e95: PointAndPlane = other_1905;
    return PointAndPlane((vec4<f32>(_e4.g1_.x) * _e8.g0_), (((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e42.g1_.x) * _e46.g1_)) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e66.g1_.w) * _e70.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e82.g1_.y, _e85.g1_.y, _e88.g0_.y, _e91.g0_.y) * _e95.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_point_and_plane_outer_product(self_2216: Motor, other_1906: PointAndPlane) -> PointAndPlane {
    var self_2217: Motor;
    var other_1907: PointAndPlane;

    self_2217 = self_2216;
    other_1907 = other_1906;
    let _e4: Motor = self_2217;
    let _e8: PointAndPlane = other_1907;
    let _e11: Motor = self_2217;
    let _e15: PointAndPlane = other_1907;
    let _e27: Motor = self_2217;
    let _e31: PointAndPlane = other_1907;
    let _e43: Motor = self_2217;
    let _e47: PointAndPlane = other_1907;
    let _e59: Motor = self_2217;
    let _e63: PointAndPlane = other_1907;
    let _e75: Motor = self_2217;
    let _e78: Motor = self_2217;
    let _e81: Motor = self_2217;
    let _e84: Motor = self_2217;
    let _e88: PointAndPlane = other_1907;
    let _e101: Motor = self_2217;
    let _e105: PointAndPlane = other_1907;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e43.g1_.z) * _e47.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e101.g0_.x) * _e105.g1_));
}

fn motor_point_and_plane_inner_product(self_2218: Motor, other_1908: PointAndPlane) -> PointAndPlane {
    var self_2219: Motor;
    var other_1909: PointAndPlane;

    self_2219 = self_2218;
    other_1909 = other_1908;
    let _e4: Motor = self_2219;
    let _e8: PointAndPlane = other_1909;
    let _e11: Motor = self_2219;
    let _e15: PointAndPlane = other_1909;
    let _e19: Motor = self_2219;
    let _e23: PointAndPlane = other_1909;
    let _e26: Motor = self_2219;
    let _e30: PointAndPlane = other_1909;
    let _e33: PointAndPlane = other_1909;
    let _e36: PointAndPlane = other_1909;
    let _e39: PointAndPlane = other_1909;
    let _e53: Motor = self_2219;
    let _e57: PointAndPlane = other_1909;
    let _e60: PointAndPlane = other_1909;
    let _e63: PointAndPlane = other_1909;
    let _e66: PointAndPlane = other_1909;
    let _e80: Motor = self_2219;
    let _e84: PointAndPlane = other_1909;
    let _e87: PointAndPlane = other_1909;
    let _e90: PointAndPlane = other_1909;
    let _e93: PointAndPlane = other_1909;
    let _e107: Motor = self_2219;
    let _e111: PointAndPlane = other_1909;
    let _e115: Motor = self_2219;
    let _e119: PointAndPlane = other_1909;
    let _e122: PointAndPlane = other_1909;
    let _e125: PointAndPlane = other_1909;
    let _e128: PointAndPlane = other_1909;
    let _e142: Motor = self_2219;
    let _e146: PointAndPlane = other_1909;
    let _e149: PointAndPlane = other_1909;
    let _e152: PointAndPlane = other_1909;
    let _e155: PointAndPlane = other_1909;
    let _e169: Motor = self_2219;
    let _e173: PointAndPlane = other_1909;
    let _e176: PointAndPlane = other_1909;
    let _e179: PointAndPlane = other_1909;
    let _e182: PointAndPlane = other_1909;
    return PointAndPlane(((vec4<f32>(_e4.g0_.x) * _e8.g0_) - (vec4<f32>(_e11.g1_.x) * _e15.g1_)), ((((((((vec4<f32>(_e19.g0_.x) * _e23.g1_) + ((vec4<f32>(_e26.g0_.y) * vec4<f32>(_e30.g0_.y, _e33.g0_.x, _e36.g1_.w, _e39.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e53.g0_.z) * vec4<f32>(_e57.g0_.z, _e60.g1_.w, _e63.g0_.x, _e66.g1_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e80.g0_.w) * vec4<f32>(_e84.g0_.w, _e87.g1_.z, _e90.g1_.y, _e93.g0_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) - (vec4<f32>(_e107.g1_.x) * _e111.g0_)) + ((vec4<f32>(_e115.g1_.y) * vec4<f32>(_e119.g1_.y, _e122.g1_.x, _e125.g0_.w, _e128.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e142.g1_.z) * vec4<f32>(_e146.g1_.z, _e149.g0_.w, _e152.g1_.x, _e155.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e169.g1_.w) * vec4<f32>(_e173.g1_.w, _e176.g0_.z, _e179.g0_.y, _e182.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn motor_point_and_plane_geometric_anti_product(self_2220: Motor, other_1910: PointAndPlane) -> PointAndPlane {
    var self_2221: Motor;
    var other_1911: PointAndPlane;

    self_2221 = self_2220;
    other_1911 = other_1910;
    let _e4: Motor = self_2221;
    let _e8: PointAndPlane = other_1911;
    let _e11: Motor = self_2221;
    let _e15: PointAndPlane = other_1911;
    let _e18: PointAndPlane = other_1911;
    let _e21: PointAndPlane = other_1911;
    let _e24: PointAndPlane = other_1911;
    let _e38: Motor = self_2221;
    let _e42: PointAndPlane = other_1911;
    let _e45: PointAndPlane = other_1911;
    let _e48: PointAndPlane = other_1911;
    let _e51: PointAndPlane = other_1911;
    let _e65: Motor = self_2221;
    let _e69: PointAndPlane = other_1911;
    let _e72: PointAndPlane = other_1911;
    let _e75: PointAndPlane = other_1911;
    let _e78: PointAndPlane = other_1911;
    let _e92: Motor = self_2221;
    let _e96: PointAndPlane = other_1911;
    let _e100: Motor = self_2221;
    let _e104: PointAndPlane = other_1911;
    let _e107: PointAndPlane = other_1911;
    let _e110: PointAndPlane = other_1911;
    let _e113: PointAndPlane = other_1911;
    let _e127: Motor = self_2221;
    let _e131: PointAndPlane = other_1911;
    let _e134: PointAndPlane = other_1911;
    let _e137: PointAndPlane = other_1911;
    let _e140: PointAndPlane = other_1911;
    let _e154: Motor = self_2221;
    let _e158: PointAndPlane = other_1911;
    let _e161: PointAndPlane = other_1911;
    let _e164: PointAndPlane = other_1911;
    let _e167: PointAndPlane = other_1911;
    let _e181: Motor = self_2221;
    let _e185: PointAndPlane = other_1911;
    let _e188: Motor = self_2221;
    let _e192: PointAndPlane = other_1911;
    let _e195: PointAndPlane = other_1911;
    let _e198: PointAndPlane = other_1911;
    let _e201: PointAndPlane = other_1911;
    let _e215: Motor = self_2221;
    let _e219: PointAndPlane = other_1911;
    let _e222: PointAndPlane = other_1911;
    let _e225: PointAndPlane = other_1911;
    let _e228: PointAndPlane = other_1911;
    let _e242: Motor = self_2221;
    let _e246: PointAndPlane = other_1911;
    let _e249: PointAndPlane = other_1911;
    let _e252: PointAndPlane = other_1911;
    let _e255: PointAndPlane = other_1911;
    let _e269: Motor = self_2221;
    let _e273: PointAndPlane = other_1911;
    let _e277: Motor = self_2221;
    let _e281: PointAndPlane = other_1911;
    let _e284: PointAndPlane = other_1911;
    let _e287: PointAndPlane = other_1911;
    let _e290: PointAndPlane = other_1911;
    let _e304: Motor = self_2221;
    let _e308: PointAndPlane = other_1911;
    let _e311: PointAndPlane = other_1911;
    let _e314: PointAndPlane = other_1911;
    let _e317: PointAndPlane = other_1911;
    let _e331: Motor = self_2221;
    let _e335: PointAndPlane = other_1911;
    let _e338: PointAndPlane = other_1911;
    let _e341: PointAndPlane = other_1911;
    let _e344: PointAndPlane = other_1911;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.x, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g0_.z, _e45.g1_.w, _e48.g0_.x, _e51.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w, _e72.g1_.z, _e75.g1_.y, _e78.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e92.g1_.x) * _e96.g0_)) + ((vec4<f32>(_e100.g1_.y) * vec4<f32>(_e104.g1_.y, _e107.g1_.x, _e110.g0_.w, _e113.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e127.g1_.z) * vec4<f32>(_e131.g1_.z, _e134.g0_.w, _e137.g1_.x, _e140.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e154.g1_.w) * vec4<f32>(_e158.g1_.w, _e161.g0_.z, _e164.g0_.y, _e167.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e181.g0_.x) * _e185.g0_) + ((vec4<f32>(_e188.g0_.y) * vec4<f32>(_e192.g1_.y, _e195.g1_.x, _e198.g0_.w, _e201.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e215.g0_.z) * vec4<f32>(_e219.g1_.z, _e222.g0_.w, _e225.g1_.x, _e228.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e242.g0_.w) * vec4<f32>(_e246.g1_.w, _e249.g0_.z, _e252.g0_.y, _e255.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e269.g1_.x) * _e273.g1_)) + ((vec4<f32>(_e277.g1_.y) * vec4<f32>(_e281.g0_.y, _e284.g0_.x, _e287.g1_.w, _e290.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e304.g1_.z) * vec4<f32>(_e308.g0_.z, _e311.g1_.w, _e314.g0_.x, _e317.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e331.g1_.w) * vec4<f32>(_e335.g0_.w, _e338.g1_.z, _e341.g1_.y, _e344.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn motor_point_and_plane_inner_anti_product(self_2222: Motor, other_1912: PointAndPlane) -> PointAndPlane {
    var self_2223: Motor;
    var other_1913: PointAndPlane;

    self_2223 = self_2222;
    other_1913 = other_1912;
    let _e4: Motor = self_2223;
    let _e8: PointAndPlane = other_1913;
    let _e11: Motor = self_2223;
    let _e15: PointAndPlane = other_1913;
    let _e18: PointAndPlane = other_1913;
    let _e21: PointAndPlane = other_1913;
    let _e24: PointAndPlane = other_1913;
    let _e38: Motor = self_2223;
    let _e42: PointAndPlane = other_1913;
    let _e45: PointAndPlane = other_1913;
    let _e48: PointAndPlane = other_1913;
    let _e51: PointAndPlane = other_1913;
    let _e65: Motor = self_2223;
    let _e69: PointAndPlane = other_1913;
    let _e72: PointAndPlane = other_1913;
    let _e75: PointAndPlane = other_1913;
    let _e78: PointAndPlane = other_1913;
    let _e92: Motor = self_2223;
    let _e96: PointAndPlane = other_1913;
    let _e100: Motor = self_2223;
    let _e104: PointAndPlane = other_1913;
    let _e107: PointAndPlane = other_1913;
    let _e110: PointAndPlane = other_1913;
    let _e113: PointAndPlane = other_1913;
    let _e127: Motor = self_2223;
    let _e131: PointAndPlane = other_1913;
    let _e134: PointAndPlane = other_1913;
    let _e137: PointAndPlane = other_1913;
    let _e140: PointAndPlane = other_1913;
    let _e154: Motor = self_2223;
    let _e158: PointAndPlane = other_1913;
    let _e161: PointAndPlane = other_1913;
    let _e164: PointAndPlane = other_1913;
    let _e167: PointAndPlane = other_1913;
    let _e181: Motor = self_2223;
    let _e185: PointAndPlane = other_1913;
    let _e188: Motor = self_2223;
    let _e192: PointAndPlane = other_1913;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.x, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e38.g0_.z) * vec4<f32>(_e42.g0_.z, _e45.g1_.w, _e48.g0_.x, _e51.g1_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e65.g0_.w) * vec4<f32>(_e69.g0_.w, _e72.g1_.z, _e75.g1_.y, _e78.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + (vec4<f32>(_e92.g1_.x) * _e96.g0_)) + ((vec4<f32>(_e100.g1_.y) * vec4<f32>(_e104.g1_.y, _e107.g1_.x, _e110.g0_.w, _e113.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e127.g1_.z) * vec4<f32>(_e131.g1_.z, _e134.g0_.w, _e137.g1_.x, _e140.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e154.g1_.w) * vec4<f32>(_e158.g1_.w, _e161.g0_.z, _e164.g0_.y, _e167.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((vec4<f32>(_e181.g0_.x) * _e185.g0_) + (vec4<f32>(_e188.g1_.x) * _e192.g1_)));
}

fn motor_point_and_plane_left_contraction(self_2224: Motor, other_1914: PointAndPlane) -> PointAndPlane {
    var self_2225: Motor;
    var other_1915: PointAndPlane;

    self_2225 = self_2224;
    other_1915 = other_1914;
    let _e4: Motor = self_2225;
    let _e8: PointAndPlane = other_1915;
    let _e11: Motor = self_2225;
    let _e15: PointAndPlane = other_1915;
    let _e18: Motor = self_2225;
    let _e22: PointAndPlane = other_1915;
    let _e34: Motor = self_2225;
    let _e38: PointAndPlane = other_1915;
    let _e50: Motor = self_2225;
    let _e54: PointAndPlane = other_1915;
    let _e66: Motor = self_2225;
    let _e70: PointAndPlane = other_1915;
    let _e82: Motor = self_2225;
    let _e85: Motor = self_2225;
    let _e88: Motor = self_2225;
    let _e91: Motor = self_2225;
    let _e95: PointAndPlane = other_1915;
    return PointAndPlane((vec4<f32>(_e4.g0_.x) * _e8.g0_), ((((((vec4<f32>(_e11.g0_.x) * _e15.g1_) + ((vec4<f32>(_e18.g0_.z) * _e22.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e34.g0_.w) * _e38.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e66.g1_.w) * _e70.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e82.g0_.y, _e85.g0_.y, _e88.g1_.y, _e91.g1_.y) * _e95.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_point_and_plane_right_contraction(self_2226: Motor, other_1916: PointAndPlane) -> PointAndPlane {
    var self_2227: Motor;
    var other_1917: PointAndPlane;

    self_2227 = self_2226;
    other_1917 = other_1916;
    let _e6: Motor = self_2227;
    let _e10: PointAndPlane = other_1917;
    let _e14: Motor = self_2227;
    let _e18: PointAndPlane = other_1917;
    let _e29: Motor = self_2227;
    let _e33: PointAndPlane = other_1917;
    let _e45: Motor = self_2227;
    let _e49: PointAndPlane = other_1917;
    let _e53: Motor = self_2227;
    let _e57: PointAndPlane = other_1917;
    let _e69: Motor = self_2227;
    let _e73: PointAndPlane = other_1917;
    let _e85: Motor = self_2227;
    let _e88: Motor = self_2227;
    let _e91: Motor = self_2227;
    let _e94: Motor = self_2227;
    let _e98: PointAndPlane = other_1917;
    return PointAndPlane((vec4<f32>(0.0) - (vec4<f32>(_e6.g1_.x) * _e10.g1_)), (((((((vec4<f32>(_e14.g0_.z) * _e18.g1_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.w) * _e33.g1_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) - (vec4<f32>(_e45.g1_.x) * _e49.g0_)) + ((vec4<f32>(_e53.g1_.z) * _e57.g1_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e69.g1_.w) * _e73.g1_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e85.g1_.y, _e88.g1_.y, _e91.g0_.y, _e94.g0_.y) * _e98.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))));
}

fn motor_point_and_plane_left_anti_contraction(self_2228: Motor, other_1918: PointAndPlane) -> PointAndPlane {
    var self_2229: Motor;
    var other_1919: PointAndPlane;

    self_2229 = self_2228;
    other_1919 = other_1918;
    let _e4: Motor = self_2229;
    let _e8: PointAndPlane = other_1919;
    let _e19: Motor = self_2229;
    let _e23: PointAndPlane = other_1919;
    let _e35: Motor = self_2229;
    let _e39: PointAndPlane = other_1919;
    let _e43: Motor = self_2229;
    let _e47: PointAndPlane = other_1919;
    let _e59: Motor = self_2229;
    let _e63: PointAndPlane = other_1919;
    let _e75: Motor = self_2229;
    let _e78: Motor = self_2229;
    let _e81: Motor = self_2229;
    let _e84: Motor = self_2229;
    let _e88: PointAndPlane = other_1919;
    let _e101: Motor = self_2229;
    let _e105: PointAndPlane = other_1919;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g1_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e19.g0_.w) * _e23.g1_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e35.g1_.x) * _e39.g0_)) + ((vec4<f32>(_e43.g1_.z) * _e47.g1_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g1_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e75.g1_.y, _e78.g1_.y, _e81.g0_.y, _e84.g0_.y) * _e88.g1_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (vec4<f32>(_e101.g1_.x) * _e105.g1_));
}

fn motor_point_and_plane_right_anti_contraction(self_2230: Motor, other_1920: PointAndPlane) -> PointAndPlane {
    var self_2231: Motor;
    var other_1921: PointAndPlane;

    self_2231 = self_2230;
    other_1921 = other_1920;
    let _e4: Motor = self_2231;
    let _e8: PointAndPlane = other_1921;
    let _e11: Motor = self_2231;
    let _e15: PointAndPlane = other_1921;
    let _e27: Motor = self_2231;
    let _e31: PointAndPlane = other_1921;
    let _e43: Motor = self_2231;
    let _e47: PointAndPlane = other_1921;
    let _e59: Motor = self_2231;
    let _e63: PointAndPlane = other_1921;
    let _e75: Motor = self_2231;
    let _e78: Motor = self_2231;
    let _e81: Motor = self_2231;
    let _e84: Motor = self_2231;
    let _e88: PointAndPlane = other_1921;
    let _e101: Motor = self_2231;
    let _e105: PointAndPlane = other_1921;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(1.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(1.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g0_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))), (vec4<f32>(_e101.g0_.x) * _e105.g0_));
}

fn motor_squared_magnitude(self_2232: Motor) -> Scalar {
    var self_2233: Motor;

    self_2233 = self_2232;
    let _e2: Motor = self_2233;
    let _e3: Motor = self_2233;
    let _e4: Motor = motor_reversal(_e3);
    let _e5: Scalar = motor_motor_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_magnitude(self_2234: Motor) -> Scalar {
    var self_2235: Motor;

    self_2235 = self_2234;
    let _e2: Motor = self_2235;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_bulk_norm(self_2236: Motor) -> Scalar {
    var self_2237: Motor;

    self_2237 = self_2236;
    let _e2: Motor = self_2237;
    let _e3: Scalar = motor_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn motor_squared_anti_magnitude(self_2238: Motor) -> AntiScalar {
    var self_2239: Motor;

    self_2239 = self_2238;
    let _e2: Motor = self_2239;
    let _e3: Motor = self_2239;
    let _e4: Motor = motor_anti_reversal(_e3);
    let _e5: AntiScalar = motor_motor_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn motor_weight_norm(self_2240: Motor) -> AntiScalar {
    var self_2241: Motor;

    self_2241 = self_2240;
    let _e2: Motor = self_2241;
    let _e3: AntiScalar = motor_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn motor_scale(self_2242: Motor, other_1922: f32) -> Motor {
    var self_2243: Motor;
    var other_1923: f32;

    self_2243 = self_2242;
    other_1923 = other_1922;
    let _e4: Motor = self_2243;
    let _e5: f32 = other_1923;
    let _e7: Motor = motor_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn motor_signum(self_2244: Motor) -> Motor {
    var self_2245: Motor;

    self_2245 = self_2244;
    let _e2: Motor = self_2245;
    let _e3: Motor = self_2245;
    let _e4: Scalar = motor_magnitude(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn motor_inverse(self_2246: Motor) -> Motor {
    var self_2247: Motor;

    self_2247 = self_2246;
    let _e2: Motor = self_2247;
    let _e3: Motor = motor_reversal(_e2);
    let _e4: Motor = self_2247;
    let _e5: Scalar = motor_squared_magnitude(_e4);
    let _e10: Motor = motor_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn motor_unitize(self_2248: Motor) -> Motor {
    var self_2249: Motor;

    self_2249 = self_2248;
    let _e2: Motor = self_2249;
    let _e3: Motor = self_2249;
    let _e4: AntiScalar = motor_weight_norm(_e3);
    let _e9: Motor = motor_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_and_plane_zero() -> PointAndPlane {
    return PointAndPlane(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn point_and_plane_one() -> PointAndPlane {
    return PointAndPlane(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn point_and_plane_neg(self_2250: PointAndPlane) -> PointAndPlane {
    var self_2251: PointAndPlane;

    self_2251 = self_2250;
    let _e2: PointAndPlane = self_2251;
    let _e8: PointAndPlane = self_2251;
    return PointAndPlane((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn point_and_plane_automorphism(self_2252: PointAndPlane) -> PointAndPlane {
    var self_2253: PointAndPlane;

    self_2253 = self_2252;
    let _e2: PointAndPlane = self_2253;
    let _e8: PointAndPlane = self_2253;
    return PointAndPlane((_e2.g0_ * vec4<f32>(-(1.0))), (_e8.g1_ * vec4<f32>(-(1.0))));
}

fn point_and_plane_reversal(self_2254: PointAndPlane) -> PointAndPlane {
    var self_2255: PointAndPlane;

    self_2255 = self_2254;
    let _e2: PointAndPlane = self_2255;
    let _e8: PointAndPlane = self_2255;
    return PointAndPlane((_e2.g0_ * vec4<f32>(-(1.0))), _e8.g1_);
}

fn point_and_plane_conjugation(self_2256: PointAndPlane) -> PointAndPlane {
    var self_2257: PointAndPlane;

    self_2257 = self_2256;
    let _e2: PointAndPlane = self_2257;
    let _e4: PointAndPlane = self_2257;
    return PointAndPlane(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))));
}

fn point_and_plane_dual(self_2258: PointAndPlane) -> PointAndPlane {
    var self_2259: PointAndPlane;

    self_2259 = self_2258;
    let _e2: PointAndPlane = self_2259;
    let _e4: PointAndPlane = self_2259;
    return PointAndPlane(_e2.g1_, (_e4.g0_ * vec4<f32>(-(1.0))));
}

fn point_and_plane_anti_reversal(self_2260: PointAndPlane) -> PointAndPlane {
    var self_2261: PointAndPlane;

    self_2261 = self_2260;
    let _e2: PointAndPlane = self_2261;
    let _e4: PointAndPlane = self_2261;
    return PointAndPlane(_e2.g0_, (_e4.g1_ * vec4<f32>(-(1.0))));
}

fn point_and_plane_scalar_geometric_product(self_2262: PointAndPlane, other_1924: Scalar) -> PointAndPlane {
    var self_2263: PointAndPlane;
    var other_1925: Scalar;

    self_2263 = self_2262;
    other_1925 = other_1924;
    let _e4: PointAndPlane = self_2263;
    let _e6: Scalar = other_1925;
    let _e10: PointAndPlane = self_2263;
    let _e12: Scalar = other_1925;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_scalar_outer_product(self_2264: PointAndPlane, other_1926: Scalar) -> PointAndPlane {
    var self_2265: PointAndPlane;
    var other_1927: Scalar;

    self_2265 = self_2264;
    other_1927 = other_1926;
    let _e4: PointAndPlane = self_2265;
    let _e6: Scalar = other_1927;
    let _e10: PointAndPlane = self_2265;
    let _e12: Scalar = other_1927;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_scalar_inner_product(self_2266: PointAndPlane, other_1928: Scalar) -> PointAndPlane {
    var self_2267: PointAndPlane;
    var other_1929: Scalar;

    self_2267 = self_2266;
    other_1929 = other_1928;
    let _e4: PointAndPlane = self_2267;
    let _e6: Scalar = other_1929;
    let _e10: PointAndPlane = self_2267;
    let _e12: Scalar = other_1929;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_scalar_geometric_anti_product(self_2268: PointAndPlane, other_1930: Scalar) -> PointAndPlane {
    var self_2269: PointAndPlane;
    var other_1931: Scalar;

    self_2269 = self_2268;
    other_1931 = other_1930;
    let _e4: PointAndPlane = self_2269;
    let _e6: Scalar = other_1931;
    let _e14: PointAndPlane = self_2269;
    let _e16: Scalar = other_1931;
    return PointAndPlane(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))), ((_e14.g0_ * vec4<f32>(_e16.g0_)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_scalar_inner_anti_product(self_2270: PointAndPlane, other_1932: Scalar) -> PointAndPlane {
    var self_2271: PointAndPlane;
    var other_1933: Scalar;

    self_2271 = self_2270;
    other_1933 = other_1932;
    let _e4: PointAndPlane = self_2271;
    let _e6: Scalar = other_1933;
    let _e14: PointAndPlane = self_2271;
    let _e16: Scalar = other_1933;
    return PointAndPlane(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))), ((_e14.g0_ * vec4<f32>(_e16.g0_)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_scalar_right_contraction(self_2272: PointAndPlane, other_1934: Scalar) -> PointAndPlane {
    var self_2273: PointAndPlane;
    var other_1935: Scalar;

    self_2273 = self_2272;
    other_1935 = other_1934;
    let _e4: PointAndPlane = self_2273;
    let _e6: Scalar = other_1935;
    let _e10: PointAndPlane = self_2273;
    let _e12: Scalar = other_1935;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_scalar_left_anti_contraction(self_2274: PointAndPlane, other_1936: Scalar) -> PointAndPlane {
    var self_2275: PointAndPlane;
    var other_1937: Scalar;

    self_2275 = self_2274;
    other_1937 = other_1936;
    let _e4: PointAndPlane = self_2275;
    let _e6: Scalar = other_1937;
    let _e14: PointAndPlane = self_2275;
    let _e16: Scalar = other_1937;
    return PointAndPlane(((_e4.g1_ * vec4<f32>(_e6.g0_)) * vec4<f32>(-(1.0))), ((_e14.g0_ * vec4<f32>(_e16.g0_)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_anti_scalar_geometric_product(self_2276: PointAndPlane, other_1938: AntiScalar) -> PointAndPlane {
    var self_2277: PointAndPlane;
    var other_1939: AntiScalar;

    self_2277 = self_2276;
    other_1939 = other_1938;
    let _e4: PointAndPlane = self_2277;
    let _e6: AntiScalar = other_1939;
    let _e10: PointAndPlane = self_2277;
    let _e12: AntiScalar = other_1939;
    return PointAndPlane((_e4.g1_ * vec4<f32>(_e6.g0_)), (_e10.g0_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_regressive_product(self_2278: PointAndPlane, other_1940: AntiScalar) -> PointAndPlane {
    var self_2279: PointAndPlane;
    var other_1941: AntiScalar;

    self_2279 = self_2278;
    other_1941 = other_1940;
    let _e4: PointAndPlane = self_2279;
    let _e6: AntiScalar = other_1941;
    let _e10: PointAndPlane = self_2279;
    let _e12: AntiScalar = other_1941;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_inner_product(self_2280: PointAndPlane, other_1942: AntiScalar) -> PointAndPlane {
    var self_2281: PointAndPlane;
    var other_1943: AntiScalar;

    self_2281 = self_2280;
    other_1943 = other_1942;
    let _e4: PointAndPlane = self_2281;
    let _e6: AntiScalar = other_1943;
    let _e10: PointAndPlane = self_2281;
    let _e12: AntiScalar = other_1943;
    return PointAndPlane((_e4.g1_ * vec4<f32>(_e6.g0_)), (_e10.g0_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_geometric_anti_product(self_2282: PointAndPlane, other_1944: AntiScalar) -> PointAndPlane {
    var self_2283: PointAndPlane;
    var other_1945: AntiScalar;

    self_2283 = self_2282;
    other_1945 = other_1944;
    let _e4: PointAndPlane = self_2283;
    let _e6: AntiScalar = other_1945;
    let _e10: PointAndPlane = self_2283;
    let _e12: AntiScalar = other_1945;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_inner_anti_product(self_2284: PointAndPlane, other_1946: AntiScalar) -> PointAndPlane {
    var self_2285: PointAndPlane;
    var other_1947: AntiScalar;

    self_2285 = self_2284;
    other_1947 = other_1946;
    let _e4: PointAndPlane = self_2285;
    let _e6: AntiScalar = other_1947;
    let _e10: PointAndPlane = self_2285;
    let _e12: AntiScalar = other_1947;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_left_contraction(self_2286: PointAndPlane, other_1948: AntiScalar) -> PointAndPlane {
    var self_2287: PointAndPlane;
    var other_1949: AntiScalar;

    self_2287 = self_2286;
    other_1949 = other_1948;
    let _e4: PointAndPlane = self_2287;
    let _e6: AntiScalar = other_1949;
    let _e10: PointAndPlane = self_2287;
    let _e12: AntiScalar = other_1949;
    return PointAndPlane((_e4.g1_ * vec4<f32>(_e6.g0_)), (_e10.g0_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_anti_scalar_right_anti_contraction(self_2288: PointAndPlane, other_1950: AntiScalar) -> PointAndPlane {
    var self_2289: PointAndPlane;
    var other_1951: AntiScalar;

    self_2289 = self_2288;
    other_1951 = other_1950;
    let _e4: PointAndPlane = self_2289;
    let _e6: AntiScalar = other_1951;
    let _e10: PointAndPlane = self_2289;
    let _e12: AntiScalar = other_1951;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_)), (_e10.g1_ * vec4<f32>(_e12.g0_)));
}

fn point_and_plane_multi_vector_add(self_2290: PointAndPlane, other_1952: MultiVector) -> MultiVector {
    var self_2291: PointAndPlane;
    var other_1953: MultiVector;

    self_2291 = self_2290;
    other_1953 = other_1952;
    let _e4: MultiVector = other_1953;
    let _e6: PointAndPlane = self_2291;
    let _e9: PointAndPlane = self_2291;
    let _e12: PointAndPlane = self_2291;
    let _e15: PointAndPlane = self_2291;
    let _e19: MultiVector = other_1953;
    let _e22: PointAndPlane = self_2291;
    let _e25: PointAndPlane = self_2291;
    let _e28: PointAndPlane = self_2291;
    let _e31: PointAndPlane = self_2291;
    let _e35: MultiVector = other_1953;
    let _e38: MultiVector = other_1953;
    return MultiVector(_e4.g0_, (vec4<f32>(_e6.g1_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.w) + _e19.g1_), (vec4<f32>(_e22.g0_.x, _e25.g1_.y, _e28.g1_.z, _e31.g1_.w) + _e35.g2_), _e38.g3_);
}

fn point_and_plane_multi_vector_sub(self_2292: PointAndPlane, other_1954: MultiVector) -> MultiVector {
    var self_2293: PointAndPlane;
    var other_1955: MultiVector;

    self_2293 = self_2292;
    other_1955 = other_1954;
    let _e6: MultiVector = other_1955;
    let _e9: PointAndPlane = self_2293;
    let _e12: PointAndPlane = self_2293;
    let _e15: PointAndPlane = self_2293;
    let _e18: PointAndPlane = self_2293;
    let _e22: MultiVector = other_1955;
    let _e25: PointAndPlane = self_2293;
    let _e28: PointAndPlane = self_2293;
    let _e31: PointAndPlane = self_2293;
    let _e34: PointAndPlane = self_2293;
    let _e38: MultiVector = other_1955;
    let _e43: MultiVector = other_1955;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), (vec4<f32>(_e9.g1_.x, _e12.g0_.y, _e15.g0_.z, _e18.g0_.w) - _e22.g1_), (vec4<f32>(_e25.g0_.x, _e28.g1_.y, _e31.g1_.z, _e34.g1_.w) - _e38.g2_), (vec4<f32>(0.0) - _e43.g3_));
}

fn point_and_plane_multi_vector_geometric_product(self_2294: PointAndPlane, other_1956: MultiVector) -> MultiVector {
    var self_2295: PointAndPlane;
    var other_1957: MultiVector;

    self_2295 = self_2294;
    other_1957 = other_1956;
    let _e4: PointAndPlane = self_2295;
    let _e8: MultiVector = other_1957;
    let _e18: PointAndPlane = self_2295;
    let _e22: MultiVector = other_1957;
    let _e36: PointAndPlane = self_2295;
    let _e40: MultiVector = other_1957;
    let _e54: PointAndPlane = self_2295;
    let _e58: MultiVector = other_1957;
    let _e72: PointAndPlane = self_2295;
    let _e76: MultiVector = other_1957;
    let _e89: PointAndPlane = self_2295;
    let _e93: MultiVector = other_1957;
    let _e105: PointAndPlane = self_2295;
    let _e109: MultiVector = other_1957;
    let _e121: PointAndPlane = self_2295;
    let _e125: MultiVector = other_1957;
    let _e137: PointAndPlane = self_2295;
    let _e141: MultiVector = other_1957;
    let _e144: PointAndPlane = self_2295;
    let _e148: MultiVector = other_1957;
    let _e160: PointAndPlane = self_2295;
    let _e164: MultiVector = other_1957;
    let _e176: PointAndPlane = self_2295;
    let _e180: MultiVector = other_1957;
    let _e192: PointAndPlane = self_2295;
    let _e196: MultiVector = other_1957;
    let _e209: PointAndPlane = self_2295;
    let _e213: MultiVector = other_1957;
    let _e226: PointAndPlane = self_2295;
    let _e230: MultiVector = other_1957;
    let _e243: PointAndPlane = self_2295;
    let _e247: MultiVector = other_1957;
    let _e260: PointAndPlane = self_2295;
    let _e264: MultiVector = other_1957;
    let _e276: PointAndPlane = self_2295;
    let _e280: MultiVector = other_1957;
    let _e293: PointAndPlane = self_2295;
    let _e297: MultiVector = other_1957;
    let _e310: PointAndPlane = self_2295;
    let _e314: MultiVector = other_1957;
    let _e327: PointAndPlane = self_2295;
    let _e331: MultiVector = other_1957;
    let _e335: PointAndPlane = self_2295;
    let _e339: MultiVector = other_1957;
    let _e351: PointAndPlane = self_2295;
    let _e355: MultiVector = other_1957;
    let _e367: PointAndPlane = self_2295;
    let _e371: MultiVector = other_1957;
    let _e385: PointAndPlane = self_2295;
    let _e389: MultiVector = other_1957;
    let _e393: PointAndPlane = self_2295;
    let _e397: MultiVector = other_1957;
    let _e410: PointAndPlane = self_2295;
    let _e414: MultiVector = other_1957;
    let _e427: PointAndPlane = self_2295;
    let _e431: MultiVector = other_1957;
    let _e444: PointAndPlane = self_2295;
    let _e448: MultiVector = other_1957;
    let _e452: PointAndPlane = self_2295;
    let _e456: MultiVector = other_1957;
    let _e469: PointAndPlane = self_2295;
    let _e473: MultiVector = other_1957;
    let _e486: PointAndPlane = self_2295;
    let _e490: MultiVector = other_1957;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.x) * _e8.g2_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g0_.y) * _e22.g1_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e36.g0_.z) * _e40.g1_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e54.g0_.w) * _e58.g1_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e72.g1_.x) * _e76.g1_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e89.g1_.y) * _e93.g2_.yxwz) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e105.g1_.z) * _e109.g2_.zwxy) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e121.g1_.w) * _e125.g2_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(_e137.g0_.x) * _e141.g3_) + ((vec4<f32>(_e144.g0_.y) * _e148.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e160.g0_.z) * _e164.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e176.g0_.w) * _e180.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e192.g1_.x) * _e196.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e209.g1_.y) * _e213.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e226.g1_.z) * _e230.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e243.g1_.w) * _e247.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))), (((((((((vec4<f32>(_e260.g0_.x) * _e264.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e276.g0_.y) * _e280.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e293.g0_.z) * _e297.g3_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e310.g0_.w) * _e314.g3_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + (vec4<f32>(_e327.g1_.x) * _e331.g3_)) + ((vec4<f32>(_e335.g1_.y) * _e339.g0_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e351.g1_.z) * _e355.g0_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e367.g1_.w) * _e371.g0_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(0.0) - (vec4<f32>(_e385.g0_.x) * _e389.g1_)) + ((vec4<f32>(_e393.g0_.y) * _e397.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e410.g0_.z) * _e414.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e427.g0_.w) * _e431.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + (vec4<f32>(_e444.g1_.x) * _e448.g2_)) + ((vec4<f32>(_e452.g1_.y) * _e456.g1_.yxwz) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e469.g1_.z) * _e473.g1_.zwxy) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e486.g1_.w) * _e490.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn point_and_plane_multi_vector_geometric_anti_product(self_2296: PointAndPlane, other_1958: MultiVector) -> MultiVector {
    var self_2297: PointAndPlane;
    var other_1959: MultiVector;

    self_2297 = self_2296;
    other_1959 = other_1958;
    let _e4: PointAndPlane = self_2297;
    let _e8: MultiVector = other_1959;
    let _e18: PointAndPlane = self_2297;
    let _e22: MultiVector = other_1959;
    let _e36: PointAndPlane = self_2297;
    let _e40: MultiVector = other_1959;
    let _e54: PointAndPlane = self_2297;
    let _e58: MultiVector = other_1959;
    let _e72: PointAndPlane = self_2297;
    let _e76: MultiVector = other_1959;
    let _e89: PointAndPlane = self_2297;
    let _e93: MultiVector = other_1959;
    let _e105: PointAndPlane = self_2297;
    let _e109: MultiVector = other_1959;
    let _e121: PointAndPlane = self_2297;
    let _e125: MultiVector = other_1959;
    let _e137: PointAndPlane = self_2297;
    let _e141: MultiVector = other_1959;
    let _e151: PointAndPlane = self_2297;
    let _e155: MultiVector = other_1959;
    let _e168: PointAndPlane = self_2297;
    let _e172: MultiVector = other_1959;
    let _e185: PointAndPlane = self_2297;
    let _e189: MultiVector = other_1959;
    let _e202: PointAndPlane = self_2297;
    let _e206: MultiVector = other_1959;
    let _e210: PointAndPlane = self_2297;
    let _e214: MultiVector = other_1959;
    let _e228: PointAndPlane = self_2297;
    let _e232: MultiVector = other_1959;
    let _e246: PointAndPlane = self_2297;
    let _e250: MultiVector = other_1959;
    let _e264: PointAndPlane = self_2297;
    let _e268: MultiVector = other_1959;
    let _e271: PointAndPlane = self_2297;
    let _e275: MultiVector = other_1959;
    let _e289: PointAndPlane = self_2297;
    let _e293: MultiVector = other_1959;
    let _e307: PointAndPlane = self_2297;
    let _e311: MultiVector = other_1959;
    let _e325: PointAndPlane = self_2297;
    let _e329: MultiVector = other_1959;
    let _e340: PointAndPlane = self_2297;
    let _e344: MultiVector = other_1959;
    let _e357: PointAndPlane = self_2297;
    let _e361: MultiVector = other_1959;
    let _e374: PointAndPlane = self_2297;
    let _e378: MultiVector = other_1959;
    let _e391: PointAndPlane = self_2297;
    let _e395: MultiVector = other_1959;
    let _e398: PointAndPlane = self_2297;
    let _e402: MultiVector = other_1959;
    let _e415: PointAndPlane = self_2297;
    let _e419: MultiVector = other_1959;
    let _e432: PointAndPlane = self_2297;
    let _e436: MultiVector = other_1959;
    let _e449: PointAndPlane = self_2297;
    let _e453: MultiVector = other_1959;
    let _e457: PointAndPlane = self_2297;
    let _e461: MultiVector = other_1959;
    let _e474: PointAndPlane = self_2297;
    let _e478: MultiVector = other_1959;
    let _e491: PointAndPlane = self_2297;
    let _e495: MultiVector = other_1959;
    return MultiVector((((((((((vec4<f32>(_e4.g0_.x) * _e8.g1_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g0_.y) * _e22.g2_.yxwz) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e36.g0_.z) * _e40.g2_.zwxy) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e54.g0_.w) * _e58.g2_.wzyx) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e72.g1_.x) * _e76.g2_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e89.g1_.y) * _e93.g1_.yxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e105.g1_.z) * _e109.g1_.zwxy) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e121.g1_.w) * _e125.g1_.wzyx) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), (((((((((vec4<f32>(_e137.g0_.x) * _e141.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e151.g0_.y) * _e155.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e168.g0_.z) * _e172.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e185.g0_.w) * _e189.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + (vec4<f32>(_e202.g1_.x) * _e206.g3_)) + ((vec4<f32>(_e210.g1_.y) * _e214.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e228.g1_.z) * _e232.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e246.g1_.w) * _e250.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((((((vec4<f32>(_e264.g0_.x) * _e268.g3_) + ((vec4<f32>(_e271.g0_.y) * _e275.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e289.g0_.z) * _e293.g0_.zwxy) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e307.g0_.w) * _e311.g0_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e325.g1_.x) * _e329.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e340.g1_.y) * _e344.g3_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e357.g1_.z) * _e361.g3_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e374.g1_.w) * _e378.g3_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e391.g0_.x) * _e395.g2_) + ((vec4<f32>(_e398.g0_.y) * _e402.g1_.yxwz) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e415.g0_.z) * _e419.g1_.zwxy) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e432.g0_.w) * _e436.g1_.wzyx) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) - (vec4<f32>(_e449.g1_.x) * _e453.g1_)) + ((vec4<f32>(_e457.g1_.y) * _e461.g2_.yxwz) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e474.g1_.z) * _e478.g2_.zwxy) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e491.g1_.w) * _e495.g2_.wzyx) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_multi_vector_scalar_product(self_2298: PointAndPlane, other_1960: MultiVector) -> Scalar {
    var self_2299: PointAndPlane;
    var other_1961: MultiVector;

    self_2299 = self_2298;
    other_1961 = other_1960;
    let _e5: PointAndPlane = self_2299;
    let _e8: MultiVector = other_1961;
    let _e13: PointAndPlane = self_2299;
    let _e16: MultiVector = other_1961;
    let _e21: PointAndPlane = self_2299;
    let _e24: MultiVector = other_1961;
    let _e29: PointAndPlane = self_2299;
    let _e32: MultiVector = other_1961;
    let _e37: PointAndPlane = self_2299;
    let _e40: MultiVector = other_1961;
    let _e45: PointAndPlane = self_2299;
    let _e48: MultiVector = other_1961;
    let _e53: PointAndPlane = self_2299;
    let _e56: MultiVector = other_1961;
    let _e61: PointAndPlane = self_2299;
    let _e64: MultiVector = other_1961;
    return Scalar(((((((((0.0 - (_e5.g0_.x * _e8.g2_.x)) - (_e13.g0_.y * _e16.g1_.y)) - (_e21.g0_.z * _e24.g1_.z)) - (_e29.g0_.w * _e32.g1_.w)) + (_e37.g1_.x * _e40.g1_.x)) + (_e45.g1_.y * _e48.g2_.y)) + (_e53.g1_.z * _e56.g2_.z)) + (_e61.g1_.w * _e64.g2_.w)));
}

fn point_and_plane_multi_vector_anti_scalar_product(self_2300: PointAndPlane, other_1962: MultiVector) -> AntiScalar {
    var self_2301: PointAndPlane;
    var other_1963: MultiVector;

    self_2301 = self_2300;
    other_1963 = other_1962;
    let _e4: PointAndPlane = self_2301;
    let _e7: MultiVector = other_1963;
    let _e11: PointAndPlane = self_2301;
    let _e14: MultiVector = other_1963;
    let _e19: PointAndPlane = self_2301;
    let _e22: MultiVector = other_1963;
    let _e27: PointAndPlane = self_2301;
    let _e30: MultiVector = other_1963;
    let _e35: PointAndPlane = self_2301;
    let _e38: MultiVector = other_1963;
    let _e43: PointAndPlane = self_2301;
    let _e46: MultiVector = other_1963;
    let _e51: PointAndPlane = self_2301;
    let _e54: MultiVector = other_1963;
    let _e59: PointAndPlane = self_2301;
    let _e62: MultiVector = other_1963;
    return AntiScalar(((((((((_e4.g0_.x * _e7.g2_.x) + (_e11.g0_.y * _e14.g1_.y)) + (_e19.g0_.z * _e22.g1_.z)) + (_e27.g0_.w * _e30.g1_.w)) - (_e35.g1_.x * _e38.g1_.x)) - (_e43.g1_.y * _e46.g2_.y)) - (_e51.g1_.z * _e54.g2_.z)) - (_e59.g1_.w * _e62.g2_.w)));
}

fn point_and_plane_rotor_geometric_product(self_2302: PointAndPlane, other_1964: Rotor) -> PointAndPlane {
    var self_2303: PointAndPlane;
    var other_1965: Rotor;

    self_2303 = self_2302;
    other_1965 = other_1964;
    let _e4: PointAndPlane = self_2303;
    let _e8: Rotor = other_1965;
    let _e19: PointAndPlane = self_2303;
    let _e23: Rotor = other_1965;
    let _e35: PointAndPlane = self_2303;
    let _e39: Rotor = other_1965;
    let _e53: PointAndPlane = self_2303;
    let _e57: Rotor = other_1965;
    let _e69: PointAndPlane = self_2303;
    let _e73: Rotor = other_1965;
    let _e85: PointAndPlane = self_2303;
    let _e89: Rotor = other_1965;
    let _e101: PointAndPlane = self_2303;
    let _e104: Rotor = other_1965;
    let _e116: PointAndPlane = self_2303;
    let _e120: Rotor = other_1965;
    let _e131: PointAndPlane = self_2303;
    let _e135: Rotor = other_1965;
    let _e147: PointAndPlane = self_2303;
    let _e151: Rotor = other_1965;
    let _e163: PointAndPlane = self_2303;
    let _e167: Rotor = other_1965;
    let _e179: PointAndPlane = self_2303;
    let _e183: Rotor = other_1965;
    let _e195: PointAndPlane = self_2303;
    let _e199: Rotor = other_1965;
    let _e211: PointAndPlane = self_2303;
    let _e214: Rotor = other_1965;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e53.g1_.y) * vec4<f32>(_e57.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e69.g1_.z) * vec4<f32>(_e73.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e85.g1_.w) * vec4<f32>(_e89.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((_e101.g0_.xyyy * _e104.g0_.xxwz) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))), ((((((((vec4<f32>(_e116.g0_.z) * vec4<f32>(_e120.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e131.g0_.w) * vec4<f32>(_e135.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e147.g1_.x) * vec4<f32>(_e151.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e163.g1_.y) * _e167.g0_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e179.g1_.z) * _e183.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e195.g1_.w) * _e199.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e211.g0_.yxxx * _e214.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_rotor_outer_product(self_2304: PointAndPlane, other_1966: Rotor) -> PointAndPlane {
    var self_2305: PointAndPlane;
    var other_1967: Rotor;

    self_2305 = self_2304;
    other_1967 = other_1966;
    let _e4: PointAndPlane = self_2305;
    let _e8: Rotor = other_1967;
    let _e21: PointAndPlane = self_2305;
    let _e25: Rotor = other_1967;
    let _e37: PointAndPlane = self_2305;
    let _e41: Rotor = other_1967;
    let _e53: PointAndPlane = self_2305;
    let _e57: Rotor = other_1967;
    let _e69: PointAndPlane = self_2305;
    let _e71: Rotor = other_1967;
    let _e77: PointAndPlane = self_2305;
    let _e79: Rotor = other_1967;
    return PointAndPlane(((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g1_.y) * vec4<f32>(_e25.g0_.y)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.z) * vec4<f32>(_e41.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e53.g1_.w) * vec4<f32>(_e57.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + (_e69.g0_ * vec4<f32>(_e71.g0_.x))), (_e77.g1_ * vec4<f32>(_e79.g0_.x)));
}

fn point_and_plane_rotor_inner_product(self_2306: PointAndPlane, other_1968: Rotor) -> PointAndPlane {
    var self_2307: PointAndPlane;
    var other_1969: Rotor;

    self_2307 = self_2306;
    other_1969 = other_1968;
    let _e4: PointAndPlane = self_2307;
    let _e6: Rotor = other_1969;
    let _e11: PointAndPlane = self_2307;
    let _e15: Rotor = other_1969;
    let _e26: PointAndPlane = self_2307;
    let _e30: Rotor = other_1969;
    let _e42: PointAndPlane = self_2307;
    let _e46: Rotor = other_1969;
    let _e58: PointAndPlane = self_2307;
    let _e62: Rotor = other_1969;
    let _e74: PointAndPlane = self_2307;
    let _e78: Rotor = other_1969;
    let _e90: PointAndPlane = self_2307;
    let _e94: Rotor = other_1969;
    let _e106: PointAndPlane = self_2307;
    let _e109: Rotor = other_1969;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e42.g1_.x) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e58.g1_.y) * _e62.g0_.xxwz) * vec4<f32>(0.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e74.g1_.z) * _e78.g0_.wwxy) * vec4<f32>(0.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e90.g1_.w) * _e94.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), 1.0))) + ((_e106.g0_.yxxx * _e109.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_rotor_geometric_anti_product(self_2308: PointAndPlane, other_1970: Rotor) -> PointAndPlane {
    var self_2309: PointAndPlane;
    var other_1971: Rotor;

    self_2309 = self_2308;
    other_1971 = other_1970;
    let _e4: PointAndPlane = self_2309;
    let _e8: Rotor = other_1971;
    let _e20: PointAndPlane = self_2309;
    let _e24: Rotor = other_1971;
    let _e37: PointAndPlane = self_2309;
    let _e41: Rotor = other_1971;
    let _e54: PointAndPlane = self_2309;
    let _e58: Rotor = other_1971;
    let _e71: PointAndPlane = self_2309;
    let _e75: Rotor = other_1971;
    let _e88: PointAndPlane = self_2309;
    let _e92: Rotor = other_1971;
    let _e105: PointAndPlane = self_2309;
    let _e108: Rotor = other_1971;
    let _e120: PointAndPlane = self_2309;
    let _e124: Rotor = other_1971;
    let _e136: PointAndPlane = self_2309;
    let _e140: Rotor = other_1971;
    let _e153: PointAndPlane = self_2309;
    let _e157: Rotor = other_1971;
    let _e168: PointAndPlane = self_2309;
    let _e172: Rotor = other_1971;
    let _e185: PointAndPlane = self_2309;
    let _e189: Rotor = other_1971;
    let _e202: PointAndPlane = self_2309;
    let _e206: Rotor = other_1971;
    let _e219: PointAndPlane = self_2309;
    let _e222: Rotor = other_1971;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.x) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e54.g1_.y) * _e58.g0_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e71.g1_.z) * _e75.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e88.g1_.w) * _e92.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e105.g0_.yxxx * _e108.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((((((((vec4<f32>(_e120.g0_.z) * _e124.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0)) + ((vec4<f32>(_e136.g0_.w) * _e140.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e153.g1_.x) * _e157.g0_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e168.g1_.y) * vec4<f32>(_e172.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e185.g1_.z) * vec4<f32>(_e189.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e202.g1_.w) * vec4<f32>(_e206.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e219.g0_.xyyy * _e222.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))));
}

fn point_and_plane_rotor_inner_anti_product(self_2310: PointAndPlane, other_1972: Rotor) -> PointAndPlane {
    var self_2311: PointAndPlane;
    var other_1973: Rotor;

    self_2311 = self_2310;
    other_1973 = other_1972;
    let _e4: PointAndPlane = self_2311;
    let _e8: Rotor = other_1973;
    let _e20: PointAndPlane = self_2311;
    let _e24: Rotor = other_1973;
    let _e37: PointAndPlane = self_2311;
    let _e41: Rotor = other_1973;
    let _e54: PointAndPlane = self_2311;
    let _e58: Rotor = other_1973;
    let _e71: PointAndPlane = self_2311;
    let _e75: Rotor = other_1973;
    let _e88: PointAndPlane = self_2311;
    let _e92: Rotor = other_1973;
    let _e105: PointAndPlane = self_2311;
    let _e108: Rotor = other_1973;
    let _e120: PointAndPlane = self_2311;
    let _e122: Rotor = other_1973;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.x) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e54.g1_.y) * _e58.g0_.xxwz) * vec4<f32>(0.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e71.g1_.z) * _e75.g0_.wwxy) * vec4<f32>(0.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e88.g1_.w) * _e92.g0_.zzyx) * vec4<f32>(0.0, 1.0, -(1.0), -(1.0)))) + ((_e105.g0_.yxxx * _e108.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((_e120.g0_ * vec4<f32>(_e122.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_rotor_right_contraction(self_2312: PointAndPlane, other_1974: Rotor) -> PointAndPlane {
    var self_2313: PointAndPlane;
    var other_1975: Rotor;

    self_2313 = self_2312;
    other_1975 = other_1974;
    let _e4: PointAndPlane = self_2313;
    let _e6: Rotor = other_1975;
    let _e11: PointAndPlane = self_2313;
    let _e15: Rotor = other_1975;
    let _e26: PointAndPlane = self_2313;
    let _e30: Rotor = other_1975;
    let _e42: PointAndPlane = self_2313;
    let _e46: Rotor = other_1975;
    let _e58: PointAndPlane = self_2313;
    let _e62: Rotor = other_1975;
    let _e74: PointAndPlane = self_2313;
    let _e78: Rotor = other_1975;
    let _e90: PointAndPlane = self_2313;
    let _e94: Rotor = other_1975;
    let _e106: PointAndPlane = self_2313;
    let _e109: Rotor = other_1975;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((((((vec4<f32>(_e11.g0_.z) * vec4<f32>(_e15.g0_.z)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e26.g0_.w) * vec4<f32>(_e30.g0_.w)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e42.g1_.x) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0))) + ((vec4<f32>(_e58.g1_.y) * vec4<f32>(_e62.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e74.g1_.z) * vec4<f32>(_e78.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e90.g1_.w) * vec4<f32>(_e94.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e106.g0_.yxxx * _e109.g0_.yyzw) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_rotor_left_anti_contraction(self_2314: PointAndPlane, other_1976: Rotor) -> PointAndPlane {
    var self_2315: PointAndPlane;
    var other_1977: Rotor;

    self_2315 = self_2314;
    other_1977 = other_1976;
    let _e4: PointAndPlane = self_2315;
    let _e8: Rotor = other_1977;
    let _e20: PointAndPlane = self_2315;
    let _e24: Rotor = other_1977;
    let _e37: PointAndPlane = self_2315;
    let _e41: Rotor = other_1977;
    let _e54: PointAndPlane = self_2315;
    let _e58: Rotor = other_1977;
    let _e71: PointAndPlane = self_2315;
    let _e75: Rotor = other_1977;
    let _e88: PointAndPlane = self_2315;
    let _e92: Rotor = other_1977;
    let _e105: PointAndPlane = self_2315;
    let _e108: Rotor = other_1977;
    let _e120: PointAndPlane = self_2315;
    let _e122: Rotor = other_1977;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.x) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e54.g1_.y) * vec4<f32>(_e58.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e71.g1_.z) * vec4<f32>(_e75.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e88.g1_.w) * vec4<f32>(_e92.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((_e105.g0_.yxxx * _e108.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((_e120.g0_ * vec4<f32>(_e122.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_point_into(self_2316: PointAndPlane) -> Point {
    var self_2317: PointAndPlane;

    self_2317 = self_2316;
    let _e2: PointAndPlane = self_2317;
    return Point(_e2.g0_);
}

fn point_and_plane_point_add(self_2318: PointAndPlane, other_1978: Point) -> PointAndPlane {
    var self_2319: PointAndPlane;
    var other_1979: Point;

    self_2319 = self_2318;
    other_1979 = other_1978;
    let _e4: PointAndPlane = self_2319;
    let _e6: Point = other_1979;
    let _e9: PointAndPlane = self_2319;
    return PointAndPlane((_e4.g0_ + _e6.g0_), _e9.g1_);
}

fn point_and_plane_point_sub(self_2320: PointAndPlane, other_1980: Point) -> PointAndPlane {
    var self_2321: PointAndPlane;
    var other_1981: Point;

    self_2321 = self_2320;
    other_1981 = other_1980;
    let _e4: PointAndPlane = self_2321;
    let _e6: Point = other_1981;
    let _e9: PointAndPlane = self_2321;
    return PointAndPlane((_e4.g0_ - _e6.g0_), _e9.g1_);
}

fn point_and_plane_point_geometric_product(self_2322: PointAndPlane, other_1982: Point) -> Motor {
    var self_2323: PointAndPlane;
    var other_1983: Point;

    self_2323 = self_2322;
    other_1983 = other_1982;
    let _e4: PointAndPlane = self_2323;
    let _e8: Point = other_1983;
    let _e20: PointAndPlane = self_2323;
    let _e24: Point = other_1983;
    let _e37: PointAndPlane = self_2323;
    let _e41: Point = other_1983;
    let _e54: PointAndPlane = self_2323;
    let _e58: Point = other_1983;
    let _e70: PointAndPlane = self_2323;
    let _e74: Point = other_1983;
    let _e86: PointAndPlane = self_2323;
    let _e90: Point = other_1983;
    let _e102: PointAndPlane = self_2323;
    let _e105: PointAndPlane = self_2323;
    let _e108: PointAndPlane = self_2323;
    let _e111: PointAndPlane = self_2323;
    let _e115: Point = other_1983;
    let _e123: PointAndPlane = self_2323;
    let _e127: Point = other_1983;
    let _e138: PointAndPlane = self_2323;
    let _e142: Point = other_1983;
    let _e154: PointAndPlane = self_2323;
    let _e158: Point = other_1983;
    let _e170: PointAndPlane = self_2323;
    let _e174: Point = other_1983;
    let _e186: PointAndPlane = self_2323;
    let _e190: Point = other_1983;
    let _e202: PointAndPlane = self_2323;
    let _e206: Point = other_1983;
    let _e218: PointAndPlane = self_2323;
    let _e221: PointAndPlane = self_2323;
    let _e224: PointAndPlane = self_2323;
    let _e227: PointAndPlane = self_2323;
    let _e231: Point = other_1983;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e37.g0_.w) * _e41.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e54.g1_.y) * vec4<f32>(_e58.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e70.g1_.z) * vec4<f32>(_e74.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e86.g1_.w) * vec4<f32>(_e90.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g0_.x, _e105.g1_.x, _e108.g1_.x, _e111.g1_.x) * _e115.g0_) * vec4<f32>(-(1.0)))), ((((((((vec4<f32>(_e123.g0_.y) * vec4<f32>(_e127.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0)) + ((vec4<f32>(_e138.g0_.z) * vec4<f32>(_e142.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e154.g0_.w) * vec4<f32>(_e158.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e170.g1_.y) * _e174.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e186.g1_.z) * _e190.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e202.g1_.w) * _e206.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e218.g1_.x, _e221.g0_.x, _e224.g0_.x, _e227.g0_.x) * _e231.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_point_outer_product(self_2324: PointAndPlane, other_1984: Point) -> AntiScalar {
    var self_2325: PointAndPlane;
    var other_1985: Point;

    self_2325 = self_2324;
    other_1985 = other_1984;
    let _e4: PointAndPlane = self_2325;
    let _e7: Point = other_1985;
    let _e11: PointAndPlane = self_2325;
    let _e14: Point = other_1985;
    let _e19: PointAndPlane = self_2325;
    let _e22: Point = other_1985;
    let _e27: PointAndPlane = self_2325;
    let _e30: Point = other_1985;
    return AntiScalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) + (_e27.g1_.w * _e30.g0_.w)));
}

fn point_and_plane_point_geometric_anti_product(self_2326: PointAndPlane, other_1986: Point) -> Motor {
    var self_2327: PointAndPlane;
    var other_1987: Point;

    self_2327 = self_2326;
    other_1987 = other_1986;
    let _e4: PointAndPlane = self_2327;
    let _e8: Point = other_1987;
    let _e20: PointAndPlane = self_2327;
    let _e24: Point = other_1987;
    let _e37: PointAndPlane = self_2327;
    let _e41: Point = other_1987;
    let _e54: PointAndPlane = self_2327;
    let _e58: Point = other_1987;
    let _e70: PointAndPlane = self_2327;
    let _e74: Point = other_1987;
    let _e86: PointAndPlane = self_2327;
    let _e90: Point = other_1987;
    let _e102: PointAndPlane = self_2327;
    let _e105: PointAndPlane = self_2327;
    let _e108: PointAndPlane = self_2327;
    let _e111: PointAndPlane = self_2327;
    let _e115: Point = other_1987;
    let _e119: PointAndPlane = self_2327;
    let _e123: Point = other_1987;
    let _e134: PointAndPlane = self_2327;
    let _e138: Point = other_1987;
    let _e150: PointAndPlane = self_2327;
    let _e154: Point = other_1987;
    let _e166: PointAndPlane = self_2327;
    let _e170: Point = other_1987;
    let _e182: PointAndPlane = self_2327;
    let _e186: Point = other_1987;
    let _e198: PointAndPlane = self_2327;
    let _e202: Point = other_1987;
    let _e214: PointAndPlane = self_2327;
    let _e217: PointAndPlane = self_2327;
    let _e220: PointAndPlane = self_2327;
    let _e223: PointAndPlane = self_2327;
    let _e227: Point = other_1987;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.y) * _e58.g0_.yywz) * vec4<f32>(1.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e70.g1_.z) * _e74.g0_.zwzy) * vec4<f32>(1.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e86.g1_.w) * _e90.g0_.wzyw) * vec4<f32>(1.0, 1.0, -(1.0), 0.0))) + (vec4<f32>(_e102.g1_.x, _e105.g0_.x, _e108.g0_.x, _e111.g0_.x) * _e115.g0_)), ((((((((vec4<f32>(_e119.g0_.y) * _e123.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e134.g0_.z) * _e138.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e150.g0_.w) * _e154.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e166.g1_.y) * vec4<f32>(_e170.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e182.g1_.z) * vec4<f32>(_e186.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e198.g1_.w) * vec4<f32>(_e202.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e214.g0_.x, _e217.g1_.x, _e220.g1_.x, _e223.g1_.x) * _e227.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_point_right_contraction(self_2328: PointAndPlane, other_1988: Point) -> Scalar {
    var self_2329: PointAndPlane;
    var other_1989: Point;

    self_2329 = self_2328;
    other_1989 = other_1988;
    let _e5: PointAndPlane = self_2329;
    let _e8: Point = other_1989;
    let _e13: PointAndPlane = self_2329;
    let _e16: Point = other_1989;
    let _e21: PointAndPlane = self_2329;
    let _e24: Point = other_1989;
    let _e29: PointAndPlane = self_2329;
    let _e32: Point = other_1989;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_and_plane_point_left_anti_contraction(self_2330: PointAndPlane, other_1990: Point) -> AntiScalar {
    var self_2331: PointAndPlane;
    var other_1991: Point;

    self_2331 = self_2330;
    other_1991 = other_1990;
    let _e4: PointAndPlane = self_2331;
    let _e7: Point = other_1991;
    let _e11: PointAndPlane = self_2331;
    let _e14: Point = other_1991;
    let _e19: PointAndPlane = self_2331;
    let _e22: Point = other_1991;
    let _e27: PointAndPlane = self_2331;
    let _e30: Point = other_1991;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_and_plane_point_scalar_product(self_2332: PointAndPlane, other_1992: Point) -> Scalar {
    var self_2333: PointAndPlane;
    var other_1993: Point;

    self_2333 = self_2332;
    other_1993 = other_1992;
    let _e5: PointAndPlane = self_2333;
    let _e8: Point = other_1993;
    let _e13: PointAndPlane = self_2333;
    let _e16: Point = other_1993;
    let _e21: PointAndPlane = self_2333;
    let _e24: Point = other_1993;
    let _e29: PointAndPlane = self_2333;
    let _e32: Point = other_1993;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_and_plane_point_anti_scalar_product(self_2334: PointAndPlane, other_1994: Point) -> AntiScalar {
    var self_2335: PointAndPlane;
    var other_1995: Point;

    self_2335 = self_2334;
    other_1995 = other_1994;
    let _e4: PointAndPlane = self_2335;
    let _e7: Point = other_1995;
    let _e11: PointAndPlane = self_2335;
    let _e14: Point = other_1995;
    let _e19: PointAndPlane = self_2335;
    let _e22: Point = other_1995;
    let _e27: PointAndPlane = self_2335;
    let _e30: Point = other_1995;
    return AntiScalar(((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)));
}

fn point_and_plane_ideal_point_geometric_product(self_2336: PointAndPlane, other_1996: IdealPoint) -> PointAndPlane {
    var self_2337: PointAndPlane;
    var other_1997: IdealPoint;

    self_2337 = self_2336;
    other_1997 = other_1996;
    let _e4: PointAndPlane = self_2337;
    let _e8: IdealPoint = other_1997;
    let _e20: PointAndPlane = self_2337;
    let _e24: IdealPoint = other_1997;
    let _e37: PointAndPlane = self_2337;
    let _e41: IdealPoint = other_1997;
    let _e44: IdealPoint = other_1997;
    let _e47: IdealPoint = other_1997;
    let _e50: IdealPoint = other_1997;
    let _e63: PointAndPlane = self_2337;
    let _e67: IdealPoint = other_1997;
    let _e70: IdealPoint = other_1997;
    let _e73: IdealPoint = other_1997;
    let _e76: IdealPoint = other_1997;
    let _e89: PointAndPlane = self_2337;
    let _e93: IdealPoint = other_1997;
    let _e96: IdealPoint = other_1997;
    let _e99: IdealPoint = other_1997;
    let _e102: IdealPoint = other_1997;
    let _e115: PointAndPlane = self_2337;
    let _e118: IdealPoint = other_1997;
    let _e121: IdealPoint = other_1997;
    let _e124: IdealPoint = other_1997;
    let _e127: IdealPoint = other_1997;
    let _e140: PointAndPlane = self_2337;
    let _e144: IdealPoint = other_1997;
    let _e147: IdealPoint = other_1997;
    let _e150: IdealPoint = other_1997;
    let _e153: IdealPoint = other_1997;
    let _e165: PointAndPlane = self_2337;
    let _e169: IdealPoint = other_1997;
    let _e172: IdealPoint = other_1997;
    let _e175: IdealPoint = other_1997;
    let _e178: IdealPoint = other_1997;
    let _e191: PointAndPlane = self_2337;
    let _e195: IdealPoint = other_1997;
    let _e198: IdealPoint = other_1997;
    let _e201: IdealPoint = other_1997;
    let _e204: IdealPoint = other_1997;
    let _e216: PointAndPlane = self_2337;
    let _e220: IdealPoint = other_1997;
    let _e233: PointAndPlane = self_2337;
    let _e237: IdealPoint = other_1997;
    let _e250: PointAndPlane = self_2337;
    let _e253: PointAndPlane = self_2337;
    let _e256: PointAndPlane = self_2337;
    let _e259: PointAndPlane = self_2337;
    let _e263: IdealPoint = other_1997;
    let _e266: IdealPoint = other_1997;
    let _e269: IdealPoint = other_1997;
    let _e272: IdealPoint = other_1997;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e37.g1_.y) * vec4<f32>(_e41.g0_.z, _e44.g0_.z, _e47.g0_.z, _e50.g0_.y)) * vec4<f32>(0.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e63.g1_.z) * vec4<f32>(_e67.g0_.z, _e70.g0_.z, _e73.g0_.z, _e76.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e89.g1_.w) * vec4<f32>(_e93.g0_.y, _e96.g0_.y, _e99.g0_.x, _e102.g0_.y)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((_e115.g0_.yxxx * vec4<f32>(_e118.g0_.x, _e121.g0_.x, _e124.g0_.y, _e127.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), (((((((vec4<f32>(_e140.g0_.z) * vec4<f32>(_e144.g0_.z, _e147.g0_.z, _e150.g0_.z, _e153.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e165.g0_.w) * vec4<f32>(_e169.g0_.y, _e172.g0_.y, _e175.g0_.x, _e178.g0_.y)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e191.g1_.x) * vec4<f32>(_e195.g0_.x, _e198.g0_.x, _e201.g0_.y, _e204.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e216.g1_.z) * vec4<f32>(_e220.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e233.g1_.w) * vec4<f32>(_e237.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e250.g1_.y, _e253.g0_.x, _e256.g0_.y, _e259.g0_.y) * vec4<f32>(_e263.g0_.x, _e266.g0_.x, _e269.g0_.z, _e272.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0))));
}

fn point_and_plane_ideal_point_regressive_product(self_2338: PointAndPlane, other_1998: IdealPoint) -> Plane {
    var self_2339: PointAndPlane;
    var other_1999: IdealPoint;

    self_2339 = self_2338;
    other_1999 = other_1998;
    let _e4: PointAndPlane = self_2339;
    let _e8: IdealPoint = other_1999;
    let _e20: PointAndPlane = self_2339;
    let _e24: IdealPoint = other_1999;
    let _e37: PointAndPlane = self_2339;
    let _e40: IdealPoint = other_1999;
    let _e43: IdealPoint = other_1999;
    let _e46: IdealPoint = other_1999;
    let _e49: IdealPoint = other_1999;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_ideal_point_inner_product(self_2340: PointAndPlane, other_2000: IdealPoint) -> Plane {
    var self_2341: PointAndPlane;
    var other_2001: IdealPoint;

    self_2341 = self_2340;
    other_2001 = other_2000;
    let _e4: PointAndPlane = self_2341;
    let _e8: IdealPoint = other_2001;
    let _e11: IdealPoint = other_2001;
    let _e14: IdealPoint = other_2001;
    let _e17: IdealPoint = other_2001;
    let _e29: PointAndPlane = self_2341;
    let _e33: IdealPoint = other_2001;
    let _e36: IdealPoint = other_2001;
    let _e39: IdealPoint = other_2001;
    let _e42: IdealPoint = other_2001;
    let _e55: PointAndPlane = self_2341;
    let _e59: IdealPoint = other_2001;
    let _e62: IdealPoint = other_2001;
    let _e65: IdealPoint = other_2001;
    let _e68: IdealPoint = other_2001;
    let _e80: PointAndPlane = self_2341;
    let _e84: IdealPoint = other_2001;
    let _e97: PointAndPlane = self_2341;
    let _e101: IdealPoint = other_2001;
    let _e114: PointAndPlane = self_2341;
    let _e117: PointAndPlane = self_2341;
    let _e120: PointAndPlane = self_2341;
    let _e123: PointAndPlane = self_2341;
    let _e127: IdealPoint = other_2001;
    let _e130: IdealPoint = other_2001;
    let _e133: IdealPoint = other_2001;
    let _e136: IdealPoint = other_2001;
    return Plane((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.z, _e17.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e29.g0_.w) * vec4<f32>(_e33.g0_.y, _e36.g0_.y, _e39.g0_.x, _e42.g0_.y)) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.x, _e65.g0_.y, _e68.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e80.g1_.z) * vec4<f32>(_e84.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e97.g1_.w) * vec4<f32>(_e101.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e114.g1_.y, _e117.g0_.x, _e120.g0_.y, _e123.g0_.y) * vec4<f32>(_e127.g0_.x, _e130.g0_.x, _e133.g0_.z, _e136.g0_.y)) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0))));
}

fn point_and_plane_ideal_point_geometric_anti_product(self_2342: PointAndPlane, other_2002: IdealPoint) -> PointAndPlane {
    var self_2343: PointAndPlane;
    var other_2003: IdealPoint;

    self_2343 = self_2342;
    other_2003 = other_2002;
    let _e4: PointAndPlane = self_2343;
    let _e8: IdealPoint = other_2003;
    let _e11: IdealPoint = other_2003;
    let _e14: IdealPoint = other_2003;
    let _e17: IdealPoint = other_2003;
    let _e29: PointAndPlane = self_2343;
    let _e33: IdealPoint = other_2003;
    let _e36: IdealPoint = other_2003;
    let _e39: IdealPoint = other_2003;
    let _e42: IdealPoint = other_2003;
    let _e55: PointAndPlane = self_2343;
    let _e59: IdealPoint = other_2003;
    let _e62: IdealPoint = other_2003;
    let _e65: IdealPoint = other_2003;
    let _e68: IdealPoint = other_2003;
    let _e80: PointAndPlane = self_2343;
    let _e84: IdealPoint = other_2003;
    let _e97: PointAndPlane = self_2343;
    let _e101: IdealPoint = other_2003;
    let _e114: PointAndPlane = self_2343;
    let _e117: PointAndPlane = self_2343;
    let _e120: PointAndPlane = self_2343;
    let _e123: PointAndPlane = self_2343;
    let _e127: IdealPoint = other_2003;
    let _e130: IdealPoint = other_2003;
    let _e133: IdealPoint = other_2003;
    let _e136: IdealPoint = other_2003;
    let _e150: PointAndPlane = self_2343;
    let _e154: IdealPoint = other_2003;
    let _e166: PointAndPlane = self_2343;
    let _e170: IdealPoint = other_2003;
    let _e183: PointAndPlane = self_2343;
    let _e187: IdealPoint = other_2003;
    let _e190: IdealPoint = other_2003;
    let _e193: IdealPoint = other_2003;
    let _e196: IdealPoint = other_2003;
    let _e209: PointAndPlane = self_2343;
    let _e213: IdealPoint = other_2003;
    let _e216: IdealPoint = other_2003;
    let _e219: IdealPoint = other_2003;
    let _e222: IdealPoint = other_2003;
    let _e235: PointAndPlane = self_2343;
    let _e239: IdealPoint = other_2003;
    let _e242: IdealPoint = other_2003;
    let _e245: IdealPoint = other_2003;
    let _e248: IdealPoint = other_2003;
    let _e261: PointAndPlane = self_2343;
    let _e264: IdealPoint = other_2003;
    let _e267: IdealPoint = other_2003;
    let _e270: IdealPoint = other_2003;
    let _e273: IdealPoint = other_2003;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.z, _e17.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.w) * vec4<f32>(_e33.g0_.y, _e36.g0_.y, _e39.g0_.x, _e42.g0_.y)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.x, _e65.g0_.y, _e68.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e80.g1_.z) * vec4<f32>(_e84.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e97.g1_.w) * vec4<f32>(_e101.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e114.g1_.y, _e117.g0_.x, _e120.g0_.y, _e123.g0_.y) * vec4<f32>(_e127.g0_.x, _e130.g0_.x, _e133.g0_.z, _e136.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))), (((((((vec4<f32>(_e150.g0_.z) * vec4<f32>(_e154.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e166.g0_.w) * vec4<f32>(_e170.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e183.g1_.y) * vec4<f32>(_e187.g0_.z, _e190.g0_.z, _e193.g0_.z, _e196.g0_.y)) * vec4<f32>(0.0, 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e209.g1_.z) * vec4<f32>(_e213.g0_.z, _e216.g0_.z, _e219.g0_.z, _e222.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e235.g1_.w) * vec4<f32>(_e239.g0_.y, _e242.g0_.y, _e245.g0_.x, _e248.g0_.y)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((_e261.g0_.yxxx * vec4<f32>(_e264.g0_.x, _e267.g0_.x, _e270.g0_.y, _e273.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_ideal_point_inner_anti_product(self_2344: PointAndPlane, other_2004: IdealPoint) -> Point {
    var self_2345: PointAndPlane;
    var other_2005: IdealPoint;

    self_2345 = self_2344;
    other_2005 = other_2004;
    let _e4: PointAndPlane = self_2345;
    let _e8: IdealPoint = other_2005;
    let _e11: IdealPoint = other_2005;
    let _e14: IdealPoint = other_2005;
    let _e17: IdealPoint = other_2005;
    let _e29: PointAndPlane = self_2345;
    let _e33: IdealPoint = other_2005;
    let _e36: IdealPoint = other_2005;
    let _e39: IdealPoint = other_2005;
    let _e42: IdealPoint = other_2005;
    let _e55: PointAndPlane = self_2345;
    let _e59: IdealPoint = other_2005;
    let _e62: IdealPoint = other_2005;
    let _e65: IdealPoint = other_2005;
    let _e68: IdealPoint = other_2005;
    let _e80: PointAndPlane = self_2345;
    let _e84: IdealPoint = other_2005;
    let _e97: PointAndPlane = self_2345;
    let _e101: IdealPoint = other_2005;
    let _e114: PointAndPlane = self_2345;
    let _e117: PointAndPlane = self_2345;
    let _e120: PointAndPlane = self_2345;
    let _e123: PointAndPlane = self_2345;
    let _e127: IdealPoint = other_2005;
    let _e130: IdealPoint = other_2005;
    let _e133: IdealPoint = other_2005;
    let _e136: IdealPoint = other_2005;
    return Point((((((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z, _e11.g0_.z, _e14.g0_.z, _e17.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e29.g0_.w) * vec4<f32>(_e33.g0_.y, _e36.g0_.y, _e39.g0_.x, _e42.g0_.y)) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e55.g1_.x) * vec4<f32>(_e59.g0_.x, _e62.g0_.x, _e65.g0_.y, _e68.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e80.g1_.z) * vec4<f32>(_e84.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e97.g1_.w) * vec4<f32>(_e101.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((vec4<f32>(_e114.g1_.y, _e117.g0_.x, _e120.g0_.y, _e123.g0_.y) * vec4<f32>(_e127.g0_.x, _e130.g0_.x, _e133.g0_.z, _e136.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))));
}

fn point_and_plane_ideal_point_left_contraction(self_2346: PointAndPlane, other_2006: IdealPoint) -> Plane {
    var self_2347: PointAndPlane;
    var other_2007: IdealPoint;

    self_2347 = self_2346;
    other_2007 = other_2006;
    let _e4: PointAndPlane = self_2347;
    let _e8: IdealPoint = other_2007;
    let _e20: PointAndPlane = self_2347;
    let _e24: IdealPoint = other_2007;
    let _e37: PointAndPlane = self_2347;
    let _e40: IdealPoint = other_2007;
    let _e43: IdealPoint = other_2007;
    let _e46: IdealPoint = other_2007;
    let _e49: IdealPoint = other_2007;
    return Plane(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g1_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_ideal_point_right_anti_contraction(self_2348: PointAndPlane, other_2008: IdealPoint) -> Point {
    var self_2349: PointAndPlane;
    var other_2009: IdealPoint;

    self_2349 = self_2348;
    other_2009 = other_2008;
    let _e4: PointAndPlane = self_2349;
    let _e8: IdealPoint = other_2009;
    let _e20: PointAndPlane = self_2349;
    let _e24: IdealPoint = other_2009;
    let _e37: PointAndPlane = self_2349;
    let _e40: IdealPoint = other_2009;
    let _e43: IdealPoint = other_2009;
    let _e46: IdealPoint = other_2009;
    let _e49: IdealPoint = other_2009;
    return Point(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.y)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g1_.yxxx * vec4<f32>(_e40.g0_.x, _e43.g0_.x, _e46.g0_.y, _e49.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_plane_into(self_2350: PointAndPlane) -> Plane {
    var self_2351: PointAndPlane;

    self_2351 = self_2350;
    let _e2: PointAndPlane = self_2351;
    return Plane(_e2.g1_);
}

fn point_and_plane_plane_add(self_2352: PointAndPlane, other_2010: Plane) -> PointAndPlane {
    var self_2353: PointAndPlane;
    var other_2011: Plane;

    self_2353 = self_2352;
    other_2011 = other_2010;
    let _e4: PointAndPlane = self_2353;
    let _e6: PointAndPlane = self_2353;
    let _e8: Plane = other_2011;
    return PointAndPlane(_e4.g0_, (_e6.g1_ + _e8.g0_));
}

fn point_and_plane_plane_sub(self_2354: PointAndPlane, other_2012: Plane) -> PointAndPlane {
    var self_2355: PointAndPlane;
    var other_2013: Plane;

    self_2355 = self_2354;
    other_2013 = other_2012;
    let _e4: PointAndPlane = self_2355;
    let _e6: PointAndPlane = self_2355;
    let _e8: Plane = other_2013;
    return PointAndPlane(_e4.g0_, (_e6.g1_ - _e8.g0_));
}

fn point_and_plane_plane_geometric_product(self_2356: PointAndPlane, other_2014: Plane) -> Motor {
    var self_2357: PointAndPlane;
    var other_2015: Plane;

    self_2357 = self_2356;
    other_2015 = other_2014;
    let _e4: PointAndPlane = self_2357;
    let _e8: Plane = other_2015;
    let _e20: PointAndPlane = self_2357;
    let _e24: Plane = other_2015;
    let _e37: PointAndPlane = self_2357;
    let _e41: Plane = other_2015;
    let _e54: PointAndPlane = self_2357;
    let _e58: Plane = other_2015;
    let _e70: PointAndPlane = self_2357;
    let _e74: Plane = other_2015;
    let _e86: PointAndPlane = self_2357;
    let _e90: Plane = other_2015;
    let _e102: PointAndPlane = self_2357;
    let _e105: PointAndPlane = self_2357;
    let _e108: PointAndPlane = self_2357;
    let _e111: PointAndPlane = self_2357;
    let _e115: Plane = other_2015;
    let _e119: PointAndPlane = self_2357;
    let _e123: Plane = other_2015;
    let _e135: PointAndPlane = self_2357;
    let _e139: Plane = other_2015;
    let _e152: PointAndPlane = self_2357;
    let _e156: Plane = other_2015;
    let _e169: PointAndPlane = self_2357;
    let _e173: Plane = other_2015;
    let _e186: PointAndPlane = self_2357;
    let _e190: Plane = other_2015;
    let _e203: PointAndPlane = self_2357;
    let _e207: Plane = other_2015;
    let _e220: PointAndPlane = self_2357;
    let _e223: PointAndPlane = self_2357;
    let _e226: PointAndPlane = self_2357;
    let _e229: PointAndPlane = self_2357;
    let _e233: Plane = other_2015;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.z) * vec4<f32>(_e24.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e37.g0_.w) * vec4<f32>(_e41.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e54.g1_.y) * _e58.g0_.yywz) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e70.g1_.z) * _e74.g0_.zwzy) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e86.g1_.w) * _e90.g0_.wzyw) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e102.g1_.x, _e105.g0_.x, _e108.g0_.x, _e111.g0_.x) * _e115.g0_)), ((((((((vec4<f32>(_e119.g0_.y) * _e123.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e135.g0_.z) * _e139.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e152.g0_.w) * _e156.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e169.g1_.y) * vec4<f32>(_e173.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e186.g1_.z) * vec4<f32>(_e190.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e203.g1_.w) * vec4<f32>(_e207.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e220.g0_.x, _e223.g1_.x, _e226.g1_.x, _e229.g1_.x) * _e233.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_plane_regressive_product(self_2358: PointAndPlane, other_2016: Plane) -> Scalar {
    var self_2359: PointAndPlane;
    var other_2017: Plane;

    self_2359 = self_2358;
    other_2017 = other_2016;
    let _e5: PointAndPlane = self_2359;
    let _e8: Plane = other_2017;
    let _e13: PointAndPlane = self_2359;
    let _e16: Plane = other_2017;
    let _e21: PointAndPlane = self_2359;
    let _e24: Plane = other_2017;
    let _e29: PointAndPlane = self_2359;
    let _e32: Plane = other_2017;
    return Scalar(((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)));
}

fn point_and_plane_plane_geometric_anti_product(self_2360: PointAndPlane, other_2018: Plane) -> Motor {
    var self_2361: PointAndPlane;
    var other_2019: Plane;

    self_2361 = self_2360;
    other_2019 = other_2018;
    let _e4: PointAndPlane = self_2361;
    let _e8: Plane = other_2019;
    let _e20: PointAndPlane = self_2361;
    let _e24: Plane = other_2019;
    let _e37: PointAndPlane = self_2361;
    let _e41: Plane = other_2019;
    let _e54: PointAndPlane = self_2361;
    let _e58: Plane = other_2019;
    let _e70: PointAndPlane = self_2361;
    let _e74: Plane = other_2019;
    let _e86: PointAndPlane = self_2361;
    let _e90: Plane = other_2019;
    let _e102: PointAndPlane = self_2361;
    let _e105: PointAndPlane = self_2361;
    let _e108: PointAndPlane = self_2361;
    let _e111: PointAndPlane = self_2361;
    let _e115: Plane = other_2019;
    let _e123: PointAndPlane = self_2361;
    let _e127: Plane = other_2019;
    let _e139: PointAndPlane = self_2361;
    let _e143: Plane = other_2019;
    let _e156: PointAndPlane = self_2361;
    let _e160: Plane = other_2019;
    let _e173: PointAndPlane = self_2361;
    let _e177: Plane = other_2019;
    let _e190: PointAndPlane = self_2361;
    let _e194: Plane = other_2019;
    let _e207: PointAndPlane = self_2361;
    let _e211: Plane = other_2019;
    let _e224: PointAndPlane = self_2361;
    let _e227: PointAndPlane = self_2361;
    let _e230: PointAndPlane = self_2361;
    let _e233: PointAndPlane = self_2361;
    let _e237: Plane = other_2019;
    return Motor(((((((((vec4<f32>(_e4.g0_.y) * _e8.g0_.yywz) * vec4<f32>(-(1.0), 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e20.g0_.z) * _e24.g0_.zwzy) * vec4<f32>(-(1.0), 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e37.g0_.w) * _e41.g0_.wzyw) * vec4<f32>(-(1.0), -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e54.g1_.y) * vec4<f32>(_e58.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e70.g1_.z) * vec4<f32>(_e74.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e86.g1_.w) * vec4<f32>(_e90.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e102.g0_.x, _e105.g1_.x, _e108.g1_.x, _e111.g1_.x) * _e115.g0_) * vec4<f32>(-(1.0)))), ((((((((vec4<f32>(_e123.g0_.y) * vec4<f32>(_e127.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0)) + ((vec4<f32>(_e139.g0_.z) * vec4<f32>(_e143.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e156.g0_.w) * vec4<f32>(_e160.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e173.g1_.y) * _e177.g0_.yywz) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e190.g1_.z) * _e194.g0_.zwzy) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e207.g1_.w) * _e211.g0_.wzyw) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e224.g1_.x, _e227.g0_.x, _e230.g0_.x, _e233.g0_.x) * _e237.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_plane_left_contraction(self_2362: PointAndPlane, other_2020: Plane) -> Scalar {
    var self_2363: PointAndPlane;
    var other_2021: Plane;

    self_2363 = self_2362;
    other_2021 = other_2020;
    let _e4: PointAndPlane = self_2363;
    let _e7: Plane = other_2021;
    let _e11: PointAndPlane = self_2363;
    let _e14: Plane = other_2021;
    let _e19: PointAndPlane = self_2363;
    let _e22: Plane = other_2021;
    let _e27: PointAndPlane = self_2363;
    let _e30: Plane = other_2021;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) + (_e27.g1_.w * _e30.g0_.w)));
}

fn point_and_plane_plane_right_anti_contraction(self_2364: PointAndPlane, other_2022: Plane) -> AntiScalar {
    var self_2365: PointAndPlane;
    var other_2023: Plane;

    self_2365 = self_2364;
    other_2023 = other_2022;
    let _e5: PointAndPlane = self_2365;
    let _e8: Plane = other_2023;
    let _e13: PointAndPlane = self_2365;
    let _e16: Plane = other_2023;
    let _e21: PointAndPlane = self_2365;
    let _e24: Plane = other_2023;
    let _e29: PointAndPlane = self_2365;
    let _e32: Plane = other_2023;
    return AntiScalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn point_and_plane_plane_scalar_product(self_2366: PointAndPlane, other_2024: Plane) -> Scalar {
    var self_2367: PointAndPlane;
    var other_2025: Plane;

    self_2367 = self_2366;
    other_2025 = other_2024;
    let _e4: PointAndPlane = self_2367;
    let _e7: Plane = other_2025;
    let _e11: PointAndPlane = self_2367;
    let _e14: Plane = other_2025;
    let _e19: PointAndPlane = self_2367;
    let _e22: Plane = other_2025;
    let _e27: PointAndPlane = self_2367;
    let _e30: Plane = other_2025;
    return Scalar(((((_e4.g1_.x * _e7.g0_.x) + (_e11.g1_.y * _e14.g0_.y)) + (_e19.g1_.z * _e22.g0_.z)) + (_e27.g1_.w * _e30.g0_.w)));
}

fn point_and_plane_plane_anti_scalar_product(self_2368: PointAndPlane, other_2026: Plane) -> AntiScalar {
    var self_2369: PointAndPlane;
    var other_2027: Plane;

    self_2369 = self_2368;
    other_2027 = other_2026;
    let _e5: PointAndPlane = self_2369;
    let _e8: Plane = other_2027;
    let _e13: PointAndPlane = self_2369;
    let _e16: Plane = other_2027;
    let _e21: PointAndPlane = self_2369;
    let _e24: Plane = other_2027;
    let _e29: PointAndPlane = self_2369;
    let _e32: Plane = other_2027;
    return AntiScalar(((((0.0 - (_e5.g1_.x * _e8.g0_.x)) - (_e13.g1_.y * _e16.g0_.y)) - (_e21.g1_.z * _e24.g0_.z)) - (_e29.g1_.w * _e32.g0_.w)));
}

fn point_and_plane_line_geometric_product(self_2370: PointAndPlane, other_2028: Line) -> PointAndPlane {
    var self_2371: PointAndPlane;
    var other_2029: Line;

    self_2371 = self_2370;
    other_2029 = other_2028;
    let _e4: PointAndPlane = self_2371;
    let _e8: Line = other_2029;
    let _e11: Line = other_2029;
    let _e14: Line = other_2029;
    let _e17: Line = other_2029;
    let _e30: PointAndPlane = self_2371;
    let _e34: Line = other_2029;
    let _e37: Line = other_2029;
    let _e40: Line = other_2029;
    let _e43: Line = other_2029;
    let _e57: PointAndPlane = self_2371;
    let _e61: Line = other_2029;
    let _e64: Line = other_2029;
    let _e67: Line = other_2029;
    let _e70: Line = other_2029;
    let _e84: PointAndPlane = self_2371;
    let _e88: Line = other_2029;
    let _e91: Line = other_2029;
    let _e94: Line = other_2029;
    let _e97: Line = other_2029;
    let _e112: PointAndPlane = self_2371;
    let _e116: Line = other_2029;
    let _e119: Line = other_2029;
    let _e122: Line = other_2029;
    let _e125: Line = other_2029;
    let _e138: PointAndPlane = self_2371;
    let _e142: Line = other_2029;
    let _e145: Line = other_2029;
    let _e148: Line = other_2029;
    let _e151: Line = other_2029;
    let _e164: PointAndPlane = self_2371;
    let _e168: Line = other_2029;
    let _e171: Line = other_2029;
    let _e174: Line = other_2029;
    let _e177: Line = other_2029;
    let _e190: PointAndPlane = self_2371;
    let _e194: Line = other_2029;
    let _e197: Line = other_2029;
    let _e200: Line = other_2029;
    let _e203: Line = other_2029;
    let _e215: PointAndPlane = self_2371;
    let _e219: Line = other_2029;
    let _e222: Line = other_2029;
    let _e225: Line = other_2029;
    let _e228: Line = other_2029;
    let _e240: PointAndPlane = self_2371;
    let _e244: Line = other_2029;
    let _e247: Line = other_2029;
    let _e250: Line = other_2029;
    let _e253: Line = other_2029;
    let _e266: PointAndPlane = self_2371;
    let _e270: Line = other_2029;
    let _e273: Line = other_2029;
    let _e276: Line = other_2029;
    let _e279: Line = other_2029;
    let _e292: PointAndPlane = self_2371;
    let _e296: Line = other_2029;
    let _e299: Line = other_2029;
    let _e302: Line = other_2029;
    let _e305: Line = other_2029;
    let _e317: PointAndPlane = self_2371;
    let _e321: Line = other_2029;
    let _e324: Line = other_2029;
    let _e327: Line = other_2029;
    let _e330: Line = other_2029;
    let _e344: PointAndPlane = self_2371;
    let _e348: Line = other_2029;
    let _e351: Line = other_2029;
    let _e354: Line = other_2029;
    let _e357: Line = other_2029;
    let _e371: PointAndPlane = self_2371;
    let _e375: Line = other_2029;
    let _e378: Line = other_2029;
    let _e381: Line = other_2029;
    let _e384: Line = other_2029;
    let _e398: PointAndPlane = self_2371;
    let _e402: Line = other_2029;
    let _e405: Line = other_2029;
    let _e408: Line = other_2029;
    let _e411: Line = other_2029;
    return PointAndPlane((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e112.g1_.y) * vec4<f32>(_e116.g1_.x, _e119.g1_.x, _e122.g0_.z, _e125.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e138.g1_.z) * vec4<f32>(_e142.g1_.y, _e145.g0_.z, _e148.g1_.y, _e151.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e164.g1_.w) * vec4<f32>(_e168.g1_.z, _e171.g0_.y, _e174.g0_.x, _e177.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e190.g0_.x) * vec4<f32>(_e194.g0_.x, _e197.g0_.x, _e200.g0_.y, _e203.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e215.g0_.y) * vec4<f32>(_e219.g1_.x, _e222.g1_.x, _e225.g0_.z, _e228.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e240.g0_.z) * vec4<f32>(_e244.g1_.y, _e247.g0_.z, _e250.g1_.y, _e253.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e266.g0_.w) * vec4<f32>(_e270.g1_.z, _e273.g0_.y, _e276.g0_.x, _e279.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e292.g1_.x) * vec4<f32>(_e296.g0_.x, _e299.g0_.x, _e302.g0_.y, _e305.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e317.g1_.y) * vec4<f32>(_e321.g0_.x, _e324.g0_.x, _e327.g1_.z, _e330.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e344.g1_.z) * vec4<f32>(_e348.g0_.y, _e351.g1_.z, _e354.g0_.y, _e357.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e371.g1_.w) * vec4<f32>(_e375.g0_.z, _e378.g1_.y, _e381.g1_.x, _e384.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e398.g0_.x) * vec4<f32>(_e402.g1_.x, _e405.g1_.x, _e408.g1_.y, _e411.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_line_regressive_product(self_2372: PointAndPlane, other_2030: Line) -> Plane {
    var self_2373: PointAndPlane;
    var other_2031: Line;

    self_2373 = self_2372;
    other_2031 = other_2030;
    let _e4: PointAndPlane = self_2373;
    let _e8: Line = other_2031;
    let _e11: Line = other_2031;
    let _e14: Line = other_2031;
    let _e17: Line = other_2031;
    let _e30: PointAndPlane = self_2373;
    let _e34: Line = other_2031;
    let _e37: Line = other_2031;
    let _e40: Line = other_2031;
    let _e43: Line = other_2031;
    let _e57: PointAndPlane = self_2373;
    let _e61: Line = other_2031;
    let _e64: Line = other_2031;
    let _e67: Line = other_2031;
    let _e70: Line = other_2031;
    let _e84: PointAndPlane = self_2373;
    let _e88: Line = other_2031;
    let _e91: Line = other_2031;
    let _e94: Line = other_2031;
    let _e97: Line = other_2031;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_line_outer_product(self_2374: PointAndPlane, other_2032: Line) -> Point {
    var self_2375: PointAndPlane;
    var other_2033: Line;

    self_2375 = self_2374;
    other_2033 = other_2032;
    let _e4: PointAndPlane = self_2375;
    let _e8: Line = other_2033;
    let _e11: Line = other_2033;
    let _e14: Line = other_2033;
    let _e17: Line = other_2033;
    let _e29: PointAndPlane = self_2375;
    let _e33: Line = other_2033;
    let _e36: Line = other_2033;
    let _e39: Line = other_2033;
    let _e42: Line = other_2033;
    let _e55: PointAndPlane = self_2375;
    let _e59: Line = other_2033;
    let _e62: Line = other_2033;
    let _e65: Line = other_2033;
    let _e68: Line = other_2033;
    let _e81: PointAndPlane = self_2375;
    let _e85: Line = other_2033;
    let _e88: Line = other_2033;
    let _e91: Line = other_2033;
    let _e94: Line = other_2033;
    return Point((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g1_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g1_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g1_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_line_inner_product(self_2376: PointAndPlane, other_2034: Line) -> Plane {
    var self_2377: PointAndPlane;
    var other_2035: Line;

    self_2377 = self_2376;
    other_2035 = other_2034;
    let _e4: PointAndPlane = self_2377;
    let _e8: Line = other_2035;
    let _e11: Line = other_2035;
    let _e14: Line = other_2035;
    let _e17: Line = other_2035;
    let _e29: PointAndPlane = self_2377;
    let _e33: Line = other_2035;
    let _e36: Line = other_2035;
    let _e39: Line = other_2035;
    let _e42: Line = other_2035;
    let _e55: PointAndPlane = self_2377;
    let _e59: Line = other_2035;
    let _e62: Line = other_2035;
    let _e65: Line = other_2035;
    let _e68: Line = other_2035;
    let _e81: PointAndPlane = self_2377;
    let _e85: Line = other_2035;
    let _e88: Line = other_2035;
    let _e91: Line = other_2035;
    let _e94: Line = other_2035;
    let _e106: PointAndPlane = self_2377;
    let _e110: Line = other_2035;
    let _e113: Line = other_2035;
    let _e116: Line = other_2035;
    let _e119: Line = other_2035;
    let _e133: PointAndPlane = self_2377;
    let _e137: Line = other_2035;
    let _e140: Line = other_2035;
    let _e143: Line = other_2035;
    let _e146: Line = other_2035;
    let _e160: PointAndPlane = self_2377;
    let _e164: Line = other_2035;
    let _e167: Line = other_2035;
    let _e170: Line = other_2035;
    let _e173: Line = other_2035;
    let _e187: PointAndPlane = self_2377;
    let _e191: Line = other_2035;
    let _e194: Line = other_2035;
    let _e197: Line = other_2035;
    let _e200: Line = other_2035;
    return Plane((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g1_.x) * vec4<f32>(_e85.g0_.x, _e88.g0_.x, _e91.g0_.y, _e94.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e106.g1_.y) * vec4<f32>(_e110.g0_.x, _e113.g0_.x, _e116.g1_.z, _e119.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e133.g1_.z) * vec4<f32>(_e137.g0_.y, _e140.g1_.z, _e143.g0_.y, _e146.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e160.g1_.w) * vec4<f32>(_e164.g0_.z, _e167.g1_.y, _e170.g1_.x, _e173.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e187.g0_.x) * vec4<f32>(_e191.g1_.x, _e194.g1_.x, _e197.g1_.y, _e200.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_line_geometric_anti_product(self_2378: PointAndPlane, other_2036: Line) -> PointAndPlane {
    var self_2379: PointAndPlane;
    var other_2037: Line;

    self_2379 = self_2378;
    other_2037 = other_2036;
    let _e4: PointAndPlane = self_2379;
    let _e8: Line = other_2037;
    let _e11: Line = other_2037;
    let _e14: Line = other_2037;
    let _e17: Line = other_2037;
    let _e30: PointAndPlane = self_2379;
    let _e34: Line = other_2037;
    let _e37: Line = other_2037;
    let _e40: Line = other_2037;
    let _e43: Line = other_2037;
    let _e57: PointAndPlane = self_2379;
    let _e61: Line = other_2037;
    let _e64: Line = other_2037;
    let _e67: Line = other_2037;
    let _e70: Line = other_2037;
    let _e84: PointAndPlane = self_2379;
    let _e88: Line = other_2037;
    let _e91: Line = other_2037;
    let _e94: Line = other_2037;
    let _e97: Line = other_2037;
    let _e109: PointAndPlane = self_2379;
    let _e113: Line = other_2037;
    let _e116: Line = other_2037;
    let _e119: Line = other_2037;
    let _e122: Line = other_2037;
    let _e136: PointAndPlane = self_2379;
    let _e140: Line = other_2037;
    let _e143: Line = other_2037;
    let _e146: Line = other_2037;
    let _e149: Line = other_2037;
    let _e163: PointAndPlane = self_2379;
    let _e167: Line = other_2037;
    let _e170: Line = other_2037;
    let _e173: Line = other_2037;
    let _e176: Line = other_2037;
    let _e190: PointAndPlane = self_2379;
    let _e194: Line = other_2037;
    let _e197: Line = other_2037;
    let _e200: Line = other_2037;
    let _e203: Line = other_2037;
    let _e215: PointAndPlane = self_2379;
    let _e219: Line = other_2037;
    let _e222: Line = other_2037;
    let _e225: Line = other_2037;
    let _e228: Line = other_2037;
    let _e241: PointAndPlane = self_2379;
    let _e245: Line = other_2037;
    let _e248: Line = other_2037;
    let _e251: Line = other_2037;
    let _e254: Line = other_2037;
    let _e268: PointAndPlane = self_2379;
    let _e272: Line = other_2037;
    let _e275: Line = other_2037;
    let _e278: Line = other_2037;
    let _e281: Line = other_2037;
    let _e295: PointAndPlane = self_2379;
    let _e299: Line = other_2037;
    let _e302: Line = other_2037;
    let _e305: Line = other_2037;
    let _e308: Line = other_2037;
    let _e320: PointAndPlane = self_2379;
    let _e324: Line = other_2037;
    let _e327: Line = other_2037;
    let _e330: Line = other_2037;
    let _e333: Line = other_2037;
    let _e347: PointAndPlane = self_2379;
    let _e351: Line = other_2037;
    let _e354: Line = other_2037;
    let _e357: Line = other_2037;
    let _e360: Line = other_2037;
    let _e374: PointAndPlane = self_2379;
    let _e378: Line = other_2037;
    let _e381: Line = other_2037;
    let _e384: Line = other_2037;
    let _e387: Line = other_2037;
    let _e401: PointAndPlane = self_2379;
    let _e405: Line = other_2037;
    let _e408: Line = other_2037;
    let _e411: Line = other_2037;
    let _e414: Line = other_2037;
    return PointAndPlane((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e136.g1_.z) * vec4<f32>(_e140.g0_.y, _e143.g1_.z, _e146.g0_.y, _e149.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e163.g1_.w) * vec4<f32>(_e167.g0_.z, _e170.g1_.y, _e173.g1_.x, _e176.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e190.g0_.x) * vec4<f32>(_e194.g1_.x, _e197.g1_.x, _e200.g1_.y, _e203.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))), (((((((((vec4<f32>(_e215.g0_.y) * vec4<f32>(_e219.g0_.x, _e222.g0_.x, _e225.g1_.z, _e228.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e241.g0_.z) * vec4<f32>(_e245.g0_.y, _e248.g1_.z, _e251.g0_.y, _e254.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e268.g0_.w) * vec4<f32>(_e272.g0_.z, _e275.g1_.y, _e278.g1_.x, _e281.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e295.g1_.x) * vec4<f32>(_e299.g1_.x, _e302.g1_.x, _e305.g1_.y, _e308.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e320.g1_.y) * vec4<f32>(_e324.g1_.x, _e327.g1_.x, _e330.g0_.z, _e333.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e347.g1_.z) * vec4<f32>(_e351.g1_.y, _e354.g0_.z, _e357.g1_.y, _e360.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e374.g1_.w) * vec4<f32>(_e378.g1_.z, _e381.g0_.y, _e384.g0_.x, _e387.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e401.g0_.x) * vec4<f32>(_e405.g0_.x, _e408.g0_.x, _e411.g0_.y, _e414.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_line_inner_anti_product(self_2380: PointAndPlane, other_2038: Line) -> Point {
    var self_2381: PointAndPlane;
    var other_2039: Line;

    self_2381 = self_2380;
    other_2039 = other_2038;
    let _e4: PointAndPlane = self_2381;
    let _e8: Line = other_2039;
    let _e11: Line = other_2039;
    let _e14: Line = other_2039;
    let _e17: Line = other_2039;
    let _e30: PointAndPlane = self_2381;
    let _e34: Line = other_2039;
    let _e37: Line = other_2039;
    let _e40: Line = other_2039;
    let _e43: Line = other_2039;
    let _e57: PointAndPlane = self_2381;
    let _e61: Line = other_2039;
    let _e64: Line = other_2039;
    let _e67: Line = other_2039;
    let _e70: Line = other_2039;
    let _e84: PointAndPlane = self_2381;
    let _e88: Line = other_2039;
    let _e91: Line = other_2039;
    let _e94: Line = other_2039;
    let _e97: Line = other_2039;
    let _e109: PointAndPlane = self_2381;
    let _e113: Line = other_2039;
    let _e116: Line = other_2039;
    let _e119: Line = other_2039;
    let _e122: Line = other_2039;
    let _e136: PointAndPlane = self_2381;
    let _e140: Line = other_2039;
    let _e143: Line = other_2039;
    let _e146: Line = other_2039;
    let _e149: Line = other_2039;
    let _e163: PointAndPlane = self_2381;
    let _e167: Line = other_2039;
    let _e170: Line = other_2039;
    let _e173: Line = other_2039;
    let _e176: Line = other_2039;
    let _e190: PointAndPlane = self_2381;
    let _e194: Line = other_2039;
    let _e197: Line = other_2039;
    let _e200: Line = other_2039;
    let _e203: Line = other_2039;
    return Point((((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))) + ((vec4<f32>(_e109.g1_.y) * vec4<f32>(_e113.g0_.x, _e116.g0_.x, _e119.g1_.z, _e122.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e136.g1_.z) * vec4<f32>(_e140.g0_.y, _e143.g1_.z, _e146.g0_.y, _e149.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e163.g1_.w) * vec4<f32>(_e167.g0_.z, _e170.g1_.y, _e173.g1_.x, _e176.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e190.g0_.x) * vec4<f32>(_e194.g1_.x, _e197.g1_.x, _e200.g1_.y, _e203.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_line_left_contraction(self_2382: PointAndPlane, other_2040: Line) -> Plane {
    var self_2383: PointAndPlane;
    var other_2041: Line;

    self_2383 = self_2382;
    other_2041 = other_2040;
    let _e4: PointAndPlane = self_2383;
    let _e8: Line = other_2041;
    let _e11: Line = other_2041;
    let _e14: Line = other_2041;
    let _e17: Line = other_2041;
    let _e30: PointAndPlane = self_2383;
    let _e34: Line = other_2041;
    let _e37: Line = other_2041;
    let _e40: Line = other_2041;
    let _e43: Line = other_2041;
    let _e57: PointAndPlane = self_2383;
    let _e61: Line = other_2041;
    let _e64: Line = other_2041;
    let _e67: Line = other_2041;
    let _e70: Line = other_2041;
    let _e84: PointAndPlane = self_2383;
    let _e88: Line = other_2041;
    let _e91: Line = other_2041;
    let _e94: Line = other_2041;
    let _e97: Line = other_2041;
    return Plane((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_line_right_contraction(self_2384: PointAndPlane, other_2042: Line) -> Plane {
    var self_2385: PointAndPlane;
    var other_2043: Line;

    self_2385 = self_2384;
    other_2043 = other_2042;
    let _e4: PointAndPlane = self_2385;
    let _e8: Line = other_2043;
    let _e11: Line = other_2043;
    let _e14: Line = other_2043;
    let _e17: Line = other_2043;
    let _e29: PointAndPlane = self_2385;
    let _e33: Line = other_2043;
    let _e36: Line = other_2043;
    let _e39: Line = other_2043;
    let _e42: Line = other_2043;
    let _e55: PointAndPlane = self_2385;
    let _e59: Line = other_2043;
    let _e62: Line = other_2043;
    let _e65: Line = other_2043;
    let _e68: Line = other_2043;
    let _e81: PointAndPlane = self_2385;
    let _e85: Line = other_2043;
    let _e88: Line = other_2043;
    let _e91: Line = other_2043;
    let _e94: Line = other_2043;
    return Plane((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e29.g0_.z) * vec4<f32>(_e33.g1_.y, _e36.g0_.z, _e39.g1_.y, _e42.g0_.x)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e55.g0_.w) * vec4<f32>(_e59.g1_.z, _e62.g0_.y, _e65.g0_.x, _e68.g1_.z)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e81.g0_.x) * vec4<f32>(_e85.g1_.x, _e88.g1_.x, _e91.g1_.y, _e94.g1_.z)) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_line_left_anti_contraction(self_2386: PointAndPlane, other_2044: Line) -> Point {
    var self_2387: PointAndPlane;
    var other_2045: Line;

    self_2387 = self_2386;
    other_2045 = other_2044;
    let _e4: PointAndPlane = self_2387;
    let _e8: Line = other_2045;
    let _e11: Line = other_2045;
    let _e14: Line = other_2045;
    let _e17: Line = other_2045;
    let _e30: PointAndPlane = self_2387;
    let _e34: Line = other_2045;
    let _e37: Line = other_2045;
    let _e40: Line = other_2045;
    let _e43: Line = other_2045;
    let _e57: PointAndPlane = self_2387;
    let _e61: Line = other_2045;
    let _e64: Line = other_2045;
    let _e67: Line = other_2045;
    let _e70: Line = other_2045;
    let _e84: PointAndPlane = self_2387;
    let _e88: Line = other_2045;
    let _e91: Line = other_2045;
    let _e94: Line = other_2045;
    let _e97: Line = other_2045;
    return Point((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g1_.x, _e11.g1_.x, _e14.g0_.z, _e17.g0_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g1_.y, _e37.g0_.z, _e40.g1_.y, _e43.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g1_.z, _e64.g0_.y, _e67.g0_.x, _e70.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g0_.x) * vec4<f32>(_e88.g1_.x, _e91.g1_.x, _e94.g1_.y, _e97.g1_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_line_right_anti_contraction(self_2388: PointAndPlane, other_2046: Line) -> Point {
    var self_2389: PointAndPlane;
    var other_2047: Line;

    self_2389 = self_2388;
    other_2047 = other_2046;
    let _e4: PointAndPlane = self_2389;
    let _e8: Line = other_2047;
    let _e11: Line = other_2047;
    let _e14: Line = other_2047;
    let _e17: Line = other_2047;
    let _e30: PointAndPlane = self_2389;
    let _e34: Line = other_2047;
    let _e37: Line = other_2047;
    let _e40: Line = other_2047;
    let _e43: Line = other_2047;
    let _e57: PointAndPlane = self_2389;
    let _e61: Line = other_2047;
    let _e64: Line = other_2047;
    let _e67: Line = other_2047;
    let _e70: Line = other_2047;
    let _e84: PointAndPlane = self_2389;
    let _e88: Line = other_2047;
    let _e91: Line = other_2047;
    let _e94: Line = other_2047;
    let _e97: Line = other_2047;
    return Point((((((vec4<f32>(_e4.g1_.y) * vec4<f32>(_e8.g0_.x, _e11.g0_.x, _e14.g1_.z, _e17.g1_.y)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g1_.z) * vec4<f32>(_e34.g0_.y, _e37.g1_.z, _e40.g0_.y, _e43.g1_.x)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g1_.w) * vec4<f32>(_e61.g0_.z, _e64.g1_.y, _e67.g1_.x, _e70.g0_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.x) * vec4<f32>(_e88.g0_.x, _e91.g0_.x, _e94.g0_.y, _e97.g0_.z)) * vec4<f32>(0.0, 1.0, 1.0, 1.0))));
}

fn point_and_plane_translator_geometric_product(self_2390: PointAndPlane, other_2048: Translator) -> PointAndPlane {
    var self_2391: PointAndPlane;
    var other_2049: Translator;

    self_2391 = self_2390;
    other_2049 = other_2048;
    let _e4: PointAndPlane = self_2391;
    let _e8: Translator = other_2049;
    let _e11: PointAndPlane = self_2391;
    let _e15: Translator = other_2049;
    let _e27: PointAndPlane = self_2391;
    let _e31: Translator = other_2049;
    let _e43: PointAndPlane = self_2391;
    let _e47: Translator = other_2049;
    let _e59: PointAndPlane = self_2391;
    let _e63: Translator = other_2049;
    let _e75: PointAndPlane = self_2391;
    let _e78: PointAndPlane = self_2391;
    let _e81: PointAndPlane = self_2391;
    let _e84: PointAndPlane = self_2391;
    let _e88: Translator = other_2049;
    let _e101: PointAndPlane = self_2391;
    let _e105: Translator = other_2049;
    let _e116: PointAndPlane = self_2391;
    let _e120: Translator = other_2049;
    let _e132: PointAndPlane = self_2391;
    let _e136: Translator = other_2049;
    let _e140: PointAndPlane = self_2391;
    let _e144: Translator = other_2049;
    let _e156: PointAndPlane = self_2391;
    let _e160: Translator = other_2049;
    let _e172: PointAndPlane = self_2391;
    let _e175: PointAndPlane = self_2391;
    let _e178: PointAndPlane = self_2391;
    let _e181: PointAndPlane = self_2391;
    let _e185: Translator = other_2049;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.x) * _e8.g0_) + ((vec4<f32>(_e11.g0_.z) * _e15.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e27.g0_.w) * _e31.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e43.g1_.z) * _e47.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e59.g1_.w) * _e63.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e75.g0_.y, _e78.g0_.y, _e81.g1_.y, _e84.g1_.y) * _e88.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))), (((((((vec4<f32>(_e101.g0_.z) * _e105.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e116.g0_.w) * _e120.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e132.g1_.x) * _e136.g0_)) + ((vec4<f32>(_e140.g1_.z) * _e144.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e156.g1_.w) * _e160.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e172.g1_.y, _e175.g1_.y, _e178.g0_.y, _e181.g0_.y) * _e185.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_translator_regressive_product(self_2392: PointAndPlane, other_2050: Translator) -> Plane {
    var self_2393: PointAndPlane;
    var other_2051: Translator;

    self_2393 = self_2392;
    other_2051 = other_2050;
    let _e4: PointAndPlane = self_2393;
    let _e8: Translator = other_2051;
    let _e20: PointAndPlane = self_2393;
    let _e24: Translator = other_2051;
    let _e37: PointAndPlane = self_2393;
    let _e40: Translator = other_2051;
    return Plane(((((vec4<f32>(_e4.g0_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g0_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g0_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_translator_outer_product(self_2394: PointAndPlane, other_2052: Translator) -> PointAndPlane {
    var self_2395: PointAndPlane;
    var other_2053: Translator;

    self_2395 = self_2394;
    other_2053 = other_2052;
    let _e4: PointAndPlane = self_2395;
    let _e8: Translator = other_2053;
    let _e19: PointAndPlane = self_2395;
    let _e23: Translator = other_2053;
    let _e35: PointAndPlane = self_2395;
    let _e39: Translator = other_2053;
    let _e51: PointAndPlane = self_2395;
    let _e53: Translator = other_2053;
    let _e59: PointAndPlane = self_2395;
    let _e61: Translator = other_2053;
    return PointAndPlane((((((vec4<f32>(_e4.g1_.y) * _e8.g0_.wwwz) * vec4<f32>(0.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e19.g1_.z) * _e23.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e35.g1_.w) * _e39.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (_e51.g0_ * vec4<f32>(_e53.g0_.x))), (_e59.g1_ * vec4<f32>(_e61.g0_.x)));
}

fn point_and_plane_translator_inner_product(self_2396: PointAndPlane, other_2054: Translator) -> PointAndPlane {
    var self_2397: PointAndPlane;
    var other_2055: Translator;

    self_2397 = self_2396;
    other_2055 = other_2054;
    let _e4: PointAndPlane = self_2397;
    let _e6: Translator = other_2055;
    let _e11: PointAndPlane = self_2397;
    let _e15: Translator = other_2055;
    let _e26: PointAndPlane = self_2397;
    let _e30: Translator = other_2055;
    let _e42: PointAndPlane = self_2397;
    let _e46: Translator = other_2055;
    let _e50: PointAndPlane = self_2397;
    let _e54: Translator = other_2055;
    let _e66: PointAndPlane = self_2397;
    let _e70: Translator = other_2055;
    let _e82: PointAndPlane = self_2397;
    let _e85: PointAndPlane = self_2397;
    let _e88: PointAndPlane = self_2397;
    let _e91: PointAndPlane = self_2397;
    let _e95: Translator = other_2055;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), (((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + (vec4<f32>(_e42.g1_.x) * _e46.g0_)) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, 1.0, 0.0))) + ((vec4<f32>(_e66.g1_.w) * _e70.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, 1.0))) + ((vec4<f32>(_e82.g1_.y, _e85.g1_.y, _e88.g0_.y, _e91.g0_.y) * _e95.g0_.yxwz) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_translator_geometric_anti_product(self_2398: PointAndPlane, other_2056: Translator) -> PointAndPlane {
    var self_2399: PointAndPlane;
    var other_2057: Translator;

    self_2399 = self_2398;
    other_2057 = other_2056;
    let _e4: PointAndPlane = self_2399;
    let _e8: Translator = other_2057;
    let _e19: PointAndPlane = self_2399;
    let _e23: Translator = other_2057;
    let _e35: PointAndPlane = self_2399;
    let _e39: Translator = other_2057;
    let _e50: PointAndPlane = self_2399;
    let _e54: Translator = other_2057;
    let _e67: PointAndPlane = self_2399;
    let _e71: Translator = other_2057;
    let _e84: PointAndPlane = self_2399;
    let _e87: PointAndPlane = self_2399;
    let _e90: PointAndPlane = self_2399;
    let _e93: PointAndPlane = self_2399;
    let _e97: Translator = other_2057;
    let _e111: PointAndPlane = self_2399;
    let _e115: Translator = other_2057;
    let _e125: PointAndPlane = self_2399;
    let _e129: Translator = other_2057;
    let _e142: PointAndPlane = self_2399;
    let _e146: Translator = other_2057;
    let _e159: PointAndPlane = self_2399;
    let _e163: Translator = other_2057;
    let _e175: PointAndPlane = self_2399;
    let _e179: Translator = other_2057;
    let _e191: PointAndPlane = self_2399;
    let _e194: PointAndPlane = self_2399;
    let _e197: PointAndPlane = self_2399;
    let _e200: PointAndPlane = self_2399;
    let _e204: Translator = other_2057;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.w) * _e71.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y, _e87.g1_.y, _e90.g0_.y, _e93.g0_.y) * _e97.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), (((((((vec4<f32>(_e111.g0_.x) * _e115.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e125.g0_.z) * _e129.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e142.g0_.w) * _e146.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e159.g1_.z) * _e163.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e175.g1_.w) * _e179.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e191.g0_.y, _e194.g0_.y, _e197.g1_.y, _e200.g1_.y) * _e204.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))));
}

fn point_and_plane_translator_inner_anti_product(self_2400: PointAndPlane, other_2058: Translator) -> PointAndPlane {
    var self_2401: PointAndPlane;
    var other_2059: Translator;

    self_2401 = self_2400;
    other_2059 = other_2058;
    let _e4: PointAndPlane = self_2401;
    let _e8: Translator = other_2059;
    let _e19: PointAndPlane = self_2401;
    let _e23: Translator = other_2059;
    let _e35: PointAndPlane = self_2401;
    let _e39: Translator = other_2059;
    let _e50: PointAndPlane = self_2401;
    let _e54: Translator = other_2059;
    let _e67: PointAndPlane = self_2401;
    let _e71: Translator = other_2059;
    let _e84: PointAndPlane = self_2401;
    let _e87: PointAndPlane = self_2401;
    let _e90: PointAndPlane = self_2401;
    let _e93: PointAndPlane = self_2401;
    let _e97: Translator = other_2059;
    let _e111: PointAndPlane = self_2401;
    let _e113: Translator = other_2059;
    return PointAndPlane((((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.x) * _e39.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e50.g1_.z) * _e54.g0_.zzxz) * vec4<f32>(-(1.0), 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e67.g1_.w) * _e71.g0_.wwwx) * vec4<f32>(-(1.0), 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e84.g1_.y, _e87.g1_.y, _e90.g0_.y, _e93.g0_.y) * _e97.g0_.yxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), ((_e111.g0_ * vec4<f32>(_e113.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_translator_left_contraction(self_2402: PointAndPlane, other_2060: Translator) -> Plane {
    var self_2403: PointAndPlane;
    var other_2061: Translator;

    self_2403 = self_2402;
    other_2061 = other_2060;
    let _e4: PointAndPlane = self_2403;
    let _e8: Translator = other_2061;
    let _e20: PointAndPlane = self_2403;
    let _e24: Translator = other_2061;
    let _e37: PointAndPlane = self_2403;
    let _e40: Translator = other_2061;
    return Plane(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g1_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_translator_right_contraction(self_2404: PointAndPlane, other_2062: Translator) -> PointAndPlane {
    var self_2405: PointAndPlane;
    var other_2063: Translator;

    self_2405 = self_2404;
    other_2063 = other_2062;
    let _e4: PointAndPlane = self_2405;
    let _e6: Translator = other_2063;
    let _e11: PointAndPlane = self_2405;
    let _e15: Translator = other_2063;
    let _e26: PointAndPlane = self_2405;
    let _e30: Translator = other_2063;
    let _e42: PointAndPlane = self_2405;
    let _e46: Translator = other_2063;
    let _e58: PointAndPlane = self_2405;
    let _e62: Translator = other_2063;
    let _e74: PointAndPlane = self_2405;
    let _e77: PointAndPlane = self_2405;
    let _e80: PointAndPlane = self_2405;
    let _e83: PointAndPlane = self_2405;
    let _e87: Translator = other_2063;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((((vec4<f32>(_e11.g0_.z) * _e15.g0_.wwwy) * vec4<f32>(0.0, 1.0, 0.0, -(1.0))) + ((vec4<f32>(_e26.g0_.w) * _e30.g0_.zzyz) * vec4<f32>(0.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e42.g1_.z) * vec4<f32>(_e46.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e58.g1_.w) * vec4<f32>(_e62.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e74.g1_.x, _e77.g1_.y, _e80.g0_.y, _e83.g0_.y) * _e87.g0_.xxwz) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))));
}

fn point_and_plane_translator_left_anti_contraction(self_2406: PointAndPlane, other_2064: Translator) -> PointAndPlane {
    var self_2407: PointAndPlane;
    var other_2065: Translator;

    self_2407 = self_2406;
    other_2065 = other_2064;
    let _e4: PointAndPlane = self_2407;
    let _e8: Translator = other_2065;
    let _e19: PointAndPlane = self_2407;
    let _e23: Translator = other_2065;
    let _e35: PointAndPlane = self_2407;
    let _e39: Translator = other_2065;
    let _e52: PointAndPlane = self_2407;
    let _e56: Translator = other_2065;
    let _e69: PointAndPlane = self_2407;
    let _e72: PointAndPlane = self_2407;
    let _e75: PointAndPlane = self_2407;
    let _e78: PointAndPlane = self_2407;
    let _e82: Translator = other_2065;
    let _e96: PointAndPlane = self_2407;
    let _e98: Translator = other_2065;
    return PointAndPlane(((((((vec4<f32>(_e4.g0_.z) * _e8.g0_.wwwy) * vec4<f32>(0.0, -(1.0), 0.0, 1.0)) + ((vec4<f32>(_e19.g0_.w) * _e23.g0_.zzyz) * vec4<f32>(0.0, 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e52.g1_.w) * vec4<f32>(_e56.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e69.g1_.x, _e72.g1_.y, _e75.g0_.y, _e78.g0_.y) * _e82.g0_.xxwz) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))), ((_e96.g0_ * vec4<f32>(_e98.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_translator_right_anti_contraction(self_2408: PointAndPlane, other_2066: Translator) -> Point {
    var self_2409: PointAndPlane;
    var other_2067: Translator;

    self_2409 = self_2408;
    other_2067 = other_2066;
    let _e4: PointAndPlane = self_2409;
    let _e8: Translator = other_2067;
    let _e20: PointAndPlane = self_2409;
    let _e24: Translator = other_2067;
    let _e37: PointAndPlane = self_2409;
    let _e40: Translator = other_2067;
    return Point(((((vec4<f32>(_e4.g1_.z) * vec4<f32>(_e8.g0_.z)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0)) + ((vec4<f32>(_e20.g1_.w) * vec4<f32>(_e24.g0_.w)) * vec4<f32>(-(1.0), 0.0, 0.0, 0.0))) + ((_e37.g1_.yxxx * _e40.g0_.yyzw) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))));
}

fn point_and_plane_motor_add(self_2410: PointAndPlane, other_2068: Motor) -> MultiVector {
    var self_2411: PointAndPlane;
    var other_2069: Motor;

    self_2411 = self_2410;
    other_2069 = other_2068;
    let _e4: Motor = other_2069;
    let _e6: PointAndPlane = self_2411;
    let _e9: PointAndPlane = self_2411;
    let _e12: PointAndPlane = self_2411;
    let _e15: PointAndPlane = self_2411;
    let _e19: PointAndPlane = self_2411;
    let _e22: PointAndPlane = self_2411;
    let _e25: PointAndPlane = self_2411;
    let _e28: PointAndPlane = self_2411;
    let _e32: Motor = other_2069;
    return MultiVector(_e4.g0_, vec4<f32>(_e6.g1_.x, _e9.g0_.y, _e12.g0_.z, _e15.g0_.w), vec4<f32>(_e19.g0_.x, _e22.g1_.y, _e25.g1_.z, _e28.g1_.w), _e32.g1_);
}

fn point_and_plane_motor_sub(self_2412: PointAndPlane, other_2070: Motor) -> MultiVector {
    var self_2413: PointAndPlane;
    var other_2071: Motor;

    self_2413 = self_2412;
    other_2071 = other_2070;
    let _e6: Motor = other_2071;
    let _e9: PointAndPlane = self_2413;
    let _e12: PointAndPlane = self_2413;
    let _e15: PointAndPlane = self_2413;
    let _e18: PointAndPlane = self_2413;
    let _e22: PointAndPlane = self_2413;
    let _e25: PointAndPlane = self_2413;
    let _e28: PointAndPlane = self_2413;
    let _e31: PointAndPlane = self_2413;
    let _e37: Motor = other_2071;
    return MultiVector((vec4<f32>(0.0) - _e6.g0_), vec4<f32>(_e9.g1_.x, _e12.g0_.y, _e15.g0_.z, _e18.g0_.w), vec4<f32>(_e22.g0_.x, _e25.g1_.y, _e28.g1_.z, _e31.g1_.w), (vec4<f32>(0.0) - _e37.g1_));
}

fn point_and_plane_motor_geometric_product(self_2414: PointAndPlane, other_2072: Motor) -> PointAndPlane {
    var self_2415: PointAndPlane;
    var other_2073: Motor;

    self_2415 = self_2414;
    other_2073 = other_2072;
    let _e4: PointAndPlane = self_2415;
    let _e8: Motor = other_2073;
    let _e11: Motor = other_2073;
    let _e14: Motor = other_2073;
    let _e17: Motor = other_2073;
    let _e22: PointAndPlane = self_2415;
    let _e26: Motor = other_2073;
    let _e29: Motor = other_2073;
    let _e32: Motor = other_2073;
    let _e35: Motor = other_2073;
    let _e49: PointAndPlane = self_2415;
    let _e53: Motor = other_2073;
    let _e56: Motor = other_2073;
    let _e59: Motor = other_2073;
    let _e62: Motor = other_2073;
    let _e76: PointAndPlane = self_2415;
    let _e80: Motor = other_2073;
    let _e83: Motor = other_2073;
    let _e86: Motor = other_2073;
    let _e89: Motor = other_2073;
    let _e103: PointAndPlane = self_2415;
    let _e107: Motor = other_2073;
    let _e110: Motor = other_2073;
    let _e113: Motor = other_2073;
    let _e116: Motor = other_2073;
    let _e131: PointAndPlane = self_2415;
    let _e135: Motor = other_2073;
    let _e138: Motor = other_2073;
    let _e141: Motor = other_2073;
    let _e144: Motor = other_2073;
    let _e157: PointAndPlane = self_2415;
    let _e161: Motor = other_2073;
    let _e164: Motor = other_2073;
    let _e167: Motor = other_2073;
    let _e170: Motor = other_2073;
    let _e183: PointAndPlane = self_2415;
    let _e187: Motor = other_2073;
    let _e190: Motor = other_2073;
    let _e193: Motor = other_2073;
    let _e196: Motor = other_2073;
    let _e209: PointAndPlane = self_2415;
    let _e213: Motor = other_2073;
    let _e216: Motor = other_2073;
    let _e219: Motor = other_2073;
    let _e222: Motor = other_2073;
    let _e236: PointAndPlane = self_2415;
    let _e240: Motor = other_2073;
    let _e243: Motor = other_2073;
    let _e246: Motor = other_2073;
    let _e249: Motor = other_2073;
    let _e262: PointAndPlane = self_2415;
    let _e266: Motor = other_2073;
    let _e269: Motor = other_2073;
    let _e272: Motor = other_2073;
    let _e275: Motor = other_2073;
    let _e288: PointAndPlane = self_2415;
    let _e292: Motor = other_2073;
    let _e295: Motor = other_2073;
    let _e298: Motor = other_2073;
    let _e301: Motor = other_2073;
    let _e314: PointAndPlane = self_2415;
    let _e318: Motor = other_2073;
    let _e321: Motor = other_2073;
    let _e324: Motor = other_2073;
    let _e327: Motor = other_2073;
    let _e333: PointAndPlane = self_2415;
    let _e337: Motor = other_2073;
    let _e340: Motor = other_2073;
    let _e343: Motor = other_2073;
    let _e346: Motor = other_2073;
    let _e360: PointAndPlane = self_2415;
    let _e364: Motor = other_2073;
    let _e367: Motor = other_2073;
    let _e370: Motor = other_2073;
    let _e373: Motor = other_2073;
    let _e387: PointAndPlane = self_2415;
    let _e391: Motor = other_2073;
    let _e394: Motor = other_2073;
    let _e397: Motor = other_2073;
    let _e400: Motor = other_2073;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g1_.y, _e29.g0_.x, _e32.g0_.w, _e35.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g1_.z, _e56.g0_.w, _e59.g0_.x, _e62.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g1_.w, _e83.g0_.z, _e86.g0_.y, _e89.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e103.g1_.x) * vec4<f32>(_e107.g1_.x, _e110.g0_.y, _e113.g0_.z, _e116.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e131.g1_.y) * vec4<f32>(_e135.g0_.y, _e138.g1_.x, _e141.g1_.w, _e144.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e157.g1_.z) * vec4<f32>(_e161.g0_.z, _e164.g1_.w, _e167.g1_.x, _e170.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e183.g1_.w) * vec4<f32>(_e187.g0_.w, _e190.g1_.z, _e193.g1_.y, _e196.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), (((((((((vec4<f32>(_e209.g0_.x) * vec4<f32>(_e213.g1_.x, _e216.g0_.y, _e219.g0_.z, _e222.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e236.g0_.y) * vec4<f32>(_e240.g0_.y, _e243.g1_.x, _e246.g1_.w, _e249.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e262.g0_.z) * vec4<f32>(_e266.g0_.z, _e269.g1_.w, _e272.g1_.x, _e275.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e288.g0_.w) * vec4<f32>(_e292.g0_.w, _e295.g1_.z, _e298.g1_.y, _e301.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + (vec4<f32>(_e314.g1_.x) * vec4<f32>(_e318.g0_.x, _e321.g1_.y, _e324.g1_.z, _e327.g1_.w))) + ((vec4<f32>(_e333.g1_.y) * vec4<f32>(_e337.g1_.y, _e340.g0_.x, _e343.g0_.w, _e346.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e360.g1_.z) * vec4<f32>(_e364.g1_.z, _e367.g0_.w, _e370.g0_.x, _e373.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e387.g1_.w) * vec4<f32>(_e391.g1_.w, _e394.g0_.z, _e397.g0_.y, _e400.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_motor_regressive_product(self_2416: PointAndPlane, other_2074: Motor) -> PointAndPlane {
    var self_2417: PointAndPlane;
    var other_2075: Motor;

    self_2417 = self_2416;
    other_2075 = other_2074;
    let _e4: PointAndPlane = self_2417;
    let _e6: Motor = other_2075;
    let _e11: PointAndPlane = self_2417;
    let _e15: Motor = other_2075;
    let _e18: Motor = other_2075;
    let _e21: Motor = other_2075;
    let _e24: Motor = other_2075;
    let _e37: PointAndPlane = self_2417;
    let _e41: Motor = other_2075;
    let _e44: Motor = other_2075;
    let _e47: Motor = other_2075;
    let _e50: Motor = other_2075;
    let _e64: PointAndPlane = self_2417;
    let _e68: Motor = other_2075;
    let _e71: Motor = other_2075;
    let _e74: Motor = other_2075;
    let _e77: Motor = other_2075;
    let _e91: PointAndPlane = self_2417;
    let _e95: Motor = other_2075;
    let _e107: PointAndPlane = self_2417;
    let _e111: Motor = other_2075;
    let _e123: PointAndPlane = self_2417;
    let _e127: Motor = other_2075;
    let _e139: PointAndPlane = self_2417;
    let _e142: PointAndPlane = self_2417;
    let _e145: PointAndPlane = self_2417;
    let _e148: PointAndPlane = self_2417;
    let _e152: Motor = other_2075;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g1_.x)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g1_.y, _e18.g1_.y, _e21.g0_.w, _e24.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e37.g0_.z) * vec4<f32>(_e41.g1_.z, _e44.g0_.w, _e47.g1_.z, _e50.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e64.g0_.w) * vec4<f32>(_e68.g1_.w, _e71.g0_.z, _e74.g0_.y, _e77.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e91.g1_.y) * vec4<f32>(_e95.g1_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e107.g1_.z) * vec4<f32>(_e111.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e123.g1_.w) * vec4<f32>(_e127.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (vec4<f32>(_e139.g1_.x, _e142.g0_.x, _e145.g0_.x, _e148.g0_.x) * _e152.g1_)));
}

fn point_and_plane_motor_outer_product(self_2418: PointAndPlane, other_2076: Motor) -> PointAndPlane {
    var self_2419: PointAndPlane;
    var other_2077: Motor;

    self_2419 = self_2418;
    other_2077 = other_2076;
    let _e4: PointAndPlane = self_2419;
    let _e8: Motor = other_2077;
    let _e21: PointAndPlane = self_2419;
    let _e25: Motor = other_2077;
    let _e28: Motor = other_2077;
    let _e31: Motor = other_2077;
    let _e34: Motor = other_2077;
    let _e47: PointAndPlane = self_2419;
    let _e51: Motor = other_2077;
    let _e54: Motor = other_2077;
    let _e57: Motor = other_2077;
    let _e60: Motor = other_2077;
    let _e73: PointAndPlane = self_2419;
    let _e77: Motor = other_2077;
    let _e80: Motor = other_2077;
    let _e83: Motor = other_2077;
    let _e86: Motor = other_2077;
    let _e99: PointAndPlane = self_2419;
    let _e101: Motor = other_2077;
    let _e107: PointAndPlane = self_2419;
    let _e109: Motor = other_2077;
    return PointAndPlane(((((((vec4<f32>(_e4.g1_.x) * _e8.g0_.yyzw) * vec4<f32>(0.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e21.g1_.y) * vec4<f32>(_e25.g0_.y, _e28.g0_.y, _e31.g1_.w, _e34.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0))) + ((vec4<f32>(_e47.g1_.z) * vec4<f32>(_e51.g0_.z, _e54.g1_.w, _e57.g0_.z, _e60.g1_.y)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e73.g1_.w) * vec4<f32>(_e77.g0_.w, _e80.g1_.z, _e83.g1_.y, _e86.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g0_.x))), (_e107.g1_ * vec4<f32>(_e109.g0_.x)));
}

fn point_and_plane_motor_inner_product(self_2420: PointAndPlane, other_2078: Motor) -> PointAndPlane {
    var self_2421: PointAndPlane;
    var other_2079: Motor;

    self_2421 = self_2420;
    other_2079 = other_2078;
    let _e4: PointAndPlane = self_2421;
    let _e8: Motor = other_2079;
    let _e19: PointAndPlane = self_2421;
    let _e23: Motor = other_2079;
    let _e35: PointAndPlane = self_2421;
    let _e39: Motor = other_2079;
    let _e51: PointAndPlane = self_2421;
    let _e55: Motor = other_2079;
    let _e67: PointAndPlane = self_2421;
    let _e69: Motor = other_2079;
    let _e75: PointAndPlane = self_2421;
    let _e79: Motor = other_2079;
    let _e82: Motor = other_2079;
    let _e85: Motor = other_2079;
    let _e88: Motor = other_2079;
    let _e102: PointAndPlane = self_2421;
    let _e106: Motor = other_2079;
    let _e109: Motor = other_2079;
    let _e112: Motor = other_2079;
    let _e115: Motor = other_2079;
    let _e128: PointAndPlane = self_2421;
    let _e132: Motor = other_2079;
    let _e135: Motor = other_2079;
    let _e138: Motor = other_2079;
    let _e141: Motor = other_2079;
    let _e154: PointAndPlane = self_2421;
    let _e158: Motor = other_2079;
    let _e161: Motor = other_2079;
    let _e164: Motor = other_2079;
    let _e167: Motor = other_2079;
    let _e180: PointAndPlane = self_2421;
    let _e184: Motor = other_2079;
    let _e187: Motor = other_2079;
    let _e190: Motor = other_2079;
    let _e193: Motor = other_2079;
    let _e199: PointAndPlane = self_2421;
    let _e203: Motor = other_2079;
    let _e206: Motor = other_2079;
    let _e209: Motor = other_2079;
    let _e212: Motor = other_2079;
    let _e226: PointAndPlane = self_2421;
    let _e230: Motor = other_2079;
    let _e233: Motor = other_2079;
    let _e236: Motor = other_2079;
    let _e239: Motor = other_2079;
    let _e253: PointAndPlane = self_2421;
    let _e257: Motor = other_2079;
    let _e260: Motor = other_2079;
    let _e263: Motor = other_2079;
    let _e266: Motor = other_2079;
    return PointAndPlane(((((((vec4<f32>(_e4.g1_.x) * vec4<f32>(_e8.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e19.g1_.y) * vec4<f32>(_e23.g1_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e35.g1_.z) * vec4<f32>(_e39.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e51.g1_.w) * vec4<f32>(_e55.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + (_e67.g0_ * vec4<f32>(_e69.g0_.x))), (((((((((vec4<f32>(_e75.g0_.x) * vec4<f32>(_e79.g1_.x, _e82.g0_.y, _e85.g0_.z, _e88.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0))) + ((vec4<f32>(_e102.g0_.y) * vec4<f32>(_e106.g0_.y, _e109.g1_.x, _e112.g1_.w, _e115.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e128.g0_.z) * vec4<f32>(_e132.g0_.z, _e135.g1_.w, _e138.g1_.x, _e141.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e154.g0_.w) * vec4<f32>(_e158.g0_.w, _e161.g1_.z, _e164.g1_.y, _e167.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + (vec4<f32>(_e180.g1_.x) * vec4<f32>(_e184.g0_.x, _e187.g1_.y, _e190.g1_.z, _e193.g1_.w))) + ((vec4<f32>(_e199.g1_.y) * vec4<f32>(_e203.g1_.y, _e206.g0_.x, _e209.g0_.w, _e212.g0_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e226.g1_.z) * vec4<f32>(_e230.g1_.z, _e233.g0_.w, _e236.g0_.x, _e239.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e253.g1_.w) * vec4<f32>(_e257.g1_.w, _e260.g0_.z, _e263.g0_.y, _e266.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_motor_geometric_anti_product(self_2422: PointAndPlane, other_2080: Motor) -> PointAndPlane {
    var self_2423: PointAndPlane;
    var other_2081: Motor;

    self_2423 = self_2422;
    other_2081 = other_2080;
    let _e4: PointAndPlane = self_2423;
    let _e8: Motor = other_2081;
    let _e11: Motor = other_2081;
    let _e14: Motor = other_2081;
    let _e17: Motor = other_2081;
    let _e22: PointAndPlane = self_2423;
    let _e26: Motor = other_2081;
    let _e29: Motor = other_2081;
    let _e32: Motor = other_2081;
    let _e35: Motor = other_2081;
    let _e49: PointAndPlane = self_2423;
    let _e53: Motor = other_2081;
    let _e56: Motor = other_2081;
    let _e59: Motor = other_2081;
    let _e62: Motor = other_2081;
    let _e76: PointAndPlane = self_2423;
    let _e80: Motor = other_2081;
    let _e83: Motor = other_2081;
    let _e86: Motor = other_2081;
    let _e89: Motor = other_2081;
    let _e103: PointAndPlane = self_2423;
    let _e107: Motor = other_2081;
    let _e110: Motor = other_2081;
    let _e113: Motor = other_2081;
    let _e116: Motor = other_2081;
    let _e129: PointAndPlane = self_2423;
    let _e133: Motor = other_2081;
    let _e136: Motor = other_2081;
    let _e139: Motor = other_2081;
    let _e142: Motor = other_2081;
    let _e157: PointAndPlane = self_2423;
    let _e161: Motor = other_2081;
    let _e164: Motor = other_2081;
    let _e167: Motor = other_2081;
    let _e170: Motor = other_2081;
    let _e185: PointAndPlane = self_2423;
    let _e189: Motor = other_2081;
    let _e192: Motor = other_2081;
    let _e195: Motor = other_2081;
    let _e198: Motor = other_2081;
    let _e213: PointAndPlane = self_2423;
    let _e217: Motor = other_2081;
    let _e220: Motor = other_2081;
    let _e223: Motor = other_2081;
    let _e226: Motor = other_2081;
    let _e238: PointAndPlane = self_2423;
    let _e242: Motor = other_2081;
    let _e245: Motor = other_2081;
    let _e248: Motor = other_2081;
    let _e251: Motor = other_2081;
    let _e266: PointAndPlane = self_2423;
    let _e270: Motor = other_2081;
    let _e273: Motor = other_2081;
    let _e276: Motor = other_2081;
    let _e279: Motor = other_2081;
    let _e294: PointAndPlane = self_2423;
    let _e298: Motor = other_2081;
    let _e301: Motor = other_2081;
    let _e304: Motor = other_2081;
    let _e307: Motor = other_2081;
    let _e322: PointAndPlane = self_2423;
    let _e326: Motor = other_2081;
    let _e329: Motor = other_2081;
    let _e332: Motor = other_2081;
    let _e335: Motor = other_2081;
    let _e341: PointAndPlane = self_2423;
    let _e345: Motor = other_2081;
    let _e348: Motor = other_2081;
    let _e351: Motor = other_2081;
    let _e354: Motor = other_2081;
    let _e368: PointAndPlane = self_2423;
    let _e372: Motor = other_2081;
    let _e375: Motor = other_2081;
    let _e378: Motor = other_2081;
    let _e381: Motor = other_2081;
    let _e395: PointAndPlane = self_2423;
    let _e399: Motor = other_2081;
    let _e402: Motor = other_2081;
    let _e405: Motor = other_2081;
    let _e408: Motor = other_2081;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g0_.y, _e29.g1_.x, _e32.g1_.w, _e35.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g0_.z, _e56.g1_.w, _e59.g1_.x, _e62.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g0_.w, _e83.g1_.z, _e86.g1_.y, _e89.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e103.g1_.x) * vec4<f32>(_e107.g0_.x, _e110.g1_.y, _e113.g1_.z, _e116.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e129.g1_.y) * vec4<f32>(_e133.g1_.y, _e136.g0_.x, _e139.g0_.w, _e142.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e157.g1_.z) * vec4<f32>(_e161.g1_.z, _e164.g0_.w, _e167.g0_.x, _e170.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e185.g1_.w) * vec4<f32>(_e189.g1_.w, _e192.g0_.z, _e195.g0_.y, _e198.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), (((((((((vec4<f32>(_e213.g0_.x) * vec4<f32>(_e217.g0_.x, _e220.g1_.y, _e223.g1_.z, _e226.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e238.g0_.y) * vec4<f32>(_e242.g1_.y, _e245.g0_.x, _e248.g0_.w, _e251.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e266.g0_.z) * vec4<f32>(_e270.g1_.z, _e273.g0_.w, _e276.g0_.x, _e279.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e294.g0_.w) * vec4<f32>(_e298.g1_.w, _e301.g0_.z, _e304.g0_.y, _e307.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + (vec4<f32>(_e322.g1_.x) * vec4<f32>(_e326.g1_.x, _e329.g0_.y, _e332.g0_.z, _e335.g0_.w))) + ((vec4<f32>(_e341.g1_.y) * vec4<f32>(_e345.g0_.y, _e348.g1_.x, _e351.g1_.w, _e354.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e368.g1_.z) * vec4<f32>(_e372.g0_.z, _e375.g1_.w, _e378.g1_.x, _e381.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e395.g1_.w) * vec4<f32>(_e399.g0_.w, _e402.g1_.z, _e405.g1_.y, _e408.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_motor_inner_anti_product(self_2424: PointAndPlane, other_2082: Motor) -> PointAndPlane {
    var self_2425: PointAndPlane;
    var other_2083: Motor;

    self_2425 = self_2424;
    other_2083 = other_2082;
    let _e4: PointAndPlane = self_2425;
    let _e8: Motor = other_2083;
    let _e11: Motor = other_2083;
    let _e14: Motor = other_2083;
    let _e17: Motor = other_2083;
    let _e22: PointAndPlane = self_2425;
    let _e26: Motor = other_2083;
    let _e29: Motor = other_2083;
    let _e32: Motor = other_2083;
    let _e35: Motor = other_2083;
    let _e49: PointAndPlane = self_2425;
    let _e53: Motor = other_2083;
    let _e56: Motor = other_2083;
    let _e59: Motor = other_2083;
    let _e62: Motor = other_2083;
    let _e76: PointAndPlane = self_2425;
    let _e80: Motor = other_2083;
    let _e83: Motor = other_2083;
    let _e86: Motor = other_2083;
    let _e89: Motor = other_2083;
    let _e103: PointAndPlane = self_2425;
    let _e107: Motor = other_2083;
    let _e110: Motor = other_2083;
    let _e113: Motor = other_2083;
    let _e116: Motor = other_2083;
    let _e129: PointAndPlane = self_2425;
    let _e133: Motor = other_2083;
    let _e136: Motor = other_2083;
    let _e139: Motor = other_2083;
    let _e142: Motor = other_2083;
    let _e157: PointAndPlane = self_2425;
    let _e161: Motor = other_2083;
    let _e164: Motor = other_2083;
    let _e167: Motor = other_2083;
    let _e170: Motor = other_2083;
    let _e185: PointAndPlane = self_2425;
    let _e189: Motor = other_2083;
    let _e192: Motor = other_2083;
    let _e195: Motor = other_2083;
    let _e198: Motor = other_2083;
    let _e213: PointAndPlane = self_2425;
    let _e217: Motor = other_2083;
    let _e228: PointAndPlane = self_2425;
    let _e232: Motor = other_2083;
    let _e244: PointAndPlane = self_2425;
    let _e248: Motor = other_2083;
    let _e260: PointAndPlane = self_2425;
    let _e264: Motor = other_2083;
    let _e276: PointAndPlane = self_2425;
    let _e278: Motor = other_2083;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) + ((vec4<f32>(_e22.g0_.y) * vec4<f32>(_e26.g0_.y, _e29.g1_.x, _e32.g1_.w, _e35.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e49.g0_.z) * vec4<f32>(_e53.g0_.z, _e56.g1_.w, _e59.g1_.x, _e62.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e76.g0_.w) * vec4<f32>(_e80.g0_.w, _e83.g1_.z, _e86.g1_.y, _e89.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e103.g1_.x) * vec4<f32>(_e107.g0_.x, _e110.g1_.y, _e113.g1_.z, _e116.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))) + ((vec4<f32>(_e129.g1_.y) * vec4<f32>(_e133.g1_.y, _e136.g0_.x, _e139.g0_.w, _e142.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e157.g1_.z) * vec4<f32>(_e161.g1_.z, _e164.g0_.w, _e167.g0_.x, _e170.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e185.g1_.w) * vec4<f32>(_e189.g1_.w, _e192.g0_.z, _e195.g0_.y, _e198.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))), ((((((vec4<f32>(_e213.g1_.x) * vec4<f32>(_e217.g1_.x)) * vec4<f32>(1.0, 0.0, 0.0, 0.0)) + ((vec4<f32>(_e228.g1_.y) * vec4<f32>(_e232.g1_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e244.g1_.z) * vec4<f32>(_e248.g1_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e260.g1_.w) * vec4<f32>(_e264.g1_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((_e276.g0_ * vec4<f32>(_e278.g0_.x)) * vec4<f32>(-(1.0)))));
}

fn point_and_plane_motor_left_contraction(self_2426: PointAndPlane, other_2084: Motor) -> PointAndPlane {
    var self_2427: PointAndPlane;
    var other_2085: Motor;

    self_2427 = self_2426;
    other_2085 = other_2084;
    let _e4: PointAndPlane = self_2427;
    let _e6: Motor = other_2085;
    let _e11: PointAndPlane = self_2427;
    let _e15: Motor = other_2085;
    let _e25: PointAndPlane = self_2427;
    let _e29: Motor = other_2085;
    let _e32: Motor = other_2085;
    let _e35: Motor = other_2085;
    let _e38: Motor = other_2085;
    let _e52: PointAndPlane = self_2427;
    let _e56: Motor = other_2085;
    let _e59: Motor = other_2085;
    let _e62: Motor = other_2085;
    let _e65: Motor = other_2085;
    let _e79: PointAndPlane = self_2427;
    let _e83: Motor = other_2085;
    let _e86: Motor = other_2085;
    let _e89: Motor = other_2085;
    let _e92: Motor = other_2085;
    let _e106: PointAndPlane = self_2427;
    let _e108: Motor = other_2085;
    return PointAndPlane((_e4.g1_ * vec4<f32>(_e6.g1_.x)), ((((((vec4<f32>(_e11.g1_.x) * _e15.g1_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e25.g1_.y) * vec4<f32>(_e29.g1_.y, _e32.g1_.y, _e35.g0_.w, _e38.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e52.g1_.z) * vec4<f32>(_e56.g1_.z, _e59.g0_.w, _e62.g1_.z, _e65.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e79.g1_.w) * vec4<f32>(_e83.g1_.w, _e86.g0_.z, _e89.g0_.y, _e92.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + (_e106.g0_ * vec4<f32>(_e108.g1_.x))));
}

fn point_and_plane_motor_right_contraction(self_2428: PointAndPlane, other_2086: Motor) -> PointAndPlane {
    var self_2429: PointAndPlane;
    var other_2087: Motor;

    self_2429 = self_2428;
    other_2087 = other_2086;
    let _e4: PointAndPlane = self_2429;
    let _e6: Motor = other_2087;
    let _e11: PointAndPlane = self_2429;
    let _e15: Motor = other_2087;
    let _e18: Motor = other_2087;
    let _e21: Motor = other_2087;
    let _e24: Motor = other_2087;
    let _e36: PointAndPlane = self_2429;
    let _e40: Motor = other_2087;
    let _e43: Motor = other_2087;
    let _e46: Motor = other_2087;
    let _e49: Motor = other_2087;
    let _e62: PointAndPlane = self_2429;
    let _e66: Motor = other_2087;
    let _e69: Motor = other_2087;
    let _e72: Motor = other_2087;
    let _e75: Motor = other_2087;
    let _e88: PointAndPlane = self_2429;
    let _e92: Motor = other_2087;
    let _e104: PointAndPlane = self_2429;
    let _e108: Motor = other_2087;
    let _e120: PointAndPlane = self_2429;
    let _e124: Motor = other_2087;
    let _e136: PointAndPlane = self_2429;
    let _e139: PointAndPlane = self_2429;
    let _e142: PointAndPlane = self_2429;
    let _e145: PointAndPlane = self_2429;
    let _e149: Motor = other_2087;
    return PointAndPlane((_e4.g0_ * vec4<f32>(_e6.g0_.x)), ((((((((vec4<f32>(_e11.g0_.y) * vec4<f32>(_e15.g0_.y, _e18.g0_.y, _e21.g1_.w, _e24.g1_.z)) * vec4<f32>(1.0, 0.0, -(1.0), 1.0)) + ((vec4<f32>(_e36.g0_.z) * vec4<f32>(_e40.g0_.z, _e43.g1_.w, _e46.g0_.z, _e49.g1_.y)) * vec4<f32>(1.0, 1.0, 0.0, -(1.0)))) + ((vec4<f32>(_e62.g0_.w) * vec4<f32>(_e66.g0_.w, _e69.g1_.z, _e72.g1_.y, _e75.g0_.w)) * vec4<f32>(1.0, -(1.0), 1.0, 0.0))) + ((vec4<f32>(_e88.g1_.y) * vec4<f32>(_e92.g0_.x)) * vec4<f32>(0.0, 1.0, 0.0, 0.0))) + ((vec4<f32>(_e104.g1_.z) * vec4<f32>(_e108.g0_.x)) * vec4<f32>(0.0, 0.0, 1.0, 0.0))) + ((vec4<f32>(_e120.g1_.w) * vec4<f32>(_e124.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, 1.0))) + ((vec4<f32>(_e136.g1_.x, _e139.g0_.x, _e142.g0_.x, _e145.g0_.x) * _e149.g0_) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))));
}

fn point_and_plane_motor_left_anti_contraction(self_2430: PointAndPlane, other_2088: Motor) -> PointAndPlane {
    var self_2431: PointAndPlane;
    var other_2089: Motor;

    self_2431 = self_2430;
    other_2089 = other_2088;
    let _e4: PointAndPlane = self_2431;
    let _e8: Motor = other_2089;
    let _e11: Motor = other_2089;
    let _e14: Motor = other_2089;
    let _e17: Motor = other_2089;
    let _e30: PointAndPlane = self_2431;
    let _e34: Motor = other_2089;
    let _e37: Motor = other_2089;
    let _e40: Motor = other_2089;
    let _e43: Motor = other_2089;
    let _e57: PointAndPlane = self_2431;
    let _e61: Motor = other_2089;
    let _e64: Motor = other_2089;
    let _e67: Motor = other_2089;
    let _e70: Motor = other_2089;
    let _e84: PointAndPlane = self_2431;
    let _e88: Motor = other_2089;
    let _e101: PointAndPlane = self_2431;
    let _e105: Motor = other_2089;
    let _e118: PointAndPlane = self_2431;
    let _e122: Motor = other_2089;
    let _e135: PointAndPlane = self_2431;
    let _e138: PointAndPlane = self_2431;
    let _e141: PointAndPlane = self_2431;
    let _e144: PointAndPlane = self_2431;
    let _e148: Motor = other_2089;
    let _e159: PointAndPlane = self_2431;
    let _e161: Motor = other_2089;
    return PointAndPlane(((((((((vec4<f32>(_e4.g0_.y) * vec4<f32>(_e8.g0_.y, _e11.g0_.y, _e14.g1_.w, _e17.g1_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0))) + ((vec4<f32>(_e30.g0_.z) * vec4<f32>(_e34.g0_.z, _e37.g1_.w, _e40.g0_.z, _e43.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e57.g0_.w) * vec4<f32>(_e61.g0_.w, _e64.g1_.z, _e67.g1_.y, _e70.g0_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + ((vec4<f32>(_e84.g1_.y) * vec4<f32>(_e88.g0_.x)) * vec4<f32>(0.0, -(1.0), 0.0, 0.0))) + ((vec4<f32>(_e101.g1_.z) * vec4<f32>(_e105.g0_.x)) * vec4<f32>(0.0, 0.0, -(1.0), 0.0))) + ((vec4<f32>(_e118.g1_.w) * vec4<f32>(_e122.g0_.x)) * vec4<f32>(0.0, 0.0, 0.0, -(1.0)))) + ((vec4<f32>(_e135.g1_.x, _e138.g0_.x, _e141.g0_.x, _e144.g0_.x) * _e148.g0_) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0))), ((_e159.g0_ * vec4<f32>(_e161.g0_.x)) * vec4<f32>(-(1.0))));
}

fn point_and_plane_motor_right_anti_contraction(self_2432: PointAndPlane, other_2090: Motor) -> PointAndPlane {
    var self_2433: PointAndPlane;
    var other_2091: Motor;

    self_2433 = self_2432;
    other_2091 = other_2090;
    let _e4: PointAndPlane = self_2433;
    let _e8: Motor = other_2091;
    let _e18: PointAndPlane = self_2433;
    let _e22: Motor = other_2091;
    let _e25: Motor = other_2091;
    let _e28: Motor = other_2091;
    let _e31: Motor = other_2091;
    let _e45: PointAndPlane = self_2433;
    let _e49: Motor = other_2091;
    let _e52: Motor = other_2091;
    let _e55: Motor = other_2091;
    let _e58: Motor = other_2091;
    let _e72: PointAndPlane = self_2433;
    let _e76: Motor = other_2091;
    let _e79: Motor = other_2091;
    let _e82: Motor = other_2091;
    let _e85: Motor = other_2091;
    let _e99: PointAndPlane = self_2433;
    let _e101: Motor = other_2091;
    let _e107: PointAndPlane = self_2433;
    let _e109: Motor = other_2091;
    return PointAndPlane(((((((vec4<f32>(_e4.g1_.x) * _e8.g1_.yyzw) * vec4<f32>(0.0, 1.0, 1.0, 1.0)) + ((vec4<f32>(_e18.g1_.y) * vec4<f32>(_e22.g1_.y, _e25.g1_.y, _e28.g0_.w, _e31.g0_.z)) * vec4<f32>(-(1.0), 0.0, 1.0, -(1.0)))) + ((vec4<f32>(_e45.g1_.z) * vec4<f32>(_e49.g1_.z, _e52.g0_.w, _e55.g1_.z, _e58.g0_.y)) * vec4<f32>(-(1.0), -(1.0), 0.0, 1.0))) + ((vec4<f32>(_e72.g1_.w) * vec4<f32>(_e76.g1_.w, _e79.g0_.z, _e82.g0_.y, _e85.g1_.w)) * vec4<f32>(-(1.0), 1.0, -(1.0), 0.0))) + (_e99.g0_ * vec4<f32>(_e101.g1_.x))), (_e107.g1_ * vec4<f32>(_e109.g1_.x)));
}

fn point_and_plane_point_and_plane_add(self_2434: PointAndPlane, other_2092: PointAndPlane) -> PointAndPlane {
    var self_2435: PointAndPlane;
    var other_2093: PointAndPlane;

    self_2435 = self_2434;
    other_2093 = other_2092;
    let _e4: PointAndPlane = self_2435;
    let _e6: PointAndPlane = other_2093;
    let _e9: PointAndPlane = self_2435;
    let _e11: PointAndPlane = other_2093;
    return PointAndPlane((_e4.g0_ + _e6.g0_), (_e9.g1_ + _e11.g1_));
}

fn point_and_plane_point_and_plane_sub(self_2436: PointAndPlane, other_2094: PointAndPlane) -> PointAndPlane {
    var self_2437: PointAndPlane;
    var other_2095: PointAndPlane;

    self_2437 = self_2436;
    other_2095 = other_2094;
    let _e4: PointAndPlane = self_2437;
    let _e6: PointAndPlane = other_2095;
    let _e9: PointAndPlane = self_2437;
    let _e11: PointAndPlane = other_2095;
    return PointAndPlane((_e4.g0_ - _e6.g0_), (_e9.g1_ - _e11.g1_));
}

fn point_and_plane_point_and_plane_mul(self_2438: PointAndPlane, other_2096: PointAndPlane) -> PointAndPlane {
    var self_2439: PointAndPlane;
    var other_2097: PointAndPlane;

    self_2439 = self_2438;
    other_2097 = other_2096;
    let _e4: PointAndPlane = self_2439;
    let _e6: PointAndPlane = other_2097;
    let _e9: PointAndPlane = self_2439;
    let _e11: PointAndPlane = other_2097;
    return PointAndPlane((_e4.g0_ * _e6.g0_), (_e9.g1_ * _e11.g1_));
}

fn point_and_plane_point_and_plane_div(self_2440: PointAndPlane, other_2098: PointAndPlane) -> PointAndPlane {
    var self_2441: PointAndPlane;
    var other_2099: PointAndPlane;

    self_2441 = self_2440;
    other_2099 = other_2098;
    let _e4: PointAndPlane = self_2441;
    let _e7: PointAndPlane = self_2441;
    let _e10: PointAndPlane = self_2441;
    let _e13: PointAndPlane = self_2441;
    let _e23: PointAndPlane = other_2099;
    let _e26: PointAndPlane = other_2099;
    let _e29: PointAndPlane = other_2099;
    let _e32: PointAndPlane = other_2099;
    let _e43: PointAndPlane = self_2441;
    let _e46: PointAndPlane = self_2441;
    let _e49: PointAndPlane = self_2441;
    let _e52: PointAndPlane = self_2441;
    let _e62: PointAndPlane = other_2099;
    let _e65: PointAndPlane = other_2099;
    let _e68: PointAndPlane = other_2099;
    let _e71: PointAndPlane = other_2099;
    return PointAndPlane((((vec4<f32>(_e4.g0_.x, _e7.g0_.y, _e10.g0_.z, _e13.g0_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e23.g0_.x, _e26.g0_.y, _e29.g0_.z, _e32.g0_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)), (((vec4<f32>(_e43.g1_.x, _e46.g1_.y, _e49.g1_.z, _e52.g1_.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0)) / vec4<f32>(_e62.g1_.x, _e65.g1_.y, _e68.g1_.z, _e71.g1_.w)) * vec4<f32>(1.0, 1.0, 1.0, 1.0)));
}

fn point_and_plane_point_and_plane_geometric_product(self_2442: PointAndPlane, other_2100: PointAndPlane) -> Motor {
    var self_2443: PointAndPlane;
    var other_2101: PointAndPlane;

    self_2443 = self_2442;
    other_2101 = other_2100;
    let _e4: PointAndPlane = self_2443;
    let _e8: PointAndPlane = other_2101;
    let _e11: PointAndPlane = other_2101;
    let _e14: PointAndPlane = other_2101;
    let _e17: PointAndPlane = other_2101;
    let _e29: PointAndPlane = self_2443;
    let _e33: PointAndPlane = other_2101;
    let _e36: PointAndPlane = other_2101;
    let _e39: PointAndPlane = other_2101;
    let _e42: PointAndPlane = other_2101;
    let _e57: PointAndPlane = self_2443;
    let _e61: PointAndPlane = other_2101;
    let _e64: PointAndPlane = other_2101;
    let _e67: PointAndPlane = other_2101;
    let _e70: PointAndPlane = other_2101;
    let _e85: PointAndPlane = self_2443;
    let _e89: PointAndPlane = other_2101;
    let _e92: PointAndPlane = other_2101;
    let _e95: PointAndPlane = other_2101;
    let _e98: PointAndPlane = other_2101;
    let _e113: PointAndPlane = self_2443;
    let _e117: PointAndPlane = other_2101;
    let _e120: PointAndPlane = other_2101;
    let _e123: PointAndPlane = other_2101;
    let _e126: PointAndPlane = other_2101;
    let _e141: PointAndPlane = self_2443;
    let _e145: PointAndPlane = other_2101;
    let _e148: PointAndPlane = other_2101;
    let _e151: PointAndPlane = other_2101;
    let _e154: PointAndPlane = other_2101;
    let _e167: PointAndPlane = self_2443;
    let _e171: PointAndPlane = other_2101;
    let _e174: PointAndPlane = other_2101;
    let _e177: PointAndPlane = other_2101;
    let _e180: PointAndPlane = other_2101;
    let _e193: PointAndPlane = self_2443;
    let _e197: PointAndPlane = other_2101;
    let _e200: PointAndPlane = other_2101;
    let _e203: PointAndPlane = other_2101;
    let _e206: PointAndPlane = other_2101;
    let _e221: PointAndPlane = self_2443;
    let _e225: PointAndPlane = other_2101;
    let _e228: PointAndPlane = other_2101;
    let _e231: PointAndPlane = other_2101;
    let _e234: PointAndPlane = other_2101;
    let _e240: PointAndPlane = self_2443;
    let _e244: PointAndPlane = other_2101;
    let _e247: PointAndPlane = other_2101;
    let _e250: PointAndPlane = other_2101;
    let _e253: PointAndPlane = other_2101;
    let _e267: PointAndPlane = self_2443;
    let _e271: PointAndPlane = other_2101;
    let _e274: PointAndPlane = other_2101;
    let _e277: PointAndPlane = other_2101;
    let _e280: PointAndPlane = other_2101;
    let _e294: PointAndPlane = self_2443;
    let _e298: PointAndPlane = other_2101;
    let _e301: PointAndPlane = other_2101;
    let _e304: PointAndPlane = other_2101;
    let _e307: PointAndPlane = other_2101;
    let _e321: PointAndPlane = self_2443;
    let _e325: PointAndPlane = other_2101;
    let _e328: PointAndPlane = other_2101;
    let _e331: PointAndPlane = other_2101;
    let _e334: PointAndPlane = other_2101;
    let _e340: PointAndPlane = self_2443;
    let _e344: PointAndPlane = other_2101;
    let _e347: PointAndPlane = other_2101;
    let _e350: PointAndPlane = other_2101;
    let _e353: PointAndPlane = other_2101;
    let _e367: PointAndPlane = self_2443;
    let _e371: PointAndPlane = other_2101;
    let _e374: PointAndPlane = other_2101;
    let _e377: PointAndPlane = other_2101;
    let _e380: PointAndPlane = other_2101;
    let _e394: PointAndPlane = self_2443;
    let _e398: PointAndPlane = other_2101;
    let _e401: PointAndPlane = other_2101;
    let _e404: PointAndPlane = other_2101;
    let _e407: PointAndPlane = other_2101;
    return Motor((((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g0_.x, _e11.g1_.y, _e14.g1_.z, _e17.g1_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g0_.y, _e36.g1_.x, _e39.g0_.w, _e42.g0_.z)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g0_.z, _e64.g0_.w, _e67.g1_.x, _e70.g0_.y)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g0_.w, _e92.g0_.z, _e95.g0_.y, _e98.g1_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e113.g1_.x) * vec4<f32>(_e117.g1_.x, _e120.g0_.y, _e123.g0_.z, _e126.g0_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e141.g1_.y) * vec4<f32>(_e145.g1_.y, _e148.g0_.x, _e151.g1_.w, _e154.g1_.z)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e167.g1_.z) * vec4<f32>(_e171.g1_.z, _e174.g1_.w, _e177.g0_.x, _e180.g1_.y)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e193.g1_.w) * vec4<f32>(_e197.g1_.w, _e200.g1_.z, _e203.g1_.y, _e206.g0_.x)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))), ((((((((vec4<f32>(0.0) - (vec4<f32>(_e221.g0_.x) * vec4<f32>(_e225.g1_.x, _e228.g0_.y, _e231.g0_.z, _e234.g0_.w))) + ((vec4<f32>(_e240.g0_.y) * vec4<f32>(_e244.g1_.y, _e247.g0_.x, _e250.g1_.w, _e253.g1_.z)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))) + ((vec4<f32>(_e267.g0_.z) * vec4<f32>(_e271.g1_.z, _e274.g1_.w, _e277.g0_.x, _e280.g1_.y)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e294.g0_.w) * vec4<f32>(_e298.g1_.w, _e301.g1_.z, _e304.g1_.y, _e307.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + (vec4<f32>(_e321.g1_.x) * vec4<f32>(_e325.g0_.x, _e328.g1_.y, _e331.g1_.z, _e334.g1_.w))) + ((vec4<f32>(_e340.g1_.y) * vec4<f32>(_e344.g0_.y, _e347.g1_.x, _e350.g0_.w, _e353.g0_.z)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e367.g1_.z) * vec4<f32>(_e371.g0_.z, _e374.g0_.w, _e377.g1_.x, _e380.g0_.y)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e394.g1_.w) * vec4<f32>(_e398.g0_.w, _e401.g0_.z, _e404.g0_.y, _e407.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))));
}

fn point_and_plane_point_and_plane_geometric_anti_product(self_2444: PointAndPlane, other_2102: PointAndPlane) -> Motor {
    var self_2445: PointAndPlane;
    var other_2103: PointAndPlane;

    self_2445 = self_2444;
    other_2103 = other_2102;
    let _e4: PointAndPlane = self_2445;
    let _e8: PointAndPlane = other_2103;
    let _e11: PointAndPlane = other_2103;
    let _e14: PointAndPlane = other_2103;
    let _e17: PointAndPlane = other_2103;
    let _e29: PointAndPlane = self_2445;
    let _e33: PointAndPlane = other_2103;
    let _e36: PointAndPlane = other_2103;
    let _e39: PointAndPlane = other_2103;
    let _e42: PointAndPlane = other_2103;
    let _e57: PointAndPlane = self_2445;
    let _e61: PointAndPlane = other_2103;
    let _e64: PointAndPlane = other_2103;
    let _e67: PointAndPlane = other_2103;
    let _e70: PointAndPlane = other_2103;
    let _e85: PointAndPlane = self_2445;
    let _e89: PointAndPlane = other_2103;
    let _e92: PointAndPlane = other_2103;
    let _e95: PointAndPlane = other_2103;
    let _e98: PointAndPlane = other_2103;
    let _e113: PointAndPlane = self_2445;
    let _e117: PointAndPlane = other_2103;
    let _e120: PointAndPlane = other_2103;
    let _e123: PointAndPlane = other_2103;
    let _e126: PointAndPlane = other_2103;
    let _e141: PointAndPlane = self_2445;
    let _e145: PointAndPlane = other_2103;
    let _e148: PointAndPlane = other_2103;
    let _e151: PointAndPlane = other_2103;
    let _e154: PointAndPlane = other_2103;
    let _e167: PointAndPlane = self_2445;
    let _e171: PointAndPlane = other_2103;
    let _e174: PointAndPlane = other_2103;
    let _e177: PointAndPlane = other_2103;
    let _e180: PointAndPlane = other_2103;
    let _e193: PointAndPlane = self_2445;
    let _e197: PointAndPlane = other_2103;
    let _e200: PointAndPlane = other_2103;
    let _e203: PointAndPlane = other_2103;
    let _e206: PointAndPlane = other_2103;
    let _e219: PointAndPlane = self_2445;
    let _e223: PointAndPlane = other_2103;
    let _e226: PointAndPlane = other_2103;
    let _e229: PointAndPlane = other_2103;
    let _e232: PointAndPlane = other_2103;
    let _e237: PointAndPlane = self_2445;
    let _e241: PointAndPlane = other_2103;
    let _e244: PointAndPlane = other_2103;
    let _e247: PointAndPlane = other_2103;
    let _e250: PointAndPlane = other_2103;
    let _e264: PointAndPlane = self_2445;
    let _e268: PointAndPlane = other_2103;
    let _e271: PointAndPlane = other_2103;
    let _e274: PointAndPlane = other_2103;
    let _e277: PointAndPlane = other_2103;
    let _e291: PointAndPlane = self_2445;
    let _e295: PointAndPlane = other_2103;
    let _e298: PointAndPlane = other_2103;
    let _e301: PointAndPlane = other_2103;
    let _e304: PointAndPlane = other_2103;
    let _e318: PointAndPlane = self_2445;
    let _e322: PointAndPlane = other_2103;
    let _e325: PointAndPlane = other_2103;
    let _e328: PointAndPlane = other_2103;
    let _e331: PointAndPlane = other_2103;
    let _e337: PointAndPlane = self_2445;
    let _e341: PointAndPlane = other_2103;
    let _e344: PointAndPlane = other_2103;
    let _e347: PointAndPlane = other_2103;
    let _e350: PointAndPlane = other_2103;
    let _e364: PointAndPlane = self_2445;
    let _e368: PointAndPlane = other_2103;
    let _e371: PointAndPlane = other_2103;
    let _e374: PointAndPlane = other_2103;
    let _e377: PointAndPlane = other_2103;
    let _e391: PointAndPlane = self_2445;
    let _e395: PointAndPlane = other_2103;
    let _e398: PointAndPlane = other_2103;
    let _e401: PointAndPlane = other_2103;
    let _e404: PointAndPlane = other_2103;
    return Motor((((((((((vec4<f32>(_e4.g0_.x) * vec4<f32>(_e8.g1_.x, _e11.g0_.y, _e14.g0_.z, _e17.g0_.w)) * vec4<f32>(-(1.0), 1.0, 1.0, 1.0)) + ((vec4<f32>(_e29.g0_.y) * vec4<f32>(_e33.g1_.y, _e36.g0_.x, _e39.g1_.w, _e42.g1_.z)) * vec4<f32>(-(1.0), -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e57.g0_.z) * vec4<f32>(_e61.g1_.z, _e64.g1_.w, _e67.g0_.x, _e70.g1_.y)) * vec4<f32>(-(1.0), 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e85.g0_.w) * vec4<f32>(_e89.g1_.w, _e92.g1_.z, _e95.g1_.y, _e98.g0_.x)) * vec4<f32>(-(1.0), -(1.0), 1.0, -(1.0)))) + ((vec4<f32>(_e113.g1_.x) * vec4<f32>(_e117.g0_.x, _e120.g1_.y, _e123.g1_.z, _e126.g1_.w)) * vec4<f32>(1.0, -(1.0), -(1.0), -(1.0)))) + ((vec4<f32>(_e141.g1_.y) * vec4<f32>(_e145.g0_.y, _e148.g1_.x, _e151.g0_.w, _e154.g0_.z)) * vec4<f32>(1.0, 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e167.g1_.z) * vec4<f32>(_e171.g0_.z, _e174.g0_.w, _e177.g1_.x, _e180.g0_.y)) * vec4<f32>(1.0, -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e193.g1_.w) * vec4<f32>(_e197.g0_.w, _e200.g0_.z, _e203.g0_.y, _e206.g1_.x)) * vec4<f32>(1.0, 1.0, -(1.0), 1.0))), ((((((((vec4<f32>(_e219.g0_.x) * vec4<f32>(_e223.g0_.x, _e226.g1_.y, _e229.g1_.z, _e232.g1_.w)) + ((vec4<f32>(_e237.g0_.y) * vec4<f32>(_e241.g0_.y, _e244.g1_.x, _e247.g0_.w, _e250.g0_.z)) * vec4<f32>(1.0, -(1.0), -(1.0), 1.0))) + ((vec4<f32>(_e264.g0_.z) * vec4<f32>(_e268.g0_.z, _e271.g0_.w, _e274.g1_.x, _e277.g0_.y)) * vec4<f32>(1.0, 1.0, -(1.0), -(1.0)))) + ((vec4<f32>(_e291.g0_.w) * vec4<f32>(_e295.g0_.w, _e298.g0_.z, _e301.g0_.y, _e304.g1_.x)) * vec4<f32>(1.0, -(1.0), 1.0, -(1.0)))) - (vec4<f32>(_e318.g1_.x) * vec4<f32>(_e322.g1_.x, _e325.g0_.y, _e328.g0_.z, _e331.g0_.w))) + ((vec4<f32>(_e337.g1_.y) * vec4<f32>(_e341.g1_.y, _e344.g0_.x, _e347.g1_.w, _e350.g1_.z)) * vec4<f32>(-(1.0), 1.0, 1.0, -(1.0)))) + ((vec4<f32>(_e364.g1_.z) * vec4<f32>(_e368.g1_.z, _e371.g1_.w, _e374.g0_.x, _e377.g1_.y)) * vec4<f32>(-(1.0), -(1.0), 1.0, 1.0))) + ((vec4<f32>(_e391.g1_.w) * vec4<f32>(_e395.g1_.w, _e398.g1_.z, _e401.g1_.y, _e404.g0_.x)) * vec4<f32>(-(1.0), 1.0, -(1.0), 1.0))));
}

fn point_and_plane_point_and_plane_scalar_product(self_2446: PointAndPlane, other_2104: PointAndPlane) -> Scalar {
    var self_2447: PointAndPlane;
    var other_2105: PointAndPlane;

    self_2447 = self_2446;
    other_2105 = other_2104;
    let _e5: PointAndPlane = self_2447;
    let _e8: PointAndPlane = other_2105;
    let _e13: PointAndPlane = self_2447;
    let _e16: PointAndPlane = other_2105;
    let _e21: PointAndPlane = self_2447;
    let _e24: PointAndPlane = other_2105;
    let _e29: PointAndPlane = self_2447;
    let _e32: PointAndPlane = other_2105;
    let _e37: PointAndPlane = self_2447;
    let _e40: PointAndPlane = other_2105;
    let _e45: PointAndPlane = self_2447;
    let _e48: PointAndPlane = other_2105;
    let _e53: PointAndPlane = self_2447;
    let _e56: PointAndPlane = other_2105;
    let _e61: PointAndPlane = self_2447;
    let _e64: PointAndPlane = other_2105;
    return Scalar(((((((((0.0 - (_e5.g0_.x * _e8.g0_.x)) - (_e13.g0_.y * _e16.g0_.y)) - (_e21.g0_.z * _e24.g0_.z)) - (_e29.g0_.w * _e32.g0_.w)) + (_e37.g1_.x * _e40.g1_.x)) + (_e45.g1_.y * _e48.g1_.y)) + (_e53.g1_.z * _e56.g1_.z)) + (_e61.g1_.w * _e64.g1_.w)));
}

fn point_and_plane_point_and_plane_anti_scalar_product(self_2448: PointAndPlane, other_2106: PointAndPlane) -> AntiScalar {
    var self_2449: PointAndPlane;
    var other_2107: PointAndPlane;

    self_2449 = self_2448;
    other_2107 = other_2106;
    let _e4: PointAndPlane = self_2449;
    let _e7: PointAndPlane = other_2107;
    let _e11: PointAndPlane = self_2449;
    let _e14: PointAndPlane = other_2107;
    let _e19: PointAndPlane = self_2449;
    let _e22: PointAndPlane = other_2107;
    let _e27: PointAndPlane = self_2449;
    let _e30: PointAndPlane = other_2107;
    let _e35: PointAndPlane = self_2449;
    let _e38: PointAndPlane = other_2107;
    let _e43: PointAndPlane = self_2449;
    let _e46: PointAndPlane = other_2107;
    let _e51: PointAndPlane = self_2449;
    let _e54: PointAndPlane = other_2107;
    let _e59: PointAndPlane = self_2449;
    let _e62: PointAndPlane = other_2107;
    return AntiScalar(((((((((_e4.g0_.x * _e7.g0_.x) + (_e11.g0_.y * _e14.g0_.y)) + (_e19.g0_.z * _e22.g0_.z)) + (_e27.g0_.w * _e30.g0_.w)) - (_e35.g1_.x * _e38.g1_.x)) - (_e43.g1_.y * _e46.g1_.y)) - (_e51.g1_.z * _e54.g1_.z)) - (_e59.g1_.w * _e62.g1_.w)));
}

fn point_and_plane_squared_magnitude(self_2450: PointAndPlane) -> Scalar {
    var self_2451: PointAndPlane;

    self_2451 = self_2450;
    let _e2: PointAndPlane = self_2451;
    let _e3: PointAndPlane = self_2451;
    let _e4: PointAndPlane = point_and_plane_reversal(_e3);
    let _e5: Scalar = point_and_plane_point_and_plane_scalar_product(_e2, _e4);
    return _e5;
}

fn point_and_plane_magnitude(self_2452: PointAndPlane) -> Scalar {
    var self_2453: PointAndPlane;

    self_2453 = self_2452;
    let _e2: PointAndPlane = self_2453;
    let _e3: Scalar = point_and_plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_and_plane_bulk_norm(self_2454: PointAndPlane) -> Scalar {
    var self_2455: PointAndPlane;

    self_2455 = self_2454;
    let _e2: PointAndPlane = self_2455;
    let _e3: Scalar = point_and_plane_squared_magnitude(_e2);
    return Scalar(sqrt(_e3.g0_));
}

fn point_and_plane_squared_anti_magnitude(self_2456: PointAndPlane) -> AntiScalar {
    var self_2457: PointAndPlane;

    self_2457 = self_2456;
    let _e2: PointAndPlane = self_2457;
    let _e3: PointAndPlane = self_2457;
    let _e4: PointAndPlane = point_and_plane_anti_reversal(_e3);
    let _e5: AntiScalar = point_and_plane_point_and_plane_anti_scalar_product(_e2, _e4);
    return _e5;
}

fn point_and_plane_weight_norm(self_2458: PointAndPlane) -> AntiScalar {
    var self_2459: PointAndPlane;

    self_2459 = self_2458;
    let _e2: PointAndPlane = self_2459;
    let _e3: AntiScalar = point_and_plane_squared_anti_magnitude(_e2);
    return AntiScalar(sqrt(_e3.g0_));
}

fn point_and_plane_scale(self_2460: PointAndPlane, other_2108: f32) -> PointAndPlane {
    var self_2461: PointAndPlane;
    var other_2109: f32;

    self_2461 = self_2460;
    other_2109 = other_2108;
    let _e4: PointAndPlane = self_2461;
    let _e5: f32 = other_2109;
    let _e7: PointAndPlane = point_and_plane_scalar_geometric_product(_e4, Scalar(_e5));
    return _e7;
}

fn point_and_plane_signum(self_2462: PointAndPlane) -> PointAndPlane {
    var self_2463: PointAndPlane;

    self_2463 = self_2462;
    let _e2: PointAndPlane = self_2463;
    let _e3: PointAndPlane = self_2463;
    let _e4: Scalar = point_and_plane_magnitude(_e3);
    let _e9: PointAndPlane = point_and_plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn point_and_plane_inverse(self_2464: PointAndPlane) -> PointAndPlane {
    var self_2465: PointAndPlane;

    self_2465 = self_2464;
    let _e2: PointAndPlane = self_2465;
    let _e3: PointAndPlane = point_and_plane_reversal(_e2);
    let _e4: PointAndPlane = self_2465;
    let _e5: Scalar = point_and_plane_squared_magnitude(_e4);
    let _e10: PointAndPlane = point_and_plane_scalar_geometric_product(_e3, Scalar((1.0 / _e5.g0_)));
    return _e10;
}

fn point_and_plane_unitize(self_2466: PointAndPlane) -> PointAndPlane {
    var self_2467: PointAndPlane;

    self_2467 = self_2466;
    let _e2: PointAndPlane = self_2467;
    let _e3: PointAndPlane = self_2467;
    let _e4: AntiScalar = point_and_plane_weight_norm(_e3);
    let _e9: PointAndPlane = point_and_plane_scalar_geometric_product(_e2, Scalar((1.0 / _e4.g0_)));
    return _e9;
}

fn anti_scalar_anti_scalar_geometric_quotient(self_2468: AntiScalar, other_2110: AntiScalar) -> Scalar {
    var self_2469: AntiScalar;
    var other_2111: AntiScalar;

    self_2469 = self_2468;
    other_2111 = other_2110;
    let _e4: AntiScalar = self_2469;
    let _e5: AntiScalar = other_2111;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: Scalar = anti_scalar_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_anti_scalar_transformation(self_2470: AntiScalar, other_2112: AntiScalar) -> AntiScalar {
    var self_2471: AntiScalar;
    var other_2113: AntiScalar;

    self_2471 = self_2470;
    other_2113 = other_2112;
    let _e4: AntiScalar = self_2471;
    let _e5: AntiScalar = other_2113;
    let _e6: Scalar = anti_scalar_anti_scalar_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2471;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: AntiScalar = scalar_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_line_geometric_quotient(self_2472: AntiScalar, other_2114: Line) -> Line {
    var self_2473: AntiScalar;
    var other_2115: Line;

    self_2473 = self_2472;
    other_2115 = other_2114;
    let _e4: AntiScalar = self_2473;
    let _e5: Line = other_2115;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = anti_scalar_line_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_line_transformation(self_2474: AntiScalar, other_2116: Line) -> Line {
    var self_2475: AntiScalar;
    var other_2117: Line;

    self_2475 = self_2474;
    other_2117 = other_2116;
    let _e4: AntiScalar = self_2475;
    let _e5: Line = other_2117;
    let _e6: Line = anti_scalar_line_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2475;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Line = line_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_motor_geometric_quotient(self_2476: AntiScalar, other_2118: Motor) -> Motor {
    var self_2477: AntiScalar;
    var other_2119: Motor;

    self_2477 = self_2476;
    other_2119 = other_2118;
    let _e4: AntiScalar = self_2477;
    let _e5: Motor = other_2119;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = anti_scalar_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_motor_transformation(self_2478: AntiScalar, other_2120: Motor) -> Motor {
    var self_2479: AntiScalar;
    var other_2121: Motor;

    self_2479 = self_2478;
    other_2121 = other_2120;
    let _e4: AntiScalar = self_2479;
    let _e5: Motor = other_2121;
    let _e6: Motor = anti_scalar_motor_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2479;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Motor = motor_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_multi_vector_geometric_quotient(self_2480: AntiScalar, other_2122: MultiVector) -> MultiVector {
    var self_2481: AntiScalar;
    var other_2123: MultiVector;

    self_2481 = self_2480;
    other_2123 = other_2122;
    let _e4: AntiScalar = self_2481;
    let _e5: MultiVector = other_2123;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = anti_scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_multi_vector_transformation(self_2482: AntiScalar, other_2124: MultiVector) -> MultiVector {
    var self_2483: AntiScalar;
    var other_2125: MultiVector;

    self_2483 = self_2482;
    other_2125 = other_2124;
    let _e4: AntiScalar = self_2483;
    let _e5: MultiVector = other_2125;
    let _e6: MultiVector = anti_scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2483;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_plane_geometric_quotient(self_2484: AntiScalar, other_2126: Plane) -> Point {
    var self_2485: AntiScalar;
    var other_2127: Plane;

    self_2485 = self_2484;
    other_2127 = other_2126;
    let _e4: AntiScalar = self_2485;
    let _e5: Plane = other_2127;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Point = anti_scalar_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_plane_transformation(self_2486: AntiScalar, other_2128: Plane) -> Plane {
    var self_2487: AntiScalar;
    var other_2129: Plane;

    self_2487 = self_2486;
    other_2129 = other_2128;
    let _e4: AntiScalar = self_2487;
    let _e5: Plane = other_2129;
    let _e6: Point = anti_scalar_plane_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2487;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Plane = point_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_point_geometric_quotient(self_2488: AntiScalar, other_2130: Point) -> Plane {
    var self_2489: AntiScalar;
    var other_2131: Point;

    self_2489 = self_2488;
    other_2131 = other_2130;
    let _e4: AntiScalar = self_2489;
    let _e5: Point = other_2131;
    let _e6: Point = point_inverse(_e5);
    let _e7: Plane = anti_scalar_point_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_point_transformation(self_2490: AntiScalar, other_2132: Point) -> Point {
    var self_2491: AntiScalar;
    var other_2133: Point;

    self_2491 = self_2490;
    other_2133 = other_2132;
    let _e4: AntiScalar = self_2491;
    let _e5: Point = other_2133;
    let _e6: Plane = anti_scalar_point_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2491;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Point = plane_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_point_and_plane_geometric_quotient(self_2492: AntiScalar, other_2134: PointAndPlane) -> PointAndPlane {
    var self_2493: AntiScalar;
    var other_2135: PointAndPlane;

    self_2493 = self_2492;
    other_2135 = other_2134;
    let _e4: AntiScalar = self_2493;
    let _e5: PointAndPlane = other_2135;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = anti_scalar_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_point_and_plane_transformation(self_2494: AntiScalar, other_2136: PointAndPlane) -> PointAndPlane {
    var self_2495: AntiScalar;
    var other_2137: PointAndPlane;

    self_2495 = self_2494;
    other_2137 = other_2136;
    let _e4: AntiScalar = self_2495;
    let _e5: PointAndPlane = other_2137;
    let _e6: PointAndPlane = anti_scalar_point_and_plane_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2495;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn anti_scalar_scalar_geometric_quotient(self_2496: AntiScalar, other_2138: Scalar) -> AntiScalar {
    var self_2497: AntiScalar;
    var other_2139: Scalar;

    self_2497 = self_2496;
    other_2139 = other_2138;
    let _e4: AntiScalar = self_2497;
    let _e5: Scalar = other_2139;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: AntiScalar = anti_scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn anti_scalar_scalar_transformation(self_2498: AntiScalar, other_2140: Scalar) -> Scalar {
    var self_2499: AntiScalar;
    var other_2141: Scalar;

    self_2499 = self_2498;
    other_2141 = other_2140;
    let _e4: AntiScalar = self_2499;
    let _e5: Scalar = other_2141;
    let _e6: AntiScalar = anti_scalar_scalar_geometric_product(_e4, _e5);
    let _e7: AntiScalar = self_2499;
    let _e8: AntiScalar = anti_scalar_reversal(_e7);
    let _e9: Scalar = anti_scalar_anti_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn ideal_point_ideal_point_geometric_quotient(self_2500: IdealPoint, other_2142: IdealPoint) -> Rotor {
    var self_2501: IdealPoint;
    var other_2143: IdealPoint;

    self_2501 = self_2500;
    other_2143 = other_2142;
    let _e4: IdealPoint = self_2501;
    let _e5: IdealPoint = other_2143;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: Rotor = ideal_point_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_line_geometric_quotient(self_2502: IdealPoint, other_2144: Line) -> Motor {
    var self_2503: IdealPoint;
    var other_2145: Line;

    self_2503 = self_2502;
    other_2145 = other_2144;
    let _e4: IdealPoint = self_2503;
    let _e5: Line = other_2145;
    let _e6: Line = line_inverse(_e5);
    let _e7: Motor = ideal_point_line_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_line_transformation(self_2504: IdealPoint, other_2146: Line) -> Line {
    var self_2505: IdealPoint;
    var other_2147: Line;

    self_2505 = self_2504;
    other_2147 = other_2146;
    let _e4: IdealPoint = self_2505;
    let _e5: Line = other_2147;
    let _e6: Motor = ideal_point_line_geometric_product(_e4, _e5);
    let _e7: IdealPoint = self_2505;
    let _e8: IdealPoint = ideal_point_reversal(_e7);
    let _e9: Motor = motor_ideal_point_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn ideal_point_motor_geometric_quotient(self_2506: IdealPoint, other_2148: Motor) -> Motor {
    var self_2507: IdealPoint;
    var other_2149: Motor;

    self_2507 = self_2506;
    other_2149 = other_2148;
    let _e4: IdealPoint = self_2507;
    let _e5: Motor = other_2149;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = ideal_point_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_motor_transformation(self_2508: IdealPoint, other_2150: Motor) -> Motor {
    var self_2509: IdealPoint;
    var other_2151: Motor;

    self_2509 = self_2508;
    other_2151 = other_2150;
    let _e4: IdealPoint = self_2509;
    let _e5: Motor = other_2151;
    let _e6: Motor = ideal_point_motor_geometric_product(_e4, _e5);
    let _e7: IdealPoint = self_2509;
    let _e8: IdealPoint = ideal_point_reversal(_e7);
    let _e9: Motor = motor_ideal_point_geometric_product(_e6, _e8);
    return _e9;
}

fn ideal_point_multi_vector_geometric_quotient(self_2510: IdealPoint, other_2152: MultiVector) -> MultiVector {
    var self_2511: IdealPoint;
    var other_2153: MultiVector;

    self_2511 = self_2510;
    other_2153 = other_2152;
    let _e4: IdealPoint = self_2511;
    let _e5: MultiVector = other_2153;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = ideal_point_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_multi_vector_transformation(self_2512: IdealPoint, other_2154: MultiVector) -> MultiVector {
    var self_2513: IdealPoint;
    var other_2155: MultiVector;

    self_2513 = self_2512;
    other_2155 = other_2154;
    let _e4: IdealPoint = self_2513;
    let _e5: MultiVector = other_2155;
    let _e6: MultiVector = ideal_point_multi_vector_geometric_product(_e4, _e5);
    let _e7: IdealPoint = self_2513;
    let _e8: IdealPoint = ideal_point_reversal(_e7);
    let _e9: MultiVector = multi_vector_ideal_point_geometric_product(_e6, _e8);
    return _e9;
}

fn ideal_point_point_and_plane_geometric_quotient(self_2514: IdealPoint, other_2156: PointAndPlane) -> PointAndPlane {
    var self_2515: IdealPoint;
    var other_2157: PointAndPlane;

    self_2515 = self_2514;
    other_2157 = other_2156;
    let _e4: IdealPoint = self_2515;
    let _e5: PointAndPlane = other_2157;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = ideal_point_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_point_and_plane_transformation(self_2516: IdealPoint, other_2158: PointAndPlane) -> PointAndPlane {
    var self_2517: IdealPoint;
    var other_2159: PointAndPlane;

    self_2517 = self_2516;
    other_2159 = other_2158;
    let _e4: IdealPoint = self_2517;
    let _e5: PointAndPlane = other_2159;
    let _e6: PointAndPlane = ideal_point_point_and_plane_geometric_product(_e4, _e5);
    let _e7: IdealPoint = self_2517;
    let _e8: IdealPoint = ideal_point_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_ideal_point_geometric_product(_e6, _e8);
    return _e9;
}

fn ideal_point_scalar_geometric_quotient(self_2518: IdealPoint, other_2160: Scalar) -> IdealPoint {
    var self_2519: IdealPoint;
    var other_2161: Scalar;

    self_2519 = self_2518;
    other_2161 = other_2160;
    let _e4: IdealPoint = self_2519;
    let _e5: Scalar = other_2161;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: IdealPoint = ideal_point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn ideal_point_scalar_transformation(self_2520: IdealPoint, other_2162: Scalar) -> Scalar {
    var self_2521: IdealPoint;
    var other_2163: Scalar;

    self_2521 = self_2520;
    other_2163 = other_2162;
    let _e4: IdealPoint = self_2521;
    let _e5: Scalar = other_2163;
    let _e6: IdealPoint = ideal_point_scalar_geometric_product(_e4, _e5);
    let _e7: IdealPoint = self_2521;
    let _e8: IdealPoint = ideal_point_reversal(_e7);
    let _e9: Rotor = ideal_point_ideal_point_geometric_product(_e6, _e8);
    let _e10: Scalar = rotor_scalar_into(_e9);
    return _e10;
}

fn line_anti_scalar_geometric_quotient(self_2522: Line, other_2164: AntiScalar) -> Line {
    var self_2523: Line;
    var other_2165: AntiScalar;

    self_2523 = self_2522;
    other_2165 = other_2164;
    let _e4: Line = self_2523;
    let _e5: AntiScalar = other_2165;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: Line = line_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn line_anti_scalar_transformation(self_2524: Line, other_2166: AntiScalar) -> AntiScalar {
    var self_2525: Line;
    var other_2167: AntiScalar;

    self_2525 = self_2524;
    other_2167 = other_2166;
    let _e4: Line = self_2525;
    let _e5: AntiScalar = other_2167;
    let _e6: Line = line_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Line = self_2525;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = line_line_geometric_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn line_ideal_point_geometric_quotient(self_2526: Line, other_2168: IdealPoint) -> Motor {
    var self_2527: Line;
    var other_2169: IdealPoint;

    self_2527 = self_2526;
    other_2169 = other_2168;
    let _e4: Line = self_2527;
    let _e5: IdealPoint = other_2169;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: Motor = line_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn line_ideal_point_transformation(self_2528: Line, other_2170: IdealPoint) -> IdealPoint {
    var self_2529: Line;
    var other_2171: IdealPoint;

    self_2529 = self_2528;
    other_2171 = other_2170;
    let _e4: Line = self_2529;
    let _e5: IdealPoint = other_2171;
    let _e6: Motor = line_ideal_point_geometric_product(_e4, _e5);
    let _e7: Line = self_2529;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = motor_line_geometric_product(_e6, _e8);
    let _e10: IdealPoint = motor_ideal_point_into(_e9);
    return _e10;
}

fn line_line_geometric_quotient(self_2530: Line, other_2172: Line) -> Motor {
    var self_2531: Line;
    var other_2173: Line;

    self_2531 = self_2530;
    other_2173 = other_2172;
    let _e4: Line = self_2531;
    let _e5: Line = other_2173;
    let _e6: Line = line_inverse(_e5);
    let _e7: Motor = line_line_geometric_product(_e4, _e6);
    return _e7;
}

fn line_line_transformation(self_2532: Line, other_2174: Line) -> Line {
    var self_2533: Line;
    var other_2175: Line;

    self_2533 = self_2532;
    other_2175 = other_2174;
    let _e4: Line = self_2533;
    let _e5: Line = other_2175;
    let _e6: Motor = line_line_geometric_product(_e4, _e5);
    let _e7: Line = self_2533;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = motor_line_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn line_motor_geometric_quotient(self_2534: Line, other_2176: Motor) -> Motor {
    var self_2535: Line;
    var other_2177: Motor;

    self_2535 = self_2534;
    other_2177 = other_2176;
    let _e4: Line = self_2535;
    let _e5: Motor = other_2177;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = line_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn line_motor_transformation(self_2536: Line, other_2178: Motor) -> Motor {
    var self_2537: Line;
    var other_2179: Motor;

    self_2537 = self_2536;
    other_2179 = other_2178;
    let _e4: Line = self_2537;
    let _e5: Motor = other_2179;
    let _e6: Motor = line_motor_geometric_product(_e4, _e5);
    let _e7: Line = self_2537;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = motor_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_multi_vector_geometric_quotient(self_2538: Line, other_2180: MultiVector) -> MultiVector {
    var self_2539: Line;
    var other_2181: MultiVector;

    self_2539 = self_2538;
    other_2181 = other_2180;
    let _e4: Line = self_2539;
    let _e5: MultiVector = other_2181;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = line_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn line_multi_vector_transformation(self_2540: Line, other_2182: MultiVector) -> MultiVector {
    var self_2541: Line;
    var other_2183: MultiVector;

    self_2541 = self_2540;
    other_2183 = other_2182;
    let _e4: Line = self_2541;
    let _e5: MultiVector = other_2183;
    let _e6: MultiVector = line_multi_vector_geometric_product(_e4, _e5);
    let _e7: Line = self_2541;
    let _e8: Line = line_reversal(_e7);
    let _e9: MultiVector = multi_vector_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_plane_geometric_quotient(self_2542: Line, other_2184: Plane) -> PointAndPlane {
    var self_2543: Line;
    var other_2185: Plane;

    self_2543 = self_2542;
    other_2185 = other_2184;
    let _e4: Line = self_2543;
    let _e5: Plane = other_2185;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: PointAndPlane = line_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn line_plane_transformation(self_2544: Line, other_2186: Plane) -> Plane {
    var self_2545: Line;
    var other_2187: Plane;

    self_2545 = self_2544;
    other_2187 = other_2186;
    let _e4: Line = self_2545;
    let _e5: Plane = other_2187;
    let _e6: PointAndPlane = line_plane_geometric_product(_e4, _e5);
    let _e7: Line = self_2545;
    let _e8: Line = line_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_line_geometric_product(_e6, _e8);
    let _e10: Plane = point_and_plane_plane_into(_e9);
    return _e10;
}

fn line_point_geometric_quotient(self_2546: Line, other_2188: Point) -> PointAndPlane {
    var self_2547: Line;
    var other_2189: Point;

    self_2547 = self_2546;
    other_2189 = other_2188;
    let _e4: Line = self_2547;
    let _e5: Point = other_2189;
    let _e6: Point = point_inverse(_e5);
    let _e7: PointAndPlane = line_point_geometric_product(_e4, _e6);
    return _e7;
}

fn line_point_transformation(self_2548: Line, other_2190: Point) -> Point {
    var self_2549: Line;
    var other_2191: Point;

    self_2549 = self_2548;
    other_2191 = other_2190;
    let _e4: Line = self_2549;
    let _e5: Point = other_2191;
    let _e6: PointAndPlane = line_point_geometric_product(_e4, _e5);
    let _e7: Line = self_2549;
    let _e8: Line = line_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_line_geometric_product(_e6, _e8);
    let _e10: Point = point_and_plane_point_into(_e9);
    return _e10;
}

fn line_point_and_plane_geometric_quotient(self_2550: Line, other_2192: PointAndPlane) -> PointAndPlane {
    var self_2551: Line;
    var other_2193: PointAndPlane;

    self_2551 = self_2550;
    other_2193 = other_2192;
    let _e4: Line = self_2551;
    let _e5: PointAndPlane = other_2193;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = line_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn line_point_and_plane_transformation(self_2552: Line, other_2194: PointAndPlane) -> PointAndPlane {
    var self_2553: Line;
    var other_2195: PointAndPlane;

    self_2553 = self_2552;
    other_2195 = other_2194;
    let _e4: Line = self_2553;
    let _e5: PointAndPlane = other_2195;
    let _e6: PointAndPlane = line_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Line = self_2553;
    let _e8: Line = line_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_line_geometric_product(_e6, _e8);
    return _e9;
}

fn line_rotor_geometric_quotient(self_2554: Line, other_2196: Rotor) -> Motor {
    var self_2555: Line;
    var other_2197: Rotor;

    self_2555 = self_2554;
    other_2197 = other_2196;
    let _e4: Line = self_2555;
    let _e5: Rotor = other_2197;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: Motor = line_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn line_rotor_transformation(self_2556: Line, other_2198: Rotor) -> Rotor {
    var self_2557: Line;
    var other_2199: Rotor;

    self_2557 = self_2556;
    other_2199 = other_2198;
    let _e4: Line = self_2557;
    let _e5: Rotor = other_2199;
    let _e6: Motor = line_rotor_geometric_product(_e4, _e5);
    let _e7: Line = self_2557;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = motor_line_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn line_scalar_geometric_quotient(self_2558: Line, other_2200: Scalar) -> Line {
    var self_2559: Line;
    var other_2201: Scalar;

    self_2559 = self_2558;
    other_2201 = other_2200;
    let _e4: Line = self_2559;
    let _e5: Scalar = other_2201;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Line = line_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn line_scalar_transformation(self_2560: Line, other_2202: Scalar) -> Scalar {
    var self_2561: Line;
    var other_2203: Scalar;

    self_2561 = self_2560;
    other_2203 = other_2202;
    let _e4: Line = self_2561;
    let _e5: Scalar = other_2203;
    let _e6: Line = line_scalar_geometric_product(_e4, _e5);
    let _e7: Line = self_2561;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = line_line_geometric_product(_e6, _e8);
    let _e10: Scalar = motor_scalar_into(_e9);
    return _e10;
}

fn line_translator_geometric_quotient(self_2562: Line, other_2204: Translator) -> Motor {
    var self_2563: Line;
    var other_2205: Translator;

    self_2563 = self_2562;
    other_2205 = other_2204;
    let _e4: Line = self_2563;
    let _e5: Translator = other_2205;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Motor = line_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn line_translator_transformation(self_2564: Line, other_2206: Translator) -> Translator {
    var self_2565: Line;
    var other_2207: Translator;

    self_2565 = self_2564;
    other_2207 = other_2206;
    let _e4: Line = self_2565;
    let _e5: Translator = other_2207;
    let _e6: Motor = line_translator_geometric_product(_e4, _e5);
    let _e7: Line = self_2565;
    let _e8: Line = line_reversal(_e7);
    let _e9: Motor = motor_line_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn motor_anti_scalar_geometric_quotient(self_2566: Motor, other_2208: AntiScalar) -> Motor {
    var self_2567: Motor;
    var other_2209: AntiScalar;

    self_2567 = self_2566;
    other_2209 = other_2208;
    let _e4: Motor = self_2567;
    let _e5: AntiScalar = other_2209;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: Motor = motor_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_anti_scalar_transformation(self_2568: Motor, other_2210: AntiScalar) -> AntiScalar {
    var self_2569: Motor;
    var other_2211: AntiScalar;

    self_2569 = self_2568;
    other_2211 = other_2210;
    let _e4: Motor = self_2569;
    let _e5: AntiScalar = other_2211;
    let _e6: Motor = motor_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Motor = self_2569;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn motor_ideal_point_geometric_quotient(self_2570: Motor, other_2212: IdealPoint) -> Motor {
    var self_2571: Motor;
    var other_2213: IdealPoint;

    self_2571 = self_2570;
    other_2213 = other_2212;
    let _e4: Motor = self_2571;
    let _e5: IdealPoint = other_2213;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: Motor = motor_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_ideal_point_transformation(self_2572: Motor, other_2214: IdealPoint) -> IdealPoint {
    var self_2573: Motor;
    var other_2215: IdealPoint;

    self_2573 = self_2572;
    other_2215 = other_2214;
    let _e4: Motor = self_2573;
    let _e5: IdealPoint = other_2215;
    let _e6: Motor = motor_ideal_point_geometric_product(_e4, _e5);
    let _e7: Motor = self_2573;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: IdealPoint = motor_ideal_point_into(_e9);
    return _e10;
}

fn motor_line_geometric_quotient(self_2574: Motor, other_2216: Line) -> Motor {
    var self_2575: Motor;
    var other_2217: Line;

    self_2575 = self_2574;
    other_2217 = other_2216;
    let _e4: Motor = self_2575;
    let _e5: Line = other_2217;
    let _e6: Line = line_inverse(_e5);
    let _e7: Motor = motor_line_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_line_transformation(self_2576: Motor, other_2218: Line) -> Line {
    var self_2577: Motor;
    var other_2219: Line;

    self_2577 = self_2576;
    other_2219 = other_2218;
    let _e4: Motor = self_2577;
    let _e5: Line = other_2219;
    let _e6: Motor = motor_line_geometric_product(_e4, _e5);
    let _e7: Motor = self_2577;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn motor_powi(self_2578: Motor, exponent: i32) -> Motor {
    var self_2579: Motor;
    var exponent_1: i32;
    var local: Motor;
    var x: Motor;
    var y: Motor;
    var n: i32;

    self_2579 = self_2578;
    exponent_1 = exponent;
    let _e4: i32 = exponent_1;
    if (_e4 == 0) {
        {
            let _e7: Motor = motor_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_1;
    if (_e8 < 0) {
        let _e11: Motor = self_2579;
        let _e12: Motor = motor_inverse(_e11);
        local = _e12;
    } else {
        let _e14: Motor = self_2579;
        local = _e14;
    }
    let _e15: Motor = local;
    x = _e15;
    let _e17: Motor = motor_one();
    y = _e17;
    let _e19: i32 = exponent_1;
    n = abs(_e19);
    loop {
        let _e23: i32 = n;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Motor = x;
                    let _e32: Motor = y;
                    let _e33: Motor = motor_motor_geometric_product(_e31, _e32);
                    y = _e33;
                }
            }
            let _e34: Motor = x;
            let _e35: Motor = x;
            let _e36: Motor = motor_motor_geometric_product(_e34, _e35);
            x = _e36;
            let _e37: i32 = n;
            n = (_e37 >> u32(1));
        }
    }
    let _e41: Motor = x;
    let _e42: Motor = y;
    let _e43: Motor = motor_motor_geometric_product(_e41, _e42);
    return _e43;
}

fn motor_motor_geometric_quotient(self_2580: Motor, other_2220: Motor) -> Motor {
    var self_2581: Motor;
    var other_2221: Motor;

    self_2581 = self_2580;
    other_2221 = other_2220;
    let _e4: Motor = self_2581;
    let _e5: Motor = other_2221;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = motor_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_motor_transformation(self_2582: Motor, other_2222: Motor) -> Motor {
    var self_2583: Motor;
    var other_2223: Motor;

    self_2583 = self_2582;
    other_2223 = other_2222;
    let _e4: Motor = self_2583;
    let _e5: Motor = other_2223;
    let _e6: Motor = motor_motor_geometric_product(_e4, _e5);
    let _e7: Motor = self_2583;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_multi_vector_geometric_quotient(self_2584: Motor, other_2224: MultiVector) -> MultiVector {
    var self_2585: Motor;
    var other_2225: MultiVector;

    self_2585 = self_2584;
    other_2225 = other_2224;
    let _e4: Motor = self_2585;
    let _e5: MultiVector = other_2225;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = motor_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_multi_vector_transformation(self_2586: Motor, other_2226: MultiVector) -> MultiVector {
    var self_2587: Motor;
    var other_2227: MultiVector;

    self_2587 = self_2586;
    other_2227 = other_2226;
    let _e4: Motor = self_2587;
    let _e5: MultiVector = other_2227;
    let _e6: MultiVector = motor_multi_vector_geometric_product(_e4, _e5);
    let _e7: Motor = self_2587;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: MultiVector = multi_vector_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_plane_geometric_quotient(self_2588: Motor, other_2228: Plane) -> PointAndPlane {
    var self_2589: Motor;
    var other_2229: Plane;

    self_2589 = self_2588;
    other_2229 = other_2228;
    let _e4: Motor = self_2589;
    let _e5: Plane = other_2229;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: PointAndPlane = motor_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_plane_transformation(self_2590: Motor, other_2230: Plane) -> Plane {
    var self_2591: Motor;
    var other_2231: Plane;

    self_2591 = self_2590;
    other_2231 = other_2230;
    let _e4: Motor = self_2591;
    let _e5: Plane = other_2231;
    let _e6: PointAndPlane = motor_plane_geometric_product(_e4, _e5);
    let _e7: Motor = self_2591;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_motor_geometric_product(_e6, _e8);
    let _e10: Plane = point_and_plane_plane_into(_e9);
    return _e10;
}

fn motor_point_geometric_quotient(self_2592: Motor, other_2232: Point) -> PointAndPlane {
    var self_2593: Motor;
    var other_2233: Point;

    self_2593 = self_2592;
    other_2233 = other_2232;
    let _e4: Motor = self_2593;
    let _e5: Point = other_2233;
    let _e6: Point = point_inverse(_e5);
    let _e7: PointAndPlane = motor_point_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_point_transformation(self_2594: Motor, other_2234: Point) -> Point {
    var self_2595: Motor;
    var other_2235: Point;

    self_2595 = self_2594;
    other_2235 = other_2234;
    let _e4: Motor = self_2595;
    let _e5: Point = other_2235;
    let _e6: PointAndPlane = motor_point_geometric_product(_e4, _e5);
    let _e7: Motor = self_2595;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_motor_geometric_product(_e6, _e8);
    let _e10: Point = point_and_plane_point_into(_e9);
    return _e10;
}

fn motor_point_and_plane_geometric_quotient(self_2596: Motor, other_2236: PointAndPlane) -> PointAndPlane {
    var self_2597: Motor;
    var other_2237: PointAndPlane;

    self_2597 = self_2596;
    other_2237 = other_2236;
    let _e4: Motor = self_2597;
    let _e5: PointAndPlane = other_2237;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = motor_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_point_and_plane_transformation(self_2598: Motor, other_2238: PointAndPlane) -> PointAndPlane {
    var self_2599: Motor;
    var other_2239: PointAndPlane;

    self_2599 = self_2598;
    other_2239 = other_2238;
    let _e4: Motor = self_2599;
    let _e5: PointAndPlane = other_2239;
    let _e6: PointAndPlane = motor_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Motor = self_2599;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_motor_geometric_product(_e6, _e8);
    return _e9;
}

fn motor_rotor_geometric_quotient(self_2600: Motor, other_2240: Rotor) -> Motor {
    var self_2601: Motor;
    var other_2241: Rotor;

    self_2601 = self_2600;
    other_2241 = other_2240;
    let _e4: Motor = self_2601;
    let _e5: Rotor = other_2241;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: Motor = motor_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_rotor_transformation(self_2602: Motor, other_2242: Rotor) -> Rotor {
    var self_2603: Motor;
    var other_2243: Rotor;

    self_2603 = self_2602;
    other_2243 = other_2242;
    let _e4: Motor = self_2603;
    let _e5: Rotor = other_2243;
    let _e6: Motor = motor_rotor_geometric_product(_e4, _e5);
    let _e7: Motor = self_2603;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn motor_scalar_geometric_quotient(self_2604: Motor, other_2244: Scalar) -> Motor {
    var self_2605: Motor;
    var other_2245: Scalar;

    self_2605 = self_2604;
    other_2245 = other_2244;
    let _e4: Motor = self_2605;
    let _e5: Scalar = other_2245;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Motor = motor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_scalar_transformation(self_2606: Motor, other_2246: Scalar) -> Scalar {
    var self_2607: Motor;
    var other_2247: Scalar;

    self_2607 = self_2606;
    other_2247 = other_2246;
    let _e4: Motor = self_2607;
    let _e5: Scalar = other_2247;
    let _e6: Motor = motor_scalar_geometric_product(_e4, _e5);
    let _e7: Motor = self_2607;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: Scalar = motor_scalar_into(_e9);
    return _e10;
}

fn motor_translator_geometric_quotient(self_2608: Motor, other_2248: Translator) -> Motor {
    var self_2609: Motor;
    var other_2249: Translator;

    self_2609 = self_2608;
    other_2249 = other_2248;
    let _e4: Motor = self_2609;
    let _e5: Translator = other_2249;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Motor = motor_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn motor_translator_transformation(self_2610: Motor, other_2250: Translator) -> Translator {
    var self_2611: Motor;
    var other_2251: Translator;

    self_2611 = self_2610;
    other_2251 = other_2250;
    let _e4: Motor = self_2611;
    let _e5: Translator = other_2251;
    let _e6: Motor = motor_translator_geometric_product(_e4, _e5);
    let _e7: Motor = self_2611;
    let _e8: Motor = motor_reversal(_e7);
    let _e9: Motor = motor_motor_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn multi_vector_anti_scalar_geometric_quotient(self_2612: MultiVector, other_2252: AntiScalar) -> MultiVector {
    var self_2613: MultiVector;
    var other_2253: AntiScalar;

    self_2613 = self_2612;
    other_2253 = other_2252;
    let _e4: MultiVector = self_2613;
    let _e5: AntiScalar = other_2253;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: MultiVector = multi_vector_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_anti_scalar_transformation(self_2614: MultiVector, other_2254: AntiScalar) -> AntiScalar {
    var self_2615: MultiVector;
    var other_2255: AntiScalar;

    self_2615 = self_2614;
    other_2255 = other_2254;
    let _e4: MultiVector = self_2615;
    let _e5: AntiScalar = other_2255;
    let _e6: MultiVector = multi_vector_anti_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2615;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: AntiScalar = multi_vector_anti_scalar_into(_e9);
    return _e10;
}

fn multi_vector_ideal_point_geometric_quotient(self_2616: MultiVector, other_2256: IdealPoint) -> MultiVector {
    var self_2617: MultiVector;
    var other_2257: IdealPoint;

    self_2617 = self_2616;
    other_2257 = other_2256;
    let _e4: MultiVector = self_2617;
    let _e5: IdealPoint = other_2257;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: MultiVector = multi_vector_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_ideal_point_transformation(self_2618: MultiVector, other_2258: IdealPoint) -> IdealPoint {
    var self_2619: MultiVector;
    var other_2259: IdealPoint;

    self_2619 = self_2618;
    other_2259 = other_2258;
    let _e4: MultiVector = self_2619;
    let _e5: IdealPoint = other_2259;
    let _e6: MultiVector = multi_vector_ideal_point_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2619;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: IdealPoint = multi_vector_ideal_point_into(_e9);
    return _e10;
}

fn multi_vector_line_geometric_quotient(self_2620: MultiVector, other_2260: Line) -> MultiVector {
    var self_2621: MultiVector;
    var other_2261: Line;

    self_2621 = self_2620;
    other_2261 = other_2260;
    let _e4: MultiVector = self_2621;
    let _e5: Line = other_2261;
    let _e6: Line = line_inverse(_e5);
    let _e7: MultiVector = multi_vector_line_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_line_transformation(self_2622: MultiVector, other_2262: Line) -> Line {
    var self_2623: MultiVector;
    var other_2263: Line;

    self_2623 = self_2622;
    other_2263 = other_2262;
    let _e4: MultiVector = self_2623;
    let _e5: Line = other_2263;
    let _e6: MultiVector = multi_vector_line_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2623;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Line = multi_vector_line_into(_e9);
    return _e10;
}

fn multi_vector_motor_geometric_quotient(self_2624: MultiVector, other_2264: Motor) -> MultiVector {
    var self_2625: MultiVector;
    var other_2265: Motor;

    self_2625 = self_2624;
    other_2265 = other_2264;
    let _e4: MultiVector = self_2625;
    let _e5: Motor = other_2265;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: MultiVector = multi_vector_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_motor_transformation(self_2626: MultiVector, other_2266: Motor) -> Motor {
    var self_2627: MultiVector;
    var other_2267: Motor;

    self_2627 = self_2626;
    other_2267 = other_2266;
    let _e4: MultiVector = self_2627;
    let _e5: Motor = other_2267;
    let _e6: MultiVector = multi_vector_motor_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2627;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Motor = multi_vector_motor_into(_e9);
    return _e10;
}

fn multi_vector_powi(self_2628: MultiVector, exponent_2: i32) -> MultiVector {
    var self_2629: MultiVector;
    var exponent_3: i32;
    var local_1: MultiVector;
    var x_1: MultiVector;
    var y_1: MultiVector;
    var n_1: i32;

    self_2629 = self_2628;
    exponent_3 = exponent_2;
    let _e4: i32 = exponent_3;
    if (_e4 == 0) {
        {
            let _e7: MultiVector = multi_vector_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_3;
    if (_e8 < 0) {
        let _e11: MultiVector = self_2629;
        let _e12: MultiVector = multi_vector_inverse(_e11);
        local_1 = _e12;
    } else {
        let _e14: MultiVector = self_2629;
        local_1 = _e14;
    }
    let _e15: MultiVector = local_1;
    x_1 = _e15;
    let _e17: MultiVector = multi_vector_one();
    y_1 = _e17;
    let _e19: i32 = exponent_3;
    n_1 = abs(_e19);
    loop {
        let _e23: i32 = n_1;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_1;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: MultiVector = x_1;
                    let _e32: MultiVector = y_1;
                    let _e33: MultiVector = multi_vector_multi_vector_geometric_product(_e31, _e32);
                    y_1 = _e33;
                }
            }
            let _e34: MultiVector = x_1;
            let _e35: MultiVector = x_1;
            let _e36: MultiVector = multi_vector_multi_vector_geometric_product(_e34, _e35);
            x_1 = _e36;
            let _e37: i32 = n_1;
            n_1 = (_e37 >> u32(1));
        }
    }
    let _e41: MultiVector = x_1;
    let _e42: MultiVector = y_1;
    let _e43: MultiVector = multi_vector_multi_vector_geometric_product(_e41, _e42);
    return _e43;
}

fn multi_vector_multi_vector_geometric_quotient(self_2630: MultiVector, other_2268: MultiVector) -> MultiVector {
    var self_2631: MultiVector;
    var other_2269: MultiVector;

    self_2631 = self_2630;
    other_2269 = other_2268;
    let _e4: MultiVector = self_2631;
    let _e5: MultiVector = other_2269;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_multi_vector_transformation(self_2632: MultiVector, other_2270: MultiVector) -> MultiVector {
    var self_2633: MultiVector;
    var other_2271: MultiVector;

    self_2633 = self_2632;
    other_2271 = other_2270;
    let _e4: MultiVector = self_2633;
    let _e5: MultiVector = other_2271;
    let _e6: MultiVector = multi_vector_multi_vector_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2633;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    return _e9;
}

fn multi_vector_plane_geometric_quotient(self_2634: MultiVector, other_2272: Plane) -> MultiVector {
    var self_2635: MultiVector;
    var other_2273: Plane;

    self_2635 = self_2634;
    other_2273 = other_2272;
    let _e4: MultiVector = self_2635;
    let _e5: Plane = other_2273;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: MultiVector = multi_vector_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_plane_transformation(self_2636: MultiVector, other_2274: Plane) -> Plane {
    var self_2637: MultiVector;
    var other_2275: Plane;

    self_2637 = self_2636;
    other_2275 = other_2274;
    let _e4: MultiVector = self_2637;
    let _e5: Plane = other_2275;
    let _e6: MultiVector = multi_vector_plane_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2637;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Plane = multi_vector_plane_into(_e9);
    return _e10;
}

fn multi_vector_point_geometric_quotient(self_2638: MultiVector, other_2276: Point) -> MultiVector {
    var self_2639: MultiVector;
    var other_2277: Point;

    self_2639 = self_2638;
    other_2277 = other_2276;
    let _e4: MultiVector = self_2639;
    let _e5: Point = other_2277;
    let _e6: Point = point_inverse(_e5);
    let _e7: MultiVector = multi_vector_point_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_point_transformation(self_2640: MultiVector, other_2278: Point) -> Point {
    var self_2641: MultiVector;
    var other_2279: Point;

    self_2641 = self_2640;
    other_2279 = other_2278;
    let _e4: MultiVector = self_2641;
    let _e5: Point = other_2279;
    let _e6: MultiVector = multi_vector_point_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2641;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Point = multi_vector_point_into(_e9);
    return _e10;
}

fn multi_vector_point_and_plane_geometric_quotient(self_2642: MultiVector, other_2280: PointAndPlane) -> MultiVector {
    var self_2643: MultiVector;
    var other_2281: PointAndPlane;

    self_2643 = self_2642;
    other_2281 = other_2280;
    let _e4: MultiVector = self_2643;
    let _e5: PointAndPlane = other_2281;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: MultiVector = multi_vector_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_point_and_plane_transformation(self_2644: MultiVector, other_2282: PointAndPlane) -> PointAndPlane {
    var self_2645: MultiVector;
    var other_2283: PointAndPlane;

    self_2645 = self_2644;
    other_2283 = other_2282;
    let _e4: MultiVector = self_2645;
    let _e5: PointAndPlane = other_2283;
    let _e6: MultiVector = multi_vector_point_and_plane_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2645;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: PointAndPlane = multi_vector_point_and_plane_into(_e9);
    return _e10;
}

fn multi_vector_rotor_geometric_quotient(self_2646: MultiVector, other_2284: Rotor) -> MultiVector {
    var self_2647: MultiVector;
    var other_2285: Rotor;

    self_2647 = self_2646;
    other_2285 = other_2284;
    let _e4: MultiVector = self_2647;
    let _e5: Rotor = other_2285;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: MultiVector = multi_vector_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_rotor_transformation(self_2648: MultiVector, other_2286: Rotor) -> Rotor {
    var self_2649: MultiVector;
    var other_2287: Rotor;

    self_2649 = self_2648;
    other_2287 = other_2286;
    let _e4: MultiVector = self_2649;
    let _e5: Rotor = other_2287;
    let _e6: MultiVector = multi_vector_rotor_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2649;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Rotor = multi_vector_rotor_into(_e9);
    return _e10;
}

fn multi_vector_scalar_geometric_quotient(self_2650: MultiVector, other_2288: Scalar) -> MultiVector {
    var self_2651: MultiVector;
    var other_2289: Scalar;

    self_2651 = self_2650;
    other_2289 = other_2288;
    let _e4: MultiVector = self_2651;
    let _e5: Scalar = other_2289;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: MultiVector = multi_vector_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_scalar_transformation(self_2652: MultiVector, other_2290: Scalar) -> Scalar {
    var self_2653: MultiVector;
    var other_2291: Scalar;

    self_2653 = self_2652;
    other_2291 = other_2290;
    let _e4: MultiVector = self_2653;
    let _e5: Scalar = other_2291;
    let _e6: MultiVector = multi_vector_scalar_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2653;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Scalar = multi_vector_scalar_into(_e9);
    return _e10;
}

fn multi_vector_translator_geometric_quotient(self_2654: MultiVector, other_2292: Translator) -> MultiVector {
    var self_2655: MultiVector;
    var other_2293: Translator;

    self_2655 = self_2654;
    other_2293 = other_2292;
    let _e4: MultiVector = self_2655;
    let _e5: Translator = other_2293;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: MultiVector = multi_vector_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn multi_vector_translator_transformation(self_2656: MultiVector, other_2294: Translator) -> Translator {
    var self_2657: MultiVector;
    var other_2295: Translator;

    self_2657 = self_2656;
    other_2295 = other_2294;
    let _e4: MultiVector = self_2657;
    let _e5: Translator = other_2295;
    let _e6: MultiVector = multi_vector_translator_geometric_product(_e4, _e5);
    let _e7: MultiVector = self_2657;
    let _e8: MultiVector = multi_vector_reversal(_e7);
    let _e9: MultiVector = multi_vector_multi_vector_geometric_product(_e6, _e8);
    let _e10: Translator = multi_vector_translator_into(_e9);
    return _e10;
}

fn plane_anti_scalar_geometric_quotient(self_2658: Plane, other_2296: AntiScalar) -> Point {
    var self_2659: Plane;
    var other_2297: AntiScalar;

    self_2659 = self_2658;
    other_2297 = other_2296;
    let _e4: Plane = self_2659;
    let _e5: AntiScalar = other_2297;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: Point = plane_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_line_geometric_quotient(self_2660: Plane, other_2298: Line) -> PointAndPlane {
    var self_2661: Plane;
    var other_2299: Line;

    self_2661 = self_2660;
    other_2299 = other_2298;
    let _e4: Plane = self_2661;
    let _e5: Line = other_2299;
    let _e6: Line = line_inverse(_e5);
    let _e7: PointAndPlane = plane_line_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_line_transformation(self_2662: Plane, other_2300: Line) -> Line {
    var self_2663: Plane;
    var other_2301: Line;

    self_2663 = self_2662;
    other_2301 = other_2300;
    let _e4: Plane = self_2663;
    let _e5: Line = other_2301;
    let _e6: PointAndPlane = plane_line_geometric_product(_e4, _e5);
    let _e7: Plane = self_2663;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: Motor = point_and_plane_plane_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn plane_motor_geometric_quotient(self_2664: Plane, other_2302: Motor) -> PointAndPlane {
    var self_2665: Plane;
    var other_2303: Motor;

    self_2665 = self_2664;
    other_2303 = other_2302;
    let _e4: Plane = self_2665;
    let _e5: Motor = other_2303;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: PointAndPlane = plane_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_motor_transformation(self_2666: Plane, other_2304: Motor) -> Motor {
    var self_2667: Plane;
    var other_2305: Motor;

    self_2667 = self_2666;
    other_2305 = other_2304;
    let _e4: Plane = self_2667;
    let _e5: Motor = other_2305;
    let _e6: PointAndPlane = plane_motor_geometric_product(_e4, _e5);
    let _e7: Plane = self_2667;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: Motor = point_and_plane_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn plane_multi_vector_geometric_quotient(self_2668: Plane, other_2306: MultiVector) -> MultiVector {
    var self_2669: Plane;
    var other_2307: MultiVector;

    self_2669 = self_2668;
    other_2307 = other_2306;
    let _e4: Plane = self_2669;
    let _e5: MultiVector = other_2307;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = plane_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_multi_vector_transformation(self_2670: Plane, other_2308: MultiVector) -> MultiVector {
    var self_2671: Plane;
    var other_2309: MultiVector;

    self_2671 = self_2670;
    other_2309 = other_2308;
    let _e4: Plane = self_2671;
    let _e5: MultiVector = other_2309;
    let _e6: MultiVector = plane_multi_vector_geometric_product(_e4, _e5);
    let _e7: Plane = self_2671;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn plane_point_and_plane_geometric_quotient(self_2672: Plane, other_2310: PointAndPlane) -> Motor {
    var self_2673: Plane;
    var other_2311: PointAndPlane;

    self_2673 = self_2672;
    other_2311 = other_2310;
    let _e4: Plane = self_2673;
    let _e5: PointAndPlane = other_2311;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: Motor = plane_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_point_and_plane_transformation(self_2674: Plane, other_2312: PointAndPlane) -> PointAndPlane {
    var self_2675: Plane;
    var other_2313: PointAndPlane;

    self_2675 = self_2674;
    other_2313 = other_2312;
    let _e4: Plane = self_2675;
    let _e5: PointAndPlane = other_2313;
    let _e6: Motor = plane_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Plane = self_2675;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: PointAndPlane = motor_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn plane_rotor_geometric_quotient(self_2676: Plane, other_2314: Rotor) -> PointAndPlane {
    var self_2677: Plane;
    var other_2315: Rotor;

    self_2677 = self_2676;
    other_2315 = other_2314;
    let _e4: Plane = self_2677;
    let _e5: Rotor = other_2315;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: PointAndPlane = plane_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn plane_rotor_transformation(self_2678: Plane, other_2316: Rotor) -> Rotor {
    var self_2679: Plane;
    var other_2317: Rotor;

    self_2679 = self_2678;
    other_2317 = other_2316;
    let _e4: Plane = self_2679;
    let _e5: Rotor = other_2317;
    let _e6: PointAndPlane = plane_rotor_geometric_product(_e4, _e5);
    let _e7: Plane = self_2679;
    let _e8: Plane = plane_reversal(_e7);
    let _e9: Motor = point_and_plane_plane_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn plane_scalar_geometric_quotient(self_2680: Plane, other_2318: Scalar) -> Plane {
    var self_2681: Plane;
    var other_2319: Scalar;

    self_2681 = self_2680;
    other_2319 = other_2318;
    let _e4: Plane = self_2681;
    let _e5: Scalar = other_2319;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Plane = plane_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_anti_scalar_geometric_quotient(self_2682: Point, other_2320: AntiScalar) -> Plane {
    var self_2683: Point;
    var other_2321: AntiScalar;

    self_2683 = self_2682;
    other_2321 = other_2320;
    let _e4: Point = self_2683;
    let _e5: AntiScalar = other_2321;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: Plane = point_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_line_geometric_quotient(self_2684: Point, other_2322: Line) -> PointAndPlane {
    var self_2685: Point;
    var other_2323: Line;

    self_2685 = self_2684;
    other_2323 = other_2322;
    let _e4: Point = self_2685;
    let _e5: Line = other_2323;
    let _e6: Line = line_inverse(_e5);
    let _e7: PointAndPlane = point_line_geometric_product(_e4, _e6);
    return _e7;
}

fn point_line_transformation(self_2686: Point, other_2324: Line) -> Line {
    var self_2687: Point;
    var other_2325: Line;

    self_2687 = self_2686;
    other_2325 = other_2324;
    let _e4: Point = self_2687;
    let _e5: Line = other_2325;
    let _e6: PointAndPlane = point_line_geometric_product(_e4, _e5);
    let _e7: Point = self_2687;
    let _e8: Point = point_reversal(_e7);
    let _e9: Motor = point_and_plane_point_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn point_motor_geometric_quotient(self_2688: Point, other_2326: Motor) -> PointAndPlane {
    var self_2689: Point;
    var other_2327: Motor;

    self_2689 = self_2688;
    other_2327 = other_2326;
    let _e4: Point = self_2689;
    let _e5: Motor = other_2327;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: PointAndPlane = point_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_motor_transformation(self_2690: Point, other_2328: Motor) -> Motor {
    var self_2691: Point;
    var other_2329: Motor;

    self_2691 = self_2690;
    other_2329 = other_2328;
    let _e4: Point = self_2691;
    let _e5: Motor = other_2329;
    let _e6: PointAndPlane = point_motor_geometric_product(_e4, _e5);
    let _e7: Point = self_2691;
    let _e8: Point = point_reversal(_e7);
    let _e9: Motor = point_and_plane_point_geometric_product(_e6, _e8);
    return _e9;
}

fn point_multi_vector_geometric_quotient(self_2692: Point, other_2330: MultiVector) -> MultiVector {
    var self_2693: Point;
    var other_2331: MultiVector;

    self_2693 = self_2692;
    other_2331 = other_2330;
    let _e4: Point = self_2693;
    let _e5: MultiVector = other_2331;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = point_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn point_multi_vector_transformation(self_2694: Point, other_2332: MultiVector) -> MultiVector {
    var self_2695: Point;
    var other_2333: MultiVector;

    self_2695 = self_2694;
    other_2333 = other_2332;
    let _e4: Point = self_2695;
    let _e5: MultiVector = other_2333;
    let _e6: MultiVector = point_multi_vector_geometric_product(_e4, _e5);
    let _e7: Point = self_2695;
    let _e8: Point = point_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_geometric_product(_e6, _e8);
    return _e9;
}

fn point_point_and_plane_geometric_quotient(self_2696: Point, other_2334: PointAndPlane) -> Motor {
    var self_2697: Point;
    var other_2335: PointAndPlane;

    self_2697 = self_2696;
    other_2335 = other_2334;
    let _e4: Point = self_2697;
    let _e5: PointAndPlane = other_2335;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: Motor = point_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn point_point_and_plane_transformation(self_2698: Point, other_2336: PointAndPlane) -> PointAndPlane {
    var self_2699: Point;
    var other_2337: PointAndPlane;

    self_2699 = self_2698;
    other_2337 = other_2336;
    let _e4: Point = self_2699;
    let _e5: PointAndPlane = other_2337;
    let _e6: Motor = point_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Point = self_2699;
    let _e8: Point = point_reversal(_e7);
    let _e9: PointAndPlane = motor_point_geometric_product(_e6, _e8);
    return _e9;
}

fn point_rotor_geometric_quotient(self_2700: Point, other_2338: Rotor) -> PointAndPlane {
    var self_2701: Point;
    var other_2339: Rotor;

    self_2701 = self_2700;
    other_2339 = other_2338;
    let _e4: Point = self_2701;
    let _e5: Rotor = other_2339;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: PointAndPlane = point_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_rotor_transformation(self_2702: Point, other_2340: Rotor) -> Rotor {
    var self_2703: Point;
    var other_2341: Rotor;

    self_2703 = self_2702;
    other_2341 = other_2340;
    let _e4: Point = self_2703;
    let _e5: Rotor = other_2341;
    let _e6: PointAndPlane = point_rotor_geometric_product(_e4, _e5);
    let _e7: Point = self_2703;
    let _e8: Point = point_reversal(_e7);
    let _e9: Motor = point_and_plane_point_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn point_scalar_geometric_quotient(self_2704: Point, other_2342: Scalar) -> Point {
    var self_2705: Point;
    var other_2343: Scalar;

    self_2705 = self_2704;
    other_2343 = other_2342;
    let _e4: Point = self_2705;
    let _e5: Scalar = other_2343;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Point = point_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_anti_scalar_geometric_quotient(self_2706: PointAndPlane, other_2344: AntiScalar) -> PointAndPlane {
    var self_2707: PointAndPlane;
    var other_2345: AntiScalar;

    self_2707 = self_2706;
    other_2345 = other_2344;
    let _e4: PointAndPlane = self_2707;
    let _e5: AntiScalar = other_2345;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_anti_scalar_transformation(self_2708: PointAndPlane, other_2346: AntiScalar) -> AntiScalar {
    var self_2709: PointAndPlane;
    var other_2347: AntiScalar;

    self_2709 = self_2708;
    other_2347 = other_2346;
    let _e4: PointAndPlane = self_2709;
    let _e5: AntiScalar = other_2347;
    let _e6: PointAndPlane = point_and_plane_anti_scalar_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2709;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: AntiScalar = motor_anti_scalar_into(_e9);
    return _e10;
}

fn point_and_plane_ideal_point_geometric_quotient(self_2710: PointAndPlane, other_2348: IdealPoint) -> PointAndPlane {
    var self_2711: PointAndPlane;
    var other_2349: IdealPoint;

    self_2711 = self_2710;
    other_2349 = other_2348;
    let _e4: PointAndPlane = self_2711;
    let _e5: IdealPoint = other_2349;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_ideal_point_transformation(self_2712: PointAndPlane, other_2350: IdealPoint) -> IdealPoint {
    var self_2713: PointAndPlane;
    var other_2351: IdealPoint;

    self_2713 = self_2712;
    other_2351 = other_2350;
    let _e4: PointAndPlane = self_2713;
    let _e5: IdealPoint = other_2351;
    let _e6: PointAndPlane = point_and_plane_ideal_point_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2713;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: IdealPoint = motor_ideal_point_into(_e9);
    return _e10;
}

fn point_and_plane_line_geometric_quotient(self_2714: PointAndPlane, other_2352: Line) -> PointAndPlane {
    var self_2715: PointAndPlane;
    var other_2353: Line;

    self_2715 = self_2714;
    other_2353 = other_2352;
    let _e4: PointAndPlane = self_2715;
    let _e5: Line = other_2353;
    let _e6: Line = line_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_line_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_line_transformation(self_2716: PointAndPlane, other_2354: Line) -> Line {
    var self_2717: PointAndPlane;
    var other_2355: Line;

    self_2717 = self_2716;
    other_2355 = other_2354;
    let _e4: PointAndPlane = self_2717;
    let _e5: Line = other_2355;
    let _e6: PointAndPlane = point_and_plane_line_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2717;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn point_and_plane_motor_geometric_quotient(self_2718: PointAndPlane, other_2356: Motor) -> PointAndPlane {
    var self_2719: PointAndPlane;
    var other_2357: Motor;

    self_2719 = self_2718;
    other_2357 = other_2356;
    let _e4: PointAndPlane = self_2719;
    let _e5: Motor = other_2357;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_motor_transformation(self_2720: PointAndPlane, other_2358: Motor) -> Motor {
    var self_2721: PointAndPlane;
    var other_2359: Motor;

    self_2721 = self_2720;
    other_2359 = other_2358;
    let _e4: PointAndPlane = self_2721;
    let _e5: Motor = other_2359;
    let _e6: PointAndPlane = point_and_plane_motor_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2721;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn point_and_plane_multi_vector_geometric_quotient(self_2722: PointAndPlane, other_2360: MultiVector) -> MultiVector {
    var self_2723: PointAndPlane;
    var other_2361: MultiVector;

    self_2723 = self_2722;
    other_2361 = other_2360;
    let _e4: PointAndPlane = self_2723;
    let _e5: MultiVector = other_2361;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = point_and_plane_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_multi_vector_transformation(self_2724: PointAndPlane, other_2362: MultiVector) -> MultiVector {
    var self_2725: PointAndPlane;
    var other_2363: MultiVector;

    self_2725 = self_2724;
    other_2363 = other_2362;
    let _e4: PointAndPlane = self_2725;
    let _e5: MultiVector = other_2363;
    let _e6: MultiVector = point_and_plane_multi_vector_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2725;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: MultiVector = multi_vector_point_and_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn point_and_plane_plane_geometric_quotient(self_2726: PointAndPlane, other_2364: Plane) -> Motor {
    var self_2727: PointAndPlane;
    var other_2365: Plane;

    self_2727 = self_2726;
    other_2365 = other_2364;
    let _e4: PointAndPlane = self_2727;
    let _e5: Plane = other_2365;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Motor = point_and_plane_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_plane_transformation(self_2728: PointAndPlane, other_2366: Plane) -> Plane {
    var self_2729: PointAndPlane;
    var other_2367: Plane;

    self_2729 = self_2728;
    other_2367 = other_2366;
    let _e4: PointAndPlane = self_2729;
    let _e5: Plane = other_2367;
    let _e6: Motor = point_and_plane_plane_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2729;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: PointAndPlane = motor_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Plane = point_and_plane_plane_into(_e9);
    return _e10;
}

fn point_and_plane_point_geometric_quotient(self_2730: PointAndPlane, other_2368: Point) -> Motor {
    var self_2731: PointAndPlane;
    var other_2369: Point;

    self_2731 = self_2730;
    other_2369 = other_2368;
    let _e4: PointAndPlane = self_2731;
    let _e5: Point = other_2369;
    let _e6: Point = point_inverse(_e5);
    let _e7: Motor = point_and_plane_point_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_point_transformation(self_2732: PointAndPlane, other_2370: Point) -> Point {
    var self_2733: PointAndPlane;
    var other_2371: Point;

    self_2733 = self_2732;
    other_2371 = other_2370;
    let _e4: PointAndPlane = self_2733;
    let _e5: Point = other_2371;
    let _e6: Motor = point_and_plane_point_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2733;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: PointAndPlane = motor_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Point = point_and_plane_point_into(_e9);
    return _e10;
}

fn point_and_plane_point_and_plane_geometric_quotient(self_2734: PointAndPlane, other_2372: PointAndPlane) -> Motor {
    var self_2735: PointAndPlane;
    var other_2373: PointAndPlane;

    self_2735 = self_2734;
    other_2373 = other_2372;
    let _e4: PointAndPlane = self_2735;
    let _e5: PointAndPlane = other_2373;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: Motor = point_and_plane_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_point_and_plane_transformation(self_2736: PointAndPlane, other_2374: PointAndPlane) -> PointAndPlane {
    var self_2737: PointAndPlane;
    var other_2375: PointAndPlane;

    self_2737 = self_2736;
    other_2375 = other_2374;
    let _e4: PointAndPlane = self_2737;
    let _e5: PointAndPlane = other_2375;
    let _e6: Motor = point_and_plane_point_and_plane_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2737;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: PointAndPlane = motor_point_and_plane_geometric_product(_e6, _e8);
    return _e9;
}

fn point_and_plane_rotor_geometric_quotient(self_2738: PointAndPlane, other_2376: Rotor) -> PointAndPlane {
    var self_2739: PointAndPlane;
    var other_2377: Rotor;

    self_2739 = self_2738;
    other_2377 = other_2376;
    let _e4: PointAndPlane = self_2739;
    let _e5: Rotor = other_2377;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_rotor_transformation(self_2740: PointAndPlane, other_2378: Rotor) -> Rotor {
    var self_2741: PointAndPlane;
    var other_2379: Rotor;

    self_2741 = self_2740;
    other_2379 = other_2378;
    let _e4: PointAndPlane = self_2741;
    let _e5: Rotor = other_2379;
    let _e6: PointAndPlane = point_and_plane_rotor_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2741;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn point_and_plane_scalar_geometric_quotient(self_2742: PointAndPlane, other_2380: Scalar) -> PointAndPlane {
    var self_2743: PointAndPlane;
    var other_2381: Scalar;

    self_2743 = self_2742;
    other_2381 = other_2380;
    let _e4: PointAndPlane = self_2743;
    let _e5: Scalar = other_2381;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_scalar_transformation(self_2744: PointAndPlane, other_2382: Scalar) -> Scalar {
    var self_2745: PointAndPlane;
    var other_2383: Scalar;

    self_2745 = self_2744;
    other_2383 = other_2382;
    let _e4: PointAndPlane = self_2745;
    let _e5: Scalar = other_2383;
    let _e6: PointAndPlane = point_and_plane_scalar_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2745;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Scalar = motor_scalar_into(_e9);
    return _e10;
}

fn point_and_plane_translator_geometric_quotient(self_2746: PointAndPlane, other_2384: Translator) -> PointAndPlane {
    var self_2747: PointAndPlane;
    var other_2385: Translator;

    self_2747 = self_2746;
    other_2385 = other_2384;
    let _e4: PointAndPlane = self_2747;
    let _e5: Translator = other_2385;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: PointAndPlane = point_and_plane_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn point_and_plane_translator_transformation(self_2748: PointAndPlane, other_2386: Translator) -> Translator {
    var self_2749: PointAndPlane;
    var other_2387: Translator;

    self_2749 = self_2748;
    other_2387 = other_2386;
    let _e4: PointAndPlane = self_2749;
    let _e5: Translator = other_2387;
    let _e6: PointAndPlane = point_and_plane_translator_geometric_product(_e4, _e5);
    let _e7: PointAndPlane = self_2749;
    let _e8: PointAndPlane = point_and_plane_reversal(_e7);
    let _e9: Motor = point_and_plane_point_and_plane_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn rotor_line_geometric_quotient(self_2750: Rotor, other_2388: Line) -> Motor {
    var self_2751: Rotor;
    var other_2389: Line;

    self_2751 = self_2750;
    other_2389 = other_2388;
    let _e4: Rotor = self_2751;
    let _e5: Line = other_2389;
    let _e6: Line = line_inverse(_e5);
    let _e7: Motor = rotor_line_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_line_transformation(self_2752: Rotor, other_2390: Line) -> Line {
    var self_2753: Rotor;
    var other_2391: Line;

    self_2753 = self_2752;
    other_2391 = other_2390;
    let _e4: Rotor = self_2753;
    let _e5: Line = other_2391;
    let _e6: Motor = rotor_line_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2753;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Motor = motor_rotor_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn rotor_motor_geometric_quotient(self_2754: Rotor, other_2392: Motor) -> Motor {
    var self_2755: Rotor;
    var other_2393: Motor;

    self_2755 = self_2754;
    other_2393 = other_2392;
    let _e4: Rotor = self_2755;
    let _e5: Motor = other_2393;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = rotor_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_motor_transformation(self_2756: Rotor, other_2394: Motor) -> Motor {
    var self_2757: Rotor;
    var other_2395: Motor;

    self_2757 = self_2756;
    other_2395 = other_2394;
    let _e4: Rotor = self_2757;
    let _e5: Motor = other_2395;
    let _e6: Motor = rotor_motor_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2757;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Motor = motor_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_multi_vector_geometric_quotient(self_2758: Rotor, other_2396: MultiVector) -> MultiVector {
    var self_2759: Rotor;
    var other_2397: MultiVector;

    self_2759 = self_2758;
    other_2397 = other_2396;
    let _e4: Rotor = self_2759;
    let _e5: MultiVector = other_2397;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = rotor_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_multi_vector_transformation(self_2760: Rotor, other_2398: MultiVector) -> MultiVector {
    var self_2761: Rotor;
    var other_2399: MultiVector;

    self_2761 = self_2760;
    other_2399 = other_2398;
    let _e4: Rotor = self_2761;
    let _e5: MultiVector = other_2399;
    let _e6: MultiVector = rotor_multi_vector_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2761;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: MultiVector = multi_vector_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_plane_geometric_quotient(self_2762: Rotor, other_2400: Plane) -> PointAndPlane {
    var self_2763: Rotor;
    var other_2401: Plane;

    self_2763 = self_2762;
    other_2401 = other_2400;
    let _e4: Rotor = self_2763;
    let _e5: Plane = other_2401;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: PointAndPlane = rotor_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_plane_transformation(self_2764: Rotor, other_2402: Plane) -> Plane {
    var self_2765: Rotor;
    var other_2403: Plane;

    self_2765 = self_2764;
    other_2403 = other_2402;
    let _e4: Rotor = self_2765;
    let _e5: Plane = other_2403;
    let _e6: PointAndPlane = rotor_plane_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2765;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_rotor_geometric_product(_e6, _e8);
    let _e10: Plane = point_and_plane_plane_into(_e9);
    return _e10;
}

fn rotor_point_geometric_quotient(self_2766: Rotor, other_2404: Point) -> PointAndPlane {
    var self_2767: Rotor;
    var other_2405: Point;

    self_2767 = self_2766;
    other_2405 = other_2404;
    let _e4: Rotor = self_2767;
    let _e5: Point = other_2405;
    let _e6: Point = point_inverse(_e5);
    let _e7: PointAndPlane = rotor_point_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_point_transformation(self_2768: Rotor, other_2406: Point) -> Point {
    var self_2769: Rotor;
    var other_2407: Point;

    self_2769 = self_2768;
    other_2407 = other_2406;
    let _e4: Rotor = self_2769;
    let _e5: Point = other_2407;
    let _e6: PointAndPlane = rotor_point_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2769;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_rotor_geometric_product(_e6, _e8);
    let _e10: Point = point_and_plane_point_into(_e9);
    return _e10;
}

fn rotor_point_and_plane_geometric_quotient(self_2770: Rotor, other_2408: PointAndPlane) -> PointAndPlane {
    var self_2771: Rotor;
    var other_2409: PointAndPlane;

    self_2771 = self_2770;
    other_2409 = other_2408;
    let _e4: Rotor = self_2771;
    let _e5: PointAndPlane = other_2409;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = rotor_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_point_and_plane_transformation(self_2772: Rotor, other_2410: PointAndPlane) -> PointAndPlane {
    var self_2773: Rotor;
    var other_2411: PointAndPlane;

    self_2773 = self_2772;
    other_2411 = other_2410;
    let _e4: Rotor = self_2773;
    let _e5: PointAndPlane = other_2411;
    let _e6: PointAndPlane = rotor_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2773;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_powi(self_2774: Rotor, exponent_4: i32) -> Rotor {
    var self_2775: Rotor;
    var exponent_5: i32;
    var local_2: Rotor;
    var x_2: Rotor;
    var y_2: Rotor;
    var n_2: i32;

    self_2775 = self_2774;
    exponent_5 = exponent_4;
    let _e4: i32 = exponent_5;
    if (_e4 == 0) {
        {
            let _e7: Rotor = rotor_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_5;
    if (_e8 < 0) {
        let _e11: Rotor = self_2775;
        let _e12: Rotor = rotor_inverse(_e11);
        local_2 = _e12;
    } else {
        let _e14: Rotor = self_2775;
        local_2 = _e14;
    }
    let _e15: Rotor = local_2;
    x_2 = _e15;
    let _e17: Rotor = rotor_one();
    y_2 = _e17;
    let _e19: i32 = exponent_5;
    n_2 = abs(_e19);
    loop {
        let _e23: i32 = n_2;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_2;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Rotor = x_2;
                    let _e32: Rotor = y_2;
                    let _e33: Rotor = rotor_rotor_geometric_product(_e31, _e32);
                    y_2 = _e33;
                }
            }
            let _e34: Rotor = x_2;
            let _e35: Rotor = x_2;
            let _e36: Rotor = rotor_rotor_geometric_product(_e34, _e35);
            x_2 = _e36;
            let _e37: i32 = n_2;
            n_2 = (_e37 >> u32(1));
        }
    }
    let _e41: Rotor = x_2;
    let _e42: Rotor = y_2;
    let _e43: Rotor = rotor_rotor_geometric_product(_e41, _e42);
    return _e43;
}

fn rotor_rotor_geometric_quotient(self_2776: Rotor, other_2412: Rotor) -> Rotor {
    var self_2777: Rotor;
    var other_2413: Rotor;

    self_2777 = self_2776;
    other_2413 = other_2412;
    let _e4: Rotor = self_2777;
    let _e5: Rotor = other_2413;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: Rotor = rotor_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_rotor_transformation(self_2778: Rotor, other_2414: Rotor) -> Rotor {
    var self_2779: Rotor;
    var other_2415: Rotor;

    self_2779 = self_2778;
    other_2415 = other_2414;
    let _e4: Rotor = self_2779;
    let _e5: Rotor = other_2415;
    let _e6: Rotor = rotor_rotor_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2779;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Rotor = rotor_rotor_geometric_product(_e6, _e8);
    return _e9;
}

fn rotor_scalar_geometric_quotient(self_2780: Rotor, other_2416: Scalar) -> Rotor {
    var self_2781: Rotor;
    var other_2417: Scalar;

    self_2781 = self_2780;
    other_2417 = other_2416;
    let _e4: Rotor = self_2781;
    let _e5: Scalar = other_2417;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Rotor = rotor_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_scalar_transformation(self_2782: Rotor, other_2418: Scalar) -> Scalar {
    var self_2783: Rotor;
    var other_2419: Scalar;

    self_2783 = self_2782;
    other_2419 = other_2418;
    let _e4: Rotor = self_2783;
    let _e5: Scalar = other_2419;
    let _e6: Rotor = rotor_scalar_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2783;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Rotor = rotor_rotor_geometric_product(_e6, _e8);
    let _e10: Scalar = rotor_scalar_into(_e9);
    return _e10;
}

fn rotor_translator_geometric_quotient(self_2784: Rotor, other_2420: Translator) -> Motor {
    var self_2785: Rotor;
    var other_2421: Translator;

    self_2785 = self_2784;
    other_2421 = other_2420;
    let _e4: Rotor = self_2785;
    let _e5: Translator = other_2421;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Motor = rotor_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn rotor_translator_transformation(self_2786: Rotor, other_2422: Translator) -> Translator {
    var self_2787: Rotor;
    var other_2423: Translator;

    self_2787 = self_2786;
    other_2423 = other_2422;
    let _e4: Rotor = self_2787;
    let _e5: Translator = other_2423;
    let _e6: Motor = rotor_translator_geometric_product(_e4, _e5);
    let _e7: Rotor = self_2787;
    let _e8: Rotor = rotor_reversal(_e7);
    let _e9: Motor = motor_rotor_geometric_product(_e6, _e8);
    let _e10: Translator = motor_translator_into(_e9);
    return _e10;
}

fn scalar_anti_scalar_geometric_quotient(self_2788: Scalar, other_2424: AntiScalar) -> AntiScalar {
    var self_2789: Scalar;
    var other_2425: AntiScalar;

    self_2789 = self_2788;
    other_2425 = other_2424;
    let _e4: Scalar = self_2789;
    let _e5: AntiScalar = other_2425;
    let _e6: AntiScalar = anti_scalar_inverse(_e5);
    let _e7: AntiScalar = scalar_anti_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_anti_scalar_transformation(self_2790: Scalar, other_2426: AntiScalar) -> AntiScalar {
    var self_2791: Scalar;
    var other_2427: AntiScalar;

    self_2791 = self_2790;
    other_2427 = other_2426;
    let _e4: Scalar = self_2791;
    let _e5: AntiScalar = other_2427;
    let _e6: AntiScalar = scalar_anti_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2791;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: AntiScalar = anti_scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_ideal_point_geometric_quotient(self_2792: Scalar, other_2428: IdealPoint) -> IdealPoint {
    var self_2793: Scalar;
    var other_2429: IdealPoint;

    self_2793 = self_2792;
    other_2429 = other_2428;
    let _e4: Scalar = self_2793;
    let _e5: IdealPoint = other_2429;
    let _e6: IdealPoint = ideal_point_inverse(_e5);
    let _e7: IdealPoint = scalar_ideal_point_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_ideal_point_transformation(self_2794: Scalar, other_2430: IdealPoint) -> IdealPoint {
    var self_2795: Scalar;
    var other_2431: IdealPoint;

    self_2795 = self_2794;
    other_2431 = other_2430;
    let _e4: Scalar = self_2795;
    let _e5: IdealPoint = other_2431;
    let _e6: IdealPoint = scalar_ideal_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2795;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: IdealPoint = ideal_point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_line_geometric_quotient(self_2796: Scalar, other_2432: Line) -> Line {
    var self_2797: Scalar;
    var other_2433: Line;

    self_2797 = self_2796;
    other_2433 = other_2432;
    let _e4: Scalar = self_2797;
    let _e5: Line = other_2433;
    let _e6: Line = line_inverse(_e5);
    let _e7: Line = scalar_line_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_line_transformation(self_2798: Scalar, other_2434: Line) -> Line {
    var self_2799: Scalar;
    var other_2435: Line;

    self_2799 = self_2798;
    other_2435 = other_2434;
    let _e4: Scalar = self_2799;
    let _e5: Line = other_2435;
    let _e6: Line = scalar_line_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2799;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Line = line_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_motor_geometric_quotient(self_2800: Scalar, other_2436: Motor) -> Motor {
    var self_2801: Scalar;
    var other_2437: Motor;

    self_2801 = self_2800;
    other_2437 = other_2436;
    let _e4: Scalar = self_2801;
    let _e5: Motor = other_2437;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = scalar_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_motor_transformation(self_2802: Scalar, other_2438: Motor) -> Motor {
    var self_2803: Scalar;
    var other_2439: Motor;

    self_2803 = self_2802;
    other_2439 = other_2438;
    let _e4: Scalar = self_2803;
    let _e5: Motor = other_2439;
    let _e6: Motor = scalar_motor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2803;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Motor = motor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_multi_vector_geometric_quotient(self_2804: Scalar, other_2440: MultiVector) -> MultiVector {
    var self_2805: Scalar;
    var other_2441: MultiVector;

    self_2805 = self_2804;
    other_2441 = other_2440;
    let _e4: Scalar = self_2805;
    let _e5: MultiVector = other_2441;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = scalar_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_multi_vector_transformation(self_2806: Scalar, other_2442: MultiVector) -> MultiVector {
    var self_2807: Scalar;
    var other_2443: MultiVector;

    self_2807 = self_2806;
    other_2443 = other_2442;
    let _e4: Scalar = self_2807;
    let _e5: MultiVector = other_2443;
    let _e6: MultiVector = scalar_multi_vector_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2807;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: MultiVector = multi_vector_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_plane_geometric_quotient(self_2808: Scalar, other_2444: Plane) -> Plane {
    var self_2809: Scalar;
    var other_2445: Plane;

    self_2809 = self_2808;
    other_2445 = other_2444;
    let _e4: Scalar = self_2809;
    let _e5: Plane = other_2445;
    let _e6: Plane = plane_inverse(_e5);
    let _e7: Plane = scalar_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_plane_transformation(self_2810: Scalar, other_2446: Plane) -> Plane {
    var self_2811: Scalar;
    var other_2447: Plane;

    self_2811 = self_2810;
    other_2447 = other_2446;
    let _e4: Scalar = self_2811;
    let _e5: Plane = other_2447;
    let _e6: Plane = scalar_plane_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2811;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Plane = plane_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_point_geometric_quotient(self_2812: Scalar, other_2448: Point) -> Point {
    var self_2813: Scalar;
    var other_2449: Point;

    self_2813 = self_2812;
    other_2449 = other_2448;
    let _e4: Scalar = self_2813;
    let _e5: Point = other_2449;
    let _e6: Point = point_inverse(_e5);
    let _e7: Point = scalar_point_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_point_transformation(self_2814: Scalar, other_2450: Point) -> Point {
    var self_2815: Scalar;
    var other_2451: Point;

    self_2815 = self_2814;
    other_2451 = other_2450;
    let _e4: Scalar = self_2815;
    let _e5: Point = other_2451;
    let _e6: Point = scalar_point_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2815;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Point = point_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_point_and_plane_geometric_quotient(self_2816: Scalar, other_2452: PointAndPlane) -> PointAndPlane {
    var self_2817: Scalar;
    var other_2453: PointAndPlane;

    self_2817 = self_2816;
    other_2453 = other_2452;
    let _e4: Scalar = self_2817;
    let _e5: PointAndPlane = other_2453;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = scalar_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_point_and_plane_transformation(self_2818: Scalar, other_2454: PointAndPlane) -> PointAndPlane {
    var self_2819: Scalar;
    var other_2455: PointAndPlane;

    self_2819 = self_2818;
    other_2455 = other_2454;
    let _e4: Scalar = self_2819;
    let _e5: PointAndPlane = other_2455;
    let _e6: PointAndPlane = scalar_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2819;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_rotor_geometric_quotient(self_2820: Scalar, other_2456: Rotor) -> Rotor {
    var self_2821: Scalar;
    var other_2457: Rotor;

    self_2821 = self_2820;
    other_2457 = other_2456;
    let _e4: Scalar = self_2821;
    let _e5: Rotor = other_2457;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: Rotor = scalar_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_rotor_transformation(self_2822: Scalar, other_2458: Rotor) -> Rotor {
    var self_2823: Scalar;
    var other_2459: Rotor;

    self_2823 = self_2822;
    other_2459 = other_2458;
    let _e4: Scalar = self_2823;
    let _e5: Rotor = other_2459;
    let _e6: Rotor = scalar_rotor_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2823;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Rotor = rotor_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_powi(self_2824: Scalar, exponent_6: i32) -> Scalar {
    var self_2825: Scalar;
    var exponent_7: i32;
    var local_3: Scalar;
    var x_3: Scalar;
    var y_3: Scalar;
    var n_3: i32;

    self_2825 = self_2824;
    exponent_7 = exponent_6;
    let _e4: i32 = exponent_7;
    if (_e4 == 0) {
        {
            let _e7: Scalar = scalar_one();
            return _e7;
        }
    }
    let _e8: i32 = exponent_7;
    if (_e8 < 0) {
        let _e11: Scalar = self_2825;
        let _e12: Scalar = scalar_inverse(_e11);
        local_3 = _e12;
    } else {
        let _e14: Scalar = self_2825;
        local_3 = _e14;
    }
    let _e15: Scalar = local_3;
    x_3 = _e15;
    let _e17: Scalar = scalar_one();
    y_3 = _e17;
    let _e19: i32 = exponent_7;
    n_3 = abs(_e19);
    loop {
        let _e23: i32 = n_3;
        if !((1 < _e23)) {
            break;
        }
        {
            let _e26: i32 = n_3;
            if ((_e26 & 1) == 1) {
                {
                    let _e31: Scalar = x_3;
                    let _e32: Scalar = y_3;
                    let _e33: Scalar = scalar_scalar_geometric_product(_e31, _e32);
                    y_3 = _e33;
                }
            }
            let _e34: Scalar = x_3;
            let _e35: Scalar = x_3;
            let _e36: Scalar = scalar_scalar_geometric_product(_e34, _e35);
            x_3 = _e36;
            let _e37: i32 = n_3;
            n_3 = (_e37 >> u32(1));
        }
    }
    let _e41: Scalar = x_3;
    let _e42: Scalar = y_3;
    let _e43: Scalar = scalar_scalar_geometric_product(_e41, _e42);
    return _e43;
}

fn scalar_scalar_geometric_quotient(self_2826: Scalar, other_2460: Scalar) -> Scalar {
    var self_2827: Scalar;
    var other_2461: Scalar;

    self_2827 = self_2826;
    other_2461 = other_2460;
    let _e4: Scalar = self_2827;
    let _e5: Scalar = other_2461;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Scalar = scalar_scalar_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_scalar_transformation(self_2828: Scalar, other_2462: Scalar) -> Scalar {
    var self_2829: Scalar;
    var other_2463: Scalar;

    self_2829 = self_2828;
    other_2463 = other_2462;
    let _e4: Scalar = self_2829;
    let _e5: Scalar = other_2463;
    let _e6: Scalar = scalar_scalar_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2829;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Scalar = scalar_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn scalar_translator_geometric_quotient(self_2830: Scalar, other_2464: Translator) -> Translator {
    var self_2831: Scalar;
    var other_2465: Translator;

    self_2831 = self_2830;
    other_2465 = other_2464;
    let _e4: Scalar = self_2831;
    let _e5: Translator = other_2465;
    let _e6: Translator = translator_inverse(_e5);
    let _e7: Translator = scalar_translator_geometric_product(_e4, _e6);
    return _e7;
}

fn scalar_translator_transformation(self_2832: Scalar, other_2466: Translator) -> Translator {
    var self_2833: Scalar;
    var other_2467: Translator;

    self_2833 = self_2832;
    other_2467 = other_2466;
    let _e4: Scalar = self_2833;
    let _e5: Translator = other_2467;
    let _e6: Translator = scalar_translator_geometric_product(_e4, _e5);
    let _e7: Scalar = self_2833;
    let _e8: Scalar = scalar_reversal(_e7);
    let _e9: Translator = translator_scalar_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_line_geometric_quotient(self_2834: Translator, other_2468: Line) -> Motor {
    var self_2835: Translator;
    var other_2469: Line;

    self_2835 = self_2834;
    other_2469 = other_2468;
    let _e4: Translator = self_2835;
    let _e5: Line = other_2469;
    let _e6: Line = line_inverse(_e5);
    let _e7: Motor = translator_line_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_line_transformation(self_2836: Translator, other_2470: Line) -> Line {
    var self_2837: Translator;
    var other_2471: Line;

    self_2837 = self_2836;
    other_2471 = other_2470;
    let _e4: Translator = self_2837;
    let _e5: Line = other_2471;
    let _e6: Motor = translator_line_geometric_product(_e4, _e5);
    let _e7: Translator = self_2837;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Motor = motor_translator_geometric_product(_e6, _e8);
    let _e10: Line = motor_line_into(_e9);
    return _e10;
}

fn translator_motor_geometric_quotient(self_2838: Translator, other_2472: Motor) -> Motor {
    var self_2839: Translator;
    var other_2473: Motor;

    self_2839 = self_2838;
    other_2473 = other_2472;
    let _e4: Translator = self_2839;
    let _e5: Motor = other_2473;
    let _e6: Motor = motor_inverse(_e5);
    let _e7: Motor = translator_motor_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_motor_transformation(self_2840: Translator, other_2474: Motor) -> Motor {
    var self_2841: Translator;
    var other_2475: Motor;

    self_2841 = self_2840;
    other_2475 = other_2474;
    let _e4: Translator = self_2841;
    let _e5: Motor = other_2475;
    let _e6: Motor = translator_motor_geometric_product(_e4, _e5);
    let _e7: Translator = self_2841;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Motor = motor_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_multi_vector_geometric_quotient(self_2842: Translator, other_2476: MultiVector) -> MultiVector {
    var self_2843: Translator;
    var other_2477: MultiVector;

    self_2843 = self_2842;
    other_2477 = other_2476;
    let _e4: Translator = self_2843;
    let _e5: MultiVector = other_2477;
    let _e6: MultiVector = multi_vector_inverse(_e5);
    let _e7: MultiVector = translator_multi_vector_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_multi_vector_transformation(self_2844: Translator, other_2478: MultiVector) -> MultiVector {
    var self_2845: Translator;
    var other_2479: MultiVector;

    self_2845 = self_2844;
    other_2479 = other_2478;
    let _e4: Translator = self_2845;
    let _e5: MultiVector = other_2479;
    let _e6: MultiVector = translator_multi_vector_geometric_product(_e4, _e5);
    let _e7: Translator = self_2845;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: MultiVector = multi_vector_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_point_and_plane_geometric_quotient(self_2846: Translator, other_2480: PointAndPlane) -> PointAndPlane {
    var self_2847: Translator;
    var other_2481: PointAndPlane;

    self_2847 = self_2846;
    other_2481 = other_2480;
    let _e4: Translator = self_2847;
    let _e5: PointAndPlane = other_2481;
    let _e6: PointAndPlane = point_and_plane_inverse(_e5);
    let _e7: PointAndPlane = translator_point_and_plane_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_point_and_plane_transformation(self_2848: Translator, other_2482: PointAndPlane) -> PointAndPlane {
    var self_2849: Translator;
    var other_2483: PointAndPlane;

    self_2849 = self_2848;
    other_2483 = other_2482;
    let _e4: Translator = self_2849;
    let _e5: PointAndPlane = other_2483;
    let _e6: PointAndPlane = translator_point_and_plane_geometric_product(_e4, _e5);
    let _e7: Translator = self_2849;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: PointAndPlane = point_and_plane_translator_geometric_product(_e6, _e8);
    return _e9;
}

fn translator_rotor_geometric_quotient(self_2850: Translator, other_2484: Rotor) -> Motor {
    var self_2851: Translator;
    var other_2485: Rotor;

    self_2851 = self_2850;
    other_2485 = other_2484;
    let _e4: Translator = self_2851;
    let _e5: Rotor = other_2485;
    let _e6: Rotor = rotor_inverse(_e5);
    let _e7: Motor = translator_rotor_geometric_product(_e4, _e6);
    return _e7;
}

fn translator_rotor_transformation(self_2852: Translator, other_2486: Rotor) -> Rotor {
    var self_2853: Translator;
    var other_2487: Rotor;

    self_2853 = self_2852;
    other_2487 = other_2486;
    let _e4: Translator = self_2853;
    let _e5: Rotor = other_2487;
    let _e6: Motor = translator_rotor_geometric_product(_e4, _e5);
    let _e7: Translator = self_2853;
    let _e8: Translator = translator_reversal(_e7);
    let _e9: Motor = motor_translator_geometric_product(_e6, _e8);
    let _e10: Rotor = motor_rotor_into(_e9);
    return _e10;
}

fn translator_scalar_geometric_quotient(self_2854: Translator, other_2488: Scalar) -> Translator {
    var self_2855: Translator;
    var other_2489: Scalar;

    self_2855 = self_2854;
    other_2489 = other_2488;
    let _e4: Translator = self_2855;
    let _e5: Scalar = other_2489;
    let _e6: Scalar = scalar_inverse(_e5);
    let _e7: Translator = translator_scalar_geometric_product(_e4, _e6);
    return _e7;
}

